package routines;

import java.awt.image.BufferedImage;
import java.io.ByteArrayInputStream;
import java.io.ByteArrayOutputStream;
import java.io.File;
import java.io.IOException;
import java.io.InputStream;

import javax.imageio.ImageIO;

import org.imgscalr.Scalr;

//import sun.misc.BASE64Decoder;
import java.util.Base64;

/*
 * user specification: the function's comment should contain keys as follows: 1. write about the function's comment.but
 * it must be before the "{talendTypes}" key.
 * 
 * 2. {talendTypes} 's value must be talend Type, it is required . its value should be one of: String, char | Character,
 * long | Long, int | Integer, boolean | Boolean, byte | Byte, Date, double | Double, float | Float, Object, short |
 * Short
 * 
 * 3. {Category} define a category for the Function. it is required. its value is user-defined .
 * 
 * 4. {param} 's format is: {param} <type>[(<default value or closed list values>)] <name>[ : <comment>]
 * 
 * <type> 's value should be one of: string, int, list, double, object, boolean, long, char, date. <name>'s value is the
 * Function's parameter name. the {param} is optional. so if you the Function without the parameters. the {param} don't
 * added. you can have many parameters for the Function.
 * 
 * 5. {example} gives a example for the Function. it is optional.
 */
public class IPAS {
	
	
	public static byte[] base64toByteArray(String image) throws Exception {
		byte[] decodedBytes = Base64.getMimeDecoder().decode(image);
		//Decoder decoder = new Decoder(false, false);
		//byte[] decodedBytes = java.util.Base64.Decoderdecoder.decodeBuffer(image);
		return decodedBytes;
	}

	public static byte[] resize(byte[] imageInByte, int sizeMax)
			throws Exception {

		ImageIO.scanForPlugins();
		try { 
			InputStream in = new ByteArrayInputStream(imageInByte);
			BufferedImage originalImage = ImageIO.read(in);
			
			int width = originalImage.getWidth();
			int height = originalImage.getHeight();
	
			BufferedImage resizedImage;
			if (width > sizeMax || height > sizeMax)
				resizedImage = Scalr.resize(originalImage, sizeMax);		
			else
				resizedImage = originalImage;
	
			ByteArrayOutputStream baos = new ByteArrayOutputStream();
			ImageIO.write(resizedImage, "jpg", baos);
			baos.flush();
			imageInByte = baos.toByteArray();
			baos.close();
			resizedImage.flush();
			originalImage.flush();

			return imageInByte;
		} catch (Exception e) {
			System.out.println ("image format error. deleting");
			return null;
		}
		
	}

	public static void byteArrayToFile(byte[] input, String filepath)
			throws Exception {
		java.io.File fp = new java.io.File(filepath);
		java.io.FileOutputStream fos = new java.io.FileOutputStream(fp);
		fos.write(input);
		fos.close();
	}
	
	public static byte[] FileToByteArray(String filepath) throws IOException {		
		ImageIO.scanForPlugins();
		BufferedImage image = ImageIO.read(new File(filepath));
		ByteArrayOutputStream baos = new ByteArrayOutputStream();
		ImageIO.write(image, "jpg", baos);
		baos.flush();
		byte[] imageInByte = baos.toByteArray();
		baos.close();
		image.flush();
		return imageInByte;		
	}
	
	public static byte[] tiff_to_jpg (byte[] imageInByte)  throws Exception {
	
		try {
			InputStream in = new ByteArrayInputStream(imageInByte);
			
			BufferedImage originalImage = ImageIO.read(in);
			
			BufferedImage jpgImage = originalImage;
			
			ByteArrayOutputStream baos = new ByteArrayOutputStream();
			
			ImageIO.write(jpgImage, "jpg", baos);
			
			baos.flush();
			
			imageInByte = baos.toByteArray();
			
			baos.close();
			
			jpgImage.flush();
			
			originalImage.flush();
	
			return imageInByte;
		
	} catch (Exception exp) {
	    exp.printStackTrace();
	    return null;
	}
	
	}
	
}
