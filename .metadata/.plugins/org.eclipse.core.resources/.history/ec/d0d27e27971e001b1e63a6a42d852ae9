<?xml version="1.0" encoding="UTF-8"?>
<talendfile:ProcessType xmi:version="2.0" xmlns:xmi="http://www.omg.org/XMI" xmlns:talendfile="platform:/resource/org.talend.model/model/TalendFile.xsd" defaultContext="Default" jobType="Standard">
  <context confirmationNeeded="false" name="Default">
    <contextParameter comment="" name="intermediateHost" prompt="intermediateHost?" promptNeeded="false" repositoryContextId="built-in" type="id_String" value="localhost" internalId="_7NkboAMVEeuOjv5n7xl_Lg"/>
    <contextParameter comment="" name="intermediatePort" prompt="intermediatePort?" promptNeeded="false" repositoryContextId="built-in" type="id_String" value="1433" internalId="_7NkboQMVEeuOjv5n7xl_Lg"/>
    <contextParameter comment="" name="intermediateDB" prompt="intermediateDB?" promptNeeded="false" repositoryContextId="built-in" type="id_String" value="PY_INTERMED" internalId="_7NkbogMVEeuOjv5n7xl_Lg"/>
    <contextParameter comment="" name="intermediateUser" prompt="intermediateUser?" promptNeeded="false" repositoryContextId="built-in" type="id_String" value="sa" internalId="_7NkbowMVEeuOjv5n7xl_Lg"/>
    <contextParameter comment="" name="intermediatePassword" prompt="intermediatePassword?" promptNeeded="false" repositoryContextId="built-in" type="id_String" value="W1P0w1p0" internalId="_7NkbpAMVEeuOjv5n7xl_Lg"/>
    <contextParameter comment="" name="ipasHost" prompt="ipasHost?" promptNeeded="false" repositoryContextId="built-in" type="id_String" value="localhost" internalId="_7NkbpQMVEeuOjv5n7xl_Lg"/>
    <contextParameter comment="" name="ipasPort" prompt="ipasPort?" promptNeeded="false" repositoryContextId="built-in" type="id_String" value="1433" internalId="_7NkbpgMVEeuOjv5n7xl_Lg"/>
    <contextParameter comment="" name="ipasDB" prompt="ipasDB?" promptNeeded="false" repositoryContextId="built-in" type="id_String" value="MARCAS_PY" internalId="_7NkbpwMVEeuOjv5n7xl_Lg"/>
    <contextParameter comment="" name="ipasUser" prompt="ipasUser?" promptNeeded="false" repositoryContextId="built-in" type="id_String" value="ADMIN" internalId="_7NkbqAMVEeuOjv5n7xl_Lg"/>
    <contextParameter comment="" name="ipasPassword" prompt="ipasPassword?" promptNeeded="false" repositoryContextId="built-in" type="id_String" value="ADMIN" internalId="_7NkbqQMVEeuOjv5n7xl_Lg"/>
    <contextParameter comment="" name="ipasSaPassword" prompt="ipasSaPassword?" promptNeeded="false" repositoryContextId="built-in" type="id_String" value="W1P0w1p0" internalId="_7NkbqgMVEeuOjv5n7xl_Lg"/>
    <contextParameter comment="" name="dumpBaseIpasLocation" prompt="dumpBaseIpasLocation?" promptNeeded="false" repositoryContextId="built-in" type="id_String" value="&quot;C:/Dropbox/Trabajo Team Folder/Paraguay/MARCAS_NUEVO/MARCAS_PY.bak&quot;" internalId="_7NkbqwMVEeuOjv5n7xl_Lg"/>
    <contextParameter comment="" name="sqlLocation" prompt="sqlLocation?" promptNeeded="false" repositoryContextId="built-in" type="id_String" value="&quot;G:\\Databases\\&quot;" internalId="_7NkbrAMVEeuOjv5n7xl_Lg"/>
  </context>
  <parameters>
    <elementParameter field="CLOSED_LIST" name="LOG4J_RUN_LEVEL" value="Info" show="false"/>
    <elementParameter field="TEXT" name="SCREEN_OFFSET_X" value="256" show="false"/>
    <elementParameter field="TEXT" name="SCREEN_OFFSET_Y" value="128" show="false"/>
    <elementParameter field="TEXT" name="REPOSITORY_CONNECTION_ID" value="" show="false"/>
    <elementParameter field="TEXT" name="OOZIE_PROPERTY_TYPENAME" value="" show="false"/>
    <elementParameter field="TEXT" name="OOZIE_HADOOP_DISTRIBUTION" value="" show="false"/>
    <elementParameter field="TEXT" name="OOZIE_HADOOP_VERSION" value="" show="false"/>
    <elementParameter field="TEXT" name="OOZIE_ENABLE_KERBEROS" value="" show="false"/>
    <elementParameter field="TEXT" name="OOZIE_NAME_NODE_PRINCIPAL" value="" show="false"/>
    <elementParameter field="TEXT" name="OOZIE_USERNAME" value="" show="false"/>
    <elementParameter field="TEXT" name="OOZIE_GROUP" value="" show="false"/>
    <elementParameter field="TEXT" name="OOZIE_USE_KEYTAB" value="" show="false"/>
    <elementParameter field="TEXT" name="OOZIE_KT_PRINCIPAL" value="" show="false"/>
    <elementParameter field="TEXT" name="OOZIE_KEY_TAB" value="" show="false"/>
    <elementParameter field="TEXT" name="OOZIE_ENABLE_OO_KERBEROS" value="" show="false"/>
    <elementParameter field="TEXT" name="OOZIE_NAME_NODE_END_POINT" value="" show="false"/>
    <elementParameter field="TEXT" name="OOZIE_JOB_TRACKER_ENDPOINT" value="" show="false"/>
    <elementParameter field="TEXT" name="OOZIE_END_POINT" value="" show="false"/>
    <elementParameter field="CHECK" name="IMPLICITCONTEXT_USE_PROJECT_SETTINGS" value="false" show="false"/>
    <elementParameter field="CHECK" name="STATANDLOG_USE_PROJECT_SETTINGS" value="true" show="false"/>
    <elementParameter field="CHECK" name="MULTI_THREAD_EXECATION" value="false"/>
    <elementParameter field="CHECK" name="IMPLICIT_TCONTEXTLOAD" value="false"/>
    <elementParameter field="RADIO" name="FROM_FILE_FLAG_IMPLICIT_CONTEXT" value="false" show="false"/>
    <elementParameter field="RADIO" name="FROM_DATABASE_FLAG_IMPLICIT_CONTEXT" value="false" show="false"/>
    <elementParameter field="FILE" name="IMPLICIT_TCONTEXTLOAD_FILE" value="&quot;D:/WIPO/TOS_DI-20161216_1026-V6.3.1/workspace/in.csv&quot;" show="false"/>
    <elementParameter field="TEXT" name="FIELDSEPARATOR" value="&quot;;&quot;" show="false"/>
    <elementParameter field="CHECK" name="OVERRIDE_ENCODING_FLAG" value="false" show="false"/>
    <elementParameter field="ENCODING_TYPE" name="OVERRIDE_ENCODING_IN_EXTRA" value="ISO-8859-15" show="false"/>
    <elementParameter field="TECHNICAL" name="OVERRIDE_ENCODING_IN_EXTRA:ENCODING_TYPE" value="ISO-8859-15" show="false"/>
    <elementParameter field="CLOSED_LIST" name="DB_TYPE_IMPLICIT_CONTEXT" value="" show="false"/>
    <elementParameter field="CLOSED_LIST" name="DB_VERSION_IMPLICIT_CONTEXT" value="ORACLE_11" show="false"/>
    <elementParameter field="TEXT" name="URL_IMPLICIT_CONTEXT" value="&quot;&quot;" show="false"/>
    <elementParameter field="TABLE" name="DRIVER_JAR_IMPLICIT_CONTEXT" show="false"/>
    <elementParameter field="TEXT" name="DRIVER_CLASS_IMPLICIT_CONTEXT" value="&quot;&quot;" show="false"/>
    <elementParameter field="TEXT" name="HOST_IMPLICIT_CONTEXT" value="&quot;&quot;" show="false"/>
    <elementParameter field="TEXT" name="PORT_IMPLICIT_CONTEXT" value="&quot;&quot;" show="false"/>
    <elementParameter field="TEXT" name="DBNAME_IMPLICIT_CONTEXT" value="&quot;&quot;" show="false"/>
    <elementParameter field="TEXT" name="LOCAL_SERVICE_NAME_IMPLICIT_CONTEXT" value="&quot;&quot;" show="false"/>
    <elementParameter field="TEXT" name="PROPERTIES_IMPLICIT_CONTEXT" value="&quot;&quot;" show="false"/>
    <elementParameter field="TEXT" name="SCHEMA_DB_IMPLICIT_CONTEXT" value="&quot;&quot;" show="false"/>
    <elementParameter field="TEXT" name="USER_IMPLICIT_CONTEXT" value="&quot;&quot;" show="false"/>
    <elementParameter field="PASSWORD" name="PASS_IMPLICIT_CONTEXT" value="enc:system.encryption.key.v1:YvdZRFDbW56ZBmhe1q6hCYiqb9Fgnh1FNnLSmhI0" show="false"/>
    <elementParameter field="FILE" name="DBFILE_IMPLICIT_CONTEXT" value="&quot;&quot;" show="false"/>
    <elementParameter field="DBTABLE" name="DBTABLE_IMPLICIT_CONTEXT" value="&quot;&quot;" show="false"/>
    <elementParameter field="TEXT" name="QUERY_CONDITION_IMPLICIT_CONTEXT" value="&quot;&quot;" show="false"/>
    <elementParameter field="CLOSED_LIST" name="LOAD_NEW_VARIABLE" value="Warning" show="false"/>
    <elementParameter field="CLOSED_LIST" name="NOT_LOAD_OLD_VARIABLE" value="Warning" show="false"/>
    <elementParameter field="CHECK" name="PRINT_OPERATIONS" value="false" show="false"/>
    <elementParameter field="CHECK" name="DISABLE_ERROR" value="false" show="false"/>
    <elementParameter field="CHECK" name="DISABLE_WARNINGS" value="true" show="false"/>
    <elementParameter field="CHECK" name="DISABLE_INFO" value="true" show="false"/>
    <elementParameter field="CHECK" name="ON_STATCATCHER_FLAG" value="false"/>
    <elementParameter field="CHECK" name="ON_LOGCATCHER_FLAG" value="false"/>
    <elementParameter field="CHECK" name="ON_METERCATCHER_FLAG" value="false"/>
    <elementParameter field="CHECK" name="ON_CONSOLE_FLAG" value="false" show="false"/>
    <elementParameter field="CHECK" name="ON_FILES_FLAG" value="false" show="false"/>
    <elementParameter field="DIRECTORY" name="FILE_PATH" value="&quot;G:/GitHub/NewTalend/.metadata&quot;" show="false"/>
    <elementParameter field="TEXT" name="FILENAME_STATS" value="&quot;stats_file.txt&quot;" show="false"/>
    <elementParameter field="TEXT" name="FILENAME_LOGS" value="&quot;logs_file.txt&quot;" show="false"/>
    <elementParameter field="TEXT" name="FILENAME_METTER" value="&quot;meter_file.txt&quot;" show="false"/>
    <elementParameter field="ENCODING_TYPE" name="ENCODING" value="ISO-8859-15" show="false"/>
    <elementParameter field="TECHNICAL" name="ENCODING:ENCODING_TYPE" value="ISO-8859-15" show="false"/>
    <elementParameter field="CHECK" name="ON_DATABASE_FLAG" value="false" show="false"/>
    <elementParameter field="CLOSED_LIST" name="DB_TYPE" value="tJDBCOutput" show="false"/>
    <elementParameter field="CLOSED_LIST" name="DB_VERSION" value="ORACLE_12" show="false"/>
    <elementParameter field="TEXT" name="URL" value="&quot;&quot;" show="false"/>
    <elementParameter field="TABLE" name="DRIVER_JAR" show="false"/>
    <elementParameter field="TEXT" name="DRIVER_CLASS" value="&quot;&quot;" show="false"/>
    <elementParameter field="TEXT" name="HOST" value="&quot;&quot;" show="false"/>
    <elementParameter field="TEXT" name="PORT" value="&quot;&quot;" show="false"/>
    <elementParameter field="TEXT" name="DATASOURCE" value="&quot;&quot;" show="false"/>
    <elementParameter field="TEXT" name="DBNAME" value="&quot;&quot;" show="false"/>
    <elementParameter field="TEXT" name="LOCAL_SERVICE_NAME" value="&quot;&quot;" show="false"/>
    <elementParameter field="TEXT" name="PROPERTIES" value="&quot;&quot;" show="false"/>
    <elementParameter field="TEXT" name="SCHEMA_DB" value="&quot;&quot;" show="false"/>
    <elementParameter field="TEXT" name="USER" value="&quot;&quot;" show="false"/>
    <elementParameter field="PASSWORD" name="PASS" value="enc:system.encryption.key.v1:jxZFp/2UDfE0M3ulifQp4YNTWlxPAO7RjJXAnD1x" show="false"/>
    <elementParameter field="FILE" name="DBFILE" value="&quot;&quot;" show="false"/>
    <elementParameter field="DBTABLE" name="TABLE_STATS" value="&quot;&quot;" show="false"/>
    <elementParameter field="DBTABLE" name="TABLE_LOGS" value="&quot;&quot;" show="false"/>
    <elementParameter field="DBTABLE" name="TABLE_METER" value="&quot;&quot;" show="false"/>
    <elementParameter field="CHECK" name="CATCH_RUNTIME_ERRORS" value="true" show="false"/>
    <elementParameter field="CHECK" name="CATCH_USER_ERRORS" value="true" show="false"/>
    <elementParameter field="CHECK" name="CATCH_USER_WARNING" value="true" show="false"/>
    <elementParameter field="CHECK" name="CATCH_REALTIME_STATS" value="false" show="false"/>
    <elementParameter field="TEXT" name="HEADERFOOTER_HEADERID" value="" show="false"/>
    <elementParameter field="CHECK" name="HEADER_ENABLED" value="false" show="false"/>
    <elementParameter field="TEXT" name="HEADER_LIBRARY" value="" show="false"/>
    <elementParameter field="TEXT" name="HEADER_CODE" value="" show="false"/>
    <elementParameter field="TEXT" name="HEADER_IMPORT" value="" show="false"/>
    <elementParameter field="TEXT" name="HEADERFOOTER_FOOTERID" value="" show="false"/>
    <elementParameter field="CHECK" name="FOOTER_ENABLED" value="false" show="false"/>
    <elementParameter field="TEXT" name="FOOTER_LIBRARY" value="" show="false"/>
    <elementParameter field="TEXT" name="FOOTER_CODE" value="" show="false"/>
    <elementParameter field="TEXT" name="FOOTER_IMPORT" value="" show="false"/>
    <routinesParameter id="_abQ_UKLdEeSuYal6KjY4uA" name="DataOperation"/>
    <routinesParameter id="_abg28KLdEeSuYal6KjY4uA" name="Mathematical"/>
    <routinesParameter id="_abm9kKLdEeSuYal6KjY4uA" name="Numeric"/>
    <routinesParameter id="_abrPAKLdEeSuYal6KjY4uA" name="Relational"/>
    <routinesParameter id="_abvgcKLdEeSuYal6KjY4uA" name="StringHandling"/>
    <routinesParameter id="_ab1nEKLdEeSuYal6KjY4uA" name="TalendDataGenerator"/>
    <routinesParameter id="_ab7tsKLdEeSuYal6KjY4uA" name="TalendDate"/>
    <routinesParameter id="_acB0UKLdEeSuYal6KjY4uA" name="TalendString"/>
    <routinesParameter id="_2oQnQKLiEeSuYal6KjY4uA" name="IPAS"/>
    <routinesParameter id="_8FqG8D7KEeeQurZirz5-Ng" name="TalendStringUtil"/>
  </parameters>
  <node componentName="tMSSqlConnection" componentVersion="0.102" offsetLabelX="0" offsetLabelY="0" posX="-64" posY="-64">
    <elementParameter field="TEXT" name="UNIQUE_NAME" value="tMSSqlConnection_1" show="false"/>
    <elementParameter field="CHECK" name="TSTATCATCHER_STATS" value="true"/>
    <elementParameter field="CLOSED_LIST" name="DRIVER" value="JTDS"/>
    <elementParameter field="TEXT" name="HOST" value="context.ipasHost"/>
    <elementParameter field="TEXT" name="TYPE" value="MSSQL" show="false"/>
    <elementParameter field="TEXT" name="PORT" value="context.ipasPort"/>
    <elementParameter field="TEXT" name="SCHEMA_DB" value="&quot;&quot;"/>
    <elementParameter field="TEXT" name="DBNAME" value="&quot;&quot;"/>
    <elementParameter field="TEXT" name="USER" value="&quot;sa&quot;"/>
    <elementParameter field="PASSWORD" name="PASS" value="enc:system.encryption.key.v1:vIR0dkPZf4WGm5AmT1iYqYezUbe6DMF3jEwhnzdhGH3SSQ8tIUALmQSCsh6uBbOvBlE="/>
    <elementParameter field="ENCODING_TYPE" name="ENCODING" value="&quot;ISO-8859-15&quot;" show="false"/>
    <elementParameter field="TECHNICAL" name="ENCODING:ENCODING_TYPE" value="ISO-8859-15"/>
    <elementParameter field="TEXT" name="PROPERTIES" value=" &quot;allowMultiQueries=true&quot;"/>
    <elementParameter field="CHECK" name="USE_SHARED_CONNECTION" value="false"/>
    <elementParameter field="TEXT" name="SHARED_CONNECTION_NAME" value="" show="false"/>
    <elementParameter field="LABEL" name="NOTE" value="This option only applies when deploying and running in the Talend Runtime"/>
    <elementParameter field="CHECK" name="SPECIFY_DATASOURCE_ALIAS" value="false"/>
    <elementParameter field="TEXT" name="DATASOURCE_ALIAS" value="&quot;&quot;" show="false"/>
    <elementParameter field="CHECK" name="ACTIVE_DIR_AUTH" value="false" show="false"/>
    <elementParameter field="CHECK" name="AUTO_COMMIT" value="true"/>
    <elementParameter field="CHECK" name="SHARE_IDENTITY_SETTING" value="false"/>
    <elementParameter field="TEXT" name="CONNECTION_FORMAT" value="row"/>
  </node>
  <node componentName="tMSSqlConnection" componentVersion="0.102" offsetLabelX="40" offsetLabelY="21" posX="-64" posY="96">
    <elementParameter field="TEXT" name="UNIQUE_NAME" value="tMSSqlConnection_2" show="false"/>
    <elementParameter field="CHECK" name="TSTATCATCHER_STATS" value="true"/>
    <elementParameter field="CLOSED_LIST" name="DRIVER" value="JTDS"/>
    <elementParameter field="TEXT" name="HOST" value="context.intermediateHost"/>
    <elementParameter field="TEXT" name="TYPE" value="MSSQL" show="false"/>
    <elementParameter field="TEXT" name="PORT" value="context.intermediatePort"/>
    <elementParameter field="TEXT" name="SCHEMA_DB" value="&quot;&quot;"/>
    <elementParameter field="TEXT" name="DBNAME" value="context.intermediateDB"/>
    <elementParameter field="TEXT" name="USER" value="context.intermediateUser"/>
    <elementParameter field="PASSWORD" name="PASS" value="enc:system.encryption.key.v1:XVFU079xOmZxa5UI57Uz3fa0wfXu1BKUT9RhxyFxFeN/1z0tgxAsN5HB1MNqBCP8gF4XtuPs3Iw="/>
    <elementParameter field="ENCODING_TYPE" name="ENCODING" value="&quot;ISO-8859-15&quot;" show="false"/>
    <elementParameter field="TECHNICAL" name="ENCODING:ENCODING_TYPE" value="ISO-8859-15"/>
    <elementParameter field="TEXT" name="PROPERTIES" value=" &quot;allowMultiQueries=true&quot;"/>
    <elementParameter field="CHECK" name="USE_SHARED_CONNECTION" value="false"/>
    <elementParameter field="TEXT" name="SHARED_CONNECTION_NAME" value="" show="false"/>
    <elementParameter field="LABEL" name="NOTE" value="This option only applies when deploying and running in the Talend Runtime"/>
    <elementParameter field="CHECK" name="SPECIFY_DATASOURCE_ALIAS" value="false"/>
    <elementParameter field="TEXT" name="DATASOURCE_ALIAS" value="&quot;&quot;" show="false"/>
    <elementParameter field="CHECK" name="ACTIVE_DIR_AUTH" value="false" show="false"/>
    <elementParameter field="CHECK" name="AUTO_COMMIT" value="true"/>
    <elementParameter field="CHECK" name="SHARE_IDENTITY_SETTING" value="false"/>
    <elementParameter field="TEXT" name="CONNECTION_FORMAT" value="row"/>
  </node>
  <node componentName="tMSSqlRow" componentVersion="0.102" offsetLabelX="0" offsetLabelY="0" posX="96" posY="416">
    <elementParameter field="TEXT" name="UNIQUE_NAME" value="tMSSqlRow_4" show="false"/>
    <elementParameter field="CHECK" name="USE_EXISTING_CONNECTION" value="true"/>
    <elementParameter field="COMPONENT_LIST" name="CONNECTION" value="tMSSqlConnection_1"/>
    <elementParameter field="CLOSED_LIST" name="DRIVER" value="JTDS" show="false"/>
    <elementParameter field="TEXT" name="HOST" value="&quot;&quot;" show="false"/>
    <elementParameter field="TEXT" name="PORT" value="&quot;1433&quot;" show="false"/>
    <elementParameter field="TEXT" name="DB_SCHEMA" value="&quot;&quot;" show="false"/>
    <elementParameter field="TEXT" name="DBNAME" value="&quot;&quot;" show="false"/>
    <elementParameter field="TEXT" name="TYPE" value="MSSQL" show="false"/>
    <elementParameter field="TEXT" name="USER" value="&quot;&quot;" show="false"/>
    <elementParameter field="PASSWORD" name="PASS" value="enc:system.encryption.key.v1:E7w9eq23WHLMyNHXy4EYPPWPmGRbNW81xwhkeSHd" show="false"/>
    <elementParameter field="DBTABLE" name="TABLE" value="&quot;&quot;"/>
    <elementParameter field="CHECK" name="IDENTITY_INSERT" value="false"/>
    <elementParameter field="QUERYSTORE_TYPE" name="QUERYSTORE" value="&quot;&quot;"/>
    <elementParameter field="TECHNICAL" name="QUERYSTORE:REPOSITORY_QUERYSTORE_TYPE" value="" show="false"/>
    <elementParameter field="TECHNICAL" name="QUERYSTORE:QUERYSTORE_TYPE" value="BUILT_IN"/>
    <elementParameter field="MEMO_SQL" name="QUERY" value="&quot;&#xD;&#xA;USE &quot;+context.ipasDB+&quot;;&#xD;&#xA;BEGIN&#xD;&#xA;&#x9; EXEC sp_change_users_login 'Auto_fix','REPOSITORY',null,'B894806';&#xD;&#xA;END&#xD;&#xA;&quot;"/>
    <elementParameter field="LABEL" name="NOTE" value="This option only applies when deploying and running in the Talend Runtime" show="false"/>
    <elementParameter field="CHECK" name="SPECIFY_DATASOURCE_ALIAS" value="false" show="false"/>
    <elementParameter field="TEXT" name="DATASOURCE_ALIAS" value="&quot;&quot;" show="false"/>
    <elementParameter field="CHECK" name="DIE_ON_ERROR" value="false"/>
    <elementParameter field="TEXT" name="PROPERTIES" value="&quot;&quot;" show="false"/>
    <elementParameter field="CHECK" name="ACTIVE_DIR_AUTH" value="false" show="false"/>
    <elementParameter field="CHECK" name="PROPAGATE_RECORD_SET" value="false"/>
    <elementParameter field="COLUMN_LIST" name="RECORD_SET_COLUMN" value="" show="false"/>
    <elementParameter field="CHECK" name="USE_PREPAREDSTATEMENT" value="false"/>
    <elementParameter field="TABLE" name="SET_PREPAREDSTATEMENT_PARAMETERS" show="false"/>
    <elementParameter field="ENCODING_TYPE" name="ENCODING" value="&quot;ISO-8859-15&quot;" show="false"/>
    <elementParameter field="TECHNICAL" name="ENCODING:ENCODING_TYPE" value="ISO-8859-15"/>
    <elementParameter field="TEXT" name="COMMIT_EVERY" value="10000" show="false"/>
    <elementParameter field="TEXT" name="CONNECTION_FORMAT" value="row"/>
    <metadata connector="FLOW" name="tMSSqlRow_4"/>
    <metadata connector="REJECT" name="REJECT">
      <column defaultValue="" key="false" length="255" name="errorCode" nullable="true" precision="0" sourceType="" type="id_String" originalLength="-1" usefulColumn="true"/>
      <column defaultValue="" key="false" length="255" name="errorMessage" nullable="true" precision="0" sourceType="" type="id_String" originalLength="-1" usefulColumn="true"/>
    </metadata>
  </node>
  <node componentName="tLogRow" componentVersion="0.101" offsetLabelX="0" offsetLabelY="0" posX="160" posY="352">
    <elementParameter field="TEXT" name="UNIQUE_NAME" value="tLogRow_4" show="false"/>
    <elementParameter field="RADIO" name="BASIC_MODE" value="false"/>
    <elementParameter field="RADIO" name="TABLE_PRINT" value="false"/>
    <elementParameter field="RADIO" name="VERTICAL" value="true"/>
    <elementParameter field="RADIO" name="PRINT_UNIQUE" value="true"/>
    <elementParameter field="RADIO" name="PRINT_LABEL" value="false"/>
    <elementParameter field="RADIO" name="PRINT_UNIQUE_LABEL" value="false"/>
    <elementParameter field="TEXT" name="FIELDSEPARATOR" value="&quot;|&quot;" show="false"/>
    <elementParameter field="CHECK" name="PRINT_HEADER" value="false" show="false"/>
    <elementParameter field="CHECK" name="PRINT_UNIQUE_NAME" value="false" show="false"/>
    <elementParameter field="CHECK" name="PRINT_COLNAMES" value="false" show="false"/>
    <elementParameter field="CHECK" name="USE_FIXED_LENGTH" value="false" show="false"/>
    <elementParameter field="TABLE" name="LENGTHS" show="false">
      <elementValue elementRef="SCHEMA_COLUMN" value="errorCode"/>
      <elementValue elementRef="LENGTH" value="10"/>
      <elementValue elementRef="SCHEMA_COLUMN" value="errorMessage"/>
      <elementValue elementRef="LENGTH" value="10"/>
    </elementParameter>
    <elementParameter field="CHECK" name="PRINT_CONTENT_WITH_LOG4J" value="true"/>
    <elementParameter field="TEXT" name="SCHEMA_OPT_NUM" value="100" show="false"/>
    <elementParameter field="TEXT" name="CONNECTION_FORMAT" value="row"/>
    <metadata connector="FLOW" name="tLogRow_4">
      <column defaultValue="" key="false" length="255" name="errorCode" nullable="true" precision="0" sourceType="" type="id_String" originalLength="-1" usefulColumn="true"/>
      <column defaultValue="" key="false" length="255" name="errorMessage" nullable="true" precision="0" sourceType="" type="id_String" originalLength="-1" usefulColumn="true"/>
    </metadata>
  </node>
  <node componentName="tMSSqlRow" componentVersion="0.102" offsetLabelX="0" offsetLabelY="0" posX="288" posY="416">
    <elementParameter field="TEXT" name="UNIQUE_NAME" value="tMSSqlRow_5" show="false"/>
    <elementParameter field="CHECK" name="USE_EXISTING_CONNECTION" value="true"/>
    <elementParameter field="COMPONENT_LIST" name="CONNECTION" value="tMSSqlConnection_1"/>
    <elementParameter field="CLOSED_LIST" name="DRIVER" value="JTDS" show="false"/>
    <elementParameter field="TEXT" name="HOST" value="&quot;&quot;" show="false"/>
    <elementParameter field="TEXT" name="PORT" value="&quot;1433&quot;" show="false"/>
    <elementParameter field="TEXT" name="DB_SCHEMA" value="&quot;&quot;" show="false"/>
    <elementParameter field="TEXT" name="DBNAME" value="&quot;&quot;" show="false"/>
    <elementParameter field="TEXT" name="TYPE" value="MSSQL" show="false"/>
    <elementParameter field="TEXT" name="USER" value="&quot;&quot;" show="false"/>
    <elementParameter field="PASSWORD" name="PASS" value="enc:system.encryption.key.v1:jt3j4l0vov7+5VMHAOt85IsyoCWqIIFvYd7ASvcF" show="false"/>
    <elementParameter field="DBTABLE" name="TABLE" value="&quot;&quot;"/>
    <elementParameter field="CHECK" name="IDENTITY_INSERT" value="false"/>
    <elementParameter field="QUERYSTORE_TYPE" name="QUERYSTORE" value="&quot;&quot;"/>
    <elementParameter field="TECHNICAL" name="QUERYSTORE:REPOSITORY_QUERYSTORE_TYPE" value="" show="false"/>
    <elementParameter field="TECHNICAL" name="QUERYSTORE:QUERYSTORE_TYPE" value="BUILT_IN"/>
    <elementParameter field="MEMO_SQL" name="QUERY" value="&quot;&#xD;&#xA;USE &quot;+context.ipasDB+&quot;;&#xD;&#xA;BEGIN&#xD;&#xA;&#x9; EXEC sp_change_users_login 'Auto_fix','&quot;+context.ipasUser+&quot;',null,'&quot;&#xD;&#xA;+context.ipasPassword+&quot;';&#xD;&#xA;END;&quot;"/>
    <elementParameter field="LABEL" name="NOTE" value="This option only applies when deploying and running in the Talend Runtime" show="false"/>
    <elementParameter field="CHECK" name="SPECIFY_DATASOURCE_ALIAS" value="false" show="false"/>
    <elementParameter field="TEXT" name="DATASOURCE_ALIAS" value="&quot;&quot;" show="false"/>
    <elementParameter field="CHECK" name="DIE_ON_ERROR" value="false"/>
    <elementParameter field="TEXT" name="PROPERTIES" value="&quot;&quot;" show="false"/>
    <elementParameter field="CHECK" name="ACTIVE_DIR_AUTH" value="false" show="false"/>
    <elementParameter field="CHECK" name="PROPAGATE_RECORD_SET" value="false"/>
    <elementParameter field="COLUMN_LIST" name="RECORD_SET_COLUMN" value="" show="false"/>
    <elementParameter field="CHECK" name="USE_PREPAREDSTATEMENT" value="false"/>
    <elementParameter field="TABLE" name="SET_PREPAREDSTATEMENT_PARAMETERS" show="false"/>
    <elementParameter field="ENCODING_TYPE" name="ENCODING" value="&quot;ISO-8859-15&quot;" show="false"/>
    <elementParameter field="TECHNICAL" name="ENCODING:ENCODING_TYPE" value="ISO-8859-15"/>
    <elementParameter field="TEXT" name="COMMIT_EVERY" value="10000" show="false"/>
    <elementParameter field="TEXT" name="CONNECTION_FORMAT" value="row"/>
    <metadata connector="FLOW" name="tMSSqlRow_5"/>
    <metadata connector="REJECT" name="REJECT">
      <column defaultValue="" key="false" length="255" name="errorCode" nullable="true" precision="0" sourceType="" type="id_String" originalLength="-1" usefulColumn="true"/>
      <column defaultValue="" key="false" length="255" name="errorMessage" nullable="true" precision="0" sourceType="" type="id_String" originalLength="-1" usefulColumn="true"/>
    </metadata>
  </node>
  <node componentName="tLogRow" componentVersion="0.101" offsetLabelX="0" offsetLabelY="0" posX="416" posY="416">
    <elementParameter field="TEXT" name="UNIQUE_NAME" value="tLogRow_5" show="false"/>
    <elementParameter field="RADIO" name="BASIC_MODE" value="false"/>
    <elementParameter field="RADIO" name="TABLE_PRINT" value="false"/>
    <elementParameter field="RADIO" name="VERTICAL" value="true"/>
    <elementParameter field="RADIO" name="PRINT_UNIQUE" value="true"/>
    <elementParameter field="RADIO" name="PRINT_LABEL" value="false"/>
    <elementParameter field="RADIO" name="PRINT_UNIQUE_LABEL" value="false"/>
    <elementParameter field="TEXT" name="FIELDSEPARATOR" value="&quot;|&quot;" show="false"/>
    <elementParameter field="CHECK" name="PRINT_HEADER" value="false" show="false"/>
    <elementParameter field="CHECK" name="PRINT_UNIQUE_NAME" value="false" show="false"/>
    <elementParameter field="CHECK" name="PRINT_COLNAMES" value="false" show="false"/>
    <elementParameter field="CHECK" name="USE_FIXED_LENGTH" value="false" show="false"/>
    <elementParameter field="TABLE" name="LENGTHS" show="false">
      <elementValue elementRef="SCHEMA_COLUMN" value="errorCode"/>
      <elementValue elementRef="LENGTH" value="10"/>
      <elementValue elementRef="SCHEMA_COLUMN" value="errorMessage"/>
      <elementValue elementRef="LENGTH" value="10"/>
    </elementParameter>
    <elementParameter field="CHECK" name="PRINT_CONTENT_WITH_LOG4J" value="true"/>
    <elementParameter field="TEXT" name="SCHEMA_OPT_NUM" value="100" show="false"/>
    <elementParameter field="TEXT" name="CONNECTION_FORMAT" value="row"/>
    <metadata connector="FLOW" name="tLogRow_5">
      <column defaultValue="" key="false" length="255" name="errorCode" nullable="true" precision="0" sourceType="" type="id_String" originalLength="-1" usefulColumn="true"/>
      <column defaultValue="" key="false" length="255" name="errorMessage" nullable="true" precision="0" sourceType="" type="id_String" originalLength="-1" usefulColumn="true"/>
    </metadata>
  </node>
  <node componentName="tMSSqlRow" componentVersion="0.102" offsetLabelX="0" offsetLabelY="0" posX="192" posY="64">
    <elementParameter field="TEXT" name="UNIQUE_NAME" value="tMSSqlRow_40" show="false"/>
    <elementParameter field="CHECK" name="USE_EXISTING_CONNECTION" value="true"/>
    <elementParameter field="COMPONENT_LIST" name="CONNECTION" value="tMSSqlConnection_1"/>
    <elementParameter field="CLOSED_LIST" name="DRIVER" value="JTDS" show="false"/>
    <elementParameter field="TEXT" name="HOST" value="&quot;&quot;" show="false"/>
    <elementParameter field="TEXT" name="PORT" value="&quot;1433&quot;" show="false"/>
    <elementParameter field="TEXT" name="DB_SCHEMA" value="&quot;&quot;" show="false"/>
    <elementParameter field="TEXT" name="DBNAME" value="&quot;&quot;" show="false"/>
    <elementParameter field="TEXT" name="TYPE" value="MSSQL" show="false"/>
    <elementParameter field="TEXT" name="USER" value="&quot;&quot;" show="false"/>
    <elementParameter field="PASSWORD" name="PASS" value="enc:system.encryption.key.v1:msDXEtNuNMgVZREvAAOFMA7ToI50fLHTmV2eND3O" show="false"/>
    <elementParameter field="DBTABLE" name="TABLE" value="&quot;&quot;"/>
    <elementParameter field="CHECK" name="IDENTITY_INSERT" value="false"/>
    <elementParameter field="QUERYSTORE_TYPE" name="QUERYSTORE" value="&quot;&quot;"/>
    <elementParameter field="TECHNICAL" name="QUERYSTORE:REPOSITORY_QUERYSTORE_TYPE" value="" show="false"/>
    <elementParameter field="TECHNICAL" name="QUERYSTORE:QUERYSTORE_TYPE" value="BUILT_IN"/>
    <elementParameter field="MEMO_SQL" name="QUERY" value="&quot;IF EXISTS(select * from sys.databases where name='&quot;+context.ipasDB +&quot;')&#xD;&#xA;alter database &quot;+context.ipasDB +&quot; set single_user with rollback immediate;&quot;"/>
    <elementParameter field="LABEL" name="NOTE" value="This option only applies when deploying and running in the Talend Runtime" show="false"/>
    <elementParameter field="CHECK" name="SPECIFY_DATASOURCE_ALIAS" value="false" show="false"/>
    <elementParameter field="TEXT" name="DATASOURCE_ALIAS" value="&quot;&quot;" show="false"/>
    <elementParameter field="CHECK" name="DIE_ON_ERROR" value="false"/>
    <elementParameter field="TEXT" name="PROPERTIES" value="&quot;&quot;" show="false"/>
    <elementParameter field="CHECK" name="ACTIVE_DIR_AUTH" value="false" show="false"/>
    <elementParameter field="CHECK" name="PROPAGATE_RECORD_SET" value="false"/>
    <elementParameter field="COLUMN_LIST" name="RECORD_SET_COLUMN" value="" show="false"/>
    <elementParameter field="CHECK" name="USE_PREPAREDSTATEMENT" value="false"/>
    <elementParameter field="TABLE" name="SET_PREPAREDSTATEMENT_PARAMETERS" show="false"/>
    <elementParameter field="ENCODING_TYPE" name="ENCODING" value="&quot;ISO-8859-15&quot;" show="false"/>
    <elementParameter field="TECHNICAL" name="ENCODING:ENCODING_TYPE" value="ISO-8859-15"/>
    <elementParameter field="TEXT" name="COMMIT_EVERY" value="10000" show="false"/>
    <elementParameter field="TEXT" name="CONNECTION_FORMAT" value="row"/>
    <metadata connector="FLOW" name="tMSSqlRow_40"/>
    <metadata connector="REJECT" name="REJECT">
      <column defaultValue="" key="false" length="255" name="errorCode" nullable="true" precision="0" sourceType="" type="id_String" originalLength="-1" usefulColumn="true"/>
      <column defaultValue="" key="false" length="255" name="errorMessage" nullable="true" precision="0" sourceType="" type="id_String" originalLength="-1" usefulColumn="true"/>
    </metadata>
  </node>
  <node componentName="tLogRow" componentVersion="0.101" offsetLabelX="0" offsetLabelY="0" posX="192" posY="-32">
    <elementParameter field="TEXT" name="UNIQUE_NAME" value="tLogRow_1" show="false"/>
    <elementParameter field="RADIO" name="BASIC_MODE" value="false"/>
    <elementParameter field="RADIO" name="TABLE_PRINT" value="false"/>
    <elementParameter field="RADIO" name="VERTICAL" value="true"/>
    <elementParameter field="RADIO" name="PRINT_UNIQUE" value="true"/>
    <elementParameter field="RADIO" name="PRINT_LABEL" value="false"/>
    <elementParameter field="RADIO" name="PRINT_UNIQUE_LABEL" value="false"/>
    <elementParameter field="TEXT" name="FIELDSEPARATOR" value="&quot;|&quot;" show="false"/>
    <elementParameter field="CHECK" name="PRINT_HEADER" value="false" show="false"/>
    <elementParameter field="CHECK" name="PRINT_UNIQUE_NAME" value="false" show="false"/>
    <elementParameter field="CHECK" name="PRINT_COLNAMES" value="false" show="false"/>
    <elementParameter field="CHECK" name="USE_FIXED_LENGTH" value="false" show="false"/>
    <elementParameter field="TABLE" name="LENGTHS" show="false">
      <elementValue elementRef="SCHEMA_COLUMN" value="errorCode"/>
      <elementValue elementRef="LENGTH" value="10"/>
      <elementValue elementRef="SCHEMA_COLUMN" value="errorMessage"/>
      <elementValue elementRef="LENGTH" value="10"/>
    </elementParameter>
    <elementParameter field="CHECK" name="PRINT_CONTENT_WITH_LOG4J" value="true"/>
    <elementParameter field="TEXT" name="SCHEMA_OPT_NUM" value="100" show="false"/>
    <elementParameter field="TEXT" name="CONNECTION_FORMAT" value="row"/>
    <metadata connector="FLOW" name="tLogRow_1">
      <column defaultValue="" key="false" length="255" name="errorCode" nullable="true" precision="0" sourceType="" type="id_String" originalLength="-1" usefulColumn="true"/>
      <column defaultValue="" key="false" length="255" name="errorMessage" nullable="true" precision="0" sourceType="" type="id_String" originalLength="-1" usefulColumn="true"/>
    </metadata>
  </node>
  <node componentName="tMSSqlRow" componentVersion="0.102" offsetLabelX="0" offsetLabelY="0" posX="320" posY="64">
    <elementParameter field="TEXT" name="UNIQUE_NAME" value="tMSSqlRow_1" show="false"/>
    <elementParameter field="CHECK" name="USE_EXISTING_CONNECTION" value="true"/>
    <elementParameter field="COMPONENT_LIST" name="CONNECTION" value="tMSSqlConnection_1"/>
    <elementParameter field="CLOSED_LIST" name="DRIVER" value="JTDS" show="false"/>
    <elementParameter field="TEXT" name="HOST" value="&quot;&quot;" show="false"/>
    <elementParameter field="TEXT" name="PORT" value="&quot;1433&quot;" show="false"/>
    <elementParameter field="TEXT" name="DB_SCHEMA" value="&quot;&quot;" show="false"/>
    <elementParameter field="TEXT" name="DBNAME" value="&quot;&quot;" show="false"/>
    <elementParameter field="TEXT" name="TYPE" value="MSSQL" show="false"/>
    <elementParameter field="TEXT" name="USER" value="&quot;&quot;" show="false"/>
    <elementParameter field="PASSWORD" name="PASS" value="enc:system.encryption.key.v1:w5PHTJrPMIhgwMdQ+CkTjF3LfrTu8SsjxY3p+qFH" show="false"/>
    <elementParameter field="DBTABLE" name="TABLE" value="&quot;&quot;"/>
    <elementParameter field="CHECK" name="IDENTITY_INSERT" value="false"/>
    <elementParameter field="QUERYSTORE_TYPE" name="QUERYSTORE" value="&quot;&quot;"/>
    <elementParameter field="TECHNICAL" name="QUERYSTORE:REPOSITORY_QUERYSTORE_TYPE" value="" show="false"/>
    <elementParameter field="TECHNICAL" name="QUERYSTORE:QUERYSTORE_TYPE" value="BUILT_IN"/>
    <elementParameter field="MEMO_SQL" name="QUERY" value="&quot;&#xD;&#xA;IF EXISTS(select * from sys.databases where name='&quot;+context.ipasDB +&quot;')&#xD;&#xA;DROP DATABASE &quot;+context.ipasDB +&quot;;&quot;"/>
    <elementParameter field="LABEL" name="NOTE" value="This option only applies when deploying and running in the Talend Runtime" show="false"/>
    <elementParameter field="CHECK" name="SPECIFY_DATASOURCE_ALIAS" value="false" show="false"/>
    <elementParameter field="TEXT" name="DATASOURCE_ALIAS" value="&quot;&quot;" show="false"/>
    <elementParameter field="CHECK" name="DIE_ON_ERROR" value="false"/>
    <elementParameter field="TEXT" name="PROPERTIES" value="&quot;&quot;" show="false"/>
    <elementParameter field="CHECK" name="ACTIVE_DIR_AUTH" value="false" show="false"/>
    <elementParameter field="CHECK" name="PROPAGATE_RECORD_SET" value="false"/>
    <elementParameter field="COLUMN_LIST" name="RECORD_SET_COLUMN" value="" show="false"/>
    <elementParameter field="CHECK" name="USE_PREPAREDSTATEMENT" value="false"/>
    <elementParameter field="TABLE" name="SET_PREPAREDSTATEMENT_PARAMETERS" show="false"/>
    <elementParameter field="ENCODING_TYPE" name="ENCODING" value="&quot;ISO-8859-15&quot;" show="false"/>
    <elementParameter field="TECHNICAL" name="ENCODING:ENCODING_TYPE" value="ISO-8859-15"/>
    <elementParameter field="TEXT" name="COMMIT_EVERY" value="10000" show="false"/>
    <elementParameter field="TEXT" name="CONNECTION_FORMAT" value="row"/>
    <metadata connector="FLOW" name="tMSSqlRow_1"/>
    <metadata connector="REJECT" name="REJECT">
      <column defaultValue="" key="false" length="255" name="errorCode" nullable="true" precision="0" sourceType="" type="id_String" originalLength="-1" usefulColumn="true"/>
      <column defaultValue="" key="false" length="255" name="errorMessage" nullable="true" precision="0" sourceType="" type="id_String" originalLength="-1" usefulColumn="true"/>
    </metadata>
  </node>
  <node componentName="tLogRow" componentVersion="0.101" offsetLabelX="0" offsetLabelY="0" posX="320" posY="-32">
    <elementParameter field="TEXT" name="UNIQUE_NAME" value="tLogRow_2" show="false"/>
    <elementParameter field="RADIO" name="BASIC_MODE" value="false"/>
    <elementParameter field="RADIO" name="TABLE_PRINT" value="false"/>
    <elementParameter field="RADIO" name="VERTICAL" value="true"/>
    <elementParameter field="RADIO" name="PRINT_UNIQUE" value="true"/>
    <elementParameter field="RADIO" name="PRINT_LABEL" value="false"/>
    <elementParameter field="RADIO" name="PRINT_UNIQUE_LABEL" value="false"/>
    <elementParameter field="TEXT" name="FIELDSEPARATOR" value="&quot;|&quot;" show="false"/>
    <elementParameter field="CHECK" name="PRINT_HEADER" value="false" show="false"/>
    <elementParameter field="CHECK" name="PRINT_UNIQUE_NAME" value="false" show="false"/>
    <elementParameter field="CHECK" name="PRINT_COLNAMES" value="false" show="false"/>
    <elementParameter field="CHECK" name="USE_FIXED_LENGTH" value="false" show="false"/>
    <elementParameter field="TABLE" name="LENGTHS" show="false">
      <elementValue elementRef="SCHEMA_COLUMN" value="errorCode"/>
      <elementValue elementRef="LENGTH" value="10"/>
      <elementValue elementRef="SCHEMA_COLUMN" value="errorMessage"/>
      <elementValue elementRef="LENGTH" value="10"/>
    </elementParameter>
    <elementParameter field="CHECK" name="PRINT_CONTENT_WITH_LOG4J" value="true"/>
    <elementParameter field="TEXT" name="SCHEMA_OPT_NUM" value="100" show="false"/>
    <elementParameter field="TEXT" name="CONNECTION_FORMAT" value="row"/>
    <metadata connector="FLOW" name="tLogRow_2">
      <column defaultValue="" key="false" length="255" name="errorCode" nullable="true" precision="0" sourceType="" type="id_String" originalLength="-1" usefulColumn="true"/>
      <column defaultValue="" key="false" length="255" name="errorMessage" nullable="true" precision="0" sourceType="" type="id_String" originalLength="-1" usefulColumn="true"/>
    </metadata>
  </node>
  <node componentName="tMSSqlRow" componentVersion="0.102" offsetLabelX="0" offsetLabelY="0" posX="480" posY="64">
    <elementParameter field="TEXT" name="UNIQUE_NAME" value="tMSSqlRow_3" show="false"/>
    <elementParameter field="CHECK" name="USE_EXISTING_CONNECTION" value="true"/>
    <elementParameter field="COMPONENT_LIST" name="CONNECTION" value="tMSSqlConnection_1"/>
    <elementParameter field="CLOSED_LIST" name="DRIVER" value="JTDS" show="false"/>
    <elementParameter field="TEXT" name="HOST" value="&quot;&quot;" show="false"/>
    <elementParameter field="TEXT" name="PORT" value="&quot;1433&quot;" show="false"/>
    <elementParameter field="TEXT" name="DB_SCHEMA" value="&quot;&quot;" show="false"/>
    <elementParameter field="TEXT" name="DBNAME" value="&quot;&quot;" show="false"/>
    <elementParameter field="TEXT" name="TYPE" value="MSSQL" show="false"/>
    <elementParameter field="TEXT" name="USER" value="&quot;&quot;" show="false"/>
    <elementParameter field="PASSWORD" name="PASS" value="enc:system.encryption.key.v1:S+C6QsKMs5YxqUkZRJuqEdS24ePjzugLh7uKdU4+" show="false"/>
    <elementParameter field="DBTABLE" name="TABLE" value="&quot;&quot;"/>
    <elementParameter field="CHECK" name="IDENTITY_INSERT" value="false"/>
    <elementParameter field="QUERYSTORE_TYPE" name="QUERYSTORE" value="&quot;&quot;"/>
    <elementParameter field="TECHNICAL" name="QUERYSTORE:REPOSITORY_QUERYSTORE_TYPE" value="" show="false"/>
    <elementParameter field="TECHNICAL" name="QUERYSTORE:QUERYSTORE_TYPE" value="BUILT_IN"/>
    <elementParameter field="MEMO_SQL" name="QUERY" value="&quot;RESTORE DATABASE &quot;+context.ipasDB +&quot;&#xD;&#xA;FROM DISK = '&quot; + context.dumpBaseIpasLocation +&quot;' &#xD;&#xA;WITH MOVE '&quot;+context.ipasDB +&quot;' TO '&quot;+context.sqlLocation+context.ipasDB +&quot;.mdf',&#xD;&#xA;MOVE '&quot;+context.ipasDB +&quot;_LOG' TO '&quot;+context.sqlLocation+context.ipasDB +&quot;_log.ldf', REPLACE; &quot;"/>
    <elementParameter field="LABEL" name="NOTE" value="This option only applies when deploying and running in the Talend Runtime" show="false"/>
    <elementParameter field="CHECK" name="SPECIFY_DATASOURCE_ALIAS" value="false" show="false"/>
    <elementParameter field="TEXT" name="DATASOURCE_ALIAS" value="&quot;&quot;" show="false"/>
    <elementParameter field="CHECK" name="DIE_ON_ERROR" value="false"/>
    <elementParameter field="TEXT" name="PROPERTIES" value="&quot;&quot;" show="false"/>
    <elementParameter field="CHECK" name="ACTIVE_DIR_AUTH" value="false" show="false"/>
    <elementParameter field="CHECK" name="PROPAGATE_RECORD_SET" value="false"/>
    <elementParameter field="COLUMN_LIST" name="RECORD_SET_COLUMN" value="" show="false"/>
    <elementParameter field="CHECK" name="USE_PREPAREDSTATEMENT" value="false"/>
    <elementParameter field="TABLE" name="SET_PREPAREDSTATEMENT_PARAMETERS" show="false"/>
    <elementParameter field="ENCODING_TYPE" name="ENCODING" value="&quot;ISO-8859-15&quot;" show="false"/>
    <elementParameter field="TECHNICAL" name="ENCODING:ENCODING_TYPE" value="ISO-8859-15"/>
    <elementParameter field="TEXT" name="COMMIT_EVERY" value="10000" show="false"/>
    <elementParameter field="TEXT" name="CONNECTION_FORMAT" value="row"/>
    <metadata connector="FLOW" name="tMSSqlRow_3"/>
    <metadata connector="REJECT" name="REJECT">
      <column defaultValue="" key="false" length="255" name="errorCode" nullable="true" precision="0" sourceType="" type="id_String" originalLength="-1" usefulColumn="true"/>
      <column defaultValue="" key="false" length="255" name="errorMessage" nullable="true" precision="0" sourceType="" type="id_String" originalLength="-1" usefulColumn="true"/>
    </metadata>
  </node>
  <node componentName="tLogRow" componentVersion="0.101" offsetLabelX="0" offsetLabelY="0" posX="448" posY="-64">
    <elementParameter field="TEXT" name="UNIQUE_NAME" value="tLogRow_3" show="false"/>
    <elementParameter field="RADIO" name="BASIC_MODE" value="false"/>
    <elementParameter field="RADIO" name="TABLE_PRINT" value="false"/>
    <elementParameter field="RADIO" name="VERTICAL" value="true"/>
    <elementParameter field="RADIO" name="PRINT_UNIQUE" value="true"/>
    <elementParameter field="RADIO" name="PRINT_LABEL" value="false"/>
    <elementParameter field="RADIO" name="PRINT_UNIQUE_LABEL" value="false"/>
    <elementParameter field="TEXT" name="FIELDSEPARATOR" value="&quot;|&quot;" show="false"/>
    <elementParameter field="CHECK" name="PRINT_HEADER" value="false" show="false"/>
    <elementParameter field="CHECK" name="PRINT_UNIQUE_NAME" value="false" show="false"/>
    <elementParameter field="CHECK" name="PRINT_COLNAMES" value="false" show="false"/>
    <elementParameter field="CHECK" name="USE_FIXED_LENGTH" value="false" show="false"/>
    <elementParameter field="TABLE" name="LENGTHS" show="false">
      <elementValue elementRef="SCHEMA_COLUMN" value="errorCode"/>
      <elementValue elementRef="LENGTH" value="10"/>
      <elementValue elementRef="SCHEMA_COLUMN" value="errorMessage"/>
      <elementValue elementRef="LENGTH" value="10"/>
    </elementParameter>
    <elementParameter field="CHECK" name="PRINT_CONTENT_WITH_LOG4J" value="true"/>
    <elementParameter field="TEXT" name="SCHEMA_OPT_NUM" value="100" show="false"/>
    <elementParameter field="TEXT" name="CONNECTION_FORMAT" value="row"/>
    <metadata connector="FLOW" name="tLogRow_3">
      <column defaultValue="" key="false" length="255" name="errorCode" nullable="true" precision="0" sourceType="" type="id_String" originalLength="-1" usefulColumn="true"/>
      <column defaultValue="" key="false" length="255" name="errorMessage" nullable="true" precision="0" sourceType="" type="id_String" originalLength="-1" usefulColumn="true"/>
    </metadata>
  </node>
  <node componentName="tMSSqlRow" componentVersion="0.102" offsetLabelX="0" offsetLabelY="0" posX="672" posY="64">
    <elementParameter field="TEXT" name="UNIQUE_NAME" value="tMSSqlRow_42" show="false"/>
    <elementParameter field="CHECK" name="USE_EXISTING_CONNECTION" value="true"/>
    <elementParameter field="COMPONENT_LIST" name="CONNECTION" value="tMSSqlConnection_1"/>
    <elementParameter field="CLOSED_LIST" name="DRIVER" value="JTDS" show="false"/>
    <elementParameter field="TEXT" name="HOST" value="&quot;&quot;" show="false"/>
    <elementParameter field="TEXT" name="PORT" value="&quot;1433&quot;" show="false"/>
    <elementParameter field="TEXT" name="DB_SCHEMA" value="&quot;&quot;" show="false"/>
    <elementParameter field="TEXT" name="DBNAME" value="&quot;&quot;" show="false"/>
    <elementParameter field="TEXT" name="TYPE" value="MSSQL" show="false"/>
    <elementParameter field="TEXT" name="USER" value="&quot;&quot;" show="false"/>
    <elementParameter field="PASSWORD" name="PASS" value="enc:system.encryption.key.v1:YixkSC4tYkoLmqVfmpxSCs64manNDEdieu5PBItV" show="false"/>
    <elementParameter field="DBTABLE" name="TABLE" value="&quot;&quot;"/>
    <elementParameter field="CHECK" name="IDENTITY_INSERT" value="false"/>
    <elementParameter field="QUERYSTORE_TYPE" name="QUERYSTORE" value="&quot;&quot;"/>
    <elementParameter field="TECHNICAL" name="QUERYSTORE:REPOSITORY_QUERYSTORE_TYPE" value="" show="false"/>
    <elementParameter field="TECHNICAL" name="QUERYSTORE:QUERYSTORE_TYPE" value="BUILT_IN"/>
    <elementParameter field="MEMO_SQL" name="QUERY" value="&quot;&#xD;&#xA;USE &quot;+context.intermediateDB+&quot;;&#xD;&#xA;BEGIN&#xD;&#xA;&#x9;if not exists(select * from DBO.SYSUSERS where name = '&quot;+ context.ipasUser +&quot;')&#xD;&#xA;    CREATE USER &quot;+context.ipasUser+&quot; FOR LOGIN &quot;+context.ipasUser+&quot;;&#xD;&#xA;&#xD;&#xA;   EXEC sp_addrolemember N'db_datareader', N'&quot;+context.ipasUser+&quot;';&#xD;&#xA;   EXEC sp_addrolemember N'db_datawriter', N'&quot;+context.ipasUser+&quot;';&#xD;&#xA;&#xD;&#xA;   ALTER LOGIN &quot;+ context.ipasUser+&quot; WITH PASSWORD ='&quot;+context.ipasPassword+&quot;';&#xD;&#xA;&#x9;ALTER LOGIN &quot;+context.ipasUser+&quot; WITH&#xD;&#xA;     CHECK_POLICY = OFF,&#xD;&#xA;      CHECK_EXPIRATION = OFF;&#xD;&#xA;END;&#xD;&#xA;&#xD;&#xA;&#xD;&#xA;&quot;"/>
    <elementParameter field="LABEL" name="NOTE" value="This option only applies when deploying and running in the Talend Runtime" show="false"/>
    <elementParameter field="CHECK" name="SPECIFY_DATASOURCE_ALIAS" value="false" show="false"/>
    <elementParameter field="TEXT" name="DATASOURCE_ALIAS" value="&quot;&quot;" show="false"/>
    <elementParameter field="CHECK" name="DIE_ON_ERROR" value="false"/>
    <elementParameter field="TEXT" name="PROPERTIES" value="&quot;&quot;" show="false"/>
    <elementParameter field="CHECK" name="ACTIVE_DIR_AUTH" value="false" show="false"/>
    <elementParameter field="CHECK" name="PROPAGATE_RECORD_SET" value="false"/>
    <elementParameter field="COLUMN_LIST" name="RECORD_SET_COLUMN" value="" show="false"/>
    <elementParameter field="CHECK" name="USE_PREPAREDSTATEMENT" value="false"/>
    <elementParameter field="TABLE" name="SET_PREPAREDSTATEMENT_PARAMETERS" show="false"/>
    <elementParameter field="ENCODING_TYPE" name="ENCODING" value="&quot;ISO-8859-15&quot;" show="false"/>
    <elementParameter field="TECHNICAL" name="ENCODING:ENCODING_TYPE" value="ISO-8859-15"/>
    <elementParameter field="TEXT" name="COMMIT_EVERY" value="10000" show="false"/>
    <elementParameter field="TEXT" name="CONNECTION_FORMAT" value="row"/>
    <metadata connector="FLOW" name="tMSSqlRow_42"/>
    <metadata connector="REJECT" name="REJECT">
      <column defaultValue="" key="false" length="255" name="errorCode" nullable="true" precision="0" sourceType="" type="id_String" originalLength="-1" usefulColumn="true"/>
      <column defaultValue="" key="false" length="255" name="errorMessage" nullable="true" precision="0" sourceType="" type="id_String" originalLength="-1" usefulColumn="true"/>
    </metadata>
  </node>
  <node componentName="tLogRow" componentVersion="0.101" offsetLabelX="0" offsetLabelY="0" posX="768" posY="-64">
    <elementParameter field="TEXT" name="UNIQUE_NAME" value="tLogRow_6" show="false"/>
    <elementParameter field="RADIO" name="BASIC_MODE" value="false"/>
    <elementParameter field="RADIO" name="TABLE_PRINT" value="false"/>
    <elementParameter field="RADIO" name="VERTICAL" value="true"/>
    <elementParameter field="RADIO" name="PRINT_UNIQUE" value="true"/>
    <elementParameter field="RADIO" name="PRINT_LABEL" value="false"/>
    <elementParameter field="RADIO" name="PRINT_UNIQUE_LABEL" value="false"/>
    <elementParameter field="TEXT" name="FIELDSEPARATOR" value="&quot;|&quot;" show="false"/>
    <elementParameter field="CHECK" name="PRINT_HEADER" value="false" show="false"/>
    <elementParameter field="CHECK" name="PRINT_UNIQUE_NAME" value="false" show="false"/>
    <elementParameter field="CHECK" name="PRINT_COLNAMES" value="false" show="false"/>
    <elementParameter field="CHECK" name="USE_FIXED_LENGTH" value="false" show="false"/>
    <elementParameter field="TABLE" name="LENGTHS" show="false">
      <elementValue elementRef="SCHEMA_COLUMN" value="errorCode"/>
      <elementValue elementRef="LENGTH" value="10"/>
      <elementValue elementRef="SCHEMA_COLUMN" value="errorMessage"/>
      <elementValue elementRef="LENGTH" value="10"/>
    </elementParameter>
    <elementParameter field="CHECK" name="PRINT_CONTENT_WITH_LOG4J" value="true"/>
    <elementParameter field="TEXT" name="SCHEMA_OPT_NUM" value="100" show="false"/>
    <elementParameter field="TEXT" name="CONNECTION_FORMAT" value="row"/>
    <metadata connector="FLOW" name="tLogRow_6">
      <column defaultValue="" key="false" length="255" name="errorCode" nullable="true" precision="0" sourceType="" type="id_String" originalLength="-1" usefulColumn="true"/>
      <column defaultValue="" key="false" length="255" name="errorMessage" nullable="true" precision="0" sourceType="" type="id_String" originalLength="-1" usefulColumn="true"/>
    </metadata>
  </node>
  <node componentName="tMSSqlConnection" componentVersion="0.102" offsetLabelX="-25" offsetLabelY="32" posX="0" posY="608">
    <elementParameter field="TEXT" name="UNIQUE_NAME" value="tMSSqlConnection_3" show="false"/>
    <elementParameter field="CHECK" name="TSTATCATCHER_STATS" value="true"/>
    <elementParameter field="CLOSED_LIST" name="DRIVER" value="JTDS"/>
    <elementParameter field="TEXT" name="HOST" value="context.intermediateHost"/>
    <elementParameter field="TEXT" name="TYPE" value="MSSQL" show="false"/>
    <elementParameter field="TEXT" name="PORT" value="context.intermediatePort"/>
    <elementParameter field="TEXT" name="SCHEMA_DB" value="&quot;&quot;"/>
    <elementParameter field="TEXT" name="DBNAME" value="context.intermediateDB"/>
    <elementParameter field="TEXT" name="USER" value="context.intermediateUser"/>
    <elementParameter field="PASSWORD" name="PASS" value="enc:system.encryption.key.v1:XJn0Vz6xP5Yq9VBM1eA4DYhw8jsk+lOjvbcWqTI0K8Z5f4gWo9i4alZp9qtSxefvaE/2zEI/C/I="/>
    <elementParameter field="ENCODING_TYPE" name="ENCODING" value="&quot;ISO-8859-15&quot;" show="false"/>
    <elementParameter field="TECHNICAL" name="ENCODING:ENCODING_TYPE" value="ISO-8859-15"/>
    <elementParameter field="TEXT" name="PROPERTIES" value=" &quot;allowMultiQueries=true&quot;"/>
    <elementParameter field="CHECK" name="USE_SHARED_CONNECTION" value="false"/>
    <elementParameter field="TEXT" name="SHARED_CONNECTION_NAME" value="" show="false"/>
    <elementParameter field="LABEL" name="NOTE" value="This option only applies when deploying and running in the Talend Runtime"/>
    <elementParameter field="CHECK" name="SPECIFY_DATASOURCE_ALIAS" value="false"/>
    <elementParameter field="TEXT" name="DATASOURCE_ALIAS" value="&quot;&quot;" show="false"/>
    <elementParameter field="CHECK" name="ACTIVE_DIR_AUTH" value="false" show="false"/>
    <elementParameter field="CHECK" name="AUTO_COMMIT" value="true"/>
    <elementParameter field="CHECK" name="SHARE_IDENTITY_SETTING" value="false"/>
    <elementParameter field="TEXT" name="CONNECTION_FORMAT" value="row"/>
  </node>
  <node componentName="tMSSqlRow" componentVersion="0.102" offsetLabelX="50" offsetLabelY="37" posX="192" posY="640">
    <elementParameter field="TEXT" name="UNIQUE_NAME" value="tMSSqlRow_2" show="false"/>
    <elementParameter field="CHECK" name="ACTIVATE" value="false"/>
    <elementParameter field="CHECK" name="USE_EXISTING_CONNECTION" value="true"/>
    <elementParameter field="COMPONENT_LIST" name="CONNECTION" value="tMSSqlConnection_3"/>
    <elementParameter field="CLOSED_LIST" name="DRIVER" value="JTDS" show="false"/>
    <elementParameter field="TEXT" name="HOST" value="&quot;&quot;" show="false"/>
    <elementParameter field="TEXT" name="PORT" value="&quot;1433&quot;" show="false"/>
    <elementParameter field="TEXT" name="DB_SCHEMA" value="&quot;&quot;" show="false"/>
    <elementParameter field="TEXT" name="DBNAME" value="&quot;&quot;" show="false"/>
    <elementParameter field="TEXT" name="TYPE" value="MSSQL" show="false"/>
    <elementParameter field="TEXT" name="USER" value="&quot;&quot;" show="false"/>
    <elementParameter field="PASSWORD" name="PASS" value="enc:system.encryption.key.v1:6UN8vQnfwrxR1VsKOzz7A5InlDYIoGsuFxtxazQQ" show="false"/>
    <elementParameter field="DBTABLE" name="TABLE" value="&quot;VW_IMPORT_PATENT&quot;"/>
    <elementParameter field="CHECK" name="IDENTITY_INSERT" value="false"/>
    <elementParameter field="QUERYSTORE_TYPE" name="QUERYSTORE" value="&quot;&quot;"/>
    <elementParameter field="TECHNICAL" name="QUERYSTORE:REPOSITORY_QUERYSTORE_TYPE" value="" show="false"/>
    <elementParameter field="TECHNICAL" name="QUERYSTORE:QUERYSTORE_TYPE" value="BUILT_IN"/>
    <elementParameter field="MEMO_SQL" name="QUERY" value="&quot;&#xD;&#xA;update VW_IMPORT_MARK set IND_IMPORT=null;&#xD;&#xA;update VW_IMPORT_USERDOC set IND_IMPORT=null;&#xD;&#xA;/* update VW_IMPORT_PATENT set FILING_DATE=cast(FILING_DATE as date), RECEPTION_DATE=cast (RECEPTION_DATE as date);&#xD;&#xA;&#xD;&#xA;update VW_IMPORT_AGENT_persons set NATIONALITY_COUNTRY_CODE='PY' where NATIONALITY_COUNTRY_CODE in ('00','06','--');&#xD;&#xA;  update VW_IMPORT_AGENT_persons set RESIDENCE_COUNTRY_CODE='PY' where RESIDENCE_COUNTRY_CODE in ('00','06','--');&#xD;&#xA;update VW_IMPORT_PATENT_OWNERS set NATIONALITY_COUNTRY_CODE='XX' where NATIONALITY_COUNTRY_CODE in ('..');&#xD;&#xA;  update VW_IMPORT_PATENT_OWNERS set RESIDENCE_COUNTRY_CODE='XX' where RESIDENCE_COUNTRY_CODE in ('..');&#xD;&#xA;update VW_IMPORT_PATENT_INVENTORS set NATIONALITY_COUNTRY_CODE='XX' where NATIONALITY_COUNTRY_CODE in ('..');&#xD;&#xA;  update VW_IMPORT_PATENT_INVENTORS set RESIDENCE_COUNTRY_CODE='XX' where RESIDENCE_COUNTRY_CODE in ('..');&#xD;&#xA;update VW_IMPORT_PATENT_REPRS set NATIONALITY_COUNTRY_CODE='XX' where NATIONALITY_COUNTRY_CODE in ('..');&#xD;&#xA;  update VW_IMPORT_PATENT_REPRS set RESIDENCE_COUNTRY_CODE='XX' where RESIDENCE_COUNTRY_CODE in ('..');&#xD;&#xA;update VW_IMPORT_USERDOC_REPRS set NATIONALITY_COUNTRY_CODE='XX' where NATIONALITY_COUNTRY_CODE in ('..');&#xD;&#xA;  update VW_IMPORT_USERDOC_REPRS set RESIDENCE_COUNTRY_CODE='XX' where RESIDENCE_COUNTRY_CODE in ('..');&#xD;&#xA;  update VW_IMPORT_PATENT_REPRS set RESIDENCE_COUNTRY_CODE='XX' where RESIDENCE_COUNTRY_CODE in ('..');&#xD;&#xA;update VW_IMPORT_PATENT_REPRS set NATIONALITY_COUNTRY_CODE='XX' where NATIONALITY_COUNTRY_CODE in ('..');&#xD;&#xA;update VW_IMPORT_PATENT_ACTIONS set ACTION_USER=4 where ACTION_USER is null;&#xD;&#xA;update VW_IMPORT_USERDOC_ACTIONS set ACTION_USER=4 where ACTION_USER is null;&#xD;&#xA;update VW_IMPORT_USERDOC set USERDOC_TYPE='ACL' where USERDOC_TYPE in ('AMA','DS','MO','PA');&#xD;&#xA;&#xD;&#xA;&#xD;&#xA;&#xD;&#xA;*/&#xD;&#xA;&quot;"/>
    <elementParameter field="LABEL" name="NOTE" value="This option only applies when deploying and running in the Talend Runtime" show="false"/>
    <elementParameter field="CHECK" name="SPECIFY_DATASOURCE_ALIAS" value="false" show="false"/>
    <elementParameter field="TEXT" name="DATASOURCE_ALIAS" value="&quot;&quot;" show="false"/>
    <elementParameter field="CHECK" name="DIE_ON_ERROR" value="false"/>
    <elementParameter field="TEXT" name="PROPERTIES" value="&quot;&quot;" show="false"/>
    <elementParameter field="CHECK" name="ACTIVE_DIR_AUTH" value="false" show="false"/>
    <elementParameter field="CHECK" name="PROPAGATE_RECORD_SET" value="false"/>
    <elementParameter field="COLUMN_LIST" name="RECORD_SET_COLUMN" value="" show="false"/>
    <elementParameter field="CHECK" name="USE_PREPAREDSTATEMENT" value="false"/>
    <elementParameter field="TABLE" name="SET_PREPAREDSTATEMENT_PARAMETERS" show="false"/>
    <elementParameter field="ENCODING_TYPE" name="ENCODING" value="&quot;ISO-8859-15&quot;" show="false"/>
    <elementParameter field="TECHNICAL" name="ENCODING:ENCODING_TYPE" value="ISO-8859-15"/>
    <elementParameter field="TEXT" name="COMMIT_EVERY" value="10000" show="false"/>
    <elementParameter field="TEXT" name="CONNECTION_FORMAT" value="row"/>
    <metadata connector="FLOW" name="tMSSqlRow_2"/>
    <metadata connector="REJECT" name="REJECT">
      <column key="false" length="255" name="errorCode" nullable="true" precision="0" sourceType="" type="id_String" originalLength="-1" usefulColumn="true"/>
      <column key="false" length="255" name="errorMessage" nullable="true" precision="0" sourceType="" type="id_String" originalLength="-1" usefulColumn="true"/>
    </metadata>
  </node>
  <node componentName="tMSSqlCommit" componentVersion="0.102" offsetLabelX="0" offsetLabelY="0" posX="416" posY="640">
    <elementParameter field="TEXT" name="UNIQUE_NAME" value="tMSSqlCommit_3" show="false"/>
    <elementParameter field="CHECK" name="ACTIVATE" value="false"/>
    <elementParameter field="COMPONENT_LIST" name="CONNECTION" value="tMSSqlConnection_3"/>
    <elementParameter field="CHECK" name="CLOSE" value="false"/>
    <elementParameter field="TEXT" name="CONNECTION_FORMAT" value="row"/>
    <metadata connector="FLOW" name="tMSSqlCommit_3"/>
  </node>
  <node componentName="tLogRow" componentVersion="0.101" offsetLabelX="0" offsetLabelY="0" posX="320" posY="608">
    <elementParameter field="TEXT" name="UNIQUE_NAME" value="tLogRow_7" show="false"/>
    <elementParameter field="CHECK" name="ACTIVATE" value="false"/>
    <elementParameter field="RADIO" name="BASIC_MODE" value="false"/>
    <elementParameter field="RADIO" name="TABLE_PRINT" value="false"/>
    <elementParameter field="RADIO" name="VERTICAL" value="true"/>
    <elementParameter field="RADIO" name="PRINT_UNIQUE" value="true"/>
    <elementParameter field="RADIO" name="PRINT_LABEL" value="false"/>
    <elementParameter field="RADIO" name="PRINT_UNIQUE_LABEL" value="false"/>
    <elementParameter field="TEXT" name="FIELDSEPARATOR" value="&quot;|&quot;" show="false"/>
    <elementParameter field="CHECK" name="PRINT_HEADER" value="false" show="false"/>
    <elementParameter field="CHECK" name="PRINT_UNIQUE_NAME" value="false" show="false"/>
    <elementParameter field="CHECK" name="PRINT_COLNAMES" value="false" show="false"/>
    <elementParameter field="CHECK" name="USE_FIXED_LENGTH" value="false" show="false"/>
    <elementParameter field="TABLE" name="LENGTHS" show="false">
      <elementValue elementRef="SCHEMA_COLUMN" value="errorCode"/>
      <elementValue elementRef="LENGTH" value="10"/>
      <elementValue elementRef="SCHEMA_COLUMN" value="errorMessage"/>
      <elementValue elementRef="LENGTH" value="10"/>
    </elementParameter>
    <elementParameter field="CHECK" name="PRINT_CONTENT_WITH_LOG4J" value="true"/>
    <elementParameter field="TEXT" name="SCHEMA_OPT_NUM" value="100" show="false"/>
    <elementParameter field="TEXT" name="CONNECTION_FORMAT" value="row"/>
    <metadata connector="FLOW" name="tLogRow_7">
      <column defaultValue="" key="false" length="255" name="errorCode" nullable="true" precision="0" sourceType="" type="id_String" originalLength="-1" usefulColumn="true"/>
      <column defaultValue="" key="false" length="255" name="errorMessage" nullable="true" precision="0" sourceType="" type="id_String" originalLength="-1" usefulColumn="true"/>
    </metadata>
  </node>
  <node componentName="tMSSqlConnection" componentVersion="0.102" offsetLabelX="0" offsetLabelY="0" posX="-64" posY="928">
    <elementParameter field="TEXT" name="UNIQUE_NAME" value="tMSSqlConnection_4" show="false"/>
    <elementParameter field="CHECK" name="TSTATCATCHER_STATS" value="true"/>
    <elementParameter field="CLOSED_LIST" name="DRIVER" value="JTDS"/>
    <elementParameter field="TEXT" name="HOST" value="context.ipasHost"/>
    <elementParameter field="TEXT" name="TYPE" value="MSSQL" show="false"/>
    <elementParameter field="TEXT" name="PORT" value="context.ipasPort"/>
    <elementParameter field="TEXT" name="SCHEMA_DB" value="&quot;&quot;"/>
    <elementParameter field="TEXT" name="DBNAME" value="context.ipasDB"/>
    <elementParameter field="TEXT" name="USER" value="context.ipasUser"/>
    <elementParameter field="PASSWORD" name="PASS" value="enc:system.encryption.key.v1:cj+0PcynS/8K1DuYDlf2Jyhf3uEXRirjB/+roV+HRcKkGRuakN4CGp9BKsjrm+rO"/>
    <elementParameter field="ENCODING_TYPE" name="ENCODING" value="&quot;ISO-8859-15&quot;" show="false"/>
    <elementParameter field="TECHNICAL" name="ENCODING:ENCODING_TYPE" value="ISO-8859-15"/>
    <elementParameter field="TEXT" name="PROPERTIES" value=" &quot;allowMultiQueries=true&quot;"/>
    <elementParameter field="CHECK" name="USE_SHARED_CONNECTION" value="false"/>
    <elementParameter field="TEXT" name="SHARED_CONNECTION_NAME" value="" show="false"/>
    <elementParameter field="LABEL" name="NOTE" value="This option only applies when deploying and running in the Talend Runtime"/>
    <elementParameter field="CHECK" name="SPECIFY_DATASOURCE_ALIAS" value="false"/>
    <elementParameter field="TEXT" name="DATASOURCE_ALIAS" value="&quot;&quot;" show="false"/>
    <elementParameter field="CHECK" name="ACTIVE_DIR_AUTH" value="false" show="false"/>
    <elementParameter field="CHECK" name="AUTO_COMMIT" value="true"/>
    <elementParameter field="CHECK" name="SHARE_IDENTITY_SETTING" value="false"/>
    <elementParameter field="TEXT" name="CONNECTION_FORMAT" value="row"/>
  </node>
  <node componentName="tMSSqlRow" componentVersion="0.102" offsetLabelX="0" offsetLabelY="0" posX="160" posY="800">
    <elementParameter field="TEXT" name="UNIQUE_NAME" value="tMSSqlRow_6" show="false"/>
    <elementParameter field="CHECK" name="USE_EXISTING_CONNECTION" value="true"/>
    <elementParameter field="COMPONENT_LIST" name="CONNECTION" value="tMSSqlConnection_3"/>
    <elementParameter field="CLOSED_LIST" name="DRIVER" value="JTDS" show="false"/>
    <elementParameter field="TEXT" name="HOST" value="&quot;&quot;" show="false"/>
    <elementParameter field="TEXT" name="PORT" value="&quot;1433&quot;" show="false"/>
    <elementParameter field="TEXT" name="DB_SCHEMA" value="&quot;&quot;" show="false"/>
    <elementParameter field="TEXT" name="DBNAME" value="&quot;&quot;" show="false"/>
    <elementParameter field="TEXT" name="TYPE" value="MSSQL" show="false"/>
    <elementParameter field="TEXT" name="USER" value="&quot;&quot;" show="false"/>
    <elementParameter field="PASSWORD" name="PASS" value="enc:system.encryption.key.v1:ANhSFJzitc8hMTeW1BEhTlwy30ne/Mgj0Hsixuge" show="false"/>
    <elementParameter field="DBTABLE" name="TABLE" value="&quot;&quot;"/>
    <elementParameter field="CHECK" name="IDENTITY_INSERT" value="false"/>
    <elementParameter field="QUERYSTORE_TYPE" name="QUERYSTORE" value="&quot;&quot;"/>
    <elementParameter field="TECHNICAL" name="QUERYSTORE:REPOSITORY_QUERYSTORE_TYPE" value="" show="false"/>
    <elementParameter field="TECHNICAL" name="QUERYSTORE:QUERYSTORE_TYPE" value="BUILT_IN"/>
    <elementParameter field="MEMO_SQL" name="QUERY" value="&quot;update VW_IMPORT_AGENT set IND_IMPORT = null;&#xD;&#xA;update VW_IMPORT_MARK set IND_IMPORT = null;&#xD;&#xA;update VW_IMPORT_MARK_RELS set IND_IMPORT = null;&#xD;&#xA;update VW_IMPORT_USERDOC set IND_IMPORT = null;&quot;"/>
    <elementParameter field="LABEL" name="NOTE" value="This option only applies when deploying and running in the Talend Runtime" show="false"/>
    <elementParameter field="CHECK" name="SPECIFY_DATASOURCE_ALIAS" value="false" show="false"/>
    <elementParameter field="TEXT" name="DATASOURCE_ALIAS" value="&quot;&quot;" show="false"/>
    <elementParameter field="CHECK" name="DIE_ON_ERROR" value="false"/>
    <elementParameter field="TEXT" name="PROPERTIES" value="&quot;&quot;" show="false"/>
    <elementParameter field="CHECK" name="ACTIVE_DIR_AUTH" value="false" show="false"/>
    <elementParameter field="CHECK" name="PROPAGATE_RECORD_SET" value="false"/>
    <elementParameter field="COLUMN_LIST" name="RECORD_SET_COLUMN" value="" show="false"/>
    <elementParameter field="CHECK" name="USE_PREPAREDSTATEMENT" value="false"/>
    <elementParameter field="TABLE" name="SET_PREPAREDSTATEMENT_PARAMETERS" show="false"/>
    <elementParameter field="ENCODING_TYPE" name="ENCODING" value="&quot;ISO-8859-15&quot;" show="false"/>
    <elementParameter field="TECHNICAL" name="ENCODING:ENCODING_TYPE" value="ISO-8859-15"/>
    <elementParameter field="TEXT" name="COMMIT_EVERY" value="10000" show="false"/>
    <elementParameter field="TEXT" name="CONNECTION_FORMAT" value="row"/>
    <metadata connector="FLOW" name="tMSSqlRow_6"/>
    <metadata connector="REJECT" name="REJECT">
      <column key="false" length="255" name="errorCode" nullable="true" precision="0" sourceType="" type="id_String" originalLength="-1" usefulColumn="true"/>
      <column key="false" length="255" name="errorMessage" nullable="true" precision="0" sourceType="" type="id_String" originalLength="-1" usefulColumn="true"/>
    </metadata>
  </node>
  <node componentName="tLogRow" componentVersion="0.101" offsetLabelX="0" offsetLabelY="0" posX="384" posY="800">
    <elementParameter field="TEXT" name="UNIQUE_NAME" value="tLogRow_8" show="false"/>
    <elementParameter field="RADIO" name="BASIC_MODE" value="false"/>
    <elementParameter field="RADIO" name="TABLE_PRINT" value="false"/>
    <elementParameter field="RADIO" name="VERTICAL" value="true"/>
    <elementParameter field="RADIO" name="PRINT_UNIQUE" value="true"/>
    <elementParameter field="RADIO" name="PRINT_LABEL" value="false"/>
    <elementParameter field="RADIO" name="PRINT_UNIQUE_LABEL" value="false"/>
    <elementParameter field="TEXT" name="FIELDSEPARATOR" value="&quot;|&quot;" show="false"/>
    <elementParameter field="CHECK" name="PRINT_HEADER" value="false" show="false"/>
    <elementParameter field="CHECK" name="PRINT_UNIQUE_NAME" value="false" show="false"/>
    <elementParameter field="CHECK" name="PRINT_COLNAMES" value="false" show="false"/>
    <elementParameter field="CHECK" name="USE_FIXED_LENGTH" value="false" show="false"/>
    <elementParameter field="TABLE" name="LENGTHS" show="false">
      <elementValue elementRef="SCHEMA_COLUMN" value="errorCode"/>
      <elementValue elementRef="LENGTH" value="10"/>
      <elementValue elementRef="SCHEMA_COLUMN" value="errorMessage"/>
      <elementValue elementRef="LENGTH" value="10"/>
    </elementParameter>
    <elementParameter field="CHECK" name="PRINT_CONTENT_WITH_LOG4J" value="true"/>
    <elementParameter field="TEXT" name="SCHEMA_OPT_NUM" value="100" show="false"/>
    <elementParameter field="TEXT" name="CONNECTION_FORMAT" value="row"/>
    <metadata connector="FLOW" name="tLogRow_8">
      <column defaultValue="" key="false" length="255" name="errorCode" nullable="true" precision="0" sourceType="" type="id_String" originalLength="-1" usefulColumn="true"/>
      <column defaultValue="" key="false" length="255" name="errorMessage" nullable="true" precision="0" sourceType="" type="id_String" originalLength="-1" usefulColumn="true"/>
    </metadata>
  </node>
  <node componentName="tMSSqlRow" componentVersion="0.102" offsetLabelX="0" offsetLabelY="0" posX="224" posY="1184">
    <elementParameter field="TEXT" name="UNIQUE_NAME" value="tMSSqlRow_7" show="false"/>
    <elementParameter field="CHECK" name="USE_EXISTING_CONNECTION" value="true"/>
    <elementParameter field="COMPONENT_LIST" name="CONNECTION" value="tMSSqlConnection_4"/>
    <elementParameter field="CLOSED_LIST" name="DRIVER" value="JTDS" show="false"/>
    <elementParameter field="TEXT" name="HOST" value="&quot;&quot;" show="false"/>
    <elementParameter field="TEXT" name="PORT" value="&quot;1433&quot;" show="false"/>
    <elementParameter field="TEXT" name="DB_SCHEMA" value="&quot;&quot;" show="false"/>
    <elementParameter field="TEXT" name="DBNAME" value="&quot;&quot;" show="false"/>
    <elementParameter field="TEXT" name="TYPE" value="MSSQL" show="false"/>
    <elementParameter field="TEXT" name="USER" value="&quot;&quot;" show="false"/>
    <elementParameter field="PASSWORD" name="PASS" value="enc:system.encryption.key.v1:CoF8WwBmGloxIl9lEePza+r6GUd5nG4HjQNyaLQ+" show="false"/>
    <elementParameter field="DBTABLE" name="TABLE" value="&quot;&quot;"/>
    <elementParameter field="CHECK" name="IDENTITY_INSERT" value="false"/>
    <elementParameter field="QUERYSTORE_TYPE" name="QUERYSTORE" value="&quot;&quot;"/>
    <elementParameter field="TECHNICAL" name="QUERYSTORE:REPOSITORY_QUERYSTORE_TYPE" value="" show="false"/>
    <elementParameter field="TECHNICAL" name="QUERYSTORE:QUERYSTORE_TYPE" value="BUILT_IN"/>
    <elementParameter field="MEMO_SQL" name="QUERY" value="&quot;If Exists ( SELECT name &#xD;&#xA;            FROM sysobjects  &#xD;&#xA;            WHERE name = 'ImportAgentValidate'&#xD;&#xA;            AND type = 'P')&#xD;&#xA;&#x9;DROP PROCEDURE ImportAgentValidate&quot;"/>
    <elementParameter field="LABEL" name="NOTE" value="This option only applies when deploying and running in the Talend Runtime" show="false"/>
    <elementParameter field="CHECK" name="SPECIFY_DATASOURCE_ALIAS" value="false" show="false"/>
    <elementParameter field="TEXT" name="DATASOURCE_ALIAS" value="&quot;&quot;" show="false"/>
    <elementParameter field="CHECK" name="DIE_ON_ERROR" value="false"/>
    <elementParameter field="TEXT" name="PROPERTIES" value="&quot;&quot;" show="false"/>
    <elementParameter field="CHECK" name="ACTIVE_DIR_AUTH" value="false" show="false"/>
    <elementParameter field="CHECK" name="PROPAGATE_RECORD_SET" value="false"/>
    <elementParameter field="COLUMN_LIST" name="RECORD_SET_COLUMN" value="" show="false"/>
    <elementParameter field="CHECK" name="USE_PREPAREDSTATEMENT" value="false"/>
    <elementParameter field="TABLE" name="SET_PREPAREDSTATEMENT_PARAMETERS" show="false"/>
    <elementParameter field="ENCODING_TYPE" name="ENCODING" value="&quot;ISO-8859-15&quot;" show="false"/>
    <elementParameter field="TECHNICAL" name="ENCODING:ENCODING_TYPE" value="ISO-8859-15"/>
    <elementParameter field="TEXT" name="COMMIT_EVERY" value="10000" show="false"/>
    <elementParameter field="TEXT" name="CONNECTION_FORMAT" value="row"/>
    <metadata connector="FLOW" name="tMSSqlRow_7"/>
    <metadata connector="REJECT" name="REJECT">
      <column defaultValue="" key="false" length="255" name="errorCode" nullable="true" precision="0" sourceType="" type="id_String" originalLength="-1" usefulColumn="true"/>
      <column defaultValue="" key="false" length="255" name="errorMessage" nullable="true" precision="0" sourceType="" type="id_String" originalLength="-1" usefulColumn="true"/>
    </metadata>
  </node>
  <node componentName="tMSSqlRow" componentVersion="0.102" offsetLabelX="0" offsetLabelY="0" posX="352" posY="1184">
    <elementParameter field="TEXT" name="UNIQUE_NAME" value="tMSSqlRow_8" show="false"/>
    <elementParameter field="CHECK" name="USE_EXISTING_CONNECTION" value="true"/>
    <elementParameter field="COMPONENT_LIST" name="CONNECTION" value="tMSSqlConnection_4"/>
    <elementParameter field="CLOSED_LIST" name="DRIVER" value="JTDS" show="false"/>
    <elementParameter field="TEXT" name="HOST" value="&quot;&quot;" show="false"/>
    <elementParameter field="TEXT" name="PORT" value="&quot;1433&quot;" show="false"/>
    <elementParameter field="TEXT" name="DB_SCHEMA" value="&quot;&quot;" show="false"/>
    <elementParameter field="TEXT" name="DBNAME" value="&quot;&quot;" show="false"/>
    <elementParameter field="TEXT" name="TYPE" value="MSSQL" show="false"/>
    <elementParameter field="TEXT" name="USER" value="&quot;&quot;" show="false"/>
    <elementParameter field="PASSWORD" name="PASS" value="enc:system.encryption.key.v1:EAeQsQKfHUDaEGJacvoqichJykW84x7oS9W+ecvj" show="false"/>
    <elementParameter field="DBTABLE" name="TABLE" value="&quot;&quot;"/>
    <elementParameter field="CHECK" name="IDENTITY_INSERT" value="false"/>
    <elementParameter field="QUERYSTORE_TYPE" name="QUERYSTORE" value="&quot;&quot;"/>
    <elementParameter field="TECHNICAL" name="QUERYSTORE:REPOSITORY_QUERYSTORE_TYPE" value="" show="false"/>
    <elementParameter field="TECHNICAL" name="QUERYSTORE:QUERYSTORE_TYPE" value="BUILT_IN"/>
    <elementParameter field="MEMO_SQL" name="QUERY" value="&quot;CREATE PROCEDURE ImportAgentValidate&#xD;&#xA;AS &#xD;&#xA;&#x9;BEGIN&#xD;&#xA;&#x9;&#x9;SET NOCOUNT ON&#xD;&#xA;&#x9;&#x9;&#xD;&#xA;&#x9;&#x9;/* Procedure name: ImportAgentValidate&#xD;&#xA;&#x9;&#x9;Input:  IPAS database and import tables not imported (i.e. IND_IMPORT not 1)&#xD;&#xA;&#x9;&#x9;Output: if errors, validation flag set to 2 and error messages in  [&quot;+ context.intermediateDB + &quot;].[dbo].VW_IMPORT_AGENT_RESULT&#xD;&#xA;&#x9;&#x9;if OK, validation flag set to 9&#xD;&#xA;&#x9;&#x9;*/&#xD;&#xA;&#x9;&#x9;&#xD;&#xA;&#x9;&#x9;/* flag all pending agents as to be validated */&#xD;&#xA;&#x9;&#x9;UPDATE   [&quot;+ context.intermediateDB + &quot;].[dbo].VW_import_agent   &#xD;&#xA;&#x9;&#x9;SET&#x9;ind_import = 0 &#xD;&#xA;&#x9;&#x9;WHERE  ind_import  is null&#xD;&#xA;&#x9;&#x9; OR&#x9;ind_import  not in ( 0  , 1  ) &#xD;&#xA;&#x9;&#x9;&#xD;&#xA;&#x9;&#x9;/* delete prior errors */&#xD;&#xA;&#x9;&#x9;DELETE FROM    [&quot;+ context.intermediateDB + &quot;].[dbo].VW_IMPORT_AGENT_RESULT    &#xD;&#xA;&#x9;&#x9;&#xD;&#xA;&#x9;&#x9;/* AGENT_CODE: if already exists in IP_AGENT, message ?Agent already exists in the database? */&#xD;&#xA;&#x9;&#x9;INSERT INTO   [&quot;+ context.intermediateDB + &quot;].[dbo].VW_IMPORT_AGENT_RESULT   &#xD;&#xA;&#x9;&#x9;&#x9;&#x9;( agent_code , &#xD;&#xA;&#x9;&#x9;&#x9;&#x9;ind_import , &#xD;&#xA;&#x9;&#x9;&#x9;&#x9;msg_import )  &#xD;&#xA;&#x9;&#x9;SELECT&#xD;&#xA;&#x9;&#x9;&#x9;&#x9; agent_code,&#xD;&#xA;&#x9;&#x9;&#x9;&#x9; 2,&#xD;&#xA;&#x9;&#x9;&#x9;&#x9; 'Agent already exists in the database'&#xD;&#xA;&#x9;&#x9;FROM   [&quot;+ context.intermediateDB + &quot;].[dbo].VW_import_agent &#xD;&#xA;&#x9;&#x9;WHERE&#x9; ind_import  = 0&#xD;&#xA;&#x9;&#x9; AND&#x9;AGENT_CODE  in&#xD;&#xA;&#x9;&#x9;&#x9;(&#xD;&#xA;&#x9;&#x9; &#x9;SELECT AGENT_CODE&#xD;&#xA;&#x9;&#x9;&#x9;FROM  IP_AGENT &#xD;&#xA;&#x9;&#x9;&#x9;)&#xD;&#xA;&#x9;&#x9;&#xD;&#xA;&#x9;&#x9;/* NATIONALITY_COUNTRY_CODE: if not exists in CF_GEO_COUNTRY, message ?Invalid agent nationality country code? */&#xD;&#xA;&#x9;&#x9;INSERT INTO   [&quot;+ context.intermediateDB + &quot;].[dbo].VW_IMPORT_AGENT_RESULT   &#xD;&#xA;&#x9;&#x9;&#x9;&#x9;( agent_code , &#xD;&#xA;&#x9;&#x9;&#x9;&#x9;ind_import , &#xD;&#xA;&#x9;&#x9;&#x9;&#x9;msg_import )  &#xD;&#xA;&#x9;&#x9;SELECT&#xD;&#xA;&#x9;&#x9;&#x9;&#x9; T.agent_code,&#xD;&#xA;&#x9;&#x9;&#x9;&#x9; 2,&#xD;&#xA;&#x9;&#x9;&#x9;&#x9; 'Invalid agent nationality country code'&#xD;&#xA;&#x9;&#x9;FROM   [&quot;+ context.intermediateDB + &quot;].[dbo].VW_import_agent_persons T JOIN  [&quot;+ context.intermediateDB + &quot;].[dbo].VW_import_agent M ON T.agent_code  = M.agent_code  &#xD;&#xA;&#x9;&#x9;WHERE&#x9; ind_import  = 0&#xD;&#xA;&#x9;&#x9; AND&#x9;NATIONALITY_COUNTRY_CODE COLLATE DATABASE_DEFAULT not in&#xD;&#xA;&#x9;&#x9;&#x9;(&#xD;&#xA;&#x9;&#x9; &#x9;SELECT COUNTRY_CODE&#xD;&#xA;&#x9;&#x9;&#x9;FROM  cf_geo_country &#xD;&#xA;&#x9;&#x9;&#x9;)&#xD;&#xA;&#x9;&#x9;&#xD;&#xA;&#x9;&#x9;/* LEGAL_NATURE: if not null and IND_COMPANY = 0, message ?Agent legal nature only applies when the person is a company? */&#xD;&#xA;&#x9;&#x9;INSERT INTO   [&quot;+ context.intermediateDB + &quot;].[dbo].VW_IMPORT_AGENT_RESULT   &#xD;&#xA;&#x9;&#x9;&#x9;&#x9;( agent_code , &#xD;&#xA;&#x9;&#x9;&#x9;&#x9;ind_import , &#xD;&#xA;&#x9;&#x9;&#x9;&#x9;msg_import )  &#xD;&#xA;&#x9;&#x9;SELECT&#xD;&#xA;&#x9;&#x9;&#x9;&#x9; T.agent_code,&#xD;&#xA;&#x9;&#x9;&#x9;&#x9; 2,&#xD;&#xA;&#x9;&#x9;&#x9;&#x9; 'Agent legal nature only applies when the person is a company'&#xD;&#xA;&#x9;&#x9;FROM   [&quot;+ context.intermediateDB + &quot;].[dbo].VW_import_agent_persons T JOIN  [&quot;+ context.intermediateDB + &quot;].[dbo].VW_import_agent M ON T.agent_code  = M.agent_code  &#xD;&#xA;&#x9;&#x9;WHERE&#x9; ind_import  = 0&#xD;&#xA;&#x9;&#x9; AND&#x9;LEGAL_NATURE  is not null&#xD;&#xA;&#x9;&#x9; AND&#x9;IND_COMPANY  = 0&#xD;&#xA;&#x9;&#x9;&#xD;&#xA;&#x9;&#x9;/* LEGAL_ID_TYPE: if not null and not exists if CF_PERSON_ID_TYPE with IND_GENERAL_ID = ?S?, &#xD;&#xA;&#x9;&#x9;       message ?Invalid agent legal id type? */&#xD;&#xA;&#x9;&#x9;INSERT INTO   [&quot;+ context.intermediateDB + &quot;].[dbo].VW_IMPORT_AGENT_RESULT   &#xD;&#xA;&#x9;&#x9;&#x9;&#x9;( agent_code , &#xD;&#xA;&#x9;&#x9;&#x9;&#x9;ind_import , &#xD;&#xA;&#x9;&#x9;&#x9;&#x9;msg_import )  &#xD;&#xA;&#x9;&#x9;SELECT&#xD;&#xA;&#x9;&#x9;&#x9;&#x9; T.agent_code,&#xD;&#xA;&#x9;&#x9;&#x9;&#x9; 2,&#xD;&#xA;&#x9;&#x9;&#x9;&#x9; 'Invalid agent legal id type'&#xD;&#xA;&#x9;&#x9;FROM   [&quot;+ context.intermediateDB + &quot;].[dbo].VW_import_agent_persons T JOIN  [&quot;+ context.intermediateDB + &quot;].[dbo].VW_import_agent M ON T.agent_code  = M.agent_code  &#xD;&#xA;&#x9;&#x9;WHERE&#x9; ind_import  = 0&#xD;&#xA;&#x9;&#x9; AND&#x9;LEGAL_ID_TYPE is not null&#xD;&#xA;&#x9;&#x9; AND&#x9;LEGAL_ID_TYPE COLLATE DATABASE_DEFAULT not in&#xD;&#xA;&#x9;&#x9;&#x9;(&#xD;&#xA;&#x9;&#x9; &#x9;SELECT PERSON_ID_TYP&#xD;&#xA;&#x9;&#x9;&#x9;FROM  CF_PERSON_ID_TYPE &#xD;&#xA;&#x9;&#x9;&#x9;WHERE&#x9; IND_GENERAL_ID  = 'S'&#xD;&#xA;&#x9;&#x9;&#x9;)&#xD;&#xA;&#x9;&#x9;&#xD;&#xA;&#x9;&#x9;/* INDIVIDUAL_ID_TYPE: if not null and not exists if CF_PERSON_ID_TYPE with IND_INDIVIDUAL_ID = ?S?, &#xD;&#xA;&#x9;&#x9;       message ?Invalid agent individual id type? */&#xD;&#xA;&#x9;&#x9;INSERT INTO   [&quot;+ context.intermediateDB + &quot;].[dbo].VW_IMPORT_AGENT_RESULT   &#xD;&#xA;&#x9;&#x9;&#x9;&#x9;( agent_code , &#xD;&#xA;&#x9;&#x9;&#x9;&#x9;ind_import , &#xD;&#xA;&#x9;&#x9;&#x9;&#x9;msg_import )  &#xD;&#xA;&#x9;&#x9;SELECT&#xD;&#xA;&#x9;&#x9;&#x9;&#x9; T.agent_code,&#xD;&#xA;&#x9;&#x9;&#x9;&#x9; 2,&#xD;&#xA;&#x9;&#x9;&#x9;&#x9; 'Invalid agent individual id type'&#xD;&#xA;&#x9;&#x9;FROM   [&quot;+ context.intermediateDB + &quot;].[dbo].VW_import_agent_persons T JOIN  [&quot;+ context.intermediateDB + &quot;].[dbo].VW_import_agent M ON T.agent_code  = M.agent_code  &#xD;&#xA;&#x9;&#x9;WHERE&#x9; ind_import  = 0&#xD;&#xA;&#x9;&#x9; AND&#x9;INDIVIDUAL_ID_TYPE  is not null&#xD;&#xA;&#x9;&#x9; AND&#x9;INDIVIDUAL_ID_TYPE  COLLATE DATABASE_DEFAULT not in&#xD;&#xA;&#x9;&#x9;&#x9;(&#xD;&#xA;&#x9;&#x9; &#x9;SELECT PERSON_ID_TYP&#xD;&#xA;&#x9;&#x9;&#x9;FROM  CF_PERSON_ID_TYPE &#xD;&#xA;&#x9;&#x9;&#x9;WHERE&#x9; IND_INDIVIDUAL_ID  = 'S'&#xD;&#xA;&#x9;&#x9;&#x9;)&#xD;&#xA;&#x9;&#x9;&#xD;&#xA;&#x9;&#x9;/* If LEGAL_ID_TYPE is not null and LEGAL_ID_NBR is null, message ?Missing agent legal id number? */&#xD;&#xA;&#x9;&#x9;INSERT INTO   [&quot;+ context.intermediateDB + &quot;].[dbo].VW_IMPORT_AGENT_RESULT   &#xD;&#xA;&#x9;&#x9;&#x9;&#x9;( agent_code , &#xD;&#xA;&#x9;&#x9;&#x9;&#x9;ind_import , &#xD;&#xA;&#x9;&#x9;&#x9;&#x9;msg_import )  &#xD;&#xA;&#x9;&#x9;SELECT&#xD;&#xA;&#x9;&#x9;&#x9;&#x9; T.agent_code,&#xD;&#xA;&#x9;&#x9;&#x9;&#x9; 2,&#xD;&#xA;&#x9;&#x9;&#x9;&#x9; 'Missing agent legal id number'&#xD;&#xA;&#x9;&#x9;FROM   [&quot;+ context.intermediateDB + &quot;].[dbo].VW_import_agent_persons T JOIN  [&quot;+ context.intermediateDB + &quot;].[dbo].VW_import_agent M ON T.agent_code  = M.agent_code  &#xD;&#xA;&#x9;&#x9;WHERE&#x9; ind_import  = 0&#xD;&#xA;&#x9;&#x9; AND&#x9;LEGAL_ID_TYPE  is not null&#xD;&#xA;&#x9;&#x9; AND&#x9;LEGAL_ID_NBR  is null&#xD;&#xA;&#x9;&#x9;&#xD;&#xA;&#x9;&#x9;/* If LEGAL_ID_TYPE is null and LEGAL_ID_NBR is not null, message ?Missing agent legal id type? */&#xD;&#xA;&#x9;&#x9;INSERT INTO   [&quot;+ context.intermediateDB + &quot;].[dbo].VW_IMPORT_AGENT_RESULT   &#xD;&#xA;&#x9;&#x9;&#x9;&#x9;( agent_code , &#xD;&#xA;&#x9;&#x9;&#x9;&#x9;ind_import , &#xD;&#xA;&#x9;&#x9;&#x9;&#x9;msg_import )  &#xD;&#xA;&#x9;&#x9;SELECT&#xD;&#xA;&#x9;&#x9;&#x9;&#x9; T.agent_code,&#xD;&#xA;&#x9;&#x9;&#x9;&#x9; 2,&#xD;&#xA;&#x9;&#x9;&#x9;&#x9; 'Missing agent legal id type'&#xD;&#xA;&#x9;&#x9;FROM   [&quot;+ context.intermediateDB + &quot;].[dbo].VW_import_agent_persons T JOIN  [&quot;+ context.intermediateDB + &quot;].[dbo].VW_import_agent M ON T.agent_code  = M.agent_code  &#xD;&#xA;&#x9;&#x9;WHERE&#x9; ind_import  = 0&#xD;&#xA;&#x9;&#x9; AND&#x9;LEGAL_ID_TYPE  is null&#xD;&#xA;&#x9;&#x9; AND&#x9;LEGAL_ID_NBR  is not null&#xD;&#xA;&#x9;&#x9;&#xD;&#xA;&#x9;&#x9;/* If INDIVIDUAL_ID_TYPE is not null and INDIVIDUAL_ID_NBR is null, message ?Missing agent individual id number? */&#xD;&#xA;&#x9;&#x9;INSERT INTO   [&quot;+ context.intermediateDB + &quot;].[dbo].VW_IMPORT_AGENT_RESULT   &#xD;&#xA;&#x9;&#x9;&#x9;&#x9;( agent_code , &#xD;&#xA;&#x9;&#x9;&#x9;&#x9;ind_import , &#xD;&#xA;&#x9;&#x9;&#x9;&#x9;msg_import )  &#xD;&#xA;&#x9;&#x9;SELECT&#xD;&#xA;&#x9;&#x9;&#x9;&#x9; T.agent_code,&#xD;&#xA;&#x9;&#x9;&#x9;&#x9; 2,&#xD;&#xA;&#x9;&#x9;&#x9;&#x9; 'Missing agent individual id number'&#xD;&#xA;&#x9;&#x9;FROM   [&quot;+ context.intermediateDB + &quot;].[dbo].VW_import_agent_persons T JOIN  [&quot;+ context.intermediateDB + &quot;].[dbo].VW_import_agent M ON T.agent_code  = M.agent_code  &#xD;&#xA;&#x9;&#x9;WHERE&#x9; ind_import  = 0&#xD;&#xA;&#x9;&#x9; AND&#x9;INDIVIDUAL_ID_TYPE  is not null&#xD;&#xA;&#x9;&#x9; AND&#x9;INDIVIDUAL_ID_NBR  is null&#xD;&#xA;&#x9;&#x9;&#xD;&#xA;&#x9;&#x9;/* If INDIVIDUAL_ID_TYPE is null and INDIVIDUAL_ID_NBR is not null, message ?Missing agent individual id type? */&#xD;&#xA;&#x9;&#x9;INSERT INTO   [&quot;+ context.intermediateDB + &quot;].[dbo].VW_IMPORT_AGENT_RESULT   &#xD;&#xA;&#x9;&#x9;&#x9;&#x9;( agent_code , &#xD;&#xA;&#x9;&#x9;&#x9;&#x9;ind_import , &#xD;&#xA;&#x9;&#x9;&#x9;&#x9;msg_import )  &#xD;&#xA;&#x9;&#x9;SELECT&#xD;&#xA;&#x9;&#x9;&#x9;&#x9; T.agent_code,&#xD;&#xA;&#x9;&#x9;&#x9;&#x9; 2,&#xD;&#xA;&#x9;&#x9;&#x9;&#x9; 'Missing agent individual id type'&#xD;&#xA;&#x9;&#x9;FROM   [&quot;+ context.intermediateDB + &quot;].[dbo].VW_import_agent_persons T JOIN  [&quot;+ context.intermediateDB + &quot;].[dbo].VW_import_agent M ON T.agent_code  = M.agent_code  &#xD;&#xA;&#x9;&#x9;WHERE&#x9; ind_import  = 0&#xD;&#xA;&#x9;&#x9; AND&#x9;INDIVIDUAL_ID_TYPE  is null&#xD;&#xA;&#x9;&#x9; AND&#x9;INDIVIDUAL_ID_NBR  is not null&#xD;&#xA;&#x9;&#x9;&#xD;&#xA;&#x9;&#x9;/* RESIDENCE_COUNTRY_CODE: if not exists in CF_GEO_COUNTRY, message ?Invalid agent residence country code? */&#xD;&#xA;&#x9;&#x9;INSERT INTO   [&quot;+ context.intermediateDB + &quot;].[dbo].VW_IMPORT_AGENT_RESULT   &#xD;&#xA;&#x9;&#x9;&#x9;&#x9;( agent_code , &#xD;&#xA;&#x9;&#x9;&#x9;&#x9;ind_import , &#xD;&#xA;&#x9;&#x9;&#x9;&#x9;msg_import )  &#xD;&#xA;&#x9;&#x9;SELECT&#xD;&#xA;&#x9;&#x9;&#x9;&#x9; T.agent_code,&#xD;&#xA;&#x9;&#x9;&#x9;&#x9; 2,&#xD;&#xA;&#x9;&#x9;&#x9;&#x9; 'Invalid agent residence country code'&#xD;&#xA;&#x9;&#x9;FROM   [&quot;+ context.intermediateDB + &quot;].[dbo].VW_import_agent_persons T JOIN  [&quot;+ context.intermediateDB + &quot;].[dbo].VW_import_agent M ON T.agent_code  = M.agent_code  &#xD;&#xA;&#x9;&#x9;WHERE&#x9; ind_import  = 0&#xD;&#xA;&#x9;&#x9; AND&#x9;RESIDENCE_COUNTRY_CODE COLLATE DATABASE_DEFAULT not in&#xD;&#xA;&#x9;&#x9;&#x9;(&#xD;&#xA;&#x9;&#x9; &#x9;SELECT COUNTRY_CODE&#xD;&#xA;&#x9;&#x9;&#x9;FROM  cf_geo_country &#xD;&#xA;&#x9;&#x9;&#x9;)&#xD;&#xA;&#x9;&#x9;&#xD;&#xA;&#x9;&#x9;/* STATE_CODE: if not null and not exists RESIDENCE_COUNTRY_CODE / STATE_CODE in CF_GEO_STATE, &#xD;&#xA;&#x9;&#x9;       message ?Invalid agent residence state code? */&#xD;&#xA;&#x9;&#x9;INSERT INTO   [&quot;+ context.intermediateDB + &quot;].[dbo].VW_IMPORT_AGENT_RESULT   &#xD;&#xA;&#x9;&#x9;&#x9;&#x9;( agent_code , &#xD;&#xA;&#x9;&#x9;&#x9;&#x9;ind_import , &#xD;&#xA;&#x9;&#x9;&#x9;&#x9;msg_import )  &#xD;&#xA;&#x9;&#x9;SELECT&#xD;&#xA;&#x9;&#x9;&#x9;&#x9; T.agent_code,&#xD;&#xA;&#x9;&#x9;&#x9;&#x9; 2,&#xD;&#xA;&#x9;&#x9;&#x9;&#x9; 'Invalid agent residence state code'&#xD;&#xA;&#x9;&#x9;FROM   [&quot;+ context.intermediateDB + &quot;].[dbo].VW_import_agent_persons T JOIN  [&quot;+ context.intermediateDB + &quot;].[dbo].VW_import_agent M ON T.agent_code  = M.agent_code  &#xD;&#xA;&#x9;&#x9;WHERE&#x9; ind_import  = 0&#xD;&#xA;&#x9;&#x9; AND&#x9;STATE_CODE  is not null&#xD;&#xA;&#x9;&#x9; AND&#x9; NOT EXISTS&#xD;&#xA;&#x9;&#x9;&#x9;(&#xD;&#xA;&#x9;&#x9; &#x9;SELECT&#xD;&#xA;&#x9;&#x9;&#x9;&#x9;&#x9; cf_geo_state.COUNTRY_CODE,&#xD;&#xA;&#x9;&#x9;&#x9;&#x9;&#x9; cf_geo_state.STATE_CODE&#xD;&#xA;&#x9;&#x9;&#x9;FROM  cf_geo_state &#xD;&#xA;&#x9;&#x9;&#x9;WHERE&#x9; cf_geo_state.COUNTRY_CODE  = T.RESIDENCE_COUNTRY_CODE&#x9;COLLATE DATABASE_DEFAULT&#xD;&#xA;&#x9;&#x9;&#x9; AND&#x9;cf_geo_state.STATE_CODE  = T.STATE_CODE&#x9;&#x9;&#x9;&#x9;&#x9;COLLATE DATABASE_DEFAULT&#xD;&#xA;&#x9;&#x9;&#x9;)&#xD;&#xA;&#x9;&#x9;&#xD;&#xA;&#x9;&#x9;/* If STATE_CODE Is null and exist any CF_GEO_STATE with the RESIDENCE_COUNTRY_CODE, &#xD;&#xA;&#x9;&#x9;       message ?A state code is required for the specified agent residence country? */&#xD;&#xA;&#x9;&#x9;INSERT INTO   [&quot;+ context.intermediateDB + &quot;].[dbo].VW_IMPORT_AGENT_RESULT   &#xD;&#xA;&#x9;&#x9;&#x9;&#x9;( agent_code , &#xD;&#xA;&#x9;&#x9;&#x9;&#x9;ind_import , &#xD;&#xA;&#x9;&#x9;&#x9;&#x9;msg_import )  &#xD;&#xA;&#x9;&#x9;SELECT&#xD;&#xA;&#x9;&#x9;&#x9;&#x9; T.agent_code,&#xD;&#xA;&#x9;&#x9;&#x9;&#x9; 2,&#xD;&#xA;&#x9;&#x9;&#x9;&#x9; 'A state code is required for the specified agent residence country'&#xD;&#xA;&#x9;&#x9;FROM   [&quot;+ context.intermediateDB + &quot;].[dbo].VW_import_agent_persons T JOIN  [&quot;+ context.intermediateDB + &quot;].[dbo].VW_import_agent M ON T.agent_code  = M.agent_code  &#xD;&#xA;&#x9;&#x9;WHERE&#x9; ind_import  = 0&#xD;&#xA;&#x9;&#x9; AND&#x9;STATE_CODE  is null&#xD;&#xA;&#x9;&#x9; AND&#x9;RESIDENCE_COUNTRY_CODE COLLATE DATABASE_DEFAULT in &#xD;&#xA;&#x9;&#x9;&#x9;(&#xD;&#xA;&#x9;&#x9; &#x9;SELECT country_code&#xD;&#xA;&#x9;&#x9;&#x9;FROM  cf_geo_state S &#xD;&#xA;&#x9;&#x9;&#x9;)&#xD;&#xA;&#x9;&#x9;&#xD;&#xA;&#x9;&#x9;/* If PERSON_GROUP_CODE is not null and not exists in IP_PERSON_GROUP, message ?Invalid agent person group code? */&#xD;&#xA;&#x9;&#x9;INSERT INTO   [&quot;+ context.intermediateDB + &quot;].[dbo].VW_IMPORT_AGENT_RESULT   &#xD;&#xA;&#x9;&#x9;&#x9;&#x9;( agent_code , &#xD;&#xA;&#x9;&#x9;&#x9;&#x9;ind_import , &#xD;&#xA;&#x9;&#x9;&#x9;&#x9;msg_import )  &#xD;&#xA;&#x9;&#x9;SELECT&#xD;&#xA;&#x9;&#x9;&#x9;&#x9; T.agent_code,&#xD;&#xA;&#x9;&#x9;&#x9;&#x9; 2,&#xD;&#xA;&#x9;&#x9;&#x9;&#x9; 'Invalid agent person group code'&#xD;&#xA;&#x9;&#x9;FROM   [&quot;+ context.intermediateDB + &quot;].[dbo].VW_import_agent_persons T JOIN  [&quot;+ context.intermediateDB + &quot;].[dbo].VW_import_agent M ON T.agent_code  = M.agent_code  &#xD;&#xA;&#x9;&#x9;WHERE&#x9; ind_import  = 0&#xD;&#xA;&#x9;&#x9; AND&#x9;PERSON_GROUP_CODE  is not null&#xD;&#xA;&#x9;&#x9; AND&#x9;PERSON_GROUP_CODE  COLLATE DATABASE_DEFAULT not in&#xD;&#xA;&#x9;&#x9;&#x9;(&#xD;&#xA;&#x9;&#x9; &#x9;SELECT PERSON_GROUP_NBR&#xD;&#xA;&#x9;&#x9;&#x9;FROM  IP_PERSON_GROUP &#xD;&#xA;&#x9;&#x9;&#x9;)&#xD;&#xA;&#x9;&#x9;&#xD;&#xA;&#x9;&#x9;/* *************** END OF VALIDATIONS *************** */&#xD;&#xA;&#x9;&#x9;/* set import indicator to error, for those cases with error messages */&#xD;&#xA;&#x9;&#x9;UPDATE  M   &#xD;&#xA;&#x9;&#x9;SET&#x9;ind_import = 2 &#xD;&#xA;&#x9;&#x9;FROM   [&quot;+ context.intermediateDB + &quot;].[dbo].VW_IMPORT_AGENT M &#xD;&#xA;&#x9;&#x9;WHERE    exists&#xD;&#xA;&#x9;&#x9;&#x9;(&#xD;&#xA;&#x9;&#x9; &#x9;SELECT *&#xD;&#xA;&#x9;&#x9;&#x9;FROM   [&quot;+ context.intermediateDB + &quot;].[dbo].VW_IMPORT_AGENT_RESULT R &#xD;&#xA;&#x9;&#x9;&#x9;WHERE&#x9; M.agent_code  = R.agent_code&#xD;&#xA;&#x9;&#x9;&#x9;) &#xD;&#xA;&#x9;&#x9;&#xD;&#xA;&#x9;&#x9;&#xD;&#xA;&#x9;&#x9;/* set import indicator to validated, for those cases with no error messages */&#xD;&#xA;&#x9;&#x9;UPDATE  M   &#xD;&#xA;&#x9;&#x9;SET&#x9;ind_import = 9 &#xD;&#xA;&#x9;&#x9;FROM   [&quot;+ context.intermediateDB + &quot;].[dbo].VW_IMPORT_AGENT M &#xD;&#xA;&#x9;&#x9;WHERE  ind_import  = 0 &#xD;&#xA;&#x9;&#x9;&#xD;&#xA;&#x9;&#x9;SET NOCOUNT OFF&#xD;&#xA;&#xD;&#xA;&#x9;END&#xD;&#xA;&quot;"/>
    <elementParameter field="LABEL" name="NOTE" value="This option only applies when deploying and running in the Talend Runtime" show="false"/>
    <elementParameter field="CHECK" name="SPECIFY_DATASOURCE_ALIAS" value="false" show="false"/>
    <elementParameter field="TEXT" name="DATASOURCE_ALIAS" value="&quot;&quot;" show="false"/>
    <elementParameter field="CHECK" name="DIE_ON_ERROR" value="false"/>
    <elementParameter field="TEXT" name="PROPERTIES" value="&quot;&quot;" show="false"/>
    <elementParameter field="CHECK" name="ACTIVE_DIR_AUTH" value="false" show="false"/>
    <elementParameter field="CHECK" name="PROPAGATE_RECORD_SET" value="false"/>
    <elementParameter field="COLUMN_LIST" name="RECORD_SET_COLUMN" value="" show="false"/>
    <elementParameter field="CHECK" name="USE_PREPAREDSTATEMENT" value="false"/>
    <elementParameter field="TABLE" name="SET_PREPAREDSTATEMENT_PARAMETERS" show="false"/>
    <elementParameter field="ENCODING_TYPE" name="ENCODING" value="&quot;ISO-8859-15&quot;" show="false"/>
    <elementParameter field="TECHNICAL" name="ENCODING:ENCODING_TYPE" value="ISO-8859-15"/>
    <elementParameter field="TEXT" name="COMMIT_EVERY" value="10000" show="false"/>
    <elementParameter field="TEXT" name="CONNECTION_FORMAT" value="row"/>
    <metadata connector="FLOW" name="tMSSqlRow_8"/>
    <metadata connector="REJECT" name="REJECT">
      <column defaultValue="" key="false" length="255" name="errorCode" nullable="true" precision="0" sourceType="" type="id_String" originalLength="-1" usefulColumn="true"/>
      <column defaultValue="" key="false" length="255" name="errorMessage" nullable="true" precision="0" sourceType="" type="id_String" originalLength="-1" usefulColumn="true"/>
    </metadata>
  </node>
  <node componentName="tLogRow" componentVersion="0.101" offsetLabelX="0" offsetLabelY="0" posX="192" posY="1248">
    <elementParameter field="TEXT" name="UNIQUE_NAME" value="tLogRow_9" show="false"/>
    <elementParameter field="RADIO" name="BASIC_MODE" value="false"/>
    <elementParameter field="RADIO" name="TABLE_PRINT" value="false"/>
    <elementParameter field="RADIO" name="VERTICAL" value="true"/>
    <elementParameter field="RADIO" name="PRINT_UNIQUE" value="true"/>
    <elementParameter field="RADIO" name="PRINT_LABEL" value="false"/>
    <elementParameter field="RADIO" name="PRINT_UNIQUE_LABEL" value="false"/>
    <elementParameter field="TEXT" name="FIELDSEPARATOR" value="&quot;|&quot;" show="false"/>
    <elementParameter field="CHECK" name="PRINT_HEADER" value="false" show="false"/>
    <elementParameter field="CHECK" name="PRINT_UNIQUE_NAME" value="false" show="false"/>
    <elementParameter field="CHECK" name="PRINT_COLNAMES" value="false" show="false"/>
    <elementParameter field="CHECK" name="USE_FIXED_LENGTH" value="false" show="false"/>
    <elementParameter field="TABLE" name="LENGTHS" show="false">
      <elementValue elementRef="SCHEMA_COLUMN" value="errorCode"/>
      <elementValue elementRef="LENGTH" value="10"/>
      <elementValue elementRef="SCHEMA_COLUMN" value="errorMessage"/>
      <elementValue elementRef="LENGTH" value="10"/>
    </elementParameter>
    <elementParameter field="CHECK" name="PRINT_CONTENT_WITH_LOG4J" value="true"/>
    <elementParameter field="TEXT" name="SCHEMA_OPT_NUM" value="100" show="false"/>
    <elementParameter field="TEXT" name="CONNECTION_FORMAT" value="row"/>
    <metadata connector="FLOW" name="tLogRow_9">
      <column defaultValue="" key="false" length="255" name="errorCode" nullable="true" precision="0" sourceType="" type="id_String" originalLength="-1" usefulColumn="true"/>
      <column defaultValue="" key="false" length="255" name="errorMessage" nullable="true" precision="0" sourceType="" type="id_String" originalLength="-1" usefulColumn="true"/>
    </metadata>
  </node>
  <node componentName="tLogRow" componentVersion="0.101" offsetLabelX="0" offsetLabelY="0" posX="352" posY="1248">
    <elementParameter field="TEXT" name="UNIQUE_NAME" value="tLogRow_10" show="false"/>
    <elementParameter field="RADIO" name="BASIC_MODE" value="false"/>
    <elementParameter field="RADIO" name="TABLE_PRINT" value="false"/>
    <elementParameter field="RADIO" name="VERTICAL" value="true"/>
    <elementParameter field="RADIO" name="PRINT_UNIQUE" value="true"/>
    <elementParameter field="RADIO" name="PRINT_LABEL" value="false"/>
    <elementParameter field="RADIO" name="PRINT_UNIQUE_LABEL" value="false"/>
    <elementParameter field="TEXT" name="FIELDSEPARATOR" value="&quot;|&quot;" show="false"/>
    <elementParameter field="CHECK" name="PRINT_HEADER" value="false" show="false"/>
    <elementParameter field="CHECK" name="PRINT_UNIQUE_NAME" value="false" show="false"/>
    <elementParameter field="CHECK" name="PRINT_COLNAMES" value="false" show="false"/>
    <elementParameter field="CHECK" name="USE_FIXED_LENGTH" value="false" show="false"/>
    <elementParameter field="TABLE" name="LENGTHS" show="false">
      <elementValue elementRef="SCHEMA_COLUMN" value="errorCode"/>
      <elementValue elementRef="LENGTH" value="10"/>
      <elementValue elementRef="SCHEMA_COLUMN" value="errorMessage"/>
      <elementValue elementRef="LENGTH" value="10"/>
    </elementParameter>
    <elementParameter field="CHECK" name="PRINT_CONTENT_WITH_LOG4J" value="true"/>
    <elementParameter field="TEXT" name="SCHEMA_OPT_NUM" value="100" show="false"/>
    <elementParameter field="TEXT" name="CONNECTION_FORMAT" value="row"/>
    <metadata connector="FLOW" name="tLogRow_10">
      <column defaultValue="" key="false" length="255" name="errorCode" nullable="true" precision="0" sourceType="" type="id_String" originalLength="-1" usefulColumn="true"/>
      <column defaultValue="" key="false" length="255" name="errorMessage" nullable="true" precision="0" sourceType="" type="id_String" originalLength="-1" usefulColumn="true"/>
    </metadata>
  </node>
  <node componentName="tMSSqlRow" componentVersion="0.102" offsetLabelX="0" offsetLabelY="0" posX="128" posY="960">
    <elementParameter field="TEXT" name="UNIQUE_NAME" value="tMSSqlRow_9" show="false"/>
    <elementParameter field="CHECK" name="USE_EXISTING_CONNECTION" value="true"/>
    <elementParameter field="COMPONENT_LIST" name="CONNECTION" value="tMSSqlConnection_4"/>
    <elementParameter field="CLOSED_LIST" name="DRIVER" value="JTDS" show="false"/>
    <elementParameter field="TEXT" name="HOST" value="&quot;&quot;" show="false"/>
    <elementParameter field="TEXT" name="PORT" value="&quot;1433&quot;" show="false"/>
    <elementParameter field="TEXT" name="DB_SCHEMA" value="&quot;&quot;" show="false"/>
    <elementParameter field="TEXT" name="DBNAME" value="&quot;&quot;" show="false"/>
    <elementParameter field="TEXT" name="TYPE" value="MSSQL" show="false"/>
    <elementParameter field="TEXT" name="USER" value="&quot;&quot;" show="false"/>
    <elementParameter field="PASSWORD" name="PASS" value="enc:system.encryption.key.v1:hl5KM2+4p2QX7tc4E7/dq+seFOftQthIDIYjsHAu" show="false"/>
    <elementParameter field="DBTABLE" name="TABLE" value="&quot;&quot;"/>
    <elementParameter field="CHECK" name="IDENTITY_INSERT" value="false"/>
    <elementParameter field="QUERYSTORE_TYPE" name="QUERYSTORE" value="&quot;&quot;"/>
    <elementParameter field="TECHNICAL" name="QUERYSTORE:REPOSITORY_QUERYSTORE_TYPE" value="" show="false"/>
    <elementParameter field="TECHNICAL" name="QUERYSTORE:QUERYSTORE_TYPE" value="BUILT_IN"/>
    <elementParameter field="MEMO_SQL" name="QUERY" value="&quot;&#xD;&#xA;IF OBJECT_ID('wrk_person_addr', 'U') IS NOT NULL DROP TABLE wrk_person_addr;&#xD;&#xA;&#xD;&#xA;IF OBJECT_ID('WRK_MARK', 'U') IS NOT NULL DROP TABLE WRK_MARK;&#xD;&#xA;IF OBJECT_ID('WRK_MARK_OWNERS', 'U') IS NOT NULL DROP TABLE WRK_MARK_OWNERS;&#xD;&#xA;IF OBJECT_ID('WRK_MARK_REPRS', 'U') IS NOT NULL DROP TABLE WRK_MARK_REPRS;&#xD;&#xA;IF OBJECT_ID('WRK_MARK_PRIORITIES', 'U') IS NOT NULL DROP TABLE WRK_MARK_PRIORITIES;&#xD;&#xA;IF OBJECT_ID('WRK_MARK_NICE_CLASSES', 'U') IS NOT NULL DROP TABLE WRK_MARK_NICE_CLASSES;&#xD;&#xA;IF OBJECT_ID('WRK_MARK_ACTIONS', 'U') IS NOT NULL DROP TABLE WRK_MARK_ACTIONS;&#xD;&#xA;&#xD;&#xA;IF OBJECT_ID('WRK_USERDOC', 'U') IS NOT NULL DROP TABLE WRK_USERDOC;&#xD;&#xA;IF OBJECT_ID('WRK_USERDOC_FILES', 'U') IS NOT NULL DROP TABLE WRK_USERDOC_FILES;&#xD;&#xA;IF OBJECT_ID('WRK_USERDOC_OWNERS', 'U') IS NOT NULL DROP TABLE WRK_USERDOC_OWNERS;&#xD;&#xA;IF OBJECT_ID('WRK_USERDOC_REPRS', 'U') IS NOT NULL DROP TABLE WRK_USERDOC_REPRS;&#xD;&#xA;IF OBJECT_ID('WRK_USERDOC_ACTIONS', 'U') IS NOT NULL DROP TABLE WRK_USERDOC_ACTIONS;&#xD;&#xA;IF OBJECT_ID('WRK_LOG', 'U') IS NOT NULL DROP TABLE WRK_LOG;&#xD;&#xA;IF OBJECT_ID('WRK_ACTION_OPTIONS', 'U') IS NOT NULL DROP TABLE WRK_ACTION_OPTIONS;&#xD;&#xA;&#xD;&#xA;IF OBJECT_ID('wrk_doc_key', 'U') IS NOT NULL DROP TABLE wrk_doc_key;&#xD;&#xA;IF OBJECT_ID('wrk_file_service_count', 'U') IS NOT NULL DROP TABLE wrk_file_service_count;&#xD;&#xA;IF OBJECT_ID('wrk_userdoc_service_count', 'U') IS NOT NULL DROP TABLE wrk_userdoc_service_count;&#xD;&#xA;IF OBJECT_ID('wrk_file_priority_count', 'U') IS NOT NULL DROP TABLE wrk_file_priority_count;&#xD;&#xA;IF OBJECT_ID('wrk_file_vienna_count', 'U') IS NOT NULL DROP TABLE wrk_file_vienna_count;&#xD;&#xA;IF OBJECT_ID('wrk_file_nice_count', 'U') IS NOT NULL DROP TABLE wrk_file_nice_count;&#xD;&#xA;IF OBJECT_ID('wrk_file_detail_count', 'U') IS NOT NULL DROP TABLE wrk_file_detail_count;&#xD;&#xA;IF OBJECT_ID('wrk_file_payment_count', 'U') IS NOT NULL DROP TABLE wrk_file_payment_count;&#xD;&#xA;&#xD;&#xA;IF OBJECT_ID('WRK_PATENT', 'U') IS NOT NULL DROP TABLE WRK_PATENT;&#xD;&#xA;IF OBJECT_ID('WRK_PATENT_OWNERS', 'U') IS NOT NULL DROP TABLE WRK_PATENT_OWNERS;&#xD;&#xA;IF OBJECT_ID('WRK_PATENT_REPRS', 'U') IS NOT NULL DROP TABLE WRK_PATENT_REPRS;&#xD;&#xA;IF OBJECT_ID('WRK_PATENT_INVENTORS', 'U') IS NOT NULL DROP TABLE WRK_PATENT_INVENTORS;&#xD;&#xA;IF OBJECT_ID('WRK_PATENT_PRIORITIES', 'U') IS NOT NULL DROP TABLE WRK_PATENT_PRIORITIES;&#xD;&#xA;IF OBJECT_ID('WRK_PATENT_ACTIONS', 'U') IS NOT NULL DROP TABLE WRK_PATENT_ACTIONS;&#xD;&#xA;&#xD;&#xA;IF OBJECT_ID('WRK_MARK_EXPORT', 'U') IS NOT NULL DROP TABLE WRK_MARK_EXPORT;&#xD;&#xA;IF OBJECT_ID('WRK_PATENT_EXPORT', 'U') IS NOT NULL DROP TABLE WRK_PATENT_EXPORT;&#xD;&#xA;IF OBJECT_ID('WRK_USERDOC_EXPORT', 'U') IS NOT NULL DROP TABLE WRK_USERDOC_EXPORT;&#xD;&#xA;&#xD;&#xA;&quot;"/>
    <elementParameter field="LABEL" name="NOTE" value="This option only applies when deploying and running in the Talend Runtime" show="false"/>
    <elementParameter field="CHECK" name="SPECIFY_DATASOURCE_ALIAS" value="false" show="false"/>
    <elementParameter field="TEXT" name="DATASOURCE_ALIAS" value="&quot;&quot;" show="false"/>
    <elementParameter field="CHECK" name="DIE_ON_ERROR" value="false"/>
    <elementParameter field="TEXT" name="PROPERTIES" value="&quot;&quot;" show="false"/>
    <elementParameter field="CHECK" name="ACTIVE_DIR_AUTH" value="false" show="false"/>
    <elementParameter field="CHECK" name="PROPAGATE_RECORD_SET" value="false"/>
    <elementParameter field="COLUMN_LIST" name="RECORD_SET_COLUMN" value="" show="false"/>
    <elementParameter field="CHECK" name="USE_PREPAREDSTATEMENT" value="false"/>
    <elementParameter field="TABLE" name="SET_PREPAREDSTATEMENT_PARAMETERS" show="false"/>
    <elementParameter field="ENCODING_TYPE" name="ENCODING" value="&quot;ISO-8859-15&quot;" show="false"/>
    <elementParameter field="TECHNICAL" name="ENCODING:ENCODING_TYPE" value="ISO-8859-15"/>
    <elementParameter field="TEXT" name="COMMIT_EVERY" value="10000" show="false"/>
    <elementParameter field="TEXT" name="CONNECTION_FORMAT" value="row"/>
    <metadata connector="FLOW" name="tMSSqlRow_9"/>
    <metadata connector="REJECT" name="REJECT">
      <column defaultValue="" key="false" length="255" name="errorCode" nullable="true" precision="0" sourceType="" type="id_String" originalLength="-1" usefulColumn="true"/>
      <column defaultValue="" key="false" length="255" name="errorMessage" nullable="true" precision="0" sourceType="" type="id_String" originalLength="-1" usefulColumn="true"/>
    </metadata>
  </node>
  <node componentName="tLogRow" componentVersion="0.101" offsetLabelX="0" offsetLabelY="0" posX="288" posY="1056">
    <elementParameter field="TEXT" name="UNIQUE_NAME" value="tLogRow_11" show="false"/>
    <elementParameter field="RADIO" name="BASIC_MODE" value="false"/>
    <elementParameter field="RADIO" name="TABLE_PRINT" value="false"/>
    <elementParameter field="RADIO" name="VERTICAL" value="true"/>
    <elementParameter field="RADIO" name="PRINT_UNIQUE" value="true"/>
    <elementParameter field="RADIO" name="PRINT_LABEL" value="false"/>
    <elementParameter field="RADIO" name="PRINT_UNIQUE_LABEL" value="false"/>
    <elementParameter field="TEXT" name="FIELDSEPARATOR" value="&quot;|&quot;" show="false"/>
    <elementParameter field="CHECK" name="PRINT_HEADER" value="false" show="false"/>
    <elementParameter field="CHECK" name="PRINT_UNIQUE_NAME" value="false" show="false"/>
    <elementParameter field="CHECK" name="PRINT_COLNAMES" value="false" show="false"/>
    <elementParameter field="CHECK" name="USE_FIXED_LENGTH" value="false" show="false"/>
    <elementParameter field="TABLE" name="LENGTHS" show="false">
      <elementValue elementRef="SCHEMA_COLUMN" value="errorCode"/>
      <elementValue elementRef="LENGTH" value="10"/>
      <elementValue elementRef="SCHEMA_COLUMN" value="errorMessage"/>
      <elementValue elementRef="LENGTH" value="10"/>
    </elementParameter>
    <elementParameter field="CHECK" name="PRINT_CONTENT_WITH_LOG4J" value="true"/>
    <elementParameter field="TEXT" name="SCHEMA_OPT_NUM" value="100" show="false"/>
    <elementParameter field="TEXT" name="CONNECTION_FORMAT" value="row"/>
    <metadata connector="FLOW" name="tLogRow_11">
      <column defaultValue="" key="false" length="255" name="errorCode" nullable="true" precision="0" sourceType="" type="id_String" originalLength="-1" usefulColumn="true"/>
      <column defaultValue="" key="false" length="255" name="errorMessage" nullable="true" precision="0" sourceType="" type="id_String" originalLength="-1" usefulColumn="true"/>
    </metadata>
  </node>
  <node componentName="tMSSqlRow" componentVersion="0.102" offsetLabelX="0" offsetLabelY="0" posX="448" posY="992">
    <elementParameter field="TEXT" name="UNIQUE_NAME" value="tMSSqlRow_10" show="false"/>
    <elementParameter field="CHECK" name="USE_EXISTING_CONNECTION" value="true"/>
    <elementParameter field="COMPONENT_LIST" name="CONNECTION" value="tMSSqlConnection_4"/>
    <elementParameter field="CLOSED_LIST" name="DRIVER" value="JTDS" show="false"/>
    <elementParameter field="TEXT" name="HOST" value="&quot;&quot;" show="false"/>
    <elementParameter field="TEXT" name="PORT" value="&quot;1433&quot;" show="false"/>
    <elementParameter field="TEXT" name="DB_SCHEMA" value="&quot;&quot;" show="false"/>
    <elementParameter field="TEXT" name="DBNAME" value="&quot;&quot;" show="false"/>
    <elementParameter field="TEXT" name="TYPE" value="MSSQL" show="false"/>
    <elementParameter field="TEXT" name="USER" value="&quot;&quot;" show="false"/>
    <elementParameter field="PASSWORD" name="PASS" value="enc:system.encryption.key.v1:DO/tgODO2XOOfsHw5RnYrjmYvA8T1kaJjbgYCzDt" show="false"/>
    <elementParameter field="DBTABLE" name="TABLE" value="&quot;&quot;"/>
    <elementParameter field="CHECK" name="IDENTITY_INSERT" value="false"/>
    <elementParameter field="QUERYSTORE_TYPE" name="QUERYSTORE" value="&quot;&quot;"/>
    <elementParameter field="TECHNICAL" name="QUERYSTORE:REPOSITORY_QUERYSTORE_TYPE" value="" show="false"/>
    <elementParameter field="TECHNICAL" name="QUERYSTORE:QUERYSTORE_TYPE" value="BUILT_IN"/>
    <elementParameter field="MEMO_SQL" name="QUERY" value="&quot;&#xD;&#xA;select  M.*,&#xD;&#xA;        cast(null as datetime)       FIRST_PRIORITY_DATE,&#xD;&#xA;        cast(null as numeric(4))     MAIN_OWNER_ADDR_NBR,&#xD;&#xA;        cast(null as numeric(10))    MAIN_OWNER_PERSON_NBR,&#xD;&#xA;        cast(null as numeric(4))     SERVICE_ADDR_NBR,&#xD;&#xA;        cast(null as numeric(10))    SERVICE_PERSON_NBR,&#xD;&#xA;        cast(null as varchar(254)) NICE_CLASS_TXT,&#xD;&#xA;        cast(null as numeric(10))    MARK_CODE,&#xD;&#xA;        cast(null as varchar(8))   PROC_TYP,&#xD;&#xA;        cast(null as numeric(10))    PROC_NBR,&#xD;&#xA;        cast(null as varchar(8))   STATUS_CODE&#xD;&#xA;into&#x9;WRK_MARK&#xD;&#xA;from    [&quot; +context.intermediateDB+ &quot;].[dbo].VW_IMPORT_MARK M&#xD;&#xA;where   IND_IMPORT = 8;&#xD;&#xA;&#xD;&#xA;create index WRK_mark on WRK_mark(file_seq, file_type, file_series, file_nbr);&#xD;&#xA;&#xD;&#xA;    &#xD;&#xA;select  T.*,&#xD;&#xA;        cast(null as numeric(10))    PERSON_NBR,&#xD;&#xA;        cast(null as numeric(4))     ADDR_NBR&#xD;&#xA;into&#x9;WRK_MARK_OWNERS&#xD;&#xA;from    [&quot; +context.intermediateDB+ &quot;].[dbo].VW_IMPORT_MARK_OWNERS T&#xD;&#xA;where   file_nbr = 999999;&#xD;&#xA;&#xD;&#xA;alter&#x9;table WRK_MARK_OWNERS add rowid INT identity;&#xD;&#xA;&#xD;&#xA;create index WRK_mark_owners on WRK_mark_owners(file_seq, file_type, file_series, file_nbr);&#xD;&#xA;&#xD;&#xA;&#xD;&#xA;select  T.*,&#xD;&#xA;        cast(null as numeric(10))    PERSON_NBR,&#xD;&#xA;        cast(null as numeric(4))     ADDR_NBR&#xD;&#xA;into&#x9;WRK_MARK_REPRS&#xD;&#xA;from    [&quot; +context.intermediateDB+ &quot;].[dbo].VW_IMPORT_MARK_REPRS T&#xD;&#xA;where   file_nbr = 999999;&#xD;&#xA;&#xD;&#xA;alter&#x9;table WRK_MARK_REPRS add rowid INT identity;&#xD;&#xA;&#xD;&#xA;create index WRK_mark_reprs on WRK_mark_reprs(file_seq, file_type, file_series, file_nbr);&#xD;&#xA;&#xD;&#xA;    &#xD;&#xA;select  T.*,&#xD;&#xA;        cast(null as numeric(22))    PRIORITY_APPL_ID_ALT&#xD;&#xA;into&#x9;WRK_MARK_PRIORITIES&#xD;&#xA;from    [&quot; +context.intermediateDB+ &quot;].[dbo].VW_IMPORT_MARK_PRIORITIES T&#xD;&#xA;where   file_nbr = 999999;&#xD;&#xA;&#xD;&#xA;create index WRK_mark_priorities on WRK_mark_priorities(file_seq, file_type, file_series, file_nbr);&#xD;&#xA;&#xD;&#xA;&#xD;&#xA;select  T.*&#xD;&#xA;into&#x9;WRK_MARK_NICE_CLASSES&#xD;&#xA;from    [&quot; +context.intermediateDB+ &quot;].[dbo].VW_IMPORT_MARK_NICE_CLASSES T&#xD;&#xA;where   file_nbr = 999999;&#xD;&#xA;&#xD;&#xA;create index WRK_mark_nice_classes on WRK_mark_NICE_CLASSES(file_seq, file_type, file_series, file_nbr);&#xD;&#xA;&#xD;&#xA;&#xD;&#xA;select  T.*,&#xD;&#xA;        cast(null as numeric(10))     ACTION_NBR&#xD;&#xA;into&#x9;WRK_MARK_ACTIONS&#xD;&#xA;from    [&quot; +context.intermediateDB+ &quot;].[dbo].VW_IMPORT_MARK_ACTIONS T&#xD;&#xA;where   file_nbr = 999999;&#xD;&#xA;&#xD;&#xA;create index WRK_mark_actions on WRK_mark_actions(file_seq, file_type, file_series, file_nbr);&#xD;&#xA;&#xD;&#xA;alter table WRK_mark_actions &#xD;&#xA;add constraint WRK_mark_actions_pk primary key  (file_seq, file_type, file_series, file_nbr, action_date, action_type);&#xD;&#xA;&#xD;&#xA;select  PERSON_GROUP_CODE, cast(null as numeric(5)) AGENT_CODE, &#xD;&#xA;        PERSON_NAME,PERSON_NAME_LANG2, NATIONALITY_COUNTRY_CODE, IND_COMPANY, LEGAL_NATURE,LEGAL_NATURE_LANG2, LEGAL_ID_TYPE, LEGAL_ID_NBR, INDIVIDUAL_ID_TYPE, INDIVIDUAL_ID_NBR, EMAIL, TELEPHONE, &#xD;&#xA;        RESIDENCE_COUNTRY_CODE, STATE_NAME, STATE_CODE,CITY_CODE, CITY_NAME, ADDRESS_ZONE, ADDRESS_STREET, ADDRESS_STREET_LANG2,ZIP_CODE, &#xD;&#xA;        PERSON_NBR, ADDR_NBR, 123456789 REF_NBR&#xD;&#xA;into&#x9;WRK_person_addr&#xD;&#xA;from    WRK_mark_owners T;&#xD;&#xA;&#xD;&#xA;/* remove non-null constraint in address street */&#xD;&#xA;alter table WRK_person_addr alter column ADDRESS_STREET varchar(2000) null;&#xD;&#xA;&#xD;&#xA;create index WRK_person_addr on WRK_person_addr(ref_nbr);&#xD;&#xA;&#xD;&#xA;&#xD;&#xA;select  M.*,&#xD;&#xA;        cast(null as numeric(10))    APPLICANT_PERSON_NBR,&#xD;&#xA;        cast(null as numeric(4))     APPLICANT_ADDR_NBR,&#xD;&#xA;        cast(null as varchar(8))   USERDOC_PROC_TYP,&#xD;&#xA;        cast(null as numeric(10))    USERDOC_PROC_NBR,&#xD;&#xA;        cast(null as varchar(8))   USERDOC_STATUS_CODE&#xD;&#xA;into&#x9;WRK_USERDOC&#xD;&#xA;from    [&quot; +context.intermediateDB+ &quot;].[dbo].VW_IMPORT_USERDOC M&#xD;&#xA;where   IND_IMPORT = 8;&#xD;&#xA;&#xD;&#xA;alter&#x9;table WRK_USERDOC add rowid INT identity;&#xD;&#xA;&#xD;&#xA;create index WRK_userdoc on WRK_userdoc(userdoc_seq, userdoc_series, userdoc_nbr);&#xD;&#xA;&#xD;&#xA;&#xD;&#xA;select  M.*,&#xD;&#xA;        cast(null as varchar(8))   USERDOC_FILE_PROC_TYP,&#xD;&#xA;        cast(null as numeric(10))    USERDOC_FILE_PROC_NBR,&#xD;&#xA;        cast(null as varchar(8))   USERDOC_FILE_STATUS_CODE&#xD;&#xA;into&#x9;WRK_USERDOC_FILES&#xD;&#xA;from    [&quot; +context.intermediateDB+ &quot;].[dbo].VW_IMPORT_USERDOC_FILES M&#xD;&#xA;where   userdoc_nbr = 999999;&#xD;&#xA;&#xD;&#xA;create index WRK_userdoc_files on WRK_userdoc_files(userdoc_seq, userdoc_series, userdoc_nbr);&#xD;&#xA;&#xD;&#xA;&#xD;&#xA;select  T.*,&#xD;&#xA;        cast(null as numeric(10))    PERSON_NBR,&#xD;&#xA;        cast(null as numeric(4))     ADDR_NBR&#xD;&#xA;into&#x9;WRK_USERDOC_OWNERS&#xD;&#xA;from    [&quot; +context.intermediateDB+ &quot;].[dbo].VW_IMPORT_USERDOC_OWNERS T&#xD;&#xA;where   userdoc_nbr = 999999;&#xD;&#xA;&#xD;&#xA;alter&#x9;table WRK_USERDOC_OWNERS add rowid INT identity;&#xD;&#xA;&#xD;&#xA;create index WRK_userdoc_owners on WRK_userdoc_owners(userdoc_seq, userdoc_series, userdoc_nbr);&#xD;&#xA;&#xD;&#xA;&#xD;&#xA;select  T.*,&#xD;&#xA;        cast(null as numeric(10))    PERSON_NBR,&#xD;&#xA;        cast(null as numeric(4))     ADDR_NBR&#xD;&#xA;into&#x9;WRK_USERDOC_REPRS&#xD;&#xA;from    [&quot; +context.intermediateDB+ &quot;].[dbo].VW_IMPORT_USERDOC_REPRS T&#xD;&#xA;where   userdoc_nbr = 999999;&#xD;&#xA;&#xD;&#xA;alter&#x9;table WRK_USERDOC_REPRS add rowid INT identity;&#xD;&#xA;&#xD;&#xA;create index WRK_userdoc_reprs on WRK_userdoc_reprs(userdoc_seq, userdoc_series, userdoc_nbr);&#xD;&#xA;&#xD;&#xA;&#xD;&#xA;select  T.*,&#xD;&#xA;        cast(null as numeric(10))     ACTION_NBR&#xD;&#xA;into&#x9;WRK_USERDOC_ACTIONS&#xD;&#xA;from    [&quot; +context.intermediateDB+ &quot;].[dbo].VW_IMPORT_USERDOC_ACTIONS T&#xD;&#xA;where   userdoc_nbr = 999999;&#xD;&#xA;&#xD;&#xA;create index WRK_userdoc_actions on WRK_userdoc_actions(userdoc_seq, userdoc_series, userdoc_nbr);&#xD;&#xA;&#xD;&#xA;alter table WRK_userdoc_actions &#xD;&#xA;add constraint WRK_userdoc_actions_pk primary key  (userdoc_seq, userdoc_series, userdoc_nbr, action_date, action_type);&#xD;&#xA;&#xD;&#xA;/* work tables to monitor execution time */&#xD;&#xA;&#xD;&#xA;create table WRK_LOG (&#xD;&#xA;    stage   varchar(200),&#xD;&#xA;    time    datetime,&#xD;&#xA;    seconds numeric&#xD;&#xA;);&#xD;&#xA;&#xD;&#xA;CREATE TABLE WRK_ACTION_OPTIONS&#xD;&#xA;(   &#xD;&#xA;&#x9;PROC_TYP VARCHAR(4) NOT NULL,&#xD;&#xA;&#x9;PROC_NBR NUMERIC(8)NOT NULL ,&#xD;&#xA;&#x9;ACTION_NBR NUMERIC(10) NOT NULL,&#xD;&#xA;&#x9;CONSTRAINT WRK_ACTION_OPTIONS_PK PRIMARY KEY (proc_typ,proc_nbr,action_nbr)&#xD;&#xA;);&#xD;&#xA;&#xD;&#xA;/* work tables for validation */&#xD;&#xA;&#xD;&#xA;select  DOC_ORI, DOC_SERIES, DOC_NBR&#xD;&#xA;into&#x9;WRK_doc_key&#xD;&#xA;from    [&quot; +context.intermediateDB+ &quot;].[dbo].VW_IMPORT_MARK&#xD;&#xA;where   DOC_NBR = 999999;&#xD;&#xA;&#xD;&#xA;&#xD;&#xA;create  index WRK_doc_key on WRK_doc_key(DOC_ORI, DOC_SERIES, DOC_NBR);&#xD;&#xA;&#xD;&#xA;&#xD;&#xA;select  FILE_SEQ, FILE_TYPE, FILE_SERIES, FILE_NBR, IND_SERVICE, 999999 count1&#xD;&#xA;into&#x9;WRK_file_service_count&#xD;&#xA;from    [&quot; +context.intermediateDB+ &quot;].[dbo].VW_IMPORT_MARK_REPRS&#xD;&#xA;where   file_nbr = 999999;&#xD;&#xA;&#xD;&#xA;&#xD;&#xA;create  index WRK_file_service_count on WRK_file_service_count(FILE_SEQ, FILE_TYPE, FILE_SERIES, FILE_NBR);&#xD;&#xA;&#xD;&#xA;&#xD;&#xA;select  USERDOC_SEQ, USERDOC_SERIES, USERDOC_NBR, IND_SERVICE, 999999 count1&#xD;&#xA;into&#x9;WRK_userdoc_service_count&#xD;&#xA;from    [&quot; +context.intermediateDB+ &quot;].[dbo].VW_IMPORT_USERDOC_OWNERS&#xD;&#xA;where   userdoc_nbr = 999999;&#xD;&#xA;&#xD;&#xA;&#xD;&#xA;create  index WRK_userdoc_service_count on WRK_userdoc_service_count(USERDOC_SEQ, USERDOC_SERIES, USERDOC_NBR);&#xD;&#xA;&#xD;&#xA;&#xD;&#xA;&#xD;&#xA;select  FILE_SEQ, FILE_TYPE, FILE_SERIES, FILE_NBR, APPLICATION_ID, 999999 count1&#xD;&#xA;into&#x9;WRK_file_priority_count&#xD;&#xA;from    [&quot; +context.intermediateDB+ &quot;].[dbo].VW_IMPORT_MARK_PRIORITIES&#xD;&#xA;where   file_nbr = 999999;&#xD;&#xA;&#xD;&#xA;create  index WRK_file_priority_count on WRK_file_priority_count(FILE_SEQ, FILE_TYPE, FILE_SERIES, FILE_NBR);&#xD;&#xA;&#xD;&#xA;&#xD;&#xA;select  FILE_SEQ, FILE_TYPE, FILE_SERIES, FILE_NBR, RECEIPT_NBR, 999999 count1&#xD;&#xA;into&#x9;WRK_file_payment_count&#xD;&#xA;from    [&quot; +context.intermediateDB+ &quot;].[dbo].VW_IMPORT_MARK_PAYMENTS&#xD;&#xA;where   0 = 1;&#xD;&#xA;&#xD;&#xA;create  index WRK_file_payment_count on WRK_file_payment_count(FILE_SEQ, FILE_TYPE, FILE_SERIES, FILE_NBR);&#xD;&#xA;&#xD;&#xA;/* IPAS-1273/1341 Added VIENNA_EDITION_CODE for Vienna classification*/&#xD;&#xA;select  FILE_SEQ, FILE_TYPE, FILE_SERIES, FILE_NBR, &#xD;&#xA;        VIENNA_EDITION_CODE, VIENNA_CATEGORY, VIENNA_DIVISION, VIENNA_SECTION, 999999 count1&#xD;&#xA;into&#x9;WRK_file_vienna_count&#xD;&#xA;from    [&quot; +context.intermediateDB+ &quot;].[dbo].VW_IMPORT_MARK_VIENNA_CLASSES&#xD;&#xA;where   file_nbr = 999999;&#xD;&#xA;&#xD;&#xA;&#xD;&#xA;create  index WRK_file_vienna_count on WRK_file_vienna_count(FILE_SEQ, FILE_TYPE, FILE_SERIES, FILE_NBR);&#xD;&#xA;&#xD;&#xA;/* IPAS-1273/1341 Added NICE_CLASS_VERSION for NICE classification */&#xD;&#xA;select  FILE_SEQ, FILE_TYPE, FILE_SERIES, FILE_NBR, NICE_CLASS_VERSION, NICE_CLASS_NBR, 999999 count1&#xD;&#xA;into&#x9;WRK_file_nice_count&#xD;&#xA;from    [&quot; +context.intermediateDB+ &quot;].[dbo].VW_IMPORT_MARK_NICE_CLASSES&#xD;&#xA;where   file_nbr = 999999;&#xD;&#xA;&#xD;&#xA;&#xD;&#xA;create  index wrk_file_nice_count on wrk_file_nice_count(FILE_SEQ, FILE_TYPE, FILE_SERIES, FILE_NBR);&#xD;&#xA;&#xD;&#xA;&#xD;&#xA;&#xD;&#xA;    /* patent work tables to add additional data before insertions */&#xD;&#xA;        select  M.*,&#xD;&#xA;                cast(null as datetime)          FIRST_PRIORITY_DATE,&#xD;&#xA;                cast(null as datetime)          NOVELTY_DATE,&#xD;&#xA;                cast(null as numeric(4))     MAIN_OWNER_ADDR_NBR,&#xD;&#xA;                cast(null as numeric(10))    MAIN_OWNER_PERSON_NBR,&#xD;&#xA;                cast(null as numeric(4))     SERVICE_ADDR_NBR,&#xD;&#xA;                cast(null as numeric(10))    SERVICE_PERSON_NBR,&#xD;&#xA;                cast(null as varchar(8))   PROC_TYP,&#xD;&#xA;                cast(null as numeric(10))    PROC_NBR,&#xD;&#xA;                cast(null as varchar(8))   STATUS_CODE&#xD;&#xA;        into WRK_PATENT&#xD;&#xA;        from    [&quot; +context.intermediateDB+ &quot;].[dbo].VW_IMPORT_PATENT M&#xD;&#xA;        where   0 = 1&#xD;&#xA;;&#xD;&#xA;&#xD;&#xA; create index wrk_patent on wrk_patent(file_seq, file_type, file_series, file_nbr)&#xD;&#xA;;&#xD;&#xA;&#xD;&#xA;        select  T.*,&#xD;&#xA;                cast(null as numeric(10))    PERSON_NBR,&#xD;&#xA;                cast(null as numeric(4))     ADDR_NBR&#xD;&#xA;&#x9;&#x9;&#x9;&#x9;into WRK_PATENT_OWNERS&#xD;&#xA;        from    [&quot; +context.intermediateDB+ &quot;].[dbo].VW_IMPORT_PATENT_OWNERS T&#xD;&#xA;        where   0 = 1&#xD;&#xA;;&#xD;&#xA;&#xD;&#xA;alter&#x9;table WRK_PATENT_OWNERS add rowid INT identity;&#xD;&#xA;&#xD;&#xA;create index wrk_patent_owners on wrk_patent_owners(file_seq, file_type, file_series, file_nbr)&#xD;&#xA;;&#xD;&#xA;&#xD;&#xA;&#xD;&#xA;        select  T.*,&#xD;&#xA;                cast(null as numeric(10))    PERSON_NBR,&#xD;&#xA;                cast(null as numeric(4))     ADDR_NBR&#xD;&#xA;&#x9;&#x9;&#x9;&#x9;into WRK_PATENT_REPRS&#x9;&#xD;&#xA;        from    [&quot; +context.intermediateDB+ &quot;].[dbo].VW_IMPORT_PATENT_REPRS T&#xD;&#xA;        where   0 = 1&#xD;&#xA;;&#xD;&#xA;&#xD;&#xA;alter&#x9;table WRK_PATENT_REPRS add rowid INT identity;&#xD;&#xA;&#xD;&#xA;create index wrk_patent_reprs on wrk_patent_reprs(file_seq, file_type, file_series, file_nbr)&#xD;&#xA;;&#xD;&#xA;&#xD;&#xA;&#xD;&#xA;        select  T.*,&#xD;&#xA;                cast(null as numeric(10))    PERSON_NBR,&#xD;&#xA;                cast(null as numeric(4))     ADDR_NBR&#xD;&#xA;&#x9;&#x9;&#x9;&#x9;into WRK_PATENT_INVENTORS&#xD;&#xA;        from    [&quot; +context.intermediateDB+ &quot;].[dbo].VW_IMPORT_PATENT_INVENTORS T&#xD;&#xA;        where   0 = 1&#xD;&#xA;;&#xD;&#xA;&#xD;&#xA;alter&#x9;table WRK_PATENT_INVENTORS add rowid INT identity;&#xD;&#xA;&#xD;&#xA;create index wrk_patent_inventors on wrk_patent_inventors(file_seq, file_type, file_series, file_nbr)&#xD;&#xA;;&#xD;&#xA;&#xD;&#xA;        select  T.*,&#xD;&#xA;                cast(null as numeric(22))    PRIORITY_APPL_ID_ALT&#xD;&#xA;&#x9;&#x9;&#x9;&#x9;into WRK_PATENT_PRIORITIES&#xD;&#xA;        from    [&quot; +context.intermediateDB+ &quot;].[dbo].VW_IMPORT_PATENT_PRIORITIES T&#xD;&#xA;        where   0 = 1&#xD;&#xA;;&#xD;&#xA;&#xD;&#xA;create index wrk_patent_priorities on wrk_patent_priorities(file_seq, file_type, file_series, file_nbr)&#xD;&#xA;;&#xD;&#xA;&#xD;&#xA;        select  T.*,&#xD;&#xA;                cast(null as numeric(10))     ACTION_NBR&#xD;&#xA;&#x9;&#x9;&#x9;&#x9;into WRK_PATENT_ACTIONS&#xD;&#xA;        from    [&quot; +context.intermediateDB+ &quot;].[dbo].VW_IMPORT_PATENT_ACTIONS T&#xD;&#xA;        where   0 = 1&#xD;&#xA;;&#xD;&#xA;&#xD;&#xA;create index wrk_patent_actions on wrk_patent_actions(file_seq, file_type, file_series, file_nbr)&#xD;&#xA;;&#xD;&#xA;&#xD;&#xA; &#x9;/* generic work table to count number of detail records of any type, using a 20-char DETAIL_CODE column */&#xD;&#xA;        select  FILE_SEQ, FILE_TYPE, FILE_SERIES, FILE_NBR, cast(null as varchar(20)) DETAIL_CODE, 999999 count1&#xD;&#xA;&#x9;into    wrk_file_detail_count&#xD;&#xA;        from    [&quot; +context.intermediateDB+ &quot;].[dbo].VW_IMPORT_MARK&#xD;&#xA;        where   0 = 1&#xD;&#xA;;&#xD;&#xA;&#xD;&#xA;&#xD;&#xA;&#xD;&#xA;  create table wrk_mark_export (&#xD;&#xA;      FILE_SEQ varchar(2)   NOT NULL ,     &#xD;&#xA;      FILE_TYP varchar(1)   NOT NULL ,         &#xD;&#xA;      FILE_SER numeric(4,0)   NOT NULL ,         &#xD;&#xA;      FILE_NBR numeric(10,0)  NOT NULL   &#xD;&#xA;      )&#xD;&#xA;;&#xD;&#xA;&#x9;create index wrk_mark_export_pk on wrk_mark_export(file_seq,file_typ,file_ser,file_nbr)&#xD;&#xA;;&#xD;&#xA;&#xD;&#xA;  create table wrk_patent_export(&#xD;&#xA;      FILE_SEQ varchar(2)   NOT NULL ,     &#xD;&#xA;      FILE_TYP varchar(1)   NOT NULL ,         &#xD;&#xA;      FILE_SER numeric(4,0)   NOT NULL ,         &#xD;&#xA;      FILE_NBR numeric(10,0)  NOT NULL   &#xD;&#xA;      )&#xD;&#xA;;&#xD;&#xA;  &#xD;&#xA;&#xD;&#xA;  create index wrk_patent_export_pk on wrk_patent_export(file_seq,file_typ,file_ser,file_nbr)&#xD;&#xA;;&#xD;&#xA;&#xD;&#xA;  create table wrk_userdoc_export(&#xD;&#xA;      DOC_ORI varchar(4)   NOT NULL ,     &#xD;&#xA;      DOC_LOG varchar(1)   NOT NULL ,         &#xD;&#xA;      DOC_SER numeric(4,0)   NOT NULL ,         &#xD;&#xA;      DOC_NBR numeric(15,0)  NOT NULL   &#xD;&#xA;      )&#xD;&#xA;;&#xD;&#xA;  &#xD;&#xA;  create index wrk_userdoc_export_pk on wrk_userdoc_export(doc_ori,doc_log,doc_ser,doc_nbr)&#xD;&#xA;;  &#xD;&#xA;&#xD;&#xA;&#xD;&#xA;&#xD;&#xA;&quot;"/>
    <elementParameter field="LABEL" name="NOTE" value="This option only applies when deploying and running in the Talend Runtime" show="false"/>
    <elementParameter field="CHECK" name="SPECIFY_DATASOURCE_ALIAS" value="false" show="false"/>
    <elementParameter field="TEXT" name="DATASOURCE_ALIAS" value="&quot;&quot;" show="false"/>
    <elementParameter field="CHECK" name="DIE_ON_ERROR" value="false"/>
    <elementParameter field="TEXT" name="PROPERTIES" value="&quot;&quot;" show="false"/>
    <elementParameter field="CHECK" name="ACTIVE_DIR_AUTH" value="false" show="false"/>
    <elementParameter field="CHECK" name="PROPAGATE_RECORD_SET" value="false"/>
    <elementParameter field="COLUMN_LIST" name="RECORD_SET_COLUMN" value="" show="false"/>
    <elementParameter field="CHECK" name="USE_PREPAREDSTATEMENT" value="false"/>
    <elementParameter field="TABLE" name="SET_PREPAREDSTATEMENT_PARAMETERS" show="false"/>
    <elementParameter field="ENCODING_TYPE" name="ENCODING" value="&quot;ISO-8859-15&quot;" show="false"/>
    <elementParameter field="TECHNICAL" name="ENCODING:ENCODING_TYPE" value="ISO-8859-15"/>
    <elementParameter field="TEXT" name="COMMIT_EVERY" value="10000" show="false"/>
    <elementParameter field="TEXT" name="CONNECTION_FORMAT" value="row"/>
    <metadata connector="FLOW" name="tMSSqlRow_10"/>
    <metadata connector="REJECT" name="REJECT">
      <column defaultValue="" key="false" length="255" name="errorCode" nullable="true" precision="0" sourceType="" type="id_String" originalLength="-1" usefulColumn="true"/>
      <column defaultValue="" key="false" length="255" name="errorMessage" nullable="true" precision="0" sourceType="" type="id_String" originalLength="-1" usefulColumn="true"/>
    </metadata>
  </node>
  <node componentName="tLogRow" componentVersion="0.101" offsetLabelX="0" offsetLabelY="0" posX="704" posY="1056">
    <elementParameter field="TEXT" name="UNIQUE_NAME" value="tLogRow_12" show="false"/>
    <elementParameter field="RADIO" name="BASIC_MODE" value="false"/>
    <elementParameter field="RADIO" name="TABLE_PRINT" value="false"/>
    <elementParameter field="RADIO" name="VERTICAL" value="true"/>
    <elementParameter field="RADIO" name="PRINT_UNIQUE" value="true"/>
    <elementParameter field="RADIO" name="PRINT_LABEL" value="false"/>
    <elementParameter field="RADIO" name="PRINT_UNIQUE_LABEL" value="false"/>
    <elementParameter field="TEXT" name="FIELDSEPARATOR" value="&quot;|&quot;" show="false"/>
    <elementParameter field="CHECK" name="PRINT_HEADER" value="false" show="false"/>
    <elementParameter field="CHECK" name="PRINT_UNIQUE_NAME" value="false" show="false"/>
    <elementParameter field="CHECK" name="PRINT_COLNAMES" value="false" show="false"/>
    <elementParameter field="CHECK" name="USE_FIXED_LENGTH" value="false" show="false"/>
    <elementParameter field="TABLE" name="LENGTHS" show="false">
      <elementValue elementRef="SCHEMA_COLUMN" value="errorCode"/>
      <elementValue elementRef="LENGTH" value="10"/>
      <elementValue elementRef="SCHEMA_COLUMN" value="errorMessage"/>
      <elementValue elementRef="LENGTH" value="10"/>
    </elementParameter>
    <elementParameter field="CHECK" name="PRINT_CONTENT_WITH_LOG4J" value="true"/>
    <elementParameter field="TEXT" name="SCHEMA_OPT_NUM" value="100" show="false"/>
    <elementParameter field="TEXT" name="CONNECTION_FORMAT" value="row"/>
    <metadata connector="FLOW" name="tLogRow_12">
      <column defaultValue="" key="false" length="255" name="errorCode" nullable="true" precision="0" sourceType="" type="id_String" originalLength="-1" usefulColumn="true"/>
      <column defaultValue="" key="false" length="255" name="errorMessage" nullable="true" precision="0" sourceType="" type="id_String" originalLength="-1" usefulColumn="true"/>
    </metadata>
  </node>
  <node componentName="tMSSqlRow" componentVersion="0.102" offsetLabelX="0" offsetLabelY="0" posX="192" posY="2048">
    <elementParameter field="TEXT" name="UNIQUE_NAME" value="tMSSqlRow_11" show="false"/>
    <elementParameter field="CHECK" name="USE_EXISTING_CONNECTION" value="true"/>
    <elementParameter field="COMPONENT_LIST" name="CONNECTION" value="tMSSqlConnection_4"/>
    <elementParameter field="CLOSED_LIST" name="DRIVER" value="JTDS" show="false"/>
    <elementParameter field="TEXT" name="HOST" value="&quot;&quot;" show="false"/>
    <elementParameter field="TEXT" name="PORT" value="&quot;1433&quot;" show="false"/>
    <elementParameter field="TEXT" name="DB_SCHEMA" value="&quot;&quot;" show="false"/>
    <elementParameter field="TEXT" name="DBNAME" value="&quot;&quot;" show="false"/>
    <elementParameter field="TEXT" name="TYPE" value="MSSQL" show="false"/>
    <elementParameter field="TEXT" name="USER" value="&quot;&quot;" show="false"/>
    <elementParameter field="PASSWORD" name="PASS" value="enc:system.encryption.key.v1:rypaIySL+Fe+NaHv+sMQeOaV+/ZgOMR3m2eY8x4a" show="false"/>
    <elementParameter field="DBTABLE" name="TABLE" value="&quot;&quot;"/>
    <elementParameter field="CHECK" name="IDENTITY_INSERT" value="false"/>
    <elementParameter field="QUERYSTORE_TYPE" name="QUERYSTORE" value="&quot;&quot;"/>
    <elementParameter field="TECHNICAL" name="QUERYSTORE:REPOSITORY_QUERYSTORE_TYPE" value="" show="false"/>
    <elementParameter field="TECHNICAL" name="QUERYSTORE:QUERYSTORE_TYPE" value="BUILT_IN"/>
    <elementParameter field="MEMO_SQL" name="QUERY" value="&quot;If Exists ( SELECT name &#xD;&#xA;            FROM sysobjects  &#xD;&#xA;            WHERE name = 'ImportPateValidate'&#xD;&#xA;            AND type = 'P')&#xD;&#xA;&#x9;DROP PROCEDURE ImportPateValidate&#xD;&#xA;&quot;"/>
    <elementParameter field="LABEL" name="NOTE" value="This option only applies when deploying and running in the Talend Runtime" show="false"/>
    <elementParameter field="CHECK" name="SPECIFY_DATASOURCE_ALIAS" value="false" show="false"/>
    <elementParameter field="TEXT" name="DATASOURCE_ALIAS" value="&quot;&quot;" show="false"/>
    <elementParameter field="CHECK" name="DIE_ON_ERROR" value="false"/>
    <elementParameter field="TEXT" name="PROPERTIES" value="&quot;&quot;" show="false"/>
    <elementParameter field="CHECK" name="ACTIVE_DIR_AUTH" value="false" show="false"/>
    <elementParameter field="CHECK" name="PROPAGATE_RECORD_SET" value="false"/>
    <elementParameter field="COLUMN_LIST" name="RECORD_SET_COLUMN" value="" show="false"/>
    <elementParameter field="CHECK" name="USE_PREPAREDSTATEMENT" value="false"/>
    <elementParameter field="TABLE" name="SET_PREPAREDSTATEMENT_PARAMETERS" show="false"/>
    <elementParameter field="ENCODING_TYPE" name="ENCODING" value="&quot;ISO-8859-15&quot;" show="false"/>
    <elementParameter field="TECHNICAL" name="ENCODING:ENCODING_TYPE" value="ISO-8859-15"/>
    <elementParameter field="TEXT" name="COMMIT_EVERY" value="10000" show="false"/>
    <elementParameter field="TEXT" name="CONNECTION_FORMAT" value="row"/>
    <metadata connector="FLOW" name="tMSSqlRow_11"/>
    <metadata connector="REJECT" name="REJECT">
      <column defaultValue="" key="false" length="255" name="errorCode" nullable="true" precision="0" sourceType="" type="id_String" originalLength="-1" usefulColumn="true"/>
      <column defaultValue="" key="false" length="255" name="errorMessage" nullable="true" precision="0" sourceType="" type="id_String" originalLength="-1" usefulColumn="true"/>
    </metadata>
  </node>
  <node componentName="tLogRow" componentVersion="0.101" offsetLabelX="0" offsetLabelY="0" posX="352" posY="1952">
    <elementParameter field="TEXT" name="UNIQUE_NAME" value="tLogRow_13" show="false"/>
    <elementParameter field="RADIO" name="BASIC_MODE" value="false"/>
    <elementParameter field="RADIO" name="TABLE_PRINT" value="false"/>
    <elementParameter field="RADIO" name="VERTICAL" value="true"/>
    <elementParameter field="RADIO" name="PRINT_UNIQUE" value="true"/>
    <elementParameter field="RADIO" name="PRINT_LABEL" value="false"/>
    <elementParameter field="RADIO" name="PRINT_UNIQUE_LABEL" value="false"/>
    <elementParameter field="TEXT" name="FIELDSEPARATOR" value="&quot;|&quot;" show="false"/>
    <elementParameter field="CHECK" name="PRINT_HEADER" value="false" show="false"/>
    <elementParameter field="CHECK" name="PRINT_UNIQUE_NAME" value="false" show="false"/>
    <elementParameter field="CHECK" name="PRINT_COLNAMES" value="false" show="false"/>
    <elementParameter field="CHECK" name="USE_FIXED_LENGTH" value="false" show="false"/>
    <elementParameter field="TABLE" name="LENGTHS" show="false">
      <elementValue elementRef="SCHEMA_COLUMN" value="errorCode"/>
      <elementValue elementRef="LENGTH" value="10"/>
      <elementValue elementRef="SCHEMA_COLUMN" value="errorMessage"/>
      <elementValue elementRef="LENGTH" value="10"/>
    </elementParameter>
    <elementParameter field="CHECK" name="PRINT_CONTENT_WITH_LOG4J" value="true"/>
    <elementParameter field="TEXT" name="SCHEMA_OPT_NUM" value="100" show="false"/>
    <elementParameter field="TEXT" name="CONNECTION_FORMAT" value="row"/>
    <metadata connector="FLOW" name="tLogRow_13">
      <column defaultValue="" key="false" length="255" name="errorCode" nullable="true" precision="0" sourceType="" type="id_String" originalLength="-1" usefulColumn="true"/>
      <column defaultValue="" key="false" length="255" name="errorMessage" nullable="true" precision="0" sourceType="" type="id_String" originalLength="-1" usefulColumn="true"/>
    </metadata>
  </node>
  <node componentName="tLogRow" componentVersion="0.101" offsetLabelX="0" offsetLabelY="0" posX="448" posY="1952">
    <elementParameter field="TEXT" name="UNIQUE_NAME" value="tLogRow_14" show="false"/>
    <elementParameter field="RADIO" name="BASIC_MODE" value="false"/>
    <elementParameter field="RADIO" name="TABLE_PRINT" value="false"/>
    <elementParameter field="RADIO" name="VERTICAL" value="true"/>
    <elementParameter field="RADIO" name="PRINT_UNIQUE" value="true"/>
    <elementParameter field="RADIO" name="PRINT_LABEL" value="false"/>
    <elementParameter field="RADIO" name="PRINT_UNIQUE_LABEL" value="false"/>
    <elementParameter field="TEXT" name="FIELDSEPARATOR" value="&quot;|&quot;" show="false"/>
    <elementParameter field="CHECK" name="PRINT_HEADER" value="false" show="false"/>
    <elementParameter field="CHECK" name="PRINT_UNIQUE_NAME" value="false" show="false"/>
    <elementParameter field="CHECK" name="PRINT_COLNAMES" value="false" show="false"/>
    <elementParameter field="CHECK" name="USE_FIXED_LENGTH" value="false" show="false"/>
    <elementParameter field="TABLE" name="LENGTHS" show="false">
      <elementValue elementRef="SCHEMA_COLUMN" value="errorCode"/>
      <elementValue elementRef="LENGTH" value="10"/>
      <elementValue elementRef="SCHEMA_COLUMN" value="errorMessage"/>
      <elementValue elementRef="LENGTH" value="10"/>
    </elementParameter>
    <elementParameter field="CHECK" name="PRINT_CONTENT_WITH_LOG4J" value="true"/>
    <elementParameter field="TEXT" name="SCHEMA_OPT_NUM" value="100" show="false"/>
    <elementParameter field="TEXT" name="CONNECTION_FORMAT" value="row"/>
    <metadata connector="FLOW" name="tLogRow_14">
      <column defaultValue="" key="false" length="255" name="errorCode" nullable="true" precision="0" sourceType="" type="id_String" originalLength="-1" usefulColumn="true"/>
      <column defaultValue="" key="false" length="255" name="errorMessage" nullable="true" precision="0" sourceType="" type="id_String" originalLength="-1" usefulColumn="true"/>
    </metadata>
  </node>
  <node componentName="tMSSqlRow" componentVersion="0.102" offsetLabelX="0" offsetLabelY="0" posX="480" posY="2048">
    <elementParameter field="TEXT" name="UNIQUE_NAME" value="tMSSqlRow_12" show="false"/>
    <elementParameter field="CHECK" name="USE_EXISTING_CONNECTION" value="true"/>
    <elementParameter field="COMPONENT_LIST" name="CONNECTION" value="tMSSqlConnection_4"/>
    <elementParameter field="CLOSED_LIST" name="DRIVER" value="JTDS" show="false"/>
    <elementParameter field="TEXT" name="HOST" value="&quot;&quot;" show="false"/>
    <elementParameter field="TEXT" name="PORT" value="&quot;1433&quot;" show="false"/>
    <elementParameter field="TEXT" name="DB_SCHEMA" value="&quot;&quot;" show="false"/>
    <elementParameter field="TEXT" name="DBNAME" value="&quot;&quot;" show="false"/>
    <elementParameter field="TEXT" name="TYPE" value="MSSQL" show="false"/>
    <elementParameter field="TEXT" name="USER" value="&quot;&quot;" show="false"/>
    <elementParameter field="PASSWORD" name="PASS" value="enc:system.encryption.key.v1:RY127l9iE54DhKwiprM1bfrmsUR+1aj9mwwOpzU4" show="false"/>
    <elementParameter field="DBTABLE" name="TABLE" value="&quot;&quot;"/>
    <elementParameter field="CHECK" name="IDENTITY_INSERT" value="false"/>
    <elementParameter field="QUERYSTORE_TYPE" name="QUERYSTORE" value="&quot;&quot;"/>
    <elementParameter field="TECHNICAL" name="QUERYSTORE:REPOSITORY_QUERYSTORE_TYPE" value="" show="false"/>
    <elementParameter field="TECHNICAL" name="QUERYSTORE:QUERYSTORE_TYPE" value="BUILT_IN"/>
    <elementParameter field="MEMO_SQL" name="QUERY" value="&quot;CREATE PROCEDURE ImportPateValidate&#xD;&#xA;AS &#xD;&#xA;&#x9;BEGIN&#xD;&#xA;&#x9;&#x9;SET NOCOUNT ON&#xD;&#xA;&#x9;&#x9;&#xD;&#xA;&#x9;&#x9;/* Procedure name: ImportPateValidate&#xD;&#xA;&#x9;&#x9;Input:  IPAS database and import tables not imported (i.e. IND_IMPORT not 1)&#xD;&#xA;&#x9;&#x9;Output: if errors, validation flag set to 2 and error messages in  [&quot;+ context.intermediateDB + &quot;].[dbo].VW_IMPORT_PATENT_RESULT&#xD;&#xA;&#x9;&#x9;if OK, validation flag set to 9&#xD;&#xA;&#x9;&#x9;create or replace procedure ImportPateValidate as&#xD;&#xA;&#x9;&#x9;*/&#xD;&#xA;&#x9;&#x9;&#xD;&#xA;&#x9;&#x9;/* flag all pending patents as to be validated */&#xD;&#xA;&#x9;&#x9;UPDATE   [&quot;+ context.intermediateDB + &quot;].[dbo].VW_import_patent   &#xD;&#xA;&#x9;&#x9;SET&#x9;ind_import = 0 &#xD;&#xA;&#x9;&#x9;WHERE  ind_import  is null&#xD;&#xA;&#x9;&#x9; OR&#x9;ind_import  not in ( 0  , 1  ) &#xD;&#xA;&#x9;&#x9;&#xD;&#xA;&#x9;&#x9;/* delete prior errors */&#xD;&#xA;&#x9;&#x9;DELETE FROM    [&quot;+ context.intermediateDB + &quot;].[dbo].VW_IMPORT_PATENT_RESULT    &#xD;&#xA;&#x9;&#x9;&#xD;&#xA;&#x9;&#x9;/* 1.1.1  [&quot;+ context.intermediateDB + &quot;].[dbo].VW_IMPORT_PATENT validations */&#xD;&#xA;&#x9;&#x9;/* 1.1.1.1 Codes validations */&#xD;&#xA;&#x9;&#x9;/* FILE_SEQ: if not exists in CF_FILE_SEQUENCE, insert message ?Invalid file sequence code? */&#xD;&#xA;&#x9;&#x9;INSERT INTO   [&quot;+ context.intermediateDB + &quot;].[dbo].VW_IMPORT_PATENT_RESULT   &#xD;&#xA;&#x9;&#x9;&#x9;&#x9;( file_seq , &#xD;&#xA;&#x9;&#x9;&#x9;&#x9;file_type , &#xD;&#xA;&#x9;&#x9;&#x9;&#x9;file_series , &#xD;&#xA;&#x9;&#x9;&#x9;&#x9;file_nbr , &#xD;&#xA;&#x9;&#x9;&#x9;&#x9;ind_import , &#xD;&#xA;&#x9;&#x9;&#x9;&#x9;msg_import )  &#xD;&#xA;&#x9;&#x9;SELECT&#xD;&#xA;&#x9;&#x9;&#x9;&#x9; file_seq,&#xD;&#xA;&#x9;&#x9;&#x9;&#x9; file_type,&#xD;&#xA;&#x9;&#x9;&#x9;&#x9; file_series,&#xD;&#xA;&#x9;&#x9;&#x9;&#x9; file_nbr,&#xD;&#xA;&#x9;&#x9;&#x9;&#x9; 2,&#xD;&#xA;&#x9;&#x9;&#x9;&#x9; 'Invalid file sequence code'&#xD;&#xA;&#x9;&#x9;FROM   [&quot;+ context.intermediateDB + &quot;].[dbo].VW_import_patent &#xD;&#xA;&#x9;&#x9;WHERE&#x9; ind_import  = 0&#xD;&#xA;&#x9;&#x9; AND&#x9;file_seq COLLATE DATABASE_DEFAULT not in&#xD;&#xA;&#x9;&#x9;&#x9;(&#xD;&#xA;&#x9;&#x9; &#x9;SELECT file_seq&#xD;&#xA;&#x9;&#x9;&#x9;FROM  cf_file_sequence &#xD;&#xA;&#x9;&#x9;&#x9;)&#xD;&#xA;&#x9;&#x9;&#xD;&#xA;&#x9;&#x9;/* FILE_TYPE: if not exists in CF_FILE_TYPE, insert message ?Invalid file type code? */&#xD;&#xA;&#x9;&#x9;INSERT INTO   [&quot;+ context.intermediateDB + &quot;].[dbo].VW_IMPORT_PATENT_RESULT   &#xD;&#xA;&#x9;&#x9;&#x9;&#x9;( file_seq , &#xD;&#xA;&#x9;&#x9;&#x9;&#x9;file_type , &#xD;&#xA;&#x9;&#x9;&#x9;&#x9;file_series , &#xD;&#xA;&#x9;&#x9;&#x9;&#x9;file_nbr , &#xD;&#xA;&#x9;&#x9;&#x9;&#x9;ind_import , &#xD;&#xA;&#x9;&#x9;&#x9;&#x9;msg_import )  &#xD;&#xA;&#x9;&#x9;SELECT&#xD;&#xA;&#x9;&#x9;&#x9;&#x9; file_seq,&#xD;&#xA;&#x9;&#x9;&#x9;&#x9; file_type,&#xD;&#xA;&#x9;&#x9;&#x9;&#x9; file_series,&#xD;&#xA;&#x9;&#x9;&#x9;&#x9; file_nbr,&#xD;&#xA;&#x9;&#x9;&#x9;&#x9; 2,&#xD;&#xA;&#x9;&#x9;&#x9;&#x9; 'Invalid file type code'&#xD;&#xA;&#x9;&#x9;FROM   [&quot;+ context.intermediateDB + &quot;].[dbo].VW_import_patent &#xD;&#xA;&#x9;&#x9;WHERE&#x9; ind_import  = 0&#xD;&#xA;&#x9;&#x9; AND&#x9;file_type  not in&#xD;&#xA;&#x9;&#x9;&#x9;(&#xD;&#xA;&#x9;&#x9; &#x9;SELECT file_type&#xD;&#xA;&#x9;&#x9;&#x9;FROM  cf_file_type &#xD;&#xA;&#x9;&#x9;&#x9;)&#xD;&#xA;&#x9;&#x9;&#xD;&#xA;&#x9;&#x9;/* DOC_ORI: if not null and not exists in CF_DOC_ORIGIN, message ?Invalid document origin code? */&#xD;&#xA;&#x9;&#x9;INSERT INTO   [&quot;+ context.intermediateDB + &quot;].[dbo].VW_IMPORT_PATENT_RESULT   &#xD;&#xA;&#x9;&#x9;&#x9;&#x9;( file_seq , &#xD;&#xA;&#x9;&#x9;&#x9;&#x9;file_type , &#xD;&#xA;&#x9;&#x9;&#x9;&#x9;file_series , &#xD;&#xA;&#x9;&#x9;&#x9;&#x9;file_nbr , &#xD;&#xA;&#x9;&#x9;&#x9;&#x9;ind_import , &#xD;&#xA;&#x9;&#x9;&#x9;&#x9;msg_import )  &#xD;&#xA;&#x9;&#x9;SELECT&#xD;&#xA;&#x9;&#x9;&#x9;&#x9; file_seq,&#xD;&#xA;&#x9;&#x9;&#x9;&#x9; file_type,&#xD;&#xA;&#x9;&#x9;&#x9;&#x9; file_series,&#xD;&#xA;&#x9;&#x9;&#x9;&#x9; file_nbr,&#xD;&#xA;&#x9;&#x9;&#x9;&#x9; 2,&#xD;&#xA;&#x9;&#x9;&#x9;&#x9; 'Invalid document origin code'&#xD;&#xA;&#x9;&#x9;FROM   [&quot;+ context.intermediateDB + &quot;].[dbo].VW_import_patent &#xD;&#xA;&#x9;&#x9;WHERE&#x9; ind_import  = 0&#xD;&#xA;&#x9;&#x9; AND&#x9;doc_ori  is not null&#xD;&#xA;&#x9;&#x9; AND&#x9;doc_ori  COLLATE DATABASE_DEFAULT not in&#xD;&#xA;&#x9;&#x9;&#x9;(&#xD;&#xA;&#x9;&#x9; &#x9;SELECT doc_ori&#xD;&#xA;&#x9;&#x9;&#x9;FROM  CF_DOC_ORIGIN &#xD;&#xA;&#x9;&#x9;&#x9;)&#xD;&#xA;&#x9;&#x9;&#xD;&#xA;&#x9;&#x9;/* DOC_ORI: if null and not exists config param 'MigrationCodOri' message ?Null document origin code but no 'MigrationDocOri' parameter configured? */&#xD;&#xA;&#x9;&#x9;INSERT INTO   [&quot;+ context.intermediateDB + &quot;].[dbo].VW_IMPORT_PATENT_RESULT   &#xD;&#xA;&#x9;&#x9;&#x9;&#x9;( file_seq , &#xD;&#xA;&#x9;&#x9;&#x9;&#x9;file_type , &#xD;&#xA;&#x9;&#x9;&#x9;&#x9;file_series , &#xD;&#xA;&#x9;&#x9;&#x9;&#x9;file_nbr , &#xD;&#xA;&#x9;&#x9;&#x9;&#x9;ind_import , &#xD;&#xA;&#x9;&#x9;&#x9;&#x9;msg_import )  &#xD;&#xA;&#x9;&#x9;SELECT&#xD;&#xA;&#x9;&#x9;&#x9;&#x9; file_seq,&#xD;&#xA;&#x9;&#x9;&#x9;&#x9; file_type,&#xD;&#xA;&#x9;&#x9;&#x9;&#x9; file_series,&#xD;&#xA;&#x9;&#x9;&#x9;&#x9; file_nbr,&#xD;&#xA;&#x9;&#x9;&#x9;&#x9; 2,&#xD;&#xA;&#x9;&#x9;&#x9;&#x9; 'Null document origin code but no [MigrationCodOri] parameter configured'&#xD;&#xA;&#x9;&#x9;FROM   [&quot;+ context.intermediateDB + &quot;].[dbo].VW_import_patent &#xD;&#xA;&#x9;&#x9;WHERE&#x9; ind_import  = 0&#xD;&#xA;&#x9;&#x9; AND&#x9;doc_ori  is null&#xD;&#xA;&#x9;&#x9; AND&#x9;NOT   exists&#xD;&#xA;&#x9;&#x9;&#x9;(&#xD;&#xA;&#x9;&#x9; &#x9;SELECT *&#xD;&#xA;&#x9;&#x9;&#x9;FROM  CF_CONFIG_PARAM &#xD;&#xA;&#x9;&#x9;&#x9;WHERE&#x9; config_code  = 'MigrationCodOri'&#xD;&#xA;&#x9;&#x9;&#x9;)&#xD;&#xA;&#x9;&#x9;&#xD;&#xA;&#x9;&#x9;/* DOC_ORI: if null and a null value exists for config param 'MigrationCodOri' message ?Null document origin code but no valid 'MigrationDocOri' parameter configured? */&#xD;&#xA;&#x9;&#x9;INSERT INTO   [&quot;+ context.intermediateDB + &quot;].[dbo].VW_IMPORT_PATENT_RESULT   &#xD;&#xA;&#x9;&#x9;&#x9;&#x9;( file_seq , &#xD;&#xA;&#x9;&#x9;&#x9;&#x9;file_type , &#xD;&#xA;&#x9;&#x9;&#x9;&#x9;file_series , &#xD;&#xA;&#x9;&#x9;&#x9;&#x9;file_nbr , &#xD;&#xA;&#x9;&#x9;&#x9;&#x9;ind_import , &#xD;&#xA;&#x9;&#x9;&#x9;&#x9;msg_import )  &#xD;&#xA;&#x9;&#x9;SELECT&#xD;&#xA;&#x9;&#x9;&#x9;&#x9; file_seq,&#xD;&#xA;&#x9;&#x9;&#x9;&#x9; file_type,&#xD;&#xA;&#x9;&#x9;&#x9;&#x9; file_series,&#xD;&#xA;&#x9;&#x9;&#x9;&#x9; file_nbr,&#xD;&#xA;&#x9;&#x9;&#x9;&#x9; 2,&#xD;&#xA;&#x9;&#x9;&#x9;&#x9; 'Null document origin code but no valid [MigrationCodOri] parameter configured'&#xD;&#xA;&#x9;&#x9;FROM   [&quot;+ context.intermediateDB + &quot;].[dbo].VW_import_patent &#xD;&#xA;&#x9;&#x9;WHERE&#x9; ind_import  = 0&#xD;&#xA;&#x9;&#x9; AND&#x9;doc_ori  is null&#xD;&#xA;&#x9;&#x9; AND&#x9;  exists&#xD;&#xA;&#x9;&#x9;&#x9;(&#xD;&#xA;&#x9;&#x9; &#x9;SELECT *&#xD;&#xA;&#x9;&#x9;&#x9;FROM  CF_CONFIG_PARAM &#xD;&#xA;&#x9;&#x9;&#x9;WHERE&#x9; config_code  = 'MigrationCodOri'&#xD;&#xA;&#x9;&#x9;&#x9; AND&#x9;value  is null&#xD;&#xA;&#x9;&#x9;&#x9;)&#xD;&#xA;&#x9;&#x9;&#xD;&#xA;&#x9;&#x9;/* APPLICATION_TYPE: if not exists in CF_APPLICATION_TYPE, message ?Invalid application type code? */&#xD;&#xA;&#x9;&#x9;INSERT INTO   [&quot;+ context.intermediateDB + &quot;].[dbo].VW_IMPORT_PATENT_RESULT   &#xD;&#xA;&#x9;&#x9;&#x9;&#x9;( file_seq , &#xD;&#xA;&#x9;&#x9;&#x9;&#x9;file_type , &#xD;&#xA;&#x9;&#x9;&#x9;&#x9;file_series , &#xD;&#xA;&#x9;&#x9;&#x9;&#x9;file_nbr , &#xD;&#xA;&#x9;&#x9;&#x9;&#x9;ind_import , &#xD;&#xA;&#x9;&#x9;&#x9;&#x9;msg_import )  &#xD;&#xA;&#x9;&#x9;SELECT&#xD;&#xA;&#x9;&#x9;&#x9;&#x9; file_seq,&#xD;&#xA;&#x9;&#x9;&#x9;&#x9; file_type,&#xD;&#xA;&#x9;&#x9;&#x9;&#x9; file_series,&#xD;&#xA;&#x9;&#x9;&#x9;&#x9; file_nbr,&#xD;&#xA;&#x9;&#x9;&#x9;&#x9; 2,&#xD;&#xA;&#x9;&#x9;&#x9;&#x9; 'Invalid application type code'&#xD;&#xA;&#x9;&#x9;FROM   [&quot;+ context.intermediateDB + &quot;].[dbo].VW_import_patent &#xD;&#xA;&#x9;&#x9;WHERE&#x9; ind_import  = 0&#xD;&#xA;&#x9;&#x9; AND&#x9;APPLICATION_TYPE  COLLATE DATABASE_DEFAULT not in&#xD;&#xA;&#x9;&#x9;&#x9;(&#xD;&#xA;&#x9;&#x9; &#x9;SELECT appl_typ&#xD;&#xA;&#x9;&#x9;&#x9;FROM  CF_APPLICATION_TYPE &#xD;&#xA;&#x9;&#x9;&#x9;)&#xD;&#xA;&#x9;&#x9;&#xD;&#xA;&#x9;&#x9;/* APPLICATION_TYPE / APPLICATION_SUBTYPE: if not exists in CF_APPLICATION_SUBTYPE, message ?Invalid application type / subtype code? */&#xD;&#xA;&#x9;&#x9;INSERT INTO   [&quot;+ context.intermediateDB + &quot;].[dbo].VW_IMPORT_PATENT_RESULT   &#xD;&#xA;&#x9;&#x9;&#x9;&#x9;( file_seq , &#xD;&#xA;&#x9;&#x9;&#x9;&#x9;file_type , &#xD;&#xA;&#x9;&#x9;&#x9;&#x9;file_series , &#xD;&#xA;&#x9;&#x9;&#x9;&#x9;file_nbr , &#xD;&#xA;&#x9;&#x9;&#x9;&#x9;ind_import , &#xD;&#xA;&#x9;&#x9;&#x9;&#x9;msg_import )  &#xD;&#xA;&#x9;&#x9;SELECT&#xD;&#xA;&#x9;&#x9;&#x9;&#x9; file_seq,&#xD;&#xA;&#x9;&#x9;&#x9;&#x9; file_type,&#xD;&#xA;&#x9;&#x9;&#x9;&#x9; file_series,&#xD;&#xA;&#x9;&#x9;&#x9;&#x9; file_nbr,&#xD;&#xA;&#x9;&#x9;&#x9;&#x9; 2,&#xD;&#xA;&#x9;&#x9;&#x9;&#x9; 'Invalid application type / subtype code'&#xD;&#xA;&#x9;&#x9;FROM   [&quot;+ context.intermediateDB + &quot;].[dbo].VW_import_patent &#xD;&#xA;&#x9;&#x9;WHERE&#x9; ind_import  = 0&#xD;&#xA;&#x9;&#x9; AND&#x9; NOT EXISTS&#xD;&#xA;&#x9;&#x9;&#x9;(&#xD;&#xA;&#x9;&#x9; &#x9;SELECT&#x9;&#xD;&#xA;&#x9;&#x9;&#x9;&#x9;&#x9; CF_APPLICATION_SUBTYPE.appl_typ,&#xD;&#xA;&#x9;&#x9;&#x9;&#x9;&#x9; CF_APPLICATION_SUBTYPE.appl_subtyp&#xD;&#xA;&#x9;&#x9;&#x9;FROM  CF_APPLICATION_SUBTYPE &#xD;&#xA;&#x9;&#x9;&#x9;WHERE&#x9; CF_APPLICATION_SUBTYPE.appl_typ  =  [&quot;+ context.intermediateDB + &quot;].[dbo].VW_import_patent.APPLICATION_TYPE&#x9;COLLATE DATABASE_DEFAULT &#xD;&#xA;&#x9;&#x9;&#x9; AND&#x9;CF_APPLICATION_SUBTYPE.appl_subtyp  =  [&quot;+ context.intermediateDB + &quot;].[dbo].VW_import_patent.APPLICATION_SUBTYPE&#x9;COLLATE DATABASE_DEFAULT &#xD;&#xA;&#x9;&#x9;&#x9;)&#xD;&#xA;&#x9;&#x9;&#xD;&#xA;&#x9;&#x9;/* LAW_CODE: if not exists in CF_LAW, message ?Invalid law code? */&#xD;&#xA;&#x9;&#x9;INSERT INTO   [&quot;+ context.intermediateDB + &quot;].[dbo].VW_IMPORT_PATENT_RESULT   &#xD;&#xA;&#x9;&#x9;&#x9;&#x9;( file_seq , &#xD;&#xA;&#x9;&#x9;&#x9;&#x9;file_type , &#xD;&#xA;&#x9;&#x9;&#x9;&#x9;file_series , &#xD;&#xA;&#x9;&#x9;&#x9;&#x9;file_nbr , &#xD;&#xA;&#x9;&#x9;&#x9;&#x9;ind_import , &#xD;&#xA;&#x9;&#x9;&#x9;&#x9;msg_import )  &#xD;&#xA;&#x9;&#x9;SELECT&#xD;&#xA;&#x9;&#x9;&#x9;&#x9; file_seq,&#xD;&#xA;&#x9;&#x9;&#x9;&#x9; file_type,&#xD;&#xA;&#x9;&#x9;&#x9;&#x9; file_series,&#xD;&#xA;&#x9;&#x9;&#x9;&#x9; file_nbr,&#xD;&#xA;&#x9;&#x9;&#x9;&#x9; 2,&#xD;&#xA;&#x9;&#x9;&#x9;&#x9; 'Invalid law code'&#xD;&#xA;&#x9;&#x9;FROM   [&quot;+ context.intermediateDB + &quot;].[dbo].VW_import_patent &#xD;&#xA;&#x9;&#x9;WHERE&#x9; ind_import  = 0&#xD;&#xA;&#x9;&#x9; AND&#x9;LAW_CODE  not in&#xD;&#xA;&#x9;&#x9;&#x9;(&#xD;&#xA;&#x9;&#x9; &#x9;SELECT law_code&#xD;&#xA;&#x9;&#x9;&#x9;FROM  CF_LAW &#xD;&#xA;&#x9;&#x9;&#x9;)&#xD;&#xA;&#x9;&#x9;&#xD;&#xA;&#x9;&#x9;/* Null registration: if IND_REGISTERED = 1 and any of the other registration data items is nut null/0, &#xD;&#xA;&#x9;&#x9;       message ?File not flagged as registered but some of the registration data items is not null? */&#xD;&#xA;&#x9;&#x9;INSERT INTO   [&quot;+ context.intermediateDB + &quot;].[dbo].VW_IMPORT_PATENT_RESULT   &#xD;&#xA;&#x9;&#x9;&#x9;&#x9;( file_seq , &#xD;&#xA;&#x9;&#x9;&#x9;&#x9;file_type , &#xD;&#xA;&#x9;&#x9;&#x9;&#x9;file_series , &#xD;&#xA;&#x9;&#x9;&#x9;&#x9;file_nbr , &#xD;&#xA;&#x9;&#x9;&#x9;&#x9;ind_import , &#xD;&#xA;&#x9;&#x9;&#x9;&#x9;msg_import )  &#xD;&#xA;&#x9;&#x9;SELECT&#xD;&#xA;&#x9;&#x9;&#x9;&#x9; file_seq,&#xD;&#xA;&#x9;&#x9;&#x9;&#x9; file_type,&#xD;&#xA;&#x9;&#x9;&#x9;&#x9; file_series,&#xD;&#xA;&#x9;&#x9;&#x9;&#x9; file_nbr,&#xD;&#xA;&#x9;&#x9;&#x9;&#x9; 2,&#xD;&#xA;&#x9;&#x9;&#x9;&#x9; 'File not flagged as registered but some of the registration data items is not null'&#xD;&#xA;&#x9;&#x9;FROM   [&quot;+ context.intermediateDB + &quot;].[dbo].VW_import_patent &#xD;&#xA;&#x9;&#x9;WHERE&#x9; ind_import  = 0&#xD;&#xA;&#x9;&#x9; AND&#x9;IND_REGISTERED  = 0&#xD;&#xA;&#x9;&#x9; AND&#x9;(REGISTRATION_TYPE  is not null&#xD;&#xA;&#x9;&#x9; OR&#x9;(REGISTRATION_SERIES  not in ( 0  )&#xD;&#xA;&#x9;&#x9; AND&#x9;REGISTRATION_SERIES  IS NOT NULL)&#xD;&#xA;&#x9;&#x9; OR&#x9;(REGISTRATION_NBR  not in ( 0  )&#xD;&#xA;&#x9;&#x9; AND&#x9;REGISTRATION_NBR  IS NOT NULL)&#xD;&#xA;&#x9;&#x9; OR&#x9;REGISTRATION_DUP  is not null&#xD;&#xA;&#x9;&#x9; OR&#x9;REGISTRATION_DATE  is not null&#xD;&#xA;&#x9;&#x9; OR&#x9;REGISTRATION_TYPE  is not null&#xD;&#xA;&#x9;&#x9; OR&#x9;ENTITLEMENT_DATE  is not null&#xD;&#xA;&#x9;&#x9; OR&#x9;EXPIRATION_DATE  is not null)&#xD;&#xA;&#x9;&#x9;&#xD;&#xA;&#x9;&#x9;/* Not null registration: if IND_REGISTERED = 1 and any of the other registration data items is null/0 &#xD;&#xA;&#x9;&#x9;       (except REGISTRATION_DUP), message ?File flagged as registered but some of the registration data items is null? */&#xD;&#xA;&#x9;&#x9;INSERT INTO   [&quot;+ context.intermediateDB + &quot;].[dbo].VW_IMPORT_PATENT_RESULT   &#xD;&#xA;&#x9;&#x9;&#x9;&#x9;( file_seq , &#xD;&#xA;&#x9;&#x9;&#x9;&#x9;file_type , &#xD;&#xA;&#x9;&#x9;&#x9;&#x9;file_series , &#xD;&#xA;&#x9;&#x9;&#x9;&#x9;file_nbr , &#xD;&#xA;&#x9;&#x9;&#x9;&#x9;ind_import , &#xD;&#xA;&#x9;&#x9;&#x9;&#x9;msg_import )  &#xD;&#xA;&#x9;&#x9;SELECT&#xD;&#xA;&#x9;&#x9;&#x9;&#x9; file_seq,&#xD;&#xA;&#x9;&#x9;&#x9;&#x9; file_type,&#xD;&#xA;&#x9;&#x9;&#x9;&#x9; file_series,&#xD;&#xA;&#x9;&#x9;&#x9;&#x9; file_nbr,&#xD;&#xA;&#x9;&#x9;&#x9;&#x9; 2,&#xD;&#xA;&#x9;&#x9;&#x9;&#x9; 'File flagged as registered but some of the registration data items is null'&#xD;&#xA;&#x9;&#x9;FROM   [&quot;+ context.intermediateDB + &quot;].[dbo].VW_import_patent &#xD;&#xA;&#x9;&#x9;WHERE&#x9; ind_import  = 0&#xD;&#xA;&#x9;&#x9; AND&#x9;IND_REGISTERED  = 1&#xD;&#xA;&#x9;&#x9; AND&#x9;(REGISTRATION_TYPE  is null&#xD;&#xA;&#x9;&#x9; OR&#x9;(REGISTRATION_SERIES  in ( 0  )&#xD;&#xA;&#x9;&#x9; OR&#x9;REGISTRATION_SERIES  IS NULL)&#xD;&#xA;&#x9;&#x9; OR&#x9;(REGISTRATION_NBR  in ( 0  )&#xD;&#xA;&#x9;&#x9; OR&#x9;REGISTRATION_NBR  IS NULL)&#xD;&#xA;&#x9;&#x9; OR&#x9;REGISTRATION_DATE  is null&#xD;&#xA;&#x9;&#x9; OR&#x9;REGISTRATION_TYPE  is null&#xD;&#xA;&#x9;&#x9; OR&#x9;ENTITLEMENT_DATE  is null&#xD;&#xA;&#x9;&#x9; OR&#x9;EXPIRATION_DATE  is null)&#xD;&#xA;&#x9;&#x9;&#xD;&#xA;&#x9;&#x9;/* EXPIRATION_DATE: if less than ENTITLEMENT_DATE, message ?Expiration date is less then entitlement date? */&#xD;&#xA;&#x9;&#x9;INSERT INTO   [&quot;+ context.intermediateDB + &quot;].[dbo].VW_IMPORT_PATENT_RESULT   &#xD;&#xA;&#x9;&#x9;&#x9;&#x9;( file_seq , &#xD;&#xA;&#x9;&#x9;&#x9;&#x9;file_type , &#xD;&#xA;&#x9;&#x9;&#x9;&#x9;file_series , &#xD;&#xA;&#x9;&#x9;&#x9;&#x9;file_nbr , &#xD;&#xA;&#x9;&#x9;&#x9;&#x9;ind_import , &#xD;&#xA;&#x9;&#x9;&#x9;&#x9;msg_import )  &#xD;&#xA;&#x9;&#x9;SELECT&#xD;&#xA;&#x9;&#x9;&#x9;&#x9; file_seq,&#xD;&#xA;&#x9;&#x9;&#x9;&#x9; file_type,&#xD;&#xA;&#x9;&#x9;&#x9;&#x9; file_series,&#xD;&#xA;&#x9;&#x9;&#x9;&#x9; file_nbr,&#xD;&#xA;&#x9;&#x9;&#x9;&#x9; 2,&#xD;&#xA;&#x9;&#x9;&#x9;&#x9; 'Expiration date is less then entitlement date'&#xD;&#xA;&#x9;&#x9;FROM   [&quot;+ context.intermediateDB + &quot;].[dbo].VW_import_patent &#xD;&#xA;&#x9;&#x9;WHERE&#x9; ind_import  = 0&#xD;&#xA;&#x9;&#x9; AND&#x9;IND_REGISTERED  = 1&#xD;&#xA;&#x9;&#x9; AND&#x9;EXPIRATION_DATE  &lt; ENTITLEMENT_DATE&#xD;&#xA;&#x9;&#x9;&#xD;&#xA;&#x9;&#x9;/* CAPTURE_USER_ID: if not exists in IP_USER, message ?Invalid capture user code? */&#xD;&#xA;&#x9;&#x9;INSERT INTO   [&quot;+ context.intermediateDB + &quot;].[dbo].VW_IMPORT_PATENT_RESULT   &#xD;&#xA;&#x9;&#x9;&#x9;&#x9;( file_seq , &#xD;&#xA;&#x9;&#x9;&#x9;&#x9;file_type , &#xD;&#xA;&#x9;&#x9;&#x9;&#x9;file_series , &#xD;&#xA;&#x9;&#x9;&#x9;&#x9;file_nbr , &#xD;&#xA;&#x9;&#x9;&#x9;&#x9;ind_import , &#xD;&#xA;&#x9;&#x9;&#x9;&#x9;msg_import )  &#xD;&#xA;&#x9;&#x9;SELECT&#xD;&#xA;&#x9;&#x9;&#x9;&#x9; file_seq,&#xD;&#xA;&#x9;&#x9;&#x9;&#x9; file_type,&#xD;&#xA;&#x9;&#x9;&#x9;&#x9; file_series,&#xD;&#xA;&#x9;&#x9;&#x9;&#x9; file_nbr,&#xD;&#xA;&#x9;&#x9;&#x9;&#x9; 2,&#xD;&#xA;&#x9;&#x9;&#x9;&#x9; 'Invalid capture user code'&#xD;&#xA;&#x9;&#x9;FROM   [&quot;+ context.intermediateDB + &quot;].[dbo].VW_import_patent &#xD;&#xA;&#x9;&#x9;WHERE&#x9; ind_import  = 0&#xD;&#xA;&#x9;&#x9; AND&#x9;CAPTURE_USER_ID  is not null&#xD;&#xA;&#x9;&#x9; AND&#x9;CAPTURE_USER_ID  not in&#xD;&#xA;&#x9;&#x9;&#x9;(&#xD;&#xA;&#x9;&#x9; &#x9;SELECT user_id&#xD;&#xA;&#x9;&#x9;&#x9;FROM  IP_USER &#xD;&#xA;&#x9;&#x9;&#x9;)&#xD;&#xA;&#x9;&#x9;&#xD;&#xA;&#x9;&#x9;/* 1.1.1.2 Duplicate keys validations */&#xD;&#xA;&#x9;&#x9;/* If FILE_SEQ / FILE_TYPE / FILE_SERIES / FILE_NBR already exists in IP_FILE, &#xD;&#xA;&#x9;&#x9;       insert message ?File sequence / type / series / number already exists in the database? */&#xD;&#xA;&#x9;&#x9;INSERT INTO   [&quot;+ context.intermediateDB + &quot;].[dbo].VW_IMPORT_PATENT_RESULT   &#xD;&#xA;&#x9;&#x9;&#x9;&#x9;( file_seq , &#xD;&#xA;&#x9;&#x9;&#x9;&#x9;file_type , &#xD;&#xA;&#x9;&#x9;&#x9;&#x9;file_series , &#xD;&#xA;&#x9;&#x9;&#x9;&#x9;file_nbr , &#xD;&#xA;&#x9;&#x9;&#x9;&#x9;ind_import , &#xD;&#xA;&#x9;&#x9;&#x9;&#x9;msg_import )  &#xD;&#xA;&#x9;&#x9;SELECT&#xD;&#xA;&#x9;&#x9;&#x9;&#x9; file_seq,&#xD;&#xA;&#x9;&#x9;&#x9;&#x9; file_type,&#xD;&#xA;&#x9;&#x9;&#x9;&#x9; file_series,&#xD;&#xA;&#x9;&#x9;&#x9;&#x9; file_nbr,&#xD;&#xA;&#x9;&#x9;&#x9;&#x9; 2,&#xD;&#xA;&#x9;&#x9;&#x9;&#x9; 'File sequence / type / series / number already exists in the database'&#xD;&#xA;&#x9;&#x9;FROM   [&quot;+ context.intermediateDB + &quot;].[dbo].VW_import_patent M&#xD;&#xA;&#x9;&#x9;WHERE&#x9; ind_import  = 0&#xD;&#xA;&#x9;&#x9; AND&#x9;exists&#xD;&#xA;&#x9;&#x9;&#x9;&#x9;(select&#x9;&#x9;*&#xD;&#xA;&#x9;&#x9;&#x9;&#x9; from&#x9;&#x9;IP_FILE F&#xD;&#xA;&#x9;&#x9;&#x9;&#x9; where&#x9;&#x9;M.FILE_SEQ    = F.FILE_SEQ&#x9;&#x9;COLLATE DATABASE_DEFAULT and&#xD;&#xA;&#x9;&#x9;&#x9;&#x9;&#x9;&#x9;&#x9;M.FILE_TYPE   = F.FILE_TYP&#x9;&#x9;COLLATE DATABASE_DEFAULT and&#xD;&#xA;&#x9;&#x9;&#x9;&#x9;&#x9;&#x9;&#x9;M.FILE_SERIES = F.FILE_SER&#x9;and&#xD;&#xA;&#x9;&#x9;&#x9;&#x9;&#x9;&#x9;&#x9;M.FILE_NBR    = F.FILE_NBR&#xD;&#xA;&#x9;&#x9;&#x9;&#x9;)&#xD;&#xA;&#x9;&#x9;&#xD;&#xA;&#x9;&#x9;/* If DOC_NBR is not null and DOC_ORI / DOC_SERIES / DOC_NBR already exists in IP_DOC, &#xD;&#xA;&#x9;&#x9;       insert message ?Document origin / series / number already exists in the database? */&#xD;&#xA;&#x9;&#x9;INSERT INTO   [&quot;+ context.intermediateDB + &quot;].[dbo].VW_IMPORT_PATENT_RESULT   &#xD;&#xA;&#x9;&#x9;&#x9;&#x9;( file_seq , &#xD;&#xA;&#x9;&#x9;&#x9;&#x9;file_type , &#xD;&#xA;&#x9;&#x9;&#x9;&#x9;file_series , &#xD;&#xA;&#x9;&#x9;&#x9;&#x9;file_nbr , &#xD;&#xA;&#x9;&#x9;&#x9;&#x9;ind_import , &#xD;&#xA;&#x9;&#x9;&#x9;&#x9;msg_import )  &#xD;&#xA;&#x9;&#x9;SELECT&#xD;&#xA;&#x9;&#x9;&#x9;&#x9; file_seq,&#xD;&#xA;&#x9;&#x9;&#x9;&#x9; file_type,&#xD;&#xA;&#x9;&#x9;&#x9;&#x9; file_series,&#xD;&#xA;&#x9;&#x9;&#x9;&#x9; file_nbr,&#xD;&#xA;&#x9;&#x9;&#x9;&#x9; 2,&#xD;&#xA;&#x9;&#x9;&#x9;&#x9; 'Document origin / series / number already exists in the database'&#xD;&#xA;&#x9;&#x9;FROM   [&quot;+ context.intermediateDB + &quot;].[dbo].VW_import_patent M&#xD;&#xA;&#x9;&#x9;WHERE&#x9;ind_import  = 0&#xD;&#xA;&#x9;&#x9; AND&#x9;exists&#xD;&#xA;&#x9;&#x9;&#x9;&#x9;(select&#x9;*&#xD;&#xA;&#x9;&#x9;&#x9;&#x9; from&#x9;IP_DOC D&#xD;&#xA;&#x9;&#x9;&#x9;&#x9; where&#x9;D.DOC_ORI&#x9;= M.DOC_ORI&#x9;&#x9;COLLATE DATABASE_DEFAULT and&#x9;&#x9;&#xD;&#xA;&#x9;&#x9;&#x9;&#x9;&#x9;&#x9;D.DOC_LOG&#x9;= 'E'&#x9;&#x9;&#x9;and&#x9;&#xD;&#xA;&#x9;&#x9;&#x9;&#x9;&#x9;&#x9;D.DOC_SER&#x9;= M.DOC_SERIES&#x9;and&#xD;&#xA;&#x9;&#x9;&#x9;&#x9;&#x9;&#x9;D.DOC_NBR&#x9;= M.DOC_NBR&#xD;&#xA;&#x9;&#x9;&#x9;&#x9;)&#xD;&#xA;&#x9;&#x9;&#xD;&#xA;&#x9;&#x9;/* If DOC_NBR is not null and DOC_ORI / DOC_SERIES / DOC_NBR is repeated in  [&quot;+ context.intermediateDB + &quot;].[dbo].VW_IMPORT_PATENT,&#xD;&#xA;&#x9;&#x9;insert message ?Document origin / series / number duplicated in intermediate table? */&#xD;&#xA;&#x9;&#x9;/* Generate work table with repeated DOC_ORI / DOC_SERIES / DOC_NBR */&#xD;&#xA;&#x9;&#x9;&#x9;&#x9;&#xD;&#xA;&#x9;&#x9;TRUNCATE TABLE wrk_doc_key&#xD;&#xA;&#xD;&#xA;&#x9;&#x9;INSERT INTO  wrk_doc_key    &#xD;&#xA;&#x9;&#x9;SELECT&#xD;&#xA;&#x9;&#x9;&#x9;&#x9; DOC_ORI,&#xD;&#xA;&#x9;&#x9;&#x9;&#x9; DOC_SERIES,&#xD;&#xA;&#x9;&#x9;&#x9;&#x9; DOC_NBR&#xD;&#xA;&#x9;&#x9;FROM   [&quot;+ context.intermediateDB + &quot;].[dbo].VW_IMPORT_PATENT &#xD;&#xA;&#x9;&#x9;WHERE&#x9; DOC_NBR  is not null&#xD;&#xA;&#x9;&#x9;GROUP BY DOC_ORI,&#xD;&#xA;&#x9;&#x9;&#x9; DOC_SERIES,&#xD;&#xA;&#x9;&#x9;&#x9;  DOC_NBR &#xD;&#xA;&#x9;&#x9;HAVING COUNT(*)  > 1  &#xD;&#xA;&#x9;&#x9;&#xD;&#xA;&#x9;&#x9;INSERT INTO   [&quot;+ context.intermediateDB + &quot;].[dbo].VW_IMPORT_PATENT_RESULT   &#xD;&#xA;&#x9;&#x9;&#x9;&#x9;( file_seq , &#xD;&#xA;&#x9;&#x9;&#x9;&#x9;file_type , &#xD;&#xA;&#x9;&#x9;&#x9;&#x9;file_series , &#xD;&#xA;&#x9;&#x9;&#x9;&#x9;file_nbr , &#xD;&#xA;&#x9;&#x9;&#x9;&#x9;ind_import , &#xD;&#xA;&#x9;&#x9;&#x9;&#x9;msg_import )  &#xD;&#xA;&#x9;&#x9;SELECT&#xD;&#xA;&#x9;&#x9;&#x9;&#x9; file_seq,&#xD;&#xA;&#x9;&#x9;&#x9;&#x9; file_type,&#xD;&#xA;&#x9;&#x9;&#x9;&#x9; file_series,&#xD;&#xA;&#x9;&#x9;&#x9;&#x9; file_nbr,&#xD;&#xA;&#x9;&#x9;&#x9;&#x9; 2,&#xD;&#xA;&#x9;&#x9;&#x9;&#x9; 'Document origin / series / number duplicated in intermediate table'&#xD;&#xA;&#x9;&#x9;FROM   [&quot;+ context.intermediateDB + &quot;].[dbo].VW_import_patent M&#xD;&#xA;&#x9;&#x9;WHERE&#x9; ind_import  = 0&#xD;&#xA;&#x9;&#x9; AND&#x9;DOC_NBR  is not null&#xD;&#xA;&#x9;&#x9; AND&#x9;exists&#xD;&#xA;&#x9;&#x9;&#x9;&#x9;(select&#x9;*&#xD;&#xA;&#x9;&#x9;&#x9;&#x9; from&#x9;wrk_doc_key D&#xD;&#xA;&#x9;&#x9;&#x9;&#x9; where&#x9;D.DOC_ORI&#x9;= M.DOC_ORI&#x9;&#x9;and&#xD;&#xA;&#x9;&#x9;&#x9;&#x9;&#x9;&#x9;D.DOC_SERIES= M.DOC_SERIES&#x9;and&#xD;&#xA;&#x9;&#x9;&#x9;&#x9;&#x9;&#x9;D.DOC_NBR&#x9;= M.DOC_NBR&#xD;&#xA;&#x9;&#x9;&#x9;&#x9;)&#xD;&#xA;&#x9;&#x9;&#xD;&#xA;&#x9;&#x9;/* If IND_REGISTERED = 1 and REGISTRATION_TYPE / REGISTRATION_SERIES / REGISTRATION_NBR / REGISTRATION_DUP &#xD;&#xA;&#x9;&#x9;       already exists in IP_FILE, insert message ?Registration type / series / number / duplicate already exists in the database? */&#xD;&#xA;&#x9;&#x9;INSERT INTO   [&quot;+ context.intermediateDB + &quot;].[dbo].VW_IMPORT_PATENT_RESULT   &#xD;&#xA;&#x9;&#x9;&#x9;&#x9;( file_seq , &#xD;&#xA;&#x9;&#x9;&#x9;&#x9;file_type , &#xD;&#xA;&#x9;&#x9;&#x9;&#x9;file_series , &#xD;&#xA;&#x9;&#x9;&#x9;&#x9;file_nbr , &#xD;&#xA;&#x9;&#x9;&#x9;&#x9;ind_import , &#xD;&#xA;&#x9;&#x9;&#x9;&#x9;msg_import )  &#xD;&#xA;&#x9;&#x9;SELECT&#xD;&#xA;&#x9;&#x9;&#x9;&#x9; file_seq,&#xD;&#xA;&#x9;&#x9;&#x9;&#x9; file_type,&#xD;&#xA;&#x9;&#x9;&#x9;&#x9; file_series,&#xD;&#xA;&#x9;&#x9;&#x9;&#x9; file_nbr,&#xD;&#xA;&#x9;&#x9;&#x9;&#x9; 2,&#xD;&#xA;&#x9;&#x9;&#x9;&#x9; 'Registration type / series / number / duplicate already exists in the database'&#xD;&#xA;&#x9;&#x9;FROM   [&quot;+ context.intermediateDB + &quot;].[dbo].VW_import_patent M&#xD;&#xA;&#x9;&#x9;WHERE&#x9; ind_import  = 0&#xD;&#xA;&#x9;&#x9; AND&#x9;IND_REGISTERED  = 1&#xD;&#xA;&#x9;&#x9; AND&#x9;exists&#xD;&#xA;&#x9;&#x9;&#x9;&#x9;(select&#x9;*&#xD;&#xA;&#x9;&#x9;&#x9;&#x9; from&#x9;IP_FILE F&#xD;&#xA;&#x9;&#x9;&#x9;&#x9; where&#x9;F.REGISTRATION_TYP&#x9;= M.REGISTRATION_TYPE&#x9;COLLATE DATABASE_DEFAULT AND&#xD;&#xA;&#x9;&#x9;&#x9;&#x9;&#x9;&#x9;F.REGISTRATION_SER&#x9;= M.REGISTRATION_SERIES AND&#xD;&#xA;&#x9;&#x9;&#x9;&#x9;&#x9;&#x9;F.REGISTRATION_NBR&#x9;= M.REGISTRATION_NBR &#x9;AND&#xD;&#xA;&#x9;&#x9;&#x9;&#x9;&#x9;&#x9;F.REGISTRATION_DUP&#x9;= M.REGISTRATION_DUP&#x9;COLLATE DATABASE_DEFAULT &#xD;&#xA;&#x9;&#x9;&#x9;&#x9;)&#xD;&#xA;&#x9;&#x9;&#xD;&#xA;&#x9;&#x9;/* 1.1.2  [&quot;+ context.intermediateDB + &quot;].[dbo].VW_IMPORT_PATENT_OWNERS validations */&#xD;&#xA;&#x9;&#x9;/* 1.1.2.1 Owner validations */&#xD;&#xA;&#x9;&#x9;/* Generate work table with FILE_SEQ, FILE_TYPE, FILE_SERIES, FILE_NBR, IND_SERVICE and COUNT(*) */&#xD;&#xA;&#x9;&#x9;DELETE FROM   wrk_file_service_count    &#xD;&#xA;&#x9;&#x9;&#xD;&#xA;&#x9;&#x9;INSERT INTO  wrk_file_service_count    &#xD;&#xA;&#x9;&#x9;SELECT&#xD;&#xA;&#x9;&#x9;&#x9;&#x9; FILE_SEQ,&#xD;&#xA;&#x9;&#x9;&#x9;&#x9; FILE_TYPE,&#xD;&#xA;&#x9;&#x9;&#x9;&#x9; FILE_SERIES,&#xD;&#xA;&#x9;&#x9;&#x9;&#x9; FILE_NBR,&#xD;&#xA;&#x9;&#x9;&#x9;&#x9; IND_SERVICE,&#xD;&#xA;&#x9;&#x9;&#x9;&#x9; COUNT(*) count1&#xD;&#xA;&#x9;&#x9;FROM   [&quot;+ context.intermediateDB + &quot;].[dbo].VW_IMPORT_PATENT_OWNERS &#xD;&#xA;&#x9;&#x9;GROUP BY FILE_SEQ,&#xD;&#xA;&#x9;&#x9;&#x9; FILE_TYPE,&#xD;&#xA;&#x9;&#x9;&#x9; FILE_SERIES,&#xD;&#xA;&#x9;&#x9;&#x9; FILE_NBR,&#xD;&#xA;&#x9;&#x9;&#x9;  IND_SERVICE &#xD;&#xA;&#x9;&#x9;&#xD;&#xA;&#x9;&#x9;/* No service address: where not exists corresponding tuple in the work table with IND_SERVICE = 1, &#xD;&#xA;&#x9;&#x9;       message ?No owner flagged as service address? */&#xD;&#xA;&#x9;&#x9;INSERT INTO   [&quot;+ context.intermediateDB + &quot;].[dbo].VW_IMPORT_PATENT_RESULT   &#xD;&#xA;&#x9;&#x9;&#x9;&#x9;( file_seq , &#xD;&#xA;&#x9;&#x9;&#x9;&#x9;file_type , &#xD;&#xA;&#x9;&#x9;&#x9;&#x9;file_series , &#xD;&#xA;&#x9;&#x9;&#x9;&#x9;file_nbr , &#xD;&#xA;&#x9;&#x9;&#x9;&#x9;ind_import , &#xD;&#xA;&#x9;&#x9;&#x9;&#x9;msg_import )  &#xD;&#xA;&#x9;&#x9;SELECT&#xD;&#xA;&#x9;&#x9;&#x9;&#x9; file_seq,&#xD;&#xA;&#x9;&#x9;&#x9;&#x9; file_type,&#xD;&#xA;&#x9;&#x9;&#x9;&#x9; file_series,&#xD;&#xA;&#x9;&#x9;&#x9;&#x9; file_nbr,&#xD;&#xA;&#x9;&#x9;&#x9;&#x9; 2,&#xD;&#xA;&#x9;&#x9;&#x9;&#x9; 'No owner flagged as service address'&#xD;&#xA;&#x9;&#x9;FROM   [&quot;+ context.intermediateDB + &quot;].[dbo].VW_import_patent M &#xD;&#xA;&#x9;&#x9;WHERE&#x9; ind_import  = 0&#xD;&#xA;&#x9;&#x9; AND&#x9;NOT   exists&#xD;&#xA;&#x9;&#x9;&#x9;(&#xD;&#xA;&#x9;&#x9; &#x9;SELECT *&#xD;&#xA;&#x9;&#x9;&#x9;FROM  wrk_file_service_count W &#xD;&#xA;&#x9;&#x9;&#x9;WHERE&#x9; M.file_seq  = W.file_seq&#xD;&#xA;&#x9;&#x9;&#x9; AND&#x9;M.file_type  = W.file_type&#xD;&#xA;&#x9;&#x9;&#x9; AND&#x9;M.file_series  = W.file_series&#xD;&#xA;&#x9;&#x9;&#x9; AND&#x9;M.file_nbr  = W.file_nbr&#xD;&#xA;&#x9;&#x9;&#x9; AND&#x9;ind_service  = 1&#xD;&#xA;&#x9;&#x9;&#x9;)&#xD;&#xA;&#x9;&#x9;&#xD;&#xA;&#x9;&#x9;/* Several service addresses: where exists corresponding tuple in the work table with &#xD;&#xA;&#x9;&#x9;      IND_SERVICE = 1 and with count column > 1, message ?Several owners flagged as service addresses? */&#xD;&#xA;&#x9;&#x9;INSERT INTO   [&quot;+ context.intermediateDB + &quot;].[dbo].VW_IMPORT_PATENT_RESULT   &#xD;&#xA;&#x9;&#x9;&#x9;&#x9;( file_seq , &#xD;&#xA;&#x9;&#x9;&#x9;&#x9;file_type , &#xD;&#xA;&#x9;&#x9;&#x9;&#x9;file_series , &#xD;&#xA;&#x9;&#x9;&#x9;&#x9;file_nbr , &#xD;&#xA;&#x9;&#x9;&#x9;&#x9;ind_import , &#xD;&#xA;&#x9;&#x9;&#x9;&#x9;msg_import )  &#xD;&#xA;&#x9;&#x9;SELECT&#xD;&#xA;&#x9;&#x9;&#x9;&#x9; M.file_seq,&#xD;&#xA;&#x9;&#x9;&#x9;&#x9; M.file_type,&#xD;&#xA;&#x9;&#x9;&#x9;&#x9; M.file_series,&#xD;&#xA;&#x9;&#x9;&#x9;&#x9; M.file_nbr,&#xD;&#xA;&#x9;&#x9;&#x9;&#x9; 2,&#xD;&#xA;&#x9;&#x9;&#x9;&#x9; 'Several owners flagged as service addresses'&#xD;&#xA;&#x9;&#x9;FROM   [&quot;+ context.intermediateDB + &quot;].[dbo].VW_import_patent M &#xD;&#xA;&#x9;&#x9; JOIN wrk_file_service_count W ON M.file_seq  = W.file_seq&#xD;&#xA;&#x9;&#x9;&#x9; AND&#x9;M.file_type  = W.file_type&#xD;&#xA;&#x9;&#x9;&#x9; AND&#x9;M.file_series  = W.file_series&#xD;&#xA;&#x9;&#x9;&#x9; AND&#x9;M.file_nbr  = W.file_nbr  &#xD;&#xA;&#x9;&#x9;WHERE&#x9; ind_import  = 0&#xD;&#xA;&#x9;&#x9; AND&#x9;ind_service  = 1&#xD;&#xA;&#x9;&#x9; AND&#x9;count1  > 1&#xD;&#xA;&#x9;&#x9;&#xD;&#xA;&#x9;&#x9;/* 1.1.2.2 Person validations */&#xD;&#xA;&#x9;&#x9;/* NATIONALITY_COUNTRY_CODE: if not exists in CF_GEO_COUNTRY, message ?Invalid owner nationality country code? */&#xD;&#xA;&#x9;&#x9;INSERT INTO   [&quot;+ context.intermediateDB + &quot;].[dbo].VW_IMPORT_PATENT_RESULT   &#xD;&#xA;&#x9;&#x9;&#x9;&#x9;( file_seq , &#xD;&#xA;&#x9;&#x9;&#x9;&#x9;file_type , &#xD;&#xA;&#x9;&#x9;&#x9;&#x9;file_series , &#xD;&#xA;&#x9;&#x9;&#x9;&#x9;file_nbr , &#xD;&#xA;&#x9;&#x9;&#x9;&#x9;ind_import , &#xD;&#xA;&#x9;&#x9;&#x9;&#x9;msg_import )  &#xD;&#xA;&#x9;&#x9;SELECT&#xD;&#xA;&#x9;&#x9;&#x9;&#x9; T.file_seq,&#xD;&#xA;&#x9;&#x9;&#x9;&#x9; T.file_type,&#xD;&#xA;&#x9;&#x9;&#x9;&#x9; T.file_series,&#xD;&#xA;&#x9;&#x9;&#x9;&#x9; T.file_nbr,&#xD;&#xA;&#x9;&#x9;&#x9;&#x9; 2,&#xD;&#xA;&#x9;&#x9;&#x9;&#x9; 'Invalid owner nationality country code'&#xD;&#xA;&#x9;&#x9;FROM   [&quot;+ context.intermediateDB + &quot;].[dbo].VW_import_patent_owners T &#xD;&#xA;&#x9;&#x9; JOIN  [&quot;+ context.intermediateDB + &quot;].[dbo].VW_import_patent M ON T.file_seq  = M.file_seq&#xD;&#xA;&#x9;&#x9;&#x9; AND&#x9;T.file_type  = M.file_type&#xD;&#xA;&#x9;&#x9;&#x9; AND&#x9;T.file_series  = M.file_series&#xD;&#xA;&#x9;&#x9;&#x9; AND&#x9;T.file_nbr  = M.file_nbr  &#xD;&#xA;&#x9;&#x9;WHERE&#x9; ind_import  = 0&#xD;&#xA;&#x9;&#x9; AND&#x9;not exists&#xD;&#xA;&#x9;&#x9;&#x9;(&#xD;&#xA;&#x9;&#x9; &#x9;SELECT  *&#xD;&#xA;&#x9;&#x9;&#x9;FROM    cf_geo_country &#xD;&#xA;                        WHERE   COUNTRY_CODE = NATIONALITY_COUNTRY_CODE  COLLATE DATABASE_DEFAULT&#xD;&#xA;&#x9;&#x9;&#x9;)&#xD;&#xA;&#x9;&#x9;&#xD;&#xA;&#x9;&#x9;/* LEGAL_NATURE: if not null and IND_COMPANY = 0, message ?Owner legal nature only applies when the person is a company? */&#xD;&#xA;&#x9;&#x9;INSERT INTO   [&quot;+ context.intermediateDB + &quot;].[dbo].VW_IMPORT_PATENT_RESULT   &#xD;&#xA;&#x9;&#x9;&#x9;&#x9;( file_seq , &#xD;&#xA;&#x9;&#x9;&#x9;&#x9;file_type , &#xD;&#xA;&#x9;&#x9;&#x9;&#x9;file_series , &#xD;&#xA;&#x9;&#x9;&#x9;&#x9;file_nbr , &#xD;&#xA;&#x9;&#x9;&#x9;&#x9;ind_import , &#xD;&#xA;&#x9;&#x9;&#x9;&#x9;msg_import )  &#xD;&#xA;&#x9;&#x9;SELECT&#xD;&#xA;&#x9;&#x9;&#x9;&#x9; T.file_seq,&#xD;&#xA;&#x9;&#x9;&#x9;&#x9; T.file_type,&#xD;&#xA;&#x9;&#x9;&#x9;&#x9; T.file_series,&#xD;&#xA;&#x9;&#x9;&#x9;&#x9; T.file_nbr,&#xD;&#xA;&#x9;&#x9;&#x9;&#x9; 2,&#xD;&#xA;&#x9;&#x9;&#x9;&#x9; 'Owner legal nature only applies when the person is a company'&#xD;&#xA;&#x9;&#x9;FROM   [&quot;+ context.intermediateDB + &quot;].[dbo].VW_import_patent_owners T &#xD;&#xA;&#x9;&#x9; JOIN  [&quot;+ context.intermediateDB + &quot;].[dbo].VW_import_patent M ON T.file_seq  = M.file_seq&#xD;&#xA;&#x9;&#x9;&#x9; AND&#x9;T.file_type  = M.file_type&#xD;&#xA;&#x9;&#x9;&#x9; AND&#x9;T.file_series  = M.file_series&#xD;&#xA;&#x9;&#x9;&#x9; AND&#x9;T.file_nbr  = M.file_nbr  &#xD;&#xA;&#x9;&#x9;WHERE&#x9; ind_import  = 0&#xD;&#xA;&#x9;&#x9; AND&#x9;LEGAL_NATURE  is not null&#xD;&#xA;&#x9;&#x9; AND&#x9;IND_COMPANY  = 0&#xD;&#xA;&#x9;&#x9;&#xD;&#xA;&#x9;&#x9;/* LEGAL_ID_TYPE: if not null and not exists if CF_PERSON_ID_TYPE with IND_GENERAL_ID = ?S?, &#xD;&#xA;&#x9;&#x9;       message ?Invalid owner legal id type? */&#xD;&#xA;&#x9;&#x9;INSERT INTO   [&quot;+ context.intermediateDB + &quot;].[dbo].VW_IMPORT_PATENT_RESULT   &#xD;&#xA;&#x9;&#x9;&#x9;&#x9;( file_seq , &#xD;&#xA;&#x9;&#x9;&#x9;&#x9;file_type , &#xD;&#xA;&#x9;&#x9;&#x9;&#x9;file_series , &#xD;&#xA;&#x9;&#x9;&#x9;&#x9;file_nbr , &#xD;&#xA;&#x9;&#x9;&#x9;&#x9;ind_import , &#xD;&#xA;&#x9;&#x9;&#x9;&#x9;msg_import )  &#xD;&#xA;&#x9;&#x9;SELECT&#xD;&#xA;&#x9;&#x9;&#x9;&#x9; T.file_seq,&#xD;&#xA;&#x9;&#x9;&#x9;&#x9; T.file_type,&#xD;&#xA;&#x9;&#x9;&#x9;&#x9; T.file_series,&#xD;&#xA;&#x9;&#x9;&#x9;&#x9; T.file_nbr,&#xD;&#xA;&#x9;&#x9;&#x9;&#x9; 2,&#xD;&#xA;&#x9;&#x9;&#x9;&#x9; 'Invalid owner legal id type'&#xD;&#xA;&#x9;&#x9;FROM   [&quot;+ context.intermediateDB + &quot;].[dbo].VW_import_patent_owners T &#xD;&#xA;&#x9;&#x9; JOIN  [&quot;+ context.intermediateDB + &quot;].[dbo].VW_import_patent M ON T.file_seq  = M.file_seq&#xD;&#xA;&#x9;&#x9;&#x9; AND&#x9;T.file_type  = M.file_type&#xD;&#xA;&#x9;&#x9;&#x9; AND&#x9;T.file_series  = M.file_series&#xD;&#xA;&#x9;&#x9;&#x9; AND&#x9;T.file_nbr  = M.file_nbr  &#xD;&#xA;&#x9;&#x9;WHERE&#x9; ind_import  = 0&#xD;&#xA;&#x9;&#x9; AND&#x9;LEGAL_ID_TYPE  is not null&#xD;&#xA;&#x9;&#x9; AND&#x9;LEGAL_ID_TYPE  COLLATE DATABASE_DEFAULT not in&#xD;&#xA;&#x9;&#x9;&#x9;(&#xD;&#xA;&#x9;&#x9; &#x9;SELECT PERSON_ID_TYP&#xD;&#xA;&#x9;&#x9;&#x9;FROM  CF_PERSON_ID_TYPE &#xD;&#xA;&#x9;&#x9;&#x9;WHERE&#x9; IND_GENERAL_ID  = 'S'&#xD;&#xA;&#x9;&#x9;&#x9;)&#xD;&#xA;&#x9;&#x9;&#xD;&#xA;&#x9;&#x9;/* INDIVIDUAL_ID_TYPE: if not null and not exists if CF_PERSON_ID_TYPE with IND_INDIVIDUAL_ID = ?S?, &#xD;&#xA;&#x9;&#x9;       message ?Invalid owner individual id type? */&#xD;&#xA;&#x9;&#x9;INSERT INTO   [&quot;+ context.intermediateDB + &quot;].[dbo].VW_IMPORT_PATENT_RESULT   &#xD;&#xA;&#x9;&#x9;&#x9;&#x9;( file_seq , &#xD;&#xA;&#x9;&#x9;&#x9;&#x9;file_type , &#xD;&#xA;&#x9;&#x9;&#x9;&#x9;file_series , &#xD;&#xA;&#x9;&#x9;&#x9;&#x9;file_nbr , &#xD;&#xA;&#x9;&#x9;&#x9;&#x9;ind_import , &#xD;&#xA;&#x9;&#x9;&#x9;&#x9;msg_import )  &#xD;&#xA;&#x9;&#x9;SELECT&#xD;&#xA;&#x9;&#x9;&#x9;&#x9; T.file_seq,&#xD;&#xA;&#x9;&#x9;&#x9;&#x9; T.file_type,&#xD;&#xA;&#x9;&#x9;&#x9;&#x9; T.file_series,&#xD;&#xA;&#x9;&#x9;&#x9;&#x9; T.file_nbr,&#xD;&#xA;&#x9;&#x9;&#x9;&#x9; 2,&#xD;&#xA;&#x9;&#x9;&#x9;&#x9; 'Invalid owner individual id type'&#xD;&#xA;&#x9;&#x9;FROM   [&quot;+ context.intermediateDB + &quot;].[dbo].VW_import_patent_owners T &#xD;&#xA;&#x9;&#x9; JOIN  [&quot;+ context.intermediateDB + &quot;].[dbo].VW_import_patent M ON T.file_seq  = M.file_seq&#xD;&#xA;&#x9;&#x9;&#x9; AND&#x9;T.file_type  = M.file_type&#xD;&#xA;&#x9;&#x9;&#x9; AND&#x9;T.file_series  = M.file_series&#xD;&#xA;&#x9;&#x9;&#x9; AND&#x9;T.file_nbr  = M.file_nbr  &#xD;&#xA;&#x9;&#x9;WHERE&#x9; ind_import  = 0&#xD;&#xA;&#x9;&#x9; AND&#x9;INDIVIDUAL_ID_TYPE  is not null&#xD;&#xA;&#x9;&#x9; AND&#x9;INDIVIDUAL_ID_TYPE  COLLATE DATABASE_DEFAULT not in&#xD;&#xA;&#x9;&#x9;&#x9;(&#xD;&#xA;&#x9;&#x9; &#x9;SELECT PERSON_ID_TYP&#xD;&#xA;&#x9;&#x9;&#x9;FROM  CF_PERSON_ID_TYPE &#xD;&#xA;&#x9;&#x9;&#x9;WHERE&#x9; IND_INDIVIDUAL_ID  = 'S'&#xD;&#xA;&#x9;&#x9;&#x9;)&#xD;&#xA;&#x9;&#x9;&#xD;&#xA;&#x9;&#x9;/* If LEGAL_ID_TYPE is not null and LEGAL_ID_NBR is null, message ?Missing owner legal id number? */&#xD;&#xA;&#x9;&#x9;INSERT INTO   [&quot;+ context.intermediateDB + &quot;].[dbo].VW_IMPORT_PATENT_RESULT   &#xD;&#xA;&#x9;&#x9;&#x9;&#x9;( file_seq , &#xD;&#xA;&#x9;&#x9;&#x9;&#x9;file_type , &#xD;&#xA;&#x9;&#x9;&#x9;&#x9;file_series , &#xD;&#xA;&#x9;&#x9;&#x9;&#x9;file_nbr , &#xD;&#xA;&#x9;&#x9;&#x9;&#x9;ind_import , &#xD;&#xA;&#x9;&#x9;&#x9;&#x9;msg_import )  &#xD;&#xA;&#x9;&#x9;SELECT&#xD;&#xA;&#x9;&#x9;&#x9;&#x9; T.file_seq,&#xD;&#xA;&#x9;&#x9;&#x9;&#x9; T.file_type,&#xD;&#xA;&#x9;&#x9;&#x9;&#x9; T.file_series,&#xD;&#xA;&#x9;&#x9;&#x9;&#x9; T.file_nbr,&#xD;&#xA;&#x9;&#x9;&#x9;&#x9; 2,&#xD;&#xA;&#x9;&#x9;&#x9;&#x9; 'Missing owner legal id number'&#xD;&#xA;&#x9;&#x9;FROM   [&quot;+ context.intermediateDB + &quot;].[dbo].VW_import_patent_owners T &#xD;&#xA;&#x9;&#x9; JOIN  [&quot;+ context.intermediateDB + &quot;].[dbo].VW_import_patent M ON T.file_seq  = M.file_seq&#xD;&#xA;&#x9;&#x9;&#x9; AND&#x9;T.file_type  = M.file_type&#xD;&#xA;&#x9;&#x9;&#x9; AND&#x9;T.file_series  = M.file_series&#xD;&#xA;&#x9;&#x9;&#x9; AND&#x9;T.file_nbr  = M.file_nbr  &#xD;&#xA;&#x9;&#x9;WHERE&#x9; ind_import  = 0&#xD;&#xA;&#x9;&#x9; AND&#x9;LEGAL_ID_TYPE  is not null&#xD;&#xA;&#x9;&#x9; AND&#x9;LEGAL_ID_NBR  is null&#xD;&#xA;&#x9;&#x9;&#xD;&#xA;&#x9;&#x9;/* If LEGAL_ID_TYPE is null and LEGAL_ID_NBR is not null, message ?Missing owner legal id type? */&#xD;&#xA;&#x9;&#x9;INSERT INTO   [&quot;+ context.intermediateDB + &quot;].[dbo].VW_IMPORT_PATENT_RESULT   &#xD;&#xA;&#x9;&#x9;&#x9;&#x9;( file_seq , &#xD;&#xA;&#x9;&#x9;&#x9;&#x9;file_type , &#xD;&#xA;&#x9;&#x9;&#x9;&#x9;file_series , &#xD;&#xA;&#x9;&#x9;&#x9;&#x9;file_nbr , &#xD;&#xA;&#x9;&#x9;&#x9;&#x9;ind_import , &#xD;&#xA;&#x9;&#x9;&#x9;&#x9;msg_import )  &#xD;&#xA;&#x9;&#x9;SELECT&#xD;&#xA;&#x9;&#x9;&#x9;&#x9; T.file_seq,&#xD;&#xA;&#x9;&#x9;&#x9;&#x9; T.file_type,&#xD;&#xA;&#x9;&#x9;&#x9;&#x9; T.file_series,&#xD;&#xA;&#x9;&#x9;&#x9;&#x9; T.file_nbr,&#xD;&#xA;&#x9;&#x9;&#x9;&#x9; 2,&#xD;&#xA;&#x9;&#x9;&#x9;&#x9; 'Missing owner legal id type'&#xD;&#xA;&#x9;&#x9;FROM   [&quot;+ context.intermediateDB + &quot;].[dbo].VW_import_patent_owners T &#xD;&#xA;&#x9;&#x9; JOIN  [&quot;+ context.intermediateDB + &quot;].[dbo].VW_import_patent M ON T.file_seq  = M.file_seq&#xD;&#xA;&#x9;&#x9;&#x9; AND&#x9;T.file_type  = M.file_type&#xD;&#xA;&#x9;&#x9;&#x9; AND&#x9;T.file_series  = M.file_series&#xD;&#xA;&#x9;&#x9;&#x9; AND&#x9;T.file_nbr  = M.file_nbr  &#xD;&#xA;&#x9;&#x9;WHERE&#x9; ind_import  = 0&#xD;&#xA;&#x9;&#x9; AND&#x9;LEGAL_ID_TYPE  is null&#xD;&#xA;&#x9;&#x9; AND&#x9;LEGAL_ID_NBR  is not null&#xD;&#xA;&#x9;&#x9;&#xD;&#xA;&#x9;&#x9;/* If INDIVIDUAL_ID_TYPE is not null and INDIVIDUAL_ID_NBR is null, message ?Missing owner individual id number? */&#xD;&#xA;&#x9;&#x9;INSERT INTO   [&quot;+ context.intermediateDB + &quot;].[dbo].VW_IMPORT_PATENT_RESULT   &#xD;&#xA;&#x9;&#x9;&#x9;&#x9;( file_seq , &#xD;&#xA;&#x9;&#x9;&#x9;&#x9;file_type , &#xD;&#xA;&#x9;&#x9;&#x9;&#x9;file_series , &#xD;&#xA;&#x9;&#x9;&#x9;&#x9;file_nbr , &#xD;&#xA;&#x9;&#x9;&#x9;&#x9;ind_import , &#xD;&#xA;&#x9;&#x9;&#x9;&#x9;msg_import )  &#xD;&#xA;&#x9;&#x9;SELECT&#xD;&#xA;&#x9;&#x9;&#x9;&#x9; T.file_seq,&#xD;&#xA;&#x9;&#x9;&#x9;&#x9; T.file_type,&#xD;&#xA;&#x9;&#x9;&#x9;&#x9; T.file_series,&#xD;&#xA;&#x9;&#x9;&#x9;&#x9; T.file_nbr,&#xD;&#xA;&#x9;&#x9;&#x9;&#x9; 2,&#xD;&#xA;&#x9;&#x9;&#x9;&#x9; 'Missing owner individual id number'&#xD;&#xA;&#x9;&#x9;FROM   [&quot;+ context.intermediateDB + &quot;].[dbo].VW_import_patent_owners T &#xD;&#xA;&#x9;&#x9; JOIN  [&quot;+ context.intermediateDB + &quot;].[dbo].VW_import_patent M ON T.file_seq  = M.file_seq&#xD;&#xA;&#x9;&#x9;&#x9; AND&#x9;T.file_type  = M.file_type&#xD;&#xA;&#x9;&#x9;&#x9; AND&#x9;T.file_series  = M.file_series&#xD;&#xA;&#x9;&#x9;&#x9; AND&#x9;T.file_nbr  = M.file_nbr  &#xD;&#xA;&#x9;&#x9;WHERE&#x9; ind_import  = 0&#xD;&#xA;&#x9;&#x9; AND&#x9;INDIVIDUAL_ID_TYPE  is not null&#xD;&#xA;&#x9;&#x9; AND&#x9;INDIVIDUAL_ID_NBR  is null&#xD;&#xA;&#x9;&#x9;&#xD;&#xA;&#x9;&#x9;/* If INDIVIDUAL_ID_TYPE is null and INDIVIDUAL_ID_NBR is not null, message ?Missing owner individual id type? */&#xD;&#xA;&#x9;&#x9;INSERT INTO   [&quot;+ context.intermediateDB + &quot;].[dbo].VW_IMPORT_PATENT_RESULT   &#xD;&#xA;&#x9;&#x9;&#x9;&#x9;( file_seq , &#xD;&#xA;&#x9;&#x9;&#x9;&#x9;file_type , &#xD;&#xA;&#x9;&#x9;&#x9;&#x9;file_series , &#xD;&#xA;&#x9;&#x9;&#x9;&#x9;file_nbr , &#xD;&#xA;&#x9;&#x9;&#x9;&#x9;ind_import , &#xD;&#xA;&#x9;&#x9;&#x9;&#x9;msg_import )  &#xD;&#xA;&#x9;&#x9;SELECT&#xD;&#xA;&#x9;&#x9;&#x9;&#x9; T.file_seq,&#xD;&#xA;&#x9;&#x9;&#x9;&#x9; T.file_type,&#xD;&#xA;&#x9;&#x9;&#x9;&#x9; T.file_series,&#xD;&#xA;&#x9;&#x9;&#x9;&#x9; T.file_nbr,&#xD;&#xA;&#x9;&#x9;&#x9;&#x9; 2,&#xD;&#xA;&#x9;&#x9;&#x9;&#x9; 'Missing owner individual id type'&#xD;&#xA;&#x9;&#x9;FROM   [&quot;+ context.intermediateDB + &quot;].[dbo].VW_import_patent_owners T &#xD;&#xA;&#x9;&#x9; JOIN  [&quot;+ context.intermediateDB + &quot;].[dbo].VW_import_patent M ON T.file_seq  = M.file_seq&#xD;&#xA;&#x9;&#x9;&#x9; AND&#x9;T.file_type  = M.file_type&#xD;&#xA;&#x9;&#x9;&#x9; AND&#x9;T.file_series  = M.file_series&#xD;&#xA;&#x9;&#x9;&#x9; AND&#x9;T.file_nbr  = M.file_nbr  &#xD;&#xA;&#x9;&#x9;WHERE&#x9; ind_import  = 0&#xD;&#xA;&#x9;&#x9; AND&#x9;INDIVIDUAL_ID_TYPE  is null&#xD;&#xA;&#x9;&#x9; AND&#x9;INDIVIDUAL_ID_NBR  is not null&#xD;&#xA;&#x9;&#x9;&#xD;&#xA;&#x9;&#x9;/* RESIDENCE_COUNTRY_CODE: if not exists in CF_GEO_COUNTRY, message ?Invalid owner residence country code? */&#xD;&#xA;&#x9;&#x9;INSERT INTO   [&quot;+ context.intermediateDB + &quot;].[dbo].VW_IMPORT_PATENT_RESULT   &#xD;&#xA;&#x9;&#x9;&#x9;&#x9;( file_seq , &#xD;&#xA;&#x9;&#x9;&#x9;&#x9;file_type , &#xD;&#xA;&#x9;&#x9;&#x9;&#x9;file_series , &#xD;&#xA;&#x9;&#x9;&#x9;&#x9;file_nbr , &#xD;&#xA;&#x9;&#x9;&#x9;&#x9;ind_import , &#xD;&#xA;&#x9;&#x9;&#x9;&#x9;msg_import )  &#xD;&#xA;&#x9;&#x9;SELECT&#xD;&#xA;&#x9;&#x9;&#x9;&#x9; T.file_seq,&#xD;&#xA;&#x9;&#x9;&#x9;&#x9; T.file_type,&#xD;&#xA;&#x9;&#x9;&#x9;&#x9; T.file_series,&#xD;&#xA;&#x9;&#x9;&#x9;&#x9; T.file_nbr,&#xD;&#xA;&#x9;&#x9;&#x9;&#x9; 2,&#xD;&#xA;&#x9;&#x9;&#x9;&#x9; 'Invalid owner residence country code'&#xD;&#xA;&#x9;&#x9;FROM   [&quot;+ context.intermediateDB + &quot;].[dbo].VW_import_patent_owners T &#xD;&#xA;&#x9;&#x9; JOIN  [&quot;+ context.intermediateDB + &quot;].[dbo].VW_import_patent M ON T.file_seq  = M.file_seq&#xD;&#xA;&#x9;&#x9;&#x9; AND&#x9;T.file_type  = M.file_type&#xD;&#xA;&#x9;&#x9;&#x9; AND&#x9;T.file_series  = M.file_series&#xD;&#xA;&#x9;&#x9;&#x9; AND&#x9;T.file_nbr  = M.file_nbr  &#xD;&#xA;&#x9;&#x9;WHERE&#x9; ind_import  = 0&#xD;&#xA;&#x9;&#x9; AND&#x9;RESIDENCE_COUNTRY_CODE  COLLATE DATABASE_DEFAULT not in&#xD;&#xA;&#x9;&#x9;&#x9;(&#xD;&#xA;&#x9;&#x9; &#x9;SELECT COUNTRY_CODE&#xD;&#xA;&#x9;&#x9;&#x9;FROM  cf_geo_country &#xD;&#xA;&#x9;&#x9;&#x9;)&#xD;&#xA;&#x9;&#x9;&#xD;&#xA;&#x9;&#x9;/* STATE_CODE: if not null and not exists RESIDENCE_COUNTRY_CODE / STATE_CODE in CF_GEO_STATE, &#xD;&#xA;&#x9;&#x9;       message ?Invalid owner residence state code? */&#xD;&#xA;&#x9;&#x9;INSERT INTO   [&quot;+ context.intermediateDB + &quot;].[dbo].VW_IMPORT_PATENT_RESULT   &#xD;&#xA;&#x9;&#x9;&#x9;&#x9;( file_seq , &#xD;&#xA;&#x9;&#x9;&#x9;&#x9;file_type , &#xD;&#xA;&#x9;&#x9;&#x9;&#x9;file_series , &#xD;&#xA;&#x9;&#x9;&#x9;&#x9;file_nbr , &#xD;&#xA;&#x9;&#x9;&#x9;&#x9;ind_import , &#xD;&#xA;&#x9;&#x9;&#x9;&#x9;msg_import )  &#xD;&#xA;&#x9;&#x9;SELECT&#xD;&#xA;&#x9;&#x9;&#x9;&#x9; T.file_seq,&#xD;&#xA;&#x9;&#x9;&#x9;&#x9; T.file_type,&#xD;&#xA;&#x9;&#x9;&#x9;&#x9; T.file_series,&#xD;&#xA;&#x9;&#x9;&#x9;&#x9; T.file_nbr,&#xD;&#xA;&#x9;&#x9;&#x9;&#x9; 2,&#xD;&#xA;&#x9;&#x9;&#x9;&#x9; 'Invalid owner residence state code'&#xD;&#xA;&#x9;&#x9;FROM   [&quot;+ context.intermediateDB + &quot;].[dbo].VW_import_patent_owners T &#xD;&#xA;&#x9;&#x9; JOIN  [&quot;+ context.intermediateDB + &quot;].[dbo].VW_import_patent M ON T.file_seq  = M.file_seq&#xD;&#xA;&#x9;&#x9;&#x9; AND&#x9;T.file_type  = M.file_type&#xD;&#xA;&#x9;&#x9;&#x9; AND&#x9;T.file_series  = M.file_series&#xD;&#xA;&#x9;&#x9;&#x9; AND&#x9;T.file_nbr  = M.file_nbr  &#xD;&#xA;&#x9;&#x9;WHERE&#x9; ind_import  = 0&#xD;&#xA;&#x9;&#x9; AND&#x9;STATE_CODE  is not null&#xD;&#xA;&#x9;&#x9; AND&#x9; NOT EXISTS&#xD;&#xA;&#x9;&#x9;&#x9;(&#xD;&#xA;&#x9;&#x9; &#x9;SELECT&#xD;&#xA;&#x9;&#x9;&#x9;&#x9;&#x9; cf_geo_state.COUNTRY_CODE,&#xD;&#xA;&#x9;&#x9;&#x9;&#x9;&#x9; cf_geo_state.STATE_CODE&#xD;&#xA;&#x9;&#x9;&#x9;FROM  cf_geo_state &#xD;&#xA;&#x9;&#x9;&#x9;WHERE&#x9; cf_geo_state.COUNTRY_CODE  = T.RESIDENCE_COUNTRY_CODE&#x9;&#x9;COLLATE DATABASE_DEFAULT &#xD;&#xA;&#x9;&#x9;&#x9; AND&#x9;cf_geo_state.STATE_CODE&#x9;&#x9;= T.STATE_CODE&#x9;&#x9;&#x9;&#x9;&#x9;COLLATE DATABASE_DEFAULT &#xD;&#xA;&#x9;&#x9;&#x9;)&#xD;&#xA;&#x9;&#x9;&#xD;&#xA;&#x9;&#x9;/* If STATE_CODE Is null and exist any CF_GEO_STATE with the RESIDENCE_COUNTRY_CODE, &#xD;&#xA;&#x9;&#x9;       message ?A state code is required for the specified owner residence country? */&#xD;&#xA;&#x9;&#x9;INSERT INTO   [&quot;+ context.intermediateDB + &quot;].[dbo].VW_IMPORT_PATENT_RESULT   &#xD;&#xA;&#x9;&#x9;&#x9;&#x9;( file_seq , &#xD;&#xA;&#x9;&#x9;&#x9;&#x9;file_type , &#xD;&#xA;&#x9;&#x9;&#x9;&#x9;file_series , &#xD;&#xA;&#x9;&#x9;&#x9;&#x9;file_nbr , &#xD;&#xA;&#x9;&#x9;&#x9;&#x9;ind_import , &#xD;&#xA;&#x9;&#x9;&#x9;&#x9;msg_import )  &#xD;&#xA;&#x9;&#x9;SELECT&#xD;&#xA;&#x9;&#x9;&#x9;&#x9; T.file_seq,&#xD;&#xA;&#x9;&#x9;&#x9;&#x9; T.file_type,&#xD;&#xA;&#x9;&#x9;&#x9;&#x9; T.file_series,&#xD;&#xA;&#x9;&#x9;&#x9;&#x9; T.file_nbr,&#xD;&#xA;&#x9;&#x9;&#x9;&#x9; 2,&#xD;&#xA;&#x9;&#x9;&#x9;&#x9; 'A state code is required for the specified owner residence country'&#xD;&#xA;&#x9;&#x9;FROM   [&quot;+ context.intermediateDB + &quot;].[dbo].VW_import_patent_owners T &#xD;&#xA;&#x9;&#x9; JOIN  [&quot;+ context.intermediateDB + &quot;].[dbo].VW_import_patent M ON T.file_seq  = M.file_seq&#xD;&#xA;&#x9;&#x9;&#x9; AND&#x9;T.file_type  = M.file_type&#xD;&#xA;&#x9;&#x9;&#x9; AND&#x9;T.file_series  = M.file_series&#xD;&#xA;&#x9;&#x9;&#x9; AND&#x9;T.file_nbr  = M.file_nbr  &#xD;&#xA;&#x9;&#x9;WHERE&#x9; ind_import  = 0&#xD;&#xA;&#x9;&#x9; AND&#x9;STATE_CODE  is null&#xD;&#xA;&#x9;&#x9; AND&#x9;RESIDENCE_COUNTRY_CODE  COLLATE DATABASE_DEFAULT in&#xD;&#xA;&#x9;&#x9;&#x9;(&#xD;&#xA;&#x9;&#x9; &#x9;SELECT country_code&#xD;&#xA;&#x9;&#x9;&#x9;FROM  cf_geo_state S &#xD;&#xA;&#x9;&#x9;&#x9;)&#xD;&#xA;&#x9;&#x9;&#xD;&#xA;&#x9;&#x9;/* If PERSON_GROUP_CODE is not null and not exists in IP_PERSON_GROUP, message ?Invalid owner person group code? */&#xD;&#xA;&#x9;&#x9;INSERT INTO   [&quot;+ context.intermediateDB + &quot;].[dbo].VW_IMPORT_PATENT_RESULT   &#xD;&#xA;&#x9;&#x9;&#x9;&#x9;( file_seq , &#xD;&#xA;&#x9;&#x9;&#x9;&#x9;file_type , &#xD;&#xA;&#x9;&#x9;&#x9;&#x9;file_series , &#xD;&#xA;&#x9;&#x9;&#x9;&#x9;file_nbr , &#xD;&#xA;&#x9;&#x9;&#x9;&#x9;ind_import , &#xD;&#xA;&#x9;&#x9;&#x9;&#x9;msg_import )  &#xD;&#xA;&#x9;&#x9;SELECT&#xD;&#xA;&#x9;&#x9;&#x9;&#x9; T.file_seq,&#xD;&#xA;&#x9;&#x9;&#x9;&#x9; T.file_type,&#xD;&#xA;&#x9;&#x9;&#x9;&#x9; T.file_series,&#xD;&#xA;&#x9;&#x9;&#x9;&#x9; T.file_nbr,&#xD;&#xA;&#x9;&#x9;&#x9;&#x9; 2,&#xD;&#xA;&#x9;&#x9;&#x9;&#x9; 'Invalid owner person group code'&#xD;&#xA;&#x9;&#x9;FROM   [&quot;+ context.intermediateDB + &quot;].[dbo].VW_import_patent_owners T &#xD;&#xA;&#x9;&#x9; JOIN  [&quot;+ context.intermediateDB + &quot;].[dbo].VW_import_patent M ON T.file_seq  = M.file_seq&#xD;&#xA;&#x9;&#x9;&#x9; AND&#x9;T.file_type  = M.file_type&#xD;&#xA;&#x9;&#x9;&#x9; AND&#x9;T.file_series  = M.file_series&#xD;&#xA;&#x9;&#x9;&#x9; AND&#x9;T.file_nbr  = M.file_nbr  &#xD;&#xA;&#x9;&#x9;WHERE&#x9; ind_import  = 0&#xD;&#xA;&#x9;&#x9; AND&#x9;PERSON_GROUP_CODE  is not null&#xD;&#xA;&#x9;&#x9; AND&#x9;PERSON_GROUP_CODE  COLLATE DATABASE_DEFAULT not in&#xD;&#xA;&#x9;&#x9;&#x9;(&#xD;&#xA;&#x9;&#x9; &#x9;SELECT PERSON_GROUP_NBR&#xD;&#xA;&#x9;&#x9;&#x9;FROM  IP_PERSON_GROUP &#xD;&#xA;&#x9;&#x9;&#x9;)&#xD;&#xA;&#x9;&#x9;&#xD;&#xA;&#x9;&#x9;/* 1.1.2A  [&quot;+ context.intermediateDB + &quot;].[dbo].VW_IMPORT_PATENT_INVENTORS validations */&#xD;&#xA;&#xD;&#xA;&#x9;&#x9;/* AUTHOR_SEQ: if > 99, message ?Inventor sequence nbr cannot be greater than 99? */&#xD;&#xA;&#x9;&#x9;INSERT INTO   [&quot;+ context.intermediateDB + &quot;].[dbo].VW_IMPORT_PATENT_RESULT   &#xD;&#xA;&#x9;&#x9;&#x9;&#x9;( file_seq , &#xD;&#xA;&#x9;&#x9;&#x9;&#x9;file_type , &#xD;&#xA;&#x9;&#x9;&#x9;&#x9;file_series , &#xD;&#xA;&#x9;&#x9;&#x9;&#x9;file_nbr , &#xD;&#xA;&#x9;&#x9;&#x9;&#x9;ind_import , &#xD;&#xA;&#x9;&#x9;&#x9;&#x9;msg_import )  &#xD;&#xA;&#x9;&#x9;SELECT&#xD;&#xA;&#x9;&#x9;&#x9;&#x9; T.file_seq,&#xD;&#xA;&#x9;&#x9;&#x9;&#x9; T.file_type,&#xD;&#xA;&#x9;&#x9;&#x9;&#x9; T.file_series,&#xD;&#xA;&#x9;&#x9;&#x9;&#x9; T.file_nbr,&#xD;&#xA;&#x9;&#x9;&#x9;&#x9; 2,&#xD;&#xA;&#x9;&#x9;&#x9;&#x9; 'Inventor sequence nbr cannot be greater than 99'&#xD;&#xA;&#x9;&#x9;FROM   [&quot;+ context.intermediateDB + &quot;].[dbo].VW_import_patent_inventors T &#xD;&#xA;&#x9;&#x9; JOIN  [&quot;+ context.intermediateDB + &quot;].[dbo].VW_import_patent M ON T.file_seq  = M.file_seq&#xD;&#xA;&#x9;&#x9;&#x9; AND&#x9;T.file_type  = M.file_type&#xD;&#xA;&#x9;&#x9;&#x9; AND&#x9;T.file_series  = M.file_series&#xD;&#xA;&#x9;&#x9;&#x9; AND&#x9;T.file_nbr  = M.file_nbr  &#xD;&#xA;&#x9;&#x9;WHERE&#x9; ind_import  = 0&#xD;&#xA;&#x9;&#x9; AND&#x9;AUTHOR_SEQ > 99&#xD;&#xA;&#x9;&#x9;&#x9;&#x9;&#xD;&#xA;&#x9;&#x9;/* 1.1.2A.2 Person validations */&#xD;&#xA;&#x9;&#x9;/* NATIONALITY_COUNTRY_CODE: if not exists in CF_GEO_COUNTRY, message ?Invalid inventor nationality country code? */&#xD;&#xA;&#x9;&#x9;INSERT INTO   [&quot;+ context.intermediateDB + &quot;].[dbo].VW_IMPORT_PATENT_RESULT   &#xD;&#xA;&#x9;&#x9;&#x9;&#x9;( file_seq , &#xD;&#xA;&#x9;&#x9;&#x9;&#x9;file_type , &#xD;&#xA;&#x9;&#x9;&#x9;&#x9;file_series , &#xD;&#xA;&#x9;&#x9;&#x9;&#x9;file_nbr , &#xD;&#xA;&#x9;&#x9;&#x9;&#x9;ind_import , &#xD;&#xA;&#x9;&#x9;&#x9;&#x9;msg_import )  &#xD;&#xA;&#x9;&#x9;SELECT&#xD;&#xA;&#x9;&#x9;&#x9;&#x9; T.file_seq,&#xD;&#xA;&#x9;&#x9;&#x9;&#x9; T.file_type,&#xD;&#xA;&#x9;&#x9;&#x9;&#x9; T.file_series,&#xD;&#xA;&#x9;&#x9;&#x9;&#x9; T.file_nbr,&#xD;&#xA;&#x9;&#x9;&#x9;&#x9; 2,&#xD;&#xA;&#x9;&#x9;&#x9;&#x9; 'Invalid inventor nationality country code'&#xD;&#xA;&#x9;&#x9;FROM   [&quot;+ context.intermediateDB + &quot;].[dbo].VW_import_patent_inventors T &#xD;&#xA;&#x9;&#x9; JOIN  [&quot;+ context.intermediateDB + &quot;].[dbo].VW_import_patent M ON T.file_seq  = M.file_seq&#xD;&#xA;&#x9;&#x9;&#x9; AND&#x9;T.file_type  = M.file_type&#xD;&#xA;&#x9;&#x9;&#x9; AND&#x9;T.file_series  = M.file_series&#xD;&#xA;&#x9;&#x9;&#x9; AND&#x9;T.file_nbr  = M.file_nbr  &#xD;&#xA;&#x9;&#x9;WHERE&#x9; ind_import  = 0&#xD;&#xA;&#x9;&#x9; AND&#x9;NATIONALITY_COUNTRY_CODE  COLLATE DATABASE_DEFAULT not in&#xD;&#xA;&#x9;&#x9;&#x9;(&#xD;&#xA;&#x9;&#x9; &#x9;SELECT COUNTRY_CODE&#xD;&#xA;&#x9;&#x9;&#x9;FROM  cf_geo_country &#xD;&#xA;&#x9;&#x9;&#x9;)&#xD;&#xA;&#x9;&#x9;&#xD;&#xA;&#x9;&#x9;/* IND_COMPANY and LEGAL_NATURE: if a legal person is specified and IND_COMPANY = 0, message ?Inventor must be a natural person, not a company? */&#xD;&#xA;&#x9;&#x9;INSERT INTO   [&quot;+ context.intermediateDB + &quot;].[dbo].VW_IMPORT_PATENT_RESULT   &#xD;&#xA;&#x9;&#x9;&#x9;&#x9;( file_seq , &#xD;&#xA;&#x9;&#x9;&#x9;&#x9;file_type , &#xD;&#xA;&#x9;&#x9;&#x9;&#x9;file_series , &#xD;&#xA;&#x9;&#x9;&#x9;&#x9;file_nbr , &#xD;&#xA;&#x9;&#x9;&#x9;&#x9;ind_import , &#xD;&#xA;&#x9;&#x9;&#x9;&#x9;msg_import )  &#xD;&#xA;&#x9;&#x9;SELECT&#xD;&#xA;&#x9;&#x9;&#x9;&#x9; T.file_seq,&#xD;&#xA;&#x9;&#x9;&#x9;&#x9; T.file_type,&#xD;&#xA;&#x9;&#x9;&#x9;&#x9; T.file_series,&#xD;&#xA;&#x9;&#x9;&#x9;&#x9; T.file_nbr,&#xD;&#xA;&#x9;&#x9;&#x9;&#x9; 2,&#xD;&#xA;&#x9;&#x9;&#x9;&#x9; 'Inventor must be a natural person, not a company'&#xD;&#xA;&#x9;&#x9;FROM   [&quot;+ context.intermediateDB + &quot;].[dbo].VW_import_patent_inventors T &#xD;&#xA;&#x9;&#x9; JOIN  [&quot;+ context.intermediateDB + &quot;].[dbo].VW_import_patent M ON T.file_seq  = M.file_seq&#xD;&#xA;&#x9;&#x9;&#x9; AND&#x9;T.file_type  = M.file_type&#xD;&#xA;&#x9;&#x9;&#x9; AND&#x9;T.file_series  = M.file_series&#xD;&#xA;&#x9;&#x9;&#x9; AND&#x9;T.file_nbr  = M.file_nbr  &#xD;&#xA;&#x9;&#x9;WHERE&#x9; ind_import  = 0&#xD;&#xA;&#x9;&#x9; AND&#x9;(LEGAL_NATURE  is not null&#xD;&#xA;&#x9;&#x9; OR&#x9;IND_COMPANY  = 1)&#xD;&#xA;&#x9;&#x9;&#xD;&#xA;&#x9;&#x9;/* LEGAL_ID_TYPE: if not null and not exists if CF_PERSON_ID_TYPE with IND_GENERAL_ID = ?S?, &#xD;&#xA;&#x9;&#x9;       message ?Invalid inventor legal id type? */&#xD;&#xA;&#x9;&#x9;INSERT INTO   [&quot;+ context.intermediateDB + &quot;].[dbo].VW_IMPORT_PATENT_RESULT   &#xD;&#xA;&#x9;&#x9;&#x9;&#x9;( file_seq , &#xD;&#xA;&#x9;&#x9;&#x9;&#x9;file_type , &#xD;&#xA;&#x9;&#x9;&#x9;&#x9;file_series , &#xD;&#xA;&#x9;&#x9;&#x9;&#x9;file_nbr , &#xD;&#xA;&#x9;&#x9;&#x9;&#x9;ind_import , &#xD;&#xA;&#x9;&#x9;&#x9;&#x9;msg_import )  &#xD;&#xA;&#x9;&#x9;SELECT&#xD;&#xA;&#x9;&#x9;&#x9;&#x9; T.file_seq,&#xD;&#xA;&#x9;&#x9;&#x9;&#x9; T.file_type,&#xD;&#xA;&#x9;&#x9;&#x9;&#x9; T.file_series,&#xD;&#xA;&#x9;&#x9;&#x9;&#x9; T.file_nbr,&#xD;&#xA;&#x9;&#x9;&#x9;&#x9; 2,&#xD;&#xA;&#x9;&#x9;&#x9;&#x9; 'Invalid inventor legal id type'&#xD;&#xA;&#x9;&#x9;FROM   [&quot;+ context.intermediateDB + &quot;].[dbo].VW_import_patent_inventors T &#xD;&#xA;&#x9;&#x9; JOIN  [&quot;+ context.intermediateDB + &quot;].[dbo].VW_import_patent M ON T.file_seq  = M.file_seq&#xD;&#xA;&#x9;&#x9;&#x9; AND&#x9;T.file_type  = M.file_type&#xD;&#xA;&#x9;&#x9;&#x9; AND&#x9;T.file_series  = M.file_series&#xD;&#xA;&#x9;&#x9;&#x9; AND&#x9;T.file_nbr  = M.file_nbr  &#xD;&#xA;&#x9;&#x9;WHERE&#x9; ind_import  = 0&#xD;&#xA;&#x9;&#x9; AND&#x9;LEGAL_ID_TYPE  is not null&#xD;&#xA;&#x9;&#x9; AND&#x9;LEGAL_ID_TYPE  COLLATE DATABASE_DEFAULT not in&#xD;&#xA;&#x9;&#x9;&#x9;(&#xD;&#xA;&#x9;&#x9; &#x9;SELECT PERSON_ID_TYP&#xD;&#xA;&#x9;&#x9;&#x9;FROM  CF_PERSON_ID_TYPE &#xD;&#xA;&#x9;&#x9;&#x9;WHERE&#x9; IND_GENERAL_ID  = 'S'&#xD;&#xA;&#x9;&#x9;&#x9;)&#xD;&#xA;&#x9;&#x9;&#xD;&#xA;&#x9;&#x9;/* INDIVIDUAL_ID_TYPE: if not null and not exists if CF_PERSON_ID_TYPE with IND_INDIVIDUAL_ID = ?S?, &#xD;&#xA;&#x9;&#x9;       message ?Invalid inventor individual id type? */&#xD;&#xA;&#x9;&#x9;INSERT INTO   [&quot;+ context.intermediateDB + &quot;].[dbo].VW_IMPORT_PATENT_RESULT   &#xD;&#xA;&#x9;&#x9;&#x9;&#x9;( file_seq , &#xD;&#xA;&#x9;&#x9;&#x9;&#x9;file_type , &#xD;&#xA;&#x9;&#x9;&#x9;&#x9;file_series , &#xD;&#xA;&#x9;&#x9;&#x9;&#x9;file_nbr , &#xD;&#xA;&#x9;&#x9;&#x9;&#x9;ind_import , &#xD;&#xA;&#x9;&#x9;&#x9;&#x9;msg_import )  &#xD;&#xA;&#x9;&#x9;SELECT&#xD;&#xA;&#x9;&#x9;&#x9;&#x9; T.file_seq,&#xD;&#xA;&#x9;&#x9;&#x9;&#x9; T.file_type,&#xD;&#xA;&#x9;&#x9;&#x9;&#x9; T.file_series,&#xD;&#xA;&#x9;&#x9;&#x9;&#x9; T.file_nbr,&#xD;&#xA;&#x9;&#x9;&#x9;&#x9; 2,&#xD;&#xA;&#x9;&#x9;&#x9;&#x9; 'Invalid inventor individual id type'&#xD;&#xA;&#x9;&#x9;FROM   [&quot;+ context.intermediateDB + &quot;].[dbo].VW_import_patent_inventors T &#xD;&#xA;&#x9;&#x9; JOIN  [&quot;+ context.intermediateDB + &quot;].[dbo].VW_import_patent M ON T.file_seq  = M.file_seq&#xD;&#xA;&#x9;&#x9;&#x9; AND&#x9;T.file_type  = M.file_type&#xD;&#xA;&#x9;&#x9;&#x9; AND&#x9;T.file_series  = M.file_series&#xD;&#xA;&#x9;&#x9;&#x9; AND&#x9;T.file_nbr  = M.file_nbr  &#xD;&#xA;&#x9;&#x9;WHERE&#x9; ind_import  = 0&#xD;&#xA;&#x9;&#x9; AND&#x9;INDIVIDUAL_ID_TYPE  is not null&#xD;&#xA;&#x9;&#x9; AND&#x9;INDIVIDUAL_ID_TYPE  COLLATE DATABASE_DEFAULT not in&#xD;&#xA;&#x9;&#x9;&#x9;(&#xD;&#xA;&#x9;&#x9; &#x9;SELECT PERSON_ID_TYP&#xD;&#xA;&#x9;&#x9;&#x9;FROM  CF_PERSON_ID_TYPE &#xD;&#xA;&#x9;&#x9;&#x9;WHERE&#x9; IND_INDIVIDUAL_ID  = 'S'&#xD;&#xA;&#x9;&#x9;&#x9;)&#xD;&#xA;&#x9;&#x9;&#xD;&#xA;&#x9;&#x9;/* If LEGAL_ID_TYPE is not null and LEGAL_ID_NBR is null, message ?Missing inventor legal id number? */&#xD;&#xA;&#x9;&#x9;INSERT INTO   [&quot;+ context.intermediateDB + &quot;].[dbo].VW_IMPORT_PATENT_RESULT   &#xD;&#xA;&#x9;&#x9;&#x9;&#x9;( file_seq , &#xD;&#xA;&#x9;&#x9;&#x9;&#x9;file_type , &#xD;&#xA;&#x9;&#x9;&#x9;&#x9;file_series , &#xD;&#xA;&#x9;&#x9;&#x9;&#x9;file_nbr , &#xD;&#xA;&#x9;&#x9;&#x9;&#x9;ind_import , &#xD;&#xA;&#x9;&#x9;&#x9;&#x9;msg_import )  &#xD;&#xA;&#x9;&#x9;SELECT&#xD;&#xA;&#x9;&#x9;&#x9;&#x9; T.file_seq,&#xD;&#xA;&#x9;&#x9;&#x9;&#x9; T.file_type,&#xD;&#xA;&#x9;&#x9;&#x9;&#x9; T.file_series,&#xD;&#xA;&#x9;&#x9;&#x9;&#x9; T.file_nbr,&#xD;&#xA;&#x9;&#x9;&#x9;&#x9; 2,&#xD;&#xA;&#x9;&#x9;&#x9;&#x9; 'Missing inventor legal id number'&#xD;&#xA;&#x9;&#x9;FROM   [&quot;+ context.intermediateDB + &quot;].[dbo].VW_import_patent_inventors T &#xD;&#xA;&#x9;&#x9; JOIN  [&quot;+ context.intermediateDB + &quot;].[dbo].VW_import_patent M ON T.file_seq  = M.file_seq&#xD;&#xA;&#x9;&#x9;&#x9; AND&#x9;T.file_type  = M.file_type&#xD;&#xA;&#x9;&#x9;&#x9; AND&#x9;T.file_series  = M.file_series&#xD;&#xA;&#x9;&#x9;&#x9; AND&#x9;T.file_nbr  = M.file_nbr  &#xD;&#xA;&#x9;&#x9;WHERE&#x9; ind_import  = 0&#xD;&#xA;&#x9;&#x9; AND&#x9;LEGAL_ID_TYPE  is not null&#xD;&#xA;&#x9;&#x9; AND&#x9;LEGAL_ID_NBR  is null&#xD;&#xA;&#x9;&#x9;&#xD;&#xA;&#x9;&#x9;/* If LEGAL_ID_TYPE is null and LEGAL_ID_NBR is not null, message ?Missing inventor legal id type? */&#xD;&#xA;&#x9;&#x9;INSERT INTO   [&quot;+ context.intermediateDB + &quot;].[dbo].VW_IMPORT_PATENT_RESULT   &#xD;&#xA;&#x9;&#x9;&#x9;&#x9;( file_seq , &#xD;&#xA;&#x9;&#x9;&#x9;&#x9;file_type , &#xD;&#xA;&#x9;&#x9;&#x9;&#x9;file_series , &#xD;&#xA;&#x9;&#x9;&#x9;&#x9;file_nbr , &#xD;&#xA;&#x9;&#x9;&#x9;&#x9;ind_import , &#xD;&#xA;&#x9;&#x9;&#x9;&#x9;msg_import )  &#xD;&#xA;&#x9;&#x9;SELECT&#xD;&#xA;&#x9;&#x9;&#x9;&#x9; T.file_seq,&#xD;&#xA;&#x9;&#x9;&#x9;&#x9; T.file_type,&#xD;&#xA;&#x9;&#x9;&#x9;&#x9; T.file_series,&#xD;&#xA;&#x9;&#x9;&#x9;&#x9; T.file_nbr,&#xD;&#xA;&#x9;&#x9;&#x9;&#x9; 2,&#xD;&#xA;&#x9;&#x9;&#x9;&#x9; 'Missing inventor legal id type'&#xD;&#xA;&#x9;&#x9;FROM   [&quot;+ context.intermediateDB + &quot;].[dbo].VW_import_patent_inventors T &#xD;&#xA;&#x9;&#x9; JOIN  [&quot;+ context.intermediateDB + &quot;].[dbo].VW_import_patent M ON T.file_seq  = M.file_seq&#xD;&#xA;&#x9;&#x9;&#x9; AND&#x9;T.file_type  = M.file_type&#xD;&#xA;&#x9;&#x9;&#x9; AND&#x9;T.file_series  = M.file_series&#xD;&#xA;&#x9;&#x9;&#x9; AND&#x9;T.file_nbr  = M.file_nbr  &#xD;&#xA;&#x9;&#x9;WHERE&#x9; ind_import  = 0&#xD;&#xA;&#x9;&#x9; AND&#x9;LEGAL_ID_TYPE  is null&#xD;&#xA;&#x9;&#x9; AND&#x9;LEGAL_ID_NBR  is not null&#xD;&#xA;&#x9;&#x9;&#xD;&#xA;&#x9;&#x9;/* If INDIVIDUAL_ID_TYPE is not null and INDIVIDUAL_ID_NBR is null, message ?Missing inventor individual id number? */&#xD;&#xA;&#x9;&#x9;INSERT INTO   [&quot;+ context.intermediateDB + &quot;].[dbo].VW_IMPORT_PATENT_RESULT   &#xD;&#xA;&#x9;&#x9;&#x9;&#x9;( file_seq , &#xD;&#xA;&#x9;&#x9;&#x9;&#x9;file_type , &#xD;&#xA;&#x9;&#x9;&#x9;&#x9;file_series , &#xD;&#xA;&#x9;&#x9;&#x9;&#x9;file_nbr , &#xD;&#xA;&#x9;&#x9;&#x9;&#x9;ind_import , &#xD;&#xA;&#x9;&#x9;&#x9;&#x9;msg_import )  &#xD;&#xA;&#x9;&#x9;SELECT&#xD;&#xA;&#x9;&#x9;&#x9;&#x9; T.file_seq,&#xD;&#xA;&#x9;&#x9;&#x9;&#x9; T.file_type,&#xD;&#xA;&#x9;&#x9;&#x9;&#x9; T.file_series,&#xD;&#xA;&#x9;&#x9;&#x9;&#x9; T.file_nbr,&#xD;&#xA;&#x9;&#x9;&#x9;&#x9; 2,&#xD;&#xA;&#x9;&#x9;&#x9;&#x9; 'Missing inventor individual id number'&#xD;&#xA;&#x9;&#x9;FROM   [&quot;+ context.intermediateDB + &quot;].[dbo].VW_import_patent_inventors T &#xD;&#xA;&#x9;&#x9; JOIN  [&quot;+ context.intermediateDB + &quot;].[dbo].VW_import_patent M ON T.file_seq  = M.file_seq&#xD;&#xA;&#x9;&#x9;&#x9; AND&#x9;T.file_type  = M.file_type&#xD;&#xA;&#x9;&#x9;&#x9; AND&#x9;T.file_series  = M.file_series&#xD;&#xA;&#x9;&#x9;&#x9; AND&#x9;T.file_nbr  = M.file_nbr  &#xD;&#xA;&#x9;&#x9;WHERE&#x9; ind_import  = 0&#xD;&#xA;&#x9;&#x9; AND&#x9;INDIVIDUAL_ID_TYPE  is not null&#xD;&#xA;&#x9;&#x9; AND&#x9;INDIVIDUAL_ID_NBR  is null&#xD;&#xA;&#x9;&#x9;&#xD;&#xA;&#x9;&#x9;/* If INDIVIDUAL_ID_TYPE is null and INDIVIDUAL_ID_NBR is not null, message ?Missing inventor individual id type? */&#xD;&#xA;&#x9;&#x9;INSERT INTO   [&quot;+ context.intermediateDB + &quot;].[dbo].VW_IMPORT_PATENT_RESULT   &#xD;&#xA;&#x9;&#x9;&#x9;&#x9;( file_seq , &#xD;&#xA;&#x9;&#x9;&#x9;&#x9;file_type , &#xD;&#xA;&#x9;&#x9;&#x9;&#x9;file_series , &#xD;&#xA;&#x9;&#x9;&#x9;&#x9;file_nbr , &#xD;&#xA;&#x9;&#x9;&#x9;&#x9;ind_import , &#xD;&#xA;&#x9;&#x9;&#x9;&#x9;msg_import )  &#xD;&#xA;&#x9;&#x9;SELECT&#xD;&#xA;&#x9;&#x9;&#x9;&#x9; T.file_seq,&#xD;&#xA;&#x9;&#x9;&#x9;&#x9; T.file_type,&#xD;&#xA;&#x9;&#x9;&#x9;&#x9; T.file_series,&#xD;&#xA;&#x9;&#x9;&#x9;&#x9; T.file_nbr,&#xD;&#xA;&#x9;&#x9;&#x9;&#x9; 2,&#xD;&#xA;&#x9;&#x9;&#x9;&#x9; 'Missing inventor individual id type'&#xD;&#xA;&#x9;&#x9;FROM   [&quot;+ context.intermediateDB + &quot;].[dbo].VW_import_patent_inventors T &#xD;&#xA;&#x9;&#x9; JOIN  [&quot;+ context.intermediateDB + &quot;].[dbo].VW_import_patent M ON T.file_seq  = M.file_seq&#xD;&#xA;&#x9;&#x9;&#x9; AND&#x9;T.file_type  = M.file_type&#xD;&#xA;&#x9;&#x9;&#x9; AND&#x9;T.file_series  = M.file_series&#xD;&#xA;&#x9;&#x9;&#x9; AND&#x9;T.file_nbr  = M.file_nbr  &#xD;&#xA;&#x9;&#x9;WHERE&#x9; ind_import  = 0&#xD;&#xA;&#x9;&#x9; AND&#x9;INDIVIDUAL_ID_TYPE  is null&#xD;&#xA;&#x9;&#x9; AND&#x9;INDIVIDUAL_ID_NBR  is not null&#xD;&#xA;&#x9;&#x9;&#xD;&#xA;&#x9;&#x9;/* RESIDENCE_COUNTRY_CODE: if not exists in CF_GEO_COUNTRY, message ?Invalid inventor residence country code? */&#xD;&#xA;&#x9;&#x9;INSERT INTO   [&quot;+ context.intermediateDB + &quot;].[dbo].VW_IMPORT_PATENT_RESULT   &#xD;&#xA;&#x9;&#x9;&#x9;&#x9;( file_seq , &#xD;&#xA;&#x9;&#x9;&#x9;&#x9;file_type , &#xD;&#xA;&#x9;&#x9;&#x9;&#x9;file_series , &#xD;&#xA;&#x9;&#x9;&#x9;&#x9;file_nbr , &#xD;&#xA;&#x9;&#x9;&#x9;&#x9;ind_import , &#xD;&#xA;&#x9;&#x9;&#x9;&#x9;msg_import )  &#xD;&#xA;&#x9;&#x9;SELECT&#xD;&#xA;&#x9;&#x9;&#x9;&#x9; T.file_seq,&#xD;&#xA;&#x9;&#x9;&#x9;&#x9; T.file_type,&#xD;&#xA;&#x9;&#x9;&#x9;&#x9; T.file_series,&#xD;&#xA;&#x9;&#x9;&#x9;&#x9; T.file_nbr,&#xD;&#xA;&#x9;&#x9;&#x9;&#x9; 2,&#xD;&#xA;&#x9;&#x9;&#x9;&#x9; 'Invalid inventor residence country code'&#xD;&#xA;&#x9;&#x9;FROM   [&quot;+ context.intermediateDB + &quot;].[dbo].VW_import_patent_inventors T &#xD;&#xA;&#x9;&#x9; JOIN  [&quot;+ context.intermediateDB + &quot;].[dbo].VW_import_patent M ON T.file_seq  = M.file_seq&#xD;&#xA;&#x9;&#x9;&#x9; AND&#x9;T.file_type  = M.file_type&#xD;&#xA;&#x9;&#x9;&#x9; AND&#x9;T.file_series  = M.file_series&#xD;&#xA;&#x9;&#x9;&#x9; AND&#x9;T.file_nbr  = M.file_nbr  &#xD;&#xA;&#x9;&#x9;WHERE&#x9; ind_import  = 0&#xD;&#xA;&#x9;&#x9; AND&#x9;RESIDENCE_COUNTRY_CODE  COLLATE DATABASE_DEFAULT not in&#xD;&#xA;&#x9;&#x9;&#x9;(&#xD;&#xA;&#x9;&#x9; &#x9;SELECT COUNTRY_CODE&#xD;&#xA;&#x9;&#x9;&#x9;FROM  cf_geo_country &#xD;&#xA;&#x9;&#x9;&#x9;)&#xD;&#xA;&#x9;&#x9;&#xD;&#xA;&#x9;&#x9;/* STATE_CODE: if not null and not exists RESIDENCE_COUNTRY_CODE / STATE_CODE in CF_GEO_STATE, &#xD;&#xA;&#x9;&#x9;       message ?Invalid inventor residence state code? */&#xD;&#xA;&#x9;&#x9;INSERT INTO   [&quot;+ context.intermediateDB + &quot;].[dbo].VW_IMPORT_PATENT_RESULT   &#xD;&#xA;&#x9;&#x9;&#x9;&#x9;( file_seq , &#xD;&#xA;&#x9;&#x9;&#x9;&#x9;file_type , &#xD;&#xA;&#x9;&#x9;&#x9;&#x9;file_series , &#xD;&#xA;&#x9;&#x9;&#x9;&#x9;file_nbr , &#xD;&#xA;&#x9;&#x9;&#x9;&#x9;ind_import , &#xD;&#xA;&#x9;&#x9;&#x9;&#x9;msg_import )  &#xD;&#xA;&#x9;&#x9;SELECT&#xD;&#xA;&#x9;&#x9;&#x9;&#x9; T.file_seq,&#xD;&#xA;&#x9;&#x9;&#x9;&#x9; T.file_type,&#xD;&#xA;&#x9;&#x9;&#x9;&#x9; T.file_series,&#xD;&#xA;&#x9;&#x9;&#x9;&#x9; T.file_nbr,&#xD;&#xA;&#x9;&#x9;&#x9;&#x9; 2,&#xD;&#xA;&#x9;&#x9;&#x9;&#x9; 'Invalid inventor residence state code'&#xD;&#xA;&#x9;&#x9;FROM   [&quot;+ context.intermediateDB + &quot;].[dbo].VW_import_patent_inventors T &#xD;&#xA;&#x9;&#x9; JOIN  [&quot;+ context.intermediateDB + &quot;].[dbo].VW_import_patent M ON T.file_seq  = M.file_seq&#xD;&#xA;&#x9;&#x9;&#x9; AND&#x9;T.file_type  = M.file_type&#xD;&#xA;&#x9;&#x9;&#x9; AND&#x9;T.file_series  = M.file_series&#xD;&#xA;&#x9;&#x9;&#x9; AND&#x9;T.file_nbr  = M.file_nbr  &#xD;&#xA;&#x9;&#x9;WHERE&#x9; ind_import  = 0&#xD;&#xA;&#x9;&#x9; AND&#x9;STATE_CODE  is not null&#xD;&#xA;&#x9;&#x9; AND&#x9; NOT EXISTS&#xD;&#xA;&#x9;&#x9;&#x9;(&#xD;&#xA;&#x9;&#x9; &#x9;SELECT&#xD;&#xA;&#x9;&#x9;&#x9;&#x9;&#x9; cf_geo_state.COUNTRY_CODE,&#xD;&#xA;&#x9;&#x9;&#x9;&#x9;&#x9; cf_geo_state.STATE_CODE&#xD;&#xA;&#x9;&#x9;&#x9;FROM  cf_geo_state &#xD;&#xA;&#x9;&#x9;&#x9;WHERE&#x9; cf_geo_state.COUNTRY_CODE  = T.RESIDENCE_COUNTRY_CODE&#x9;COLLATE DATABASE_DEFAULT &#xD;&#xA;&#x9;&#x9;&#x9; AND&#x9;cf_geo_state.STATE_CODE&#x9;&#x9;= T.STATE_CODE&#x9;&#x9;&#x9;&#x9;COLLATE DATABASE_DEFAULT &#xD;&#xA;&#x9;&#x9;&#x9;)&#xD;&#xA;&#x9;&#x9;&#xD;&#xA;&#x9;&#x9;/* If STATE_CODE Is null and exist any CF_GEO_STATE with the RESIDENCE_COUNTRY_CODE, &#xD;&#xA;&#x9;&#x9;       message ?A state code is required for the specified inventor residence country? */&#xD;&#xA;&#x9;&#x9;INSERT INTO   [&quot;+ context.intermediateDB + &quot;].[dbo].VW_IMPORT_PATENT_RESULT   &#xD;&#xA;&#x9;&#x9;&#x9;&#x9;( file_seq , &#xD;&#xA;&#x9;&#x9;&#x9;&#x9;file_type , &#xD;&#xA;&#x9;&#x9;&#x9;&#x9;file_series , &#xD;&#xA;&#x9;&#x9;&#x9;&#x9;file_nbr , &#xD;&#xA;&#x9;&#x9;&#x9;&#x9;ind_import , &#xD;&#xA;&#x9;&#x9;&#x9;&#x9;msg_import )  &#xD;&#xA;&#x9;&#x9;SELECT&#xD;&#xA;&#x9;&#x9;&#x9;&#x9; T.file_seq,&#xD;&#xA;&#x9;&#x9;&#x9;&#x9; T.file_type,&#xD;&#xA;&#x9;&#x9;&#x9;&#x9; T.file_series,&#xD;&#xA;&#x9;&#x9;&#x9;&#x9; T.file_nbr,&#xD;&#xA;&#x9;&#x9;&#x9;&#x9; 2,&#xD;&#xA;&#x9;&#x9;&#x9;&#x9; 'A state code is required for the specified inventor residence country'&#xD;&#xA;&#x9;&#x9;FROM   [&quot;+ context.intermediateDB + &quot;].[dbo].VW_import_patent_inventors T &#xD;&#xA;&#x9;&#x9; JOIN  [&quot;+ context.intermediateDB + &quot;].[dbo].VW_import_patent M ON T.file_seq  = M.file_seq&#xD;&#xA;&#x9;&#x9;&#x9; AND&#x9;T.file_type  = M.file_type&#xD;&#xA;&#x9;&#x9;&#x9; AND&#x9;T.file_series  = M.file_series&#xD;&#xA;&#x9;&#x9;&#x9; AND&#x9;T.file_nbr  = M.file_nbr  &#xD;&#xA;&#x9;&#x9;WHERE&#x9; ind_import  = 0&#xD;&#xA;&#x9;&#x9; AND&#x9;STATE_CODE  is null&#xD;&#xA;&#x9;&#x9; AND&#x9;RESIDENCE_COUNTRY_CODE  COLLATE DATABASE_DEFAULT in&#xD;&#xA;&#x9;&#x9;&#x9;(&#xD;&#xA;&#x9;&#x9; &#x9;SELECT country_code&#xD;&#xA;&#x9;&#x9;&#x9;FROM  cf_geo_state S &#xD;&#xA;&#x9;&#x9;&#x9;)&#xD;&#xA;&#x9;&#x9;&#xD;&#xA;&#x9;&#x9;/* If PERSON_GROUP_CODE is not null and not exists in IP_PERSON_GROUP, message ?Invalid inventor person group code? */&#xD;&#xA;&#x9;&#x9;INSERT INTO   [&quot;+ context.intermediateDB + &quot;].[dbo].VW_IMPORT_PATENT_RESULT   &#xD;&#xA;&#x9;&#x9;&#x9;&#x9;( file_seq , &#xD;&#xA;&#x9;&#x9;&#x9;&#x9;file_type , &#xD;&#xA;&#x9;&#x9;&#x9;&#x9;file_series , &#xD;&#xA;&#x9;&#x9;&#x9;&#x9;file_nbr , &#xD;&#xA;&#x9;&#x9;&#x9;&#x9;ind_import , &#xD;&#xA;&#x9;&#x9;&#x9;&#x9;msg_import )  &#xD;&#xA;&#x9;&#x9;SELECT&#xD;&#xA;&#x9;&#x9;&#x9;&#x9; T.file_seq,&#xD;&#xA;&#x9;&#x9;&#x9;&#x9; T.file_type,&#xD;&#xA;&#x9;&#x9;&#x9;&#x9; T.file_series,&#xD;&#xA;&#x9;&#x9;&#x9;&#x9; T.file_nbr,&#xD;&#xA;&#x9;&#x9;&#x9;&#x9; 2,&#xD;&#xA;&#x9;&#x9;&#x9;&#x9; 'Invalid inventor person group code'&#xD;&#xA;&#x9;&#x9;FROM   [&quot;+ context.intermediateDB + &quot;].[dbo].VW_import_patent_inventors T &#xD;&#xA;&#x9;&#x9; JOIN  [&quot;+ context.intermediateDB + &quot;].[dbo].VW_import_patent M ON T.file_seq  = M.file_seq&#xD;&#xA;&#x9;&#x9;&#x9; AND&#x9;T.file_type  = M.file_type&#xD;&#xA;&#x9;&#x9;&#x9; AND&#x9;T.file_series  = M.file_series&#xD;&#xA;&#x9;&#x9;&#x9; AND&#x9;T.file_nbr  = M.file_nbr  &#xD;&#xA;&#x9;&#x9;WHERE&#x9; ind_import  = 0&#xD;&#xA;&#x9;&#x9; AND&#x9;PERSON_GROUP_CODE  is not null&#xD;&#xA;&#x9;&#x9; AND&#x9;PERSON_GROUP_CODE  COLLATE DATABASE_DEFAULT not in&#xD;&#xA;&#x9;&#x9;&#x9;(&#xD;&#xA;&#x9;&#x9; &#x9;SELECT PERSON_GROUP_NBR&#xD;&#xA;&#x9;&#x9;&#x9;FROM  IP_PERSON_GROUP &#xD;&#xA;&#x9;&#x9;&#x9;)&#xD;&#xA;&#x9;&#x9;&#xD;&#xA;&#x9;&#x9;/* 1.1.3  [&quot;+ context.intermediateDB + &quot;].[dbo].VW_IMPORT_PATENT_REPRS validations */&#xD;&#xA;&#x9;&#x9;/* 1.1.3.1 Representative validations */&#xD;&#xA;&#x9;&#x9;/* Generate work table with FILE_SEQ, FILE_TYPE, FILE_SERIES, FILE_NBR, IND_SERVICE and COUNT(*) */&#xD;&#xA;&#x9;&#x9;&#xD;&#xA;&#x9;&#x9;&#xD;&#xA;&#x9;&#x9;TRUNCATE TABLE wrk_file_service_count&#xD;&#xA;&#xD;&#xA;&#x9;&#x9;INSERT INTO  wrk_file_service_count    &#xD;&#xA;&#x9;&#x9;SELECT&#xD;&#xA;&#x9;&#x9;&#x9;&#x9; FILE_SEQ,&#xD;&#xA;&#x9;&#x9;&#x9;&#x9; FILE_TYPE,&#xD;&#xA;&#x9;&#x9;&#x9;&#x9; FILE_SERIES,&#xD;&#xA;&#x9;&#x9;&#x9;&#x9; FILE_NBR,&#xD;&#xA;&#x9;&#x9;&#x9;&#x9; IND_SERVICE,&#xD;&#xA;&#x9;&#x9;&#x9;&#x9; COUNT(*) count1&#xD;&#xA;&#x9;&#x9;FROM   [&quot;+ context.intermediateDB + &quot;].[dbo].VW_IMPORT_PATENT_REPRS &#xD;&#xA;&#x9;&#x9;GROUP BY FILE_SEQ,&#xD;&#xA;&#x9;&#x9;&#x9; FILE_TYPE,&#xD;&#xA;&#x9;&#x9;&#x9; FILE_SERIES,&#xD;&#xA;&#x9;&#x9;&#x9; FILE_NBR,&#xD;&#xA;&#x9;&#x9;&#x9;  IND_SERVICE &#xD;&#xA;&#x9;&#x9;&#xD;&#xA;&#x9;&#x9;/* No service address: where a representative exists but no one has IND_SERVICE = 1, &#xD;&#xA;&#x9;&#x9;       message ?No representative flagged as service address? */&#xD;&#xA;&#x9;&#x9;INSERT INTO   [&quot;+ context.intermediateDB + &quot;].[dbo].VW_IMPORT_PATENT_RESULT   &#xD;&#xA;&#x9;&#x9;&#x9;&#x9;( file_seq , &#xD;&#xA;&#x9;&#x9;&#x9;&#x9;file_type , &#xD;&#xA;&#x9;&#x9;&#x9;&#x9;file_series , &#xD;&#xA;&#x9;&#x9;&#x9;&#x9;file_nbr , &#xD;&#xA;&#x9;&#x9;&#x9;&#x9;ind_import , &#xD;&#xA;&#x9;&#x9;&#x9;&#x9;msg_import )  &#xD;&#xA;&#x9;&#x9;SELECT&#xD;&#xA;&#x9;&#x9;&#x9;&#x9; file_seq,&#xD;&#xA;&#x9;&#x9;&#x9;&#x9; file_type,&#xD;&#xA;&#x9;&#x9;&#x9;&#x9; file_series,&#xD;&#xA;&#x9;&#x9;&#x9;&#x9; file_nbr,&#xD;&#xA;&#x9;&#x9;&#x9;&#x9; 2,&#xD;&#xA;&#x9;&#x9;&#x9;&#x9; 'No representative flagged as service address'&#xD;&#xA;&#x9;&#x9;FROM   [&quot;+ context.intermediateDB + &quot;].[dbo].VW_import_patent M &#xD;&#xA;&#x9;&#x9;WHERE&#x9; ind_import  = 0&#xD;&#xA;&#x9;&#x9; AND&#x9;  exists&#xD;&#xA;&#x9;&#x9;&#x9;(&#xD;&#xA;&#x9;&#x9; &#x9;SELECT *&#xD;&#xA;&#x9;&#x9;&#x9;FROM  wrk_file_service_count W &#xD;&#xA;&#x9;&#x9;&#x9;WHERE&#x9; M.file_seq  = W.file_seq&#xD;&#xA;&#x9;&#x9;&#x9; AND&#x9;M.file_type  = W.file_type&#xD;&#xA;&#x9;&#x9;&#x9; AND&#x9;M.file_series  = W.file_series&#xD;&#xA;&#x9;&#x9;&#x9; AND&#x9;M.file_nbr  = W.file_nbr&#xD;&#xA;&#x9;&#x9;&#x9;)&#xD;&#xA;&#x9;&#x9; AND&#x9;NOT   exists&#xD;&#xA;&#x9;&#x9;&#x9;(&#xD;&#xA;&#x9;&#x9; &#x9;SELECT *&#xD;&#xA;&#x9;&#x9;&#x9;FROM  wrk_file_service_count W &#xD;&#xA;&#x9;&#x9;&#x9;WHERE&#x9; M.file_seq  = W.file_seq&#xD;&#xA;&#x9;&#x9;&#x9; AND&#x9;M.file_type  = W.file_type&#xD;&#xA;&#x9;&#x9;&#x9; AND&#x9;M.file_series  = W.file_series&#xD;&#xA;&#x9;&#x9;&#x9; AND&#x9;M.file_nbr  = W.file_nbr&#xD;&#xA;&#x9;&#x9;&#x9; AND&#x9;ind_service  = 1&#xD;&#xA;&#x9;&#x9;&#x9;)&#xD;&#xA;&#x9;&#x9;&#xD;&#xA;&#x9;&#x9;/* Several service addresses: where exists corresponding tuple in the work table with IND_SERVICE = 1 and with count column > 1, &#xD;&#xA;&#x9;&#x9;       message ?Several representatives flagged as service addresses? */&#xD;&#xA;&#x9;&#x9;INSERT INTO   [&quot;+ context.intermediateDB + &quot;].[dbo].VW_IMPORT_PATENT_RESULT   &#xD;&#xA;&#x9;&#x9;&#x9;&#x9;( file_seq , &#xD;&#xA;&#x9;&#x9;&#x9;&#x9;file_type , &#xD;&#xA;&#x9;&#x9;&#x9;&#x9;file_series , &#xD;&#xA;&#x9;&#x9;&#x9;&#x9;file_nbr , &#xD;&#xA;&#x9;&#x9;&#x9;&#x9;ind_import , &#xD;&#xA;&#x9;&#x9;&#x9;&#x9;msg_import )  &#xD;&#xA;&#x9;&#x9;SELECT&#xD;&#xA;&#x9;&#x9;&#x9;&#x9; M.file_seq,&#xD;&#xA;&#x9;&#x9;&#x9;&#x9; M.file_type,&#xD;&#xA;&#x9;&#x9;&#x9;&#x9; M.file_series,&#xD;&#xA;&#x9;&#x9;&#x9;&#x9; M.file_nbr,&#xD;&#xA;&#x9;&#x9;&#x9;&#x9; 2,&#xD;&#xA;&#x9;&#x9;&#x9;&#x9; 'Several representatives flagged as service addresses'&#xD;&#xA;&#x9;&#x9;FROM   [&quot;+ context.intermediateDB + &quot;].[dbo].VW_import_patent M &#xD;&#xA;&#x9;&#x9; JOIN wrk_file_service_count W ON M.file_seq  = W.file_seq&#xD;&#xA;&#x9;&#x9;&#x9; AND&#x9;M.file_type  = W.file_type&#xD;&#xA;&#x9;&#x9;&#x9; AND&#x9;M.file_series  = W.file_series&#xD;&#xA;&#x9;&#x9;&#x9; AND&#x9;M.file_nbr  = W.file_nbr  &#xD;&#xA;&#x9;&#x9;WHERE&#x9; ind_import  = 0&#xD;&#xA;&#x9;&#x9; AND&#x9;ind_service  = 1&#xD;&#xA;&#x9;&#x9; AND&#x9;count1  > 1&#xD;&#xA;&#x9;&#x9;&#xD;&#xA;&#x9;&#x9;/* REPRESENTATIVE_TYPE: if null, message ?Null representative type? */&#xD;&#xA;&#x9;&#x9;INSERT INTO   [&quot;+ context.intermediateDB + &quot;].[dbo].VW_IMPORT_PATENT_RESULT   &#xD;&#xA;&#x9;&#x9;&#x9;&#x9;( file_seq , &#xD;&#xA;&#x9;&#x9;&#x9;&#x9;file_type , &#xD;&#xA;&#x9;&#x9;&#x9;&#x9;file_series , &#xD;&#xA;&#x9;&#x9;&#x9;&#x9;file_nbr , &#xD;&#xA;&#x9;&#x9;&#x9;&#x9;ind_import , &#xD;&#xA;&#x9;&#x9;&#x9;&#x9;msg_import )  &#xD;&#xA;&#x9;&#x9;SELECT&#xD;&#xA;&#x9;&#x9;&#x9;&#x9; T.file_seq,&#xD;&#xA;&#x9;&#x9;&#x9;&#x9; T.file_type,&#xD;&#xA;&#x9;&#x9;&#x9;&#x9; T.file_series,&#xD;&#xA;&#x9;&#x9;&#x9;&#x9; T.file_nbr,&#xD;&#xA;&#x9;&#x9;&#x9;&#x9; 2,&#xD;&#xA;&#x9;&#x9;&#x9;&#x9; 'Null representative type'&#xD;&#xA;&#x9;&#x9;FROM   [&quot;+ context.intermediateDB + &quot;].[dbo].VW_import_patent_reprs T &#xD;&#xA;&#x9;&#x9; JOIN  [&quot;+ context.intermediateDB + &quot;].[dbo].VW_import_patent M ON T.file_seq  = M.file_seq&#xD;&#xA;&#x9;&#x9;&#x9; AND&#x9;T.file_type  = M.file_type&#xD;&#xA;&#x9;&#x9;&#x9; AND&#x9;T.file_series  = M.file_series&#xD;&#xA;&#x9;&#x9;&#x9; AND&#x9;T.file_nbr  = M.file_nbr  &#xD;&#xA;&#x9;&#x9;WHERE&#x9; ind_import  = 0&#xD;&#xA;&#x9;&#x9; AND&#x9;REPRESENTATIVE_TYPE  is null&#xD;&#xA;&#x9;&#x9;&#xD;&#xA;&#x9;&#x9;/* REPRESENTATIVE_TYPE: if not exists in CF_REPRESENTATIVE_TYPE, message ?Invalid representative type? */&#xD;&#xA;&#x9;&#x9;INSERT INTO   [&quot;+ context.intermediateDB + &quot;].[dbo].VW_IMPORT_PATENT_RESULT   &#xD;&#xA;&#x9;&#x9;&#x9;&#x9;( file_seq , &#xD;&#xA;&#x9;&#x9;&#x9;&#x9;file_type , &#xD;&#xA;&#x9;&#x9;&#x9;&#x9;file_series , &#xD;&#xA;&#x9;&#x9;&#x9;&#x9;file_nbr , &#xD;&#xA;&#x9;&#x9;&#x9;&#x9;ind_import , &#xD;&#xA;&#x9;&#x9;&#x9;&#x9;msg_import )  &#xD;&#xA;&#x9;&#x9;SELECT&#xD;&#xA;&#x9;&#x9;&#x9;&#x9; T.file_seq,&#xD;&#xA;&#x9;&#x9;&#x9;&#x9; T.file_type,&#xD;&#xA;&#x9;&#x9;&#x9;&#x9; T.file_series,&#xD;&#xA;&#x9;&#x9;&#x9;&#x9; T.file_nbr,&#xD;&#xA;&#x9;&#x9;&#x9;&#x9; 2,&#xD;&#xA;&#x9;&#x9;&#x9;&#x9; 'Invalid representative type'&#xD;&#xA;&#x9;&#x9;FROM   [&quot;+ context.intermediateDB + &quot;].[dbo].VW_import_patent_reprs T &#xD;&#xA;&#x9;&#x9; JOIN  [&quot;+ context.intermediateDB + &quot;].[dbo].VW_import_patent M ON T.file_seq  = M.file_seq&#xD;&#xA;&#x9;&#x9;&#x9; AND&#x9;T.file_type  = M.file_type&#xD;&#xA;&#x9;&#x9;&#x9; AND&#x9;T.file_series  = M.file_series&#xD;&#xA;&#x9;&#x9;&#x9; AND&#x9;T.file_nbr  = M.file_nbr  &#xD;&#xA;&#x9;&#x9;WHERE&#x9; ind_import  = 0&#xD;&#xA;&#x9;&#x9; AND&#x9;REPRESENTATIVE_TYPE  not in&#xD;&#xA;&#x9;&#x9;&#x9;(&#xD;&#xA;&#x9;&#x9; &#x9;SELECT REPRESENTATIVE_TYPE&#xD;&#xA;&#x9;&#x9;&#x9;FROM  CF_REPRESENTATIVE_TYPE &#xD;&#xA;&#x9;&#x9;&#x9;)&#xD;&#xA;&#x9;&#x9;&#xD;&#xA;&#x9;&#x9;/* AGENT_CODE: if not null and not exists in IF_AGENT, message ?Invalid agent code? */&#xD;&#xA;&#x9;&#x9;INSERT INTO   [&quot;+ context.intermediateDB + &quot;].[dbo].VW_IMPORT_PATENT_RESULT   &#xD;&#xA;&#x9;&#x9;&#x9;&#x9;( file_seq , &#xD;&#xA;&#x9;&#x9;&#x9;&#x9;file_type , &#xD;&#xA;&#x9;&#x9;&#x9;&#x9;file_series , &#xD;&#xA;&#x9;&#x9;&#x9;&#x9;file_nbr , &#xD;&#xA;&#x9;&#x9;&#x9;&#x9;ind_import , &#xD;&#xA;&#x9;&#x9;&#x9;&#x9;msg_import )  &#xD;&#xA;&#x9;&#x9;SELECT&#xD;&#xA;&#x9;&#x9;&#x9;&#x9; T.file_seq,&#xD;&#xA;&#x9;&#x9;&#x9;&#x9; T.file_type,&#xD;&#xA;&#x9;&#x9;&#x9;&#x9; T.file_series,&#xD;&#xA;&#x9;&#x9;&#x9;&#x9; T.file_nbr,&#xD;&#xA;&#x9;&#x9;&#x9;&#x9; 2,&#xD;&#xA;&#x9;&#x9;&#x9;&#x9; 'Invalid agent code'&#xD;&#xA;&#x9;&#x9;FROM   [&quot;+ context.intermediateDB + &quot;].[dbo].VW_import_patent_reprs T &#xD;&#xA;&#x9;&#x9; JOIN  [&quot;+ context.intermediateDB + &quot;].[dbo].VW_import_patent M ON T.file_seq  = M.file_seq&#xD;&#xA;&#x9;&#x9;&#x9; AND&#x9;T.file_type  = M.file_type&#xD;&#xA;&#x9;&#x9;&#x9; AND&#x9;T.file_series  = M.file_series&#xD;&#xA;&#x9;&#x9;&#x9; AND&#x9;T.file_nbr  = M.file_nbr  &#xD;&#xA;&#x9;&#x9;WHERE&#x9; ind_import  = 0&#xD;&#xA;&#x9;&#x9; AND&#x9;AGENT_CODE  is not null&#xD;&#xA;&#x9;&#x9; AND&#x9;AGENT_CODE  not in&#xD;&#xA;&#x9;&#x9;&#x9;(&#xD;&#xA;&#x9;&#x9; &#x9;SELECT AGENT_CODE&#xD;&#xA;&#x9;&#x9;&#x9;FROM  IP_AGENT &#xD;&#xA;&#x9;&#x9;&#x9;)&#xD;&#xA;&#x9;&#x9;&#xD;&#xA;&#x9;&#x9;/* 1.1.3.2 Person validations */&#xD;&#xA;&#x9;&#x9;/* NATIONALITY_COUNTRY_CODE: if not exists in CF_GEO_COUNTRY, message ?Invalid representative nationality country code? */&#xD;&#xA;&#x9;&#x9;INSERT INTO   [&quot;+ context.intermediateDB + &quot;].[dbo].VW_IMPORT_PATENT_RESULT   &#xD;&#xA;&#x9;&#x9;&#x9;&#x9;( file_seq , &#xD;&#xA;&#x9;&#x9;&#x9;&#x9;file_type , &#xD;&#xA;&#x9;&#x9;&#x9;&#x9;file_series , &#xD;&#xA;&#x9;&#x9;&#x9;&#x9;file_nbr , &#xD;&#xA;&#x9;&#x9;&#x9;&#x9;ind_import , &#xD;&#xA;&#x9;&#x9;&#x9;&#x9;msg_import )  &#xD;&#xA;&#x9;&#x9;SELECT&#xD;&#xA;&#x9;&#x9;&#x9;&#x9; T.file_seq,&#xD;&#xA;&#x9;&#x9;&#x9;&#x9; T.file_type,&#xD;&#xA;&#x9;&#x9;&#x9;&#x9; T.file_series,&#xD;&#xA;&#x9;&#x9;&#x9;&#x9; T.file_nbr,&#xD;&#xA;&#x9;&#x9;&#x9;&#x9; 2,&#xD;&#xA;&#x9;&#x9;&#x9;&#x9; 'Invalid representative nationality country code'&#xD;&#xA;&#x9;&#x9;FROM   [&quot;+ context.intermediateDB + &quot;].[dbo].VW_import_patent_reprs T &#xD;&#xA;&#x9;&#x9; JOIN  [&quot;+ context.intermediateDB + &quot;].[dbo].VW_import_patent M ON T.file_seq  = M.file_seq&#xD;&#xA;&#x9;&#x9;&#x9; AND&#x9;T.file_type  = M.file_type&#xD;&#xA;&#x9;&#x9;&#x9; AND&#x9;T.file_series  = M.file_series&#xD;&#xA;&#x9;&#x9;&#x9; AND&#x9;T.file_nbr  = M.file_nbr  &#xD;&#xA;&#x9;&#x9;WHERE&#x9; ind_import  = 0&#xD;&#xA;&#x9;&#x9; AND&#x9;NATIONALITY_COUNTRY_CODE  COLLATE DATABASE_DEFAULT not in&#xD;&#xA;&#x9;&#x9;&#x9;(&#xD;&#xA;&#x9;&#x9; &#x9;SELECT COUNTRY_CODE&#xD;&#xA;&#x9;&#x9;&#x9;FROM  cf_geo_country &#xD;&#xA;&#x9;&#x9;&#x9;)&#xD;&#xA;&#x9;&#x9;&#xD;&#xA;&#x9;&#x9;/* LEGAL_NATURE: if not null and IND_COMPANY = 0, message ?Representative legal nature only applies when the person is a company? */&#xD;&#xA;&#x9;&#x9;INSERT INTO   [&quot;+ context.intermediateDB + &quot;].[dbo].VW_IMPORT_PATENT_RESULT   &#xD;&#xA;&#x9;&#x9;&#x9;&#x9;( file_seq , &#xD;&#xA;&#x9;&#x9;&#x9;&#x9;file_type , &#xD;&#xA;&#x9;&#x9;&#x9;&#x9;file_series , &#xD;&#xA;&#x9;&#x9;&#x9;&#x9;file_nbr , &#xD;&#xA;&#x9;&#x9;&#x9;&#x9;ind_import , &#xD;&#xA;&#x9;&#x9;&#x9;&#x9;msg_import )  &#xD;&#xA;&#x9;&#x9;SELECT&#xD;&#xA;&#x9;&#x9;&#x9;&#x9; T.file_seq,&#xD;&#xA;&#x9;&#x9;&#x9;&#x9; T.file_type,&#xD;&#xA;&#x9;&#x9;&#x9;&#x9; T.file_series,&#xD;&#xA;&#x9;&#x9;&#x9;&#x9; T.file_nbr,&#xD;&#xA;&#x9;&#x9;&#x9;&#x9; 2,&#xD;&#xA;&#x9;&#x9;&#x9;&#x9; 'Representative legal nature only applies when the person is a company'&#xD;&#xA;&#x9;&#x9;FROM   [&quot;+ context.intermediateDB + &quot;].[dbo].VW_import_patent_reprs T &#xD;&#xA;&#x9;&#x9; JOIN  [&quot;+ context.intermediateDB + &quot;].[dbo].VW_import_patent M ON T.file_seq  = M.file_seq&#xD;&#xA;&#x9;&#x9;&#x9; AND&#x9;T.file_type  = M.file_type&#xD;&#xA;&#x9;&#x9;&#x9; AND&#x9;T.file_series  = M.file_series&#xD;&#xA;&#x9;&#x9;&#x9; AND&#x9;T.file_nbr  = M.file_nbr  &#xD;&#xA;&#x9;&#x9;WHERE&#x9; ind_import  = 0&#xD;&#xA;&#x9;&#x9; AND&#x9;LEGAL_NATURE  is not null&#xD;&#xA;&#x9;&#x9; AND&#x9;IND_COMPANY  = 0&#xD;&#xA;&#x9;&#x9;&#xD;&#xA;&#x9;&#x9;/* LEGAL_ID_TYPE: if not null and not exists if CF_PERSON_ID_TYPE with IND_GENERAL_ID = ?S?, &#xD;&#xA;&#x9;&#x9;       message ?Invalid Representative legal id type? */&#xD;&#xA;&#x9;&#x9;INSERT INTO   [&quot;+ context.intermediateDB + &quot;].[dbo].VW_IMPORT_PATENT_RESULT   &#xD;&#xA;&#x9;&#x9;&#x9;&#x9;( file_seq , &#xD;&#xA;&#x9;&#x9;&#x9;&#x9;file_type , &#xD;&#xA;&#x9;&#x9;&#x9;&#x9;file_series , &#xD;&#xA;&#x9;&#x9;&#x9;&#x9;file_nbr , &#xD;&#xA;&#x9;&#x9;&#x9;&#x9;ind_import , &#xD;&#xA;&#x9;&#x9;&#x9;&#x9;msg_import )  &#xD;&#xA;&#x9;&#x9;SELECT&#xD;&#xA;&#x9;&#x9;&#x9;&#x9; T.file_seq,&#xD;&#xA;&#x9;&#x9;&#x9;&#x9; T.file_type,&#xD;&#xA;&#x9;&#x9;&#x9;&#x9; T.file_series,&#xD;&#xA;&#x9;&#x9;&#x9;&#x9; T.file_nbr,&#xD;&#xA;&#x9;&#x9;&#x9;&#x9; 2,&#xD;&#xA;&#x9;&#x9;&#x9;&#x9; 'Invalid representative legal id type'&#xD;&#xA;&#x9;&#x9;FROM   [&quot;+ context.intermediateDB + &quot;].[dbo].VW_import_patent_reprs T &#xD;&#xA;&#x9;&#x9; JOIN  [&quot;+ context.intermediateDB + &quot;].[dbo].VW_import_patent M ON T.file_seq  = M.file_seq&#xD;&#xA;&#x9;&#x9;&#x9; AND&#x9;T.file_type  = M.file_type&#xD;&#xA;&#x9;&#x9;&#x9; AND&#x9;T.file_series  = M.file_series&#xD;&#xA;&#x9;&#x9;&#x9; AND&#x9;T.file_nbr  = M.file_nbr  &#xD;&#xA;&#x9;&#x9;WHERE&#x9; ind_import  = 0&#xD;&#xA;&#x9;&#x9; AND&#x9;LEGAL_ID_TYPE  is not null&#xD;&#xA;&#x9;&#x9; AND&#x9;LEGAL_ID_TYPE  COLLATE DATABASE_DEFAULT not in&#xD;&#xA;&#x9;&#x9;&#x9;(&#xD;&#xA;&#x9;&#x9; &#x9;SELECT PERSON_ID_TYP&#xD;&#xA;&#x9;&#x9;&#x9;FROM  CF_PERSON_ID_TYPE &#xD;&#xA;&#x9;&#x9;&#x9;WHERE&#x9; IND_GENERAL_ID  = 'S'&#xD;&#xA;&#x9;&#x9;&#x9;)&#xD;&#xA;&#x9;&#x9;&#xD;&#xA;&#x9;&#x9;/* INDIVIDUAL_ID_TYPE: if not null and not exists if CF_PERSON_ID_TYPE with IND_INDIVIDUAL_ID = ?S?, &#xD;&#xA;&#x9;&#x9;       message ?Invalid representative individual id type? */&#xD;&#xA;&#x9;&#x9;INSERT INTO   [&quot;+ context.intermediateDB + &quot;].[dbo].VW_IMPORT_PATENT_RESULT   &#xD;&#xA;&#x9;&#x9;&#x9;&#x9;( file_seq , &#xD;&#xA;&#x9;&#x9;&#x9;&#x9;file_type , &#xD;&#xA;&#x9;&#x9;&#x9;&#x9;file_series , &#xD;&#xA;&#x9;&#x9;&#x9;&#x9;file_nbr , &#xD;&#xA;&#x9;&#x9;&#x9;&#x9;ind_import , &#xD;&#xA;&#x9;&#x9;&#x9;&#x9;msg_import )  &#xD;&#xA;&#x9;&#x9;SELECT&#xD;&#xA;&#x9;&#x9;&#x9;&#x9; T.file_seq,&#xD;&#xA;&#x9;&#x9;&#x9;&#x9; T.file_type,&#xD;&#xA;&#x9;&#x9;&#x9;&#x9; T.file_series,&#xD;&#xA;&#x9;&#x9;&#x9;&#x9; T.file_nbr,&#xD;&#xA;&#x9;&#x9;&#x9;&#x9; 2,&#xD;&#xA;&#x9;&#x9;&#x9;&#x9; 'Invalid representative individual id type'&#xD;&#xA;&#x9;&#x9;FROM   [&quot;+ context.intermediateDB + &quot;].[dbo].VW_import_patent_reprs T &#xD;&#xA;&#x9;&#x9; JOIN  [&quot;+ context.intermediateDB + &quot;].[dbo].VW_import_patent M ON T.file_seq  = M.file_seq&#xD;&#xA;&#x9;&#x9;&#x9; AND&#x9;T.file_type  = M.file_type&#xD;&#xA;&#x9;&#x9;&#x9; AND&#x9;T.file_series  = M.file_series&#xD;&#xA;&#x9;&#x9;&#x9; AND&#x9;T.file_nbr  = M.file_nbr  &#xD;&#xA;&#x9;&#x9;WHERE&#x9; ind_import  = 0&#xD;&#xA;&#x9;&#x9; AND&#x9;INDIVIDUAL_ID_TYPE  is not null&#xD;&#xA;&#x9;&#x9; AND&#x9;INDIVIDUAL_ID_TYPE  COLLATE DATABASE_DEFAULT not in&#xD;&#xA;&#x9;&#x9;&#x9;(&#xD;&#xA;&#x9;&#x9; &#x9;SELECT PERSON_ID_TYP&#xD;&#xA;&#x9;&#x9;&#x9;FROM  CF_PERSON_ID_TYPE &#xD;&#xA;&#x9;&#x9;&#x9;WHERE&#x9; IND_INDIVIDUAL_ID  = 'S'&#xD;&#xA;&#x9;&#x9;&#x9;)&#xD;&#xA;&#x9;&#x9;&#xD;&#xA;&#x9;&#x9;/* If LEGAL_ID_TYPE is not null and LEGAL_ID_NBR is null, message ?Missing representative legal id number? */&#xD;&#xA;&#x9;&#x9;INSERT INTO   [&quot;+ context.intermediateDB + &quot;].[dbo].VW_IMPORT_PATENT_RESULT   &#xD;&#xA;&#x9;&#x9;&#x9;&#x9;( file_seq , &#xD;&#xA;&#x9;&#x9;&#x9;&#x9;file_type , &#xD;&#xA;&#x9;&#x9;&#x9;&#x9;file_series , &#xD;&#xA;&#x9;&#x9;&#x9;&#x9;file_nbr , &#xD;&#xA;&#x9;&#x9;&#x9;&#x9;ind_import , &#xD;&#xA;&#x9;&#x9;&#x9;&#x9;msg_import )  &#xD;&#xA;&#x9;&#x9;SELECT&#xD;&#xA;&#x9;&#x9;&#x9;&#x9; T.file_seq,&#xD;&#xA;&#x9;&#x9;&#x9;&#x9; T.file_type,&#xD;&#xA;&#x9;&#x9;&#x9;&#x9; T.file_series,&#xD;&#xA;&#x9;&#x9;&#x9;&#x9; T.file_nbr,&#xD;&#xA;&#x9;&#x9;&#x9;&#x9; 2,&#xD;&#xA;&#x9;&#x9;&#x9;&#x9; 'Missing representative legal id number'&#xD;&#xA;&#x9;&#x9;FROM   [&quot;+ context.intermediateDB + &quot;].[dbo].VW_import_patent_reprs T &#xD;&#xA;&#x9;&#x9; JOIN  [&quot;+ context.intermediateDB + &quot;].[dbo].VW_import_patent M ON T.file_seq  = M.file_seq&#xD;&#xA;&#x9;&#x9;&#x9; AND&#x9;T.file_type  = M.file_type&#xD;&#xA;&#x9;&#x9;&#x9; AND&#x9;T.file_series  = M.file_series&#xD;&#xA;&#x9;&#x9;&#x9; AND&#x9;T.file_nbr  = M.file_nbr  &#xD;&#xA;&#x9;&#x9;WHERE&#x9; ind_import  = 0&#xD;&#xA;&#x9;&#x9; AND&#x9;LEGAL_ID_TYPE  is not null&#xD;&#xA;&#x9;&#x9; AND&#x9;LEGAL_ID_NBR  is null&#xD;&#xA;&#x9;&#x9;&#xD;&#xA;&#x9;&#x9;/* If LEGAL_ID_TYPE is null and LEGAL_ID_NBR is not null, message ?Missing representative legal id type? */&#xD;&#xA;&#x9;&#x9;INSERT INTO   [&quot;+ context.intermediateDB + &quot;].[dbo].VW_IMPORT_PATENT_RESULT   &#xD;&#xA;&#x9;&#x9;&#x9;&#x9;( file_seq , &#xD;&#xA;&#x9;&#x9;&#x9;&#x9;file_type , &#xD;&#xA;&#x9;&#x9;&#x9;&#x9;file_series , &#xD;&#xA;&#x9;&#x9;&#x9;&#x9;file_nbr , &#xD;&#xA;&#x9;&#x9;&#x9;&#x9;ind_import , &#xD;&#xA;&#x9;&#x9;&#x9;&#x9;msg_import )  &#xD;&#xA;&#x9;&#x9;SELECT&#xD;&#xA;&#x9;&#x9;&#x9;&#x9; T.file_seq,&#xD;&#xA;&#x9;&#x9;&#x9;&#x9; T.file_type,&#xD;&#xA;&#x9;&#x9;&#x9;&#x9; T.file_series,&#xD;&#xA;&#x9;&#x9;&#x9;&#x9; T.file_nbr,&#xD;&#xA;&#x9;&#x9;&#x9;&#x9; 2,&#xD;&#xA;&#x9;&#x9;&#x9;&#x9; 'Missing representative legal id type'&#xD;&#xA;&#x9;&#x9;FROM   [&quot;+ context.intermediateDB + &quot;].[dbo].VW_import_patent_reprs T &#xD;&#xA;&#x9;&#x9; JOIN  [&quot;+ context.intermediateDB + &quot;].[dbo].VW_import_patent M ON T.file_seq  = M.file_seq&#xD;&#xA;&#x9;&#x9;&#x9; AND&#x9;T.file_type  = M.file_type&#xD;&#xA;&#x9;&#x9;&#x9; AND&#x9;T.file_series  = M.file_series&#xD;&#xA;&#x9;&#x9;&#x9; AND&#x9;T.file_nbr  = M.file_nbr  &#xD;&#xA;&#x9;&#x9;WHERE&#x9; ind_import  = 0&#xD;&#xA;&#x9;&#x9; AND&#x9;LEGAL_ID_TYPE  is null&#xD;&#xA;&#x9;&#x9; AND&#x9;LEGAL_ID_NBR  is not null&#xD;&#xA;&#x9;&#x9;&#xD;&#xA;&#x9;&#x9;/* If INDIVIDUAL_ID_TYPE is not null and INDIVIDUAL_ID_NBR is null, message ?Missing representative individual id number? */&#xD;&#xA;&#x9;&#x9;INSERT INTO   [&quot;+ context.intermediateDB + &quot;].[dbo].VW_IMPORT_PATENT_RESULT   &#xD;&#xA;&#x9;&#x9;&#x9;&#x9;( file_seq , &#xD;&#xA;&#x9;&#x9;&#x9;&#x9;file_type , &#xD;&#xA;&#x9;&#x9;&#x9;&#x9;file_series , &#xD;&#xA;&#x9;&#x9;&#x9;&#x9;file_nbr , &#xD;&#xA;&#x9;&#x9;&#x9;&#x9;ind_import , &#xD;&#xA;&#x9;&#x9;&#x9;&#x9;msg_import )  &#xD;&#xA;&#x9;&#x9;SELECT&#xD;&#xA;&#x9;&#x9;&#x9;&#x9; T.file_seq,&#xD;&#xA;&#x9;&#x9;&#x9;&#x9; T.file_type,&#xD;&#xA;&#x9;&#x9;&#x9;&#x9; T.file_series,&#xD;&#xA;&#x9;&#x9;&#x9;&#x9; T.file_nbr,&#xD;&#xA;&#x9;&#x9;&#x9;&#x9; 2,&#xD;&#xA;&#x9;&#x9;&#x9;&#x9; 'Missing representative individual id number'&#xD;&#xA;&#x9;&#x9;FROM   [&quot;+ context.intermediateDB + &quot;].[dbo].VW_import_patent_reprs T &#xD;&#xA;&#x9;&#x9; JOIN  [&quot;+ context.intermediateDB + &quot;].[dbo].VW_import_patent M ON T.file_seq  = M.file_seq&#xD;&#xA;&#x9;&#x9;&#x9; AND&#x9;T.file_type  = M.file_type&#xD;&#xA;&#x9;&#x9;&#x9; AND&#x9;T.file_series  = M.file_series&#xD;&#xA;&#x9;&#x9;&#x9; AND&#x9;T.file_nbr  = M.file_nbr  &#xD;&#xA;&#x9;&#x9;WHERE&#x9; ind_import  = 0&#xD;&#xA;&#x9;&#x9; AND&#x9;INDIVIDUAL_ID_TYPE  is not null&#xD;&#xA;&#x9;&#x9; AND&#x9;INDIVIDUAL_ID_NBR  is null&#xD;&#xA;&#x9;&#x9;&#xD;&#xA;&#x9;&#x9;/* If INDIVIDUAL_ID_TYPE is null and INDIVIDUAL_ID_NBR is not null, message ?Missing representative individual id type? */&#xD;&#xA;&#x9;&#x9;INSERT INTO   [&quot;+ context.intermediateDB + &quot;].[dbo].VW_IMPORT_PATENT_RESULT   &#xD;&#xA;&#x9;&#x9;&#x9;&#x9;( file_seq , &#xD;&#xA;&#x9;&#x9;&#x9;&#x9;file_type , &#xD;&#xA;&#x9;&#x9;&#x9;&#x9;file_series , &#xD;&#xA;&#x9;&#x9;&#x9;&#x9;file_nbr , &#xD;&#xA;&#x9;&#x9;&#x9;&#x9;ind_import , &#xD;&#xA;&#x9;&#x9;&#x9;&#x9;msg_import )  &#xD;&#xA;&#x9;&#x9;SELECT&#xD;&#xA;&#x9;&#x9;&#x9;&#x9; T.file_seq,&#xD;&#xA;&#x9;&#x9;&#x9;&#x9; T.file_type,&#xD;&#xA;&#x9;&#x9;&#x9;&#x9; T.file_series,&#xD;&#xA;&#x9;&#x9;&#x9;&#x9; T.file_nbr,&#xD;&#xA;&#x9;&#x9;&#x9;&#x9; 2,&#xD;&#xA;&#x9;&#x9;&#x9;&#x9; 'Missing representative individual id type'&#xD;&#xA;&#x9;&#x9;FROM   [&quot;+ context.intermediateDB + &quot;].[dbo].VW_import_patent_reprs T &#xD;&#xA;&#x9;&#x9; JOIN  [&quot;+ context.intermediateDB + &quot;].[dbo].VW_import_patent M ON T.file_seq  = M.file_seq&#xD;&#xA;&#x9;&#x9;&#x9; AND&#x9;T.file_type  = M.file_type&#xD;&#xA;&#x9;&#x9;&#x9; AND&#x9;T.file_series  = M.file_series&#xD;&#xA;&#x9;&#x9;&#x9; AND&#x9;T.file_nbr  = M.file_nbr  &#xD;&#xA;&#x9;&#x9;WHERE&#x9; ind_import  = 0&#xD;&#xA;&#x9;&#x9; AND&#x9;INDIVIDUAL_ID_TYPE  is null&#xD;&#xA;&#x9;&#x9; AND&#x9;INDIVIDUAL_ID_NBR  is not null&#xD;&#xA;&#x9;&#x9;&#xD;&#xA;&#x9;&#x9;/* RESIDENCE_COUNTRY_CODE: if not exists in CF_GEO_COUNTRY, message ?Invalid representative residence country code? */&#xD;&#xA;&#x9;&#x9;INSERT INTO   [&quot;+ context.intermediateDB + &quot;].[dbo].VW_IMPORT_PATENT_RESULT   &#xD;&#xA;&#x9;&#x9;&#x9;&#x9;( file_seq , &#xD;&#xA;&#x9;&#x9;&#x9;&#x9;file_type , &#xD;&#xA;&#x9;&#x9;&#x9;&#x9;file_series , &#xD;&#xA;&#x9;&#x9;&#x9;&#x9;file_nbr , &#xD;&#xA;&#x9;&#x9;&#x9;&#x9;ind_import , &#xD;&#xA;&#x9;&#x9;&#x9;&#x9;msg_import )  &#xD;&#xA;&#x9;&#x9;SELECT&#xD;&#xA;&#x9;&#x9;&#x9;&#x9; T.file_seq,&#xD;&#xA;&#x9;&#x9;&#x9;&#x9; T.file_type,&#xD;&#xA;&#x9;&#x9;&#x9;&#x9; T.file_series,&#xD;&#xA;&#x9;&#x9;&#x9;&#x9; T.file_nbr,&#xD;&#xA;&#x9;&#x9;&#x9;&#x9; 2,&#xD;&#xA;&#x9;&#x9;&#x9;&#x9; 'Invalid representative residence country code'&#xD;&#xA;&#x9;&#x9;FROM   [&quot;+ context.intermediateDB + &quot;].[dbo].VW_import_patent_reprs T  &#xD;&#xA;&#x9;&#x9; JOIN  [&quot;+ context.intermediateDB + &quot;].[dbo].VW_import_patent M ON T.file_seq  = M.file_seq&#xD;&#xA;&#x9;&#x9;&#x9; AND&#x9;T.file_type  = M.file_type&#xD;&#xA;&#x9;&#x9;&#x9; AND&#x9;T.file_series  = M.file_series&#xD;&#xA;&#x9;&#x9;&#x9; AND&#x9;T.file_nbr  = M.file_nbr  &#xD;&#xA;&#x9;&#x9;WHERE&#x9; ind_import  = 0&#xD;&#xA;&#x9;&#x9; AND&#x9;RESIDENCE_COUNTRY_CODE  COLLATE DATABASE_DEFAULT not in&#xD;&#xA;&#x9;&#x9;&#x9;(&#xD;&#xA;&#x9;&#x9; &#x9;SELECT COUNTRY_CODE&#xD;&#xA;&#x9;&#x9;&#x9;FROM  cf_geo_country &#xD;&#xA;&#x9;&#x9;&#x9;)&#xD;&#xA;&#x9;&#x9;&#xD;&#xA;&#x9;&#x9;/* STATE_CODE: if not null and not exists RESIDENCE_COUNTRY_CODE / STATE_CODE in CF_GEO_STATE, &#xD;&#xA;&#x9;&#x9;       message ?Invalid representative residence state code? */&#xD;&#xA;&#x9;&#x9;INSERT INTO   [&quot;+ context.intermediateDB + &quot;].[dbo].VW_IMPORT_PATENT_RESULT   &#xD;&#xA;&#x9;&#x9;&#x9;&#x9;( file_seq , &#xD;&#xA;&#x9;&#x9;&#x9;&#x9;file_type , &#xD;&#xA;&#x9;&#x9;&#x9;&#x9;file_series , &#xD;&#xA;&#x9;&#x9;&#x9;&#x9;file_nbr , &#xD;&#xA;&#x9;&#x9;&#x9;&#x9;ind_import , &#xD;&#xA;&#x9;&#x9;&#x9;&#x9;msg_import )  &#xD;&#xA;&#x9;&#x9;SELECT&#xD;&#xA;&#x9;&#x9;&#x9;&#x9; T.file_seq,&#xD;&#xA;&#x9;&#x9;&#x9;&#x9; T.file_type,&#xD;&#xA;&#x9;&#x9;&#x9;&#x9; T.file_series,&#xD;&#xA;&#x9;&#x9;&#x9;&#x9; T.file_nbr,&#xD;&#xA;&#x9;&#x9;&#x9;&#x9; 2,&#xD;&#xA;&#x9;&#x9;&#x9;&#x9; 'Invalid representative residence state code'&#xD;&#xA;&#x9;&#x9;FROM   [&quot;+ context.intermediateDB + &quot;].[dbo].VW_import_patent_reprs T &#xD;&#xA;&#x9;&#x9; JOIN  [&quot;+ context.intermediateDB + &quot;].[dbo].VW_import_patent M ON T.file_seq  = M.file_seq&#xD;&#xA;&#x9;&#x9;&#x9; AND&#x9;T.file_type  = M.file_type&#xD;&#xA;&#x9;&#x9;&#x9; AND&#x9;T.file_series  = M.file_series&#xD;&#xA;&#x9;&#x9;&#x9; AND&#x9;T.file_nbr  = M.file_nbr  &#xD;&#xA;&#x9;&#x9;WHERE&#x9; ind_import  = 0&#xD;&#xA;&#x9;&#x9; AND&#x9;STATE_CODE  is not null&#xD;&#xA;&#x9;&#x9; AND&#x9; NOT EXISTS&#xD;&#xA;&#x9;&#x9;&#x9;(&#xD;&#xA;&#x9;&#x9; &#x9;SELECT&#xD;&#xA;&#x9;&#x9;&#x9;&#x9;&#x9; cf_geo_state.COUNTRY_CODE,&#xD;&#xA;&#x9;&#x9;&#x9;&#x9;&#x9; cf_geo_state.STATE_CODE&#xD;&#xA;&#x9;&#x9;&#x9;FROM  cf_geo_state &#xD;&#xA;&#x9;&#x9;&#x9;WHERE&#x9; cf_geo_state.COUNTRY_CODE  = T.RESIDENCE_COUNTRY_CODE&#x9;COLLATE DATABASE_DEFAULT &#xD;&#xA;&#x9;&#x9;&#x9; AND&#x9;cf_geo_state.STATE_CODE&#x9;&#x9;= T.STATE_CODE&#x9;&#x9;&#x9;&#x9;COLLATE DATABASE_DEFAULT &#xD;&#xA;&#x9;&#x9;&#x9;)&#xD;&#xA;&#x9;&#x9;&#xD;&#xA;&#x9;&#x9;/* If STATE_CODE Is null and exist any CF_GEO_STATE with the RESIDENCE_COUNTRY_CODE, &#xD;&#xA;&#x9;&#x9;       message ?A state code is required for the specified representative residence country? */&#xD;&#xA;&#x9;&#x9;INSERT INTO   [&quot;+ context.intermediateDB + &quot;].[dbo].VW_IMPORT_PATENT_RESULT   &#xD;&#xA;&#x9;&#x9;&#x9;&#x9;( file_seq , &#xD;&#xA;&#x9;&#x9;&#x9;&#x9;file_type , &#xD;&#xA;&#x9;&#x9;&#x9;&#x9;file_series , &#xD;&#xA;&#x9;&#x9;&#x9;&#x9;file_nbr , &#xD;&#xA;&#x9;&#x9;&#x9;&#x9;ind_import , &#xD;&#xA;&#x9;&#x9;&#x9;&#x9;msg_import )  &#xD;&#xA;&#x9;&#x9;SELECT&#xD;&#xA;&#x9;&#x9;&#x9;&#x9; T.file_seq,&#xD;&#xA;&#x9;&#x9;&#x9;&#x9; T.file_type,&#xD;&#xA;&#x9;&#x9;&#x9;&#x9; T.file_series,&#xD;&#xA;&#x9;&#x9;&#x9;&#x9; T.file_nbr,&#xD;&#xA;&#x9;&#x9;&#x9;&#x9; 2,&#xD;&#xA;&#x9;&#x9;&#x9;&#x9; 'A state code is required for the specified representative residence country'&#xD;&#xA;&#x9;&#x9;FROM   [&quot;+ context.intermediateDB + &quot;].[dbo].VW_import_patent_reprs T &#xD;&#xA;&#x9;&#x9; JOIN  [&quot;+ context.intermediateDB + &quot;].[dbo].VW_import_patent M ON T.file_seq  = M.file_seq&#xD;&#xA;&#x9;&#x9;&#x9; AND&#x9;T.file_type  = M.file_type&#xD;&#xA;&#x9;&#x9;&#x9; AND&#x9;T.file_series  = M.file_series&#xD;&#xA;&#x9;&#x9;&#x9; AND&#x9;T.file_nbr  = M.file_nbr  &#xD;&#xA;&#x9;&#x9;WHERE&#x9; ind_import  = 0&#xD;&#xA;&#x9;&#x9; AND&#x9;STATE_CODE  is null&#xD;&#xA;&#x9;&#x9; AND&#x9;RESIDENCE_COUNTRY_CODE COLLATE DATABASE_DEFAULT  in&#xD;&#xA;&#x9;&#x9;&#x9;(&#xD;&#xA;&#x9;&#x9; &#x9;SELECT country_code&#xD;&#xA;&#x9;&#x9;&#x9;FROM  cf_geo_state &#xD;&#xA;&#x9;&#x9;&#x9;)&#xD;&#xA;&#x9;&#x9;&#xD;&#xA;&#x9;&#x9;/* If PERSON_GROUP_CODE is not null and not exists in IP_PERSON_GROUP, message ?Invalid representative person group code? */&#xD;&#xA;&#x9;&#x9;INSERT INTO   [&quot;+ context.intermediateDB + &quot;].[dbo].VW_IMPORT_PATENT_RESULT   &#xD;&#xA;&#x9;&#x9;&#x9;&#x9;( file_seq , &#xD;&#xA;&#x9;&#x9;&#x9;&#x9;file_type , &#xD;&#xA;&#x9;&#x9;&#x9;&#x9;file_series , &#xD;&#xA;&#x9;&#x9;&#x9;&#x9;file_nbr , &#xD;&#xA;&#x9;&#x9;&#x9;&#x9;ind_import , &#xD;&#xA;&#x9;&#x9;&#x9;&#x9;msg_import )  &#xD;&#xA;&#x9;&#x9;SELECT&#xD;&#xA;&#x9;&#x9;&#x9;&#x9; T.file_seq,&#xD;&#xA;&#x9;&#x9;&#x9;&#x9; T.file_type,&#xD;&#xA;&#x9;&#x9;&#x9;&#x9; T.file_series,&#xD;&#xA;&#x9;&#x9;&#x9;&#x9; T.file_nbr,&#xD;&#xA;&#x9;&#x9;&#x9;&#x9; 2,&#xD;&#xA;&#x9;&#x9;&#x9;&#x9; 'Invalid representative person group code'&#xD;&#xA;&#x9;&#x9;FROM   [&quot;+ context.intermediateDB + &quot;].[dbo].VW_import_patent_reprs T &#xD;&#xA;&#x9;&#x9; JOIN  [&quot;+ context.intermediateDB + &quot;].[dbo].VW_import_patent M ON T.file_seq  = M.file_seq&#xD;&#xA;&#x9;&#x9;&#x9; AND&#x9;T.file_type  = M.file_type&#xD;&#xA;&#x9;&#x9;&#x9; AND&#x9;T.file_series  = M.file_series&#xD;&#xA;&#x9;&#x9;&#x9; AND&#x9;T.file_nbr  = M.file_nbr  &#xD;&#xA;&#x9;&#x9;WHERE&#x9; ind_import  = 0&#xD;&#xA;&#x9;&#x9; AND&#x9;PERSON_GROUP_CODE  is not null&#xD;&#xA;&#x9;&#x9; AND&#x9;PERSON_GROUP_CODE  COLLATE DATABASE_DEFAULT not in&#xD;&#xA;&#x9;&#x9;&#x9;(&#xD;&#xA;&#x9;&#x9; &#x9;SELECT PERSON_GROUP_NBR&#xD;&#xA;&#x9;&#x9;&#x9;FROM  IP_PERSON_GROUP &#xD;&#xA;&#x9;&#x9;&#x9;)&#xD;&#xA;&#x9;&#x9;&#xD;&#xA;&#x9;&#x9;/* 1.1.4  [&quot;+ context.intermediateDB + &quot;].[dbo].VW_IMPORT_PATENT_PRIORITIES validations */&#xD;&#xA;&#x9;&#x9;/* COUNTRY_CODE: if not exists in CF_GEO_COUNTRY, message ?Invalid priority country code? */&#xD;&#xA;&#x9;&#x9;INSERT INTO   [&quot;+ context.intermediateDB + &quot;].[dbo].VW_IMPORT_PATENT_RESULT   &#xD;&#xA;&#x9;&#x9;&#x9;&#x9;( file_seq , &#xD;&#xA;&#x9;&#x9;&#x9;&#x9;file_type , &#xD;&#xA;&#x9;&#x9;&#x9;&#x9;file_series , &#xD;&#xA;&#x9;&#x9;&#x9;&#x9;file_nbr , &#xD;&#xA;&#x9;&#x9;&#x9;&#x9;ind_import , &#xD;&#xA;&#x9;&#x9;&#x9;&#x9;msg_import )  &#xD;&#xA;&#x9;&#x9;SELECT&#xD;&#xA;&#x9;&#x9;&#x9;&#x9; T.file_seq,&#xD;&#xA;&#x9;&#x9;&#x9;&#x9; T.file_type,&#xD;&#xA;&#x9;&#x9;&#x9;&#x9; T.file_series,&#xD;&#xA;&#x9;&#x9;&#x9;&#x9; T.file_nbr,&#xD;&#xA;&#x9;&#x9;&#x9;&#x9; 2,&#xD;&#xA;&#x9;&#x9;&#x9;&#x9; 'Invalid priority country code'&#xD;&#xA;&#x9;&#x9;FROM   [&quot;+ context.intermediateDB + &quot;].[dbo].VW_import_patent_priorities T &#xD;&#xA;&#x9;&#x9; JOIN  [&quot;+ context.intermediateDB + &quot;].[dbo].VW_import_patent M ON T.file_seq  = M.file_seq&#xD;&#xA;&#x9;&#x9;&#x9; AND&#x9;T.file_type  = M.file_type&#xD;&#xA;&#x9;&#x9;&#x9; AND&#x9;T.file_series  = M.file_series&#xD;&#xA;&#x9;&#x9;&#x9; AND&#x9;T.file_nbr  = M.file_nbr  &#xD;&#xA;&#x9;&#x9;WHERE&#x9; ind_import  = 0&#xD;&#xA;&#x9;&#x9; AND&#x9;COUNTRY_CODE  COLLATE DATABASE_DEFAULT not in&#xD;&#xA;&#x9;&#x9;&#x9;(&#xD;&#xA;&#x9;&#x9; &#x9;SELECT COUNTRY_CODE&#xD;&#xA;&#x9;&#x9;&#x9;FROM  CF_GEO_COUNTRY &#xD;&#xA;&#x9;&#x9;&#x9;)&#xD;&#xA;&#x9;&#x9;&#xD;&#xA;&#x9;&#x9;/* Generate work table with FILE_SEQ, FILE_TYPE, FILE_SERIES, FILE_NBR, APPLICATION_ID and COUNT(*) */&#xD;&#xA;&#x9;&#x9;&#xD;&#xA;&#x9;&#x9;&#xD;&#xA;&#x9;&#x9;TRUNCATE TABLE wrk_file_priority_count&#xD;&#xA;&#xD;&#xA;&#x9;&#x9;INSERT INTO  wrk_file_priority_count    &#xD;&#xA;&#x9;&#x9;SELECT&#xD;&#xA;&#x9;&#x9;&#x9;&#x9; FILE_SEQ,&#xD;&#xA;&#x9;&#x9;&#x9;&#x9; FILE_TYPE,&#xD;&#xA;&#x9;&#x9;&#x9;&#x9; FILE_SERIES,&#xD;&#xA;&#x9;&#x9;&#x9;&#x9; FILE_NBR,&#xD;&#xA;&#x9;&#x9;&#x9;&#x9; APPLICATION_ID,&#xD;&#xA;&#x9;&#x9;&#x9;&#x9; COUNT(*) count1&#xD;&#xA;&#x9;&#x9;FROM   [&quot;+ context.intermediateDB + &quot;].[dbo].VW_IMPORT_PATENT_PRIORITIES &#xD;&#xA;&#x9;&#x9;GROUP BY FILE_SEQ,&#xD;&#xA;&#x9;&#x9;&#x9; FILE_TYPE,&#xD;&#xA;&#x9;&#x9;&#x9; FILE_SERIES,&#xD;&#xA;&#x9;&#x9;&#x9; FILE_NBR,&#xD;&#xA;&#x9;&#x9;&#x9;  APPLICATION_ID &#xD;&#xA;&#x9;&#x9;&#xD;&#xA;&#x9;&#x9;/* Duplicate application id: where exists corresponding tuple in the work table with the same APPLICATION_ID &#xD;&#xA;&#x9;&#x9;       and with count column > 1, message ?Several priorities use the same application id? */&#xD;&#xA;&#x9;&#x9;INSERT INTO   [&quot;+ context.intermediateDB + &quot;].[dbo].VW_IMPORT_PATENT_RESULT   &#xD;&#xA;&#x9;&#x9;&#x9;&#x9;( file_seq , &#xD;&#xA;&#x9;&#x9;&#x9;&#x9;file_type , &#xD;&#xA;&#x9;&#x9;&#x9;&#x9;file_series , &#xD;&#xA;&#x9;&#x9;&#x9;&#x9;file_nbr , &#xD;&#xA;&#x9;&#x9;&#x9;&#x9;ind_import , &#xD;&#xA;&#x9;&#x9;&#x9;&#x9;msg_import )  &#xD;&#xA;&#x9;&#x9;SELECT&#xD;&#xA;&#x9;&#x9;&#x9;&#x9; M.file_seq,&#xD;&#xA;&#x9;&#x9;&#x9;&#x9; M.file_type,&#xD;&#xA;&#x9;&#x9;&#x9;&#x9; M.file_series,&#xD;&#xA;&#x9;&#x9;&#x9;&#x9; M.file_nbr,&#xD;&#xA;&#x9;&#x9;&#x9;&#x9; 2,&#xD;&#xA;&#x9;&#x9;&#x9;&#x9; 'Several priorities use the same application id'&#xD;&#xA;&#x9;&#x9;FROM   [&quot;+ context.intermediateDB + &quot;].[dbo].VW_import_patent_priorities T &#xD;&#xA;&#x9;&#x9; JOIN  [&quot;+ context.intermediateDB + &quot;].[dbo].VW_import_patent M ON T.file_seq  = M.file_seq&#xD;&#xA;&#x9;&#x9;&#x9; AND&#x9;T.file_type  = M.file_type&#xD;&#xA;&#x9;&#x9;&#x9; AND&#x9;T.file_series  = M.file_series&#xD;&#xA;&#x9;&#x9;&#x9; AND&#x9;T.file_nbr  = M.file_nbr  &#xD;&#xA;&#x9;&#x9; JOIN wrk_file_priority_count W ON T.file_seq  = W.file_seq&#xD;&#xA;&#x9;&#x9;&#x9; AND&#x9;T.file_type  = W.file_type&#xD;&#xA;&#x9;&#x9;&#x9; AND&#x9;T.file_series  = W.file_series&#xD;&#xA;&#x9;&#x9;&#x9; AND&#x9;T.file_nbr  = W.file_nbr&#xD;&#xA;&#x9;&#x9;&#x9; AND&#x9;T.application_id  = W.application_id  &#xD;&#xA;&#x9;&#x9;WHERE&#x9; ind_import  = 0&#xD;&#xA;&#x9;&#x9; AND&#x9;count1  > 1&#xD;&#xA;&#x9;&#x9;&#xD;&#xA;&#x9;&#x9;/* 1.1.5  [&quot;+ context.intermediateDB + &quot;].[dbo].VW_IMPORT_PATENT_IPC_CLASSES validations */&#xD;&#xA;&#x9;&#x9;/* If IPC not exists in CF_CLASS_IPC, message ?Invalid IPC class? */&#xD;&#xA;&#x9;&#x9;INSERT INTO   [&quot;+ context.intermediateDB + &quot;].[dbo].VW_IMPORT_PATENT_RESULT   &#xD;&#xA;&#x9;&#x9;&#x9;&#x9;( file_seq , &#xD;&#xA;&#x9;&#x9;&#x9;&#x9;file_type , &#xD;&#xA;&#x9;&#x9;&#x9;&#x9;file_series , &#xD;&#xA;&#x9;&#x9;&#x9;&#x9;file_nbr , &#xD;&#xA;&#x9;&#x9;&#x9;&#x9;ind_import , &#xD;&#xA;&#x9;&#x9;&#x9;&#x9;msg_import )  &#xD;&#xA;&#x9;&#x9;SELECT&#xD;&#xA;&#x9;&#x9;&#x9;&#x9; T.file_seq,&#xD;&#xA;&#x9;&#x9;&#x9;&#x9; T.file_type,&#xD;&#xA;&#x9;&#x9;&#x9;&#x9; T.file_series,&#xD;&#xA;&#x9;&#x9;&#x9;&#x9; T.file_nbr,&#xD;&#xA;&#x9;&#x9;&#x9;&#x9; 2,&#xD;&#xA;&#x9;&#x9;&#x9;&#x9; 'Invalid IPC class'&#xD;&#xA;&#x9;&#x9;FROM   [&quot;+ context.intermediateDB + &quot;].[dbo].VW_import_patent_ipc_classes T &#xD;&#xA;&#x9;&#x9; JOIN  [&quot;+ context.intermediateDB + &quot;].[dbo].VW_import_patent M ON T.file_seq  = M.file_seq&#xD;&#xA;&#x9;&#x9;&#x9; AND&#x9;T.file_type  = M.file_type&#xD;&#xA;&#x9;&#x9;&#x9; AND&#x9;T.file_series  = M.file_series&#xD;&#xA;&#x9;&#x9;&#x9; AND&#x9;T.file_nbr  = M.file_nbr  &#xD;&#xA;&#x9;&#x9;WHERE&#x9; ind_import  = 0&#xD;&#xA;&#x9;&#x9; AND&#x9; NOT EXISTS&#xD;&#xA;&#x9;&#x9;&#x9;(&#xD;&#xA;&#x9;&#x9; &#x9;SELECT&#xD;&#xA;&#x9;&#x9;&#x9;&#x9;&#x9; CF_CLASS_IPC.ipc_edition_code,&#xD;&#xA;&#x9;&#x9;&#x9;&#x9;&#x9; CF_CLASS_IPC.ipc_section_code,&#xD;&#xA;&#x9;&#x9;&#x9;&#x9;&#x9; CF_CLASS_IPC.ipc_class_code,&#xD;&#xA;&#x9;&#x9;&#x9;&#x9;&#x9; CF_CLASS_IPC.ipc_subclass_code,&#xD;&#xA;&#x9;&#x9;&#x9;&#x9;&#x9; CF_CLASS_IPC.ipc_group_code,&#xD;&#xA;&#x9;&#x9;&#x9;&#x9;&#x9; CF_CLASS_IPC.ipc_subgroup_code&#xD;&#xA;&#x9;&#x9;&#x9;FROM  CF_CLASS_IPC &#xD;&#xA;&#x9;&#x9;&#x9;WHERE&#x9; CF_CLASS_IPC.ipc_edition_code  = T.IPC_EDITION&#x9;&#x9;COLLATE DATABASE_DEFAULT &#xD;&#xA;&#x9;&#x9;&#x9; AND&#x9;CF_CLASS_IPC.ipc_section_code  = T.IPC_SECTION&#x9;&#x9;COLLATE DATABASE_DEFAULT &#xD;&#xA;&#x9;&#x9;&#x9; AND&#x9;CF_CLASS_IPC.ipc_class_code  = T.IPC_CLASS&#x9;&#x9;&#x9;COLLATE DATABASE_DEFAULT &#xD;&#xA;&#x9;&#x9;&#x9; AND&#x9;CF_CLASS_IPC.ipc_subclass_code  = T.IPC_SUBCLASS&#x9;COLLATE DATABASE_DEFAULT &#xD;&#xA;&#x9;&#x9;&#x9; AND&#x9;CF_CLASS_IPC.ipc_group_code  = T.IPC_GROUP&#x9;&#x9;&#x9;COLLATE DATABASE_DEFAULT &#xD;&#xA;&#x9;&#x9;&#x9; AND&#x9;CF_CLASS_IPC.ipc_subgroup_code  = T.IPC_SUBGROUP&#x9;COLLATE DATABASE_DEFAULT &#xD;&#xA;&#x9;&#x9;&#x9;)&#xD;&#xA;&#x9;&#x9;&#xD;&#xA;&#x9;&#x9;/* Generate work table with IPC class and COUNT(*) */&#xD;&#xA;&#x9;&#x9;TRUNCATE TABLE wrk_file_detail_count&#xD;&#xA;&#xD;&#xA;&#x9;&#x9;INSERT INTO  wrk_file_detail_count    &#xD;&#xA;&#x9;&#x9;SELECT&#xD;&#xA;&#x9;&#x9;&#x9;&#x9; FILE_SEQ,&#xD;&#xA;&#x9;&#x9;&#x9;&#x9; FILE_TYPE,&#xD;&#xA;&#x9;&#x9;&#x9;&#x9; FILE_SERIES,&#xD;&#xA;&#x9;&#x9;&#x9;&#x9; FILE_NBR,&#xD;&#xA;&#x9;&#x9;&#x9;&#x9; CAST(IPC_EDITION AS VARCHAR) + CAST(IPC_SECTION AS VARCHAR) + CAST(IPC_CLASS AS VARCHAR) + CAST(IPC_SUBCLASS AS VARCHAR) + CAST(IPC_GROUP AS VARCHAR) + CAST(IPC_SUBGROUP AS VARCHAR),&#xD;&#xA;&#x9;&#x9;&#x9;&#x9; COUNT(*) count1&#xD;&#xA;&#x9;&#x9;FROM   [&quot;+ context.intermediateDB + &quot;].[dbo].VW_IMPORT_PATENT_IPC_CLASSES &#xD;&#xA;&#x9;&#x9;GROUP BY FILE_SEQ,&#xD;&#xA;&#x9;&#x9;&#x9; FILE_TYPE,&#xD;&#xA;&#x9;&#x9;&#x9; FILE_SERIES,&#xD;&#xA;&#x9;&#x9;&#x9; FILE_NBR,&#xD;&#xA;&#x9;&#x9;&#x9;  CAST(IPC_EDITION AS VARCHAR) + CAST(IPC_SECTION AS VARCHAR) + CAST(IPC_CLASS AS VARCHAR) + CAST(IPC_SUBCLASS AS VARCHAR) + CAST(IPC_GROUP AS VARCHAR) + CAST(IPC_SUBGROUP AS VARCHAR) &#xD;&#xA;&#x9;&#x9;&#xD;&#xA;&#x9;&#x9;/* If several tuples exist for the same IPC class, message ?Several IPC classes with the same number? */&#xD;&#xA;&#x9;&#x9;INSERT INTO   [&quot;+ context.intermediateDB + &quot;].[dbo].VW_IMPORT_PATENT_RESULT   &#xD;&#xA;&#x9;&#x9;&#x9;&#x9;( file_seq , &#xD;&#xA;&#x9;&#x9;&#x9;&#x9;file_type , &#xD;&#xA;&#x9;&#x9;&#x9;&#x9;file_series , &#xD;&#xA;&#x9;&#x9;&#x9;&#x9;file_nbr , &#xD;&#xA;&#x9;&#x9;&#x9;&#x9;ind_import , &#xD;&#xA;&#x9;&#x9;&#x9;&#x9;msg_import )  &#xD;&#xA;&#x9;&#x9;SELECT&#xD;&#xA;&#x9;&#x9;&#x9;&#x9; M.file_seq,&#xD;&#xA;&#x9;&#x9;&#x9;&#x9; M.file_type,&#xD;&#xA;&#x9;&#x9;&#x9;&#x9; M.file_series,&#xD;&#xA;&#x9;&#x9;&#x9;&#x9; M.file_nbr,&#xD;&#xA;&#x9;&#x9;&#x9;&#x9; 2,&#xD;&#xA;&#x9;&#x9;&#x9;&#x9; 'Several IPC classes with the same number'&#xD;&#xA;&#x9;&#x9;FROM   [&quot;+ context.intermediateDB + &quot;].[dbo].VW_import_patent M &#xD;&#xA;&#x9;&#x9; JOIN wrk_file_detail_count W ON M.file_seq  = W.file_seq&#xD;&#xA;&#x9;&#x9;&#x9; AND&#x9;M.file_type  = W.file_type&#xD;&#xA;&#x9;&#x9;&#x9; AND&#x9;M.file_series  = W.file_series&#xD;&#xA;&#x9;&#x9;&#x9; AND&#x9;M.file_nbr  = W.file_nbr  &#xD;&#xA;&#x9;&#x9;WHERE&#x9; ind_import  = 0&#xD;&#xA;&#x9;&#x9; AND&#x9;count1  > 1&#xD;&#xA;&#x9;&#x9;&#xD;&#xA;&#x9;&#x9;/* 1.1.6  [&quot;+ context.intermediateDB + &quot;].[dbo].VW_IMPORT_PATENT_LOCAR_CLASSES validations */&#xD;&#xA;&#x9;&#x9;/* If Locarno is null, message ?Locarno class/subclass is null? */&#xD;&#xA;&#x9;&#x9;INSERT INTO   [&quot;+ context.intermediateDB + &quot;].[dbo].VW_IMPORT_PATENT_RESULT   &#xD;&#xA;&#x9;&#x9;&#x9;&#x9;( file_seq , &#xD;&#xA;&#x9;&#x9;&#x9;&#x9;file_type , &#xD;&#xA;&#x9;&#x9;&#x9;&#x9;file_series , &#xD;&#xA;&#x9;&#x9;&#x9;&#x9;file_nbr , &#xD;&#xA;&#x9;&#x9;&#x9;&#x9;ind_import , &#xD;&#xA;&#x9;&#x9;&#x9;&#x9;msg_import )  &#xD;&#xA;&#x9;&#x9;SELECT&#xD;&#xA;&#x9;&#x9;&#x9;&#x9; T.file_seq,&#xD;&#xA;&#x9;&#x9;&#x9;&#x9; T.file_type,&#xD;&#xA;&#x9;&#x9;&#x9;&#x9; T.file_series,&#xD;&#xA;&#x9;&#x9;&#x9;&#x9; T.file_nbr,&#xD;&#xA;&#x9;&#x9;&#x9;&#x9; 2,&#xD;&#xA;&#x9;&#x9;&#x9;&#x9; 'Locarno class/subclass is null'&#xD;&#xA;&#x9;&#x9;FROM   [&quot;+ context.intermediateDB + &quot;].[dbo].VW_import_patent_locar_classes T &#xD;&#xA;&#x9;&#x9; JOIN  [&quot;+ context.intermediateDB + &quot;].[dbo].VW_import_patent M ON T.file_seq  = M.file_seq&#xD;&#xA;&#x9;&#x9;&#x9; AND&#x9;T.file_type  = M.file_type&#xD;&#xA;&#x9;&#x9;&#x9; AND&#x9;T.file_series  = M.file_series&#xD;&#xA;&#x9;&#x9;&#x9; AND&#x9;T.file_nbr  = M.file_nbr  &#xD;&#xA;&#x9;&#x9;WHERE&#x9; ind_import  = 0&#xD;&#xA;&#x9;&#x9; AND&#x9;( (LOCARNO_CLASS_NBR is null or&#xD;&#xA;                         LOCARNO_SUBCLASS_NBR is null) and  ( LOCARNO_EDITION_CODE NOT In (select LOCARNO_EDITION_CODE from   CF_CLASS_LOCARNO) ) )&#xD;&#xA;                         &#xD;&#xA;&#x9;&#x9;&#xD;&#xA;&#x9;&#x9;/* If Locarno not exists in CF_CLASS_LOCARNO, message ?Invalid Locarno class? */&#xD;&#xA;&#x9;&#x9;INSERT INTO   [&quot;+ context.intermediateDB + &quot;].[dbo].VW_IMPORT_PATENT_RESULT   &#xD;&#xA;&#x9;&#x9;&#x9;&#x9;( file_seq , &#xD;&#xA;&#x9;&#x9;&#x9;&#x9;file_type , &#xD;&#xA;&#x9;&#x9;&#x9;&#x9;file_series , &#xD;&#xA;&#x9;&#x9;&#x9;&#x9;file_nbr , &#xD;&#xA;&#x9;&#x9;&#x9;&#x9;ind_import , &#xD;&#xA;&#x9;&#x9;&#x9;&#x9;msg_import )  &#xD;&#xA;&#x9;&#x9;SELECT&#xD;&#xA;&#x9;&#x9;&#x9;&#x9; T.file_seq,&#xD;&#xA;&#x9;&#x9;&#x9;&#x9; T.file_type,&#xD;&#xA;&#x9;&#x9;&#x9;&#x9; T.file_series,&#xD;&#xA;&#x9;&#x9;&#x9;&#x9; T.file_nbr,&#xD;&#xA;&#x9;&#x9;&#x9;&#x9; 2,&#xD;&#xA;&#x9;&#x9;&#x9;&#x9; 'Invalid Locarno class'&#xD;&#xA;&#x9;&#x9;FROM   [&quot;+ context.intermediateDB + &quot;].[dbo].VW_import_patent_locar_classes T &#xD;&#xA;&#x9;&#x9; JOIN  [&quot;+ context.intermediateDB + &quot;].[dbo].VW_import_patent M ON T.file_seq  = M.file_seq&#xD;&#xA;&#x9;&#x9;&#x9; AND&#x9;T.file_type  = M.file_type&#xD;&#xA;&#x9;&#x9;&#x9; AND&#x9;T.file_series  = M.file_series&#xD;&#xA;&#x9;&#x9;&#x9; AND&#x9;T.file_nbr  = M.file_nbr  &#xD;&#xA;&#x9;&#x9;WHERE&#x9; ind_import  = 0&#xD;&#xA;&#x9;&#x9; AND&#x9;(right('0' + CONVERT(varchar, LOCARNO_CLASS_NBR), 2) + '-' + right('0' + CONVERT(varchar, LOCARNO_SUBCLASS_NBR), 2))  not in&#xD;&#xA;&#x9;&#x9;&#x9;(&#xD;&#xA;&#x9;&#x9; &#x9;SELECT locarno_class_code&#xD;&#xA;&#x9;&#x9;&#x9;FROM  CF_CLASS_LOCARNO &#xD;&#xA;&#x9;&#x9;&#x9;)&#xD;&#xA;&#x9;&#x9;&#xD;&#xA;&#x9;&#x9;/* Generate work table with FILE_SEQ, FILE_TYPE, FILE_SERIES, FILE_NBR, Locarno class and COUNT(*) */&#xD;&#xA;&#x9;&#x9;TRUNCATE TABLE wrk_file_detail_count&#xD;&#xA;&#xD;&#xA;&#x9;&#x9;INSERT INTO  wrk_file_detail_count    &#xD;&#xA;&#x9;&#x9;SELECT&#xD;&#xA;&#x9;&#x9;&#x9;&#x9; FILE_SEQ,&#xD;&#xA;&#x9;&#x9;&#x9;&#x9; FILE_TYPE,&#xD;&#xA;&#x9;&#x9;&#x9;&#x9; FILE_SERIES,&#xD;&#xA;&#x9;&#x9;&#x9;&#x9; FILE_NBR,&#xD;&#xA;&#x9;&#x9;&#x9;&#x9; CAST(CONVERT(VARCHAR(23), LOCARNO_CLASS_NBR) AS VARCHAR) + '-' + CAST(CONVERT(VARCHAR(23), LOCARNO_SUBCLASS_NBR) AS VARCHAR),&#xD;&#xA;&#x9;&#x9;&#x9;&#x9; COUNT(*)&#xD;&#xA;&#x9;&#x9;FROM   [&quot;+ context.intermediateDB + &quot;].[dbo].VW_IMPORT_PATENT_LOCAR_CLASSES &#xD;&#xA;&#x9;&#x9;GROUP BY FILE_SEQ,&#xD;&#xA;&#x9;&#x9;&#x9;&#x9; FILE_TYPE,&#xD;&#xA;&#x9;&#x9;&#x9;&#x9; FILE_SERIES,&#xD;&#xA;&#x9;&#x9;&#x9;&#x9; FILE_NBR,&#xD;&#xA;&#x9;&#x9;&#x9;&#x9; CAST(CONVERT(VARCHAR(23), LOCARNO_CLASS_NBR) AS VARCHAR) + '-' + CAST(CONVERT(VARCHAR(23), LOCARNO_SUBCLASS_NBR) AS VARCHAR)&#xD;&#xA;&#x9;&#x9;&#xD;&#xA;&#x9;&#x9;/* If several tuples exist for the same Locarno class, message ?Several Locarno classes with the same number? */&#xD;&#xA;&#x9;&#x9;INSERT INTO   [&quot;+ context.intermediateDB + &quot;].[dbo].VW_IMPORT_PATENT_RESULT   &#xD;&#xA;&#x9;&#x9;&#x9;&#x9;( file_seq , &#xD;&#xA;&#x9;&#x9;&#x9;&#x9;file_type , &#xD;&#xA;&#x9;&#x9;&#x9;&#x9;file_series , &#xD;&#xA;&#x9;&#x9;&#x9;&#x9;file_nbr , &#xD;&#xA;&#x9;&#x9;&#x9;&#x9;ind_import , &#xD;&#xA;&#x9;&#x9;&#x9;&#x9;msg_import )  &#xD;&#xA;&#x9;&#x9;SELECT&#xD;&#xA;&#x9;&#x9;&#x9;&#x9; M.file_seq,&#xD;&#xA;&#x9;&#x9;&#x9;&#x9; M.file_type,&#xD;&#xA;&#x9;&#x9;&#x9;&#x9; M.file_series,&#xD;&#xA;&#x9;&#x9;&#x9;&#x9; M.file_nbr,&#xD;&#xA;&#x9;&#x9;&#x9;&#x9; 2,&#xD;&#xA;&#x9;&#x9;&#x9;&#x9; 'Several Locarno classes with the same number'&#xD;&#xA;&#x9;&#x9;FROM   [&quot;+ context.intermediateDB + &quot;].[dbo].VW_import_patent M &#xD;&#xA;&#x9;&#x9; JOIN wrk_file_detail_count W ON M.file_seq  = W.file_seq&#xD;&#xA;&#x9;&#x9;&#x9; AND&#x9;M.file_type  = W.file_type&#xD;&#xA;&#x9;&#x9;&#x9; AND&#x9;M.file_series  = W.file_series&#xD;&#xA;&#x9;&#x9;&#x9; AND&#x9;M.file_nbr  = W.file_nbr  &#xD;&#xA;&#x9;&#x9;WHERE&#x9; ind_import  = 0&#xD;&#xA;&#x9;&#x9; AND&#x9;count1  > 1&#xD;&#xA;&#x9;&#x9;&#xD;&#xA;&#x9;&#x9;/* 1.1.7  [&quot;+ context.intermediateDB + &quot;].[dbo].VW_IMPORT_PATENT_DRAWINGS validations */&#xD;&#xA;&#x9;&#x9;/* Generate work table with drawing nbr and COUNT(*) */&#xD;&#xA;&#x9;&#x9;TRUNCATE TABLE wrk_file_detail_count&#xD;&#xA;&#xD;&#xA;&#x9;&#x9;INSERT INTO  wrk_file_detail_count    &#xD;&#xA;&#x9;&#x9;SELECT&#xD;&#xA;&#x9;&#x9;&#x9;&#x9; FILE_SEQ,&#xD;&#xA;&#x9;&#x9;&#x9;&#x9; FILE_TYPE,&#xD;&#xA;&#x9;&#x9;&#x9;&#x9; FILE_SERIES,&#xD;&#xA;&#x9;&#x9;&#x9;&#x9; FILE_NBR,&#xD;&#xA;&#x9;&#x9;&#x9;&#x9; CAST(DRAWING_NBR AS VARCHAR),&#xD;&#xA;&#x9;&#x9;&#x9;&#x9; COUNT(*) count1&#xD;&#xA;&#x9;&#x9;FROM   [&quot;+ context.intermediateDB + &quot;].[dbo].VW_IMPORT_PATENT_DRAWINGS &#xD;&#xA;&#x9;&#x9;GROUP BY FILE_SEQ,&#xD;&#xA;&#x9;&#x9;&#x9; FILE_TYPE,&#xD;&#xA;&#x9;&#x9;&#x9; FILE_SERIES,&#xD;&#xA;&#x9;&#x9;&#x9; FILE_NBR,&#xD;&#xA;&#x9;&#x9;&#x9; CAST(DRAWING_NBR AS VARCHAR)&#xD;&#xA;&#x9;&#x9;&#xD;&#xA;&#x9;&#x9;/* If several tuples exist for the same drawing nbr, message ?Several drawings with the same number? */&#xD;&#xA;&#x9;&#x9;INSERT INTO   [&quot;+ context.intermediateDB + &quot;].[dbo].VW_IMPORT_PATENT_RESULT   &#xD;&#xA;&#x9;&#x9;&#x9;&#x9;( file_seq , &#xD;&#xA;&#x9;&#x9;&#x9;&#x9;file_type , &#xD;&#xA;&#x9;&#x9;&#x9;&#x9;file_series , &#xD;&#xA;&#x9;&#x9;&#x9;&#x9;file_nbr , &#xD;&#xA;&#x9;&#x9;&#x9;&#x9;ind_import , &#xD;&#xA;&#x9;&#x9;&#x9;&#x9;msg_import )  &#xD;&#xA;&#x9;&#x9;SELECT&#xD;&#xA;&#x9;&#x9;&#x9;&#x9; M.file_seq,&#xD;&#xA;&#x9;&#x9;&#x9;&#x9; M.file_type,&#xD;&#xA;&#x9;&#x9;&#x9;&#x9; M.file_series,&#xD;&#xA;&#x9;&#x9;&#x9;&#x9; M.file_nbr,&#xD;&#xA;&#x9;&#x9;&#x9;&#x9; 2,&#xD;&#xA;&#x9;&#x9;&#x9;&#x9; 'Several drawings with the same number'&#xD;&#xA;&#x9;&#x9;FROM   [&quot;+ context.intermediateDB + &quot;].[dbo].VW_import_patent M &#xD;&#xA;&#x9;&#x9; JOIN wrk_file_detail_count W ON M.file_seq  = W.file_seq&#xD;&#xA;&#x9;&#x9;&#x9; AND&#x9;M.file_type  = W.file_type&#xD;&#xA;&#x9;&#x9;&#x9; AND&#x9;M.file_series  = W.file_series&#xD;&#xA;&#x9;&#x9;&#x9; AND&#x9;M.file_nbr  = W.file_nbr  &#xD;&#xA;&#x9;&#x9;WHERE&#x9; ind_import  = 0&#xD;&#xA;&#x9;&#x9; AND&#x9;count1  > 1&#xD;&#xA;&#x9;&#x9;&#xD;&#xA;&#x9;&#x9;/* 1.1.8  [&quot;+ context.intermediateDB + &quot;].[dbo].VW_IMPORT_PATENT_PAYMENTS validations */&#xD;&#xA;&#x9;&#x9;/* RECEIPT_TYPE: if not exists in CF_RECEIPT_TYPE, message ?Invalid receipt type? */&#xD;&#xA;&#x9;&#x9;INSERT INTO   [&quot;+ context.intermediateDB + &quot;].[dbo].VW_IMPORT_PATENT_RESULT   &#xD;&#xA;&#x9;&#x9;&#x9;&#x9;( file_seq , &#xD;&#xA;&#x9;&#x9;&#x9;&#x9;file_type , &#xD;&#xA;&#x9;&#x9;&#x9;&#x9;file_series , &#xD;&#xA;&#x9;&#x9;&#x9;&#x9;file_nbr , &#xD;&#xA;&#x9;&#x9;&#x9;&#x9;ind_import , &#xD;&#xA;&#x9;&#x9;&#x9;&#x9;msg_import )  &#xD;&#xA;&#x9;&#x9;SELECT&#xD;&#xA;&#x9;&#x9;&#x9;&#x9; T.file_seq,&#xD;&#xA;&#x9;&#x9;&#x9;&#x9; T.file_type,&#xD;&#xA;&#x9;&#x9;&#x9;&#x9; T.file_series,&#xD;&#xA;&#x9;&#x9;&#x9;&#x9; T.file_nbr,&#xD;&#xA;&#x9;&#x9;&#x9;&#x9; 2,&#xD;&#xA;&#x9;&#x9;&#x9;&#x9; 'Invalid receipt type'&#xD;&#xA;&#x9;&#x9;FROM   [&quot;+ context.intermediateDB + &quot;].[dbo].VW_import_patent_payments T &#xD;&#xA;&#x9;&#x9; JOIN  [&quot;+ context.intermediateDB + &quot;].[dbo].VW_import_patent M ON T.file_seq  = M.file_seq&#xD;&#xA;&#x9;&#x9;&#x9; AND&#x9;T.file_type  = M.file_type&#xD;&#xA;&#x9;&#x9;&#x9; AND&#x9;T.file_series  = M.file_series&#xD;&#xA;&#x9;&#x9;&#x9; AND&#x9;T.file_nbr  = M.file_nbr  &#xD;&#xA;&#x9;&#x9;WHERE&#x9; ind_import  = 0&#xD;&#xA;&#x9;&#x9; AND&#x9;RECEIPT_TYPE  COLLATE DATABASE_DEFAULT not in&#xD;&#xA;&#x9;&#x9;&#x9;(&#xD;&#xA;&#x9;&#x9; &#x9;SELECT RECEIPT_TYP&#xD;&#xA;&#x9;&#x9;&#x9;FROM  CF_RECEIPT_TYPE &#xD;&#xA;&#x9;&#x9;&#x9;)&#xD;&#xA;&#x9;&#x9;&#xD;&#xA;&#x9;&#x9;/* CURRENCY_TYPE: if not exists in CF_CURRENCY_TYPE, message ?Invalid currency type? */&#xD;&#xA;&#x9;&#x9;INSERT INTO   [&quot;+ context.intermediateDB + &quot;].[dbo].VW_IMPORT_PATENT_RESULT   &#xD;&#xA;&#x9;&#x9;&#x9;&#x9;( file_seq , &#xD;&#xA;&#x9;&#x9;&#x9;&#x9;file_type , &#xD;&#xA;&#x9;&#x9;&#x9;&#x9;file_series , &#xD;&#xA;&#x9;&#x9;&#x9;&#x9;file_nbr , &#xD;&#xA;&#x9;&#x9;&#x9;&#x9;ind_import , &#xD;&#xA;&#x9;&#x9;&#x9;&#x9;msg_import )  &#xD;&#xA;&#x9;&#x9;SELECT&#xD;&#xA;&#x9;&#x9;&#x9;&#x9; T.file_seq,&#xD;&#xA;&#x9;&#x9;&#x9;&#x9; T.file_type,&#xD;&#xA;&#x9;&#x9;&#x9;&#x9; T.file_series,&#xD;&#xA;&#x9;&#x9;&#x9;&#x9; T.file_nbr,&#xD;&#xA;&#x9;&#x9;&#x9;&#x9; 2,&#xD;&#xA;&#x9;&#x9;&#x9;&#x9; 'Invalid currency type'&#xD;&#xA;&#x9;&#x9;FROM   [&quot;+ context.intermediateDB + &quot;].[dbo].VW_import_patent_payments T &#xD;&#xA;&#x9;&#x9; JOIN  [&quot;+ context.intermediateDB + &quot;].[dbo].VW_import_patent M ON T.file_seq  = M.file_seq&#xD;&#xA;&#x9;&#x9;&#x9; AND&#x9;T.file_type  = M.file_type&#xD;&#xA;&#x9;&#x9;&#x9; AND&#x9;T.file_series  = M.file_series&#xD;&#xA;&#x9;&#x9;&#x9; AND&#x9;T.file_nbr  = M.file_nbr  &#xD;&#xA;&#x9;&#x9;WHERE&#x9; ind_import  = 0&#xD;&#xA;&#x9;&#x9; AND&#x9;CURRENCY_TYPE  COLLATE DATABASE_DEFAULT not in&#xD;&#xA;&#x9;&#x9;&#x9;(&#xD;&#xA;&#x9;&#x9; &#x9;SELECT CURRENCY_TYP&#xD;&#xA;&#x9;&#x9;&#x9;FROM  CF_CURRENCY_TYPE &#xD;&#xA;&#x9;&#x9;&#x9;)&#xD;&#xA;&#x9;&#x9;&#xD;&#xA;&#x9;&#x9;/* Generate work table with FILE_SEQ / TYPE / SERIES / NBR, RECEIPT_NBR and COUNT(*) */&#xD;&#xA;&#x9;&#x9;TRUNCATE TABLE wrk_file_payment_count&#xD;&#xA;&#xD;&#xA;&#x9;&#x9;INSERT INTO  wrk_file_payment_count    &#xD;&#xA;&#x9;&#x9;SELECT&#xD;&#xA;&#x9;&#x9;&#x9;&#x9; FILE_SEQ,&#xD;&#xA;&#x9;&#x9;&#x9;&#x9; FILE_TYPE,&#xD;&#xA;&#x9;&#x9;&#x9;&#x9; FILE_SERIES,&#xD;&#xA;&#x9;&#x9;&#x9;&#x9; FILE_NBR,&#xD;&#xA;&#x9;&#x9;&#x9;&#x9; RECEIPT_NBR,&#xD;&#xA;&#x9;&#x9;&#x9;&#x9; COUNT(*) count1&#xD;&#xA;&#x9;&#x9;FROM   [&quot;+ context.intermediateDB + &quot;].[dbo].VW_IMPORT_PATENT_PAYMENTS &#xD;&#xA;&#x9;&#x9;GROUP BY FILE_SEQ,&#xD;&#xA;&#x9;&#x9;&#x9; FILE_TYPE,&#xD;&#xA;&#x9;&#x9;&#x9; FILE_SERIES,&#xD;&#xA;&#x9;&#x9;&#x9; FILE_NBR,&#xD;&#xA;&#x9;&#x9;&#x9;  RECEIPT_NBR &#xD;&#xA;&#x9;&#x9;&#xD;&#xA;&#x9;&#x9;/* Several payments with same receipt nbr: where exists corresponding tuple in the work table with &#xD;&#xA;&#x9;&#x9;      count column > 1, message ?Several payments with the same receipt number? */&#xD;&#xA;&#x9;&#x9;INSERT INTO   [&quot;+ context.intermediateDB + &quot;].[dbo].VW_IMPORT_PATENT_RESULT   &#xD;&#xA;&#x9;&#x9;&#x9;&#x9;( file_seq , &#xD;&#xA;&#x9;&#x9;&#x9;&#x9;file_type , &#xD;&#xA;&#x9;&#x9;&#x9;&#x9;file_series , &#xD;&#xA;&#x9;&#x9;&#x9;&#x9;file_nbr , &#xD;&#xA;&#x9;&#x9;&#x9;&#x9;ind_import , &#xD;&#xA;&#x9;&#x9;&#x9;&#x9;msg_import )  &#xD;&#xA;&#x9;&#x9;SELECT&#xD;&#xA;&#x9;&#x9;&#x9;&#x9; T.file_seq,&#xD;&#xA;&#x9;&#x9;&#x9;&#x9; T.file_type,&#xD;&#xA;&#x9;&#x9;&#x9;&#x9; T.file_series,&#xD;&#xA;&#x9;&#x9;&#x9;&#x9; T.file_nbr,&#xD;&#xA;&#x9;&#x9;&#x9;&#x9; 2,&#xD;&#xA;&#x9;&#x9;&#x9;&#x9; 'Several payments with the same receipt number'&#xD;&#xA;&#x9;&#x9;FROM   [&quot;+ context.intermediateDB + &quot;].[dbo].VW_import_patent_payments T &#xD;&#xA;&#x9;&#x9; JOIN  [&quot;+ context.intermediateDB + &quot;].[dbo].VW_import_patent M ON T.file_seq  = M.file_seq&#xD;&#xA;&#x9;&#x9;&#x9; AND&#x9;T.file_type  = M.file_type&#xD;&#xA;&#x9;&#x9;&#x9; AND&#x9;T.file_series  = M.file_series&#xD;&#xA;&#x9;&#x9;&#x9; AND&#x9;T.file_nbr  = M.file_nbr  &#xD;&#xA;&#x9;&#x9; JOIN wrk_file_payment_count W ON T.file_seq  = W.file_seq&#xD;&#xA;&#x9;&#x9;&#x9; AND&#x9;T.file_type  = W.file_type&#xD;&#xA;&#x9;&#x9;&#x9; AND&#x9;T.file_series  = W.file_series&#xD;&#xA;&#x9;&#x9;&#x9; AND&#x9;T.file_nbr  = W.file_nbr  &#xD;&#xA;&#x9;&#x9;WHERE&#x9; ind_import  = 0&#xD;&#xA;&#x9;&#x9; AND&#x9;count1  > 1&#xD;&#xA;&#x9;&#x9;&#xD;&#xA;&#x9;&#x9;/* 1.1.9  [&quot;+ context.intermediateDB + &quot;].[dbo].VW_IMPORT_PATENT_ACTIONS validations */&#xD;&#xA;&#x9;&#x9;/* If CF_APPLICATION_TYPE.GENERATE_PROC_TYP is null, message ?The application type is not configured so as to generate a process? */&#xD;&#xA;&#x9;&#x9;INSERT INTO   [&quot;+ context.intermediateDB + &quot;].[dbo].VW_IMPORT_PATENT_RESULT   &#xD;&#xA;&#x9;&#x9;&#x9;&#x9;( file_seq , &#xD;&#xA;&#x9;&#x9;&#x9;&#x9;file_type , &#xD;&#xA;&#x9;&#x9;&#x9;&#x9;file_series , &#xD;&#xA;&#x9;&#x9;&#x9;&#x9;file_nbr , &#xD;&#xA;&#x9;&#x9;&#x9;&#x9;ind_import , &#xD;&#xA;&#x9;&#x9;&#x9;&#x9;msg_import )  &#xD;&#xA;&#x9;&#x9;SELECT&#xD;&#xA;&#x9;&#x9;&#x9;&#x9; T.file_seq,&#xD;&#xA;&#x9;&#x9;&#x9;&#x9; T.file_type,&#xD;&#xA;&#x9;&#x9;&#x9;&#x9; T.file_series,&#xD;&#xA;&#x9;&#x9;&#x9;&#x9; T.file_nbr,&#xD;&#xA;&#x9;&#x9;&#x9;&#x9; 2,&#xD;&#xA;&#x9;&#x9;&#x9;&#x9; 'The application type is not configured so as to generate a process'&#xD;&#xA;&#x9;&#x9;FROM   [&quot;+ context.intermediateDB + &quot;].[dbo].VW_import_patent_actions T &#xD;&#xA;&#x9;&#x9; JOIN  [&quot;+ context.intermediateDB + &quot;].[dbo].VW_import_patent M ON T.file_seq  = M.file_seq&#xD;&#xA;&#x9;&#x9;&#x9; AND&#x9;T.file_type  = M.file_type&#xD;&#xA;&#x9;&#x9;&#x9; AND&#x9;T.file_series  = M.file_series&#xD;&#xA;&#x9;&#x9;&#x9; AND&#x9;T.file_nbr  = M.file_nbr  &#xD;&#xA;&#x9;&#x9; JOIN cf_application_type AT ON M.application_type  = AT.appl_typ&#x9;COLLATE DATABASE_DEFAULT  &#xD;&#xA;&#x9;&#x9;WHERE&#x9; GENERATE_PROC_TYP  is null&#xD;&#xA;&#x9;&#x9;&#xD;&#xA;&#x9;&#x9;/* ACTION_TYPE: if not exists in CF_ACTION_TYPE, message ?Invalid action type? */&#xD;&#xA;&#x9;&#x9;/* Performace note: join with  [&quot;+ context.intermediateDB + &quot;].[dbo].VW_IMPORT_PATENT to select patents with IND_IMPORT = 0 */&#xD;&#xA;&#x9;&#x9;INSERT INTO   [&quot;+ context.intermediateDB + &quot;].[dbo].VW_IMPORT_PATENT_RESULT   &#xD;&#xA;&#x9;&#x9;&#x9;&#x9;( file_seq , &#xD;&#xA;&#x9;&#x9;&#x9;&#x9;file_type , &#xD;&#xA;&#x9;&#x9;&#x9;&#x9;file_series , &#xD;&#xA;&#x9;&#x9;&#x9;&#x9;file_nbr , &#xD;&#xA;&#x9;&#x9;&#x9;&#x9;ind_import , &#xD;&#xA;&#x9;&#x9;&#x9;&#x9;msg_import )  &#xD;&#xA;&#x9;&#x9;SELECT&#xD;&#xA;&#x9;&#x9;&#x9;&#x9; T.file_seq,&#xD;&#xA;&#x9;&#x9;&#x9;&#x9; T.file_type,&#xD;&#xA;&#x9;&#x9;&#x9;&#x9; T.file_series,&#xD;&#xA;&#x9;&#x9;&#x9;&#x9; T.file_nbr,&#xD;&#xA;&#x9;&#x9;&#x9;&#x9; 2,&#xD;&#xA;&#x9;&#x9;&#x9;&#x9; 'Invalid action type'&#xD;&#xA;&#x9;&#x9;FROM   [&quot;+ context.intermediateDB + &quot;].[dbo].VW_import_patent_actions T &#xD;&#xA;&#x9;&#x9;WHERE&#x9; ACTION_TYPE  COLLATE DATABASE_DEFAULT not in&#xD;&#xA;&#x9;&#x9;&#x9;(&#xD;&#xA;&#x9;&#x9; &#x9;SELECT action_typ&#xD;&#xA;&#x9;&#x9;&#x9;FROM  cf_action_type &#xD;&#xA;&#x9;&#x9;&#x9;)&#xD;&#xA;&#x9;&#x9;&#xD;&#xA;&#x9;&#x9;/* SPECIAL_FINAL_STATUS: if not null and ACTION_CATEGORY in A / N, message ?Special final status is only applicable for special actions? */&#xD;&#xA;&#x9;&#x9;INSERT INTO   [&quot;+ context.intermediateDB + &quot;].[dbo].VW_IMPORT_PATENT_RESULT   &#xD;&#xA;&#x9;&#x9;&#x9;&#x9;( file_seq , &#xD;&#xA;&#x9;&#x9;&#x9;&#x9;file_type , &#xD;&#xA;&#x9;&#x9;&#x9;&#x9;file_series , &#xD;&#xA;&#x9;&#x9;&#x9;&#x9;file_nbr , &#xD;&#xA;&#x9;&#x9;&#x9;&#x9;ind_import , &#xD;&#xA;&#x9;&#x9;&#x9;&#x9;msg_import )  &#xD;&#xA;&#x9;&#x9;SELECT&#xD;&#xA;&#x9;&#x9;&#x9;&#x9; T.file_seq,&#xD;&#xA;&#x9;&#x9;&#x9;&#x9; T.file_type,&#xD;&#xA;&#x9;&#x9;&#x9;&#x9; T.file_series,&#xD;&#xA;&#x9;&#x9;&#x9;&#x9; T.file_nbr,&#xD;&#xA;&#x9;&#x9;&#x9;&#x9; 2,&#xD;&#xA;&#x9;&#x9;&#x9;&#x9; 'Special final status is only applicable for special actions'&#xD;&#xA;&#x9;&#x9;FROM   [&quot;+ context.intermediateDB + &quot;].[dbo].VW_import_patent_actions T &#xD;&#xA;&#x9;&#x9;WHERE&#x9; SPECIAL_FINAL_STATUS  is not null&#xD;&#xA;&#x9;&#x9; AND&#x9;ACTION_CATEGORY  in ( 'A'  , 'N'  )&#xD;&#xA;&#x9;&#x9;&#xD;&#xA;&#x9;&#x9;/* If ACTION_CATEGORY is S and SPECIAL_FINAL_STATUS is null, message ?Special final status is required? */&#xD;&#xA;&#x9;&#x9;INSERT INTO   [&quot;+ context.intermediateDB + &quot;].[dbo].VW_IMPORT_PATENT_RESULT   &#xD;&#xA;&#x9;&#x9;&#x9;&#x9;( file_seq , &#xD;&#xA;&#x9;&#x9;&#x9;&#x9;file_type , &#xD;&#xA;&#x9;&#x9;&#x9;&#x9;file_series , &#xD;&#xA;&#x9;&#x9;&#x9;&#x9;file_nbr , &#xD;&#xA;&#x9;&#x9;&#x9;&#x9;ind_import , &#xD;&#xA;&#x9;&#x9;&#x9;&#x9;msg_import )  &#xD;&#xA;&#x9;&#x9;SELECT&#xD;&#xA;&#x9;&#x9;&#x9;&#x9; T.file_seq,&#xD;&#xA;&#x9;&#x9;&#x9;&#x9; T.file_type,&#xD;&#xA;&#x9;&#x9;&#x9;&#x9; T.file_series,&#xD;&#xA;&#x9;&#x9;&#x9;&#x9; T.file_nbr,&#xD;&#xA;&#x9;&#x9;&#x9;&#x9; 2,&#xD;&#xA;&#x9;&#x9;&#x9;&#x9; 'Special final status is required'&#xD;&#xA;&#x9;&#x9;FROM   [&quot;+ context.intermediateDB + &quot;].[dbo].VW_import_patent_actions T &#xD;&#xA;&#x9;&#x9;WHERE&#x9; SPECIAL_FINAL_STATUS  is null&#xD;&#xA;&#x9;&#x9; AND&#x9;ACTION_CATEGORY  = 'S'&#xD;&#xA;&#x9;&#x9;&#xD;&#xA;&#x9;&#x9;/* If SPECIAL_FINAL_STATUS is not null and proc_typ / SPECIAL_FINAL_STATUS not exists in CF_STATUS &#xD;&#xA;&#x9;&#x9;       (where proc_typ is CF_APPLICATION_TYPE.GENERATE_PROC_TYP for the corresponding application type), &#xD;&#xA;&#x9;&#x9;       message ?Special final status is not a valid status in the process type associated to the application type? */&#xD;&#xA;&#x9;&#x9;INSERT INTO   [&quot;+ context.intermediateDB + &quot;].[dbo].VW_IMPORT_PATENT_RESULT   &#xD;&#xA;&#x9;&#x9;&#x9;&#x9;( file_seq , &#xD;&#xA;&#x9;&#x9;&#x9;&#x9;file_type , &#xD;&#xA;&#x9;&#x9;&#x9;&#x9;file_series , &#xD;&#xA;&#x9;&#x9;&#x9;&#x9;file_nbr , &#xD;&#xA;&#x9;&#x9;&#x9;&#x9;ind_import , &#xD;&#xA;&#x9;&#x9;&#x9;&#x9;msg_import )  &#xD;&#xA;&#x9;&#x9;SELECT&#xD;&#xA;&#x9;&#x9;&#x9;&#x9; T.file_seq,&#xD;&#xA;&#x9;&#x9;&#x9;&#x9; T.file_type,&#xD;&#xA;&#x9;&#x9;&#x9;&#x9; T.file_series,&#xD;&#xA;&#x9;&#x9;&#x9;&#x9; T.file_nbr,&#xD;&#xA;&#x9;&#x9;&#x9;&#x9; 2,&#xD;&#xA;&#x9;&#x9;&#x9;&#x9; 'Special final status is not a valid status in the process type associated to the application type'&#xD;&#xA;&#x9;&#x9;FROM   [&quot;+ context.intermediateDB + &quot;].[dbo].VW_import_patent_actions T &#xD;&#xA;&#x9;&#x9; JOIN  [&quot;+ context.intermediateDB + &quot;].[dbo].VW_import_patent M ON T.file_seq  = M.file_seq&#xD;&#xA;&#x9;&#x9;&#x9; AND&#x9;T.file_type  = M.file_type&#xD;&#xA;&#x9;&#x9;&#x9; AND&#x9;T.file_series  = M.file_series&#xD;&#xA;&#x9;&#x9;&#x9; AND&#x9;T.file_nbr  = M.file_nbr  &#xD;&#xA;&#x9;&#x9; JOIN cf_application_type AT ON M.application_type  = AT.appl_typ&#x9;COLLATE DATABASE_DEFAULT &#xD;&#xA;&#x9;&#x9;WHERE&#x9; SPECIAL_FINAL_STATUS  is not null&#xD;&#xA;&#x9;&#x9; AND&#x9; NOT EXISTS&#xD;&#xA;&#x9;&#x9;&#x9;(&#xD;&#xA;&#x9;&#x9; &#x9;SELECT&#xD;&#xA;&#x9;&#x9;&#x9;&#x9;&#x9; cf_status.proc_typ,&#xD;&#xA;&#x9;&#x9;&#x9;&#x9;&#x9; cf_status.status_code&#xD;&#xA;&#x9;&#x9;&#x9;FROM  cf_status &#xD;&#xA;&#x9;&#x9;&#x9;WHERE&#x9; cf_status.proc_typ&#x9;&#x9;= AT.GENERATE_PROC_TYP&#x9;&#x9;COLLATE DATABASE_DEFAULT &#xD;&#xA;&#x9;&#x9;&#x9; AND&#x9;cf_status.status_code&#x9;= T.SPECIAL_FINAL_STATUS&#x9;COLLATE DATABASE_DEFAULT &#xD;&#xA;&#x9;&#x9;&#x9;)&#xD;&#xA;&#x9;&#x9;&#xD;&#xA;&#x9;&#x9;/* If SPECIAL_FINAL_STATUS is not null and proc_typ / SPECIAL_FINAL_STATUS is origin for &#xD;&#xA;&#x9;&#x9;       a due date automatic action, then MANUAL_DUE_DATE must not be null. &#xD;&#xA;&#x9;&#x9;       Otherwise, message ?Special final status is origin for a 'date is due' automatic action, but manual due date is null? */&#xD;&#xA;&#x9;&#x9;INSERT INTO   [&quot;+ context.intermediateDB + &quot;].[dbo].VW_IMPORT_PATENT_RESULT   &#xD;&#xA;&#x9;&#x9;&#x9;&#x9;( file_seq , &#xD;&#xA;&#x9;&#x9;&#x9;&#x9;file_type , &#xD;&#xA;&#x9;&#x9;&#x9;&#x9;file_series , &#xD;&#xA;&#x9;&#x9;&#x9;&#x9;file_nbr , &#xD;&#xA;&#x9;&#x9;&#x9;&#x9;ind_import , &#xD;&#xA;&#x9;&#x9;&#x9;&#x9;msg_import )  &#xD;&#xA;&#x9;&#x9;SELECT&#xD;&#xA;&#x9;&#x9;&#x9;&#x9; T.file_seq,&#xD;&#xA;&#x9;&#x9;&#x9;&#x9; T.file_type,&#xD;&#xA;&#x9;&#x9;&#x9;&#x9; T.file_series,&#xD;&#xA;&#x9;&#x9;&#x9;&#x9; T.file_nbr,&#xD;&#xA;&#x9;&#x9;&#x9;&#x9; 2,&#xD;&#xA;&#x9;&#x9;&#x9;&#x9; 'Special final status is origin for a date is due automatic action, but manual due date is null'&#xD;&#xA;&#x9;&#x9;FROM   [&quot;+ context.intermediateDB + &quot;].[dbo].VW_import_patent_actions T &#xD;&#xA;&#x9;&#x9; JOIN  [&quot;+ context.intermediateDB + &quot;].[dbo].VW_import_patent M ON T.file_seq  = M.file_seq&#xD;&#xA;&#x9;&#x9;&#x9; AND&#x9;T.file_type  = M.file_type&#xD;&#xA;&#x9;&#x9;&#x9; AND&#x9;T.file_series  = M.file_series&#xD;&#xA;&#x9;&#x9;&#x9; AND&#x9;T.file_nbr  = M.file_nbr  &#xD;&#xA;&#x9;&#x9; JOIN cf_application_type AT ON M.application_type  = AT.appl_typ&#x9;COLLATE DATABASE_DEFAULT &#xD;&#xA;&#x9;WHERE&#x9;SPECIAL_FINAL_STATUS  is not null&#xD;&#xA;&#x9; AND&#x9;EXISTS&#xD;&#xA;&#x9;&#x9;&#x9;(SELECT&#x9; cf_migration.proc_typ,&#xD;&#xA;&#x9;&#x9;&#x9;&#x9;&#x9; cf_migration.initial_status_code&#xD;&#xA;&#x9;&#x9;&#x9; FROM  cf_migration &#xD;&#xA;&#x9;&#x9;&#x9; WHERE&#x9; action_typ  in&#xD;&#xA;&#x9;&#x9;&#x9;&#x9;(SELECT action_typ&#xD;&#xA;&#x9;&#x9;&#x9;&#x9; FROM  cf_action_type &#xD;&#xA;&#x9;&#x9;&#x9;&#x9; WHERE&#x9; automatic_action_wcode  = 1&#xD;&#xA;&#x9;&#x9;&#x9;&#x9;)&#xD;&#xA;&#x9;&#x9;&#x9; AND&#x9;cf_migration.proc_typ&#x9;&#x9;&#x9;  = AT.GENERATE_PROC_TYP&#x9;COLLATE DATABASE_DEFAULT &#xD;&#xA;&#x9;&#x9;&#x9; AND&#x9;cf_migration.initial_status_code  = T.SPECIAL_FINAL_STATUS&#x9;COLLATE DATABASE_DEFAULT &#xD;&#xA;&#x9;&#x9;&#x9;)&#xD;&#xA;&#x9; AND&#x9;manual_due_date  is null&#xD;&#xA;&#x9;&#x9;&#xD;&#xA;&#x9;&#x9;/* If SPECIAL_FINAL_STATUS is not null and proc_typ / SPECIAL_FINAL_STATUS is not origin for &#xD;&#xA;&#x9;&#x9;       a due date automatic action, then MANUAL_DUE_DATE must be null. &#xD;&#xA;&#x9;&#x9;       Otherwise, message ?Special final status is not origin for a 'date is due' automatic action, but manual due date is not null? */&#xD;&#xA;&#x9;&#x9;INSERT INTO   [&quot;+ context.intermediateDB + &quot;].[dbo].VW_IMPORT_PATENT_RESULT   &#xD;&#xA;&#x9;&#x9;&#x9;&#x9;( file_seq , &#xD;&#xA;&#x9;&#x9;&#x9;&#x9;file_type , &#xD;&#xA;&#x9;&#x9;&#x9;&#x9;file_series , &#xD;&#xA;&#x9;&#x9;&#x9;&#x9;file_nbr , &#xD;&#xA;&#x9;&#x9;&#x9;&#x9;ind_import , &#xD;&#xA;&#x9;&#x9;&#x9;&#x9;msg_import )  &#xD;&#xA;&#x9;&#x9;SELECT&#xD;&#xA;&#x9;&#x9;&#x9;&#x9; T.file_seq,&#xD;&#xA;&#x9;&#x9;&#x9;&#x9; T.file_type,&#xD;&#xA;&#x9;&#x9;&#x9;&#x9; T.file_series,&#xD;&#xA;&#x9;&#x9;&#x9;&#x9; T.file_nbr,&#xD;&#xA;&#x9;&#x9;&#x9;&#x9; 2,&#xD;&#xA;&#x9;&#x9;&#x9;&#x9; 'Special final status is not origin for a date is due automatic action, but manual due date is not null'&#xD;&#xA;&#x9;&#x9;FROM   [&quot;+ context.intermediateDB + &quot;].[dbo].VW_import_patent_actions T &#xD;&#xA;&#x9;&#x9; JOIN  [&quot;+ context.intermediateDB + &quot;].[dbo].VW_import_patent M ON T.file_seq  = M.file_seq&#xD;&#xA;&#x9;&#x9;&#x9; AND&#x9;T.file_type  = M.file_type&#xD;&#xA;&#x9;&#x9;&#x9; AND&#x9;T.file_series  = M.file_series&#xD;&#xA;&#x9;&#x9;&#x9; AND&#x9;T.file_nbr  = M.file_nbr  &#xD;&#xA;&#x9;&#x9; JOIN cf_application_type AT ON M.application_type  = AT.appl_typ&#x9;COLLATE DATABASE_DEFAULT &#xD;&#xA;&#x9;&#x9;WHERE&#x9; SPECIAL_FINAL_STATUS  is not null&#xD;&#xA;&#x9;&#x9; AND&#x9; NOT EXISTS&#xD;&#xA;&#x9;&#x9;&#x9;(SELECT&#x9; cf_migration.proc_typ,&#xD;&#xA;&#x9;&#x9;&#x9;&#x9;&#x9; cf_migration.initial_status_code&#xD;&#xA;&#x9;&#x9;&#x9; FROM  cf_migration &#xD;&#xA;&#x9;&#x9;&#x9; WHERE&#x9; action_typ  in&#xD;&#xA;&#x9;&#x9;&#x9;&#x9;(SELECT action_typ&#xD;&#xA;&#x9;&#x9;&#x9;&#x9; FROM  cf_action_type &#xD;&#xA;&#x9;&#x9;&#x9;&#x9; WHERE&#x9; automatic_action_wcode  = 1&#xD;&#xA;&#x9;&#x9;&#x9;&#x9;)&#xD;&#xA;&#x9;&#x9;&#x9; AND&#x9;cf_migration.proc_typ&#x9;&#x9;&#x9;  = AT.GENERATE_PROC_TYP&#xD;&#xA;&#x9;&#x9;&#x9; AND&#x9;cf_migration.initial_status_code  = T.SPECIAL_FINAL_STATUS&#x9;COLLATE DATABASE_DEFAULT &#xD;&#xA;&#x9;&#x9;&#x9;)&#xD;&#xA;&#x9;&#x9; AND&#x9;manual_due_date  is not null&#xD;&#xA;&#x9;&#x9;&#xD;&#xA;&#x9;&#x9;/* If SPECIAL_FINAL_STATUS is not null and proc_typ / SPECIAL_FINAL_STATUS requires a&#xD;&#xA;&#x9;&#x9;       responsible user, then RESPONSIBLE_USER must not be null. &#xD;&#xA;&#x9;&#x9;       Otherwise, message ?Special final status requires a responsible user to be assigned? */&#xD;&#xA;&#x9;&#x9;INSERT INTO   [&quot;+ context.intermediateDB + &quot;].[dbo].VW_IMPORT_PATENT_RESULT   &#xD;&#xA;&#x9;&#x9;&#x9;&#x9;( file_seq , &#xD;&#xA;&#x9;&#x9;&#x9;&#x9;file_type , &#xD;&#xA;&#x9;&#x9;&#x9;&#x9;file_series , &#xD;&#xA;&#x9;&#x9;&#x9;&#x9;file_nbr , &#xD;&#xA;&#x9;&#x9;&#x9;&#x9;ind_import , &#xD;&#xA;&#x9;&#x9;&#x9;&#x9;msg_import )  &#xD;&#xA;&#x9;&#x9;SELECT&#xD;&#xA;&#x9;&#x9;&#x9;&#x9; T.file_seq,&#xD;&#xA;&#x9;&#x9;&#x9;&#x9; T.file_type,&#xD;&#xA;&#x9;&#x9;&#x9;&#x9; T.file_series,&#xD;&#xA;&#x9;&#x9;&#x9;&#x9; T.file_nbr,&#xD;&#xA;&#x9;&#x9;&#x9;&#x9; 2,&#xD;&#xA;&#x9;&#x9;&#x9;&#x9; 'Special final status requires a responsible user to be assigned'&#xD;&#xA;&#x9;&#x9;FROM   [&quot;+ context.intermediateDB + &quot;].[dbo].VW_import_patent_actions T &#xD;&#xA;&#x9;&#x9; JOIN  [&quot;+ context.intermediateDB + &quot;].[dbo].VW_import_patent M ON T.file_seq  = M.file_seq&#xD;&#xA;&#x9;&#x9;&#x9; AND&#x9;T.file_type  = M.file_type&#xD;&#xA;&#x9;&#x9;&#x9; AND&#x9;T.file_series  = M.file_series&#xD;&#xA;&#x9;&#x9;&#x9; AND&#x9;T.file_nbr  = M.file_nbr  &#xD;&#xA;&#x9;&#x9; JOIN cf_application_type AT ON M.application_type  = AT.appl_typ&#x9;&#x9;COLLATE DATABASE_DEFAULT &#xD;&#xA;&#x9;WHERE&#x9; SPECIAL_FINAL_STATUS  is not null&#xD;&#xA;&#x9; AND&#x9;(GENERATE_PROC_TYP COLLATE DATABASE_DEFAULT + SPECIAL_FINAL_STATUS COLLATE DATABASE_DEFAULT ) COLLATE DATABASE_DEFAULT  IN&#xD;&#xA;&#x9;&#x9;(&#xD;&#xA;&#x9; &#x9;SELECT proc_typ + status_code&#xD;&#xA;&#x9;&#x9;FROM  cf_status &#xD;&#xA;&#x9;&#x9;WHERE&#x9; ind_responsible_req  = 'S'&#xD;&#xA;&#x9;&#x9;)&#xD;&#xA;&#x9; AND&#x9;responsible_user  is null&#xD;&#xA;&#x9;&#x9;&#xD;&#xA;&#x9;&#x9;/* If SPECIAL_FINAL_STATUS is not null and proc_typ / SPECIAL_FINAL_STATUS requires no&#xD;&#xA;&#x9;&#x9;       responsible user, then RESPONSIBLE_USER must be null. &#xD;&#xA;&#x9;&#x9;       Otherwise, message ?Special final status requires no responsible user to be assigned? &#xD;&#xA;&#x9;&#x9;INSERT INTO   [&quot;+ context.intermediateDB + &quot;].[dbo].VW_IMPORT_PATENT_RESULT   &#xD;&#xA;&#x9;&#x9;&#x9;&#x9;( file_seq , &#xD;&#xA;&#x9;&#x9;&#x9;&#x9;file_type , &#xD;&#xA;&#x9;&#x9;&#x9;&#x9;file_series , &#xD;&#xA;&#x9;&#x9;&#x9;&#x9;file_nbr , &#xD;&#xA;&#x9;&#x9;&#x9;&#x9;ind_import , &#xD;&#xA;&#x9;&#x9;&#x9;&#x9;msg_import )  &#xD;&#xA;&#x9;&#x9;SELECT&#xD;&#xA;&#x9;&#x9;&#x9;&#x9; T.file_seq,&#xD;&#xA;&#x9;&#x9;&#x9;&#x9; T.file_type,&#xD;&#xA;&#x9;&#x9;&#x9;&#x9; T.file_series,&#xD;&#xA;&#x9;&#x9;&#x9;&#x9; T.file_nbr,&#xD;&#xA;&#x9;&#x9;&#x9;&#x9; 2,&#xD;&#xA;&#x9;&#x9;&#x9;&#x9; 'Special final status requires no responsible user to be assigned'&#xD;&#xA;&#x9;&#x9;FROM   [&quot;+ context.intermediateDB + &quot;].[dbo].VW_import_patent_actions T &#xD;&#xA;&#x9;&#x9; JOIN  [&quot;+ context.intermediateDB + &quot;].[dbo].VW_import_patent M ON T.file_seq  = M.file_seq&#xD;&#xA;&#x9;&#x9;&#x9; AND&#x9;T.file_type  = M.file_type&#xD;&#xA;&#x9;&#x9;&#x9; AND&#x9;T.file_series  = M.file_series&#xD;&#xA;&#x9;&#x9;&#x9; AND&#x9;T.file_nbr  = M.file_nbr  &#xD;&#xA;&#x9;&#x9; JOIN cf_application_type AT ON M.application_type  = AT.appl_typ&#x9;COLLATE DATABASE_DEFAULT &#xD;&#xA;&#x9;WHERE&#x9; SPECIAL_FINAL_STATUS  is not null&#xD;&#xA;&#x9; AND&#x9; (GENERATE_PROC_TYP + SPECIAL_FINAL_STATUS COLLATE DATABASE_DEFAULT ) NOT IN&#xD;&#xA;&#x9;&#x9;(&#xD;&#xA;&#x9; &#x9;SELECT&#x9;proc_typ + status_code&#xD;&#xA;&#x9;&#x9;FROM  cf_status &#xD;&#xA;&#x9;&#x9;WHERE&#x9; ind_responsible_req  = 'S'&#xD;&#xA;&#x9;&#x9;)&#xD;&#xA;&#x9; AND&#x9;responsible_user  is not null&#xD;&#xA;&#x9;&#x9;*/&#xD;&#xA;&#x9;&#x9;/* If SPECIAL_FINAL_STATUS is not null and proc_typ / SPECIAL_FINAL_STATUS is origin for &#xD;&#xA;&#x9;&#x9;       a end of freezing automatic action, then a freezing document must be specified in tables&#xD;&#xA;&#x9;&#x9;        [&quot;+ context.intermediateDB + &quot;].[dbo].VW_IMPORT_PATENT_FREEZE_FILE or  [&quot;+ context.intermediateDB + &quot;].[dbo].VW_IMPORT_PATENT_FREEZE_UDOC.&#xD;&#xA;&#x9;&#x9;       Otherwise, message ?Special final status is origin for an 'end of freezing' automatic action, but no freezings exist in  [&quot;+ context.intermediateDB + &quot;].[dbo].VW_IMPORT_PATENT_FREEZE_FILE / UDOC? */&#xD;&#xA;&#x9;&#x9;INSERT INTO   [&quot;+ context.intermediateDB + &quot;].[dbo].VW_IMPORT_PATENT_RESULT   &#xD;&#xA;&#x9;&#x9;&#x9;&#x9;( file_seq , &#xD;&#xA;&#x9;&#x9;&#x9;&#x9;file_type , &#xD;&#xA;&#x9;&#x9;&#x9;&#x9;file_series , &#xD;&#xA;&#x9;&#x9;&#x9;&#x9;file_nbr , &#xD;&#xA;&#x9;&#x9;&#x9;&#x9;ind_import , &#xD;&#xA;&#x9;&#x9;&#x9;&#x9;msg_import )  &#xD;&#xA;&#x9;&#x9;SELECT&#xD;&#xA;&#x9;&#x9;&#x9;&#x9; T.file_seq,&#xD;&#xA;&#x9;&#x9;&#x9;&#x9; T.file_type,&#xD;&#xA;&#x9;&#x9;&#x9;&#x9; T.file_series,&#xD;&#xA;&#x9;&#x9;&#x9;&#x9; T.file_nbr,&#xD;&#xA;&#x9;&#x9;&#x9;&#x9; 2,&#xD;&#xA;&#x9;&#x9;&#x9;&#x9; 'Special final status is origin for an end of freezing automatic action, but no freezings exist in  [&quot;+ context.intermediateDB + &quot;].[dbo].VW_IMPORT_PATENT_FREEZE_FILE / UDOC'&#xD;&#xA;&#x9;&#x9;FROM   [&quot;+ context.intermediateDB + &quot;].[dbo].VW_import_patent_actions T &#xD;&#xA;&#x9;&#x9; JOIN  [&quot;+ context.intermediateDB + &quot;].[dbo].VW_import_patent M ON T.file_seq  = M.file_seq&#xD;&#xA;&#x9;&#x9;&#x9; AND&#x9;T.file_type  = M.file_type&#xD;&#xA;&#x9;&#x9;&#x9; AND&#x9;T.file_series  = M.file_series&#xD;&#xA;&#x9;&#x9;&#x9; AND&#x9;T.file_nbr  = M.file_nbr  &#xD;&#xA;&#x9;     JOIN cf_application_type AT ON M.application_type  = AT.appl_typ&#x9;&#x9;COLLATE DATABASE_DEFAULT &#xD;&#xA;&#x9;WHERE&#x9; SPECIAL_FINAL_STATUS  is not null&#xD;&#xA;&#x9; AND&#x9;(GENERATE_PROC_TYP + SPECIAL_FINAL_STATUS COLLATE DATABASE_DEFAULT ) IN&#xD;&#xA;&#x9;&#x9;(&#xD;&#xA;&#x9; &#x9;SELECT proc_typ + initial_status_code&#xD;&#xA;&#x9;&#x9;FROM  cf_migration &#xD;&#xA;&#x9;&#x9;WHERE&#x9; action_typ  in&#xD;&#xA;&#x9;&#x9;&#x9;(&#xD;&#xA;&#x9; &#x9;&#x9;SELECT action_typ&#xD;&#xA;&#x9;&#x9;&#x9;FROM  cf_action_type &#xD;&#xA;&#x9;&#x9;&#x9;WHERE&#x9; automatic_action_wcode  = 2&#xD;&#xA;&#x9;&#x9;&#x9;)&#xD;&#xA;&#x9;&#x9;)&#xD;&#xA;&#x9; AND&#x9;NOT   exists&#xD;&#xA;&#x9;&#x9;(&#xD;&#xA;&#x9; &#x9;SELECT *&#xD;&#xA;&#x9;&#x9;FROM   [&quot;+ context.intermediateDB + &quot;].[dbo].VW_import_mark_file_freezes ff &#xD;&#xA;&#x9;&#x9;WHERE&#x9; ff.file_type  = T.file_type&#xD;&#xA;&#x9;&#x9; AND&#x9;ff.file_seq  = T.file_seq&#xD;&#xA;&#x9;&#x9; AND&#x9;ff.file_series  = T.file_series&#xD;&#xA;&#x9;&#x9; AND&#x9;ff.file_nbr  = T.file_nbr&#xD;&#xA;&#x9;&#x9;)&#xD;&#xA;&#x9; AND&#x9;NOT   exists&#xD;&#xA;&#x9;&#x9;(&#xD;&#xA;&#x9; &#x9;SELECT *&#xD;&#xA;&#x9;&#x9;FROM   [&quot;+ context.intermediateDB + &quot;].[dbo].VW_import_mark_udoc_freezes uf &#xD;&#xA;&#x9;&#x9;WHERE&#x9; uf.file_type  = T.file_type&#xD;&#xA;&#x9;&#x9; AND&#x9;uf.file_seq  = T.file_seq&#xD;&#xA;&#x9;&#x9; AND&#x9;uf.file_series  = T.file_series&#xD;&#xA;&#x9;&#x9; AND&#x9;uf.file_nbr  = T.file_nbr&#xD;&#xA;&#x9;&#x9;)&#xD;&#xA;&#x9;&#x9;&#xD;&#xA;&#x9;&#x9;/* If SPECIAL_FINAL_STATUS is not null and proc_typ / SPECIAL_FINAL_STATUS is not origin for &#xD;&#xA;&#x9;&#x9;       a end of freezing automatic action, then no freezing document must be specified in tables&#xD;&#xA;&#x9;&#x9;        [&quot;+ context.intermediateDB + &quot;].[dbo].VW_IMPORT_PATENT_FREEZE_FILE or  [&quot;+ context.intermediateDB + &quot;].[dbo].VW_IMPORT_PATENT_FREEZE_UDOC.&#xD;&#xA;&#x9;&#x9;       Otherwise, message ?Special final status is not origin for an 'end of freezing' automatic action, but a freezings exist in  [&quot;+ context.intermediateDB + &quot;].[dbo].VW_IMPORT_PATENT_FREEZE_FILE / UDOC? */&#xD;&#xA;&#x9;&#x9;INSERT INTO   [&quot;+ context.intermediateDB + &quot;].[dbo].VW_IMPORT_PATENT_RESULT   &#xD;&#xA;&#x9;&#x9;&#x9;&#x9;( file_seq , &#xD;&#xA;&#x9;&#x9;&#x9;&#x9;file_type , &#xD;&#xA;&#x9;&#x9;&#x9;&#x9;file_series , &#xD;&#xA;&#x9;&#x9;&#x9;&#x9;file_nbr , &#xD;&#xA;&#x9;&#x9;&#x9;&#x9;ind_import , &#xD;&#xA;&#x9;&#x9;&#x9;&#x9;msg_import )  &#xD;&#xA;&#x9;&#x9;SELECT&#xD;&#xA;&#x9;&#x9;&#x9;&#x9; T.file_seq,&#xD;&#xA;&#x9;&#x9;&#x9;&#x9; T.file_type,&#xD;&#xA;&#x9;&#x9;&#x9;&#x9; T.file_series,&#xD;&#xA;&#x9;&#x9;&#x9;&#x9; T.file_nbr,&#xD;&#xA;&#x9;&#x9;&#x9;&#x9; 2,&#xD;&#xA;&#x9;&#x9;&#x9;&#x9; 'Special final status is not origin for an end of freezing automatic action, but a freezings exist in  [&quot;+ context.intermediateDB + &quot;].[dbo].VW_IMPORT_PATENT_FREEZE_FILE / UDOC'&#xD;&#xA;&#x9;&#x9;FROM   [&quot;+ context.intermediateDB + &quot;].[dbo].VW_import_patent_actions T &#xD;&#xA;&#x9;&#x9; JOIN  [&quot;+ context.intermediateDB + &quot;].[dbo].VW_import_patent M ON T.file_seq  = M.file_seq&#xD;&#xA;&#x9;&#x9;&#x9; AND&#x9;T.file_type  = M.file_type&#xD;&#xA;&#x9;&#x9;&#x9; AND&#x9;T.file_series  = M.file_series&#xD;&#xA;&#x9;&#x9;&#x9; AND&#x9;T.file_nbr  = M.file_nbr  &#xD;&#xA;&#x9;&#x9; JOIN cf_application_type AT ON M.application_type  = AT.appl_typ&#x9;&#x9;COLLATE DATABASE_DEFAULT &#xD;&#xA;&#x9;WHERE&#x9; SPECIAL_FINAL_STATUS  is not null&#xD;&#xA;&#x9; AND&#x9; (GENERATE_PROC_TYP + SPECIAL_FINAL_STATUS COLLATE DATABASE_DEFAULT ) NOT IN&#xD;&#xA;&#x9;&#x9;(&#xD;&#xA;&#x9; &#x9;SELECT&#x9;proc_typ + initial_status_code&#xD;&#xA;&#x9;&#x9;FROM  cf_migration &#xD;&#xA;&#x9;&#x9;WHERE&#x9; action_typ  in&#xD;&#xA;&#x9;&#x9;&#x9;(&#xD;&#xA;&#x9; &#x9;&#x9;SELECT action_typ&#xD;&#xA;&#x9;&#x9;&#x9;FROM  cf_action_type &#xD;&#xA;&#x9;&#x9;&#x9;WHERE&#x9; automatic_action_wcode  = 2&#xD;&#xA;&#x9;&#x9;&#x9;)&#xD;&#xA;&#x9;&#x9;)&#xD;&#xA;&#x9; AND&#x9;(  exists&#xD;&#xA;&#x9;&#x9;(&#xD;&#xA;&#x9; &#x9;SELECT *&#xD;&#xA;&#x9;&#x9;FROM   [&quot;+ context.intermediateDB + &quot;].[dbo].VW_import_mark_file_freezes ff &#xD;&#xA;&#x9;&#x9;WHERE&#x9; ff.file_type  = T.file_type&#xD;&#xA;&#x9;&#x9; AND&#x9;ff.file_seq  = T.file_seq&#xD;&#xA;&#x9;&#x9; AND&#x9;ff.file_series  = T.file_series&#xD;&#xA;&#x9;&#x9; AND&#x9;ff.file_nbr  = T.file_nbr&#xD;&#xA;&#x9;&#x9;)&#xD;&#xA;&#x9; OR&#x9;  exists&#xD;&#xA;&#x9;&#x9;(&#xD;&#xA;&#x9; &#x9;SELECT *&#xD;&#xA;&#x9;&#x9;FROM   [&quot;+ context.intermediateDB + &quot;].[dbo].VW_import_mark_udoc_freezes uf &#xD;&#xA;&#x9;&#x9;WHERE&#x9; uf.file_type  = T.file_type&#xD;&#xA;&#x9;&#x9; AND&#x9;uf.file_seq  = T.file_seq&#xD;&#xA;&#x9;&#x9; AND&#x9;uf.file_series  = T.file_series&#xD;&#xA;&#x9;&#x9; AND&#x9;uf.file_nbr  = T.file_nbr&#xD;&#xA;&#x9;&#x9;))&#xD;&#xA;&#x9;&#x9;&#xD;&#xA;&#x9;&#x9;/* If ACTION_NOTES1 is not null and CF_ACTION_TYPE.NOTES1_PROMPT is null, &#xD;&#xA;&#x9;&#x9;       message ?Current configuration indicates that this action type does not accept an action notes 1? */&#xD;&#xA;&#x9;&#x9;/* Performace note: join with  [&quot;+ context.intermediateDB + &quot;].[dbo].VW_IMPORT_PATENT to select patents with IND_IMPORT = 0 */&#xD;&#xA;&#x9;&#x9;/* OJO ignorar por ahora &#xD;&#xA;&#x9;&#x9;    insert  into  [&quot;+ context.intermediateDB + &quot;].[dbo].VW_IMPORT_PATENT_RESULT (file_seq, file_type, file_series, file_nbr, ind_import, msg_import)&#xD;&#xA;&#x9;&#x9;    select  T.file_seq, T.file_type, T.file_series, T.file_nbr,&#xD;&#xA;&#x9;&#x9;            2, 'Current configuration indicates that this action type does not accept an action notes 1'&#xD;&#xA;&#x9;&#x9;    from     [&quot;+ context.intermediateDB + &quot;].[dbo].VW_import_patent_actions T&#xD;&#xA;&#x9;&#x9;            join cf_action_type AT on&#xD;&#xA;&#x9;&#x9;                T.action_type   = AT.action_typ&#xD;&#xA;&#x9;&#x9;    where   length(ACTION_NOTES1)   > 1   and&#xD;&#xA;&#x9;&#x9;            NOTES1_PROMPT           is null&#xD;&#xA;&#x9;&#x9;    ;&#xD;&#xA;&#x9;&#x9;*/&#xD;&#xA;&#x9;&#x9;/* If ACTION_NOTES2 is not null and CF_ACTION_TYPE.NOTES2_PROMPT is null, &#xD;&#xA;&#x9;&#x9;       message ?Current configuration indicates that this action type does not accept an action notes 2? */&#xD;&#xA;&#x9;&#x9;/* Performace note: join with  [&quot;+ context.intermediateDB + &quot;].[dbo].VW_IMPORT_PATENT to select patents with IND_IMPORT = 0 */&#xD;&#xA;&#x9;&#x9;/* OJO ignorar por ahora&#xD;&#xA;&#x9;&#x9;    insert  into  [&quot;+ context.intermediateDB + &quot;].[dbo].VW_IMPORT_PATENT_RESULT (file_seq, file_type, file_series, file_nbr, ind_import, msg_import)&#xD;&#xA;&#x9;&#x9;    select  T.file_seq, T.file_type, T.file_series, T.file_nbr,&#xD;&#xA;&#x9;&#x9;            2, 'Current configuration indicates that this action type does not accept an action notes 2'&#xD;&#xA;&#x9;&#x9;    from     [&quot;+ context.intermediateDB + &quot;].[dbo].VW_import_patent_actions T&#xD;&#xA;&#x9;&#x9;            join cf_action_type AT on&#xD;&#xA;&#x9;&#x9;                T.action_type   = AT.action_typ&#xD;&#xA;&#x9;&#x9;    where   length(ACTION_NOTES2)   > 1   and&#xD;&#xA;&#x9;&#x9;            NOTES2_PROMPT           is null&#xD;&#xA;&#x9;&#x9;    ;&#xD;&#xA;&#x9;&#x9;*/&#xD;&#xA;&#x9;&#x9;/* If ACTION_NOTES3 is not null and CF_ACTION_TYPE.NOTES3_PROMPT is null, &#xD;&#xA;&#x9;&#x9;       message ?Current configuration indicates that this action type does not accept an action notes 3? */&#xD;&#xA;&#x9;&#x9;/* Performace note: join with  [&quot;+ context.intermediateDB + &quot;].[dbo].VW_IMPORT_PATENT to select patents with IND_IMPORT = 0 */&#xD;&#xA;&#x9;&#x9;/* OJO ignorar por ahora&#xD;&#xA;&#x9;&#x9;    insert  into  [&quot;+ context.intermediateDB + &quot;].[dbo].VW_IMPORT_PATENT_RESULT (file_seq, file_type, file_series, file_nbr, ind_import, msg_import)&#xD;&#xA;&#x9;&#x9;    select  T.file_seq, T.file_type, T.file_series, T.file_nbr,&#xD;&#xA;&#x9;&#x9;            2, 'Current configuration indicates that this action type does not accept an action notes 3'&#xD;&#xA;&#x9;&#x9;    from     [&quot;+ context.intermediateDB + &quot;].[dbo].VW_import_patent_actions T&#xD;&#xA;&#x9;&#x9;            join cf_action_type AT on&#xD;&#xA;&#x9;&#x9;                T.action_type   = AT.action_typ&#xD;&#xA;&#x9;&#x9;    where   length(ACTION_NOTES3)   > 1   and&#xD;&#xA;&#x9;&#x9;            NOTES3_PROMPT           is null&#xD;&#xA;&#x9;&#x9;    ;&#xD;&#xA;&#x9;&#x9;*/&#xD;&#xA;&#x9;&#x9;/* If ACTION_NOTES4 is not null and CF_ACTION_TYPE.NOTES4_PROMPT is null, &#xD;&#xA;&#x9;&#x9;       message ?Current configuration indicates that this action type does not accept an action notes 4? */&#xD;&#xA;&#x9;&#x9;/* Performace note: join with  [&quot;+ context.intermediateDB + &quot;].[dbo].VW_IMPORT_PATENT to select patents with IND_IMPORT = 0 */&#xD;&#xA;&#x9;&#x9;/* OJO ignorar por ahora&#xD;&#xA;&#x9;&#x9;    insert  into  [&quot;+ context.intermediateDB + &quot;].[dbo].VW_IMPORT_PATENT_RESULT (file_seq, file_type, file_series, file_nbr, ind_import, msg_import)&#xD;&#xA;&#x9;&#x9;    select  T.file_seq, T.file_type, T.file_series, T.file_nbr,&#xD;&#xA;&#x9;&#x9;            2, 'Current configuration indicates that this action type does not accept an action notes 4'&#xD;&#xA;&#x9;&#x9;    from     [&quot;+ context.intermediateDB + &quot;].[dbo].VW_import_patent_actions T&#xD;&#xA;&#x9;&#x9;            join cf_action_type AT on&#xD;&#xA;&#x9;&#x9;                T.action_type   = AT.action_typ&#xD;&#xA;&#x9;&#x9;    where   length(ACTION_NOTES4)   > 1   and&#xD;&#xA;&#x9;&#x9;            NOTES4_PROMPT           is null&#xD;&#xA;&#x9;&#x9;    ;&#xD;&#xA;&#x9;&#x9;*/&#xD;&#xA;&#x9;&#x9;/* If ACTION_NOTES5 is not null and CF_ACTION_TYPE.NOTES5_PROMPT is null, &#xD;&#xA;&#x9;&#x9;       message ?Current configuration indicates that this action type does not accept an action notes 5? */&#xD;&#xA;&#x9;&#x9;/* Performace note: join with  [&quot;+ context.intermediateDB + &quot;].[dbo].VW_IMPORT_PATENT to select patents with IND_IMPORT = 0 */&#xD;&#xA;&#x9;&#x9;/* OJO ignorar por ahora&#xD;&#xA;&#x9;&#x9;    insert  into  [&quot;+ context.intermediateDB + &quot;].[dbo].VW_IMPORT_PATENT_RESULT (file_seq, file_type, file_series, file_nbr, ind_import, msg_import)&#xD;&#xA;&#x9;&#x9;    select  T.file_seq, T.file_type, T.file_series, T.file_nbr,&#xD;&#xA;&#x9;&#x9;            2, 'Current configuration indicates that this action type does not accept an action notes 5'&#xD;&#xA;&#x9;&#x9;    from     [&quot;+ context.intermediateDB + &quot;].[dbo].VW_import_patent_actions T&#xD;&#xA;&#x9;&#x9;            join cf_action_type AT on&#xD;&#xA;&#x9;&#x9;                T.action_type   = AT.action_typ&#xD;&#xA;&#x9;&#x9;    where   length(ACTION_NOTES5)   > 1   and&#xD;&#xA;&#x9;&#x9;            NOTES5_PROMPT           is null&#xD;&#xA;&#x9;&#x9;    ;&#xD;&#xA;&#x9;&#x9;*/&#xD;&#xA;&#x9;&#x9;/* ACTION_USER: if not exists in IP_USER, message ?Invalid action user? */&#xD;&#xA;&#x9;&#x9;/* Performace note: join with  [&quot;+ context.intermediateDB + &quot;].[dbo].VW_IMPORT_PATENT to select patents with IND_IMPORT = 0 */&#xD;&#xA;&#x9;&#x9;INSERT INTO   [&quot;+ context.intermediateDB + &quot;].[dbo].VW_IMPORT_PATENT_RESULT   &#xD;&#xA;&#x9;&#x9;&#x9;&#x9;( file_seq , &#xD;&#xA;&#x9;&#x9;&#x9;&#x9;file_type , &#xD;&#xA;&#x9;&#x9;&#x9;&#x9;file_series , &#xD;&#xA;&#x9;&#x9;&#x9;&#x9;file_nbr , &#xD;&#xA;&#x9;&#x9;&#x9;&#x9;ind_import , &#xD;&#xA;&#x9;&#x9;&#x9;&#x9;msg_import )  &#xD;&#xA;&#x9;&#x9;SELECT&#xD;&#xA;&#x9;&#x9;&#x9;&#x9; T.file_seq,&#xD;&#xA;&#x9;&#x9;&#x9;&#x9; T.file_type,&#xD;&#xA;&#x9;&#x9;&#x9;&#x9; T.file_series,&#xD;&#xA;&#x9;&#x9;&#x9;&#x9; T.file_nbr,&#xD;&#xA;&#x9;&#x9;&#x9;&#x9; 2,&#xD;&#xA;&#x9;&#x9;&#x9;&#x9; 'Invalid action user'&#xD;&#xA;&#x9;&#x9;FROM   [&quot;+ context.intermediateDB + &quot;].[dbo].VW_import_patent_actions T &#xD;&#xA;&#x9;&#x9;WHERE&#x9; (ACTION_USER  is null&#xD;&#xA;&#x9;&#x9; OR&#x9;ACTION_USER  not in&#xD;&#xA;&#x9;&#x9;&#x9;(&#xD;&#xA;&#x9;&#x9; &#x9;SELECT user_id&#xD;&#xA;&#x9;&#x9;&#x9;FROM  ip_user &#xD;&#xA;&#x9;&#x9;&#x9;))&#xD;&#xA;&#x9;&#x9;&#xD;&#xA;&#x9;&#x9;&#x9;-- Move below check into CallToDateValidationPROC --> MarkDateValidationPROC SP&#xD;&#xA;&#x9;&#x9;/* IPAS-375 Added validation for filing date */&#xD;&#xA;&#x9;--&#x9;insert  into  [&quot;+ context.intermediateDB + &quot;].[dbo].VW_IMPORT_PATENT_RESULT (file_seq, file_type, file_series, file_nbr, ind_import, msg_import)&#xD;&#xA;&#x9;--&#x9;select  P.file_seq, P.file_type, P.file_series, P.file_nbr, 2, 'Invalid Filing date. Filing date required to be greater than 1700-01-01 and lower than the current date.' &#xD;&#xA;&#x9;--&#x9;from   [&quot;+ context.intermediateDB + &quot;].[dbo].VW_import_patent P where filing_date > GETDATE() or CAST(DATEPART(YYYY, filing_date) as NUMERIC) &lt; 1700&#xD;&#xA;&#xD;&#xA;&#x9;&#x9;&#x9;/* IPAS-623 FIX &#xD;&#xA;&#x9;&#x9;&#x9;Call to Mark Date validation &#xD;&#xA;&#x9;&#x9;*/&#xD;&#xA;&#x9;&#x9;&#x9;exec CallToDateValidationPROC 'PATENT';&#x9;&#x9;&#xD;&#xA;&#x9;&#x9;/* FIX IPAS-623 Ends here*/&#xD;&#xA;&#xD;&#xA;&#x9;&#x9;/* *************** END OF VALIDATIONS *************** */&#xD;&#xA;&#x9;&#x9;/* set import indicator to error, for those cases with error messages */&#xD;&#xA;&#x9;&#x9;UPDATE  M   &#xD;&#xA;&#x9;&#x9;SET&#x9;ind_import = 2 &#xD;&#xA;&#x9;&#x9;FROM   [&quot;+ context.intermediateDB + &quot;].[dbo].VW_IMPORT_PATENT M &#xD;&#xA;&#x9;&#x9;WHERE    exists&#xD;&#xA;&#x9;&#x9;&#x9;(&#xD;&#xA;&#x9;&#x9; &#x9;SELECT *&#xD;&#xA;&#x9;&#x9;&#x9;FROM   [&quot;+ context.intermediateDB + &quot;].[dbo].VW_IMPORT_PATENT_RESULT R &#xD;&#xA;&#x9;&#x9;&#x9;WHERE&#x9; M.file_seq  = R.file_seq&#xD;&#xA;&#x9;&#x9;&#x9; AND&#x9;M.file_type  = R.file_type&#xD;&#xA;&#x9;&#x9;&#x9; AND&#x9;M.file_series  = R.file_series&#xD;&#xA;&#x9;&#x9;&#x9; AND&#x9;M.file_nbr  = R.file_nbr&#xD;&#xA;&#x9;&#x9;&#x9;) &#xD;&#xA;&#x9;&#x9;&#xD;&#xA;&#x9;&#x9;/* set import indicator to validated, for those cases with no error messages */&#xD;&#xA;&#x9;&#x9;UPDATE  M   &#xD;&#xA;&#x9;&#x9;SET&#x9;ind_import = 9 &#xD;&#xA;&#x9;&#x9;FROM   [&quot;+ context.intermediateDB + &quot;].[dbo].VW_IMPORT_PATENT M &#xD;&#xA;&#x9;&#x9;WHERE  ind_import  = 0 &#xD;&#xA;&#x9;&#x9;&#xD;&#xA;&#xD;&#xA;&#x9;&#x9;SET NOCOUNT OFF&#xD;&#xA;&#xD;&#xA;&#x9;END&quot;"/>
    <elementParameter field="LABEL" name="NOTE" value="This option only applies when deploying and running in the Talend Runtime" show="false"/>
    <elementParameter field="CHECK" name="SPECIFY_DATASOURCE_ALIAS" value="false" show="false"/>
    <elementParameter field="TEXT" name="DATASOURCE_ALIAS" value="&quot;&quot;" show="false"/>
    <elementParameter field="CHECK" name="DIE_ON_ERROR" value="false"/>
    <elementParameter field="TEXT" name="PROPERTIES" value="&quot;&quot;" show="false"/>
    <elementParameter field="CHECK" name="ACTIVE_DIR_AUTH" value="false" show="false"/>
    <elementParameter field="CHECK" name="PROPAGATE_RECORD_SET" value="false"/>
    <elementParameter field="COLUMN_LIST" name="RECORD_SET_COLUMN" value="" show="false"/>
    <elementParameter field="CHECK" name="USE_PREPAREDSTATEMENT" value="false"/>
    <elementParameter field="TABLE" name="SET_PREPAREDSTATEMENT_PARAMETERS" show="false"/>
    <elementParameter field="ENCODING_TYPE" name="ENCODING" value="&quot;ISO-8859-15&quot;" show="false"/>
    <elementParameter field="TECHNICAL" name="ENCODING:ENCODING_TYPE" value="ISO-8859-15"/>
    <elementParameter field="TEXT" name="COMMIT_EVERY" value="10000" show="false"/>
    <elementParameter field="TEXT" name="CONNECTION_FORMAT" value="row"/>
    <metadata connector="FLOW" name="tMSSqlRow_12"/>
    <metadata connector="REJECT" name="REJECT">
      <column defaultValue="" key="false" length="255" name="errorCode" nullable="true" precision="0" sourceType="" type="id_String" originalLength="-1" usefulColumn="true"/>
      <column defaultValue="" key="false" length="255" name="errorMessage" nullable="true" precision="0" sourceType="" type="id_String" originalLength="-1" usefulColumn="true"/>
    </metadata>
  </node>
  <node componentName="tMSSqlRow" componentVersion="0.102" offsetLabelX="0" offsetLabelY="0" posX="-192" posY="2336">
    <elementParameter field="TEXT" name="UNIQUE_NAME" value="tMSSqlRow_13" show="false"/>
    <elementParameter field="CHECK" name="USE_EXISTING_CONNECTION" value="true"/>
    <elementParameter field="COMPONENT_LIST" name="CONNECTION" value="tMSSqlConnection_4"/>
    <elementParameter field="CLOSED_LIST" name="DRIVER" value="JTDS" show="false"/>
    <elementParameter field="TEXT" name="HOST" value="&quot;&quot;" show="false"/>
    <elementParameter field="TEXT" name="PORT" value="&quot;1433&quot;" show="false"/>
    <elementParameter field="TEXT" name="DB_SCHEMA" value="&quot;&quot;" show="false"/>
    <elementParameter field="TEXT" name="DBNAME" value="&quot;&quot;" show="false"/>
    <elementParameter field="TEXT" name="TYPE" value="MSSQL" show="false"/>
    <elementParameter field="TEXT" name="USER" value="&quot;&quot;" show="false"/>
    <elementParameter field="PASSWORD" name="PASS" value="enc:system.encryption.key.v1:3tvXMyglpPtr7HYAv70JV/m5ngKxdp+SN49Bk/Rh" show="false"/>
    <elementParameter field="DBTABLE" name="TABLE" value="&quot;&quot;"/>
    <elementParameter field="CHECK" name="IDENTITY_INSERT" value="false"/>
    <elementParameter field="QUERYSTORE_TYPE" name="QUERYSTORE" value="&quot;&quot;"/>
    <elementParameter field="TECHNICAL" name="QUERYSTORE:REPOSITORY_QUERYSTORE_TYPE" value="" show="false"/>
    <elementParameter field="TECHNICAL" name="QUERYSTORE:QUERYSTORE_TYPE" value="BUILT_IN"/>
    <elementParameter field="MEMO_SQL" name="QUERY" value="&quot;If Exists ( SELECT name &#xD;&#xA;            FROM sysobjects  &#xD;&#xA;            WHERE name = 'ImportPateRelsValidate'&#xD;&#xA;            AND type = 'P')&#xD;&#xA;&#x9;DROP PROCEDURE ImportPateRelsValidate;&#xD;&#xA;&quot;"/>
    <elementParameter field="LABEL" name="NOTE" value="This option only applies when deploying and running in the Talend Runtime" show="false"/>
    <elementParameter field="CHECK" name="SPECIFY_DATASOURCE_ALIAS" value="false" show="false"/>
    <elementParameter field="TEXT" name="DATASOURCE_ALIAS" value="&quot;&quot;" show="false"/>
    <elementParameter field="CHECK" name="DIE_ON_ERROR" value="false"/>
    <elementParameter field="TEXT" name="PROPERTIES" value="&quot;&quot;" show="false"/>
    <elementParameter field="CHECK" name="ACTIVE_DIR_AUTH" value="false" show="false"/>
    <elementParameter field="CHECK" name="PROPAGATE_RECORD_SET" value="false"/>
    <elementParameter field="COLUMN_LIST" name="RECORD_SET_COLUMN" value="" show="false"/>
    <elementParameter field="CHECK" name="USE_PREPAREDSTATEMENT" value="false"/>
    <elementParameter field="TABLE" name="SET_PREPAREDSTATEMENT_PARAMETERS" show="false"/>
    <elementParameter field="ENCODING_TYPE" name="ENCODING" value="&quot;ISO-8859-15&quot;" show="false"/>
    <elementParameter field="TECHNICAL" name="ENCODING:ENCODING_TYPE" value="ISO-8859-15"/>
    <elementParameter field="TEXT" name="COMMIT_EVERY" value="10000" show="false"/>
    <elementParameter field="TEXT" name="CONNECTION_FORMAT" value="row"/>
    <metadata connector="FLOW" name="tMSSqlRow_13"/>
    <metadata connector="REJECT" name="REJECT">
      <column defaultValue="" key="false" length="255" name="errorCode" nullable="true" precision="0" sourceType="" type="id_String" originalLength="-1" usefulColumn="true"/>
      <column defaultValue="" key="false" length="255" name="errorMessage" nullable="true" precision="0" sourceType="" type="id_String" originalLength="-1" usefulColumn="true"/>
    </metadata>
  </node>
  <node componentName="tLogRow" componentVersion="0.101" offsetLabelX="0" offsetLabelY="0" posX="-192" posY="2240">
    <elementParameter field="TEXT" name="UNIQUE_NAME" value="tLogRow_15" show="false"/>
    <elementParameter field="RADIO" name="BASIC_MODE" value="false"/>
    <elementParameter field="RADIO" name="TABLE_PRINT" value="false"/>
    <elementParameter field="RADIO" name="VERTICAL" value="true"/>
    <elementParameter field="RADIO" name="PRINT_UNIQUE" value="true"/>
    <elementParameter field="RADIO" name="PRINT_LABEL" value="false"/>
    <elementParameter field="RADIO" name="PRINT_UNIQUE_LABEL" value="false"/>
    <elementParameter field="TEXT" name="FIELDSEPARATOR" value="&quot;|&quot;" show="false"/>
    <elementParameter field="CHECK" name="PRINT_HEADER" value="false" show="false"/>
    <elementParameter field="CHECK" name="PRINT_UNIQUE_NAME" value="false" show="false"/>
    <elementParameter field="CHECK" name="PRINT_COLNAMES" value="false" show="false"/>
    <elementParameter field="CHECK" name="USE_FIXED_LENGTH" value="false" show="false"/>
    <elementParameter field="TABLE" name="LENGTHS" show="false">
      <elementValue elementRef="SCHEMA_COLUMN" value="errorCode"/>
      <elementValue elementRef="LENGTH" value="10"/>
      <elementValue elementRef="SCHEMA_COLUMN" value="errorMessage"/>
      <elementValue elementRef="LENGTH" value="10"/>
    </elementParameter>
    <elementParameter field="CHECK" name="PRINT_CONTENT_WITH_LOG4J" value="true"/>
    <elementParameter field="TEXT" name="SCHEMA_OPT_NUM" value="100" show="false"/>
    <elementParameter field="TEXT" name="CONNECTION_FORMAT" value="row"/>
    <metadata connector="FLOW" name="tLogRow_15">
      <column defaultValue="" key="false" length="255" name="errorCode" nullable="true" precision="0" sourceType="" type="id_String" originalLength="-1" usefulColumn="true"/>
      <column defaultValue="" key="false" length="255" name="errorMessage" nullable="true" precision="0" sourceType="" type="id_String" originalLength="-1" usefulColumn="true"/>
    </metadata>
  </node>
  <node componentName="tLogRow" componentVersion="0.101" offsetLabelX="0" offsetLabelY="0" posX="-64" posY="2240">
    <elementParameter field="TEXT" name="UNIQUE_NAME" value="tLogRow_16" show="false"/>
    <elementParameter field="RADIO" name="BASIC_MODE" value="false"/>
    <elementParameter field="RADIO" name="TABLE_PRINT" value="false"/>
    <elementParameter field="RADIO" name="VERTICAL" value="true"/>
    <elementParameter field="RADIO" name="PRINT_UNIQUE" value="true"/>
    <elementParameter field="RADIO" name="PRINT_LABEL" value="false"/>
    <elementParameter field="RADIO" name="PRINT_UNIQUE_LABEL" value="false"/>
    <elementParameter field="TEXT" name="FIELDSEPARATOR" value="&quot;|&quot;" show="false"/>
    <elementParameter field="CHECK" name="PRINT_HEADER" value="false" show="false"/>
    <elementParameter field="CHECK" name="PRINT_UNIQUE_NAME" value="false" show="false"/>
    <elementParameter field="CHECK" name="PRINT_COLNAMES" value="false" show="false"/>
    <elementParameter field="CHECK" name="USE_FIXED_LENGTH" value="false" show="false"/>
    <elementParameter field="TABLE" name="LENGTHS" show="false">
      <elementValue elementRef="SCHEMA_COLUMN" value="errorCode"/>
      <elementValue elementRef="LENGTH" value="10"/>
      <elementValue elementRef="SCHEMA_COLUMN" value="errorMessage"/>
      <elementValue elementRef="LENGTH" value="10"/>
    </elementParameter>
    <elementParameter field="CHECK" name="PRINT_CONTENT_WITH_LOG4J" value="true"/>
    <elementParameter field="TEXT" name="SCHEMA_OPT_NUM" value="100" show="false"/>
    <elementParameter field="TEXT" name="CONNECTION_FORMAT" value="row"/>
    <metadata connector="FLOW" name="tLogRow_16">
      <column defaultValue="" key="false" length="255" name="errorCode" nullable="true" precision="0" sourceType="" type="id_String" originalLength="-1" usefulColumn="true"/>
      <column defaultValue="" key="false" length="255" name="errorMessage" nullable="true" precision="0" sourceType="" type="id_String" originalLength="-1" usefulColumn="true"/>
    </metadata>
  </node>
  <node componentName="tMSSqlRow" componentVersion="0.102" offsetLabelX="0" offsetLabelY="0" posX="-64" posY="2336">
    <elementParameter field="TEXT" name="UNIQUE_NAME" value="tMSSqlRow_14" show="false"/>
    <elementParameter field="CHECK" name="USE_EXISTING_CONNECTION" value="true"/>
    <elementParameter field="COMPONENT_LIST" name="CONNECTION" value="tMSSqlConnection_4"/>
    <elementParameter field="CLOSED_LIST" name="DRIVER" value="JTDS" show="false"/>
    <elementParameter field="TEXT" name="HOST" value="&quot;&quot;" show="false"/>
    <elementParameter field="TEXT" name="PORT" value="&quot;1433&quot;" show="false"/>
    <elementParameter field="TEXT" name="DB_SCHEMA" value="&quot;&quot;" show="false"/>
    <elementParameter field="TEXT" name="DBNAME" value="&quot;&quot;" show="false"/>
    <elementParameter field="TEXT" name="TYPE" value="MSSQL" show="false"/>
    <elementParameter field="TEXT" name="USER" value="&quot;&quot;" show="false"/>
    <elementParameter field="PASSWORD" name="PASS" value="enc:system.encryption.key.v1:TIcRYxt1RHNVNZGa3YDWkC21YECfgDaBBK5MpFcC" show="false"/>
    <elementParameter field="DBTABLE" name="TABLE" value="&quot;&quot;"/>
    <elementParameter field="CHECK" name="IDENTITY_INSERT" value="false"/>
    <elementParameter field="QUERYSTORE_TYPE" name="QUERYSTORE" value="&quot;&quot;"/>
    <elementParameter field="TECHNICAL" name="QUERYSTORE:REPOSITORY_QUERYSTORE_TYPE" value="" show="false"/>
    <elementParameter field="TECHNICAL" name="QUERYSTORE:QUERYSTORE_TYPE" value="BUILT_IN"/>
    <elementParameter field="MEMO_SQL" name="QUERY" value="&quot;CREATE PROCEDURE ImportPateRelsValidate&#xD;&#xA;AS &#xD;&#xA;&#x9;BEGIN&#xD;&#xA;&#x9;&#x9;SET NOCOUNT ON&#xD;&#xA;&#x9;&#x9;&#xD;&#xA;&#x9;&#x9;/* Procedure name: ImportPateRelsValidate&#xD;&#xA;&#x9;&#x9;Input:  IPAS database and import tables not imported (i.e. IND_IMPORT not 1)&#xD;&#xA;&#x9;&#x9;Output: if errors, validation flag set to 2 and error messages in [&quot;+ context.intermediateDB + &quot;].[dbo].VW_IMPORT_patent__RELS_RESULT&#xD;&#xA;&#x9;&#x9;if OK, validation flag set to 9&#xD;&#xA;&#x9;&#x9;*/&#xD;&#xA;&#x9;&#x9;&#xD;&#xA;&#x9;&#x9;/* flag all pending patents rels as to be validated */&#xD;&#xA;&#x9;&#x9;UPDATE  [&quot;+ context.intermediateDB + &quot;].[dbo].VW_import_patent_rels   &#xD;&#xA;&#x9;&#x9;SET&#x9;ind_import = 0 &#xD;&#xA;&#x9;&#x9;WHERE  ind_import  is null&#xD;&#xA;&#x9;&#x9; OR&#x9;ind_import  not in ( 0  , 1  ) &#xD;&#xA;&#x9;&#x9;&#xD;&#xA;&#x9;&#x9;/* delete prior errors */&#xD;&#xA;&#x9;&#x9;DELETE FROM   [&quot;+ context.intermediateDB + &quot;].[dbo].VW_IMPORT_patent_RELS_RESULT    &#xD;&#xA;&#x9;&#x9;&#xD;&#xA;&#x9;&#x9;/* 2.1.1 [&quot;+ context.intermediateDB + &quot;].[dbo].VW_IMPORT_patent_RELS validations */&#xD;&#xA;&#x9;&#x9;/* RELATIONSHIP_TYPE: if not exists in CF_RELATIONSHIP_TYPE, message ?Invalid relationship type? */&#xD;&#xA;&#x9;&#x9;INSERT INTO  [&quot;+ context.intermediateDB + &quot;].[dbo].VW_IMPORT_patent_RELS_RESULT   &#xD;&#xA;&#x9;&#x9;&#x9;&#x9;( file_seq , &#xD;&#xA;&#x9;&#x9;&#x9;&#x9;file_type , &#xD;&#xA;&#x9;&#x9;&#x9;&#x9;file_series , &#xD;&#xA;&#x9;&#x9;&#x9;&#x9;file_nbr , &#xD;&#xA;&#x9;&#x9;&#x9;&#x9;relationship_type , &#xD;&#xA;&#x9;&#x9;&#x9;&#x9;relationship_role , &#xD;&#xA;&#x9;&#x9;&#x9;&#x9;related_file_seq , &#xD;&#xA;&#x9;&#x9;&#x9;&#x9;related_file_type , &#xD;&#xA;&#x9;&#x9;&#x9;&#x9;related_file_series , &#xD;&#xA;&#x9;&#x9;&#x9;&#x9;related_file_nbr , &#xD;&#xA;&#x9;&#x9;&#x9;&#x9;ind_import , &#xD;&#xA;&#x9;&#x9;&#x9;&#x9;msg_import )  &#xD;&#xA;&#x9;&#x9;SELECT&#xD;&#xA;&#x9;&#x9;&#x9;&#x9; file_seq,&#xD;&#xA;&#x9;&#x9;&#x9;&#x9; file_type,&#xD;&#xA;&#x9;&#x9;&#x9;&#x9; file_series,&#xD;&#xA;&#x9;&#x9;&#x9;&#x9; file_nbr,&#xD;&#xA;&#x9;&#x9;&#x9;&#x9; relationship_type,&#xD;&#xA;&#x9;&#x9;&#x9;&#x9; relationship_role,&#xD;&#xA;&#x9;&#x9;&#x9;&#x9; related_file_seq,&#xD;&#xA;&#x9;&#x9;&#x9;&#x9; related_file_type,&#xD;&#xA;&#x9;&#x9;&#x9;&#x9; related_file_series,&#xD;&#xA;&#x9;&#x9;&#x9;&#x9; related_file_nbr,&#xD;&#xA;&#x9;&#x9;&#x9;&#x9; 2,&#xD;&#xA;&#x9;&#x9;&#x9;&#x9; 'Invalid relationship type'&#xD;&#xA;&#x9;&#x9;FROM  [&quot;+ context.intermediateDB + &quot;].[dbo].VW_import_patent_rels &#xD;&#xA;&#x9;&#x9;WHERE&#x9; ind_import  = 0&#xD;&#xA;&#x9;&#x9; AND&#x9;relationship_type COLLATE DATABASE_DEFAULT not in&#xD;&#xA;&#x9;&#x9;&#x9;(&#xD;&#xA;&#x9;&#x9; &#x9;SELECT relationship_typ&#xD;&#xA;&#x9;&#x9;&#x9;FROM  cf_relationship_type &#xD;&#xA;&#x9;&#x9;&#x9;)&#xD;&#xA;&#x9;&#x9;&#xD;&#xA;&#x9;&#x9;/* RELATIONSHIP_ROLE: if not in 1 / 2, message ?Invalid relationship role? */&#xD;&#xA;&#x9;&#x9;INSERT INTO  [&quot;+ context.intermediateDB + &quot;].[dbo].VW_IMPORT_patent_RELS_RESULT   &#xD;&#xA;&#x9;&#x9;&#x9;&#x9;( file_seq , &#xD;&#xA;&#x9;&#x9;&#x9;&#x9;file_type , &#xD;&#xA;&#x9;&#x9;&#x9;&#x9;file_series , &#xD;&#xA;&#x9;&#x9;&#x9;&#x9;file_nbr , &#xD;&#xA;&#x9;&#x9;&#x9;&#x9;relationship_type , &#xD;&#xA;&#x9;&#x9;&#x9;&#x9;relationship_role , &#xD;&#xA;&#x9;&#x9;&#x9;&#x9;related_file_seq , &#xD;&#xA;&#x9;&#x9;&#x9;&#x9;related_file_type , &#xD;&#xA;&#x9;&#x9;&#x9;&#x9;related_file_series , &#xD;&#xA;&#x9;&#x9;&#x9;&#x9;related_file_nbr , &#xD;&#xA;&#x9;&#x9;&#x9;&#x9;ind_import , &#xD;&#xA;&#x9;&#x9;&#x9;&#x9;msg_import )  &#xD;&#xA;&#x9;&#x9;SELECT&#xD;&#xA;&#x9;&#x9;&#x9;&#x9; file_seq,&#xD;&#xA;&#x9;&#x9;&#x9;&#x9; file_type,&#xD;&#xA;&#x9;&#x9;&#x9;&#x9; file_series,&#xD;&#xA;&#x9;&#x9;&#x9;&#x9; file_nbr,&#xD;&#xA;&#x9;&#x9;&#x9;&#x9; relationship_type,&#xD;&#xA;&#x9;&#x9;&#x9;&#x9; relationship_role,&#xD;&#xA;&#x9;&#x9;&#x9;&#x9; related_file_seq,&#xD;&#xA;&#x9;&#x9;&#x9;&#x9; related_file_type,&#xD;&#xA;&#x9;&#x9;&#x9;&#x9; related_file_series,&#xD;&#xA;&#x9;&#x9;&#x9;&#x9; related_file_nbr,&#xD;&#xA;&#x9;&#x9;&#x9;&#x9; 2,&#xD;&#xA;&#x9;&#x9;&#x9;&#x9; 'Invalid relationship role'&#xD;&#xA;&#x9;&#x9;FROM  [&quot;+ context.intermediateDB + &quot;].[dbo].VW_import_patent_rels &#xD;&#xA;&#x9;&#x9;WHERE&#x9; ind_import  = 0&#xD;&#xA;&#x9;&#x9; AND&#x9;relationship_role  not in ( '1'  , '2'  )&#xD;&#xA;&#x9;&#x9;&#xD;&#xA;&#x9;&#x9;/* If FILE_SEQ / FILE_TYPE / FILE_SERIES / FILE_NBR already exists in IP_FILE, insert message ?File sequence / type / series / number is invalid? */&#xD;&#xA;&#x9;&#x9;INSERT INTO  [&quot;+ context.intermediateDB + &quot;].[dbo].VW_IMPORT_patent_RELS_RESULT   &#xD;&#xA;&#x9;&#x9;&#x9;&#x9;( file_seq , &#xD;&#xA;&#x9;&#x9;&#x9;&#x9;file_type , &#xD;&#xA;&#x9;&#x9;&#x9;&#x9;file_series , &#xD;&#xA;&#x9;&#x9;&#x9;&#x9;file_nbr , &#xD;&#xA;&#x9;&#x9;&#x9;&#x9;relationship_type , &#xD;&#xA;&#x9;&#x9;&#x9;&#x9;relationship_role , &#xD;&#xA;&#x9;&#x9;&#x9;&#x9;related_file_seq , &#xD;&#xA;&#x9;&#x9;&#x9;&#x9;related_file_type , &#xD;&#xA;&#x9;&#x9;&#x9;&#x9;related_file_series , &#xD;&#xA;&#x9;&#x9;&#x9;&#x9;related_file_nbr , &#xD;&#xA;&#x9;&#x9;&#x9;&#x9;ind_import , &#xD;&#xA;&#x9;&#x9;&#x9;&#x9;msg_import )  &#xD;&#xA;&#x9;&#x9;SELECT&#xD;&#xA;&#x9;&#x9;&#x9;&#x9; file_seq,&#xD;&#xA;&#x9;&#x9;&#x9;&#x9; file_type,&#xD;&#xA;&#x9;&#x9;&#x9;&#x9; file_series,&#xD;&#xA;&#x9;&#x9;&#x9;&#x9; file_nbr,&#xD;&#xA;&#x9;&#x9;&#x9;&#x9; relationship_type,&#xD;&#xA;&#x9;&#x9;&#x9;&#x9; relationship_role,&#xD;&#xA;&#x9;&#x9;&#x9;&#x9; related_file_seq,&#xD;&#xA;&#x9;&#x9;&#x9;&#x9; related_file_type,&#xD;&#xA;&#x9;&#x9;&#x9;&#x9; related_file_series,&#xD;&#xA;&#x9;&#x9;&#x9;&#x9; related_file_nbr,&#xD;&#xA;&#x9;&#x9;&#x9;&#x9; 2,&#xD;&#xA;&#x9;&#x9;&#x9;&#x9; 'File sequence / type / series / number is invalid'&#xD;&#xA;&#x9;&#x9;FROM  [&quot;+ context.intermediateDB + &quot;].[dbo].VW_import_patent_rels &#xD;&#xA;&#x9;&#x9;WHERE&#x9; ind_import  = 0&#xD;&#xA;&#x9;&#x9; AND&#x9; NOT EXISTS&#xD;&#xA;&#x9;&#x9;&#x9;(&#xD;&#xA;&#x9;&#x9; &#x9;SELECT&#xD;&#xA;&#x9;&#x9;&#x9;&#x9;&#x9; IP_FILE.file_seq,&#xD;&#xA;&#x9;&#x9;&#x9;&#x9;&#x9; IP_FILE.file_typ,&#xD;&#xA;&#x9;&#x9;&#x9;&#x9;&#x9; IP_FILE.file_ser,&#xD;&#xA;&#x9;&#x9;&#x9;&#x9;&#x9; IP_FILE.file_nbr&#xD;&#xA;&#x9;&#x9;&#x9;FROM  IP_FILE &#xD;&#xA;&#x9;&#x9;&#x9;WHERE&#x9; IP_FILE.file_seq  = [&quot;+ context.intermediateDB + &quot;].[dbo].VW_import_patent_rels.file_seq&#x9;&#x9;COLLATE DATABASE_DEFAULT&#xD;&#xA;&#x9;&#x9;&#x9; AND&#x9;IP_FILE.file_typ  = [&quot;+ context.intermediateDB + &quot;].[dbo].VW_import_patent_rels.file_type&#x9;&#x9;COLLATE DATABASE_DEFAULT&#xD;&#xA;&#x9;&#x9;&#x9; AND&#x9;IP_FILE.file_ser  = [&quot;+ context.intermediateDB + &quot;].[dbo].VW_import_patent_rels.file_series&#xD;&#xA;&#x9;&#x9;&#x9; AND&#x9;IP_FILE.file_nbr  = [&quot;+ context.intermediateDB + &quot;].[dbo].VW_import_patent_rels.file_nbr&#xD;&#xA;&#x9;&#x9;&#x9;)&#xD;&#xA;&#x9;&#x9;&#xD;&#xA;&#x9;&#x9;/* If RELATED_FILE_SEQ / RELATED_FILE_TYPE / RELATED_FILE_SERIES / RELATED_FILE_NBR already exists in IP_FILE, insert message ?Related file sequence / type / series / number is invalid? */&#xD;&#xA;&#x9;&#x9;INSERT INTO  [&quot;+ context.intermediateDB + &quot;].[dbo].VW_IMPORT_patent_RELS_RESULT   &#xD;&#xA;&#x9;&#x9;&#x9;&#x9;( file_seq , &#xD;&#xA;&#x9;&#x9;&#x9;&#x9;file_type , &#xD;&#xA;&#x9;&#x9;&#x9;&#x9;file_series , &#xD;&#xA;&#x9;&#x9;&#x9;&#x9;file_nbr , &#xD;&#xA;&#x9;&#x9;&#x9;&#x9;relationship_type , &#xD;&#xA;&#x9;&#x9;&#x9;&#x9;relationship_role , &#xD;&#xA;&#x9;&#x9;&#x9;&#x9;related_file_seq , &#xD;&#xA;&#x9;&#x9;&#x9;&#x9;related_file_type , &#xD;&#xA;&#x9;&#x9;&#x9;&#x9;related_file_series , &#xD;&#xA;&#x9;&#x9;&#x9;&#x9;related_file_nbr , &#xD;&#xA;&#x9;&#x9;&#x9;&#x9;ind_import , &#xD;&#xA;&#x9;&#x9;&#x9;&#x9;msg_import )  &#xD;&#xA;&#x9;&#x9;SELECT&#xD;&#xA;&#x9;&#x9;&#x9;&#x9; file_seq,&#xD;&#xA;&#x9;&#x9;&#x9;&#x9; file_type,&#xD;&#xA;&#x9;&#x9;&#x9;&#x9; file_series,&#xD;&#xA;&#x9;&#x9;&#x9;&#x9; file_nbr,&#xD;&#xA;&#x9;&#x9;&#x9;&#x9; relationship_type,&#xD;&#xA;&#x9;&#x9;&#x9;&#x9; relationship_role,&#xD;&#xA;&#x9;&#x9;&#x9;&#x9; related_file_seq,&#xD;&#xA;&#x9;&#x9;&#x9;&#x9; related_file_type,&#xD;&#xA;&#x9;&#x9;&#x9;&#x9; related_file_series,&#xD;&#xA;&#x9;&#x9;&#x9;&#x9; related_file_nbr,&#xD;&#xA;&#x9;&#x9;&#x9;&#x9; 2,&#xD;&#xA;&#x9;&#x9;&#x9;&#x9; 'Related file sequence / type / series / number is invalid'&#xD;&#xA;&#x9;&#x9;FROM  [&quot;+ context.intermediateDB + &quot;].[dbo].VW_import_patent_rels &#xD;&#xA;&#x9;&#x9;WHERE&#x9; ind_import  = 0&#xD;&#xA;&#x9;&#x9; AND&#x9; NOT EXISTS&#xD;&#xA;&#x9;&#x9;&#x9;(&#xD;&#xA;&#x9;&#x9; &#x9;SELECT&#xD;&#xA;&#x9;&#x9;&#x9;&#x9;&#x9; IP_FILE.file_seq,&#xD;&#xA;&#x9;&#x9;&#x9;&#x9;&#x9; IP_FILE.file_typ,&#xD;&#xA;&#x9;&#x9;&#x9;&#x9;&#x9; IP_FILE.file_ser,&#xD;&#xA;&#x9;&#x9;&#x9;&#x9;&#x9; IP_FILE.file_nbr&#xD;&#xA;&#x9;&#x9;&#x9;FROM  IP_FILE &#xD;&#xA;&#x9;&#x9;&#x9;WHERE&#x9; IP_FILE.file_seq  = [&quot;+ context.intermediateDB + &quot;].[dbo].VW_import_patent_rels.related_file_seq&#x9;&#x9;COLLATE DATABASE_DEFAULT&#xD;&#xA;&#x9;&#x9;&#x9; AND&#x9;IP_FILE.file_typ  = [&quot;+ context.intermediateDB + &quot;].[dbo].VW_import_patent_rels.related_file_type&#x9;&#x9;COLLATE DATABASE_DEFAULT&#xD;&#xA;&#x9;&#x9;&#x9; AND&#x9;IP_FILE.file_ser  = [&quot;+ context.intermediateDB + &quot;].[dbo].VW_import_patent_rels.related_file_series&#xD;&#xA;&#x9;&#x9;&#x9; AND&#x9;IP_FILE.file_nbr  = [&quot;+ context.intermediateDB + &quot;].[dbo].VW_import_patent_rels.related_file_nbr&#xD;&#xA;&#x9;&#x9;&#x9;)&#xD;&#xA;&#x9;&#x9;&#xD;&#xA;&#x9;&#x9;/* *************** END OF VALIDATIONS *************** */&#xD;&#xA;&#x9;&#x9;/* set import indicator to error, for those cases with error messages */&#xD;&#xA;&#x9;&#x9;UPDATE  M   &#xD;&#xA;&#x9;&#x9;SET&#x9;ind_import = 2 &#xD;&#xA;&#x9;&#x9;FROM  [&quot;+ context.intermediateDB + &quot;].[dbo].VW_IMPORT_patent_RELS M &#xD;&#xA;&#x9;&#x9;WHERE    exists&#xD;&#xA;&#x9;&#x9;&#x9;(&#xD;&#xA;&#x9;&#x9; &#x9;SELECT *&#xD;&#xA;&#x9;&#x9;&#x9;FROM  [&quot;+ context.intermediateDB + &quot;].[dbo].VW_IMPORT_patent_RELS_RESULT R &#xD;&#xA;&#x9;&#x9;&#x9;WHERE&#x9; M.file_seq  = R.file_seq&#xD;&#xA;&#x9;&#x9;&#x9; AND&#x9;M.file_type  = R.file_type&#xD;&#xA;&#x9;&#x9;&#x9; AND&#x9;M.file_series  = R.file_series&#xD;&#xA;&#x9;&#x9;&#x9; AND&#x9;M.file_nbr  = R.file_nbr&#xD;&#xA;&#x9;&#x9;&#x9;) &#xD;&#xA;&#x9;&#x9;&#xD;&#xA;&#x9;&#x9;/* set import indicator to validated, for those cases with no error messages */&#xD;&#xA;&#x9;&#x9;UPDATE  M   &#xD;&#xA;&#x9;&#x9;SET&#x9;ind_import = 9 &#xD;&#xA;&#x9;&#x9;FROM  [&quot;+ context.intermediateDB + &quot;].[dbo].VW_IMPORT_patent_RELS M &#xD;&#xA;&#x9;&#x9;WHERE  ind_import  = 0 &#xD;&#xA;&#x9;&#x9;&#xD;&#xA;&#xD;&#xA;&#x9;&#x9;SET NOCOUNT OFF&#xD;&#xA;&#xD;&#xA;&#x9;END&quot;"/>
    <elementParameter field="LABEL" name="NOTE" value="This option only applies when deploying and running in the Talend Runtime" show="false"/>
    <elementParameter field="CHECK" name="SPECIFY_DATASOURCE_ALIAS" value="false" show="false"/>
    <elementParameter field="TEXT" name="DATASOURCE_ALIAS" value="&quot;&quot;" show="false"/>
    <elementParameter field="CHECK" name="DIE_ON_ERROR" value="false"/>
    <elementParameter field="TEXT" name="PROPERTIES" value="&quot;&quot;" show="false"/>
    <elementParameter field="CHECK" name="ACTIVE_DIR_AUTH" value="false" show="false"/>
    <elementParameter field="CHECK" name="PROPAGATE_RECORD_SET" value="false"/>
    <elementParameter field="COLUMN_LIST" name="RECORD_SET_COLUMN" value="" show="false"/>
    <elementParameter field="CHECK" name="USE_PREPAREDSTATEMENT" value="false"/>
    <elementParameter field="TABLE" name="SET_PREPAREDSTATEMENT_PARAMETERS" show="false"/>
    <elementParameter field="ENCODING_TYPE" name="ENCODING" value="&quot;ISO-8859-15&quot;" show="false"/>
    <elementParameter field="TECHNICAL" name="ENCODING:ENCODING_TYPE" value="ISO-8859-15"/>
    <elementParameter field="TEXT" name="COMMIT_EVERY" value="10000" show="false"/>
    <elementParameter field="TEXT" name="CONNECTION_FORMAT" value="row"/>
    <metadata connector="FLOW" name="tMSSqlRow_14"/>
    <metadata connector="REJECT" name="REJECT">
      <column defaultValue="" key="false" length="255" name="errorCode" nullable="true" precision="0" sourceType="" type="id_String" originalLength="-1" usefulColumn="true"/>
      <column defaultValue="" key="false" length="255" name="errorMessage" nullable="true" precision="0" sourceType="" type="id_String" originalLength="-1" usefulColumn="true"/>
    </metadata>
  </node>
  <node componentName="tMSSqlRow" componentVersion="0.102" offsetLabelX="0" offsetLabelY="0" posX="224" posY="2240">
    <elementParameter field="TEXT" name="UNIQUE_NAME" value="tMSSqlRow_15" show="false"/>
    <elementParameter field="CHECK" name="USE_EXISTING_CONNECTION" value="true"/>
    <elementParameter field="COMPONENT_LIST" name="CONNECTION" value="tMSSqlConnection_4"/>
    <elementParameter field="CLOSED_LIST" name="DRIVER" value="JTDS" show="false"/>
    <elementParameter field="TEXT" name="HOST" value="&quot;&quot;" show="false"/>
    <elementParameter field="TEXT" name="PORT" value="&quot;1433&quot;" show="false"/>
    <elementParameter field="TEXT" name="DB_SCHEMA" value="&quot;&quot;" show="false"/>
    <elementParameter field="TEXT" name="DBNAME" value="&quot;&quot;" show="false"/>
    <elementParameter field="TEXT" name="TYPE" value="MSSQL" show="false"/>
    <elementParameter field="TEXT" name="USER" value="&quot;&quot;" show="false"/>
    <elementParameter field="PASSWORD" name="PASS" value="enc:system.encryption.key.v1:HInQ/YQOcbmrMNUFfzAk9nLX+E1xrXYgO1RxxhEo" show="false"/>
    <elementParameter field="DBTABLE" name="TABLE" value="&quot;&quot;"/>
    <elementParameter field="CHECK" name="IDENTITY_INSERT" value="false"/>
    <elementParameter field="QUERYSTORE_TYPE" name="QUERYSTORE" value="&quot;&quot;"/>
    <elementParameter field="TECHNICAL" name="QUERYSTORE:REPOSITORY_QUERYSTORE_TYPE" value="" show="false"/>
    <elementParameter field="TECHNICAL" name="QUERYSTORE:QUERYSTORE_TYPE" value="BUILT_IN"/>
    <elementParameter field="MEMO_SQL" name="QUERY" value="&quot;If Exists ( SELECT name &#xD;&#xA;            FROM sysobjects  &#xD;&#xA;            WHERE name = 'ImportPateRelsProcessAll'&#xD;&#xA;            AND type = 'P')&#xD;&#xA;&#x9;DROP PROCEDURE ImportPateRelsProcessAll;&#xD;&#xA;&quot;"/>
    <elementParameter field="LABEL" name="NOTE" value="This option only applies when deploying and running in the Talend Runtime" show="false"/>
    <elementParameter field="CHECK" name="SPECIFY_DATASOURCE_ALIAS" value="false" show="false"/>
    <elementParameter field="TEXT" name="DATASOURCE_ALIAS" value="&quot;&quot;" show="false"/>
    <elementParameter field="CHECK" name="DIE_ON_ERROR" value="false"/>
    <elementParameter field="TEXT" name="PROPERTIES" value="&quot;&quot;" show="false"/>
    <elementParameter field="CHECK" name="ACTIVE_DIR_AUTH" value="false" show="false"/>
    <elementParameter field="CHECK" name="PROPAGATE_RECORD_SET" value="false"/>
    <elementParameter field="COLUMN_LIST" name="RECORD_SET_COLUMN" value="" show="false"/>
    <elementParameter field="CHECK" name="USE_PREPAREDSTATEMENT" value="false"/>
    <elementParameter field="TABLE" name="SET_PREPAREDSTATEMENT_PARAMETERS" show="false"/>
    <elementParameter field="ENCODING_TYPE" name="ENCODING" value="&quot;ISO-8859-15&quot;" show="false"/>
    <elementParameter field="TECHNICAL" name="ENCODING:ENCODING_TYPE" value="ISO-8859-15"/>
    <elementParameter field="TEXT" name="COMMIT_EVERY" value="10000" show="false"/>
    <elementParameter field="TEXT" name="CONNECTION_FORMAT" value="row"/>
    <metadata connector="FLOW" name="tMSSqlRow_15"/>
    <metadata connector="REJECT" name="REJECT">
      <column defaultValue="" key="false" length="255" name="errorCode" nullable="true" precision="0" sourceType="" type="id_String" originalLength="-1" usefulColumn="true"/>
      <column defaultValue="" key="false" length="255" name="errorMessage" nullable="true" precision="0" sourceType="" type="id_String" originalLength="-1" usefulColumn="true"/>
    </metadata>
  </node>
  <node componentName="tMSSqlRow" componentVersion="0.102" offsetLabelX="0" offsetLabelY="0" posX="352" posY="2240">
    <elementParameter field="TEXT" name="UNIQUE_NAME" value="tMSSqlRow_16" show="false"/>
    <elementParameter field="CHECK" name="USE_EXISTING_CONNECTION" value="true"/>
    <elementParameter field="COMPONENT_LIST" name="CONNECTION" value="tMSSqlConnection_4"/>
    <elementParameter field="CLOSED_LIST" name="DRIVER" value="JTDS" show="false"/>
    <elementParameter field="TEXT" name="HOST" value="&quot;&quot;" show="false"/>
    <elementParameter field="TEXT" name="PORT" value="&quot;1433&quot;" show="false"/>
    <elementParameter field="TEXT" name="DB_SCHEMA" value="&quot;&quot;" show="false"/>
    <elementParameter field="TEXT" name="DBNAME" value="&quot;&quot;" show="false"/>
    <elementParameter field="TEXT" name="TYPE" value="MSSQL" show="false"/>
    <elementParameter field="TEXT" name="USER" value="&quot;&quot;" show="false"/>
    <elementParameter field="PASSWORD" name="PASS" value="enc:system.encryption.key.v1:Ntm7lCzVcC6eATxUOPPtBdH/DRe85kscVbCyQboT" show="false"/>
    <elementParameter field="DBTABLE" name="TABLE" value="&quot;&quot;"/>
    <elementParameter field="CHECK" name="IDENTITY_INSERT" value="false"/>
    <elementParameter field="QUERYSTORE_TYPE" name="QUERYSTORE" value="&quot;&quot;"/>
    <elementParameter field="TECHNICAL" name="QUERYSTORE:REPOSITORY_QUERYSTORE_TYPE" value="" show="false"/>
    <elementParameter field="TECHNICAL" name="QUERYSTORE:QUERYSTORE_TYPE" value="BUILT_IN"/>
    <elementParameter field="MEMO_SQL" name="QUERY" value="&quot;CREATE PROCEDURE ImportPateRelsProcessAll&#xD;&#xA;AS &#xD;&#xA;&#x9;BEGIN&#xD;&#xA;&#x9;&#x9;SET NOCOUNT ON&#xD;&#xA;&#x9;&#x9;&#xD;&#xA;&#x9;&#x9;/* Procedure name: ImportPateRelsProcess&#xD;&#xA;&#x9;&#x9;Input:  import tables with IND_IMPORT = 9&#xD;&#xA;&#x9;&#x9;Output: IPAS database updated and import tables updated with IND_IMPORT = 1&#xD;&#xA;&#x9;&#x9;*/&#xD;&#xA;&#x9;&#x9;&#xD;&#xA;&#x9;&#x9;/* insert forward relationships */&#xD;&#xA;&#x9;&#x9;INSERT INTO  ip_file_relationship   &#xD;&#xA;&#x9;&#x9;&#x9;&#x9;( row_version , &#xD;&#xA;&#x9;&#x9;&#x9;&#x9;file_seq1 , &#xD;&#xA;&#x9;&#x9;&#x9;&#x9;file_typ1 , &#xD;&#xA;&#x9;&#x9;&#x9;&#x9;file_ser1 , &#xD;&#xA;&#x9;&#x9;&#x9;&#x9;file_nbr1 , &#xD;&#xA;&#x9;&#x9;&#x9;&#x9;file_seq2 , &#xD;&#xA;&#x9;&#x9;&#x9;&#x9;file_typ2 , &#xD;&#xA;&#x9;&#x9;&#x9;&#x9;file_ser2 , &#xD;&#xA;&#x9;&#x9;&#x9;&#x9;file_nbr2 , &#xD;&#xA;&#x9;&#x9;&#x9;&#x9;relationship_typ )  &#xD;&#xA;&#x9;&#x9;SELECT DISTINCT&#xD;&#xA;&#x9;&#x9;&#x9;&#x9; 1,&#xD;&#xA;&#x9;&#x9;&#x9;&#x9; file_seq,&#xD;&#xA;&#x9;&#x9;&#x9;&#x9; file_type,&#xD;&#xA;&#x9;&#x9;&#x9;&#x9; file_series,&#xD;&#xA;&#x9;&#x9;&#x9;&#x9; file_nbr,&#xD;&#xA;&#x9;&#x9;&#x9;&#x9; related_file_seq,&#xD;&#xA;&#x9;&#x9;&#x9;&#x9; related_file_type,&#xD;&#xA;&#x9;&#x9;&#x9;&#x9; related_file_series,&#xD;&#xA;&#x9;&#x9;&#x9;&#x9; related_file_nbr,&#xD;&#xA;&#x9;&#x9;&#x9;&#x9; relationship_type&#xD;&#xA;&#x9;&#x9;FROM  [&quot;+ context.intermediateDB + &quot;].[dbo].VW_IMPORT_patent_RELS &#xD;&#xA;&#x9;&#x9;WHERE&#x9; ind_import  = '9'&#xD;&#xA;&#x9;&#x9; AND&#x9;relationship_role  = '1'&#xD;&#xA;&#x9;&#x9;&#xD;&#xA;&#x9;&#x9;/* insert backward relationships */&#xD;&#xA;&#x9;&#x9;INSERT INTO  ip_file_relationship   &#xD;&#xA;&#x9;&#x9;&#x9;&#x9;( row_version , &#xD;&#xA;&#x9;&#x9;&#x9;&#x9;file_seq1 , &#xD;&#xA;&#x9;&#x9;&#x9;&#x9;file_typ1 , &#xD;&#xA;&#x9;&#x9;&#x9;&#x9;file_ser1 , &#xD;&#xA;&#x9;&#x9;&#x9;&#x9;file_nbr1 , &#xD;&#xA;&#x9;&#x9;&#x9;&#x9;file_seq2 , &#xD;&#xA;&#x9;&#x9;&#x9;&#x9;file_typ2 , &#xD;&#xA;&#x9;&#x9;&#x9;&#x9;file_ser2 , &#xD;&#xA;&#x9;&#x9;&#x9;&#x9;file_nbr2 , &#xD;&#xA;&#x9;&#x9;&#x9;&#x9;relationship_typ )  &#xD;&#xA;&#x9;&#x9;SELECT DISTINCT&#xD;&#xA;&#x9;&#x9;&#x9;&#x9; 1,&#xD;&#xA;&#x9;&#x9;&#x9;&#x9; related_file_seq,&#xD;&#xA;&#x9;&#x9;&#x9;&#x9; related_file_type,&#xD;&#xA;&#x9;&#x9;&#x9;&#x9; related_file_series,&#xD;&#xA;&#x9;&#x9;&#x9;&#x9; related_file_nbr,&#xD;&#xA;&#x9;&#x9;&#x9;&#x9; file_seq,&#xD;&#xA;&#x9;&#x9;&#x9;&#x9; file_type,&#xD;&#xA;&#x9;&#x9;&#x9;&#x9; file_series,&#xD;&#xA;&#x9;&#x9;&#x9;&#x9; file_nbr,&#xD;&#xA;&#x9;&#x9;&#x9;&#x9; relationship_type&#xD;&#xA;&#x9;&#x9;FROM  [&quot;+ context.intermediateDB + &quot;].[dbo].VW_IMPORT_patent_RELS &#xD;&#xA;&#x9;&#x9;WHERE&#x9; ind_import  = '9'&#xD;&#xA;&#x9;&#x9; AND&#x9;relationship_role  = '2'&#xD;&#xA;&#x9;&#x9;&#xD;&#xA;&#xD;&#xA;&#x9;&#x9;SET NOCOUNT OFF&#xD;&#xA;&#xD;&#xA;&#x9;END&quot;"/>
    <elementParameter field="LABEL" name="NOTE" value="This option only applies when deploying and running in the Talend Runtime" show="false"/>
    <elementParameter field="CHECK" name="SPECIFY_DATASOURCE_ALIAS" value="false" show="false"/>
    <elementParameter field="TEXT" name="DATASOURCE_ALIAS" value="&quot;&quot;" show="false"/>
    <elementParameter field="CHECK" name="DIE_ON_ERROR" value="false"/>
    <elementParameter field="TEXT" name="PROPERTIES" value="&quot;&quot;" show="false"/>
    <elementParameter field="CHECK" name="ACTIVE_DIR_AUTH" value="false" show="false"/>
    <elementParameter field="CHECK" name="PROPAGATE_RECORD_SET" value="false"/>
    <elementParameter field="COLUMN_LIST" name="RECORD_SET_COLUMN" value="" show="false"/>
    <elementParameter field="CHECK" name="USE_PREPAREDSTATEMENT" value="false"/>
    <elementParameter field="TABLE" name="SET_PREPAREDSTATEMENT_PARAMETERS" show="false"/>
    <elementParameter field="ENCODING_TYPE" name="ENCODING" value="&quot;ISO-8859-15&quot;" show="false"/>
    <elementParameter field="TECHNICAL" name="ENCODING:ENCODING_TYPE" value="ISO-8859-15"/>
    <elementParameter field="TEXT" name="COMMIT_EVERY" value="10000" show="false"/>
    <elementParameter field="TEXT" name="CONNECTION_FORMAT" value="row"/>
    <metadata connector="FLOW" name="tMSSqlRow_16"/>
    <metadata connector="REJECT" name="REJECT">
      <column defaultValue="" key="false" length="255" name="errorCode" nullable="true" precision="0" sourceType="" type="id_String" originalLength="-1" usefulColumn="true"/>
      <column defaultValue="" key="false" length="255" name="errorMessage" nullable="true" precision="0" sourceType="" type="id_String" originalLength="-1" usefulColumn="true"/>
    </metadata>
  </node>
  <node componentName="tLogRow" componentVersion="0.101" offsetLabelX="0" offsetLabelY="0" posX="224" posY="2304">
    <elementParameter field="TEXT" name="UNIQUE_NAME" value="tLogRow_17" show="false"/>
    <elementParameter field="RADIO" name="BASIC_MODE" value="false"/>
    <elementParameter field="RADIO" name="TABLE_PRINT" value="false"/>
    <elementParameter field="RADIO" name="VERTICAL" value="true"/>
    <elementParameter field="RADIO" name="PRINT_UNIQUE" value="true"/>
    <elementParameter field="RADIO" name="PRINT_LABEL" value="false"/>
    <elementParameter field="RADIO" name="PRINT_UNIQUE_LABEL" value="false"/>
    <elementParameter field="TEXT" name="FIELDSEPARATOR" value="&quot;|&quot;" show="false"/>
    <elementParameter field="CHECK" name="PRINT_HEADER" value="false" show="false"/>
    <elementParameter field="CHECK" name="PRINT_UNIQUE_NAME" value="false" show="false"/>
    <elementParameter field="CHECK" name="PRINT_COLNAMES" value="false" show="false"/>
    <elementParameter field="CHECK" name="USE_FIXED_LENGTH" value="false" show="false"/>
    <elementParameter field="TABLE" name="LENGTHS" show="false">
      <elementValue elementRef="SCHEMA_COLUMN" value="errorCode"/>
      <elementValue elementRef="LENGTH" value="10"/>
      <elementValue elementRef="SCHEMA_COLUMN" value="errorMessage"/>
      <elementValue elementRef="LENGTH" value="10"/>
    </elementParameter>
    <elementParameter field="CHECK" name="PRINT_CONTENT_WITH_LOG4J" value="true"/>
    <elementParameter field="TEXT" name="SCHEMA_OPT_NUM" value="100" show="false"/>
    <elementParameter field="TEXT" name="CONNECTION_FORMAT" value="row"/>
    <metadata connector="FLOW" name="tLogRow_17">
      <column defaultValue="" key="false" length="255" name="errorCode" nullable="true" precision="0" sourceType="" type="id_String" originalLength="-1" usefulColumn="true"/>
      <column defaultValue="" key="false" length="255" name="errorMessage" nullable="true" precision="0" sourceType="" type="id_String" originalLength="-1" usefulColumn="true"/>
    </metadata>
  </node>
  <node componentName="tLogRow" componentVersion="0.101" offsetLabelX="0" offsetLabelY="0" posX="352" posY="2304">
    <elementParameter field="TEXT" name="UNIQUE_NAME" value="tLogRow_18" show="false"/>
    <elementParameter field="RADIO" name="BASIC_MODE" value="false"/>
    <elementParameter field="RADIO" name="TABLE_PRINT" value="false"/>
    <elementParameter field="RADIO" name="VERTICAL" value="true"/>
    <elementParameter field="RADIO" name="PRINT_UNIQUE" value="true"/>
    <elementParameter field="RADIO" name="PRINT_LABEL" value="false"/>
    <elementParameter field="RADIO" name="PRINT_UNIQUE_LABEL" value="false"/>
    <elementParameter field="TEXT" name="FIELDSEPARATOR" value="&quot;|&quot;" show="false"/>
    <elementParameter field="CHECK" name="PRINT_HEADER" value="false" show="false"/>
    <elementParameter field="CHECK" name="PRINT_UNIQUE_NAME" value="false" show="false"/>
    <elementParameter field="CHECK" name="PRINT_COLNAMES" value="false" show="false"/>
    <elementParameter field="CHECK" name="USE_FIXED_LENGTH" value="false" show="false"/>
    <elementParameter field="TABLE" name="LENGTHS" show="false">
      <elementValue elementRef="SCHEMA_COLUMN" value="errorCode"/>
      <elementValue elementRef="LENGTH" value="10"/>
      <elementValue elementRef="SCHEMA_COLUMN" value="errorMessage"/>
      <elementValue elementRef="LENGTH" value="10"/>
    </elementParameter>
    <elementParameter field="CHECK" name="PRINT_CONTENT_WITH_LOG4J" value="true"/>
    <elementParameter field="TEXT" name="SCHEMA_OPT_NUM" value="100" show="false"/>
    <elementParameter field="TEXT" name="CONNECTION_FORMAT" value="row"/>
    <metadata connector="FLOW" name="tLogRow_18">
      <column defaultValue="" key="false" length="255" name="errorCode" nullable="true" precision="0" sourceType="" type="id_String" originalLength="-1" usefulColumn="true"/>
      <column defaultValue="" key="false" length="255" name="errorMessage" nullable="true" precision="0" sourceType="" type="id_String" originalLength="-1" usefulColumn="true"/>
    </metadata>
  </node>
  <node componentName="tMSSqlRow" componentVersion="0.102" offsetLabelX="0" offsetLabelY="0" posX="672" posY="2336">
    <elementParameter field="TEXT" name="UNIQUE_NAME" value="tMSSqlRow_17" show="false"/>
    <elementParameter field="CHECK" name="USE_EXISTING_CONNECTION" value="true"/>
    <elementParameter field="COMPONENT_LIST" name="CONNECTION" value="tMSSqlConnection_4"/>
    <elementParameter field="CLOSED_LIST" name="DRIVER" value="JTDS" show="false"/>
    <elementParameter field="TEXT" name="HOST" value="&quot;&quot;" show="false"/>
    <elementParameter field="TEXT" name="PORT" value="&quot;1433&quot;" show="false"/>
    <elementParameter field="TEXT" name="DB_SCHEMA" value="&quot;&quot;" show="false"/>
    <elementParameter field="TEXT" name="DBNAME" value="&quot;&quot;" show="false"/>
    <elementParameter field="TEXT" name="TYPE" value="MSSQL" show="false"/>
    <elementParameter field="TEXT" name="USER" value="&quot;&quot;" show="false"/>
    <elementParameter field="PASSWORD" name="PASS" value="enc:system.encryption.key.v1:Pqlme0qRWpLWMydL+RtJB8HJHAFK+a6P1RTQqMSV" show="false"/>
    <elementParameter field="DBTABLE" name="TABLE" value="&quot;&quot;"/>
    <elementParameter field="CHECK" name="IDENTITY_INSERT" value="false"/>
    <elementParameter field="QUERYSTORE_TYPE" name="QUERYSTORE" value="&quot;&quot;"/>
    <elementParameter field="TECHNICAL" name="QUERYSTORE:REPOSITORY_QUERYSTORE_TYPE" value="" show="false"/>
    <elementParameter field="TECHNICAL" name="QUERYSTORE:QUERYSTORE_TYPE" value="BUILT_IN"/>
    <elementParameter field="MEMO_SQL" name="QUERY" value="&quot;If Exists ( SELECT name &#xD;&#xA;            FROM sysobjects  &#xD;&#xA;            WHERE name = 'ImportUserdocValidate'&#xD;&#xA;            AND type = 'P')&#xD;&#xA;&#x9;DROP PROCEDURE ImportUserdocValidate;&#xD;&#xA;&quot;"/>
    <elementParameter field="LABEL" name="NOTE" value="This option only applies when deploying and running in the Talend Runtime" show="false"/>
    <elementParameter field="CHECK" name="SPECIFY_DATASOURCE_ALIAS" value="false" show="false"/>
    <elementParameter field="TEXT" name="DATASOURCE_ALIAS" value="&quot;&quot;" show="false"/>
    <elementParameter field="CHECK" name="DIE_ON_ERROR" value="false"/>
    <elementParameter field="TEXT" name="PROPERTIES" value="&quot;&quot;" show="false"/>
    <elementParameter field="CHECK" name="ACTIVE_DIR_AUTH" value="false" show="false"/>
    <elementParameter field="CHECK" name="PROPAGATE_RECORD_SET" value="false"/>
    <elementParameter field="COLUMN_LIST" name="RECORD_SET_COLUMN" value="" show="false"/>
    <elementParameter field="CHECK" name="USE_PREPAREDSTATEMENT" value="false"/>
    <elementParameter field="TABLE" name="SET_PREPAREDSTATEMENT_PARAMETERS" show="false"/>
    <elementParameter field="ENCODING_TYPE" name="ENCODING" value="&quot;ISO-8859-15&quot;" show="false"/>
    <elementParameter field="TECHNICAL" name="ENCODING:ENCODING_TYPE" value="ISO-8859-15"/>
    <elementParameter field="TEXT" name="COMMIT_EVERY" value="10000" show="false"/>
    <elementParameter field="TEXT" name="CONNECTION_FORMAT" value="row"/>
    <metadata connector="FLOW" name="tMSSqlRow_17"/>
    <metadata connector="REJECT" name="REJECT">
      <column defaultValue="" key="false" length="255" name="errorCode" nullable="true" precision="0" sourceType="" type="id_String" originalLength="-1" usefulColumn="true"/>
      <column defaultValue="" key="false" length="255" name="errorMessage" nullable="true" precision="0" sourceType="" type="id_String" originalLength="-1" usefulColumn="true"/>
    </metadata>
  </node>
  <node componentName="tLogRow" componentVersion="0.101" offsetLabelX="0" offsetLabelY="0" posX="672" posY="2240">
    <elementParameter field="TEXT" name="UNIQUE_NAME" value="tLogRow_19" show="false"/>
    <elementParameter field="RADIO" name="BASIC_MODE" value="false"/>
    <elementParameter field="RADIO" name="TABLE_PRINT" value="false"/>
    <elementParameter field="RADIO" name="VERTICAL" value="true"/>
    <elementParameter field="RADIO" name="PRINT_UNIQUE" value="true"/>
    <elementParameter field="RADIO" name="PRINT_LABEL" value="false"/>
    <elementParameter field="RADIO" name="PRINT_UNIQUE_LABEL" value="false"/>
    <elementParameter field="TEXT" name="FIELDSEPARATOR" value="&quot;|&quot;" show="false"/>
    <elementParameter field="CHECK" name="PRINT_HEADER" value="false" show="false"/>
    <elementParameter field="CHECK" name="PRINT_UNIQUE_NAME" value="false" show="false"/>
    <elementParameter field="CHECK" name="PRINT_COLNAMES" value="false" show="false"/>
    <elementParameter field="CHECK" name="USE_FIXED_LENGTH" value="false" show="false"/>
    <elementParameter field="TABLE" name="LENGTHS" show="false">
      <elementValue elementRef="SCHEMA_COLUMN" value="errorCode"/>
      <elementValue elementRef="LENGTH" value="10"/>
      <elementValue elementRef="SCHEMA_COLUMN" value="errorMessage"/>
      <elementValue elementRef="LENGTH" value="10"/>
    </elementParameter>
    <elementParameter field="CHECK" name="PRINT_CONTENT_WITH_LOG4J" value="true"/>
    <elementParameter field="TEXT" name="SCHEMA_OPT_NUM" value="100" show="false"/>
    <elementParameter field="TEXT" name="CONNECTION_FORMAT" value="row"/>
    <metadata connector="FLOW" name="tLogRow_19">
      <column defaultValue="" key="false" length="255" name="errorCode" nullable="true" precision="0" sourceType="" type="id_String" originalLength="-1" usefulColumn="true"/>
      <column defaultValue="" key="false" length="255" name="errorMessage" nullable="true" precision="0" sourceType="" type="id_String" originalLength="-1" usefulColumn="true"/>
    </metadata>
  </node>
  <node componentName="tLogRow" componentVersion="0.101" offsetLabelX="0" offsetLabelY="0" posX="800" posY="2240">
    <elementParameter field="TEXT" name="UNIQUE_NAME" value="tLogRow_20" show="false"/>
    <elementParameter field="RADIO" name="BASIC_MODE" value="false"/>
    <elementParameter field="RADIO" name="TABLE_PRINT" value="false"/>
    <elementParameter field="RADIO" name="VERTICAL" value="true"/>
    <elementParameter field="RADIO" name="PRINT_UNIQUE" value="true"/>
    <elementParameter field="RADIO" name="PRINT_LABEL" value="false"/>
    <elementParameter field="RADIO" name="PRINT_UNIQUE_LABEL" value="false"/>
    <elementParameter field="TEXT" name="FIELDSEPARATOR" value="&quot;|&quot;" show="false"/>
    <elementParameter field="CHECK" name="PRINT_HEADER" value="false" show="false"/>
    <elementParameter field="CHECK" name="PRINT_UNIQUE_NAME" value="false" show="false"/>
    <elementParameter field="CHECK" name="PRINT_COLNAMES" value="false" show="false"/>
    <elementParameter field="CHECK" name="USE_FIXED_LENGTH" value="false" show="false"/>
    <elementParameter field="TABLE" name="LENGTHS" show="false">
      <elementValue elementRef="SCHEMA_COLUMN" value="errorCode"/>
      <elementValue elementRef="LENGTH" value="10"/>
      <elementValue elementRef="SCHEMA_COLUMN" value="errorMessage"/>
      <elementValue elementRef="LENGTH" value="10"/>
    </elementParameter>
    <elementParameter field="CHECK" name="PRINT_CONTENT_WITH_LOG4J" value="true"/>
    <elementParameter field="TEXT" name="SCHEMA_OPT_NUM" value="100" show="false"/>
    <elementParameter field="TEXT" name="CONNECTION_FORMAT" value="row"/>
    <metadata connector="FLOW" name="tLogRow_20">
      <column defaultValue="" key="false" length="255" name="errorCode" nullable="true" precision="0" sourceType="" type="id_String" originalLength="-1" usefulColumn="true"/>
      <column defaultValue="" key="false" length="255" name="errorMessage" nullable="true" precision="0" sourceType="" type="id_String" originalLength="-1" usefulColumn="true"/>
    </metadata>
  </node>
  <node componentName="tMSSqlRow" componentVersion="0.102" offsetLabelX="0" offsetLabelY="0" posX="800" posY="2336">
    <elementParameter field="TEXT" name="UNIQUE_NAME" value="tMSSqlRow_18" show="false"/>
    <elementParameter field="CHECK" name="USE_EXISTING_CONNECTION" value="true"/>
    <elementParameter field="COMPONENT_LIST" name="CONNECTION" value="tMSSqlConnection_4"/>
    <elementParameter field="CLOSED_LIST" name="DRIVER" value="JTDS" show="false"/>
    <elementParameter field="TEXT" name="HOST" value="&quot;&quot;" show="false"/>
    <elementParameter field="TEXT" name="PORT" value="&quot;1433&quot;" show="false"/>
    <elementParameter field="TEXT" name="DB_SCHEMA" value="&quot;&quot;" show="false"/>
    <elementParameter field="TEXT" name="DBNAME" value="&quot;&quot;" show="false"/>
    <elementParameter field="TEXT" name="TYPE" value="MSSQL" show="false"/>
    <elementParameter field="TEXT" name="USER" value="&quot;&quot;" show="false"/>
    <elementParameter field="PASSWORD" name="PASS" value="enc:system.encryption.key.v1:97weBExW9jKflsvsFsvdRqwqgR6vXm+T+8UOmq26" show="false"/>
    <elementParameter field="DBTABLE" name="TABLE" value="&quot;&quot;"/>
    <elementParameter field="CHECK" name="IDENTITY_INSERT" value="false"/>
    <elementParameter field="QUERYSTORE_TYPE" name="QUERYSTORE" value="&quot;&quot;"/>
    <elementParameter field="TECHNICAL" name="QUERYSTORE:REPOSITORY_QUERYSTORE_TYPE" value="" show="false"/>
    <elementParameter field="TECHNICAL" name="QUERYSTORE:QUERYSTORE_TYPE" value="BUILT_IN"/>
    <elementParameter field="MEMO_SQL" name="QUERY" value="&quot;CREATE PROCEDURE ImportUserdocValidate&#xD;&#xA;AS &#xD;&#xA;BEGIN&#xD;&#xA;&#x9;&#x9;SET NOCOUNT ON&#xD;&#xA;&#x9;&#x9;&#xD;&#xA;&#x9;&#x9;/* Procedure name: ImportUserdocValidate&#xD;&#xA;&#x9;&#x9;Input:  IPAS database and import tables not imported (i.e. IND_IMPORT not 1)&#xD;&#xA;&#x9;&#x9;Output: if errors, validation flag set to 2 and error messages in [&quot;+ context.intermediateDB + &quot;].[dbo].VW_IMPORT_USERDOC_RESULT&#xD;&#xA;&#x9;&#x9;if OK, validation flag set to 9&#xD;&#xA;&#x9;&#x9;create or replace procedure ImportUserdocValidate as&#xD;&#xA;&#x9;&#x9;*/&#xD;&#xA;&#x9;&#x9;&#xD;&#xA;&#x9;&#x9;/* flag all pending marks as to be validated */&#xD;&#xA;&#x9;&#x9;UPDATE  [&quot;+ context.intermediateDB + &quot;].[dbo].VW_import_userdoc   &#xD;&#xA;&#x9;&#x9;SET&#x9;ind_import = 0 &#xD;&#xA;&#x9;&#x9;WHERE  ind_import  is null&#xD;&#xA;&#x9;&#x9; OR&#x9;ind_import  not in ( 0  , 1  ) &#xD;&#xA;&#x9;&#x9;&#xD;&#xA;&#x9;&#x9;/* delete errors from prior executions */&#xD;&#xA;&#x9;&#x9;DELETE FROM   [&quot;+ context.intermediateDB + &quot;].[dbo].VW_IMPORT_USERDOC_RESULT    &#xD;&#xA;&#x9;&#x9;&#xD;&#xA;&#x9;&#x9;/* 4.1.1 [&quot;+ context.intermediateDB + &quot;].[dbo].VW_IMPORT_USERDOC validations */&#xD;&#xA;&#x9;&#x9;/* 4.1.1.1 Codes validations */&#xD;&#xA;&#x9;&#x9;/* DOC_ORI: if not null and not exists in CF_DOC_ORIGIN, message ?Invalid document origin code? */&#xD;&#xA;&#x9;&#x9;INSERT INTO  [&quot;+ context.intermediateDB + &quot;].[dbo].VW_IMPORT_USERDOC_RESULT   &#xD;&#xA;&#x9;&#x9;&#x9;&#x9;( userdoc_seq , &#xD;&#xA;&#x9;&#x9;&#x9;&#x9;userdoc_series , &#xD;&#xA;&#x9;&#x9;&#x9;&#x9;userdoc_nbr , &#xD;&#xA;&#x9;&#x9;&#x9;&#x9;ind_import , &#xD;&#xA;&#x9;&#x9;&#x9;&#x9;msg_import )  &#xD;&#xA;&#x9;&#x9;SELECT&#xD;&#xA;&#x9;&#x9;&#x9;&#x9; userdoc_seq,&#xD;&#xA;&#x9;&#x9;&#x9;&#x9; userdoc_series,&#xD;&#xA;&#x9;&#x9;&#x9;&#x9; userdoc_nbr,&#xD;&#xA;&#x9;&#x9;&#x9;&#x9; 2,&#xD;&#xA;&#x9;&#x9;&#x9;&#x9; 'Invalid document origin code'&#xD;&#xA;&#x9;&#x9;FROM  [&quot;+ context.intermediateDB + &quot;].[dbo].VW_import_userdoc &#xD;&#xA;&#x9;&#x9;WHERE&#x9; ind_import  = 0&#xD;&#xA;&#x9;&#x9; AND&#x9;doc_ori  is not null&#xD;&#xA;&#x9;&#x9; AND&#x9;doc_ori  COLLATE database_default not in&#xD;&#xA;&#x9;&#x9;&#x9;(&#xD;&#xA;&#x9;&#x9; &#x9;SELECT doc_ori&#xD;&#xA;&#x9;&#x9;&#x9;FROM  CF_DOC_ORIGIN &#xD;&#xA;&#x9;&#x9;&#x9;)&#xD;&#xA;&#x9;&#x9;&#xD;&#xA;&#x9;&#x9;/* DOC_ORI: if null and not exists config param 'MigrationCodOri' message ?Null document origin code but no 'MigrationDocOri' parameter configured? */&#xD;&#xA;&#x9;&#x9;INSERT INTO  [&quot;+ context.intermediateDB + &quot;].[dbo].VW_IMPORT_USERDOC_RESULT   &#xD;&#xA;&#x9;&#x9;&#x9;&#x9;( userdoc_seq , &#xD;&#xA;&#x9;&#x9;&#x9;&#x9;userdoc_series , &#xD;&#xA;&#x9;&#x9;&#x9;&#x9;userdoc_nbr , &#xD;&#xA;&#x9;&#x9;&#x9;&#x9;ind_import , &#xD;&#xA;&#x9;&#x9;&#x9;&#x9;msg_import )  &#xD;&#xA;&#x9;&#x9;SELECT&#xD;&#xA;&#x9;&#x9;&#x9;&#x9; userdoc_seq,&#xD;&#xA;&#x9;&#x9;&#x9;&#x9; userdoc_series,&#xD;&#xA;&#x9;&#x9;&#x9;&#x9; userdoc_nbr,&#xD;&#xA;&#x9;&#x9;&#x9;&#x9; 2,&#xD;&#xA;&#x9;&#x9;&#x9;&#x9; 'Null document origin code but no [MigrationCodOri] parameter configured'&#xD;&#xA;&#x9;&#x9;FROM  [&quot;+ context.intermediateDB + &quot;].[dbo].VW_import_userdoc &#xD;&#xA;&#x9;&#x9;WHERE&#x9; ind_import  = 0&#xD;&#xA;&#x9;&#x9; AND&#x9;doc_ori  is null&#xD;&#xA;&#x9;&#x9; AND&#x9;NOT   exists&#xD;&#xA;&#x9;&#x9;&#x9;(&#xD;&#xA;&#x9;&#x9; &#x9;SELECT *&#xD;&#xA;&#x9;&#x9;&#x9;FROM  CF_CONFIG_PARAM &#xD;&#xA;&#x9;&#x9;&#x9;WHERE&#x9; config_code  = 'MigrationCodOri'&#xD;&#xA;&#x9;&#x9;&#x9;)&#xD;&#xA;&#x9;&#x9;&#xD;&#xA;&#x9;&#x9;/* USERDOC_SEQ: if not exists in CF_DOC_SEQUENCE, message ?Invalid document sequence code? */&#xD;&#xA;&#x9;&#x9;INSERT INTO  [&quot;+ context.intermediateDB + &quot;].[dbo].VW_IMPORT_USERDOC_RESULT   &#xD;&#xA;&#x9;&#x9;&#x9;&#x9;( userdoc_seq , &#xD;&#xA;&#x9;&#x9;&#x9;&#x9;userdoc_series , &#xD;&#xA;&#x9;&#x9;&#x9;&#x9;userdoc_nbr , &#xD;&#xA;&#x9;&#x9;&#x9;&#x9;ind_import , &#xD;&#xA;&#x9;&#x9;&#x9;&#x9;msg_import )  &#xD;&#xA;&#x9;&#x9;SELECT&#xD;&#xA;&#x9;&#x9;&#x9;&#x9; userdoc_seq,&#xD;&#xA;&#x9;&#x9;&#x9;&#x9; userdoc_series,&#xD;&#xA;&#x9;&#x9;&#x9;&#x9; userdoc_nbr,&#xD;&#xA;&#x9;&#x9;&#x9;&#x9; 2,&#xD;&#xA;&#x9;&#x9;&#x9;&#x9; 'Invalid document sequence code'&#xD;&#xA;&#x9;&#x9;FROM  [&quot;+ context.intermediateDB + &quot;].[dbo].VW_import_userdoc &#xD;&#xA;&#x9;&#x9;WHERE&#x9; ind_import  = 0&#xD;&#xA;&#x9;&#x9; AND&#x9;userdoc_seq  COLLATE database_default not in&#xD;&#xA;&#x9;&#x9;&#x9;(&#xD;&#xA;&#x9;&#x9; &#x9;SELECT doc_seq_typ&#xD;&#xA;&#x9;&#x9;&#x9;FROM  CF_DOC_SEQUENCE &#xD;&#xA;&#x9;&#x9;&#x9;)&#xD;&#xA;&#x9;&#x9;&#xD;&#xA;&#x9;&#x9;/* USERDOC_TYPE: if not exists in CF_USERDOC_TYPE, message ?Invalid user document type? */&#xD;&#xA;&#x9;&#x9;INSERT INTO  [&quot;+ context.intermediateDB + &quot;].[dbo].VW_IMPORT_USERDOC_RESULT   &#xD;&#xA;&#x9;&#x9;&#x9;&#x9;( userdoc_seq , &#xD;&#xA;&#x9;&#x9;&#x9;&#x9;userdoc_series , &#xD;&#xA;&#x9;&#x9;&#x9;&#x9;userdoc_nbr , &#xD;&#xA;&#x9;&#x9;&#x9;&#x9;ind_import , &#xD;&#xA;&#x9;&#x9;&#x9;&#x9;msg_import )  &#xD;&#xA;&#x9;&#x9;SELECT&#xD;&#xA;&#x9;&#x9;&#x9;&#x9; userdoc_seq,&#xD;&#xA;&#x9;&#x9;&#x9;&#x9; userdoc_series,&#xD;&#xA;&#x9;&#x9;&#x9;&#x9; userdoc_nbr,&#xD;&#xA;&#x9;&#x9;&#x9;&#x9; 2,&#xD;&#xA;&#x9;&#x9;&#x9;&#x9; 'Invalid user document type'&#xD;&#xA;&#x9;&#x9;FROM  [&quot;+ context.intermediateDB + &quot;].[dbo].VW_import_userdoc &#xD;&#xA;&#x9;&#x9;WHERE&#x9; ind_import  = 0&#xD;&#xA;&#x9;&#x9; AND&#x9;USERDOC_TYPE COLLATE database_default not in&#xD;&#xA;&#x9;&#x9;&#x9;(&#xD;&#xA;&#x9;&#x9; &#x9;SELECT userdoc_typ&#xD;&#xA;&#x9;&#x9;&#x9;FROM  CF_USERDOC_TYPE &#xD;&#xA;&#x9;&#x9;&#x9;)&#xD;&#xA;&#x9;&#x9;&#xD;&#xA;&#x9;&#x9;/* LAW_CODE: if not exists in CF_LAW, message ?Invalid law code? */&#xD;&#xA;&#x9;&#x9;INSERT INTO  [&quot;+ context.intermediateDB + &quot;].[dbo].VW_IMPORT_USERDOC_RESULT   &#xD;&#xA;&#x9;&#x9;&#x9;&#x9;( userdoc_seq , &#xD;&#xA;&#x9;&#x9;&#x9;&#x9;userdoc_series , &#xD;&#xA;&#x9;&#x9;&#x9;&#x9;userdoc_nbr , &#xD;&#xA;&#x9;&#x9;&#x9;&#x9;ind_import , &#xD;&#xA;&#x9;&#x9;&#x9;&#x9;msg_import )  &#xD;&#xA;&#x9;&#x9;SELECT&#xD;&#xA;&#x9;&#x9;&#x9;&#x9; userdoc_seq,&#xD;&#xA;&#x9;&#x9;&#x9;&#x9; userdoc_series,&#xD;&#xA;&#x9;&#x9;&#x9;&#x9; userdoc_nbr,&#xD;&#xA;&#x9;&#x9;&#x9;&#x9; 2,&#xD;&#xA;&#x9;&#x9;&#x9;&#x9; 'Invalid law code'&#xD;&#xA;&#x9;&#x9;FROM  [&quot;+ context.intermediateDB + &quot;].[dbo].VW_import_userdoc &#xD;&#xA;&#x9;&#x9;WHERE&#x9; ind_import  = 0&#xD;&#xA;&#x9;&#x9; AND&#x9;LAW_CODE  not in&#xD;&#xA;&#x9;&#x9;&#x9;(&#xD;&#xA;&#x9;&#x9; &#x9;SELECT law_code&#xD;&#xA;&#x9;&#x9;&#x9;FROM  CF_LAW &#xD;&#xA;&#x9;&#x9;&#x9;)&#xD;&#xA;&#x9;&#x9;&#xD;&#xA;&#x9;&#x9;/* CAPTURE_USER_ID: if not null and does not exist in IP_USER, message ?Invalid capture user code? */&#xD;&#xA;&#x9;&#x9;INSERT INTO  [&quot;+ context.intermediateDB + &quot;].[dbo].VW_IMPORT_USERDOC_RESULT   &#xD;&#xA;&#x9;&#x9;&#x9;&#x9;( userdoc_seq , &#xD;&#xA;&#x9;&#x9;&#x9;&#x9;userdoc_series , &#xD;&#xA;&#x9;&#x9;&#x9;&#x9;userdoc_nbr , &#xD;&#xA;&#x9;&#x9;&#x9;&#x9;ind_import , &#xD;&#xA;&#x9;&#x9;&#x9;&#x9;msg_import )  &#xD;&#xA;&#x9;&#x9;SELECT&#xD;&#xA;&#x9;&#x9;&#x9;&#x9; userdoc_seq,&#xD;&#xA;&#x9;&#x9;&#x9;&#x9; userdoc_series,&#xD;&#xA;&#x9;&#x9;&#x9;&#x9; userdoc_nbr,&#xD;&#xA;&#x9;&#x9;&#x9;&#x9; 2,&#xD;&#xA;&#x9;&#x9;&#x9;&#x9; 'Invalid capture user code'&#xD;&#xA;&#x9;&#x9;FROM  [&quot;+ context.intermediateDB + &quot;].[dbo].VW_import_userdoc &#xD;&#xA;&#x9;&#x9;WHERE&#x9; ind_import  = 0&#xD;&#xA;&#x9;&#x9; AND&#x9;CAPTURE_USER_ID  is not null&#xD;&#xA;&#x9;&#x9; AND&#x9;CAPTURE_USER_ID  not in&#xD;&#xA;&#x9;&#x9;&#x9;(&#xD;&#xA;&#x9;&#x9; &#x9;SELECT user_id&#xD;&#xA;&#x9;&#x9;&#x9;FROM  IP_USER &#xD;&#xA;&#x9;&#x9;&#x9;)&#xD;&#xA;&#x9;&#x9;&#xD;&#xA;&#x9;&#x9;/* 4.1.1.2 Duplicate keys validations */&#xD;&#xA;&#x9;&#x9;/* If USERDOC_SEQ / SERIES / NBR already exists in IP_DOC (doc_seq_typ, doc_seq_series, doc_seq_nbr), &#xD;&#xA;&#x9;&#x9;       insert message ?Userdoc sequence / series / number already exists in the database? */&#xD;&#xA;&#x9;&#x9;INSERT INTO  [&quot;+ context.intermediateDB + &quot;].[dbo].VW_IMPORT_USERDOC_RESULT   &#xD;&#xA;&#x9;&#x9;&#x9;&#x9;( userdoc_seq , &#xD;&#xA;&#x9;&#x9;&#x9;&#x9;userdoc_series , &#xD;&#xA;&#x9;&#x9;&#x9;&#x9;userdoc_nbr , &#xD;&#xA;&#x9;&#x9;&#x9;&#x9;ind_import , &#xD;&#xA;&#x9;&#x9;&#x9;&#x9;msg_import )  &#xD;&#xA;&#x9;&#x9;SELECT&#xD;&#xA;&#x9;&#x9;&#x9;&#x9; userdoc_seq,&#xD;&#xA;&#x9;&#x9;&#x9;&#x9; userdoc_series,&#xD;&#xA;&#x9;&#x9;&#x9;&#x9; userdoc_nbr,&#xD;&#xA;&#x9;&#x9;&#x9;&#x9; 2,&#xD;&#xA;&#x9;&#x9;&#x9;&#x9; 'Userdoc sequence / series / number already exists in the database'&#xD;&#xA;&#x9;&#x9;FROM&#x9;[&quot;+ context.intermediateDB + &quot;].[dbo].VW_import_userdoc &#xD;&#xA;&#x9;&#x9;WHERE&#x9;ind_import  = 0&#xD;&#xA;&#x9;&#x9; AND&#x9;exists&#xD;&#xA;&#x9;&#x9;&#x9;&#x9;(select&#x9;*&#xD;&#xA;&#x9;&#x9;&#x9;&#x9; from&#x9;IP_DOC D&#xD;&#xA;&#x9;&#x9;&#x9;&#x9; where&#x9;USERDOC_SEQ&#x9;&#x9;= doc_seq_typ COLLATE database_default&#xD;&#xA;&#x9;&#x9;&#x9;&#x9;  and&#x9;USERDOC_SERIES&#x9;= doc_seq_series&#xD;&#xA;&#x9;&#x9;&#x9;&#x9;  and&#x9;USERDOC_NBR&#x9;&#x9;= doc_seq_nbr&#xD;&#xA;&#x9;&#x9;&#x9;&#x9;)&#xD;&#xA;&#xD;&#xA;&#x9;&#x9;/* If DOC_NBR is not null and DOC_ORI / DOC_SERIES / DOC_NBR already exists in IP_DOC, &#xD;&#xA;&#x9;&#x9;       insert message ?Document origin / series / number already exists in the database? */&#xD;&#xA;&#x9;&#x9;INSERT INTO  [&quot;+ context.intermediateDB + &quot;].[dbo].VW_IMPORT_USERDOC_RESULT   &#xD;&#xA;&#x9;&#x9;&#x9;&#x9;( userdoc_seq , &#xD;&#xA;&#x9;&#x9;&#x9;&#x9;userdoc_series , &#xD;&#xA;&#x9;&#x9;&#x9;&#x9;userdoc_nbr , &#xD;&#xA;&#x9;&#x9;&#x9;&#x9;ind_import , &#xD;&#xA;&#x9;&#x9;&#x9;&#x9;msg_import )  &#xD;&#xA;&#x9;&#x9;SELECT&#xD;&#xA;&#x9;&#x9;&#x9;&#x9; userdoc_seq,&#xD;&#xA;&#x9;&#x9;&#x9;&#x9; userdoc_series,&#xD;&#xA;&#x9;&#x9;&#x9;&#x9; userdoc_nbr,&#xD;&#xA;&#x9;&#x9;&#x9;&#x9; 2,&#xD;&#xA;&#x9;&#x9;&#x9;&#x9; 'Document origin / series / number already exists in the database'&#xD;&#xA;&#x9;&#x9;FROM  [&quot;+ context.intermediateDB + &quot;].[dbo].VW_import_userdoc &#xD;&#xA;&#x9;&#x9;WHERE&#x9; ind_import  = 0&#xD;&#xA;&#x9;&#x9; AND&#x9;DOC_NBR  is not null&#xD;&#xA;&#x9;&#x9; AND&#x9;DOC_ORI  COLLATE database_default IN&#xD;&#xA;&#x9;&#x9;&#x9;(&#xD;&#xA;&#x9;&#x9; &#x9;SELECT doc_ori&#xD;&#xA;&#x9;&#x9;&#x9;FROM  IP_DOC &#xD;&#xA;&#x9;&#x9;&#x9;)&#xD;&#xA;&#x9;&#x9; AND&#x9;'E'  IN&#xD;&#xA;&#x9;&#x9;&#x9;(&#xD;&#xA;&#x9;&#x9; &#x9;SELECT doc_log&#xD;&#xA;&#x9;&#x9;&#x9;FROM  IP_DOC &#xD;&#xA;&#x9;&#x9;&#x9;)&#xD;&#xA;&#x9;&#x9; AND&#x9;DOC_SERIES  IN&#xD;&#xA;&#x9;&#x9;&#x9;(&#xD;&#xA;&#x9;&#x9; &#x9;SELECT doc_ser&#xD;&#xA;&#x9;&#x9;&#x9;FROM  IP_DOC &#xD;&#xA;&#x9;&#x9;&#x9;)&#xD;&#xA;&#x9;&#x9; AND&#x9;DOC_NBR  IN&#xD;&#xA;&#x9;&#x9;&#x9;(&#xD;&#xA;&#x9;&#x9; &#x9;SELECT doc_nbr&#xD;&#xA;&#x9;&#x9;&#x9;FROM  IP_DOC &#xD;&#xA;&#x9;&#x9;&#x9;)&#xD;&#xA;&#x9;&#x9;&#xD;&#xA;&#x9;&#x9;/* If DOC_NBR is not null and DOC_ORI / DOC_SERIES / DOC_NBR is repeated in [&quot;+ context.intermediateDB + &quot;].[dbo].VW_IMPORT_USERDOC,&#xD;&#xA;&#x9;&#x9;insert message ?Document origin / series / number duplicated in intermediate table? */&#xD;&#xA;&#x9;&#x9;/* Generate work table with repeated DOC_ORI / DOC_SERIES / DOC_NBR */&#xD;&#xA;&#x9;&#x9;&#xD;&#xA;&#x9;&#x9;&#xD;&#xA;&#x9;&#x9;DECLARE @EXEC_IMMEDIATE_VAR VARCHAR (4000)&#xD;&#xA;&#x9;&#x9;SELECT @EXEC_IMMEDIATE_VAR  = 'TRUNCATE TABLE wrk_doc_key' &#xD;&#xA;&#xD;&#xA;&#x9;&#x9;EXECUTE (@EXEC_IMMEDIATE_VAR)&#xD;&#xA;&#x9;&#x9;INSERT INTO  wrk_doc_key    &#xD;&#xA;&#x9;&#x9;SELECT&#xD;&#xA;&#x9;&#x9;&#x9;&#x9; DOC_ORI,&#xD;&#xA;&#x9;&#x9;&#x9;&#x9; DOC_SERIES,&#xD;&#xA;&#x9;&#x9;&#x9;&#x9; DOC_NBR&#xD;&#xA;&#x9;&#x9;FROM  [&quot;+ context.intermediateDB + &quot;].[dbo].VW_IMPORT_USERDOC &#xD;&#xA;&#x9;&#x9;WHERE&#x9; DOC_NBR  is not null&#xD;&#xA;&#x9;&#x9;GROUP BY DOC_ORI,&#xD;&#xA;&#x9;&#x9;&#x9; DOC_SERIES,&#xD;&#xA;&#x9;&#x9;&#x9;  DOC_NBR &#xD;&#xA;&#x9;&#x9;HAVING COUNT(*)  > 1  &#xD;&#xA;&#x9;&#x9;&#xD;&#xA;&#x9;&#x9;INSERT INTO  [&quot;+ context.intermediateDB + &quot;].[dbo].VW_IMPORT_USERDOC_RESULT   &#xD;&#xA;&#x9;&#x9;&#x9;&#x9;( userdoc_seq , &#xD;&#xA;&#x9;&#x9;&#x9;&#x9;userdoc_series , &#xD;&#xA;&#x9;&#x9;&#x9;&#x9;userdoc_nbr , &#xD;&#xA;&#x9;&#x9;&#x9;&#x9;ind_import , &#xD;&#xA;&#x9;&#x9;&#x9;&#x9;msg_import )  &#xD;&#xA;&#x9;&#x9;SELECT&#xD;&#xA;&#x9;&#x9;&#x9;&#x9; userdoc_seq,&#xD;&#xA;&#x9;&#x9;&#x9;&#x9; userdoc_series,&#xD;&#xA;&#x9;&#x9;&#x9;&#x9; userdoc_nbr,&#xD;&#xA;&#x9;&#x9;&#x9;&#x9; 2,&#xD;&#xA;&#x9;&#x9;&#x9;&#x9; 'Document origin / series / number duplicated in intermediate table'&#xD;&#xA;&#x9;&#x9;FROM  [&quot;+ context.intermediateDB + &quot;].[dbo].VW_import_userdoc &#xD;&#xA;&#x9;&#x9;WHERE&#x9; ind_import  = 0&#xD;&#xA;&#x9;&#x9; AND&#x9;DOC_NBR  is not null&#xD;&#xA;&#x9;&#x9; AND&#x9;DOC_ORI  IN&#xD;&#xA;&#x9;&#x9;&#x9;(&#xD;&#xA;&#x9;&#x9; &#x9;SELECT doc_ori&#xD;&#xA;&#x9;&#x9;&#x9;FROM  wrk_doc_key &#xD;&#xA;&#x9;&#x9;&#x9;)&#xD;&#xA;&#x9;&#x9; AND&#x9;DOC_SERIES  IN&#xD;&#xA;&#x9;&#x9;&#x9;(&#xD;&#xA;&#x9;&#x9; &#x9;SELECT doc_series&#xD;&#xA;&#x9;&#x9;&#x9;FROM  wrk_doc_key &#xD;&#xA;&#x9;&#x9;&#x9;)&#xD;&#xA;&#x9;&#x9; AND&#x9;DOC_NBR  IN&#xD;&#xA;&#x9;&#x9;&#x9;(&#xD;&#xA;&#x9;&#x9; &#x9;SELECT doc_nbr&#xD;&#xA;&#x9;&#x9;&#x9;FROM  wrk_doc_key &#xD;&#xA;&#x9;&#x9;&#x9;)&#xD;&#xA;&#x9;&#x9;&#xD;&#xA;&#x9;&#x9;/* 4.1.1.3 Applicant person validations */&#xD;&#xA;&#x9;&#x9;/* PERSON_NAME: if null and any of the other applicant person columns are not null, &#xD;&#xA;&#x9;&#x9;       message ?Applicant name not specified but other person data is specified? */&#xD;&#xA;&#x9;&#x9;INSERT INTO  [&quot;+ context.intermediateDB + &quot;].[dbo].VW_IMPORT_USERDOC_RESULT   &#xD;&#xA;&#x9;&#x9;&#x9;&#x9;( userdoc_seq , &#xD;&#xA;&#x9;&#x9;&#x9;&#x9;userdoc_series , &#xD;&#xA;&#x9;&#x9;&#x9;&#x9;userdoc_nbr , &#xD;&#xA;&#x9;&#x9;&#x9;&#x9;ind_import , &#xD;&#xA;&#x9;&#x9;&#x9;&#x9;msg_import )  &#xD;&#xA;&#x9;&#x9;SELECT&#xD;&#xA;&#x9;&#x9;&#x9;&#x9; userdoc_seq,&#xD;&#xA;&#x9;&#x9;&#x9;&#x9; userdoc_series,&#xD;&#xA;&#x9;&#x9;&#x9;&#x9; userdoc_nbr,&#xD;&#xA;&#x9;&#x9;&#x9;&#x9; 2,&#xD;&#xA;&#x9;&#x9;&#x9;&#x9; 'Applicant name not specified but other person data is specified'&#xD;&#xA;&#x9;&#x9;FROM  [&quot;+ context.intermediateDB + &quot;].[dbo].VW_import_userdoc &#xD;&#xA;&#x9;&#x9;WHERE&#x9; ind_import  = 0&#xD;&#xA;&#x9;&#x9; AND&#x9;PERSON_NAME  is null&#xD;&#xA;&#x9;&#x9; AND&#x9;(NATIONALITY_COUNTRY_CODE  is not null&#xD;&#xA;&#x9;&#x9; OR&#x9;IND_COMPANY  is not null&#xD;&#xA;&#x9;&#x9; OR&#x9;LEGAL_NATURE  is not null&#xD;&#xA;&#x9;&#x9; OR&#x9;LEGAL_ID_TYPE  is not null&#xD;&#xA;&#x9;&#x9; OR&#x9;LEGAL_ID_NBR  is not null&#xD;&#xA;&#x9;&#x9; OR&#x9;INDIVIDUAL_ID_TYPE  is not null&#xD;&#xA;&#x9;&#x9; OR&#x9;INDIVIDUAL_ID_NBR  is not null&#xD;&#xA;&#x9;&#x9; OR&#x9;RESIDENCE_COUNTRY_CODE  is not null&#xD;&#xA;&#x9;&#x9; OR&#x9;STATE_NAME  is not null&#xD;&#xA;&#x9;&#x9; OR&#x9;STATE_CODE  is not null&#xD;&#xA;&#x9;&#x9; OR&#x9;CITY_NAME  is not null&#xD;&#xA;&#x9;&#x9; OR&#x9;ADDRESS_ZONE  is not null&#xD;&#xA;&#x9;&#x9; OR&#x9;ADDRESS_STREET  is not null&#xD;&#xA;&#x9;&#x9; OR&#x9;ZIP_CODE  is not null&#xD;&#xA;&#x9;&#x9; OR&#x9;EMAIL  is not null&#xD;&#xA;&#x9;&#x9; OR&#x9;TELEPHONE  is not null&#xD;&#xA;&#x9;&#x9; OR&#x9;PERSON_GROUP_CODE  is not null)&#xD;&#xA;&#x9;&#x9;&#xD;&#xA;&#x9;&#x9;/* ADDRESS_STREET: if null, message ?Address street is required? */&#xD;&#xA;&#x9;&#x9;INSERT INTO  [&quot;+ context.intermediateDB + &quot;].[dbo].VW_IMPORT_USERDOC_RESULT   &#xD;&#xA;&#x9;&#x9;&#x9;&#x9;( userdoc_seq , &#xD;&#xA;&#x9;&#x9;&#x9;&#x9;userdoc_series , &#xD;&#xA;&#x9;&#x9;&#x9;&#x9;userdoc_nbr , &#xD;&#xA;&#x9;&#x9;&#x9;&#x9;ind_import , &#xD;&#xA;&#x9;&#x9;&#x9;&#x9;msg_import )  &#xD;&#xA;&#x9;&#x9;SELECT&#xD;&#xA;&#x9;&#x9;&#x9;&#x9; userdoc_seq,&#xD;&#xA;&#x9;&#x9;&#x9;&#x9; userdoc_series,&#xD;&#xA;&#x9;&#x9;&#x9;&#x9; userdoc_nbr,&#xD;&#xA;&#x9;&#x9;&#x9;&#x9; 2,&#xD;&#xA;&#x9;&#x9;&#x9;&#x9; 'Address street is required'&#xD;&#xA;&#x9;&#x9;FROM  [&quot;+ context.intermediateDB + &quot;].[dbo].VW_import_userdoc &#xD;&#xA;&#x9;&#x9;WHERE&#x9; ind_import  = 0&#xD;&#xA;&#x9;&#x9; AND&#x9;PERSON_NAME  is not null&#xD;&#xA;&#x9;&#x9; AND&#x9;ADDRESS_STREET  is null&#xD;&#xA;&#x9;&#x9;&#xD;&#xA;&#x9;&#x9;/* NATIONALITY_COUNTRY_CODE: if not null or exists in CF_GEO_COUNTRY, message ?Invalid applicant nationality country code? */&#xD;&#xA;&#x9;&#x9;INSERT INTO  [&quot;+ context.intermediateDB + &quot;].[dbo].VW_IMPORT_USERDOC_RESULT   &#xD;&#xA;&#x9;&#x9;&#x9;&#x9;( userdoc_seq , &#xD;&#xA;&#x9;&#x9;&#x9;&#x9;userdoc_series , &#xD;&#xA;&#x9;&#x9;&#x9;&#x9;userdoc_nbr , &#xD;&#xA;&#x9;&#x9;&#x9;&#x9;ind_import , &#xD;&#xA;&#x9;&#x9;&#x9;&#x9;msg_import )  &#xD;&#xA;&#x9;&#x9;SELECT&#xD;&#xA;&#x9;&#x9;&#x9;&#x9; userdoc_seq,&#xD;&#xA;&#x9;&#x9;&#x9;&#x9; userdoc_series,&#xD;&#xA;&#x9;&#x9;&#x9;&#x9; userdoc_nbr,&#xD;&#xA;&#x9;&#x9;&#x9;&#x9; 2,&#xD;&#xA;&#x9;&#x9;&#x9;&#x9; 'Null or invalid applicant nationality country code'&#xD;&#xA;&#x9;&#x9;FROM  [&quot;+ context.intermediateDB + &quot;].[dbo].VW_import_userdoc &#xD;&#xA;&#x9;&#x9;WHERE&#x9; ind_import  = 0&#xD;&#xA;&#x9;&#x9; AND&#x9;PERSON_NAME  is not null&#xD;&#xA;&#x9;&#x9; AND&#x9;(NATIONALITY_COUNTRY_CODE  is null&#xD;&#xA;&#x9;&#x9; OR&#x9;NATIONALITY_COUNTRY_CODE COLLATE database_default not in&#xD;&#xA;&#x9;&#x9;&#x9;(&#xD;&#xA;&#x9;&#x9; &#x9;SELECT COUNTRY_CODE&#xD;&#xA;&#x9;&#x9;&#x9;FROM  cf_geo_country &#xD;&#xA;&#x9;&#x9;&#x9;))&#xD;&#xA;&#x9;&#x9;&#xD;&#xA;&#x9;&#x9;/* RESIDENCE_COUNTRY_CODE: if not null or exists in CF_GEO_COUNTRY, message ?Invalid applicant nationality country code? */&#xD;&#xA;&#x9;&#x9;INSERT INTO  [&quot;+ context.intermediateDB + &quot;].[dbo].VW_IMPORT_USERDOC_RESULT   &#xD;&#xA;&#x9;&#x9;&#x9;&#x9;( userdoc_seq , &#xD;&#xA;&#x9;&#x9;&#x9;&#x9;userdoc_series , &#xD;&#xA;&#x9;&#x9;&#x9;&#x9;userdoc_nbr , &#xD;&#xA;&#x9;&#x9;&#x9;&#x9;ind_import , &#xD;&#xA;&#x9;&#x9;&#x9;&#x9;msg_import )  &#xD;&#xA;&#x9;&#x9;SELECT&#xD;&#xA;&#x9;&#x9;&#x9;&#x9; userdoc_seq,&#xD;&#xA;&#x9;&#x9;&#x9;&#x9; userdoc_series,&#xD;&#xA;&#x9;&#x9;&#x9;&#x9; userdoc_nbr,&#xD;&#xA;&#x9;&#x9;&#x9;&#x9; 2,&#xD;&#xA;&#x9;&#x9;&#x9;&#x9; 'Null or invalid applicant residence country code'&#xD;&#xA;&#x9;&#x9;FROM  [&quot;+ context.intermediateDB + &quot;].[dbo].VW_import_userdoc &#xD;&#xA;&#x9;&#x9;WHERE&#x9; ind_import  = 0&#xD;&#xA;&#x9;&#x9; AND&#x9;PERSON_NAME  is not null&#xD;&#xA;&#x9;&#x9; AND&#x9;(RESIDENCE_COUNTRY_CODE  is null&#xD;&#xA;&#x9;&#x9; OR&#x9;RESIDENCE_COUNTRY_CODE COLLATE database_default not in&#xD;&#xA;&#x9;&#x9;&#x9;(&#xD;&#xA;&#x9;&#x9; &#x9;SELECT COUNTRY_CODE&#xD;&#xA;&#x9;&#x9;&#x9;FROM  cf_geo_country &#xD;&#xA;&#x9;&#x9;&#x9;))&#xD;&#xA;&#x9;&#x9;&#xD;&#xA;&#x9;&#x9;/* LEGAL_NATURE: if not null and IND_COMPANY = 0, message ?Applicant legal nature only applies when the person is a company? */&#xD;&#xA;&#x9;&#x9;INSERT INTO  [&quot;+ context.intermediateDB + &quot;].[dbo].VW_IMPORT_USERDOC_RESULT   &#xD;&#xA;&#x9;&#x9;&#x9;&#x9;( userdoc_seq , &#xD;&#xA;&#x9;&#x9;&#x9;&#x9;userdoc_series , &#xD;&#xA;&#x9;&#x9;&#x9;&#x9;userdoc_nbr , &#xD;&#xA;&#x9;&#x9;&#x9;&#x9;ind_import , &#xD;&#xA;&#x9;&#x9;&#x9;&#x9;msg_import )  &#xD;&#xA;&#x9;&#x9;SELECT&#xD;&#xA;&#x9;&#x9;&#x9;&#x9; userdoc_seq,&#xD;&#xA;&#x9;&#x9;&#x9;&#x9; userdoc_series,&#xD;&#xA;&#x9;&#x9;&#x9;&#x9; userdoc_nbr,&#xD;&#xA;&#x9;&#x9;&#x9;&#x9; 2,&#xD;&#xA;&#x9;&#x9;&#x9;&#x9; 'Applicant legal nature only applies when the person is a company'&#xD;&#xA;&#x9;&#x9;FROM  [&quot;+ context.intermediateDB + &quot;].[dbo].VW_import_userdoc &#xD;&#xA;&#x9;&#x9;WHERE&#x9; ind_import  = 0&#xD;&#xA;&#x9;&#x9; AND&#x9;PERSON_NAME  is not null&#xD;&#xA;&#x9;&#x9; AND&#x9;LEGAL_NATURE  is not null&#xD;&#xA;&#x9;&#x9; AND&#x9;IND_COMPANY  = 0&#xD;&#xA;&#x9;&#x9;&#xD;&#xA;&#x9;&#x9;/* LEGAL_ID_TYPE: if not null and not exists if CF_PERSON_ID_TYPE with IND_GENERAL_ID = ?S?, &#xD;&#xA;&#x9;&#x9;       message ?Invalid applicant legal id type? */&#xD;&#xA;&#x9;&#x9;INSERT INTO  [&quot;+ context.intermediateDB + &quot;].[dbo].VW_IMPORT_USERDOC_RESULT   &#xD;&#xA;&#x9;&#x9;&#x9;&#x9;( userdoc_seq , &#xD;&#xA;&#x9;&#x9;&#x9;&#x9;userdoc_series , &#xD;&#xA;&#x9;&#x9;&#x9;&#x9;userdoc_nbr , &#xD;&#xA;&#x9;&#x9;&#x9;&#x9;ind_import , &#xD;&#xA;&#x9;&#x9;&#x9;&#x9;msg_import )  &#xD;&#xA;&#x9;&#x9;SELECT&#xD;&#xA;&#x9;&#x9;&#x9;&#x9; userdoc_seq,&#xD;&#xA;&#x9;&#x9;&#x9;&#x9; userdoc_series,&#xD;&#xA;&#x9;&#x9;&#x9;&#x9; userdoc_nbr,&#xD;&#xA;&#x9;&#x9;&#x9;&#x9; 2,&#xD;&#xA;&#x9;&#x9;&#x9;&#x9; 'Invalid owner legal id type'&#xD;&#xA;&#x9;&#x9;FROM  [&quot;+ context.intermediateDB + &quot;].[dbo].VW_import_userdoc &#xD;&#xA;&#x9;&#x9;WHERE&#x9; ind_import  = 0&#xD;&#xA;&#x9;&#x9; AND&#x9;PERSON_NAME  is not null&#xD;&#xA;&#x9;&#x9; AND&#x9;LEGAL_ID_TYPE  is not null&#xD;&#xA;&#x9;&#x9; AND&#x9;LEGAL_ID_TYPE  COLLATE database_default not in&#xD;&#xA;&#x9;&#x9;&#x9;(&#xD;&#xA;&#x9;&#x9; &#x9;SELECT PERSON_ID_TYP&#xD;&#xA;&#x9;&#x9;&#x9;FROM  CF_PERSON_ID_TYPE &#xD;&#xA;&#x9;&#x9;&#x9;WHERE&#x9; IND_GENERAL_ID  = 'S'&#xD;&#xA;&#x9;&#x9;&#x9;)&#xD;&#xA;&#x9;&#x9;&#xD;&#xA;&#x9;&#x9;/* INDIVIDUAL_ID_TYPE: if not null and not exists if CF_PERSON_ID_TYPE with IND_INDIVIDUAL_ID = ?S?, &#xD;&#xA;&#x9;&#x9;       message ?Invalid applicant individual id type? */&#xD;&#xA;&#x9;&#x9;INSERT INTO  [&quot;+ context.intermediateDB + &quot;].[dbo].VW_IMPORT_USERDOC_RESULT   &#xD;&#xA;&#x9;&#x9;&#x9;&#x9;( userdoc_seq , &#xD;&#xA;&#x9;&#x9;&#x9;&#x9;userdoc_series , &#xD;&#xA;&#x9;&#x9;&#x9;&#x9;userdoc_nbr , &#xD;&#xA;&#x9;&#x9;&#x9;&#x9;ind_import , &#xD;&#xA;&#x9;&#x9;&#x9;&#x9;msg_import )  &#xD;&#xA;&#x9;&#x9;SELECT&#xD;&#xA;&#x9;&#x9;&#x9;&#x9; userdoc_seq,&#xD;&#xA;&#x9;&#x9;&#x9;&#x9; userdoc_series,&#xD;&#xA;&#x9;&#x9;&#x9;&#x9; userdoc_nbr,&#xD;&#xA;&#x9;&#x9;&#x9;&#x9; 2,&#xD;&#xA;&#x9;&#x9;&#x9;&#x9; 'Invalid owner individual id type'&#xD;&#xA;&#x9;&#x9;FROM  [&quot;+ context.intermediateDB + &quot;].[dbo].VW_import_userdoc &#xD;&#xA;&#x9;&#x9;WHERE&#x9; ind_import  = 0&#xD;&#xA;&#x9;&#x9; AND&#x9;PERSON_NAME  is not null&#xD;&#xA;&#x9;&#x9; AND&#x9;INDIVIDUAL_ID_TYPE  is not null&#xD;&#xA;&#x9;&#x9; AND&#x9;INDIVIDUAL_ID_TYPE  COLLATE database_default not in&#xD;&#xA;&#x9;&#x9;&#x9;(&#xD;&#xA;&#x9;&#x9; &#x9;SELECT PERSON_ID_TYP&#xD;&#xA;&#x9;&#x9;&#x9;FROM  CF_PERSON_ID_TYPE &#xD;&#xA;&#x9;&#x9;&#x9;WHERE&#x9; IND_INDIVIDUAL_ID  = 'S'&#xD;&#xA;&#x9;&#x9;&#x9;)&#xD;&#xA;&#x9;&#x9;&#xD;&#xA;&#x9;&#x9;/* If LEGAL_ID_TYPE is not null and LEGAL_ID_NBR is null, message ?Missing applicant legal id number? */&#xD;&#xA;&#x9;&#x9;INSERT INTO  [&quot;+ context.intermediateDB + &quot;].[dbo].VW_IMPORT_USERDOC_RESULT   &#xD;&#xA;&#x9;&#x9;&#x9;&#x9;( userdoc_seq , &#xD;&#xA;&#x9;&#x9;&#x9;&#x9;userdoc_series , &#xD;&#xA;&#x9;&#x9;&#x9;&#x9;userdoc_nbr , &#xD;&#xA;&#x9;&#x9;&#x9;&#x9;ind_import , &#xD;&#xA;&#x9;&#x9;&#x9;&#x9;msg_import )  &#xD;&#xA;&#x9;&#x9;SELECT&#xD;&#xA;&#x9;&#x9;&#x9;&#x9; userdoc_seq,&#xD;&#xA;&#x9;&#x9;&#x9;&#x9; userdoc_series,&#xD;&#xA;&#x9;&#x9;&#x9;&#x9; userdoc_nbr,&#xD;&#xA;&#x9;&#x9;&#x9;&#x9; 2,&#xD;&#xA;&#x9;&#x9;&#x9;&#x9; 'Missing applicant legal id number'&#xD;&#xA;&#x9;&#x9;FROM  [&quot;+ context.intermediateDB + &quot;].[dbo].VW_import_userdoc &#xD;&#xA;&#x9;&#x9;WHERE&#x9; ind_import  = 0&#xD;&#xA;&#x9;&#x9; AND&#x9;PERSON_NAME  is not null&#xD;&#xA;&#x9;&#x9; AND&#x9;LEGAL_ID_TYPE  is not null&#xD;&#xA;&#x9;&#x9; AND&#x9;LEGAL_ID_NBR  is null&#xD;&#xA;&#x9;&#x9;&#xD;&#xA;&#x9;&#x9;/* If LEGAL_ID_TYPE is null and LEGAL_ID_NBR is not null, message ?Missing applicant legal id type? */&#xD;&#xA;&#x9;&#x9;INSERT INTO  [&quot;+ context.intermediateDB + &quot;].[dbo].VW_IMPORT_USERDOC_RESULT   &#xD;&#xA;&#x9;&#x9;&#x9;&#x9;( userdoc_seq , &#xD;&#xA;&#x9;&#x9;&#x9;&#x9;userdoc_series , &#xD;&#xA;&#x9;&#x9;&#x9;&#x9;userdoc_nbr , &#xD;&#xA;&#x9;&#x9;&#x9;&#x9;ind_import , &#xD;&#xA;&#x9;&#x9;&#x9;&#x9;msg_import )  &#xD;&#xA;&#x9;&#x9;SELECT&#xD;&#xA;&#x9;&#x9;&#x9;&#x9; userdoc_seq,&#xD;&#xA;&#x9;&#x9;&#x9;&#x9; userdoc_series,&#xD;&#xA;&#x9;&#x9;&#x9;&#x9; userdoc_nbr,&#xD;&#xA;&#x9;&#x9;&#x9;&#x9; 2,&#xD;&#xA;&#x9;&#x9;&#x9;&#x9; 'Missing applicant legal id type'&#xD;&#xA;&#x9;&#x9;FROM  [&quot;+ context.intermediateDB + &quot;].[dbo].VW_import_userdoc &#xD;&#xA;&#x9;&#x9;WHERE&#x9; ind_import  = 0&#xD;&#xA;&#x9;&#x9; AND&#x9;PERSON_NAME  is not null&#xD;&#xA;&#x9;&#x9; AND&#x9;LEGAL_ID_TYPE  is null&#xD;&#xA;&#x9;&#x9; AND&#x9;LEGAL_ID_NBR  is not null&#xD;&#xA;&#x9;&#x9;&#xD;&#xA;&#x9;&#x9;/* If INDIVIDUAL_ID_TYPE is not null and INDIVIDUAL_ID_NBR is null, message ?Missing applicant individual id number? */&#xD;&#xA;&#x9;&#x9;INSERT INTO  [&quot;+ context.intermediateDB + &quot;].[dbo].VW_IMPORT_USERDOC_RESULT   &#xD;&#xA;&#x9;&#x9;&#x9;&#x9;( userdoc_seq , &#xD;&#xA;&#x9;&#x9;&#x9;&#x9;userdoc_series , &#xD;&#xA;&#x9;&#x9;&#x9;&#x9;userdoc_nbr , &#xD;&#xA;&#x9;&#x9;&#x9;&#x9;ind_import , &#xD;&#xA;&#x9;&#x9;&#x9;&#x9;msg_import )  &#xD;&#xA;&#x9;&#x9;SELECT&#xD;&#xA;&#x9;&#x9;&#x9;&#x9; userdoc_seq,&#xD;&#xA;&#x9;&#x9;&#x9;&#x9; userdoc_series,&#xD;&#xA;&#x9;&#x9;&#x9;&#x9; userdoc_nbr,&#xD;&#xA;&#x9;&#x9;&#x9;&#x9; 2,&#xD;&#xA;&#x9;&#x9;&#x9;&#x9; 'Missing applicant individual id number'&#xD;&#xA;&#x9;&#x9;FROM  [&quot;+ context.intermediateDB + &quot;].[dbo].VW_import_userdoc &#xD;&#xA;&#x9;&#x9;WHERE&#x9; ind_import  = 0&#xD;&#xA;&#x9;&#x9; AND&#x9;PERSON_NAME  is not null&#xD;&#xA;&#x9;&#x9; AND&#x9;INDIVIDUAL_ID_TYPE  is not null&#xD;&#xA;&#x9;&#x9; AND&#x9;INDIVIDUAL_ID_NBR  is null&#xD;&#xA;&#x9;&#x9;&#xD;&#xA;&#x9;&#x9;/* If INDIVIDUAL_ID_TYPE is null and INDIVIDUAL_ID_NBR is not null, message ?Missing applicant individual id type? */&#xD;&#xA;&#x9;&#x9;INSERT INTO  [&quot;+ context.intermediateDB + &quot;].[dbo].VW_IMPORT_USERDOC_RESULT   &#xD;&#xA;&#x9;&#x9;&#x9;&#x9;( userdoc_seq , &#xD;&#xA;&#x9;&#x9;&#x9;&#x9;userdoc_series , &#xD;&#xA;&#x9;&#x9;&#x9;&#x9;userdoc_nbr , &#xD;&#xA;&#x9;&#x9;&#x9;&#x9;ind_import , &#xD;&#xA;&#x9;&#x9;&#x9;&#x9;msg_import )  &#xD;&#xA;&#x9;&#x9;SELECT&#xD;&#xA;&#x9;&#x9;&#x9;&#x9; userdoc_seq,&#xD;&#xA;&#x9;&#x9;&#x9;&#x9; userdoc_series,&#xD;&#xA;&#x9;&#x9;&#x9;&#x9; userdoc_nbr,&#xD;&#xA;&#x9;&#x9;&#x9;&#x9; 2,&#xD;&#xA;&#x9;&#x9;&#x9;&#x9; 'Missing applicant individual id type'&#xD;&#xA;&#x9;&#x9;FROM  [&quot;+ context.intermediateDB + &quot;].[dbo].VW_import_userdoc &#xD;&#xA;&#x9;&#x9;WHERE&#x9; ind_import  = 0&#xD;&#xA;&#x9;&#x9; AND&#x9;PERSON_NAME  is not null&#xD;&#xA;&#x9;&#x9; AND&#x9;INDIVIDUAL_ID_TYPE  is null&#xD;&#xA;&#x9;&#x9; AND&#x9;INDIVIDUAL_ID_NBR  is not null&#xD;&#xA;&#x9;&#x9;&#xD;&#xA;&#x9;&#x9;/* RESIDENCE_COUNTRY_CODE: if not exists in CF_GEO_COUNTRY, message ?Invalid applicant residence country code? */&#xD;&#xA;&#x9;&#x9;INSERT INTO  [&quot;+ context.intermediateDB + &quot;].[dbo].VW_IMPORT_USERDOC_RESULT   &#xD;&#xA;&#x9;&#x9;&#x9;&#x9;( userdoc_seq , &#xD;&#xA;&#x9;&#x9;&#x9;&#x9;userdoc_series , &#xD;&#xA;&#x9;&#x9;&#x9;&#x9;userdoc_nbr , &#xD;&#xA;&#x9;&#x9;&#x9;&#x9;ind_import , &#xD;&#xA;&#x9;&#x9;&#x9;&#x9;msg_import )  &#xD;&#xA;&#x9;&#x9;SELECT&#xD;&#xA;&#x9;&#x9;&#x9;&#x9; userdoc_seq,&#xD;&#xA;&#x9;&#x9;&#x9;&#x9; userdoc_series,&#xD;&#xA;&#x9;&#x9;&#x9;&#x9; userdoc_nbr,&#xD;&#xA;&#x9;&#x9;&#x9;&#x9; 2,&#xD;&#xA;&#x9;&#x9;&#x9;&#x9; 'Invalid applicant residence country code'&#xD;&#xA;&#x9;&#x9;FROM  [&quot;+ context.intermediateDB + &quot;].[dbo].VW_import_userdoc &#xD;&#xA;&#x9;&#x9;WHERE&#x9; ind_import  = 0&#xD;&#xA;&#x9;&#x9; AND&#x9;PERSON_NAME  is not null&#xD;&#xA;&#x9;&#x9; AND&#x9;RESIDENCE_COUNTRY_CODE COLLATE database_default not in&#xD;&#xA;&#x9;&#x9;&#x9;(&#xD;&#xA;&#x9;&#x9; &#x9;SELECT COUNTRY_CODE&#xD;&#xA;&#x9;&#x9;&#x9;FROM  cf_geo_country &#xD;&#xA;&#x9;&#x9;&#x9;)&#xD;&#xA;&#x9;&#x9;&#xD;&#xA;&#x9;&#x9;/* STATE_CODE: if not null and not exists RESIDENCE_COUNTRY_CODE / STATE_CODE in CF_GEO_STATE, &#xD;&#xA;&#x9;&#x9;       message ?Invalid applicant residence state code? */&#xD;&#xA;&#x9;&#x9;INSERT INTO  [&quot;+ context.intermediateDB + &quot;].[dbo].VW_IMPORT_USERDOC_RESULT   &#xD;&#xA;&#x9;&#x9;&#x9;&#x9;( userdoc_seq , &#xD;&#xA;&#x9;&#x9;&#x9;&#x9;userdoc_series , &#xD;&#xA;&#x9;&#x9;&#x9;&#x9;userdoc_nbr , &#xD;&#xA;&#x9;&#x9;&#x9;&#x9;ind_import , &#xD;&#xA;&#x9;&#x9;&#x9;&#x9;msg_import )  &#xD;&#xA;&#x9;&#x9;SELECT&#xD;&#xA;&#x9;&#x9;&#x9;&#x9; userdoc_seq,&#xD;&#xA;&#x9;&#x9;&#x9;&#x9; userdoc_series,&#xD;&#xA;&#x9;&#x9;&#x9;&#x9; userdoc_nbr,&#xD;&#xA;&#x9;&#x9;&#x9;&#x9; 2,&#xD;&#xA;&#x9;&#x9;&#x9;&#x9; 'Invalid applicant residence state code'&#xD;&#xA;&#x9;&#x9;FROM  [&quot;+ context.intermediateDB + &quot;].[dbo].VW_import_userdoc &#xD;&#xA;&#x9;&#x9;WHERE&#x9; ind_import  = 0&#xD;&#xA;&#x9;&#x9; AND&#x9;PERSON_NAME  is not null&#xD;&#xA;&#x9;&#x9; AND&#x9;STATE_CODE  is not null&#xD;&#xA;&#x9;&#x9; AND&#x9; NOT EXISTS&#xD;&#xA;&#x9;&#x9;&#x9;(&#xD;&#xA;&#x9;&#x9; &#x9;SELECT&#xD;&#xA;&#x9;&#x9;&#x9;&#x9;&#x9; cf_geo_state.COUNTRY_CODE,&#xD;&#xA;&#x9;&#x9;&#x9;&#x9;&#x9; cf_geo_state.STATE_CODE&#xD;&#xA;&#x9;&#x9;&#x9;FROM  cf_geo_state &#xD;&#xA;&#x9;&#x9;&#x9;WHERE&#x9; cf_geo_state.COUNTRY_CODE  = [&quot;+ context.intermediateDB + &quot;].[dbo].VW_import_userdoc.RESIDENCE_COUNTRY_CODE COLLATE database_default&#xD;&#xA;&#x9;&#x9;&#x9; AND&#x9;cf_geo_state.STATE_CODE  = [&quot;+ context.intermediateDB + &quot;].[dbo].VW_import_userdoc.STATE_CODE COLLATE database_default&#xD;&#xA;&#x9;&#x9;&#x9;)&#xD;&#xA;&#x9;&#x9;&#xD;&#xA;&#x9;&#x9;/* If STATE_CODE Is null and exist any CF_GEO_STATE with the RESIDENCE_COUNTRY_CODE, &#xD;&#xA;&#x9;&#x9;       message ?A state code is required for the specified applicant residence country? */&#xD;&#xA;&#x9;&#x9;INSERT INTO  [&quot;+ context.intermediateDB + &quot;].[dbo].VW_IMPORT_USERDOC_RESULT   &#xD;&#xA;&#x9;&#x9;&#x9;&#x9;( userdoc_seq , &#xD;&#xA;&#x9;&#x9;&#x9;&#x9;userdoc_series , &#xD;&#xA;&#x9;&#x9;&#x9;&#x9;userdoc_nbr , &#xD;&#xA;&#x9;&#x9;&#x9;&#x9;ind_import , &#xD;&#xA;&#x9;&#x9;&#x9;&#x9;msg_import )  &#xD;&#xA;&#x9;&#x9;SELECT&#xD;&#xA;&#x9;&#x9;&#x9;&#x9; userdoc_seq,&#xD;&#xA;&#x9;&#x9;&#x9;&#x9; userdoc_series,&#xD;&#xA;&#x9;&#x9;&#x9;&#x9; userdoc_nbr,&#xD;&#xA;&#x9;&#x9;&#x9;&#x9; 2,&#xD;&#xA;&#x9;&#x9;&#x9;&#x9; 'A state code is required for the specified applicant residence country'&#xD;&#xA;&#x9;&#x9;FROM  [&quot;+ context.intermediateDB + &quot;].[dbo].VW_import_userdoc &#xD;&#xA;&#x9;&#x9;WHERE&#x9; ind_import  = 0&#xD;&#xA;&#x9;&#x9; AND&#x9;PERSON_NAME  is not null&#xD;&#xA;&#x9;&#x9; AND&#x9;STATE_CODE  is null&#xD;&#xA;&#x9;&#x9; AND&#x9;RESIDENCE_COUNTRY_CODE COLLATE database_default in&#xD;&#xA;&#x9;&#x9;&#x9;(&#xD;&#xA;&#x9;&#x9; &#x9;SELECT country_code&#xD;&#xA;&#x9;&#x9;&#x9;FROM  cf_geo_state S &#xD;&#xA;&#x9;&#x9;&#x9;)&#xD;&#xA;&#xD;&#xA;&#xD;&#xA;&#x9;&#x9;/* CITY_CODE: if not null and not exists RESIDENCE_COUNTRY_CODE / STATE_CODE/CITY_CODE in CF_GEO_CITY, &#xD;&#xA;&#x9;&#x9;       message ?Invalid applicant residence state code? */&#xD;&#xA;&#x9;&#x9;INSERT INTO  [&quot;+ context.intermediateDB + &quot;].[dbo].VW_IMPORT_USERDOC_RESULT   &#xD;&#xA;&#x9;&#x9;&#x9;&#x9;( userdoc_seq , &#xD;&#xA;&#x9;&#x9;&#x9;&#x9;userdoc_series , &#xD;&#xA;&#x9;&#x9;&#x9;&#x9;userdoc_nbr , &#xD;&#xA;&#x9;&#x9;&#x9;&#x9;ind_import , &#xD;&#xA;&#x9;&#x9;&#x9;&#x9;msg_import )  &#xD;&#xA;&#x9;&#x9;SELECT&#xD;&#xA;&#x9;&#x9;&#x9;&#x9; userdoc_seq,&#xD;&#xA;&#x9;&#x9;&#x9;&#x9; userdoc_series,&#xD;&#xA;&#x9;&#x9;&#x9;&#x9; userdoc_nbr,&#xD;&#xA;&#x9;&#x9;&#x9;&#x9; 2,&#xD;&#xA;&#x9;&#x9;&#x9;&#x9; 'Invalid applicant city code'&#xD;&#xA;&#x9;&#x9;FROM  [&quot;+ context.intermediateDB + &quot;].[dbo].VW_import_userdoc &#xD;&#xA;&#x9;&#x9;WHERE&#x9; ind_import  = 0&#xD;&#xA;&#x9;&#x9; AND&#x9;PERSON_NAME  is not null&#xD;&#xA;&#x9;&#x9; AND&#x9;CITY_CODE  is not null&#xD;&#xA;&#x9;&#x9; AND&#x9; NOT EXISTS&#xD;&#xA;&#x9;&#x9;&#x9;(&#xD;&#xA;&#x9;&#x9; &#x9;SELECT&#xD;&#xA;&#x9;&#x9;&#x9;&#x9;&#x9; cf_geo_city.COUNTRY_CODE,&#xD;&#xA;&#x9;&#x9;&#x9;&#x9;&#x9; cf_geo_city.STATE_CODE&#xD;&#xA;&#x9;&#x9;&#x9;FROM  cf_geo_city &#xD;&#xA;&#x9;&#x9;&#x9;WHERE&#x9; cf_geo_city.COUNTRY_CODE  = [&quot;+ context.intermediateDB + &quot;].[dbo].VW_import_userdoc.RESIDENCE_COUNTRY_CODE COLLATE database_default&#xD;&#xA;&#x9;&#x9;&#x9; AND&#x9;cf_geo_city.STATE_CODE  = [&quot;+ context.intermediateDB + &quot;].[dbo].VW_import_userdoc.STATE_CODE COLLATE database_default&#xD;&#xA;&#x9;&#x9;&#x9; AND&#x9;cf_geo_city.CITY_CODE  = [&quot;+ context.intermediateDB + &quot;].[dbo].VW_import_userdoc.CITY_CODE COLLATE database_default&#xD;&#xA;&#x9;&#x9;&#x9;)&#xD;&#xA;&#xD;&#xA;&#xD;&#xA;&#xD;&#xA;&#xD;&#xA;&#xD;&#xA;&#xD;&#xA;&#x9;&#x9;&#xD;&#xA;&#x9;&#x9;/* If PERSON_GROUP_CODE is not null and not exists in IP_PERSON_GROUP, message ?Invalid applicant person group code? */&#xD;&#xA;&#x9;&#x9;INSERT INTO  [&quot;+ context.intermediateDB + &quot;].[dbo].VW_IMPORT_USERDOC_RESULT   &#xD;&#xA;&#x9;&#x9;&#x9;&#x9;( userdoc_seq , &#xD;&#xA;&#x9;&#x9;&#x9;&#x9;userdoc_series , &#xD;&#xA;&#x9;&#x9;&#x9;&#x9;userdoc_nbr , &#xD;&#xA;&#x9;&#x9;&#x9;&#x9;ind_import , &#xD;&#xA;&#x9;&#x9;&#x9;&#x9;msg_import )  &#xD;&#xA;&#x9;&#x9;SELECT&#xD;&#xA;&#x9;&#x9;&#x9;&#x9; userdoc_seq,&#xD;&#xA;&#x9;&#x9;&#x9;&#x9; userdoc_series,&#xD;&#xA;&#x9;&#x9;&#x9;&#x9; userdoc_nbr,&#xD;&#xA;&#x9;&#x9;&#x9;&#x9; 2,&#xD;&#xA;&#x9;&#x9;&#x9;&#x9; 'Invalid applicant person group code'&#xD;&#xA;&#x9;&#x9;FROM  [&quot;+ context.intermediateDB + &quot;].[dbo].VW_import_userdoc &#xD;&#xA;&#x9;&#x9;WHERE&#x9; ind_import  = 0&#xD;&#xA;&#x9;&#x9; AND&#x9;PERSON_NAME  is not null&#xD;&#xA;&#x9;&#x9; AND&#x9;PERSON_GROUP_CODE  is not null&#xD;&#xA;&#x9;&#x9; AND&#x9;PERSON_GROUP_CODE  COLLATE database_default not in&#xD;&#xA;&#x9;&#x9;&#x9;(&#xD;&#xA;&#x9;&#x9; &#x9;SELECT PERSON_GROUP_NBR&#xD;&#xA;&#x9;&#x9;&#x9;FROM  IP_PERSON_GROUP &#xD;&#xA;&#x9;&#x9;&#x9;)&#xD;&#xA;&#x9;&#x9;&#xD;&#xA;&#x9;&#x9;/* 4.1.2 [&quot;+ context.intermediateDB + &quot;].[dbo].VW_IMPORT_USERDOC_FILES validations */&#xD;&#xA;&#x9;&#x9;/* If FILE_SEQ / FILE_TYP / FILE_SER / FILE_NBR not exists in IP_FILE, message ?Affected file does not exist? */&#xD;&#xA;&#x9;&#x9;INSERT INTO  [&quot;+ context.intermediateDB + &quot;].[dbo].VW_IMPORT_USERDOC_RESULT   &#xD;&#xA;&#x9;&#x9;&#x9;&#x9;( userdoc_seq , &#xD;&#xA;&#x9;&#x9;&#x9;&#x9;userdoc_series , &#xD;&#xA;&#x9;&#x9;&#x9;&#x9;userdoc_nbr , &#xD;&#xA;&#x9;&#x9;&#x9;&#x9;ind_import , &#xD;&#xA;&#x9;&#x9;&#x9;&#x9;msg_import )  &#xD;&#xA;&#x9;&#x9;SELECT&#xD;&#xA;&#x9;&#x9;&#x9;&#x9; T.userdoc_seq,&#xD;&#xA;&#x9;&#x9;&#x9;&#x9; T.userdoc_series,&#xD;&#xA;&#x9;&#x9;&#x9;&#x9; T.userdoc_nbr,&#xD;&#xA;&#x9;&#x9;&#x9;&#x9; 2,&#xD;&#xA;&#x9;&#x9;&#x9;&#x9; 'Affected file does not exist'&#xD;&#xA;&#x9;&#x9;FROM  [&quot;+ context.intermediateDB + &quot;].[dbo].VW_import_userdoc_files T JOIN [&quot;+ context.intermediateDB + &quot;].[dbo].VW_import_userdoc U ON U.userdoc_seq  = T.userdoc_seq&#xD;&#xA;&#x9;&#x9;&#x9; AND&#x9;U.userdoc_series  = T.userdoc_series&#xD;&#xA;&#x9;&#x9;&#x9; AND&#x9;U.userdoc_nbr  = T.userdoc_nbr  &#xD;&#xA;&#x9;&#x9;WHERE&#x9; ind_import  = 0&#xD;&#xA;&#x9;&#x9; AND&#x9; NOT EXISTS&#xD;&#xA;&#x9;&#x9;&#x9;(&#xD;&#xA;&#x9;&#x9; &#x9;SELECT&#xD;&#xA;&#x9;&#x9;&#x9;&#x9;&#x9; ip_file.file_seq,&#xD;&#xA;&#x9;&#x9;&#x9;&#x9;&#x9; ip_file.file_typ,&#xD;&#xA;&#x9;&#x9;&#x9;&#x9;&#x9; ip_file.file_ser,&#xD;&#xA;&#x9;&#x9;&#x9;&#x9;&#x9; ip_file.file_nbr&#xD;&#xA;&#x9;&#x9;&#x9;FROM  ip_file &#xD;&#xA;&#x9;&#x9;&#x9;WHERE&#x9; ip_file.file_seq  = T.FILE_SEQ COLLATE database_default&#xD;&#xA;&#x9;&#x9;&#x9; AND&#x9;ip_file.file_typ  = T.FILE_TYPE COLLATE database_default&#xD;&#xA;&#x9;&#x9;&#x9; AND&#x9;ip_file.file_ser  = T.FILE_SERIES&#xD;&#xA;&#x9;&#x9;&#x9; AND&#x9;ip_file.file_nbr  = T.FILE_NBR&#xD;&#xA;&#x9;&#x9;&#x9;)&#xD;&#xA;&#x9;&#x9;&#xD;&#xA;&#x9;&#x9;/* If the userdoc type configuration indicates no association with files, &#xD;&#xA;&#x9;&#x9;       message ?The type of the userdoc indicates that no association to files is possible? */&#xD;&#xA;&#x9;&#x9;INSERT INTO  [&quot;+ context.intermediateDB + &quot;].[dbo].VW_IMPORT_USERDOC_RESULT   &#xD;&#xA;&#x9;&#x9;&#x9;&#x9;( userdoc_seq , &#xD;&#xA;&#x9;&#x9;&#x9;&#x9;userdoc_series , &#xD;&#xA;&#x9;&#x9;&#x9;&#x9;userdoc_nbr , &#xD;&#xA;&#x9;&#x9;&#x9;&#x9;ind_import , &#xD;&#xA;&#x9;&#x9;&#x9;&#x9;msg_import )  &#xD;&#xA;&#x9;&#x9;SELECT&#xD;&#xA;&#x9;&#x9;&#x9;&#x9; T.userdoc_seq,&#xD;&#xA;&#x9;&#x9;&#x9;&#x9; T.userdoc_series,&#xD;&#xA;&#x9;&#x9;&#x9;&#x9; T.userdoc_nbr,&#xD;&#xA;&#x9;&#x9;&#x9;&#x9; 2,&#xD;&#xA;&#x9;&#x9;&#x9;&#x9; 'The type of the userdoc indicates that no association to files is possible'&#xD;&#xA;&#x9;&#x9;FROM  [&quot;+ context.intermediateDB + &quot;].[dbo].VW_import_userdoc_files T JOIN [&quot;+ context.intermediateDB + &quot;].[dbo].VW_import_userdoc U ON U.userdoc_seq  = T.userdoc_seq&#xD;&#xA;&#x9;&#x9;&#x9; AND&#x9;U.userdoc_series  = T.userdoc_series&#xD;&#xA;&#x9;&#x9;&#x9; AND&#x9;U.userdoc_nbr  = T.userdoc_nbr  &#xD;&#xA;&#x9;&#x9;WHERE&#x9; ind_import  = 0&#xD;&#xA;&#x9;&#x9; AND&#x9;userdoc_type COLLATE database_default not in&#xD;&#xA;&#x9;&#x9;&#x9;(&#xD;&#xA;&#x9;&#x9; &#x9;SELECT userdoc_typ&#xD;&#xA;&#x9;&#x9;&#x9;FROM  CF_USERDOC_TYPE &#xD;&#xA;&#x9;&#x9;&#x9;WHERE&#x9; ind_affects_file  = 'S'&#xD;&#xA;&#x9;&#x9;&#x9;)&#xD;&#xA;&#x9;&#x9;&#xD;&#xA;&#x9;&#x9;/* 4.1.3 [&quot;+ context.intermediateDB + &quot;].[dbo].VW_IMPORT_USERDOC_OWNERS validations */&#xD;&#xA;&#x9;&#x9;/* 4.1.3.1 New owner validations */&#xD;&#xA;&#x9;&#x9;/* Generate work table with USERDOC_SEQ / SERIES / NBR, IND_SERVICE and COUNT(*) */&#xD;&#xA;&#x9;&#x9;&#xD;&#xA;&#x9;&#x9;&#xD;&#xA;&#x9;&#x9;DECLARE @EXEC_IMMEDIATE_VAR1 VARCHAR (4000)&#xD;&#xA;&#x9;&#x9;SELECT @EXEC_IMMEDIATE_VAR1  = 'TRUNCATE TABLE wrk_userdoc_service_count' &#xD;&#xA;&#xD;&#xA;&#x9;&#x9;EXECUTE (@EXEC_IMMEDIATE_VAR1)&#xD;&#xA;&#x9;&#x9;INSERT INTO  wrk_userdoc_service_count    &#xD;&#xA;&#x9;&#x9;SELECT&#xD;&#xA;&#x9;&#x9;&#x9;&#x9; USERDOC_SEQ,&#xD;&#xA;&#x9;&#x9;&#x9;&#x9; USERDOC_SERIES,&#xD;&#xA;&#x9;&#x9;&#x9;&#x9; USERDOC_NBR,&#xD;&#xA;&#x9;&#x9;&#x9;&#x9; IND_SERVICE,&#xD;&#xA;&#x9;&#x9;&#x9;&#x9; COUNT(*) count1&#xD;&#xA;&#x9;&#x9;FROM  [&quot;+ context.intermediateDB + &quot;].[dbo].VW_IMPORT_USERDOC_OWNERS &#xD;&#xA;&#x9;&#x9;GROUP BY USERDOC_SEQ,&#xD;&#xA;&#x9;&#x9;&#x9; USERDOC_SERIES,&#xD;&#xA;&#x9;&#x9;&#x9; USERDOC_NBR,&#xD;&#xA;&#x9;&#x9;&#x9;  IND_SERVICE &#xD;&#xA;&#x9;&#x9;&#xD;&#xA;&#x9;&#x9; /* check for duplicated owners*/&#xD;&#xA;&#x9;&#x9; &#xD;&#xA;&#x9;&#x9;INSERT INTO  [&quot;+ context.intermediateDB + &quot;].[dbo].VW_IMPORT_USERDOC_RESULT   &#xD;&#xA;&#x9;&#x9;&#x9;&#x9;&#x9;&#x9;( userdoc_seq , &#xD;&#xA;&#x9;&#x9;&#x9;&#x9;&#x9;&#x9;userdoc_series , &#xD;&#xA;&#x9;&#x9;&#x9;&#x9;&#x9;&#x9;userdoc_nbr , &#xD;&#xA;&#x9;&#x9;&#x9;&#x9;&#x9;&#x9;ind_import , &#xD;&#xA;&#x9;&#x9;&#x9;&#x9;&#x9;&#x9;msg_import )  &#xD;&#xA;&#x9;&#x9;SELECT DISTINCT USERDOC_SEQ,USERDOC_SERIES,USERDOC_NBR,&#xD;&#xA;&#x9;&#x9;&#x9;&#x9;&#x9;2,&#x9;'Duplicated userdoc owner'&#xD;&#xA;&#xD;&#xA;&#x9;    FROM [&quot;+ context.intermediateDB + &quot;].[dbo].VW_IMPORT_USERDOC M&#xD;&#xA;&#x9;&#x9;WHERE IND_IMPORT=0 and&#xD;&#xA;&#x9;&#x9;&#x9;EXISTS(    &#xD;&#xA;&#x9;&#x9;&#xD;&#xA;&#x9;&#x9;&#x9;SELECT  USERDOC_SEQ,USERDOC_SERIES,USERDOC_NBR,PERSON_NAME,NATIONALITY_COUNTRY_CODE,&#xD;&#xA;&#x9;&#x9;&#x9;&#x9;&#x9;coalesce(IND_COMPANY,0),coalesce(LEGAL_NATURE,''),&#xD;&#xA;&#x9;&#x9;&#x9;&#x9;&#x9;coalesce(LEGAL_ID_TYPE,''),coalesce(LEGAL_ID_NBR,0),coalesce(INDIVIDUAL_ID_TYPE,''),coalesce(INDIVIDUAL_ID_NBR,0), &#xD;&#xA;&#x9;&#x9;&#x9;&#x9;&#x9;RESIDENCE_COUNTRY_CODE,coalesce(STATE_NAME,''),coalesce(STATE_CODE,''),coalesce(CITY_CODE,''),coalesce(CITY_NAME,''),coalesce(CITY_CODE,''),&#xD;&#xA;&#x9;&#x9;&#x9;&#x9;&#x9;coalesce(ADDRESS_ZONE,''),coalesce(ADDRESS_STREET,''),coalesce(ZIP_CODE,''),coalesce(EMAIL,''),&#xD;&#xA;&#x9;&#x9;&#x9;&#x9;&#x9;coalesce(TELEPHONE,''),&#x9;coalesce(PERSON_GROUP_CODE,'')&#xD;&#xA;&#x9;&#x9;&#x9;FROM [&quot;+ context.intermediateDB + &quot;].[dbo].VW_IMPORT_USERDOC_OWNERS T &#xD;&#xA;&#x9;&#x9;&#x9;WHERE&#x9;M.USERDOC_SEQ=T.USERDOC_SEQ and&#xD;&#xA;&#x9;&#x9;&#x9;&#x9;&#x9;M.USERDOC_SERIES=T.USERDOC_SERIES and&#xD;&#xA;&#x9;&#x9;&#x9;&#x9;&#x9;M.USERDOC_NBR=T.USERDOC_NBR&#xD;&#xA;&#x9;&#x9;&#x9;GROUP BY &#xD;&#xA;&#x9;&#x9;&#x9;&#x9;&#x9;USERDOC_SEQ,USERDOC_SERIES,USERDOC_NBR,PERSON_NAME,NATIONALITY_COUNTRY_CODE,&#xD;&#xA;&#x9;&#x9;&#x9;&#x9;&#x9;coalesce(IND_COMPANY,0),coalesce(LEGAL_NATURE,''),&#xD;&#xA;&#x9;&#x9;&#x9;&#x9;&#x9;coalesce(LEGAL_ID_TYPE,''),coalesce(LEGAL_ID_NBR,0),coalesce(INDIVIDUAL_ID_TYPE,''),coalesce(INDIVIDUAL_ID_NBR,0), &#xD;&#xA;&#x9;&#x9;&#x9;&#x9;&#x9;RESIDENCE_COUNTRY_CODE,coalesce(STATE_NAME,''),coalesce(STATE_CODE,''),coalesce(CITY_CODE,''),coalesce(CITY_NAME,''),coalesce(CITY_CODE,''),&#xD;&#xA;&#x9;&#x9;&#x9;&#x9;&#x9;coalesce(ADDRESS_ZONE,''),coalesce(ADDRESS_STREET,''),coalesce(ZIP_CODE,''),coalesce(EMAIL,''),&#xD;&#xA;&#x9;&#x9;&#x9;&#x9;&#x9;coalesce(TELEPHONE,''),&#x9;coalesce(PERSON_GROUP_CODE,'')&#x9;&#x9;&#x9;&#xD;&#xA;&#x9;&#x9;&#x9;HAVING COUNT(*)>1   &#xD;&#xA;&#x9;&#x9;&#x9;)&#xD;&#xA;&#x9;&#x9; &#xD;&#xA;&#x9;&#x9;&#xD;&#xA;&#x9;&#x9;&#xD;&#xA;&#x9;&#x9;&#xD;&#xA;&#x9;&#x9; /* check for duplicated owners*/&#xD;&#xA;&#x9;&#x9; &#xD;&#xA;&#x9;&#x9;INSERT INTO  [&quot;+ context.intermediateDB + &quot;].[dbo].VW_IMPORT_USERDOC_RESULT   &#xD;&#xA;&#x9;&#x9;&#x9;&#x9;&#x9;&#x9;( userdoc_seq , &#xD;&#xA;&#x9;&#x9;&#x9;&#x9;&#x9;&#x9;userdoc_series , &#xD;&#xA;&#x9;&#x9;&#x9;&#x9;&#x9;&#x9;userdoc_nbr , &#xD;&#xA;&#x9;&#x9;&#x9;&#x9;&#x9;&#x9;ind_import , &#xD;&#xA;&#x9;&#x9;&#x9;&#x9;&#x9;&#x9;msg_import )  &#xD;&#xA;&#x9;&#x9;SELECT DISTINCT USERDOC_SEQ,USERDOC_SERIES,USERDOC_NBR,&#xD;&#xA;&#x9;&#x9;&#x9;&#x9;&#x9;2,&#x9;'Duplicated userdoc owner'&#xD;&#xA;&#xD;&#xA;&#x9;    FROM [&quot;+ context.intermediateDB + &quot;].[dbo].VW_IMPORT_USERDOC M&#xD;&#xA;&#x9;&#x9;WHERE IND_IMPORT=0 and&#xD;&#xA;&#x9;&#x9;&#x9;EXISTS(    &#xD;&#xA;&#x9;&#x9;&#xD;&#xA;&#x9;&#x9;&#x9;SELECT  USERDOC_SEQ,USERDOC_SERIES,USERDOC_NBR,PERSON_NAME,NATIONALITY_COUNTRY_CODE,&#xD;&#xA;&#x9;&#x9;&#x9;&#x9;&#x9;coalesce(IND_COMPANY,0),coalesce(LEGAL_NATURE,''),&#xD;&#xA;&#x9;&#x9;&#x9;&#x9;&#x9;coalesce(LEGAL_ID_TYPE,''),coalesce(LEGAL_ID_NBR,0),coalesce(INDIVIDUAL_ID_TYPE,''),coalesce(INDIVIDUAL_ID_NBR,0), &#xD;&#xA;&#x9;&#x9;&#x9;&#x9;&#x9;RESIDENCE_COUNTRY_CODE,coalesce(STATE_NAME,''),coalesce(STATE_CODE,''),coalesce(CITY_CODE,''),coalesce(CITY_NAME,''),coalesce(CITY_CODE,''),&#xD;&#xA;&#x9;&#x9;&#x9;&#x9;&#x9;coalesce(ADDRESS_ZONE,''),coalesce(ADDRESS_STREET,''),coalesce(ZIP_CODE,''),coalesce(EMAIL,''),&#xD;&#xA;&#x9;&#x9;&#x9;&#x9;&#x9;coalesce(TELEPHONE,''),&#x9;coalesce(PERSON_GROUP_CODE,'')&#xD;&#xA;&#x9;&#x9;&#x9;FROM [&quot;+ context.intermediateDB + &quot;].[dbo].VW_IMPORT_USERDOC_OWNERS T &#xD;&#xA;&#x9;&#x9;&#x9;WHERE&#x9;M.USERDOC_SEQ=T.USERDOC_SEQ and&#xD;&#xA;&#x9;&#x9;&#x9;&#x9;&#x9;M.USERDOC_SERIES=T.USERDOC_SERIES and&#xD;&#xA;&#x9;&#x9;&#x9;&#x9;&#x9;M.USERDOC_NBR=T.USERDOC_NBR&#xD;&#xA;&#x9;&#x9;&#x9;GROUP BY &#xD;&#xA;&#x9;&#x9;&#x9;&#x9;&#x9;USERDOC_SEQ,USERDOC_SERIES,USERDOC_NBR,PERSON_NAME,NATIONALITY_COUNTRY_CODE,&#xD;&#xA;&#x9;&#x9;&#x9;&#x9;&#x9;coalesce(IND_COMPANY,0),coalesce(LEGAL_NATURE,''),&#xD;&#xA;&#x9;&#x9;&#x9;&#x9;&#x9;coalesce(LEGAL_ID_TYPE,''),coalesce(LEGAL_ID_NBR,0),coalesce(INDIVIDUAL_ID_TYPE,''),coalesce(INDIVIDUAL_ID_NBR,0), &#xD;&#xA;&#x9;&#x9;&#x9;&#x9;&#x9;RESIDENCE_COUNTRY_CODE,coalesce(STATE_NAME,''),coalesce(STATE_CODE,''),coalesce(CITY_CODE,''),coalesce(CITY_NAME,''),coalesce(CITY_CODE,''),&#xD;&#xA;&#x9;&#x9;&#x9;&#x9;&#x9;coalesce(ADDRESS_ZONE,''),coalesce(ADDRESS_STREET,''),coalesce(ZIP_CODE,''),coalesce(EMAIL,''),&#xD;&#xA;&#x9;&#x9;&#x9;&#x9;&#x9;coalesce(TELEPHONE,''),&#x9;coalesce(PERSON_GROUP_CODE,'')&#x9;&#x9;&#x9;&#xD;&#xA;&#x9;&#x9;&#x9;HAVING COUNT(*)>1   &#xD;&#xA;&#x9;&#x9;&#x9;)&#xD;&#xA;&#x9;&#x9; &#xD;&#xA;&#x9;&#x9;&#xD;&#xA;&#x9;&#x9;&#xD;&#xA;&#x9;&#x9;&#xD;&#xA;&#x9;&#x9;/* No service address: where a new owner exists but none has IND_SERVICE = 1, &#xD;&#xA;&#x9;&#x9;       message ?No new owner flagged as service address? */&#xD;&#xA;&#x9;&#x9;INSERT INTO  [&quot;+ context.intermediateDB + &quot;].[dbo].VW_IMPORT_USERDOC_RESULT   &#xD;&#xA;&#x9;&#x9;&#x9;&#x9;( userdoc_seq , &#xD;&#xA;&#x9;&#x9;&#x9;&#x9;userdoc_series , &#xD;&#xA;&#x9;&#x9;&#x9;&#x9;userdoc_nbr , &#xD;&#xA;&#x9;&#x9;&#x9;&#x9;ind_import , &#xD;&#xA;&#x9;&#x9;&#x9;&#x9;msg_import )  &#xD;&#xA;&#x9;&#x9;SELECT&#xD;&#xA;&#x9;&#x9;&#x9;&#x9; userdoc_seq,&#xD;&#xA;&#x9;&#x9;&#x9;&#x9; userdoc_series,&#xD;&#xA;&#x9;&#x9;&#x9;&#x9; userdoc_nbr,&#xD;&#xA;&#x9;&#x9;&#x9;&#x9; 2,&#xD;&#xA;&#x9;&#x9;&#x9;&#x9; 'No new owner flagged as service address'&#xD;&#xA;&#x9;&#x9;FROM  [&quot;+ context.intermediateDB + &quot;].[dbo].VW_import_userdoc U &#xD;&#xA;&#x9;&#x9;WHERE&#x9; ind_import  = 0&#xD;&#xA;&#x9;&#x9; AND&#x9;  exists&#xD;&#xA;&#x9;&#x9;&#x9;(&#xD;&#xA;&#x9;&#x9; &#x9;SELECT *&#xD;&#xA;&#x9;&#x9;&#x9;FROM  wrk_userdoc_service_count W &#xD;&#xA;&#x9;&#x9;&#x9;WHERE&#x9; U.userdoc_seq  = W.userdoc_seq&#xD;&#xA;&#x9;&#x9;&#x9; AND&#x9;U.userdoc_series  = W.userdoc_series&#xD;&#xA;&#x9;&#x9;&#x9; AND&#x9;U.userdoc_nbr  = W.userdoc_nbr&#xD;&#xA;&#x9;&#x9;&#x9;)&#xD;&#xA;&#x9;&#x9; AND&#x9;NOT   exists&#xD;&#xA;&#x9;&#x9;&#x9;(&#xD;&#xA;&#x9;&#x9; &#x9;SELECT *&#xD;&#xA;&#x9;&#x9;&#x9;FROM  wrk_userdoc_service_count W &#xD;&#xA;&#x9;&#x9;&#x9;WHERE&#x9; U.userdoc_seq  = W.userdoc_seq&#xD;&#xA;&#x9;&#x9;&#x9; AND&#x9;U.userdoc_series  = W.userdoc_series&#xD;&#xA;&#x9;&#x9;&#x9; AND&#x9;U.userdoc_nbr  = W.userdoc_nbr&#xD;&#xA;&#x9;&#x9;&#x9; AND&#x9;ind_service  = 1&#xD;&#xA;&#x9;&#x9;&#x9;)&#xD;&#xA;&#x9;&#x9;&#xD;&#xA;&#x9;&#x9;/* Several service addresses: where exists corresponding tuple in the work table with &#xD;&#xA;&#x9;&#x9;      IND_SERVICE = 1 and with count column > 1, message ?Several new owners flagged as service addresses? */&#xD;&#xA;&#x9;&#x9;INSERT INTO  [&quot;+ context.intermediateDB + &quot;].[dbo].VW_IMPORT_USERDOC_RESULT   &#xD;&#xA;&#x9;&#x9;&#x9;&#x9;( userdoc_seq , &#xD;&#xA;&#x9;&#x9;&#x9;&#x9;userdoc_series , &#xD;&#xA;&#x9;&#x9;&#x9;&#x9;userdoc_nbr , &#xD;&#xA;&#x9;&#x9;&#x9;&#x9;ind_import , &#xD;&#xA;&#x9;&#x9;&#x9;&#x9;msg_import )  &#xD;&#xA;&#x9;&#x9;SELECT&#xD;&#xA;&#x9;&#x9;&#x9;&#x9; U.userdoc_seq,&#xD;&#xA;&#x9;&#x9;&#x9;&#x9; U.userdoc_series,&#xD;&#xA;&#x9;&#x9;&#x9;&#x9; U.userdoc_nbr,&#xD;&#xA;&#x9;&#x9;&#x9;&#x9; 2,&#xD;&#xA;&#x9;&#x9;&#x9;&#x9; 'Several new owners flagged as service addresses'&#xD;&#xA;&#x9;&#x9;FROM  [&quot;+ context.intermediateDB + &quot;].[dbo].VW_import_userdoc U JOIN wrk_userdoc_service_count W ON U.userdoc_seq  = W.userdoc_seq&#xD;&#xA;&#x9;&#x9;&#x9; AND&#x9;U.userdoc_series  = W.userdoc_series&#xD;&#xA;&#x9;&#x9;&#x9; AND&#x9;U.userdoc_nbr  = W.userdoc_nbr  &#xD;&#xA;&#x9;&#x9;WHERE&#x9; ind_import  = 0&#xD;&#xA;&#x9;&#x9; AND&#x9;ind_service  = 1&#xD;&#xA;&#x9;&#x9; AND&#x9;count1  > 1&#xD;&#xA;&#x9;&#x9;&#xD;&#xA;&#x9;&#x9;/* 4.1.3.2 Person validations */&#xD;&#xA;&#x9;&#x9;/* NATIONALITY_COUNTRY_CODE: if not exists in CF_GEO_COUNTRY, message ?Invalid new owner nationality country code? */&#xD;&#xA;&#x9;&#x9;INSERT INTO  [&quot;+ context.intermediateDB + &quot;].[dbo].VW_IMPORT_USERDOC_RESULT   &#xD;&#xA;&#x9;&#x9;&#x9;&#x9;( userdoc_seq , &#xD;&#xA;&#x9;&#x9;&#x9;&#x9;userdoc_series , &#xD;&#xA;&#x9;&#x9;&#x9;&#x9;userdoc_nbr , &#xD;&#xA;&#x9;&#x9;&#x9;&#x9;ind_import , &#xD;&#xA;&#x9;&#x9;&#x9;&#x9;msg_import )  &#xD;&#xA;&#x9;&#x9;SELECT&#xD;&#xA;&#x9;&#x9;&#x9;&#x9; T.userdoc_seq,&#xD;&#xA;&#x9;&#x9;&#x9;&#x9; T.userdoc_series,&#xD;&#xA;&#x9;&#x9;&#x9;&#x9; T.userdoc_nbr,&#xD;&#xA;&#x9;&#x9;&#x9;&#x9; 2,&#xD;&#xA;&#x9;&#x9;&#x9;&#x9; 'Invalid new owner nationality country code'&#xD;&#xA;&#x9;&#x9;FROM  [&quot;+ context.intermediateDB + &quot;].[dbo].VW_import_userdoc_owners T JOIN [&quot;+ context.intermediateDB + &quot;].[dbo].VW_import_userdoc U ON U.userdoc_seq  = T.userdoc_seq&#xD;&#xA;&#x9;&#x9;&#x9; AND&#x9;U.userdoc_series  = T.userdoc_series&#xD;&#xA;&#x9;&#x9;&#x9; AND&#x9;U.userdoc_nbr  = T.userdoc_nbr  &#xD;&#xA;&#x9;&#x9;WHERE&#x9; ind_import  = 0&#xD;&#xA;&#x9;&#x9; AND&#x9;T.NATIONALITY_COUNTRY_CODE COLLATE database_default not in&#xD;&#xA;&#x9;&#x9;&#x9;(&#xD;&#xA;&#x9;&#x9; &#x9;SELECT COUNTRY_CODE&#xD;&#xA;&#x9;&#x9;&#x9;FROM  cf_geo_country &#xD;&#xA;&#x9;&#x9;&#x9;)&#xD;&#xA;&#x9;&#x9;&#xD;&#xA;&#x9;&#x9;/* LEGAL_NATURE: if not null and IND_COMPANY = 0, message ?New owner legal nature only applies when the person is a company? */&#xD;&#xA;&#x9;&#x9;INSERT INTO  [&quot;+ context.intermediateDB + &quot;].[dbo].VW_IMPORT_USERDOC_RESULT   &#xD;&#xA;&#x9;&#x9;&#x9;&#x9;( userdoc_seq , &#xD;&#xA;&#x9;&#x9;&#x9;&#x9;userdoc_series , &#xD;&#xA;&#x9;&#x9;&#x9;&#x9;userdoc_nbr , &#xD;&#xA;&#x9;&#x9;&#x9;&#x9;ind_import , &#xD;&#xA;&#x9;&#x9;&#x9;&#x9;msg_import )  &#xD;&#xA;&#x9;&#x9;SELECT&#xD;&#xA;&#x9;&#x9;&#x9;&#x9; T.userdoc_seq,&#xD;&#xA;&#x9;&#x9;&#x9;&#x9; T.userdoc_series,&#xD;&#xA;&#x9;&#x9;&#x9;&#x9; T.userdoc_nbr,&#xD;&#xA;&#x9;&#x9;&#x9;&#x9; 2,&#xD;&#xA;&#x9;&#x9;&#x9;&#x9; 'New owner legal nature only applies when the person is a company'&#xD;&#xA;&#x9;&#x9;FROM  [&quot;+ context.intermediateDB + &quot;].[dbo].VW_import_userdoc_owners T JOIN [&quot;+ context.intermediateDB + &quot;].[dbo].VW_import_userdoc U ON U.userdoc_seq  = T.userdoc_seq&#xD;&#xA;&#x9;&#x9;&#x9; AND&#x9;U.userdoc_series  = T.userdoc_series&#xD;&#xA;&#x9;&#x9;&#x9; AND&#x9;U.userdoc_nbr  = T.userdoc_nbr  &#xD;&#xA;&#x9;&#x9;WHERE&#x9; ind_import  = 0&#xD;&#xA;&#x9;&#x9; AND&#x9;T.LEGAL_NATURE  is not null&#xD;&#xA;&#x9;&#x9; AND&#x9;T.IND_COMPANY  = 0&#xD;&#xA;&#x9;&#x9;&#xD;&#xA;&#x9;&#x9;/* LEGAL_ID_TYPE: if not null and not exists if CF_PERSON_ID_TYPE with IND_GENERAL_ID = ?S?, &#xD;&#xA;&#x9;&#x9;       message ?Invalid new owner legal id type? */&#xD;&#xA;&#x9;&#x9;INSERT INTO  [&quot;+ context.intermediateDB + &quot;].[dbo].VW_IMPORT_USERDOC_RESULT   &#xD;&#xA;&#x9;&#x9;&#x9;&#x9;( userdoc_seq , &#xD;&#xA;&#x9;&#x9;&#x9;&#x9;userdoc_series , &#xD;&#xA;&#x9;&#x9;&#x9;&#x9;userdoc_nbr , &#xD;&#xA;&#x9;&#x9;&#x9;&#x9;ind_import , &#xD;&#xA;&#x9;&#x9;&#x9;&#x9;msg_import )  &#xD;&#xA;&#x9;&#x9;SELECT&#xD;&#xA;&#x9;&#x9;&#x9;&#x9; T.userdoc_seq,&#xD;&#xA;&#x9;&#x9;&#x9;&#x9; T.userdoc_series,&#xD;&#xA;&#x9;&#x9;&#x9;&#x9; T.userdoc_nbr,&#xD;&#xA;&#x9;&#x9;&#x9;&#x9; 2,&#xD;&#xA;&#x9;&#x9;&#x9;&#x9; 'Invalid new owner legal id type'&#xD;&#xA;&#x9;&#x9;FROM  [&quot;+ context.intermediateDB + &quot;].[dbo].VW_import_userdoc_owners T JOIN [&quot;+ context.intermediateDB + &quot;].[dbo].VW_import_userdoc U ON U.userdoc_seq  = T.userdoc_seq&#xD;&#xA;&#x9;&#x9;&#x9; AND&#x9;U.userdoc_series  = T.userdoc_series&#xD;&#xA;&#x9;&#x9;&#x9; AND&#x9;U.userdoc_nbr  = T.userdoc_nbr  &#xD;&#xA;&#x9;&#x9;WHERE&#x9; ind_import  = 0&#xD;&#xA;&#x9;&#x9; AND&#x9;T.LEGAL_ID_TYPE  is not null&#xD;&#xA;&#x9;&#x9; AND&#x9;T.LEGAL_ID_TYPE COLLATE database_default not in&#xD;&#xA;&#x9;&#x9;&#x9;(&#xD;&#xA;&#x9;&#x9; &#x9;SELECT PERSON_ID_TYP&#xD;&#xA;&#x9;&#x9;&#x9;FROM  CF_PERSON_ID_TYPE &#xD;&#xA;&#x9;&#x9;&#x9;WHERE&#x9; IND_GENERAL_ID  = 'S'&#xD;&#xA;&#x9;&#x9;&#x9;)&#xD;&#xA;&#x9;&#x9;&#xD;&#xA;&#x9;&#x9;/* INDIVIDUAL_ID_TYPE: if not null and not exists if CF_PERSON_ID_TYPE with IND_INDIVIDUAL_ID = ?S?, &#xD;&#xA;&#x9;&#x9;       message ?Invalid new owner individual id type? */&#xD;&#xA;&#x9;&#x9;INSERT INTO  [&quot;+ context.intermediateDB + &quot;].[dbo].VW_IMPORT_USERDOC_RESULT   &#xD;&#xA;&#x9;&#x9;&#x9;&#x9;( userdoc_seq , &#xD;&#xA;&#x9;&#x9;&#x9;&#x9;userdoc_series , &#xD;&#xA;&#x9;&#x9;&#x9;&#x9;userdoc_nbr , &#xD;&#xA;&#x9;&#x9;&#x9;&#x9;ind_import , &#xD;&#xA;&#x9;&#x9;&#x9;&#x9;msg_import )  &#xD;&#xA;&#x9;&#x9;SELECT&#xD;&#xA;&#x9;&#x9;&#x9;&#x9; T.userdoc_seq,&#xD;&#xA;&#x9;&#x9;&#x9;&#x9; T.userdoc_series,&#xD;&#xA;&#x9;&#x9;&#x9;&#x9; T.userdoc_nbr,&#xD;&#xA;&#x9;&#x9;&#x9;&#x9; 2,&#xD;&#xA;&#x9;&#x9;&#x9;&#x9; 'Invalid new owner individual id type'&#xD;&#xA;&#x9;&#x9;FROM  [&quot;+ context.intermediateDB + &quot;].[dbo].VW_import_userdoc_owners T JOIN [&quot;+ context.intermediateDB + &quot;].[dbo].VW_import_userdoc U ON U.userdoc_seq  = T.userdoc_seq&#xD;&#xA;&#x9;&#x9;&#x9; AND&#x9;U.userdoc_series  = T.userdoc_series&#xD;&#xA;&#x9;&#x9;&#x9; AND&#x9;U.userdoc_nbr  = T.userdoc_nbr  &#xD;&#xA;&#x9;&#x9;WHERE&#x9; ind_import  = 0&#xD;&#xA;&#x9;&#x9; AND&#x9;T.INDIVIDUAL_ID_TYPE  is not null&#xD;&#xA;&#x9;&#x9; AND&#x9;T.INDIVIDUAL_ID_TYPE  COLLATE database_default not in&#xD;&#xA;&#x9;&#x9;&#x9;(&#xD;&#xA;&#x9;&#x9; &#x9;SELECT PERSON_ID_TYP&#xD;&#xA;&#x9;&#x9;&#x9;FROM  CF_PERSON_ID_TYPE &#xD;&#xA;&#x9;&#x9;&#x9;WHERE&#x9; IND_INDIVIDUAL_ID  = 'S'&#xD;&#xA;&#x9;&#x9;&#x9;)&#xD;&#xA;&#x9;&#x9;&#xD;&#xA;&#x9;&#x9;/* If LEGAL_ID_TYPE is not null and LEGAL_ID_NBR is null, message ?Missing new owner legal id number? */&#xD;&#xA;&#x9;&#x9;INSERT INTO  [&quot;+ context.intermediateDB + &quot;].[dbo].VW_IMPORT_USERDOC_RESULT   &#xD;&#xA;&#x9;&#x9;&#x9;&#x9;( userdoc_seq , &#xD;&#xA;&#x9;&#x9;&#x9;&#x9;userdoc_series , &#xD;&#xA;&#x9;&#x9;&#x9;&#x9;userdoc_nbr , &#xD;&#xA;&#x9;&#x9;&#x9;&#x9;ind_import , &#xD;&#xA;&#x9;&#x9;&#x9;&#x9;msg_import )  &#xD;&#xA;&#x9;&#x9;SELECT&#xD;&#xA;&#x9;&#x9;&#x9;&#x9; T.userdoc_seq,&#xD;&#xA;&#x9;&#x9;&#x9;&#x9; T.userdoc_series,&#xD;&#xA;&#x9;&#x9;&#x9;&#x9; T.userdoc_nbr,&#xD;&#xA;&#x9;&#x9;&#x9;&#x9; 2,&#xD;&#xA;&#x9;&#x9;&#x9;&#x9; 'Missing new owner legal id number'&#xD;&#xA;&#x9;&#x9;FROM  [&quot;+ context.intermediateDB + &quot;].[dbo].VW_import_userdoc_owners T JOIN [&quot;+ context.intermediateDB + &quot;].[dbo].VW_import_userdoc U ON U.userdoc_seq  = T.userdoc_seq&#xD;&#xA;&#x9;&#x9;&#x9; AND&#x9;U.userdoc_series  = T.userdoc_series&#xD;&#xA;&#x9;&#x9;&#x9; AND&#x9;U.userdoc_nbr  = T.userdoc_nbr  &#xD;&#xA;&#x9;&#x9;WHERE&#x9; ind_import  = 0&#xD;&#xA;&#x9;&#x9; AND&#x9;T.LEGAL_ID_TYPE  is not null&#xD;&#xA;&#x9;&#x9; AND&#x9;T.LEGAL_ID_NBR  is null&#xD;&#xA;&#x9;&#x9;&#xD;&#xA;&#x9;&#x9;/* If LEGAL_ID_TYPE is null and LEGAL_ID_NBR is not null, message ?Missing new owner legal id type? */&#xD;&#xA;&#x9;&#x9;INSERT INTO  [&quot;+ context.intermediateDB + &quot;].[dbo].VW_IMPORT_USERDOC_RESULT   &#xD;&#xA;&#x9;&#x9;&#x9;&#x9;( userdoc_seq , &#xD;&#xA;&#x9;&#x9;&#x9;&#x9;userdoc_series , &#xD;&#xA;&#x9;&#x9;&#x9;&#x9;userdoc_nbr , &#xD;&#xA;&#x9;&#x9;&#x9;&#x9;ind_import , &#xD;&#xA;&#x9;&#x9;&#x9;&#x9;msg_import )  &#xD;&#xA;&#x9;&#x9;SELECT&#xD;&#xA;&#x9;&#x9;&#x9;&#x9; T.userdoc_seq,&#xD;&#xA;&#x9;&#x9;&#x9;&#x9; T.userdoc_series,&#xD;&#xA;&#x9;&#x9;&#x9;&#x9; T.userdoc_nbr,&#xD;&#xA;&#x9;&#x9;&#x9;&#x9; 2,&#xD;&#xA;&#x9;&#x9;&#x9;&#x9; 'Missing new owner legal id type'&#xD;&#xA;&#x9;&#x9;FROM  [&quot;+ context.intermediateDB + &quot;].[dbo].VW_import_userdoc_owners T JOIN [&quot;+ context.intermediateDB + &quot;].[dbo].VW_import_userdoc U ON U.userdoc_seq  = T.userdoc_seq&#xD;&#xA;&#x9;&#x9;&#x9; AND&#x9;U.userdoc_series  = T.userdoc_series&#xD;&#xA;&#x9;&#x9;&#x9; AND&#x9;U.userdoc_nbr  = T.userdoc_nbr  &#xD;&#xA;&#x9;&#x9;WHERE&#x9; ind_import  = 0&#xD;&#xA;&#x9;&#x9; AND&#x9;T.LEGAL_ID_TYPE  is null&#xD;&#xA;&#x9;&#x9; AND&#x9;T.LEGAL_ID_NBR  is not null&#xD;&#xA;&#x9;&#x9;&#xD;&#xA;&#x9;&#x9;/* If INDIVIDUAL_ID_TYPE is not null and INDIVIDUAL_ID_NBR is null, message ?Missing new owner individual id number? */&#xD;&#xA;&#x9;&#x9;INSERT INTO  [&quot;+ context.intermediateDB + &quot;].[dbo].VW_IMPORT_USERDOC_RESULT   &#xD;&#xA;&#x9;&#x9;&#x9;&#x9;( userdoc_seq , &#xD;&#xA;&#x9;&#x9;&#x9;&#x9;userdoc_series , &#xD;&#xA;&#x9;&#x9;&#x9;&#x9;userdoc_nbr , &#xD;&#xA;&#x9;&#x9;&#x9;&#x9;ind_import , &#xD;&#xA;&#x9;&#x9;&#x9;&#x9;msg_import )  &#xD;&#xA;&#x9;&#x9;SELECT&#xD;&#xA;&#x9;&#x9;&#x9;&#x9; T.userdoc_seq,&#xD;&#xA;&#x9;&#x9;&#x9;&#x9; T.userdoc_series,&#xD;&#xA;&#x9;&#x9;&#x9;&#x9; T.userdoc_nbr,&#xD;&#xA;&#x9;&#x9;&#x9;&#x9; 2,&#xD;&#xA;&#x9;&#x9;&#x9;&#x9; 'Missing new owner individual id number'&#xD;&#xA;&#x9;&#x9;FROM  [&quot;+ context.intermediateDB + &quot;].[dbo].VW_import_userdoc_owners T JOIN [&quot;+ context.intermediateDB + &quot;].[dbo].VW_import_userdoc U ON U.userdoc_seq  = T.userdoc_seq&#xD;&#xA;&#x9;&#x9;&#x9; AND&#x9;U.userdoc_series  = T.userdoc_series&#xD;&#xA;&#x9;&#x9;&#x9; AND&#x9;U.userdoc_nbr  = T.userdoc_nbr  &#xD;&#xA;&#x9;&#x9;WHERE&#x9; ind_import  = 0&#xD;&#xA;&#x9;&#x9; AND&#x9;T.INDIVIDUAL_ID_TYPE  is not null&#xD;&#xA;&#x9;&#x9; AND&#x9;T.INDIVIDUAL_ID_NBR  is null&#xD;&#xA;&#x9;&#x9;&#xD;&#xA;&#x9;&#x9;/* If INDIVIDUAL_ID_TYPE is null and INDIVIDUAL_ID_NBR is not null, message ?Missing new owner individual id type? */&#xD;&#xA;&#x9;&#x9;INSERT INTO  [&quot;+ context.intermediateDB + &quot;].[dbo].VW_IMPORT_USERDOC_RESULT   &#xD;&#xA;&#x9;&#x9;&#x9;&#x9;( userdoc_seq , &#xD;&#xA;&#x9;&#x9;&#x9;&#x9;userdoc_series , &#xD;&#xA;&#x9;&#x9;&#x9;&#x9;userdoc_nbr , &#xD;&#xA;&#x9;&#x9;&#x9;&#x9;ind_import , &#xD;&#xA;&#x9;&#x9;&#x9;&#x9;msg_import )  &#xD;&#xA;&#x9;&#x9;SELECT&#xD;&#xA;&#x9;&#x9;&#x9;&#x9; T.userdoc_seq,&#xD;&#xA;&#x9;&#x9;&#x9;&#x9; T.userdoc_series,&#xD;&#xA;&#x9;&#x9;&#x9;&#x9; T.userdoc_nbr,&#xD;&#xA;&#x9;&#x9;&#x9;&#x9; 2,&#xD;&#xA;&#x9;&#x9;&#x9;&#x9; 'Missing new owner individual id type'&#xD;&#xA;&#x9;&#x9;FROM  [&quot;+ context.intermediateDB + &quot;].[dbo].VW_import_userdoc_owners T JOIN [&quot;+ context.intermediateDB + &quot;].[dbo].VW_import_userdoc U ON U.userdoc_seq  = T.userdoc_seq&#xD;&#xA;&#x9;&#x9;&#x9; AND&#x9;U.userdoc_series  = T.userdoc_series&#xD;&#xA;&#x9;&#x9;&#x9; AND&#x9;U.userdoc_nbr  = T.userdoc_nbr  &#xD;&#xA;&#x9;&#x9;WHERE&#x9; ind_import  = 0&#xD;&#xA;&#x9;&#x9; AND&#x9;T.INDIVIDUAL_ID_TYPE  is null&#xD;&#xA;&#x9;&#x9; AND&#x9;T.INDIVIDUAL_ID_NBR  is not null&#xD;&#xA;&#x9;&#x9;&#xD;&#xA;&#x9;&#x9;/* RESIDENCE_COUNTRY_CODE: if not exists in CF_GEO_COUNTRY, message ?Invalid new owner residence country code? */&#xD;&#xA;&#x9;&#x9;INSERT INTO  [&quot;+ context.intermediateDB + &quot;].[dbo].VW_IMPORT_USERDOC_RESULT   &#xD;&#xA;&#x9;&#x9;&#x9;&#x9;( userdoc_seq , &#xD;&#xA;&#x9;&#x9;&#x9;&#x9;userdoc_series , &#xD;&#xA;&#x9;&#x9;&#x9;&#x9;userdoc_nbr , &#xD;&#xA;&#x9;&#x9;&#x9;&#x9;ind_import , &#xD;&#xA;&#x9;&#x9;&#x9;&#x9;msg_import )  &#xD;&#xA;&#x9;&#x9;SELECT&#xD;&#xA;&#x9;&#x9;&#x9;&#x9; T.userdoc_seq,&#xD;&#xA;&#x9;&#x9;&#x9;&#x9; T.userdoc_series,&#xD;&#xA;&#x9;&#x9;&#x9;&#x9; T.userdoc_nbr,&#xD;&#xA;&#x9;&#x9;&#x9;&#x9; 2,&#xD;&#xA;&#x9;&#x9;&#x9;&#x9; 'Invalid new owner residence country code'&#xD;&#xA;&#x9;&#x9;FROM  [&quot;+ context.intermediateDB + &quot;].[dbo].VW_import_userdoc_owners T JOIN [&quot;+ context.intermediateDB + &quot;].[dbo].VW_import_userdoc U ON U.userdoc_seq  = T.userdoc_seq&#xD;&#xA;&#x9;&#x9;&#x9; AND&#x9;U.userdoc_series  = T.userdoc_series&#xD;&#xA;&#x9;&#x9;&#x9; AND&#x9;U.userdoc_nbr  = T.userdoc_nbr  &#xD;&#xA;&#x9;&#x9;WHERE&#x9; ind_import  = 0&#xD;&#xA;&#x9;&#x9; AND&#x9;T.RESIDENCE_COUNTRY_CODE COLLATE database_default not in&#xD;&#xA;&#x9;&#x9;&#x9;(&#xD;&#xA;&#x9;&#x9; &#x9;SELECT COUNTRY_CODE&#xD;&#xA;&#x9;&#x9;&#x9;FROM  cf_geo_country &#xD;&#xA;&#x9;&#x9;&#x9;)&#xD;&#xA;&#x9;&#x9;&#xD;&#xA;&#x9;&#x9;/* STATE_CODE: if not null and not exists RESIDENCE_COUNTRY_CODE / STATE_CODE in CF_GEO_STATE, &#xD;&#xA;&#x9;&#x9;       message ?Invalid new owner residence state code? */&#xD;&#xA;&#x9;&#x9;INSERT INTO  [&quot;+ context.intermediateDB + &quot;].[dbo].VW_IMPORT_USERDOC_RESULT   &#xD;&#xA;&#x9;&#x9;&#x9;&#x9;( userdoc_seq , &#xD;&#xA;&#x9;&#x9;&#x9;&#x9;userdoc_series , &#xD;&#xA;&#x9;&#x9;&#x9;&#x9;userdoc_nbr , &#xD;&#xA;&#x9;&#x9;&#x9;&#x9;ind_import , &#xD;&#xA;&#x9;&#x9;&#x9;&#x9;msg_import )  &#xD;&#xA;&#x9;&#x9;SELECT&#xD;&#xA;&#x9;&#x9;&#x9;&#x9; T.userdoc_seq,&#xD;&#xA;&#x9;&#x9;&#x9;&#x9; T.userdoc_series,&#xD;&#xA;&#x9;&#x9;&#x9;&#x9; T.userdoc_nbr,&#xD;&#xA;&#x9;&#x9;&#x9;&#x9; 2,&#xD;&#xA;&#x9;&#x9;&#x9;&#x9; 'Invalid new owner residence state code'&#xD;&#xA;&#x9;&#x9;FROM  [&quot;+ context.intermediateDB + &quot;].[dbo].VW_import_userdoc_owners T JOIN [&quot;+ context.intermediateDB + &quot;].[dbo].VW_import_userdoc U ON U.userdoc_seq  = T.userdoc_seq&#xD;&#xA;&#x9;&#x9;&#x9; AND&#x9;U.userdoc_series  = T.userdoc_series&#xD;&#xA;&#x9;&#x9;&#x9; AND&#x9;U.userdoc_nbr  = T.userdoc_nbr  &#xD;&#xA;&#x9;&#x9;WHERE&#x9; ind_import  = 0&#xD;&#xA;&#x9;&#x9; AND&#x9;T.STATE_CODE  is not null&#xD;&#xA;&#x9;&#x9; AND&#x9; NOT EXISTS&#xD;&#xA;&#x9;&#x9;&#x9;(&#xD;&#xA;&#x9;&#x9; &#x9;SELECT&#xD;&#xA;&#x9;&#x9;&#x9;&#x9;&#x9; cf_geo_state.COUNTRY_CODE,&#xD;&#xA;&#x9;&#x9;&#x9;&#x9;&#x9; cf_geo_state.STATE_CODE&#xD;&#xA;&#x9;&#x9;&#x9;FROM  cf_geo_state &#xD;&#xA;&#x9;&#x9;&#x9;WHERE&#x9; cf_geo_state.COUNTRY_CODE  = T.RESIDENCE_COUNTRY_CODE COLLATE database_default&#xD;&#xA;&#x9;&#x9;&#x9; AND&#x9;cf_geo_state.STATE_CODE  = T.STATE_CODE COLLATE database_default&#xD;&#xA;&#x9;&#x9;&#x9;)&#xD;&#xA;&#x9;&#x9;&#xD;&#xA;&#x9;&#x9;/* If STATE_CODE Is null and exist any CF_GEO_STATE with the RESIDENCE_COUNTRY_CODE, &#xD;&#xA;&#x9;&#x9;       message ?A state code is required for the specified new owner residence country? */&#xD;&#xA;&#x9;&#x9;INSERT INTO  [&quot;+ context.intermediateDB + &quot;].[dbo].VW_IMPORT_USERDOC_RESULT   &#xD;&#xA;&#x9;&#x9;&#x9;&#x9;( userdoc_seq , &#xD;&#xA;&#x9;&#x9;&#x9;&#x9;userdoc_series , &#xD;&#xA;&#x9;&#x9;&#x9;&#x9;userdoc_nbr , &#xD;&#xA;&#x9;&#x9;&#x9;&#x9;ind_import , &#xD;&#xA;&#x9;&#x9;&#x9;&#x9;msg_import )  &#xD;&#xA;&#x9;&#x9;SELECT&#xD;&#xA;&#x9;&#x9;&#x9;&#x9; T.userdoc_seq,&#xD;&#xA;&#x9;&#x9;&#x9;&#x9; T.userdoc_series,&#xD;&#xA;&#x9;&#x9;&#x9;&#x9; T.userdoc_nbr,&#xD;&#xA;&#x9;&#x9;&#x9;&#x9; 2,&#xD;&#xA;&#x9;&#x9;&#x9;&#x9; 'A state code is required for the specified new owner residence country'&#xD;&#xA;&#x9;&#x9;FROM  [&quot;+ context.intermediateDB + &quot;].[dbo].VW_import_userdoc_owners T JOIN [&quot;+ context.intermediateDB + &quot;].[dbo].VW_import_userdoc U ON U.userdoc_seq  = T.userdoc_seq&#xD;&#xA;&#x9;&#x9;&#x9; AND&#x9;U.userdoc_series  = T.userdoc_series&#xD;&#xA;&#x9;&#x9;&#x9; AND&#x9;U.userdoc_nbr  = T.userdoc_nbr  &#xD;&#xA;&#x9;&#x9;WHERE&#x9; ind_import  = 0&#xD;&#xA;&#x9;&#x9; AND&#x9;T.STATE_CODE  is null&#xD;&#xA;&#x9;&#x9; AND&#x9;T.RESIDENCE_COUNTRY_CODE COLLATE database_default in&#xD;&#xA;&#x9;&#x9;&#x9;(&#xD;&#xA;&#x9;&#x9; &#x9;SELECT country_code&#xD;&#xA;&#x9;&#x9;&#x9;FROM  cf_geo_state S &#xD;&#xA;&#x9;&#x9;&#x9;)&#xD;&#xA;&#xD;&#xA;&#xD;&#xA;&#x9;&#x9;/* CITY_CODE: if not null and not exists RESIDENCE_COUNTRY_CODE / STATE_CODE /CITY_CODE in CF_GEO_CITY, &#xD;&#xA;&#x9;&#x9;       message ?Invalid new owner residence state code? */&#xD;&#xA;&#x9;&#x9;INSERT INTO  [&quot;+ context.intermediateDB + &quot;].[dbo].VW_IMPORT_USERDOC_RESULT   &#xD;&#xA;&#x9;&#x9;&#x9;&#x9;( userdoc_seq , &#xD;&#xA;&#x9;&#x9;&#x9;&#x9;userdoc_series , &#xD;&#xA;&#x9;&#x9;&#x9;&#x9;userdoc_nbr , &#xD;&#xA;&#x9;&#x9;&#x9;&#x9;ind_import , &#xD;&#xA;&#x9;&#x9;&#x9;&#x9;msg_import )  &#xD;&#xA;&#x9;&#x9;SELECT&#xD;&#xA;&#x9;&#x9;&#x9;&#x9; T.userdoc_seq,&#xD;&#xA;&#x9;&#x9;&#x9;&#x9; T.userdoc_series,&#xD;&#xA;&#x9;&#x9;&#x9;&#x9; T.userdoc_nbr,&#xD;&#xA;&#x9;&#x9;&#x9;&#x9; 2,&#xD;&#xA;&#x9;&#x9;&#x9;&#x9; 'Invalid new owner city code'&#xD;&#xA;&#x9;&#x9;FROM  [&quot;+ context.intermediateDB + &quot;].[dbo].VW_import_userdoc_owners T JOIN [&quot;+ context.intermediateDB + &quot;].[dbo].VW_import_userdoc U ON U.userdoc_seq  = T.userdoc_seq&#xD;&#xA;&#x9;&#x9;&#x9; AND&#x9;U.userdoc_series  = T.userdoc_series&#xD;&#xA;&#x9;&#x9;&#x9; AND&#x9;U.userdoc_nbr  = T.userdoc_nbr  &#xD;&#xA;&#x9;&#x9;WHERE&#x9; ind_import  = 0&#xD;&#xA;&#x9;&#x9; AND&#x9;T.CITY_CODE  is not null&#xD;&#xA;&#x9;&#x9; AND&#x9; NOT EXISTS&#xD;&#xA;&#x9;&#x9;&#x9;(&#xD;&#xA;&#x9;&#x9; &#x9;SELECT&#xD;&#xA;&#x9;&#x9;&#x9;&#x9;&#x9; cf_geo_city.COUNTRY_CODE,&#xD;&#xA;&#x9;&#x9;&#x9;&#x9;&#x9; cf_geo_city.STATE_CODE&#xD;&#xA;&#x9;&#x9;&#x9;FROM  cf_geo_city &#xD;&#xA;&#x9;&#x9;&#x9;WHERE&#x9; cf_geo_city.COUNTRY_CODE  = T.RESIDENCE_COUNTRY_CODE COLLATE database_default&#xD;&#xA;&#x9;&#x9;&#x9; AND&#x9;cf_geo_city.STATE_CODE  = T.STATE_CODE COLLATE database_default&#xD;&#xA; &#x9;&#x9;&#x9; AND&#x9;cf_geo_city.CITY_CODE  = T.CITY_CODE COLLATE database_default&#xD;&#xA;&#x9;&#x9;&#x9;)&#xD;&#xA;&#x9;&#x9;&#xD;&#xA;&#xD;&#xA;&#xD;&#xA;&#x9;&#x9;&#xD;&#xA;&#x9;&#x9;/* If PERSON_GROUP_CODE is not null and not exists in IP_PERSON_GROUP, message ?Invalid new owner person group code? */&#xD;&#xA;&#x9;&#x9;INSERT INTO  [&quot;+ context.intermediateDB + &quot;].[dbo].VW_IMPORT_USERDOC_RESULT   &#xD;&#xA;&#x9;&#x9;&#x9;&#x9;( userdoc_seq , &#xD;&#xA;&#x9;&#x9;&#x9;&#x9;userdoc_series , &#xD;&#xA;&#x9;&#x9;&#x9;&#x9;userdoc_nbr , &#xD;&#xA;&#x9;&#x9;&#x9;&#x9;ind_import , &#xD;&#xA;&#x9;&#x9;&#x9;&#x9;msg_import )  &#xD;&#xA;&#x9;&#x9;SELECT&#xD;&#xA;&#x9;&#x9;&#x9;&#x9; T.userdoc_seq,&#xD;&#xA;&#x9;&#x9;&#x9;&#x9; T.userdoc_series,&#xD;&#xA;&#x9;&#x9;&#x9;&#x9; T.userdoc_nbr,&#xD;&#xA;&#x9;&#x9;&#x9;&#x9; 2,&#xD;&#xA;&#x9;&#x9;&#x9;&#x9; 'Invalid new owner person group code'&#xD;&#xA;&#x9;&#x9;FROM  [&quot;+ context.intermediateDB + &quot;].[dbo].VW_import_userdoc_owners T JOIN [&quot;+ context.intermediateDB + &quot;].[dbo].VW_import_userdoc U ON U.userdoc_seq  = T.userdoc_seq&#xD;&#xA;&#x9;&#x9;&#x9; AND&#x9;U.userdoc_series  = T.userdoc_series&#xD;&#xA;&#x9;&#x9;&#x9; AND&#x9;U.userdoc_nbr  = T.userdoc_nbr  &#xD;&#xA;&#x9;&#x9;WHERE&#x9; ind_import  = 0&#xD;&#xA;&#x9;&#x9; AND&#x9;T.PERSON_GROUP_CODE  is not null&#xD;&#xA;&#x9;&#x9; AND&#x9;T.PERSON_GROUP_CODE  COLLATE database_default not in&#xD;&#xA;&#x9;&#x9;&#x9;(&#xD;&#xA;&#x9;&#x9; &#x9;SELECT PERSON_GROUP_NBR&#xD;&#xA;&#x9;&#x9;&#x9;FROM  IP_PERSON_GROUP &#xD;&#xA;&#x9;&#x9;&#x9;)&#xD;&#xA;&#x9;&#x9;&#xD;&#xA;&#x9;&#x9;/* 4.1.4 [&quot;+ context.intermediateDB + &quot;].[dbo].VW_IMPORT_USERDOC_REPRS validations */&#xD;&#xA;&#x9;&#x9;/* 4.1.4.1 Representative validations */&#xD;&#xA;&#x9;&#x9;/* Generate work table with USERDOC_SEQ / SERIES / NBR, IND_SERVICE and COUNT(*) */&#xD;&#xA;&#x9;&#x9;&#xD;&#xA;&#x9;&#x9;&#xD;&#xA;&#x9;&#x9;DECLARE @EXEC_IMMEDIATE_VAR2 VARCHAR (4000)&#xD;&#xA;&#x9;&#x9;SELECT @EXEC_IMMEDIATE_VAR2  = 'TRUNCATE TABLE wrk_userdoc_service_count' &#xD;&#xA;&#xD;&#xA;&#x9;&#x9;EXECUTE (@EXEC_IMMEDIATE_VAR2)&#xD;&#xA;&#x9;&#x9;INSERT INTO  wrk_userdoc_service_count    &#xD;&#xA;&#x9;&#x9;SELECT&#xD;&#xA;&#x9;&#x9;&#x9;&#x9; USERDOC_SEQ,&#xD;&#xA;&#x9;&#x9;&#x9;&#x9; USERDOC_SERIES,&#xD;&#xA;&#x9;&#x9;&#x9;&#x9; USERDOC_NBR,&#xD;&#xA;&#x9;&#x9;&#x9;&#x9; IND_SERVICE,&#xD;&#xA;&#x9;&#x9;&#x9;&#x9; COUNT(*) count1&#xD;&#xA;&#x9;&#x9;FROM  [&quot;+ context.intermediateDB + &quot;].[dbo].VW_import_userdoc_reprs &#xD;&#xA;&#x9;&#x9;GROUP BY USERDOC_SEQ,&#xD;&#xA;&#x9;&#x9;&#x9; USERDOC_SERIES,&#xD;&#xA;&#x9;&#x9;&#x9; USERDOC_NBR,&#xD;&#xA;&#x9;&#x9;&#x9;  IND_SERVICE &#xD;&#xA;&#x9;&#x9;&#xD;&#xA;&#x9;&#x9;/* No service address: where a representative exists but no-one has IND_SERVICE = 1, &#xD;&#xA;&#x9;&#x9;       message ?No representative flagged as service address? */&#xD;&#xA;&#x9;&#x9;INSERT INTO  [&quot;+ context.intermediateDB + &quot;].[dbo].VW_IMPORT_USERDOC_RESULT   &#xD;&#xA;&#x9;&#x9;&#x9;&#x9;( userdoc_seq , &#xD;&#xA;&#x9;&#x9;&#x9;&#x9;userdoc_series , &#xD;&#xA;&#x9;&#x9;&#x9;&#x9;userdoc_nbr , &#xD;&#xA;&#x9;&#x9;&#x9;&#x9;ind_import , &#xD;&#xA;&#x9;&#x9;&#x9;&#x9;msg_import )  &#xD;&#xA;&#x9;&#x9;SELECT&#xD;&#xA;&#x9;&#x9;&#x9;&#x9; userdoc_seq,&#xD;&#xA;&#x9;&#x9;&#x9;&#x9; userdoc_series,&#xD;&#xA;&#x9;&#x9;&#x9;&#x9; userdoc_nbr,&#xD;&#xA;&#x9;&#x9;&#x9;&#x9; 2,&#xD;&#xA;&#x9;&#x9;&#x9;&#x9; 'No representative flagged as service address' ojo&#xD;&#xA;&#x9;&#x9;FROM  [&quot;+ context.intermediateDB + &quot;].[dbo].VW_import_userdoc U &#xD;&#xA;&#x9;&#x9;WHERE&#x9; ind_import  = 0&#xD;&#xA;&#x9;&#x9; AND&#x9;  exists&#xD;&#xA;&#x9;&#x9;&#x9;(&#xD;&#xA;&#x9;&#x9; &#x9;SELECT *&#xD;&#xA;&#x9;&#x9;&#x9;FROM  wrk_userdoc_service_count W &#xD;&#xA;&#x9;&#x9;&#x9;WHERE&#x9; U.userdoc_seq  = W.userdoc_seq&#xD;&#xA;&#x9;&#x9;&#x9; AND&#x9;U.userdoc_series  = W.userdoc_series&#xD;&#xA;&#x9;&#x9;&#x9; AND&#x9;U.userdoc_nbr  = W.userdoc_nbr&#xD;&#xA;&#x9;&#x9;&#x9;)&#xD;&#xA;&#x9;&#x9; AND&#x9;NOT   exists&#xD;&#xA;&#x9;&#x9;&#x9;(&#xD;&#xA;&#x9;&#x9; &#x9;SELECT *&#xD;&#xA;&#x9;&#x9;&#x9;FROM  wrk_userdoc_service_count W &#xD;&#xA;&#x9;&#x9;&#x9;WHERE&#x9; U.userdoc_seq  = W.userdoc_seq&#xD;&#xA;&#x9;&#x9;&#x9; AND&#x9;U.userdoc_series  = W.userdoc_series&#xD;&#xA;&#x9;&#x9;&#x9; AND&#x9;U.userdoc_nbr  = W.userdoc_nbr&#xD;&#xA;&#x9;&#x9;&#x9; AND&#x9;ind_service  = 1&#xD;&#xA;&#x9;&#x9;&#x9;)&#xD;&#xA;&#x9;&#x9;&#xD;&#xA;&#x9;&#x9;/* Several service addresses: where exists corresponding tuple in the work table with &#xD;&#xA;&#x9;&#x9;      IND_SERVICE = 1 and with count column > 1, message ?Several representatives flagged as service addresses? */&#xD;&#xA;&#x9;&#x9;INSERT INTO  [&quot;+ context.intermediateDB + &quot;].[dbo].VW_IMPORT_USERDOC_RESULT   &#xD;&#xA;&#x9;&#x9;&#x9;&#x9;( userdoc_seq , &#xD;&#xA;&#x9;&#x9;&#x9;&#x9;userdoc_series , &#xD;&#xA;&#x9;&#x9;&#x9;&#x9;userdoc_nbr , &#xD;&#xA;&#x9;&#x9;&#x9;&#x9;ind_import , &#xD;&#xA;&#x9;&#x9;&#x9;&#x9;msg_import )  &#xD;&#xA;&#x9;&#x9;SELECT&#xD;&#xA;&#x9;&#x9;&#x9;&#x9; U.userdoc_seq,&#xD;&#xA;&#x9;&#x9;&#x9;&#x9; U.userdoc_series,&#xD;&#xA;&#x9;&#x9;&#x9;&#x9; U.userdoc_nbr,&#xD;&#xA;&#x9;&#x9;&#x9;&#x9; 2,&#xD;&#xA;&#x9;&#x9;&#x9;&#x9; 'Several representatives flagged as service addresses'&#xD;&#xA;&#x9;&#x9;FROM  [&quot;+ context.intermediateDB + &quot;].[dbo].VW_import_userdoc U JOIN wrk_userdoc_service_count W ON U.userdoc_seq  = W.userdoc_seq&#xD;&#xA;&#x9;&#x9;&#x9; AND&#x9;U.userdoc_series  = W.userdoc_series&#xD;&#xA;&#x9;&#x9;&#x9; AND&#x9;U.userdoc_nbr  = W.userdoc_nbr  &#xD;&#xA;&#x9;&#x9;WHERE&#x9; ind_import  = 0&#xD;&#xA;&#x9;&#x9; AND&#x9;ind_service  = 1&#xD;&#xA;&#x9;&#x9; AND&#x9;count1  > 1&#xD;&#xA;&#x9;&#x9;&#xD;&#xA;&#x9;&#x9;/* REPRESENTATIVE_TYPE: if not exists in CF_REPRESENTATIVE_TYPE, message ?Invalid representative type? */&#xD;&#xA;&#x9;&#x9;INSERT INTO  [&quot;+ context.intermediateDB + &quot;].[dbo].VW_IMPORT_USERDOC_RESULT   &#xD;&#xA;&#x9;&#x9;&#x9;&#x9;( userdoc_seq , &#xD;&#xA;&#x9;&#x9;&#x9;&#x9;userdoc_series , &#xD;&#xA;&#x9;&#x9;&#x9;&#x9;userdoc_nbr , &#xD;&#xA;&#x9;&#x9;&#x9;&#x9;ind_import , &#xD;&#xA;&#x9;&#x9;&#x9;&#x9;msg_import )  &#xD;&#xA;&#x9;&#x9;SELECT&#xD;&#xA;&#x9;&#x9;&#x9;&#x9; U.userdoc_seq,&#xD;&#xA;&#x9;&#x9;&#x9;&#x9; U.userdoc_series,&#xD;&#xA;&#x9;&#x9;&#x9;&#x9; U.userdoc_nbr,&#xD;&#xA;&#x9;&#x9;&#x9;&#x9; 2,&#xD;&#xA;&#x9;&#x9;&#x9;&#x9; 'Invalid representative type'&#xD;&#xA;&#x9;&#x9;FROM  [&quot;+ context.intermediateDB + &quot;].[dbo].VW_import_userdoc_reprs T JOIN [&quot;+ context.intermediateDB + &quot;].[dbo].VW_import_userdoc U ON U.userdoc_seq  = T.userdoc_seq&#xD;&#xA;&#x9;&#x9;&#x9; AND&#x9;U.userdoc_series  = T.userdoc_series&#xD;&#xA;&#x9;&#x9;&#x9; AND&#x9;U.userdoc_nbr  = T.userdoc_nbr  &#xD;&#xA;&#x9;&#x9;WHERE&#x9; ind_import  = 0&#xD;&#xA;&#x9;&#x9; AND&#x9;REPRESENTATIVE_TYPE  not in&#xD;&#xA;&#x9;&#x9;&#x9;(&#xD;&#xA;&#x9;&#x9; &#x9;SELECT REPRESENTATIVE_TYPE&#xD;&#xA;&#x9;&#x9;&#x9;FROM  CF_REPRESENTATIVE_TYPE &#xD;&#xA;&#x9;&#x9;&#x9;)&#xD;&#xA;&#x9;&#x9;&#xD;&#xA;&#x9;&#x9;/* AGENT_CODE: if not null and not exists in IF_AGENT, message ?Invalid agent code? */&#xD;&#xA;&#x9;&#x9;INSERT INTO  [&quot;+ context.intermediateDB + &quot;].[dbo].VW_IMPORT_USERDOC_RESULT   &#xD;&#xA;&#x9;&#x9;&#x9;&#x9;( userdoc_seq , &#xD;&#xA;&#x9;&#x9;&#x9;&#x9;userdoc_series , &#xD;&#xA;&#x9;&#x9;&#x9;&#x9;userdoc_nbr , &#xD;&#xA;&#x9;&#x9;&#x9;&#x9;ind_import , &#xD;&#xA;&#x9;&#x9;&#x9;&#x9;msg_import )  &#xD;&#xA;&#x9;&#x9;SELECT&#xD;&#xA;&#x9;&#x9;&#x9;&#x9; U.userdoc_seq,&#xD;&#xA;&#x9;&#x9;&#x9;&#x9; U.userdoc_series,&#xD;&#xA;&#x9;&#x9;&#x9;&#x9; U.userdoc_nbr,&#xD;&#xA;&#x9;&#x9;&#x9;&#x9; 2,&#xD;&#xA;&#x9;&#x9;&#x9;&#x9; 'Invalid agent code'&#xD;&#xA;&#x9;&#x9;FROM  [&quot;+ context.intermediateDB + &quot;].[dbo].VW_import_userdoc_reprs T JOIN [&quot;+ context.intermediateDB + &quot;].[dbo].VW_import_userdoc U ON U.userdoc_seq  = T.userdoc_seq&#xD;&#xA;&#x9;&#x9;&#x9; AND&#x9;U.userdoc_series  = T.userdoc_series&#xD;&#xA;&#x9;&#x9;&#x9; AND&#x9;U.userdoc_nbr  = T.userdoc_nbr  &#xD;&#xA;&#x9;&#x9;WHERE&#x9; ind_import  = 0&#xD;&#xA;&#x9;&#x9; AND&#x9;AGENT_CODE  is not null&#xD;&#xA;&#x9;&#x9; AND&#x9;AGENT_CODE  not in&#xD;&#xA;&#x9;&#x9;&#x9;(&#xD;&#xA;&#x9;&#x9; &#x9;SELECT AGENT_CODE&#xD;&#xA;&#x9;&#x9;&#x9;FROM  IP_AGENT &#xD;&#xA;&#x9;&#x9;&#x9;)&#xD;&#xA;&#x9;&#x9;&#xD;&#xA;&#x9;&#x9;/* 4.1.4.2 Person validations */&#xD;&#xA;&#x9;&#x9;/* NATIONALITY_COUNTRY_CODE: if not exists in CF_GEO_COUNTRY, message ?Invalid representative nationality country code? */&#xD;&#xA;&#x9;&#x9;INSERT INTO  [&quot;+ context.intermediateDB + &quot;].[dbo].VW_IMPORT_USERDOC_RESULT   &#xD;&#xA;&#x9;&#x9;&#x9;&#x9;( userdoc_seq , &#xD;&#xA;&#x9;&#x9;&#x9;&#x9;userdoc_series , &#xD;&#xA;&#x9;&#x9;&#x9;&#x9;userdoc_nbr , &#xD;&#xA;&#x9;&#x9;&#x9;&#x9;ind_import , &#xD;&#xA;&#x9;&#x9;&#x9;&#x9;msg_import )  &#xD;&#xA;&#x9;&#x9;SELECT&#xD;&#xA;&#x9;&#x9;&#x9;&#x9; T.userdoc_seq,&#xD;&#xA;&#x9;&#x9;&#x9;&#x9; T.userdoc_series,&#xD;&#xA;&#x9;&#x9;&#x9;&#x9; T.userdoc_nbr,&#xD;&#xA;&#x9;&#x9;&#x9;&#x9; 2,&#xD;&#xA;&#x9;&#x9;&#x9;&#x9; 'Invalid representative nationality country code'&#xD;&#xA;&#x9;&#x9;FROM  [&quot;+ context.intermediateDB + &quot;].[dbo].VW_import_userdoc_reprs T JOIN [&quot;+ context.intermediateDB + &quot;].[dbo].VW_import_userdoc U ON U.userdoc_seq  = T.userdoc_seq&#xD;&#xA;&#x9;&#x9;&#x9; AND&#x9;U.userdoc_series  = T.userdoc_series&#xD;&#xA;&#x9;&#x9;&#x9; AND&#x9;U.userdoc_nbr  = T.userdoc_nbr  &#xD;&#xA;&#x9;&#x9;WHERE&#x9; ind_import  = 0&#xD;&#xA;&#x9;&#x9; AND&#x9;T.NATIONALITY_COUNTRY_CODE COLLATE database_default not in&#xD;&#xA;&#x9;&#x9;&#x9;(&#xD;&#xA;&#x9;&#x9; &#x9;SELECT COUNTRY_CODE&#xD;&#xA;&#x9;&#x9;&#x9;FROM  cf_geo_country &#xD;&#xA;&#x9;&#x9;&#x9;)&#xD;&#xA;&#x9;&#x9;&#xD;&#xA;&#x9;&#x9;/* LEGAL_NATURE: if not null and IND_COMPANY = 0, message ?New representative nature only applies when the person is a company? */&#xD;&#xA;&#x9;&#x9;INSERT INTO  [&quot;+ context.intermediateDB + &quot;].[dbo].VW_IMPORT_USERDOC_RESULT   &#xD;&#xA;&#x9;&#x9;&#x9;&#x9;( userdoc_seq , &#xD;&#xA;&#x9;&#x9;&#x9;&#x9;userdoc_series , &#xD;&#xA;&#x9;&#x9;&#x9;&#x9;userdoc_nbr , &#xD;&#xA;&#x9;&#x9;&#x9;&#x9;ind_import , &#xD;&#xA;&#x9;&#x9;&#x9;&#x9;msg_import )  &#xD;&#xA;&#x9;&#x9;SELECT&#xD;&#xA;&#x9;&#x9;&#x9;&#x9; T.userdoc_seq,&#xD;&#xA;&#x9;&#x9;&#x9;&#x9; T.userdoc_series,&#xD;&#xA;&#x9;&#x9;&#x9;&#x9; T.userdoc_nbr,&#xD;&#xA;&#x9;&#x9;&#x9;&#x9; 2,&#xD;&#xA;&#x9;&#x9;&#x9;&#x9; 'Representative legal nature only applies when the person is a company'&#xD;&#xA;&#x9;&#x9;FROM  [&quot;+ context.intermediateDB + &quot;].[dbo].VW_import_userdoc_reprs T JOIN [&quot;+ context.intermediateDB + &quot;].[dbo].VW_import_userdoc U ON U.userdoc_seq  = T.userdoc_seq&#xD;&#xA;&#x9;&#x9;&#x9; AND&#x9;U.userdoc_series  = T.userdoc_series&#xD;&#xA;&#x9;&#x9;&#x9; AND&#x9;U.userdoc_nbr  = T.userdoc_nbr  &#xD;&#xA;&#x9;&#x9;WHERE&#x9; ind_import  = 0&#xD;&#xA;&#x9;&#x9; AND&#x9;T.LEGAL_NATURE  is not null&#xD;&#xA;&#x9;&#x9; AND&#x9;T.IND_COMPANY  = 0&#xD;&#xA;&#x9;&#x9;&#xD;&#xA;&#x9;&#x9;/* LEGAL_ID_TYPE: if not null and not exists if CF_PERSON_ID_TYPE with IND_GENERAL_ID = ?S?, &#xD;&#xA;&#x9;&#x9;       message ?Invalid representative legal id type? */&#xD;&#xA;&#x9;&#x9;INSERT INTO  [&quot;+ context.intermediateDB + &quot;].[dbo].VW_IMPORT_USERDOC_RESULT   &#xD;&#xA;&#x9;&#x9;&#x9;&#x9;( userdoc_seq , &#xD;&#xA;&#x9;&#x9;&#x9;&#x9;userdoc_series , &#xD;&#xA;&#x9;&#x9;&#x9;&#x9;userdoc_nbr , &#xD;&#xA;&#x9;&#x9;&#x9;&#x9;ind_import , &#xD;&#xA;&#x9;&#x9;&#x9;&#x9;msg_import )  &#xD;&#xA;&#x9;&#x9;SELECT&#xD;&#xA;&#x9;&#x9;&#x9;&#x9; T.userdoc_seq,&#xD;&#xA;&#x9;&#x9;&#x9;&#x9; T.userdoc_series,&#xD;&#xA;&#x9;&#x9;&#x9;&#x9; T.userdoc_nbr,&#xD;&#xA;&#x9;&#x9;&#x9;&#x9; 2,&#xD;&#xA;&#x9;&#x9;&#x9;&#x9; 'Invalid representative legal id type'&#xD;&#xA;&#x9;&#x9;FROM  [&quot;+ context.intermediateDB + &quot;].[dbo].VW_import_userdoc_reprs T JOIN [&quot;+ context.intermediateDB + &quot;].[dbo].VW_import_userdoc U ON U.userdoc_seq  = T.userdoc_seq&#xD;&#xA;&#x9;&#x9;&#x9; AND&#x9;U.userdoc_series  = T.userdoc_series&#xD;&#xA;&#x9;&#x9;&#x9; AND&#x9;U.userdoc_nbr  = T.userdoc_nbr  &#xD;&#xA;&#x9;&#x9;WHERE&#x9; ind_import  = 0&#xD;&#xA;&#x9;&#x9; AND&#x9;T.LEGAL_ID_TYPE  is not null&#xD;&#xA;&#x9;&#x9; AND&#x9;T.LEGAL_ID_TYPE  COLLATE database_default not in&#xD;&#xA;&#x9;&#x9;&#x9;(&#xD;&#xA;&#x9;&#x9; &#x9;SELECT PERSON_ID_TYP&#xD;&#xA;&#x9;&#x9;&#x9;FROM  CF_PERSON_ID_TYPE &#xD;&#xA;&#x9;&#x9;&#x9;WHERE&#x9; IND_GENERAL_ID  = 'S'&#xD;&#xA;&#x9;&#x9;&#x9;)&#xD;&#xA;&#x9;&#x9;&#xD;&#xA;&#x9;&#x9;/* INDIVIDUAL_ID_TYPE: if not null and not exists if CF_PERSON_ID_TYPE with IND_INDIVIDUAL_ID = ?S?, &#xD;&#xA;&#x9;&#x9;       message ?Invalid representative individual id type? */&#xD;&#xA;&#x9;&#x9;INSERT INTO  [&quot;+ context.intermediateDB + &quot;].[dbo].VW_IMPORT_USERDOC_RESULT   &#xD;&#xA;&#x9;&#x9;&#x9;&#x9;( userdoc_seq , &#xD;&#xA;&#x9;&#x9;&#x9;&#x9;userdoc_series , &#xD;&#xA;&#x9;&#x9;&#x9;&#x9;userdoc_nbr , &#xD;&#xA;&#x9;&#x9;&#x9;&#x9;ind_import , &#xD;&#xA;&#x9;&#x9;&#x9;&#x9;msg_import )  &#xD;&#xA;&#x9;&#x9;SELECT&#xD;&#xA;&#x9;&#x9;&#x9;&#x9; T.userdoc_seq,&#xD;&#xA;&#x9;&#x9;&#x9;&#x9; T.userdoc_series,&#xD;&#xA;&#x9;&#x9;&#x9;&#x9; T.userdoc_nbr,&#xD;&#xA;&#x9;&#x9;&#x9;&#x9; 2,&#xD;&#xA;&#x9;&#x9;&#x9;&#x9; 'Invalid representative individual id type'&#xD;&#xA;&#x9;&#x9;FROM  [&quot;+ context.intermediateDB + &quot;].[dbo].VW_import_userdoc_reprs T JOIN [&quot;+ context.intermediateDB + &quot;].[dbo].VW_import_userdoc U ON U.userdoc_seq  = T.userdoc_seq&#xD;&#xA;&#x9;&#x9;&#x9; AND&#x9;U.userdoc_series  = T.userdoc_series&#xD;&#xA;&#x9;&#x9;&#x9; AND&#x9;U.userdoc_nbr  = T.userdoc_nbr  &#xD;&#xA;&#x9;&#x9;WHERE&#x9; ind_import  = 0&#xD;&#xA;&#x9;&#x9; AND&#x9;T.INDIVIDUAL_ID_TYPE  is not null&#xD;&#xA;&#x9;&#x9; AND&#x9;T.INDIVIDUAL_ID_TYPE  COLLATE database_default not in&#xD;&#xA;&#x9;&#x9;&#x9;(&#xD;&#xA;&#x9;&#x9; &#x9;SELECT PERSON_ID_TYP&#xD;&#xA;&#x9;&#x9;&#x9;FROM  CF_PERSON_ID_TYPE &#xD;&#xA;&#x9;&#x9;&#x9;WHERE&#x9; IND_INDIVIDUAL_ID  = 'S'&#xD;&#xA;&#x9;&#x9;&#x9;)&#xD;&#xA;&#x9;&#x9;&#xD;&#xA;&#x9;&#x9;/* If LEGAL_ID_TYPE is not null and LEGAL_ID_NBR is null, message ?Missing representative legal id number? */&#xD;&#xA;&#x9;&#x9;INSERT INTO  [&quot;+ context.intermediateDB + &quot;].[dbo].VW_IMPORT_USERDOC_RESULT   &#xD;&#xA;&#x9;&#x9;&#x9;&#x9;( userdoc_seq , &#xD;&#xA;&#x9;&#x9;&#x9;&#x9;userdoc_series , &#xD;&#xA;&#x9;&#x9;&#x9;&#x9;userdoc_nbr , &#xD;&#xA;&#x9;&#x9;&#x9;&#x9;ind_import , &#xD;&#xA;&#x9;&#x9;&#x9;&#x9;msg_import )  &#xD;&#xA;&#x9;&#x9;SELECT&#xD;&#xA;&#x9;&#x9;&#x9;&#x9; T.userdoc_seq,&#xD;&#xA;&#x9;&#x9;&#x9;&#x9; T.userdoc_series,&#xD;&#xA;&#x9;&#x9;&#x9;&#x9; T.userdoc_nbr,&#xD;&#xA;&#x9;&#x9;&#x9;&#x9; 2,&#xD;&#xA;&#x9;&#x9;&#x9;&#x9; 'Missing representative legal id number'&#xD;&#xA;&#x9;&#x9;FROM  [&quot;+ context.intermediateDB + &quot;].[dbo].VW_import_userdoc_reprs T JOIN [&quot;+ context.intermediateDB + &quot;].[dbo].VW_import_userdoc U ON U.userdoc_seq  = T.userdoc_seq&#xD;&#xA;&#x9;&#x9;&#x9; AND&#x9;U.userdoc_series  = T.userdoc_series&#xD;&#xA;&#x9;&#x9;&#x9; AND&#x9;U.userdoc_nbr  = T.userdoc_nbr  &#xD;&#xA;&#x9;&#x9;WHERE&#x9; ind_import  = 0&#xD;&#xA;&#x9;&#x9; AND&#x9;T.LEGAL_ID_TYPE  is not null&#xD;&#xA;&#x9;&#x9; AND&#x9;T.LEGAL_ID_NBR  is null&#xD;&#xA;&#x9;&#x9;&#xD;&#xA;&#x9;&#x9;/* If LEGAL_ID_TYPE is null and LEGAL_ID_NBR is not null, message ?Missing representative legal id type? */&#xD;&#xA;&#x9;&#x9;INSERT INTO  [&quot;+ context.intermediateDB + &quot;].[dbo].VW_IMPORT_USERDOC_RESULT   &#xD;&#xA;&#x9;&#x9;&#x9;&#x9;( userdoc_seq , &#xD;&#xA;&#x9;&#x9;&#x9;&#x9;userdoc_series , &#xD;&#xA;&#x9;&#x9;&#x9;&#x9;userdoc_nbr , &#xD;&#xA;&#x9;&#x9;&#x9;&#x9;ind_import , &#xD;&#xA;&#x9;&#x9;&#x9;&#x9;msg_import )  &#xD;&#xA;&#x9;&#x9;SELECT&#xD;&#xA;&#x9;&#x9;&#x9;&#x9; T.userdoc_seq,&#xD;&#xA;&#x9;&#x9;&#x9;&#x9; T.userdoc_series,&#xD;&#xA;&#x9;&#x9;&#x9;&#x9; T.userdoc_nbr,&#xD;&#xA;&#x9;&#x9;&#x9;&#x9; 2,&#xD;&#xA;&#x9;&#x9;&#x9;&#x9; 'Missing representative legal id type'&#xD;&#xA;&#x9;&#x9;FROM  [&quot;+ context.intermediateDB + &quot;].[dbo].VW_import_userdoc_reprs T JOIN [&quot;+ context.intermediateDB + &quot;].[dbo].VW_import_userdoc U ON U.userdoc_seq  = T.userdoc_seq&#xD;&#xA;&#x9;&#x9;&#x9; AND&#x9;U.userdoc_series  = T.userdoc_series&#xD;&#xA;&#x9;&#x9;&#x9; AND&#x9;U.userdoc_nbr  = T.userdoc_nbr  &#xD;&#xA;&#x9;&#x9;WHERE&#x9; ind_import  = 0&#xD;&#xA;&#x9;&#x9; AND&#x9;T.LEGAL_ID_TYPE  is null&#xD;&#xA;&#x9;&#x9; AND&#x9;T.LEGAL_ID_NBR  is not null&#xD;&#xA;&#x9;&#x9;&#xD;&#xA;&#x9;&#x9;/* If INDIVIDUAL_ID_TYPE is not null and INDIVIDUAL_ID_NBR is null, message ?Missing representative individual id number? */&#xD;&#xA;&#x9;&#x9;INSERT INTO  [&quot;+ context.intermediateDB + &quot;].[dbo].VW_IMPORT_USERDOC_RESULT   &#xD;&#xA;&#x9;&#x9;&#x9;&#x9;( userdoc_seq , &#xD;&#xA;&#x9;&#x9;&#x9;&#x9;userdoc_series , &#xD;&#xA;&#x9;&#x9;&#x9;&#x9;userdoc_nbr , &#xD;&#xA;&#x9;&#x9;&#x9;&#x9;ind_import , &#xD;&#xA;&#x9;&#x9;&#x9;&#x9;msg_import )  &#xD;&#xA;&#x9;&#x9;SELECT&#xD;&#xA;&#x9;&#x9;&#x9;&#x9; T.userdoc_seq,&#xD;&#xA;&#x9;&#x9;&#x9;&#x9; T.userdoc_series,&#xD;&#xA;&#x9;&#x9;&#x9;&#x9; T.userdoc_nbr,&#xD;&#xA;&#x9;&#x9;&#x9;&#x9; 2,&#xD;&#xA;&#x9;&#x9;&#x9;&#x9; 'Missing representative individual id number'&#xD;&#xA;&#x9;&#x9;FROM  [&quot;+ context.intermediateDB + &quot;].[dbo].VW_import_userdoc_reprs T JOIN [&quot;+ context.intermediateDB + &quot;].[dbo].VW_import_userdoc U ON U.userdoc_seq  = T.userdoc_seq&#xD;&#xA;&#x9;&#x9;&#x9; AND&#x9;U.userdoc_series  = T.userdoc_series&#xD;&#xA;&#x9;&#x9;&#x9; AND&#x9;U.userdoc_nbr  = T.userdoc_nbr  &#xD;&#xA;&#x9;&#x9;WHERE&#x9; ind_import  = 0&#xD;&#xA;&#x9;&#x9; AND&#x9;T.INDIVIDUAL_ID_TYPE  is not null&#xD;&#xA;&#x9;&#x9; AND&#x9;T.INDIVIDUAL_ID_NBR  is null&#xD;&#xA;&#x9;&#x9;&#xD;&#xA;&#x9;&#x9;/* If INDIVIDUAL_ID_TYPE is null and INDIVIDUAL_ID_NBR is not null, message ?Missing representative individual id type? */&#xD;&#xA;&#x9;&#x9;INSERT INTO  [&quot;+ context.intermediateDB + &quot;].[dbo].VW_IMPORT_USERDOC_RESULT   &#xD;&#xA;&#x9;&#x9;&#x9;&#x9;( userdoc_seq , &#xD;&#xA;&#x9;&#x9;&#x9;&#x9;userdoc_series , &#xD;&#xA;&#x9;&#x9;&#x9;&#x9;userdoc_nbr , &#xD;&#xA;&#x9;&#x9;&#x9;&#x9;ind_import , &#xD;&#xA;&#x9;&#x9;&#x9;&#x9;msg_import )  &#xD;&#xA;&#x9;&#x9;SELECT&#xD;&#xA;&#x9;&#x9;&#x9;&#x9; T.userdoc_seq,&#xD;&#xA;&#x9;&#x9;&#x9;&#x9; T.userdoc_series,&#xD;&#xA;&#x9;&#x9;&#x9;&#x9; T.userdoc_nbr,&#xD;&#xA;&#x9;&#x9;&#x9;&#x9; 2,&#xD;&#xA;&#x9;&#x9;&#x9;&#x9; 'Missing representative individual id type'&#xD;&#xA;&#x9;&#x9;FROM  [&quot;+ context.intermediateDB + &quot;].[dbo].VW_import_userdoc_reprs T JOIN [&quot;+ context.intermediateDB + &quot;].[dbo].VW_import_userdoc U ON U.userdoc_seq  = T.userdoc_seq&#xD;&#xA;&#x9;&#x9;&#x9; AND&#x9;U.userdoc_series  = T.userdoc_series&#xD;&#xA;&#x9;&#x9;&#x9; AND&#x9;U.userdoc_nbr  = T.userdoc_nbr  &#xD;&#xA;&#x9;&#x9;WHERE&#x9; ind_import  = 0&#xD;&#xA;&#x9;&#x9; AND&#x9;T.INDIVIDUAL_ID_TYPE  is null&#xD;&#xA;&#x9;&#x9; AND&#x9;T.INDIVIDUAL_ID_NBR  is not null&#xD;&#xA;&#x9;&#x9;&#xD;&#xA;&#x9;&#x9;/* RESIDENCE_COUNTRY_CODE: if not exists in CF_GEO_COUNTRY, message ?Invalid representative residence country code? */&#xD;&#xA;&#x9;&#x9;INSERT INTO  [&quot;+ context.intermediateDB + &quot;].[dbo].VW_IMPORT_USERDOC_RESULT   &#xD;&#xA;&#x9;&#x9;&#x9;&#x9;( userdoc_seq , &#xD;&#xA;&#x9;&#x9;&#x9;&#x9;userdoc_series , &#xD;&#xA;&#x9;&#x9;&#x9;&#x9;userdoc_nbr , &#xD;&#xA;&#x9;&#x9;&#x9;&#x9;ind_import , &#xD;&#xA;&#x9;&#x9;&#x9;&#x9;msg_import )  &#xD;&#xA;&#x9;&#x9;SELECT&#xD;&#xA;&#x9;&#x9;&#x9;&#x9; T.userdoc_seq,&#xD;&#xA;&#x9;&#x9;&#x9;&#x9; T.userdoc_series,&#xD;&#xA;&#x9;&#x9;&#x9;&#x9; T.userdoc_nbr,&#xD;&#xA;&#x9;&#x9;&#x9;&#x9; 2,&#xD;&#xA;&#x9;&#x9;&#x9;&#x9; 'Invalid representative residence country code'&#xD;&#xA;&#x9;&#x9;FROM  [&quot;+ context.intermediateDB + &quot;].[dbo].VW_import_userdoc_reprs T JOIN [&quot;+ context.intermediateDB + &quot;].[dbo].VW_import_userdoc U ON U.userdoc_seq  = T.userdoc_seq&#xD;&#xA;&#x9;&#x9;&#x9; AND&#x9;U.userdoc_series  = T.userdoc_series&#xD;&#xA;&#x9;&#x9;&#x9; AND&#x9;U.userdoc_nbr  = T.userdoc_nbr  &#xD;&#xA;&#x9;&#x9;WHERE&#x9; ind_import  = 0&#xD;&#xA;&#x9;&#x9; AND&#x9;T.RESIDENCE_COUNTRY_CODE COLLATE database_default not in&#xD;&#xA;&#x9;&#x9;&#x9;(&#xD;&#xA;&#x9;&#x9; &#x9;SELECT COUNTRY_CODE&#xD;&#xA;&#x9;&#x9;&#x9;FROM  cf_geo_country &#xD;&#xA;&#x9;&#x9;&#x9;)&#xD;&#xA;&#x9;&#x9;&#xD;&#xA;&#x9;&#x9;/* STATE_CODE: if not null and not exists RESIDENCE_COUNTRY_CODE / STATE_CODE in CF_GEO_STATE, &#xD;&#xA;&#x9;&#x9;       message ?Invalid representative residence state code? */&#xD;&#xA;&#x9;&#x9;INSERT INTO  [&quot;+ context.intermediateDB + &quot;].[dbo].VW_IMPORT_USERDOC_RESULT   &#xD;&#xA;&#x9;&#x9;&#x9;&#x9;( userdoc_seq , &#xD;&#xA;&#x9;&#x9;&#x9;&#x9;userdoc_series , &#xD;&#xA;&#x9;&#x9;&#x9;&#x9;userdoc_nbr , &#xD;&#xA;&#x9;&#x9;&#x9;&#x9;ind_import , &#xD;&#xA;&#x9;&#x9;&#x9;&#x9;msg_import )  &#xD;&#xA;&#x9;&#x9;SELECT&#xD;&#xA;&#x9;&#x9;&#x9;&#x9; T.userdoc_seq,&#xD;&#xA;&#x9;&#x9;&#x9;&#x9; T.userdoc_series,&#xD;&#xA;&#x9;&#x9;&#x9;&#x9; T.userdoc_nbr,&#xD;&#xA;&#x9;&#x9;&#x9;&#x9; 2,&#xD;&#xA;&#x9;&#x9;&#x9;&#x9; 'Invalid representative residence state code'&#xD;&#xA;&#x9;&#x9;FROM  [&quot;+ context.intermediateDB + &quot;].[dbo].VW_import_userdoc_reprs T JOIN [&quot;+ context.intermediateDB + &quot;].[dbo].VW_import_userdoc U ON U.userdoc_seq  = T.userdoc_seq&#xD;&#xA;&#x9;&#x9;&#x9; AND&#x9;U.userdoc_series  = T.userdoc_series&#xD;&#xA;&#x9;&#x9;&#x9; AND&#x9;U.userdoc_nbr  = T.userdoc_nbr  &#xD;&#xA;&#x9;&#x9;WHERE&#x9; ind_import  = 0&#xD;&#xA;&#x9;&#x9; AND&#x9;T.STATE_CODE  is not null&#xD;&#xA;&#x9;&#x9; AND&#x9; NOT EXISTS&#xD;&#xA;&#x9;&#x9;&#x9;(&#xD;&#xA;&#x9;&#x9; &#x9;SELECT&#xD;&#xA;&#x9;&#x9;&#x9;&#x9;&#x9; cf_geo_state.COUNTRY_CODE,&#xD;&#xA;&#x9;&#x9;&#x9;&#x9;&#x9; cf_geo_state.STATE_CODE&#xD;&#xA;&#x9;&#x9;&#x9;FROM  cf_geo_state &#xD;&#xA;&#x9;&#x9;&#x9;WHERE&#x9; cf_geo_state.COUNTRY_CODE  = T.RESIDENCE_COUNTRY_CODE COLLATE database_default&#xD;&#xA;&#x9;&#x9;&#x9; AND&#x9;cf_geo_state.STATE_CODE  = T.STATE_CODE COLLATE database_default&#xD;&#xA;&#x9;&#x9;&#x9;)&#xD;&#xA;&#x9;&#x9;&#xD;&#xA;&#x9;&#x9;/* If STATE_CODE Is null and exist any CF_GEO_STATE with the RESIDENCE_COUNTRY_CODE, &#xD;&#xA;&#x9;&#x9;       message ?A state code is required for the specified representative residence country? */&#xD;&#xA;&#x9;&#x9;INSERT INTO  [&quot;+ context.intermediateDB + &quot;].[dbo].VW_IMPORT_USERDOC_RESULT   &#xD;&#xA;&#x9;&#x9;&#x9;&#x9;( userdoc_seq , &#xD;&#xA;&#x9;&#x9;&#x9;&#x9;userdoc_series , &#xD;&#xA;&#x9;&#x9;&#x9;&#x9;userdoc_nbr , &#xD;&#xA;&#x9;&#x9;&#x9;&#x9;ind_import , &#xD;&#xA;&#x9;&#x9;&#x9;&#x9;msg_import )  &#xD;&#xA;&#x9;&#x9;SELECT&#xD;&#xA;&#x9;&#x9;&#x9;&#x9; T.userdoc_seq,&#xD;&#xA;&#x9;&#x9;&#x9;&#x9; T.userdoc_series,&#xD;&#xA;&#x9;&#x9;&#x9;&#x9; T.userdoc_nbr,&#xD;&#xA;&#x9;&#x9;&#x9;&#x9; 2,&#xD;&#xA;&#x9;&#x9;&#x9;&#x9; 'A state code is required for the specified representative residence country'&#xD;&#xA;&#x9;&#x9;FROM  [&quot;+ context.intermediateDB + &quot;].[dbo].VW_import_userdoc_reprs T JOIN [&quot;+ context.intermediateDB + &quot;].[dbo].VW_import_userdoc U ON U.userdoc_seq  = T.userdoc_seq&#xD;&#xA;&#x9;&#x9;&#x9; AND&#x9;U.userdoc_series  = T.userdoc_series&#xD;&#xA;&#x9;&#x9;&#x9; AND&#x9;U.userdoc_nbr  = T.userdoc_nbr  &#xD;&#xA;&#x9;&#x9;WHERE&#x9; ind_import  = 0&#xD;&#xA;&#x9;&#x9; AND&#x9;T.STATE_CODE  is null&#xD;&#xA;&#x9;&#x9; AND&#x9;T.RESIDENCE_COUNTRY_CODE COLLATE database_default in&#xD;&#xA;&#x9;&#x9;&#x9;(&#xD;&#xA;&#x9;&#x9; &#x9;SELECT country_code&#xD;&#xA;&#x9;&#x9;&#x9;FROM  cf_geo_state S &#xD;&#xA;&#x9;&#x9;&#x9;)&#xD;&#xA;&#xD;&#xA;&#xD;&#xA;&#xD;&#xA;&#x9;&#x9;/* CITY_CODE: if not null and not exists RESIDENCE_COUNTRY_CODE / STATE_CODE/CITY_CODE in CF_GEO_CITY, &#xD;&#xA;&#x9;&#x9;       message ?Invalid representative residence state code? */&#xD;&#xA;&#x9;&#x9;INSERT INTO  [&quot;+ context.intermediateDB + &quot;].[dbo].VW_IMPORT_USERDOC_RESULT   &#xD;&#xA;&#x9;&#x9;&#x9;&#x9;( userdoc_seq , &#xD;&#xA;&#x9;&#x9;&#x9;&#x9;userdoc_series , &#xD;&#xA;&#x9;&#x9;&#x9;&#x9;userdoc_nbr , &#xD;&#xA;&#x9;&#x9;&#x9;&#x9;ind_import , &#xD;&#xA;&#x9;&#x9;&#x9;&#x9;msg_import )  &#xD;&#xA;&#x9;&#x9;SELECT&#xD;&#xA;&#x9;&#x9;&#x9;&#x9; T.userdoc_seq,&#xD;&#xA;&#x9;&#x9;&#x9;&#x9; T.userdoc_series,&#xD;&#xA;&#x9;&#x9;&#x9;&#x9; T.userdoc_nbr,&#xD;&#xA;&#x9;&#x9;&#x9;&#x9; 2,&#xD;&#xA;&#x9;&#x9;&#x9;&#x9; 'Invalid representative city code'&#xD;&#xA;&#x9;&#x9;FROM  [&quot;+ context.intermediateDB + &quot;].[dbo].VW_import_userdoc_reprs T JOIN [&quot;+ context.intermediateDB + &quot;].[dbo].VW_import_userdoc U ON U.userdoc_seq  = T.userdoc_seq&#xD;&#xA;&#x9;&#x9;&#x9; AND&#x9;U.userdoc_series  = T.userdoc_series&#xD;&#xA;&#x9;&#x9;&#x9; AND&#x9;U.userdoc_nbr  = T.userdoc_nbr  &#xD;&#xA;&#x9;&#x9;WHERE&#x9; ind_import  = 0&#xD;&#xA;&#x9;&#x9; AND&#x9;T.CITY_CODE  is not null&#xD;&#xA;&#x9;&#x9; AND&#x9; NOT EXISTS&#xD;&#xA;&#x9;&#x9;&#x9;(&#xD;&#xA;&#x9;&#x9; &#x9;SELECT&#xD;&#xA;&#x9;&#x9;&#x9;&#x9;&#x9; cf_geo_city.COUNTRY_CODE,&#xD;&#xA;&#x9;&#x9;&#x9;&#x9;&#x9; cf_geo_city.STATE_CODE&#xD;&#xA;&#x9;&#x9;&#x9;FROM  cf_geo_city &#xD;&#xA;&#x9;&#x9;&#x9;WHERE&#x9; cf_geo_city.COUNTRY_CODE  = T.RESIDENCE_COUNTRY_CODE COLLATE database_default&#xD;&#xA;&#x9;&#x9;&#x9; AND&#x9;cf_geo_city.STATE_CODE  = T.STATE_CODE COLLATE database_default&#xD;&#xA;&#x9;&#x9;&#x9; AND&#x9;cf_geo_city.CITY_CODE  = T.CITY_CODE COLLATE database_default&#xD;&#xA;&#x9;&#x9;&#x9;)&#xD;&#xA;&#xD;&#xA;&#xD;&#xA;&#xD;&#xA;&#x9;&#x9;&#xD;&#xA;&#x9;&#x9;/* If PERSON_GROUP_CODE is not null and not exists in IP_PERSON_GROUP, message ?Invalid representative person group code? */&#xD;&#xA;&#x9;&#x9;INSERT INTO  [&quot;+ context.intermediateDB + &quot;].[dbo].VW_IMPORT_USERDOC_RESULT   &#xD;&#xA;&#x9;&#x9;&#x9;&#x9;( userdoc_seq , &#xD;&#xA;&#x9;&#x9;&#x9;&#x9;userdoc_series , &#xD;&#xA;&#x9;&#x9;&#x9;&#x9;userdoc_nbr , &#xD;&#xA;&#x9;&#x9;&#x9;&#x9;ind_import , &#xD;&#xA;&#x9;&#x9;&#x9;&#x9;msg_import )  &#xD;&#xA;&#x9;&#x9;SELECT&#xD;&#xA;&#x9;&#x9;&#x9;&#x9; T.userdoc_seq,&#xD;&#xA;&#x9;&#x9;&#x9;&#x9; T.userdoc_series,&#xD;&#xA;&#x9;&#x9;&#x9;&#x9; T.userdoc_nbr,&#xD;&#xA;&#x9;&#x9;&#x9;&#x9; 2,&#xD;&#xA;&#x9;&#x9;&#x9;&#x9; 'Invalid representative person group code'&#xD;&#xA;&#x9;&#x9;FROM  [&quot;+ context.intermediateDB + &quot;].[dbo].VW_import_userdoc_reprs T JOIN [&quot;+ context.intermediateDB + &quot;].[dbo].VW_import_userdoc U ON U.userdoc_seq  = T.userdoc_seq&#xD;&#xA;&#x9;&#x9;&#x9; AND&#x9;U.userdoc_series  = T.userdoc_series&#xD;&#xA;&#x9;&#x9;&#x9; AND&#x9;U.userdoc_nbr  = T.userdoc_nbr  &#xD;&#xA;&#x9;&#x9;WHERE&#x9; ind_import  = 0&#xD;&#xA;&#x9;&#x9; AND&#x9;T.PERSON_GROUP_CODE  is not null&#xD;&#xA;&#x9;&#x9; AND&#x9;T.PERSON_GROUP_CODE  COLLATE database_default not in&#xD;&#xA;&#x9;&#x9;&#x9;(&#xD;&#xA;&#x9;&#x9; &#x9;SELECT PERSON_GROUP_NBR&#xD;&#xA;&#x9;&#x9;&#x9;FROM  IP_PERSON_GROUP &#xD;&#xA;&#x9;&#x9;&#x9;)&#xD;&#xA;&#x9;&#x9;&#xD;&#xA;&#x9;&#x9;/* 4.1.5 [&quot;+ context.intermediateDB + &quot;].[dbo].VW_IMPORT_USERDOC_PAYMENTS validations */&#xD;&#xA;&#x9;&#x9;/* RECEIPT_TYPE: if not exists in CF_RECEIPT_TYPE, message ?Invalid receipt type? */&#xD;&#xA;&#x9;&#x9;INSERT INTO  [&quot;+ context.intermediateDB + &quot;].[dbo].VW_IMPORT_USERDOC_RESULT   &#xD;&#xA;&#x9;&#x9;&#x9;&#x9;( userdoc_seq , &#xD;&#xA;&#x9;&#x9;&#x9;&#x9;userdoc_series , &#xD;&#xA;&#x9;&#x9;&#x9;&#x9;userdoc_nbr , &#xD;&#xA;&#x9;&#x9;&#x9;&#x9;ind_import , &#xD;&#xA;&#x9;&#x9;&#x9;&#x9;msg_import )  &#xD;&#xA;&#x9;&#x9;SELECT&#xD;&#xA;&#x9;&#x9;&#x9;&#x9; T.userdoc_seq,&#xD;&#xA;&#x9;&#x9;&#x9;&#x9; T.userdoc_series,&#xD;&#xA;&#x9;&#x9;&#x9;&#x9; T.userdoc_nbr,&#xD;&#xA;&#x9;&#x9;&#x9;&#x9; 2,&#xD;&#xA;&#x9;&#x9;&#x9;&#x9; 'Invalid receipt type'&#xD;&#xA;&#x9;&#x9;FROM  [&quot;+ context.intermediateDB + &quot;].[dbo].VW_import_userdoc_payments T JOIN [&quot;+ context.intermediateDB + &quot;].[dbo].VW_import_userdoc U ON U.userdoc_seq  = T.userdoc_seq&#xD;&#xA;&#x9;&#x9;&#x9; AND&#x9;U.userdoc_series  = T.userdoc_series&#xD;&#xA;&#x9;&#x9;&#x9; AND&#x9;U.userdoc_nbr  = T.userdoc_nbr  &#xD;&#xA;&#x9;&#x9;WHERE&#x9; ind_import  = 0&#xD;&#xA;&#x9;&#x9; AND&#x9;RECEIPT_TYPE COLLATE database_default not in&#xD;&#xA;&#x9;&#x9;&#x9;(&#xD;&#xA;&#x9;&#x9; &#x9;SELECT RECEIPT_TYP&#xD;&#xA;&#x9;&#x9;&#x9;FROM  CF_RECEIPT_TYPE &#xD;&#xA;&#x9;&#x9;&#x9;)&#xD;&#xA;&#x9;&#x9;&#xD;&#xA;&#x9;&#x9;/* CURRENCY_TYPE: if not exists in CF_CURRENCY_TYPE, message ?Invalid currency type? */&#xD;&#xA;&#x9;&#x9;INSERT INTO  [&quot;+ context.intermediateDB + &quot;].[dbo].VW_IMPORT_USERDOC_RESULT   &#xD;&#xA;&#x9;&#x9;&#x9;&#x9;( userdoc_seq , &#xD;&#xA;&#x9;&#x9;&#x9;&#x9;userdoc_series , &#xD;&#xA;&#x9;&#x9;&#x9;&#x9;userdoc_nbr , &#xD;&#xA;&#x9;&#x9;&#x9;&#x9;ind_import , &#xD;&#xA;&#x9;&#x9;&#x9;&#x9;msg_import )  &#xD;&#xA;&#x9;&#x9;SELECT&#xD;&#xA;&#x9;&#x9;&#x9;&#x9; T.userdoc_seq,&#xD;&#xA;&#x9;&#x9;&#x9;&#x9; T.userdoc_series,&#xD;&#xA;&#x9;&#x9;&#x9;&#x9; T.userdoc_nbr,&#xD;&#xA;&#x9;&#x9;&#x9;&#x9; 2,&#xD;&#xA;&#x9;&#x9;&#x9;&#x9; 'Invalid currency type'&#xD;&#xA;&#x9;&#x9;FROM  [&quot;+ context.intermediateDB + &quot;].[dbo].VW_import_userdoc_payments T JOIN [&quot;+ context.intermediateDB + &quot;].[dbo].VW_import_userdoc U ON U.userdoc_seq  = T.userdoc_seq&#xD;&#xA;&#x9;&#x9;&#x9; AND&#x9;U.userdoc_series  = T.userdoc_series&#xD;&#xA;&#x9;&#x9;&#x9; AND&#x9;U.userdoc_nbr  = T.userdoc_nbr  &#xD;&#xA;&#x9;&#x9;WHERE&#x9; ind_import  = 0&#xD;&#xA;&#x9;&#x9; AND&#x9;CURRENCY_TYPE COLLATE database_default not in&#xD;&#xA;&#x9;&#x9;&#x9;(&#xD;&#xA;&#x9;&#x9; &#x9;SELECT CURRENCY_TYP&#xD;&#xA;&#x9;&#x9;&#x9;FROM  CF_CURRENCY_TYPE &#xD;&#xA;&#x9;&#x9;&#x9;)&#xD;&#xA;&#x9;&#x9;&#xD;&#xA;&#x9;&#x9;/* 4.1.6 [&quot;+ context.intermediateDB + &quot;].[dbo].VW_IMPORT_USERDOC_ACTIONS validations */&#xD;&#xA;&#x9;&#x9;/* If CF_USERDOC_TYPE.GENERATE_PROC_TYP is null, message ?The user document type is not configured so as to generate a process? */&#xD;&#xA;&#x9;&#x9;&#xD;&#xA;&#x9;&#x9;INSERT INTO  [&quot;+ context.intermediateDB + &quot;].[dbo].VW_IMPORT_USERDOC_RESULT   &#xD;&#xA;&#x9;&#x9;&#x9;&#x9;( userdoc_seq , &#xD;&#xA;&#x9;&#x9;&#x9;&#x9;userdoc_series , &#xD;&#xA;&#x9;&#x9;&#x9;&#x9;userdoc_nbr , &#xD;&#xA;&#x9;&#x9;&#x9;&#x9;ind_import , &#xD;&#xA;&#x9;&#x9;&#x9;&#x9;msg_import )  &#xD;&#xA;&#x9;&#x9;SELECT&#xD;&#xA;&#x9;&#x9;&#x9;&#x9; T.userdoc_seq,&#xD;&#xA;&#x9;&#x9;&#x9;&#x9; T.userdoc_series,&#xD;&#xA;&#x9;&#x9;&#x9;&#x9; T.userdoc_nbr,&#xD;&#xA;&#x9;&#x9;&#x9;&#x9; 2,&#xD;&#xA;&#x9;&#x9;&#x9;&#x9; 'Duplicate action date and type'&#xD;&#xA;&#x9;&#x9;FROM  [&quot;+ context.intermediateDB + &quot;].[dbo].VW_import_userdoc_actions T &#xD;&#xA;&#x9;&#x9;GROUP&#x9;BY userdoc_seq,  userdoc_series, userdoc_nbr, action_date, action_type&#xD;&#xA;&#x9;&#x9;HAVING&#x9;COUNT(*) > 1&#xD;&#xA;&#x9;&#x9;&#xD;&#xA;&#x9;&#x9;&#xD;&#xA;&#x9;&#x9;&#xD;&#xA;&#x9;&#x9;&#xD;&#xA;&#x9;&#x9;&#xD;&#xA;&#x9;&#x9;INSERT INTO  [&quot;+ context.intermediateDB + &quot;].[dbo].VW_IMPORT_USERDOC_RESULT   &#xD;&#xA;&#x9;&#x9;&#x9;&#x9;( userdoc_seq , &#xD;&#xA;&#x9;&#x9;&#x9;&#x9;userdoc_series , &#xD;&#xA;&#x9;&#x9;&#x9;&#x9;userdoc_nbr , &#xD;&#xA;&#x9;&#x9;&#x9;&#x9;ind_import , &#xD;&#xA;&#x9;&#x9;&#x9;&#x9;msg_import )  &#xD;&#xA;&#x9;&#x9;SELECT&#xD;&#xA;&#x9;&#x9;&#x9;&#x9; T.userdoc_seq,&#xD;&#xA;&#x9;&#x9;&#x9;&#x9; T.userdoc_series,&#xD;&#xA;&#x9;&#x9;&#x9;&#x9; T.userdoc_nbr,&#xD;&#xA;&#x9;&#x9;&#x9;&#x9; 2,&#xD;&#xA;&#x9;&#x9;&#x9;&#x9; 'The application type is not configured so as to generate a process'&#xD;&#xA;&#x9;&#x9;FROM  [&quot;+ context.intermediateDB + &quot;].[dbo].VW_import_userdoc_actions T JOIN [&quot;+ context.intermediateDB + &quot;].[dbo].VW_import_userdoc U ON U.userdoc_seq  = T.userdoc_seq&#xD;&#xA;&#x9;&#x9;&#x9; AND&#x9;U.userdoc_series  = T.userdoc_series&#xD;&#xA;&#x9;&#x9;&#x9; AND&#x9;U.userdoc_nbr  = T.userdoc_nbr  JOIN cf_userdoc_type UT ON U.userdoc_type  = UT.userdoc_typ  COLLATE database_default&#xD;&#xA;&#x9;&#x9;WHERE&#x9; GENERATE_PROC_TYP  is null&#xD;&#xA;&#x9;&#x9;&#xD;&#xA;&#x9;&#x9;/* If PROCESS_FILE_SEQ / PROCESS_FILE_TYPE / PROCESS_FILE_SERIES / PROCESS_FILE_NBR is not null and &#xD;&#xA;&#x9;&#x9;       the CF_PROCESS_TYPE identified by CF_USERDOC_TYPE.GENERATE_PROC_TYP has column &#xD;&#xA;&#x9;&#x9;       RELATED_TO_WCODE &lt;> 2 (related to user doc / file), &#xD;&#xA;&#x9;&#x9;       message ?The file identifying one of the processes for the user document, is only applicable if the type of the process to be generated for the user doc is related both to a user doc and a file? */&#xD;&#xA;&#x9;&#x9;INSERT INTO  [&quot;+ context.intermediateDB + &quot;].[dbo].VW_IMPORT_USERDOC_RESULT   &#xD;&#xA;&#x9;&#x9;&#x9;&#x9;( userdoc_seq , &#xD;&#xA;&#x9;&#x9;&#x9;&#x9;userdoc_series , &#xD;&#xA;&#x9;&#x9;&#x9;&#x9;userdoc_nbr , &#xD;&#xA;&#x9;&#x9;&#x9;&#x9;ind_import , &#xD;&#xA;&#x9;&#x9;&#x9;&#x9;msg_import )  &#xD;&#xA;&#x9;&#x9;SELECT&#xD;&#xA;&#x9;&#x9;&#x9;&#x9; T.userdoc_seq,&#xD;&#xA;&#x9;&#x9;&#x9;&#x9; T.userdoc_series,&#xD;&#xA;&#x9;&#x9;&#x9;&#x9; T.userdoc_nbr,&#xD;&#xA;&#x9;&#x9;&#x9;&#x9; 2,&#xD;&#xA;&#x9;&#x9;&#x9;&#x9; 'The file identifying one of the processes for the user document, is only applicable if the type of the process to be generated for the user doc is related both to a user doc and a file'&#xD;&#xA;&#x9;&#x9;FROM  [&quot;+ context.intermediateDB + &quot;].[dbo].VW_import_userdoc_actions T &#xD;&#xA;&#x9;&#x9; JOIN [&quot;+ context.intermediateDB + &quot;].[dbo].VW_import_userdoc U ON &#xD;&#xA;&#x9;&#x9;&#x9;&#x9;U.userdoc_seq  = T.userdoc_seq COLLATE database_default&#xD;&#xA;&#x9;&#x9;&#x9; AND&#x9;U.userdoc_series  = T.userdoc_series&#xD;&#xA;&#x9;&#x9;&#x9; AND&#x9;U.userdoc_nbr  = T.userdoc_nbr  &#xD;&#xA;&#x9;&#x9;&#x9; JOIN cf_userdoc_type UT ON U.userdoc_type  = UT.userdoc_typ  COLLATE database_default&#xD;&#xA;&#x9;&#x9; JOIN cf_process_type PT ON PT.proc_typ  = UT.generate_proc_typ  COLLATE database_default&#xD;&#xA;&#x9;&#x9;WHERE&#x9; (PROCESS_FILE_SEQ  is not null&#xD;&#xA;&#x9;&#x9; OR&#x9;PROCESS_FILE_TYPE  is not null&#xD;&#xA;&#x9;&#x9; OR&#x9;PROCESS_FILE_SERIES  is not null&#xD;&#xA;&#x9;&#x9; OR&#x9;PROCESS_FILE_NBR  is not null)&#xD;&#xA;&#x9;&#x9; AND&#x9;RELATED_TO_WCODE  &lt;> 2&#xD;&#xA;&#x9;&#x9;&#xD;&#xA;&#x9;&#x9;/* If PROCESS_FILE_SEQ / PROCESS_FILE_TYPE / PROCESS_FILE_SERIES / PROCESS_FILE_NBR is not null and &#xD;&#xA;&#x9;&#x9;       not exists in [&quot;+ context.intermediateDB + &quot;].[dbo].VW_IMPORT_USERDOC_FILES, &#xD;&#xA;&#x9;&#x9;       message ?The file identifying one of the processes for the user document, is not related to the user document? */&#xD;&#xA;&#x9;&#x9;INSERT INTO  [&quot;+ context.intermediateDB + &quot;].[dbo].VW_IMPORT_USERDOC_RESULT   &#xD;&#xA;&#x9;&#x9;&#x9;&#x9;( userdoc_seq , &#xD;&#xA;&#x9;&#x9;&#x9;&#x9;userdoc_series , &#xD;&#xA;&#x9;&#x9;&#x9;&#x9;userdoc_nbr , &#xD;&#xA;&#x9;&#x9;&#x9;&#x9;ind_import , &#xD;&#xA;&#x9;&#x9;&#x9;&#x9;msg_import )  &#xD;&#xA;&#x9;&#x9;SELECT&#xD;&#xA;&#x9;&#x9;&#x9;&#x9; T.userdoc_seq,&#xD;&#xA;&#x9;&#x9;&#x9;&#x9; T.userdoc_series,&#xD;&#xA;&#x9;&#x9;&#x9;&#x9; T.userdoc_nbr,&#xD;&#xA;&#x9;&#x9;&#x9;&#x9; 2,&#xD;&#xA;&#x9;&#x9;&#x9;&#x9; 'The file identifying one of the processes for the user document, is not related to the user document'&#xD;&#xA;&#x9;&#x9;FROM  [&quot;+ context.intermediateDB + &quot;].[dbo].VW_import_userdoc_actions T JOIN [&quot;+ context.intermediateDB + &quot;].[dbo].VW_import_userdoc U ON U.userdoc_seq  = T.userdoc_seq&#xD;&#xA;&#x9;&#x9;&#x9; AND&#x9;U.userdoc_series  = T.userdoc_series&#xD;&#xA;&#x9;&#x9;&#x9; AND&#x9;U.userdoc_nbr  = T.userdoc_nbr  &#xD;&#xA;&#x9;&#x9;WHERE&#x9; (PROCESS_FILE_SEQ  is not null&#xD;&#xA;&#x9;&#x9; OR&#x9;PROCESS_FILE_TYPE  is not null&#xD;&#xA;&#x9;&#x9; OR&#x9;PROCESS_FILE_SERIES  is not null&#xD;&#xA;&#x9;&#x9; OR&#x9;PROCESS_FILE_NBR  is not null)&#xD;&#xA;&#x9;&#x9; AND&#x9; NOT EXISTS&#xD;&#xA;&#x9;&#x9;&#x9;(&#xD;&#xA;&#x9;&#x9; &#x9;SELECT&#xD;&#xA;&#x9;&#x9;&#x9;&#x9;&#x9; F.FILE_SEQ,&#xD;&#xA;&#x9;&#x9;&#x9;&#x9;&#x9; F.FILE_TYPE,&#xD;&#xA;&#x9;&#x9;&#x9;&#x9;&#x9; F.FILE_SERIES,&#xD;&#xA;&#x9;&#x9;&#x9;&#x9;&#x9; F.FILE_NBR&#xD;&#xA;&#x9;&#x9;&#x9;FROM  [&quot;+ context.intermediateDB + &quot;].[dbo].VW_import_userdoc_files F &#xD;&#xA;&#x9;&#x9;&#x9;WHERE&#x9; U.userdoc_seq  = F.userdoc_seq&#xD;&#xA;&#x9;&#x9;&#x9; AND&#x9;U.userdoc_series  = T.userdoc_series&#xD;&#xA;&#x9;&#x9;&#x9; AND&#x9;U.userdoc_nbr  = T.userdoc_nbr&#xD;&#xA;&#x9;&#x9;&#x9; AND&#x9;F.FILE_SEQ  = T.PROCESS_FILE_SEQ&#xD;&#xA;&#x9;&#x9;&#x9; AND&#x9;F.FILE_TYPE  = T.PROCESS_FILE_TYPE&#xD;&#xA;&#x9;&#x9;&#x9; AND&#x9;F.FILE_SERIES  = T.PROCESS_FILE_SERIES&#xD;&#xA;&#x9;&#x9;&#x9; AND&#x9;F.FILE_NBR  = T.PROCESS_FILE_NBR&#xD;&#xA;&#x9;&#x9;&#x9;)&#xD;&#xA;&#x9;&#x9;&#xD;&#xA;&#x9;&#x9;/* ACTION_TYPE: if not exists in CF_ACTION_TYPE, message ?Invalid action type? */&#xD;&#xA;&#x9;&#x9;/* Performace note: join with [&quot;+ context.intermediateDB + &quot;].[dbo].VW_IMPORT_USERDOC to select userdocs with IND_IMPORT = 0 */&#xD;&#xA;&#x9;&#x9;INSERT INTO  [&quot;+ context.intermediateDB + &quot;].[dbo].VW_IMPORT_USERDOC_RESULT   &#xD;&#xA;&#x9;&#x9;&#x9;&#x9;( userdoc_seq , &#xD;&#xA;&#x9;&#x9;&#x9;&#x9;userdoc_series , &#xD;&#xA;&#x9;&#x9;&#x9;&#x9;userdoc_nbr , &#xD;&#xA;&#x9;&#x9;&#x9;&#x9;ind_import , &#xD;&#xA;&#x9;&#x9;&#x9;&#x9;msg_import )  &#xD;&#xA;&#x9;&#x9;SELECT&#xD;&#xA;&#x9;&#x9;&#x9;&#x9; T.userdoc_seq,&#xD;&#xA;&#x9;&#x9;&#x9;&#x9; T.userdoc_series,&#xD;&#xA;&#x9;&#x9;&#x9;&#x9; T.userdoc_nbr,&#xD;&#xA;&#x9;&#x9;&#x9;&#x9; 2,&#xD;&#xA;&#x9;&#x9;&#x9;&#x9; 'Invalid action type'&#xD;&#xA;&#x9;&#x9;FROM  [&quot;+ context.intermediateDB + &quot;].[dbo].VW_import_userdoc_actions T &#xD;&#xA;&#x9;&#x9;WHERE&#x9; ACTION_TYPE COLLATE database_default not in&#xD;&#xA;&#x9;&#x9;&#x9;(&#xD;&#xA;&#x9;&#x9; &#x9;SELECT action_typ&#xD;&#xA;&#x9;&#x9;&#x9;FROM  cf_action_type &#xD;&#xA;&#x9;&#x9;&#x9;)&#xD;&#xA;&#x9;&#x9;&#xD;&#xA;&#x9;&#x9;/* SPECIAL_FINAL_STATUS: if not null and ACTION_CATEGORY in A / N, message ?Special final status is only applicable for special actions? */&#xD;&#xA;&#x9;&#x9;INSERT INTO  [&quot;+ context.intermediateDB + &quot;].[dbo].VW_IMPORT_USERDOC_RESULT   &#xD;&#xA;&#x9;&#x9;&#x9;&#x9;( userdoc_seq , &#xD;&#xA;&#x9;&#x9;&#x9;&#x9;userdoc_series , &#xD;&#xA;&#x9;&#x9;&#x9;&#x9;userdoc_nbr , &#xD;&#xA;&#x9;&#x9;&#x9;&#x9;ind_import , &#xD;&#xA;&#x9;&#x9;&#x9;&#x9;msg_import )  &#xD;&#xA;&#x9;&#x9;SELECT&#xD;&#xA;&#x9;&#x9;&#x9;&#x9; T.userdoc_seq,&#xD;&#xA;&#x9;&#x9;&#x9;&#x9; T.userdoc_series,&#xD;&#xA;&#x9;&#x9;&#x9;&#x9; T.userdoc_nbr,&#xD;&#xA;&#x9;&#x9;&#x9;&#x9; 2,&#xD;&#xA;&#x9;&#x9;&#x9;&#x9; 'Special final status is only applicable for special actions'&#xD;&#xA;&#x9;&#x9;FROM  [&quot;+ context.intermediateDB + &quot;].[dbo].VW_import_userdoc_actions T &#xD;&#xA;&#x9;&#x9;WHERE&#x9; SPECIAL_FINAL_STATUS  is not null&#xD;&#xA;&#x9;&#x9; AND&#x9;ACTION_CATEGORY  in ( 'A'  , 'N'  )&#xD;&#xA;&#x9;&#x9;&#xD;&#xA;&#x9;&#x9;/* If ACTION_CATEGORY is S and SPECIAL_FINAL_STATUS is null, message ?Special final status is required? */&#xD;&#xA;&#x9;&#x9;/* Performace note: join with [&quot;+ context.intermediateDB + &quot;].[dbo].VW_IMPORT_USERDOC to select userdocs with IND_IMPORT = 0 */&#xD;&#xA;&#x9;&#x9;INSERT INTO  [&quot;+ context.intermediateDB + &quot;].[dbo].VW_IMPORT_USERDOC_RESULT   &#xD;&#xA;&#x9;&#x9;&#x9;&#x9;( userdoc_seq , &#xD;&#xA;&#x9;&#x9;&#x9;&#x9;userdoc_series , &#xD;&#xA;&#x9;&#x9;&#x9;&#x9;userdoc_nbr , &#xD;&#xA;&#x9;&#x9;&#x9;&#x9;ind_import , &#xD;&#xA;&#x9;&#x9;&#x9;&#x9;msg_import )  &#xD;&#xA;&#x9;&#x9;SELECT&#xD;&#xA;&#x9;&#x9;&#x9;&#x9; T.userdoc_seq,&#xD;&#xA;&#x9;&#x9;&#x9;&#x9; T.userdoc_series,&#xD;&#xA;&#x9;&#x9;&#x9;&#x9; T.userdoc_nbr,&#xD;&#xA;&#x9;&#x9;&#x9;&#x9; 2,&#xD;&#xA;&#x9;&#x9;&#x9;&#x9; 'Special final status is required'&#xD;&#xA;&#x9;&#x9;FROM  [&quot;+ context.intermediateDB + &quot;].[dbo].VW_import_userdoc_actions T &#xD;&#xA;&#x9;&#x9;WHERE&#x9; SPECIAL_FINAL_STATUS  is null&#xD;&#xA;&#x9;&#x9; AND&#x9;ACTION_CATEGORY  = 'S'&#xD;&#xA;&#x9;&#x9;&#xD;&#xA;&#x9;&#x9;/* If SPECIAL_FINAL_STATUS is not null and proc_typ / SPECIAL_FINAL_STATUS not exists in CF_STATUS &#xD;&#xA;&#x9;&#x9;       (where proc_typ is CF_APPLICATION_TYPE.GENERATE_PROC_TYP for the corresponding application type), &#xD;&#xA;&#x9;&#x9;       message ?Special final status is not a valid status in the process type associated to the userdoc type? */&#xD;&#xA;&#x9;&#x9;INSERT INTO  [&quot;+ context.intermediateDB + &quot;].[dbo].VW_IMPORT_USERDOC_RESULT   &#xD;&#xA;&#x9;&#x9;&#x9;&#x9;( userdoc_seq , &#xD;&#xA;&#x9;&#x9;&#x9;&#x9;userdoc_series , &#xD;&#xA;&#x9;&#x9;&#x9;&#x9;userdoc_nbr , &#xD;&#xA;&#x9;&#x9;&#x9;&#x9;ind_import , &#xD;&#xA;&#x9;&#x9;&#x9;&#x9;msg_import )  &#xD;&#xA;&#x9;&#x9;SELECT&#xD;&#xA;&#x9;&#x9;&#x9;&#x9; T.userdoc_seq,&#xD;&#xA;&#x9;&#x9;&#x9;&#x9; T.userdoc_series,&#xD;&#xA;&#x9;&#x9;&#x9;&#x9; T.userdoc_nbr,&#xD;&#xA;&#x9;&#x9;&#x9;&#x9; 2,&#xD;&#xA;&#x9;&#x9;&#x9;&#x9; 'Special final status is not a valid status in the process type associated to the userdoc type'&#xD;&#xA;&#x9;&#x9;FROM  [&quot;+ context.intermediateDB + &quot;].[dbo].VW_import_userdoc_actions T JOIN [&quot;+ context.intermediateDB + &quot;].[dbo].VW_import_userdoc U ON U.userdoc_seq  = T.userdoc_seq&#xD;&#xA;&#x9;&#x9;&#x9; AND&#x9;U.userdoc_series  = T.userdoc_series&#xD;&#xA;&#x9;&#x9;&#x9; AND&#x9;U.userdoc_nbr  = T.userdoc_nbr  JOIN cf_userdoc_type UT ON U.userdoc_type  = UT.userdoc_typ COLLATE database_default &#xD;&#xA;&#x9;&#x9;WHERE&#x9; SPECIAL_FINAL_STATUS  is not null&#xD;&#xA;&#x9;&#x9; AND&#x9; NOT EXISTS&#xD;&#xA;&#x9;&#x9;&#x9;(&#xD;&#xA;&#x9;&#x9; &#x9;SELECT&#x9;*&#xD;&#xA;&#x9;&#x9;&#x9;FROM  cf_status &#xD;&#xA;&#x9;&#x9;&#x9;WHERE&#x9; cf_status.proc_typ  = UT.GENERATE_PROC_TYP&#xD;&#xA;&#x9;&#x9;&#x9; AND&#x9;cf_status.status_code  = T.SPECIAL_FINAL_STATUS COLLATE database_default&#xD;&#xA;&#x9;&#x9;&#x9;)&#xD;&#xA;&#x9;&#x9;&#xD;&#xA;&#x9;&#x9;/* If ACTION_NOTES1 is not null and CF_ACTION_TYPE.NOTES1_PROMPT is null, &#xD;&#xA;&#x9;&#x9;       message ?Current configuration indicates that this action type does not accept an action notes 1? */&#xD;&#xA;&#x9;&#x9;/* Performace note: join with [&quot;+ context.intermediateDB + &quot;].[dbo].VW_IMPORT_USERDOC to select userdocs with IND_IMPORT = 0 */&#xD;&#xA;&#x9;&#x9;/* OJO ignorar por ahora&#xD;&#xA;&#x9;&#x9;INSERT INTO  [&quot;+ context.intermediateDB + &quot;].[dbo].VW_IMPORT_USERDOC_RESULT   &#xD;&#xA;&#x9;&#x9;&#x9;&#x9;( userdoc_seq , &#xD;&#xA;&#x9;&#x9;&#x9;&#x9;userdoc_series , &#xD;&#xA;&#x9;&#x9;&#x9;&#x9;userdoc_nbr , &#xD;&#xA;&#x9;&#x9;&#x9;&#x9;ind_import , &#xD;&#xA;&#x9;&#x9;&#x9;&#x9;msg_import )  &#xD;&#xA;&#x9;&#x9;SELECT&#xD;&#xA;&#x9;&#x9;&#x9;&#x9; T.userdoc_seq,&#xD;&#xA;&#x9;&#x9;&#x9;&#x9; T.userdoc_series,&#xD;&#xA;&#x9;&#x9;&#x9;&#x9; T.userdoc_nbr,&#xD;&#xA;&#x9;&#x9;&#x9;&#x9; 2,&#xD;&#xA;&#x9;&#x9;&#x9;&#x9; 'Current configuration indicates that this action type does not accept an action notes 1'&#xD;&#xA;&#x9;&#x9;FROM  [&quot;+ context.intermediateDB + &quot;].[dbo].VW_import_userdoc_actions T JOIN cf_action_type AT ON T.action_type  = AT.action_typ  &#xD;&#xA;&#x9;&#x9;WHERE&#x9; LEN(ACTION_NOTES1)  > 1&#xD;&#xA;&#x9;&#x9; AND&#x9;NOTES1_PROMPT  is null&#xD;&#xA;&#x9;&#x9;&#xD;&#xA;&#x9;&#x9;/* If ACTION_NOTES2 is not null and CF_ACTION_TYPE.NOTES2_PROMPT is null, &#xD;&#xA;&#x9;&#x9;       message ?Current configuration indicates that this action type does not accept an action notes 2? */&#xD;&#xA;&#x9;&#x9;/* Performace note: join with [&quot;+ context.intermediateDB + &quot;].[dbo].VW_IMPORT_USERDOC to select userdocs with IND_IMPORT = 0 */&#xD;&#xA;&#x9;&#x9;INSERT INTO  [&quot;+ context.intermediateDB + &quot;].[dbo].VW_IMPORT_USERDOC_RESULT   &#xD;&#xA;&#x9;&#x9;&#x9;&#x9;( userdoc_seq , &#xD;&#xA;&#x9;&#x9;&#x9;&#x9;userdoc_series , &#xD;&#xA;&#x9;&#x9;&#x9;&#x9;userdoc_nbr , &#xD;&#xA;&#x9;&#x9;&#x9;&#x9;ind_import , &#xD;&#xA;&#x9;&#x9;&#x9;&#x9;msg_import )  &#xD;&#xA;&#x9;&#x9;SELECT&#xD;&#xA;&#x9;&#x9;&#x9;&#x9; T.userdoc_seq,&#xD;&#xA;&#x9;&#x9;&#x9;&#x9; T.userdoc_series,&#xD;&#xA;&#x9;&#x9;&#x9;&#x9; T.userdoc_nbr,&#xD;&#xA;&#x9;&#x9;&#x9;&#x9; 2,&#xD;&#xA;&#x9;&#x9;&#x9;&#x9; 'Current configuration indicates that this action type does not accept an action notes 2'&#xD;&#xA;&#x9;&#x9;FROM  [&quot;+ context.intermediateDB + &quot;].[dbo].VW_import_userdoc_actions T JOIN cf_action_type AT ON T.action_type  = AT.action_typ  &#xD;&#xA;&#x9;&#x9;WHERE&#x9; LEN(ACTION_NOTES2)  > 1&#xD;&#xA;&#x9;&#x9; AND&#x9;NOTES2_PROMPT  is null&#xD;&#xA;&#x9;&#x9;&#xD;&#xA;&#x9;&#x9;/* If ACTION_NOTES3 is not null and CF_ACTION_TYPE.NOTES3_PROMPT is null, &#xD;&#xA;&#x9;&#x9;       message ?Current configuration indicates that this action type does not accept an action notes 3? */&#xD;&#xA;&#x9;&#x9;/* Performace note: join with [&quot;+ context.intermediateDB + &quot;].[dbo].VW_IMPORT_USERDOC to select userdocs with IND_IMPORT = 0 */&#xD;&#xA;&#x9;&#x9;INSERT INTO  [&quot;+ context.intermediateDB + &quot;].[dbo].VW_IMPORT_USERDOC_RESULT   &#xD;&#xA;&#x9;&#x9;&#x9;&#x9;( userdoc_seq , &#xD;&#xA;&#x9;&#x9;&#x9;&#x9;userdoc_series , &#xD;&#xA;&#x9;&#x9;&#x9;&#x9;userdoc_nbr , &#xD;&#xA;&#x9;&#x9;&#x9;&#x9;ind_import , &#xD;&#xA;&#x9;&#x9;&#x9;&#x9;msg_import )  &#xD;&#xA;&#x9;&#x9;SELECT&#xD;&#xA;&#x9;&#x9;&#x9;&#x9; T.userdoc_seq,&#xD;&#xA;&#x9;&#x9;&#x9;&#x9; T.userdoc_series,&#xD;&#xA;&#x9;&#x9;&#x9;&#x9; T.userdoc_nbr,&#xD;&#xA;&#x9;&#x9;&#x9;&#x9; 2,&#xD;&#xA;&#x9;&#x9;&#x9;&#x9; 'Current configuration indicates that this action type does not accept an action notes 3'&#xD;&#xA;&#x9;&#x9;FROM  [&quot;+ context.intermediateDB + &quot;].[dbo].VW_import_userdoc_actions T JOIN cf_action_type AT ON T.action_type  = AT.action_typ  &#xD;&#xA;&#x9;&#x9;WHERE&#x9; LEN(ACTION_NOTES3)  > 1&#xD;&#xA;&#x9;&#x9; AND&#x9;NOTES3_PROMPT  is null&#xD;&#xA;&#x9;&#x9;&#xD;&#xA;&#x9;&#x9;/* If ACTION_NOTES4 is not null and CF_ACTION_TYPE.NOTES4_PROMPT is null, &#xD;&#xA;&#x9;&#x9;       message ?Current configuration indicates that this action type does not accept an action notes 4? */&#xD;&#xA;&#x9;&#x9;/* Performace note: join with [&quot;+ context.intermediateDB + &quot;].[dbo].VW_IMPORT_USERDOC to select userdocs with IND_IMPORT = 0 */&#xD;&#xA;&#x9;&#x9;INSERT INTO  [&quot;+ context.intermediateDB + &quot;].[dbo].VW_IMPORT_USERDOC_RESULT   &#xD;&#xA;&#x9;&#x9;&#x9;&#x9;( userdoc_seq , &#xD;&#xA;&#x9;&#x9;&#x9;&#x9;userdoc_series , &#xD;&#xA;&#x9;&#x9;&#x9;&#x9;userdoc_nbr , &#xD;&#xA;&#x9;&#x9;&#x9;&#x9;ind_import , &#xD;&#xA;&#x9;&#x9;&#x9;&#x9;msg_import )  &#xD;&#xA;&#x9;&#x9;SELECT&#xD;&#xA;&#x9;&#x9;&#x9;&#x9; T.userdoc_seq,&#xD;&#xA;&#x9;&#x9;&#x9;&#x9; T.userdoc_series,&#xD;&#xA;&#x9;&#x9;&#x9;&#x9; T.userdoc_nbr,&#xD;&#xA;&#x9;&#x9;&#x9;&#x9; 2,&#xD;&#xA;&#x9;&#x9;&#x9;&#x9; 'Current configuration indicates that this action type does not accept an action notes 4'&#xD;&#xA;&#x9;&#x9;FROM  [&quot;+ context.intermediateDB + &quot;].[dbo].VW_import_userdoc_actions T JOIN cf_action_type AT ON T.action_type  = AT.action_typ  &#xD;&#xA;&#x9;&#x9;WHERE&#x9; LEN(ACTION_NOTES4)  > 1&#xD;&#xA;&#x9;&#x9; AND&#x9;NOTES4_PROMPT  is null&#xD;&#xA;&#x9;&#x9;&#xD;&#xA;&#x9;&#x9;/* If ACTION_NOTES5 is not null and CF_ACTION_TYPE.NOTES5_PROMPT is null, &#xD;&#xA;&#x9;&#x9;       message ?Current configuration indicates that this action type does not accept an action notes 5? */&#xD;&#xA;&#x9;&#x9;/* Performace note: join with [&quot;+ context.intermediateDB + &quot;].[dbo].VW_IMPORT_USERDOC to select userdocs with IND_IMPORT = 0 */&#xD;&#xA;&#x9;&#x9;INSERT INTO  [&quot;+ context.intermediateDB + &quot;].[dbo].VW_IMPORT_USERDOC_RESULT   &#xD;&#xA;&#x9;&#x9;&#x9;&#x9;( userdoc_seq , &#xD;&#xA;&#x9;&#x9;&#x9;&#x9;userdoc_series , &#xD;&#xA;&#x9;&#x9;&#x9;&#x9;userdoc_nbr , &#xD;&#xA;&#x9;&#x9;&#x9;&#x9;ind_import , &#xD;&#xA;&#x9;&#x9;&#x9;&#x9;msg_import )  &#xD;&#xA;&#x9;&#x9;SELECT&#xD;&#xA;&#x9;&#x9;&#x9;&#x9; T.userdoc_seq,&#xD;&#xA;&#x9;&#x9;&#x9;&#x9; T.userdoc_series,&#xD;&#xA;&#x9;&#x9;&#x9;&#x9; T.userdoc_nbr,&#xD;&#xA;&#x9;&#x9;&#x9;&#x9; 2,&#xD;&#xA;&#x9;&#x9;&#x9;&#x9; 'Current configuration indicates that this action type does not accept an action notes 5'&#xD;&#xA;&#x9;&#x9;FROM  [&quot;+ context.intermediateDB + &quot;].[dbo].VW_import_userdoc_actions T JOIN cf_action_type AT ON T.action_type  = AT.action_typ  &#xD;&#xA;&#x9;&#x9;WHERE&#x9; LEN(ACTION_NOTES5)  > 1&#xD;&#xA;&#x9;&#x9; AND&#x9;NOTES5_PROMPT  is null&#xD;&#xA;&#x9;&#x9;*/&#xD;&#xA;&#xD;&#xA;&#x9;&#x9;/* ACTION_USER: if not exists in IP_USER, message ?Invalid action user? */&#xD;&#xA;&#x9;&#x9;/* Performace note: join with [&quot;+ context.intermediateDB + &quot;].[dbo].VW_IMPORT_USERDOC to select userdocs with IND_IMPORT = 0 */&#xD;&#xA;&#x9;&#x9;INSERT INTO  [&quot;+ context.intermediateDB + &quot;].[dbo].VW_IMPORT_USERDOC_RESULT   &#xD;&#xA;&#x9;&#x9;&#x9;&#x9;( userdoc_seq , &#xD;&#xA;&#x9;&#x9;&#x9;&#x9;userdoc_series , &#xD;&#xA;&#x9;&#x9;&#x9;&#x9;userdoc_nbr , &#xD;&#xA;&#x9;&#x9;&#x9;&#x9;ind_import , &#xD;&#xA;&#x9;&#x9;&#x9;&#x9;msg_import )  &#xD;&#xA;&#x9;&#x9;SELECT&#xD;&#xA;&#x9;&#x9;&#x9;&#x9; T.userdoc_seq,&#xD;&#xA;&#x9;&#x9;&#x9;&#x9; T.userdoc_series,&#xD;&#xA;&#x9;&#x9;&#x9;&#x9; T.userdoc_nbr,&#xD;&#xA;&#x9;&#x9;&#x9;&#x9; 2,&#xD;&#xA;&#x9;&#x9;&#x9;&#x9; 'Invalid action user'&#xD;&#xA;&#x9;&#x9;FROM  [&quot;+ context.intermediateDB + &quot;].[dbo].VW_import_userdoc_actions T &#xD;&#xA;&#x9;&#x9;WHERE&#x9; (ACTION_USER  is null&#xD;&#xA;&#x9;&#x9; OR&#x9;ACTION_USER  not in&#xD;&#xA;&#x9;&#x9;&#x9;(&#xD;&#xA;&#x9;&#x9; &#x9;SELECT user_id&#xD;&#xA;&#x9;&#x9;&#x9;FROM  ip_user &#xD;&#xA;&#x9;&#x9;&#x9;))&#xD;&#xA;&#x9;&#x9;&#xD;&#xA;&#x9;&#x9;&#x9;-- Move below check into CallToDateValidationPROC --> MarkDateValidationPROC SP&#xD;&#xA;&#x9;&#x9;/* IPAS-375 Added validation for filing date */&#xD;&#xA;&#x9;--&#x9;insert  into [&quot;+ context.intermediateDB + &quot;].[dbo].VW_IMPORT_USERDOC_RESULT (userdoc_seq,userdoc_series, userdoc_nbr, ind_import, msg_import)&#xD;&#xA;&#x9;--&#x9;select  U.userdoc_seq, U.userdoc_series, U.userdoc_nbr, 2, 'Invalid Filing date. Filing date required to be greater than 1700-01-01 and lower than the current date.' &#xD;&#xA;&#x9;--&#x9;from  [&quot;+ context.intermediateDB + &quot;].[dbo].VW_import_userdoc U where filing_date > GETDATE() or CAST(DATEPART(YYYY, filing_date) as NUMERIC) &lt; 1700&#xD;&#xA;&#xD;&#xA;&#x9;&#x9;&#x9;/* IPAS-623 FIX &#xD;&#xA;&#x9;&#x9;&#x9;Call to Mark Date validation &#xD;&#xA;&#x9;&#x9;*/&#xD;&#xA;&#x9;&#x9;&#x9;exec CallToDateValidationPROC 'USERDOC';&#x9;&#x9;&#xD;&#xA;&#x9;&#x9;/* FIX IPAS-623 Ends here*/&#xD;&#xA;&#xD;&#xA;&#x9;&#x9;/* *************** END OF VALIDATIONS *************** */&#xD;&#xA;&#x9;&#x9;/* update error indicator in [&quot;+ context.intermediateDB + &quot;].[dbo].VW_IMPORT_USERDOC */&#xD;&#xA;&#x9;&#x9;UPDATE  U   &#xD;&#xA;&#x9;&#x9;SET&#x9;ind_import = 2 &#xD;&#xA;&#x9;&#x9;FROM  [&quot;+ context.intermediateDB + &quot;].[dbo].VW_IMPORT_USERDOC U &#xD;&#xA;&#x9;&#x9;WHERE    exists&#xD;&#xA;&#x9;&#x9;&#x9;(&#xD;&#xA;&#x9;&#x9; &#x9;SELECT *&#xD;&#xA;&#x9;&#x9;&#x9;FROM  [&quot;+ context.intermediateDB + &quot;].[dbo].VW_IMPORT_USERDOC_RESULT T &#xD;&#xA;&#x9;&#x9;&#x9;WHERE&#x9; U.userdoc_seq  = T.userdoc_seq&#xD;&#xA;&#x9;&#x9;&#x9; AND&#x9;U.userdoc_series  = T.userdoc_series&#xD;&#xA;&#x9;&#x9;&#x9; AND&#x9;U.userdoc_nbr  = T.userdoc_nbr&#xD;&#xA;&#x9;&#x9;&#x9;) &#xD;&#xA;&#x9;&#x9;&#xD;&#xA;&#x9;&#x9;/* set import indicator to validated, for those cases with no error messages */&#xD;&#xA;&#x9;&#x9;UPDATE  [&quot;+ context.intermediateDB + &quot;].[dbo].VW_IMPORT_USERDOC   &#xD;&#xA;&#x9;&#x9;SET&#x9;ind_import = 9 &#xD;&#xA;&#x9;&#x9;WHERE  ind_import  = 0 &#xD;&#xA;&#x9;&#x9;&#xD;&#xA;&#xD;&#xA;&#x9;&#x9;SET NOCOUNT OFF&#xD;&#xA;&#xD;&#xA;&#x9;END&quot;"/>
    <elementParameter field="LABEL" name="NOTE" value="This option only applies when deploying and running in the Talend Runtime" show="false"/>
    <elementParameter field="CHECK" name="SPECIFY_DATASOURCE_ALIAS" value="false" show="false"/>
    <elementParameter field="TEXT" name="DATASOURCE_ALIAS" value="&quot;&quot;" show="false"/>
    <elementParameter field="CHECK" name="DIE_ON_ERROR" value="false"/>
    <elementParameter field="TEXT" name="PROPERTIES" value="&quot;&quot;" show="false"/>
    <elementParameter field="CHECK" name="ACTIVE_DIR_AUTH" value="false" show="false"/>
    <elementParameter field="CHECK" name="PROPAGATE_RECORD_SET" value="false"/>
    <elementParameter field="COLUMN_LIST" name="RECORD_SET_COLUMN" value="" show="false"/>
    <elementParameter field="CHECK" name="USE_PREPAREDSTATEMENT" value="false"/>
    <elementParameter field="TABLE" name="SET_PREPAREDSTATEMENT_PARAMETERS" show="false"/>
    <elementParameter field="ENCODING_TYPE" name="ENCODING" value="&quot;ISO-8859-15&quot;" show="false"/>
    <elementParameter field="TECHNICAL" name="ENCODING:ENCODING_TYPE" value="ISO-8859-15"/>
    <elementParameter field="TEXT" name="COMMIT_EVERY" value="10000" show="false"/>
    <elementParameter field="TEXT" name="CONNECTION_FORMAT" value="row"/>
    <metadata connector="FLOW" name="tMSSqlRow_18"/>
    <metadata connector="REJECT" name="REJECT">
      <column defaultValue="" key="false" length="255" name="errorCode" nullable="true" precision="0" sourceType="" type="id_String" originalLength="-1" usefulColumn="true"/>
      <column defaultValue="" key="false" length="255" name="errorMessage" nullable="true" precision="0" sourceType="" type="id_String" originalLength="-1" usefulColumn="true"/>
    </metadata>
  </node>
  <node componentName="tMSSqlRow" componentVersion="0.102" offsetLabelX="0" offsetLabelY="0" posX="-192" posY="2432">
    <elementParameter field="TEXT" name="UNIQUE_NAME" value="tMSSqlRow_19" show="false"/>
    <elementParameter field="CHECK" name="USE_EXISTING_CONNECTION" value="true"/>
    <elementParameter field="COMPONENT_LIST" name="CONNECTION" value="tMSSqlConnection_4"/>
    <elementParameter field="CLOSED_LIST" name="DRIVER" value="JTDS" show="false"/>
    <elementParameter field="TEXT" name="HOST" value="&quot;&quot;" show="false"/>
    <elementParameter field="TEXT" name="PORT" value="&quot;1433&quot;" show="false"/>
    <elementParameter field="TEXT" name="DB_SCHEMA" value="&quot;&quot;" show="false"/>
    <elementParameter field="TEXT" name="DBNAME" value="&quot;&quot;" show="false"/>
    <elementParameter field="TEXT" name="TYPE" value="MSSQL" show="false"/>
    <elementParameter field="TEXT" name="USER" value="&quot;&quot;" show="false"/>
    <elementParameter field="PASSWORD" name="PASS" value="enc:system.encryption.key.v1:o5GCxNmUkT9WpQaOpi1qnLgRYCeGRK1IELnJI9Sc" show="false"/>
    <elementParameter field="DBTABLE" name="TABLE" value="&quot;&quot;"/>
    <elementParameter field="CHECK" name="IDENTITY_INSERT" value="false"/>
    <elementParameter field="QUERYSTORE_TYPE" name="QUERYSTORE" value="&quot;&quot;"/>
    <elementParameter field="TECHNICAL" name="QUERYSTORE:REPOSITORY_QUERYSTORE_TYPE" value="" show="false"/>
    <elementParameter field="TECHNICAL" name="QUERYSTORE:QUERYSTORE_TYPE" value="BUILT_IN"/>
    <elementParameter field="MEMO_SQL" name="QUERY" value="&quot;IF OBJECT_ID('CallToDateValidationPROC', 'P') IS NOT NULL&#xD;&#xA;  DROP PROCEDURE CallToDateValidationPROC&quot;"/>
    <elementParameter field="LABEL" name="NOTE" value="This option only applies when deploying and running in the Talend Runtime" show="false"/>
    <elementParameter field="CHECK" name="SPECIFY_DATASOURCE_ALIAS" value="false" show="false"/>
    <elementParameter field="TEXT" name="DATASOURCE_ALIAS" value="&quot;&quot;" show="false"/>
    <elementParameter field="CHECK" name="DIE_ON_ERROR" value="false"/>
    <elementParameter field="TEXT" name="PROPERTIES" value="&quot;&quot;" show="false"/>
    <elementParameter field="CHECK" name="ACTIVE_DIR_AUTH" value="false" show="false"/>
    <elementParameter field="CHECK" name="PROPAGATE_RECORD_SET" value="false"/>
    <elementParameter field="COLUMN_LIST" name="RECORD_SET_COLUMN" value="" show="false"/>
    <elementParameter field="CHECK" name="USE_PREPAREDSTATEMENT" value="false"/>
    <elementParameter field="TABLE" name="SET_PREPAREDSTATEMENT_PARAMETERS" show="false"/>
    <elementParameter field="ENCODING_TYPE" name="ENCODING" value="&quot;ISO-8859-15&quot;" show="false"/>
    <elementParameter field="TECHNICAL" name="ENCODING:ENCODING_TYPE" value="ISO-8859-15"/>
    <elementParameter field="TEXT" name="COMMIT_EVERY" value="10000" show="false"/>
    <elementParameter field="TEXT" name="CONNECTION_FORMAT" value="row"/>
    <metadata connector="FLOW" name="tMSSqlRow_19"/>
    <metadata connector="REJECT" name="REJECT">
      <column defaultValue="" key="false" length="255" name="errorCode" nullable="true" precision="0" sourceType="" type="id_String" originalLength="-1" usefulColumn="true"/>
      <column defaultValue="" key="false" length="255" name="errorMessage" nullable="true" precision="0" sourceType="" type="id_String" originalLength="-1" usefulColumn="true"/>
    </metadata>
  </node>
  <node componentName="tMSSqlRow" componentVersion="0.102" offsetLabelX="0" offsetLabelY="0" posX="-64" posY="2432">
    <elementParameter field="TEXT" name="UNIQUE_NAME" value="tMSSqlRow_20" show="false"/>
    <elementParameter field="CHECK" name="USE_EXISTING_CONNECTION" value="true"/>
    <elementParameter field="COMPONENT_LIST" name="CONNECTION" value="tMSSqlConnection_4"/>
    <elementParameter field="CLOSED_LIST" name="DRIVER" value="JTDS" show="false"/>
    <elementParameter field="TEXT" name="HOST" value="&quot;&quot;" show="false"/>
    <elementParameter field="TEXT" name="PORT" value="&quot;1433&quot;" show="false"/>
    <elementParameter field="TEXT" name="DB_SCHEMA" value="&quot;&quot;" show="false"/>
    <elementParameter field="TEXT" name="DBNAME" value="&quot;&quot;" show="false"/>
    <elementParameter field="TEXT" name="TYPE" value="MSSQL" show="false"/>
    <elementParameter field="TEXT" name="USER" value="&quot;&quot;" show="false"/>
    <elementParameter field="PASSWORD" name="PASS" value="enc:system.encryption.key.v1:xaLHOzYXMlBHOneRHQhzo64pPsxiY1fwDraAu7Ca" show="false"/>
    <elementParameter field="DBTABLE" name="TABLE" value="&quot;&quot;"/>
    <elementParameter field="CHECK" name="IDENTITY_INSERT" value="false"/>
    <elementParameter field="QUERYSTORE_TYPE" name="QUERYSTORE" value="&quot;&quot;"/>
    <elementParameter field="TECHNICAL" name="QUERYSTORE:REPOSITORY_QUERYSTORE_TYPE" value="" show="false"/>
    <elementParameter field="TECHNICAL" name="QUERYSTORE:QUERYSTORE_TYPE" value="BUILT_IN"/>
    <elementParameter field="MEMO_SQL" name="QUERY" value="&quot;CREATE PROCEDURE CallToDateValidationPROC &#xD;&#xA;(&#xD;&#xA;  @APPLICATIONTYPE VARCHAR(4000) &#xD;&#xA;) &#xD;&#xA;AS &#xD;&#xA;BEGIN&#xD;&#xA;SET NOCOUNT ON;&#xD;&#xA;  &#xD;&#xA;  IF @APPLICATIONTYPE = 'MARK' BEGIN&#x9;   &#xD;&#xA;&#x9;exec MarkDateValidationPROC;&#x9;&#xD;&#xA;  END     &#xD;&#xA;  &#x9;&#xD;&#xA;  IF @APPLICATIONTYPE = 'PATENT' BEGIN&#x9;  &#xD;&#xA;&#x9;exec PatentDateValidationPROC;&#x9;&#x9;&#xD;&#xA;  END     &#xD;&#xA;  &#xD;&#xA;  IF @APPLICATIONTYPE = 'USERDOC' BEGIN&#x9;  &#x9;&#xD;&#xA;&#x9;exec UserDocDateValidationPROC;&#x9;&#xD;&#xA;  END &#xD;&#xA;  SET NOCOUNT OFF;&#xD;&#xA;END&#xD;&#xA;&quot;"/>
    <elementParameter field="LABEL" name="NOTE" value="This option only applies when deploying and running in the Talend Runtime" show="false"/>
    <elementParameter field="CHECK" name="SPECIFY_DATASOURCE_ALIAS" value="false" show="false"/>
    <elementParameter field="TEXT" name="DATASOURCE_ALIAS" value="&quot;&quot;" show="false"/>
    <elementParameter field="CHECK" name="DIE_ON_ERROR" value="false"/>
    <elementParameter field="TEXT" name="PROPERTIES" value="&quot;&quot;" show="false"/>
    <elementParameter field="CHECK" name="ACTIVE_DIR_AUTH" value="false" show="false"/>
    <elementParameter field="CHECK" name="PROPAGATE_RECORD_SET" value="false"/>
    <elementParameter field="COLUMN_LIST" name="RECORD_SET_COLUMN" value="" show="false"/>
    <elementParameter field="CHECK" name="USE_PREPAREDSTATEMENT" value="false"/>
    <elementParameter field="TABLE" name="SET_PREPAREDSTATEMENT_PARAMETERS" show="false"/>
    <elementParameter field="ENCODING_TYPE" name="ENCODING" value="&quot;ISO-8859-15&quot;" show="false"/>
    <elementParameter field="TECHNICAL" name="ENCODING:ENCODING_TYPE" value="ISO-8859-15"/>
    <elementParameter field="TEXT" name="COMMIT_EVERY" value="10000" show="false"/>
    <elementParameter field="TEXT" name="CONNECTION_FORMAT" value="row"/>
    <metadata connector="FLOW" name="tMSSqlRow_20"/>
    <metadata connector="REJECT" name="REJECT">
      <column defaultValue="" key="false" length="255" name="errorCode" nullable="true" precision="0" sourceType="" type="id_String" originalLength="-1" usefulColumn="true"/>
      <column defaultValue="" key="false" length="255" name="errorMessage" nullable="true" precision="0" sourceType="" type="id_String" originalLength="-1" usefulColumn="true"/>
    </metadata>
  </node>
  <node componentName="tLogRow" componentVersion="0.101" offsetLabelX="0" offsetLabelY="0" posX="-192" posY="2496">
    <elementParameter field="TEXT" name="UNIQUE_NAME" value="tLogRow_21" show="false"/>
    <elementParameter field="RADIO" name="BASIC_MODE" value="false"/>
    <elementParameter field="RADIO" name="TABLE_PRINT" value="false"/>
    <elementParameter field="RADIO" name="VERTICAL" value="true"/>
    <elementParameter field="RADIO" name="PRINT_UNIQUE" value="true"/>
    <elementParameter field="RADIO" name="PRINT_LABEL" value="false"/>
    <elementParameter field="RADIO" name="PRINT_UNIQUE_LABEL" value="false"/>
    <elementParameter field="TEXT" name="FIELDSEPARATOR" value="&quot;|&quot;" show="false"/>
    <elementParameter field="CHECK" name="PRINT_HEADER" value="false" show="false"/>
    <elementParameter field="CHECK" name="PRINT_UNIQUE_NAME" value="false" show="false"/>
    <elementParameter field="CHECK" name="PRINT_COLNAMES" value="false" show="false"/>
    <elementParameter field="CHECK" name="USE_FIXED_LENGTH" value="false" show="false"/>
    <elementParameter field="TABLE" name="LENGTHS" show="false">
      <elementValue elementRef="SCHEMA_COLUMN" value="errorCode"/>
      <elementValue elementRef="LENGTH" value="10"/>
      <elementValue elementRef="SCHEMA_COLUMN" value="errorMessage"/>
      <elementValue elementRef="LENGTH" value="10"/>
    </elementParameter>
    <elementParameter field="CHECK" name="PRINT_CONTENT_WITH_LOG4J" value="true"/>
    <elementParameter field="TEXT" name="SCHEMA_OPT_NUM" value="100" show="false"/>
    <elementParameter field="TEXT" name="CONNECTION_FORMAT" value="row"/>
    <metadata connector="FLOW" name="tLogRow_21">
      <column defaultValue="" key="false" length="255" name="errorCode" nullable="true" precision="0" sourceType="" type="id_String" originalLength="-1" usefulColumn="true"/>
      <column defaultValue="" key="false" length="255" name="errorMessage" nullable="true" precision="0" sourceType="" type="id_String" originalLength="-1" usefulColumn="true"/>
    </metadata>
  </node>
  <node componentName="tLogRow" componentVersion="0.101" offsetLabelX="0" offsetLabelY="0" posX="-64" posY="2496">
    <elementParameter field="TEXT" name="UNIQUE_NAME" value="tLogRow_22" show="false"/>
    <elementParameter field="RADIO" name="BASIC_MODE" value="false"/>
    <elementParameter field="RADIO" name="TABLE_PRINT" value="false"/>
    <elementParameter field="RADIO" name="VERTICAL" value="true"/>
    <elementParameter field="RADIO" name="PRINT_UNIQUE" value="true"/>
    <elementParameter field="RADIO" name="PRINT_LABEL" value="false"/>
    <elementParameter field="RADIO" name="PRINT_UNIQUE_LABEL" value="false"/>
    <elementParameter field="TEXT" name="FIELDSEPARATOR" value="&quot;|&quot;" show="false"/>
    <elementParameter field="CHECK" name="PRINT_HEADER" value="false" show="false"/>
    <elementParameter field="CHECK" name="PRINT_UNIQUE_NAME" value="false" show="false"/>
    <elementParameter field="CHECK" name="PRINT_COLNAMES" value="false" show="false"/>
    <elementParameter field="CHECK" name="USE_FIXED_LENGTH" value="false" show="false"/>
    <elementParameter field="TABLE" name="LENGTHS" show="false">
      <elementValue elementRef="SCHEMA_COLUMN" value="errorCode"/>
      <elementValue elementRef="LENGTH" value="10"/>
      <elementValue elementRef="SCHEMA_COLUMN" value="errorMessage"/>
      <elementValue elementRef="LENGTH" value="10"/>
    </elementParameter>
    <elementParameter field="CHECK" name="PRINT_CONTENT_WITH_LOG4J" value="true"/>
    <elementParameter field="TEXT" name="SCHEMA_OPT_NUM" value="100" show="false"/>
    <elementParameter field="TEXT" name="CONNECTION_FORMAT" value="row"/>
    <metadata connector="FLOW" name="tLogRow_22">
      <column defaultValue="" key="false" length="255" name="errorCode" nullable="true" precision="0" sourceType="" type="id_String" originalLength="-1" usefulColumn="true"/>
      <column defaultValue="" key="false" length="255" name="errorMessage" nullable="true" precision="0" sourceType="" type="id_String" originalLength="-1" usefulColumn="true"/>
    </metadata>
  </node>
  <node componentName="tMSSqlRow" componentVersion="0.102" offsetLabelX="0" offsetLabelY="0" posX="320" posY="2432">
    <elementParameter field="TEXT" name="UNIQUE_NAME" value="tMSSqlRow_21" show="false"/>
    <elementParameter field="CHECK" name="USE_EXISTING_CONNECTION" value="true"/>
    <elementParameter field="COMPONENT_LIST" name="CONNECTION" value="tMSSqlConnection_4"/>
    <elementParameter field="CLOSED_LIST" name="DRIVER" value="JTDS" show="false"/>
    <elementParameter field="TEXT" name="HOST" value="&quot;&quot;" show="false"/>
    <elementParameter field="TEXT" name="PORT" value="&quot;1433&quot;" show="false"/>
    <elementParameter field="TEXT" name="DB_SCHEMA" value="&quot;&quot;" show="false"/>
    <elementParameter field="TEXT" name="DBNAME" value="&quot;&quot;" show="false"/>
    <elementParameter field="TEXT" name="TYPE" value="MSSQL" show="false"/>
    <elementParameter field="TEXT" name="USER" value="&quot;&quot;" show="false"/>
    <elementParameter field="PASSWORD" name="PASS" value="enc:system.encryption.key.v1:BdzGhp+VAvRH86pCUnkzVMdJ0Vnnx+O7tFB1t8ER" show="false"/>
    <elementParameter field="DBTABLE" name="TABLE" value="&quot;&quot;"/>
    <elementParameter field="CHECK" name="IDENTITY_INSERT" value="false"/>
    <elementParameter field="QUERYSTORE_TYPE" name="QUERYSTORE" value="&quot;&quot;"/>
    <elementParameter field="TECHNICAL" name="QUERYSTORE:REPOSITORY_QUERYSTORE_TYPE" value="" show="false"/>
    <elementParameter field="TECHNICAL" name="QUERYSTORE:QUERYSTORE_TYPE" value="BUILT_IN"/>
    <elementParameter field="MEMO_SQL" name="QUERY" value="&quot;IF OBJECT_ID('PatentDateValidationPROC', 'P') IS NOT NULL&#xD;&#xA;  DROP PROCEDURE PatentDateValidationPROC;&#xD;&#xA;&quot;"/>
    <elementParameter field="LABEL" name="NOTE" value="This option only applies when deploying and running in the Talend Runtime" show="false"/>
    <elementParameter field="CHECK" name="SPECIFY_DATASOURCE_ALIAS" value="false" show="false"/>
    <elementParameter field="TEXT" name="DATASOURCE_ALIAS" value="&quot;&quot;" show="false"/>
    <elementParameter field="CHECK" name="DIE_ON_ERROR" value="false"/>
    <elementParameter field="TEXT" name="PROPERTIES" value="&quot;&quot;" show="false"/>
    <elementParameter field="CHECK" name="ACTIVE_DIR_AUTH" value="false" show="false"/>
    <elementParameter field="CHECK" name="PROPAGATE_RECORD_SET" value="false"/>
    <elementParameter field="COLUMN_LIST" name="RECORD_SET_COLUMN" value="" show="false"/>
    <elementParameter field="CHECK" name="USE_PREPAREDSTATEMENT" value="false"/>
    <elementParameter field="TABLE" name="SET_PREPAREDSTATEMENT_PARAMETERS" show="false"/>
    <elementParameter field="ENCODING_TYPE" name="ENCODING" value="&quot;ISO-8859-15&quot;" show="false"/>
    <elementParameter field="TECHNICAL" name="ENCODING:ENCODING_TYPE" value="ISO-8859-15"/>
    <elementParameter field="TEXT" name="COMMIT_EVERY" value="10000" show="false"/>
    <elementParameter field="TEXT" name="CONNECTION_FORMAT" value="row"/>
    <metadata connector="FLOW" name="tMSSqlRow_21"/>
    <metadata connector="REJECT" name="REJECT">
      <column defaultValue="" key="false" length="255" name="errorCode" nullable="true" precision="0" sourceType="" type="id_String" originalLength="-1" usefulColumn="true"/>
      <column defaultValue="" key="false" length="255" name="errorMessage" nullable="true" precision="0" sourceType="" type="id_String" originalLength="-1" usefulColumn="true"/>
    </metadata>
  </node>
  <node componentName="tMSSqlRow" componentVersion="0.102" offsetLabelX="0" offsetLabelY="0" posX="448" posY="2432">
    <elementParameter field="TEXT" name="UNIQUE_NAME" value="tMSSqlRow_22" show="false"/>
    <elementParameter field="CHECK" name="USE_EXISTING_CONNECTION" value="true"/>
    <elementParameter field="COMPONENT_LIST" name="CONNECTION" value="tMSSqlConnection_4"/>
    <elementParameter field="CLOSED_LIST" name="DRIVER" value="JTDS" show="false"/>
    <elementParameter field="TEXT" name="HOST" value="&quot;&quot;" show="false"/>
    <elementParameter field="TEXT" name="PORT" value="&quot;1433&quot;" show="false"/>
    <elementParameter field="TEXT" name="DB_SCHEMA" value="&quot;&quot;" show="false"/>
    <elementParameter field="TEXT" name="DBNAME" value="&quot;&quot;" show="false"/>
    <elementParameter field="TEXT" name="TYPE" value="MSSQL" show="false"/>
    <elementParameter field="TEXT" name="USER" value="&quot;&quot;" show="false"/>
    <elementParameter field="PASSWORD" name="PASS" value="enc:system.encryption.key.v1:dX3hhL/nal61y5QF9rqJcXxkgo0WY9YEsLRZzHnO" show="false"/>
    <elementParameter field="DBTABLE" name="TABLE" value="&quot;&quot;"/>
    <elementParameter field="CHECK" name="IDENTITY_INSERT" value="false"/>
    <elementParameter field="QUERYSTORE_TYPE" name="QUERYSTORE" value="&quot;&quot;"/>
    <elementParameter field="TECHNICAL" name="QUERYSTORE:REPOSITORY_QUERYSTORE_TYPE" value="" show="false"/>
    <elementParameter field="TECHNICAL" name="QUERYSTORE:QUERYSTORE_TYPE" value="BUILT_IN"/>
    <elementParameter field="MEMO_SQL" name="QUERY" value="&quot;CREATE PROCEDURE PatentDateValidationPROC&#xD;&#xA;&#x9;AS&#xD;&#xA;&#x9;BEGIN&#xD;&#xA;&#x9;&#x9;SET NOCOUNT ON&#xD;&#xA;&#x9;&#x9;-- 1.&#x9;Validate CAPTURE_DATE&#xD;&#xA;&#x9;&#x9;INSERT INTO  [&quot;+ context.intermediateDB + &quot;].[dbo].VW_IMPORT_PATENT_RESULT (file_seq, file_type, file_series, file_nbr, ind_import, msg_import) &#xD;&#xA;&#x9;&#x9;SELECT T.file_seq, T.file_type, T.file_series, T.file_nbr, 2, 'Invalid CAPTURE_DATE. CAPTURE_DATE required to be greater than 1700-01-01 and lower than the current date.' &#xD;&#xA;&#x9;&#x9;FROM  [&quot;+ context.intermediateDB + &quot;].[dbo].VW_IMPORT_PATENT T WHERE CAPTURE_DATE > GETDATE() or CAST(DATEPART(YYYY, CAPTURE_DATE) as NUMERIC) &lt; 1700;&#x9;&#xD;&#xA;&#x9;&#x9;&#xD;&#xA;&#x9;&#x9;-- 2.&#x9;Validate ENTITLEMENT_DATE&#xD;&#xA;&#x9;&#x9;INSERT INTO  [&quot;+ context.intermediateDB + &quot;].[dbo].VW_IMPORT_PATENT_RESULT (file_seq, file_type, file_series, file_nbr, ind_import, msg_import) &#xD;&#xA;&#x9;&#x9;SELECT T.file_seq, T.file_type, T.file_series, T.file_nbr, 2, 'Invalid ENTITLEMENT_DATE. ENTITLEMENT_DATE required to be greater than 1700-01-01 and lower than the current date.' &#xD;&#xA;&#x9;&#x9;FROM  [&quot;+ context.intermediateDB + &quot;].[dbo].VW_IMPORT_PATENT T WHERE ENTITLEMENT_DATE > GETDATE() or CAST(DATEPART(YYYY, ENTITLEMENT_DATE) as NUMERIC) &lt; 1700;&#x9;&#xD;&#xA;&#x9;&#x9;&#xD;&#xA;&#x9;&#x9;-- 3.&#x9;Validate EXHIBITION_DATE&#xD;&#xA;&#x9;&#x9;INSERT INTO  [&quot;+ context.intermediateDB + &quot;].[dbo].VW_IMPORT_PATENT_RESULT (file_seq, file_type, file_series, file_nbr, ind_import, msg_import) &#xD;&#xA;&#x9;&#x9;SELECT T.file_seq, T.file_type, T.file_series, T.file_nbr, 2, 'Invalid EXHIBITION_DATE. EXHIBITION_DATE required to be greater than 1700-01-01 and lower than the current date.' &#xD;&#xA;&#x9;&#x9;FROM  [&quot;+ context.intermediateDB + &quot;].[dbo].VW_IMPORT_PATENT T WHERE EXHIBITION_DATE > GETDATE() or CAST(DATEPART(YYYY, EXHIBITION_DATE) as NUMERIC) &lt; 1700;&#x9;&#xD;&#xA;&#x9;&#x9;&#xD;&#xA;&#x9;&#x9;&#xD;&#xA;&#x9;&#x9;-- 4.&#x9;Validate FILING_DATE&#xD;&#xA;&#x9;&#x9;INSERT INTO  [&quot;+ context.intermediateDB + &quot;].[dbo].VW_IMPORT_PATENT_RESULT (file_seq, file_type, file_series, file_nbr, ind_import, msg_import) &#xD;&#xA;&#x9;&#x9;SELECT T.file_seq, T.file_type, T.file_series, T.file_nbr, 2, 'Invalid FILING_DATE. FILING_DATE required to be greater than 1700-01-01 and lower than the current date.' &#xD;&#xA;&#x9;&#x9;FROM  [&quot;+ context.intermediateDB + &quot;].[dbo].VW_IMPORT_PATENT T WHERE FILING_DATE > GETDATE() or CAST(DATEPART(YYYY, FILING_DATE) as NUMERIC) &lt; 1700;&#x9;&#xD;&#xA;&#x9;&#x9;&#xD;&#xA;&#x9;&#x9;-- 5.&#x9;Validate PCT_APPLICATION_DATE&#xD;&#xA;&#x9;&#x9;INSERT INTO  [&quot;+ context.intermediateDB + &quot;].[dbo].VW_IMPORT_PATENT_RESULT (file_seq, file_type, file_series, file_nbr, ind_import, msg_import) &#xD;&#xA;&#x9;&#x9;SELECT T.file_seq, T.file_type, T.file_series, T.file_nbr, 2, 'Invalid PCT_APPLICATION_DATE. PCT_APPLICATION_DATE required to be greater than 1700-01-01 and lower than the current date.' &#xD;&#xA;&#x9;&#x9;FROM  [&quot;+ context.intermediateDB + &quot;].[dbo].VW_IMPORT_PATENT T WHERE PCT_APPLICATION_DATE > GETDATE() or CAST(DATEPART(YYYY, PCT_APPLICATION_DATE) as NUMERIC) &lt; 1700;&#x9;&#xD;&#xA;&#x9;&#x9;&#xD;&#xA;&#x9;&#x9;-- 6.&#x9;Validate PCT_PUBLICATION_DATE&#xD;&#xA;&#x9;&#x9;INSERT INTO  [&quot;+ context.intermediateDB + &quot;].[dbo].VW_IMPORT_PATENT_RESULT (file_seq, file_type, file_series, file_nbr, ind_import, msg_import) &#xD;&#xA;&#x9;&#x9;SELECT T.file_seq, T.file_type, T.file_series, T.file_nbr, 2, 'Invalid PCT_PUBLICATION_DATE. PCT_PUBLICATION_DATE required to be greater than 1700-01-01 and lower than the current date.' &#xD;&#xA;&#x9;&#x9;FROM  [&quot;+ context.intermediateDB + &quot;].[dbo].VW_IMPORT_PATENT T WHERE PCT_PUBLICATION_DATE > GETDATE() or CAST(DATEPART(YYYY, PCT_PUBLICATION_DATE) as NUMERIC) &lt; 1700;&#x9;&#xD;&#xA;&#x9;&#x9;&#xD;&#xA;&#x9;&#x9;&#xD;&#xA;&#x9;&#x9;-- 7.&#x9;Validate PUBLICATION_DATE&#xD;&#xA;&#x9;&#x9;INSERT INTO  [&quot;+ context.intermediateDB + &quot;].[dbo].VW_IMPORT_PATENT_RESULT (file_seq, file_type, file_series, file_nbr, ind_import, msg_import) &#xD;&#xA;&#x9;&#x9;SELECT T.file_seq, T.file_type, T.file_series, T.file_nbr, 2, 'Invalid PUBLICATION_DATE. PUBLICATION_DATE required to be greater than 1700-01-01 and lower than the current date.' &#xD;&#xA;&#x9;&#x9;FROM  [&quot;+ context.intermediateDB + &quot;].[dbo].VW_IMPORT_PATENT T WHERE PUBLICATION_DATE > GETDATE() or CAST(DATEPART(YYYY, PUBLICATION_DATE) as NUMERIC) &lt; 1700;&#x9;&#xD;&#xA;&#x9;&#x9;&#xD;&#xA;&#x9;&#x9;-- 8.&#x9;Validate RECEPTION_DATE&#xD;&#xA;&#x9;&#x9;INSERT INTO  [&quot;+ context.intermediateDB + &quot;].[dbo].VW_IMPORT_PATENT_RESULT (file_seq, file_type, file_series, file_nbr, ind_import, msg_import) &#xD;&#xA;&#x9;&#x9;SELECT T.file_seq, T.file_type, T.file_series, T.file_nbr, 2, 'Invalid RECEPTION_DATE. RECEPTION_DATE required to be greater than 1700-01-01 and lower than the current date.' &#xD;&#xA;&#x9;&#x9;FROM  [&quot;+ context.intermediateDB + &quot;].[dbo].VW_IMPORT_PATENT T WHERE RECEPTION_DATE > GETDATE() or CAST(DATEPART(YYYY, RECEPTION_DATE) as NUMERIC) &lt; 1700;&#x9;&#x9;&#xD;&#xA;&#x9;&#x9;&#xD;&#xA;&#x9;&#x9;-- 9.&#x9;Validate REGIONAL_APPL_DATE&#xD;&#xA;&#x9;&#x9;INSERT INTO  [&quot;+ context.intermediateDB + &quot;].[dbo].VW_IMPORT_PATENT_RESULT (file_seq, file_type, file_series, file_nbr, ind_import, msg_import) &#xD;&#xA;&#x9;&#x9;SELECT T.file_seq, T.file_type, T.file_series, T.file_nbr, 2, 'Invalid REGIONAL_APPL_DATE. REGIONAL_APPL_DATE required to be greater than 1700-01-01 and lower than the current date.' &#xD;&#xA;&#x9;&#x9;FROM  [&quot;+ context.intermediateDB + &quot;].[dbo].VW_IMPORT_PATENT T WHERE REGIONAL_APPL_DATE > GETDATE() or CAST(DATEPART(YYYY, REGIONAL_APPL_DATE) as NUMERIC) &lt; 1700;&#x9;&#xD;&#xA;&#x9;&#x9;&#xD;&#xA;&#x9;&#x9;-- 10.&#x9;Validate REGIONAL_PUBL_DATE&#xD;&#xA;&#x9;&#x9;INSERT INTO  [&quot;+ context.intermediateDB + &quot;].[dbo].VW_IMPORT_PATENT_RESULT (file_seq, file_type, file_series, file_nbr, ind_import, msg_import) &#xD;&#xA;&#x9;&#x9;SELECT T.file_seq, T.file_type, T.file_series, T.file_nbr, 2, 'Invalid REGIONAL_PUBL_DATE. REGIONAL_PUBL_DATE required to be greater than 1700-01-01 and lower than the current date.' &#xD;&#xA;&#x9;&#x9;FROM  [&quot;+ context.intermediateDB + &quot;].[dbo].VW_IMPORT_PATENT T WHERE REGIONAL_PUBL_DATE > GETDATE() or CAST(DATEPART(YYYY, REGIONAL_PUBL_DATE) as NUMERIC) &lt; 1700;&#x9;&#xD;&#xA;&#x9;&#x9;&#xD;&#xA;&#x9;&#x9;-- 11.&#x9;Validate REGISTRATION_DATE&#xD;&#xA;&#x9;&#x9;INSERT INTO  [&quot;+ context.intermediateDB + &quot;].[dbo].VW_IMPORT_PATENT_RESULT (file_seq, file_type, file_series, file_nbr, ind_import, msg_import) &#xD;&#xA;&#x9;&#x9;SELECT T.file_seq, T.file_type, T.file_series, T.file_nbr, 2, 'Invalid REGISTRATION_DATE. REGISTRATION_DATE required to be greater than 1700-01-01 and lower than the current date.' &#xD;&#xA;&#x9;&#x9;FROM  [&quot;+ context.intermediateDB + &quot;].[dbo].VW_IMPORT_PATENT T WHERE REGISTRATION_DATE > GETDATE() or CAST(DATEPART(YYYY, REGISTRATION_DATE) as NUMERIC) &lt; 1700;&#x9;&#xD;&#xA;&#x9;&#x9;&#xD;&#xA;&#x9;&#x9;-- 12.&#x9;Validate SPECIAL_PUBL_APPL_DATE&#xD;&#xA;&#x9;&#x9;INSERT INTO  [&quot;+ context.intermediateDB + &quot;].[dbo].VW_IMPORT_PATENT_RESULT (file_seq, file_type, file_series, file_nbr, ind_import, msg_import) &#xD;&#xA;&#x9;&#x9;SELECT T.file_seq, T.file_type, T.file_series, T.file_nbr, 2, 'Invalid SPECIAL_PUBL_APPL_DATE. SPECIAL_PUBL_APPL_DATE required to be greater than 1700-01-01 and lower than the current date.' &#xD;&#xA;&#x9;&#x9;FROM  [&quot;+ context.intermediateDB + &quot;].[dbo].VW_IMPORT_PATENT T WHERE SPECIAL_PUBL_APPL_DATE > GETDATE() or CAST(DATEPART(YYYY, SPECIAL_PUBL_APPL_DATE) as NUMERIC) &lt; 1700;&#x9;&#xD;&#xA;&#x9;&#x9;&#x9;&#xD;&#xA;&#x9;&#x9;-- 13.&#x9;Validate SPECIAL_PUBL_REQU_DATE&#xD;&#xA;&#x9;&#x9;INSERT INTO  [&quot;+ context.intermediateDB + &quot;].[dbo].VW_IMPORT_PATENT_RESULT (file_seq, file_type, file_series, file_nbr, ind_import, msg_import) &#xD;&#xA;&#x9;&#x9;SELECT T.file_seq, T.file_type, T.file_series, T.file_nbr, 2, 'Invalid SPECIAL_PUBL_REQU_DATE. SPECIAL_PUBL_REQU_DATE required to be greater than 1700-01-01 and lower than the current date.' &#xD;&#xA;&#x9;&#x9;FROM  [&quot;+ context.intermediateDB + &quot;].[dbo].VW_IMPORT_PATENT T WHERE SPECIAL_PUBL_REQU_DATE > GETDATE() or CAST(DATEPART(YYYY, SPECIAL_PUBL_REQU_DATE) as NUMERIC) &lt; 1700;&#x9;&#xD;&#xA;&#x9;&#x9;&#xD;&#xA;&#x9;&#x9;-- 14.&#x9;Validate ACTION_DATE&#xD;&#xA;&#x9;&#x9;INSERT INTO  [&quot;+ context.intermediateDB + &quot;].[dbo].VW_IMPORT_PATENT_RESULT (file_seq, file_type, file_series, file_nbr, ind_import, msg_import) &#xD;&#xA;&#x9;&#x9;SELECT T.file_seq, T.file_type, T.file_series, T.file_nbr, 2, 'Invalid ACTION_DATE. ACTION_DATE required to be greater than 1700-01-01 and lower than the current date.' &#xD;&#xA;&#x9;&#x9;FROM  [&quot;+ context.intermediateDB + &quot;].[dbo].VW_IMPORT_PATENT_ACTIONS T WHERE ACTION_DATE > GETDATE() or CAST(DATEPART(YYYY, ACTION_DATE) as NUMERIC) &lt; 1700;&#x9;&#xD;&#xA;&#x9;&#x9;&#xD;&#xA;&#x9;&#x9;-- 15.&#x9;Validate PUBLICATION_DATE&#xD;&#xA;&#x9;--&#x9;INSERT INTO  [&quot;+ context.intermediateDB + &quot;].[dbo].VW_IMPORT_PATENT_RESULT (file_seq, file_type, file_series, file_nbr, ind_import, msg_import) &#xD;&#xA;&#x9;--&#x9;SELECT T.file_seq, T.file_type, T.file_series, T.file_nbr, 2, 'Invalid PUBLICATION_DATE. PUBLICATION_DATE required to be greater than 1700-01-01 and lower than the current date.' &#xD;&#xA;&#x9;--&#x9;FROM  [&quot;+ context.intermediateDB + &quot;].[dbo].VW_IMPORT_PATENT_ACTIONS T WHERE PUBLICATION_DATE > GETDATE() or CAST(DATEPART(YYYY, PUBLICATION_DATE) as NUMERIC) &lt; 1700;&#x9;&#xD;&#xA;&#x9;&#x9;&#xD;&#xA;&#x9;&#x9;-- 16.&#x9;Validate RECEIPT_DATE&#xD;&#xA;&#x9;&#x9;INSERT INTO  [&quot;+ context.intermediateDB + &quot;].[dbo].VW_IMPORT_PATENT_RESULT (file_seq, file_type, file_series, file_nbr, ind_import, msg_import) &#xD;&#xA;&#x9;&#x9;SELECT T.file_seq, T.file_type, T.file_series, T.file_nbr, 2, 'Invalid RECEIPT_DATE. RECEIPT_DATE required to be greater than 1700-01-01 and lower than the current date.' &#xD;&#xA;&#x9;&#x9;FROM  [&quot;+ context.intermediateDB + &quot;].[dbo].VW_IMPORT_PATENT_PAYMENTS T WHERE RECEIPT_DATE > GETDATE() or CAST(DATEPART(YYYY, RECEIPT_DATE) as NUMERIC) &lt; 1700;&#x9;&#xD;&#xA;&#x9;&#x9;&#x9;&#xD;&#xA;&#x9;&#x9;-- 17.&#x9;Validate PRIORITY_DATE&#xD;&#xA;&#x9;&#x9;INSERT INTO  [&quot;+ context.intermediateDB + &quot;].[dbo].VW_IMPORT_PATENT_RESULT (file_seq, file_type, file_series, file_nbr, ind_import, msg_import) &#xD;&#xA;&#x9;&#x9;SELECT T.file_seq, T.file_type, T.file_series, T.file_nbr, 2, 'Invalid PRIORITY_DATE. PRIORITY_DATE required to be greater than 1700-01-01 and lower than the current date.' &#xD;&#xA;&#x9;&#x9;FROM  [&quot;+ context.intermediateDB + &quot;].[dbo].VW_IMPORT_PATENT_PRIORITIES T WHERE PRIORITY_DATE > GETDATE() or CAST(DATEPART(YYYY, PRIORITY_DATE) as NUMERIC) &lt; 1700;&#x9;&#xD;&#xA;&#x9;&#x9;&#xD;&#xA;&#x9;&#x9;-- Can be a Future Date so no check with GETDATE()&#xD;&#xA;&#x9;&#x9;&#xD;&#xA;&#x9;&#x9;-- 1.&#x9;Validate EXPIRATION_DATE&#xD;&#xA;&#x9;&#x9;INSERT INTO  [&quot;+ context.intermediateDB + &quot;].[dbo].VW_IMPORT_PATENT_RESULT (file_seq, file_type, file_series, file_nbr, ind_import, msg_import) &#xD;&#xA;&#x9;&#x9;SELECT T.file_seq, T.file_type, T.file_series, T.file_nbr, 2, 'Invalid EXPIRATION_DATE. EXPIRATION_DATE required to be greater than 1700-01-01 and lower than the current date.' &#xD;&#xA;&#x9;&#x9;FROM  [&quot;+ context.intermediateDB + &quot;].[dbo].VW_IMPORT_PATENT T WHERE CAST(DATEPART(YYYY, EXPIRATION_DATE) as NUMERIC) &lt; 1700;&#x9;&#xD;&#xA;&#x9;&#x9;&#xD;&#xA;&#x9;&#x9;-- 2.&#x9;Validate MANUAL_DUE_DATE&#xD;&#xA;&#x9;&#x9;INSERT INTO  [&quot;+ context.intermediateDB + &quot;].[dbo].VW_IMPORT_PATENT_RESULT (file_seq, file_type, file_series, file_nbr, ind_import, msg_import) &#xD;&#xA;&#x9;&#x9;SELECT T.file_seq, T.file_type, T.file_series, T.file_nbr, 2, 'Invalid MANUAL_DUE_DATE. MANUAL_DUE_DATE required to be greater than 1700-01-01 and lower than the current date.' &#xD;&#xA;&#x9;&#x9;FROM  [&quot;+ context.intermediateDB + &quot;].[dbo].VW_IMPORT_PATENT_ACTIONS T WHERE CAST(DATEPART(YYYY, MANUAL_DUE_DATE) as NUMERIC) &lt; 1700;&#x9;&#xD;&#xA;&#x9;&#x9;&#xD;&#xA;&#x9;&#x9;-- 3.&#x9;Validate EXPIRATION_DATE&#xD;&#xA;&#x9;&#x9;INSERT INTO  [&quot;+ context.intermediateDB + &quot;].[dbo].VW_IMPORT_PATENT_RESULT (file_seq, file_type, file_series, file_nbr, ind_import, msg_import) &#xD;&#xA;&#x9;&#x9;SELECT T.file_seq, T.file_type, T.file_series, T.file_nbr, 2, 'Invalid EXPIRATION_DATE. EXPIRATION_DATE required to be greater than 1700-01-01 and lower than the current date.' &#xD;&#xA;&#x9;&#x9;FROM  [&quot;+ context.intermediateDB + &quot;].[dbo].VW_IMPORT_PATENT_ANNUITIES T WHERE CAST(DATEPART(YYYY, EXPIRATION_DATE) as NUMERIC) &lt; 1700;&#xD;&#xA;&#xD;&#xA;&#x9;&#x9;-- 4.&#x9;Validate GRACE_DATE&#xD;&#xA;&#x9;&#x9;INSERT INTO  [&quot;+ context.intermediateDB + &quot;].[dbo].VW_IMPORT_PATENT_RESULT (file_seq, file_type, file_series, file_nbr, ind_import, msg_import) &#xD;&#xA;&#x9;&#x9;SELECT T.file_seq, T.file_type, T.file_series, T.file_nbr, 2, 'Invalid GRACE_DATE. GRACE_DATE required to be greater than 1700-01-01 and lower than the current date.' &#xD;&#xA;&#x9;&#x9;FROM  [&quot;+ context.intermediateDB + &quot;].[dbo].VW_IMPORT_PATENT_ANNUITIES T WHERE CAST(DATEPART(YYYY, GRACE_DATE) as NUMERIC) &lt; 1700;&#x9;&#xD;&#xA;&#x9;&#x9;&#xD;&#xA;&#x9;&#x9;SET NOCOUNT OFF&#xD;&#xA;&#xD;&#xA;&#x9;END&#xD;&#xA;&quot;"/>
    <elementParameter field="LABEL" name="NOTE" value="This option only applies when deploying and running in the Talend Runtime" show="false"/>
    <elementParameter field="CHECK" name="SPECIFY_DATASOURCE_ALIAS" value="false" show="false"/>
    <elementParameter field="TEXT" name="DATASOURCE_ALIAS" value="&quot;&quot;" show="false"/>
    <elementParameter field="CHECK" name="DIE_ON_ERROR" value="false"/>
    <elementParameter field="TEXT" name="PROPERTIES" value="&quot;&quot;" show="false"/>
    <elementParameter field="CHECK" name="ACTIVE_DIR_AUTH" value="false" show="false"/>
    <elementParameter field="CHECK" name="PROPAGATE_RECORD_SET" value="false"/>
    <elementParameter field="COLUMN_LIST" name="RECORD_SET_COLUMN" value="" show="false"/>
    <elementParameter field="CHECK" name="USE_PREPAREDSTATEMENT" value="false"/>
    <elementParameter field="TABLE" name="SET_PREPAREDSTATEMENT_PARAMETERS" show="false"/>
    <elementParameter field="ENCODING_TYPE" name="ENCODING" value="&quot;ISO-8859-15&quot;" show="false"/>
    <elementParameter field="TECHNICAL" name="ENCODING:ENCODING_TYPE" value="ISO-8859-15"/>
    <elementParameter field="TEXT" name="COMMIT_EVERY" value="10000" show="false"/>
    <elementParameter field="TEXT" name="CONNECTION_FORMAT" value="row"/>
    <metadata connector="FLOW" name="tMSSqlRow_22"/>
    <metadata connector="REJECT" name="REJECT">
      <column defaultValue="" key="false" length="255" name="errorCode" nullable="true" precision="0" sourceType="" type="id_String" originalLength="-1" usefulColumn="true"/>
      <column defaultValue="" key="false" length="255" name="errorMessage" nullable="true" precision="0" sourceType="" type="id_String" originalLength="-1" usefulColumn="true"/>
    </metadata>
  </node>
  <node componentName="tLogRow" componentVersion="0.101" offsetLabelX="0" offsetLabelY="0" posX="320" posY="2496">
    <elementParameter field="TEXT" name="UNIQUE_NAME" value="tLogRow_23" show="false"/>
    <elementParameter field="RADIO" name="BASIC_MODE" value="false"/>
    <elementParameter field="RADIO" name="TABLE_PRINT" value="false"/>
    <elementParameter field="RADIO" name="VERTICAL" value="true"/>
    <elementParameter field="RADIO" name="PRINT_UNIQUE" value="true"/>
    <elementParameter field="RADIO" name="PRINT_LABEL" value="false"/>
    <elementParameter field="RADIO" name="PRINT_UNIQUE_LABEL" value="false"/>
    <elementParameter field="TEXT" name="FIELDSEPARATOR" value="&quot;|&quot;" show="false"/>
    <elementParameter field="CHECK" name="PRINT_HEADER" value="false" show="false"/>
    <elementParameter field="CHECK" name="PRINT_UNIQUE_NAME" value="false" show="false"/>
    <elementParameter field="CHECK" name="PRINT_COLNAMES" value="false" show="false"/>
    <elementParameter field="CHECK" name="USE_FIXED_LENGTH" value="false" show="false"/>
    <elementParameter field="TABLE" name="LENGTHS" show="false">
      <elementValue elementRef="SCHEMA_COLUMN" value="errorCode"/>
      <elementValue elementRef="LENGTH" value="10"/>
      <elementValue elementRef="SCHEMA_COLUMN" value="errorMessage"/>
      <elementValue elementRef="LENGTH" value="10"/>
    </elementParameter>
    <elementParameter field="CHECK" name="PRINT_CONTENT_WITH_LOG4J" value="true"/>
    <elementParameter field="TEXT" name="SCHEMA_OPT_NUM" value="100" show="false"/>
    <elementParameter field="TEXT" name="CONNECTION_FORMAT" value="row"/>
    <metadata connector="FLOW" name="tLogRow_23">
      <column defaultValue="" key="false" length="255" name="errorCode" nullable="true" precision="0" sourceType="" type="id_String" originalLength="-1" usefulColumn="true"/>
      <column defaultValue="" key="false" length="255" name="errorMessage" nullable="true" precision="0" sourceType="" type="id_String" originalLength="-1" usefulColumn="true"/>
    </metadata>
  </node>
  <node componentName="tLogRow" componentVersion="0.101" offsetLabelX="0" offsetLabelY="0" posX="448" posY="2496">
    <elementParameter field="TEXT" name="UNIQUE_NAME" value="tLogRow_24" show="false"/>
    <elementParameter field="RADIO" name="BASIC_MODE" value="false"/>
    <elementParameter field="RADIO" name="TABLE_PRINT" value="false"/>
    <elementParameter field="RADIO" name="VERTICAL" value="true"/>
    <elementParameter field="RADIO" name="PRINT_UNIQUE" value="true"/>
    <elementParameter field="RADIO" name="PRINT_LABEL" value="false"/>
    <elementParameter field="RADIO" name="PRINT_UNIQUE_LABEL" value="false"/>
    <elementParameter field="TEXT" name="FIELDSEPARATOR" value="&quot;|&quot;" show="false"/>
    <elementParameter field="CHECK" name="PRINT_HEADER" value="false" show="false"/>
    <elementParameter field="CHECK" name="PRINT_UNIQUE_NAME" value="false" show="false"/>
    <elementParameter field="CHECK" name="PRINT_COLNAMES" value="false" show="false"/>
    <elementParameter field="CHECK" name="USE_FIXED_LENGTH" value="false" show="false"/>
    <elementParameter field="TABLE" name="LENGTHS" show="false">
      <elementValue elementRef="SCHEMA_COLUMN" value="errorCode"/>
      <elementValue elementRef="LENGTH" value="10"/>
      <elementValue elementRef="SCHEMA_COLUMN" value="errorMessage"/>
      <elementValue elementRef="LENGTH" value="10"/>
    </elementParameter>
    <elementParameter field="CHECK" name="PRINT_CONTENT_WITH_LOG4J" value="true"/>
    <elementParameter field="TEXT" name="SCHEMA_OPT_NUM" value="100" show="false"/>
    <elementParameter field="TEXT" name="CONNECTION_FORMAT" value="row"/>
    <metadata connector="FLOW" name="tLogRow_24">
      <column defaultValue="" key="false" length="255" name="errorCode" nullable="true" precision="0" sourceType="" type="id_String" originalLength="-1" usefulColumn="true"/>
      <column defaultValue="" key="false" length="255" name="errorMessage" nullable="true" precision="0" sourceType="" type="id_String" originalLength="-1" usefulColumn="true"/>
    </metadata>
  </node>
  <node componentName="tMSSqlRow" componentVersion="0.102" offsetLabelX="0" offsetLabelY="0" posX="768" posY="2528">
    <elementParameter field="TEXT" name="UNIQUE_NAME" value="tMSSqlRow_23" show="false"/>
    <elementParameter field="CHECK" name="USE_EXISTING_CONNECTION" value="true"/>
    <elementParameter field="COMPONENT_LIST" name="CONNECTION" value="tMSSqlConnection_4"/>
    <elementParameter field="CLOSED_LIST" name="DRIVER" value="JTDS" show="false"/>
    <elementParameter field="TEXT" name="HOST" value="&quot;&quot;" show="false"/>
    <elementParameter field="TEXT" name="PORT" value="&quot;1433&quot;" show="false"/>
    <elementParameter field="TEXT" name="DB_SCHEMA" value="&quot;&quot;" show="false"/>
    <elementParameter field="TEXT" name="DBNAME" value="&quot;&quot;" show="false"/>
    <elementParameter field="TEXT" name="TYPE" value="MSSQL" show="false"/>
    <elementParameter field="TEXT" name="USER" value="&quot;&quot;" show="false"/>
    <elementParameter field="PASSWORD" name="PASS" value="enc:system.encryption.key.v1:Ah5TnSKdyBtpyNLHVKHk+Y0a9h8usGsJ9XYUAUXU" show="false"/>
    <elementParameter field="DBTABLE" name="TABLE" value="&quot;&quot;"/>
    <elementParameter field="CHECK" name="IDENTITY_INSERT" value="false"/>
    <elementParameter field="QUERYSTORE_TYPE" name="QUERYSTORE" value="&quot;&quot;"/>
    <elementParameter field="TECHNICAL" name="QUERYSTORE:REPOSITORY_QUERYSTORE_TYPE" value="" show="false"/>
    <elementParameter field="TECHNICAL" name="QUERYSTORE:QUERYSTORE_TYPE" value="BUILT_IN"/>
    <elementParameter field="MEMO_SQL" name="QUERY" value="&quot;If Exists ( SELECT name &#xD;&#xA;            FROM sysobjects  &#xD;&#xA;            WHERE name = 'ImportAgentProcessAll'&#xD;&#xA;            AND type = 'P')&#xD;&#xA;&#x9;DROP PROCEDURE ImportAgentProcessAll&quot;"/>
    <elementParameter field="LABEL" name="NOTE" value="This option only applies when deploying and running in the Talend Runtime" show="false"/>
    <elementParameter field="CHECK" name="SPECIFY_DATASOURCE_ALIAS" value="false" show="false"/>
    <elementParameter field="TEXT" name="DATASOURCE_ALIAS" value="&quot;&quot;" show="false"/>
    <elementParameter field="CHECK" name="DIE_ON_ERROR" value="false"/>
    <elementParameter field="TEXT" name="PROPERTIES" value="&quot;&quot;" show="false"/>
    <elementParameter field="CHECK" name="ACTIVE_DIR_AUTH" value="false" show="false"/>
    <elementParameter field="CHECK" name="PROPAGATE_RECORD_SET" value="false"/>
    <elementParameter field="COLUMN_LIST" name="RECORD_SET_COLUMN" value="" show="false"/>
    <elementParameter field="CHECK" name="USE_PREPAREDSTATEMENT" value="false"/>
    <elementParameter field="TABLE" name="SET_PREPAREDSTATEMENT_PARAMETERS" show="false"/>
    <elementParameter field="ENCODING_TYPE" name="ENCODING" value="&quot;ISO-8859-15&quot;" show="false"/>
    <elementParameter field="TECHNICAL" name="ENCODING:ENCODING_TYPE" value="ISO-8859-15"/>
    <elementParameter field="TEXT" name="COMMIT_EVERY" value="10000" show="false"/>
    <elementParameter field="TEXT" name="CONNECTION_FORMAT" value="row"/>
    <metadata connector="FLOW" name="tMSSqlRow_23"/>
    <metadata connector="REJECT" name="REJECT">
      <column defaultValue="" key="false" length="255" name="errorCode" nullable="true" precision="0" sourceType="" type="id_String" originalLength="-1" usefulColumn="true"/>
      <column defaultValue="" key="false" length="255" name="errorMessage" nullable="true" precision="0" sourceType="" type="id_String" originalLength="-1" usefulColumn="true"/>
    </metadata>
  </node>
  <node componentName="tMSSqlRow" componentVersion="0.102" offsetLabelX="0" offsetLabelY="0" posX="896" posY="2528">
    <elementParameter field="TEXT" name="UNIQUE_NAME" value="tMSSqlRow_24" show="false"/>
    <elementParameter field="CHECK" name="USE_EXISTING_CONNECTION" value="true"/>
    <elementParameter field="COMPONENT_LIST" name="CONNECTION" value="tMSSqlConnection_4"/>
    <elementParameter field="CLOSED_LIST" name="DRIVER" value="JTDS" show="false"/>
    <elementParameter field="TEXT" name="HOST" value="&quot;&quot;" show="false"/>
    <elementParameter field="TEXT" name="PORT" value="&quot;1433&quot;" show="false"/>
    <elementParameter field="TEXT" name="DB_SCHEMA" value="&quot;&quot;" show="false"/>
    <elementParameter field="TEXT" name="DBNAME" value="&quot;&quot;" show="false"/>
    <elementParameter field="TEXT" name="TYPE" value="MSSQL" show="false"/>
    <elementParameter field="TEXT" name="USER" value="&quot;&quot;" show="false"/>
    <elementParameter field="PASSWORD" name="PASS" value="enc:system.encryption.key.v1:Rk9ZN9R53dStiKTzEwRM5v/LEkl3oV8gYdr4GI8X" show="false"/>
    <elementParameter field="DBTABLE" name="TABLE" value="&quot;&quot;"/>
    <elementParameter field="CHECK" name="IDENTITY_INSERT" value="false"/>
    <elementParameter field="QUERYSTORE_TYPE" name="QUERYSTORE" value="&quot;&quot;"/>
    <elementParameter field="TECHNICAL" name="QUERYSTORE:REPOSITORY_QUERYSTORE_TYPE" value="" show="false"/>
    <elementParameter field="TECHNICAL" name="QUERYSTORE:QUERYSTORE_TYPE" value="BUILT_IN"/>
    <elementParameter field="MEMO_SQL" name="QUERY" value="&quot;CREATE PROCEDURE ImportAgentProcessAll&#xD;&#xA;AS &#xD;&#xA;&#x9;BEGIN&#xD;&#xA;&#x9;&#x9;SET NOCOUNT ON&#xD;&#xA;&#x9;&#x9;&#xD;&#xA;&#x9;&#x9;/* Procedure name: ImportAgentProcessAll&#xD;&#xA;&#x9;&#x9;Input:  import tables with IND_IMPORT = 9&#xD;&#xA;&#x9;&#x9;Output: IPAS database updated and import tables updated with IND_IMPORT = 1&#xD;&#xA;&#x9;&#x9;*/&#xD;&#xA;&#xD;&#xA;&#x9;&#x9;/* insert agents */&#xD;&#xA;&#x9;&#x9;INSERT INTO  IP_AGENT   &#xD;&#xA;&#x9;&#x9;&#x9;&#x9;( ROW_VERSION , &#xD;&#xA;&#x9;&#x9;&#x9;&#x9;AGENT_CODE , &#xD;&#xA;&#x9;&#x9;&#x9;&#x9;AGENT_NAME , &#xD;&#xA;&#x9;&#x9;&#x9;&#x9;NOTIFICATION_WCODE ,&#xD;&#xA;&#x9;&#x9;&#x9;&#x9;IND_INACTIVE)  &#xD;&#xA;&#x9;&#x9;SELECT&#xD;&#xA;&#x9;&#x9;&#x9;&#x9; 1,&#xD;&#xA;&#x9;&#x9;&#x9;&#x9; AGENT_CODE,&#xD;&#xA;&#x9;&#x9;&#x9;&#x9; substring(AGENT_NAME,1,60),&#xD;&#xA;&#x9;&#x9;&#x9;&#x9; 'C',&#xD;&#xA;&#x9;&#x9;&#x9;&#x9;case when IND_INACTIVE=0 then 'N' else 'S'&#xD;&#xA;&#x9;&#x9;FROM   [&quot;+ context.intermediateDB + &quot;].[dbo].VW_import_agent &#xD;&#xA;&#x9;&#x9;WHERE&#x9;IND_IMPORT = 9&#xD;&#xA;&#x9;&#x9;&#xD;&#xA;&#x9;&#x9;/* Load WRK_PERSON_ADDR from  [&quot;+ context.intermediateDB + &quot;].[dbo].VW_IMPORT_AGENT_PERSONS */&#xD;&#xA;&#x9;&#x9;DELETE FROM   wrk_person_addr    &#xD;&#xA;&#x9;&#x9;&#xD;&#xA;&#x9;&#x9;INSERT INTO  wrk_person_addr   &#xD;&#xA;&#x9;&#x9;&#x9;&#x9;( PERSON_GROUP_CODE , &#xD;&#xA;&#x9;&#x9;&#x9;&#x9;AGENT_CODE , &#xD;&#xA;&#x9;&#x9;&#x9;&#x9;PERSON_NAME , &#xD;&#xA;&#x9;&#x9;&#x9;&#x9;PERSON_NAME_LANG2 ,&#xD;&#xA;&#x9;&#x9;&#x9;&#x9;NATIONALITY_COUNTRY_CODE , &#xD;&#xA;&#x9;&#x9;&#x9;&#x9;IND_COMPANY , &#xD;&#xA;&#x9;&#x9;&#x9;&#x9;LEGAL_NATURE , &#xD;&#xA;&#x9;&#x9;&#x9;&#x9;LEGAL_NATURE_LANG2 , &#xD;&#xA;&#x9;&#x9;&#x9;&#x9;LEGAL_ID_TYPE , &#xD;&#xA;&#x9;&#x9;&#x9;&#x9;LEGAL_ID_NBR , &#xD;&#xA;&#x9;&#x9;&#x9;&#x9;INDIVIDUAL_ID_TYPE , &#xD;&#xA;&#x9;&#x9;&#x9;&#x9;INDIVIDUAL_ID_NBR , &#xD;&#xA;&#x9;&#x9;&#x9;&#x9;EMAIL , &#xD;&#xA;&#x9;&#x9;&#x9;&#x9;TELEPHONE , &#xD;&#xA;&#x9;&#x9;&#x9;&#x9;RESIDENCE_COUNTRY_CODE , &#xD;&#xA;&#x9;&#x9;&#x9;&#x9;STATE_NAME , &#xD;&#xA;&#x9;&#x9;&#x9;&#x9;STATE_CODE , &#xD;&#xA;&#x9;&#x9;&#x9;&#x9;CITY_NAME , &#xD;&#xA;&#x9;&#x9;&#x9;&#x9;ADDRESS_ZONE , &#xD;&#xA;&#x9;&#x9;&#x9;&#x9;ADDRESS_STREET , &#xD;&#xA;&#x9;&#x9;&#x9;&#x9;ADDRESS_STREET_LANG2 ,&#xD;&#xA;&#x9;&#x9;&#x9;&#x9;ZIP_CODE , &#xD;&#xA;&#x9;&#x9;&#x9;&#x9;PERSON_NBR , &#xD;&#xA;&#x9;&#x9;&#x9;&#x9;ADDR_NBR , &#xD;&#xA;&#x9;&#x9;&#x9;&#x9;REF_NBR )  &#xD;&#xA;&#x9;&#x9;SELECT&#xD;&#xA;&#x9;&#x9;&#x9;&#x9; PERSON_GROUP_CODE,&#xD;&#xA;&#x9;&#x9;&#x9;&#x9; T.AGENT_CODE,&#xD;&#xA;&#x9;&#x9;&#x9;&#x9; PERSON_NAME,&#xD;&#xA;&#x9;&#x9;&#x9;&#x9; PERSON_NAME_LANG2,&#xD;&#xA;&#x9;&#x9;&#x9;&#x9; NATIONALITY_COUNTRY_CODE,&#xD;&#xA;&#x9;&#x9;&#x9;&#x9; IND_COMPANY,&#xD;&#xA;&#x9;&#x9;&#x9;&#x9; LEGAL_NATURE,&#xD;&#xA;&#x9;&#x9;&#x9;&#x9; LEGAL_NATURE_LANG2,&#xD;&#xA;&#x9;&#x9;&#x9;&#x9; LEGAL_ID_TYPE,&#xD;&#xA;&#x9;&#x9;&#x9;&#x9; LEGAL_ID_NBR,&#xD;&#xA;&#x9;&#x9;&#x9;&#x9; INDIVIDUAL_ID_TYPE,&#xD;&#xA;&#x9;&#x9;&#x9;&#x9; INDIVIDUAL_ID_NBR,&#xD;&#xA;&#x9;&#x9;&#x9;&#x9; EMAIL,&#xD;&#xA;&#x9;&#x9;&#x9;&#x9; TELEPHONE,&#xD;&#xA;&#x9;&#x9;&#x9;&#x9; RESIDENCE_COUNTRY_CODE,&#xD;&#xA;&#x9;&#x9;&#x9;&#x9; STATE_NAME,&#xD;&#xA;&#x9;&#x9;&#x9;&#x9; STATE_CODE,&#xD;&#xA;&#x9;&#x9;&#x9;&#x9; CITY_NAME,&#xD;&#xA;&#x9;&#x9;&#x9;&#x9; ADDRESS_ZONE,&#xD;&#xA;&#x9;&#x9;&#x9;&#x9; ADDRESS_STREET,&#xD;&#xA;&#x9;&#x9;&#x9;&#x9; ADDRESS_STREET_LANG2,&#xD;&#xA;&#x9;&#x9;&#x9;&#x9; ZIP_CODE,&#xD;&#xA;&#x9;&#x9;&#x9;&#x9; null,&#xD;&#xA;&#x9;&#x9;&#x9;&#x9; null,&#xD;&#xA;&#x9;&#x9;&#x9;&#x9; 1&#xD;&#xA;&#x9;&#x9;FROM   [&quot;+ context.intermediateDB + &quot;].[dbo].VW_import_agent_persons T&#xD;&#xA;&#x9;&#x9; JOIN  [&quot;+ context.intermediateDB + &quot;].[dbo].VW_import_agent A on A.AGENT_CODE = T.AGENT_CODE&#xD;&#xA;&#x9;&#x9;&#xD;&#xA;&#x9;&#x9;/* Call procedure ImportSetPersonNbr() to set PERSON_NBR and ADDR_NBR.&#xD;&#xA;&#x9;&#x9;This procedure will already insert persons linked to the agent, so there's no need to&#xD;&#xA;&#x9;&#x9;further process ther generated person numbers */&#xD;&#xA;&#x9;&#x9;EXEC IMPORTSETPERSONNBR&#xD;&#xA;&#xD;&#xA;&#x9;&#x9;&#xD;&#xA;&#xD;&#xA;&#x9;&#x9;SET NOCOUNT OFF&#xD;&#xA;&#xD;&#xA;&#x9;END&quot;"/>
    <elementParameter field="LABEL" name="NOTE" value="This option only applies when deploying and running in the Talend Runtime" show="false"/>
    <elementParameter field="CHECK" name="SPECIFY_DATASOURCE_ALIAS" value="false" show="false"/>
    <elementParameter field="TEXT" name="DATASOURCE_ALIAS" value="&quot;&quot;" show="false"/>
    <elementParameter field="CHECK" name="DIE_ON_ERROR" value="false"/>
    <elementParameter field="TEXT" name="PROPERTIES" value="&quot;&quot;" show="false"/>
    <elementParameter field="CHECK" name="ACTIVE_DIR_AUTH" value="false" show="false"/>
    <elementParameter field="CHECK" name="PROPAGATE_RECORD_SET" value="false"/>
    <elementParameter field="COLUMN_LIST" name="RECORD_SET_COLUMN" value="" show="false"/>
    <elementParameter field="CHECK" name="USE_PREPAREDSTATEMENT" value="false"/>
    <elementParameter field="TABLE" name="SET_PREPAREDSTATEMENT_PARAMETERS" show="false"/>
    <elementParameter field="ENCODING_TYPE" name="ENCODING" value="&quot;ISO-8859-15&quot;" show="false"/>
    <elementParameter field="TECHNICAL" name="ENCODING:ENCODING_TYPE" value="ISO-8859-15"/>
    <elementParameter field="TEXT" name="COMMIT_EVERY" value="10000" show="false"/>
    <elementParameter field="TEXT" name="CONNECTION_FORMAT" value="row"/>
    <metadata connector="FLOW" name="tMSSqlRow_24"/>
    <metadata connector="REJECT" name="REJECT">
      <column defaultValue="" key="false" length="255" name="errorCode" nullable="true" precision="0" sourceType="" type="id_String" originalLength="-1" usefulColumn="true"/>
      <column defaultValue="" key="false" length="255" name="errorMessage" nullable="true" precision="0" sourceType="" type="id_String" originalLength="-1" usefulColumn="true"/>
    </metadata>
  </node>
  <node componentName="tLogRow" componentVersion="0.101" offsetLabelX="0" offsetLabelY="0" posX="768" posY="2592">
    <elementParameter field="TEXT" name="UNIQUE_NAME" value="tLogRow_25" show="false"/>
    <elementParameter field="RADIO" name="BASIC_MODE" value="false"/>
    <elementParameter field="RADIO" name="TABLE_PRINT" value="false"/>
    <elementParameter field="RADIO" name="VERTICAL" value="true"/>
    <elementParameter field="RADIO" name="PRINT_UNIQUE" value="true"/>
    <elementParameter field="RADIO" name="PRINT_LABEL" value="false"/>
    <elementParameter field="RADIO" name="PRINT_UNIQUE_LABEL" value="false"/>
    <elementParameter field="TEXT" name="FIELDSEPARATOR" value="&quot;|&quot;" show="false"/>
    <elementParameter field="CHECK" name="PRINT_HEADER" value="false" show="false"/>
    <elementParameter field="CHECK" name="PRINT_UNIQUE_NAME" value="false" show="false"/>
    <elementParameter field="CHECK" name="PRINT_COLNAMES" value="false" show="false"/>
    <elementParameter field="CHECK" name="USE_FIXED_LENGTH" value="false" show="false"/>
    <elementParameter field="TABLE" name="LENGTHS" show="false">
      <elementValue elementRef="SCHEMA_COLUMN" value="errorCode"/>
      <elementValue elementRef="LENGTH" value="10"/>
      <elementValue elementRef="SCHEMA_COLUMN" value="errorMessage"/>
      <elementValue elementRef="LENGTH" value="10"/>
    </elementParameter>
    <elementParameter field="CHECK" name="PRINT_CONTENT_WITH_LOG4J" value="true"/>
    <elementParameter field="TEXT" name="SCHEMA_OPT_NUM" value="100" show="false"/>
    <elementParameter field="TEXT" name="CONNECTION_FORMAT" value="row"/>
    <metadata connector="FLOW" name="tLogRow_25">
      <column defaultValue="" key="false" length="255" name="errorCode" nullable="true" precision="0" sourceType="" type="id_String" originalLength="-1" usefulColumn="true"/>
      <column defaultValue="" key="false" length="255" name="errorMessage" nullable="true" precision="0" sourceType="" type="id_String" originalLength="-1" usefulColumn="true"/>
    </metadata>
  </node>
  <node componentName="tLogRow" componentVersion="0.101" offsetLabelX="0" offsetLabelY="0" posX="896" posY="2592">
    <elementParameter field="TEXT" name="UNIQUE_NAME" value="tLogRow_26" show="false"/>
    <elementParameter field="RADIO" name="BASIC_MODE" value="false"/>
    <elementParameter field="RADIO" name="TABLE_PRINT" value="false"/>
    <elementParameter field="RADIO" name="VERTICAL" value="true"/>
    <elementParameter field="RADIO" name="PRINT_UNIQUE" value="true"/>
    <elementParameter field="RADIO" name="PRINT_LABEL" value="false"/>
    <elementParameter field="RADIO" name="PRINT_UNIQUE_LABEL" value="false"/>
    <elementParameter field="TEXT" name="FIELDSEPARATOR" value="&quot;|&quot;" show="false"/>
    <elementParameter field="CHECK" name="PRINT_HEADER" value="false" show="false"/>
    <elementParameter field="CHECK" name="PRINT_UNIQUE_NAME" value="false" show="false"/>
    <elementParameter field="CHECK" name="PRINT_COLNAMES" value="false" show="false"/>
    <elementParameter field="CHECK" name="USE_FIXED_LENGTH" value="false" show="false"/>
    <elementParameter field="TABLE" name="LENGTHS" show="false">
      <elementValue elementRef="SCHEMA_COLUMN" value="errorCode"/>
      <elementValue elementRef="LENGTH" value="10"/>
      <elementValue elementRef="SCHEMA_COLUMN" value="errorMessage"/>
      <elementValue elementRef="LENGTH" value="10"/>
    </elementParameter>
    <elementParameter field="CHECK" name="PRINT_CONTENT_WITH_LOG4J" value="true"/>
    <elementParameter field="TEXT" name="SCHEMA_OPT_NUM" value="100" show="false"/>
    <elementParameter field="TEXT" name="CONNECTION_FORMAT" value="row"/>
    <metadata connector="FLOW" name="tLogRow_26">
      <column defaultValue="" key="false" length="255" name="errorCode" nullable="true" precision="0" sourceType="" type="id_String" originalLength="-1" usefulColumn="true"/>
      <column defaultValue="" key="false" length="255" name="errorMessage" nullable="true" precision="0" sourceType="" type="id_String" originalLength="-1" usefulColumn="true"/>
    </metadata>
  </node>
  <node componentName="tMSSqlRow" componentVersion="0.102" offsetLabelX="0" offsetLabelY="0" posX="-96" posY="2656">
    <elementParameter field="TEXT" name="UNIQUE_NAME" value="tMSSqlRow_25" show="false"/>
    <elementParameter field="CHECK" name="USE_EXISTING_CONNECTION" value="true"/>
    <elementParameter field="COMPONENT_LIST" name="CONNECTION" value="tMSSqlConnection_4"/>
    <elementParameter field="CLOSED_LIST" name="DRIVER" value="JTDS" show="false"/>
    <elementParameter field="TEXT" name="HOST" value="&quot;&quot;" show="false"/>
    <elementParameter field="TEXT" name="PORT" value="&quot;1433&quot;" show="false"/>
    <elementParameter field="TEXT" name="DB_SCHEMA" value="&quot;&quot;" show="false"/>
    <elementParameter field="TEXT" name="DBNAME" value="&quot;&quot;" show="false"/>
    <elementParameter field="TEXT" name="TYPE" value="MSSQL" show="false"/>
    <elementParameter field="TEXT" name="USER" value="&quot;&quot;" show="false"/>
    <elementParameter field="PASSWORD" name="PASS" value="enc:system.encryption.key.v1:rsP2CqAapkex1MQXX8EUIHzJLxTFUb7fadT5v7Tx" show="false"/>
    <elementParameter field="DBTABLE" name="TABLE" value="&quot;&quot;"/>
    <elementParameter field="CHECK" name="IDENTITY_INSERT" value="false"/>
    <elementParameter field="QUERYSTORE_TYPE" name="QUERYSTORE" value="&quot;&quot;"/>
    <elementParameter field="TECHNICAL" name="QUERYSTORE:REPOSITORY_QUERYSTORE_TYPE" value="" show="false"/>
    <elementParameter field="TECHNICAL" name="QUERYSTORE:QUERYSTORE_TYPE" value="BUILT_IN"/>
    <elementParameter field="MEMO_SQL" name="QUERY" value="&quot;If Exists ( SELECT name &#xD;&#xA;            FROM sysobjects  &#xD;&#xA;            WHERE name = 'ImportSetPersonNbr'&#xD;&#xA;            AND type = 'P')&#xD;&#xA;&#x9;DROP PROCEDURE ImportSetPersonNbr&#xD;&#xA;&quot;"/>
    <elementParameter field="LABEL" name="NOTE" value="This option only applies when deploying and running in the Talend Runtime" show="false"/>
    <elementParameter field="CHECK" name="SPECIFY_DATASOURCE_ALIAS" value="false" show="false"/>
    <elementParameter field="TEXT" name="DATASOURCE_ALIAS" value="&quot;&quot;" show="false"/>
    <elementParameter field="CHECK" name="DIE_ON_ERROR" value="false"/>
    <elementParameter field="TEXT" name="PROPERTIES" value="&quot;&quot;" show="false"/>
    <elementParameter field="CHECK" name="ACTIVE_DIR_AUTH" value="false" show="false"/>
    <elementParameter field="CHECK" name="PROPAGATE_RECORD_SET" value="false"/>
    <elementParameter field="COLUMN_LIST" name="RECORD_SET_COLUMN" value="" show="false"/>
    <elementParameter field="CHECK" name="USE_PREPAREDSTATEMENT" value="false"/>
    <elementParameter field="TABLE" name="SET_PREPAREDSTATEMENT_PARAMETERS" show="false"/>
    <elementParameter field="ENCODING_TYPE" name="ENCODING" value="&quot;ISO-8859-15&quot;" show="false"/>
    <elementParameter field="TECHNICAL" name="ENCODING:ENCODING_TYPE" value="ISO-8859-15"/>
    <elementParameter field="TEXT" name="COMMIT_EVERY" value="10000" show="false"/>
    <elementParameter field="TEXT" name="CONNECTION_FORMAT" value="row"/>
    <metadata connector="FLOW" name="tMSSqlRow_25"/>
    <metadata connector="REJECT" name="REJECT">
      <column defaultValue="" key="false" length="255" name="errorCode" nullable="true" precision="0" sourceType="" type="id_String" originalLength="-1" usefulColumn="true"/>
      <column defaultValue="" key="false" length="255" name="errorMessage" nullable="true" precision="0" sourceType="" type="id_String" originalLength="-1" usefulColumn="true"/>
    </metadata>
  </node>
  <node componentName="tMSSqlRow" componentVersion="0.102" offsetLabelX="0" offsetLabelY="0" posX="32" posY="2656">
    <elementParameter field="TEXT" name="UNIQUE_NAME" value="tMSSqlRow_26" show="false"/>
    <elementParameter field="CHECK" name="USE_EXISTING_CONNECTION" value="true"/>
    <elementParameter field="COMPONENT_LIST" name="CONNECTION" value="tMSSqlConnection_4"/>
    <elementParameter field="CLOSED_LIST" name="DRIVER" value="JTDS" show="false"/>
    <elementParameter field="TEXT" name="HOST" value="&quot;&quot;" show="false"/>
    <elementParameter field="TEXT" name="PORT" value="&quot;1433&quot;" show="false"/>
    <elementParameter field="TEXT" name="DB_SCHEMA" value="&quot;&quot;" show="false"/>
    <elementParameter field="TEXT" name="DBNAME" value="&quot;&quot;" show="false"/>
    <elementParameter field="TEXT" name="TYPE" value="MSSQL" show="false"/>
    <elementParameter field="TEXT" name="USER" value="&quot;&quot;" show="false"/>
    <elementParameter field="PASSWORD" name="PASS" value="enc:system.encryption.key.v1:+3KHw4WLHfZIE7Y9Y3JPUsgwWHmKKHYxa81bQD/P" show="false"/>
    <elementParameter field="DBTABLE" name="TABLE" value="&quot;&quot;"/>
    <elementParameter field="CHECK" name="IDENTITY_INSERT" value="false"/>
    <elementParameter field="QUERYSTORE_TYPE" name="QUERYSTORE" value="&quot;&quot;"/>
    <elementParameter field="TECHNICAL" name="QUERYSTORE:REPOSITORY_QUERYSTORE_TYPE" value="" show="false"/>
    <elementParameter field="TECHNICAL" name="QUERYSTORE:QUERYSTORE_TYPE" value="BUILT_IN"/>
    <elementParameter field="MEMO_SQL" name="QUERY" value="&quot;CREATE PROCEDURE ImportSetPersonNbr&#xD;&#xA;AS &#xD;&#xA;&#x9;BEGIN&#xD;&#xA;&#x9;&#x9;SET NOCOUNT ON&#xD;&#xA;&#x9;&#x9;&#xD;&#xA;&#x9;&#x9;/* Procedure name: ImportSetPersonNbr&#xD;&#xA;&#x9;&#x9;Input: work table WRK_PERSON_ADDR with null PERSON_NBR / ADDR_NBR,&#xD;&#xA;&#x9;&#x9;Output: assigned values for PERSON_NBR / ADDR_NBR, from existing data if possible,&#xD;&#xA;&#x9;&#x9;otherwise new data is created in IP_PERSON and IP_PERSON_ADDRESSES.&#xD;&#xA;&#x9;&#x9;create or replace procedure ImportSetPersonNbr as&#xD;&#xA;&#x9;&#x9;*/&#xD;&#xA;&#x9;&#x9;&#xD;&#xA;&#x9;&#x9;DECLARE @time1                                    DATETIME &#xD;&#xA;&#x9;&#x9;DECLARE @NumPERSON_NBR                            FLOAT &#xD;&#xA;&#xD;&#xA;&#x9;&#x9;DECLARE cur1 cursor LOCAL FOR &#xD;&#xA;&#x9;&#x9;SELECT DISTINCT&#xD;&#xA;&#x9;&#x9;&#x9;&#x9; PERSON_NAME,&#xD;&#xA;&#x9;&#x9;&#x9;&#x9; PERSON_NAME_LANG2,&#xD;&#xA;&#x9;&#x9;&#x9;&#x9; &#xD;&#xA;&#x9;&#x9;&#x9;&#x9;CASE IND_COMPANY &#xD;&#xA;&#x9;&#x9;&#x9;&#x9;&#x9;WHEN 1 THEN 'M' &#xD;&#xA;&#x9;&#x9;&#x9;&#x9;&#x9;ELSE 'F' &#xD;&#xA;&#x9;&#x9;&#x9;&#x9;END PERSON_WCODE,&#xD;&#xA;&#x9;&#x9;&#x9;&#x9; NATIONALITY_COUNTRY_CODE,&#xD;&#xA;&#x9;&#x9;&#x9;&#x9; AGENT_CODE,&#xD;&#xA;&#x9;&#x9;&#x9;&#x9; LEGAL_NATURE,&#xD;&#xA;&#x9;&#x9;&#x9;&#x9; LEGAL_NATURE_LANG2,&#xD;&#xA;&#x9;&#x9;&#x9;&#x9; TELEPHONE,&#xD;&#xA;&#x9;&#x9;&#x9;&#x9; EMAIL,&#xD;&#xA;&#x9;&#x9;&#x9;&#x9; PERSON_GROUP_CODE,&#xD;&#xA;&#x9;&#x9;&#x9;&#x9; LEGAL_ID_TYPE,&#xD;&#xA;&#x9;&#x9;&#x9;&#x9; LEGAL_ID_NBR,&#xD;&#xA;&#x9;&#x9;&#x9;&#x9; INDIVIDUAL_ID_TYPE,&#xD;&#xA;&#x9;&#x9;&#x9;&#x9; INDIVIDUAL_ID_NBR&#xD;&#xA;&#x9;&#x9;FROM  wrk_person_addr &#xD;&#xA;&#x9;&#x9;WHERE&#x9; person_nbr  is null&#xD;&#xA;&#x9;&#x9;&#xD;&#xA;&#x9;&#x9;DECLARE @rec1_PERSON_NAME&#x9;&#x9;&#x9;&#x9;&#x9;VARCHAR(2000)&#xD;&#xA;&#x9;&#x9;DECLARE @rec1_PERSON_NAME_LANG2&#x9;&#x9;&#x9;&#x9;VARCHAR(2000)&#xD;&#xA;&#x9;&#x9;DECLARE @rec1_PERSON_WCODE&#x9;&#x9;&#x9;&#x9;&#x9;VARCHAR(200)&#x9;&#xD;&#xA;&#x9;&#x9;DECLARE @rec1_NATIONALITY_COUNTRY_CODE&#x9;&#x9;VARCHAR(200)&#xD;&#xA;&#x9;&#x9;DECLARE @rec1_AGENT_CODE&#x9;&#x9;&#x9;&#x9;&#x9;NUMERIC&#xD;&#xA;&#x9;&#x9;DECLARE @rec1_LEGAL_NATURE&#x9;&#x9;&#x9;&#x9;&#x9;VARCHAR(2000)&#xD;&#xA;&#x9;&#x9;DECLARE @rec1_LEGAL_NATURE_LANG2&#x9;&#x9;&#x9;VARCHAR(2000)&#xD;&#xA;&#x9;&#x9;DECLARE @rec1_TELEPHONE&#x9;&#x9;&#x9;&#x9;&#x9;&#x9;VARCHAR(200)&#xD;&#xA;&#x9;&#x9;DECLARE @rec1_EMAIL&#x9;&#x9;&#x9;&#x9;&#x9;&#x9;&#x9;VARCHAR(200)&#xD;&#xA;&#x9;&#x9;DECLARE @rec1_PERSON_GROUP_CODE&#x9;&#x9;&#x9;&#x9;NUMERIC&#xD;&#xA;&#x9;&#x9;DECLARE @rec1_LEGAL_ID_TYPE&#x9;&#x9;&#x9;&#x9;&#x9;VARCHAR(200)&#xD;&#xA;&#x9;&#x9;DECLARE @rec1_LEGAL_ID_NBR&#x9;&#x9;&#x9;&#x9;&#x9;NUMERIC&#xD;&#xA;&#x9;&#x9;DECLARE @rec1_INDIVIDUAL_ID_TYPE&#x9;&#x9;&#x9;VARCHAR(200)&#xD;&#xA;&#x9;&#x9;DECLARE @rec1_INDIVIDUAL_ID_NBR&#x9;&#x9;&#x9;&#x9;NUMERIC&#xD;&#xA;&#xD;&#xA;&#x9;&#x9;DECLARE @NumADDR_NBR                        FLOAT &#xD;&#xA;&#xD;&#xA;&#x9;&#x9;DECLARE cur2 cursor LOCAL FOR &#xD;&#xA;&#x9;&#x9;SELECT DISTINCT&#xD;&#xA;&#x9;&#x9;&#x9;&#x9; PERSON_NBR,&#xD;&#xA;&#x9;&#x9;&#x9;&#x9; ADDRESS_STREET,&#xD;&#xA;&#x9;&#x9;&#x9;&#x9; ADDRESS_STREET_LANG2,&#xD;&#xA;&#x9;&#x9;&#x9;&#x9; ADDRESS_ZONE,&#xD;&#xA;&#x9;&#x9;&#x9;&#x9; CITY_NAME,&#xD;&#xA;&#x9;&#x9;&#x9;&#x9; RESIDENCE_COUNTRY_CODE,&#xD;&#xA;&#x9;&#x9;&#x9;&#x9; STATE_CODE,&#xD;&#xA;&#x9;&#x9;&#x9;&#x9; CITY_CODE,&#xD;&#xA;&#x9;&#x9;&#x9;&#x9; STATE_NAME,&#xD;&#xA;&#x9;&#x9;&#x9;&#x9; ZIP_CODE&#xD;&#xA;&#x9;&#x9;FROM  wrk_person_addr &#xD;&#xA;&#x9;&#x9;WHERE&#x9; addr_nbr  is null&#xD;&#xA;&#x9;&#x9;&#xD;&#xA;&#x9;&#x9;DECLARE @rec2_PERSON_NBR&#x9;&#x9;&#x9;&#x9;NUMERIC&#xD;&#xA;&#x9;&#x9;DECLARE @rec2_ADDRESS_STREET&#x9;&#x9;&#x9;VARCHAR(2000)&#xD;&#xA;&#x9;&#x9;DECLARE @rec2_ADDRESS_STREET_LANG2&#x9;&#x9;VARCHAR(2000)&#xD;&#xA;&#x9;&#x9;DECLARE @rec2_ADDRESS_ZONE&#x9;&#x9;&#x9;&#x9;VARCHAR(2000)&#xD;&#xA;&#x9;&#x9;DECLARE @rec2_CITY_NAME&#x9;&#x9;&#x9;&#x9;&#x9;VARCHAR(2000)&#xD;&#xA;&#x9;&#x9;DECLARE @rec2_RESIDENCE_COUNTRY_CODE&#x9;VARCHAR(200)&#xD;&#xA;&#x9;&#x9;DECLARE @rec2_STATE_CODE&#x9;&#x9;&#x9;&#x9;VARCHAR(200)&#xD;&#xA;&#x9;&#x9;DECLARE @rec2_CITY_CODE&#x9;&#x9;&#x9;&#x9;VARCHAR(200)&#xD;&#xA;&#x9;&#x9;DECLARE @rec2_STATE_NAME&#x9;&#x9;&#x9;&#x9;VARCHAR(200)&#xD;&#xA;&#x9;&#x9;DECLARE @rec2_ZIP_CODE&#x9;&#x9;&#x9;&#x9;&#x9;VARCHAR(200)&#xD;&#xA;&#xD;&#xA;&#x9;&#x9;/* In order to use existing tuples in IP_PERSON, a massive update of WRK_PERSON_ADDR.PERSON_NBR is done,&#xD;&#xA;&#x9;&#x9;       taking into account the possibility of NULL values */&#xD;&#xA;&#x9;&#x9;SELECT @time1  =  GETDATE()&#xD;&#xA;&#x9;&#x9;&#xD;&#xA;&#x9;&#x9;UPDATE  T   &#xD;&#xA;&#x9;&#x9;SET&#x9;person_nbr = (&#x9;SELECT min(person_nbr)&#xD;&#xA;&#x9;&#x9;&#x9;FROM  IP_PERSON P &#xD;&#xA;&#x9;&#x9;&#x9;WHERE&#x9; P.PERSON_NAME  = T.PERSON_NAME COLLATE DATABASE_DEFAULT&#xD;&#xA;&#x9;&#x9;&#x9; AND&#x9;P.PERSON_WCODE  = &#xD;&#xA;&#x9;&#x9;&#x9;&#x9;CASE T.IND_COMPANY &#xD;&#xA;&#x9;&#x9;&#x9;&#x9;&#x9;WHEN 1 THEN 'M' &#xD;&#xA;&#x9;&#x9;&#x9;&#x9;&#x9;ELSE 'F' &#xD;&#xA;&#x9;&#x9;&#x9;&#x9;END&#xD;&#xA;&#x9;&#x9;&#x9; AND&#x9;ISNULL(P.PERSON_NAME_LANG2, '')  = ISNULL(T.PERSON_NAME_LANG2, '')&#x9;&#x9;&#x9;COLLATE DATABASE_DEFAULT&#x9;&#xD;&#xA;&#x9;&#x9;&#x9; AND&#x9;P.NATIONALITY_COUNTRY_CODE  = T.NATIONALITY_COUNTRY_CODE&#x9;&#x9;&#x9;COLLATE DATABASE_DEFAULT&#xD;&#xA;&#x9;&#x9;&#x9; AND&#x9;ISNULL(P.PERSON_GROUP_NBR, '')  = ISNULL(T.PERSON_GROUP_CODE, '') COLLATE DATABASE_DEFAULT&#xD;&#xA;&#x9;&#x9;&#x9; AND&#x9;ISNULL(P.LEGAL_NATURE, '')  = ISNULL(T.LEGAL_NATURE, '')&#x9;&#x9;&#x9;COLLATE DATABASE_DEFAULT&#xD;&#xA;&#x9;&#x9;&#x9; AND&#x9;ISNULL(P.LEGAL_NATURE_LANG2, '')  = ISNULL(T.LEGAL_NATURE_LANG2, '')&#x9;&#x9;&#x9;COLLATE DATABASE_DEFAULT&#xD;&#xA;&#x9;&#x9;&#x9; AND&#x9;ISNULL(P.AGENT_CODE, 0)  = ISNULL(T.AGENT_CODE, 0)&#xD;&#xA;&#x9;&#x9;&#x9; AND&#x9;ISNULL(P.GRAL_PERSON_ID_TYP, '')  = ISNULL(T.LEGAL_ID_TYPE, '')&#x9;COLLATE DATABASE_DEFAULT&#xD;&#xA;&#x9;&#x9;&#x9; AND&#x9;ISNULL(P.GRAL_PERSON_ID_NBR, 0)  = ISNULL(T.LEGAL_ID_NBR, 0)&#xD;&#xA;&#x9;&#x9;&#x9; AND&#x9;ISNULL(P.INDI_PERSON_ID_TYP, '')  = ISNULL(T.INDIVIDUAL_ID_TYPE, '')&#x9;COLLATE DATABASE_DEFAULT&#xD;&#xA;&#x9;&#x9;&#x9; AND&#x9;ISNULL(P.INDI_PERSON_ID_NBR, 0)  = ISNULL(T.INDIVIDUAL_ID_NBR, 0)&#xD;&#xA;&#x9;&#x9;&#x9; AND&#x9;ISNULL(P.EMAIL, '')  = ISNULL(T.EMAIL, '')&#x9;&#x9;&#x9;&#x9;&#x9;&#x9;&#x9;COLLATE DATABASE_DEFAULT&#xD;&#xA;&#x9;&#x9;&#x9; AND&#x9;ISNULL(P.TELEPHONE, '')  = ISNULL(T.TELEPHONE, '')&#x9;&#x9;&#x9;&#x9;&#x9;COLLATE DATABASE_DEFAULT&#xD;&#xA;&#x9;&#x9;) &#xD;&#xA;&#x9;&#x9;FROM  wrk_person_addr T; &#xD;&#xA;&#x9;&#x9;&#xD;&#xA;&#x9;&#x9;INSERT INTO  wrk_log    &#xD;&#xA;&#x9;&#x9; VALUES &#x9;&#x9;( 'First massive update of PERSON_NBR' , &#xD;&#xA;&#x9;&#x9;&#x9;&#x9;@time1 , datediff(ss, @time1, getdate()));&#xD;&#xA;&#x9;&#x9;&#xD;&#xA;&#x9;&#x9;/* now the new persons are added individually to IP_PERSON */&#xD;&#xA;&#x9;&#x9;SELECT @time1  =  GETDATE()&#xD;&#xA;&#x9;&#x9;&#xD;&#xA;&#x9;&#x9;/* initilize numbering valriable */&#xD;&#xA;&#x9;&#x9;SELECT @NumPERSON_NBR  =  maxnumber&#xD;&#xA;&#x9;&#x9;FROM  CF_THIS_CONTROL &#xD;&#xA;&#x9;&#x9;WHERE&#x9; TABLENAME  = 'PERSONA'&#xD;&#xA;&#x9;&#x9;&#xD;&#xA;&#x9;&#x9;/* process WRK_PERSON_ADDR with no matching IP_PERSON (i.e. with null PERSON_NBR), taking into&#xD;&#xA;&#x9;&#x9;account that the same person may appear several times */&#xD;&#xA;&#x9;&#x9;&#xD;&#xA;&#x9;&#x9;&#xD;&#xA;&#x9;&#x9;OPEN cur1 &#xD;&#xA;&#x9;&#x9;DECLARE @count&#x9;&#x9; INT &#xD;&#xA;&#x9;&#x9;SELECT @count = 1 &#xD;&#xA;&#x9;&#x9;WHILE (0 = 0) &#xD;&#xA;&#x9;&#x9;BEGIN --( &#xD;&#xA;&#x9;&#x9;&#x9;&#xD;&#xA;&#x9;&#x9;&#x9;fetch NEXT FROM cur1 INTO @rec1_PERSON_NAME,@rec1_PERSON_NAME_LANG2, @rec1_PERSON_WCODE, @rec1_NATIONALITY_COUNTRY_CODE, @rec1_AGENT_CODE, @rec1_LEGAL_NATURE,@rec1_LEGAL_NATURE_LANG2, @rec1_TELEPHONE, @rec1_EMAIL, @rec1_PERSON_GROUP_CODE, @rec1_LEGAL_ID_TYPE, @rec1_LEGAL_ID_NBR, @rec1_INDIVIDUAL_ID_TYPE, @rec1_INDIVIDUAL_ID_NBR&#xD;&#xA;&#x9;&#x9;&#x9;IF (@@FETCH_STATUS = -1) &#xD;&#xA;&#x9;&#x9;&#x9;BREAK&#xD;&#xA;&#xD;&#xA;&#x9;&#x9;&#x9;/* Increment the variable with the last person number */&#xD;&#xA;&#x9;&#x9;&#x9;&#xD;&#xA;&#x9;&#x9;&#x9;SELECT @NumPERSON_NBR  = @NumPERSON_NBR + 1 &#xD;&#xA;&#x9;&#x9;&#x9;/* Insert a new tuple in IP_PERSON with the generated code and the data from WRK_PERSON_ADDR */&#xD;&#xA;&#x9;&#x9;&#x9;INSERT INTO  IP_PERSON   &#xD;&#xA;&#x9;&#x9;&#x9;&#x9;&#x9;( ROW_VERSION , &#xD;&#xA;&#x9;&#x9;&#x9;&#x9;&#x9;PERSON_NBR , &#xD;&#xA;&#x9;&#x9;&#x9;&#x9;&#x9;PERSON_NAME , &#xD;&#xA;&#x9;&#x9;&#x9;&#x9;&#x9;PERSON_NAME_LANG2 ,&#xD;&#xA;&#x9;&#x9;&#x9;&#x9;&#x9;PERSON_WCODE , &#xD;&#xA;&#x9;&#x9;&#x9;&#x9;&#x9;NATIONALITY_COUNTRY_CODE , &#xD;&#xA;&#x9;&#x9;&#x9;&#x9;&#x9;AGENT_CODE , &#xD;&#xA;&#x9;&#x9;&#x9;&#x9;&#x9;LEGAL_NATURE , &#xD;&#xA;&#x9;&#x9;&#x9;&#x9;&#x9;LEGAL_NATURE_LANG2 ,&#xD;&#xA;&#x9;&#x9;&#x9;&#x9;&#x9;TELEPHONE , &#xD;&#xA;&#x9;&#x9;&#x9;&#x9;&#x9;EMAIL , &#xD;&#xA;&#x9;&#x9;&#x9;&#x9;&#x9;PERSON_GROUP_NBR , &#xD;&#xA;&#x9;&#x9;&#x9;&#x9;&#x9;GRAL_PERSON_ID_TYP , &#xD;&#xA;&#x9;&#x9;&#x9;&#x9;&#x9;GRAL_PERSON_ID_NBR , &#xD;&#xA;&#x9;&#x9;&#x9;&#x9;&#x9;GRAL_PERSON_ID_TXT , &#xD;&#xA;&#x9;&#x9;&#x9;&#x9;&#x9;INDI_PERSON_ID_TYP , &#xD;&#xA;&#x9;&#x9;&#x9;&#x9;&#x9;INDI_PERSON_ID_NBR , &#xD;&#xA;&#x9;&#x9;&#x9;&#x9;&#x9;INDI_PERSON_ID_TXT )  &#xD;&#xA;&#x9;&#x9;&#x9; VALUES &#x9;&#x9;( 1 , &#xD;&#xA;&#x9;&#x9;&#x9;&#x9;&#x9;@NumPERSON_NBR , &#xD;&#xA;&#x9;&#x9;&#x9;&#x9;&#x9;@rec1_PERSON_NAME , &#xD;&#xA;&#x9;&#x9;&#x9;&#x9;&#x9;@rec1_PERSON_NAME_LANG2 ,&#xD;&#xA;&#x9;&#x9;&#x9;&#x9;&#x9;@rec1_PERSON_WCODE , &#xD;&#xA;&#x9;&#x9;&#x9;&#x9;&#x9;@rec1_NATIONALITY_COUNTRY_CODE , &#xD;&#xA;&#x9;&#x9;&#x9;&#x9;&#x9;@rec1_AGENT_CODE , &#xD;&#xA;&#x9;&#x9;&#x9;&#x9;&#x9;@rec1_LEGAL_NATURE , &#xD;&#xA;&#x9;&#x9;&#x9;&#x9;&#x9;@rec1_LEGAL_NATURE_LANG2 , &#xD;&#xA;&#x9;&#x9;&#x9;&#x9;&#x9;@rec1_TELEPHONE , &#xD;&#xA;&#x9;&#x9;&#x9;&#x9;&#x9;@rec1_EMAIL , &#xD;&#xA;&#x9;&#x9;&#x9;&#x9;&#x9;@rec1_PERSON_GROUP_CODE , &#xD;&#xA;&#x9;&#x9;&#x9;&#x9;&#x9;@rec1_LEGAL_ID_TYPE , &#xD;&#xA;&#x9;&#x9;&#x9;&#x9;&#x9;@rec1_LEGAL_ID_NBR , &#xD;&#xA;&#x9;&#x9;&#x9;&#x9;&#x9;CAST(@rec1_LEGAL_ID_NBR as VARCHAR (15)) , &#xD;&#xA;&#x9;&#x9;&#x9;&#x9;&#x9;@rec1_INDIVIDUAL_ID_TYPE , &#xD;&#xA;&#x9;&#x9;&#x9;&#x9;&#x9;@rec1_INDIVIDUAL_ID_NBR , &#xD;&#xA;&#x9;&#x9;&#x9;&#x9;&#x9;CAST(@rec1_INDIVIDUAL_ID_NBR as VARCHAR (15)) )  &#xD;&#xA;&#x9;&#x9;&#x9;&#xD;&#xA;&#x9;&#x9;&#x9;SELECT @count=@count +1&#xD;&#xA;&#x9;&#x9;END --) &#xD;&#xA;&#x9;&#x9;&#xD;&#xA;&#x9;&#x9;&#xD;&#xA;&#x9;&#x9;close cur1&#xD;&#xA;&#x9;&#x9;&#xD;&#xA;&#x9;&#x9;INSERT INTO  wrk_log    &#xD;&#xA;&#x9;&#x9; VALUES &#x9;&#x9;( 'Add new persons' , &#xD;&#xA;&#x9;&#x9;&#x9;&#x9;@time1 , datediff(ss, @time1, getdate()));&#xD;&#xA;&#x9;&#x9;&#xD;&#xA;&#x9;&#x9;/* In order to use the just-inserted tuples in IP_PERSON, the same massive update of WRK_PERSON_ADDR.PERSON_NBR &#xD;&#xA;&#x9;&#x9;       is done again*/&#xD;&#xA;&#x9;&#x9;SELECT @time1  =  GETDATE()&#xD;&#xA;&#x9;&#x9;&#xD;&#xA;&#x9;&#x9;UPDATE  T   &#xD;&#xA;&#x9;&#x9;SET&#x9;person_nbr = (&#x9;SELECT min (person_nbr)&#xD;&#xA;&#x9;&#x9;&#x9;FROM  IP_PERSON P &#xD;&#xA;&#x9;&#x9;&#x9;WHERE&#x9; P.PERSON_NAME  = T.PERSON_NAME COLLATE DATABASE_DEFAULT&#xD;&#xA;&#x9;&#x9;&#x9;AND&#x9;ISNULL(P.PERSON_NAME_LANG2, '')  = ISNULL(T.PERSON_NAME_LANG2, '')&#x9;&#x9;&#x9;COLLATE DATABASE_DEFAULT&#xD;&#xA;&#x9;&#x9;&#x9; AND&#x9;P.PERSON_WCODE  = &#xD;&#xA;&#x9;&#x9;&#x9;&#x9;CASE T.IND_COMPANY &#xD;&#xA;&#x9;&#x9;&#x9;&#x9;&#x9;WHEN 1 THEN 'M' &#xD;&#xA;&#x9;&#x9;&#x9;&#x9;&#x9;ELSE 'F' &#xD;&#xA;&#x9;&#x9;&#x9;&#x9;END&#xD;&#xA;&#x9;&#x9;&#x9; AND&#x9;P.NATIONALITY_COUNTRY_CODE  = T.NATIONALITY_COUNTRY_CODE&#x9;&#x9;&#x9;COLLATE DATABASE_DEFAULT&#xD;&#xA;&#x9;&#x9;&#x9; AND&#x9;ISNULL(P.PERSON_GROUP_NBR, '')  = ISNULL(T.PERSON_GROUP_CODE, '') COLLATE DATABASE_DEFAULT&#xD;&#xA;&#x9;&#x9;&#x9; AND&#x9;ISNULL(P.LEGAL_NATURE_LANG2, '')  = ISNULL(T.LEGAL_NATURE_LANG2, '')&#x9;&#x9;&#x9;COLLATE DATABASE_DEFAULT&#xD;&#xA;&#x9;&#x9;&#x9; AND&#x9;ISNULL(P.LEGAL_NATURE, '')  = ISNULL(T.LEGAL_NATURE, '')&#x9;&#x9;&#x9;COLLATE DATABASE_DEFAULT&#xD;&#xA;&#x9;&#x9;&#x9; AND&#x9;ISNULL(P.AGENT_CODE, 0)  = ISNULL(T.AGENT_CODE, 0)&#xD;&#xA;&#x9;&#x9;&#x9; AND&#x9;ISNULL(P.GRAL_PERSON_ID_TYP, '')  = ISNULL(T.LEGAL_ID_TYPE, '')&#x9;COLLATE DATABASE_DEFAULT&#xD;&#xA;&#x9;&#x9;&#x9; AND&#x9;ISNULL(P.GRAL_PERSON_ID_NBR, 0)  = ISNULL(T.LEGAL_ID_NBR, 0)&#xD;&#xA;&#x9;&#x9;&#x9; AND&#x9;ISNULL(P.INDI_PERSON_ID_TYP, '')  = ISNULL(T.INDIVIDUAL_ID_TYPE, '') COLLATE DATABASE_DEFAULT&#xD;&#xA;&#x9;&#x9;&#x9; AND&#x9;ISNULL(P.INDI_PERSON_ID_NBR, 0)  = ISNULL(T.INDIVIDUAL_ID_NBR, 0)&#xD;&#xA;&#x9;&#x9;&#x9; AND&#x9;ISNULL(P.EMAIL, '')  = ISNULL(T.EMAIL, '')&#x9;&#x9;&#x9;&#x9;&#x9;&#x9;COLLATE DATABASE_DEFAULT&#xD;&#xA;&#x9;&#x9;&#x9; AND&#x9;ISNULL(P.TELEPHONE, '')  = ISNULL(T.TELEPHONE, '')&#x9;&#x9;&#x9;&#x9;COLLATE DATABASE_DEFAULT&#xD;&#xA;&#x9;&#x9;) &#xD;&#xA;&#x9;&#x9;FROM  wrk_person_addr T &#xD;&#xA;&#x9;&#x9;WHERE  person_nbr  is null &#xD;&#xA;&#x9;&#x9;&#xD;&#xA;&#x9;&#x9;INSERT INTO  wrk_log    &#xD;&#xA;&#x9;&#x9; VALUES &#x9;&#x9;( 'Second massive update of PERSON_NBR' , &#xD;&#xA;&#x9;&#x9;&#x9;&#x9;@time1 , datediff(ss, @time1, getdate()));&#xD;&#xA;&#x9;&#x9;&#xD;&#xA;&#x9;&#x9;/* Use the variable with the last person number to update CF_THIS_CONTROL */&#xD;&#xA;&#x9;&#x9;UPDATE  CF_THIS_CONTROL   &#xD;&#xA;&#x9;&#x9;SET&#x9;maxnumber = @NumPERSON_NBR &#xD;&#xA;&#x9;&#x9;WHERE  TABLENAME  = 'PERSONA' &#xD;&#xA;&#x9;&#x9;&#xD;&#xA;&#x9;&#x9;/* In order to use existing tuples in IP_PERSON_ADDRESSES, a massive update of WRK_PERSON_ADDR.ADDR_NBR is done &#xD;&#xA;&#x9;&#x9;       taking into account the possibility of NULL values */&#xD;&#xA;&#x9;&#x9;SELECT @time1  =  GETDATE()&#xD;&#xA;&#x9;&#x9;&#xD;&#xA;&#x9;&#x9;UPDATE  T   &#xD;&#xA;&#x9;&#x9;SET&#x9;addr_nbr = (&#x9;SELECT min(addr_nbr)&#xD;&#xA;&#x9;&#x9;&#x9;FROM  IP_PERSON_ADDRESSES A &#xD;&#xA;&#x9;&#x9;&#x9;WHERE&#x9; A.PERSON_NBR  = T.PERSON_NBR&#xD;&#xA;&#x9;&#x9;&#x9; AND&#x9;A.RESIDENCE_COUNTRY_CODE&#x9;= T.RESIDENCE_COUNTRY_CODE&#x9;&#x9;COLLATE DATABASE_DEFAULT&#xD;&#xA;&#x9;&#x9;&#x9; AND&#x9;ISNULL(A.ADDR_STREET, '')  = ISNULL(T.ADDRESS_STREET, '')&#x9;COLLATE DATABASE_DEFAULT&#xD;&#xA;&#x9;&#x9;&#x9; AND&#x9;ISNULL(A.ADDR_STREET_LANG2, '')  = ISNULL(T.ADDRESS_STREET_LANG2, '')&#x9;COLLATE DATABASE_DEFAULT&#xD;&#xA;&#x9;&#x9;&#x9; AND&#x9;ISNULL(A.STATE_NAME, '')&#x9;= ISNULL(T.STATE_NAME, '')&#x9;&#x9;COLLATE DATABASE_DEFAULT&#xD;&#xA;&#x9;&#x9;&#x9; AND&#x9;ISNULL(A.STATE_CODE, '')&#x9;= ISNULL(T.STATE_CODE, '')&#x9;&#x9;COLLATE DATABASE_DEFAULT&#xD;&#xA;&#x9;&#x9;&#x9; AND&#x9;ISNULL(A.CITY_CODE, '')&#x9;= ISNULL(T.CITY_CODE, '')&#x9;&#x9;COLLATE DATABASE_DEFAULT&#xD;&#xA;&#x9;&#x9;&#x9; AND&#x9;ISNULL(A.CITY_NAME, '')&#x9;= ISNULL(T.CITY_NAME, '')&#x9;&#x9;COLLATE DATABASE_DEFAULT&#xD;&#xA;&#x9;&#x9;&#x9; AND&#x9;ISNULL(A.ADDR_ZONE, '')&#x9;= ISNULL(T.ADDRESS_ZONE, '')&#x9;COLLATE DATABASE_DEFAULT&#xD;&#xA;&#x9;&#x9;&#x9; AND&#x9;ISNULL(A.ZIPCODE, '')&#x9;&#x9;= ISNULL(T.ZIP_CODE, '')&#x9;&#x9;COLLATE DATABASE_DEFAULT&#xD;&#xA;&#x9;&#x9;) &#xD;&#xA;&#x9;&#x9;FROM  wrk_person_addr T &#xD;&#xA;&#x9;&#x9;&#xD;&#xA;&#x9;&#x9;INSERT INTO  wrk_log    &#xD;&#xA;&#x9;&#x9; VALUES &#x9;&#x9;( 'First massive update of ADDR_NBR' , &#xD;&#xA;&#x9;&#x9;&#x9;&#x9;@time1 , datediff(ss, @time1, getdate()));&#xD;&#xA;&#x9;&#x9;&#xD;&#xA;&#x9;&#x9;/* now the new addresses are added individually to IP_PERSON_ADDRESSES */&#xD;&#xA;&#x9;&#x9;SELECT @time1  =  GETDATE()&#xD;&#xA;&#x9;&#x9;&#xD;&#xA;&#x9;&#x9;/* process those WRK_PERSON_ADDR with no matching IP_PERSON_ADDRESSES (i.e. with null ADDR_NBR) */&#xD;&#xA;&#x9;&#x9;&#xD;&#xA;&#x9;&#x9;&#xD;&#xA;&#x9;&#x9;OPEN cur2 &#xD;&#xA;&#x9;&#x9;&#x9;&#x9;SELECT @count = 1 &#xD;&#xA;&#x9;&#x9;WHILE (0 = 0) &#xD;&#xA;&#x9;&#x9;BEGIN --( &#xD;&#xA;&#x9;&#x9;&#x9;&#xD;&#xA;&#x9;&#x9;&#x9;fetch NEXT FROM cur2 INTO @rec2_PERSON_NBR, @rec2_ADDRESS_STREET,@rec2_ADDRESS_STREET_LANG2, @rec2_ADDRESS_ZONE, @rec2_CITY_NAME, @rec2_RESIDENCE_COUNTRY_CODE, @rec2_STATE_CODE,@rec2_CITY_CODE, @rec2_STATE_NAME, @rec2_ZIP_CODE&#xD;&#xA;&#x9;&#x9;&#x9;IF (@@FETCH_STATUS = -1) &#xD;&#xA;&#x9;&#x9;&#x9;BREAK&#xD;&#xA;&#xD;&#xA;&#x9;&#x9;&#x9;/* initilize numbering variable */&#xD;&#xA;&#x9;&#x9;&#x9;SELECT @NumADDR_NBR  =  MAX(addr_nbr)&#xD;&#xA;&#x9;&#x9;&#x9;FROM  IP_PERSON_ADDRESSES &#xD;&#xA;&#x9;&#x9;&#x9;WHERE&#x9; person_nbr  = @rec2_PERSON_NBR&#xD;&#xA;&#x9;&#x9;&#x9;&#xD;&#xA;&#x9;&#x9;&#x9;/* Increment the variable with the last address number */&#xD;&#xA;&#x9;&#x9;&#x9;&#xD;&#xA;&#x9;&#x9;&#x9;SELECT @NumADDR_NBR  = ISNULL(@NumADDR_NBR, 0)&#xD;&#xA;&#x9;&#x9;&#x9;SELECT @NumADDR_NBR  = @NumADDR_NBR + 1 &#xD;&#xA;&#x9;&#x9;&#x9;/* Insert a new tuple in IP_PERSON_ADDRESSES with the generated code and the data from WRK_PERSON_ADDR */&#xD;&#xA;&#x9;&#x9;&#x9;INSERT INTO  IP_PERSON_ADDRESSES   &#xD;&#xA;&#x9;&#x9;&#x9;&#x9;&#x9;( ROW_VERSION , &#xD;&#xA;&#x9;&#x9;&#x9;&#x9;&#x9;PERSON_NBR , &#xD;&#xA;&#x9;&#x9;&#x9;&#x9;&#x9;ADDR_NBR , &#xD;&#xA;&#x9;&#x9;&#x9;&#x9;&#x9;ADDR_STREET , &#xD;&#xA;&#x9;&#x9;&#x9;&#x9;&#x9;ADDR_STREET_LANG2 ,&#xD;&#xA;&#x9;&#x9;&#x9;&#x9;&#x9;ADDR_ZONE , &#xD;&#xA;&#x9;&#x9;&#x9;&#x9;&#x9;CITY_NAME , &#xD;&#xA;&#x9;&#x9;&#x9;&#x9;&#x9;RESIDENCE_COUNTRY_CODE , &#xD;&#xA;&#x9;&#x9;&#x9;&#x9;&#x9;STATE_CODE , &#xD;&#xA;&#x9;&#x9;&#x9;&#x9;&#x9;CITY_CODE,&#xD;&#xA;&#x9;&#x9;&#x9;&#x9;&#x9;STATE_NAME , &#xD;&#xA;&#x9;&#x9;&#x9;&#x9;&#x9;ZIPCODE )  &#xD;&#xA;&#x9;&#x9;&#x9; VALUES &#x9;&#x9;( 1 , &#xD;&#xA;&#x9;&#x9;&#x9;&#x9;&#x9;@rec2_PERSON_NBR , &#xD;&#xA;&#x9;&#x9;&#x9;&#x9;&#x9;@NumADDR_NBR , &#xD;&#xA;&#x9;&#x9;&#x9;&#x9;&#x9;@rec2_ADDRESS_STREET , &#xD;&#xA;&#x9;&#x9;&#x9;&#x9;&#x9;@rec2_ADDRESS_STREET_LANG2 , &#xD;&#xA;&#x9;&#x9;&#x9;&#x9;&#x9;@rec2_ADDRESS_ZONE , &#xD;&#xA;&#x9;&#x9;&#x9;&#x9;&#x9;@rec2_CITY_NAME , &#xD;&#xA;&#x9;&#x9;&#x9;&#x9;&#x9;@rec2_RESIDENCE_COUNTRY_CODE , &#xD;&#xA;&#x9;&#x9;&#x9;&#x9;&#x9;@rec2_STATE_CODE , &#xD;&#xA;&#x9;&#x9;&#x9;&#x9;&#x9;@rec2_CITY_CODE ,&#xD;&#xA;&#x9;&#x9;&#x9;&#x9;&#x9;@rec2_STATE_NAME , &#xD;&#xA;&#x9;&#x9;&#x9;&#x9;&#x9;@rec2_ZIP_CODE )  &#xD;&#xA;&#x9;&#x9;&#x9;&#xD;&#xA;&#x9;&#x9;&#x9;SELECT @count=@count +1&#xD;&#xA;&#x9;&#x9;END --) &#xD;&#xA;&#x9;&#x9;&#xD;&#xA;&#x9;&#x9;&#xD;&#xA;&#x9;&#x9;close cur2&#xD;&#xA;&#x9;&#x9;&#xD;&#xA;&#x9;&#x9;INSERT INTO  wrk_log    &#xD;&#xA;&#x9;&#x9; VALUES &#x9;&#x9;( 'Add new addresses' , &#xD;&#xA;&#x9;&#x9;&#x9;&#x9;@time1 , datediff(ss, @time1, getdate()));&#xD;&#xA;&#x9;&#x9;&#xD;&#xA;&#x9;&#x9;/* In order to use the just-inserted IP_PERSON_ADDRESSES, the same massive update of WRK_PERSON_ADDR.ADDR_NBR &#xD;&#xA;&#x9;&#x9;       is done again */&#xD;&#xA;&#x9;&#x9;SELECT @time1  =  GETDATE()&#xD;&#xA;&#x9;&#x9;&#xD;&#xA;&#x9;&#x9;UPDATE  T   &#xD;&#xA;&#x9;&#x9;SET&#x9;addr_nbr = (&#x9;SELECT min(addr_nbr)&#xD;&#xA;&#x9;&#x9;&#x9;FROM  IP_PERSON_ADDRESSES A &#xD;&#xA;&#x9;&#x9;&#x9;WHERE&#x9; A.PERSON_NBR  = T.PERSON_NBR&#xD;&#xA;&#x9;&#x9;&#x9; AND&#x9;A.RESIDENCE_COUNTRY_CODE&#x9;= T.RESIDENCE_COUNTRY_CODE&#x9;&#x9;COLLATE DATABASE_DEFAULT&#xD;&#xA;&#x9;&#x9;&#x9; AND&#x9;ISNULL(A.ADDR_STREET, '')  = ISNULL(T.ADDRESS_STREET, '')&#x9;COLLATE DATABASE_DEFAULT&#xD;&#xA;&#x9;&#x9;&#x9; AND&#x9;ISNULL(A.ADDR_STREET_LANG2, '')  = ISNULL(T.ADDRESS_STREET_LANG2, '')&#x9;COLLATE DATABASE_DEFAULT&#xD;&#xA;&#x9;&#x9;&#x9; AND&#x9;ISNULL(A.STATE_NAME, '')&#x9;= ISNULL(T.STATE_NAME, '')&#x9;&#x9;COLLATE DATABASE_DEFAULT&#xD;&#xA;&#x9;&#x9;&#x9; AND&#x9;ISNULL(A.STATE_CODE, '')&#x9;= ISNULL(T.STATE_CODE, '')&#x9;&#x9;COLLATE DATABASE_DEFAULT&#xD;&#xA;&#x9;&#x9;&#x9; AND&#x9;ISNULL(A.CITY_NAME, '')&#x9;= ISNULL(T.CITY_NAME, '')&#x9;&#x9;COLLATE DATABASE_DEFAULT&#xD;&#xA;&#x9;&#x9;&#x9; AND&#x9;ISNULL(A.ADDR_ZONE, '')&#x9;= ISNULL(T.ADDRESS_ZONE, '')&#x9;COLLATE DATABASE_DEFAULT&#xD;&#xA;&#x9;&#x9;&#x9; AND&#x9;ISNULL(A.ZIPCODE, '')&#x9;&#x9;= ISNULL(T.ZIP_CODE, '')&#x9;&#x9;COLLATE DATABASE_DEFAULT&#xD;&#xA;&#x9;&#x9;) &#xD;&#xA;&#x9;&#x9;FROM  wrk_person_addr T &#xD;&#xA;&#x9;&#x9;WHERE  addr_nbr  is null &#xD;&#xA;&#x9;&#x9;&#xD;&#xA;&#x9;&#x9;INSERT INTO  wrk_log    &#xD;&#xA;&#x9;&#x9; VALUES &#x9;&#x9;( 'First massive update of ADDR_NBR' , &#xD;&#xA;&#x9;&#x9;&#x9;&#x9;@time1 , datediff(ss, @time1, getdate()));&#xD;&#xA;&#x9;&#x9;&#xD;&#xA; DEALLOCATE cur1&#xD;&#xA; DEALLOCATE cur2&#xD;&#xA;&#xD;&#xA;&#x9;&#x9;SET NOCOUNT OFF&#xD;&#xA;&#xD;&#xA;&#x9;END&#xD;&#xA;&quot;"/>
    <elementParameter field="LABEL" name="NOTE" value="This option only applies when deploying and running in the Talend Runtime" show="false"/>
    <elementParameter field="CHECK" name="SPECIFY_DATASOURCE_ALIAS" value="false" show="false"/>
    <elementParameter field="TEXT" name="DATASOURCE_ALIAS" value="&quot;&quot;" show="false"/>
    <elementParameter field="CHECK" name="DIE_ON_ERROR" value="false"/>
    <elementParameter field="TEXT" name="PROPERTIES" value="&quot;&quot;" show="false"/>
    <elementParameter field="CHECK" name="ACTIVE_DIR_AUTH" value="false" show="false"/>
    <elementParameter field="CHECK" name="PROPAGATE_RECORD_SET" value="false"/>
    <elementParameter field="COLUMN_LIST" name="RECORD_SET_COLUMN" value="" show="false"/>
    <elementParameter field="CHECK" name="USE_PREPAREDSTATEMENT" value="false"/>
    <elementParameter field="TABLE" name="SET_PREPAREDSTATEMENT_PARAMETERS" show="false"/>
    <elementParameter field="ENCODING_TYPE" name="ENCODING" value="&quot;ISO-8859-15&quot;" show="false"/>
    <elementParameter field="TECHNICAL" name="ENCODING:ENCODING_TYPE" value="ISO-8859-15"/>
    <elementParameter field="TEXT" name="COMMIT_EVERY" value="10000" show="false"/>
    <elementParameter field="TEXT" name="CONNECTION_FORMAT" value="row"/>
    <metadata connector="FLOW" name="tMSSqlRow_26"/>
    <metadata connector="REJECT" name="REJECT">
      <column defaultValue="" key="false" length="255" name="errorCode" nullable="true" precision="0" sourceType="" type="id_String" originalLength="-1" usefulColumn="true"/>
      <column defaultValue="" key="false" length="255" name="errorMessage" nullable="true" precision="0" sourceType="" type="id_String" originalLength="-1" usefulColumn="true"/>
    </metadata>
  </node>
  <node componentName="tLogRow" componentVersion="0.101" offsetLabelX="0" offsetLabelY="0" posX="-96" posY="2720">
    <elementParameter field="TEXT" name="UNIQUE_NAME" value="tLogRow_27" show="false"/>
    <elementParameter field="RADIO" name="BASIC_MODE" value="false"/>
    <elementParameter field="RADIO" name="TABLE_PRINT" value="false"/>
    <elementParameter field="RADIO" name="VERTICAL" value="true"/>
    <elementParameter field="RADIO" name="PRINT_UNIQUE" value="true"/>
    <elementParameter field="RADIO" name="PRINT_LABEL" value="false"/>
    <elementParameter field="RADIO" name="PRINT_UNIQUE_LABEL" value="false"/>
    <elementParameter field="TEXT" name="FIELDSEPARATOR" value="&quot;|&quot;" show="false"/>
    <elementParameter field="CHECK" name="PRINT_HEADER" value="false" show="false"/>
    <elementParameter field="CHECK" name="PRINT_UNIQUE_NAME" value="false" show="false"/>
    <elementParameter field="CHECK" name="PRINT_COLNAMES" value="false" show="false"/>
    <elementParameter field="CHECK" name="USE_FIXED_LENGTH" value="false" show="false"/>
    <elementParameter field="TABLE" name="LENGTHS" show="false">
      <elementValue elementRef="SCHEMA_COLUMN" value="errorCode"/>
      <elementValue elementRef="LENGTH" value="10"/>
      <elementValue elementRef="SCHEMA_COLUMN" value="errorMessage"/>
      <elementValue elementRef="LENGTH" value="10"/>
    </elementParameter>
    <elementParameter field="CHECK" name="PRINT_CONTENT_WITH_LOG4J" value="true"/>
    <elementParameter field="TEXT" name="SCHEMA_OPT_NUM" value="100" show="false"/>
    <elementParameter field="TEXT" name="CONNECTION_FORMAT" value="row"/>
    <metadata connector="FLOW" name="tLogRow_27">
      <column defaultValue="" key="false" length="255" name="errorCode" nullable="true" precision="0" sourceType="" type="id_String" originalLength="-1" usefulColumn="true"/>
      <column defaultValue="" key="false" length="255" name="errorMessage" nullable="true" precision="0" sourceType="" type="id_String" originalLength="-1" usefulColumn="true"/>
    </metadata>
  </node>
  <node componentName="tLogRow" componentVersion="0.101" offsetLabelX="0" offsetLabelY="0" posX="32" posY="2720">
    <elementParameter field="TEXT" name="UNIQUE_NAME" value="tLogRow_28" show="false"/>
    <elementParameter field="RADIO" name="BASIC_MODE" value="false"/>
    <elementParameter field="RADIO" name="TABLE_PRINT" value="false"/>
    <elementParameter field="RADIO" name="VERTICAL" value="true"/>
    <elementParameter field="RADIO" name="PRINT_UNIQUE" value="true"/>
    <elementParameter field="RADIO" name="PRINT_LABEL" value="false"/>
    <elementParameter field="RADIO" name="PRINT_UNIQUE_LABEL" value="false"/>
    <elementParameter field="TEXT" name="FIELDSEPARATOR" value="&quot;|&quot;" show="false"/>
    <elementParameter field="CHECK" name="PRINT_HEADER" value="false" show="false"/>
    <elementParameter field="CHECK" name="PRINT_UNIQUE_NAME" value="false" show="false"/>
    <elementParameter field="CHECK" name="PRINT_COLNAMES" value="false" show="false"/>
    <elementParameter field="CHECK" name="USE_FIXED_LENGTH" value="false" show="false"/>
    <elementParameter field="TABLE" name="LENGTHS" show="false">
      <elementValue elementRef="SCHEMA_COLUMN" value="errorCode"/>
      <elementValue elementRef="LENGTH" value="10"/>
      <elementValue elementRef="SCHEMA_COLUMN" value="errorMessage"/>
      <elementValue elementRef="LENGTH" value="10"/>
    </elementParameter>
    <elementParameter field="CHECK" name="PRINT_CONTENT_WITH_LOG4J" value="true"/>
    <elementParameter field="TEXT" name="SCHEMA_OPT_NUM" value="100" show="false"/>
    <elementParameter field="TEXT" name="CONNECTION_FORMAT" value="row"/>
    <metadata connector="FLOW" name="tLogRow_28">
      <column defaultValue="" key="false" length="255" name="errorCode" nullable="true" precision="0" sourceType="" type="id_String" originalLength="-1" usefulColumn="true"/>
      <column defaultValue="" key="false" length="255" name="errorMessage" nullable="true" precision="0" sourceType="" type="id_String" originalLength="-1" usefulColumn="true"/>
    </metadata>
  </node>
  <node componentName="tMSSqlRow" componentVersion="0.102" offsetLabelX="0" offsetLabelY="0" posX="256" posY="2784">
    <elementParameter field="TEXT" name="UNIQUE_NAME" value="tMSSqlRow_27" show="false"/>
    <elementParameter field="CHECK" name="USE_EXISTING_CONNECTION" value="true"/>
    <elementParameter field="COMPONENT_LIST" name="CONNECTION" value="tMSSqlConnection_4"/>
    <elementParameter field="CLOSED_LIST" name="DRIVER" value="JTDS" show="false"/>
    <elementParameter field="TEXT" name="HOST" value="&quot;&quot;" show="false"/>
    <elementParameter field="TEXT" name="PORT" value="&quot;1433&quot;" show="false"/>
    <elementParameter field="TEXT" name="DB_SCHEMA" value="&quot;&quot;" show="false"/>
    <elementParameter field="TEXT" name="DBNAME" value="&quot;&quot;" show="false"/>
    <elementParameter field="TEXT" name="TYPE" value="MSSQL" show="false"/>
    <elementParameter field="TEXT" name="USER" value="&quot;&quot;" show="false"/>
    <elementParameter field="PASSWORD" name="PASS" value="enc:system.encryption.key.v1:wVAeRSzQtSvkajoQ25SHOCjxeeNvOOp0ZAj3hZw2" show="false"/>
    <elementParameter field="DBTABLE" name="TABLE" value="&quot;&quot;"/>
    <elementParameter field="CHECK" name="IDENTITY_INSERT" value="false"/>
    <elementParameter field="QUERYSTORE_TYPE" name="QUERYSTORE" value="&quot;&quot;"/>
    <elementParameter field="TECHNICAL" name="QUERYSTORE:REPOSITORY_QUERYSTORE_TYPE" value="" show="false"/>
    <elementParameter field="TECHNICAL" name="QUERYSTORE:QUERYSTORE_TYPE" value="BUILT_IN"/>
    <elementParameter field="MEMO_SQL" name="QUERY" value="&quot;&#xD;&#xA;If Exists ( SELECT name &#xD;&#xA;            FROM sysobjects  &#xD;&#xA;            WHERE name = 'getOptionsListText'&#xD;&#xA;)&#xD;&#xA;&#xD;&#xA;&#xD;&#xA;DROP FUNCTION getOptionsListText&quot;"/>
    <elementParameter field="LABEL" name="NOTE" value="This option only applies when deploying and running in the Talend Runtime" show="false"/>
    <elementParameter field="CHECK" name="SPECIFY_DATASOURCE_ALIAS" value="false" show="false"/>
    <elementParameter field="TEXT" name="DATASOURCE_ALIAS" value="&quot;&quot;" show="false"/>
    <elementParameter field="CHECK" name="DIE_ON_ERROR" value="false"/>
    <elementParameter field="TEXT" name="PROPERTIES" value="&quot;&quot;" show="false"/>
    <elementParameter field="CHECK" name="ACTIVE_DIR_AUTH" value="false" show="false"/>
    <elementParameter field="CHECK" name="PROPAGATE_RECORD_SET" value="false"/>
    <elementParameter field="COLUMN_LIST" name="RECORD_SET_COLUMN" value="" show="false"/>
    <elementParameter field="CHECK" name="USE_PREPAREDSTATEMENT" value="false"/>
    <elementParameter field="TABLE" name="SET_PREPAREDSTATEMENT_PARAMETERS" show="false"/>
    <elementParameter field="ENCODING_TYPE" name="ENCODING" value="&quot;ISO-8859-15&quot;" show="false"/>
    <elementParameter field="TECHNICAL" name="ENCODING:ENCODING_TYPE" value="ISO-8859-15"/>
    <elementParameter field="TEXT" name="COMMIT_EVERY" value="10000" show="false"/>
    <elementParameter field="TEXT" name="CONNECTION_FORMAT" value="row"/>
    <metadata connector="FLOW" name="tMSSqlRow_27"/>
    <metadata connector="REJECT" name="REJECT">
      <column defaultValue="" key="false" length="255" name="errorCode" nullable="true" precision="0" sourceType="" type="id_String" originalLength="-1" usefulColumn="true"/>
      <column defaultValue="" key="false" length="255" name="errorMessage" nullable="true" precision="0" sourceType="" type="id_String" originalLength="-1" usefulColumn="true"/>
    </metadata>
  </node>
  <node componentName="tMSSqlRow" componentVersion="0.102" offsetLabelX="0" offsetLabelY="0" posX="384" posY="2784">
    <elementParameter field="TEXT" name="UNIQUE_NAME" value="tMSSqlRow_28" show="false"/>
    <elementParameter field="CHECK" name="USE_EXISTING_CONNECTION" value="true"/>
    <elementParameter field="COMPONENT_LIST" name="CONNECTION" value="tMSSqlConnection_4"/>
    <elementParameter field="CLOSED_LIST" name="DRIVER" value="JTDS" show="false"/>
    <elementParameter field="TEXT" name="HOST" value="&quot;&quot;" show="false"/>
    <elementParameter field="TEXT" name="PORT" value="&quot;1433&quot;" show="false"/>
    <elementParameter field="TEXT" name="DB_SCHEMA" value="&quot;&quot;" show="false"/>
    <elementParameter field="TEXT" name="DBNAME" value="&quot;&quot;" show="false"/>
    <elementParameter field="TEXT" name="TYPE" value="MSSQL" show="false"/>
    <elementParameter field="TEXT" name="USER" value="&quot;&quot;" show="false"/>
    <elementParameter field="PASSWORD" name="PASS" value="enc:system.encryption.key.v1:qout8NAmVw+gUPwtFj8P7+9zAOfmxS3bgaJXc5gw" show="false"/>
    <elementParameter field="DBTABLE" name="TABLE" value="&quot;&quot;"/>
    <elementParameter field="CHECK" name="IDENTITY_INSERT" value="false"/>
    <elementParameter field="QUERYSTORE_TYPE" name="QUERYSTORE" value="&quot;&quot;"/>
    <elementParameter field="TECHNICAL" name="QUERYSTORE:REPOSITORY_QUERYSTORE_TYPE" value="" show="false"/>
    <elementParameter field="TECHNICAL" name="QUERYSTORE:QUERYSTORE_TYPE" value="BUILT_IN"/>
    <elementParameter field="MEMO_SQL" name="QUERY" value="&quot;&#xD;&#xA;CREATE FUNCTION getOptionsListText(@procTyp varchar(10),@procNbr numeric(10),@sec numeric(10) ) returns VARCHAR(MAX)&#xD;&#xA;AS&#xD;&#xA;BEGIN&#xD;&#xA;&#xD;&#xA;    declare @buffer varchar(max)&#xD;&#xA;    declare @item varchar(max)&#xD;&#xA;    declare @options varchar(max)&#xD;&#xA;    declare @obs1 varchar(max)&#xD;&#xA;    &#xD;&#xA;    declare @i1 int,@i2 int,@i3 int&#xD;&#xA;    &#xD;&#xA;    declare @variable varchar(30)&#xD;&#xA;    declare @text varchar(max)&#xD;&#xA;    declare @remaining varchar(max)&#xD;&#xA;&#x9;set @buffer=''&#xD;&#xA;&#x9;DECLARE cur1 cursor FOR&#xD;&#xA;&#x9;select notes1 from IP_ACTION where proc_typ=@procTyp and proc_nbr=@procNbr and action_nbr=@sec&#xD;&#xA;&#x9;&#x9;&#xD;&#xA;&#x9;&#xD;&#xA;    DECLARE cur3 cursor FOR &#xD;&#xA;    select  action_option_text,option_long_name from ip_action_options ao , cf_list_options lo where ao.list_code=lo.list_code and ao.option_nbr=lo.option_nbr&#xD;&#xA;    and proc_typ=@procTyp and proc_nbr=@procNbr and action_nbr=@sec&#xD;&#xA;    order by ao.option_nbr&#xD;&#xA;&#xD;&#xA;&#x9;--load notes1 from ip_action&#xD;&#xA;&#x9;OPEN cur1&#xD;&#xA;&#x9;fetch NEXT FROM cur1 INTO @obs1&#xD;&#xA;&#x9;IF (@@FETCH_STATUS &lt;> -1)  &#xD;&#xA;&#x9;begin&#xD;&#xA;&#x9;&#x9;set @buffer=@obs1&#xD;&#xA;&#x9;&#x9;&#xD;&#xA;&#x9;&#x9;close cur1&#xD;&#xA;&#x9;&#x9;deallocate cur1&#xD;&#xA;&#xD;&#xA;&#x9;&#x9;OPEN cur3  &#xD;&#xA;&#x9;&#x9;WHILE (0 = 0)  &#xD;&#xA;&#x9;&#x9; BEGIN&#xD;&#xA;&#x9;&#x9;&#x9;fetch NEXT FROM cur3 INTO @options, @item&#xD;&#xA;&#x9;&#x9;&#x9;IF (@@FETCH_STATUS = -1)  &#xD;&#xA;&#x9;&#x9;&#x9;BREAK&#xD;&#xA;&#x9;&#x9;&#x9;&#xD;&#xA;&#x9;&#x9;&#x9;set @text=@item&#xD;&#xA;&#x9;&#x9;&#x9;--PRINT '--------------'&#xD;&#xA;&#x9;&#x9;&#x9;--PRINT @TEXT&#xD;&#xA;&#x9;&#x9;&#x9;--PRINT @OPTIONS&#xD;&#xA;&#x9;&#x9;&#x9;set @i1=patindex('%&lt;{%',@text)&#xD;&#xA;&#x9;&#x9;&#x9;&#xD;&#xA;&#x9;&#x9;&#x9;while @i1>0&#xD;&#xA;&#x9;&#x9;&#x9;begin&#xD;&#xA;&#x9;&#x9;&#x9;&#xD;&#xA;&#x9;&#x9;&#x9;&#x9;set @i2=patindex('%}>%',@TEXT)&#xD;&#xA;&#x9;&#x9;&#x9;&#x9;if @i2>0&#xD;&#xA;&#x9;&#x9;&#x9;&#x9;&#x9;begin &#xD;&#xA;&#x9;&#x9;&#x9;&#x9;&#x9;&#x9;set @variable=substring(@text,@i1,@i2-@i1+2)&#xD;&#xA;&#x9;&#x9;&#x9;&#x9;&#x9;&#x9;--print @variable&#x9;&#x9;&#xD;&#xA;&#x9;&#x9;&#x9;&#x9;&#x9;&#x9;&#xD;&#xA;&#x9;&#x9;&#x9;&#x9;&#x9;&#x9;set @i3=patindex('%'+@variable+'%',@options)&#xD;&#xA;&#x9;&#x9;&#x9;&#x9;&#x9;&#x9;if (@i3>0)&#xD;&#xA;&#x9;&#x9;&#x9;&#x9;&#x9;&#x9;begin&#xD;&#xA;&#x9;&#x9;&#x9;&#x9;&#x9;&#x9;&#x9;&#xD;&#xA;&#x9;&#x9;&#x9;&#x9;&#x9;&#x9;&#x9;set @remaining = substring(@options,@i3+LEN(@variable)+2,LEN(@options))&#xD;&#xA;&#x9;&#x9;&#x9;&#x9;&#x9;&#x9;&#x9;set @i3=patindex('%}>%',@remaining)&#xD;&#xA;&#x9;&#x9;&#x9;&#x9;&#x9;&#x9;&#x9;set @remaining=LEFT(@remaining,@i3-1)&#xD;&#xA;&#x9;&#x9;&#x9;&#x9;&#x9;&#x9;&#x9;set @item=REPLACE(@item,@variable,@remaining)&#x9;&#x9;&#x9;&#x9;&#x9;&#x9;&#xD;&#xA;&#x9;&#x9;&#x9;&#x9;&#x9;&#x9;&#x9;&#xD;&#xA;&#x9;&#x9;&#x9;&#x9;&#x9;&#x9;end&#x9;&#x9;&#x9;&#xD;&#xA;&#x9;&#x9;&#x9;&#x9;&#x9;&#x9;&#x9;&#x9;&#xD;&#xA;&#x9;&#x9;&#x9;&#x9;&#x9;&#x9;set @text=SUBSTRING(@text,@i2+2,LEN(@TEXT))&#xD;&#xA;&#x9;&#x9;&#x9;&#x9;&#x9;end&#xD;&#xA;&#x9;&#x9;&#x9;&#x9;&#x9;&#xD;&#xA;&#x9;&#x9;&#x9;&#x9;&#xD;&#xA;&#x9;&#x9;&#x9;&#x9;set @i1=patindex('%&lt;{%',@text)&#xD;&#xA;&#x9;&#x9;&#x9;&#x9;&#xD;&#xA;&#x9;&#x9;&#x9;end&#xD;&#xA;&#x9;&#x9;&#xD;&#xA;&#x9;&#x9;&#x9;set @buffer = @buffer+char(13)+char(10)+@item&#xD;&#xA;&#xD;&#xA;&#x9;&#x9;END  &#xD;&#xA;&#x9;&#x9; &#xD;&#xA;&#x9;&#x9; &#xD;&#xA;&#x9;&#x9;--print @buffer &#xD;&#xA;&#x9;&#x9;close cur3 &#xD;&#xA;&#x9;&#x9;deallocate cur3&#xD;&#xA;&#x9;end&#xD;&#xA;&#x9;return @buffer &#xD;&#xA;END&#xD;&#xA;&quot;"/>
    <elementParameter field="LABEL" name="NOTE" value="This option only applies when deploying and running in the Talend Runtime" show="false"/>
    <elementParameter field="CHECK" name="SPECIFY_DATASOURCE_ALIAS" value="false" show="false"/>
    <elementParameter field="TEXT" name="DATASOURCE_ALIAS" value="&quot;&quot;" show="false"/>
    <elementParameter field="CHECK" name="DIE_ON_ERROR" value="false"/>
    <elementParameter field="TEXT" name="PROPERTIES" value="&quot;&quot;" show="false"/>
    <elementParameter field="CHECK" name="ACTIVE_DIR_AUTH" value="false" show="false"/>
    <elementParameter field="CHECK" name="PROPAGATE_RECORD_SET" value="false"/>
    <elementParameter field="COLUMN_LIST" name="RECORD_SET_COLUMN" value="" show="false"/>
    <elementParameter field="CHECK" name="USE_PREPAREDSTATEMENT" value="false"/>
    <elementParameter field="TABLE" name="SET_PREPAREDSTATEMENT_PARAMETERS" show="false"/>
    <elementParameter field="ENCODING_TYPE" name="ENCODING" value="&quot;ISO-8859-15&quot;" show="false"/>
    <elementParameter field="TECHNICAL" name="ENCODING:ENCODING_TYPE" value="ISO-8859-15"/>
    <elementParameter field="TEXT" name="COMMIT_EVERY" value="10000" show="false"/>
    <elementParameter field="TEXT" name="CONNECTION_FORMAT" value="row"/>
    <metadata connector="FLOW" name="tMSSqlRow_28"/>
    <metadata connector="REJECT" name="REJECT">
      <column defaultValue="" key="false" length="255" name="errorCode" nullable="true" precision="0" sourceType="" type="id_String" originalLength="-1" usefulColumn="true"/>
      <column defaultValue="" key="false" length="255" name="errorMessage" nullable="true" precision="0" sourceType="" type="id_String" originalLength="-1" usefulColumn="true"/>
    </metadata>
  </node>
  <node componentName="tLogRow" componentVersion="0.101" offsetLabelX="0" offsetLabelY="0" posX="288" posY="2880">
    <elementParameter field="TEXT" name="UNIQUE_NAME" value="tLogRow_29" show="false"/>
    <elementParameter field="RADIO" name="BASIC_MODE" value="false"/>
    <elementParameter field="RADIO" name="TABLE_PRINT" value="false"/>
    <elementParameter field="RADIO" name="VERTICAL" value="true"/>
    <elementParameter field="RADIO" name="PRINT_UNIQUE" value="true"/>
    <elementParameter field="RADIO" name="PRINT_LABEL" value="false"/>
    <elementParameter field="RADIO" name="PRINT_UNIQUE_LABEL" value="false"/>
    <elementParameter field="TEXT" name="FIELDSEPARATOR" value="&quot;|&quot;" show="false"/>
    <elementParameter field="CHECK" name="PRINT_HEADER" value="false" show="false"/>
    <elementParameter field="CHECK" name="PRINT_UNIQUE_NAME" value="false" show="false"/>
    <elementParameter field="CHECK" name="PRINT_COLNAMES" value="false" show="false"/>
    <elementParameter field="CHECK" name="USE_FIXED_LENGTH" value="false" show="false"/>
    <elementParameter field="TABLE" name="LENGTHS" show="false">
      <elementValue elementRef="SCHEMA_COLUMN" value="errorCode"/>
      <elementValue elementRef="LENGTH" value="10"/>
      <elementValue elementRef="SCHEMA_COLUMN" value="errorMessage"/>
      <elementValue elementRef="LENGTH" value="10"/>
    </elementParameter>
    <elementParameter field="CHECK" name="PRINT_CONTENT_WITH_LOG4J" value="true"/>
    <elementParameter field="TEXT" name="SCHEMA_OPT_NUM" value="100" show="false"/>
    <elementParameter field="TEXT" name="CONNECTION_FORMAT" value="row"/>
    <metadata connector="FLOW" name="tLogRow_29">
      <column defaultValue="" key="false" length="255" name="errorCode" nullable="true" precision="0" sourceType="" type="id_String" originalLength="-1" usefulColumn="true"/>
      <column defaultValue="" key="false" length="255" name="errorMessage" nullable="true" precision="0" sourceType="" type="id_String" originalLength="-1" usefulColumn="true"/>
    </metadata>
  </node>
  <node componentName="tLogRow" componentVersion="0.101" offsetLabelX="0" offsetLabelY="0" posX="384" posY="2880">
    <elementParameter field="TEXT" name="UNIQUE_NAME" value="tLogRow_30" show="false"/>
    <elementParameter field="RADIO" name="BASIC_MODE" value="false"/>
    <elementParameter field="RADIO" name="TABLE_PRINT" value="false"/>
    <elementParameter field="RADIO" name="VERTICAL" value="true"/>
    <elementParameter field="RADIO" name="PRINT_UNIQUE" value="true"/>
    <elementParameter field="RADIO" name="PRINT_LABEL" value="false"/>
    <elementParameter field="RADIO" name="PRINT_UNIQUE_LABEL" value="false"/>
    <elementParameter field="TEXT" name="FIELDSEPARATOR" value="&quot;|&quot;" show="false"/>
    <elementParameter field="CHECK" name="PRINT_HEADER" value="false" show="false"/>
    <elementParameter field="CHECK" name="PRINT_UNIQUE_NAME" value="false" show="false"/>
    <elementParameter field="CHECK" name="PRINT_COLNAMES" value="false" show="false"/>
    <elementParameter field="CHECK" name="USE_FIXED_LENGTH" value="false" show="false"/>
    <elementParameter field="TABLE" name="LENGTHS" show="false">
      <elementValue elementRef="SCHEMA_COLUMN" value="errorCode"/>
      <elementValue elementRef="LENGTH" value="10"/>
      <elementValue elementRef="SCHEMA_COLUMN" value="errorMessage"/>
      <elementValue elementRef="LENGTH" value="10"/>
    </elementParameter>
    <elementParameter field="CHECK" name="PRINT_CONTENT_WITH_LOG4J" value="true"/>
    <elementParameter field="TEXT" name="SCHEMA_OPT_NUM" value="100" show="false"/>
    <elementParameter field="TEXT" name="CONNECTION_FORMAT" value="row"/>
    <metadata connector="FLOW" name="tLogRow_30">
      <column defaultValue="" key="false" length="255" name="errorCode" nullable="true" precision="0" sourceType="" type="id_String" originalLength="-1" usefulColumn="true"/>
      <column defaultValue="" key="false" length="255" name="errorMessage" nullable="true" precision="0" sourceType="" type="id_String" originalLength="-1" usefulColumn="true"/>
    </metadata>
  </node>
  <node componentName="tMSSqlRow" componentVersion="0.102" offsetLabelX="0" offsetLabelY="0" posX="32" posY="3104">
    <elementParameter field="TEXT" name="UNIQUE_NAME" value="tMSSqlRow_29" show="false"/>
    <elementParameter field="CHECK" name="USE_EXISTING_CONNECTION" value="true"/>
    <elementParameter field="COMPONENT_LIST" name="CONNECTION" value="tMSSqlConnection_4"/>
    <elementParameter field="CLOSED_LIST" name="DRIVER" value="JTDS" show="false"/>
    <elementParameter field="TEXT" name="HOST" value="&quot;&quot;" show="false"/>
    <elementParameter field="TEXT" name="PORT" value="&quot;1433&quot;" show="false"/>
    <elementParameter field="TEXT" name="DB_SCHEMA" value="&quot;&quot;" show="false"/>
    <elementParameter field="TEXT" name="DBNAME" value="&quot;&quot;" show="false"/>
    <elementParameter field="TEXT" name="TYPE" value="MSSQL" show="false"/>
    <elementParameter field="TEXT" name="USER" value="&quot;&quot;" show="false"/>
    <elementParameter field="PASSWORD" name="PASS" value="enc:system.encryption.key.v1:PAX0VPXLfbxiKt4387h2qRmlC49IfEkp1apNv0xp" show="false"/>
    <elementParameter field="DBTABLE" name="TABLE" value="&quot;&quot;"/>
    <elementParameter field="CHECK" name="IDENTITY_INSERT" value="false"/>
    <elementParameter field="QUERYSTORE_TYPE" name="QUERYSTORE" value="&quot;&quot;"/>
    <elementParameter field="TECHNICAL" name="QUERYSTORE:REPOSITORY_QUERYSTORE_TYPE" value="" show="false"/>
    <elementParameter field="TECHNICAL" name="QUERYSTORE:QUERYSTORE_TYPE" value="BUILT_IN"/>
    <elementParameter field="MEMO_SQL" name="QUERY" value="&quot;If Exists ( SELECT name &#xD;&#xA;            FROM sysobjects  &#xD;&#xA;            WHERE name = 'ImportPateProcessByBatches'&#xD;&#xA;            AND type = 'P')&#xD;&#xA;&#x9;DROP PROCEDURE ImportPateProcessByBatches&#xD;&#xA;&quot;"/>
    <elementParameter field="LABEL" name="NOTE" value="This option only applies when deploying and running in the Talend Runtime" show="false"/>
    <elementParameter field="CHECK" name="SPECIFY_DATASOURCE_ALIAS" value="false" show="false"/>
    <elementParameter field="TEXT" name="DATASOURCE_ALIAS" value="&quot;&quot;" show="false"/>
    <elementParameter field="CHECK" name="DIE_ON_ERROR" value="false"/>
    <elementParameter field="TEXT" name="PROPERTIES" value="&quot;&quot;" show="false"/>
    <elementParameter field="CHECK" name="ACTIVE_DIR_AUTH" value="false" show="false"/>
    <elementParameter field="CHECK" name="PROPAGATE_RECORD_SET" value="false"/>
    <elementParameter field="COLUMN_LIST" name="RECORD_SET_COLUMN" value="" show="false"/>
    <elementParameter field="CHECK" name="USE_PREPAREDSTATEMENT" value="false"/>
    <elementParameter field="TABLE" name="SET_PREPAREDSTATEMENT_PARAMETERS" show="false"/>
    <elementParameter field="ENCODING_TYPE" name="ENCODING" value="&quot;ISO-8859-15&quot;" show="false"/>
    <elementParameter field="TECHNICAL" name="ENCODING:ENCODING_TYPE" value="ISO-8859-15"/>
    <elementParameter field="TEXT" name="COMMIT_EVERY" value="10000" show="false"/>
    <elementParameter field="TEXT" name="CONNECTION_FORMAT" value="row"/>
    <metadata connector="FLOW" name="tMSSqlRow_29"/>
    <metadata connector="REJECT" name="REJECT">
      <column defaultValue="" key="false" length="255" name="errorCode" nullable="true" precision="0" sourceType="" type="id_String" originalLength="-1" usefulColumn="true"/>
      <column defaultValue="" key="false" length="255" name="errorMessage" nullable="true" precision="0" sourceType="" type="id_String" originalLength="-1" usefulColumn="true"/>
    </metadata>
  </node>
  <node componentName="tLogRow" componentVersion="0.101" offsetLabelX="0" offsetLabelY="0" posX="32" posY="3008">
    <elementParameter field="TEXT" name="UNIQUE_NAME" value="tLogRow_31" show="false"/>
    <elementParameter field="RADIO" name="BASIC_MODE" value="false"/>
    <elementParameter field="RADIO" name="TABLE_PRINT" value="false"/>
    <elementParameter field="RADIO" name="VERTICAL" value="true"/>
    <elementParameter field="RADIO" name="PRINT_UNIQUE" value="true"/>
    <elementParameter field="RADIO" name="PRINT_LABEL" value="false"/>
    <elementParameter field="RADIO" name="PRINT_UNIQUE_LABEL" value="false"/>
    <elementParameter field="TEXT" name="FIELDSEPARATOR" value="&quot;|&quot;" show="false"/>
    <elementParameter field="CHECK" name="PRINT_HEADER" value="false" show="false"/>
    <elementParameter field="CHECK" name="PRINT_UNIQUE_NAME" value="false" show="false"/>
    <elementParameter field="CHECK" name="PRINT_COLNAMES" value="false" show="false"/>
    <elementParameter field="CHECK" name="USE_FIXED_LENGTH" value="false" show="false"/>
    <elementParameter field="TABLE" name="LENGTHS" show="false">
      <elementValue elementRef="SCHEMA_COLUMN" value="errorCode"/>
      <elementValue elementRef="LENGTH" value="10"/>
      <elementValue elementRef="SCHEMA_COLUMN" value="errorMessage"/>
      <elementValue elementRef="LENGTH" value="10"/>
    </elementParameter>
    <elementParameter field="CHECK" name="PRINT_CONTENT_WITH_LOG4J" value="true"/>
    <elementParameter field="TEXT" name="SCHEMA_OPT_NUM" value="100" show="false"/>
    <elementParameter field="TEXT" name="CONNECTION_FORMAT" value="row"/>
    <metadata connector="FLOW" name="tLogRow_31">
      <column defaultValue="" key="false" length="255" name="errorCode" nullable="true" precision="0" sourceType="" type="id_String" originalLength="-1" usefulColumn="true"/>
      <column defaultValue="" key="false" length="255" name="errorMessage" nullable="true" precision="0" sourceType="" type="id_String" originalLength="-1" usefulColumn="true"/>
    </metadata>
  </node>
  <node componentName="tLogRow" componentVersion="0.101" offsetLabelX="0" offsetLabelY="0" posX="160" posY="3008">
    <elementParameter field="TEXT" name="UNIQUE_NAME" value="tLogRow_32" show="false"/>
    <elementParameter field="RADIO" name="BASIC_MODE" value="false"/>
    <elementParameter field="RADIO" name="TABLE_PRINT" value="false"/>
    <elementParameter field="RADIO" name="VERTICAL" value="true"/>
    <elementParameter field="RADIO" name="PRINT_UNIQUE" value="true"/>
    <elementParameter field="RADIO" name="PRINT_LABEL" value="false"/>
    <elementParameter field="RADIO" name="PRINT_UNIQUE_LABEL" value="false"/>
    <elementParameter field="TEXT" name="FIELDSEPARATOR" value="&quot;|&quot;" show="false"/>
    <elementParameter field="CHECK" name="PRINT_HEADER" value="false" show="false"/>
    <elementParameter field="CHECK" name="PRINT_UNIQUE_NAME" value="false" show="false"/>
    <elementParameter field="CHECK" name="PRINT_COLNAMES" value="false" show="false"/>
    <elementParameter field="CHECK" name="USE_FIXED_LENGTH" value="false" show="false"/>
    <elementParameter field="TABLE" name="LENGTHS" show="false">
      <elementValue elementRef="SCHEMA_COLUMN" value="errorCode"/>
      <elementValue elementRef="LENGTH" value="10"/>
      <elementValue elementRef="SCHEMA_COLUMN" value="errorMessage"/>
      <elementValue elementRef="LENGTH" value="10"/>
    </elementParameter>
    <elementParameter field="CHECK" name="PRINT_CONTENT_WITH_LOG4J" value="true"/>
    <elementParameter field="TEXT" name="SCHEMA_OPT_NUM" value="100" show="false"/>
    <elementParameter field="TEXT" name="CONNECTION_FORMAT" value="row"/>
    <metadata connector="FLOW" name="tLogRow_32">
      <column defaultValue="" key="false" length="255" name="errorCode" nullable="true" precision="0" sourceType="" type="id_String" originalLength="-1" usefulColumn="true"/>
      <column defaultValue="" key="false" length="255" name="errorMessage" nullable="true" precision="0" sourceType="" type="id_String" originalLength="-1" usefulColumn="true"/>
    </metadata>
  </node>
  <node componentName="tMSSqlRow" componentVersion="0.102" offsetLabelX="0" offsetLabelY="0" posX="160" posY="3104">
    <elementParameter field="TEXT" name="UNIQUE_NAME" value="tMSSqlRow_30" show="false"/>
    <elementParameter field="CHECK" name="USE_EXISTING_CONNECTION" value="true"/>
    <elementParameter field="COMPONENT_LIST" name="CONNECTION" value="tMSSqlConnection_4"/>
    <elementParameter field="CLOSED_LIST" name="DRIVER" value="JTDS" show="false"/>
    <elementParameter field="TEXT" name="HOST" value="&quot;&quot;" show="false"/>
    <elementParameter field="TEXT" name="PORT" value="&quot;1433&quot;" show="false"/>
    <elementParameter field="TEXT" name="DB_SCHEMA" value="&quot;&quot;" show="false"/>
    <elementParameter field="TEXT" name="DBNAME" value="&quot;&quot;" show="false"/>
    <elementParameter field="TEXT" name="TYPE" value="MSSQL" show="false"/>
    <elementParameter field="TEXT" name="USER" value="&quot;&quot;" show="false"/>
    <elementParameter field="PASSWORD" name="PASS" value="enc:system.encryption.key.v1:HOTgKi0iJvfnQATYw67RNUD6sGw8P5HugMDQco6+" show="false"/>
    <elementParameter field="DBTABLE" name="TABLE" value="&quot;"/>
    <elementParameter field="CHECK" name="IDENTITY_INSERT" value="false"/>
    <elementParameter field="QUERYSTORE_TYPE" name="QUERYSTORE" value="&quot;&quot;"/>
    <elementParameter field="TECHNICAL" name="QUERYSTORE:REPOSITORY_QUERYSTORE_TYPE" value="" show="false"/>
    <elementParameter field="TECHNICAL" name="QUERYSTORE:QUERYSTORE_TYPE" value="BUILT_IN"/>
    <elementParameter field="MEMO_SQL" name="QUERY" value="&quot;CREATE PROCEDURE ImportPateProcessByBatches&#xD;&#xA;AS &#xD;&#xA;&#x9;BEGIN&#xD;&#xA;&#x9;&#x9;SET NOCOUNT ON&#xD;&#xA;&#x9;&#x9;&#xD;&#xA;&#x9;&#x9;/* Procedure name: ImportPateProcessByBatches&#xD;&#xA;&#x9;&#x9;Input:  validated patents (with IND_IMPORT = 9)&#xD;&#xA;&#x9;&#x9;Output:&#xD;&#xA;&#x9;&#x9;create or replace procedure ImportPateProcessByBatches as&#xD;&#xA;&#x9;&#x9;*/&#xD;&#xA;&#x9;&#x9;&#xD;&#xA;&#x9;&#x9;DECLARE @time1                                    DATETIME &#xD;&#xA;&#xD;&#xA;&#x9;&#x9;DECLARE cur1 cursor LOCAL FOR &#xD;&#xA;&#x9;&#x9;SELECT 1&#xD;&#xA;&#x9;&#x9;FROM   [&quot;+ context.intermediateDB + &quot;].[dbo].VW_import_patent (UPDLOCK)  &#xD;&#xA;&#x9;&#x9;WHERE&#x9; ind_import  = 9&#xD;&#xA;&#x9;&#x9;&#xD;&#xA;&#x9;&#x9;DECLARE @rec1                                     VARCHAR(200) /* SwisSQL (Oracle To SQL Server) : Table used in Cursor referenced here is not found in Metadata or Metadata not Updated*/ &#xD;&#xA;&#x9;&#x9;DECLARE @qty                                      FLOAT &#xD;&#xA;&#x9;&#x9;DECLARE @stop                                     FLOAT &#xD;&#xA;&#x9;&#x9;SET @stop  = 0 /* a new batch of patents is flagged as pending (from IND_IMPORT 9 to 0) */&#xD;&#xA;&#x9;&#x9;&#xD;&#xA;&#x9;&#x9;DECLARE @dummy&#x9;&#x9;&#x9;&#x9;&#x9;&#x9;&#x9;&#x9;&#x9;INT&#xD;&#xA;&#x9;&#x9;&#xD;&#xA;&#x9;&#x9;DECLARE @count&#x9;&#x9; INT &#xD;&#xA;&#x9;&#x9;SET @count = 1 &#xD;&#xA;&#x9;&#x9;WHILE (0 = 0) &#xD;&#xA;&#x9;&#x9;BEGIN --( &#xD;&#xA;&#x9;&#x9;&#x9;IF @stop = 1 &#xD;&#xA;&#x9;&#x9;&#x9;BREAK&#xD;&#xA;&#xD;&#xA;&#x9;&#x9;&#x9;SET @qty  = 0 &#xD;&#xA;&#x9;&#x9;&#x9;&#xD;&#xA;&#x9;&#x9;&#x9;OPEN cur1 &#xD;&#xA;&#x9;&#x9;&#x9;&#x9;&#x9;SELECT @count = 1 &#xD;&#xA;&#x9;&#x9;WHILE (0 = 0) &#xD;&#xA;&#x9;&#x9;&#x9;BEGIN --( &#xD;&#xA;&#x9;&#x9;&#x9;&#x9;&#xD;&#xA;&#x9;&#x9;&#x9;&#x9;fetch NEXT FROM cur1 INTO @dummy&#xD;&#xA;&#x9;&#x9;&#x9;&#x9;IF (@@FETCH_STATUS = -1) or @qty = 100000 &#xD;&#xA;&#x9;&#x9;&#x9;&#x9;BREAK&#xD;&#xA;&#xD;&#xA;&#x9;&#x9;&#x9;&#x9;UPDATE   [&quot;+ context.intermediateDB + &quot;].[dbo].VW_import_patent   &#xD;&#xA;&#x9;&#x9;&#x9;&#x9;SET&#x9;ind_import = 0 &#xD;&#xA;&#x9;&#x9;&#x9;&#x9; where current of cur1  &#xD;&#xA;&#x9;&#x9;&#x9;&#x9;&#xD;&#xA;&#x9;&#x9;&#x9;&#x9;SET @qty  = @qty + 1 &#xD;&#xA;&#x9;&#x9;&#x9;&#x9;SET @count=@count +1&#xD;&#xA;&#x9;&#x9;&#x9;END --) &#xD;&#xA;&#x9;&#x9;&#x9;&#xD;&#xA;&#x9;&#x9;&#x9;/* the stop condition is a batch ending in notfound */&#xD;&#xA;&#x9;&#x9;&#x9;&#xD;&#xA;&#x9;&#x9;&#x9;IF (@@FETCH_STATUS = -1) &#xD;&#xA;&#x9;&#x9;&#x9;BEGIN &#xD;&#xA;&#x9;&#x9;&#x9;&#x9;SET @stop  = 1 &#xD;&#xA;&#x9;&#x9;&#x9;END&#xD;&#xA;   &#xD;&#xA;&#x9;&#x9;&#x9;/* close cursor to prepare for commit */&#xD;&#xA;&#x9;&#x9;&#x9;&#xD;&#xA;&#x9;&#x9;&#x9;&#xD;&#xA;&#x9;&#x9;&#x9;close cur1&#xD;&#xA;&#x9;&#x9;&#x9;&#xD;&#xA;&#x9;&#x9;&#x9;/* the batch is processed */&#xD;&#xA;&#x9;&#x9;&#x9;&#xD;&#xA;&#x9;&#x9;&#x9;EXEC IMPORTPATEPROCESS&#xD;&#xA;&#x9;&#x9;&#x9;&#xD;&#xA;&#x9;&#x9;&#x9;-- IMPLICIT_TRANSACTIONS is set to OFF&#xD;&#xA;&#x9;&#x9;&#x9;SELECT @count=@count +1&#xD;&#xA;&#x9;&#x9;END --) &#xD;&#xA;&#x9;&#x9;&#xD;&#xA; DEALLOCATE cur1&#xD;&#xA;&#xD;&#xA;&#x9;&#x9;SET NOCOUNT OFF&#xD;&#xA;&#xD;&#xA;&#x9;END&quot;"/>
    <elementParameter field="LABEL" name="NOTE" value="This option only applies when deploying and running in the Talend Runtime" show="false"/>
    <elementParameter field="CHECK" name="SPECIFY_DATASOURCE_ALIAS" value="false" show="false"/>
    <elementParameter field="TEXT" name="DATASOURCE_ALIAS" value="&quot;&quot;" show="false"/>
    <elementParameter field="CHECK" name="DIE_ON_ERROR" value="false"/>
    <elementParameter field="TEXT" name="PROPERTIES" value="&quot;&quot;" show="false"/>
    <elementParameter field="CHECK" name="ACTIVE_DIR_AUTH" value="false" show="false"/>
    <elementParameter field="CHECK" name="PROPAGATE_RECORD_SET" value="false"/>
    <elementParameter field="COLUMN_LIST" name="RECORD_SET_COLUMN" value="" show="false"/>
    <elementParameter field="CHECK" name="USE_PREPAREDSTATEMENT" value="false"/>
    <elementParameter field="TABLE" name="SET_PREPAREDSTATEMENT_PARAMETERS" show="false"/>
    <elementParameter field="ENCODING_TYPE" name="ENCODING" value="&quot;ISO-8859-15&quot;" show="false"/>
    <elementParameter field="TECHNICAL" name="ENCODING:ENCODING_TYPE" value="ISO-8859-15"/>
    <elementParameter field="TEXT" name="COMMIT_EVERY" value="10000" show="false"/>
    <elementParameter field="TEXT" name="CONNECTION_FORMAT" value="row"/>
    <metadata connector="FLOW" name="tMSSqlRow_30"/>
    <metadata connector="REJECT" name="REJECT">
      <column defaultValue="" key="false" length="255" name="errorCode" nullable="true" precision="0" sourceType="" type="id_String" originalLength="-1" usefulColumn="true"/>
      <column defaultValue="" key="false" length="255" name="errorMessage" nullable="true" precision="0" sourceType="" type="id_String" originalLength="-1" usefulColumn="true"/>
    </metadata>
  </node>
  <node componentName="tMSSqlRow" componentVersion="0.102" offsetLabelX="0" offsetLabelY="0" posX="64" posY="3424">
    <elementParameter field="TEXT" name="UNIQUE_NAME" value="tMSSqlRow_31" show="false"/>
    <elementParameter field="CHECK" name="USE_EXISTING_CONNECTION" value="true"/>
    <elementParameter field="COMPONENT_LIST" name="CONNECTION" value="tMSSqlConnection_4"/>
    <elementParameter field="CLOSED_LIST" name="DRIVER" value="JTDS" show="false"/>
    <elementParameter field="TEXT" name="HOST" value="&quot;&quot;" show="false"/>
    <elementParameter field="TEXT" name="PORT" value="&quot;1433&quot;" show="false"/>
    <elementParameter field="TEXT" name="DB_SCHEMA" value="&quot;&quot;" show="false"/>
    <elementParameter field="TEXT" name="DBNAME" value="&quot;&quot;" show="false"/>
    <elementParameter field="TEXT" name="TYPE" value="MSSQL" show="false"/>
    <elementParameter field="TEXT" name="USER" value="&quot;&quot;" show="false"/>
    <elementParameter field="PASSWORD" name="PASS" value="enc:system.encryption.key.v1:IhyOGYRItBTSRGhGdy50qjT62OLxodB40dL94gvJ" show="false"/>
    <elementParameter field="DBTABLE" name="TABLE" value="&quot;&quot;"/>
    <elementParameter field="CHECK" name="IDENTITY_INSERT" value="false"/>
    <elementParameter field="QUERYSTORE_TYPE" name="QUERYSTORE" value="&quot;&quot;"/>
    <elementParameter field="TECHNICAL" name="QUERYSTORE:REPOSITORY_QUERYSTORE_TYPE" value="" show="false"/>
    <elementParameter field="TECHNICAL" name="QUERYSTORE:QUERYSTORE_TYPE" value="BUILT_IN"/>
    <elementParameter field="MEMO_SQL" name="QUERY" value="&quot;If Exists ( SELECT name &#xD;&#xA;            FROM sysobjects  &#xD;&#xA;            WHERE name = 'ImportPateProcess'&#xD;&#xA;            AND type = 'P')&#xD;&#xA;&#x9;DROP PROCEDURE ImportPateProcess&#xD;&#xA;&quot;"/>
    <elementParameter field="LABEL" name="NOTE" value="This option only applies when deploying and running in the Talend Runtime" show="false"/>
    <elementParameter field="CHECK" name="SPECIFY_DATASOURCE_ALIAS" value="false" show="false"/>
    <elementParameter field="TEXT" name="DATASOURCE_ALIAS" value="&quot;&quot;" show="false"/>
    <elementParameter field="CHECK" name="DIE_ON_ERROR" value="false"/>
    <elementParameter field="TEXT" name="PROPERTIES" value="&quot;&quot;" show="false"/>
    <elementParameter field="CHECK" name="ACTIVE_DIR_AUTH" value="false" show="false"/>
    <elementParameter field="CHECK" name="PROPAGATE_RECORD_SET" value="false"/>
    <elementParameter field="COLUMN_LIST" name="RECORD_SET_COLUMN" value="" show="false"/>
    <elementParameter field="CHECK" name="USE_PREPAREDSTATEMENT" value="false"/>
    <elementParameter field="TABLE" name="SET_PREPAREDSTATEMENT_PARAMETERS" show="false"/>
    <elementParameter field="ENCODING_TYPE" name="ENCODING" value="&quot;ISO-8859-15&quot;" show="false"/>
    <elementParameter field="TECHNICAL" name="ENCODING:ENCODING_TYPE" value="ISO-8859-15"/>
    <elementParameter field="TEXT" name="COMMIT_EVERY" value="10000" show="false"/>
    <elementParameter field="TEXT" name="CONNECTION_FORMAT" value="row"/>
    <metadata connector="FLOW" name="tMSSqlRow_31"/>
    <metadata connector="REJECT" name="REJECT">
      <column defaultValue="" key="false" length="255" name="errorCode" nullable="true" precision="0" sourceType="" type="id_String" originalLength="-1" usefulColumn="true"/>
      <column defaultValue="" key="false" length="255" name="errorMessage" nullable="true" precision="0" sourceType="" type="id_String" originalLength="-1" usefulColumn="true"/>
    </metadata>
  </node>
  <node componentName="tLogRow" componentVersion="0.101" offsetLabelX="0" offsetLabelY="0" posX="64" posY="3328">
    <elementParameter field="TEXT" name="UNIQUE_NAME" value="tLogRow_33" show="false"/>
    <elementParameter field="RADIO" name="BASIC_MODE" value="false"/>
    <elementParameter field="RADIO" name="TABLE_PRINT" value="false"/>
    <elementParameter field="RADIO" name="VERTICAL" value="true"/>
    <elementParameter field="RADIO" name="PRINT_UNIQUE" value="true"/>
    <elementParameter field="RADIO" name="PRINT_LABEL" value="false"/>
    <elementParameter field="RADIO" name="PRINT_UNIQUE_LABEL" value="false"/>
    <elementParameter field="TEXT" name="FIELDSEPARATOR" value="&quot;|&quot;" show="false"/>
    <elementParameter field="CHECK" name="PRINT_HEADER" value="false" show="false"/>
    <elementParameter field="CHECK" name="PRINT_UNIQUE_NAME" value="false" show="false"/>
    <elementParameter field="CHECK" name="PRINT_COLNAMES" value="false" show="false"/>
    <elementParameter field="CHECK" name="USE_FIXED_LENGTH" value="false" show="false"/>
    <elementParameter field="TABLE" name="LENGTHS" show="false">
      <elementValue elementRef="SCHEMA_COLUMN" value="errorCode"/>
      <elementValue elementRef="LENGTH" value="10"/>
      <elementValue elementRef="SCHEMA_COLUMN" value="errorMessage"/>
      <elementValue elementRef="LENGTH" value="10"/>
    </elementParameter>
    <elementParameter field="CHECK" name="PRINT_CONTENT_WITH_LOG4J" value="true"/>
    <elementParameter field="TEXT" name="SCHEMA_OPT_NUM" value="100" show="false"/>
    <elementParameter field="TEXT" name="CONNECTION_FORMAT" value="row"/>
    <metadata connector="FLOW" name="tLogRow_33">
      <column defaultValue="" key="false" length="255" name="errorCode" nullable="true" precision="0" sourceType="" type="id_String" originalLength="-1" usefulColumn="true"/>
      <column defaultValue="" key="false" length="255" name="errorMessage" nullable="true" precision="0" sourceType="" type="id_String" originalLength="-1" usefulColumn="true"/>
    </metadata>
  </node>
  <node componentName="tLogRow" componentVersion="0.101" offsetLabelX="0" offsetLabelY="0" posX="192" posY="3328">
    <elementParameter field="TEXT" name="UNIQUE_NAME" value="tLogRow_34" show="false"/>
    <elementParameter field="RADIO" name="BASIC_MODE" value="false"/>
    <elementParameter field="RADIO" name="TABLE_PRINT" value="false"/>
    <elementParameter field="RADIO" name="VERTICAL" value="true"/>
    <elementParameter field="RADIO" name="PRINT_UNIQUE" value="true"/>
    <elementParameter field="RADIO" name="PRINT_LABEL" value="false"/>
    <elementParameter field="RADIO" name="PRINT_UNIQUE_LABEL" value="false"/>
    <elementParameter field="TEXT" name="FIELDSEPARATOR" value="&quot;|&quot;" show="false"/>
    <elementParameter field="CHECK" name="PRINT_HEADER" value="false" show="false"/>
    <elementParameter field="CHECK" name="PRINT_UNIQUE_NAME" value="false" show="false"/>
    <elementParameter field="CHECK" name="PRINT_COLNAMES" value="false" show="false"/>
    <elementParameter field="CHECK" name="USE_FIXED_LENGTH" value="false" show="false"/>
    <elementParameter field="TABLE" name="LENGTHS" show="false">
      <elementValue elementRef="SCHEMA_COLUMN" value="errorCode"/>
      <elementValue elementRef="LENGTH" value="10"/>
      <elementValue elementRef="SCHEMA_COLUMN" value="errorMessage"/>
      <elementValue elementRef="LENGTH" value="10"/>
    </elementParameter>
    <elementParameter field="CHECK" name="PRINT_CONTENT_WITH_LOG4J" value="true"/>
    <elementParameter field="TEXT" name="SCHEMA_OPT_NUM" value="100" show="false"/>
    <elementParameter field="TEXT" name="CONNECTION_FORMAT" value="row"/>
    <metadata connector="FLOW" name="tLogRow_34">
      <column defaultValue="" key="false" length="255" name="errorCode" nullable="true" precision="0" sourceType="" type="id_String" originalLength="-1" usefulColumn="true"/>
      <column defaultValue="" key="false" length="255" name="errorMessage" nullable="true" precision="0" sourceType="" type="id_String" originalLength="-1" usefulColumn="true"/>
    </metadata>
  </node>
  <node componentName="tMSSqlRow" componentVersion="0.102" offsetLabelX="0" offsetLabelY="0" posX="192" posY="3424">
    <elementParameter field="TEXT" name="UNIQUE_NAME" value="tMSSqlRow_32" show="false"/>
    <elementParameter field="CHECK" name="USE_EXISTING_CONNECTION" value="true"/>
    <elementParameter field="COMPONENT_LIST" name="CONNECTION" value="tMSSqlConnection_4"/>
    <elementParameter field="CLOSED_LIST" name="DRIVER" value="JTDS" show="false"/>
    <elementParameter field="TEXT" name="HOST" value="&quot;&quot;" show="false"/>
    <elementParameter field="TEXT" name="PORT" value="&quot;1433&quot;" show="false"/>
    <elementParameter field="TEXT" name="DB_SCHEMA" value="&quot;&quot;" show="false"/>
    <elementParameter field="TEXT" name="DBNAME" value="&quot;&quot;" show="false"/>
    <elementParameter field="TEXT" name="TYPE" value="MSSQL" show="false"/>
    <elementParameter field="TEXT" name="USER" value="&quot;&quot;" show="false"/>
    <elementParameter field="PASSWORD" name="PASS" value="enc:system.encryption.key.v1:nQfmDcRyOoaOBSB01IODFebE1uhey09rbn3mtOmq" show="false"/>
    <elementParameter field="DBTABLE" name="TABLE" value="&quot;&quot;"/>
    <elementParameter field="CHECK" name="IDENTITY_INSERT" value="false"/>
    <elementParameter field="QUERYSTORE_TYPE" name="QUERYSTORE" value="&quot;&quot;"/>
    <elementParameter field="TECHNICAL" name="QUERYSTORE:REPOSITORY_QUERYSTORE_TYPE" value="" show="false"/>
    <elementParameter field="TECHNICAL" name="QUERYSTORE:QUERYSTORE_TYPE" value="BUILT_IN"/>
    <elementParameter field="MEMO_SQL" name="QUERY" value="&quot;CREATE PROCEDURE ImportPateProcess&#xD;&#xA;AS &#xD;&#xA;&#x9;BEGIN&#xD;&#xA;&#x9;&#x9;SET NOCOUNT ON&#xD;&#xA;&#x9;&#x9;&#xD;&#xA;&#x9;&#x9;/* Procedure name: ImportPateProcess&#xD;&#xA;&#x9;&#x9;Input:  import tables with IND_IMPORT = 0&#xD;&#xA;&#x9;&#x9;Output: IPAS database updated and import tables updated with IND_IMPORT = 1&#xD;&#xA;&#x9;&#x9;create or replace procedure ImportPateProcess as&#xD;&#xA;&#x9;&#x9;*/&#xD;&#xA;&#x9;&#x9;&#xD;&#xA;&#x9;&#x9;DECLARE @time1                                    DATETIME &#xD;&#xA;&#xD;&#xA;&#x9;&#x9;DECLARE @Numpatent_CODE                           FLOAT &#xD;&#xA;&#x9;&#x9;&#xD;&#xA;&#xD;&#xA;&#x9;&#x9;/* 1.2.1 Step 1A: populate work tables (just patents) to add additional required data */&#xD;&#xA;&#x9;&#x9;SELECT @time1  =  GETDATE()&#xD;&#xA;&#x9;&#x9;&#xD;&#xA;&#x9;&#x9;/* truncate data */&#xD;&#xA;&#x9;&#x9;TRUNCATE TABLE WRK_patent&#xD;&#xA;&#x9;&#x9;&#xD;&#xA;&#x9;&#x9;INSERT INTO  WRK_patent   &#xD;&#xA;&#x9;&#x9;&#x9;&#x9;( FILE_SEQ , &#xD;&#xA;&#x9;&#x9;&#x9;&#x9;FILE_TYPE , &#xD;&#xA;&#x9;&#x9;&#x9;&#x9;FILE_SERIES , &#xD;&#xA;&#x9;&#x9;&#x9;&#x9;FILE_NBR , &#xD;&#xA;&#x9;&#x9;&#x9;&#x9;DOC_ORI , &#xD;&#xA;&#x9;&#x9;&#x9;&#x9;DOC_SERIES , &#xD;&#xA;&#x9;&#x9;&#x9;&#x9;DOC_NBR , &#xD;&#xA;&#x9;&#x9;&#x9;&#x9;IND_IMPORT , &#xD;&#xA;&#x9;&#x9;&#x9;&#x9;APPLICATION_TYPE , &#xD;&#xA;&#x9;&#x9;&#x9;&#x9;APPLICATION_SUBTYPE , &#xD;&#xA;&#x9;&#x9;&#x9;&#x9;LAW_CODE , &#xD;&#xA;&#x9;&#x9;&#x9;&#x9;FILING_DATE , &#xD;&#xA;&#x9;&#x9;&#x9;&#x9;RECEPTION_DATE , &#xD;&#xA;&#x9;&#x9;&#x9;&#x9;PUBLICATION_DATE , &#xD;&#xA;&#x9;&#x9;&#x9;&#x9;PUBLICATION_NOTES , &#xD;&#xA;&#x9;&#x9;&#x9;&#x9;IND_REGISTERED , &#xD;&#xA;&#x9;&#x9;&#x9;&#x9;REGISTRATION_TYPE , &#xD;&#xA;&#x9;&#x9;&#x9;&#x9;REGISTRATION_SERIES , &#xD;&#xA;&#x9;&#x9;&#x9;&#x9;REGISTRATION_NBR , &#xD;&#xA;&#x9;&#x9;&#x9;&#x9;REGISTRATION_DUP , &#xD;&#xA;&#x9;&#x9;&#x9;&#x9;REGISTRATION_DATE , &#xD;&#xA;&#x9;&#x9;&#x9;&#x9;ENTITLEMENT_DATE , &#xD;&#xA;&#x9;&#x9;&#x9;&#x9;EXPIRATION_DATE , &#xD;&#xA;&#x9;&#x9;&#x9;&#x9;EXHIBITION_DATE , &#xD;&#xA;&#x9;&#x9;&#x9;&#x9;EXHIBITION_NOTES , &#xD;&#xA;&#x9;&#x9;&#x9;&#x9;PCT_PHASE , &#xD;&#xA;&#x9;&#x9;&#x9;&#x9;PCT_APPLICATION_ID , &#xD;&#xA;&#x9;&#x9;&#x9;&#x9;PCT_APPLICATION_DATE , &#xD;&#xA;&#x9;&#x9;&#x9;&#x9;PCT_PUBLICATION_COUNTRY_CODE , &#xD;&#xA;&#x9;&#x9;&#x9;&#x9;PCT_PUBLICATION_DATE , &#xD;&#xA;&#x9;&#x9;&#x9;&#x9;PCT_PUBLICATION_TYPE , &#xD;&#xA;&#x9;&#x9;&#x9;&#x9;PCT_PUBLICATION_ID , &#xD;&#xA;&#x9;&#x9;&#x9;&#x9;TITLE , &#xD;&#xA;&#x9;&#x9;&#x9;&#x9;ABSTRACT , &#xD;&#xA;&#x9;&#x9;&#x9;&#x9;ENGLISH_TITLE , &#xD;&#xA;&#x9;&#x9;&#x9;&#x9;ENGLISH_ABSTRACT , &#xD;&#xA;&#x9;&#x9;&#x9;&#x9;LAST_CLAIMS_PAGE_REF , &#xD;&#xA;&#x9;&#x9;&#x9;&#x9;LAST_DESCRIPTION_PAGE_REF , &#xD;&#xA;&#x9;&#x9;&#x9;&#x9;USED_IPC_DESCRIPTION , &#xD;&#xA;&#x9;&#x9;&#x9;&#x9;USED_KEYWORD_DESCRIPTION , &#xD;&#xA;&#x9;&#x9;&#x9;&#x9;IND_EXAM_INDUSTRIAL , &#xD;&#xA;&#x9;&#x9;&#x9;&#x9;IND_EXAM_INVENTIVE , &#xD;&#xA;&#x9;&#x9;&#x9;&#x9;IND_EXAM_NOVELTY , &#xD;&#xA;&#x9;&#x9;&#x9;&#x9;EXAM_RESULT , &#xD;&#xA;&#x9;&#x9;&#x9;&#x9;CAPTURE_USER_ID , &#xD;&#xA;&#x9;&#x9;&#x9;&#x9;CAPTURE_DATE , &#xD;&#xA;&#x9;&#x9;&#x9;&#x9;FIRST_PRIORITY_DATE , &#xD;&#xA;&#x9;&#x9;&#x9;&#x9;NOVELTY_DATE , &#xD;&#xA;&#x9;&#x9;&#x9;&#x9;MAIN_OWNER_ADDR_NBR , &#xD;&#xA;&#x9;&#x9;&#x9;&#x9;MAIN_OWNER_PERSON_NBR , &#xD;&#xA;&#x9;&#x9;&#x9;&#x9;SERVICE_ADDR_NBR , &#xD;&#xA;&#x9;&#x9;&#x9;&#x9;SERVICE_PERSON_NBR , &#xD;&#xA;&#x9;&#x9;&#x9;&#x9;PROC_TYP , &#xD;&#xA;&#x9;&#x9;&#x9;&#x9;PROC_NBR , &#xD;&#xA;&#x9;&#x9;&#x9;&#x9;STATUS_CODE,PUBLICATION_NBR,PUBLICATION_SER,PUBLICATION_TYP )  &#xD;&#xA;&#x9;&#x9;SELECT&#xD;&#xA;&#x9;&#x9;&#x9;&#x9; FILE_SEQ,&#xD;&#xA;&#x9;&#x9;&#x9;&#x9; FILE_TYPE,&#xD;&#xA;&#x9;&#x9;&#x9;&#x9; FILE_SERIES,&#xD;&#xA;&#x9;&#x9;&#x9;&#x9; FILE_NBR,&#xD;&#xA;&#x9;&#x9;&#x9;&#x9; DOC_ORI,&#xD;&#xA;&#x9;&#x9;&#x9;&#x9; DOC_SERIES,&#xD;&#xA;&#x9;&#x9;&#x9;&#x9; DOC_NBR,&#xD;&#xA;&#x9;&#x9;&#x9;&#x9; IND_IMPORT,&#xD;&#xA;&#x9;&#x9;&#x9;&#x9; APPLICATION_TYPE,&#xD;&#xA;&#x9;&#x9;&#x9;&#x9; APPLICATION_SUBTYPE,&#xD;&#xA;&#x9;&#x9;&#x9;&#x9; LAW_CODE,&#xD;&#xA;&#x9;&#x9;&#x9;&#x9; FILING_DATE,&#xD;&#xA;&#x9;&#x9;&#x9;&#x9; RECEPTION_DATE,&#xD;&#xA;&#x9;&#x9;&#x9;&#x9; PUBLICATION_DATE,&#xD;&#xA;&#x9;&#x9;&#x9;&#x9; PUBLICATION_NOTES,&#xD;&#xA;&#x9;&#x9;&#x9;&#x9; IND_REGISTERED,&#xD;&#xA;&#x9;&#x9;&#x9;&#x9; REGISTRATION_TYPE,&#xD;&#xA;&#x9;&#x9;&#x9;&#x9; REGISTRATION_SERIES,&#xD;&#xA;&#x9;&#x9;&#x9;&#x9; REGISTRATION_NBR,&#xD;&#xA;&#x9;&#x9;&#x9;&#x9; REGISTRATION_DUP,&#xD;&#xA;&#x9;&#x9;&#x9;&#x9; REGISTRATION_DATE,&#xD;&#xA;&#x9;&#x9;&#x9;&#x9; ENTITLEMENT_DATE,&#xD;&#xA;&#x9;&#x9;&#x9;&#x9; EXPIRATION_DATE,&#xD;&#xA;&#x9;&#x9;&#x9;&#x9; EXHIBITION_DATE,&#xD;&#xA;&#x9;&#x9;&#x9;&#x9; EXHIBITION_NOTES,&#xD;&#xA;&#x9;&#x9;&#x9;&#x9; PCT_PHASE,&#xD;&#xA;&#x9;&#x9;&#x9;&#x9; PCT_APPLICATION_ID,&#xD;&#xA;&#x9;&#x9;&#x9;&#x9; PCT_APPLICATION_DATE,&#xD;&#xA;&#x9;&#x9;&#x9;&#x9; PCT_PUBLICATION_COUNTRY_CODE,&#xD;&#xA;&#x9;&#x9;&#x9;&#x9; PCT_PUBLICATION_DATE,&#xD;&#xA;&#x9;&#x9;&#x9;&#x9; PCT_PUBLICATION_TYPE,&#xD;&#xA;&#x9;&#x9;&#x9;&#x9; PCT_PUBLICATION_ID,&#xD;&#xA;&#x9;&#x9;&#x9;&#x9; TITLE,&#xD;&#xA;&#x9;&#x9;&#x9;&#x9; ABSTRACT,&#xD;&#xA;&#x9;&#x9;&#x9;&#x9; ENGLISH_TITLE,&#xD;&#xA;&#x9;&#x9;&#x9;&#x9; ENGLISH_ABSTRACT,&#xD;&#xA;&#x9;&#x9;&#x9;&#x9; LAST_CLAIMS_PAGE_REF,&#xD;&#xA;&#x9;&#x9;&#x9;&#x9; LAST_DESCRIPTION_PAGE_REF,&#xD;&#xA;&#x9;&#x9;&#x9;&#x9; USED_IPC_DESCRIPTION,&#xD;&#xA;&#x9;&#x9;&#x9;&#x9; USED_KEYWORD_DESCRIPTION,&#xD;&#xA;&#x9;&#x9;&#x9;&#x9; IND_EXAM_INDUSTRIAL,&#xD;&#xA;&#x9;&#x9;&#x9;&#x9; IND_EXAM_INVENTIVE,&#xD;&#xA;&#x9;&#x9;&#x9;&#x9; IND_EXAM_NOVELTY,&#xD;&#xA;&#x9;&#x9;&#x9;&#x9; EXAM_RESULT,&#xD;&#xA;&#x9;&#x9;&#x9;&#x9; CAPTURE_USER_ID,&#xD;&#xA;&#x9;&#x9;&#x9;&#x9; CAPTURE_DATE,&#xD;&#xA;&#x9;&#x9;&#x9;&#x9; CAST(null as DATETIME) FIRST_PRIORITY_DATE,&#xD;&#xA;&#x9;&#x9;&#x9;&#x9; CAST(null as DATETIME) NOVELTY1_DATE,&#xD;&#xA;&#x9;&#x9;&#x9;&#x9; CAST(null as NUMERIC (4)) MAIN_OWNER_ADDR_NBR,&#xD;&#xA;&#x9;&#x9;&#x9;&#x9; CAST(null as NUMERIC (10)) MAIN_OWNER_PERSON_NBR,&#xD;&#xA;&#x9;&#x9;&#x9;&#x9; CAST(null as NUMERIC (4)) SERVICE_ADDR_NBR,&#xD;&#xA;&#x9;&#x9;&#x9;&#x9; CAST(null as NUMERIC (10)) SERVICE_PERSON_NBR,&#xD;&#xA;&#x9;&#x9;&#x9;&#x9; CAST(null as VARCHAR (8)) PROC_TYP,&#xD;&#xA;&#x9;&#x9;&#x9;&#x9; CAST(null as NUMERIC (10)) PROC_NBR,&#xD;&#xA;&#x9;&#x9;&#x9;&#x9; CAST(null as VARCHAR (8)) STATUS_CODE,PUBLICATION_NBR,PUBLICATION_SER,PUBLICATION_TYP&#xD;&#xA;&#x9;&#x9;FROM   [&quot;+ context.intermediateDB + &quot;].[dbo].VW_IMPORT_patent M &#xD;&#xA;&#x9;&#x9;WHERE&#x9; IND_IMPORT  = 0&#xD;&#xA;&#x9;&#x9;&#xD;&#xA;&#x9;&#x9;-- IMPLICIT_TRANSACTIONS is set to OFF&#xD;&#xA;&#x9;&#x9;INSERT INTO  wrk_log    &#xD;&#xA;&#x9;&#x9; SELECT '1.2.1 Step 1A: populate work tables (just patents) to add additional required data' , &#xD;&#xA;&#x9;&#x9;&#x9;&#x9;@time1 , datediff(ss, @time1, getdate());&#xD;&#xA;&#x9;&#x9;&#xD;&#xA;&#x9;&#x9;/* 1.2.1 Step 1B: populate work tables (not actions) to add additional required data */&#xD;&#xA;&#x9;&#x9;SELECT @time1  =  GETDATE()&#xD;&#xA;&#x9;&#x9;&#xD;&#xA;&#x9;&#x9;/* truncate data */&#xD;&#xA;&#x9;&#x9;TRUNCATE TABLE WRK_patent_OWNERS&#xD;&#xA;&#x9;&#x9;TRUNCATE TABLE WRK_patent_REPRS&#xD;&#xA;&#x9;&#x9;TRUNCATE TABLE WRK_patent_INVENTORS&#xD;&#xA;&#x9;&#x9;TRUNCATE TABLE WRK_patent_PRIORITIES&#xD;&#xA;&#xD;&#xA;&#x9;&#x9;INSERT INTO  WRK_patent_OWNERS    &#xD;&#xA;&#x9;&#x9;SELECT&#xD;&#xA;&#x9;&#x9;&#x9;&#x9; T.*,&#xD;&#xA;&#x9;&#x9;&#x9;&#x9; CAST(null as NUMERIC (10)) PERSON_NBR,&#xD;&#xA;&#x9;&#x9;&#x9;&#x9; CAST(null as NUMERIC (4)) ADDR_NBR&#xD;&#xA;&#x9;&#x9;FROM   [&quot;+ context.intermediateDB + &quot;].[dbo].VW_IMPORT_patent_OWNERS T JOIN wrk_patent M ON M.file_seq  = T.file_seq&#xD;&#xA;&#x9;&#x9;&#x9; AND&#x9;M.file_type  = T.file_type&#xD;&#xA;&#x9;&#x9;&#x9; AND&#x9;M.file_series  = T.file_series&#xD;&#xA;&#x9;&#x9;&#x9; AND&#x9;M.file_nbr  = T.file_nbr  &#xD;&#xA;&#x9;&#x9;&#xD;&#xA;&#x9;&#x9;INSERT INTO  WRK_patent_REPRS    &#xD;&#xA;&#x9;&#x9;SELECT&#xD;&#xA;&#x9;&#x9;&#x9;&#x9; T.*,&#xD;&#xA;&#x9;&#x9;&#x9;&#x9; CAST(null as NUMERIC (10)) PERSON_NBR,&#xD;&#xA;&#x9;&#x9;&#x9;&#x9; CAST(null as NUMERIC (4)) ADDR_NBR&#xD;&#xA;&#x9;&#x9;FROM   [&quot;+ context.intermediateDB + &quot;].[dbo].VW_IMPORT_patent_REPRS T JOIN wrk_patent M ON M.file_seq  = T.file_seq&#xD;&#xA;&#x9;&#x9;&#x9; AND&#x9;M.file_type  = T.file_type&#xD;&#xA;&#x9;&#x9;&#x9; AND&#x9;M.file_series  = T.file_series&#xD;&#xA;&#x9;&#x9;&#x9; AND&#x9;M.file_nbr  = T.file_nbr  &#xD;&#xA;&#x9;&#x9;&#xD;&#xA;&#x9;&#x9;INSERT INTO  WRK_patent_INVENTORS    &#xD;&#xA;&#x9;&#x9;SELECT&#xD;&#xA;&#x9;&#x9;&#x9;&#x9; T.*,&#xD;&#xA;&#x9;&#x9;&#x9;&#x9; CAST(null as NUMERIC (10)) PERSON_NBR,&#xD;&#xA;&#x9;&#x9;&#x9;&#x9; CAST(null as NUMERIC (4)) ADDR_NBR&#xD;&#xA;&#x9;&#x9;FROM   [&quot;+ context.intermediateDB + &quot;].[dbo].VW_IMPORT_patent_INVENTORS T JOIN wrk_patent M ON M.file_seq  = T.file_seq&#xD;&#xA;&#x9;&#x9;&#x9; AND&#x9;M.file_type  = T.file_type&#xD;&#xA;&#x9;&#x9;&#x9; AND&#x9;M.file_series  = T.file_series&#xD;&#xA;&#x9;&#x9;&#x9; AND&#x9;M.file_nbr  = T.file_nbr  &#xD;&#xA;&#x9;&#x9;&#xD;&#xA;&#x9;&#x9;INSERT INTO  WRK_patent_PRIORITIES    &#xD;&#xA;&#x9;&#x9;SELECT&#xD;&#xA;&#x9;&#x9;&#x9;&#x9; T.*,&#xD;&#xA;&#x9;&#x9;&#x9;&#x9; CAST(null as NUMERIC (22)) PRIORITY_APPL_ID_ALT&#xD;&#xA;&#x9;&#x9;FROM   [&quot;+ context.intermediateDB + &quot;].[dbo].VW_IMPORT_patent_PRIORITIES T JOIN wrk_patent M ON M.file_seq  = T.file_seq&#xD;&#xA;&#x9;&#x9;&#x9; AND&#x9;M.file_type  = T.file_type&#xD;&#xA;&#x9;&#x9;&#x9; AND&#x9;M.file_series  = T.file_series&#xD;&#xA;&#x9;&#x9;&#x9; AND&#x9;M.file_nbr  = T.file_nbr  &#xD;&#xA;&#x9;&#x9;&#xD;&#xA;&#x9;&#x9;INSERT INTO  wrk_log    &#xD;&#xA;&#x9;&#x9; SELECT '1.2.1 Step 1B: populate work tables (not actions) to add additional required data' , &#xD;&#xA;&#x9;&#x9;&#x9;&#x9;@time1 , datediff(ss, @time1, getdate());&#xD;&#xA;&#x9;&#x9;&#xD;&#xA;&#x9;&#x9;/* 1.2.1 Step 1C: populate work tables (just actions) to add additional required data */&#xD;&#xA;&#x9;&#x9;SELECT @time1  =  GETDATE()&#xD;&#xA;&#x9;&#x9;&#xD;&#xA;&#x9;&#x9;/* truncate data */&#xD;&#xA;&#x9;&#x9;TRUNCATE TABLE WRK_patent_ACTIONS&#xD;&#xA;&#x9;&#x9;&#xD;&#xA;&#x9;&#x9;INSERT INTO  WRK_patent_ACTIONS    &#xD;&#xA;&#x9;&#x9;SELECT&#xD;&#xA;&#x9;&#x9;&#x9;&#x9; T.*,&#xD;&#xA;&#x9;&#x9;&#x9;&#x9; /* ACTION_NBR is incremented from 1 for each batch to speed-up&#xD;&#xA;&#x9;&#x9;               the process. In the next batch, numbering will start with 1&#xD;&#xA;&#x9;&#x9;               but this works since the key is process nbr + action nbr */ /* ACTION_NBR is incremented from 1 for each batch to speed-up&#xD;&#xA;&#x9;&#x9;               the process. In the next batch, numbering will start with 1&#xD;&#xA;&#x9;&#x9;               but this works since the key is process nbr + action nbr */ &#xD;&#xA;&#x9;&#x9;              ROW_NUMBER() OVER(ORDER BY T.FILE_SEQ, T.FILE_TYPE, T.FILE_SERIES, T.FILE_NBR) ACTION_NBR&#xD;&#xA;&#x9;&#x9;FROM   [&quot;+ context.intermediateDB + &quot;].[dbo].VW_IMPORT_patent_ACTIONS T &#xD;&#xA;&#x9;&#x9; JOIN wrk_patent M ON M.file_seq  = T.file_seq&#xD;&#xA;&#x9;&#x9;&#x9; AND&#x9;M.file_type  = T.file_type&#xD;&#xA;&#x9;&#x9;&#x9; AND&#x9;M.file_series  = T.file_series&#xD;&#xA;&#x9;&#x9;&#x9; AND&#x9;M.file_nbr  = T.file_nbr  &#xD;&#xA;&#x9;&#x9;&#xD;&#xA;&#x9;&#x9;/* postpone due date if Saturday/Sunday */&#xD;&#xA;                set datefirst 7;        /* set Sunday = 1 */&#xD;&#xA;                update  wrk_patent_actions&#xD;&#xA;                set     manual_due_date = dateadd(dd, 2, manual_due_date)&#xD;&#xA;                where   datepart(dw, manual_due_date) = 7 /* Saturday */&#xD;&#xA;                ;&#xD;&#xA;                update  wrk_patent_actions&#xD;&#xA;                set     manual_due_date = dateadd(dd, 1, manual_due_date)&#xD;&#xA;                where   datepart(dw, manual_due_date) = 1 /* Sunday */&#xD;&#xA;                ;&#xD;&#xA;&#xD;&#xA;&#x9;&#x9;INSERT INTO  wrk_log    &#xD;&#xA;&#x9;&#x9; SELECT '1.2.1 Step 1C: populate work tables (just actions) to add additional required data' , &#xD;&#xA;&#x9;&#x9;&#x9;&#x9;@time1 , datediff(ss, @time1, getdate());&#xD;&#xA;&#x9;&#x9;&#xD;&#xA;&#x9;&#x9;&#xD;&#xA;&#x9;&#x9;/* 1.2.2 Step 2: prepare additional data in auxiliary tables */&#xD;&#xA;&#x9;&#x9;/* Step 2a: prepare additional data in WRK_patent_OWNERS */&#xD;&#xA;&#x9;&#x9;/* Load WRK_PERSON_ADDR from WRK_patent_OWNERS, setting REF_NBR from WRK_patent_OWNERS.ROWNUM */&#xD;&#xA;&#x9;&#x9;SELECT @time1  =  GETDATE()&#xD;&#xA;&#x9;&#x9;&#xD;&#xA;&#x9;&#x9;DELETE FROM   wrk_person_addr    &#xD;&#xA;&#x9;&#x9;&#xD;&#xA;&#x9;&#x9;INSERT INTO  wrk_person_addr   &#xD;&#xA;&#x9;&#x9;&#x9;&#x9;( PERSON_GROUP_CODE , &#xD;&#xA;&#x9;&#x9;&#x9;&#x9;AGENT_CODE , &#xD;&#xA;&#x9;&#x9;&#x9;&#x9;PERSON_NAME , &#xD;&#xA;&#x9;&#x9;&#x9;&#x9;PERSON_NAME_LANG2 ,&#xD;&#xA;&#x9;&#x9;&#x9;&#x9;NATIONALITY_COUNTRY_CODE , &#xD;&#xA;&#x9;&#x9;&#x9;&#x9;IND_COMPANY , &#xD;&#xA;&#x9;&#x9;&#x9;&#x9;LEGAL_NATURE , &#xD;&#xA;&#x9;&#x9;&#x9;&#x9;LEGAL_NATURE_LANG2 ,&#xD;&#xA;&#x9;&#x9;&#x9;&#x9;LEGAL_ID_TYPE , &#xD;&#xA;&#x9;&#x9;&#x9;&#x9;LEGAL_ID_NBR , &#xD;&#xA;&#x9;&#x9;&#x9;&#x9;INDIVIDUAL_ID_TYPE , &#xD;&#xA;&#x9;&#x9;&#x9;&#x9;INDIVIDUAL_ID_NBR , &#xD;&#xA;&#x9;&#x9;&#x9;&#x9;EMAIL , &#xD;&#xA;&#x9;&#x9;&#x9;&#x9;TELEPHONE , &#xD;&#xA;&#x9;&#x9;&#x9;&#x9;RESIDENCE_COUNTRY_CODE , &#xD;&#xA;&#x9;&#x9;&#x9;&#x9;STATE_NAME , &#xD;&#xA;&#x9;&#x9;&#x9;&#x9;STATE_CODE ,&#xD;&#xA;&#x9;&#x9;&#x9;&#x9;CITY_CODE , &#xD;&#xA;&#x9;&#x9;&#x9;&#x9;CITY_NAME , &#xD;&#xA;&#x9;&#x9;&#x9;&#x9;ADDRESS_ZONE , &#xD;&#xA;&#x9;&#x9;&#x9;&#x9;ADDRESS_STREET , &#xD;&#xA;&#x9;&#x9;&#x9;&#x9;ADDRESS_STREET_LANG2 ,&#xD;&#xA;&#x9;&#x9;&#x9;&#x9;ZIP_CODE , &#xD;&#xA;&#x9;&#x9;&#x9;&#x9;PERSON_NBR , &#xD;&#xA;&#x9;&#x9;&#x9;&#x9;ADDR_NBR , &#xD;&#xA;&#x9;&#x9;&#x9;&#x9;REF_NBR )  &#xD;&#xA;&#x9;&#x9;SELECT&#xD;&#xA;&#x9;&#x9;&#x9;&#x9; PERSON_GROUP_CODE,&#xD;&#xA;&#x9;&#x9;&#x9;&#x9; CAST(null as NUMERIC (4)),&#xD;&#xA;&#x9;&#x9;&#x9;&#x9; PERSON_NAME,&#xD;&#xA;&#x9;&#x9;&#x9;&#x9; PERSON_NAME_LANG2,&#xD;&#xA;&#x9;&#x9;&#x9;&#x9; NATIONALITY_COUNTRY_CODE,&#xD;&#xA;&#x9;&#x9;&#x9;&#x9; IND_COMPANY,&#xD;&#xA;&#x9;&#x9;&#x9;&#x9; LEGAL_NATURE,&#xD;&#xA;&#x9;&#x9;&#x9;&#x9; LEGAL_NATURE_LANG2,&#xD;&#xA;&#x9;&#x9;&#x9;&#x9; LEGAL_ID_TYPE,&#xD;&#xA;&#x9;&#x9;&#x9;&#x9; LEGAL_ID_NBR,&#xD;&#xA;&#x9;&#x9;&#x9;&#x9; INDIVIDUAL_ID_TYPE,&#xD;&#xA;&#x9;&#x9;&#x9;&#x9; INDIVIDUAL_ID_NBR,&#xD;&#xA;&#x9;&#x9;&#x9;&#x9; EMAIL,&#xD;&#xA;&#x9;&#x9;&#x9;&#x9; TELEPHONE,&#xD;&#xA;&#x9;&#x9;&#x9;&#x9; RESIDENCE_COUNTRY_CODE,&#xD;&#xA;&#x9;&#x9;&#x9;&#x9; STATE_NAME,&#xD;&#xA;&#x9;&#x9;&#x9;&#x9; STATE_CODE,&#xD;&#xA;&#x9;&#x9;&#x9;&#x9; CITY_CODE,&#xD;&#xA;&#x9;&#x9;&#x9;&#x9; CITY_NAME,&#xD;&#xA;&#x9;&#x9;&#x9;&#x9; ADDRESS_ZONE,&#xD;&#xA;&#x9;&#x9;&#x9;&#x9; ADDRESS_STREET,&#xD;&#xA;&#x9;&#x9;&#x9;&#x9; ADDRESS_STREET_LANG2,&#xD;&#xA;&#x9;&#x9;&#x9;&#x9; ZIP_CODE,&#xD;&#xA;&#x9;&#x9;&#x9;&#x9; PERSON_NBR,&#xD;&#xA;&#x9;&#x9;&#x9;&#x9; ADDR_NBR,&#xD;&#xA;&#x9;&#x9;&#x9;&#x9; ROWID&#xD;&#xA;&#x9;&#x9;FROM  wrk_patent_owners T &#xD;&#xA;&#x9;&#x9;&#xD;&#xA;&#x9;&#x9;INSERT INTO  wrk_log    &#xD;&#xA;&#x9;&#x9; SELECT 'Load WRK_PERSON_ADDR from WRK_patent_OWNERS' , &#xD;&#xA;&#x9;&#x9;&#x9;&#x9;@time1 , datediff(ss, @time1, getdate());&#xD;&#xA;&#x9;&#x9;&#xD;&#xA;&#x9;&#x9;/* Call procedure ImportSetPersonNbr() to set PERSON_NBR and ADDR_NBR */&#xD;&#xA;&#x9;&#x9;EXEC IMPORTSETPERSONNBR&#xD;&#xA;&#xD;&#xA;&#x9;&#x9;/* Update WRK_patent_OWNERS, setting PERSON_NBR and ADDR_NBR &#xD;&#xA;&#x9;&#x9;       from WRK_PERSON_ADDR using the ROWNUM as join condition */&#xD;&#xA;&#x9;&#x9;SELECT @time1  =  GETDATE()&#xD;&#xA;&#x9;&#x9;&#xD;&#xA;&#x9;&#x9;UPDATE  T   &#xD;&#xA;&#x9;&#x9;SET&#x9;person_nbr = &#xD;&#xA;&#x9;&#x9;&#x9;(SELECT person_nbr&#xD;&#xA;&#x9;&#x9;&#x9; FROM  WRK_PERSON_ADDR &#xD;&#xA;&#x9;&#x9;&#x9; WHERE&#x9; ref_nbr  = T.rowid&#xD;&#xA;&#x9;&#x9;&#x9;),&#x9;&#xD;&#xA;&#x9;&#x9;    addr_nbr = &#xD;&#xA;&#x9;&#x9;    (SELECT addr_nbr&#xD;&#xA;&#x9;&#x9;&#x9; FROM  WRK_PERSON_ADDR &#xD;&#xA;&#x9;&#x9;&#x9; WHERE&#x9; ref_nbr  = T.rowid&#xD;&#xA;&#x9;&#x9;&#x9;) &#xD;&#xA;&#x9;&#x9;FROM  WRK_patent_OWNERS T &#xD;&#xA;&#x9;&#x9;&#xD;&#xA;&#x9;&#x9;INSERT INTO  wrk_log    &#xD;&#xA;&#x9;&#x9; SELECT 'Update WRK_patent_OWNERS from WRK_PERSON_ADDR' , &#xD;&#xA;&#x9;&#x9;&#x9;&#x9;@time1 , datediff(ss, @time1, getdate());&#xD;&#xA;&#x9;&#x9;&#xD;&#xA;&#x9;&#x9;/* Step 2b: prepare additional data in WRK_patent_REPRS */&#xD;&#xA;&#x9;&#x9;/* Load WRK_PERSON_ADDR from WRK_patent_REPRS, setting REF_NBR from WRK_patent_REPRS.ROWNUM */&#xD;&#xA;&#x9;&#x9;SELECT @time1  =  GETDATE()&#xD;&#xA;&#x9;&#x9;&#xD;&#xA;&#x9;&#x9;DELETE FROM   wrk_person_addr    &#xD;&#xA;&#x9;&#x9;&#xD;&#xA;&#x9;&#x9;INSERT INTO  wrk_person_addr   &#xD;&#xA;&#x9;&#x9;&#x9;&#x9;( PERSON_GROUP_CODE , &#xD;&#xA;&#x9;&#x9;&#x9;&#x9;AGENT_CODE , &#xD;&#xA;&#x9;&#x9;&#x9;&#x9;PERSON_NAME , &#xD;&#xA;&#x9;&#x9;&#x9;&#x9;PERSON_NAME_LANG2 ,&#xD;&#xA;&#x9;&#x9;&#x9;&#x9;NATIONALITY_COUNTRY_CODE , &#xD;&#xA;&#x9;&#x9;&#x9;&#x9;IND_COMPANY , &#xD;&#xA;&#x9;&#x9;&#x9;&#x9;LEGAL_NATURE , &#xD;&#xA;&#x9;&#x9;&#x9;&#x9;LEGAL_NATURE_LANG2 ,&#xD;&#xA;&#x9;&#x9;&#x9;&#x9;LEGAL_ID_TYPE , &#xD;&#xA;&#x9;&#x9;&#x9;&#x9;LEGAL_ID_NBR , &#xD;&#xA;&#x9;&#x9;&#x9;&#x9;INDIVIDUAL_ID_TYPE , &#xD;&#xA;&#x9;&#x9;&#x9;&#x9;INDIVIDUAL_ID_NBR , &#xD;&#xA;&#x9;&#x9;&#x9;&#x9;EMAIL , &#xD;&#xA;&#x9;&#x9;&#x9;&#x9;TELEPHONE , &#xD;&#xA;&#x9;&#x9;&#x9;&#x9;RESIDENCE_COUNTRY_CODE , &#xD;&#xA;&#x9;&#x9;&#x9;&#x9;STATE_NAME , &#xD;&#xA;&#x9;&#x9;&#x9;&#x9;STATE_CODE , &#xD;&#xA;&#x9;&#x9;&#x9;&#x9;CITY_CODE ,&#xD;&#xA;&#x9;&#x9;&#x9;&#x9;CITY_NAME , &#xD;&#xA;&#x9;&#x9;&#x9;&#x9;ADDRESS_ZONE , &#xD;&#xA;&#x9;&#x9;&#x9;&#x9;ADDRESS_STREET , &#xD;&#xA;&#x9;&#x9;&#x9;&#x9;ADDRESS_STREET_LANG2 ,&#xD;&#xA;&#x9;&#x9;&#x9;&#x9;ZIP_CODE , &#xD;&#xA;&#x9;&#x9;&#x9;&#x9;PERSON_NBR , &#xD;&#xA;&#x9;&#x9;&#x9;&#x9;ADDR_NBR , &#xD;&#xA;&#x9;&#x9;&#x9;&#x9;REF_NBR )  &#xD;&#xA;&#x9;&#x9;SELECT&#xD;&#xA;&#x9;&#x9;&#x9;&#x9; PERSON_GROUP_CODE,&#xD;&#xA;&#x9;&#x9;&#x9;&#x9; AGENT_CODE,&#xD;&#xA;&#x9;&#x9;&#x9;&#x9; PERSON_NAME,&#xD;&#xA;&#x9;&#x9;&#x9;&#x9; PERSON_NAME_LANG2,&#xD;&#xA;&#x9;&#x9;&#x9;&#x9; NATIONALITY_COUNTRY_CODE,&#xD;&#xA;&#x9;&#x9;&#x9;&#x9; IND_COMPANY,&#xD;&#xA;&#x9;&#x9;&#x9;&#x9; LEGAL_NATURE,&#xD;&#xA;&#x9;&#x9;&#x9;&#x9; LEGAL_NATURE_LANG2,&#xD;&#xA;&#x9;&#x9;&#x9;&#x9; LEGAL_ID_TYPE,&#xD;&#xA;&#x9;&#x9;&#x9;&#x9; LEGAL_ID_NBR,&#xD;&#xA;&#x9;&#x9;&#x9;&#x9; INDIVIDUAL_ID_TYPE,&#xD;&#xA;&#x9;&#x9;&#x9;&#x9; INDIVIDUAL_ID_NBR,&#xD;&#xA;&#x9;&#x9;&#x9;&#x9; EMAIL,&#xD;&#xA;&#x9;&#x9;&#x9;&#x9; TELEPHONE,&#xD;&#xA;&#x9;&#x9;&#x9;&#x9; RESIDENCE_COUNTRY_CODE,&#xD;&#xA;&#x9;&#x9;&#x9;&#x9; STATE_NAME,&#xD;&#xA;&#x9;&#x9;&#x9;&#x9; STATE_CODE,&#xD;&#xA;&#x9;&#x9;&#x9;&#x9; CITY_CODE,&#xD;&#xA;&#x9;&#x9;&#x9;&#x9; CITY_NAME,&#xD;&#xA;&#x9;&#x9;&#x9;&#x9; ADDRESS_ZONE,&#xD;&#xA;&#x9;&#x9;&#x9;&#x9; ADDRESS_STREET,&#xD;&#xA;&#x9;&#x9;&#x9;&#x9; ADDRESS_STREET_LANG2,&#xD;&#xA;&#x9;&#x9;&#x9;&#x9; ZIP_CODE,&#xD;&#xA;&#x9;&#x9;&#x9;&#x9; PERSON_NBR,&#xD;&#xA;&#x9;&#x9;&#x9;&#x9; ADDR_NBR,&#xD;&#xA;&#x9;&#x9;&#x9;&#x9; ROWID&#xD;&#xA;&#x9;&#x9;FROM  wrk_patent_reprs T &#xD;&#xA;&#x9;&#x9;&#xD;&#xA;&#x9;&#x9;INSERT INTO  wrk_log    &#xD;&#xA;&#x9;&#x9; SELECT 'Load WRK_PERSON_ADDR from WRK_patent_REPRS' , &#xD;&#xA;&#x9;&#x9;&#x9;&#x9;@time1 , datediff(ss, @time1, getdate());&#xD;&#xA;&#x9;&#x9;&#xD;&#xA;&#x9;&#x9;/* Call procedure ImportSetPersonNbr() to set PERSON_NBR and ADDR_NBR */&#xD;&#xA;&#x9;&#x9;EXEC IMPORTSETPERSONNBR&#xD;&#xA;&#xD;&#xA;&#x9;&#x9;/* Update WRK_patent_REPRS, setting PERSON_NBR and ADDR_NBR &#xD;&#xA;&#x9;&#x9;       from WRK_PERSON_ADDR using the ROWNUM as join condition */&#xD;&#xA;&#x9;&#x9;SELECT @time1  =  GETDATE()&#xD;&#xA;&#x9;&#x9;&#xD;&#xA;&#x9;&#x9;UPDATE  T   &#xD;&#xA;&#x9;&#x9;SET&#x9;person_nbr = (&#x9;SELECT person_nbr&#xD;&#xA;&#x9;&#x9;&#x9;FROM  WRK_PERSON_ADDR &#xD;&#xA;&#x9;&#x9;&#x9;WHERE&#x9; ref_nbr  = T.rowid&#xD;&#xA;&#x9;&#x9;),&#x9;&#xD;&#xA;&#x9;&#x9;    addr_nbr = (&#x9;SELECT addr_nbr&#xD;&#xA;&#x9;&#x9;&#x9;FROM  WRK_PERSON_ADDR &#xD;&#xA;&#x9;&#x9;&#x9;WHERE&#x9; ref_nbr  = T.rowid&#xD;&#xA;&#x9;&#x9;) &#xD;&#xA;&#x9;&#x9;FROM  WRK_patent_REPRS T &#xD;&#xA;&#x9;&#x9;&#xD;&#xA;&#x9;&#x9;INSERT INTO  wrk_log    &#xD;&#xA;&#x9;&#x9; SELECT 'Update WRK_patent_REPRS from WRK_PERSON_ADDR' , &#xD;&#xA;&#x9;&#x9;&#x9;&#x9;@time1 , datediff(ss, @time1, getdate());&#xD;&#xA;&#x9;&#x9;&#xD;&#xA;&#x9;&#x9;/* Step 2c: prepare additional data in WRK_patent_INVENTORS */&#xD;&#xA;&#x9;&#x9;/* Load WRK_PERSON_ADDR from WRK_patent_OWNERS, setting REF_NBR from WRK_patent_OWNERS.ROWNUM */&#xD;&#xA;&#x9;&#x9;SELECT @time1  =  GETDATE()&#xD;&#xA;&#x9;&#x9;&#xD;&#xA;&#x9;&#x9;DELETE FROM   wrk_person_addr    &#xD;&#xA;&#x9;&#x9;&#xD;&#xA;&#x9;&#x9;INSERT INTO  wrk_person_addr   &#xD;&#xA;&#x9;&#x9;&#x9;&#x9;( PERSON_GROUP_CODE , &#xD;&#xA;&#x9;&#x9;&#x9;&#x9;AGENT_CODE , &#xD;&#xA;&#x9;&#x9;&#x9;&#x9;PERSON_NAME , &#xD;&#xA;&#x9;&#x9;&#x9;&#x9;PERSON_NAME_LANG2 ,&#xD;&#xA;&#x9;&#x9;&#x9;&#x9;NATIONALITY_COUNTRY_CODE , &#xD;&#xA;&#x9;&#x9;&#x9;&#x9;IND_COMPANY , &#xD;&#xA;&#x9;&#x9;&#x9;&#x9;LEGAL_NATURE , &#xD;&#xA;&#x9;&#x9;&#x9;&#x9;LEGAL_NATURE_LANG2 ,&#xD;&#xA;&#x9;&#x9;&#x9;&#x9;LEGAL_ID_TYPE , &#xD;&#xA;&#x9;&#x9;&#x9;&#x9;LEGAL_ID_NBR , &#xD;&#xA;&#x9;&#x9;&#x9;&#x9;INDIVIDUAL_ID_TYPE , &#xD;&#xA;&#x9;&#x9;&#x9;&#x9;INDIVIDUAL_ID_NBR , &#xD;&#xA;&#x9;&#x9;&#x9;&#x9;EMAIL , &#xD;&#xA;&#x9;&#x9;&#x9;&#x9;TELEPHONE , &#xD;&#xA;&#x9;&#x9;&#x9;&#x9;RESIDENCE_COUNTRY_CODE , &#xD;&#xA;&#x9;&#x9;&#x9;&#x9;STATE_NAME , &#xD;&#xA;&#x9;&#x9;&#x9;&#x9;STATE_CODE , &#xD;&#xA;&#x9;&#x9;&#x9;&#x9;CITY_CODE ,&#xD;&#xA;&#x9;&#x9;&#x9;&#x9;CITY_NAME , &#xD;&#xA;&#x9;&#x9;&#x9;&#x9;ADDRESS_ZONE , &#xD;&#xA;&#x9;&#x9;&#x9;&#x9;ADDRESS_STREET , &#xD;&#xA;&#x9;&#x9;&#x9;&#x9;ADDRESS_STREET_LANG2 ,&#xD;&#xA;&#x9;&#x9;&#x9;&#x9;ZIP_CODE , &#xD;&#xA;&#x9;&#x9;&#x9;&#x9;PERSON_NBR , &#xD;&#xA;&#x9;&#x9;&#x9;&#x9;ADDR_NBR , &#xD;&#xA;&#x9;&#x9;&#x9;&#x9;REF_NBR )  &#xD;&#xA;&#x9;&#x9;SELECT&#xD;&#xA;&#x9;&#x9;&#x9;&#x9; PERSON_GROUP_CODE,&#xD;&#xA;&#x9;&#x9;&#x9;&#x9; CAST(null as NUMERIC (4)),&#xD;&#xA;&#x9;&#x9;&#x9;&#x9; PERSON_NAME,&#xD;&#xA;&#x9;&#x9;&#x9;&#x9; PERSON_NAME_LANG2,&#xD;&#xA;&#x9;&#x9;&#x9;&#x9; NATIONALITY_COUNTRY_CODE,&#xD;&#xA;&#x9;&#x9;&#x9;&#x9; IND_COMPANY,&#xD;&#xA;&#x9;&#x9;&#x9;&#x9; LEGAL_NATURE,&#xD;&#xA;&#x9;&#x9;&#x9;&#x9; LEGAL_NATURE_LANG2,&#xD;&#xA;&#x9;&#x9;&#x9;&#x9; LEGAL_ID_TYPE,&#xD;&#xA;&#x9;&#x9;&#x9;&#x9; LEGAL_ID_NBR,&#xD;&#xA;&#x9;&#x9;&#x9;&#x9; INDIVIDUAL_ID_TYPE,&#xD;&#xA;&#x9;&#x9;&#x9;&#x9; INDIVIDUAL_ID_NBR,&#xD;&#xA;&#x9;&#x9;&#x9;&#x9; EMAIL,&#xD;&#xA;&#x9;&#x9;&#x9;&#x9; TELEPHONE,&#xD;&#xA;&#x9;&#x9;&#x9;&#x9; RESIDENCE_COUNTRY_CODE,&#xD;&#xA;&#x9;&#x9;&#x9;&#x9; STATE_NAME,&#xD;&#xA;&#x9;&#x9;&#x9;&#x9; STATE_CODE,&#xD;&#xA;&#x9;&#x9;&#x9;&#x9; CITY_CODE,&#xD;&#xA;&#x9;&#x9;&#x9;&#x9; CITY_NAME,&#xD;&#xA;&#x9;&#x9;&#x9;&#x9; ADDRESS_ZONE,&#xD;&#xA;&#x9;&#x9;&#x9;&#x9; ADDRESS_STREET,&#xD;&#xA;&#x9;&#x9;&#x9;&#x9; ADDRESS_STREET_LANG2,&#xD;&#xA;&#x9;&#x9;&#x9;&#x9; ZIP_CODE,&#xD;&#xA;&#x9;&#x9;&#x9;&#x9; PERSON_NBR,&#xD;&#xA;&#x9;&#x9;&#x9;&#x9; ADDR_NBR,&#xD;&#xA;&#x9;&#x9;&#x9;&#x9; ROWID&#xD;&#xA;&#x9;&#x9;FROM  wrk_patent_inventors T &#xD;&#xA;&#x9;&#x9;&#xD;&#xA;&#x9;&#x9;INSERT INTO  wrk_log    &#xD;&#xA;&#x9;&#x9; SELECT 'Load WRK_PERSON_ADDR from WRK_patent_INVENTORS' , &#xD;&#xA;&#x9;&#x9;&#x9;&#x9;@time1 , datediff(ss, @time1, getdate());&#xD;&#xA;&#x9;&#x9;&#xD;&#xA;&#x9;&#x9;/* Call procedure ImportSetPersonNbr() to set PERSON_NBR and ADDR_NBR */&#xD;&#xA;&#x9;&#x9;EXEC IMPORTSETPERSONNBR&#xD;&#xA;&#xD;&#xA;&#x9;&#x9;/* Update WRK_patent_INVENTORS, setting PERSON_NBR and ADDR_NBR &#xD;&#xA;&#x9;&#x9;       from WRK_PERSON_ADDR using the ROWNUM as join condition */&#xD;&#xA;&#x9;&#x9;SELECT @time1  =  GETDATE()&#xD;&#xA;&#x9;&#x9;&#xD;&#xA;&#x9;&#x9;UPDATE  T   &#xD;&#xA;&#x9;&#x9;SET&#x9;person_nbr = (&#x9;SELECT person_nbr&#xD;&#xA;&#x9;&#x9;&#x9;FROM  WRK_PERSON_ADDR &#xD;&#xA;&#x9;&#x9;&#x9;WHERE&#x9; ref_nbr  = T.rowid&#xD;&#xA;&#x9;&#x9;),&#x9;&#xD;&#xA;&#x9;&#x9;    addr_nbr = (&#x9;SELECT addr_nbr&#xD;&#xA;&#x9;&#x9;&#x9;FROM  WRK_PERSON_ADDR &#xD;&#xA;&#x9;&#x9;&#x9;WHERE&#x9; ref_nbr  = T.rowid&#xD;&#xA;&#x9;&#x9;) &#xD;&#xA;&#x9;&#x9;FROM  WRK_patent_INVENTORS T &#xD;&#xA;&#x9;&#x9;&#xD;&#xA;&#x9;&#x9;INSERT INTO  wrk_log    &#xD;&#xA;&#x9;&#x9; SELECT 'Update WRK_patent_INVENTORS from WRK_PERSON_ADDR' , &#xD;&#xA;&#x9;&#x9;&#x9;&#x9;@time1 , datediff(ss, @time1, getdate());&#xD;&#xA;&#x9;&#x9;&#xD;&#xA;&#x9;&#x9;/* Step 2d: update PRIORITY_APPL_ID_ALT in WRK_patent_PRIORITIES */&#xD;&#xA;&#x9;&#x9;SELECT @time1  =  GETDATE()&#xD;&#xA;&#xD;&#xA;&#x9;&#x9;/* Browse WRK_patent_PRIORITIES */&#xD;&#xA;&#x9;&#x9;DECLARE curPrio cursor LOCAL FOR &#xD;&#xA;&#x9;&#x9;SELECT application_id&#xD;&#xA;&#x9;&#x9;FROM  wrk_patent_priorities (UPDLOCK)  &#xD;&#xA;&#x9;&#x9;&#xD;&#xA;&#x9;&#x9;DECLARE @recPrio_APPLICATION_ID&#x9;VARCHAR(200)&#xD;&#xA;&#x9;&#x9;DECLARE @VarPRIORITY_APPL_ID_ALT                  VARCHAR(254) &#xD;&#xA;&#x9;&#x9;&#xD;&#xA;&#x9;&#x9;OPEN curPrio &#xD;&#xA;&#x9;&#x9;DECLARE @count INT &#xD;&#xA;&#x9;&#x9;SET @count = 1 &#xD;&#xA;&#x9;&#x9;WHILE (0 = 0) &#xD;&#xA;&#x9;&#x9;BEGIN --( &#xD;&#xA;&#x9;&#x9;&#x9;&#xD;&#xA;&#x9;&#x9;&#x9;fetch NEXT FROM curPrio INTO @recPrio_APPLICATION_ID&#xD;&#xA;&#x9;&#x9;&#x9;IF (@@FETCH_STATUS = -1) &#xD;&#xA;&#x9;&#x9;&#x9;BREAK&#xD;&#xA;&#xD;&#xA;&#x9;&#x9;&#x9;/* Build VarPRIORITY_APPL_ID_ALT by removing the non-numeric characters from PRIORITY_APPL_ID */&#xD;&#xA;&#x9;&#x9;&#x9;&#xD;&#xA;&#x9;&#x9;&#x9;SELECT @VarPRIORITY_APPL_ID_ALT  = '' &#xD;&#xA;&#x9;&#x9;&#x9;DECLARE @i INTEGER&#xD;&#xA;&#xD;&#xA;&#x9;&#x9;&#x9;SELECT @i  = 1 &#xD;&#xA;&#xD;&#xA;&#x9;&#x9;&#x9;WHILE @i &lt;= len(@recPrio_APPLICATION_ID)&#xD;&#xA;&#xD;&#xA;&#x9;&#x9;&#x9;BEGIN&#xD;&#xA;&#xD;&#xA;&#xD;&#xA;&#x9;&#x9;&#x9;&#xD;&#xA;&#x9;&#x9;&#x9;&#x9;IF SUBSTRING(@recPrio_APPLICATION_ID, @i, 1)between '0' and '9' &#xD;&#xA;&#x9;&#x9;&#x9;&#x9;BEGIN &#xD;&#xA;&#x9;&#x9;&#x9;&#x9;&#x9;SELECT @VarPRIORITY_APPL_ID_ALT  = @VarPRIORITY_APPL_ID_ALT + SUBSTRING(@recPrio_APPLICATION_ID, @i, 1)&#xD;&#xA;&#x9;&#x9;&#x9;&#x9;END&#xD;&#xA;   &#xD;&#xA;&#xD;&#xA;&#x9;&#x9;&#x9;&#x9;SELECT @i = @i + 1&#xD;&#xA;&#xD;&#xA;&#x9;&#x9;&#x9;END&#xD;&#xA;&#xD;&#xA;&#x9;&#x9;&#x9; IF ( @VarPRIORITY_APPL_ID_ALT='')&#xD;&#xA;&#x9;&#x9;&#x9;&#x9; SET @VarPRIORITY_APPL_ID_ALT='0'&#xD;&#xA;&#xD;&#xA;&#x9;&#x9;&#x9;&#xD;&#xA;&#x9;&#x9;&#x9;/* update PRIORITY_APPL_ID_ALT from cast(PRIORITY_APPL_ID_ALT as number) with last 14 digits */&#xD;&#xA;&#x9;&#x9;&#x9;UPDATE  wrk_patent_priorities   &#xD;&#xA;&#x9;&#x9;&#x9;SET&#x9;PRIORITY_APPL_ID_ALT = (( CAST(@VarPRIORITY_APPL_ID_ALT as NUMERIC) ) % ( 100000000000000 )) &#xD;&#xA;&#x9;&#x9;&#x9; where current of curPrio  &#xD;&#xA;&#x9;&#x9;&#x9;&#xD;&#xA;&#x9;&#x9;&#x9;SELECT @count=@count +1&#xD;&#xA;&#x9;&#x9;END --) &#xD;&#xA;&#x9;&#x9;close curPrio&#xD;&#xA;&#x9;&#x9;&#xD;&#xA;&#x9;&#x9;INSERT INTO  wrk_log    &#xD;&#xA;&#x9;&#x9; SELECT 'Step 2d: update PRIORITY_APPL_ID_ALT in WRK_patent_PRIORITIES' , &#xD;&#xA;&#x9;&#x9;&#x9;&#x9;@time1 , datediff(ss, @time1, getdate());&#xD;&#xA;&#x9;&#x9;&#xD;&#xA;&#x9;&#x9;/* 1.2.3 Step 3: update additional data in WRK_patent */&#xD;&#xA;&#x9;&#x9;SELECT @time1  =  GETDATE()&#xD;&#xA;&#x9;&#x9;&#xD;&#xA;&#x9;&#x9;/* Update FIRST_PRIORITY_DATE from min(PRIORITY_DATE) from  [&quot;+ context.intermediateDB + &quot;].[dbo].VW_IMPORT_patent_PRIORITIES where IND_ACCEPTED = 1 */&#xD;&#xA;&#x9;&#x9;UPDATE  M   &#xD;&#xA;&#x9;&#x9;SET&#x9;FIRST_PRIORITY_DATE = (&#x9;SELECT MIN(PRIORITY_DATE)&#xD;&#xA;&#x9;&#x9;&#x9;FROM   [&quot;+ context.intermediateDB + &quot;].[dbo].VW_IMPORT_patent_PRIORITIES T &#xD;&#xA;&#x9;&#x9;&#x9;WHERE&#x9; M.file_seq  = T.file_seq&#xD;&#xA;&#x9;&#x9;&#x9; AND&#x9;M.file_type  = T.file_type&#xD;&#xA;&#x9;&#x9;&#x9; AND&#x9;M.file_series  = T.file_series&#xD;&#xA;&#x9;&#x9;&#x9; AND&#x9;M.file_nbr  = T.file_nbr&#xD;&#xA;&#x9;&#x9;&#x9; AND&#x9;IND_ACCEPTED  = 1&#xD;&#xA;&#x9;&#x9;) &#xD;&#xA;&#x9;&#x9;FROM  wrk_patent M &#xD;&#xA;&#x9;&#x9;&#xD;&#xA;&#x9;&#x9;/* Update NOVELTY1_DATE from minimum between FILING_DATE, PCT_APPLICATION_DATE and FIRST_PRIORITY_DATE (provided not null) */&#xD;&#xA;&#x9;&#x9;UPDATE  M   &#xD;&#xA;&#x9;&#x9;SET&#x9;NOVELTY_DATE = &#xD;&#xA;&#x9;&#x9;CASE WHEN &#xD;&#xA;&#x9;&#x9;CASE WHEN FILING_DATE &lt; COALESCE(FIRST_PRIORITY_DATE, CONVERT(DATETIME, '31/12/2099', 103)) THEN FILING_DATE ELSE COALESCE(FIRST_PRIORITY_DATE, CONVERT(DATETIME, '31/12/2099', 103)) END &lt; COALESCE(PCT_APPLICATION_DATE, CONVERT(DATETIME, '31/12/2099', 103)) THEN &#xD;&#xA;&#x9;&#x9;CASE WHEN FILING_DATE &lt; COALESCE(FIRST_PRIORITY_DATE, CONVERT(DATETIME, '31/12/2099', 103)) THEN FILING_DATE ELSE COALESCE(FIRST_PRIORITY_DATE, CONVERT(DATETIME, '31/12/2099', 103)) END ELSE COALESCE(PCT_APPLICATION_DATE, CONVERT(DATETIME, '31/12/2099', 103)) END &#xD;&#xA;&#x9;&#x9;FROM  wrk_patent M &#xD;&#xA;&#x9;&#x9;&#xD;&#xA;&#x9;&#x9;/* Update MAIN_OWNER_PERSON_NBR, MAIN_OWNER_ADDR_NBR,  &#xD;&#xA;&#x9;&#x9;       from WRK_patent_OWNERS where the file is the same and IND_SERVICE = 1 */&#xD;&#xA;&#x9;&#x9;UPDATE  M   &#xD;&#xA;&#x9;&#x9;SET&#x9;MAIN_OWNER_PERSON_NBR = (&#x9;SELECT person_nbr&#xD;&#xA;&#x9;&#x9;&#x9;FROM  wrk_patent_owners T &#xD;&#xA;&#x9;&#x9;&#x9;WHERE&#x9; M.file_seq  = T.file_seq&#xD;&#xA;&#x9;&#x9;&#x9; AND&#x9;M.file_type  = T.file_type&#xD;&#xA;&#x9;&#x9;&#x9; AND&#x9;M.file_series  = T.file_series&#xD;&#xA;&#x9;&#x9;&#x9; AND&#x9;M.file_nbr  = T.file_nbr&#xD;&#xA;&#x9;&#x9;&#x9; AND&#x9;ind_service  = 1&#xD;&#xA;&#x9;&#x9;),&#x9;&#xD;&#xA;&#x9;&#x9;    MAIN_OWNER_ADDR_NBR = (&#x9;SELECT addr_nbr&#xD;&#xA;&#x9;&#x9;&#x9;FROM  wrk_patent_owners T &#xD;&#xA;&#x9;&#x9;&#x9;WHERE&#x9; M.file_seq  = T.file_seq&#xD;&#xA;&#x9;&#x9;&#x9; AND&#x9;M.file_type  = T.file_type&#xD;&#xA;&#x9;&#x9;&#x9; AND&#x9;M.file_series  = T.file_series&#xD;&#xA;&#x9;&#x9;&#x9; AND&#x9;M.file_nbr  = T.file_nbr&#xD;&#xA;&#x9;&#x9;&#x9; AND&#x9;ind_service  = 1&#xD;&#xA;&#x9;&#x9;) &#xD;&#xA;&#x9;&#x9;FROM  wrk_patent M &#xD;&#xA;&#x9;&#x9;&#xD;&#xA;&#x9;&#x9;/* Initialize SERVICE_PERSON_NBR and SERVICE_ADDR_NBR,  &#xD;&#xA;&#x9;&#x9;       from WRK_patent_OWNERS where the file is the same and IND_SERVICE = 1 */&#xD;&#xA;&#x9;&#x9;UPDATE  M   &#xD;&#xA;&#x9;&#x9;SET&#x9;SERVICE_PERSON_NBR = (&#x9;SELECT person_nbr&#xD;&#xA;&#x9;&#x9;&#x9;FROM  wrk_patent_owners T &#xD;&#xA;&#x9;&#x9;&#x9;WHERE&#x9; M.file_seq  = T.file_seq&#xD;&#xA;&#x9;&#x9;&#x9; AND&#x9;M.file_type  = T.file_type&#xD;&#xA;&#x9;&#x9;&#x9; AND&#x9;M.file_series  = T.file_series&#xD;&#xA;&#x9;&#x9;&#x9; AND&#x9;M.file_nbr  = T.file_nbr&#xD;&#xA;&#x9;&#x9;&#x9; AND&#x9;ind_service  = 1&#xD;&#xA;&#x9;&#x9;),&#x9;&#xD;&#xA;&#x9;&#x9;    SERVICE_ADDR_NBR = (&#x9;SELECT addr_nbr&#xD;&#xA;&#x9;&#x9;&#x9;FROM  wrk_patent_owners T &#xD;&#xA;&#x9;&#x9;&#x9;WHERE&#x9; M.file_seq  = T.file_seq&#xD;&#xA;&#x9;&#x9;&#x9; AND&#x9;M.file_type  = T.file_type&#xD;&#xA;&#x9;&#x9;&#x9; AND&#x9;M.file_series  = T.file_series&#xD;&#xA;&#x9;&#x9;&#x9; AND&#x9;M.file_nbr  = T.file_nbr&#xD;&#xA;&#x9;&#x9;&#x9; AND&#x9;ind_service  = 1&#xD;&#xA;&#x9;&#x9;) &#xD;&#xA;&#x9;&#x9;FROM  wrk_patent M &#xD;&#xA;&#x9;&#x9;&#xD;&#xA;&#x9;&#x9;/* Update SERVICE_PERSON_NBR and SERVICE_ADDR_NBR for those files with a&#xD;&#xA;&#x9;&#x9;       matching WRK_patent_REPRS where the file is the same and IND_SERVICE = 1 */&#xD;&#xA;&#x9;&#x9;UPDATE  M   &#xD;&#xA;&#x9;&#x9;SET&#x9;SERVICE_PERSON_NBR = (&#x9;SELECT person_nbr&#xD;&#xA;&#x9;&#x9;&#x9;FROM  wrk_patent_reprs T &#xD;&#xA;&#x9;&#x9;&#x9;WHERE&#x9; M.file_seq  = T.file_seq&#xD;&#xA;&#x9;&#x9;&#x9; AND&#x9;M.file_type  = T.file_type&#xD;&#xA;&#x9;&#x9;&#x9; AND&#x9;M.file_series  = T.file_series&#xD;&#xA;&#x9;&#x9;&#x9; AND&#x9;M.file_nbr  = T.file_nbr&#xD;&#xA;&#x9;&#x9;&#x9; AND&#x9;ind_service  = 1&#xD;&#xA;&#x9;&#x9;),&#x9;&#xD;&#xA;&#x9;&#x9;    SERVICE_ADDR_NBR = (&#x9;SELECT addr_nbr&#xD;&#xA;&#x9;&#x9;&#x9;FROM  wrk_patent_reprs T &#xD;&#xA;&#x9;&#x9;&#x9;WHERE&#x9; M.file_seq  = T.file_seq&#xD;&#xA;&#x9;&#x9;&#x9; AND&#x9;M.file_type  = T.file_type&#xD;&#xA;&#x9;&#x9;&#x9; AND&#x9;M.file_series  = T.file_series&#xD;&#xA;&#x9;&#x9;&#x9; AND&#x9;M.file_nbr  = T.file_nbr&#xD;&#xA;&#x9;&#x9;&#x9; AND&#x9;ind_service  = 1&#xD;&#xA;&#x9;&#x9;) &#xD;&#xA;&#x9;&#x9;FROM  wrk_patent M &#xD;&#xA;&#x9;&#x9;WHERE    exists&#xD;&#xA;&#x9;&#x9;&#x9;(&#xD;&#xA;&#x9;&#x9; &#x9;SELECT *&#xD;&#xA;&#x9;&#x9;&#x9;FROM  wrk_patent_reprs T &#xD;&#xA;&#x9;&#x9;&#x9;WHERE&#x9; M.file_seq  = T.file_seq&#xD;&#xA;&#x9;&#x9;&#x9; AND&#x9;M.file_type  = T.file_type&#xD;&#xA;&#x9;&#x9;&#x9; AND&#x9;M.file_series  = T.file_series&#xD;&#xA;&#x9;&#x9;&#x9; AND&#x9;M.file_nbr  = T.file_nbr&#xD;&#xA;&#x9;&#x9;&#x9; AND&#x9;ind_service  = 1&#xD;&#xA;&#x9;&#x9;&#x9;) &#xD;&#xA;&#x9;&#x9;&#xD;&#xA;&#x9;&#x9;/* Update PROC_TYP from CF_LAW_APPLICATION_TYPE.GENERATE_PROC_TYP */&#xD;&#xA;&#x9;&#x9;UPDATE  M   &#xD;&#xA;&#x9;&#x9;SET&#x9;proc_typ = (&#x9;SELECT generate_proc_typ&#xD;&#xA;&#x9;&#x9;&#x9;FROM  CF_APPLICATION_TYPE T &#xD;&#xA;&#x9;&#x9;&#x9;WHERE&#x9; appl_typ  = application_type&#x9;COLLATE DATABASE_DEFAULT&#xD;&#xA;&#x9;&#x9;) &#xD;&#xA;&#x9;&#x9;FROM  wrk_patent M &#xD;&#xA;&#x9;&#x9;&#xD;&#xA;&#x9;&#x9;/* Update STATUS_CODE from CF_PROCESS_TYPE.SECONDARY_INI_STATUS_CODE */&#xD;&#xA;&#x9;&#x9;UPDATE  M   &#xD;&#xA;&#x9;&#x9;SET&#x9;status_code = (&#x9;SELECT SECONDARY_INI_STATUS_CODE&#xD;&#xA;&#x9;&#x9;&#x9;FROM  CF_PROCESS_TYPE T &#xD;&#xA;&#x9;&#x9;&#x9;WHERE&#x9; T.proc_typ  = M.proc_typ&#xD;&#xA;&#x9;&#x9;) &#xD;&#xA;&#x9;&#x9;FROM  wrk_patent M &#xD;&#xA;&#x9;&#x9;&#xD;&#xA;&#x9;&#x9;INSERT INTO  wrk_log    &#xD;&#xA;&#x9;&#x9; SELECT 'Step 3: update additional data in WRK_patent' , &#xD;&#xA;&#x9;&#x9;&#x9;&#x9;@time1 , datediff(ss, @time1, getdate());&#xD;&#xA;&#x9;&#x9;&#xD;&#xA;&#x9;&#x9;/* Other WRK_patent updates which require a tuple by tuple processing */&#xD;&#xA;&#x9;&#x9;SELECT @time1  =  GETDATE()&#xD;&#xA;&#xD;&#xA;&#x9;&#x9;DECLARE @ConfigDOC_ORI                            VARCHAR(8) &#xD;&#xA;&#x9;&#x9;DECLARE @NumDOC_NBR                               FLOAT &#xD;&#xA;&#x9;&#x9;DECLARE @NumPROC_NBR                              FLOAT &#xD;&#xA;&#x9;&#x9;DECLARE @VarDOC_ORI                               VARCHAR(8) &#xD;&#xA;&#x9;&#x9;DECLARE @VarDOC_SER                               FLOAT &#xD;&#xA;&#x9;&#x9;DECLARE @VarDOC_NBR                               FLOAT &#xD;&#xA;&#x9;&#x9;&#xD;&#xA;&#x9;&#x9;SELECT&#x9;@ConfigDOC_ORI  =  value&#xD;&#xA;&#x9;&#x9;FROM&#x9;cf_config_param &#xD;&#xA;&#x9;&#x9;WHERE&#x9;config_code  = 'MigrationCodOri'&#xD;&#xA;&#x9;&#x9;&#xD;&#xA;&#x9;&#x9;SELECT&#x9;@NumDOC_NBR  =  ISNULL(MAX(DOC_NBR), 0)&#xD;&#xA;&#x9;&#x9;FROM&#x9;IP_DOC &#xD;&#xA;&#x9;&#x9;WHERE&#x9;DOC_ORI  = @ConfigDOC_ORI&#xD;&#xA;&#x9;&#x9;&#xD;&#xA;&#x9;&#x9;SELECT @NumPROC_NBR  =  ISNULL(MAX(PROC_NBR), 0)&#xD;&#xA;&#x9;&#x9;FROM  IP_PROC &#xD;&#xA;&#x9;&#x9;&#xD;&#xA;&#x9;&#x9;/* process all WRK_patent */&#xD;&#xA;&#x9;&#x9;DECLARE cur4 cursor LOCAL FOR &#xD;&#xA;&#x9;&#x9;SELECT&#x9;file_seq, file_type, file_series, file_nbr, doc_ori, doc_series, doc_nbr&#xD;&#xA;&#x9;&#x9;FROM&#x9;wrk_patent (UPDLOCK)  &#xD;&#xA;&#x9;&#x9;&#xD;&#xA;&#x9;&#x9;DECLARE @rec4_file_seq&#x9;&#x9;VARCHAR(200)&#xD;&#xA;&#x9;&#x9;DECLARE @rec4_file_type&#x9;&#x9;VARCHAR(200)&#xD;&#xA;&#x9;&#x9;DECLARE @rec4_file_series&#x9;NUMERIC&#xD;&#xA;&#x9;&#x9;DECLARE @rec4_file_nbr&#x9;&#x9;NUMERIC&#xD;&#xA;&#x9;&#x9;DECLARE @rec4_doc_ori&#x9;&#x9;VARCHAR(200)&#xD;&#xA;&#x9;&#x9;DECLARE @rec4_doc_series&#x9;NUMERIC&#xD;&#xA;&#x9;&#x9;DECLARE @rec4_doc_nbr&#x9;&#x9;NUMERIC&#xD;&#xA;&#x9;&#xD;&#xA;&#x9;&#x9;OPEN cur4 &#xD;&#xA;&#x9;&#x9;WHILE (0 = 0) &#xD;&#xA;&#x9;&#x9;BEGIN --( &#xD;&#xA;&#x9;&#x9;&#x9;&#xD;&#xA;&#x9;&#x9;&#x9;fetch NEXT FROM cur4 INTO @rec4_file_seq, @rec4_file_type, @rec4_file_series, @rec4_file_nbr, @rec4_doc_ori, @rec4_doc_series, @rec4_doc_nbr&#xD;&#xA;&#x9;&#x9;&#x9;IF (@@FETCH_STATUS = -1) &#xD;&#xA;&#x9;&#x9;&#x9;BREAK&#xD;&#xA;&#xD;&#xA;&#x9;&#x9;&#x9;/* if DOC_NBR is null, increment numbering, else set from current values */&#xD;&#xA;&#x9;&#x9;&#x9;&#xD;&#xA;&#x9;&#x9;&#x9;IF @rec4_DOC_NBR is null &#xD;&#xA;&#x9;&#x9;&#x9;BEGIN &#xD;&#xA;&#x9;&#x9;&#x9;&#x9;SET @NumDOC_NBR  = @NumDOC_NBR + 1 &#xD;&#xA;&#x9;&#x9;&#x9;&#x9;SET @VarDOC_ORI  = @ConfigDOC_ORI &#xD;&#xA;&#x9;&#x9;&#x9;&#x9;SET @VarDOC_SER  = 1 &#xD;&#xA;&#x9;&#x9;&#x9;&#x9;SET @VarDOC_NBR  = @NumDOC_NBR &#xD;&#xA;&#x9;&#x9;&#x9;END&#xD;&#xA;&#x9;&#x9;&#x9;ELSE&#xD;&#xA;&#x9;&#x9;&#x9;BEGIN &#xD;&#xA;&#x9;&#x9;&#x9;&#x9;SET @VarDOC_ORI  = @rec4_DOC_ORI &#xD;&#xA;&#x9;&#x9;&#x9;&#x9;SET @VarDOC_SER  = @rec4_DOC_SERIES &#xD;&#xA;&#x9;&#x9;&#x9;&#x9;SET @VarDOC_NBR  = @rec4_DOC_NBR &#xD;&#xA;&#x9;&#x9;&#x9;END&#xD;&#xA;   &#xD;&#xA;&#x9;&#x9;&#x9;/* Increment NumPROC_NBR but do not insert IP_PROC yet since there is a FK */&#xD;&#xA;&#x9;&#x9;&#x9;SET @NumPROC_NBR  = @NumPROC_NBR + 1 &#xD;&#xA;&#x9;&#x9;&#x9;/* update WRK_patent with the updated fields */&#xD;&#xA;&#x9;&#x9;&#x9;UPDATE  wrk_patent   &#xD;&#xA;&#x9;&#x9;&#x9;SET&#x9;DOC_ORI&#x9;&#x9;= @VarDOC_ORI,&#x9;&#xD;&#xA;&#x9;&#x9;&#x9;    DOC_SERIES&#x9;= @VarDOC_SER,&#x9;&#xD;&#xA;&#x9;&#x9;&#x9;    DOC_NBR&#x9;&#x9;= @VarDOC_NBR,&#x9;&#xD;&#xA;&#x9;&#x9;&#x9;    PROC_NBR&#x9;= @NumPROC_NBR &#xD;&#xA;&#x9;&#x9;&#x9; where current of cur4  &#xD;&#xA;&#x9;&#x9;END --) &#xD;&#xA;&#x9;&#x9;close cur4&#xD;&#xA;&#x9;&#x9;&#xD;&#xA;&#x9;&#x9;INSERT INTO  wrk_log    &#xD;&#xA;&#x9;&#x9; SELECT 'Other WRK_patent updates which require a tuple by tuple processing' , &#xD;&#xA;&#x9;&#x9;&#x9;&#x9;@time1 , datediff(ss, @time1, getdate());&#xD;&#xA;&#x9;&#x9;&#xD;&#xA;&#x9;&#x9;/* 1.2.4 Step 4: prepare other tables */&#xD;&#xA;&#x9;&#x9;SELECT @time1  =  GETDATE()&#xD;&#xA;&#x9;&#x9;&#xD;&#xA;&#x9;&#x9;/* Insert into CF_DOC_SERIES from distinct FILE_SER from WRK_patent (only new tuples) */&#xD;&#xA;&#x9;&#x9;INSERT INTO  CF_DOC_SERIES   &#xD;&#xA;&#x9;&#x9;&#x9;&#x9;( row_version , &#xD;&#xA;&#x9;&#x9;&#x9;&#x9;doc_ser , &#xD;&#xA;&#x9;&#x9;&#x9;&#x9;ind_active )  &#xD;&#xA;&#x9;&#x9;SELECT DISTINCT&#xD;&#xA;&#x9;&#x9;&#x9;&#x9; 1,&#xD;&#xA;&#x9;&#x9;&#x9;&#x9; file_series,&#xD;&#xA;&#x9;&#x9;&#x9;&#x9; 'N'&#xD;&#xA;&#x9;&#x9;FROM  wrk_patent &#xD;&#xA;&#x9;&#x9;WHERE&#x9; file_series  not in&#xD;&#xA;&#x9;&#x9;&#x9;(&#xD;&#xA;&#x9;&#x9; &#x9;SELECT doc_ser&#xD;&#xA;&#x9;&#x9;&#x9;FROM  CF_DOC_SERIES &#xD;&#xA;&#x9;&#x9;&#x9;)&#xD;&#xA;&#x9;&#x9;&#xD;&#xA;&#x9;&#x9;/* Insert into CF_DOC_SERIES from distinct year(reception_date) from WRK_patent (only new tuples) */&#xD;&#xA;&#x9;&#x9;INSERT INTO  CF_DOC_SERIES   &#xD;&#xA;&#x9;&#x9;&#x9;&#x9;( row_version , &#xD;&#xA;&#x9;&#x9;&#x9;&#x9;doc_ser , &#xD;&#xA;&#x9;&#x9;&#x9;&#x9;ind_active )  &#xD;&#xA;&#x9;&#x9;SELECT DISTINCT&#xD;&#xA;&#x9;&#x9;&#x9;&#x9; 1,&#xD;&#xA;&#x9;&#x9;&#x9;&#x9; CAST(DATEPART(YYYY, reception_date) as NUMERIC),&#xD;&#xA;&#x9;&#x9;&#x9;&#x9; 'N'&#xD;&#xA;&#x9;&#x9;FROM  wrk_patent &#xD;&#xA;&#x9;&#x9;WHERE&#x9; CAST(DATEPART(YYYY, reception_date) as NUMERIC)  not in&#xD;&#xA;&#x9;&#x9;&#x9;(&#xD;&#xA;&#x9;&#x9; &#x9;SELECT doc_ser&#xD;&#xA;&#x9;&#x9;&#x9;FROM  CF_DOC_SERIES &#xD;&#xA;&#x9;&#x9;&#x9;)&#xD;&#xA;&#x9;&#x9;&#xD;&#xA;&#x9;&#x9;/* Insert into IP_DAY from distinct RECEPTION_DATE from WRK_patent (only new tuples) */&#xD;&#xA;&#x9;&#x9;INSERT INTO  IP_DAY   &#xD;&#xA;&#x9;&#x9;&#x9;&#x9;( row_version , &#xD;&#xA;&#x9;&#x9;&#x9;&#x9;daily_date , &#xD;&#xA;&#x9;&#x9;&#x9;&#x9;doc_ser ,&#xD;&#xA;&#x9;&#x9;&#x9;&#x9;next_working_date)  &#xD;&#xA;&#x9;&#x9;SELECT DISTINCT&#xD;&#xA;&#x9;&#x9;&#x9;&#x9; 1,&#xD;&#xA;&#x9;&#x9;&#x9;&#x9; cast(reception_date as DATE),&#xD;&#xA;&#x9;&#x9;&#x9;&#x9; CAST(DATEPART(YYYY, reception_date) as NUMERIC),&#xD;&#xA;&#x9;&#x9;&#x9;&#x9; case&#xD;&#xA;&#x9;&#x9;&#x9;&#x9;    when datepart(dw, cast(reception_date as DATE)) = 7 /* Saturday */&#xD;&#xA;&#x9;&#x9;&#x9;&#x9;            then dateadd(dd, 2, cast(reception_date as DATE))&#xD;&#xA;&#x9;&#x9;&#x9;&#x9;    when datepart(dw, cast(reception_date as DATE)) = 1 /* Sunday */&#xD;&#xA;&#x9;&#x9;&#x9;&#x9;            then dateadd(dd, 1, cast(reception_date as DATE))&#xD;&#xA;&#x9;&#x9;&#x9;&#x9;    else null&#xD;&#xA;&#x9;&#x9;&#x9;&#x9; end&#xD;&#xA;&#x9;&#x9;FROM  wrk_patent &#xD;&#xA;&#x9;&#x9;WHERE&#x9; cast(reception_date as DATE) not in&#xD;&#xA;&#x9;&#x9;&#x9;(&#xD;&#xA;&#x9;&#x9; &#x9;SELECT daily_date&#xD;&#xA;&#x9;&#x9;&#x9;FROM  IP_DAY &#xD;&#xA;&#x9;&#x9;&#x9;)&#xD;&#xA;&#x9;&#x9;&#xD;&#xA;&#x9;&#x9;/* Insert into IP_DAILY_LOG from distinct DOC_ORI, DOC_LOG, FILING_DATE from WRK_patent (only new tuples) */&#xD;&#xA;&#x9;&#x9;INSERT INTO  IP_DAILY_LOG   &#xD;&#xA;&#x9;&#x9;&#x9;&#x9;( row_version , &#xD;&#xA;&#x9;&#x9;&#x9;&#x9;doc_ori , &#xD;&#xA;&#x9;&#x9;&#x9;&#x9;doc_log , &#xD;&#xA;&#x9;&#x9;&#x9;&#x9;daily_log_date )  &#xD;&#xA;&#x9;&#x9;SELECT DISTINCT&#xD;&#xA;&#x9;&#x9;&#x9;&#x9; 1,&#xD;&#xA;&#x9;&#x9;&#x9;&#x9; DOC_ORI,&#xD;&#xA;&#x9;&#x9;&#x9;&#x9; 'E',&#xD;&#xA;&#x9;&#x9;&#x9;&#x9; cast(reception_date as DATE)&#xD;&#xA;&#x9;&#x9;FROM  wrk_patent M &#xD;&#xA;&#x9;&#x9;WHERE&#x9; NOT   exists&#xD;&#xA;&#x9;&#x9;&#x9;(&#xD;&#xA;&#x9;&#x9; &#x9;SELECT *&#xD;&#xA;&#x9;&#x9;&#x9;FROM  IP_DAILY_LOG L &#xD;&#xA;&#x9;&#x9;&#x9;WHERE&#x9; L.DOC_ORI  = M.DOC_ORI&#x9;&#x9;COLLATE DATABASE_DEFAULT&#xD;&#xA;&#x9;&#x9;&#x9; AND&#x9;DOC_LOG  = 'E'&#xD;&#xA;&#x9;&#x9;&#x9; AND&#x9;DAILY_LOG_DATE  = cast(reception_date as DATE)&#xD;&#xA;&#x9;&#x9;&#x9;)&#xD;&#xA;&#x9;&#x9;&#xD;&#xA;&#x9;&#x9;INSERT INTO  wrk_log    &#xD;&#xA;&#x9;&#x9; SELECT '1.2.4 Step 4: prepare other tables' , &#xD;&#xA;&#x9;&#x9;&#x9;&#x9;@time1 , datediff(ss, @time1, getdate());&#xD;&#xA;&#x9;&#x9;&#xD;&#xA;&#x9;&#x9;/* 1.2.5 Step 5: insert data */&#xD;&#xA;&#x9;&#x9;/* Insert into IP_DOC */&#xD;&#xA;&#x9;&#x9;SELECT @time1  =  GETDATE()&#xD;&#xA;&#x9;&#x9;&#xD;&#xA;&#x9;&#x9;INSERT INTO  IP_DOC   &#xD;&#xA;&#x9;&#x9;&#x9;&#x9;( ROW_VERSION , &#xD;&#xA;&#x9;&#x9;&#x9;&#x9;DOC_ORI , &#xD;&#xA;&#x9;&#x9;&#x9;&#x9;DOC_LOG , &#xD;&#xA;&#x9;&#x9;&#x9;&#x9;DOC_SER , &#xD;&#xA;&#x9;&#x9;&#x9;&#x9;DOC_NBR , &#xD;&#xA;&#x9;&#x9;&#x9;&#x9;FILE_SEQ , &#xD;&#xA;&#x9;&#x9;&#x9;&#x9;FILE_TYP , &#xD;&#xA;&#x9;&#x9;&#x9;&#x9;FILE_SER , &#xD;&#xA;&#x9;&#x9;&#x9;&#x9;FILE_NBR , &#xD;&#xA;&#x9;&#x9;&#x9;&#x9;DOC_SEQ_TYP , &#xD;&#xA;&#x9;&#x9;&#x9;&#x9;DOC_SEQ_SERIES , &#xD;&#xA;&#x9;&#x9;&#x9;&#x9;DOC_SEQ_NBR , &#xD;&#xA;&#x9;&#x9;&#x9;&#x9;DAILY_LOG_DATE ,&#xD;&#xA;&#x9;&#x9;&#x9;&#x9;RECEPTION_DATE , &#xD;&#xA;&#x9;&#x9;&#x9;&#x9;FILING_DATE , &#xD;&#xA;&#x9;&#x9;&#x9;&#x9;RECEPTION_WCODE , &#xD;&#xA;&#x9;&#x9;&#x9;&#x9;APPL_TYP , &#xD;&#xA;&#x9;&#x9;&#x9;&#x9;APPL_SUBTYP )  &#xD;&#xA;&#x9;&#x9;SELECT&#xD;&#xA;&#x9;&#x9;&#x9;&#x9; 1,&#xD;&#xA;&#x9;&#x9;&#x9;&#x9; DOC_ORI,&#xD;&#xA;&#x9;&#x9;&#x9;&#x9; 'E',&#xD;&#xA;&#x9;&#x9;&#x9;&#x9; DOC_SERIES,&#xD;&#xA;&#x9;&#x9;&#x9;&#x9; DOC_NBR,&#xD;&#xA;&#x9;&#x9;&#x9;&#x9; FILE_SEQ,&#xD;&#xA;&#x9;&#x9;&#x9;&#x9; FILE_TYPE,&#xD;&#xA;&#x9;&#x9;&#x9;&#x9; FILE_SERIES,&#xD;&#xA;&#x9;&#x9;&#x9;&#x9; FILE_NBR,&#xD;&#xA;&#x9;&#x9;&#x9;&#x9; FT.DOC_SEQ_TYP,&#xD;&#xA;&#x9;&#x9;&#x9;&#x9; FILE_SERIES,&#xD;&#xA;&#x9;&#x9;&#x9;&#x9; FILE_NBR,&#xD;&#xA;&#x9;&#x9;&#x9;&#x9; cast(RECEPTION_DATE as DATE),&#xD;&#xA;&#x9;&#x9;&#x9;&#x9; RECEPTION_DATE,&#xD;&#xA;&#x9;&#x9;&#x9;&#x9; FILING_DATE,&#xD;&#xA;&#x9;&#x9;&#x9;&#x9; 'SC',&#xD;&#xA;&#x9;&#x9;&#x9;&#x9; APPLICATION_TYPE,&#xD;&#xA;&#x9;&#x9;&#x9;&#x9; APPLICATION_SUBTYPE&#xD;&#xA;&#x9;&#x9;FROM  WRK_patent M &#xD;&#xA;&#x9;&#x9; JOIN CF_FILE_TYPE FT ON FT.file_typ  = M.file_type&#x9;&#x9;&#x9;COLLATE DATABASE_DEFAULT&#xD;&#xA;&#x9;&#x9;&#xD;&#xA;&#x9;&#x9;INSERT INTO  wrk_log    &#xD;&#xA;&#x9;&#x9; SELECT 'Insert into IP_DOC' , &#xD;&#xA;&#x9;&#x9;&#x9;&#x9;@time1 , datediff(ss, @time1, getdate());&#xD;&#xA;&#x9;&#x9;&#xD;&#xA;&#x9;&#x9;/* Insert into IP_FILE from WRK_patent setting only columns not loaded by the trigger in IP_patent */&#xD;&#xA;&#x9;&#x9;SELECT @time1  =  GETDATE()&#xD;&#xA;&#x9;&#x9;&#xD;&#xA;&#x9;&#x9;INSERT INTO  IP_FILE   &#xD;&#xA;&#x9;&#x9;&#x9;&#x9;( ROW_VERSION , &#xD;&#xA;&#x9;&#x9;&#x9;&#x9;FILE_SEQ , &#xD;&#xA;&#x9;&#x9;&#x9;&#x9;FILE_TYP , &#xD;&#xA;&#x9;&#x9;&#x9;&#x9;FILE_SER , &#xD;&#xA;&#x9;&#x9;&#x9;&#x9;FILE_NBR , &#xD;&#xA;&#x9;&#x9;&#x9;&#x9;DOC_ORI , &#xD;&#xA;&#x9;&#x9;&#x9;&#x9;DOC_LOG , &#xD;&#xA;&#x9;&#x9;&#x9;&#x9;DOC_SER , &#xD;&#xA;&#x9;&#x9;&#x9;&#x9;DOC_NBR , &#xD;&#xA;&#x9;&#x9;&#x9;&#x9;FILE_SOURCE_WCODE , &#xD;&#xA;&#x9;&#x9;&#x9;&#x9;APPL_TYP )  &#xD;&#xA;&#x9;&#x9;SELECT&#xD;&#xA;&#x9;&#x9;&#x9;&#x9; 1,&#xD;&#xA;&#x9;&#x9;&#x9;&#x9; FILE_SEQ,&#xD;&#xA;&#x9;&#x9;&#x9;&#x9; FILE_TYPE,&#xD;&#xA;&#x9;&#x9;&#x9;&#x9; FILE_SERIES,&#xD;&#xA;&#x9;&#x9;&#x9;&#x9; FILE_NBR,&#xD;&#xA;&#x9;&#x9;&#x9;&#x9; DOC_ORI,&#xD;&#xA;&#x9;&#x9;&#x9;&#x9; 'E',&#xD;&#xA;&#x9;&#x9;&#x9;&#x9; DOC_SERIES,&#xD;&#xA;&#x9;&#x9;&#x9;&#x9; DOC_NBR,&#xD;&#xA;&#x9;&#x9;&#x9;&#x9; 2,&#xD;&#xA;&#x9;&#x9;&#x9;&#x9; APPLICATION_TYPE&#xD;&#xA;&#x9;&#x9;FROM  WRK_patent &#xD;&#xA;&#x9;&#x9;&#xD;&#xA;&#x9;&#x9;INSERT INTO  wrk_log    &#xD;&#xA;&#x9;&#x9; SELECT 'Insert into IP_FILE from WRK_patent' , &#xD;&#xA;&#x9;&#x9;&#x9;&#x9;@time1 , datediff(ss, @time1, getdate());&#xD;&#xA;&#x9;&#x9;&#xD;&#xA;&#x9;&#x9;/* Insert into IP_FILE_SECTIONS */&#xD;&#xA;&#x9;&#x9;SELECT @time1  =  GETDATE()&#xD;&#xA;&#x9;&#x9;&#xD;&#xA;&#x9;&#x9;INSERT INTO  IP_FILE_SECTIONS   &#xD;&#xA;&#x9;&#x9;&#x9;&#x9;( ROW_VERSION , &#xD;&#xA;&#x9;&#x9;&#x9;&#x9;FILE_SEQ , &#xD;&#xA;&#x9;&#x9;&#x9;&#x9;FILE_TYP , &#xD;&#xA;&#x9;&#x9;&#x9;&#x9;FILE_SER , &#xD;&#xA;&#x9;&#x9;&#x9;&#x9;FILE_NBR , &#xD;&#xA;&#x9;&#x9;&#x9;&#x9;FILE_SECTION_NBR , &#xD;&#xA;&#x9;&#x9;&#x9;&#x9;FILE_SECTION_DESCRIPTION )  &#xD;&#xA;&#x9;&#x9;SELECT&#xD;&#xA;&#x9;&#x9;&#x9;&#x9; 1,&#xD;&#xA;&#x9;&#x9;&#x9;&#x9; FILE_SEQ,&#xD;&#xA;&#x9;&#x9;&#x9;&#x9; FILE_TYPE,&#xD;&#xA;&#x9;&#x9;&#x9;&#x9; FILE_SERIES,&#xD;&#xA;&#x9;&#x9;&#x9;&#x9; FILE_NBR,&#xD;&#xA;&#x9;&#x9;&#x9;&#x9; 1,&#xD;&#xA;&#x9;&#x9;&#x9;&#x9; 'Dummy description'&#xD;&#xA;&#x9;&#x9;FROM  WRK_patent &#xD;&#xA;&#x9;&#x9;&#xD;&#xA;&#x9;&#x9;INSERT INTO  wrk_log    &#xD;&#xA;&#x9;&#x9; SELECT 'Insert into IP_FILE_SECTIONS' , &#xD;&#xA;&#x9;&#x9;&#x9;&#x9;@time1 , datediff(ss, @time1, getdate());&#xD;&#xA;&#x9;&#x9;&#xD;&#xA;&#x9;&#x9;/* Insert into IP_patent */&#xD;&#xA;&#x9;&#x9;SELECT @time1  =  GETDATE()&#xD;&#xA;&#x9;&#x9;&#xD;&#xA;&#x9;&#x9;INSERT INTO  IP_patent    &#xD;&#xA;&#x9;&#x9;  &#x9;&#x9;( ROW_VERSION , &#xD;&#xA;&#x9;&#x9;&#x9;&#x9;FILE_SEQ , &#xD;&#xA;&#x9;&#x9;&#x9;&#x9;FILE_TYP , &#xD;&#xA;&#x9;&#x9;&#x9;&#x9;FILE_SER , &#xD;&#xA;&#x9;&#x9;&#x9;&#x9;FILE_NBR , &#xD;&#xA;&#x9;&#x9;&#x9;&#x9;DOC_ORI , &#xD;&#xA;&#x9;&#x9;&#x9;&#x9;DOC_LOG , &#xD;&#xA;&#x9;&#x9;&#x9;&#x9;DOC_SER , &#xD;&#xA;&#x9;&#x9;&#x9;&#x9;DOC_NBR , &#xD;&#xA;&#x9;&#x9;&#x9;&#x9;APPL_TYP , &#xD;&#xA;&#x9;&#x9;&#x9;&#x9;APPL_SUBTYP , &#xD;&#xA;&#x9;&#x9;&#x9;&#x9;LAW_CODE , &#xD;&#xA;&#x9;&#x9;&#x9;&#x9;FILING_DATE , &#xD;&#xA;&#x9;&#x9;&#x9;&#x9;RECEPTION_DATE , &#xD;&#xA;&#x9;&#x9;&#x9;&#x9;PUBLICATION_DATE , &#xD;&#xA;&#x9;&#x9;&#x9;&#x9;PUBLICATION_NOTES , &#xD;&#xA;&#x9;&#x9;&#x9;&#x9;SPECIAL_PUBL_APPL_DATE , &#xD;&#xA;&#x9;&#x9;&#x9;&#x9;SPECIAL_PUBL_DATE , &#xD;&#xA;&#x9;&#x9;&#x9;&#x9;IND_REGISTERED , &#xD;&#xA;&#x9;&#x9;&#x9;&#x9;REGISTRATION_TYP , &#xD;&#xA;&#x9;&#x9;&#x9;&#x9;REGISTRATION_SER , &#xD;&#xA;&#x9;&#x9;&#x9;&#x9;REGISTRATION_NBR , &#xD;&#xA;&#x9;&#x9;&#x9;&#x9;REGISTRATION_DUP , &#xD;&#xA;&#x9;&#x9;&#x9;&#x9;REGISTRATION_DATE , &#xD;&#xA;&#x9;&#x9;&#x9;&#x9;ENTITLEMENT_DATE , &#xD;&#xA;&#x9;&#x9;&#x9;&#x9;EXPIRATION_DATE , &#xD;&#xA;&#x9;&#x9;&#x9;&#x9;EXHIBITION_DATE , &#xD;&#xA;&#x9;&#x9;&#x9;&#x9;EXHIBITION_NOTES , &#xD;&#xA;&#x9;&#x9;&#x9;&#x9;PCT_PHASE , &#xD;&#xA;&#x9;&#x9;&#x9;&#x9;PCT_APPL_ID , &#xD;&#xA;&#x9;&#x9;&#x9;&#x9;PCT_APPL_DATE , &#xD;&#xA;&#x9;&#x9;&#x9;&#x9;PCT_PUBL_COUNTRY , &#xD;&#xA;&#x9;&#x9;&#x9;&#x9;PCT_PUBL_DATE , &#xD;&#xA;&#x9;&#x9;&#x9;&#x9;PCT_PUBL_TYP , &#xD;&#xA;&#x9;&#x9;&#x9;&#x9;PCT_PUBL_ID , &#xD;&#xA;&#x9;&#x9;&#x9;&#x9;REGIONAL_APPL_ID , &#xD;&#xA;&#x9;&#x9;&#x9;&#x9;REGIONAL_APPL_DATE , &#xD;&#xA;&#x9;&#x9;&#x9;&#x9;REGIONAL_PUBL_COUNTRY , &#xD;&#xA;&#x9;&#x9;&#x9;&#x9;REGIONAL_PUBL_DATE , &#xD;&#xA;&#x9;&#x9;&#x9;&#x9;REGIONAL_PUBL_TYP , &#xD;&#xA;&#x9;&#x9;&#x9;&#x9;REGIONAL_PUBL_ID , &#xD;&#xA;&#x9;&#x9;&#x9;&#x9;TITLE , &#xD;&#xA;&#x9;&#x9;&#x9;&#x9;ENGLISH_TITLE , &#xD;&#xA;&#x9;&#x9;&#x9;&#x9;LAST_CLAIMS_PAGE_REF , &#xD;&#xA;&#x9;&#x9;&#x9;&#x9;LAST_DESCRIPTION_PAGE_REF , &#xD;&#xA;&#x9;&#x9;&#x9;&#x9;EXAM_IPC_USED , &#xD;&#xA;&#x9;&#x9;&#x9;&#x9;EXAM_KEYWORDS_USED , &#xD;&#xA;&#x9;&#x9;&#x9;&#x9;IND_EXAM_INDUSTRIAL , &#xD;&#xA;&#x9;&#x9;&#x9;&#x9;IND_EXAM_NOVELTY , &#xD;&#xA;&#x9;&#x9;&#x9;&#x9;IND_EXAM_INVENTIVE , &#xD;&#xA;&#x9;&#x9;&#x9;&#x9;EXAM_RESULT , &#xD;&#xA;&#x9;&#x9;&#x9;&#x9;NOVELTY1_DATE , &#xD;&#xA;&#x9;&#x9;&#x9;&#x9;FIRST_PRIORITY_DATE , &#xD;&#xA;&#x9;&#x9;&#x9;&#x9;MAIN_OWNER_PERSON_NBR , &#xD;&#xA;&#x9;&#x9;&#x9;&#x9;MAIN_OWNER_ADDR_NBR , &#xD;&#xA;&#x9;&#x9;&#x9;&#x9;SERVICE_PERSON_NBR , &#xD;&#xA;&#x9;&#x9;&#x9;&#x9;SERVICE_ADDR_NBR , &#xD;&#xA;&#x9;&#x9;&#x9;&#x9;CAPTURE_USER_ID , &#xD;&#xA;&#x9;&#x9;&#x9;&#x9;CAPTURE_DATE , PUBLICATION_NBR,PUBLICATION_SER,PUBLICATION_TYP )  &#xD;&#xA;&#x9;&#x9;    -- data not loaded from import tables&#xD;&#xA;            -- IND_MANUAL_INTERPRETATION&#xD;&#xA;            -- IND_OWNER_SAMEAS_INVENTOR&#xD;&#xA;            -- APPLICANT_TYP&#xD;&#xA;    select  &#x9;1, &#xD;&#xA;&#x9;&#x9;FILE_SEQ, &#xD;&#xA;&#x9;&#x9;FILE_TYPE, &#xD;&#xA;&#x9;&#x9;FILE_SERIES, &#xD;&#xA;&#x9;&#x9;FILE_NBR, &#xD;&#xA;&#x9;&#x9;DOC_ORI, &#xD;&#xA;&#x9;&#x9;'E', &#xD;&#xA;&#x9;&#x9;DOC_SERIES, &#xD;&#xA;&#x9;&#x9;DOC_NBR,&#xD;&#xA;            &#x9;APPLICATION_TYPE, &#xD;&#xA;&#x9;&#x9;APPLICATION_SUBTYPE, &#xD;&#xA;&#x9;&#x9;LAW_CODE,&#xD;&#xA;            &#x9;FILING_DATE, &#xD;&#xA;&#x9;&#x9;RECEPTION_DATE, &#xD;&#xA;            &#x9;PUBLICATION_DATE, &#xD;&#xA;&#x9;&#x9;PUBLICATION_NOTES, &#xD;&#xA;&#x9;&#x9;SPECIAL_PUBL_APPL_DATE, &#xD;&#xA;&#x9;&#x9;SPECIAL_PUBL_REQU_DATE, &#xD;&#xA;&#x9;    &#x9;CASE IND_REGISTERED &#xD;&#xA;&#x9;&#x9;   WHEN 1 THEN 'S' &#xD;&#xA;&#x9;&#x9;   ELSE 'N' &#xD;&#xA;&#x9;    &#x9;END,&#xD;&#xA;            &#x9;REGISTRATION_TYPE, &#xD;&#xA;&#x9;&#x9;REGISTRATION_SERIES, &#xD;&#xA;&#x9;&#x9;REGISTRATION_NBR, &#xD;&#xA;&#x9;&#x9;REGISTRATION_DUP,&#xD;&#xA;            &#x9;REGISTRATION_DATE, &#xD;&#xA;&#x9;&#x9;ENTITLEMENT_DATE, &#xD;&#xA;&#x9;&#x9;EXPIRATION_DATE, &#xD;&#xA;            &#x9;EXHIBITION_DATE, &#xD;&#xA;&#x9;&#x9;EXHIBITION_NOTES,&#xD;&#xA;            &#x9;PCT_PHASE, &#xD;&#xA;&#x9;&#x9;PCT_APPLICATION_ID, &#xD;&#xA;&#x9;&#x9;PCT_APPLICATION_DATE, &#xD;&#xA;&#x9;&#x9;PCT_PUBLICATION_COUNTRY_CODE, &#xD;&#xA;&#x9;&#x9;PCT_PUBLICATION_DATE, &#xD;&#xA;&#x9;&#x9;PCT_PUBLICATION_TYPE, &#xD;&#xA;&#x9;&#x9;PCT_PUBLICATION_ID,&#xD;&#xA;            &#x9;REGIONAL_APPL_ID, &#xD;&#xA;&#x9;&#x9;REGIONAL_APPL_DATE, &#xD;&#xA;&#x9;&#x9;REGIONAL_PUBL_COUNTRY_CODE, &#xD;&#xA;&#x9;&#x9;REGIONAL_PUBL_DATE, &#xD;&#xA;&#x9;&#x9;REGIONAL_PUBL_TYPE, &#xD;&#xA;&#x9;&#x9;REGIONAL_PUBL_ID, &#xD;&#xA;            &#x9;TITLE, &#xD;&#xA;&#x9;&#x9;ENGLISH_TITLE, &#xD;&#xA;&#x9;&#x9;LAST_CLAIMS_PAGE_REF, &#xD;&#xA;&#x9;&#x9;LAST_DESCRIPTION_PAGE_REF,&#xD;&#xA;            &#x9;USED_IPC_DESCRIPTION, &#xD;&#xA;&#x9;&#x9;USED_KEYWORD_DESCRIPTION, &#xD;&#xA;&#x9;    &#x9;CASE IND_EXAM_INDUSTRIAL&#xD;&#xA;&#x9;&#x9;   WHEN 1 THEN 'S' &#xD;&#xA;&#x9;&#x9;   ELSE 'N' &#xD;&#xA;&#x9;    &#x9;END,&#xD;&#xA;&#x9;    &#x9;CASE IND_EXAM_NOVELTY &#xD;&#xA;&#x9;&#x9;   WHEN 1 THEN 'S' &#xD;&#xA;&#x9;&#x9;   ELSE 'N' &#xD;&#xA;&#x9;    &#x9;END,&#xD;&#xA;&#x9;    &#x9;CASE IND_EXAM_INVENTIVE &#xD;&#xA;&#x9;&#x9;   WHEN 1 THEN 'S' &#xD;&#xA;&#x9;&#x9;   ELSE 'N' &#xD;&#xA;&#x9;    &#x9;END,&#xD;&#xA;&#x9;&#x9;EXAM_RESULT,&#xD;&#xA;            &#x9;NOVELTY_DATE, &#xD;&#xA;&#x9;&#x9;FIRST_PRIORITY_DATE,&#xD;&#xA;            &#x9;MAIN_OWNER_PERSON_NBR, &#xD;&#xA;&#x9;&#x9;MAIN_OWNER_ADDR_NBR,&#xD;&#xA;            &#x9;SERVICE_PERSON_NBR, &#xD;&#xA;&#x9;&#x9;SERVICE_ADDR_NBR,&#xD;&#xA;            &#x9;CAPTURE_USER_ID, &#xD;&#xA;&#x9;&#x9;CAPTURE_DATE,PUBLICATION_NBR,PUBLICATION_SER,PUBLICATION_TYP&#xD;&#xA;    from    WRK_patent&#xD;&#xA;    ;&#xD;&#xA;&#xD;&#xA;&#x9;&#x9;INSERT INTO  wrk_log    &#xD;&#xA;&#x9;&#x9; SELECT 'Insert into IP_patent' , &#xD;&#xA;&#x9;&#x9;&#x9;&#x9;@time1 , datediff(ss, @time1, getdate());&#xD;&#xA;&#x9;&#x9;&#xD;&#xA;&#x9;&#x9;/* Insert into IP_patent_OWNERS from WRK_patent_OWNERS */&#xD;&#xA;&#x9;&#x9;SELECT @time1  =  GETDATE()&#xD;&#xA;&#x9;&#x9;&#xD;&#xA;&#x9;&#x9;/* the same person may be repeated several times, so groups are used */&#xD;&#xA;&#x9;&#x9;INSERT INTO  IP_patent_OWNERS   &#xD;&#xA;&#x9;&#x9;&#x9;&#x9;( ROW_VERSION , &#xD;&#xA;&#x9;&#x9;&#x9;&#x9;FILE_SEQ , &#xD;&#xA;&#x9;&#x9;&#x9;&#x9;FILE_TYP , &#xD;&#xA;&#x9;&#x9;&#x9;&#x9;FILE_SER , &#xD;&#xA;&#x9;&#x9;&#x9;&#x9;FILE_NBR , &#xD;&#xA;&#x9;&#x9;&#x9;&#x9;PERSON_NBR , &#xD;&#xA;&#x9;&#x9;&#x9;&#x9;ADDR_NBR , &#xD;&#xA;&#x9;&#x9;&#x9;&#x9;NOTES )  &#xD;&#xA;&#x9;&#x9;SELECT&#xD;&#xA;&#x9;&#x9;&#x9;&#x9; 1,&#xD;&#xA;&#x9;&#x9;&#x9;&#x9; FILE_SEQ,&#xD;&#xA;&#x9;&#x9;&#x9;&#x9; FILE_TYPE,&#xD;&#xA;&#x9;&#x9;&#x9;&#x9; FILE_SERIES,&#xD;&#xA;&#x9;&#x9;&#x9;&#x9; FILE_NBR,&#xD;&#xA;&#x9;&#x9;&#x9;&#x9; PERSON_NBR,&#xD;&#xA;&#x9;&#x9;&#x9;&#x9; ADDR_NBR,&#xD;&#xA;&#x9;&#x9;&#x9;&#x9; min(OWNERSHIP_NOTES)&#xD;&#xA;&#x9;&#x9;FROM  WRK_patent_OWNERS &#xD;&#xA;&#x9;&#x9;GROUP BY FILE_SEQ, FILE_TYPE, FILE_SERIES, FILE_NBR, PERSON_NBR, ADDR_NBR&#xD;&#xA;&#x9;&#x9;&#xD;&#xA;&#x9;&#x9;INSERT INTO  wrk_log    &#xD;&#xA;&#x9;&#x9; SELECT 'Insert into IP_patent_OWNERS' , &#xD;&#xA;&#x9;&#x9;&#x9;&#x9;@time1 , datediff(ss, @time1, getdate());&#xD;&#xA;&#x9;&#x9;&#xD;&#xA;&#x9;&#x9;/* Insert into IP_patent_REPRS from WRK_patent_REPRS */&#xD;&#xA;&#x9;&#x9;SELECT @time1  =  GETDATE()&#xD;&#xA;&#x9;&#x9;&#xD;&#xA;&#x9;&#x9;/* the same person may be repeated several times, so groups are used */&#xD;&#xA;&#x9;&#x9;INSERT INTO  IP_patent_REPRS   &#xD;&#xA;&#x9;&#x9;&#x9;&#x9;( ROW_VERSION , &#xD;&#xA;&#x9;&#x9;&#x9;&#x9;FILE_SEQ , &#xD;&#xA;&#x9;&#x9;&#x9;&#x9;FILE_TYP , &#xD;&#xA;&#x9;&#x9;&#x9;&#x9;FILE_SER , &#xD;&#xA;&#x9;&#x9;&#x9;&#x9;FILE_NBR , &#xD;&#xA;&#x9;&#x9;&#x9;&#x9;PERSON_NBR , &#xD;&#xA;&#x9;&#x9;&#x9;&#x9;ADDR_NBR , &#xD;&#xA;&#x9;&#x9;&#x9;&#x9;REPRESENTATIVE_TYP )  &#xD;&#xA;&#x9;&#x9;SELECT&#xD;&#xA;&#x9;&#x9;&#x9;&#x9; 1,&#xD;&#xA;&#x9;&#x9;&#x9;&#x9; FILE_SEQ,&#xD;&#xA;&#x9;&#x9;&#x9;&#x9; FILE_TYPE,&#xD;&#xA;&#x9;&#x9;&#x9;&#x9; FILE_SERIES,&#xD;&#xA;&#x9;&#x9;&#x9;&#x9; FILE_NBR,&#xD;&#xA;&#x9;&#x9;&#x9;&#x9; PERSON_NBR,&#xD;&#xA;&#x9;&#x9;&#x9;&#x9; ADDR_NBR,&#xD;&#xA;&#x9;&#x9;&#x9;&#x9; min(REPRESENTATIVE_TYPE)&#xD;&#xA;&#x9;&#x9;FROM  WRK_patent_REPRS &#xD;&#xA;&#x9;&#x9;GROUP BY FILE_SEQ, FILE_TYPE, FILE_SERIES, FILE_NBR, PERSON_NBR, ADDR_NBR&#xD;&#xA;&#x9;&#x9;&#xD;&#xA;&#x9;&#x9;INSERT INTO  wrk_log    &#xD;&#xA;&#x9;&#x9; SELECT 'Insert into IP_patent_REPRS' , &#xD;&#xA;&#x9;&#x9;&#x9;&#x9;@time1 , datediff(ss, @time1, getdate());&#xD;&#xA;&#x9;&#x9;&#xD;&#xA;&#x9;&#x9;/* Insert into IP_patent_INVENTORS from WRK_patent_INVENTORS */&#xD;&#xA;&#x9;&#x9;SELECT @time1  =  GETDATE()&#xD;&#xA;&#x9;&#x9;&#xD;&#xA;&#x9;&#x9;/* the same person may be repeated several times, so groups are used */&#xD;&#xA;&#x9;&#x9;INSERT INTO  IP_patent_INVENTORS   &#xD;&#xA;&#x9;&#x9;&#x9;&#x9;( ROW_VERSION , &#xD;&#xA;&#x9;&#x9;&#x9;&#x9;FILE_SEQ , &#xD;&#xA;&#x9;&#x9;&#x9;&#x9;FILE_TYP , &#xD;&#xA;&#x9;&#x9;&#x9;&#x9;FILE_SER , &#xD;&#xA;&#x9;&#x9;&#x9;&#x9;FILE_NBR , &#xD;&#xA;&#x9;&#x9;&#x9;&#x9;PERSON_NBR , &#xD;&#xA;&#x9;&#x9;&#x9;&#x9;ADDR_NBR , &#xD;&#xA;&#x9;&#x9;&#x9;&#x9;SEQ_NBR )  &#xD;&#xA;&#x9;&#x9;SELECT&#x9;&#xD;&#xA;&#x9;&#x9;&#x9;&#x9; 1,&#xD;&#xA;&#x9;&#x9;&#x9;&#x9; FILE_SEQ,&#xD;&#xA;&#x9;&#x9;&#x9;&#x9; FILE_TYPE,&#xD;&#xA;&#x9;&#x9;&#x9;&#x9; FILE_SERIES,&#xD;&#xA;&#x9;&#x9;&#x9;&#x9; FILE_NBR,&#xD;&#xA;&#x9;&#x9;&#x9;&#x9; PERSON_NBR,&#xD;&#xA;&#x9;&#x9;&#x9;&#x9; ADDR_NBR,&#xD;&#xA;&#x9;&#x9;&#x9;&#x9; min(AUTHOR_SEQ)&#xD;&#xA;&#x9;&#x9;FROM  WRK_patent_INVENTORS &#xD;&#xA;&#x9;&#x9;GROUP BY FILE_SEQ, FILE_TYPE, FILE_SERIES, FILE_NBR, PERSON_NBR, ADDR_NBR&#xD;&#xA;&#x9;&#x9;&#xD;&#xA;&#x9;&#x9;INSERT INTO  wrk_log    &#xD;&#xA;&#x9;&#x9; SELECT 'Insert into IP_patent_INVENTORS' , &#xD;&#xA;&#x9;&#x9;&#x9;&#x9;@time1 , datediff(ss, @time1, getdate());&#xD;&#xA;&#x9;&#x9;&#xD;&#xA;&#x9;&#x9;/* Insert into IP_patent_PRIORITIES from WRK_patent_PRIORITIES */&#xD;&#xA;&#x9;&#x9;SELECT @time1  =  GETDATE()&#xD;&#xA;&#x9;&#x9;&#xD;&#xA;&#x9;&#x9;INSERT INTO  IP_patent_PRIORITIES   &#xD;&#xA;&#x9;&#x9;&#x9;&#x9;( ROW_VERSION , &#xD;&#xA;&#x9;&#x9;&#x9;&#x9;FILE_SEQ , &#xD;&#xA;&#x9;&#x9;&#x9;&#x9;FILE_TYP , &#xD;&#xA;&#x9;&#x9;&#x9;&#x9;FILE_SER , &#xD;&#xA;&#x9;&#x9;&#x9;&#x9;FILE_NBR , &#xD;&#xA;&#x9;&#x9;&#x9;&#x9;COUNTRY_CODE , &#xD;&#xA;&#x9;&#x9;&#x9;&#x9;PRIORITY_APPL_ID , &#xD;&#xA;&#x9;&#x9;&#x9;&#x9;PRIORITY_DATE , &#xD;&#xA;&#x9;&#x9;&#x9;&#x9;IND_ACCEPTED , &#xD;&#xA;&#x9;&#x9;&#x9;&#x9;NOTES , &#xD;&#xA;&#x9;&#x9;&#x9;&#x9;PRIORITY_APPL_ID_ALT )  &#xD;&#xA;&#x9;&#x9;SELECT&#xD;&#xA;&#x9;&#x9;&#x9;&#x9; 1,&#xD;&#xA;&#x9;&#x9;&#x9;&#x9; FILE_SEQ,&#xD;&#xA;&#x9;&#x9;&#x9;&#x9; FILE_TYPE,&#xD;&#xA;&#x9;&#x9;&#x9;&#x9; FILE_SERIES,&#xD;&#xA;&#x9;&#x9;&#x9;&#x9; FILE_NBR,&#xD;&#xA;&#x9;&#x9;&#x9;&#x9; COUNTRY_CODE,&#xD;&#xA;&#x9;&#x9;&#x9;&#x9; APPLICATION_ID,&#xD;&#xA;&#x9;&#x9;&#x9;&#x9; PRIORITY_DATE,&#xD;&#xA;&#x9;&#x9;&#x9;    &#x9; CASE IND_ACCEPTED&#xD;&#xA;&#x9;&#x9;&#x9;&#x9;    WHEN 1 THEN 'S' &#xD;&#xA;&#x9;&#x9;&#x9;&#x9;    ELSE 'N' &#xD;&#xA;&#x9;    &#x9;&#x9;&#x9; END,&#xD;&#xA;&#x9;&#x9;&#x9;&#x9; NOTES,&#xD;&#xA;&#x9;&#x9;&#x9;&#x9; PRIORITY_APPL_ID_ALT&#xD;&#xA;&#x9;&#x9;FROM  wrk_patent_priorities &#xD;&#xA;&#x9;&#x9;&#xD;&#xA;&#x9;&#x9;INSERT INTO  wrk_log    &#xD;&#xA;&#x9;&#x9; SELECT 'Insert into IP_patent_PRIORITIES' , &#xD;&#xA;&#x9;&#x9;&#x9;&#x9;@time1 , datediff(ss, @time1, getdate());&#xD;&#xA;&#x9;&#x9;&#xD;&#xA;&#x9;&#x9;/* Insert into IP_DOC_PAYMENTS from  [&quot;+ context.intermediateDB + &quot;].[dbo].VW_IMPORT_patent_PAYMENTS (joining WRK_patent to use DOC_*** columns) */&#xD;&#xA;&#x9;&#x9;SELECT @time1  =  GETDATE()&#xD;&#xA;&#x9;&#x9;&#xD;&#xA;&#x9;&#x9;INSERT INTO  IP_DOC_PAYMENTS   &#xD;&#xA;&#x9;&#x9;&#x9;&#x9;( ROW_VERSION , &#xD;&#xA;&#x9;&#x9;&#x9;&#x9;DOC_ORI , &#xD;&#xA;&#x9;&#x9;&#x9;&#x9;DOC_LOG , &#xD;&#xA;&#x9;&#x9;&#x9;&#x9;DOC_SER , &#xD;&#xA;&#x9;&#x9;&#x9;&#x9;DOC_NBR , &#xD;&#xA;&#x9;&#x9;&#x9;&#x9;RECEIPT_NBR , &#xD;&#xA;&#x9;&#x9;&#x9;&#x9;RECEIPT_DATE , &#xD;&#xA;&#x9;&#x9;&#x9;&#x9;RECEIPT_AMOUNT , &#xD;&#xA;&#x9;&#x9;&#x9;&#x9;RECEIPT_TYP , &#xD;&#xA;&#x9;&#x9;&#x9;&#x9;CURRENCY_TYP )  &#xD;&#xA;&#x9;&#x9;SELECT&#xD;&#xA;&#x9;&#x9;&#x9;&#x9; 1,&#xD;&#xA;&#x9;&#x9;&#x9;&#x9; DOC_ORI,&#xD;&#xA;&#x9;&#x9;&#x9;&#x9; 'E',&#xD;&#xA;&#x9;&#x9;&#x9;&#x9; DOC_SERIES,&#xD;&#xA;&#x9;&#x9;&#x9;&#x9; DOC_NBR,&#xD;&#xA;&#x9;&#x9;&#x9;&#x9; RECEIPT_NBR,&#xD;&#xA;&#x9;&#x9;&#x9;&#x9; RECEIPT_DATE,&#xD;&#xA;&#x9;&#x9;&#x9;&#x9; RECEIPT_AMOUNT,&#xD;&#xA;&#x9;&#x9;&#x9;&#x9; RECEIPT_TYPE,&#xD;&#xA;&#x9;&#x9;&#x9;&#x9; CURRENCY_TYPE&#xD;&#xA;&#x9;&#x9;FROM   [&quot;+ context.intermediateDB + &quot;].[dbo].VW_import_patent_payments T JOIN wrk_patent M ON T.file_seq  = M.file_seq&#xD;&#xA;&#x9;&#x9;&#x9; AND&#x9;T.file_type  = M.file_type&#xD;&#xA;&#x9;&#x9;&#x9; AND&#x9;T.file_series  = M.file_series&#xD;&#xA;&#x9;&#x9;&#x9; AND&#x9;T.file_nbr  = M.file_nbr  &#xD;&#xA;&#x9;&#x9;WHERE&#x9; ind_import  = 0&#xD;&#xA;&#x9;&#x9;&#xD;&#xA;&#x9;&#x9;INSERT INTO  wrk_log    &#xD;&#xA;&#x9;&#x9; SELECT 'Insert into IP_DOC_PAYMENTS' , &#xD;&#xA;&#x9;&#x9;&#x9;&#x9;@time1 , datediff(ss, @time1, getdate());&#xD;&#xA;&#x9;&#x9;&#xD;&#xA;&#x9;&#x9;/* Insert into IP_PATENT_FIGU_SECTIONS from  [&quot;+ context.intermediateDB + &quot;].[dbo].VW_IMPORT_PATENT_DRAWINGS (only with  [&quot;+ context.intermediateDB + &quot;].[dbo].VW_IMPORT_patent.IND_IMPORT = 0) */&#xD;&#xA;&#x9;&#x9;/* The binary is loaded into a single section in the BLOB column SECTOR_DATA2, which will then be transferred&#xD;&#xA;&#x9;&#x9;       to SECTOR_DATA (which is LONG) during the finalization of the import mode for the environment */&#xD;&#xA;&#x9;&#x9;SELECT @time1  =  GETDATE()&#xD;&#xA;&#x9;&#x9;&#xD;&#xA;&#x9;&#x9;INSERT INTO  IP_PATENT_DRAWINGS   &#xD;&#xA;&#x9;&#x9;&#x9;&#x9;( ROW_VERSION , &#xD;&#xA;&#x9;&#x9;&#x9;&#x9;FILE_SEQ , &#xD;&#xA;&#x9;&#x9;&#x9;&#x9;FILE_TYP , &#xD;&#xA;&#x9;&#x9;&#x9;&#x9;FILE_SER , &#xD;&#xA;&#x9;&#x9;&#x9;&#x9;FILE_NBR , &#xD;&#xA;&#x9;&#x9;&#x9;&#x9;DRAWING_NBR , &#xD;&#xA;&#x9;&#x9;&#x9;&#x9;IMAGE_FORMAT_WCODE , &#xD;&#xA;&#x9;&#x9;&#x9;&#x9;DRAWING_DATA )  &#xD;&#xA;&#x9;&#x9;SELECT&#xD;&#xA;&#x9;&#x9;&#x9;&#x9; 1,&#xD;&#xA;&#x9;&#x9;&#x9;&#x9; T.FILE_SEQ,&#xD;&#xA;&#x9;&#x9;&#x9;&#x9; T.FILE_TYPE,&#xD;&#xA;&#x9;&#x9;&#x9;&#x9; T.FILE_SERIES,&#xD;&#xA;&#x9;&#x9;&#x9;&#x9; T.FILE_NBR,&#xD;&#xA;&#x9;&#x9;&#x9;&#x9; DRAWING_NBR,&#xD;&#xA;&#x9;&#x9;&#x9;&#x9; &#xD;&#xA;&#x9;&#x9;&#x9;&#x9;CASE DRAWING_IMAGE_TYPE &#xD;&#xA;&#x9;&#x9;&#x9;&#x9;&#x9;WHEN 'TIF' THEN 1 &#xD;&#xA;&#x9;&#x9;&#x9;&#x9;&#x9;ELSE 2 &#xD;&#xA;&#x9;&#x9;&#x9;&#x9;END,&#xD;&#xA;&#x9;&#x9;&#x9;&#x9; DRAWING_IMAGE_DATA&#xD;&#xA;&#x9;&#x9;FROM   [&quot;+ context.intermediateDB + &quot;].[dbo].VW_import_patent_drawings T JOIN wrk_patent M ON T.file_seq  = M.file_seq&#xD;&#xA;&#x9;&#x9;&#x9; AND&#x9;T.file_type  = M.file_type&#xD;&#xA;&#x9;&#x9;&#x9; AND&#x9;T.file_series  = M.file_series&#xD;&#xA;&#x9;&#x9;&#x9; AND&#x9;T.file_nbr  = M.file_nbr  &#xD;&#xA;&#x9;&#x9;&#xD;&#xA;&#x9;&#x9;INSERT INTO  wrk_log    &#xD;&#xA;&#x9;&#x9; SELECT 'Insert into IP_PATENT_DRAWINGS' , &#xD;&#xA;&#x9;&#x9;&#x9;&#x9;@time1 , datediff(ss, @time1, getdate());&#xD;&#xA;&#x9;&#x9;&#xD;&#xA;&#x9;&#x9;/* Insert into IP_PATENT_ANNUITIES (only with  [&quot;+ context.intermediateDB + &quot;].[dbo].VW_IMPORT_patent.IND_IMPORT = 0) */&#xD;&#xA;&#x9;&#x9;SELECT @time1  =  GETDATE()&#xD;&#xA;&#x9;&#x9;&#xD;&#xA;&#x9;&#x9;INSERT INTO  IP_PATENT_ANNUITIES   &#xD;&#xA;&#x9;&#x9;&#x9;&#x9;( ROW_VERSION , &#xD;&#xA;&#x9;&#x9;&#x9;&#x9;FILE_SEQ , &#xD;&#xA;&#x9;&#x9;&#x9;&#x9;FILE_TYP , &#xD;&#xA;&#x9;&#x9;&#x9;&#x9;FILE_SER , &#xD;&#xA;&#x9;&#x9;&#x9;&#x9;FILE_NBR , &#xD;&#xA;&#x9;&#x9;&#x9;&#x9;ANNUITY_NBR , &#xD;&#xA;&#x9;&#x9;&#x9;&#x9;EXPIRATION_DATE , &#xD;&#xA;&#x9;&#x9;&#x9;&#x9;GRACE_DATE , &#xD;&#xA;&#x9;&#x9;&#x9;&#x9;IND_IGNORE , &#xD;&#xA;&#x9;&#x9;&#x9;&#x9;COMPLETE_PAYMENT_DATE , &#xD;&#xA;&#x9;&#x9;&#x9;&#x9;IND_PAYED )  &#xD;&#xA;&#x9;&#x9;SELECT&#xD;&#xA;&#x9;&#x9;&#x9;&#x9; 1,&#xD;&#xA;&#x9;&#x9;&#x9;&#x9; T.FILE_SEQ,&#xD;&#xA;&#x9;&#x9;&#x9;&#x9; T.FILE_TYPE,&#xD;&#xA;&#x9;&#x9;&#x9;&#x9; T.FILE_SERIES,&#xD;&#xA;&#x9;&#x9;&#x9;&#x9; T.FILE_NBR,&#xD;&#xA;&#x9;&#x9;&#x9;&#x9; ANNUITY_NBR,&#xD;&#xA;&#x9;&#x9;&#x9;&#x9; T.EXPIRATION_DATE,&#xD;&#xA;&#x9;&#x9;&#x9;&#x9; GRACE_DATE,&#xD;&#xA;&#x9;&#x9;&#x9;    &#x9; CASE IND_IGNORE&#xD;&#xA;&#x9;&#x9;&#x9;&#x9;    WHEN 1 THEN 'S' &#xD;&#xA;&#x9;&#x9;&#x9;&#x9;    ELSE 'N' &#xD;&#xA;&#x9;    &#x9;&#x9;&#x9; END,&#xD;&#xA;&#x9;&#x9;&#x9;&#x9; COMPLETE_PAYMENT_DATE,&#xD;&#xA;&#x9;&#x9;&#x9;    &#x9; CASE IND_PAID&#xD;&#xA;&#x9;&#x9;&#x9;&#x9;    WHEN 1 THEN 'S' &#xD;&#xA;&#x9;&#x9;&#x9;&#x9;    ELSE 'N' &#xD;&#xA;&#x9;    &#x9;&#x9;&#x9; END&#xD;&#xA;&#x9;&#x9;FROM   [&quot;+ context.intermediateDB + &quot;].[dbo].VW_import_patent_annuities T JOIN wrk_patent M ON T.file_seq  = M.file_seq&#xD;&#xA;&#x9;&#x9;&#x9; AND&#x9;T.file_type  = M.file_type&#xD;&#xA;&#x9;&#x9;&#x9; AND&#x9;T.file_series  = M.file_series&#xD;&#xA;&#x9;&#x9;&#x9; AND&#x9;T.file_nbr  = M.file_nbr  &#xD;&#xA;&#x9;&#x9;&#xD;&#xA;&#x9;&#x9;INSERT INTO  wrk_log    &#xD;&#xA;&#x9;&#x9; SELECT 'Insert into IP_PATENT_ANNUITIES' , &#xD;&#xA;&#x9;&#x9;&#x9;&#x9;@time1 , datediff(ss, @time1, getdate());&#xD;&#xA;&#x9;&#x9;&#xD;&#xA;&#x9;&#x9;/* Insert into IP_PATENT_CLAIMS (only with  [&quot;+ context.intermediateDB + &quot;].[dbo].VW_IMPORT_patent.IND_IMPORT = 0) */&#xD;&#xA;&#x9;&#x9;SELECT @time1  =  GETDATE()&#xD;&#xA;&#x9;&#x9;&#xD;&#xA;&#x9;&#x9;/* insert for local language */&#xD;&#xA;&#x9;&#x9;INSERT INTO  IP_PATENT_CLAIMS   &#xD;&#xA;&#x9;&#x9;&#x9;&#x9;( ROW_VERSION , &#xD;&#xA;&#x9;&#x9;&#x9;&#x9;FILE_SEQ , &#xD;&#xA;&#x9;&#x9;&#x9;&#x9;FILE_TYP , &#xD;&#xA;&#x9;&#x9;&#x9;&#x9;FILE_SER , &#xD;&#xA;&#x9;&#x9;&#x9;&#x9;FILE_NBR , &#xD;&#xA;&#x9;&#x9;&#x9;&#x9;CLAIM_NBR , &#xD;&#xA;&#x9;&#x9;&#x9;&#x9;LANGUAGE_CODE , &#xD;&#xA;&#x9;&#x9;&#x9;&#x9;CLAIM_DESCRIPTION )  &#xD;&#xA;&#x9;&#x9;SELECT&#xD;&#xA;&#x9;&#x9;&#x9;&#x9; 1,&#xD;&#xA;&#x9;&#x9;&#x9;&#x9; T.FILE_SEQ,&#xD;&#xA;&#x9;&#x9;&#x9;&#x9; T.FILE_TYPE,&#xD;&#xA;&#x9;&#x9;&#x9;&#x9; T.FILE_SERIES,&#xD;&#xA;&#x9;&#x9;&#x9;&#x9; T.FILE_NBR,&#xD;&#xA;&#x9;&#x9;&#x9;&#x9; CLAIM_NBR,&#xD;&#xA;&#x9;&#x9;&#x9;&#x9; 'MX',&#xD;&#xA;&#x9;&#x9;&#x9;&#x9; CLAIM_DESCRIPTION&#xD;&#xA;&#x9;&#x9;FROM   [&quot;+ context.intermediateDB + &quot;].[dbo].VW_import_patent_claims T JOIN wrk_patent M ON T.file_seq  = M.file_seq&#xD;&#xA;&#x9;&#x9;&#x9; AND&#x9;T.file_type  = M.file_type&#xD;&#xA;&#x9;&#x9;&#x9; AND&#x9;T.file_series  = M.file_series&#xD;&#xA;&#x9;&#x9;&#x9; AND&#x9;T.file_nbr  = M.file_nbr  &#xD;&#xA;&#x9;&#x9;WHERE&#x9; CLAIM_DESCRIPTION  is not null&#xD;&#xA;&#x9;&#x9;&#xD;&#xA;&#x9;&#x9;/* insert for English language */&#xD;&#xA;&#x9;&#x9;INSERT INTO  IP_PATENT_CLAIMS   &#xD;&#xA;&#x9;&#x9;&#x9;&#x9;( ROW_VERSION , &#xD;&#xA;&#x9;&#x9;&#x9;&#x9;FILE_SEQ , &#xD;&#xA;&#x9;&#x9;&#x9;&#x9;FILE_TYP , &#xD;&#xA;&#x9;&#x9;&#x9;&#x9;FILE_SER , &#xD;&#xA;&#x9;&#x9;&#x9;&#x9;FILE_NBR , &#xD;&#xA;&#x9;&#x9;&#x9;&#x9;CLAIM_NBR , &#xD;&#xA;&#x9;&#x9;&#x9;&#x9;LANGUAGE_CODE , &#xD;&#xA;&#x9;&#x9;&#x9;&#x9;CLAIM_DESCRIPTION )  &#xD;&#xA;&#x9;&#x9;SELECT&#xD;&#xA;&#x9;&#x9;&#x9;&#x9; 1,&#xD;&#xA;&#x9;&#x9;&#x9;&#x9; T.FILE_SEQ,&#xD;&#xA;&#x9;&#x9;&#x9;&#x9; T.FILE_TYPE,&#xD;&#xA;&#x9;&#x9;&#x9;&#x9; T.FILE_SERIES,&#xD;&#xA;&#x9;&#x9;&#x9;&#x9; T.FILE_NBR,&#xD;&#xA;&#x9;&#x9;&#x9;&#x9; CLAIM_NBR,&#xD;&#xA;&#x9;&#x9;&#x9;&#x9; 'US',&#xD;&#xA;&#x9;&#x9;&#x9;&#x9; CLAIM_ENGLISH_DESCRIPTION&#xD;&#xA;&#x9;&#x9;FROM   [&quot;+ context.intermediateDB + &quot;].[dbo].VW_import_patent_claims T JOIN wrk_patent M ON T.file_seq  = M.file_seq&#xD;&#xA;&#x9;&#x9;&#x9; AND&#x9;T.file_type  = M.file_type&#xD;&#xA;&#x9;&#x9;&#x9; AND&#x9;T.file_series  = M.file_series&#xD;&#xA;&#x9;&#x9;&#x9; AND&#x9;T.file_nbr  = M.file_nbr  &#xD;&#xA;&#x9;&#x9;WHERE&#x9; CLAIM_ENGLISH_DESCRIPTION  is not null&#xD;&#xA;&#x9;&#x9;&#xD;&#xA;&#x9;&#x9;INSERT INTO  wrk_log    &#xD;&#xA;&#x9;&#x9; SELECT 'Insert into IP_PATENT_CLAIMS' , &#xD;&#xA;&#x9;&#x9;&#x9;&#x9;@time1 , datediff(ss, @time1, getdate());&#xD;&#xA;&#x9;&#x9;&#xD;&#xA;&#x9;&#x9;/* Insert into IP_PATENT_SUMMARY (only with  [&quot;+ context.intermediateDB + &quot;].[dbo].VW_IMPORT_patent.IND_IMPORT = 0) */&#xD;&#xA;&#x9;&#x9;SELECT @time1  =  GETDATE()&#xD;&#xA;&#x9;&#x9;&#xD;&#xA;&#x9;&#x9;/* insert for local language */&#xD;&#xA;&#x9;&#x9;INSERT INTO  IP_PATENT_SUMMARY   &#xD;&#xA;&#x9;&#x9;&#x9;&#x9;( ROW_VERSION , &#xD;&#xA;&#x9;&#x9;&#x9;&#x9;FILE_SEQ , &#xD;&#xA;&#x9;&#x9;&#x9;&#x9;FILE_TYP , &#xD;&#xA;&#x9;&#x9;&#x9;&#x9;FILE_SER , &#xD;&#xA;&#x9;&#x9;&#x9;&#x9;FILE_NBR , &#xD;&#xA;&#x9;&#x9;&#x9;&#x9;LANGUAGE_CODE , &#xD;&#xA;&#x9;&#x9;&#x9;&#x9;SUMMARY )  &#xD;&#xA;&#x9;&#x9;SELECT&#xD;&#xA;&#x9;&#x9;&#x9;&#x9; 1,&#xD;&#xA;&#x9;&#x9;&#x9;&#x9; T.FILE_SEQ,&#xD;&#xA;&#x9;&#x9;&#x9;&#x9; T.FILE_TYPE,&#xD;&#xA;&#x9;&#x9;&#x9;&#x9; T.FILE_SERIES,&#xD;&#xA;&#x9;&#x9;&#x9;&#x9; T.FILE_NBR,&#xD;&#xA;&#x9;&#x9;&#x9;&#x9; 'MX',&#xD;&#xA;&#x9;&#x9;&#x9;&#x9; T.ABSTRACT&#xD;&#xA;&#x9;&#x9;FROM   [&quot;+ context.intermediateDB + &quot;].[dbo].VW_import_patent T JOIN wrk_patent M ON T.file_seq  = M.file_seq&#xD;&#xA;&#x9;&#x9;&#x9; AND&#x9;T.file_type  = M.file_type&#xD;&#xA;&#x9;&#x9;&#x9; AND&#x9;T.file_series  = M.file_series&#xD;&#xA;&#x9;&#x9;&#x9; AND&#x9;T.file_nbr  = M.file_nbr  &#xD;&#xA;&#x9;&#x9;WHERE&#x9; T.ABSTRACT  is not null&#xD;&#xA;&#x9;&#x9;&#xD;&#xA;&#x9;&#x9;/* insert for English language */&#xD;&#xA;&#x9;&#x9;INSERT INTO  IP_PATENT_SUMMARY   &#xD;&#xA;&#x9;&#x9;&#x9;&#x9;( ROW_VERSION , &#xD;&#xA;&#x9;&#x9;&#x9;&#x9;FILE_SEQ , &#xD;&#xA;&#x9;&#x9;&#x9;&#x9;FILE_TYP , &#xD;&#xA;&#x9;&#x9;&#x9;&#x9;FILE_SER , &#xD;&#xA;&#x9;&#x9;&#x9;&#x9;FILE_NBR , &#xD;&#xA;&#x9;&#x9;&#x9;&#x9;LANGUAGE_CODE , &#xD;&#xA;&#x9;&#x9;&#x9;&#x9;SUMMARY )  &#xD;&#xA;&#x9;&#x9;SELECT&#xD;&#xA;&#x9;&#x9;&#x9;&#x9; 1,&#xD;&#xA;&#x9;&#x9;&#x9;&#x9; T.FILE_SEQ,&#xD;&#xA;&#x9;&#x9;&#x9;&#x9; T.FILE_TYPE,&#xD;&#xA;&#x9;&#x9;&#x9;&#x9; T.FILE_SERIES,&#xD;&#xA;&#x9;&#x9;&#x9;&#x9; T.FILE_NBR,&#xD;&#xA;&#x9;&#x9;&#x9;&#x9; 'US',&#xD;&#xA;&#x9;&#x9;&#x9;&#x9; T.ENGLISH_ABSTRACT&#xD;&#xA;&#x9;&#x9;FROM   [&quot;+ context.intermediateDB + &quot;].[dbo].VW_import_patent T JOIN wrk_patent M ON T.file_seq  = M.file_seq&#xD;&#xA;&#x9;&#x9;&#x9; AND&#x9;T.file_type  = M.file_type&#xD;&#xA;&#x9;&#x9;&#x9; AND&#x9;T.file_series  = M.file_series&#xD;&#xA;&#x9;&#x9;&#x9; AND&#x9;T.file_nbr  = M.file_nbr  &#xD;&#xA;&#x9;&#x9;WHERE&#x9; T.ENGLISH_ABSTRACT  is not null&#xD;&#xA;&#x9;&#x9;&#xD;&#xA;&#x9;&#x9;INSERT INTO  wrk_log    &#xD;&#xA;&#x9;&#x9; SELECT 'Insert into IP_PATENT_SUMMARY' , &#xD;&#xA;&#x9;&#x9;&#x9;&#x9;@time1 , datediff(ss, @time1, getdate());&#xD;&#xA;&#x9;&#x9;&#xD;&#xA;&#x9;&#x9;/* Insert into IP_PATENT_IPC_CLASSES (only with  [&quot;+ context.intermediateDB + &quot;].[dbo].VW_IMPORT_patent.IND_IMPORT = 0) */&#xD;&#xA;&#x9;&#x9;SELECT @time1  =  GETDATE()&#xD;&#xA;&#x9;&#x9;&#xD;&#xA;&#x9;&#x9;INSERT INTO  IP_PATENT_IPC_CLASSES   &#xD;&#xA;&#x9;&#x9;&#x9;&#x9;( ROW_VERSION , &#xD;&#xA;&#x9;&#x9;&#x9;&#x9;FILE_SEQ , &#xD;&#xA;&#x9;&#x9;&#x9;&#x9;FILE_TYP , &#xD;&#xA;&#x9;&#x9;&#x9;&#x9;FILE_SER , &#xD;&#xA;&#x9;&#x9;&#x9;&#x9;FILE_NBR , &#xD;&#xA;&#x9;&#x9;&#x9;&#x9;IPC_EDITION_CODE , &#xD;&#xA;&#x9;&#x9;&#x9;&#x9;IPC_SECTION_CODE , &#xD;&#xA;&#x9;&#x9;&#x9;&#x9;IPC_CLASS_CODE , &#xD;&#xA;&#x9;&#x9;&#x9;&#x9;IPC_SUBCLASS_CODE , &#xD;&#xA;&#x9;&#x9;&#x9;&#x9;IPC_GROUP_CODE , &#xD;&#xA;&#x9;&#x9;&#x9;&#x9;IPC_SUBGROUP_CODE , &#xD;&#xA;&#x9;&#x9;&#x9;&#x9;IPC_QUALIFICATION_CODE )  &#xD;&#xA;&#x9;&#x9;SELECT&#xD;&#xA;&#x9;&#x9;&#x9;&#x9; 1,&#xD;&#xA;&#x9;&#x9;&#x9;&#x9; T.FILE_SEQ,&#xD;&#xA;&#x9;&#x9;&#x9;&#x9; T.FILE_TYPE,&#xD;&#xA;&#x9;&#x9;&#x9;&#x9; T.FILE_SERIES,&#xD;&#xA;&#x9;&#x9;&#x9;&#x9; T.FILE_NBR,&#xD;&#xA;&#x9;&#x9;&#x9;&#x9; IPC_EDITION,&#xD;&#xA;&#x9;&#x9;&#x9;&#x9; IPC_SECTION,&#xD;&#xA;&#x9;&#x9;&#x9;&#x9; IPC_CLASS,&#xD;&#xA;&#x9;&#x9;&#x9;&#x9; IPC_SUBCLASS,&#xD;&#xA;&#x9;&#x9;&#x9;&#x9; IPC_GROUP,&#xD;&#xA;&#x9;&#x9;&#x9;&#x9; IPC_SUBGROUP,&#xD;&#xA;&#x9;&#x9;&#x9;&#x9; ISNULL(IPC_QUALIFICATION, 'A')&#xD;&#xA;&#x9;&#x9;FROM   [&quot;+ context.intermediateDB + &quot;].[dbo].VW_import_patent_ipc_classes T &#xD;&#xA;&#x9;&#x9; JOIN wrk_patent M ON T.file_seq  = M.file_seq&#xD;&#xA;&#x9;&#x9;&#x9; AND&#x9;T.file_type  = M.file_type&#xD;&#xA;&#x9;&#x9;&#x9; AND&#x9;T.file_series  = M.file_series&#xD;&#xA;&#x9;&#x9;&#x9; AND&#x9;T.file_nbr  = M.file_nbr  &#xD;&#xA;&#x9;&#x9;&#xD;&#xA;&#x9;&#x9;INSERT INTO  wrk_log    &#xD;&#xA;&#x9;&#x9; SELECT 'Insert into IP_PATENT_IPC_CLASSES' , &#xD;&#xA;&#x9;&#x9;&#x9;&#x9;@time1 , datediff(ss, @time1, getdate());&#xD;&#xA;&#x9;&#x9;&#xD;&#xA;&#x9;&#x9;/* Insert into IP_PATENT_LOCARNO_CLASSES (only with  [&quot;+ context.intermediateDB + &quot;].[dbo].VW_IMPORT_patent.IND_IMPORT = 0) */&#xD;&#xA;&#x9;&#x9;SELECT @time1  =  GETDATE()&#xD;&#xA;&#x9;&#x9;/* Added LOCARNO_EDITION_CODE Field :IPAS-1273 */&#xD;&#xA;&#x9;&#x9;INSERT INTO  IP_PATENT_LOCARNO_CLASSES   &#xD;&#xA;&#x9;&#x9;&#x9;&#x9;( ROW_VERSION , &#xD;&#xA;&#x9;&#x9;&#x9;&#x9;FILE_SEQ , &#xD;&#xA;&#x9;&#x9;&#x9;&#x9;FILE_TYP , &#xD;&#xA;&#x9;&#x9;&#x9;&#x9;FILE_SER , &#xD;&#xA;&#x9;&#x9;&#x9;&#x9;FILE_NBR , &#xD;&#xA;&#x9;&#x9;&#x9;&#x9;LOCARNO_CLASS_CODE ,LOCARNO_EDITION_CODE)  &#xD;&#xA;&#x9;&#x9;SELECT&#xD;&#xA;&#x9;&#x9;&#x9;&#x9; 1,&#xD;&#xA;&#x9;&#x9;&#x9;&#x9; T.FILE_SEQ,&#xD;&#xA;&#x9;&#x9;&#x9;&#x9; T.FILE_TYPE,&#xD;&#xA;&#x9;&#x9;&#x9;&#x9; T.FILE_SERIES,&#xD;&#xA;&#x9;&#x9;&#x9;&#x9; T.FILE_NBR,&#xD;&#xA;&#x9;&#x9;&#x9;&#x9; right('0' + CONVERT(varchar, LOCARNO_CLASS_NBR), 2) + '-' + right('0' + CONVERT(varchar, LOCARNO_SUBCLASS_NBR), 2),&#xD;&#xA;&#x9;&#x9;&#x9;&#x9; LOCARNO_EDITION_CODE&#xD;&#xA;&#x9;&#x9;FROM   [&quot;+ context.intermediateDB + &quot;].[dbo].VW_import_patent_locar_classes T JOIN wrk_patent M ON T.file_seq  = M.file_seq&#xD;&#xA;&#x9;&#x9;&#x9; AND&#x9;T.file_type  = M.file_type&#xD;&#xA;&#x9;&#x9;&#x9; AND&#x9;T.file_series  = M.file_series&#xD;&#xA;&#x9;&#x9;&#x9; AND&#x9;T.file_nbr  = M.file_nbr  &#xD;&#xA;&#x9;&#x9;&#xD;&#xA;&#x9;&#x9;INSERT INTO  wrk_log    &#xD;&#xA;&#x9;&#x9; SELECT 'Insert into IP_PATENT_LOCARNO_CLASSES' , &#xD;&#xA;&#x9;&#x9;&#x9;&#x9;@time1 , datediff(ss, @time1, getdate());&#xD;&#xA;&#x9;&#x9;&#xD;&#xA;&#x9;&#x9;/* Insert into IP_PATENT_NOTES (only with  [&quot;+ context.intermediateDB + &quot;].[dbo].VW_IMPORT_patent.IND_IMPORT = 0) */&#xD;&#xA;&#x9;&#x9;SELECT @time1  =  GETDATE()&#xD;&#xA;&#x9;&#x9;&#xD;&#xA;&#x9;&#x9;INSERT INTO  IP_PATENT_NOTES   &#xD;&#xA;&#x9;&#x9;&#x9;&#x9;( ROW_VERSION , &#xD;&#xA;&#x9;&#x9;&#x9;&#x9;FILE_SEQ , &#xD;&#xA;&#x9;&#x9;&#x9;&#x9;FILE_TYP , &#xD;&#xA;&#x9;&#x9;&#x9;&#x9;FILE_SER , &#xD;&#xA;&#x9;&#x9;&#x9;&#x9;FILE_NBR , &#xD;&#xA;&#x9;&#x9;&#x9;&#x9;NOTES )  &#xD;&#xA;&#x9;&#x9;SELECT&#xD;&#xA;&#x9;&#x9;&#x9;&#x9; 1,&#xD;&#xA;&#x9;&#x9;&#x9;&#x9; T.FILE_SEQ,&#xD;&#xA;&#x9;&#x9;&#x9;&#x9; T.FILE_TYPE,&#xD;&#xA;&#x9;&#x9;&#x9;&#x9; T.FILE_SERIES,&#xD;&#xA;&#x9;&#x9;&#x9;&#x9; T.FILE_NBR,&#xD;&#xA;&#x9;&#x9;&#x9;&#x9; T.NOTES&#xD;&#xA;&#x9;&#x9;FROM   [&quot;+ context.intermediateDB + &quot;].[dbo].VW_import_patent T JOIN wrk_patent M ON T.file_seq  = M.file_seq&#xD;&#xA;&#x9;&#x9;&#x9; AND&#x9;T.file_type  = M.file_type&#xD;&#xA;&#x9;&#x9;&#x9; AND&#x9;T.file_series  = M.file_series&#xD;&#xA;&#x9;&#x9;&#x9; AND&#x9;T.file_nbr  = M.file_nbr  &#xD;&#xA;&#x9;&#x9;WHERE&#x9; T.notes  is not null&#xD;&#xA;&#x9;&#x9;&#xD;&#xA;&#x9;&#x9;INSERT INTO  wrk_log    &#xD;&#xA;&#x9;&#x9; SELECT 'Insert into IP_PATENT_LOCARNO_CLASSES' , &#xD;&#xA;&#x9;&#x9;&#x9;&#x9;@time1 , datediff(ss, @time1, getdate());&#xD;&#xA;&#x9;&#x9;&#xD;&#xA;&#x9;&#x9;/* Insert into IP_PATENT_REF_EXAM (only with  [&quot;+ context.intermediateDB + &quot;].[dbo].VW_IMPORT_patent.IND_IMPORT = 0) */&#xD;&#xA;&#x9;&#x9;SELECT @time1  =  GETDATE()&#xD;&#xA;&#x9;&#x9;&#xD;&#xA;&#x9;&#x9;INSERT INTO  IP_PATENT_REF_EXAM   &#xD;&#xA;&#x9;&#x9;&#x9;&#x9;( ROW_VERSION , &#xD;&#xA;&#x9;&#x9;&#x9;&#x9;FILE_SEQ , &#xD;&#xA;&#x9;&#x9;&#x9;&#x9;FILE_TYP , &#xD;&#xA;&#x9;&#x9;&#x9;&#x9;FILE_SER , &#xD;&#xA;&#x9;&#x9;&#x9;&#x9;FILE_NBR , &#xD;&#xA;&#x9;&#x9;&#x9;&#x9;REF_NBR , &#xD;&#xA;&#x9;&#x9;&#x9;&#x9;REF_CATEG , &#xD;&#xA;&#x9;&#x9;&#x9;&#x9;REF_DESC , &#xD;&#xA;&#x9;&#x9;&#x9;&#x9;REF_CLAIMS )  &#xD;&#xA;&#x9;&#x9;SELECT&#xD;&#xA;&#x9;&#x9;&#x9;&#x9; 1,&#xD;&#xA;&#x9;&#x9;&#x9;&#x9; T.FILE_SEQ,&#xD;&#xA;&#x9;&#x9;&#x9;&#x9; T.FILE_TYPE,&#xD;&#xA;&#x9;&#x9;&#x9;&#x9; T.FILE_SERIES,&#xD;&#xA;&#x9;&#x9;&#x9;&#x9; T.FILE_NBR,&#xD;&#xA;&#x9;&#x9;&#x9;&#x9; REF_NBR,&#xD;&#xA;&#x9;&#x9;&#x9;&#x9; REF_CATEG_CODE,&#xD;&#xA;&#x9;&#x9;&#x9;&#x9; REF_DESCRIPTION,&#xD;&#xA;&#x9;&#x9;&#x9;&#x9; REF_AFFECTS_CLAIMS&#xD;&#xA;&#x9;&#x9;FROM   [&quot;+ context.intermediateDB + &quot;].[dbo].VW_import_patent_examdocs T JOIN wrk_patent M ON T.file_seq  = M.file_seq&#xD;&#xA;&#x9;&#x9;&#x9; AND&#x9;T.file_type  = M.file_type&#xD;&#xA;&#x9;&#x9;&#x9; AND&#x9;T.file_series  = M.file_series&#xD;&#xA;&#x9;&#x9;&#x9; AND&#x9;T.file_nbr  = M.file_nbr  &#xD;&#xA;&#x9;&#x9;&#xD;&#xA;&#x9;&#x9;INSERT INTO  wrk_log    &#xD;&#xA;&#x9;&#x9; SELECT 'Insert into IP_PATENT_LOCARNO_CLASSES' , &#xD;&#xA;&#x9;&#x9;&#x9;&#x9;@time1 , datediff(ss, @time1, getdate());&#xD;&#xA;&#x9;&#x9;&#xD;&#xA;&#x9;&#x9;/* 1.2.6 Step 6: insert process and actions */&#xD;&#xA;&#x9;&#x9;/* Insert into IP_PROC from WRK_patent */&#xD;&#xA;&#x9;&#x9;SELECT @time1  =  GETDATE()&#xD;&#xA;&#x9;&#x9;&#xD;&#xA;&#x9;&#x9;INSERT INTO  IP_PROC   &#xD;&#xA;&#x9;&#x9;&#x9;&#x9;( ROW_VERSION , &#xD;&#xA;&#x9;&#x9;&#x9;&#x9;PROC_TYP , &#xD;&#xA;&#x9;&#x9;&#x9;&#x9;PROC_NBR , &#xD;&#xA;&#x9;&#x9;&#x9;&#x9;FILE_SEQ , &#xD;&#xA;&#x9;&#x9;&#x9;&#x9;FILE_TYP , &#xD;&#xA;&#x9;&#x9;&#x9;&#x9;FILE_SER , &#xD;&#xA;&#x9;&#x9;&#x9;&#x9;FILE_NBR , &#xD;&#xA;&#x9;&#x9;&#x9;&#x9;APPL_TYP , &#xD;&#xA;&#x9;&#x9;&#x9;&#x9;CREATION_DATE , &#xD;&#xA;&#x9;&#x9;&#x9;&#x9;STATUS_CODE , &#xD;&#xA;&#x9;&#x9;&#x9;&#x9;STATUS_DATE , &#xD;&#xA;&#x9;&#x9;&#x9;&#x9;FILE_PROC_TYP , &#xD;&#xA;&#x9;&#x9;&#x9;&#x9;FILE_PROC_NBR )  &#xD;&#xA;&#x9;&#x9;SELECT&#xD;&#xA;&#x9;&#x9;&#x9;&#x9; 1,&#xD;&#xA;&#x9;&#x9;&#x9;&#x9; PROC_TYP,&#xD;&#xA;&#x9;&#x9;&#x9;&#x9; PROC_NBR,&#xD;&#xA;&#x9;&#x9;&#x9;&#x9; FILE_SEQ,&#xD;&#xA;&#x9;&#x9;&#x9;&#x9; FILE_TYPE,&#xD;&#xA;&#x9;&#x9;&#x9;&#x9; FILE_SERIES,&#xD;&#xA;&#x9;&#x9;&#x9;&#x9; FILE_NBR,&#xD;&#xA;&#x9;&#x9;&#x9;&#x9; APPLICATION_TYPE,&#xD;&#xA;&#x9;&#x9;&#x9;&#x9; RECEPTION_DATE,&#xD;&#xA;&#x9;&#x9;&#x9;&#x9; STATUS_CODE,&#xD;&#xA;&#x9;&#x9;&#x9;&#x9; RECEPTION_DATE,&#xD;&#xA;&#x9;&#x9;&#x9;&#x9; PROC_TYP,&#xD;&#xA;&#x9;&#x9;&#x9;&#x9; PROC_NBR&#xD;&#xA;&#x9;&#x9;FROM  wrk_patent &#xD;&#xA;&#x9;&#x9;&#xD;&#xA;&#x9;&#x9;INSERT INTO  wrk_log    &#xD;&#xA;&#x9;&#x9; SELECT 'Insert into IP_PROC' , &#xD;&#xA;&#x9;&#x9;&#x9;&#x9;@time1 , datediff(ss, @time1, getdate());&#xD;&#xA;&#x9;&#x9;&#xD;&#xA;&#x9;&#x9;/* Insert note actions from WRK_patent_ACTIONS where ACTION_CATEGORY = N, joining with WRK_patent */&#xD;&#xA;&#x9;&#x9;/* long field longer than 3000 is inserted in paired CLOB column */&#xD;&#xA;&#x9;&#x9;/* Also insert special actions from WRK_patent_ACTIONS where ACTION_CATEGORY = S */&#xD;&#xA;&#x9;&#x9;SELECT @time1  =  GETDATE()&#xD;&#xA;&#x9;&#x9;&#xD;&#xA;&#x9;&#x9;INSERT INTO  IP_ACTION   &#xD;&#xA;&#x9;&#x9;&#x9;&#x9;( ROW_VERSION , &#xD;&#xA;&#x9;&#x9;&#x9;&#x9;PROC_TYP , &#xD;&#xA;&#x9;&#x9;&#x9;&#x9;PROC_NBR , &#xD;&#xA;&#x9;&#x9;&#x9;&#x9;ACTION_NBR , &#xD;&#xA;&#x9;&#x9;&#x9;&#x9;ACTION_TYP , &#xD;&#xA;&#x9;&#x9;&#x9;&#x9;ACTION_DATE , &#xD;&#xA;&#x9;&#x9;&#x9;&#x9;CAPTURE_DATE , &#xD;&#xA;&#x9;&#x9;&#x9;&#x9;SIGNATURE_DATE , &#xD;&#xA;&#x9;&#x9;&#x9;&#x9;CAPTURE_USER_ID , &#xD;&#xA;&#x9;&#x9;&#x9;&#x9;AUTHORISING_USER_ID , &#xD;&#xA;&#x9;&#x9;&#x9;&#x9;NOTES2 , &#xD;&#xA;&#x9;&#x9;&#x9;&#x9;NOTES3 , &#xD;&#xA;&#x9;&#x9;&#x9;&#x9;NOTES4 , &#xD;&#xA;&#x9;&#x9;&#x9;&#x9;NOTES5 , &#xD;&#xA;&#x9;&#x9;&#x9;&#x9;ACTION_NOTES , &#xD;&#xA;&#x9;&#x9;&#x9;&#x9;IND_CHANGES_STATUS , &#xD;&#xA;&#x9;&#x9;&#x9;&#x9;NEW_STATUS_CODE , &#xD;&#xA;&#x9;&#x9;&#x9;&#x9;PRIOR_STATUS_CODE , &#xD;&#xA;&#x9;&#x9;&#x9;&#x9;PRIOR_STATUS_DATE , &#xD;&#xA;&#x9;&#x9;&#x9;&#x9;PRIOR_DUE_DATE , &#xD;&#xA;&#x9;&#x9;&#x9;&#x9;NOTES1)  &#xD;&#xA;&#x9;&#x9;SELECT&#xD;&#xA;&#x9;&#x9;&#x9;&#x9; 1,&#xD;&#xA;&#x9;&#x9;&#x9;&#x9; M.PROC_TYP,&#xD;&#xA;&#x9;&#x9;&#x9;&#x9; M.PROC_NBR,&#xD;&#xA;&#x9;&#x9;&#x9;&#x9; T.ACTION_NBR,&#xD;&#xA;&#x9;&#x9;&#x9;&#x9; T.ACTION_TYPE,&#xD;&#xA;&#x9;&#x9;&#x9;&#x9; T.ACTION_DATE,&#xD;&#xA;&#x9;&#x9;&#x9;&#x9; T.ACTION_DATE,&#xD;&#xA;&#x9;&#x9;&#x9;&#x9; T.ACTION_DATE,&#xD;&#xA;&#x9;&#x9;&#x9;&#x9; T.ACTION_USER,&#xD;&#xA;&#x9;&#x9;&#x9;&#x9; T.ACTION_USER,&#xD;&#xA;&#x9;&#x9;&#x9;&#x9; T.ACTION_NOTES2,&#xD;&#xA;&#x9;&#x9;&#x9;&#x9; T.ACTION_NOTES3,&#xD;&#xA;&#x9;&#x9;&#x9;&#x9; T.ACTION_NOTES4,&#xD;&#xA;&#x9;&#x9;&#x9;&#x9; T.ACTION_NOTES5,&#xD;&#xA;&#x9;&#x9;&#x9;&#x9; T.GENERAL_NOTES,&#xD;&#xA;&#x9;&#x9;&#x9;&#x9; 'N',&#xD;&#xA;&#x9;&#x9;&#x9;&#x9; null,&#xD;&#xA;&#x9;&#x9;&#x9;&#x9; null,&#xD;&#xA;&#x9;&#x9;&#x9;&#x9; null,&#xD;&#xA;&#x9;&#x9;&#x9;&#x9; null,&#xD;&#xA;&#x9;&#x9;&#x9;&#x9; T.ACTION_NOTES1&#xD;&#xA;&#x9;&#x9;FROM  wrk_patent_actions T &#xD;&#xA;&#x9;&#x9; JOIN wrk_patent M ON T.file_seq  = M.file_seq&#xD;&#xA;&#x9;&#x9;&#x9; AND&#x9;T.file_type  = M.file_type&#xD;&#xA;&#x9;&#x9;&#x9; AND&#x9;T.file_series  = M.file_series&#xD;&#xA;&#x9;&#x9;&#x9; AND&#x9;T.file_nbr  = M.file_nbr  &#xD;&#xA;&#x9;&#x9;WHERE&#x9; T.ACTION_CATEGORY  = 'N'&#xD;&#xA;&#x9;&#x9;UNION ALL&#xD;&#xA;&#x9;&#x9; SELECT&#xD;&#xA;&#x9;&#x9;&#x9;&#x9; 1,&#xD;&#xA;&#x9;&#x9;&#x9;&#x9; M.PROC_TYP,&#xD;&#xA;&#x9;&#x9;&#x9;&#x9; M.PROC_NBR,&#xD;&#xA;&#x9;&#x9;&#x9;&#x9; T.ACTION_NBR,&#xD;&#xA;&#x9;&#x9;&#x9;&#x9; T.ACTION_TYPE,&#xD;&#xA;&#x9;&#x9;&#x9;&#x9; T.ACTION_DATE,&#xD;&#xA;&#x9;&#x9;&#x9;&#x9; T.ACTION_DATE,&#xD;&#xA;&#x9;&#x9;&#x9;&#x9; T.ACTION_DATE,&#xD;&#xA;&#x9;&#x9;&#x9;&#x9; T.ACTION_USER,&#xD;&#xA;&#x9;&#x9;&#x9;&#x9; T.ACTION_USER,&#xD;&#xA;&#x9;&#x9;&#x9;&#x9; T.ACTION_NOTES2,&#xD;&#xA;&#x9;&#x9;&#x9;&#x9; T.ACTION_NOTES3,&#xD;&#xA;&#x9;&#x9;&#x9;&#x9; T.ACTION_NOTES4,&#xD;&#xA;&#x9;&#x9;&#x9;&#x9; T.ACTION_NOTES5,&#xD;&#xA;&#x9;&#x9;&#x9;&#x9; T.GENERAL_NOTES,&#xD;&#xA;&#x9;&#x9;&#x9;&#x9; 'S',&#xD;&#xA;&#x9;&#x9;&#x9;&#x9; T.SPECIAL_FINAL_STATUS,&#xD;&#xA;&#x9;&#x9;&#x9;&#x9; P.STATUS_CODE,&#xD;&#xA;&#x9;&#x9;&#x9;&#x9; P.STATUS_DATE,&#xD;&#xA;&#x9;&#x9;&#x9;&#x9; P.EXPIRATION_DATE,&#xD;&#xA;&#x9;&#x9;&#x9;&#x9; T.ACTION_NOTES1&#xD;&#xA;&#x9;&#x9;FROM  wrk_patent_actions T JOIN wrk_patent M ON T.file_seq  = M.file_seq&#xD;&#xA;&#x9;&#x9;&#x9; AND&#x9;T.file_type  = M.file_type&#xD;&#xA;&#x9;&#x9;&#x9; AND&#x9;T.file_series  = M.file_series&#xD;&#xA;&#x9;&#x9;&#x9; AND&#x9;T.file_nbr  = M.file_nbr  JOIN IP_PROC P ON P.proc_typ  = M.proc_typ&#xD;&#xA;&#x9;&#x9;&#x9; AND&#x9;P.proc_nbr  = M.proc_nbr  &#xD;&#xA;&#x9;&#x9;WHERE&#x9; T.ACTION_CATEGORY  = 'S'&#xD;&#xA;&#x9;&#x9; &#xD;&#xA;&#x9;&#x9;&#xD;&#xA;&#x9;&#x9;INSERT INTO  wrk_log    &#xD;&#xA;&#x9;&#x9; SELECT 'Insert note and special actions' , &#xD;&#xA;&#x9;&#x9;&#x9;&#x9;@time1 , datediff(ss, @time1, getdate());&#xD;&#xA;&#x9;&#x9;&#xD;&#xA;&#x9;&#x9;/* For each special action, update the status of the process */&#xD;&#xA;&#x9;&#x9;SELECT @time1  =  GETDATE()&#xD;&#xA;&#x9;&#x9;&#xD;&#xA;&#x9;&#x9;/* Browse special actions */&#xD;&#xA;&#x9;&#x9;&#xD;&#xA;&#x9;&#x9;DECLARE curActi cursor LOCAL FOR &#xD;&#xA;&#x9;&#x9;SELECT&#x9;SPECIAL_FINAL_STATUS, ACTION_DATE, MANUAL_DUE_DATE, RESPONSIBLE_USER, proc_typ, proc_nbr&#xD;&#xA;&#x9;&#x9;FROM  WRK_patent_ACTIONS T &#xD;&#xA;&#x9;&#x9; JOIN wrk_patent M ON T.file_seq  = M.file_seq&#xD;&#xA;&#x9;&#x9;&#x9; AND&#x9;T.file_type  = M.file_type&#xD;&#xA;&#x9;&#x9;&#x9; AND&#x9;T.file_series  = M.file_series&#xD;&#xA;&#x9;&#x9;&#x9; AND&#x9;T.file_nbr  = M.file_nbr  &#xD;&#xA;&#x9;&#x9;WHERE&#x9; ACTION_CATEGORY  = 'S'&#xD;&#xA;&#x9;&#x9;ORDER BY ACTION_DATE &#xD;&#xA;&#x9;&#x9;&#xD;&#xA;&#x9;&#x9;DECLARE @recActi_SPECIAL_FINAL_STATUS&#x9;VARCHAR(200)&#xD;&#xA;&#x9;&#x9;DECLARE&#x9;@recActi_ACTION_DATE&#x9;&#x9;DATETIME&#xD;&#xA;&#x9;&#x9;DECLARE&#x9;@recActi_MANUAL_DUE_DATE&#x9;DATETIME&#xD;&#xA;&#x9;&#x9;DECLARE&#x9;@recActi_RESPONSIBLE_USER&#x9;NUMERIC&#xD;&#xA;&#x9;&#x9;DECLARE&#x9;@recActi_proc_typ&#x9;&#x9;VARCHAR(200)&#xD;&#xA;&#x9;&#x9;DECLARE&#x9;@recActi_proc_nbr&#x9;&#x9;NUMERIC&#xD;&#xA;&#x9;&#x9;&#xD;&#xA;&#x9;&#x9;OPEN curActi &#xD;&#xA;&#x9;&#x9;WHILE (0 = 0) &#xD;&#xA;&#x9;&#x9;BEGIN --( &#xD;&#xA;&#x9;&#x9;&#x9;&#xD;&#xA;&#x9;&#x9;&#x9;fetch NEXT FROM curActi INTO @recActi_SPECIAL_FINAL_STATUS, @recActi_ACTION_DATE, @recActi_MANUAL_DUE_DATE, @recActi_RESPONSIBLE_USER, @recActi_proc_typ, @recActi_proc_nbr&#xD;&#xA;&#x9;&#x9;&#x9;IF (@@FETCH_STATUS = -1) &#xD;&#xA;&#x9;&#x9;&#x9;BREAK&#xD;&#xA;&#xD;&#xA;&#x9;&#x9;&#x9;/* update IP_PROC */&#xD;&#xA;&#x9;&#x9;&#x9;UPDATE  IP_PROC   &#xD;&#xA;&#x9;&#x9;&#x9;SET&#x9;STATUS_CODE = @recActi_SPECIAL_FINAL_STATUS,&#x9;&#xD;&#xA;&#x9;&#x9;&#x9;    STATUS_DATE = @recActi_ACTION_DATE,&#x9;&#xD;&#xA;&#x9;&#x9;&#x9;    EXPIRATION_DATE = @recActi_MANUAL_DUE_DATE, &#xD;&#xA;&#x9;&#x9;&#x9;    RESPONSIBLE_USER_ID = @recActi_RESPONSIBLE_USER &#xD;&#xA;&#x9;&#x9;&#x9;WHERE  proc_typ  = @recActi_proc_typ&#xD;&#xA;&#x9;&#x9;&#x9; AND&#x9;proc_nbr  = @recActi_proc_nbr &#xD;&#xA;&#x9;&#x9;&#x9;&#xD;&#xA;&#x9;&#x9;END --) &#xD;&#xA;&#x9;&#x9;close curActi&#xD;&#xA;&#x9;&#x9;&#xD;&#xA;&#x9;&#x9;INSERT INTO  wrk_log    &#xD;&#xA;&#x9;&#x9; SELECT 'For each special action, update the status of the process' , &#xD;&#xA;&#x9;&#x9;&#x9;&#x9;@time1 , datediff(ss, @time1, getdate());&#xD;&#xA;&#x9;&#x9;&#xD;&#xA;&#x9;&#x9;/* Update the file to refer to the inserted process */&#xD;&#xA;&#x9;&#x9;SELECT @time1  =  GETDATE()&#xD;&#xA;&#x9;&#x9;&#xD;&#xA;&#x9;&#x9;/* Browse patents  */&#xD;&#xA;&#xD;&#xA;&#x9;&#x9;DECLARE curpatent cursor LOCAL FOR &#xD;&#xA;&#x9;&#x9;SELECT&#x9;proc_typ, proc_nbr, file_seq, file_type, file_series, file_nbr &#xD;&#xA;&#x9;&#x9;FROM&#x9;WRK_patent &#xD;&#xA;&#x9;&#x9;&#xD;&#xA;&#x9;&#x9;DECLARE @recPatent_proc_typ&#x9;&#x9;VARCHAR(200)&#xD;&#xA;&#x9;&#x9;DECLARE @recPatent_proc_nbr&#x9;&#x9;NUMERIC&#xD;&#xA;&#x9;&#x9;DECLARE @recPatent_file_seq&#x9;&#x9;VARCHAR(200)&#xD;&#xA;&#x9;&#x9;DECLARE @recPatent_file_type&#x9;        VARCHAR(200)&#xD;&#xA;&#x9;&#x9;DECLARE @recPatent_file_series&#x9;        NUMERIC&#xD;&#xA;&#x9;&#x9;DECLARE @recPatent_file_nbr&#x9;&#x9;NUMERIC&#xD;&#xA;&#xD;&#xA;&#x9;&#x9;&#xD;&#xA;&#x9;&#x9;OPEN curPatent &#xD;&#xA;&#x9;&#x9;WHILE (0 = 0) &#xD;&#xA;&#x9;&#x9;BEGIN --( &#xD;&#xA;&#x9;&#x9;&#x9;&#xD;&#xA;&#x9;&#x9;&#x9;fetch NEXT FROM curPatent INTO @recPatent_proc_typ, @recPatent_proc_nbr, @recPatent_file_seq, @recPatent_file_type, @recPatent_file_series, @recPatent_file_nbr &#xD;&#xA;&#x9;&#x9;&#x9;IF (@@FETCH_STATUS = -1) &#xD;&#xA;&#x9;&#x9;&#x9;BREAK&#xD;&#xA;&#xD;&#xA;&#x9;&#x9;&#x9;/* update IP_PROC */&#xD;&#xA;&#x9;&#x9;&#x9;UPDATE  IP_FILE   &#xD;&#xA;&#x9;&#x9;&#x9;SET&#x9;proc_typ = @recPatent_proc_typ,&#x9;&#xD;&#xA;&#x9;&#x9;&#x9;        proc_nbr = @recPatent_proc_nbr &#xD;&#xA;&#x9;&#x9;&#x9;WHERE   file_seq  = @recPatent_file_seq&#xD;&#xA;&#x9;&#x9;&#x9; AND&#x9;file_typ  = @recPatent_file_type&#xD;&#xA;&#x9;&#x9;&#x9; AND&#x9;file_ser  = @recPatent_file_series&#xD;&#xA;&#x9;&#x9;&#x9; AND&#x9;file_nbr  = @recPatent_file_nbr &#xD;&#xA;&#x9;&#x9;&#x9;&#xD;&#xA;&#x9;&#x9;END --) &#xD;&#xA;&#x9;&#x9;close curPatent&#xD;&#xA;&#x9;&#x9;&#xD;&#xA;&#x9;&#x9;INSERT INTO  wrk_log    &#xD;&#xA;&#x9;&#x9; SELECT 'Update the file to refer to the inserted process' , &#xD;&#xA;&#x9;&#x9;&#x9;&#x9;@time1 , datediff(ss, @time1, getdate());&#xD;&#xA;&#x9;&#x9;&#xD;&#xA;&#x9;&#x9;/* *************** FINAL STEP: all imported patents are flagged *************** */&#xD;&#xA;&#x9;&#x9;SELECT @time1  =  GETDATE()&#xD;&#xA;&#x9;&#x9;&#xD;&#xA;&#x9;&#x9;UPDATE   [&quot;+ context.intermediateDB + &quot;].[dbo].VW_IMPORT_patent   &#xD;&#xA;&#x9;&#x9;SET&#x9;IND_IMPORT = 1 &#xD;&#xA;&#x9;&#x9;WHERE  IND_IMPORT  = 9 &#xD;&#xA;&#x9;&#x9;&#xD;&#xA;&#x9;&#x9;INSERT INTO  wrk_log    &#xD;&#xA;&#x9;&#x9; SELECT 'All imported patents are flagged' , &#xD;&#xA;&#x9;&#x9;&#x9;&#x9;@time1 , datediff(ss, @time1, getdate());&#xD;&#xA;&#x9;&#x9;&#xD;&#xA; DEALLOCATE curPrio&#xD;&#xA; DEALLOCATE cur4&#xD;&#xA; DEALLOCATE curActi&#xD;&#xA; DEALLOCATE curpatent&#xD;&#xA;&#xD;&#xA;&#x9;&#x9;SET NOCOUNT OFF&#xD;&#xA;&#xD;&#xA;&#x9;END&#xD;&#xA;&quot;"/>
    <elementParameter field="LABEL" name="NOTE" value="This option only applies when deploying and running in the Talend Runtime" show="false"/>
    <elementParameter field="CHECK" name="SPECIFY_DATASOURCE_ALIAS" value="false" show="false"/>
    <elementParameter field="TEXT" name="DATASOURCE_ALIAS" value="&quot;&quot;" show="false"/>
    <elementParameter field="CHECK" name="DIE_ON_ERROR" value="false"/>
    <elementParameter field="TEXT" name="PROPERTIES" value="&quot;&quot;" show="false"/>
    <elementParameter field="CHECK" name="ACTIVE_DIR_AUTH" value="false" show="false"/>
    <elementParameter field="CHECK" name="PROPAGATE_RECORD_SET" value="false"/>
    <elementParameter field="COLUMN_LIST" name="RECORD_SET_COLUMN" value="" show="false"/>
    <elementParameter field="CHECK" name="USE_PREPAREDSTATEMENT" value="false"/>
    <elementParameter field="TABLE" name="SET_PREPAREDSTATEMENT_PARAMETERS" show="false"/>
    <elementParameter field="ENCODING_TYPE" name="ENCODING" value="&quot;ISO-8859-15&quot;" show="false"/>
    <elementParameter field="TECHNICAL" name="ENCODING:ENCODING_TYPE" value="ISO-8859-15"/>
    <elementParameter field="TEXT" name="COMMIT_EVERY" value="10000" show="false"/>
    <elementParameter field="TEXT" name="CONNECTION_FORMAT" value="row"/>
    <metadata connector="FLOW" name="tMSSqlRow_32"/>
    <metadata connector="REJECT" name="REJECT">
      <column defaultValue="" key="false" length="255" name="errorCode" nullable="true" precision="0" sourceType="" type="id_String" originalLength="-1" usefulColumn="true"/>
      <column defaultValue="" key="false" length="255" name="errorMessage" nullable="true" precision="0" sourceType="" type="id_String" originalLength="-1" usefulColumn="true"/>
    </metadata>
  </node>
  <node componentName="tMSSqlRow" componentVersion="0.102" offsetLabelX="0" offsetLabelY="0" posX="544" posY="3296">
    <elementParameter field="TEXT" name="UNIQUE_NAME" value="tMSSqlRow_33" show="false"/>
    <elementParameter field="CHECK" name="USE_EXISTING_CONNECTION" value="true"/>
    <elementParameter field="COMPONENT_LIST" name="CONNECTION" value="tMSSqlConnection_4"/>
    <elementParameter field="CLOSED_LIST" name="DRIVER" value="JTDS" show="false"/>
    <elementParameter field="TEXT" name="HOST" value="&quot;&quot;" show="false"/>
    <elementParameter field="TEXT" name="PORT" value="&quot;1433&quot;" show="false"/>
    <elementParameter field="TEXT" name="DB_SCHEMA" value="&quot;&quot;" show="false"/>
    <elementParameter field="TEXT" name="DBNAME" value="&quot;&quot;" show="false"/>
    <elementParameter field="TEXT" name="TYPE" value="MSSQL" show="false"/>
    <elementParameter field="TEXT" name="USER" value="&quot;&quot;" show="false"/>
    <elementParameter field="PASSWORD" name="PASS" value="enc:system.encryption.key.v1:7zA3weFH7ZreEEae54dXq5Y8vphVv1H7B8RygMvm" show="false"/>
    <elementParameter field="DBTABLE" name="TABLE" value="&quot;&quot;"/>
    <elementParameter field="CHECK" name="IDENTITY_INSERT" value="false"/>
    <elementParameter field="QUERYSTORE_TYPE" name="QUERYSTORE" value="&quot;&quot;"/>
    <elementParameter field="TECHNICAL" name="QUERYSTORE:REPOSITORY_QUERYSTORE_TYPE" value="" show="false"/>
    <elementParameter field="TECHNICAL" name="QUERYSTORE:QUERYSTORE_TYPE" value="BUILT_IN"/>
    <elementParameter field="MEMO_SQL" name="QUERY" value="&quot;&#xD;&#xA;IF OBJECT_ID('UserDocDateValidationPROC', 'P') IS NOT NULL&#xD;&#xA;  DROP PROCEDURE UserDocDateValidationPROC;&#xD;&#xA;&quot;"/>
    <elementParameter field="LABEL" name="NOTE" value="This option only applies when deploying and running in the Talend Runtime" show="false"/>
    <elementParameter field="CHECK" name="SPECIFY_DATASOURCE_ALIAS" value="false" show="false"/>
    <elementParameter field="TEXT" name="DATASOURCE_ALIAS" value="&quot;&quot;" show="false"/>
    <elementParameter field="CHECK" name="DIE_ON_ERROR" value="false"/>
    <elementParameter field="TEXT" name="PROPERTIES" value="&quot;&quot;" show="false"/>
    <elementParameter field="CHECK" name="ACTIVE_DIR_AUTH" value="false" show="false"/>
    <elementParameter field="CHECK" name="PROPAGATE_RECORD_SET" value="false"/>
    <elementParameter field="COLUMN_LIST" name="RECORD_SET_COLUMN" value="" show="false"/>
    <elementParameter field="CHECK" name="USE_PREPAREDSTATEMENT" value="false"/>
    <elementParameter field="TABLE" name="SET_PREPAREDSTATEMENT_PARAMETERS" show="false"/>
    <elementParameter field="ENCODING_TYPE" name="ENCODING" value="&quot;ISO-8859-15&quot;" show="false"/>
    <elementParameter field="TECHNICAL" name="ENCODING:ENCODING_TYPE" value="ISO-8859-15"/>
    <elementParameter field="TEXT" name="COMMIT_EVERY" value="10000" show="false"/>
    <elementParameter field="TEXT" name="CONNECTION_FORMAT" value="row"/>
    <metadata connector="FLOW" name="tMSSqlRow_33"/>
    <metadata connector="REJECT" name="REJECT">
      <column defaultValue="" key="false" length="255" name="errorCode" nullable="true" precision="0" sourceType="" type="id_String" originalLength="-1" usefulColumn="true"/>
      <column defaultValue="" key="false" length="255" name="errorMessage" nullable="true" precision="0" sourceType="" type="id_String" originalLength="-1" usefulColumn="true"/>
    </metadata>
  </node>
  <node componentName="tMSSqlRow" componentVersion="0.102" offsetLabelX="0" offsetLabelY="0" posX="672" posY="3296">
    <elementParameter field="TEXT" name="UNIQUE_NAME" value="tMSSqlRow_34" show="false"/>
    <elementParameter field="CHECK" name="USE_EXISTING_CONNECTION" value="true"/>
    <elementParameter field="COMPONENT_LIST" name="CONNECTION" value="tMSSqlConnection_4"/>
    <elementParameter field="CLOSED_LIST" name="DRIVER" value="JTDS" show="false"/>
    <elementParameter field="TEXT" name="HOST" value="&quot;&quot;" show="false"/>
    <elementParameter field="TEXT" name="PORT" value="&quot;1433&quot;" show="false"/>
    <elementParameter field="TEXT" name="DB_SCHEMA" value="&quot;&quot;" show="false"/>
    <elementParameter field="TEXT" name="DBNAME" value="&quot;&quot;" show="false"/>
    <elementParameter field="TEXT" name="TYPE" value="MSSQL" show="false"/>
    <elementParameter field="TEXT" name="USER" value="&quot;&quot;" show="false"/>
    <elementParameter field="PASSWORD" name="PASS" value="enc:system.encryption.key.v1:nuVgfMYGODyXMEaE1OEfGqLw5h5DlHGG7mxW+W0a" show="false"/>
    <elementParameter field="DBTABLE" name="TABLE" value="&quot;&quot;"/>
    <elementParameter field="CHECK" name="IDENTITY_INSERT" value="false"/>
    <elementParameter field="QUERYSTORE_TYPE" name="QUERYSTORE" value="&quot;&quot;"/>
    <elementParameter field="TECHNICAL" name="QUERYSTORE:REPOSITORY_QUERYSTORE_TYPE" value="" show="false"/>
    <elementParameter field="TECHNICAL" name="QUERYSTORE:QUERYSTORE_TYPE" value="BUILT_IN"/>
    <elementParameter field="MEMO_SQL" name="QUERY" value="&quot;CREATE PROCEDURE UserDocDateValidationPROC&#xD;&#xA;&#x9;AS&#xD;&#xA;&#x9;BEGIN&#xD;&#xA;&#x9;&#x9;SET NOCOUNT ON&#x9;&#xD;&#xA;&#x9;&#x9;-- 1.&#x9;Validate CAPTURE_DATE&#xD;&#xA;&#x9;&#x9;INSERT INTO  [&quot;+ context.intermediateDB + &quot;].[dbo].VW_IMPORT_USERDOC_RESULT (userdoc_seq,userdoc_series, userdoc_nbr, ind_import, msg_import) &#xD;&#xA;&#x9;&#x9;SELECT U.userdoc_seq, U.userdoc_series, U.userdoc_nbr, 2, 'Invalid CAPTURE_DATE. CAPTURE_DATE required to be greater than 1700-01-01 and lower than the current date.' &#xD;&#xA;&#x9;&#x9;FROM  [&quot;+ context.intermediateDB + &quot;].[dbo].VW_IMPORT_USERDOC U WHERE CAPTURE_DATE > GETDATE() or CAST(DATEPART(YYYY, CAPTURE_DATE) as NUMERIC) &lt; 1700;&#x9;&#xD;&#xA;&#x9;&#x9;&#xD;&#xA;&#x9;&#x9;-- 2.&#x9;Validate FILING_DATE&#xD;&#xA;&#x9;&#x9;INSERT INTO  [&quot;+ context.intermediateDB + &quot;].[dbo].VW_IMPORT_USERDOC_RESULT (userdoc_seq,userdoc_series, userdoc_nbr, ind_import, msg_import) &#xD;&#xA;&#x9;&#x9;SELECT U.userdoc_seq, U.userdoc_series, U.userdoc_nbr, 2, 'Invalid FILING_DATE. FILING_DATE required to be greater than 1700-01-01 and lower than the current date.' &#xD;&#xA;&#x9;&#x9;FROM  [&quot;+ context.intermediateDB + &quot;].[dbo].VW_IMPORT_USERDOC U WHERE FILING_DATE > GETDATE() or CAST(DATEPART(YYYY, FILING_DATE) as NUMERIC) &lt; 1700;&#x9;&#xD;&#xA;&#x9;&#x9;&#xD;&#xA;&#x9;&#x9;-- 3.&#x9;Validate RECEPTION_DATE&#xD;&#xA;&#x9;&#x9;INSERT INTO  [&quot;+ context.intermediateDB + &quot;].[dbo].VW_IMPORT_USERDOC_RESULT (userdoc_seq,userdoc_series, userdoc_nbr, ind_import, msg_import) &#xD;&#xA;&#x9;&#x9;SELECT U.userdoc_seq, U.userdoc_series, U.userdoc_nbr, 2, 'Invalid RECEPTION_DATE. RECEPTION_DATE required to be greater than 1700-01-01 and lower than the current date.' &#xD;&#xA;&#x9;&#x9;FROM  [&quot;+ context.intermediateDB + &quot;].[dbo].VW_IMPORT_USERDOC U WHERE RECEPTION_DATE > GETDATE() or CAST(DATEPART(YYYY, RECEPTION_DATE) as NUMERIC) &lt; 1700;&#x9;&#xD;&#xA;&#x9;&#x9;&#xD;&#xA;&#x9;&#x9;&#xD;&#xA;&#x9;&#x9;-- 4.&#x9;Validate ACTION_DATE&#xD;&#xA;&#x9;&#x9;INSERT INTO  [&quot;+ context.intermediateDB + &quot;].[dbo].VW_IMPORT_USERDOC_RESULT (userdoc_seq,userdoc_series, userdoc_nbr, ind_import, msg_import) &#xD;&#xA;&#x9;&#x9;SELECT U.userdoc_seq, U.userdoc_series, U.userdoc_nbr, 2, 'Invalid ACTION_DATE. ACTION_DATE required to be greater than 1700-01-01 and lower than the current date.' &#xD;&#xA;&#x9;&#x9;FROM  [&quot;+ context.intermediateDB + &quot;].[dbo].VW_IMPORT_USERDOC_ACTIONS U WHERE ACTION_DATE > GETDATE() or CAST(DATEPART(YYYY, ACTION_DATE) as NUMERIC) &lt; 1700;&#x9;&#xD;&#xA;&#x9;&#x9;&#xD;&#xA;&#x9;&#x9;-- 5.&#x9;Validate PUBLICATION_DATE&#xD;&#xA;&#x9;--&#x9;INSERT INTO  [&quot;+ context.intermediateDB + &quot;].[dbo].VW_IMPORT_USERDOC_RESULT (userdoc_seq,userdoc_series, userdoc_nbr, ind_import, msg_import) &#xD;&#xA;&#x9;--&#x9;SELECT U.userdoc_seq, U.userdoc_series, U.userdoc_nbr, 2, 'Invalid PUBLICATION_DATE. PUBLICATION_DATE required to be greater than 1700-01-01 and lower than the current date.' &#xD;&#xA;&#x9;--&#x9;FROM  [&quot;+ context.intermediateDB + &quot;].[dbo].VW_IMPORT_USERDOC_ACTIONS U WHERE PUBLICATION_DATE > GETDATE() or CAST(DATEPART(YYYY, PUBLICATION_DATE) as NUMERIC) &lt; 1700;&#x9;&#xD;&#xA;&#x9;&#x9;&#xD;&#xA;&#x9;&#x9;-- 6.&#x9;Validate RECEIPT_DATE&#xD;&#xA;&#x9;&#x9;INSERT INTO  [&quot;+ context.intermediateDB + &quot;].[dbo].VW_IMPORT_USERDOC_RESULT (userdoc_seq,userdoc_series, userdoc_nbr, ind_import, msg_import) &#xD;&#xA;&#x9;&#x9;SELECT U.userdoc_seq, U.userdoc_series, U.userdoc_nbr, 2, 'Invalid RECEIPT_DATE. RECEIPT_DATE required to be greater than 1700-01-01 and lower than the current date.' &#xD;&#xA;&#x9;&#x9;FROM  [&quot;+ context.intermediateDB + &quot;].[dbo].VW_IMPORT_USERDOC_PAYMENTS U WHERE RECEIPT_DATE > GETDATE() or CAST(DATEPART(YYYY, RECEIPT_DATE) as NUMERIC) &lt; 1700;&#x9;&#xD;&#xA;&#x9;&#x9;&#xD;&#xA;&#x9;&#x9;-- Can be a Future Date so no check with GETDATE()&#xD;&#xA;&#x9;&#x9;-- 1.&#x9;Validate MANUAL_DUE_DATE&#xD;&#xA;&#x9;&#x9;INSERT INTO  [&quot;+ context.intermediateDB + &quot;].[dbo].VW_IMPORT_USERDOC_RESULT (userdoc_seq,userdoc_series, userdoc_nbr, ind_import, msg_import) &#xD;&#xA;&#x9;&#x9;SELECT U.userdoc_seq, U.userdoc_series, U.userdoc_nbr, 2, 'Invalid MANUAL_DUE_DATE. MANUAL_DUE_DATE required to be greater than 1700-01-01 and lower than the current date.' &#xD;&#xA;&#x9;&#x9;FROM  [&quot;+ context.intermediateDB + &quot;].[dbo].VW_IMPORT_USERDOC_ACTIONS U WHERE CAST(DATEPART(YYYY, MANUAL_DUE_DATE) as NUMERIC) &lt; 1700;&#x9;&#xD;&#xA;&#x9;&#x9;SET NOCOUNT OFF&#xD;&#xA;&#x9;END&quot;"/>
    <elementParameter field="LABEL" name="NOTE" value="This option only applies when deploying and running in the Talend Runtime" show="false"/>
    <elementParameter field="CHECK" name="SPECIFY_DATASOURCE_ALIAS" value="false" show="false"/>
    <elementParameter field="TEXT" name="DATASOURCE_ALIAS" value="&quot;&quot;" show="false"/>
    <elementParameter field="CHECK" name="DIE_ON_ERROR" value="false"/>
    <elementParameter field="TEXT" name="PROPERTIES" value="&quot;&quot;" show="false"/>
    <elementParameter field="CHECK" name="ACTIVE_DIR_AUTH" value="false" show="false"/>
    <elementParameter field="CHECK" name="PROPAGATE_RECORD_SET" value="false"/>
    <elementParameter field="COLUMN_LIST" name="RECORD_SET_COLUMN" value="" show="false"/>
    <elementParameter field="CHECK" name="USE_PREPAREDSTATEMENT" value="false"/>
    <elementParameter field="TABLE" name="SET_PREPAREDSTATEMENT_PARAMETERS" show="false"/>
    <elementParameter field="ENCODING_TYPE" name="ENCODING" value="&quot;ISO-8859-15&quot;" show="false"/>
    <elementParameter field="TECHNICAL" name="ENCODING:ENCODING_TYPE" value="ISO-8859-15"/>
    <elementParameter field="TEXT" name="COMMIT_EVERY" value="10000" show="false"/>
    <elementParameter field="TEXT" name="CONNECTION_FORMAT" value="row"/>
    <metadata connector="FLOW" name="tMSSqlRow_34"/>
    <metadata connector="REJECT" name="REJECT">
      <column defaultValue="" key="false" length="255" name="errorCode" nullable="true" precision="0" sourceType="" type="id_String" originalLength="-1" usefulColumn="true"/>
      <column defaultValue="" key="false" length="255" name="errorMessage" nullable="true" precision="0" sourceType="" type="id_String" originalLength="-1" usefulColumn="true"/>
    </metadata>
  </node>
  <node componentName="tLogRow" componentVersion="0.101" offsetLabelX="0" offsetLabelY="0" posX="544" posY="3360">
    <elementParameter field="TEXT" name="UNIQUE_NAME" value="tLogRow_35" show="false"/>
    <elementParameter field="RADIO" name="BASIC_MODE" value="false"/>
    <elementParameter field="RADIO" name="TABLE_PRINT" value="false"/>
    <elementParameter field="RADIO" name="VERTICAL" value="true"/>
    <elementParameter field="RADIO" name="PRINT_UNIQUE" value="true"/>
    <elementParameter field="RADIO" name="PRINT_LABEL" value="false"/>
    <elementParameter field="RADIO" name="PRINT_UNIQUE_LABEL" value="false"/>
    <elementParameter field="TEXT" name="FIELDSEPARATOR" value="&quot;|&quot;" show="false"/>
    <elementParameter field="CHECK" name="PRINT_HEADER" value="false" show="false"/>
    <elementParameter field="CHECK" name="PRINT_UNIQUE_NAME" value="false" show="false"/>
    <elementParameter field="CHECK" name="PRINT_COLNAMES" value="false" show="false"/>
    <elementParameter field="CHECK" name="USE_FIXED_LENGTH" value="false" show="false"/>
    <elementParameter field="TABLE" name="LENGTHS" show="false">
      <elementValue elementRef="SCHEMA_COLUMN" value="errorCode"/>
      <elementValue elementRef="LENGTH" value="10"/>
      <elementValue elementRef="SCHEMA_COLUMN" value="errorMessage"/>
      <elementValue elementRef="LENGTH" value="10"/>
    </elementParameter>
    <elementParameter field="CHECK" name="PRINT_CONTENT_WITH_LOG4J" value="true"/>
    <elementParameter field="TEXT" name="SCHEMA_OPT_NUM" value="100" show="false"/>
    <elementParameter field="TEXT" name="CONNECTION_FORMAT" value="row"/>
    <metadata connector="FLOW" name="tLogRow_35">
      <column defaultValue="" key="false" length="255" name="errorCode" nullable="true" precision="0" sourceType="" type="id_String" originalLength="-1" usefulColumn="true"/>
      <column defaultValue="" key="false" length="255" name="errorMessage" nullable="true" precision="0" sourceType="" type="id_String" originalLength="-1" usefulColumn="true"/>
    </metadata>
  </node>
  <node componentName="tLogRow" componentVersion="0.101" offsetLabelX="0" offsetLabelY="0" posX="672" posY="3360">
    <elementParameter field="TEXT" name="UNIQUE_NAME" value="tLogRow_36" show="false"/>
    <elementParameter field="RADIO" name="BASIC_MODE" value="false"/>
    <elementParameter field="RADIO" name="TABLE_PRINT" value="false"/>
    <elementParameter field="RADIO" name="VERTICAL" value="true"/>
    <elementParameter field="RADIO" name="PRINT_UNIQUE" value="true"/>
    <elementParameter field="RADIO" name="PRINT_LABEL" value="false"/>
    <elementParameter field="RADIO" name="PRINT_UNIQUE_LABEL" value="false"/>
    <elementParameter field="TEXT" name="FIELDSEPARATOR" value="&quot;|&quot;" show="false"/>
    <elementParameter field="CHECK" name="PRINT_HEADER" value="false" show="false"/>
    <elementParameter field="CHECK" name="PRINT_UNIQUE_NAME" value="false" show="false"/>
    <elementParameter field="CHECK" name="PRINT_COLNAMES" value="false" show="false"/>
    <elementParameter field="CHECK" name="USE_FIXED_LENGTH" value="false" show="false"/>
    <elementParameter field="TABLE" name="LENGTHS" show="false">
      <elementValue elementRef="SCHEMA_COLUMN" value="errorCode"/>
      <elementValue elementRef="LENGTH" value="10"/>
      <elementValue elementRef="SCHEMA_COLUMN" value="errorMessage"/>
      <elementValue elementRef="LENGTH" value="10"/>
    </elementParameter>
    <elementParameter field="CHECK" name="PRINT_CONTENT_WITH_LOG4J" value="true"/>
    <elementParameter field="TEXT" name="SCHEMA_OPT_NUM" value="100" show="false"/>
    <elementParameter field="TEXT" name="CONNECTION_FORMAT" value="row"/>
    <metadata connector="FLOW" name="tLogRow_36">
      <column defaultValue="" key="false" length="255" name="errorCode" nullable="true" precision="0" sourceType="" type="id_String" originalLength="-1" usefulColumn="true"/>
      <column defaultValue="" key="false" length="255" name="errorMessage" nullable="true" precision="0" sourceType="" type="id_String" originalLength="-1" usefulColumn="true"/>
    </metadata>
  </node>
  <node componentName="tMSSqlRow" componentVersion="0.102" offsetLabelX="0" offsetLabelY="0" posX="512" posY="3456">
    <elementParameter field="TEXT" name="UNIQUE_NAME" value="tMSSqlRow_35" show="false"/>
    <elementParameter field="CHECK" name="TSTATCATCHER_STATS" value="true"/>
    <elementParameter field="CHECK" name="USE_EXISTING_CONNECTION" value="true"/>
    <elementParameter field="COMPONENT_LIST" name="CONNECTION" value="tMSSqlConnection_4"/>
    <elementParameter field="CLOSED_LIST" name="DRIVER" value="JTDS" show="false"/>
    <elementParameter field="TEXT" name="HOST" value="&quot;&quot;" show="false"/>
    <elementParameter field="TEXT" name="PORT" value="&quot;1433&quot;" show="false"/>
    <elementParameter field="TEXT" name="DB_SCHEMA" value="&quot;&quot;" show="false"/>
    <elementParameter field="TEXT" name="DBNAME" value="&quot;&quot;" show="false"/>
    <elementParameter field="TEXT" name="TYPE" value="MSSQL" show="false"/>
    <elementParameter field="TEXT" name="USER" value="&quot;&quot;" show="false"/>
    <elementParameter field="PASSWORD" name="PASS" value="enc:system.encryption.key.v1:jN/FkwsJkVJnS5bXuZjnlShxw3mt/9yXrQel5Nps" show="false"/>
    <elementParameter field="DBTABLE" name="TABLE" value="&quot;&quot;"/>
    <elementParameter field="CHECK" name="IDENTITY_INSERT" value="false"/>
    <elementParameter field="QUERYSTORE_TYPE" name="QUERYSTORE" value="&quot;&quot;"/>
    <elementParameter field="TECHNICAL" name="QUERYSTORE:REPOSITORY_QUERYSTORE_TYPE" value="" show="false"/>
    <elementParameter field="TECHNICAL" name="QUERYSTORE:QUERYSTORE_TYPE" value="BUILT_IN"/>
    <elementParameter field="MEMO_SQL" name="QUERY" value="&quot;&#xD;&#xA;update &quot;+ context.intermediateDB + &quot;.dbo.vw_import_patent  set ind_import=null;&#xD;&#xA;update &quot;+ context.intermediateDB + &quot;.dbo.vw_import_userdoc  set ind_import=null;&#xD;&#xA;&quot;"/>
    <elementParameter field="LABEL" name="NOTE" value="This option only applies when deploying and running in the Talend Runtime" show="false"/>
    <elementParameter field="CHECK" name="SPECIFY_DATASOURCE_ALIAS" value="false" show="false"/>
    <elementParameter field="TEXT" name="DATASOURCE_ALIAS" value="&quot;&quot;" show="false"/>
    <elementParameter field="CHECK" name="DIE_ON_ERROR" value="false"/>
    <elementParameter field="TEXT" name="PROPERTIES" value="&quot;&quot;" show="false"/>
    <elementParameter field="CHECK" name="ACTIVE_DIR_AUTH" value="false" show="false"/>
    <elementParameter field="CHECK" name="PROPAGATE_RECORD_SET" value="false"/>
    <elementParameter field="COLUMN_LIST" name="RECORD_SET_COLUMN" value="" show="false"/>
    <elementParameter field="CHECK" name="USE_PREPAREDSTATEMENT" value="false"/>
    <elementParameter field="TABLE" name="SET_PREPAREDSTATEMENT_PARAMETERS" show="false"/>
    <elementParameter field="ENCODING_TYPE" name="ENCODING" value="&quot;ISO-8859-15&quot;" show="false"/>
    <elementParameter field="TECHNICAL" name="ENCODING:ENCODING_TYPE" value="ISO-8859-15"/>
    <elementParameter field="TEXT" name="COMMIT_EVERY" value="10000" show="false"/>
    <elementParameter field="TEXT" name="CONNECTION_FORMAT" value="row"/>
    <metadata connector="FLOW" name="tMSSqlRow_35"/>
    <metadata connector="REJECT" name="REJECT">
      <column defaultValue="" key="false" length="255" name="errorCode" nullable="true" precision="0" sourceType="" type="id_String" originalLength="-1" usefulColumn="true"/>
      <column defaultValue="" key="false" length="255" name="errorMessage" nullable="true" precision="0" sourceType="" type="id_String" originalLength="-1" usefulColumn="true"/>
    </metadata>
  </node>
  <node componentName="tMSSqlRow" componentVersion="0.102" offsetLabelX="0" offsetLabelY="0" posX="672" posY="1184">
    <elementParameter field="TEXT" name="UNIQUE_NAME" value="tDBRow_1" show="false"/>
    <elementParameter field="CHECK" name="USE_EXISTING_CONNECTION" value="true"/>
    <elementParameter field="COMPONENT_LIST" name="CONNECTION" value="tMSSqlConnection_4"/>
    <elementParameter field="CLOSED_LIST" name="DRIVER" value="JTDS" show="false"/>
    <elementParameter field="TEXT" name="HOST" value="&quot;&quot;" show="false"/>
    <elementParameter field="TEXT" name="PORT" value="&quot;1433&quot;" show="false"/>
    <elementParameter field="TEXT" name="DB_SCHEMA" value="&quot;&quot;" show="false"/>
    <elementParameter field="TEXT" name="DBNAME" value="&quot;&quot;" show="false"/>
    <elementParameter field="TEXT" name="TYPE" value="MSSQL" show="false"/>
    <elementParameter field="TEXT" name="USER" value="&quot;&quot;" show="false"/>
    <elementParameter field="PASSWORD" name="PASS" value="enc:system.encryption.key.v1:f/EXuWGzv8utSpw+zVdzTpH3jzA8RNqSGj8jLl9z" show="false"/>
    <elementParameter field="DBTABLE" name="TABLE" value="&quot;&quot;"/>
    <elementParameter field="CHECK" name="IDENTITY_INSERT" value="false"/>
    <elementParameter field="QUERYSTORE_TYPE" name="QUERYSTORE" value="&quot;&quot;"/>
    <elementParameter field="TECHNICAL" name="QUERYSTORE:REPOSITORY_QUERYSTORE_TYPE" value="" show="false"/>
    <elementParameter field="TECHNICAL" name="QUERYSTORE:QUERYSTORE_TYPE" value="BUILT_IN"/>
    <elementParameter field="MEMO_SQL" name="QUERY" value="&quot;If Exists ( SELECT name &#xD;&#xA;            FROM sysobjects  &#xD;&#xA;            WHERE name = 'ImportMarkValidate'&#xD;&#xA;            AND type = 'P')&#xD;&#xA;&#x9;DROP PROCEDURE ImportMarkValidate&quot;"/>
    <elementParameter field="LABEL" name="NOTE" value="This option only applies when deploying and running in the Talend Runtime" show="false"/>
    <elementParameter field="CHECK" name="SPECIFY_DATASOURCE_ALIAS" value="false" show="false"/>
    <elementParameter field="TEXT" name="DATASOURCE_ALIAS" value="&quot;&quot;" show="false"/>
    <elementParameter field="CHECK" name="DIE_ON_ERROR" value="false"/>
    <elementParameter field="TEXT" name="PROPERTIES" value="&quot;&quot;" show="false"/>
    <elementParameter field="CHECK" name="ACTIVE_DIR_AUTH" value="false" show="false"/>
    <elementParameter field="CHECK" name="PROPAGATE_RECORD_SET" value="false"/>
    <elementParameter field="COLUMN_LIST" name="RECORD_SET_COLUMN" value="" show="false"/>
    <elementParameter field="CHECK" name="USE_PREPAREDSTATEMENT" value="false"/>
    <elementParameter field="TABLE" name="SET_PREPAREDSTATEMENT_PARAMETERS" show="false"/>
    <elementParameter field="ENCODING_TYPE" name="ENCODING" value="&quot;ISO-8859-15&quot;" show="false"/>
    <elementParameter field="TECHNICAL" name="ENCODING:ENCODING_TYPE" value="ISO-8859-15"/>
    <elementParameter field="TEXT" name="COMMIT_EVERY" value="10000" show="false"/>
    <elementParameter field="TEXT" name="CONNECTION_FORMAT" value="row"/>
    <metadata connector="FLOW" name="tDBRow_1"/>
    <metadata connector="REJECT" name="REJECT">
      <column defaultValue="" key="false" length="255" name="errorCode" nullable="true" precision="0" sourceType="" type="id_String" originalLength="-1" usefulColumn="true"/>
      <column defaultValue="" key="false" length="255" name="errorMessage" nullable="true" precision="0" sourceType="" type="id_String" originalLength="-1" usefulColumn="true"/>
    </metadata>
  </node>
  <node componentName="tMSSqlRow" componentVersion="0.102" offsetLabelX="0" offsetLabelY="0" posX="800" posY="1184">
    <elementParameter field="TEXT" name="UNIQUE_NAME" value="tDBRow_2" show="false"/>
    <elementParameter field="CHECK" name="USE_EXISTING_CONNECTION" value="true"/>
    <elementParameter field="COMPONENT_LIST" name="CONNECTION" value="tMSSqlConnection_4"/>
    <elementParameter field="CLOSED_LIST" name="DRIVER" value="JTDS" show="false"/>
    <elementParameter field="TEXT" name="HOST" value="&quot;&quot;" show="false"/>
    <elementParameter field="TEXT" name="PORT" value="&quot;1433&quot;" show="false"/>
    <elementParameter field="TEXT" name="DB_SCHEMA" value="&quot;&quot;" show="false"/>
    <elementParameter field="TEXT" name="DBNAME" value="&quot;&quot;" show="false"/>
    <elementParameter field="TEXT" name="TYPE" value="MSSQL" show="false"/>
    <elementParameter field="TEXT" name="USER" value="&quot;&quot;" show="false"/>
    <elementParameter field="PASSWORD" name="PASS" value="enc:system.encryption.key.v1:dSSHE4+A3aNXR6ztY8Lm2vVnT//QKiAuK681pfRQ" show="false"/>
    <elementParameter field="DBTABLE" name="TABLE" value="&quot;&quot;"/>
    <elementParameter field="CHECK" name="IDENTITY_INSERT" value="false"/>
    <elementParameter field="QUERYSTORE_TYPE" name="QUERYSTORE" value="&quot;&quot;"/>
    <elementParameter field="TECHNICAL" name="QUERYSTORE:REPOSITORY_QUERYSTORE_TYPE" value="" show="false"/>
    <elementParameter field="TECHNICAL" name="QUERYSTORE:QUERYSTORE_TYPE" value="BUILT_IN"/>
    <elementParameter field="MEMO_SQL" name="QUERY" value="&quot;CREATE PROCEDURE ImportMarkValidate&#xD;&#xA;AS &#xD;&#xA;&#x9;BEGIN&#xD;&#xA;&#x9;&#x9;SET NOCOUNT ON&#xD;&#xA;&#x9;&#x9;&#xD;&#xA;&#x9;&#x9;/* Procedure name: ImportMarkValidate&#xD;&#xA;&#x9;&#x9;Input:  IPAS database and import tables not imported (i.e. IND_IMPORT not 1)&#xD;&#xA;&#x9;&#x9;Output: if errors, validation flag set to 2 and error messages in  [&quot;+ context.intermediateDB + &quot;].[dbo].VW_IMPORT_MARK_RESULT&#xD;&#xA;&#x9;&#x9;if OK, validation flag set to 9&#xD;&#xA;&#x9;&#x9;create or replace procedure ImportMarkValidate as&#xD;&#xA;&#x9;&#x9;*/&#xD;&#xA;&#x9;&#x9;&#xD;&#xA;&#x9;&#x9;/* flag all pending marks as to be validated */&#xD;&#xA;&#x9;&#x9;UPDATE   [&quot;+ context.intermediateDB + &quot;].[dbo].VW_import_mark   &#xD;&#xA;&#x9;&#x9;SET&#x9;ind_import = 0 &#xD;&#xA;&#x9;&#x9;WHERE  ind_import  is null&#xD;&#xA;&#x9;&#x9; OR&#x9;ind_import  not in ( 0  , 1  ) &#xD;&#xA;&#x9;&#x9;&#xD;&#xA;&#x9;&#x9;/* delete prior errors */&#xD;&#xA;&#x9;&#x9;DELETE FROM    [&quot;+ context.intermediateDB + &quot;].[dbo].VW_IMPORT_MARK_RESULT    &#xD;&#xA;&#x9;&#x9;&#xD;&#xA;&#x9;&#x9;/* 1.1.1  [&quot;+ context.intermediateDB + &quot;].[dbo].VW_IMPORT_MARK validations */&#xD;&#xA;&#x9;&#x9;/* 1.1.1.1 Codes validations */&#xD;&#xA;&#x9;&#x9;/* FILE_SEQ: if not exists in CF_FILE_SEQUENCE, insert message 'Invalid file sequence code' */&#xD;&#xA;&#x9;&#x9;INSERT INTO   [&quot;+ context.intermediateDB + &quot;].[dbo].VW_IMPORT_MARK_RESULT   &#xD;&#xA;&#x9;&#x9;&#x9;&#x9;( file_seq , &#xD;&#xA;&#x9;&#x9;&#x9;&#x9;file_type , &#xD;&#xA;&#x9;&#x9;&#x9;&#x9;file_series , &#xD;&#xA;&#x9;&#x9;&#x9;&#x9;file_nbr , &#xD;&#xA;&#x9;&#x9;&#x9;&#x9;ind_import , &#xD;&#xA;&#x9;&#x9;&#x9;&#x9;msg_import )  &#xD;&#xA;&#x9;&#x9;SELECT&#xD;&#xA;&#x9;&#x9;&#x9;&#x9; file_seq,&#xD;&#xA;&#x9;&#x9;&#x9;&#x9; file_type,&#xD;&#xA;&#x9;&#x9;&#x9;&#x9; file_series,&#xD;&#xA;&#x9;&#x9;&#x9;&#x9; file_nbr,&#xD;&#xA;&#x9;&#x9;&#x9;&#x9; 2,&#xD;&#xA;&#x9;&#x9;&#x9;&#x9; 'Invalid file sequence code'&#xD;&#xA;&#x9;&#x9;FROM   [&quot;+ context.intermediateDB + &quot;].[dbo].VW_import_mark &#xD;&#xA;&#x9;&#x9;WHERE&#x9; ind_import  = 0&#xD;&#xA;&#x9;&#x9; AND&#x9;file_seq  COLLATE DATABASE_DEFAULT not in&#xD;&#xA;&#x9;&#x9;&#x9;(&#xD;&#xA;&#x9;&#x9; &#x9;SELECT file_seq&#xD;&#xA;&#x9;&#x9;&#x9;FROM  CF_file_sequence &#xD;&#xA;&#x9;&#x9;&#x9;)&#xD;&#xA;&#x9;&#x9;&#xD;&#xA;&#x9;&#x9;/* FILE_TYPE: if not exists in CF_FILE_TYPE, insert message Invalid file type code' */&#xD;&#xA;&#x9;&#x9;INSERT INTO   [&quot;+ context.intermediateDB + &quot;].[dbo].VW_IMPORT_MARK_RESULT   &#xD;&#xA;&#x9;&#x9;&#x9;&#x9;( file_seq , &#xD;&#xA;&#x9;&#x9;&#x9;&#x9;file_type , &#xD;&#xA;&#x9;&#x9;&#x9;&#x9;file_series , &#xD;&#xA;&#x9;&#x9;&#x9;&#x9;file_nbr , &#xD;&#xA;&#x9;&#x9;&#x9;&#x9;ind_import , &#xD;&#xA;&#x9;&#x9;&#x9;&#x9;msg_import )  &#xD;&#xA;&#x9;&#x9;SELECT&#xD;&#xA;&#x9;&#x9;&#x9;&#x9; file_seq,&#xD;&#xA;&#x9;&#x9;&#x9;&#x9; file_type,&#xD;&#xA;&#x9;&#x9;&#x9;&#x9; file_series,&#xD;&#xA;&#x9;&#x9;&#x9;&#x9; file_nbr,&#xD;&#xA;&#x9;&#x9;&#x9;&#x9; 2,&#xD;&#xA;&#x9;&#x9;&#x9;&#x9; 'Invalid file type code'&#xD;&#xA;&#x9;&#x9;FROM   [&quot;+ context.intermediateDB + &quot;].[dbo].VW_import_mark &#xD;&#xA;&#x9;&#x9;WHERE&#x9; ind_import  = 0&#xD;&#xA;&#x9;&#x9; AND&#x9;file_type  not in&#xD;&#xA;&#x9;&#x9;&#x9;(&#xD;&#xA;&#x9;&#x9; &#x9;SELECT file_type&#xD;&#xA;&#x9;&#x9;&#x9;FROM  CF_file_type &#xD;&#xA;&#x9;&#x9;&#x9;)&#xD;&#xA;&#x9;&#x9;&#xD;&#xA;&#x9;&#x9;/* DOC_ORI: if not null and not exists in CF_DOC_ORIGIN, message 'Invalid document origin code' */&#xD;&#xA;&#x9;&#x9;INSERT INTO   [&quot;+ context.intermediateDB + &quot;].[dbo].VW_IMPORT_MARK_RESULT   &#xD;&#xA;&#x9;&#x9;&#x9;&#x9;( file_seq , &#xD;&#xA;&#x9;&#x9;&#x9;&#x9;file_type , &#xD;&#xA;&#x9;&#x9;&#x9;&#x9;file_series , &#xD;&#xA;&#x9;&#x9;&#x9;&#x9;file_nbr , &#xD;&#xA;&#x9;&#x9;&#x9;&#x9;ind_import , &#xD;&#xA;&#x9;&#x9;&#x9;&#x9;msg_import )  &#xD;&#xA;&#x9;&#x9;SELECT&#xD;&#xA;&#x9;&#x9;&#x9;&#x9; file_seq,&#xD;&#xA;&#x9;&#x9;&#x9;&#x9; file_type,&#xD;&#xA;&#x9;&#x9;&#x9;&#x9; file_series,&#xD;&#xA;&#x9;&#x9;&#x9;&#x9; file_nbr,&#xD;&#xA;&#x9;&#x9;&#x9;&#x9; 2,&#xD;&#xA;&#x9;&#x9;&#x9;&#x9; 'Invalid document origin code'&#xD;&#xA;&#x9;&#x9;FROM   [&quot;+ context.intermediateDB + &quot;].[dbo].VW_import_mark &#xD;&#xA;&#x9;&#x9;WHERE&#x9; ind_import  = 0&#xD;&#xA;&#x9;&#x9; AND&#x9;doc_ori  is not null&#xD;&#xA;&#x9;&#x9; AND&#x9;doc_ori  COLLATE DATABASE_DEFAULT not in&#xD;&#xA;&#x9;&#x9;&#x9;(&#xD;&#xA;&#x9;&#x9; &#x9;SELECT doc_ori&#xD;&#xA;&#x9;&#x9;&#x9;FROM  CF_DOC_ORIGIN &#xD;&#xA;&#x9;&#x9;&#x9;)&#xD;&#xA;&#x9;&#x9;&#xD;&#xA;&#x9;&#x9;/* DOC_ORI: if null and not exists config param 'MigrationCodOri' message 'Null document origin code but no 'MigrationDocOri' parameter configured' */&#xD;&#xA;&#x9;&#x9;INSERT INTO   [&quot;+ context.intermediateDB + &quot;].[dbo].VW_IMPORT_MARK_RESULT   &#xD;&#xA;&#x9;&#x9;&#x9;&#x9;( file_seq , &#xD;&#xA;&#x9;&#x9;&#x9;&#x9;file_type , &#xD;&#xA;&#x9;&#x9;&#x9;&#x9;file_series , &#xD;&#xA;&#x9;&#x9;&#x9;&#x9;file_nbr , &#xD;&#xA;&#x9;&#x9;&#x9;&#x9;ind_import , &#xD;&#xA;&#x9;&#x9;&#x9;&#x9;msg_import )  &#xD;&#xA;&#x9;&#x9;SELECT&#xD;&#xA;&#x9;&#x9;&#x9;&#x9; file_seq,&#xD;&#xA;&#x9;&#x9;&#x9;&#x9; file_type,&#xD;&#xA;&#x9;&#x9;&#x9;&#x9; file_series,&#xD;&#xA;&#x9;&#x9;&#x9;&#x9; file_nbr,&#xD;&#xA;&#x9;&#x9;&#x9;&#x9; 2,&#xD;&#xA;&#x9;&#x9;&#x9;&#x9; 'Null document origin code but no [MigrationCodOri] parameter configured'&#xD;&#xA;&#x9;&#x9;FROM   [&quot;+ context.intermediateDB + &quot;].[dbo].VW_import_mark &#xD;&#xA;&#x9;&#x9;WHERE&#x9; ind_import  = 0&#xD;&#xA;&#x9;&#x9; AND&#x9;doc_ori  is null&#xD;&#xA;&#x9;&#x9; AND&#x9;NOT   exists&#xD;&#xA;&#x9;&#x9;&#x9;(&#xD;&#xA;&#x9;&#x9; &#x9;SELECT *&#xD;&#xA;&#x9;&#x9;&#x9;FROM  CF_CONFIG_PARAM &#xD;&#xA;&#x9;&#x9;&#x9;WHERE&#x9; config_code  = 'MigrationCodOri'&#xD;&#xA;&#x9;&#x9;&#x9;)&#xD;&#xA;&#x9;&#x9;&#xD;&#xA;&#x9;&#x9;/* DOC_ORI: if null and a nul value exists for config param 'MigrationCodOri' message 'Null document origin code but no valid 'MigrationDocOri' parameter configured' */&#xD;&#xA;&#x9;&#x9;INSERT INTO   [&quot;+ context.intermediateDB + &quot;].[dbo].VW_IMPORT_MARK_RESULT   &#xD;&#xA;&#x9;&#x9;&#x9;&#x9;( file_seq , &#xD;&#xA;&#x9;&#x9;&#x9;&#x9;file_type , &#xD;&#xA;&#x9;&#x9;&#x9;&#x9;file_series , &#xD;&#xA;&#x9;&#x9;&#x9;&#x9;file_nbr , &#xD;&#xA;&#x9;&#x9;&#x9;&#x9;ind_import , &#xD;&#xA;&#x9;&#x9;&#x9;&#x9;msg_import )  &#xD;&#xA;&#x9;&#x9;SELECT&#xD;&#xA;&#x9;&#x9;&#x9;&#x9; file_seq,&#xD;&#xA;&#x9;&#x9;&#x9;&#x9; file_type,&#xD;&#xA;&#x9;&#x9;&#x9;&#x9; file_series,&#xD;&#xA;&#x9;&#x9;&#x9;&#x9; file_nbr,&#xD;&#xA;&#x9;&#x9;&#x9;&#x9; 2,&#xD;&#xA;&#x9;&#x9;&#x9;&#x9; 'Null document origin code but no valid [MigrationCodOri] parameter configured'&#xD;&#xA;&#x9;&#x9;FROM   [&quot;+ context.intermediateDB + &quot;].[dbo].VW_import_mark &#xD;&#xA;&#x9;&#x9;WHERE&#x9; ind_import  = 0&#xD;&#xA;&#x9;&#x9; AND&#x9;doc_ori  is null&#xD;&#xA;&#x9;&#x9; AND&#x9;  exists&#xD;&#xA;&#x9;&#x9;&#x9;(&#xD;&#xA;&#x9;&#x9; &#x9;SELECT *&#xD;&#xA;&#x9;&#x9;&#x9;FROM  CF_CONFIG_PARAM &#xD;&#xA;&#x9;&#x9;&#x9;WHERE&#x9; config_code  = 'MigrationCodOri'&#xD;&#xA;&#x9;&#x9;&#x9; AND&#x9;value  is null&#xD;&#xA;&#x9;&#x9;&#x9;)&#xD;&#xA;&#x9;&#x9;&#xD;&#xA;&#x9;&#x9;/* APPLICATION_TYPE: if not exists in CF_APPLICATION_TYPE, message 'Invalid application type code' */&#xD;&#xA;&#x9;&#x9;INSERT INTO   [&quot;+ context.intermediateDB + &quot;].[dbo].VW_IMPORT_MARK_RESULT   &#xD;&#xA;&#x9;&#x9;&#x9;&#x9;( file_seq , &#xD;&#xA;&#x9;&#x9;&#x9;&#x9;file_type , &#xD;&#xA;&#x9;&#x9;&#x9;&#x9;file_series , &#xD;&#xA;&#x9;&#x9;&#x9;&#x9;file_nbr , &#xD;&#xA;&#x9;&#x9;&#x9;&#x9;ind_import , &#xD;&#xA;&#x9;&#x9;&#x9;&#x9;msg_import )  &#xD;&#xA;&#x9;&#x9;SELECT&#xD;&#xA;&#x9;&#x9;&#x9;&#x9; file_seq,&#xD;&#xA;&#x9;&#x9;&#x9;&#x9; file_type,&#xD;&#xA;&#x9;&#x9;&#x9;&#x9; file_series,&#xD;&#xA;&#x9;&#x9;&#x9;&#x9; file_nbr,&#xD;&#xA;&#x9;&#x9;&#x9;&#x9; 2,&#xD;&#xA;&#x9;&#x9;&#x9;&#x9; 'Invalid application type code'&#xD;&#xA;&#x9;&#x9;FROM   [&quot;+ context.intermediateDB + &quot;].[dbo].VW_import_mark &#xD;&#xA;&#x9;&#x9;WHERE&#x9; ind_import  = 0&#xD;&#xA;&#x9;&#x9; AND&#x9;APPLICATION_TYPE COLLATE DATABASE_DEFAULT not in&#xD;&#xA;&#x9;&#x9;&#x9;(&#xD;&#xA;&#x9;&#x9; &#x9;SELECT appl_typ&#xD;&#xA;&#x9;&#x9;&#x9;FROM  CF_APPLICATION_TYPE &#xD;&#xA;&#x9;&#x9;&#x9;)&#xD;&#xA;&#x9;&#x9;&#xD;&#xA;&#x9;&#x9;/* APPLICATION_TYPE / APPLICATION_SUBTYPE: if not exists in CF_APPLICATION_SUBTYPE, message 'Invalid application type / subtype code' */&#xD;&#xA;&#x9;&#x9;INSERT INTO   [&quot;+ context.intermediateDB + &quot;].[dbo].VW_IMPORT_MARK_RESULT   &#xD;&#xA;&#x9;&#x9;&#x9;&#x9;( file_seq , &#xD;&#xA;&#x9;&#x9;&#x9;&#x9;file_type , &#xD;&#xA;&#x9;&#x9;&#x9;&#x9;file_series , &#xD;&#xA;&#x9;&#x9;&#x9;&#x9;file_nbr , &#xD;&#xA;&#x9;&#x9;&#x9;&#x9;ind_import , &#xD;&#xA;&#x9;&#x9;&#x9;&#x9;msg_import )  &#xD;&#xA;&#x9;&#x9;SELECT&#xD;&#xA;&#x9;&#x9;&#x9;&#x9; file_seq,&#xD;&#xA;&#x9;&#x9;&#x9;&#x9; file_type,&#xD;&#xA;&#x9;&#x9;&#x9;&#x9; file_series,&#xD;&#xA;&#x9;&#x9;&#x9;&#x9; file_nbr,&#xD;&#xA;&#x9;&#x9;&#x9;&#x9; 2,&#xD;&#xA;&#x9;&#x9;&#x9;&#x9; 'Invalid application type / subtype code'&#xD;&#xA;&#x9;&#x9;FROM   [&quot;+ context.intermediateDB + &quot;].[dbo].VW_import_mark &#xD;&#xA;&#x9;&#x9;WHERE&#x9; ind_import  = 0&#xD;&#xA;&#x9;&#x9; AND&#x9; NOT EXISTS&#xD;&#xA;&#x9;&#x9;&#x9;(&#xD;&#xA;&#x9;&#x9; &#x9;SELECT&#xD;&#xA;&#x9;&#x9;&#x9;&#x9;&#x9; CF_APPLICATION_SUBTYPE.appl_typ,&#xD;&#xA;&#x9;&#x9;&#x9;&#x9;&#x9; CF_APPLICATION_SUBTYPE.appl_subtyp&#xD;&#xA;&#x9;&#x9;&#x9;FROM  CF_APPLICATION_SUBTYPE &#xD;&#xA;&#x9;&#x9;&#x9;WHERE&#x9; CF_APPLICATION_SUBTYPE.appl_typ  =  [&quot;+ context.intermediateDB + &quot;].[dbo].VW_import_mark.APPLICATION_TYPE&#x9;&#x9;&#x9;COLLATE DATABASE_DEFAULT&#xD;&#xA;&#x9;&#x9;&#x9; AND&#x9;CF_APPLICATION_SUBTYPE.appl_subtyp  =  [&quot;+ context.intermediateDB + &quot;].[dbo].VW_import_mark.APPLICATION_SUBTYPE&#x9;COLLATE DATABASE_DEFAULT&#xD;&#xA;&#x9;&#x9;&#x9;)&#xD;&#xA;&#x9;&#x9;&#xD;&#xA;&#x9;&#x9;/* LAW_CODE: if not exists in CF_LAW, message 'Invalid law code' */&#xD;&#xA;&#x9;&#x9;INSERT INTO   [&quot;+ context.intermediateDB + &quot;].[dbo].VW_IMPORT_MARK_RESULT   &#xD;&#xA;&#x9;&#x9;&#x9;&#x9;( file_seq , &#xD;&#xA;&#x9;&#x9;&#x9;&#x9;file_type , &#xD;&#xA;&#x9;&#x9;&#x9;&#x9;file_series , &#xD;&#xA;&#x9;&#x9;&#x9;&#x9;file_nbr , &#xD;&#xA;&#x9;&#x9;&#x9;&#x9;ind_import , &#xD;&#xA;&#x9;&#x9;&#x9;&#x9;msg_import )  &#xD;&#xA;&#x9;&#x9;SELECT&#xD;&#xA;&#x9;&#x9;&#x9;&#x9; file_seq,&#xD;&#xA;&#x9;&#x9;&#x9;&#x9; file_type,&#xD;&#xA;&#x9;&#x9;&#x9;&#x9; file_series,&#xD;&#xA;&#x9;&#x9;&#x9;&#x9; file_nbr,&#xD;&#xA;&#x9;&#x9;&#x9;&#x9; 2,&#xD;&#xA;&#x9;&#x9;&#x9;&#x9; 'Invalid law code'&#xD;&#xA;&#x9;&#x9;FROM   [&quot;+ context.intermediateDB + &quot;].[dbo].VW_import_mark &#xD;&#xA;&#x9;&#x9;WHERE&#x9; ind_import  = 0&#xD;&#xA;&#x9;&#x9; AND&#x9;LAW_CODE  not in&#xD;&#xA;&#x9;&#x9;&#x9;(&#xD;&#xA;&#x9;&#x9; &#x9;SELECT law_code&#xD;&#xA;&#x9;&#x9;&#x9;FROM  CF_LAW &#xD;&#xA;&#x9;&#x9;&#x9;)&#xD;&#xA;&#x9;&#x9;&#xD;&#xA;&#x9;&#x9;/* Null registration: if IND_REGISTERED = 0 and any of the other registration data items is nut null/0, &#xD;&#xA;&#x9;&#x9;       message 'File not flagged as registered but some of the registration data items is not null' */&#xD;&#xA;&#xD;&#xA;&#x9;&#x9;/* Note: this control was removed in Chile&#xD;&#xA;&#x9;&#x9;INSERT INTO   [&quot;+ context.intermediateDB + &quot;].[dbo].VW_IMPORT_MARK_RESULT   &#xD;&#xA;&#x9;&#x9;&#x9;&#x9;( file_seq , &#xD;&#xA;&#x9;&#x9;&#x9;&#x9;file_type , &#xD;&#xA;&#x9;&#x9;&#x9;&#x9;file_series , &#xD;&#xA;&#x9;&#x9;&#x9;&#x9;file_nbr , &#xD;&#xA;&#x9;&#x9;&#x9;&#x9;ind_import , &#xD;&#xA;&#x9;&#x9;&#x9;&#x9;msg_import )  &#xD;&#xA;&#x9;&#x9;SELECT&#xD;&#xA;&#x9;&#x9;&#x9;&#x9; file_seq,&#xD;&#xA;&#x9;&#x9;&#x9;&#x9; file_type,&#xD;&#xA;&#x9;&#x9;&#x9;&#x9; file_series,&#xD;&#xA;&#x9;&#x9;&#x9;&#x9; file_nbr,&#xD;&#xA;&#x9;&#x9;&#x9;&#x9; 2,&#xD;&#xA;&#x9;&#x9;&#x9;&#x9; 'File not flagged as registered but some of the registration data items is not null'&#xD;&#xA;&#x9;&#x9;FROM   [&quot;+ context.intermediateDB + &quot;].[dbo].VW_import_mark &#xD;&#xA;&#x9;&#x9;WHERE&#x9; ind_import  = 0&#xD;&#xA;&#x9;&#x9; AND&#x9;IND_REGISTERED  = 0&#xD;&#xA;&#x9;&#x9; AND&#x9;(REGISTRATION_TYPE  is not null&#xD;&#xA;&#x9;&#x9; OR&#x9;(REGISTRATION_SERIES  not in ( 0  )&#xD;&#xA;&#x9;&#x9; AND&#x9;REGISTRATION_SERIES  IS NOT NULL)&#xD;&#xA;&#x9;&#x9; OR&#x9;(REGISTRATION_NBR  not in ( 0  )&#xD;&#xA;&#x9;&#x9; AND&#x9;REGISTRATION_NBR  IS NOT NULL)&#xD;&#xA;&#x9;&#x9; OR&#x9;REGISTRATION_DUP  is not null&#xD;&#xA;&#x9;&#x9; OR&#x9;REGISTRATION_DATE  is not null&#xD;&#xA;&#x9;&#x9; OR&#x9;REGISTRATION_TYPE  is not null&#xD;&#xA;&#x9;&#x9; OR&#x9;ENTITLEMENT_DATE  is not null&#xD;&#xA;&#x9;&#x9; OR&#x9;EXPIRATION_DATE  is not null)&#xD;&#xA;&#x9;&#x9;*/&#xD;&#xA;&#x9;&#x9;&#xD;&#xA;&#x9;&#x9;/* Not null registration: if IND_REGISTERED = 1 and any of the other registration data items is null/0 &#xD;&#xA;&#x9;&#x9;       (except REGISTRATION_DUP), message 'File flagged as registered but some of the registration data items is null' */&#xD;&#xA;&#x9;&#x9;INSERT INTO   [&quot;+ context.intermediateDB + &quot;].[dbo].VW_IMPORT_MARK_RESULT   &#xD;&#xA;&#x9;&#x9;&#x9;&#x9;( file_seq , &#xD;&#xA;&#x9;&#x9;&#x9;&#x9;file_type , &#xD;&#xA;&#x9;&#x9;&#x9;&#x9;file_series , &#xD;&#xA;&#x9;&#x9;&#x9;&#x9;file_nbr , &#xD;&#xA;&#x9;&#x9;&#x9;&#x9;ind_import , &#xD;&#xA;&#x9;&#x9;&#x9;&#x9;msg_import )  &#xD;&#xA;&#x9;&#x9;SELECT&#xD;&#xA;&#x9;&#x9;&#x9;&#x9; file_seq,&#xD;&#xA;&#x9;&#x9;&#x9;&#x9; file_type,&#xD;&#xA;&#x9;&#x9;&#x9;&#x9; file_series,&#xD;&#xA;&#x9;&#x9;&#x9;&#x9; file_nbr,&#xD;&#xA;&#x9;&#x9;&#x9;&#x9; 2,&#xD;&#xA;&#x9;&#x9;&#x9;&#x9; 'File flagged as registered but some of the registration data items is null'&#xD;&#xA;&#x9;&#x9;FROM   [&quot;+ context.intermediateDB + &quot;].[dbo].VW_import_mark &#xD;&#xA;&#x9;&#x9;WHERE&#x9; ind_import  = 0&#xD;&#xA;&#x9;&#x9; AND&#x9;IND_REGISTERED  = 1&#xD;&#xA;&#x9;&#x9; AND&#x9;(REGISTRATION_TYPE  is null&#xD;&#xA;&#x9;&#x9; OR&#x9;(REGISTRATION_SERIES  in ( 0  )&#xD;&#xA;&#x9;&#x9; OR&#x9;REGISTRATION_SERIES  IS NULL)&#xD;&#xA;&#x9;&#x9; OR&#x9;(REGISTRATION_NBR  in ( 0  )&#xD;&#xA;&#x9;&#x9; OR&#x9;REGISTRATION_NBR  IS NULL)&#xD;&#xA;&#x9;&#x9; OR&#x9;REGISTRATION_DATE  is null&#xD;&#xA;&#x9;&#x9; OR&#x9;REGISTRATION_TYPE  is null&#xD;&#xA;&#x9;&#x9; OR&#x9;ENTITLEMENT_DATE  is null&#xD;&#xA;&#x9;&#x9; OR&#x9;EXPIRATION_DATE  is null)&#xD;&#xA;&#x9;&#x9;&#xD;&#xA;&#x9;&#x9;/* EXPIRATION_DATE: if less than ENTITLEMENT_DATE, message 'Expiration date is less then entitlement date' */&#xD;&#xA;&#x9;&#x9;INSERT INTO   [&quot;+ context.intermediateDB + &quot;].[dbo].VW_IMPORT_MARK_RESULT   &#xD;&#xA;&#x9;&#x9;&#x9;&#x9;( file_seq , &#xD;&#xA;&#x9;&#x9;&#x9;&#x9;file_type , &#xD;&#xA;&#x9;&#x9;&#x9;&#x9;file_series , &#xD;&#xA;&#x9;&#x9;&#x9;&#x9;file_nbr , &#xD;&#xA;&#x9;&#x9;&#x9;&#x9;ind_import , &#xD;&#xA;&#x9;&#x9;&#x9;&#x9;msg_import )  &#xD;&#xA;&#x9;&#x9;SELECT&#xD;&#xA;&#x9;&#x9;&#x9;&#x9; file_seq,&#xD;&#xA;&#x9;&#x9;&#x9;&#x9; file_type,&#xD;&#xA;&#x9;&#x9;&#x9;&#x9; file_series,&#xD;&#xA;&#x9;&#x9;&#x9;&#x9; file_nbr,&#xD;&#xA;&#x9;&#x9;&#x9;&#x9; 2,&#xD;&#xA;&#x9;&#x9;&#x9;&#x9; 'Expiration date is less then entitlement date'&#xD;&#xA;&#x9;&#x9;FROM   [&quot;+ context.intermediateDB + &quot;].[dbo].VW_import_mark &#xD;&#xA;&#x9;&#x9;WHERE&#x9; ind_import  = 0&#xD;&#xA;&#x9;&#x9; AND&#x9;IND_REGISTERED  = 1&#xD;&#xA;&#x9;&#x9; AND&#x9;EXPIRATION_DATE  &lt; ENTITLEMENT_DATE&#xD;&#xA;&#x9;&#x9;&#xD;&#xA;&#x9;&#x9;/* SIGN_TYPE: if not in N / L / B / T / S / O, message 'Invalid sign type, possible values are &#xD;&#xA;&#x9;&#x9;       N = name only, L = logo only, B = both name and logo, T = tridimensional, S = sound, O = olfative' */&#xD;&#xA;&#x9;&#x9;INSERT INTO   [&quot;+ context.intermediateDB + &quot;].[dbo].VW_IMPORT_MARK_RESULT   &#xD;&#xA;&#x9;&#x9;&#x9;&#x9;( file_seq , &#xD;&#xA;&#x9;&#x9;&#x9;&#x9;file_type , &#xD;&#xA;&#x9;&#x9;&#x9;&#x9;file_series , &#xD;&#xA;&#x9;&#x9;&#x9;&#x9;file_nbr , &#xD;&#xA;&#x9;&#x9;&#x9;&#x9;ind_import , &#xD;&#xA;&#x9;&#x9;&#x9;&#x9;msg_import )  &#xD;&#xA;&#x9;&#x9;SELECT&#xD;&#xA;&#x9;&#x9;&#x9;&#x9; file_seq,&#xD;&#xA;&#x9;&#x9;&#x9;&#x9; file_type,&#xD;&#xA;&#x9;&#x9;&#x9;&#x9; file_series,&#xD;&#xA;&#x9;&#x9;&#x9;&#x9; file_nbr,&#xD;&#xA;&#x9;&#x9;&#x9;&#x9; 2,&#xD;&#xA;&#x9;&#x9;&#x9;&#x9; 'Invalid sign type, possible values are N = name only, L = logo only, B = both name and logo, T = tridimensional, S = sound, O = olfative'&#xD;&#xA;&#x9;&#x9;FROM   [&quot;+ context.intermediateDB + &quot;].[dbo].VW_import_mark &#xD;&#xA;&#x9;&#x9;WHERE&#x9; ind_import  = 0&#xD;&#xA;&#x9;&#x9; AND&#x9;SIGN_TYPE  not in ( 'N'  , 'L'  , 'B'  , 'T'  , 'S'  , 'O'  )&#xD;&#xA;&#x9;&#x9;&#xD;&#xA;&#x9;&#x9;/* CAPTURE_USER_ID: if not exists in IP_USER, message 'Invalid capture user code' */&#xD;&#xA;&#x9;&#x9;INSERT INTO   [&quot;+ context.intermediateDB + &quot;].[dbo].VW_IMPORT_MARK_RESULT   &#xD;&#xA;&#x9;&#x9;&#x9;&#x9;( file_seq , &#xD;&#xA;&#x9;&#x9;&#x9;&#x9;file_type , &#xD;&#xA;&#x9;&#x9;&#x9;&#x9;file_series , &#xD;&#xA;&#x9;&#x9;&#x9;&#x9;file_nbr , &#xD;&#xA;&#x9;&#x9;&#x9;&#x9;ind_import , &#xD;&#xA;&#x9;&#x9;&#x9;&#x9;msg_import )  &#xD;&#xA;&#x9;&#x9;SELECT&#xD;&#xA;&#x9;&#x9;&#x9;&#x9; file_seq,&#xD;&#xA;&#x9;&#x9;&#x9;&#x9; file_type,&#xD;&#xA;&#x9;&#x9;&#x9;&#x9; file_series,&#xD;&#xA;&#x9;&#x9;&#x9;&#x9; file_nbr,&#xD;&#xA;&#x9;&#x9;&#x9;&#x9; 2,&#xD;&#xA;&#x9;&#x9;&#x9;&#x9; 'Invalid capture user code'&#xD;&#xA;&#x9;&#x9;FROM   [&quot;+ context.intermediateDB + &quot;].[dbo].VW_import_mark &#xD;&#xA;&#x9;&#x9;WHERE&#x9; ind_import  = 0&#xD;&#xA;&#x9;&#x9; AND&#x9;CAPTURE_USER_ID  is not null&#xD;&#xA;&#x9;&#x9; AND&#x9;CAPTURE_USER_ID  not in&#xD;&#xA;&#x9;&#x9;&#x9;(&#xD;&#xA;&#x9;&#x9; &#x9;SELECT user_id&#xD;&#xA;&#x9;&#x9;&#x9;FROM  IP_USER &#xD;&#xA;&#x9;&#x9;&#x9;)&#xD;&#xA;&#x9;&#x9;&#xD;&#xA;&#x9;&#x9;/* 1.1.1.2 Duplicate keys validations */&#xD;&#xA;&#x9;&#x9;/* If FILE_SEQ / FILE_TYPE / FILE_SERIES / FILE_NBR already exists in IP_FILE, &#xD;&#xA;&#x9;&#x9;       insert message 'File sequence / type / series / number already exists in the database' */&#xD;&#xA;&#x9;&#x9;INSERT INTO   [&quot;+ context.intermediateDB + &quot;].[dbo].VW_IMPORT_MARK_RESULT   &#xD;&#xA;&#x9;&#x9;&#x9;&#x9;( file_seq , &#xD;&#xA;&#x9;&#x9;&#x9;&#x9;file_type , &#xD;&#xA;&#x9;&#x9;&#x9;&#x9;file_series , &#xD;&#xA;&#x9;&#x9;&#x9;&#x9;file_nbr , &#xD;&#xA;&#x9;&#x9;&#x9;&#x9;ind_import , &#xD;&#xA;&#x9;&#x9;&#x9;&#x9;msg_import )  &#xD;&#xA;&#x9;&#x9;SELECT&#xD;&#xA;&#x9;&#x9;&#x9;&#x9; file_seq,&#xD;&#xA;&#x9;&#x9;&#x9;&#x9; file_type,&#xD;&#xA;&#x9;&#x9;&#x9;&#x9; file_series,&#xD;&#xA;&#x9;&#x9;&#x9;&#x9; file_nbr,&#xD;&#xA;&#x9;&#x9;&#x9;&#x9; 2,&#xD;&#xA;&#x9;&#x9;&#x9;&#x9; 'File sequence / type / series / number already exists in the database'&#xD;&#xA;&#x9;&#x9;FROM   [&quot;+ context.intermediateDB + &quot;].[dbo].VW_import_mark  M&#xD;&#xA;&#x9;&#x9;WHERE&#x9;ind_import  = 0&#xD;&#xA;&#x9;&#x9; AND&#x9;EXISTS &#xD;&#xA;&#x9;&#x9;&#x9;&#x9;(SELECT * &#xD;&#xA;&#x9;&#x9;&#x9;&#x9; FROM&#x9;IP_FILE F&#xD;&#xA;&#x9;&#x9;&#x9;&#x9; WHERE&#x9;F.FILE_SEQ&#x9;= M.FILE_SEQ&#x9;COLLATE DATABASE_DEFAULT&#xD;&#xA;&#x9;&#x9;&#x9;&#x9;  AND&#x9;F.FILE_TYP&#x9;= M.FILE_TYPE&#x9;COLLATE DATABASE_DEFAULT&#xD;&#xA;&#x9;&#x9;&#x9;&#x9;  AND&#x9;F.FILE_SER&#x9;= M.FILE_SERIES&#xD;&#xA;&#x9;&#x9;&#x9;&#x9;  AND&#x9;F.FILE_NBR&#x9;= M.FILE_NBR&#xD;&#xA;&#x9;&#x9;&#x9;&#x9;)&#xD;&#xA;&#x9;&#x9;&#xD;&#xA;&#x9;&#x9;/* If DOC_NBR is not null and DOC_ORI / DOC_SERIES / DOC_NBR already exists in IP_DOC, &#xD;&#xA;&#x9;&#x9;       insert message 'Document origin / series / number already exists in the database' */&#xD;&#xA;&#x9;&#x9;INSERT INTO   [&quot;+ context.intermediateDB + &quot;].[dbo].VW_IMPORT_MARK_RESULT   &#xD;&#xA;&#x9;&#x9;&#x9;&#x9;( file_seq , &#xD;&#xA;&#x9;&#x9;&#x9;&#x9;file_type , &#xD;&#xA;&#x9;&#x9;&#x9;&#x9;file_series , &#xD;&#xA;&#x9;&#x9;&#x9;&#x9;file_nbr , &#xD;&#xA;&#x9;&#x9;&#x9;&#x9;ind_import , &#xD;&#xA;&#x9;&#x9;&#x9;&#x9;msg_import )  &#xD;&#xA;&#x9;&#x9;SELECT&#xD;&#xA;&#x9;&#x9;&#x9;&#x9; file_seq,&#xD;&#xA;&#x9;&#x9;&#x9;&#x9; file_type,&#xD;&#xA;&#x9;&#x9;&#x9;&#x9; file_series,&#xD;&#xA;&#x9;&#x9;&#x9;&#x9; file_nbr,&#xD;&#xA;&#x9;&#x9;&#x9;&#x9; 2,&#xD;&#xA;&#x9;&#x9;&#x9;&#x9; 'Document origin / series / number already exists in the database'&#xD;&#xA;&#x9;&#x9;FROM   [&quot;+ context.intermediateDB + &quot;].[dbo].VW_import_mark &#xD;&#xA;&#x9;&#x9;WHERE&#x9; ind_import  = 0&#xD;&#xA;&#x9;&#x9; AND&#x9;DOC_NBR  is not null&#xD;&#xA;&#x9;&#x9; AND&#x9;DOC_ORI  COLLATE DATABASE_DEFAULT IN&#xD;&#xA;&#x9;&#x9;&#x9;(&#xD;&#xA;&#x9;&#x9; &#x9;SELECT doc_ori&#xD;&#xA;&#x9;&#x9;&#x9;FROM  IP_DOC &#xD;&#xA;&#x9;&#x9;&#x9;)&#xD;&#xA;&#x9;&#x9; AND&#x9;'E'  IN&#xD;&#xA;&#x9;&#x9;&#x9;(&#xD;&#xA;&#x9;&#x9; &#x9;SELECT doc_log&#xD;&#xA;&#x9;&#x9;&#x9;FROM  IP_DOC &#xD;&#xA;&#x9;&#x9;&#x9;)&#xD;&#xA;&#x9;&#x9; AND&#x9;DOC_SERIES  IN&#xD;&#xA;&#x9;&#x9;&#x9;(&#xD;&#xA;&#x9;&#x9; &#x9;SELECT doc_ser&#xD;&#xA;&#x9;&#x9;&#x9;FROM  IP_DOC &#xD;&#xA;&#x9;&#x9;&#x9;)&#xD;&#xA;&#x9;&#x9; AND&#x9;DOC_NBR  IN&#xD;&#xA;&#x9;&#x9;&#x9;(&#xD;&#xA;&#x9;&#x9; &#x9;SELECT doc_nbr&#xD;&#xA;&#x9;&#x9;&#x9;FROM  IP_DOC &#xD;&#xA;&#x9;&#x9;&#x9;)&#xD;&#xA;&#x9;&#x9;&#xD;&#xA;&#x9;&#x9;/* If DOC_NBR is not null and DOC_ORI / DOC_SERIES / DOC_NBR is repeated in  [&quot;+ context.intermediateDB + &quot;].[dbo].VW_IMPORT_MARK,&#xD;&#xA;&#x9;&#x9;insert message 'Document origin / series / number duplicated in intermediate table' */&#xD;&#xA;&#x9;&#x9;/* Generate work table with repeated DOC_ORI / DOC_SERIES / DOC_NBR */&#xD;&#xA;&#x9;&#x9;&#xD;&#xA;&#x9;&#x9;&#xD;&#xA;&#x9;&#x9;DECLARE @EXEC_IMMEDIATE_VAR VARCHAR (4000)&#xD;&#xA;&#x9;&#x9;SELECT @EXEC_IMMEDIATE_VAR  = 'TRUNCATE TABLE wrk_doc_key' &#xD;&#xA;&#xD;&#xA;&#x9;&#x9;EXECUTE (@EXEC_IMMEDIATE_VAR)&#xD;&#xA;&#x9;&#x9;INSERT INTO  wrk_doc_key    &#xD;&#xA;&#x9;&#x9;SELECT&#xD;&#xA;&#x9;&#x9;&#x9;&#x9; DOC_ORI,&#xD;&#xA;&#x9;&#x9;&#x9;&#x9; DOC_SERIES,&#xD;&#xA;&#x9;&#x9;&#x9;&#x9; DOC_NBR&#xD;&#xA;&#x9;&#x9;FROM   [&quot;+ context.intermediateDB + &quot;].[dbo].VW_IMPORT_MARK &#xD;&#xA;&#x9;&#x9;WHERE&#x9; DOC_NBR  is not null&#xD;&#xA;&#x9;&#x9;GROUP BY DOC_ORI,&#xD;&#xA;&#x9;&#x9;&#x9; DOC_SERIES,&#xD;&#xA;&#x9;&#x9;&#x9;  DOC_NBR &#xD;&#xA;&#x9;&#x9;HAVING COUNT(*)  > 1  &#xD;&#xA;&#x9;&#x9;&#xD;&#xA;&#x9;&#x9;INSERT INTO   [&quot;+ context.intermediateDB + &quot;].[dbo].VW_IMPORT_MARK_RESULT   &#xD;&#xA;&#x9;&#x9;&#x9;&#x9;( file_seq , &#xD;&#xA;&#x9;&#x9;&#x9;&#x9;file_type , &#xD;&#xA;&#x9;&#x9;&#x9;&#x9;file_series , &#xD;&#xA;&#x9;&#x9;&#x9;&#x9;file_nbr , &#xD;&#xA;&#x9;&#x9;&#x9;&#x9;ind_import , &#xD;&#xA;&#x9;&#x9;&#x9;&#x9;msg_import )  &#xD;&#xA;&#x9;&#x9;SELECT&#xD;&#xA;&#x9;&#x9;&#x9;&#x9; file_seq,&#xD;&#xA;&#x9;&#x9;&#x9;&#x9; file_type,&#xD;&#xA;&#x9;&#x9;&#x9;&#x9; file_series,&#xD;&#xA;&#x9;&#x9;&#x9;&#x9; file_nbr,&#xD;&#xA;&#x9;&#x9;&#x9;&#x9; 2,&#xD;&#xA;&#x9;&#x9;&#x9;&#x9; 'Document origin / series / number duplicated in intermediate table'&#xD;&#xA;&#x9;&#x9;FROM   [&quot;+ context.intermediateDB + &quot;].[dbo].VW_import_mark &#xD;&#xA;&#x9;&#x9;WHERE&#x9; ind_import  = 0&#xD;&#xA;&#x9;&#x9; AND&#x9;DOC_NBR  is not null&#xD;&#xA;&#x9;&#x9; AND&#x9;DOC_ORI  IN&#xD;&#xA;&#x9;&#x9;&#x9;(&#xD;&#xA;&#x9;&#x9; &#x9;SELECT doc_ori&#xD;&#xA;&#x9;&#x9;&#x9;FROM  wrk_doc_key &#xD;&#xA;&#x9;&#x9;&#x9;)&#xD;&#xA;&#x9;&#x9; AND&#x9;DOC_SERIES  IN&#xD;&#xA;&#x9;&#x9;&#x9;(&#xD;&#xA;&#x9;&#x9; &#x9;SELECT doc_series&#xD;&#xA;&#x9;&#x9;&#x9;FROM  wrk_doc_key &#xD;&#xA;&#x9;&#x9;&#x9;)&#xD;&#xA;&#x9;&#x9; AND&#x9;DOC_NBR  IN&#xD;&#xA;&#x9;&#x9;&#x9;(&#xD;&#xA;&#x9;&#x9; &#x9;SELECT doc_nbr&#xD;&#xA;&#x9;&#x9;&#x9;FROM  wrk_doc_key &#xD;&#xA;&#x9;&#x9;&#x9;)&#xD;&#xA;&#x9;&#x9;&#xD;&#xA;&#x9;&#x9;/* If IND_REGISTERED = 1 and REGISTRATION_TYPE / REGISTRATION_SERIES / REGISTRATION_NBR / REGISTRATION_DUP &#xD;&#xA;&#x9;&#x9;       already exists in IP_FILE, insert message 'Registration type / series / number / duplicate already exists in the database' */&#xD;&#xA;&#x9;&#x9;INSERT INTO   [&quot;+ context.intermediateDB + &quot;].[dbo].VW_IMPORT_MARK_RESULT   &#xD;&#xA;&#x9;&#x9;&#x9;&#x9;( file_seq , &#xD;&#xA;&#x9;&#x9;&#x9;&#x9;file_type , &#xD;&#xA;&#x9;&#x9;&#x9;&#x9;file_series , &#xD;&#xA;&#x9;&#x9;&#x9;&#x9;file_nbr , &#xD;&#xA;&#x9;&#x9;&#x9;&#x9;ind_import , &#xD;&#xA;&#x9;&#x9;&#x9;&#x9;msg_import )  &#xD;&#xA;&#x9;&#x9;SELECT&#xD;&#xA;&#x9;&#x9;&#x9;&#x9; file_seq,&#xD;&#xA;&#x9;&#x9;&#x9;&#x9; file_type,&#xD;&#xA;&#x9;&#x9;&#x9;&#x9; file_series,&#xD;&#xA;&#x9;&#x9;&#x9;&#x9; file_nbr,&#xD;&#xA;&#x9;&#x9;&#x9;&#x9; 2,&#xD;&#xA;&#x9;&#x9;&#x9;&#x9; 'Registration type / series / number / duplicate already exists in the database'&#xD;&#xA;&#x9;&#x9;FROM   [&quot;+ context.intermediateDB + &quot;].[dbo].VW_import_mark M&#xD;&#xA;&#x9;&#x9;WHERE&#x9; ind_import  = 0&#xD;&#xA;&#x9;&#x9; AND&#x9;IND_REGISTERED  = 1&#xD;&#xA;&#x9;&#x9; AND&#x9;EXISTS&#xD;&#xA;&#x9;&#x9;&#x9;&#x9;(SELECT&#x9;*&#xD;&#xA;&#x9;&#x9;&#x9;&#x9; FROM&#x9;IP_FILE F&#xD;&#xA;&#x9;&#x9;&#x9;&#x9; WHERE&#x9;F.registration_typ&#x9;= M.registration_type&#x9;COLLATE DATABASE_DEFAULT&#xD;&#xA;&#x9;&#x9;&#x9;&#x9;  AND&#x9;F.registration_ser&#x9;= M.registration_series&#xD;&#xA;&#x9;&#x9;&#x9;&#x9;  AND&#x9;F.registration_nbr&#x9;= M.registration_nbr&#xD;&#xA;&#x9;&#x9;&#x9;&#x9;  AND&#x9;F.registration_dup&#x9;= M.registration_dup&#x9;COLLATE DATABASE_DEFAULT&#xD;&#xA;&#x9;&#x9;&#x9;&#x9;)&#xD;&#xA;&#x9;&#x9;&#xD;&#xA;&#x9;&#x9;/* 1.1.1.3 Sign validations */&#xD;&#xA;&#x9;&#x9;/* If SIGN_TYPE is N or B, and MARK_NAME is null, message 'Mark name is required' */&#xD;&#xA;&#x9;&#x9;INSERT INTO   [&quot;+ context.intermediateDB + &quot;].[dbo].VW_IMPORT_MARK_RESULT   &#xD;&#xA;&#x9;&#x9;&#x9;&#x9;( file_seq , &#xD;&#xA;&#x9;&#x9;&#x9;&#x9;file_type , &#xD;&#xA;&#x9;&#x9;&#x9;&#x9;file_series , &#xD;&#xA;&#x9;&#x9;&#x9;&#x9;file_nbr , &#xD;&#xA;&#x9;&#x9;&#x9;&#x9;ind_import , &#xD;&#xA;&#x9;&#x9;&#x9;&#x9;msg_import )  &#xD;&#xA;&#x9;&#x9;SELECT&#xD;&#xA;&#x9;&#x9;&#x9;&#x9; file_seq,&#xD;&#xA;&#x9;&#x9;&#x9;&#x9; file_type,&#xD;&#xA;&#x9;&#x9;&#x9;&#x9; file_series,&#xD;&#xA;&#x9;&#x9;&#x9;&#x9; file_nbr,&#xD;&#xA;&#x9;&#x9;&#x9;&#x9; 2,&#xD;&#xA;&#x9;&#x9;&#x9;&#x9; 'Mark name is required'&#xD;&#xA;&#x9;&#x9;FROM   [&quot;+ context.intermediateDB + &quot;].[dbo].VW_import_mark &#xD;&#xA;&#x9;&#x9;WHERE&#x9; ind_import  = 0&#xD;&#xA;&#x9;&#x9; AND&#x9;SIGN_TYPE  in ( 'N'  , 'B'  )&#xD;&#xA;&#x9;&#x9; AND&#x9;MARK_NAME  is null&#xD;&#xA;&#x9;&#x9;&#xD;&#xA;&#x9;&#x9;/* 1.1.2  [&quot;+ context.intermediateDB + &quot;].[dbo].VW_IMPORT_MARK_OWNERS validations */&#xD;&#xA;&#x9;&#x9;/* 1.1.2.1 Owner validations */&#xD;&#xA;&#x9;&#x9;/* Generate work table with FILE_SEQ, FILE_TYPE, FILE_SERIES, FILE_NBR, IND_SERVICE and COUNT(*) */&#xD;&#xA;&#x9;&#x9;DELETE FROM   wrk_file_service_count    &#xD;&#xA;&#x9;&#x9;&#xD;&#xA;&#x9;&#x9;INSERT INTO  wrk_file_service_count    &#xD;&#xA;&#x9;&#x9;SELECT&#xD;&#xA;&#x9;&#x9;&#x9;&#x9; FILE_SEQ,&#xD;&#xA;&#x9;&#x9;&#x9;&#x9; FILE_TYPE,&#xD;&#xA;&#x9;&#x9;&#x9;&#x9; FILE_SERIES,&#xD;&#xA;&#x9;&#x9;&#x9;&#x9; FILE_NBR,&#xD;&#xA;&#x9;&#x9;&#x9;&#x9; IND_SERVICE,&#xD;&#xA;&#x9;&#x9;&#x9;&#x9; COUNT(*) count1&#xD;&#xA;&#x9;&#x9;FROM   [&quot;+ context.intermediateDB + &quot;].[dbo].VW_IMPORT_MARK_OWNERS &#xD;&#xA;&#x9;&#x9;GROUP BY FILE_SEQ,&#xD;&#xA;&#x9;&#x9;&#x9; FILE_TYPE,&#xD;&#xA;&#x9;&#x9;&#x9; FILE_SERIES,&#xD;&#xA;&#x9;&#x9;&#x9; FILE_NBR,&#xD;&#xA;&#x9;&#x9;&#x9;  IND_SERVICE &#xD;&#xA;&#x9;&#x9;&#xD;&#xA;&#x9;&#x9;/* No service address: where not exists corresponding tuple in the work table with IND_SERVICE = 1, &#xD;&#xA;&#x9;&#x9;       message 'No owner flagged as service address' */&#xD;&#xA;&#x9;&#x9;INSERT INTO   [&quot;+ context.intermediateDB + &quot;].[dbo].VW_IMPORT_MARK_RESULT   &#xD;&#xA;&#x9;&#x9;&#x9;&#x9;( file_seq , &#xD;&#xA;&#x9;&#x9;&#x9;&#x9;file_type , &#xD;&#xA;&#x9;&#x9;&#x9;&#x9;file_series , &#xD;&#xA;&#x9;&#x9;&#x9;&#x9;file_nbr , &#xD;&#xA;&#x9;&#x9;&#x9;&#x9;ind_import , &#xD;&#xA;&#x9;&#x9;&#x9;&#x9;msg_import )  &#xD;&#xA;&#x9;&#x9;SELECT&#xD;&#xA;&#x9;&#x9;&#x9;&#x9; file_seq,&#xD;&#xA;&#x9;&#x9;&#x9;&#x9; file_type,&#xD;&#xA;&#x9;&#x9;&#x9;&#x9; file_series,&#xD;&#xA;&#x9;&#x9;&#x9;&#x9; file_nbr,&#xD;&#xA;&#x9;&#x9;&#x9;&#x9; 2,&#xD;&#xA;&#x9;&#x9;&#x9;&#x9; 'No owner flagged as service address'&#xD;&#xA;&#x9;&#x9;FROM   [&quot;+ context.intermediateDB + &quot;].[dbo].VW_import_mark M &#xD;&#xA;&#x9;&#x9;WHERE&#x9; ind_import  = 0&#xD;&#xA;&#x9;&#x9; AND&#x9;NOT   exists&#xD;&#xA;&#x9;&#x9;&#x9;(&#xD;&#xA;&#x9;&#x9; &#x9;SELECT *&#xD;&#xA;&#x9;&#x9;&#x9;FROM  wrk_file_service_count W &#xD;&#xA;&#x9;&#x9;&#x9;WHERE&#x9; M.file_seq  = W.file_seq&#xD;&#xA;&#x9;&#x9;&#x9; AND&#x9;M.file_type  = W.file_type&#xD;&#xA;&#x9;&#x9;&#x9; AND&#x9;M.file_series  = W.file_series&#xD;&#xA;&#x9;&#x9;&#x9; AND&#x9;M.file_nbr  = W.file_nbr&#xD;&#xA;&#x9;&#x9;&#x9; AND&#x9;ind_service  = 1&#xD;&#xA;&#x9;&#x9;&#x9;)&#xD;&#xA;&#x9;&#x9;&#xD;&#xA;&#x9;&#x9;/* Several service addresses: where exists corresponding tuple in the work table with &#xD;&#xA;&#x9;&#x9;      IND_SERVICE = 1 and with count column > 1, message 'Several owners flagged as service addresses' */&#xD;&#xA;&#x9;&#x9;INSERT INTO   [&quot;+ context.intermediateDB + &quot;].[dbo].VW_IMPORT_MARK_RESULT   &#xD;&#xA;&#x9;&#x9;&#x9;&#x9;( file_seq , &#xD;&#xA;&#x9;&#x9;&#x9;&#x9;file_type , &#xD;&#xA;&#x9;&#x9;&#x9;&#x9;file_series , &#xD;&#xA;&#x9;&#x9;&#x9;&#x9;file_nbr , &#xD;&#xA;&#x9;&#x9;&#x9;&#x9;ind_import , &#xD;&#xA;&#x9;&#x9;&#x9;&#x9;msg_import )  &#xD;&#xA;&#x9;&#x9;SELECT&#xD;&#xA;&#x9;&#x9;&#x9;&#x9; M.file_seq,&#xD;&#xA;&#x9;&#x9;&#x9;&#x9; M.file_type,&#xD;&#xA;&#x9;&#x9;&#x9;&#x9; M.file_series,&#xD;&#xA;&#x9;&#x9;&#x9;&#x9; M.file_nbr,&#xD;&#xA;&#x9;&#x9;&#x9;&#x9; 2,&#xD;&#xA;&#x9;&#x9;&#x9;&#x9; 'Several owners flagged as service addresses'&#xD;&#xA;&#x9;&#x9;FROM   [&quot;+ context.intermediateDB + &quot;].[dbo].VW_import_mark M JOIN wrk_file_service_count W ON M.file_seq  = W.file_seq&#xD;&#xA;&#x9;&#x9;&#x9; AND&#x9;M.file_type  = W.file_type&#xD;&#xA;&#x9;&#x9;&#x9; AND&#x9;M.file_series  = W.file_series&#xD;&#xA;&#x9;&#x9;&#x9; AND&#x9;M.file_nbr  = W.file_nbr  &#xD;&#xA;&#x9;&#x9;WHERE&#x9; ind_import  = 0&#xD;&#xA;&#x9;&#x9; AND&#x9;ind_service  = 1&#xD;&#xA;&#x9;&#x9; AND&#x9;count1  > 1&#xD;&#xA;&#x9;&#x9;&#xD;&#xA;&#x9;&#x9;/* 1.1.2.2 Person validations */&#xD;&#xA;&#x9;&#x9;/* NATIONALITY_COUNTRY_CODE: if not exists in CF_GEO_COUNTRY, message 'Invalid owner nationality country code' */&#xD;&#xA;&#x9;&#x9;INSERT INTO   [&quot;+ context.intermediateDB + &quot;].[dbo].VW_IMPORT_MARK_RESULT   &#xD;&#xA;&#x9;&#x9;&#x9;&#x9;( file_seq , &#xD;&#xA;&#x9;&#x9;&#x9;&#x9;file_type , &#xD;&#xA;&#x9;&#x9;&#x9;&#x9;file_series , &#xD;&#xA;&#x9;&#x9;&#x9;&#x9;file_nbr , &#xD;&#xA;&#x9;&#x9;&#x9;&#x9;ind_import , &#xD;&#xA;&#x9;&#x9;&#x9;&#x9;msg_import )  &#xD;&#xA;&#x9;&#x9;SELECT&#xD;&#xA;&#x9;&#x9;&#x9;&#x9; T.file_seq,&#xD;&#xA;&#x9;&#x9;&#x9;&#x9; T.file_type,&#xD;&#xA;&#x9;&#x9;&#x9;&#x9; T.file_series,&#xD;&#xA;&#x9;&#x9;&#x9;&#x9; T.file_nbr,&#xD;&#xA;&#x9;&#x9;&#x9;&#x9; 2,&#xD;&#xA;&#x9;&#x9;&#x9;&#x9; 'Invalid owner nationality country code'&#xD;&#xA;&#x9;&#x9;FROM   [&quot;+ context.intermediateDB + &quot;].[dbo].VW_import_mark_owners T JOIN  [&quot;+ context.intermediateDB + &quot;].[dbo].VW_import_mark M ON T.file_seq  = M.file_seq&#xD;&#xA;&#x9;&#x9;&#x9; AND&#x9;T.file_type  = M.file_type&#xD;&#xA;&#x9;&#x9;&#x9; AND&#x9;T.file_series  = M.file_series&#xD;&#xA;&#x9;&#x9;&#x9; AND&#x9;T.file_nbr  = M.file_nbr  &#xD;&#xA;&#x9;&#x9;WHERE&#x9; ind_import  = 0&#xD;&#xA;&#x9;&#x9; AND&#x9;NATIONALITY_COUNTRY_CODE COLLATE DATABASE_DEFAULT not in&#xD;&#xA;&#x9;&#x9;&#x9;(&#xD;&#xA;&#x9;&#x9; &#x9;SELECT COUNTRY_CODE&#xD;&#xA;&#x9;&#x9;&#x9;FROM  CF_geo_country &#xD;&#xA;&#x9;&#x9;&#x9;)&#xD;&#xA;&#x9;&#x9;&#xD;&#xA;&#x9;&#x9;/* LEGAL_NATURE: if not null and IND_COMPANY = 0, message 'Owner legal nature only applies when the person is a company' */&#xD;&#xA;&#x9;&#x9;INSERT INTO   [&quot;+ context.intermediateDB + &quot;].[dbo].VW_IMPORT_MARK_RESULT   &#xD;&#xA;&#x9;&#x9;&#x9;&#x9;( file_seq , &#xD;&#xA;&#x9;&#x9;&#x9;&#x9;file_type , &#xD;&#xA;&#x9;&#x9;&#x9;&#x9;file_series , &#xD;&#xA;&#x9;&#x9;&#x9;&#x9;file_nbr , &#xD;&#xA;&#x9;&#x9;&#x9;&#x9;ind_import , &#xD;&#xA;&#x9;&#x9;&#x9;&#x9;msg_import )  &#xD;&#xA;&#x9;&#x9;SELECT&#xD;&#xA;&#x9;&#x9;&#x9;&#x9; T.file_seq,&#xD;&#xA;&#x9;&#x9;&#x9;&#x9; T.file_type,&#xD;&#xA;&#x9;&#x9;&#x9;&#x9; T.file_series,&#xD;&#xA;&#x9;&#x9;&#x9;&#x9; T.file_nbr,&#xD;&#xA;&#x9;&#x9;&#x9;&#x9; 2,&#xD;&#xA;&#x9;&#x9;&#x9;&#x9; 'Owner legal nature only applies when the person is a company'&#xD;&#xA;&#x9;&#x9;FROM   [&quot;+ context.intermediateDB + &quot;].[dbo].VW_import_mark_owners T JOIN  [&quot;+ context.intermediateDB + &quot;].[dbo].VW_import_mark M ON T.file_seq  = M.file_seq&#xD;&#xA;&#x9;&#x9;&#x9; AND&#x9;T.file_type  = M.file_type&#xD;&#xA;&#x9;&#x9;&#x9; AND&#x9;T.file_series  = M.file_series&#xD;&#xA;&#x9;&#x9;&#x9; AND&#x9;T.file_nbr  = M.file_nbr  &#xD;&#xA;&#x9;&#x9;WHERE&#x9; ind_import  = 0&#xD;&#xA;&#x9;&#x9; AND&#x9;LEGAL_NATURE  is not null&#xD;&#xA;&#x9;&#x9; AND&#x9;IND_COMPANY  = 0&#xD;&#xA;&#x9;&#x9;&#xD;&#xA;&#x9;&#x9;/* LEGAL_ID_TYPE: if not null and not exists if CF_PERSON_ID_TYPE with IND_GENERAL_ID = 'S', &#xD;&#xA;&#x9;&#x9;       message 'Invalid owner legal id type' */&#xD;&#xA;&#x9;&#x9;INSERT INTO   [&quot;+ context.intermediateDB + &quot;].[dbo].VW_IMPORT_MARK_RESULT   &#xD;&#xA;&#x9;&#x9;&#x9;&#x9;( file_seq , &#xD;&#xA;&#x9;&#x9;&#x9;&#x9;file_type , &#xD;&#xA;&#x9;&#x9;&#x9;&#x9;file_series , &#xD;&#xA;&#x9;&#x9;&#x9;&#x9;file_nbr , &#xD;&#xA;&#x9;&#x9;&#x9;&#x9;ind_import , &#xD;&#xA;&#x9;&#x9;&#x9;&#x9;msg_import )  &#xD;&#xA;&#x9;&#x9;SELECT&#xD;&#xA;&#x9;&#x9;&#x9;&#x9; T.file_seq,&#xD;&#xA;&#x9;&#x9;&#x9;&#x9; T.file_type,&#xD;&#xA;&#x9;&#x9;&#x9;&#x9; T.file_series,&#xD;&#xA;&#x9;&#x9;&#x9;&#x9; T.file_nbr,&#xD;&#xA;&#x9;&#x9;&#x9;&#x9; 2,&#xD;&#xA;&#x9;&#x9;&#x9;&#x9; 'Invalid owner legal id type'&#xD;&#xA;&#x9;&#x9;FROM   [&quot;+ context.intermediateDB + &quot;].[dbo].VW_import_mark_owners T JOIN  [&quot;+ context.intermediateDB + &quot;].[dbo].VW_import_mark M ON T.file_seq  = M.file_seq&#xD;&#xA;&#x9;&#x9;&#x9; AND&#x9;T.file_type  = M.file_type&#xD;&#xA;&#x9;&#x9;&#x9; AND&#x9;T.file_series  = M.file_series&#xD;&#xA;&#x9;&#x9;&#x9; AND&#x9;T.file_nbr  = M.file_nbr  &#xD;&#xA;&#x9;&#x9;WHERE&#x9; ind_import  = 0&#xD;&#xA;&#x9;&#x9; AND&#x9;LEGAL_ID_TYPE  is not null&#xD;&#xA;&#x9;&#x9; AND&#x9;LEGAL_ID_TYPE  COLLATE DATABASE_DEFAULT not in&#xD;&#xA;&#x9;&#x9;&#x9;(&#xD;&#xA;&#x9;&#x9; &#x9;SELECT PERSON_ID_TYP&#xD;&#xA;&#x9;&#x9;&#x9;FROM  CF_PERSON_ID_TYPE &#xD;&#xA;&#x9;&#x9;&#x9;WHERE&#x9; IND_GENERAL_ID  = 'S'&#xD;&#xA;&#x9;&#x9;&#x9;)&#xD;&#xA;&#x9;&#x9;&#xD;&#xA;&#x9;&#x9;/* INDIVIDUAL_ID_TYPE: if not null and not exists if CF_PERSON_ID_TYPE with IND_INDIVIDUAL_ID = 'S', &#xD;&#xA;&#x9;&#x9;       message 'Invalid owner individual id type' */&#xD;&#xA;&#x9;&#x9;INSERT INTO   [&quot;+ context.intermediateDB + &quot;].[dbo].VW_IMPORT_MARK_RESULT   &#xD;&#xA;&#x9;&#x9;&#x9;&#x9;( file_seq , &#xD;&#xA;&#x9;&#x9;&#x9;&#x9;file_type , &#xD;&#xA;&#x9;&#x9;&#x9;&#x9;file_series , &#xD;&#xA;&#x9;&#x9;&#x9;&#x9;file_nbr , &#xD;&#xA;&#x9;&#x9;&#x9;&#x9;ind_import , &#xD;&#xA;&#x9;&#x9;&#x9;&#x9;msg_import )  &#xD;&#xA;&#x9;&#x9;SELECT&#xD;&#xA;&#x9;&#x9;&#x9;&#x9; T.file_seq,&#xD;&#xA;&#x9;&#x9;&#x9;&#x9; T.file_type,&#xD;&#xA;&#x9;&#x9;&#x9;&#x9; T.file_series,&#xD;&#xA;&#x9;&#x9;&#x9;&#x9; T.file_nbr,&#xD;&#xA;&#x9;&#x9;&#x9;&#x9; 2,&#xD;&#xA;&#x9;&#x9;&#x9;&#x9; 'Invalid owner individual id type'&#xD;&#xA;&#x9;&#x9;FROM   [&quot;+ context.intermediateDB + &quot;].[dbo].VW_import_mark_owners T JOIN  [&quot;+ context.intermediateDB + &quot;].[dbo].VW_import_mark M ON T.file_seq  = M.file_seq&#xD;&#xA;&#x9;&#x9;&#x9; AND&#x9;T.file_type  = M.file_type&#xD;&#xA;&#x9;&#x9;&#x9; AND&#x9;T.file_series  = M.file_series&#xD;&#xA;&#x9;&#x9;&#x9; AND&#x9;T.file_nbr  = M.file_nbr  &#xD;&#xA;&#x9;&#x9;WHERE&#x9; ind_import  = 0&#xD;&#xA;&#x9;&#x9; AND&#x9;INDIVIDUAL_ID_TYPE  is not null&#xD;&#xA;&#x9;&#x9; AND&#x9;INDIVIDUAL_ID_TYPE  COLLATE DATABASE_DEFAULT not in&#xD;&#xA;&#x9;&#x9;&#x9;(&#xD;&#xA;&#x9;&#x9; &#x9;SELECT PERSON_ID_TYP&#xD;&#xA;&#x9;&#x9;&#x9;FROM  CF_PERSON_ID_TYPE &#xD;&#xA;&#x9;&#x9;&#x9;WHERE&#x9; IND_INDIVIDUAL_ID  = 'S'&#xD;&#xA;&#x9;&#x9;&#x9;)&#xD;&#xA;&#x9;&#x9;&#xD;&#xA;&#x9;&#x9;/* If LEGAL_ID_TYPE is not null and LEGAL_ID_NBR is null, message 'Missing owner legal id number' */&#xD;&#xA;&#x9;&#x9;INSERT INTO   [&quot;+ context.intermediateDB + &quot;].[dbo].VW_IMPORT_MARK_RESULT   &#xD;&#xA;&#x9;&#x9;&#x9;&#x9;( file_seq , &#xD;&#xA;&#x9;&#x9;&#x9;&#x9;file_type , &#xD;&#xA;&#x9;&#x9;&#x9;&#x9;file_series , &#xD;&#xA;&#x9;&#x9;&#x9;&#x9;file_nbr , &#xD;&#xA;&#x9;&#x9;&#x9;&#x9;ind_import , &#xD;&#xA;&#x9;&#x9;&#x9;&#x9;msg_import )  &#xD;&#xA;&#x9;&#x9;SELECT&#xD;&#xA;&#x9;&#x9;&#x9;&#x9; T.file_seq,&#xD;&#xA;&#x9;&#x9;&#x9;&#x9; T.file_type,&#xD;&#xA;&#x9;&#x9;&#x9;&#x9; T.file_series,&#xD;&#xA;&#x9;&#x9;&#x9;&#x9; T.file_nbr,&#xD;&#xA;&#x9;&#x9;&#x9;&#x9; 2,&#xD;&#xA;&#x9;&#x9;&#x9;&#x9; 'Missing owner legal id number'&#xD;&#xA;&#x9;&#x9;FROM   [&quot;+ context.intermediateDB + &quot;].[dbo].VW_import_mark_owners T JOIN  [&quot;+ context.intermediateDB + &quot;].[dbo].VW_import_mark M ON T.file_seq  = M.file_seq&#xD;&#xA;&#x9;&#x9;&#x9; AND&#x9;T.file_type  = M.file_type&#xD;&#xA;&#x9;&#x9;&#x9; AND&#x9;T.file_series  = M.file_series&#xD;&#xA;&#x9;&#x9;&#x9; AND&#x9;T.file_nbr  = M.file_nbr  &#xD;&#xA;&#x9;&#x9;WHERE&#x9; ind_import  = 0&#xD;&#xA;&#x9;&#x9; AND&#x9;LEGAL_ID_TYPE  is not null&#xD;&#xA;&#x9;&#x9; AND&#x9;LEGAL_ID_NBR  is null&#xD;&#xA;&#x9;&#x9;&#xD;&#xA;&#x9;&#x9;/* If LEGAL_ID_TYPE is null and LEGAL_ID_NBR is not null, message 'Missing owner legal id type' */&#xD;&#xA;&#x9;&#x9;INSERT INTO   [&quot;+ context.intermediateDB + &quot;].[dbo].VW_IMPORT_MARK_RESULT   &#xD;&#xA;&#x9;&#x9;&#x9;&#x9;( file_seq , &#xD;&#xA;&#x9;&#x9;&#x9;&#x9;file_type , &#xD;&#xA;&#x9;&#x9;&#x9;&#x9;file_series , &#xD;&#xA;&#x9;&#x9;&#x9;&#x9;file_nbr , &#xD;&#xA;&#x9;&#x9;&#x9;&#x9;ind_import , &#xD;&#xA;&#x9;&#x9;&#x9;&#x9;msg_import )  &#xD;&#xA;&#x9;&#x9;SELECT&#xD;&#xA;&#x9;&#x9;&#x9;&#x9; T.file_seq,&#xD;&#xA;&#x9;&#x9;&#x9;&#x9; T.file_type,&#xD;&#xA;&#x9;&#x9;&#x9;&#x9; T.file_series,&#xD;&#xA;&#x9;&#x9;&#x9;&#x9; T.file_nbr,&#xD;&#xA;&#x9;&#x9;&#x9;&#x9; 2,&#xD;&#xA;&#x9;&#x9;&#x9;&#x9; 'Missing owner legal id type'&#xD;&#xA;&#x9;&#x9;FROM   [&quot;+ context.intermediateDB + &quot;].[dbo].VW_import_mark_owners T JOIN  [&quot;+ context.intermediateDB + &quot;].[dbo].VW_import_mark M ON T.file_seq  = M.file_seq&#xD;&#xA;&#x9;&#x9;&#x9; AND&#x9;T.file_type  = M.file_type&#xD;&#xA;&#x9;&#x9;&#x9; AND&#x9;T.file_series  = M.file_series&#xD;&#xA;&#x9;&#x9;&#x9; AND&#x9;T.file_nbr  = M.file_nbr  &#xD;&#xA;&#x9;&#x9;WHERE&#x9; ind_import  = 0&#xD;&#xA;&#x9;&#x9; AND&#x9;LEGAL_ID_TYPE  is null&#xD;&#xA;&#x9;&#x9; AND&#x9;LEGAL_ID_NBR  is not null&#xD;&#xA;&#x9;&#x9;&#xD;&#xA;&#x9;&#x9;/* If INDIVIDUAL_ID_TYPE is not null and INDIVIDUAL_ID_NBR is null, message 'Missing owner individual id number' */&#xD;&#xA;&#x9;&#x9;INSERT INTO   [&quot;+ context.intermediateDB + &quot;].[dbo].VW_IMPORT_MARK_RESULT   &#xD;&#xA;&#x9;&#x9;&#x9;&#x9;( file_seq , &#xD;&#xA;&#x9;&#x9;&#x9;&#x9;file_type , &#xD;&#xA;&#x9;&#x9;&#x9;&#x9;file_series , &#xD;&#xA;&#x9;&#x9;&#x9;&#x9;file_nbr , &#xD;&#xA;&#x9;&#x9;&#x9;&#x9;ind_import , &#xD;&#xA;&#x9;&#x9;&#x9;&#x9;msg_import )  &#xD;&#xA;&#x9;&#x9;SELECT&#xD;&#xA;&#x9;&#x9;&#x9;&#x9; T.file_seq,&#xD;&#xA;&#x9;&#x9;&#x9;&#x9; T.file_type,&#xD;&#xA;&#x9;&#x9;&#x9;&#x9; T.file_series,&#xD;&#xA;&#x9;&#x9;&#x9;&#x9; T.file_nbr,&#xD;&#xA;&#x9;&#x9;&#x9;&#x9; 2,&#xD;&#xA;&#x9;&#x9;&#x9;&#x9; 'Missing owner individual id number'&#xD;&#xA;&#x9;&#x9;FROM   [&quot;+ context.intermediateDB + &quot;].[dbo].VW_import_mark_owners T JOIN  [&quot;+ context.intermediateDB + &quot;].[dbo].VW_import_mark M ON T.file_seq  = M.file_seq&#xD;&#xA;&#x9;&#x9;&#x9; AND&#x9;T.file_type  = M.file_type&#xD;&#xA;&#x9;&#x9;&#x9; AND&#x9;T.file_series  = M.file_series&#xD;&#xA;&#x9;&#x9;&#x9; AND&#x9;T.file_nbr  = M.file_nbr  &#xD;&#xA;&#x9;&#x9;WHERE&#x9; ind_import  = 0&#xD;&#xA;&#x9;&#x9; AND&#x9;INDIVIDUAL_ID_TYPE  is not null&#xD;&#xA;&#x9;&#x9; AND&#x9;INDIVIDUAL_ID_NBR  is null&#xD;&#xA;&#x9;&#x9;&#xD;&#xA;&#x9;&#x9;/* If INDIVIDUAL_ID_TYPE is null and INDIVIDUAL_ID_NBR is not null, message 'Missing owner individual id type' */&#xD;&#xA;&#x9;&#x9;INSERT INTO   [&quot;+ context.intermediateDB + &quot;].[dbo].VW_IMPORT_MARK_RESULT   &#xD;&#xA;&#x9;&#x9;&#x9;&#x9;( file_seq , &#xD;&#xA;&#x9;&#x9;&#x9;&#x9;file_type , &#xD;&#xA;&#x9;&#x9;&#x9;&#x9;file_series , &#xD;&#xA;&#x9;&#x9;&#x9;&#x9;file_nbr , &#xD;&#xA;&#x9;&#x9;&#x9;&#x9;ind_import , &#xD;&#xA;&#x9;&#x9;&#x9;&#x9;msg_import )  &#xD;&#xA;&#x9;&#x9;SELECT&#xD;&#xA;&#x9;&#x9;&#x9;&#x9; T.file_seq,&#xD;&#xA;&#x9;&#x9;&#x9;&#x9; T.file_type,&#xD;&#xA;&#x9;&#x9;&#x9;&#x9; T.file_series,&#xD;&#xA;&#x9;&#x9;&#x9;&#x9; T.file_nbr,&#xD;&#xA;&#x9;&#x9;&#x9;&#x9; 2,&#xD;&#xA;&#x9;&#x9;&#x9;&#x9; 'Missing owner individual id type'&#xD;&#xA;&#x9;&#x9;FROM   [&quot;+ context.intermediateDB + &quot;].[dbo].VW_import_mark_owners T JOIN  [&quot;+ context.intermediateDB + &quot;].[dbo].VW_import_mark M ON T.file_seq  = M.file_seq&#xD;&#xA;&#x9;&#x9;&#x9; AND&#x9;T.file_type  = M.file_type&#xD;&#xA;&#x9;&#x9;&#x9; AND&#x9;T.file_series  = M.file_series&#xD;&#xA;&#x9;&#x9;&#x9; AND&#x9;T.file_nbr  = M.file_nbr  &#xD;&#xA;&#x9;&#x9;WHERE&#x9; ind_import  = 0&#xD;&#xA;&#x9;&#x9; AND&#x9;INDIVIDUAL_ID_TYPE  is null&#xD;&#xA;&#x9;&#x9; AND&#x9;INDIVIDUAL_ID_NBR  is not null&#xD;&#xA;&#x9;&#x9;&#xD;&#xA;&#x9;&#x9;/* RESIDENCE_COUNTRY_CODE: if not exists in CF_GEO_COUNTRY, message 'Invalid owner residence country code' */&#xD;&#xA;&#x9;&#x9;INSERT INTO   [&quot;+ context.intermediateDB + &quot;].[dbo].VW_IMPORT_MARK_RESULT   &#xD;&#xA;&#x9;&#x9;&#x9;&#x9;( file_seq , &#xD;&#xA;&#x9;&#x9;&#x9;&#x9;file_type , &#xD;&#xA;&#x9;&#x9;&#x9;&#x9;file_series , &#xD;&#xA;&#x9;&#x9;&#x9;&#x9;file_nbr , &#xD;&#xA;&#x9;&#x9;&#x9;&#x9;ind_import , &#xD;&#xA;&#x9;&#x9;&#x9;&#x9;msg_import )  &#xD;&#xA;&#x9;&#x9;SELECT&#xD;&#xA;&#x9;&#x9;&#x9;&#x9; T.file_seq,&#xD;&#xA;&#x9;&#x9;&#x9;&#x9; T.file_type,&#xD;&#xA;&#x9;&#x9;&#x9;&#x9; T.file_series,&#xD;&#xA;&#x9;&#x9;&#x9;&#x9; T.file_nbr,&#xD;&#xA;&#x9;&#x9;&#x9;&#x9; 2,&#xD;&#xA;&#x9;&#x9;&#x9;&#x9; 'Invalid owner residence country code'&#xD;&#xA;&#x9;&#x9;FROM   [&quot;+ context.intermediateDB + &quot;].[dbo].VW_import_mark_owners T JOIN  [&quot;+ context.intermediateDB + &quot;].[dbo].VW_import_mark M ON T.file_seq  = M.file_seq&#xD;&#xA;&#x9;&#x9;&#x9; AND&#x9;T.file_type  = M.file_type&#xD;&#xA;&#x9;&#x9;&#x9; AND&#x9;T.file_series  = M.file_series&#xD;&#xA;&#x9;&#x9;&#x9; AND&#x9;T.file_nbr  = M.file_nbr  &#xD;&#xA;&#x9;&#x9;WHERE&#x9; ind_import  = 0&#xD;&#xA;&#x9;&#x9; AND&#x9;RESIDENCE_COUNTRY_CODE COLLATE DATABASE_DEFAULT not in&#xD;&#xA;&#x9;&#x9;&#x9;(&#xD;&#xA;&#x9;&#x9; &#x9;SELECT COUNTRY_CODE&#xD;&#xA;&#x9;&#x9;&#x9;FROM  CF_geo_country &#xD;&#xA;&#x9;&#x9;&#x9;)&#xD;&#xA;&#x9;&#x9;&#xD;&#xA;&#x9;&#x9;/* STATE_CODE: if not null and not exists RESIDENCE_COUNTRY_CODE / STATE_CODE in CF_GEO_STATE, &#xD;&#xA;&#x9;&#x9;       message 'Invalid owner residence state code' */&#xD;&#xA;&#x9;&#x9;INSERT INTO   [&quot;+ context.intermediateDB + &quot;].[dbo].VW_IMPORT_MARK_RESULT   &#xD;&#xA;&#x9;&#x9;&#x9;&#x9;( file_seq , &#xD;&#xA;&#x9;&#x9;&#x9;&#x9;file_type , &#xD;&#xA;&#x9;&#x9;&#x9;&#x9;file_series , &#xD;&#xA;&#x9;&#x9;&#x9;&#x9;file_nbr , &#xD;&#xA;&#x9;&#x9;&#x9;&#x9;ind_import , &#xD;&#xA;&#x9;&#x9;&#x9;&#x9;msg_import )  &#xD;&#xA;&#x9;&#x9;SELECT&#xD;&#xA;&#x9;&#x9;&#x9;&#x9; T.file_seq,&#xD;&#xA;&#x9;&#x9;&#x9;&#x9; T.file_type,&#xD;&#xA;&#x9;&#x9;&#x9;&#x9; T.file_series,&#xD;&#xA;&#x9;&#x9;&#x9;&#x9; T.file_nbr,&#xD;&#xA;&#x9;&#x9;&#x9;&#x9; 2,&#xD;&#xA;&#x9;&#x9;&#x9;&#x9; 'Invalid owner residence state code'&#xD;&#xA;&#x9;&#x9;FROM   [&quot;+ context.intermediateDB + &quot;].[dbo].VW_import_mark_owners T JOIN  [&quot;+ context.intermediateDB + &quot;].[dbo].VW_import_mark M ON T.file_seq  = M.file_seq&#xD;&#xA;&#x9;&#x9;&#x9; AND&#x9;T.file_type  = M.file_type&#xD;&#xA;&#x9;&#x9;&#x9; AND&#x9;T.file_series  = M.file_series&#xD;&#xA;&#x9;&#x9;&#x9; AND&#x9;T.file_nbr  = M.file_nbr  &#xD;&#xA;&#x9;&#x9;WHERE&#x9; ind_import  = 0&#xD;&#xA;&#x9;&#x9; AND&#x9;STATE_CODE  is not null&#xD;&#xA;&#x9;&#x9; AND&#x9; NOT EXISTS&#xD;&#xA;&#x9;&#x9;&#x9;(&#xD;&#xA;&#x9;&#x9; &#x9;SELECT&#xD;&#xA;&#x9;&#x9;&#x9;&#x9;&#x9; CF_geo_state.COUNTRY_CODE,&#xD;&#xA;&#x9;&#x9;&#x9;&#x9;&#x9; CF_geo_state.STATE_CODE&#xD;&#xA;&#x9;&#x9;&#x9;FROM  CF_geo_state &#xD;&#xA;&#x9;&#x9;&#x9;WHERE&#x9; CF_geo_state.COUNTRY_CODE  = T.RESIDENCE_COUNTRY_CODE COLLATE DATABASE_DEFAULT&#xD;&#xA;&#x9;&#x9;&#x9; AND&#x9;CF_geo_state.STATE_CODE  = T.STATE_CODE COLLATE DATABASE_DEFAULT&#xD;&#xA;&#x9;&#x9;&#x9;)&#xD;&#xA;&#x9;&#x9;&#xD;&#xA;&#x9;&#x9;/* If STATE_CODE Is null and exist any CF_GEO_STATE with the RESIDENCE_COUNTRY_CODE, &#xD;&#xA;&#x9;&#x9;       message 'A state code is required for the specified owner residence country' */&#xD;&#xA;&#x9;&#x9;INSERT INTO   [&quot;+ context.intermediateDB + &quot;].[dbo].VW_IMPORT_MARK_RESULT   &#xD;&#xA;&#x9;&#x9;&#x9;&#x9;( file_seq , &#xD;&#xA;&#x9;&#x9;&#x9;&#x9;file_type , &#xD;&#xA;&#x9;&#x9;&#x9;&#x9;file_series , &#xD;&#xA;&#x9;&#x9;&#x9;&#x9;file_nbr , &#xD;&#xA;&#x9;&#x9;&#x9;&#x9;ind_import , &#xD;&#xA;&#x9;&#x9;&#x9;&#x9;msg_import )  &#xD;&#xA;&#x9;&#x9;SELECT&#xD;&#xA;&#x9;&#x9;&#x9;&#x9; T.file_seq,&#xD;&#xA;&#x9;&#x9;&#x9;&#x9; T.file_type,&#xD;&#xA;&#x9;&#x9;&#x9;&#x9; T.file_series,&#xD;&#xA;&#x9;&#x9;&#x9;&#x9; T.file_nbr,&#xD;&#xA;&#x9;&#x9;&#x9;&#x9; 2,&#xD;&#xA;&#x9;&#x9;&#x9;&#x9; 'A state code is required for the specified owner residence country'&#xD;&#xA;&#x9;&#x9;FROM   [&quot;+ context.intermediateDB + &quot;].[dbo].VW_import_mark_owners T JOIN  [&quot;+ context.intermediateDB + &quot;].[dbo].VW_import_mark M ON T.file_seq  = M.file_seq&#xD;&#xA;&#x9;&#x9;&#x9; AND&#x9;T.file_type  = M.file_type&#xD;&#xA;&#x9;&#x9;&#x9; AND&#x9;T.file_series  = M.file_series&#xD;&#xA;&#x9;&#x9;&#x9; AND&#x9;T.file_nbr  = M.file_nbr  &#xD;&#xA;&#x9;&#x9;WHERE&#x9; ind_import  = 0&#xD;&#xA;&#x9;&#x9; AND&#x9;STATE_CODE  is null&#xD;&#xA;&#x9;&#x9; AND&#x9;RESIDENCE_COUNTRY_CODE COLLATE DATABASE_DEFAULT in&#xD;&#xA;&#x9;&#x9;&#x9;(&#xD;&#xA;&#x9;&#x9; &#x9;SELECT country_code&#xD;&#xA;&#x9;&#x9;&#x9;FROM  CF_geo_state S &#xD;&#xA;&#x9;&#x9;&#x9;)&#xD;&#xA;&#xD;&#xA;&#xD;&#xA;&#x9;&#x9;&#xD;&#xA;&#x9;&#x9;/* CITY_CODE: if not null and not exists CITY_CODE / STATE_CODE/RESIDENCE_COUNTRY_CODE in CF_GEO_CITY, &#xD;&#xA;&#x9;&#x9;       message 'Invalid owner city code' */&#xD;&#xA;&#x9;&#x9;INSERT INTO   [&quot;+ context.intermediateDB + &quot;].[dbo].VW_IMPORT_MARK_RESULT   &#xD;&#xA;&#x9;&#x9;&#x9;&#x9;( file_seq , &#xD;&#xA;&#x9;&#x9;&#x9;&#x9;file_type , &#xD;&#xA;&#x9;&#x9;&#x9;&#x9;file_series , &#xD;&#xA;&#x9;&#x9;&#x9;&#x9;file_nbr , &#xD;&#xA;&#x9;&#x9;&#x9;&#x9;ind_import , &#xD;&#xA;&#x9;&#x9;&#x9;&#x9;msg_import )  &#xD;&#xA;&#x9;&#x9;SELECT&#xD;&#xA;&#x9;&#x9;&#x9;&#x9; T.file_seq,&#xD;&#xA;&#x9;&#x9;&#x9;&#x9; T.file_type,&#xD;&#xA;&#x9;&#x9;&#x9;&#x9; T.file_series,&#xD;&#xA;&#x9;&#x9;&#x9;&#x9; T.file_nbr,&#xD;&#xA;&#x9;&#x9;&#x9;&#x9; 2,&#xD;&#xA;&#x9;&#x9;&#x9;&#x9; 'Invalid owner city code'&#xD;&#xA;&#x9;&#x9;FROM   [&quot;+ context.intermediateDB + &quot;].[dbo].VW_import_mark_owners T JOIN  [&quot;+ context.intermediateDB + &quot;].[dbo].VW_import_mark M ON T.file_seq  = M.file_seq&#xD;&#xA;&#x9;&#x9;&#x9; AND&#x9;T.file_type  = M.file_type&#xD;&#xA;&#x9;&#x9;&#x9; AND&#x9;T.file_series  = M.file_series&#xD;&#xA;&#x9;&#x9;&#x9; AND&#x9;T.file_nbr  = M.file_nbr  &#xD;&#xA;&#x9;&#x9;WHERE&#x9; ind_import  = 0&#xD;&#xA;&#x9;&#x9; AND&#x9;CITY_CODE  is not null&#xD;&#xA;&#x9;&#x9; AND&#x9; NOT EXISTS&#xD;&#xA;&#x9;&#x9;&#x9;(&#xD;&#xA;&#x9;&#x9; &#x9;SELECT&#xD;&#xA;&#x9;&#x9;&#x9;&#x9;&#x9; CF_geo_city.COUNTRY_CODE,&#xD;&#xA;&#x9;&#x9;&#x9;&#x9;&#x9; CF_geo_city.STATE_CODE&#xD;&#xA;&#x9;&#x9;&#x9;FROM  CF_geo_city &#xD;&#xA;&#x9;&#x9;&#x9;WHERE&#x9; CF_geo_city.COUNTRY_CODE  = T.RESIDENCE_COUNTRY_CODE COLLATE DATABASE_DEFAULT&#xD;&#xA;&#x9;&#x9;&#x9; AND&#x9;CF_geo_city.STATE_CODE  = T.STATE_CODE COLLATE DATABASE_DEFAULT&#xD;&#xA;&#x9;&#x9;&#x9; AND&#x9;CF_geo_city.CITY_CODE  = T.CITY_CODE COLLATE DATABASE_DEFAULT&#xD;&#xA;&#x9;&#x9;&#x9;)&#xD;&#xA;&#xD;&#xA;&#xD;&#xA;&#x9;&#x9;&#xD;&#xA;&#x9;&#x9;/* If PERSON_GROUP_CODE is not null and not exists in IP_PERSON_GROUP, message 'Invalid owner person group code' */&#xD;&#xA;&#x9;&#x9;INSERT INTO   [&quot;+ context.intermediateDB + &quot;].[dbo].VW_IMPORT_MARK_RESULT   &#xD;&#xA;&#x9;&#x9;&#x9;&#x9;( file_seq , &#xD;&#xA;&#x9;&#x9;&#x9;&#x9;file_type , &#xD;&#xA;&#x9;&#x9;&#x9;&#x9;file_series , &#xD;&#xA;&#x9;&#x9;&#x9;&#x9;file_nbr , &#xD;&#xA;&#x9;&#x9;&#x9;&#x9;ind_import , &#xD;&#xA;&#x9;&#x9;&#x9;&#x9;msg_import )  &#xD;&#xA;&#x9;&#x9;SELECT&#xD;&#xA;&#x9;&#x9;&#x9;&#x9; T.file_seq,&#xD;&#xA;&#x9;&#x9;&#x9;&#x9; T.file_type,&#xD;&#xA;&#x9;&#x9;&#x9;&#x9; T.file_series,&#xD;&#xA;&#x9;&#x9;&#x9;&#x9; T.file_nbr,&#xD;&#xA;&#x9;&#x9;&#x9;&#x9; 2,&#xD;&#xA;&#x9;&#x9;&#x9;&#x9; 'Invalid owner person group code'&#xD;&#xA;&#x9;&#x9;FROM   [&quot;+ context.intermediateDB + &quot;].[dbo].VW_import_mark_owners T JOIN  [&quot;+ context.intermediateDB + &quot;].[dbo].VW_import_mark M ON T.file_seq  = M.file_seq&#xD;&#xA;&#x9;&#x9;&#x9; AND&#x9;T.file_type  = M.file_type&#xD;&#xA;&#x9;&#x9;&#x9; AND&#x9;T.file_series  = M.file_series&#xD;&#xA;&#x9;&#x9;&#x9; AND&#x9;T.file_nbr  = M.file_nbr  &#xD;&#xA;&#x9;&#x9;WHERE&#x9; ind_import  = 0&#xD;&#xA;&#x9;&#x9; AND&#x9;PERSON_GROUP_CODE  is not null&#xD;&#xA;&#x9;&#x9; AND&#x9;PERSON_GROUP_CODE  COLLATE DATABASE_DEFAULT not in&#xD;&#xA;&#x9;&#x9;&#x9;(&#xD;&#xA;&#x9;&#x9; &#x9;SELECT PERSON_GROUP_NBR&#xD;&#xA;&#x9;&#x9;&#x9;FROM  IP_PERSON_GROUP &#xD;&#xA;&#x9;&#x9;&#x9;)&#xD;&#xA;&#x9;&#x9;&#xD;&#xA;&#x9;&#x9;&#xD;&#xA;&#x9;&#x9;/* owners must be different for each file */&#xD;&#xA;&#x9;/*&#x9;INSERT INTO   [&quot;+ context.intermediateDB + &quot;].[dbo].VW_IMPORT_MARK_RESULT   &#xD;&#xA;&#x9;&#x9;&#x9;&#x9;( file_seq , &#xD;&#xA;&#x9;&#x9;&#x9;&#x9;file_type , &#xD;&#xA;&#x9;&#x9;&#x9;&#x9;file_series , &#xD;&#xA;&#x9;&#x9;&#x9;&#x9;file_nbr , &#xD;&#xA;&#x9;&#x9;&#x9;&#x9;ind_import , &#xD;&#xA;&#x9;&#x9;&#x9;&#x9;msg_import )&#xD;&#xA;&#x9;&#x9;&#x9;&#x9;&#xD;&#xA;&#x9;&#x9;SELECT DISTINCT &#xD;&#xA;&#x9;&#x9;&#x9;FILE_SEQ,&#xD;&#xA;&#x9;&#x9;&#x9;FILE_TYPE,&#xD;&#xA;&#x9;&#x9;&#x9;FILE_SERIES,&#xD;&#xA;&#x9;&#x9;&#x9;FILE_NBR,&#xD;&#xA;&#x9;&#x9;&#x9;2,&#xD;&#xA;&#x9;&#x9;&#x9;'Duplicated owner'&#xD;&#xA;&#x9;    FROM  [&quot;+ context.intermediateDB + &quot;].[dbo].VW_IMPORT_MARK_OWNERS M&#xD;&#xA;&#x9;&#x9;WHERE EXISTS(    &#xD;&#xA;&#x9;&#x9;&#x9;SELECT  FILE_SEQ,FILE_TYPE,FILE_SERIES,FILE_NBR,PERSON_NAME,NATIONALITY_COUNTRY_CODE,&#xD;&#xA;&#x9;&#x9;&#x9;&#x9;&#x9;IND_COMPANY,LEGAL_NATURE,LEGAL_ID_TYPE,LEGAL_ID_NBR,INDIVIDUAL_ID_TYPE,INDIVIDUAL_ID_NBR,  COUNT(*) &#xD;&#xA;&#x9;&#x9;&#x9;FROM  [&quot;+ context.intermediateDB + &quot;].[dbo].VW_IMPORT_MARK_OWNERS T &#xD;&#xA;&#x9;&#x9;&#x9;WHERE&#x9;T.file_seq  = M.file_seq&#xD;&#xA;&#x9;&#x9;&#x9;&#x9;&#x9;AND&#x9;T.file_type  = M.file_type&#xD;&#xA;&#x9;&#x9;&#x9;&#x9;&#x9;AND&#x9;T.file_series  = M.file_series&#xD;&#xA;&#x9;&#x9;&#x9;&#x9;&#x9;AND&#x9;T.file_nbr  = M.file_nbr   &#xD;&#xA;&#x9;&#x9;&#x9;GROUP BY FILE_SEQ,FILE_TYPE,FILE_SERIES,FILE_NBR,PERSON_NAME,NATIONALITY_COUNTRY_CODE,IND_COMPANY,LEGAL_NATURE,LEGAL_ID_TYPE,LEGAL_ID_NBR,INDIVIDUAL_ID_TYPE,INDIVIDUAL_ID_NBR&#xD;&#xA;&#x9;&#x9;&#x9;HAVING COUNT(*)>1   &#xD;&#xA;&#x9;&#x9;)&#xD;&#xA; &#x9;&#x9;&#x9;*/&#xD;&#xA;&#x9;&#x9;&#x9;&#x9;&#xD;&#xA;&#x9;  &#x9;&#x9;&#xD;&#xA;&#x9;&#x9;&#xD;&#xA;&#x9;&#x9;&#xD;&#xA;&#x9;&#x9;&#xD;&#xA;&#x9;&#x9;/* 1.1.3  [&quot;+ context.intermediateDB + &quot;].[dbo].VW_IMPORT_MARK_REPRS validations */&#xD;&#xA;&#x9;&#x9;/* 1.1.3.1 Representative validations */&#xD;&#xA;&#x9;&#x9;/* Generate work table with FILE_SEQ, FILE_TYPE, FILE_SERIES, FILE_NBR, IND_SERVICE and COUNT(*) */&#xD;&#xA;&#x9;&#x9;&#xD;&#xA;&#x9;&#x9;&#xD;&#xA;&#x9;&#x9;DECLARE @EXEC_IMMEDIATE_VAR1 VARCHAR (4000)&#xD;&#xA;&#x9;&#x9;SELECT @EXEC_IMMEDIATE_VAR1  = 'TRUNCATE TABLE wrk_file_service_count' &#xD;&#xA;&#xD;&#xA;&#x9;&#x9;EXECUTE (@EXEC_IMMEDIATE_VAR1)&#xD;&#xA;&#x9;&#x9;INSERT INTO  wrk_file_service_count    &#xD;&#xA;&#x9;&#x9;SELECT&#xD;&#xA;&#x9;&#x9;&#x9;&#x9; FILE_SEQ,&#xD;&#xA;&#x9;&#x9;&#x9;&#x9; FILE_TYPE,&#xD;&#xA;&#x9;&#x9;&#x9;&#x9; FILE_SERIES,&#xD;&#xA;&#x9;&#x9;&#x9;&#x9; FILE_NBR,&#xD;&#xA;&#x9;&#x9;&#x9;&#x9; IND_SERVICE,&#xD;&#xA;&#x9;&#x9;&#x9;&#x9; COUNT(*) count1&#xD;&#xA;&#x9;&#x9;FROM   [&quot;+ context.intermediateDB + &quot;].[dbo].VW_IMPORT_MARK_REPRS &#xD;&#xA;&#x9;&#x9;GROUP BY FILE_SEQ,&#xD;&#xA;&#x9;&#x9;&#x9; FILE_TYPE,&#xD;&#xA;&#x9;&#x9;&#x9; FILE_SERIES,&#xD;&#xA;&#x9;&#x9;&#x9; FILE_NBR,&#xD;&#xA;&#x9;&#x9;&#x9;  IND_SERVICE &#xD;&#xA;&#x9;&#x9;&#xD;&#xA;&#x9;&#x9;/* No service address: where a representative exists but no one has IND_SERVICE = 1, &#xD;&#xA;&#x9;&#x9;       message 'No representative flagged as service address' */&#xD;&#xA;&#x9;&#x9;INSERT INTO   [&quot;+ context.intermediateDB + &quot;].[dbo].VW_IMPORT_MARK_RESULT   &#xD;&#xA;&#x9;&#x9;&#x9;&#x9;( file_seq , &#xD;&#xA;&#x9;&#x9;&#x9;&#x9;file_type , &#xD;&#xA;&#x9;&#x9;&#x9;&#x9;file_series , &#xD;&#xA;&#x9;&#x9;&#x9;&#x9;file_nbr , &#xD;&#xA;&#x9;&#x9;&#x9;&#x9;ind_import , &#xD;&#xA;&#x9;&#x9;&#x9;&#x9;msg_import )  &#xD;&#xA;&#x9;&#x9;SELECT&#xD;&#xA;&#x9;&#x9;&#x9;&#x9; file_seq,&#xD;&#xA;&#x9;&#x9;&#x9;&#x9; file_type,&#xD;&#xA;&#x9;&#x9;&#x9;&#x9; file_series,&#xD;&#xA;&#x9;&#x9;&#x9;&#x9; file_nbr,&#xD;&#xA;&#x9;&#x9;&#x9;&#x9; 2,&#xD;&#xA;&#x9;&#x9;&#x9;&#x9; 'No representative flagged as service address'&#xD;&#xA;&#x9;&#x9;FROM   [&quot;+ context.intermediateDB + &quot;].[dbo].VW_import_mark M &#xD;&#xA;&#x9;&#x9;WHERE&#x9; ind_import  = 0&#xD;&#xA;&#x9;&#x9; AND&#x9;  exists&#xD;&#xA;&#x9;&#x9;&#x9;(&#xD;&#xA;&#x9;&#x9; &#x9;SELECT *&#xD;&#xA;&#x9;&#x9;&#x9;FROM  wrk_file_service_count W &#xD;&#xA;&#x9;&#x9;&#x9;WHERE&#x9; M.file_seq  = W.file_seq&#xD;&#xA;&#x9;&#x9;&#x9; AND&#x9;M.file_type  = W.file_type&#xD;&#xA;&#x9;&#x9;&#x9; AND&#x9;M.file_series  = W.file_series&#xD;&#xA;&#x9;&#x9;&#x9; AND&#x9;M.file_nbr  = W.file_nbr&#xD;&#xA;&#x9;&#x9;&#x9;)&#xD;&#xA;&#x9;&#x9; AND&#x9;NOT   exists&#xD;&#xA;&#x9;&#x9;&#x9;(&#xD;&#xA;&#x9;&#x9; &#x9;SELECT *&#xD;&#xA;&#x9;&#x9;&#x9;FROM  wrk_file_service_count W &#xD;&#xA;&#x9;&#x9;&#x9;WHERE&#x9; M.file_seq  = W.file_seq&#xD;&#xA;&#x9;&#x9;&#x9; AND&#x9;M.file_type  = W.file_type&#xD;&#xA;&#x9;&#x9;&#x9; AND&#x9;M.file_series  = W.file_series&#xD;&#xA;&#x9;&#x9;&#x9; AND&#x9;M.file_nbr  = W.file_nbr&#xD;&#xA;&#x9;&#x9;&#x9; AND&#x9;ind_service  = 1&#xD;&#xA;&#x9;&#x9;&#x9;)&#xD;&#xA;&#x9;&#x9;&#xD;&#xA;&#x9;&#x9;/* Several service addresses: where exists corresponding tuple in the work table with IND_SERVICE = 1 and with count column > 1, &#xD;&#xA;&#x9;&#x9;       message 'Several representatives flagged as service addresses' */&#xD;&#xA;&#x9;&#x9;INSERT INTO   [&quot;+ context.intermediateDB + &quot;].[dbo].VW_IMPORT_MARK_RESULT   &#xD;&#xA;&#x9;&#x9;&#x9;&#x9;( file_seq , &#xD;&#xA;&#x9;&#x9;&#x9;&#x9;file_type , &#xD;&#xA;&#x9;&#x9;&#x9;&#x9;file_series , &#xD;&#xA;&#x9;&#x9;&#x9;&#x9;file_nbr , &#xD;&#xA;&#x9;&#x9;&#x9;&#x9;ind_import , &#xD;&#xA;&#x9;&#x9;&#x9;&#x9;msg_import )  &#xD;&#xA;&#x9;&#x9;SELECT&#xD;&#xA;&#x9;&#x9;&#x9;&#x9; M.file_seq,&#xD;&#xA;&#x9;&#x9;&#x9;&#x9; M.file_type,&#xD;&#xA;&#x9;&#x9;&#x9;&#x9; M.file_series,&#xD;&#xA;&#x9;&#x9;&#x9;&#x9; M.file_nbr,&#xD;&#xA;&#x9;&#x9;&#x9;&#x9; 2,&#xD;&#xA;&#x9;&#x9;&#x9;&#x9; 'Several representatives flagged as service addresses'&#xD;&#xA;&#x9;&#x9;FROM   [&quot;+ context.intermediateDB + &quot;].[dbo].VW_import_mark M JOIN wrk_file_service_count W ON M.file_seq  = W.file_seq&#xD;&#xA;&#x9;&#x9;&#x9; AND&#x9;M.file_type  = W.file_type&#xD;&#xA;&#x9;&#x9;&#x9; AND&#x9;M.file_series  = W.file_series&#xD;&#xA;&#x9;&#x9;&#x9; AND&#x9;M.file_nbr  = W.file_nbr  &#xD;&#xA;&#x9;&#x9;WHERE&#x9; ind_import  = 0&#xD;&#xA;&#x9;&#x9; AND&#x9;ind_service  = 1&#xD;&#xA;&#x9;&#x9; AND&#x9;count1  > 1&#xD;&#xA;&#x9;&#x9;&#xD;&#xA;&#x9;&#x9;/* REPRESENTATIVE_TYPE: if null, message 'Null representative type' */&#xD;&#xA;&#x9;&#x9;INSERT INTO   [&quot;+ context.intermediateDB + &quot;].[dbo].VW_IMPORT_MARK_RESULT   &#xD;&#xA;&#x9;&#x9;&#x9;&#x9;( file_seq , &#xD;&#xA;&#x9;&#x9;&#x9;&#x9;file_type , &#xD;&#xA;&#x9;&#x9;&#x9;&#x9;file_series , &#xD;&#xA;&#x9;&#x9;&#x9;&#x9;file_nbr , &#xD;&#xA;&#x9;&#x9;&#x9;&#x9;ind_import , &#xD;&#xA;&#x9;&#x9;&#x9;&#x9;msg_import )  &#xD;&#xA;&#x9;&#x9;SELECT&#xD;&#xA;&#x9;&#x9;&#x9;&#x9; T.file_seq,&#xD;&#xA;&#x9;&#x9;&#x9;&#x9; T.file_type,&#xD;&#xA;&#x9;&#x9;&#x9;&#x9; T.file_series,&#xD;&#xA;&#x9;&#x9;&#x9;&#x9; T.file_nbr,&#xD;&#xA;&#x9;&#x9;&#x9;&#x9; 2,&#xD;&#xA;&#x9;&#x9;&#x9;&#x9; 'Null representative type'&#xD;&#xA;&#x9;&#x9;FROM   [&quot;+ context.intermediateDB + &quot;].[dbo].VW_import_mark_reprs T JOIN  [&quot;+ context.intermediateDB + &quot;].[dbo].VW_import_mark M ON T.file_seq  = M.file_seq&#xD;&#xA;&#x9;&#x9;&#x9; AND&#x9;T.file_type  = M.file_type&#xD;&#xA;&#x9;&#x9;&#x9; AND&#x9;T.file_series  = M.file_series&#xD;&#xA;&#x9;&#x9;&#x9; AND&#x9;T.file_nbr  = M.file_nbr  &#xD;&#xA;&#x9;&#x9;WHERE&#x9; ind_import  = 0&#xD;&#xA;&#x9;&#x9; AND&#x9;REPRESENTATIVE_TYPE  is null&#xD;&#xA;&#x9;&#x9;&#xD;&#xA;&#x9;&#x9;/* REPRESENTATIVE_TYPE: if not exists in CF_REPRESENTATIVE_TYPE, message 'Invalid representative type' */&#xD;&#xA;&#x9;&#x9;INSERT INTO   [&quot;+ context.intermediateDB + &quot;].[dbo].VW_IMPORT_MARK_RESULT   &#xD;&#xA;&#x9;&#x9;&#x9;&#x9;( file_seq , &#xD;&#xA;&#x9;&#x9;&#x9;&#x9;file_type , &#xD;&#xA;&#x9;&#x9;&#x9;&#x9;file_series , &#xD;&#xA;&#x9;&#x9;&#x9;&#x9;file_nbr , &#xD;&#xA;&#x9;&#x9;&#x9;&#x9;ind_import , &#xD;&#xA;&#x9;&#x9;&#x9;&#x9;msg_import )  &#xD;&#xA;&#x9;&#x9;SELECT&#xD;&#xA;&#x9;&#x9;&#x9;&#x9; T.file_seq,&#xD;&#xA;&#x9;&#x9;&#x9;&#x9; T.file_type,&#xD;&#xA;&#x9;&#x9;&#x9;&#x9; T.file_series,&#xD;&#xA;&#x9;&#x9;&#x9;&#x9; T.file_nbr,&#xD;&#xA;&#x9;&#x9;&#x9;&#x9; 2,&#xD;&#xA;&#x9;&#x9;&#x9;&#x9; 'Invalid representative type'&#xD;&#xA;&#x9;&#x9;FROM   [&quot;+ context.intermediateDB + &quot;].[dbo].VW_import_mark_reprs T JOIN  [&quot;+ context.intermediateDB + &quot;].[dbo].VW_import_mark M ON T.file_seq  = M.file_seq&#xD;&#xA;&#x9;&#x9;&#x9; AND&#x9;T.file_type  = M.file_type&#xD;&#xA;&#x9;&#x9;&#x9; AND&#x9;T.file_series  = M.file_series&#xD;&#xA;&#x9;&#x9;&#x9; AND&#x9;T.file_nbr  = M.file_nbr  &#xD;&#xA;&#x9;&#x9;WHERE&#x9; ind_import  = 0&#xD;&#xA;&#x9;&#x9; AND&#x9;REPRESENTATIVE_TYPE  not in&#xD;&#xA;&#x9;&#x9;&#x9;(&#xD;&#xA;&#x9;&#x9; &#x9;SELECT REPRESENTATIVE_TYPE&#xD;&#xA;&#x9;&#x9;&#x9;FROM  CF_REPRESENTATIVE_TYPE &#xD;&#xA;&#x9;&#x9;&#x9;)&#xD;&#xA;&#x9;&#x9;&#xD;&#xA;&#x9;&#x9;/* AGENT_CODE: if not null and not exists in IF_AGENT, message 'Invalid agent code' */&#xD;&#xA;&#x9;&#x9;INSERT INTO   [&quot;+ context.intermediateDB + &quot;].[dbo].VW_IMPORT_MARK_RESULT   &#xD;&#xA;&#x9;&#x9;&#x9;&#x9;( file_seq , &#xD;&#xA;&#x9;&#x9;&#x9;&#x9;file_type , &#xD;&#xA;&#x9;&#x9;&#x9;&#x9;file_series , &#xD;&#xA;&#x9;&#x9;&#x9;&#x9;file_nbr , &#xD;&#xA;&#x9;&#x9;&#x9;&#x9;ind_import , &#xD;&#xA;&#x9;&#x9;&#x9;&#x9;msg_import )  &#xD;&#xA;&#x9;&#x9;SELECT&#xD;&#xA;&#x9;&#x9;&#x9;&#x9; T.file_seq,&#xD;&#xA;&#x9;&#x9;&#x9;&#x9; T.file_type,&#xD;&#xA;&#x9;&#x9;&#x9;&#x9; T.file_series,&#xD;&#xA;&#x9;&#x9;&#x9;&#x9; T.file_nbr,&#xD;&#xA;&#x9;&#x9;&#x9;&#x9; 2,&#xD;&#xA;&#x9;&#x9;&#x9;&#x9; 'Invalid agent code'&#xD;&#xA;&#x9;&#x9;FROM   [&quot;+ context.intermediateDB + &quot;].[dbo].VW_import_mark_reprs T JOIN  [&quot;+ context.intermediateDB + &quot;].[dbo].VW_import_mark M ON T.file_seq  = M.file_seq&#xD;&#xA;&#x9;&#x9;&#x9; AND&#x9;T.file_type  = M.file_type&#xD;&#xA;&#x9;&#x9;&#x9; AND&#x9;T.file_series  = M.file_series&#xD;&#xA;&#x9;&#x9;&#x9; AND&#x9;T.file_nbr  = M.file_nbr  &#xD;&#xA;&#x9;&#x9;WHERE&#x9; ind_import  = 0&#xD;&#xA;&#x9;&#x9; AND&#x9;AGENT_CODE  is not null&#xD;&#xA;&#x9;&#x9; AND&#x9;AGENT_CODE  not in&#xD;&#xA;&#x9;&#x9;&#x9;(&#xD;&#xA;&#x9;&#x9; &#x9;SELECT AGENT_CODE&#xD;&#xA;&#x9;&#x9;&#x9;FROM  IP_AGENT &#xD;&#xA;&#x9;&#x9;&#x9;)&#xD;&#xA;&#x9;&#x9;&#xD;&#xA;&#x9;&#x9;/* 1.1.3.2 Person validations */&#xD;&#xA;&#x9;&#x9;/* NATIONALITY_COUNTRY_CODE: if not exists in CF_GEO_COUNTRY, message 'Invalid representative nationality country code' */&#xD;&#xA;&#x9;&#x9;INSERT INTO   [&quot;+ context.intermediateDB + &quot;].[dbo].VW_IMPORT_MARK_RESULT   &#xD;&#xA;&#x9;&#x9;&#x9;&#x9;( file_seq , &#xD;&#xA;&#x9;&#x9;&#x9;&#x9;file_type , &#xD;&#xA;&#x9;&#x9;&#x9;&#x9;file_series , &#xD;&#xA;&#x9;&#x9;&#x9;&#x9;file_nbr , &#xD;&#xA;&#x9;&#x9;&#x9;&#x9;ind_import , &#xD;&#xA;&#x9;&#x9;&#x9;&#x9;msg_import )  &#xD;&#xA;&#x9;&#x9;SELECT&#xD;&#xA;&#x9;&#x9;&#x9;&#x9; T.file_seq,&#xD;&#xA;&#x9;&#x9;&#x9;&#x9; T.file_type,&#xD;&#xA;&#x9;&#x9;&#x9;&#x9; T.file_series,&#xD;&#xA;&#x9;&#x9;&#x9;&#x9; T.file_nbr,&#xD;&#xA;&#x9;&#x9;&#x9;&#x9; 2,&#xD;&#xA;&#x9;&#x9;&#x9;&#x9; 'Invalid representative nationality country code'&#xD;&#xA;&#x9;&#x9;FROM   [&quot;+ context.intermediateDB + &quot;].[dbo].VW_import_mark_reprs T JOIN  [&quot;+ context.intermediateDB + &quot;].[dbo].VW_import_mark M ON T.file_seq  = M.file_seq&#xD;&#xA;&#x9;&#x9;&#x9; AND&#x9;T.file_type  = M.file_type&#xD;&#xA;&#x9;&#x9;&#x9; AND&#x9;T.file_series  = M.file_series&#xD;&#xA;&#x9;&#x9;&#x9; AND&#x9;T.file_nbr  = M.file_nbr  &#xD;&#xA;&#x9;&#x9;WHERE&#x9; ind_import  = 0&#xD;&#xA;&#x9;&#x9; AND&#x9;NATIONALITY_COUNTRY_CODE COLLATE DATABASE_DEFAULT not in&#xD;&#xA;&#x9;&#x9;&#x9;(&#xD;&#xA;&#x9;&#x9; &#x9;SELECT COUNTRY_CODE&#xD;&#xA;&#x9;&#x9;&#x9;FROM  CF_geo_country &#xD;&#xA;&#x9;&#x9;&#x9;)&#xD;&#xA;&#x9;&#x9;&#xD;&#xA;&#x9;&#x9;/* LEGAL_NATURE: if not null and IND_COMPANY = 0, message 'Representative legal nature only applies when the person is a company' */&#xD;&#xA;&#x9;&#x9;INSERT INTO   [&quot;+ context.intermediateDB + &quot;].[dbo].VW_IMPORT_MARK_RESULT   &#xD;&#xA;&#x9;&#x9;&#x9;&#x9;( file_seq , &#xD;&#xA;&#x9;&#x9;&#x9;&#x9;file_type , &#xD;&#xA;&#x9;&#x9;&#x9;&#x9;file_series , &#xD;&#xA;&#x9;&#x9;&#x9;&#x9;file_nbr , &#xD;&#xA;&#x9;&#x9;&#x9;&#x9;ind_import , &#xD;&#xA;&#x9;&#x9;&#x9;&#x9;msg_import )  &#xD;&#xA;&#x9;&#x9;SELECT&#xD;&#xA;&#x9;&#x9;&#x9;&#x9; T.file_seq,&#xD;&#xA;&#x9;&#x9;&#x9;&#x9; T.file_type,&#xD;&#xA;&#x9;&#x9;&#x9;&#x9; T.file_series,&#xD;&#xA;&#x9;&#x9;&#x9;&#x9; T.file_nbr,&#xD;&#xA;&#x9;&#x9;&#x9;&#x9; 2,&#xD;&#xA;&#x9;&#x9;&#x9;&#x9; 'Representative legal nature only applies when the person is a company'&#xD;&#xA;&#x9;&#x9;FROM   [&quot;+ context.intermediateDB + &quot;].[dbo].VW_import_mark_reprs T JOIN  [&quot;+ context.intermediateDB + &quot;].[dbo].VW_import_mark M ON T.file_seq  = M.file_seq&#xD;&#xA;&#x9;&#x9;&#x9; AND&#x9;T.file_type  = M.file_type&#xD;&#xA;&#x9;&#x9;&#x9; AND&#x9;T.file_series  = M.file_series&#xD;&#xA;&#x9;&#x9;&#x9; AND&#x9;T.file_nbr  = M.file_nbr  &#xD;&#xA;&#x9;&#x9;WHERE&#x9; ind_import  = 0&#xD;&#xA;&#x9;&#x9; AND&#x9;LEGAL_NATURE  is not null&#xD;&#xA;&#x9;&#x9; AND&#x9;IND_COMPANY  = 0&#xD;&#xA;&#x9;&#x9;&#xD;&#xA;&#x9;&#x9;/* LEGAL_ID_TYPE: if not null and not exists if CF_PERSON_ID_TYPE with IND_GENERAL_ID = 'S', &#xD;&#xA;&#x9;&#x9;       message 'Invalid Representative legal id type' */&#xD;&#xA;&#x9;&#x9;INSERT INTO   [&quot;+ context.intermediateDB + &quot;].[dbo].VW_IMPORT_MARK_RESULT   &#xD;&#xA;&#x9;&#x9;&#x9;&#x9;( file_seq , &#xD;&#xA;&#x9;&#x9;&#x9;&#x9;file_type , &#xD;&#xA;&#x9;&#x9;&#x9;&#x9;file_series , &#xD;&#xA;&#x9;&#x9;&#x9;&#x9;file_nbr , &#xD;&#xA;&#x9;&#x9;&#x9;&#x9;ind_import , &#xD;&#xA;&#x9;&#x9;&#x9;&#x9;msg_import )  &#xD;&#xA;&#x9;&#x9;SELECT&#xD;&#xA;&#x9;&#x9;&#x9;&#x9; T.file_seq,&#xD;&#xA;&#x9;&#x9;&#x9;&#x9; T.file_type,&#xD;&#xA;&#x9;&#x9;&#x9;&#x9; T.file_series,&#xD;&#xA;&#x9;&#x9;&#x9;&#x9; T.file_nbr,&#xD;&#xA;&#x9;&#x9;&#x9;&#x9; 2,&#xD;&#xA;&#x9;&#x9;&#x9;&#x9; 'Invalid representative legal id type'&#xD;&#xA;&#x9;&#x9;FROM   [&quot;+ context.intermediateDB + &quot;].[dbo].VW_import_mark_reprs T JOIN  [&quot;+ context.intermediateDB + &quot;].[dbo].VW_import_mark M ON T.file_seq  = M.file_seq&#xD;&#xA;&#x9;&#x9;&#x9; AND&#x9;T.file_type  = M.file_type&#xD;&#xA;&#x9;&#x9;&#x9; AND&#x9;T.file_series  = M.file_series&#xD;&#xA;&#x9;&#x9;&#x9; AND&#x9;T.file_nbr  = M.file_nbr  &#xD;&#xA;&#x9;&#x9;WHERE&#x9; ind_import  = 0&#xD;&#xA;&#x9;&#x9; AND&#x9;LEGAL_ID_TYPE  is not null&#xD;&#xA;&#x9;&#x9; AND&#x9;LEGAL_ID_TYPE  COLLATE DATABASE_DEFAULT not in&#xD;&#xA;&#x9;&#x9;&#x9;(&#xD;&#xA;&#x9;&#x9; &#x9;SELECT PERSON_ID_TYP&#xD;&#xA;&#x9;&#x9;&#x9;FROM  CF_PERSON_ID_TYPE &#xD;&#xA;&#x9;&#x9;&#x9;WHERE&#x9; IND_GENERAL_ID  = 'S'&#xD;&#xA;&#x9;&#x9;&#x9;)&#xD;&#xA;&#x9;&#x9;&#xD;&#xA;&#x9;&#x9;/* INDIVIDUAL_ID_TYPE: if not null and not exists if CF_PERSON_ID_TYPE with IND_INDIVIDUAL_ID = 'S', &#xD;&#xA;&#x9;&#x9;       message 'Invalid representative individual id type' */&#xD;&#xA;&#x9;&#x9;INSERT INTO   [&quot;+ context.intermediateDB + &quot;].[dbo].VW_IMPORT_MARK_RESULT   &#xD;&#xA;&#x9;&#x9;&#x9;&#x9;( file_seq , &#xD;&#xA;&#x9;&#x9;&#x9;&#x9;file_type , &#xD;&#xA;&#x9;&#x9;&#x9;&#x9;file_series , &#xD;&#xA;&#x9;&#x9;&#x9;&#x9;file_nbr , &#xD;&#xA;&#x9;&#x9;&#x9;&#x9;ind_import , &#xD;&#xA;&#x9;&#x9;&#x9;&#x9;msg_import )  &#xD;&#xA;&#x9;&#x9;SELECT&#xD;&#xA;&#x9;&#x9;&#x9;&#x9; T.file_seq,&#xD;&#xA;&#x9;&#x9;&#x9;&#x9; T.file_type,&#xD;&#xA;&#x9;&#x9;&#x9;&#x9; T.file_series,&#xD;&#xA;&#x9;&#x9;&#x9;&#x9; T.file_nbr,&#xD;&#xA;&#x9;&#x9;&#x9;&#x9; 2,&#xD;&#xA;&#x9;&#x9;&#x9;&#x9; 'Invalid representative individual id type'&#xD;&#xA;&#x9;&#x9;FROM   [&quot;+ context.intermediateDB + &quot;].[dbo].VW_import_mark_reprs T JOIN  [&quot;+ context.intermediateDB + &quot;].[dbo].VW_import_mark M ON T.file_seq  = M.file_seq&#xD;&#xA;&#x9;&#x9;&#x9; AND&#x9;T.file_type  = M.file_type&#xD;&#xA;&#x9;&#x9;&#x9; AND&#x9;T.file_series  = M.file_series&#xD;&#xA;&#x9;&#x9;&#x9; AND&#x9;T.file_nbr  = M.file_nbr  &#xD;&#xA;&#x9;&#x9;WHERE&#x9; ind_import  = 0&#xD;&#xA;&#x9;&#x9; AND&#x9;INDIVIDUAL_ID_TYPE  is not null&#xD;&#xA;&#x9;&#x9; AND&#x9;INDIVIDUAL_ID_TYPE  COLLATE DATABASE_DEFAULT not in&#xD;&#xA;&#x9;&#x9;&#x9;(&#xD;&#xA;&#x9;&#x9; &#x9;SELECT PERSON_ID_TYP&#xD;&#xA;&#x9;&#x9;&#x9;FROM  CF_PERSON_ID_TYPE &#xD;&#xA;&#x9;&#x9;&#x9;WHERE&#x9; IND_INDIVIDUAL_ID  = 'S'&#xD;&#xA;&#x9;&#x9;&#x9;)&#xD;&#xA;&#x9;&#x9;&#xD;&#xA;&#x9;&#x9;/* If LEGAL_ID_TYPE is not null and LEGAL_ID_NBR is null, message 'Missing representative legal id number' */&#xD;&#xA;&#x9;&#x9;INSERT INTO   [&quot;+ context.intermediateDB + &quot;].[dbo].VW_IMPORT_MARK_RESULT   &#xD;&#xA;&#x9;&#x9;&#x9;&#x9;( file_seq , &#xD;&#xA;&#x9;&#x9;&#x9;&#x9;file_type , &#xD;&#xA;&#x9;&#x9;&#x9;&#x9;file_series , &#xD;&#xA;&#x9;&#x9;&#x9;&#x9;file_nbr , &#xD;&#xA;&#x9;&#x9;&#x9;&#x9;ind_import , &#xD;&#xA;&#x9;&#x9;&#x9;&#x9;msg_import )  &#xD;&#xA;&#x9;&#x9;SELECT&#xD;&#xA;&#x9;&#x9;&#x9;&#x9; T.file_seq,&#xD;&#xA;&#x9;&#x9;&#x9;&#x9; T.file_type,&#xD;&#xA;&#x9;&#x9;&#x9;&#x9; T.file_series,&#xD;&#xA;&#x9;&#x9;&#x9;&#x9; T.file_nbr,&#xD;&#xA;&#x9;&#x9;&#x9;&#x9; 2,&#xD;&#xA;&#x9;&#x9;&#x9;&#x9; 'Missing representative legal id number'&#xD;&#xA;&#x9;&#x9;FROM   [&quot;+ context.intermediateDB + &quot;].[dbo].VW_import_mark_reprs T JOIN  [&quot;+ context.intermediateDB + &quot;].[dbo].VW_import_mark M ON T.file_seq  = M.file_seq&#xD;&#xA;&#x9;&#x9;&#x9; AND&#x9;T.file_type  = M.file_type&#xD;&#xA;&#x9;&#x9;&#x9; AND&#x9;T.file_series  = M.file_series&#xD;&#xA;&#x9;&#x9;&#x9; AND&#x9;T.file_nbr  = M.file_nbr  &#xD;&#xA;&#x9;&#x9;WHERE&#x9; ind_import  = 0&#xD;&#xA;&#x9;&#x9; AND&#x9;LEGAL_ID_TYPE  is not null&#xD;&#xA;&#x9;&#x9; AND&#x9;LEGAL_ID_NBR  is null&#xD;&#xA;&#x9;&#x9;&#xD;&#xA;&#x9;&#x9;/* If LEGAL_ID_TYPE is null and LEGAL_ID_NBR is not null, message 'Missing representative legal id type' */&#xD;&#xA;&#x9;&#x9;INSERT INTO   [&quot;+ context.intermediateDB + &quot;].[dbo].VW_IMPORT_MARK_RESULT   &#xD;&#xA;&#x9;&#x9;&#x9;&#x9;( file_seq , &#xD;&#xA;&#x9;&#x9;&#x9;&#x9;file_type , &#xD;&#xA;&#x9;&#x9;&#x9;&#x9;file_series , &#xD;&#xA;&#x9;&#x9;&#x9;&#x9;file_nbr , &#xD;&#xA;&#x9;&#x9;&#x9;&#x9;ind_import , &#xD;&#xA;&#x9;&#x9;&#x9;&#x9;msg_import )  &#xD;&#xA;&#x9;&#x9;SELECT&#xD;&#xA;&#x9;&#x9;&#x9;&#x9; T.file_seq,&#xD;&#xA;&#x9;&#x9;&#x9;&#x9; T.file_type,&#xD;&#xA;&#x9;&#x9;&#x9;&#x9; T.file_series,&#xD;&#xA;&#x9;&#x9;&#x9;&#x9; T.file_nbr,&#xD;&#xA;&#x9;&#x9;&#x9;&#x9; 2,&#xD;&#xA;&#x9;&#x9;&#x9;&#x9; 'Missing representative legal id type'&#xD;&#xA;&#x9;&#x9;FROM   [&quot;+ context.intermediateDB + &quot;].[dbo].VW_import_mark_reprs T JOIN  [&quot;+ context.intermediateDB + &quot;].[dbo].VW_import_mark M ON T.file_seq  = M.file_seq&#xD;&#xA;&#x9;&#x9;&#x9; AND&#x9;T.file_type  = M.file_type&#xD;&#xA;&#x9;&#x9;&#x9; AND&#x9;T.file_series  = M.file_series&#xD;&#xA;&#x9;&#x9;&#x9; AND&#x9;T.file_nbr  = M.file_nbr  &#xD;&#xA;&#x9;&#x9;WHERE&#x9; ind_import  = 0&#xD;&#xA;&#x9;&#x9; AND&#x9;LEGAL_ID_TYPE  is null&#xD;&#xA;&#x9;&#x9; AND&#x9;LEGAL_ID_NBR  is not null&#xD;&#xA;&#x9;&#x9;&#xD;&#xA;&#x9;&#x9;/* If INDIVIDUAL_ID_TYPE is not null and INDIVIDUAL_ID_NBR is null, message 'Missing representative individual id number' */&#xD;&#xA;&#x9;&#x9;INSERT INTO   [&quot;+ context.intermediateDB + &quot;].[dbo].VW_IMPORT_MARK_RESULT   &#xD;&#xA;&#x9;&#x9;&#x9;&#x9;( file_seq , &#xD;&#xA;&#x9;&#x9;&#x9;&#x9;file_type , &#xD;&#xA;&#x9;&#x9;&#x9;&#x9;file_series , &#xD;&#xA;&#x9;&#x9;&#x9;&#x9;file_nbr , &#xD;&#xA;&#x9;&#x9;&#x9;&#x9;ind_import , &#xD;&#xA;&#x9;&#x9;&#x9;&#x9;msg_import )  &#xD;&#xA;&#x9;&#x9;SELECT&#xD;&#xA;&#x9;&#x9;&#x9;&#x9; T.file_seq,&#xD;&#xA;&#x9;&#x9;&#x9;&#x9; T.file_type,&#xD;&#xA;&#x9;&#x9;&#x9;&#x9; T.file_series,&#xD;&#xA;&#x9;&#x9;&#x9;&#x9; T.file_nbr,&#xD;&#xA;&#x9;&#x9;&#x9;&#x9; 2,&#xD;&#xA;&#x9;&#x9;&#x9;&#x9; 'Missing representative individual id number'&#xD;&#xA;&#x9;&#x9;FROM   [&quot;+ context.intermediateDB + &quot;].[dbo].VW_import_mark_reprs T JOIN  [&quot;+ context.intermediateDB + &quot;].[dbo].VW_import_mark M ON T.file_seq  = M.file_seq&#xD;&#xA;&#x9;&#x9;&#x9; AND&#x9;T.file_type  = M.file_type&#xD;&#xA;&#x9;&#x9;&#x9; AND&#x9;T.file_series  = M.file_series&#xD;&#xA;&#x9;&#x9;&#x9; AND&#x9;T.file_nbr  = M.file_nbr  &#xD;&#xA;&#x9;&#x9;WHERE&#x9; ind_import  = 0&#xD;&#xA;&#x9;&#x9; AND&#x9;INDIVIDUAL_ID_TYPE  is not null&#xD;&#xA;&#x9;&#x9; AND&#x9;INDIVIDUAL_ID_NBR  is null&#xD;&#xA;&#x9;&#x9;&#xD;&#xA;&#x9;&#x9;/* If INDIVIDUAL_ID_TYPE is null and INDIVIDUAL_ID_NBR is not null, message 'Missing representative individual id type' */&#xD;&#xA;&#x9;&#x9;INSERT INTO   [&quot;+ context.intermediateDB + &quot;].[dbo].VW_IMPORT_MARK_RESULT   &#xD;&#xA;&#x9;&#x9;&#x9;&#x9;( file_seq , &#xD;&#xA;&#x9;&#x9;&#x9;&#x9;file_type , &#xD;&#xA;&#x9;&#x9;&#x9;&#x9;file_series , &#xD;&#xA;&#x9;&#x9;&#x9;&#x9;file_nbr , &#xD;&#xA;&#x9;&#x9;&#x9;&#x9;ind_import , &#xD;&#xA;&#x9;&#x9;&#x9;&#x9;msg_import )  &#xD;&#xA;&#x9;&#x9;SELECT&#xD;&#xA;&#x9;&#x9;&#x9;&#x9; T.file_seq,&#xD;&#xA;&#x9;&#x9;&#x9;&#x9; T.file_type,&#xD;&#xA;&#x9;&#x9;&#x9;&#x9; T.file_series,&#xD;&#xA;&#x9;&#x9;&#x9;&#x9; T.file_nbr,&#xD;&#xA;&#x9;&#x9;&#x9;&#x9; 2,&#xD;&#xA;&#x9;&#x9;&#x9;&#x9; 'Missing representative individual id type'&#xD;&#xA;&#x9;&#x9;FROM   [&quot;+ context.intermediateDB + &quot;].[dbo].VW_import_mark_reprs T JOIN  [&quot;+ context.intermediateDB + &quot;].[dbo].VW_import_mark M ON T.file_seq  = M.file_seq&#xD;&#xA;&#x9;&#x9;&#x9; AND&#x9;T.file_type  = M.file_type&#xD;&#xA;&#x9;&#x9;&#x9; AND&#x9;T.file_series  = M.file_series&#xD;&#xA;&#x9;&#x9;&#x9; AND&#x9;T.file_nbr  = M.file_nbr  &#xD;&#xA;&#x9;&#x9;WHERE&#x9; ind_import  = 0&#xD;&#xA;&#x9;&#x9; AND&#x9;INDIVIDUAL_ID_TYPE  is null&#xD;&#xA;&#x9;&#x9; AND&#x9;INDIVIDUAL_ID_NBR  is not null&#xD;&#xA;&#x9;&#x9;&#xD;&#xA;&#x9;&#x9;/* RESIDENCE_COUNTRY_CODE: if not exists in CF_GEO_COUNTRY, message 'Invalid representative residence country code' */&#xD;&#xA;&#x9;&#x9;INSERT INTO   [&quot;+ context.intermediateDB + &quot;].[dbo].VW_IMPORT_MARK_RESULT   &#xD;&#xA;&#x9;&#x9;&#x9;&#x9;( file_seq , &#xD;&#xA;&#x9;&#x9;&#x9;&#x9;file_type , &#xD;&#xA;&#x9;&#x9;&#x9;&#x9;file_series , &#xD;&#xA;&#x9;&#x9;&#x9;&#x9;file_nbr , &#xD;&#xA;&#x9;&#x9;&#x9;&#x9;ind_import , &#xD;&#xA;&#x9;&#x9;&#x9;&#x9;msg_import )  &#xD;&#xA;&#x9;&#x9;SELECT&#xD;&#xA;&#x9;&#x9;&#x9;&#x9; T.file_seq,&#xD;&#xA;&#x9;&#x9;&#x9;&#x9; T.file_type,&#xD;&#xA;&#x9;&#x9;&#x9;&#x9; T.file_series,&#xD;&#xA;&#x9;&#x9;&#x9;&#x9; T.file_nbr,&#xD;&#xA;&#x9;&#x9;&#x9;&#x9; 2,&#xD;&#xA;&#x9;&#x9;&#x9;&#x9; 'Invalid representative residence country code'&#xD;&#xA;&#x9;&#x9;FROM   [&quot;+ context.intermediateDB + &quot;].[dbo].VW_import_mark_reprs T JOIN  [&quot;+ context.intermediateDB + &quot;].[dbo].VW_import_mark M ON T.file_seq  = M.file_seq&#xD;&#xA;&#x9;&#x9;&#x9; AND&#x9;T.file_type  = M.file_type&#xD;&#xA;&#x9;&#x9;&#x9; AND&#x9;T.file_series  = M.file_series&#xD;&#xA;&#x9;&#x9;&#x9; AND&#x9;T.file_nbr  = M.file_nbr  &#xD;&#xA;&#x9;&#x9;WHERE&#x9; ind_import  = 0&#xD;&#xA;&#x9;&#x9; AND&#x9;RESIDENCE_COUNTRY_CODE COLLATE DATABASE_DEFAULT not in&#xD;&#xA;&#x9;&#x9;&#x9;(&#xD;&#xA;&#x9;&#x9; &#x9;SELECT COUNTRY_CODE&#xD;&#xA;&#x9;&#x9;&#x9;FROM  CF_geo_country &#xD;&#xA;&#x9;&#x9;&#x9;)&#xD;&#xA;&#x9;&#x9;&#xD;&#xA;&#x9;&#x9;/* STATE_CODE: if not null and not exists RESIDENCE_COUNTRY_CODE / STATE_CODE in CF_GEO_STATE, &#xD;&#xA;&#x9;&#x9;       message 'Invalid representative residence state code' */&#xD;&#xA;&#x9;&#x9;INSERT INTO   [&quot;+ context.intermediateDB + &quot;].[dbo].VW_IMPORT_MARK_RESULT   &#xD;&#xA;&#x9;&#x9;&#x9;&#x9;( file_seq , &#xD;&#xA;&#x9;&#x9;&#x9;&#x9;file_type , &#xD;&#xA;&#x9;&#x9;&#x9;&#x9;file_series , &#xD;&#xA;&#x9;&#x9;&#x9;&#x9;file_nbr , &#xD;&#xA;&#x9;&#x9;&#x9;&#x9;ind_import , &#xD;&#xA;&#x9;&#x9;&#x9;&#x9;msg_import )  &#xD;&#xA;&#x9;&#x9;SELECT&#xD;&#xA;&#x9;&#x9;&#x9;&#x9; T.file_seq,&#xD;&#xA;&#x9;&#x9;&#x9;&#x9; T.file_type,&#xD;&#xA;&#x9;&#x9;&#x9;&#x9; T.file_series,&#xD;&#xA;&#x9;&#x9;&#x9;&#x9; T.file_nbr,&#xD;&#xA;&#x9;&#x9;&#x9;&#x9; 2,&#xD;&#xA;&#x9;&#x9;&#x9;&#x9; 'Invalid representative residence state code'&#xD;&#xA;&#x9;&#x9;FROM   [&quot;+ context.intermediateDB + &quot;].[dbo].VW_import_mark_reprs T JOIN  [&quot;+ context.intermediateDB + &quot;].[dbo].VW_import_mark M ON T.file_seq  = M.file_seq&#xD;&#xA;&#x9;&#x9;&#x9; AND&#x9;T.file_type  = M.file_type&#xD;&#xA;&#x9;&#x9;&#x9; AND&#x9;T.file_series  = M.file_series&#xD;&#xA;&#x9;&#x9;&#x9; AND&#x9;T.file_nbr  = M.file_nbr  &#xD;&#xA;&#x9;&#x9;WHERE&#x9; ind_import  = 0&#xD;&#xA;&#x9;&#x9; AND&#x9;STATE_CODE  is not null&#xD;&#xA;&#x9;&#x9; AND&#x9; NOT EXISTS&#xD;&#xA;&#x9;&#x9;&#x9;(&#xD;&#xA;&#x9;&#x9; &#x9;SELECT&#xD;&#xA;&#x9;&#x9;&#x9;&#x9;&#x9; CF_geo_state.COUNTRY_CODE,&#xD;&#xA;&#x9;&#x9;&#x9;&#x9;&#x9; CF_geo_state.STATE_CODE&#xD;&#xA;&#x9;&#x9;&#x9;FROM  CF_geo_state &#xD;&#xA;&#x9;&#x9;&#x9;WHERE&#x9; CF_geo_state.COUNTRY_CODE  = T.RESIDENCE_COUNTRY_CODE COLLATE DATABASE_DEFAULT&#xD;&#xA;&#x9;&#x9;&#x9; AND&#x9;CF_geo_state.STATE_CODE  = T.STATE_CODE COLLATE DATABASE_DEFAULT&#xD;&#xA;&#x9;&#x9;&#x9;)&#xD;&#xA;&#x9;&#x9;&#xD;&#xA;&#x9;&#x9;/* If STATE_CODE Is null and exist any CF_GEO_STATE with the RESIDENCE_COUNTRY_CODE, &#xD;&#xA;&#x9;&#x9;       message 'A state code is required for the specified representative residence country' */&#xD;&#xA;&#x9;&#x9;INSERT INTO   [&quot;+ context.intermediateDB + &quot;].[dbo].VW_IMPORT_MARK_RESULT   &#xD;&#xA;&#x9;&#x9;&#x9;&#x9;( file_seq , &#xD;&#xA;&#x9;&#x9;&#x9;&#x9;file_type , &#xD;&#xA;&#x9;&#x9;&#x9;&#x9;file_series , &#xD;&#xA;&#x9;&#x9;&#x9;&#x9;file_nbr , &#xD;&#xA;&#x9;&#x9;&#x9;&#x9;ind_import , &#xD;&#xA;&#x9;&#x9;&#x9;&#x9;msg_import )  &#xD;&#xA;&#x9;&#x9;SELECT&#xD;&#xA;&#x9;&#x9;&#x9;&#x9; T.file_seq,&#xD;&#xA;&#x9;&#x9;&#x9;&#x9; T.file_type,&#xD;&#xA;&#x9;&#x9;&#x9;&#x9; T.file_series,&#xD;&#xA;&#x9;&#x9;&#x9;&#x9; T.file_nbr,&#xD;&#xA;&#x9;&#x9;&#x9;&#x9; 2,&#xD;&#xA;&#x9;&#x9;&#x9;&#x9; 'A state code is required for the specified representative residence country'&#xD;&#xA;&#x9;&#x9;FROM   [&quot;+ context.intermediateDB + &quot;].[dbo].VW_import_mark_reprs T &#xD;&#xA;&#x9;&#x9;&#x9;   JOIN  [&quot;+ context.intermediateDB + &quot;].[dbo].VW_import_mark M ON &#xD;&#xA;&#x9;&#x9;&#x9;&#x9;&#x9;T.file_seq  = M.file_seq COLLATE DATABASE_DEFAULT&#xD;&#xA;&#x9;&#x9;&#x9; AND&#x9;T.file_type  = M.file_type COLLATE DATABASE_DEFAULT&#xD;&#xA;&#x9;&#x9;&#x9; AND&#x9;T.file_series  = M.file_series&#xD;&#xA;&#x9;&#x9;&#x9; AND&#x9;T.file_nbr  = M.file_nbr  &#xD;&#xA;&#x9;&#x9;WHERE&#x9; ind_import  = 0&#xD;&#xA;&#x9;&#x9; AND&#x9;STATE_CODE  is null&#xD;&#xA;&#x9;&#x9; AND&#x9;RESIDENCE_COUNTRY_CODE COLLATE DATABASE_DEFAULT in&#xD;&#xA;&#x9;&#x9;&#x9;(&#xD;&#xA;&#x9;&#x9; &#x9;SELECT country_code&#xD;&#xA;&#x9;&#x9;&#x9;FROM  CF_geo_state &#xD;&#xA;&#x9;&#x9;&#x9;)&#xD;&#xA;&#xD;&#xA;&#xD;&#xA;&#xD;&#xA;&#x9;&#x9;&#xD;&#xA;&#x9;&#x9;/* CITY_CODE: if not null and not exists CITY_CODE / STATE_CODE/RESIDENCE_COUNTRY_CODE in CF_GEO_CITY, &#xD;&#xA;&#x9;&#x9;       message 'Invalid representative city code' */&#xD;&#xA;&#x9;&#x9;INSERT INTO   [&quot;+ context.intermediateDB + &quot;].[dbo].VW_IMPORT_MARK_RESULT   &#xD;&#xA;&#x9;&#x9;&#x9;&#x9;( file_seq , &#xD;&#xA;&#x9;&#x9;&#x9;&#x9;file_type , &#xD;&#xA;&#x9;&#x9;&#x9;&#x9;file_series , &#xD;&#xA;&#x9;&#x9;&#x9;&#x9;file_nbr , &#xD;&#xA;&#x9;&#x9;&#x9;&#x9;ind_import , &#xD;&#xA;&#x9;&#x9;&#x9;&#x9;msg_import )  &#xD;&#xA;&#x9;&#x9;SELECT&#xD;&#xA;&#x9;&#x9;&#x9;&#x9; T.file_seq,&#xD;&#xA;&#x9;&#x9;&#x9;&#x9; T.file_type,&#xD;&#xA;&#x9;&#x9;&#x9;&#x9; T.file_series,&#xD;&#xA;&#x9;&#x9;&#x9;&#x9; T.file_nbr,&#xD;&#xA;&#x9;&#x9;&#x9;&#x9; 2,&#xD;&#xA;&#x9;&#x9;&#x9;&#x9; 'Invalid representative city code'&#xD;&#xA;&#x9;&#x9;FROM   [&quot;+ context.intermediateDB + &quot;].[dbo].VW_import_mark_reprs T JOIN  [&quot;+ context.intermediateDB + &quot;].[dbo].VW_import_mark M ON T.file_seq  = M.file_seq&#xD;&#xA;&#x9;&#x9;&#x9; AND&#x9;T.file_type  = M.file_type&#xD;&#xA;&#x9;&#x9;&#x9; AND&#x9;T.file_series  = M.file_series&#xD;&#xA;&#x9;&#x9;&#x9; AND&#x9;T.file_nbr  = M.file_nbr  &#xD;&#xA;&#x9;&#x9;WHERE&#x9; ind_import  = 0&#xD;&#xA;&#x9;&#x9; AND&#x9;CITY_CODE  is not null&#xD;&#xA;&#x9;&#x9; AND&#x9; NOT EXISTS&#xD;&#xA;&#x9;&#x9;&#x9;(&#xD;&#xA;&#x9;&#x9; &#x9;SELECT&#xD;&#xA;&#x9;&#x9;&#x9;&#x9;&#x9; CF_geo_city.COUNTRY_CODE,&#xD;&#xA;&#x9;&#x9;&#x9;&#x9;&#x9; CF_geo_city.STATE_CODE&#xD;&#xA;&#x9;&#x9;&#x9;FROM  CF_geo_city &#xD;&#xA;&#x9;&#x9;&#x9;WHERE&#x9; CF_geo_city.COUNTRY_CODE  = T.RESIDENCE_COUNTRY_CODE COLLATE DATABASE_DEFAULT&#xD;&#xA;&#x9;&#x9;&#x9; AND&#x9;CF_geo_city.STATE_CODE  = T.STATE_CODE COLLATE DATABASE_DEFAULT&#xD;&#xA;&#x9;&#x9;&#x9; AND&#x9;CF_geo_city.CITY_CODE  = T.CITY_CODE COLLATE DATABASE_DEFAULT&#xD;&#xA;&#x9;&#x9;&#x9;)&#xD;&#xA;&#xD;&#xA;&#xD;&#xA;&#x9;&#x9;&#xD;&#xA;&#x9;&#x9;/* If PERSON_GROUP_CODE is not null and not exists in IP_PERSON_GROUP, message 'Invalid representative person group code' */&#xD;&#xA;&#x9;&#x9;INSERT INTO   [&quot;+ context.intermediateDB + &quot;].[dbo].VW_IMPORT_MARK_RESULT   &#xD;&#xA;&#x9;&#x9;&#x9;&#x9;( file_seq , &#xD;&#xA;&#x9;&#x9;&#x9;&#x9;file_type , &#xD;&#xA;&#x9;&#x9;&#x9;&#x9;file_series , &#xD;&#xA;&#x9;&#x9;&#x9;&#x9;file_nbr , &#xD;&#xA;&#x9;&#x9;&#x9;&#x9;ind_import , &#xD;&#xA;&#x9;&#x9;&#x9;&#x9;msg_import )  &#xD;&#xA;&#x9;&#x9;SELECT&#xD;&#xA;&#x9;&#x9;&#x9;&#x9; T.file_seq,&#xD;&#xA;&#x9;&#x9;&#x9;&#x9; T.file_type,&#xD;&#xA;&#x9;&#x9;&#x9;&#x9; T.file_series,&#xD;&#xA;&#x9;&#x9;&#x9;&#x9; T.file_nbr,&#xD;&#xA;&#x9;&#x9;&#x9;&#x9; 2,&#xD;&#xA;&#x9;&#x9;&#x9;&#x9; 'Invalid representative person group code'&#xD;&#xA;&#x9;&#x9;FROM   [&quot;+ context.intermediateDB + &quot;].[dbo].VW_import_mark_reprs T JOIN  [&quot;+ context.intermediateDB + &quot;].[dbo].VW_import_mark M ON T.file_seq  = M.file_seq&#xD;&#xA;&#x9;&#x9;&#x9; AND&#x9;T.file_type  = M.file_type&#xD;&#xA;&#x9;&#x9;&#x9; AND&#x9;T.file_series  = M.file_series&#xD;&#xA;&#x9;&#x9;&#x9; AND&#x9;T.file_nbr  = M.file_nbr  &#xD;&#xA;&#x9;&#x9;WHERE&#x9; ind_import  = 0&#xD;&#xA;&#x9;&#x9; AND&#x9;PERSON_GROUP_CODE  is not null&#xD;&#xA;&#x9;&#x9; AND&#x9;PERSON_GROUP_CODE  COLLATE DATABASE_DEFAULT not in&#xD;&#xA;&#x9;&#x9;&#x9;(&#xD;&#xA;&#x9;&#x9; &#x9;SELECT PERSON_GROUP_NBR&#xD;&#xA;&#x9;&#x9;&#x9;FROM  IP_PERSON_GROUP &#xD;&#xA;&#x9;&#x9;&#x9;)&#xD;&#xA;&#x9;&#x9;&#xD;&#xA;&#x9;&#x9;&#xD;&#xA;&#x9;&#x9;&#xD;&#xA;&#x9;&#x9;&#x9;/* owners must be different for each file */&#xD;&#xA;&#x9;&#x9;INSERT INTO   [&quot;+ context.intermediateDB + &quot;].[dbo].VW_IMPORT_MARK_RESULT   &#xD;&#xA;&#x9;&#x9;&#x9;&#x9;( file_seq , &#xD;&#xA;&#x9;&#x9;&#x9;&#x9;file_type , &#xD;&#xA;&#x9;&#x9;&#x9;&#x9;file_series , &#xD;&#xA;&#x9;&#x9;&#x9;&#x9;file_nbr , &#xD;&#xA;&#x9;&#x9;&#x9;&#x9;ind_import , &#xD;&#xA;&#x9;&#x9;&#x9;&#x9;msg_import )&#xD;&#xA;&#x9;&#x9;&#x9;&#x9;&#xD;&#xA;&#x9;&#x9;SELECT DISTINCT &#xD;&#xA;&#x9;&#x9;&#x9;FILE_SEQ,&#xD;&#xA;&#x9;&#x9;&#x9;FILE_TYPE,&#xD;&#xA;&#x9;&#x9;&#x9;FILE_SERIES,&#xD;&#xA;&#x9;&#x9;&#x9;FILE_NBR,&#xD;&#xA;&#x9;&#x9;&#x9;2,&#xD;&#xA;&#x9;&#x9;&#x9;'Duplicated representative data'&#xD;&#xA;&#x9;    FROM  [&quot;+ context.intermediateDB + &quot;].[dbo].VW_IMPORT_MARK_REPRS M&#xD;&#xA;&#x9;&#x9;WHERE EXISTS(    &#xD;&#xA;&#x9;&#x9;&#x9;SELECT  FILE_SEQ,FILE_TYPE,FILE_SERIES,FILE_NBR,PERSON_NAME,NATIONALITY_COUNTRY_CODE,&#xD;&#xA;&#x9;&#x9;&#x9;&#x9;&#x9;IND_COMPANY,LEGAL_NATURE,LEGAL_ID_TYPE,LEGAL_ID_NBR,INDIVIDUAL_ID_TYPE,INDIVIDUAL_ID_NBR,  COUNT(*) &#xD;&#xA;&#x9;&#x9;&#x9;FROM  [&quot;+ context.intermediateDB + &quot;].[dbo].VW_IMPORT_MARK_REPRS T &#xD;&#xA;&#x9;&#x9;&#x9;WHERE&#x9;T.file_seq  = M.file_seq&#xD;&#xA;&#x9;&#x9;&#x9;&#x9;&#x9;AND&#x9;T.file_type  = M.file_type&#xD;&#xA;&#x9;&#x9;&#x9;&#x9;&#x9;AND&#x9;T.file_series  = M.file_series&#xD;&#xA;&#x9;&#x9;&#x9;&#x9;&#x9;AND&#x9;T.file_nbr  = M.file_nbr   &#xD;&#xA;&#x9;&#x9;&#x9;GROUP BY FILE_SEQ,FILE_TYPE,FILE_SERIES,FILE_NBR,PERSON_NAME,NATIONALITY_COUNTRY_CODE,IND_COMPANY,LEGAL_NATURE,LEGAL_ID_TYPE,LEGAL_ID_NBR,INDIVIDUAL_ID_TYPE,INDIVIDUAL_ID_NBR&#xD;&#xA;&#x9;&#x9;&#x9;HAVING COUNT(*)>1   &#xD;&#xA;&#x9;&#x9;)&#xD;&#xA; &#x9;&#x9;&#x9;&#xD;&#xA;&#x9;&#x9;&#xD;&#xA;&#x9;&#x9;&#xD;&#xA;&#x9;&#x9;&#xD;&#xA;&#x9;&#x9;/* 1.1.4  [&quot;+ context.intermediateDB + &quot;].[dbo].VW_IMPORT_MARK_PRIORITIES validations */&#xD;&#xA;&#x9;&#x9;/* COUNTRY_CODE: if not exists in CF_GEO_COUNTRY, message 'Invalid priority country code' */&#xD;&#xA;&#x9;&#x9;INSERT INTO   [&quot;+ context.intermediateDB + &quot;].[dbo].VW_IMPORT_MARK_RESULT   &#xD;&#xA;&#x9;&#x9;&#x9;&#x9;( file_seq , &#xD;&#xA;&#x9;&#x9;&#x9;&#x9;file_type , &#xD;&#xA;&#x9;&#x9;&#x9;&#x9;file_series , &#xD;&#xA;&#x9;&#x9;&#x9;&#x9;file_nbr , &#xD;&#xA;&#x9;&#x9;&#x9;&#x9;ind_import , &#xD;&#xA;&#x9;&#x9;&#x9;&#x9;msg_import )  &#xD;&#xA;&#x9;&#x9;SELECT&#xD;&#xA;&#x9;&#x9;&#x9;&#x9; T.file_seq,&#xD;&#xA;&#x9;&#x9;&#x9;&#x9; T.file_type,&#xD;&#xA;&#x9;&#x9;&#x9;&#x9; T.file_series,&#xD;&#xA;&#x9;&#x9;&#x9;&#x9; T.file_nbr,&#xD;&#xA;&#x9;&#x9;&#x9;&#x9; 2,&#xD;&#xA;&#x9;&#x9;&#x9;&#x9; 'Invalid priority country code'&#xD;&#xA;&#x9;&#x9;FROM   [&quot;+ context.intermediateDB + &quot;].[dbo].VW_import_mark_priorities T JOIN  [&quot;+ context.intermediateDB + &quot;].[dbo].VW_import_mark M ON T.file_seq  = M.file_seq&#xD;&#xA;&#x9;&#x9;&#x9; AND&#x9;T.file_type  = M.file_type&#xD;&#xA;&#x9;&#x9;&#x9; AND&#x9;T.file_series  = M.file_series&#xD;&#xA;&#x9;&#x9;&#x9; AND&#x9;T.file_nbr  = M.file_nbr  &#xD;&#xA;&#x9;&#x9;WHERE&#x9; ind_import  = 0&#xD;&#xA;&#x9;&#x9; AND&#x9;COUNTRY_CODE  COLLATE DATABASE_DEFAULT not in&#xD;&#xA;&#x9;&#x9;&#x9;(&#xD;&#xA;&#x9;&#x9; &#x9;SELECT COUNTRY_CODE&#xD;&#xA;&#x9;&#x9;&#x9;FROM  CF_GEO_COUNTRY &#xD;&#xA;&#x9;&#x9;&#x9;)&#xD;&#xA;&#x9;&#x9;&#xD;&#xA;&#x9;&#x9;/* Generate work table with FILE_SEQ, FILE_TYPE, FILE_SERIES, FILE_NBR, APPLICATION_ID and COUNT(*) */&#xD;&#xA;&#x9;&#x9;&#xD;&#xA;&#x9;&#x9;&#xD;&#xA;&#x9;&#x9;DECLARE @EXEC_IMMEDIATE_VAR2 VARCHAR (4000)&#xD;&#xA;&#x9;&#x9;SELECT @EXEC_IMMEDIATE_VAR2  = 'TRUNCATE TABLE wrk_file_priority_count' &#xD;&#xA;&#xD;&#xA;&#x9;&#x9;EXECUTE (@EXEC_IMMEDIATE_VAR2)&#xD;&#xA;&#x9;&#x9;INSERT INTO  wrk_file_priority_count    &#xD;&#xA;&#x9;&#x9;SELECT&#xD;&#xA;&#x9;&#x9;&#x9;&#x9; FILE_SEQ,&#xD;&#xA;&#x9;&#x9;&#x9;&#x9; FILE_TYPE,&#xD;&#xA;&#x9;&#x9;&#x9;&#x9; FILE_SERIES,&#xD;&#xA;&#x9;&#x9;&#x9;&#x9; FILE_NBR,&#xD;&#xA;&#x9;&#x9;&#x9;&#x9; APPLICATION_ID,&#xD;&#xA;&#x9;&#x9;&#x9;&#x9; COUNT(*) count1&#xD;&#xA;&#x9;&#x9;FROM   [&quot;+ context.intermediateDB + &quot;].[dbo].VW_IMPORT_MARK_PRIORITIES &#xD;&#xA;&#x9;&#x9;GROUP BY FILE_SEQ,&#xD;&#xA;&#x9;&#x9;&#x9; FILE_TYPE,&#xD;&#xA;&#x9;&#x9;&#x9; FILE_SERIES,&#xD;&#xA;&#x9;&#x9;&#x9; FILE_NBR,&#xD;&#xA;&#x9;&#x9;&#x9;  APPLICATION_ID &#xD;&#xA;&#x9;&#x9;&#xD;&#xA;&#x9;&#x9;/* Duplicate application id: where exists corresponding tuple in the work table with the same APPLICATION_ID &#xD;&#xA;&#x9;&#x9;       and with count column > 1, message 'Several priorities use the same application id' */&#xD;&#xA;&#x9;&#x9;INSERT INTO   [&quot;+ context.intermediateDB + &quot;].[dbo].VW_IMPORT_MARK_RESULT   &#xD;&#xA;&#x9;&#x9;&#x9;&#x9;( file_seq , &#xD;&#xA;&#x9;&#x9;&#x9;&#x9;file_type , &#xD;&#xA;&#x9;&#x9;&#x9;&#x9;file_series , &#xD;&#xA;&#x9;&#x9;&#x9;&#x9;file_nbr , &#xD;&#xA;&#x9;&#x9;&#x9;&#x9;ind_import , &#xD;&#xA;&#x9;&#x9;&#x9;&#x9;msg_import )  &#xD;&#xA;&#x9;&#x9;SELECT&#xD;&#xA;&#x9;&#x9;&#x9;&#x9; M.file_seq,&#xD;&#xA;&#x9;&#x9;&#x9;&#x9; M.file_type,&#xD;&#xA;&#x9;&#x9;&#x9;&#x9; M.file_series,&#xD;&#xA;&#x9;&#x9;&#x9;&#x9; M.file_nbr,&#xD;&#xA;&#x9;&#x9;&#x9;&#x9; 2,&#xD;&#xA;&#x9;&#x9;&#x9;&#x9; 'Several priorities use the same application id'&#xD;&#xA;&#x9;&#x9;FROM   [&quot;+ context.intermediateDB + &quot;].[dbo].VW_import_mark_priorities T JOIN  [&quot;+ context.intermediateDB + &quot;].[dbo].VW_import_mark M ON T.file_seq  = M.file_seq&#xD;&#xA;&#x9;&#x9;&#x9; AND&#x9;T.file_type  = M.file_type&#xD;&#xA;&#x9;&#x9;&#x9; AND&#x9;T.file_series  = M.file_series&#xD;&#xA;&#x9;&#x9;&#x9; AND&#x9;T.file_nbr  = M.file_nbr  JOIN wrk_file_priority_count W ON T.file_seq  = W.file_seq&#xD;&#xA;&#x9;&#x9;&#x9; AND&#x9;T.file_type  = W.file_type&#xD;&#xA;&#x9;&#x9;&#x9; AND&#x9;T.file_series  = W.file_series&#xD;&#xA;&#x9;&#x9;&#x9; AND&#x9;T.file_nbr  = W.file_nbr&#xD;&#xA;&#x9;&#x9;&#x9; AND&#x9;T.application_id  = W.application_id  &#xD;&#xA;&#x9;&#x9;WHERE&#x9; ind_import  = 0&#xD;&#xA;&#x9;&#x9; AND&#x9;count1  > 1&#xD;&#xA;&#x9;&#x9;&#xD;&#xA;&#x9;&#x9;/* 1.1.5  [&quot;+ context.intermediateDB + &quot;].[dbo].VW_IMPORT_MARK_VIENNA_CLASSES validations */&#xD;&#xA;&#x9;&#x9;/* Category: if VIENNA_CATEGORY / VIENNA_EDITION_CODE not exists in CF_CLASS_VIENNA_CATEG, message 'Invalid Vienna category / edition codes' */&#xD;&#xA;&#x9;&#x9;/* IPAS-1273/1341 Added VIENNA_EDITION_CODE for Vienna classification*/&#xD;&#xA;&#x9;&#x9;INSERT INTO   [&quot;+ context.intermediateDB + &quot;].[dbo].VW_IMPORT_MARK_RESULT   &#xD;&#xA;&#x9;&#x9;&#x9;&#x9;( file_seq , &#xD;&#xA;&#x9;&#x9;&#x9;&#x9;file_type , &#xD;&#xA;&#x9;&#x9;&#x9;&#x9;file_series , &#xD;&#xA;&#x9;&#x9;&#x9;&#x9;file_nbr , &#xD;&#xA;&#x9;&#x9;&#x9;&#x9;ind_import , &#xD;&#xA;&#x9;&#x9;&#x9;&#x9;msg_import )  &#xD;&#xA;&#x9;&#x9;SELECT&#xD;&#xA;&#x9;&#x9;&#x9;&#x9; T.file_seq,&#xD;&#xA;&#x9;&#x9;&#x9;&#x9; T.file_type,&#xD;&#xA;&#x9;&#x9;&#x9;&#x9; T.file_series,&#xD;&#xA;&#x9;&#x9;&#x9;&#x9; T.file_nbr,&#xD;&#xA;&#x9;&#x9;&#x9;&#x9; 2,&#xD;&#xA;&#x9;&#x9;&#x9;&#x9; 'Invalid Vienna category / edition codes'&#xD;&#xA;&#x9;&#x9;FROM   [&quot;+ context.intermediateDB + &quot;].[dbo].VW_import_mark_vienna_classes T JOIN  [&quot;+ context.intermediateDB + &quot;].[dbo].VW_import_mark M ON T.file_seq  = M.file_seq&#xD;&#xA;&#x9;&#x9;&#x9; AND&#x9;T.file_type  = M.file_type&#xD;&#xA;&#x9;&#x9;&#x9; AND&#x9;T.file_series  = M.file_series&#xD;&#xA;&#x9;&#x9;&#x9; AND&#x9;T.file_nbr  = M.file_nbr  &#xD;&#xA;&#x9;&#x9;WHERE&#x9; ind_import  = 0&#xD;&#xA;&#x9;    AND NOT EXISTS&#xD;&#xA;&#x9;&#x9;&#x9;(&#xD;&#xA;&#x9;&#x9; &#x9; SELECT&#x9;*&#xD;&#xA;&#x9;&#x9;&#x9; FROM  CF_CLASS_VIENNA_CATEG &#xD;&#xA;&#x9;&#x9;&#x9; WHERE&#x9; CF_CLASS_VIENNA_CATEG.VIENNA_CATEGORY_CODE  = T.VIENNA_CATEGORY&#x9;&#x9;&#x9; &#xD;&#xA;&#x9;&#x9;&#x9; AND&#x9;CF_CLASS_VIENNA_CATEG.VIENNA_EDITION_CODE   = T.VIENNA_EDITION_CODE&#xD;&#xA;&#x9;&#x9;&#x9;)&#x9;&#x9;&#x9;&#xD;&#xA;&#x9;&#x9;&#xD;&#xA;&#x9;&#x9;/* Division: if VIENNA_CATEGORY / VIENNA_DIVISION / VIENNA_EDITION_CODE not exists in CF_CLASS_VIENNA_DIVIS, &#xD;&#xA;&#x9;&#x9;       message 'Invalid Vienna category / division / edition codes' */&#xD;&#xA;&#x9;&#x9;/* IPAS-1273/1341 Added VIENNA_EDITION_CODE for Vienna classification*/&#x9;   &#xD;&#xA;&#x9;&#x9;INSERT INTO   [&quot;+ context.intermediateDB + &quot;].[dbo].VW_IMPORT_MARK_RESULT   &#xD;&#xA;&#x9;&#x9;&#x9;&#x9;( file_seq , &#xD;&#xA;&#x9;&#x9;&#x9;&#x9;file_type , &#xD;&#xA;&#x9;&#x9;&#x9;&#x9;file_series , &#xD;&#xA;&#x9;&#x9;&#x9;&#x9;file_nbr , &#xD;&#xA;&#x9;&#x9;&#x9;&#x9;ind_import , &#xD;&#xA;&#x9;&#x9;&#x9;&#x9;msg_import )  &#xD;&#xA;&#x9;&#x9;SELECT&#xD;&#xA;&#x9;&#x9;&#x9;&#x9; T.file_seq,&#xD;&#xA;&#x9;&#x9;&#x9;&#x9; T.file_type,&#xD;&#xA;&#x9;&#x9;&#x9;&#x9; T.file_series,&#xD;&#xA;&#x9;&#x9;&#x9;&#x9; T.file_nbr,&#xD;&#xA;&#x9;&#x9;&#x9;&#x9; 2,&#xD;&#xA;&#x9;&#x9;&#x9;&#x9; 'Invalid Vienna category / division / edition codes'&#xD;&#xA;&#x9;&#x9;FROM   [&quot;+ context.intermediateDB + &quot;].[dbo].VW_import_mark_vienna_classes T JOIN  [&quot;+ context.intermediateDB + &quot;].[dbo].VW_import_mark M ON T.file_seq  = M.file_seq&#xD;&#xA;&#x9;&#x9;&#x9; AND&#x9;T.file_type  = M.file_type&#xD;&#xA;&#x9;&#x9;&#x9; AND&#x9;T.file_series  = M.file_series&#xD;&#xA;&#x9;&#x9;&#x9; AND&#x9;T.file_nbr  = M.file_nbr  &#xD;&#xA;&#x9;&#x9;WHERE&#x9; ind_import  = 0&#xD;&#xA;&#x9;&#x9; AND&#x9; NOT EXISTS&#xD;&#xA;&#x9;&#x9;&#x9;(&#xD;&#xA;&#x9;&#x9; &#x9;SELECT&#x9;*&#xD;&#xA;&#x9;&#x9;&#x9;FROM  CF_CLASS_VIENNA_DIVIS &#xD;&#xA;&#x9;&#x9;&#x9;WHERE&#x9; CF_CLASS_VIENNA_DIVIS.VIENNA_CATEGORY_CODE  = T.VIENNA_CATEGORY&#xD;&#xA;&#x9;&#x9;&#x9; AND&#x9;CF_CLASS_VIENNA_DIVIS.VIENNA_DIVISION_CODE   = T.VIENNA_DIVISION&#xD;&#xA;&#x9;&#x9;&#x9; AND&#x9;CF_CLASS_VIENNA_DIVIS.VIENNA_EDITION_CODE   = T.VIENNA_EDITION_CODE&#xD;&#xA;&#x9;&#x9;&#x9;)&#xD;&#xA;&#x9;&#x9;&#xD;&#xA;&#x9;&#x9;/* Section: if VIENNA_SECTION is not null and VIENNA_CATEGORY / VIENNA_DIVISION / VIENNA_SECTION / VIENNA_EDITION_CODE&#xD;&#xA;&#x9;&#x9;       not exists in CF_CLASS_VIENNA_SECT, message 'Invalid Vienna category / division / section / edition codes' */&#xD;&#xA;&#x9;&#x9;/* IPAS-1273/1341 Added VIENNA_EDITION_CODE for Vienna classification*/&#x9;   &#xD;&#xA;&#x9;&#x9;INSERT INTO   [&quot;+ context.intermediateDB + &quot;].[dbo].VW_IMPORT_MARK_RESULT   &#xD;&#xA;&#x9;&#x9;&#x9;&#x9;( file_seq , &#xD;&#xA;&#x9;&#x9;&#x9;&#x9;file_type , &#xD;&#xA;&#x9;&#x9;&#x9;&#x9;file_series , &#xD;&#xA;&#x9;&#x9;&#x9;&#x9;file_nbr , &#xD;&#xA;&#x9;&#x9;&#x9;&#x9;ind_import , &#xD;&#xA;&#x9;&#x9;&#x9;&#x9;msg_import )  &#xD;&#xA;&#x9;&#x9;SELECT&#xD;&#xA;&#x9;&#x9;&#x9;&#x9; T.file_seq,&#xD;&#xA;&#x9;&#x9;&#x9;&#x9; T.file_type,&#xD;&#xA;&#x9;&#x9;&#x9;&#x9; T.file_series,&#xD;&#xA;&#x9;&#x9;&#x9;&#x9; T.file_nbr,&#xD;&#xA;&#x9;&#x9;&#x9;&#x9; 2,&#xD;&#xA;&#x9;&#x9;&#x9;&#x9; 'Invalid Vienna category / division / section / edition codes'&#xD;&#xA;&#x9;&#x9;FROM   [&quot;+ context.intermediateDB + &quot;].[dbo].VW_import_mark_vienna_classes T JOIN  [&quot;+ context.intermediateDB + &quot;].[dbo].VW_import_mark M ON T.file_seq  = M.file_seq&#xD;&#xA;&#x9;&#x9;&#x9; AND&#x9;T.file_type  = M.file_type&#xD;&#xA;&#x9;&#x9;&#x9; AND&#x9;T.file_series  = M.file_series&#xD;&#xA;&#x9;&#x9;&#x9; AND&#x9;T.file_nbr  = M.file_nbr  &#xD;&#xA;&#x9;&#x9;WHERE&#x9; ind_import  = 0&#xD;&#xA;&#x9;&#x9; AND&#x9;VIENNA_SECTION  is not null&#xD;&#xA;&#x9;&#x9; AND&#x9; NOT EXISTS&#xD;&#xA;&#x9;&#x9;&#x9;(&#xD;&#xA;&#x9;&#x9; &#x9;SELECT *&#xD;&#xA;&#x9;&#x9;&#x9;FROM  CF_CLASS_VIENNA_SECT &#xD;&#xA;&#x9;&#x9;&#x9;WHERE&#x9; CF_CLASS_VIENNA_SECT.VIENNA_CATEGORY_CODE  = T.VIENNA_CATEGORY&#xD;&#xA;&#x9;&#x9;&#x9; AND&#x9;CF_CLASS_VIENNA_SECT.VIENNA_DIVISION_CODE   = T.VIENNA_DIVISION&#xD;&#xA;&#x9;&#x9;&#x9; AND&#x9;CF_CLASS_VIENNA_SECT.VIENNA_SECTION_CODE    = T.VIENNA_SECTION&#xD;&#xA;&#x9;&#x9;&#x9; AND&#x9;CF_CLASS_VIENNA_SECT.VIENNA_EDITION_CODE   = T.VIENNA_EDITION_CODE&#xD;&#xA;&#x9;&#x9;&#x9;)&#xD;&#xA;&#x9;&#x9;&#xD;&#xA;&#x9;&#x9;/* If VIENNA_SECTION is null and the configuration parameter 'VienaElementoOpcional' indicates N, &#xD;&#xA;&#x9;&#x9;       message 'Current configuration indicates that Vienna section is required' */&#xD;&#xA;&#x9;&#x9;INSERT INTO   [&quot;+ context.intermediateDB + &quot;].[dbo].VW_IMPORT_MARK_RESULT   &#xD;&#xA;&#x9;&#x9;&#x9;&#x9;( file_seq , &#xD;&#xA;&#x9;&#x9;&#x9;&#x9;file_type , &#xD;&#xA;&#x9;&#x9;&#x9;&#x9;file_series , &#xD;&#xA;&#x9;&#x9;&#x9;&#x9;file_nbr , &#xD;&#xA;&#x9;&#x9;&#x9;&#x9;ind_import , &#xD;&#xA;&#x9;&#x9;&#x9;&#x9;msg_import )  &#xD;&#xA;&#x9;&#x9;SELECT&#xD;&#xA;&#x9;&#x9;&#x9;&#x9; T.file_seq,&#xD;&#xA;&#x9;&#x9;&#x9;&#x9; T.file_type,&#xD;&#xA;&#x9;&#x9;&#x9;&#x9; T.file_series,&#xD;&#xA;&#x9;&#x9;&#x9;&#x9; T.file_nbr,&#xD;&#xA;&#x9;&#x9;&#x9;&#x9; 2,&#xD;&#xA;&#x9;&#x9;&#x9;&#x9; 'Current configuration indicates that Vienna section is required'&#xD;&#xA;&#x9;&#x9;FROM   [&quot;+ context.intermediateDB + &quot;].[dbo].VW_import_mark_vienna_classes T JOIN  [&quot;+ context.intermediateDB + &quot;].[dbo].VW_import_mark M ON T.file_seq  = M.file_seq&#xD;&#xA;&#x9;&#x9;&#x9; AND&#x9;T.file_type  = M.file_type&#xD;&#xA;&#x9;&#x9;&#x9; AND&#x9;T.file_series  = M.file_series&#xD;&#xA;&#x9;&#x9;&#x9; AND&#x9;T.file_nbr  = M.file_nbr ,&#xD;&#xA;&#x9;&#x9;&#x9; CF_config_param &#xD;&#xA;&#x9;&#x9;WHERE&#x9; ind_import  = 0&#xD;&#xA;&#x9;&#x9; AND&#x9;VIENNA_SECTION  is null&#xD;&#xA;&#x9;&#x9; AND&#x9;config_code  = 'VienaElementoOpcional'&#xD;&#xA;&#x9;&#x9; AND&#x9;value  = 'N'&#xD;&#xA;&#x9;&#x9;&#xD;&#xA;&#x9;&#x9;/* Generate work table with VIENNA_CATEGORY, VIENNA_DIVISION, VIENNA_SECTION and COUNT(*) */&#xD;&#xA;&#x9;&#x9;/* IPAS-1273/1341 Added VIENNA_EDITION_CODE for Vienna classification*/&#xD;&#xA;&#x9;&#x9;&#xD;&#xA;&#x9;&#x9;DECLARE @EXEC_IMMEDIATE_VAR3 VARCHAR (4000)&#xD;&#xA;&#x9;&#x9;SELECT @EXEC_IMMEDIATE_VAR3  = 'TRUNCATE TABLE wrk_file_vienna_count' &#xD;&#xA;&#xD;&#xA;&#x9;&#x9;EXECUTE (@EXEC_IMMEDIATE_VAR3)&#xD;&#xA;&#x9;&#x9;INSERT INTO  wrk_file_vienna_count    &#xD;&#xA;&#x9;&#x9;SELECT&#xD;&#xA;&#x9;&#x9;&#x9;&#x9; FILE_SEQ,&#xD;&#xA;&#x9;&#x9;&#x9;&#x9; FILE_TYPE,&#xD;&#xA;&#x9;&#x9;&#x9;&#x9; FILE_SERIES,&#xD;&#xA;&#x9;&#x9;&#x9;&#x9; FILE_NBR,&#xD;&#xA;&#x9;&#x9;&#x9;&#x9; VIENNA_EDITION_CODE,&#xD;&#xA;&#x9;&#x9;&#x9;&#x9; VIENNA_CATEGORY,&#xD;&#xA;&#x9;&#x9;&#x9;&#x9; VIENNA_DIVISION,&#xD;&#xA;&#x9;&#x9;&#x9;&#x9; VIENNA_SECTION,&#xD;&#xA;&#x9;&#x9;&#x9;&#x9; COUNT(*) count1&#xD;&#xA;&#x9;&#x9;FROM   [&quot;+ context.intermediateDB + &quot;].[dbo].VW_IMPORT_MARK_VIENNA_CLASSES &#xD;&#xA;&#x9;&#x9;GROUP BY FILE_SEQ,&#xD;&#xA;&#x9;&#x9;&#x9; FILE_TYPE,&#xD;&#xA;&#x9;&#x9;&#x9; FILE_SERIES,&#xD;&#xA;&#x9;&#x9;&#x9; FILE_NBR,&#xD;&#xA;&#x9;&#x9;&#x9; VIENNA_EDITION_CODE,&#xD;&#xA;&#x9;&#x9;&#x9; VIENNA_CATEGORY,&#xD;&#xA;&#x9;&#x9;&#x9; VIENNA_DIVISION,&#xD;&#xA;&#x9;&#x9;&#x9;  VIENNA_SECTION &#xD;&#xA;&#x9;&#x9;&#xD;&#xA;&#x9;&#x9;/* If several tuples exist for the same Vienna codes, message 'Several Vienna classes with the same number' */&#xD;&#xA;&#x9;&#x9;INSERT INTO   [&quot;+ context.intermediateDB + &quot;].[dbo].VW_IMPORT_MARK_RESULT   &#xD;&#xA;&#x9;&#x9;&#x9;&#x9;( file_seq , &#xD;&#xA;&#x9;&#x9;&#x9;&#x9;file_type , &#xD;&#xA;&#x9;&#x9;&#x9;&#x9;file_series , &#xD;&#xA;&#x9;&#x9;&#x9;&#x9;file_nbr , &#xD;&#xA;&#x9;&#x9;&#x9;&#x9;ind_import , &#xD;&#xA;&#x9;&#x9;&#x9;&#x9;msg_import )  &#xD;&#xA;&#x9;&#x9;SELECT&#xD;&#xA;&#x9;&#x9;&#x9;&#x9; M.file_seq,&#xD;&#xA;&#x9;&#x9;&#x9;&#x9; M.file_type,&#xD;&#xA;&#x9;&#x9;&#x9;&#x9; M.file_series,&#xD;&#xA;&#x9;&#x9;&#x9;&#x9; M.file_nbr,&#xD;&#xA;&#x9;&#x9;&#x9;&#x9; 2,&#xD;&#xA;&#x9;&#x9;&#x9;&#x9; 'Several Vienna classes with the same number'&#xD;&#xA;&#x9;&#x9;FROM   [&quot;+ context.intermediateDB + &quot;].[dbo].VW_import_mark M JOIN wrk_file_vienna_count W ON M.file_seq  = W.file_seq&#xD;&#xA;&#x9;&#x9;&#x9; AND&#x9;M.file_type  = W.file_type&#xD;&#xA;&#x9;&#x9;&#x9; AND&#x9;M.file_series  = W.file_series&#xD;&#xA;&#x9;&#x9;&#x9; AND&#x9;M.file_nbr  = W.file_nbr  &#xD;&#xA;&#x9;&#x9;WHERE&#x9; ind_import  = 0&#xD;&#xA;&#x9;&#x9; AND&#x9;count1  > 1&#xD;&#xA;&#x9;&#x9;&#xD;&#xA;&#x9;&#x9;/* 1.1.6  [&quot;+ context.intermediateDB + &quot;].[dbo].VW_IMPORT_MARK_NICE_CLASSES validations */&#xD;&#xA;&#x9;&#x9;/* Generate work table with FILE_SEQ, FILE_TYPE, FILE_SERIES, FILE_NBR, NICE_CLASS_NBR and COUNT(*) */&#xD;&#xA;&#x9;&#x9;/* IPAS-1273/1341 Added NICE_CLASS_VERSION for NICE classification */&#xD;&#xA;&#x9;&#x9;&#xD;&#xA;&#x9;&#x9;DECLARE @EXEC_IMMEDIATE_VAR4 VARCHAR (4000)&#xD;&#xA;&#x9;&#x9;SELECT @EXEC_IMMEDIATE_VAR4  = 'TRUNCATE TABLE wrk_file_nice_count' &#xD;&#xA;&#xD;&#xA;&#x9;&#x9;EXECUTE (@EXEC_IMMEDIATE_VAR4)&#xD;&#xA;&#x9;&#x9;INSERT INTO  wrk_file_nice_count    &#xD;&#xA;&#x9;&#x9;SELECT&#xD;&#xA;&#x9;&#x9;&#x9;&#x9; FILE_SEQ,&#xD;&#xA;&#x9;&#x9;&#x9;&#x9; FILE_TYPE,&#xD;&#xA;&#x9;&#x9;&#x9;&#x9; FILE_SERIES,&#xD;&#xA;&#x9;&#x9;&#x9;&#x9; FILE_NBR,&#xD;&#xA;&#x9;&#x9;&#x9;&#x9; NICE_CLASS_VERSION,&#xD;&#xA;&#x9;&#x9;&#x9;&#x9; NICE_CLASS_NBR,&#x9;&#x9;&#x9;&#x9; &#xD;&#xA;&#x9;&#x9;&#x9;&#x9; COUNT(*) count1&#xD;&#xA;&#x9;&#x9;FROM   [&quot;+ context.intermediateDB + &quot;].[dbo].VW_IMPORT_MARK_NICE_CLASSES &#xD;&#xA;&#x9;&#x9;GROUP BY FILE_SEQ,&#xD;&#xA;&#x9;&#x9;&#x9; FILE_TYPE,&#xD;&#xA;&#x9;&#x9;&#x9; FILE_SERIES,&#xD;&#xA;&#x9;&#x9;&#x9; FILE_NBR,&#xD;&#xA;&#x9;&#x9;&#x9; NICE_CLASS_VERSION,&#xD;&#xA;&#x9;&#x9;&#x9;  NICE_CLASS_NBR &#xD;&#xA;&#x9;&#x9;&#xD;&#xA;&#x9;&#x9;/* NICE_CLASS_NBR: if not exists in CF_CLASS_NICE, message 'Invalid Nice class number / version' */&#xD;&#xA;&#x9;&#x9;/* IPAS-1273/1341 Added NICE_CLASS_VERSION for NICE classification */&#xD;&#xA;&#x9;&#x9;INSERT INTO   [&quot;+ context.intermediateDB + &quot;].[dbo].VW_IMPORT_MARK_RESULT   &#xD;&#xA;&#x9;&#x9;&#x9;&#x9;( file_seq , &#xD;&#xA;&#x9;&#x9;&#x9;&#x9;file_type , &#xD;&#xA;&#x9;&#x9;&#x9;&#x9;file_series , &#xD;&#xA;&#x9;&#x9;&#x9;&#x9;file_nbr , &#xD;&#xA;&#x9;&#x9;&#x9;&#x9;ind_import , &#xD;&#xA;&#x9;&#x9;&#x9;&#x9;msg_import )  &#xD;&#xA;&#x9;&#x9;SELECT&#xD;&#xA;&#x9;&#x9;&#x9;&#x9; T.file_seq,&#xD;&#xA;&#x9;&#x9;&#x9;&#x9; T.file_type,&#xD;&#xA;&#x9;&#x9;&#x9;&#x9; T.file_series,&#xD;&#xA;&#x9;&#x9;&#x9;&#x9; T.file_nbr,&#xD;&#xA;&#x9;&#x9;&#x9;&#x9; 2,&#xD;&#xA;&#x9;&#x9;&#x9;&#x9; 'Invalid Nice class number / version'&#xD;&#xA;&#x9;&#x9;FROM   [&quot;+ context.intermediateDB + &quot;].[dbo].VW_import_mark_nice_classes T JOIN  [&quot;+ context.intermediateDB + &quot;].[dbo].VW_import_mark M ON T.file_seq  = M.file_seq&#xD;&#xA;&#x9;&#x9;&#x9; AND&#x9;T.file_type  = M.file_type&#xD;&#xA;&#x9;&#x9;&#x9; AND&#x9;T.file_series  = M.file_series&#xD;&#xA;&#x9;&#x9;&#x9; AND&#x9;T.file_nbr  = M.file_nbr  &#xD;&#xA;&#x9;&#x9;WHERE&#x9; ind_import  = 0&#xD;&#xA;&#x9;&#x9;AND NOT EXISTS&#xD;&#xA;&#x9;&#x9;&#x9;(&#xD;&#xA;&#x9;&#x9; &#x9; SELECT&#x9;*&#xD;&#xA;&#x9;&#x9;&#x9; FROM   CF_CLASS_NICE &#xD;&#xA;&#x9;&#x9;&#x9; WHERE&#x9;CF_CLASS_NICE.NICE_CLASS_CODE  = T.NICE_CLASS_NBR&#x9;&#x9;&#x9; &#xD;&#xA;&#x9;&#x9;&#x9; AND&#x9;CF_CLASS_NICE.NICE_CLASS_VERSION   = T.NICE_CLASS_VERSION&#xD;&#xA;&#x9;&#x9;&#x9;)&#x9;&#x9;&#xD;&#xA;&#x9;&#x9;&#xD;&#xA;&#x9;&#x9;/* NICE_CLASS_STATUS: if not exists in CF_PROCESS_RESULT_TYPE, message 'Invalid Nice class status' */&#xD;&#xA;&#x9;&#x9;INSERT INTO   [&quot;+ context.intermediateDB + &quot;].[dbo].VW_IMPORT_MARK_RESULT   &#xD;&#xA;&#x9;&#x9;&#x9;&#x9;( file_seq , &#xD;&#xA;&#x9;&#x9;&#x9;&#x9;file_type , &#xD;&#xA;&#x9;&#x9;&#x9;&#x9;file_series , &#xD;&#xA;&#x9;&#x9;&#x9;&#x9;file_nbr , &#xD;&#xA;&#x9;&#x9;&#x9;&#x9;ind_import , &#xD;&#xA;&#x9;&#x9;&#x9;&#x9;msg_import )  &#xD;&#xA;&#x9;&#x9;SELECT&#xD;&#xA;&#x9;&#x9;&#x9;&#x9; T.file_seq,&#xD;&#xA;&#x9;&#x9;&#x9;&#x9; T.file_type,&#xD;&#xA;&#x9;&#x9;&#x9;&#x9; T.file_series,&#xD;&#xA;&#x9;&#x9;&#x9;&#x9; T.file_nbr,&#xD;&#xA;&#x9;&#x9;&#x9;&#x9; 2,&#xD;&#xA;&#x9;&#x9;&#x9;&#x9; 'Invalid Nice class status'&#xD;&#xA;&#x9;&#x9;FROM   [&quot;+ context.intermediateDB + &quot;].[dbo].VW_import_mark_nice_classes T JOIN  [&quot;+ context.intermediateDB + &quot;].[dbo].VW_import_mark M ON T.file_seq  = M.file_seq&#xD;&#xA;&#x9;&#x9;&#x9; AND&#x9;T.file_type  = M.file_type&#xD;&#xA;&#x9;&#x9;&#x9; AND&#x9;T.file_series  = M.file_series&#xD;&#xA;&#x9;&#x9;&#x9; AND&#x9;T.file_nbr  = M.file_nbr  &#xD;&#xA;&#x9;&#x9;WHERE&#x9; ind_import  = 0&#xD;&#xA;&#x9;&#x9; AND&#x9;NICE_CLASS_STATUS COLLATE DATABASE_DEFAULT not in&#xD;&#xA;&#x9;&#x9;&#x9;(&#xD;&#xA;&#x9;&#x9; &#x9;SELECT NICE_CLASS_STATUS_WCODE&#xD;&#xA;&#x9;&#x9;&#x9;FROM  CF_PROCESS_RESULT_TYPE&#xD;&#xA;&#x9;&#x9;&#x9;)&#xD;&#xA;&#x9;&#x9;&#xD;&#xA;&#xD;&#xA;&#x9;&#x9;/* If several tuples exist for the same NICE_CLASS_NBR, message 'Several Nice classes with the same number' */&#xD;&#xA;&#x9;&#x9;INSERT INTO   [&quot;+ context.intermediateDB + &quot;].[dbo].VW_IMPORT_MARK_RESULT   &#xD;&#xA;&#x9;&#x9;&#x9;&#x9;( file_seq , &#xD;&#xA;&#x9;&#x9;&#x9;&#x9;file_type , &#xD;&#xA;&#x9;&#x9;&#x9;&#x9;file_series , &#xD;&#xA;&#x9;&#x9;&#x9;&#x9;file_nbr , &#xD;&#xA;&#x9;&#x9;&#x9;&#x9;ind_import , &#xD;&#xA;&#x9;&#x9;&#x9;&#x9;msg_import )  &#xD;&#xA;&#x9;&#x9;SELECT&#xD;&#xA;&#x9;&#x9;&#x9;&#x9; M.file_seq,&#xD;&#xA;&#x9;&#x9;&#x9;&#x9; M.file_type,&#xD;&#xA;&#x9;&#x9;&#x9;&#x9; M.file_series,&#xD;&#xA;&#x9;&#x9;&#x9;&#x9; M.file_nbr,&#xD;&#xA;&#x9;&#x9;&#x9;&#x9; 2,&#xD;&#xA;&#x9;&#x9;&#x9;&#x9; 'Several Nice classes with the same number'&#xD;&#xA;&#x9;&#x9;FROM   [&quot;+ context.intermediateDB + &quot;].[dbo].VW_import_mark M JOIN wrk_file_nice_count W ON M.file_seq  = W.file_seq&#xD;&#xA;&#x9;&#x9;&#x9; AND&#x9;M.file_type  = W.file_type&#xD;&#xA;&#x9;&#x9;&#x9; AND&#x9;M.file_series  = W.file_series&#xD;&#xA;&#x9;&#x9;&#x9; AND&#x9;M.file_nbr  = W.file_nbr  &#xD;&#xA;&#x9;&#x9;WHERE&#x9; ind_import  = 0&#xD;&#xA;&#x9;&#x9; AND&#x9;count1  > 1&#xD;&#xA;&#x9;&#x9;&#xD;&#xA;&#x9;&#x9;/* 1.1.7  [&quot;+ context.intermediateDB + &quot;].[dbo].VW_IMPORT_MARK_NATL_CLASSES validations */&#xD;&#xA;&#x9;&#x9;/* NATIONAL_CLASS_NBR: if not exists in CF_CLASS_NATL, message 'Invalid national goods and services class number' */&#xD;&#xA;&#x9;&#x9;INSERT INTO   [&quot;+ context.intermediateDB + &quot;].[dbo].VW_IMPORT_MARK_RESULT   &#xD;&#xA;&#x9;&#x9;&#x9;&#x9;( file_seq , &#xD;&#xA;&#x9;&#x9;&#x9;&#x9;file_type , &#xD;&#xA;&#x9;&#x9;&#x9;&#x9;file_series , &#xD;&#xA;&#x9;&#x9;&#x9;&#x9;file_nbr , &#xD;&#xA;&#x9;&#x9;&#x9;&#x9;ind_import , &#xD;&#xA;&#x9;&#x9;&#x9;&#x9;msg_import )  &#xD;&#xA;&#x9;&#x9;SELECT&#xD;&#xA;&#x9;&#x9;&#x9;&#x9; T.file_seq,&#xD;&#xA;&#x9;&#x9;&#x9;&#x9; T.file_type,&#xD;&#xA;&#x9;&#x9;&#x9;&#x9; T.file_series,&#xD;&#xA;&#x9;&#x9;&#x9;&#x9; T.file_nbr,&#xD;&#xA;&#x9;&#x9;&#x9;&#x9; 2,&#xD;&#xA;&#x9;&#x9;&#x9;&#x9; 'Invalid national goods and services class number'&#xD;&#xA;&#x9;&#x9;FROM   [&quot;+ context.intermediateDB + &quot;].[dbo].VW_import_mark_natl_classes T JOIN  [&quot;+ context.intermediateDB + &quot;].[dbo].VW_import_mark M ON T.file_seq  = M.file_seq&#xD;&#xA;&#x9;&#x9;&#x9; AND&#x9;T.file_type  = M.file_type&#xD;&#xA;&#x9;&#x9;&#x9; AND&#x9;T.file_series  = M.file_series&#xD;&#xA;&#x9;&#x9;&#x9; AND&#x9;T.file_nbr  = M.file_nbr  &#xD;&#xA;&#x9;&#x9;WHERE&#x9; ind_import  = 0&#xD;&#xA;&#x9;&#x9; AND&#x9;NATIONAL_CLASS_NBR  not in&#xD;&#xA;&#x9;&#x9;&#x9;(&#xD;&#xA;&#x9;&#x9; &#x9;SELECT NATL_CLASS_CODE&#xD;&#xA;&#x9;&#x9;&#x9;FROM  CF_CLASS_NATL &#xD;&#xA;&#x9;&#x9;&#x9;)&#xD;&#xA;&#x9;&#x9;&#xD;&#xA;&#x9;&#x9;/* OJO NATIONAL_CLASS_NBR: if not exists in CF_CLASS_NATL_2_NICE, &#xD;&#xA;&#x9;&#x9;       message 'National goods and services class number not mapped to Nice class(es)' */&#xD;&#xA;&#x9;&#x9;INSERT INTO   [&quot;+ context.intermediateDB + &quot;].[dbo].VW_IMPORT_MARK_RESULT   &#xD;&#xA;&#x9;&#x9;&#x9;&#x9;( file_seq , &#xD;&#xA;&#x9;&#x9;&#x9;&#x9;file_type , &#xD;&#xA;&#x9;&#x9;&#x9;&#x9;file_series , &#xD;&#xA;&#x9;&#x9;&#x9;&#x9;file_nbr , &#xD;&#xA;&#x9;&#x9;&#x9;&#x9;ind_import , &#xD;&#xA;&#x9;&#x9;&#x9;&#x9;msg_import )  &#xD;&#xA;&#x9;&#x9;SELECT&#xD;&#xA;&#x9;&#x9;&#x9;&#x9; T.file_seq,&#xD;&#xA;&#x9;&#x9;&#x9;&#x9; T.file_type,&#xD;&#xA;&#x9;&#x9;&#x9;&#x9; T.file_series,&#xD;&#xA;&#x9;&#x9;&#x9;&#x9; T.file_nbr,&#xD;&#xA;&#x9;&#x9;&#x9;&#x9; 2,&#xD;&#xA;&#x9;&#x9;&#x9;&#x9; 'National goods and services class number not mapped to Nice class(es)'&#xD;&#xA;&#x9;&#x9;FROM   [&quot;+ context.intermediateDB + &quot;].[dbo].VW_import_mark_natl_classes T JOIN  [&quot;+ context.intermediateDB + &quot;].[dbo].VW_import_mark M ON T.file_seq  = M.file_seq&#xD;&#xA;&#x9;&#x9;&#x9; AND&#x9;T.file_type  = M.file_type&#xD;&#xA;&#x9;&#x9;&#x9; AND&#x9;T.file_series  = M.file_series&#xD;&#xA;&#x9;&#x9;&#x9; AND&#x9;T.file_nbr  = M.file_nbr  &#xD;&#xA;&#x9;&#x9;WHERE&#x9; ind_import  = 0&#xD;&#xA;&#x9;&#x9; AND&#x9;NATIONAL_CLASS_NBR  not in&#xD;&#xA;&#x9;&#x9;&#x9;(&#xD;&#xA;&#x9;&#x9; &#x9;SELECT NATL_CLASS_CODE&#xD;&#xA;&#x9;&#x9;&#x9;FROM  CF_CLASS_NATL_2_SEARCH&#xD;&#xA;&#x9;&#x9;&#x9;)&#xD;&#xA;&#x9;&#x9;&#xD;&#xA;&#x9;&#x9;/* If a mark has no Nice and no national class, &#xD;&#xA;&#x9;&#x9;       message 'Mark has no Nice class and no national class' */&#xD;&#xA;&#x9;&#x9;INSERT INTO   [&quot;+ context.intermediateDB + &quot;].[dbo].VW_IMPORT_MARK_RESULT   &#xD;&#xA;&#x9;&#x9;&#x9;&#x9;( file_seq , &#xD;&#xA;&#x9;&#x9;&#x9;&#x9;file_type , &#xD;&#xA;&#x9;&#x9;&#x9;&#x9;file_series , &#xD;&#xA;&#x9;&#x9;&#x9;&#x9;file_nbr , &#xD;&#xA;&#x9;&#x9;&#x9;&#x9;ind_import , &#xD;&#xA;&#x9;&#x9;&#x9;&#x9;msg_import )  &#xD;&#xA;&#x9;&#x9;SELECT&#xD;&#xA;&#x9;&#x9;&#x9;&#x9; M.file_seq,&#xD;&#xA;&#x9;&#x9;&#x9;&#x9; M.file_type,&#xD;&#xA;&#x9;&#x9;&#x9;&#x9; M.file_series,&#xD;&#xA;&#x9;&#x9;&#x9;&#x9; M.file_nbr,&#xD;&#xA;&#x9;&#x9;&#x9;&#x9; 2,&#xD;&#xA;&#x9;&#x9;&#x9;&#x9; 'Mark has no Nice class and no national class'&#xD;&#xA;&#x9;&#x9;FROM   [&quot;+ context.intermediateDB + &quot;].[dbo].VW_import_mark M &#xD;&#xA;&#x9;&#x9;WHERE&#x9; ind_import  = 0&#xD;&#xA;&#x9;&#x9; AND&#x9;NOT   exists&#xD;&#xA;&#x9;&#x9;&#x9;(&#xD;&#xA;&#x9;&#x9; &#x9;SELECT *&#xD;&#xA;&#x9;&#x9;&#x9;FROM   [&quot;+ context.intermediateDB + &quot;].[dbo].VW_IMPORT_MARK_NICE_CLASSES C1 &#xD;&#xA;&#x9;&#x9;&#x9;WHERE&#x9; M.file_seq  = C1.file_seq&#xD;&#xA;&#x9;&#x9;&#x9; AND&#x9;M.file_type  = C1.file_type&#xD;&#xA;&#x9;&#x9;&#x9; AND&#x9;M.file_series  = C1.file_series&#xD;&#xA;&#x9;&#x9;&#x9; AND&#x9;M.file_nbr  = C1.file_nbr&#xD;&#xA;&#x9;&#x9;&#x9;)&#xD;&#xA;&#x9;&#x9; AND&#x9;NOT   exists&#xD;&#xA;&#x9;&#x9;&#x9;(&#xD;&#xA;&#x9;&#x9; &#x9;SELECT *&#xD;&#xA;&#x9;&#x9;&#x9;FROM   [&quot;+ context.intermediateDB + &quot;].[dbo].VW_IMPORT_MARK_NATL_CLASSES C2 &#xD;&#xA;&#x9;&#x9;&#x9;WHERE&#x9; M.file_seq  = C2.file_seq&#xD;&#xA;&#x9;&#x9;&#x9; AND&#x9;M.file_type  = C2.file_type&#xD;&#xA;&#x9;&#x9;&#x9; AND&#x9;M.file_series  = C2.file_series&#xD;&#xA;&#x9;&#x9;&#x9; AND&#x9;M.file_nbr  = C2.file_nbr&#xD;&#xA;&#x9;&#x9;&#x9;)&#xD;&#xA;&#x9;&#x9;&#xD;&#xA;&#x9;&#x9;/* 1.1.8  [&quot;+ context.intermediateDB + &quot;].[dbo].VW_IMPORT_MARK_PAYMENTS validations */&#xD;&#xA;&#x9;&#x9;/* RECEIPT_TYPE: if not exists in CF_RECEIPT_TYPE, message 'Invalid receipt type' */&#xD;&#xA;&#x9;&#x9;INSERT INTO   [&quot;+ context.intermediateDB + &quot;].[dbo].VW_IMPORT_MARK_RESULT   &#xD;&#xA;&#x9;&#x9;&#x9;&#x9;( file_seq , &#xD;&#xA;&#x9;&#x9;&#x9;&#x9;file_type , &#xD;&#xA;&#x9;&#x9;&#x9;&#x9;file_series , &#xD;&#xA;&#x9;&#x9;&#x9;&#x9;file_nbr , &#xD;&#xA;&#x9;&#x9;&#x9;&#x9;ind_import , &#xD;&#xA;&#x9;&#x9;&#x9;&#x9;msg_import )  &#xD;&#xA;&#x9;&#x9;SELECT&#xD;&#xA;&#x9;&#x9;&#x9;&#x9; T.file_seq,&#xD;&#xA;&#x9;&#x9;&#x9;&#x9; T.file_type,&#xD;&#xA;&#x9;&#x9;&#x9;&#x9; T.file_series,&#xD;&#xA;&#x9;&#x9;&#x9;&#x9; T.file_nbr,&#xD;&#xA;&#x9;&#x9;&#x9;&#x9; 2,&#xD;&#xA;&#x9;&#x9;&#x9;&#x9; 'Invalid receipt type'&#xD;&#xA;&#x9;&#x9;FROM   [&quot;+ context.intermediateDB + &quot;].[dbo].VW_import_mark_payments T JOIN  [&quot;+ context.intermediateDB + &quot;].[dbo].VW_import_mark M ON T.file_seq  = M.file_seq&#xD;&#xA;&#x9;&#x9;&#x9; AND&#x9;T.file_type  = M.file_type&#xD;&#xA;&#x9;&#x9;&#x9; AND&#x9;T.file_series  = M.file_series&#xD;&#xA;&#x9;&#x9;&#x9; AND&#x9;T.file_nbr  = M.file_nbr  &#xD;&#xA;&#x9;&#x9;WHERE&#x9; ind_import  = 0&#xD;&#xA;&#x9;&#x9; AND&#x9;RECEIPT_TYPE  COLLATE DATABASE_DEFAULT not in&#xD;&#xA;&#x9;&#x9;&#x9;(&#xD;&#xA;&#x9;&#x9; &#x9;SELECT RECEIPT_TYP&#xD;&#xA;&#x9;&#x9;&#x9;FROM  CF_RECEIPT_TYPE &#xD;&#xA;&#x9;&#x9;&#x9;)&#xD;&#xA;&#x9;&#x9;&#xD;&#xA;&#x9;&#x9;/* CURRENCY_TYPE: if not exists in CF_CURRENCY_TYPE, message 'Invalid currency type' */&#xD;&#xA;&#x9;&#x9;INSERT INTO   [&quot;+ context.intermediateDB + &quot;].[dbo].VW_IMPORT_MARK_RESULT   &#xD;&#xA;&#x9;&#x9;&#x9;&#x9;( file_seq , &#xD;&#xA;&#x9;&#x9;&#x9;&#x9;file_type , &#xD;&#xA;&#x9;&#x9;&#x9;&#x9;file_series , &#xD;&#xA;&#x9;&#x9;&#x9;&#x9;file_nbr , &#xD;&#xA;&#x9;&#x9;&#x9;&#x9;ind_import , &#xD;&#xA;&#x9;&#x9;&#x9;&#x9;msg_import )  &#xD;&#xA;&#x9;&#x9;SELECT&#xD;&#xA;&#x9;&#x9;&#x9;&#x9; T.file_seq,&#xD;&#xA;&#x9;&#x9;&#x9;&#x9; T.file_type,&#xD;&#xA;&#x9;&#x9;&#x9;&#x9; T.file_series,&#xD;&#xA;&#x9;&#x9;&#x9;&#x9; T.file_nbr,&#xD;&#xA;&#x9;&#x9;&#x9;&#x9; 2,&#xD;&#xA;&#x9;&#x9;&#x9;&#x9; 'Invalid currency type'&#xD;&#xA;&#x9;&#x9;FROM   [&quot;+ context.intermediateDB + &quot;].[dbo].VW_import_mark_payments T JOIN  [&quot;+ context.intermediateDB + &quot;].[dbo].VW_import_mark M ON T.file_seq  = M.file_seq&#xD;&#xA;&#x9;&#x9;&#x9; AND&#x9;T.file_type  = M.file_type&#xD;&#xA;&#x9;&#x9;&#x9; AND&#x9;T.file_series  = M.file_series&#xD;&#xA;&#x9;&#x9;&#x9; AND&#x9;T.file_nbr  = M.file_nbr  &#xD;&#xA;&#x9;&#x9;WHERE&#x9; ind_import  = 0&#xD;&#xA;&#x9;&#x9; AND&#x9;CURRENCY_TYPE COLLATE DATABASE_DEFAULT not in&#xD;&#xA;&#x9;&#x9;&#x9;(&#xD;&#xA;&#x9;&#x9; &#x9;SELECT CURRENCY_TYP&#xD;&#xA;&#x9;&#x9;&#x9;FROM  CF_CURRENCY_TYPE &#xD;&#xA;&#x9;&#x9;&#x9;)&#xD;&#xA;&#xD;&#xA;&#xD;&#xA;&#x9;&#x9;/* [&quot;+ context.intermediateDB + &quot;].[dbo].VW_IMPORT_MARK_VALID_STATES validations&#x9;*/&#xD;&#xA;&#x9;&#x9;&#xD;&#xA;&#x9;&#x9;/* Check if validity national states is missing */&#xD;&#xA;/*&#x9;&#x9;INSERT INTO   [&quot;+ context.intermediateDB + &quot;].[dbo].VW_IMPORT_MARK_RESULT   &#xD;&#xA;&#x9;&#x9;&#x9;&#x9;( file_seq , &#xD;&#xA;&#x9;&#x9;&#x9;&#x9;file_type , &#xD;&#xA;&#x9;&#x9;&#x9;&#x9;file_series , &#xD;&#xA;&#x9;&#x9;&#x9;&#x9;file_nbr , &#xD;&#xA;&#x9;&#x9;&#x9;&#x9;ind_import , &#xD;&#xA;&#x9;&#x9;&#x9;&#x9;msg_import )  &#xD;&#xA;&#x9;&#x9;SELECT&#xD;&#xA;&#x9;&#x9;&#x9;&#x9; file_seq,&#xD;&#xA;&#x9;&#x9;&#x9;&#x9; file_type,&#xD;&#xA;&#x9;&#x9;&#x9;&#x9; file_series,&#xD;&#xA;&#x9;&#x9;&#x9;&#x9; file_nbr,&#xD;&#xA;&#x9;&#x9;&#x9;&#x9; 2,&#xD;&#xA;&#x9;&#x9;&#x9;&#x9; 'The list of validity national states is missing'&#xD;&#xA;&#x9;&#x9;FROM   [&quot;+ context.intermediateDB + &quot;].[dbo].VW_IMPORT_MARK m, CF_APPLICATION_TYPE t&#xD;&#xA;                WHERE&#xD;&#xA;                        ind_import=0 and &#xD;&#xA;                        m.APPLICATION_TYPE COLLATE DATABASE_DEFAULT  =  t.APPL_TYP and &#xD;&#xA;                        t.IND_VALID_IN_STATES='S' and&#xD;&#xA;                        not exists (select * from  [&quot;+ context.intermediateDB + &quot;].[dbo].VW_IMPORT_MARK_VALID_STATES s where&#xD;&#xA;                         s.FILE_SEQ=m.FILE_SEQ and&#xD;&#xA;                         s.FILE_TYPE=m.FILE_TYPE and&#xD;&#xA;                         s.FILE_SERIES=m.FILE_SERIES and&#xD;&#xA;                         s.FILE_NBR=m.FILE_NBR);&#xD;&#xA;*/&#xD;&#xA;&#xD;&#xA;&#x9;&#x9;/* Check if validity national states must be empty */&#xD;&#xA;/*&#x9;&#x9;INSERT INTO   [&quot;+ context.intermediateDB + &quot;].[dbo].VW_IMPORT_MARK_RESULT   &#xD;&#xA;&#x9;&#x9;&#x9;&#x9;( file_seq , &#xD;&#xA;&#x9;&#x9;&#x9;&#x9;file_type , &#xD;&#xA;&#x9;&#x9;&#x9;&#x9;file_series , &#xD;&#xA;&#x9;&#x9;&#x9;&#x9;file_nbr , &#xD;&#xA;&#x9;&#x9;&#x9;&#x9;ind_import , &#xD;&#xA;&#x9;&#x9;&#x9;&#x9;msg_import )  &#xD;&#xA;&#x9;&#x9;SELECT&#xD;&#xA;&#x9;&#x9;&#x9;&#x9; file_seq,&#xD;&#xA;&#x9;&#x9;&#x9;&#x9; file_type,&#xD;&#xA;&#x9;&#x9;&#x9;&#x9; file_series,&#xD;&#xA;&#x9;&#x9;&#x9;&#x9; file_nbr,&#xD;&#xA;&#x9;&#x9;&#x9;&#x9; 2,&#xD;&#xA;&#x9;&#x9;&#x9;&#x9; 'The list of validity national states does not apply for this application type'&#xD;&#xA;&#x9;&#x9;FROM   [&quot;+ context.intermediateDB + &quot;].[dbo].VW_IMPORT_MARK m, CF_APPLICATION_TYPE t&#xD;&#xA;                WHERE&#xD;&#xA;                        ind_import=0 and &#xD;&#xA;                        m.APPLICATION_TYPE COLLATE DATABASE_DEFAULT  =  t.APPL_TYP and &#xD;&#xA;                        t.IND_VALID_IN_STATES='N' and&#xD;&#xA;                        exists (select * from  [&quot;+ context.intermediateDB + &quot;].[dbo].VW_IMPORT_MARK_VALID_STATES s where&#xD;&#xA;                         s.FILE_SEQ=m.FILE_SEQ and&#xD;&#xA;                         s.FILE_TYPE=m.FILE_TYPE and&#xD;&#xA;                         s.FILE_SERIES=m.FILE_SERIES and&#xD;&#xA;                         s.FILE_NBR=m.FILE_NBR);&#xD;&#xA;&#xD;&#xA;                &#x9;INSERT INTO   [&quot;+ context.intermediateDB + &quot;].[dbo].VW_IMPORT_MARK_RESULT   &#xD;&#xA;&#x9;&#x9;&#x9;&#x9;( file_seq , &#xD;&#xA;&#x9;&#x9;&#x9;&#x9;file_type , &#xD;&#xA;&#x9;&#x9;&#x9;&#x9;file_series , &#xD;&#xA;&#x9;&#x9;&#x9;&#x9;file_nbr , &#xD;&#xA;&#x9;&#x9;&#x9;&#x9;ind_import , &#xD;&#xA;&#x9;&#x9;&#x9;&#x9;msg_import )  &#xD;&#xA;&#x9;&#x9;SELECT&#xD;&#xA;&#x9;&#x9;&#x9;&#x9; file_seq,&#xD;&#xA;&#x9;&#x9;&#x9;&#x9; file_type,&#xD;&#xA;&#x9;&#x9;&#x9;&#x9; file_series,&#xD;&#xA;&#x9;&#x9;&#x9;&#x9; file_nbr,&#xD;&#xA;&#x9;&#x9;&#x9;&#x9; 2,&#xD;&#xA;&#x9;&#x9;&#x9;&#x9; 'The list of validity national states does not apply for this application type'&#xD;&#xA;&#x9;&#x9;FROM   [&quot;+ context.intermediateDB + &quot;].[dbo].VW_IMPORT_MARK m, CF_APPLICATION_TYPE t&#xD;&#xA;                WHERE&#xD;&#xA;                        ind_import=0 and &#xD;&#xA;                        m.APPLICATION_TYPE COLLATE DATABASE_DEFAULT  =  t.APPL_TYP and &#xD;&#xA;                        t.IND_VALID_IN_STATES='N' and&#xD;&#xA;                        exists (select * from  [&quot;+ context.intermediateDB + &quot;].[dbo].VW_IMPORT_MARK_VALID_STATES s where&#xD;&#xA;                         s.FILE_SEQ=m.FILE_SEQ and&#xD;&#xA;                         s.FILE_TYPE=m.FILE_TYPE and&#xD;&#xA;                         s.FILE_SERIES=m.FILE_SERIES and&#xD;&#xA;                         s.FILE_NBR=m.FILE_NBR);&#xD;&#xA;*/&#xD;&#xA;                         /* Check if The country code used in one of the validity states is not the national country code*/&#xD;&#xA;&#xD;&#xA;                &#x9;INSERT INTO   [&quot;+ context.intermediateDB + &quot;].[dbo].VW_IMPORT_MARK_RESULT   &#xD;&#xA;&#x9;&#x9;&#x9;&#x9;( file_seq , &#xD;&#xA;&#x9;&#x9;&#x9;&#x9;file_type , &#xD;&#xA;&#x9;&#x9;&#x9;&#x9;file_series , &#xD;&#xA;&#x9;&#x9;&#x9;&#x9;file_nbr , &#xD;&#xA;&#x9;&#x9;&#x9;&#x9;ind_import , &#xD;&#xA;&#x9;&#x9;&#x9;&#x9;msg_import )  &#xD;&#xA;&#x9;&#x9;SELECT&#xD;&#xA;&#x9;&#x9;&#x9;&#x9; file_seq,&#xD;&#xA;&#x9;&#x9;&#x9;&#x9; file_type,&#xD;&#xA;&#x9;&#x9;&#x9;&#x9; file_series,&#xD;&#xA;&#x9;&#x9;&#x9;&#x9; file_nbr,&#xD;&#xA;&#x9;&#x9;&#x9;&#x9; 2,&#xD;&#xA;&#x9;&#x9;&#x9;&#x9; 'The country code used in one of the validity states is not the national country code'&#xD;&#xA;&#x9;&#x9;FROM   [&quot;+ context.intermediateDB + &quot;].[dbo].VW_IMPORT_MARK m, CF_CONFIG_PARAM t&#xD;&#xA;                WHERE&#xD;&#xA;                        ind_import=0 and &#xD;&#xA;                        t.CONFIG_CODE='CodPaisEstadisticasOmpi' and&#xD;&#xA;                        exists (select * from  [&quot;+ context.intermediateDB + &quot;].[dbo].VW_IMPORT_MARK_VALID_STATES s where&#xD;&#xA;                         s.FILE_SEQ=m.FILE_SEQ and&#xD;&#xA;                         s.FILE_TYPE=m.FILE_TYPE and&#xD;&#xA;                         s.FILE_SERIES=m.FILE_SERIES and&#xD;&#xA;                         s.FILE_NBR=m.FILE_NBR and&#xD;&#xA;                         s.COUNTRY_CODE COLLATE DATABASE_DEFAULT &lt;> VALUE);&#xD;&#xA;&#xD;&#xA;&#xD;&#xA;&#xD;&#xA;&#x9;&#x9;&#xD;&#xA;&#x9;&#x9;/* 1.1.9  [&quot;+ context.intermediateDB + &quot;].[dbo].VW_IMPORT_MARK_ACTIONS validations */&#xD;&#xA;&#x9;&#x9;/* If CF_APPLICATION_TYPE.GENERATE_PROC_TYP is null, message 'The application type is not configured so as to generate a process' */&#xD;&#xA;&#x9;&#x9;INSERT INTO   [&quot;+ context.intermediateDB + &quot;].[dbo].VW_IMPORT_MARK_RESULT   &#xD;&#xA;&#x9;&#x9;&#x9;&#x9;( file_seq , &#xD;&#xA;&#x9;&#x9;&#x9;&#x9;file_type , &#xD;&#xA;&#x9;&#x9;&#x9;&#x9;file_series , &#xD;&#xA;&#x9;&#x9;&#x9;&#x9;file_nbr , &#xD;&#xA;&#x9;&#x9;&#x9;&#x9;ind_import , &#xD;&#xA;&#x9;&#x9;&#x9;&#x9;msg_import )  &#xD;&#xA;&#x9;&#x9;SELECT&#xD;&#xA;&#x9;&#x9;&#x9;&#x9; T.file_seq,&#xD;&#xA;&#x9;&#x9;&#x9;&#x9; T.file_type,&#xD;&#xA;&#x9;&#x9;&#x9;&#x9; T.file_series,&#xD;&#xA;&#x9;&#x9;&#x9;&#x9; T.file_nbr,&#xD;&#xA;&#x9;&#x9;&#x9;&#x9; 2,&#xD;&#xA;&#x9;&#x9;&#x9;&#x9; 'The application type is not configured so as to generate a process'&#xD;&#xA;&#x9;&#x9;FROM   [&quot;+ context.intermediateDB + &quot;].[dbo].VW_import_mark_actions T JOIN  [&quot;+ context.intermediateDB + &quot;].[dbo].VW_import_mark M ON T.file_seq  = M.file_seq&#xD;&#xA;&#x9;&#x9;&#x9; AND&#x9;T.file_type  = M.file_type&#xD;&#xA;&#x9;&#x9;&#x9; AND&#x9;T.file_series  = M.file_series&#xD;&#xA;&#x9;&#x9;&#x9; AND&#x9;T.file_nbr  = M.file_nbr  JOIN CF_application_type AT ON M.application_type  = AT.appl_typ COLLATE DATABASE_DEFAULT &#xD;&#xA;&#x9;&#x9;WHERE&#x9; GENERATE_PROC_TYP  is null&#xD;&#xA;&#x9;&#x9;&#xD;&#xA;&#x9;&#x9;/* ACTION_TYPE: if not exists in CF_ACTION_TYPE, message 'Invalid action type' */&#xD;&#xA;&#x9;&#x9;/* Performace note: join with  [&quot;+ context.intermediateDB + &quot;].[dbo].VW_IMPORT_MARK to select marks with IND_IMPORT = 0 */&#xD;&#xA;&#x9;&#x9;INSERT INTO   [&quot;+ context.intermediateDB + &quot;].[dbo].VW_IMPORT_MARK_RESULT   &#xD;&#xA;&#x9;&#x9;&#x9;&#x9;( file_seq , &#xD;&#xA;&#x9;&#x9;&#x9;&#x9;file_type , &#xD;&#xA;&#x9;&#x9;&#x9;&#x9;file_series , &#xD;&#xA;&#x9;&#x9;&#x9;&#x9;file_nbr , &#xD;&#xA;&#x9;&#x9;&#x9;&#x9;ind_import , &#xD;&#xA;&#x9;&#x9;&#x9;&#x9;msg_import )  &#xD;&#xA;&#x9;&#x9;SELECT&#xD;&#xA;&#x9;&#x9;&#x9;&#x9; T.file_seq,&#xD;&#xA;&#x9;&#x9;&#x9;&#x9; T.file_type,&#xD;&#xA;&#x9;&#x9;&#x9;&#x9; T.file_series,&#xD;&#xA;&#x9;&#x9;&#x9;&#x9; T.file_nbr,&#xD;&#xA;&#x9;&#x9;&#x9;&#x9; 2,&#xD;&#xA;&#x9;&#x9;&#x9;&#x9; 'Invalid action type'&#xD;&#xA;&#x9;&#x9;FROM   [&quot;+ context.intermediateDB + &quot;].[dbo].VW_import_mark_actions T &#xD;&#xA;&#x9;&#x9;WHERE&#x9; ACTION_TYPE COLLATE DATABASE_DEFAULT not in&#xD;&#xA;&#x9;&#x9;&#x9;(&#xD;&#xA;&#x9;&#x9; &#x9;SELECT action_typ&#xD;&#xA;&#x9;&#x9;&#x9;FROM  CF_action_type &#xD;&#xA;&#x9;&#x9;&#x9;)&#xD;&#xA;&#x9;&#x9;&#xD;&#xA;&#x9;&#x9;/* SPECIAL_FINAL_STATUS: if not null and ACTION_CATEGORY in A / N, message 'Special final status is only applicable for special actions' */&#xD;&#xA;&#x9;&#x9;/* Performace note: join with  [&quot;+ context.intermediateDB + &quot;].[dbo].VW_IMPORT_MARK to select marks with IND_IMPORT = 0 */&#xD;&#xA;&#x9;&#x9;INSERT INTO   [&quot;+ context.intermediateDB + &quot;].[dbo].VW_IMPORT_MARK_RESULT   &#xD;&#xA;&#x9;&#x9;&#x9;&#x9;( file_seq , &#xD;&#xA;&#x9;&#x9;&#x9;&#x9;file_type , &#xD;&#xA;&#x9;&#x9;&#x9;&#x9;file_series , &#xD;&#xA;&#x9;&#x9;&#x9;&#x9;file_nbr , &#xD;&#xA;&#x9;&#x9;&#x9;&#x9;ind_import , &#xD;&#xA;&#x9;&#x9;&#x9;&#x9;msg_import )  &#xD;&#xA;&#x9;&#x9;SELECT&#xD;&#xA;&#x9;&#x9;&#x9;&#x9; T.file_seq,&#xD;&#xA;&#x9;&#x9;&#x9;&#x9; T.file_type,&#xD;&#xA;&#x9;&#x9;&#x9;&#x9; T.file_series,&#xD;&#xA;&#x9;&#x9;&#x9;&#x9; T.file_nbr,&#xD;&#xA;&#x9;&#x9;&#x9;&#x9; 2,&#xD;&#xA;&#x9;&#x9;&#x9;&#x9; 'Special final status is only applicable for special actions'&#xD;&#xA;&#x9;&#x9;FROM   [&quot;+ context.intermediateDB + &quot;].[dbo].VW_import_mark_actions T &#xD;&#xA;&#x9;&#x9;WHERE&#x9; SPECIAL_FINAL_STATUS  is not null&#xD;&#xA;&#x9;&#x9; AND&#x9;ACTION_CATEGORY  in ( 'A'  , 'N'  )&#xD;&#xA;&#x9;&#x9;&#xD;&#xA;&#x9;&#x9;/* If ACTION_CATEGORY is S and SPECIAL_FINAL_STATUS is null, message 'Special final status is required' */&#xD;&#xA;&#x9;&#x9;/* Performace note: join with  [&quot;+ context.intermediateDB + &quot;].[dbo].VW_IMPORT_MARK to select marks with IND_IMPORT = 0 */&#xD;&#xA;&#x9;&#x9;INSERT INTO   [&quot;+ context.intermediateDB + &quot;].[dbo].VW_IMPORT_MARK_RESULT   &#xD;&#xA;&#x9;&#x9;&#x9;&#x9;( file_seq , &#xD;&#xA;&#x9;&#x9;&#x9;&#x9;file_type , &#xD;&#xA;&#x9;&#x9;&#x9;&#x9;file_series , &#xD;&#xA;&#x9;&#x9;&#x9;&#x9;file_nbr , &#xD;&#xA;&#x9;&#x9;&#x9;&#x9;ind_import , &#xD;&#xA;&#x9;&#x9;&#x9;&#x9;msg_import )  &#xD;&#xA;&#x9;&#x9;SELECT&#xD;&#xA;&#x9;&#x9;&#x9;&#x9; T.file_seq,&#xD;&#xA;&#x9;&#x9;&#x9;&#x9; T.file_type,&#xD;&#xA;&#x9;&#x9;&#x9;&#x9; T.file_series,&#xD;&#xA;&#x9;&#x9;&#x9;&#x9; T.file_nbr,&#xD;&#xA;&#x9;&#x9;&#x9;&#x9; 2,&#xD;&#xA;&#x9;&#x9;&#x9;&#x9; 'Special final status is required'&#xD;&#xA;&#x9;&#x9;FROM   [&quot;+ context.intermediateDB + &quot;].[dbo].VW_import_mark_actions T &#xD;&#xA;&#x9;&#x9;WHERE&#x9; SPECIAL_FINAL_STATUS  is null&#xD;&#xA;&#x9;&#x9; AND&#x9;ACTION_CATEGORY  = 'S'&#xD;&#xA;&#x9;&#x9;&#xD;&#xA;/* If SPECIAL_FINAL_STATUS is not null and proc_typ / SPECIAL_FINAL_STATUS not exists in CF_STATUS &#xD;&#xA;&#x9;&#x9;       (where proc_typ is CF_APPLICATION_TYPE.GENERATE_PROC_TYP for the corresponding application type), &#xD;&#xA;&#x9;&#x9;       message 'Special final status is not a valid status in the process type associated to the application type' */&#xD;&#xA;&#x9;&#x9;INSERT INTO   [&quot;+ context.intermediateDB + &quot;].[dbo].VW_IMPORT_MARK_RESULT   &#xD;&#xA;&#x9;&#x9;&#x9;&#x9;( file_seq , &#xD;&#xA;&#x9;&#x9;&#x9;&#x9;file_type , &#xD;&#xA;&#x9;&#x9;&#x9;&#x9;file_series , &#xD;&#xA;&#x9;&#x9;&#x9;&#x9;file_nbr , &#xD;&#xA;&#x9;&#x9;&#x9;&#x9;ind_import , &#xD;&#xA;&#x9;&#x9;&#x9;&#x9;msg_import )  &#xD;&#xA;&#x9;&#x9;SELECT&#xD;&#xA;&#x9;&#x9;&#x9;&#x9; T.file_seq,&#xD;&#xA;&#x9;&#x9;&#x9;&#x9; T.file_type,&#xD;&#xA;&#x9;&#x9;&#x9;&#x9; T.file_series,&#xD;&#xA;&#x9;&#x9;&#x9;&#x9; T.file_nbr,&#xD;&#xA;&#x9;&#x9;&#x9;&#x9; 2,&#xD;&#xA;&#x9;&#x9;&#x9;&#x9; 'Special final status is not a valid status in the process type associated to the application type'&#xD;&#xA;&#x9;&#x9;FROM   [&quot;+ context.intermediateDB + &quot;].[dbo].VW_import_mark_actions T JOIN  [&quot;+ context.intermediateDB + &quot;].[dbo].VW_import_mark M ON T.file_seq  = M.file_seq&#xD;&#xA;&#x9;&#x9;&#x9; AND&#x9;T.file_type  = M.file_type&#xD;&#xA;&#x9;&#x9;&#x9; AND&#x9;T.file_series  = M.file_series&#xD;&#xA;&#x9;&#x9;&#x9; AND&#x9;T.file_nbr  = M.file_nbr  JOIN CF_application_type AT ON M.application_type  = AT.appl_typ COLLATE DATABASE_DEFAULT &#xD;&#xA;&#x9;&#x9;WHERE&#x9; SPECIAL_FINAL_STATUS  is not null&#xD;&#xA;&#x9;&#x9; AND&#x9; NOT EXISTS&#xD;&#xA;&#x9;&#x9;&#x9;(&#xD;&#xA;&#x9;&#x9; &#x9;SELECT&#x9;*&#xD;&#xA;&#x9;&#x9;&#x9;FROM&#x9;CF_status &#xD;&#xA;&#x9;&#x9;&#x9;WHERE&#x9;CF_status.proc_typ  = AT.GENERATE_PROC_TYP&#xD;&#xA;&#x9;&#x9;&#x9; AND&#x9;CF_status.status_code  = T.SPECIAL_FINAL_STATUS COLLATE DATABASE_DEFAULT&#xD;&#xA;&#x9;&#x9;&#x9;)&#xD;&#xA;&#x9;&#x9;&#xD;&#xA;&#x9;&#x9;&#x9;/* If SPECIAL_FINAL_STATUS is not null and proc_typ / SPECIAL_FINAL_STATUS is origin for &#xD;&#xA;&#x9;   a 'due date' automatic action, then MANUAL_DUE_DATE must not be null. &#xD;&#xA;&#x9;   Otherwise, message ?Special final status is origin for a date is due automatic action, but manual due date is null? */&#xD;&#xA;&#x9;INSERT INTO   [&quot;+ context.intermediateDB + &quot;].[dbo].VW_IMPORT_MARK_RESULT   &#xD;&#xA;&#x9;&#x9;&#x9;( file_seq , &#xD;&#xA;&#x9;&#x9;&#x9;file_type , &#xD;&#xA;&#x9;&#x9;&#x9;file_series , &#xD;&#xA;&#x9;&#x9;&#x9;file_nbr , &#xD;&#xA;&#x9;&#x9;&#x9;ind_import , &#xD;&#xA;&#x9;&#x9;&#x9;msg_import )  &#xD;&#xA;&#x9;SELECT&#xD;&#xA;&#x9;&#x9;&#x9; T.file_seq,&#xD;&#xA;&#x9;&#x9;&#x9; T.file_type,&#xD;&#xA;&#x9;&#x9;&#x9; T.file_series,&#xD;&#xA;&#x9;&#x9;&#x9; T.file_nbr,&#xD;&#xA;&#x9;&#x9;&#x9; 2,&#xD;&#xA;&#x9;&#x9;&#x9; 'Special final status is origin for a date is due automatic action, but manual due date is null'&#xD;&#xA;&#x9;FROM   [&quot;+ context.intermediateDB + &quot;].[dbo].VW_import_mark_actions T JOIN  [&quot;+ context.intermediateDB + &quot;].[dbo].VW_import_mark M ON T.file_seq  = M.file_seq&#xD;&#xA;&#x9;&#x9; AND&#x9;T.file_type  = M.file_type&#xD;&#xA;&#x9;&#x9; AND&#x9;T.file_series  = M.file_series&#xD;&#xA;&#x9;&#x9; AND&#x9;T.file_nbr  = M.file_nbr  JOIN CF_application_type AT  ON M.application_type  = AT.appl_typ COLLATE DATABASE_DEFAULT &#xD;&#xA;&#x9;WHERE&#x9; SPECIAL_FINAL_STATUS  is not null&#xD;&#xA;&#x9; AND&#x9;GENERATE_PROC_TYP  IN&#xD;&#xA;&#x9;&#x9;(&#xD;&#xA;&#x9; &#x9;SELECT proc_typ&#xD;&#xA;&#x9;&#x9;FROM  CF_migration &#xD;&#xA;&#x9;&#x9;WHERE&#x9; action_typ  in&#xD;&#xA;&#x9;&#x9;&#x9;(&#xD;&#xA;&#x9; &#x9;&#x9;SELECT action_typ&#xD;&#xA;&#x9;&#x9;&#x9;FROM  CF_action_type &#xD;&#xA;&#x9;&#x9;&#x9;WHERE&#x9; automatic_action_wcode  = 1&#xD;&#xA;&#x9;&#x9;&#x9;)&#xD;&#xA;&#x9;&#x9;)&#xD;&#xA;&#x9; AND&#x9;SPECIAL_FINAL_STATUS COLLATE DATABASE_DEFAULT  IN&#xD;&#xA;&#x9;&#x9;(&#xD;&#xA;&#x9; &#x9;SELECT initial_status_code&#xD;&#xA;&#x9;&#x9;FROM  CF_migration &#xD;&#xA;&#x9;&#x9;WHERE&#x9; action_typ  in&#xD;&#xA;&#x9;&#x9;&#x9;(&#xD;&#xA;&#x9; &#x9;&#x9;SELECT action_typ&#xD;&#xA;&#x9;&#x9;&#x9;FROM  CF_action_type &#xD;&#xA;&#x9;&#x9;&#x9;WHERE&#x9; automatic_action_wcode  = 1&#xD;&#xA;&#x9;&#x9;&#x9;)&#xD;&#xA;&#x9;&#x9;)&#xD;&#xA;&#x9; AND&#x9;manual_due_date  is null&#xD;&#xA;&#x9;&#xD;&#xA;&#x9;/* If SPECIAL_FINAL_STATUS is not null and proc_typ / SPECIAL_FINAL_STATUS is not origin for &#xD;&#xA;&#x9;   a 'due date' automatic action, then MANUAL_DUE_DATE must be null. &#xD;&#xA;&#x9;   Otherwise, message 'Special final status is not origin for a date is due automatic action, but manual due date is not null' */&#xD;&#xA;&#x9;INSERT INTO   [&quot;+ context.intermediateDB + &quot;].[dbo].VW_IMPORT_MARK_RESULT   &#xD;&#xA;&#x9;&#x9;&#x9;( file_seq , &#xD;&#xA;&#x9;&#x9;&#x9;file_type , &#xD;&#xA;&#x9;&#x9;&#x9;file_series , &#xD;&#xA;&#x9;&#x9;&#x9;file_nbr , &#xD;&#xA;&#x9;&#x9;&#x9;ind_import , &#xD;&#xA;&#x9;&#x9;&#x9;msg_import )  &#xD;&#xA;&#x9;SELECT&#xD;&#xA;&#x9;&#x9;&#x9; T.file_seq,&#xD;&#xA;&#x9;&#x9;&#x9; T.file_type,&#xD;&#xA;&#x9;&#x9;&#x9; T.file_series,&#xD;&#xA;&#x9;&#x9;&#x9; T.file_nbr,&#xD;&#xA;&#x9;&#x9;&#x9; 2,&#xD;&#xA;&#x9;&#x9;&#x9; 'Special final status is not origin for a date is due automatic action, but manual due date is not null'&#xD;&#xA;&#x9;FROM   [&quot;+ context.intermediateDB + &quot;].[dbo].VW_import_mark_actions T &#xD;&#xA;&#x9;&#x9;  JOIN  [&quot;+ context.intermediateDB + &quot;].[dbo].VW_import_mark M ON &#xD;&#xA;&#x9;&#x9;&#x9;&#x9;T.file_seq  = M.file_seq&#xD;&#xA;&#x9;&#x9; AND&#x9;T.file_type  = M.file_type&#xD;&#xA;&#x9;&#x9; AND&#x9;T.file_series  = M.file_series&#xD;&#xA;&#x9;&#x9; AND&#x9;T.file_nbr  = M.file_nbr  &#xD;&#xA;&#x9;&#x9;  JOIN CF_application_type AT ON M.application_type   = AT.appl_typ    COLLATE DATABASE_DEFAULT&#xD;&#xA;&#x9;WHERE&#x9; SPECIAL_FINAL_STATUS  is not null&#xD;&#xA;&#x9; AND&#x9; GENERATE_PROC_TYP + SPECIAL_FINAL_STATUS COLLATE DATABASE_DEFAULT not in&#xD;&#xA;&#x9;&#x9;(&#xD;&#xA;&#x9; &#x9;SELECT&#x9;proc_typ + initial_status_code&#xD;&#xA;&#x9;&#x9;FROM&#x9;CF_migration &#xD;&#xA;&#x9;&#x9;WHERE&#x9; action_typ  in&#xD;&#xA;&#x9;&#x9;&#x9;(&#xD;&#xA;&#x9; &#x9;&#x9;SELECT action_typ&#xD;&#xA;&#x9;&#x9;&#x9;FROM  CF_action_type &#xD;&#xA;&#x9;&#x9;&#x9;WHERE&#x9; automatic_action_wcode  = 1&#xD;&#xA;&#x9;&#x9;&#x9;)&#xD;&#xA;&#x9;&#x9; )&#xD;&#xA;&#x9; AND&#x9;manual_due_date  is not null&#xD;&#xA;&#x9;&#xD;&#xA;&#x9;/* If SPECIAL_FINAL_STATUS is not null and proc_typ / SPECIAL_FINAL_STATUS requires a&#xD;&#xA;&#x9;   responsible user, then RESPONSIBLE_USER must not be null. &#xD;&#xA;&#x9;   Otherwise, message ?Special final status requires a responsible user to be assigned? */&#xD;&#xA;/*&#x9;INSERT INTO   [&quot;+ context.intermediateDB + &quot;].[dbo].VW_IMPORT_MARK_RESULT   &#xD;&#xA;&#x9;&#x9;&#x9;( file_seq , &#xD;&#xA;&#x9;&#x9;&#x9;file_type , &#xD;&#xA;&#x9;&#x9;&#x9;file_series , &#xD;&#xA;&#x9;&#x9;&#x9;file_nbr , &#xD;&#xA;&#x9;&#x9;&#x9;ind_import , &#xD;&#xA;&#x9;&#x9;&#x9;msg_import )  &#xD;&#xA;&#x9;SELECT&#xD;&#xA;&#x9;&#x9;&#x9; T.file_seq,&#xD;&#xA;&#x9;&#x9;&#x9; T.file_type,&#xD;&#xA;&#x9;&#x9;&#x9; T.file_series,&#xD;&#xA;&#x9;&#x9;&#x9; T.file_nbr,&#xD;&#xA;&#x9;&#x9;&#x9; 2,&#xD;&#xA;&#x9;&#x9;&#x9; 'Special final status requires a responsible user to be assigned'&#xD;&#xA;&#x9;FROM   [&quot;+ context.intermediateDB + &quot;].[dbo].VW_import_mark_actions T &#xD;&#xA;&#x9;&#x9;&#x9;JOIN  [&quot;+ context.intermediateDB + &quot;].[dbo].VW_import_mark M ON T.file_seq  = M.file_seq&#xD;&#xA;&#x9;&#x9; AND&#x9;T.file_type  = M.file_type&#xD;&#xA;&#x9;&#x9; AND&#x9;T.file_series  = M.file_series&#xD;&#xA;&#x9;&#x9; AND&#x9;T.file_nbr  = M.file_nbr  &#xD;&#xA;&#x9;&#x9;&#x9;JOIN CF_application_type AT ON M.application_type  = AT.appl_typ COLLATE DATABASE_DEFAULT&#xD;&#xA;&#x9;WHERE&#x9; SPECIAL_FINAL_STATUS  is not null&#xD;&#xA;&#x9; AND&#x9;(GENERATE_PROC_TYP + SPECIAL_FINAL_STATUS)  IN&#xD;&#xA;&#x9;&#x9;(&#xD;&#xA;&#x9; &#x9;SELECT proc_typ + status_code&#xD;&#xA;&#x9;&#x9;FROM  CF_status &#xD;&#xA;&#x9;&#x9;WHERE&#x9; ind_responsible_req  = 'S'&#xD;&#xA;&#x9;&#x9;)&#xD;&#xA;&#x9; AND&#x9;responsible_user  is null&#xD;&#xA;*/&#x9;&#xD;&#xA;&#x9;/* If SPECIAL_FINAL_STATUS is not null and proc_typ / SPECIAL_FINAL_STATUS requires no&#xD;&#xA;&#x9;   responsible user, then RESPONSIBLE_USER must be null. &#xD;&#xA;&#x9;   Otherwise, message ?Special final status requires no responsible user to be assigned? */&#xD;&#xA;/*&#x9;INSERT INTO   [&quot;+ context.intermediateDB + &quot;].[dbo].VW_IMPORT_MARK_RESULT   &#xD;&#xA;&#x9;&#x9;&#x9;( file_seq , &#xD;&#xA;&#x9;&#x9;&#x9;file_type , &#xD;&#xA;&#x9;&#x9;&#x9;file_series , &#xD;&#xA;&#x9;&#x9;&#x9;file_nbr , &#xD;&#xA;&#x9;&#x9;&#x9;ind_import , &#xD;&#xA;&#x9;&#x9;&#x9;msg_import )  &#xD;&#xA;&#x9;SELECT&#xD;&#xA;&#x9;&#x9;&#x9; T.file_seq,&#xD;&#xA;&#x9;&#x9;&#x9; T.file_type,&#xD;&#xA;&#x9;&#x9;&#x9; T.file_series,&#xD;&#xA;&#x9;&#x9;&#x9; T.file_nbr,&#xD;&#xA;&#x9;&#x9;&#x9; 2,&#xD;&#xA;&#x9;&#x9;&#x9; 'Special final status requires no responsible user to be assigned'&#xD;&#xA;&#x9;FROM   [&quot;+ context.intermediateDB + &quot;].[dbo].VW_import_mark_actions T JOIN  [&quot;+ context.intermediateDB + &quot;].[dbo].VW_import_mark M ON T.file_seq  = M.file_seq&#xD;&#xA;&#x9;&#x9; AND&#x9;T.file_type  = M.file_type&#xD;&#xA;&#x9;&#x9; AND&#x9;T.file_series  = M.file_series&#xD;&#xA;&#x9;&#x9; AND&#x9;T.file_nbr  = M.file_nbr  JOIN CF_application_type AT ON M.application_type  = AT.appl_typ COLLATE DATABASE_DEFAULT &#xD;&#xA;&#x9;WHERE&#x9; SPECIAL_FINAL_STATUS  is not null&#xD;&#xA;&#x9; AND&#x9; (GENERATE_PROC_TYP + SPECIAL_FINAL_STATUS) NOT IN&#xD;&#xA;&#x9;&#x9;(&#xD;&#xA;&#x9; &#x9;SELECT&#x9;proc_typ + status_code&#xD;&#xA;&#x9;&#x9;FROM  CF_status &#xD;&#xA;&#x9;&#x9;WHERE&#x9; ind_responsible_req  = 'S'&#xD;&#xA;&#x9;&#x9;)&#xD;&#xA;&#x9; AND&#x9;responsible_user  is not null&#xD;&#xA;*/&#x9;&#xD;&#xA;&#x9;/* If SPECIAL_FINAL_STATUS is not null and proc_typ / SPECIAL_FINAL_STATUS is origin for &#xD;&#xA;&#x9;   a 'end of freezing' automatic action, then a 'freezing' document must be specified in tables&#xD;&#xA;&#x9;    [&quot;+ context.intermediateDB + &quot;].[dbo].VW_IMPORT_MARK_FREEZE_FILE or  [&quot;+ context.intermediateDB + &quot;].[dbo].VW_IMPORT_MARK_FREEZE_UDOC.&#xD;&#xA;&#x9;   Otherwise, message ?Special final status is origin for an 'end of freezing' automatic action, but no freezings exist in  [&quot;+ context.intermediateDB + &quot;].[dbo].VW_IMPORT_MARK_FREEZE_FILE / UDOC? */&#xD;&#xA;&#x9;/*&#xD;&#xA;&#x9;INSERT INTO   [&quot;+ context.intermediateDB + &quot;].[dbo].VW_IMPORT_MARK_RESULT   &#xD;&#xA;&#x9;&#x9;&#x9;( file_seq , &#xD;&#xA;&#x9;&#x9;&#x9;file_type , &#xD;&#xA;&#x9;&#x9;&#x9;file_series , &#xD;&#xA;&#x9;&#x9;&#x9;file_nbr , &#xD;&#xA;&#x9;&#x9;&#x9;ind_import , &#xD;&#xA;&#x9;&#x9;&#x9;msg_import )  &#xD;&#xA;&#x9;SELECT&#xD;&#xA;&#x9;&#x9;&#x9; T.file_seq,&#xD;&#xA;&#x9;&#x9;&#x9; T.file_type,&#xD;&#xA;&#x9;&#x9;&#x9; T.file_series,&#xD;&#xA;&#x9;&#x9;&#x9; T.file_nbr,&#xD;&#xA;&#x9;&#x9;&#x9; 2,&#xD;&#xA;&#x9;&#x9;&#x9; 'Special final status is origin for an 'end of freezing' automatic action, but no freezings exist in  [&quot;+ context.intermediateDB + &quot;].[dbo].VW_IMPORT_MARK_FREEZE_FILE / UDOC'&#xD;&#xA;&#x9;FROM   [&quot;+ context.intermediateDB + &quot;].[dbo].VW_import_mark_actions T JOIN  [&quot;+ context.intermediateDB + &quot;].[dbo].VW_import_mark M ON T.file_seq  = M.file_seq&#xD;&#xA;&#x9;&#x9; AND&#x9;T.file_type  = M.file_type&#xD;&#xA;&#x9;&#x9; AND&#x9;T.file_series  = M.file_series&#xD;&#xA;&#x9;&#x9; AND&#x9;T.file_nbr  = M.file_nbr  JOIN CF_application_type AT ON M.application_type  = AT.appl_typ  COLLATE DATABASE_DEFAULT&#xD;&#xA;&#x9;WHERE&#x9; SPECIAL_FINAL_STATUS  is not null&#xD;&#xA;&#x9; AND&#x9;(GENERATE_PROC_TYP + SPECIAL_FINAL_STATUS ) IN&#xD;&#xA;&#x9;&#x9;(&#xD;&#xA;&#x9; &#x9;SELECT proc_typ + initial_status_code&#xD;&#xA;&#x9;&#x9;FROM  CF_migration &#xD;&#xA;&#x9;&#x9;WHERE&#x9; action_typ  in&#xD;&#xA;&#x9;&#x9;&#x9;(&#xD;&#xA;&#x9; &#x9;&#x9;SELECT action_typ&#xD;&#xA;&#x9;&#x9;&#x9;FROM  CF_action_type &#xD;&#xA;&#x9;&#x9;&#x9;WHERE&#x9; automatic_action_wcode  = 2&#xD;&#xA;&#x9;&#x9;&#x9;)&#xD;&#xA;&#x9;&#x9;)&#xD;&#xA;&#x9; AND&#x9;NOT   exists&#xD;&#xA;&#x9;&#x9;(&#xD;&#xA;&#x9; &#x9;SELECT *&#xD;&#xA;&#x9;&#x9;FROM   [&quot;+ context.intermediateDB + &quot;].[dbo].VW_import_mark_file_freezes ff &#xD;&#xA;&#x9;&#x9;WHERE&#x9; ff.file_type  = T.file_type&#xD;&#xA;&#x9;&#x9; AND&#x9;ff.file_seq  = T.file_seq&#xD;&#xA;&#x9;&#x9; AND&#x9;ff.file_series  = T.file_series&#xD;&#xA;&#x9;&#x9; AND&#x9;ff.file_nbr  = T.file_nbr&#xD;&#xA;&#x9;&#x9;)&#xD;&#xA;&#x9; AND&#x9;NOT   exists&#xD;&#xA;&#x9;&#x9;(&#xD;&#xA;&#x9; &#x9;SELECT *&#xD;&#xA;&#x9;&#x9;FROM   [&quot;+ context.intermediateDB + &quot;].[dbo].VW_import_mark_udoc_freezes uf &#xD;&#xA;&#x9;&#x9;WHERE&#x9; uf.file_type  = T.file_type&#xD;&#xA;&#x9;&#x9; AND&#x9;uf.file_seq  = T.file_seq&#xD;&#xA;&#x9;&#x9; AND&#x9;uf.file_series  = T.file_series&#xD;&#xA;&#x9;&#x9; AND&#x9;uf.file_nbr  = T.file_nbr&#xD;&#xA;&#x9;&#x9;)&#xD;&#xA;&#x9;*/&#xD;&#xA;&#x9;/* If SPECIAL_FINAL_STATUS is not null and proc_typ / SPECIAL_FINAL_STATUS is not origin for &#xD;&#xA;&#x9;   a 'end of freezing' automatic action, then no 'freezing' document must be specified in tables&#xD;&#xA;&#x9;    [&quot;+ context.intermediateDB + &quot;].[dbo].VW_IMPORT_MARK_FREEZE_FILE or  [&quot;+ context.intermediateDB + &quot;].[dbo].VW_IMPORT_MARK_FREEZE_UDOC.&#xD;&#xA;&#x9;   Otherwise, message ?Special final status is not origin for an 'end of freezing' automatic action, but a freezings exist in  [&quot;+ context.intermediateDB + &quot;].[dbo].VW_IMPORT_MARK_FREEZE_FILE / UDOC? */&#xD;&#xA;/*&#xD;&#xA;&#x9;INSERT INTO   [&quot;+ context.intermediateDB + &quot;].[dbo].VW_IMPORT_MARK_RESULT   &#xD;&#xA;&#x9;&#x9;&#x9;( file_seq , &#xD;&#xA;&#x9;&#x9;&#x9;file_type , &#xD;&#xA;&#x9;&#x9;&#x9;file_series , &#xD;&#xA;&#x9;&#x9;&#x9;file_nbr , &#xD;&#xA;&#x9;&#x9;&#x9;ind_import , &#xD;&#xA;&#x9;&#x9;&#x9;msg_import )  &#xD;&#xA;&#x9;SELECT&#xD;&#xA;&#x9;&#x9;&#x9; T.file_seq,&#xD;&#xA;&#x9;&#x9;&#x9; T.file_type,&#xD;&#xA;&#x9;&#x9;&#x9; T.file_series,&#xD;&#xA;&#x9;&#x9;&#x9; T.file_nbr,&#xD;&#xA;&#x9;&#x9;&#x9; 2,&#xD;&#xA;&#x9;&#x9;&#x9; 'Special final status is not origin for an 'end of freezing' automatic action, but a freezings exist in  [&quot;+ context.intermediateDB + &quot;].[dbo].VW_IMPORT_MARK_FREEZE_FILE / UDOC'&#xD;&#xA;&#x9;FROM   [&quot;+ context.intermediateDB + &quot;].[dbo].VW_import_mark_actions T JOIN  [&quot;+ context.intermediateDB + &quot;].[dbo].VW_import_mark M ON T.file_seq  = M.file_seq&#xD;&#xA;&#x9;&#x9; AND&#x9;T.file_type  = M.file_type&#xD;&#xA;&#x9;&#x9; AND&#x9;T.file_series  = M.file_series&#xD;&#xA;&#x9;&#x9; AND&#x9;T.file_nbr  = M.file_nbr  JOIN CF_application_type AT ON M.application_type  = AT.appl_typ  COLLATE DATABASE_DEFAULT&#xD;&#xA;&#x9;WHERE&#x9; SPECIAL_FINAL_STATUS  is not null&#xD;&#xA;&#x9; AND&#x9; (GENERATE_PROC_TYP + SPECIAL_FINAL_STATUS) COLLATE DATABASE_DEFAULT NOT IN&#xD;&#xA;&#x9;&#x9;(&#xD;&#xA;&#x9; &#x9;SELECT&#x9;proc_typ + initial_status_code&#xD;&#xA;&#x9;&#x9;FROM  CF_migration &#xD;&#xA;&#x9;&#x9;WHERE&#x9; action_typ  in&#xD;&#xA;&#x9;&#x9;&#x9;(&#xD;&#xA;&#x9; &#x9;&#x9;SELECT action_typ&#xD;&#xA;&#x9;&#x9;&#x9;FROM  CF_action_type &#xD;&#xA;&#x9;&#x9;&#x9;WHERE&#x9; automatic_action_wcode  = 2&#xD;&#xA;&#x9;&#x9;&#x9;)&#xD;&#xA;&#x9;&#x9;)&#xD;&#xA;&#x9; AND&#x9;(  exists&#xD;&#xA;&#x9;&#x9;(&#xD;&#xA;&#x9; &#x9;SELECT *&#xD;&#xA;&#x9;&#x9;FROM   [&quot;+ context.intermediateDB + &quot;].[dbo].VW_import_mark_file_freezes ff &#xD;&#xA;&#x9;&#x9;WHERE&#x9; ff.file_type  = T.file_type&#xD;&#xA;&#x9;&#x9; AND&#x9;ff.file_seq  = T.file_seq&#xD;&#xA;&#x9;&#x9; AND&#x9;ff.file_series  = T.file_series&#xD;&#xA;&#x9;&#x9; AND&#x9;ff.file_nbr  = T.file_nbr&#xD;&#xA;&#x9;&#x9;)&#xD;&#xA;&#x9; OR&#x9;  exists&#xD;&#xA;&#x9;&#x9;(&#xD;&#xA;&#x9; &#x9;SELECT *&#xD;&#xA;&#x9;&#x9;FROM   [&quot;+ context.intermediateDB + &quot;].[dbo].VW_import_mark_udoc_freezes uf &#xD;&#xA;&#x9;&#x9;WHERE&#x9; uf.file_type  = T.file_type&#xD;&#xA;&#x9;&#x9; AND&#x9;uf.file_seq  = T.file_seq&#xD;&#xA;&#x9;&#x9; AND&#x9;uf.file_series  = T.file_series&#xD;&#xA;&#x9;&#x9; AND&#x9;uf.file_nbr  = T.file_nbr&#xD;&#xA;&#x9;&#x9;))&#xD;&#xA;&#x9;&#xD;&#xA;*/&#x9;&#x9;&#xD;&#xA;&#xD;&#xA;&#x9;&#x9;&#xD;&#xA;&#x9;&#x9;&#xD;&#xA;&#x9;&#x9;/* If ACTION_NOTES1 is not null and CF_ACTION_TYPE.NOTES1_PROMPT is null, &#xD;&#xA;&#x9;&#x9;       message 'Current configuration indicates that this action type does not accept an action notes 1' */&#xD;&#xA;&#x9;&#x9;/* Performace note: join with  [&quot;+ context.intermediateDB + &quot;].[dbo].VW_IMPORT_MARK to select marks with IND_IMPORT = 0 */&#xD;&#xA;&#x9;&#x9;/* OJO ignorar por ahora &#xD;&#xA;&#x9;&#x9;    insert  into  [&quot;+ context.intermediateDB + &quot;].[dbo].VW_IMPORT_MARK_RESULT (file_seq, file_type, file_series, file_nbr, ind_import, msg_import)&#xD;&#xA;&#x9;&#x9;    select  T.file_seq, T.file_type, T.file_series, T.file_nbr,&#xD;&#xA;&#x9;&#x9;            2, 'Current configuration indicates that this action type does not accept an action notes 1'&#xD;&#xA;&#x9;&#x9;    from     [&quot;+ context.intermediateDB + &quot;].[dbo].VW_import_mark_actions T&#xD;&#xA;&#x9;&#x9;            join CF_action_type AT on&#xD;&#xA;&#x9;&#x9;                T.action_type   = AT.action_typ&#xD;&#xA;&#x9;&#x9;    where   length(ACTION_NOTES1)   > 1   and&#xD;&#xA;&#x9;&#x9;            NOTES1_PROMPT           is null&#xD;&#xA;&#x9;&#x9;    ;&#xD;&#xA;&#x9;&#x9;*/&#xD;&#xA;&#x9;&#x9;/* If ACTION_NOTES2 is not null and CF_ACTION_TYPE.NOTES2_PROMPT is null, &#xD;&#xA;&#x9;&#x9;       message 'Current configuration indicates that this action type does not accept an action notes 2' */&#xD;&#xA;&#x9;&#x9;/* Performace note: join with  [&quot;+ context.intermediateDB + &quot;].[dbo].VW_IMPORT_MARK to select marks with IND_IMPORT = 0 */&#xD;&#xA;&#x9;&#x9;/* OJO ignorar por ahora&#xD;&#xA;&#x9;&#x9;    insert  into  [&quot;+ context.intermediateDB + &quot;].[dbo].VW_IMPORT_MARK_RESULT (file_seq, file_type, file_series, file_nbr, ind_import, msg_import)&#xD;&#xA;&#x9;&#x9;    select  T.file_seq, T.file_type, T.file_series, T.file_nbr,&#xD;&#xA;&#x9;&#x9;            2, 'Current configuration indicates that this action type does not accept an action notes 2'&#xD;&#xA;&#x9;&#x9;    from     [&quot;+ context.intermediateDB + &quot;].[dbo].VW_import_mark_actions T&#xD;&#xA;&#x9;&#x9;            join CF_action_type AT on&#xD;&#xA;&#x9;&#x9;                T.action_type   = AT.action_typ&#xD;&#xA;&#x9;&#x9;    where   length(ACTION_NOTES2)   > 1   and&#xD;&#xA;&#x9;&#x9;            NOTES2_PROMPT           is null&#xD;&#xA;&#x9;&#x9;    ;&#xD;&#xA;&#x9;&#x9;*/&#xD;&#xA;&#x9;&#x9;/* If ACTION_NOTES3 is not null and CF_ACTION_TYPE.NOTES3_PROMPT is null, &#xD;&#xA;&#x9;&#x9;       message 'Current configuration indicates that this action type does not accept an action notes 3' */&#xD;&#xA;&#x9;&#x9;/* Performace note: join with  [&quot;+ context.intermediateDB + &quot;].[dbo].VW_IMPORT_MARK to select marks with IND_IMPORT = 0 */&#xD;&#xA;&#x9;&#x9;/* OJO ignorar por ahora&#xD;&#xA;&#x9;&#x9;    insert  into  [&quot;+ context.intermediateDB + &quot;].[dbo].VW_IMPORT_MARK_RESULT (file_seq, file_type, file_series, file_nbr, ind_import, msg_import)&#xD;&#xA;&#x9;&#x9;    select  T.file_seq, T.file_type, T.file_series, T.file_nbr,&#xD;&#xA;&#x9;&#x9;            2, 'Current configuration indicates that this action type does not accept an action notes 3'&#xD;&#xA;&#x9;&#x9;    from     [&quot;+ context.intermediateDB + &quot;].[dbo].VW_import_mark_actions T&#xD;&#xA;&#x9;&#x9;            join CF_action_type AT on&#xD;&#xA;&#x9;&#x9;                T.action_type   = AT.action_typ&#xD;&#xA;&#x9;&#x9;    where   length(ACTION_NOTES3)   > 1   and&#xD;&#xA;&#x9;&#x9;            NOTES3_PROMPT           is null&#xD;&#xA;&#x9;&#x9;    ;&#xD;&#xA;&#x9;&#x9;*/&#xD;&#xA;&#x9;&#x9;/* If ACTION_NOTES4 is not null and CF_ACTION_TYPE.NOTES4_PROMPT is null, &#xD;&#xA;&#x9;&#x9;       message 'Current configuration indicates that this action type does not accept an action notes 4' */&#xD;&#xA;&#x9;&#x9;/* Performace note: join with  [&quot;+ context.intermediateDB + &quot;].[dbo].VW_IMPORT_MARK to select marks with IND_IMPORT = 0 */&#xD;&#xA;&#x9;&#x9;/* OJO ignorar por ahora&#xD;&#xA;&#x9;&#x9;    insert  into  [&quot;+ context.intermediateDB + &quot;].[dbo].VW_IMPORT_MARK_RESULT (file_seq, file_type, file_series, file_nbr, ind_import, msg_import)&#xD;&#xA;&#x9;&#x9;    select  T.file_seq, T.file_type, T.file_series, T.file_nbr,&#xD;&#xA;&#x9;&#x9;            2, 'Current configuration indicates that this action type does not accept an action notes 4'&#xD;&#xA;&#x9;&#x9;    from     [&quot;+ context.intermediateDB + &quot;].[dbo].VW_import_mark_actions T&#xD;&#xA;&#x9;&#x9;            join CF_action_type AT on&#xD;&#xA;&#x9;&#x9;                T.action_type   = AT.action_typ&#xD;&#xA;&#x9;&#x9;    where   length(ACTION_NOTES4)   > 1   and&#xD;&#xA;&#x9;&#x9;            NOTES4_PROMPT           is null&#xD;&#xA;&#x9;&#x9;    ;&#xD;&#xA;&#x9;&#x9;*/&#xD;&#xA;&#x9;&#x9;/* If ACTION_NOTES5 is not null and CF_ACTION_TYPE.NOTES5_PROMPT is null, &#xD;&#xA;&#x9;&#x9;       message 'Current configuration indicates that this action type does not accept an action notes 5' */&#xD;&#xA;&#x9;&#x9;/* Performace note: join with  [&quot;+ context.intermediateDB + &quot;].[dbo].VW_IMPORT_MARK to select marks with IND_IMPORT = 0 */&#xD;&#xA;&#x9;&#x9;/* OJO ignorar por ahora&#xD;&#xA;&#x9;&#x9;    insert  into  [&quot;+ context.intermediateDB + &quot;].[dbo].VW_IMPORT_MARK_RESULT (file_seq, file_type, file_series, file_nbr, ind_import, msg_import)&#xD;&#xA;&#x9;&#x9;    select  T.file_seq, T.file_type, T.file_series, T.file_nbr,&#xD;&#xA;&#x9;&#x9;            2, 'Current configuration indicates that this action type does not accept an action notes 5'&#xD;&#xA;&#x9;&#x9;    from     [&quot;+ context.intermediateDB + &quot;].[dbo].VW_import_mark_actions T&#xD;&#xA;&#x9;&#x9;            join CF_action_type AT on&#xD;&#xA;&#x9;&#x9;                T.action_type   = AT.action_typ&#xD;&#xA;&#x9;&#x9;    where   length(ACTION_NOTES5)   > 1   and&#xD;&#xA;&#x9;&#x9;            NOTES5_PROMPT           is null&#xD;&#xA;&#x9;&#x9;    ;&#xD;&#xA;&#x9;&#x9;*/&#xD;&#xA;&#x9;&#x9;/* ACTION_USER: if not exists in IP_USER, message 'Invalid action user' */&#xD;&#xA;&#x9;&#x9;/* Performace note: join with  [&quot;+ context.intermediateDB + &quot;].[dbo].VW_IMPORT_MARK to select marks with IND_IMPORT = 0 */&#xD;&#xA;&#x9;&#x9;INSERT INTO   [&quot;+ context.intermediateDB + &quot;].[dbo].VW_IMPORT_MARK_RESULT   &#xD;&#xA;&#x9;&#x9;&#x9;&#x9;( file_seq , &#xD;&#xA;&#x9;&#x9;&#x9;&#x9;file_type , &#xD;&#xA;&#x9;&#x9;&#x9;&#x9;file_series , &#xD;&#xA;&#x9;&#x9;&#x9;&#x9;file_nbr , &#xD;&#xA;&#x9;&#x9;&#x9;&#x9;ind_import , &#xD;&#xA;&#x9;&#x9;&#x9;&#x9;msg_import )  &#xD;&#xA;&#x9;&#x9;SELECT&#xD;&#xA;&#x9;&#x9;&#x9;&#x9; T.file_seq,&#xD;&#xA;&#x9;&#x9;&#x9;&#x9; T.file_type,&#xD;&#xA;&#x9;&#x9;&#x9;&#x9; T.file_series,&#xD;&#xA;&#x9;&#x9;&#x9;&#x9; T.file_nbr,&#xD;&#xA;&#x9;&#x9;&#x9;&#x9; 2,&#xD;&#xA;&#x9;&#x9;&#x9;&#x9; 'Invalid action user'&#xD;&#xA;&#x9;&#x9;FROM   [&quot;+ context.intermediateDB + &quot;].[dbo].VW_import_mark_actions T &#xD;&#xA;&#x9;&#x9;WHERE&#x9; (ACTION_USER  is null&#xD;&#xA;&#x9;&#x9; OR&#x9;ACTION_USER  not in&#xD;&#xA;&#x9;&#x9;&#x9;(&#xD;&#xA;&#x9;&#x9; &#x9;SELECT user_id&#xD;&#xA;&#x9;&#x9;&#x9;FROM  IP_user &#xD;&#xA;&#x9;&#x9;&#x9;))&#xD;&#xA;&#xD;&#xA;&#x9;&#x9;/* if duplicate file + action date/type, message 'Duplicate action date and type' */&#xD;&#xA;&#x9;&#x9;INSERT INTO   [&quot;+ context.intermediateDB + &quot;].[dbo].VW_IMPORT_MARK_RESULT   &#xD;&#xA;&#x9;&#x9;&#x9;&#x9;( file_seq , &#xD;&#xA;&#x9;&#x9;&#x9;&#x9;file_type , &#xD;&#xA;&#x9;&#x9;&#x9;&#x9;file_series , &#xD;&#xA;&#x9;&#x9;&#x9;&#x9;file_nbr , &#xD;&#xA;&#x9;&#x9;&#x9;&#x9;ind_import , &#xD;&#xA;&#x9;&#x9;&#x9;&#x9;msg_import )  &#xD;&#xA;&#x9;&#x9;SELECT&#xD;&#xA;&#x9;&#x9;&#x9;&#x9; T.file_seq,&#xD;&#xA;&#x9;&#x9;&#x9;&#x9; T.file_type,&#xD;&#xA;&#x9;&#x9;&#x9;&#x9; T.file_series,&#xD;&#xA;&#x9;&#x9;&#x9;&#x9; T.file_nbr,&#xD;&#xA;&#x9;&#x9;&#x9;&#x9; 2,&#xD;&#xA;&#x9;&#x9;&#x9;&#x9; 'Duplicate action date and type'&#xD;&#xA;&#x9;&#x9;FROM   [&quot;+ context.intermediateDB + &quot;].[dbo].VW_import_mark_actions T &#xD;&#xA;&#x9;&#x9;GROUP&#x9;BY file_seq, file_type, file_series, file_nbr, action_date, action_type&#xD;&#xA;&#x9;&#x9;HAVING&#x9;COUNT(*) > 1&#xD;&#xA;&#x9;&#x9;&#xD;&#xA;&#xD;&#xA;&#x9;/* Check duplicated logos */&#xD;&#xA;&#x9;&#x9;INSERT INTO   [&quot;+ context.intermediateDB + &quot;].[dbo].VW_IMPORT_MARK_RESULT   &#xD;&#xA;&#x9;&#x9;&#x9;&#x9;( file_seq , &#xD;&#xA;&#x9;&#x9;&#x9;&#x9;file_type , &#xD;&#xA;&#x9;&#x9;&#x9;&#x9;file_series , &#xD;&#xA;&#x9;&#x9;&#x9;&#x9;file_nbr , &#xD;&#xA;&#x9;&#x9;&#x9;&#x9;ind_import , &#xD;&#xA;&#x9;&#x9;&#x9;&#x9;msg_import )&#xD;&#xA;&#x9;&#x9;&#x9;&#x9;&#xD;&#xA;&#x9;SELECT DISTINCT &#xD;&#xA;&#x9;&#x9;&#x9;FILE_SEQ,&#xD;&#xA;&#x9;&#x9;&#x9;FILE_TYPE,&#xD;&#xA;&#x9;&#x9;&#x9;FILE_SERIES,&#xD;&#xA;&#x9;&#x9;&#x9;FILE_NBR,&#xD;&#xA;&#x9;&#x9;&#x9;2,&#xD;&#xA;&#x9;&#x9;&#x9;'Duplicated Logo'&#xD;&#xA;&#x9;    FROM  [&quot;+ context.intermediateDB + &quot;].[dbo].VW_IMPORT_MARK_LOGOS M&#xD;&#xA;&#x9;    GROUP BY FILE_SEQ,FILE_TYPE,FILE_SERIES,FILE_NBR&#xD;&#xA;&#x9;&#x9;HAVING COUNT(*)>1&#xD;&#xA;&#x9;    &#xD;&#xA;&#x9; -- Move below check into CallToDateValidationPROC --> MarkDateValidationPROC SP   &#xD;&#xA;&#x9;/* IPAS-375 Added validation for filing date */&#xD;&#xA;&#x9;--insert  into  [&quot;+ context.intermediateDB + &quot;].[dbo].VW_IMPORT_MARK_RESULT (file_seq, file_type, file_series, file_nbr, ind_import, msg_import)&#xD;&#xA;&#x9;--select  T.file_seq, T.file_type, T.file_series, T.file_nbr, 2, 'Invalid Filing date. Filing date required to be greater than 1700-01-01 and lower than the current date.' &#xD;&#xA;&#x9;--from  [&quot;+ context.intermediateDB + &quot;].[dbo].VW_import_mark T where filing_date > GETDATE() or CAST(DATEPART(YYYY, filing_date) as NUMERIC) &lt; 1700&#xD;&#xA;&#xD;&#xA;&#x9;/* IPAS-623 FIX &#xD;&#xA;&#x9;&#x9;&#x9;Call to Mark Date validation &#xD;&#xA;&#x9;&#x9;*/&#xD;&#xA;&#x9;&#x9;&#x9;exec CallToDateValidationPROC 'MARK';&#x9;&#x9;&#xD;&#xA;&#x9;&#x9;/* FIX IPAS-623 Ends here*/&#xD;&#xA;&#x9;&#xD;&#xA;&#x9;&#x9;/* *************** END OF VALIDATIONS *************** */&#xD;&#xA;&#x9;&#x9;/* set import indicator to 'error', for those cases with error messages */&#xD;&#xA;&#x9;&#x9;UPDATE  M   &#xD;&#xA;&#x9;&#x9;SET&#x9;ind_import = 2 &#xD;&#xA;&#x9;&#x9;FROM   [&quot;+ context.intermediateDB + &quot;].[dbo].VW_IMPORT_MARK M &#xD;&#xA;&#x9;&#x9;WHERE    exists&#xD;&#xA;&#x9;&#x9;&#x9;(&#xD;&#xA;&#x9;&#x9; &#x9;SELECT *&#xD;&#xA;&#x9;&#x9;&#x9;FROM   [&quot;+ context.intermediateDB + &quot;].[dbo].VW_IMPORT_MARK_RESULT R &#xD;&#xA;&#x9;&#x9;&#x9;WHERE&#x9; M.file_seq  = R.file_seq&#xD;&#xA;&#x9;&#x9;&#x9; AND&#x9;M.file_type  = R.file_type&#xD;&#xA;&#x9;&#x9;&#x9; AND&#x9;M.file_series  = R.file_series&#xD;&#xA;&#x9;&#x9;&#x9; AND&#x9;M.file_nbr  = R.file_nbr&#xD;&#xA;&#x9;&#x9;&#x9;) &#xD;&#xA;&#x9;&#x9;&#xD;&#xA;&#x9;&#x9;/* set import indicator to 'validated', for those cases with no error messages */&#xD;&#xA;&#x9;&#x9;UPDATE  M   &#xD;&#xA;&#x9;&#x9;SET&#x9;ind_import = 9 &#xD;&#xA;&#x9;&#x9;FROM   [&quot;+ context.intermediateDB + &quot;].[dbo].VW_IMPORT_MARK M &#xD;&#xA;&#x9;&#x9;WHERE  ind_import  = 0 &#xD;&#xA;&#x9;&#x9;&#xD;&#xA;&#xD;&#xA;&#x9;&#x9;SET NOCOUNT OFF&#xD;&#xA;&#xD;&#xA;&#x9;END&#xD;&#xA;&quot;"/>
    <elementParameter field="LABEL" name="NOTE" value="This option only applies when deploying and running in the Talend Runtime" show="false"/>
    <elementParameter field="CHECK" name="SPECIFY_DATASOURCE_ALIAS" value="false" show="false"/>
    <elementParameter field="TEXT" name="DATASOURCE_ALIAS" value="&quot;&quot;" show="false"/>
    <elementParameter field="CHECK" name="DIE_ON_ERROR" value="false"/>
    <elementParameter field="TEXT" name="PROPERTIES" value="&quot;&quot;" show="false"/>
    <elementParameter field="CHECK" name="ACTIVE_DIR_AUTH" value="false" show="false"/>
    <elementParameter field="CHECK" name="PROPAGATE_RECORD_SET" value="false"/>
    <elementParameter field="COLUMN_LIST" name="RECORD_SET_COLUMN" value="" show="false"/>
    <elementParameter field="CHECK" name="USE_PREPAREDSTATEMENT" value="false"/>
    <elementParameter field="TABLE" name="SET_PREPAREDSTATEMENT_PARAMETERS" show="false"/>
    <elementParameter field="ENCODING_TYPE" name="ENCODING" value="&quot;ISO-8859-15&quot;" show="false"/>
    <elementParameter field="TECHNICAL" name="ENCODING:ENCODING_TYPE" value="ISO-8859-15"/>
    <elementParameter field="TEXT" name="COMMIT_EVERY" value="10000" show="false"/>
    <elementParameter field="TEXT" name="CONNECTION_FORMAT" value="row"/>
    <metadata connector="FLOW" name="tDBRow_2"/>
    <metadata connector="REJECT" name="REJECT">
      <column defaultValue="" key="false" length="255" name="errorCode" nullable="true" precision="0" sourceType="" type="id_String" originalLength="-1" usefulColumn="true"/>
      <column defaultValue="" key="false" length="255" name="errorMessage" nullable="true" precision="0" sourceType="" type="id_String" originalLength="-1" usefulColumn="true"/>
    </metadata>
  </node>
  <node componentName="tLogRow" componentVersion="0.101" offsetLabelX="0" offsetLabelY="0" posX="640" posY="1248">
    <elementParameter field="TEXT" name="UNIQUE_NAME" value="tLogRow_37" show="false"/>
    <elementParameter field="RADIO" name="BASIC_MODE" value="false"/>
    <elementParameter field="RADIO" name="TABLE_PRINT" value="false"/>
    <elementParameter field="RADIO" name="VERTICAL" value="true"/>
    <elementParameter field="RADIO" name="PRINT_UNIQUE" value="true"/>
    <elementParameter field="RADIO" name="PRINT_LABEL" value="false"/>
    <elementParameter field="RADIO" name="PRINT_UNIQUE_LABEL" value="false"/>
    <elementParameter field="TEXT" name="FIELDSEPARATOR" value="&quot;|&quot;" show="false"/>
    <elementParameter field="CHECK" name="PRINT_HEADER" value="false" show="false"/>
    <elementParameter field="CHECK" name="PRINT_UNIQUE_NAME" value="false" show="false"/>
    <elementParameter field="CHECK" name="PRINT_COLNAMES" value="false" show="false"/>
    <elementParameter field="CHECK" name="USE_FIXED_LENGTH" value="false" show="false"/>
    <elementParameter field="TABLE" name="LENGTHS" show="false">
      <elementValue elementRef="SCHEMA_COLUMN" value="errorCode"/>
      <elementValue elementRef="LENGTH" value="10"/>
      <elementValue elementRef="SCHEMA_COLUMN" value="errorMessage"/>
      <elementValue elementRef="LENGTH" value="10"/>
    </elementParameter>
    <elementParameter field="CHECK" name="PRINT_CONTENT_WITH_LOG4J" value="true"/>
    <elementParameter field="TEXT" name="SCHEMA_OPT_NUM" value="100" show="false"/>
    <elementParameter field="TEXT" name="CONNECTION_FORMAT" value="row"/>
    <metadata connector="FLOW" name="tLogRow_37">
      <column defaultValue="" key="false" length="255" name="errorCode" nullable="true" precision="0" sourceType="" type="id_String" originalLength="-1" usefulColumn="true"/>
      <column defaultValue="" key="false" length="255" name="errorMessage" nullable="true" precision="0" sourceType="" type="id_String" originalLength="-1" usefulColumn="true"/>
    </metadata>
  </node>
  <node componentName="tLogRow" componentVersion="0.101" offsetLabelX="0" offsetLabelY="0" posX="928" posY="1312">
    <elementParameter field="TEXT" name="UNIQUE_NAME" value="tLogRow_38" show="false"/>
    <elementParameter field="RADIO" name="BASIC_MODE" value="false"/>
    <elementParameter field="RADIO" name="TABLE_PRINT" value="false"/>
    <elementParameter field="RADIO" name="VERTICAL" value="true"/>
    <elementParameter field="RADIO" name="PRINT_UNIQUE" value="true"/>
    <elementParameter field="RADIO" name="PRINT_LABEL" value="false"/>
    <elementParameter field="RADIO" name="PRINT_UNIQUE_LABEL" value="false"/>
    <elementParameter field="TEXT" name="FIELDSEPARATOR" value="&quot;|&quot;" show="false"/>
    <elementParameter field="CHECK" name="PRINT_HEADER" value="false" show="false"/>
    <elementParameter field="CHECK" name="PRINT_UNIQUE_NAME" value="false" show="false"/>
    <elementParameter field="CHECK" name="PRINT_COLNAMES" value="false" show="false"/>
    <elementParameter field="CHECK" name="USE_FIXED_LENGTH" value="false" show="false"/>
    <elementParameter field="TABLE" name="LENGTHS" show="false">
      <elementValue elementRef="SCHEMA_COLUMN" value="errorCode"/>
      <elementValue elementRef="LENGTH" value="10"/>
      <elementValue elementRef="SCHEMA_COLUMN" value="errorMessage"/>
      <elementValue elementRef="LENGTH" value="10"/>
    </elementParameter>
    <elementParameter field="CHECK" name="PRINT_CONTENT_WITH_LOG4J" value="true"/>
    <elementParameter field="TEXT" name="SCHEMA_OPT_NUM" value="100" show="false"/>
    <elementParameter field="TEXT" name="CONNECTION_FORMAT" value="row"/>
    <metadata connector="FLOW" name="tLogRow_38">
      <column defaultValue="" key="false" length="255" name="errorCode" nullable="true" precision="0" sourceType="" type="id_String" originalLength="-1" usefulColumn="true"/>
      <column defaultValue="" key="false" length="255" name="errorMessage" nullable="true" precision="0" sourceType="" type="id_String" originalLength="-1" usefulColumn="true"/>
    </metadata>
  </node>
  <node componentName="tMSSqlRow" componentVersion="0.102" offsetLabelX="0" offsetLabelY="0" posX="96" posY="1376">
    <elementParameter field="TEXT" name="UNIQUE_NAME" value="tDBRow_3" show="false"/>
    <elementParameter field="CHECK" name="USE_EXISTING_CONNECTION" value="true"/>
    <elementParameter field="COMPONENT_LIST" name="CONNECTION" value="tMSSqlConnection_4"/>
    <elementParameter field="CLOSED_LIST" name="DRIVER" value="JTDS" show="false"/>
    <elementParameter field="TEXT" name="HOST" value="&quot;&quot;" show="false"/>
    <elementParameter field="TEXT" name="PORT" value="&quot;1433&quot;" show="false"/>
    <elementParameter field="TEXT" name="DB_SCHEMA" value="&quot;&quot;" show="false"/>
    <elementParameter field="TEXT" name="DBNAME" value="&quot;&quot;" show="false"/>
    <elementParameter field="TEXT" name="TYPE" value="MSSQL" show="false"/>
    <elementParameter field="TEXT" name="USER" value="&quot;&quot;" show="false"/>
    <elementParameter field="PASSWORD" name="PASS" value="enc:system.encryption.key.v1:JZqJE8SStzYrjz3rMu960GeQ+cEKbE5UUD+2vADY" show="false"/>
    <elementParameter field="DBTABLE" name="TABLE" value="&quot;&quot;"/>
    <elementParameter field="CHECK" name="IDENTITY_INSERT" value="false"/>
    <elementParameter field="QUERYSTORE_TYPE" name="QUERYSTORE" value="&quot;&quot;"/>
    <elementParameter field="TECHNICAL" name="QUERYSTORE:REPOSITORY_QUERYSTORE_TYPE" value="" show="false"/>
    <elementParameter field="TECHNICAL" name="QUERYSTORE:QUERYSTORE_TYPE" value="BUILT_IN"/>
    <elementParameter field="MEMO_SQL" name="QUERY" value="&quot;If Exists ( SELECT name &#xD;&#xA;            FROM sysobjects  &#xD;&#xA;            WHERE name = 'ImportMarkSearch'&#xD;&#xA;            AND type = 'P')&#xD;&#xA;&#x9;DROP PROCEDURE ImportMarkSearch&quot;"/>
    <elementParameter field="LABEL" name="NOTE" value="This option only applies when deploying and running in the Talend Runtime" show="false"/>
    <elementParameter field="CHECK" name="SPECIFY_DATASOURCE_ALIAS" value="false" show="false"/>
    <elementParameter field="TEXT" name="DATASOURCE_ALIAS" value="&quot;&quot;" show="false"/>
    <elementParameter field="CHECK" name="DIE_ON_ERROR" value="false"/>
    <elementParameter field="TEXT" name="PROPERTIES" value="&quot;&quot;" show="false"/>
    <elementParameter field="CHECK" name="ACTIVE_DIR_AUTH" value="false" show="false"/>
    <elementParameter field="CHECK" name="PROPAGATE_RECORD_SET" value="false"/>
    <elementParameter field="COLUMN_LIST" name="RECORD_SET_COLUMN" value="" show="false"/>
    <elementParameter field="CHECK" name="USE_PREPAREDSTATEMENT" value="false"/>
    <elementParameter field="TABLE" name="SET_PREPAREDSTATEMENT_PARAMETERS" show="false"/>
    <elementParameter field="ENCODING_TYPE" name="ENCODING" value="&quot;ISO-8859-15&quot;" show="false"/>
    <elementParameter field="TECHNICAL" name="ENCODING:ENCODING_TYPE" value="ISO-8859-15"/>
    <elementParameter field="TEXT" name="COMMIT_EVERY" value="10000" show="false"/>
    <elementParameter field="TEXT" name="CONNECTION_FORMAT" value="row"/>
    <metadata connector="FLOW" name="tDBRow_3"/>
    <metadata connector="REJECT" name="REJECT">
      <column defaultValue="" key="false" length="255" name="errorCode" nullable="true" precision="0" sourceType="" type="id_String" originalLength="-1" usefulColumn="true"/>
      <column defaultValue="" key="false" length="255" name="errorMessage" nullable="true" precision="0" sourceType="" type="id_String" originalLength="-1" usefulColumn="true"/>
    </metadata>
  </node>
  <node componentName="tMSSqlRow" componentVersion="0.102" offsetLabelX="0" offsetLabelY="0" posX="224" posY="1376">
    <elementParameter field="TEXT" name="UNIQUE_NAME" value="tDBRow_4" show="false"/>
    <elementParameter field="CHECK" name="USE_EXISTING_CONNECTION" value="true"/>
    <elementParameter field="COMPONENT_LIST" name="CONNECTION" value="tMSSqlConnection_4"/>
    <elementParameter field="CLOSED_LIST" name="DRIVER" value="JTDS" show="false"/>
    <elementParameter field="TEXT" name="HOST" value="&quot;&quot;" show="false"/>
    <elementParameter field="TEXT" name="PORT" value="&quot;1433&quot;" show="false"/>
    <elementParameter field="TEXT" name="DB_SCHEMA" value="&quot;&quot;" show="false"/>
    <elementParameter field="TEXT" name="DBNAME" value="&quot;&quot;" show="false"/>
    <elementParameter field="TEXT" name="TYPE" value="MSSQL" show="false"/>
    <elementParameter field="TEXT" name="USER" value="&quot;&quot;" show="false"/>
    <elementParameter field="PASSWORD" name="PASS" value="enc:system.encryption.key.v1:Z6BWvhPuVA7jqaTl3uxOrvNiehVDA5HFOu3+i3wj" show="false"/>
    <elementParameter field="DBTABLE" name="TABLE" value="&quot;&quot;"/>
    <elementParameter field="CHECK" name="IDENTITY_INSERT" value="false"/>
    <elementParameter field="QUERYSTORE_TYPE" name="QUERYSTORE" value="&quot;&quot;"/>
    <elementParameter field="TECHNICAL" name="QUERYSTORE:REPOSITORY_QUERYSTORE_TYPE" value="" show="false"/>
    <elementParameter field="TECHNICAL" name="QUERYSTORE:QUERYSTORE_TYPE" value="BUILT_IN"/>
    <elementParameter field="MEMO_SQL" name="QUERY" value="&quot;CREATE PROCEDURE ImportMarkSearch&#xD;&#xA;AS &#xD;&#xA;&#x9;BEGIN&#xD;&#xA;&#x9;&#x9;SET NOCOUNT ON&#xD;&#xA;&#x9;&#x9;&#xD;&#xA;&#x9;&#x9;/* Procedure name: ImportMarkSearch&#xD;&#xA;&#x9;&#x9;Input:  IPAS database&#xD;&#xA;&#x9;&#x9;Output: Search module updated and all names flagged as 'pending phonetization)&#xD;&#xA;&#x9;&#x9;create or replace procedure ImportMarkSearch as&#xD;&#xA;&#x9;&#x9;*/&#xD;&#xA;&#x9;&#x9;&#xD;&#xA;&#x9;&#x9;DECLARE @time1                                    DATETIME &#xD;&#xA;&#x9;&#x9;DECLARE @VarMarkCode                              FLOAT &#xD;&#xA;&#x9;&#x9;DECLARE @VarMarkName                              VARCHAR(2000) &#xD;&#xA;&#x9;&#x9;DECLARE @VarNiceClassMap                          VARCHAR(2000) &#xD;&#xA;&#xD;&#xA;&#x9;&#x9;DECLARE @nbr                                      INT&#xD;&#xA;&#xD;&#xA;&#x9;&#x9;-- positions for parsing of NICE_CLASS_TXT&#xD;&#xA;&#x9;&#x9;DECLARE @pos1                                     INT &#xD;&#xA;&#x9;&#x9;DECLARE @pos2                                     INT&#xD;&#xA;&#x9;&#x9;-- position for searching in class map&#xD;&#xA;&#x9;&#x9;DECLARE @pos                                      INT&#xD;&#xA;&#xD;&#xA;&#x9;&#x9;-- substring of NICE_CLASS_TXT&#xD;&#xA;&#x9;&#x9;DECLARE @string                                   VARCHAR(2000) &#xD;&#xA;&#x9;&#x9;-- substring of class map&#xD;&#xA;&#x9;&#x9;DECLARE @string2                                  VARCHAR(2000) &#xD;&#xA;&#x9;&#x9;-- storing the config param&#xD;&#xA;&#x9;&#x9;DECLARE @ConfigPhSrcFld&#x9;&#x9;&#x9;&#x9;&#x9;&#x9;&#x9;  VARCHAR(254) &#x9;&#xD;&#xA;&#x9;&#x9;&#xD;&#xA;&#x9;&#x9;DECLARE curMarkByName cursor LOCAL FOR &#xD;&#xA;&#x9;&#x9;SELECT&#x9;M.MARK_CODE, MARK_NAME, MARK_NAME_LANG2,&#xD;&#xA;&#x9;&#x9;&#x9;&#x9;file_seq, file_typ, file_ser, file_nbr, nice_class_txt, filing_date&#xD;&#xA;&#x9;&#x9;FROM  IP_MARK M JOIN IP_NAME N ON M.mark_code  = N.mark_code  &#xD;&#xA;&#x9;&#x9;WHERE&#x9; M.mark_code  is not null&#xD;&#xA;&#x9;&#x9;ORDER BY M.mark_code &#xD;&#xA;&#x9;&#x9;&#xD;&#xA;&#x9;&#x9;DECLARE @recMarkByName_MARK_CODE&#x9;&#x9;&#x9;NUMERIC&#xD;&#xA;&#x9;&#x9;DECLARE @recMarkByName_MARK_NAME&#x9;&#x9;&#x9;VARCHAR(2000)&#xD;&#xA;&#x9;&#x9;DECLARE @recMarkByName_MARK_NAME_LANG2&#x9;&#x9;VARCHAR(2000)&#xD;&#xA;&#x9;&#x9;DECLARE @recMarkByName_file_seq&#x9;&#x9;&#x9;&#x9;VARCHAR(200)&#xD;&#xA;&#x9;&#x9;DECLARE @recMarkByName_file_typ&#x9;&#x9;&#x9;&#x9;VARCHAR(200)&#xD;&#xA;&#x9;&#x9;DECLARE @recMarkByName_file_ser&#x9;&#x9;&#x9;&#x9;NUMERIC&#xD;&#xA;&#x9;&#x9;DECLARE @recMarkByName_file_nbr&#x9;&#x9;&#x9;&#x9;NUMERIC&#xD;&#xA;&#x9;&#x9;DECLARE @recMarkByName_nice_class_txt&#x9;&#x9;VARCHAR(200)&#xD;&#xA;&#x9;&#x9;DECLARE @recMarkByName_filing_date&#x9;&#x9;&#x9;DATETIME&#xD;&#xA;&#xD;&#xA;&#x9;&#x9;SET @time1  =  GETDATE()&#xD;&#xA;&#x9;&#x9;&#xD;&#xA;&#x9;&#x9;/* clear SE (search module) tables */&#xD;&#xA;&#x9;&#x9;DELETE FROM   se_name_pending    &#xD;&#xA;&#x9;&#x9;&#xD;&#xA;&#x9;&#x9;DELETE FROM   se_name_token    &#xD;&#xA;&#x9;&#x9;&#xD;&#xA;&#x9;&#x9;DELETE FROM   se_name    &#xD;&#xA;&#x9;&#x9;&#xD;&#xA;&#x9;&#x9;DELETE FROM   se_mark    &#xD;&#xA;&#x9;&#x9;&#xD;&#xA;&#x9;&#x9;/* IPAS-329: Select the phonetic search source field*/&#xD;&#xA;&#x9;&#x9;SELECT @ConfigPhSrcFld = value FROM CF_config_param WHERE config_code='PhoneticSearchSource';&#xD;&#xA;&#x9;&#x9;&#xD;&#xA;&#x9;&#x9;/* Note: the same codes will be used for SE_NAME and for IP_NAME,&#xD;&#xA;&#x9;&#x9;which will not necessarily be the case in the future */&#xD;&#xA;&#xD;&#xA;&#x9;&#x9;/* Browse WRK_MARK order by MARK_CODE in order to build groups */&#xD;&#xA;&#x9;&#x9;OPEN curMarkByName &#xD;&#xA;&#x9;&#x9;SET&#x9;@VarMarkCode  = 0 &#xD;&#xA;&#x9;&#x9;SET @VarMarkName  = '' &#xD;&#xA;&#x9;&#x9;SET @VarNiceClassMap  = '' &#xD;&#xA;&#x9;&#x9;WHILE (0 = 0) &#xD;&#xA;&#x9;&#x9;BEGIN --( &#xD;&#xA;&#x9;&#x9;&#x9;fetch NEXT FROM curMarkByName INTO @recMarkByName_MARK_CODE, @recMarkByName_MARK_NAME, @recMarkByName_MARK_NAME_LANG2, @recMarkByName_file_seq, @recMarkByName_file_typ, @recMarkByName_file_ser, @recMarkByName_file_nbr, @recMarkByName_nice_class_txt, @recMarkByName_filing_date&#xD;&#xA;&#xD;&#xA;&#x9;&#x9;&#x9;/* test end-of-group condition */&#xD;&#xA;&#x9;&#x9;&#x9;IF (@@FETCH_STATUS = -1) or (@@FETCH_STATUS &lt;> -1) and @recmarkByName_MARK_CODE &lt;> @VarMarkCode &#xD;&#xA;&#x9;&#x9;&#x9;BEGIN &#xD;&#xA;&#x9;&#x9;&#x9;&#x9;IF @VarMarkCode &lt;> 0 &#xD;&#xA;&#x9;&#x9;&#x9;&#x9;BEGIN &#xD;&#xA;&#x9;&#x9;&#x9;&#x9;&#x9;INSERT INTO  se_name   &#xD;&#xA;&#x9;&#x9;&#x9;&#x9;&#x9;&#x9;&#x9;( row_version , &#xD;&#xA;&#x9;&#x9;&#x9;&#x9;&#x9;&#x9;&#x9;mark_code , &#xD;&#xA;&#x9;&#x9;&#x9;&#x9;&#x9;&#x9;&#x9;mark_name , &#xD;&#xA;&#x9;&#x9;&#x9;&#x9;&#x9;&#x9;&#x9;nice_class_map )  &#xD;&#xA;&#x9;&#x9;&#x9;&#x9;&#x9; VALUES &#x9;&#x9;( 1 , &#xD;&#xA;&#x9;&#x9;&#x9;&#x9;&#x9;&#x9;&#x9;@VarMarkCode , &#xD;&#xA;&#x9;&#x9;&#x9;&#x9;&#x9;&#x9;&#x9;SUBSTRING(@VarMarkName, 1, 254) , &#xD;&#xA;&#x9;&#x9;&#x9;&#x9;&#x9;&#x9;&#x9;LTRIM(RTRIM(@VarNiceClassMap)) )  &#xD;&#xA;&#x9;&#x9;&#x9;&#x9;&#x9;&#xD;&#xA;&#x9;&#x9;&#x9;&#x9;END&#xD;&#xA;   &#xD;&#xA;&#x9;&#x9;&#x9;END&#xD;&#xA;   &#xD;&#xA;&#x9;&#x9;&#x9;/* test exit condition */&#xD;&#xA;&#x9;&#x9;&#x9;IF (@@FETCH_STATUS = -1) &#xD;&#xA;&#x9;&#x9;&#x9;BREAK&#xD;&#xA;&#xD;&#xA;&#x9;&#x9;&#x9;/* test beginning-of-group condition */&#xD;&#xA;&#x9;&#x9;&#x9;IF @recmarkByName_MARK_CODE &lt;> @VarMarkCode &#xD;&#xA;&#x9;&#x9;&#x9;BEGIN &#xD;&#xA;&#x9;&#x9;&#x9;&#x9;SET @VarMarkCode&#x9;= @recmarkByName_MARK_CODE &#xD;&#xA;&#x9;&#x9;&#x9;&#x9;SET @VarMarkName&#x9;= @recmarkByName_MARK_NAME &#xD;&#xA;&#x9;&#x9;&#x9;&#x9;IF @ConfigPhSrcFld = '2'&#xD;&#xA;&#x9;&#x9;&#x9;&#x9;BEGIN&#xD;&#xA;&#x9;&#x9;&#x9;&#x9;&#x9;SET @VarMarkName&#x9;= @recMarkByName_MARK_NAME_LANG2 &#xD;&#xA;&#x9;&#x9;&#x9;&#x9;END&#xD;&#xA;&#x9;&#x9;&#x9;&#x9;SET @VarNiceClassMap= '' &#xD;&#xA;&#x9;&#x9;&#x9;END&#xD;&#xA;   &#xD;&#xA;&#x9;&#x9;&#x9;/* insert SE_MARK */&#xD;&#xA;&#x9;&#x9;&#x9;INSERT INTO  se_mark   &#xD;&#xA;&#x9;&#x9;&#x9;&#x9;&#x9;( row_version , &#xD;&#xA;&#x9;&#x9;&#x9;&#x9;&#x9;ind_ipas , &#xD;&#xA;&#x9;&#x9;&#x9;&#x9;&#x9;mark_ref , &#xD;&#xA;&#x9;&#x9;&#x9;&#x9;&#x9;mark_code , &#xD;&#xA;&#x9;&#x9;&#x9;&#x9;&#x9;nice_class_txt , &#xD;&#xA;&#x9;&#x9;&#x9;&#x9;&#x9;search_date )  &#xD;&#xA;&#x9;&#x9;&#x9; VALUES &#x9;&#x9;( 1 , &#xD;&#xA;&#x9;&#x9;&#x9;&#x9;&#x9;'S' , &#xD;&#xA;&#x9;&#x9;&#x9;&#x9;&#x9;CAST(@recmarkByName_file_seq AS VARCHAR) + '/' + CAST(@recmarkByName_file_typ AS VARCHAR) + '/' + CAST(LTRIM(RTRIM(CONVERT(VARCHAR(23), @recmarkByName_file_ser))) AS VARCHAR) + '/' + CAST(CONVERT(VARCHAR(23), @recmarkByName_file_nbr) AS VARCHAR) , &#xD;&#xA;&#x9;&#x9;&#x9;&#x9;&#x9;@recmarkByName_mark_code , &#xD;&#xA;&#x9;&#x9;&#x9;&#x9;&#x9;@recmarkByName_nice_class_txt , &#xD;&#xA;&#x9;&#x9;&#x9;&#x9;&#x9;@recmarkByName_filing_date )  &#xD;&#xA;&#x9;&#x9;&#x9;&#xD;&#xA;&#x9;&#x9;&#x9;/* parse NICE_CLASS_TXT, convert each class number to a char code and append new codes in VarNiceClassMap */&#xD;&#xA;&#x9;&#x9;&#x9;SET @pos1  = 1 &#xD;&#xA;&#x9;&#x9;&#x9;SET @pos2  = 1 &#xD;&#xA;&#x9;&#x9;WHILE (0 = 0) &#xD;&#xA;&#x9;&#x9;&#x9;BEGIN --( &#xD;&#xA;&#x9;&#x9;&#x9;&#x9;/* all class numbers are separated by spaces plus an initial and final space */&#xD;&#xA;&#x9;&#x9;&#x9;&#x9;&#xD;&#xA;&#x9;&#x9;&#x9;&#x9;SET @pos1  = @pos2 &#xD;&#xA;&#x9;&#x9;&#x9;&#x9;SET @pos2  = CHARINDEX(' ', @recmarkByName_NICE_CLASS_TXT, @pos1 + 1)&#xD;&#xA;&#x9;&#x9;&#x9;&#x9;/* now pos1 and pos2 delimit a Nice class number */&#xD;&#xA;&#x9;&#x9;&#x9;&#x9;&#xD;&#xA;&#x9;&#x9;&#x9;&#x9;SET @string  = LTRIM(RTRIM(SUBSTRING(@recmarkByName_NICE_CLASS_TXT, @pos1, @pos2 - @pos1)))&#xD;&#xA;&#x9;&#x9;&#x9;&#x9;IF LEN(@string)> 0 &#xD;&#xA;&#x9;&#x9;&#x9;&#x9;BEGIN &#xD;&#xA;&#x9;&#x9;&#x9;&#x9;&#x9;SET @nbr  = CONVERT(NUMERIC(8, 2), @string)&#xD;&#xA;&#x9;&#x9;&#x9;&#x9;&#x9;/* convert nbr into a character code */&#xD;&#xA;&#x9;&#x9;&#x9;&#x9;&#x9;&#xD;&#xA;&#x9;&#x9;&#x9;&#x9;&#x9;SET @string2  = SUBSTRING('ABCDEFGHIJKLMNOPQRSTUVWXYZ7890123456/()=!@[]{}&lt;>&amp;#', @nbr, 1)&#xD;&#xA;&#x9;&#x9;&#x9;&#x9;&#x9;/* append new codes to VarNiceClassMap */&#xD;&#xA;&#x9;&#x9;&#x9;&#x9;&#x9;&#xD;&#xA;&#x9;&#x9;&#x9;&#x9;&#x9;SET @pos  = CHARINDEX(@string2, @VarNiceClassMap)&#xD;&#xA;&#x9;&#x9;&#x9;&#x9;&#x9;IF @pos = 0 &#xD;&#xA;&#x9;&#x9;&#x9;&#x9;&#x9;BEGIN &#xD;&#xA;&#x9;&#x9;&#x9;&#x9;&#x9;&#x9;SET @VarNiceClassMap  = @VarNiceClassMap + @string2 &#xD;&#xA;&#x9;&#x9;&#x9;&#x9;&#x9;END&#xD;&#xA;   &#xD;&#xA;&#x9;&#x9;&#x9;&#x9;END&#xD;&#xA;   &#xD;&#xA;&#x9;&#x9;&#x9;&#x9;-- the LEN function is not used becasue trailing spaces are ignored&#xD;&#xA;&#x9;&#x9;&#x9;&#x9;IF @pos2 = DATALENGTH(@recmarkByName_NICE_CLASS_TXT)&#xD;&#xA;&#x9;&#x9;&#x9;&#x9;BEGIN &#xD;&#xA;&#x9;&#x9;&#x9;&#x9;&#x9;BREAK&#xD;&#xA;&#x9;&#x9;&#x9;&#x9;END&#xD;&#xA;&#x9;&#x9;&#x9;END --) &#xD;&#xA;&#x9;&#x9;END --) &#xD;&#xA;&#x9;&#x9;&#xD;&#xA;&#x9;&#x9;close curMarkByName&#xD;&#xA;&#x9;&#x9;DEALLOCATE curMarkByName&#xD;&#xA;&#x9;&#x9;&#xD;&#xA;&#x9;&#x9;/* all names are flagged as pending for phonetization */&#xD;&#xA;&#x9;&#x9;INSERT INTO  se_name_pending    &#xD;&#xA;&#x9;&#x9;SELECT mark_code&#xD;&#xA;&#x9;&#x9;FROM  se_name &#xD;&#xA;&#x9;&#x9;&#xD;&#xA;&#x9;&#x9;SET NOCOUNT OFF&#xD;&#xA;&#xD;&#xA;&#x9;END&#xD;&#xA;&quot;"/>
    <elementParameter field="LABEL" name="NOTE" value="This option only applies when deploying and running in the Talend Runtime" show="false"/>
    <elementParameter field="CHECK" name="SPECIFY_DATASOURCE_ALIAS" value="false" show="false"/>
    <elementParameter field="TEXT" name="DATASOURCE_ALIAS" value="&quot;&quot;" show="false"/>
    <elementParameter field="CHECK" name="DIE_ON_ERROR" value="false"/>
    <elementParameter field="TEXT" name="PROPERTIES" value="&quot;&quot;" show="false"/>
    <elementParameter field="CHECK" name="ACTIVE_DIR_AUTH" value="false" show="false"/>
    <elementParameter field="CHECK" name="PROPAGATE_RECORD_SET" value="false"/>
    <elementParameter field="COLUMN_LIST" name="RECORD_SET_COLUMN" value="" show="false"/>
    <elementParameter field="CHECK" name="USE_PREPAREDSTATEMENT" value="false"/>
    <elementParameter field="TABLE" name="SET_PREPAREDSTATEMENT_PARAMETERS" show="false"/>
    <elementParameter field="ENCODING_TYPE" name="ENCODING" value="&quot;ISO-8859-15&quot;" show="false"/>
    <elementParameter field="TECHNICAL" name="ENCODING:ENCODING_TYPE" value="ISO-8859-15"/>
    <elementParameter field="TEXT" name="COMMIT_EVERY" value="10000" show="false"/>
    <elementParameter field="TEXT" name="CONNECTION_FORMAT" value="row"/>
    <metadata connector="FLOW" name="tDBRow_4"/>
    <metadata connector="REJECT" name="REJECT">
      <column defaultValue="" key="false" length="255" name="errorCode" nullable="true" precision="0" sourceType="" type="id_String" originalLength="-1" usefulColumn="true"/>
      <column defaultValue="" key="false" length="255" name="errorMessage" nullable="true" precision="0" sourceType="" type="id_String" originalLength="-1" usefulColumn="true"/>
    </metadata>
  </node>
  <node componentName="tLogRow" componentVersion="0.101" offsetLabelX="0" offsetLabelY="0" posX="64" posY="1440">
    <elementParameter field="TEXT" name="UNIQUE_NAME" value="tLogRow_39" show="false"/>
    <elementParameter field="RADIO" name="BASIC_MODE" value="false"/>
    <elementParameter field="RADIO" name="TABLE_PRINT" value="false"/>
    <elementParameter field="RADIO" name="VERTICAL" value="true"/>
    <elementParameter field="RADIO" name="PRINT_UNIQUE" value="true"/>
    <elementParameter field="RADIO" name="PRINT_LABEL" value="false"/>
    <elementParameter field="RADIO" name="PRINT_UNIQUE_LABEL" value="false"/>
    <elementParameter field="TEXT" name="FIELDSEPARATOR" value="&quot;|&quot;" show="false"/>
    <elementParameter field="CHECK" name="PRINT_HEADER" value="false" show="false"/>
    <elementParameter field="CHECK" name="PRINT_UNIQUE_NAME" value="false" show="false"/>
    <elementParameter field="CHECK" name="PRINT_COLNAMES" value="false" show="false"/>
    <elementParameter field="CHECK" name="USE_FIXED_LENGTH" value="false" show="false"/>
    <elementParameter field="TABLE" name="LENGTHS" show="false">
      <elementValue elementRef="SCHEMA_COLUMN" value="errorCode"/>
      <elementValue elementRef="LENGTH" value="10"/>
      <elementValue elementRef="SCHEMA_COLUMN" value="errorMessage"/>
      <elementValue elementRef="LENGTH" value="10"/>
    </elementParameter>
    <elementParameter field="CHECK" name="PRINT_CONTENT_WITH_LOG4J" value="true"/>
    <elementParameter field="TEXT" name="SCHEMA_OPT_NUM" value="100" show="false"/>
    <elementParameter field="TEXT" name="CONNECTION_FORMAT" value="row"/>
    <metadata connector="FLOW" name="tLogRow_39">
      <column defaultValue="" key="false" length="255" name="errorCode" nullable="true" precision="0" sourceType="" type="id_String" originalLength="-1" usefulColumn="true"/>
      <column defaultValue="" key="false" length="255" name="errorMessage" nullable="true" precision="0" sourceType="" type="id_String" originalLength="-1" usefulColumn="true"/>
    </metadata>
  </node>
  <node componentName="tLogRow" componentVersion="0.101" offsetLabelX="0" offsetLabelY="0" posX="224" posY="1440">
    <elementParameter field="TEXT" name="UNIQUE_NAME" value="tLogRow_40" show="false"/>
    <elementParameter field="RADIO" name="BASIC_MODE" value="false"/>
    <elementParameter field="RADIO" name="TABLE_PRINT" value="false"/>
    <elementParameter field="RADIO" name="VERTICAL" value="true"/>
    <elementParameter field="RADIO" name="PRINT_UNIQUE" value="true"/>
    <elementParameter field="RADIO" name="PRINT_LABEL" value="false"/>
    <elementParameter field="RADIO" name="PRINT_UNIQUE_LABEL" value="false"/>
    <elementParameter field="TEXT" name="FIELDSEPARATOR" value="&quot;|&quot;" show="false"/>
    <elementParameter field="CHECK" name="PRINT_HEADER" value="false" show="false"/>
    <elementParameter field="CHECK" name="PRINT_UNIQUE_NAME" value="false" show="false"/>
    <elementParameter field="CHECK" name="PRINT_COLNAMES" value="false" show="false"/>
    <elementParameter field="CHECK" name="USE_FIXED_LENGTH" value="false" show="false"/>
    <elementParameter field="TABLE" name="LENGTHS" show="false">
      <elementValue elementRef="SCHEMA_COLUMN" value="errorCode"/>
      <elementValue elementRef="LENGTH" value="10"/>
      <elementValue elementRef="SCHEMA_COLUMN" value="errorMessage"/>
      <elementValue elementRef="LENGTH" value="10"/>
    </elementParameter>
    <elementParameter field="CHECK" name="PRINT_CONTENT_WITH_LOG4J" value="true"/>
    <elementParameter field="TEXT" name="SCHEMA_OPT_NUM" value="100" show="false"/>
    <elementParameter field="TEXT" name="CONNECTION_FORMAT" value="row"/>
    <metadata connector="FLOW" name="tLogRow_40">
      <column defaultValue="" key="false" length="255" name="errorCode" nullable="true" precision="0" sourceType="" type="id_String" originalLength="-1" usefulColumn="true"/>
      <column defaultValue="" key="false" length="255" name="errorMessage" nullable="true" precision="0" sourceType="" type="id_String" originalLength="-1" usefulColumn="true"/>
    </metadata>
  </node>
  <node componentName="tMSSqlRow" componentVersion="0.102" offsetLabelX="0" offsetLabelY="0" posX="576" posY="1376">
    <elementParameter field="TEXT" name="UNIQUE_NAME" value="tDBRow_5" show="false"/>
    <elementParameter field="CHECK" name="USE_EXISTING_CONNECTION" value="true"/>
    <elementParameter field="COMPONENT_LIST" name="CONNECTION" value="tMSSqlConnection_4"/>
    <elementParameter field="CLOSED_LIST" name="DRIVER" value="JTDS" show="false"/>
    <elementParameter field="TEXT" name="HOST" value="&quot;&quot;" show="false"/>
    <elementParameter field="TEXT" name="PORT" value="&quot;1433&quot;" show="false"/>
    <elementParameter field="TEXT" name="DB_SCHEMA" value="&quot;&quot;" show="false"/>
    <elementParameter field="TEXT" name="DBNAME" value="&quot;&quot;" show="false"/>
    <elementParameter field="TEXT" name="TYPE" value="MSSQL" show="false"/>
    <elementParameter field="TEXT" name="USER" value="&quot;&quot;" show="false"/>
    <elementParameter field="PASSWORD" name="PASS" value="enc:system.encryption.key.v1:BQhn6bpmBYduMuY7pGyu9Gk6GmrkxPia45aWHDOu" show="false"/>
    <elementParameter field="DBTABLE" name="TABLE" value="&quot;&quot;"/>
    <elementParameter field="CHECK" name="IDENTITY_INSERT" value="false"/>
    <elementParameter field="QUERYSTORE_TYPE" name="QUERYSTORE" value="&quot;&quot;"/>
    <elementParameter field="TECHNICAL" name="QUERYSTORE:REPOSITORY_QUERYSTORE_TYPE" value="" show="false"/>
    <elementParameter field="TECHNICAL" name="QUERYSTORE:QUERYSTORE_TYPE" value="BUILT_IN"/>
    <elementParameter field="MEMO_SQL" name="QUERY" value="&quot;If Exists ( SELECT name &#xD;&#xA;            FROM sysobjects  &#xD;&#xA;            WHERE name = 'ImportMarkRelsValidate'&#xD;&#xA;            AND type = 'P')&#xD;&#xA;&#x9;DROP PROCEDURE ImportMarkRelsValidate&quot;"/>
    <elementParameter field="LABEL" name="NOTE" value="This option only applies when deploying and running in the Talend Runtime" show="false"/>
    <elementParameter field="CHECK" name="SPECIFY_DATASOURCE_ALIAS" value="false" show="false"/>
    <elementParameter field="TEXT" name="DATASOURCE_ALIAS" value="&quot;&quot;" show="false"/>
    <elementParameter field="CHECK" name="DIE_ON_ERROR" value="false"/>
    <elementParameter field="TEXT" name="PROPERTIES" value="&quot;&quot;" show="false"/>
    <elementParameter field="CHECK" name="ACTIVE_DIR_AUTH" value="false" show="false"/>
    <elementParameter field="CHECK" name="PROPAGATE_RECORD_SET" value="false"/>
    <elementParameter field="COLUMN_LIST" name="RECORD_SET_COLUMN" value="" show="false"/>
    <elementParameter field="CHECK" name="USE_PREPAREDSTATEMENT" value="false"/>
    <elementParameter field="TABLE" name="SET_PREPAREDSTATEMENT_PARAMETERS" show="false"/>
    <elementParameter field="ENCODING_TYPE" name="ENCODING" value="&quot;ISO-8859-15&quot;" show="false"/>
    <elementParameter field="TECHNICAL" name="ENCODING:ENCODING_TYPE" value="ISO-8859-15"/>
    <elementParameter field="TEXT" name="COMMIT_EVERY" value="10000" show="false"/>
    <elementParameter field="TEXT" name="CONNECTION_FORMAT" value="row"/>
    <metadata connector="FLOW" name="tDBRow_5"/>
    <metadata connector="REJECT" name="REJECT">
      <column defaultValue="" key="false" length="255" name="errorCode" nullable="true" precision="0" sourceType="" type="id_String" originalLength="-1" usefulColumn="true"/>
      <column defaultValue="" key="false" length="255" name="errorMessage" nullable="true" precision="0" sourceType="" type="id_String" originalLength="-1" usefulColumn="true"/>
    </metadata>
  </node>
  <node componentName="tMSSqlRow" componentVersion="0.102" offsetLabelX="0" offsetLabelY="0" posX="704" posY="1376">
    <elementParameter field="TEXT" name="UNIQUE_NAME" value="tDBRow_6" show="false"/>
    <elementParameter field="CHECK" name="USE_EXISTING_CONNECTION" value="true"/>
    <elementParameter field="COMPONENT_LIST" name="CONNECTION" value="tMSSqlConnection_4"/>
    <elementParameter field="CLOSED_LIST" name="DRIVER" value="JTDS" show="false"/>
    <elementParameter field="TEXT" name="HOST" value="&quot;&quot;" show="false"/>
    <elementParameter field="TEXT" name="PORT" value="&quot;1433&quot;" show="false"/>
    <elementParameter field="TEXT" name="DB_SCHEMA" value="&quot;&quot;" show="false"/>
    <elementParameter field="TEXT" name="DBNAME" value="&quot;&quot;" show="false"/>
    <elementParameter field="TEXT" name="TYPE" value="MSSQL" show="false"/>
    <elementParameter field="TEXT" name="USER" value="&quot;&quot;" show="false"/>
    <elementParameter field="PASSWORD" name="PASS" value="enc:system.encryption.key.v1:7GJBy150gbrFslhQp8CvRvtUvr2KiUsBCmL96Kqn" show="false"/>
    <elementParameter field="DBTABLE" name="TABLE" value="&quot;&quot;"/>
    <elementParameter field="CHECK" name="IDENTITY_INSERT" value="false"/>
    <elementParameter field="QUERYSTORE_TYPE" name="QUERYSTORE" value="&quot;&quot;"/>
    <elementParameter field="TECHNICAL" name="QUERYSTORE:REPOSITORY_QUERYSTORE_TYPE" value="" show="false"/>
    <elementParameter field="TECHNICAL" name="QUERYSTORE:QUERYSTORE_TYPE" value="BUILT_IN"/>
    <elementParameter field="MEMO_SQL" name="QUERY" value="&quot;CREATE PROCEDURE ImportMarkRelsValidate&#xD;&#xA;AS &#xD;&#xA;&#x9;BEGIN&#xD;&#xA;&#x9;&#x9; /* flag all pending marks rels as to be validated */&#xD;&#xA;    update   [&quot;+ context.intermediateDB + &quot;].[dbo].VW_import_mark_rels &#xD;&#xA;    set     ind_import = 0&#xD;&#xA;    where   ind_import is null or&#xD;&#xA;            ind_import not in (0, 1)&#xD;&#xA;    ;&#xD;&#xA;    /* delete prior errors */&#xD;&#xA;    delete from  [&quot;+ context.intermediateDB + &quot;].[dbo].VW_IMPORT_MARK_RELS_RESULT;&#xD;&#xA;&#xD;&#xA;    /* 2.1.1  [&quot;+ context.intermediateDB + &quot;].[dbo].VW_IMPORT_MARK_RELS validations */&#xD;&#xA;&#xD;&#xA;    /* RELATIONSHIP_TYPE: if not exists in CF_RELATIONSHIP_TYPE, message “Invalid relationship type” */&#xD;&#xA;    insert  into  [&quot;+ context.intermediateDB + &quot;].[dbo].VW_IMPORT_MARK_RELS_RESULT (file_seq, file_type, file_series, file_nbr, &#xD;&#xA;                                             relationshIP_type, relationshIP_role, &#xD;&#xA;                                             related_file_seq, related_file_type, related_file_series, related_file_nbr, &#xD;&#xA;                                             ind_import, msg_import)&#xD;&#xA;    select  file_seq, file_type, file_series, file_nbr,&#xD;&#xA;            relationshIP_type, relationshIP_role, &#xD;&#xA;            related_file_seq, related_file_type, related_file_series, related_file_nbr, &#xD;&#xA;            2, 'Invalid relationship type'&#xD;&#xA;    from     [&quot;+ context.intermediateDB + &quot;].[dbo].VW_import_mark_rels&#xD;&#xA;    where   ind_import = 0      and&#xD;&#xA;            relationshIP_type COLLATE DATABASE_DEFAULT not in&#xD;&#xA;            (select relationshIP_typ&#xD;&#xA;             from   CF_relationshIP_type)&#xD;&#xA;    ;&#xD;&#xA;&#xD;&#xA;    /* RELATIONSHIP_ROLE: if not in 1 / 2, message “Invalid relationship role” */&#xD;&#xA;    insert  into  [&quot;+ context.intermediateDB + &quot;].[dbo].VW_IMPORT_MARK_RELS_RESULT (file_seq, file_type, file_series, file_nbr, &#xD;&#xA;                                             relationshIP_type, relationshIP_role, &#xD;&#xA;                                             related_file_seq, related_file_type, related_file_series, related_file_nbr, &#xD;&#xA;                                             ind_import, msg_import)&#xD;&#xA;    select  file_seq, file_type, file_series, file_nbr,&#xD;&#xA;            relationshIP_type, relationshIP_role, &#xD;&#xA;            related_file_seq, related_file_type, related_file_series, related_file_nbr, &#xD;&#xA;            2, 'Invalid relationship role'&#xD;&#xA;    from     [&quot;+ context.intermediateDB + &quot;].[dbo].VW_import_mark_rels&#xD;&#xA;    where   ind_import = 0      and&#xD;&#xA;            relationshIP_role not in ( '1', '2')&#xD;&#xA;    ;&#xD;&#xA;&#xD;&#xA;    /* If FILE_SEQ / FILE_TYPE / FILE_SERIES / FILE_NBR already exists in IP_FILE, insert message “File sequence / type / series / number is invalid” */&#xD;&#xA;    insert  into  [&quot;+ context.intermediateDB + &quot;].[dbo].VW_IMPORT_MARK_RELS_RESULT (file_seq, file_type, file_series, file_nbr, &#xD;&#xA;                                             relationshIP_type, relationshIP_role, &#xD;&#xA;                                             related_file_seq, related_file_type, related_file_series, related_file_nbr, &#xD;&#xA;                                             ind_import, msg_import)&#xD;&#xA;    select  file_seq, file_type, file_series, file_nbr,&#xD;&#xA;            relationshIP_type, relationshIP_role, &#xD;&#xA;            related_file_seq, related_file_type, related_file_series, related_file_nbr, &#xD;&#xA;            2, 'File sequence / type / series / number is invalid'&#xD;&#xA;    from     [&quot;+ context.intermediateDB + &quot;].[dbo].VW_import_mark_rels m&#xD;&#xA;    where   ind_import = 0      and not exists &#xD;&#xA;&#x9;&#x9;&#x9;(select * from IP_FILE f &#xD;&#xA;&#x9;&#x9;&#x9;where f.FILE_SEQ=m.FILE_SEQ COLLATE DATABASE_DEFAULT and f.FILE_TYP=m.FILE_TYPE COLLATE DATABASE_DEFAULT and f.FILE_SER=m.FILE_SERIES and f.FILE_NBR=m.FILE_NBR)&#xD;&#xA;    ;&#xD;&#xA;&#xD;&#xA;    /* If RELATED_FILE_SEQ / RELATED_FILE_TYPE / RELATED_FILE_SERIES / RELATED_FILE_NBR already exists in IP_FILE, insert message “Related file sequence / type / series / number is invalid” */&#xD;&#xA;    insert  into  [&quot;+ context.intermediateDB + &quot;].[dbo].VW_IMPORT_MARK_RELS_RESULT (file_seq, file_type, file_series, file_nbr, &#xD;&#xA;                                             relationshIP_type, relationshIP_role, &#xD;&#xA;                                             related_file_seq, related_file_type, related_file_series, related_file_nbr, &#xD;&#xA;                                             ind_import, msg_import)&#xD;&#xA;    select  file_seq, file_type, file_series, file_nbr,&#xD;&#xA;            relationshIP_type, relationshIP_role, &#xD;&#xA;            related_file_seq, related_file_type, related_file_series, related_file_nbr, &#xD;&#xA;            2, 'Related file sequence / type / series / number is invalid'&#xD;&#xA;    from     [&quot;+ context.intermediateDB + &quot;].[dbo].VW_import_mark_rels m&#xD;&#xA;    where   ind_import = 0      and not exists &#xD;&#xA;&#x9;&#x9;&#x9;(select * from IP_FILE f &#xD;&#xA;&#x9;&#x9;&#x9;where f.FILE_SEQ=m.RELATED_FILE_SEQ COLLATE DATABASE_DEFAULT and f.FILE_TYP=m.RELATED_FILE_TYPE COLLATE DATABASE_DEFAULT and f.FILE_SER=m.RELATED_FILE_SERIES and f.FILE_NBR=m.RELATED_FILE_NBR)&#xD;&#xA;&#x9;&#x9;&#x9;&#xD;&#xA;            &#xD;&#xA;    ;&#xD;&#xA;&#xD;&#xA;    /* *************** END OF VALIDATIONS *************** */&#xD;&#xA;&#xD;&#xA;    /* set import indicator to error, for those cases with error messages */&#xD;&#xA;    update  M&#xD;&#xA;    set     ind_import = 2&#xD;&#xA;&#x9;from&#x9; [&quot;+ context.intermediateDB + &quot;].[dbo].VW_IMPORT_MARK_RELS M&#xD;&#xA;    where   exists&#xD;&#xA;            (select *&#xD;&#xA;             from    [&quot;+ context.intermediateDB + &quot;].[dbo].VW_IMPORT_MARK_RELS_RESULT R&#xD;&#xA;             where  M.file_seq      = R.file_seq    and&#xD;&#xA;                    M.file_type     = R.file_type   and&#xD;&#xA;                    M.file_series   = R.file_series and&#xD;&#xA;                    M.file_nbr      = R.file_nbr&#xD;&#xA;            )&#xD;&#xA;    ;&#xD;&#xA;&#xD;&#xA;    /* set import indicator to validated, for those cases with no error messages */&#xD;&#xA;    update   [&quot;+ context.intermediateDB + &quot;].[dbo].VW_IMPORT_MARK_RELS &#xD;&#xA;    set     ind_import = 9&#xD;&#xA;    where   ind_import = 0&#xD;&#xA;    ;&#x9;END&#xD;&#xA;&quot;"/>
    <elementParameter field="LABEL" name="NOTE" value="This option only applies when deploying and running in the Talend Runtime" show="false"/>
    <elementParameter field="CHECK" name="SPECIFY_DATASOURCE_ALIAS" value="false" show="false"/>
    <elementParameter field="TEXT" name="DATASOURCE_ALIAS" value="&quot;&quot;" show="false"/>
    <elementParameter field="CHECK" name="DIE_ON_ERROR" value="false"/>
    <elementParameter field="TEXT" name="PROPERTIES" value="&quot;&quot;" show="false"/>
    <elementParameter field="CHECK" name="ACTIVE_DIR_AUTH" value="false" show="false"/>
    <elementParameter field="CHECK" name="PROPAGATE_RECORD_SET" value="false"/>
    <elementParameter field="COLUMN_LIST" name="RECORD_SET_COLUMN" value="" show="false"/>
    <elementParameter field="CHECK" name="USE_PREPAREDSTATEMENT" value="false"/>
    <elementParameter field="TABLE" name="SET_PREPAREDSTATEMENT_PARAMETERS" show="false"/>
    <elementParameter field="ENCODING_TYPE" name="ENCODING" value="&quot;ISO-8859-15&quot;" show="false"/>
    <elementParameter field="TECHNICAL" name="ENCODING:ENCODING_TYPE" value="ISO-8859-15"/>
    <elementParameter field="TEXT" name="COMMIT_EVERY" value="10000" show="false"/>
    <elementParameter field="TEXT" name="CONNECTION_FORMAT" value="row"/>
    <metadata connector="FLOW" name="tDBRow_6"/>
    <metadata connector="REJECT" name="REJECT">
      <column defaultValue="" key="false" length="255" name="errorCode" nullable="true" precision="0" sourceType="" type="id_String" originalLength="-1" usefulColumn="true"/>
      <column defaultValue="" key="false" length="255" name="errorMessage" nullable="true" precision="0" sourceType="" type="id_String" originalLength="-1" usefulColumn="true"/>
    </metadata>
  </node>
  <node componentName="tLogRow" componentVersion="0.101" offsetLabelX="0" offsetLabelY="0" posX="544" posY="1440">
    <elementParameter field="TEXT" name="UNIQUE_NAME" value="tLogRow_41" show="false"/>
    <elementParameter field="RADIO" name="BASIC_MODE" value="false"/>
    <elementParameter field="RADIO" name="TABLE_PRINT" value="false"/>
    <elementParameter field="RADIO" name="VERTICAL" value="true"/>
    <elementParameter field="RADIO" name="PRINT_UNIQUE" value="true"/>
    <elementParameter field="RADIO" name="PRINT_LABEL" value="false"/>
    <elementParameter field="RADIO" name="PRINT_UNIQUE_LABEL" value="false"/>
    <elementParameter field="TEXT" name="FIELDSEPARATOR" value="&quot;|&quot;" show="false"/>
    <elementParameter field="CHECK" name="PRINT_HEADER" value="false" show="false"/>
    <elementParameter field="CHECK" name="PRINT_UNIQUE_NAME" value="false" show="false"/>
    <elementParameter field="CHECK" name="PRINT_COLNAMES" value="false" show="false"/>
    <elementParameter field="CHECK" name="USE_FIXED_LENGTH" value="false" show="false"/>
    <elementParameter field="TABLE" name="LENGTHS" show="false">
      <elementValue elementRef="SCHEMA_COLUMN" value="errorCode"/>
      <elementValue elementRef="LENGTH" value="10"/>
      <elementValue elementRef="SCHEMA_COLUMN" value="errorMessage"/>
      <elementValue elementRef="LENGTH" value="10"/>
    </elementParameter>
    <elementParameter field="CHECK" name="PRINT_CONTENT_WITH_LOG4J" value="true"/>
    <elementParameter field="TEXT" name="SCHEMA_OPT_NUM" value="100" show="false"/>
    <elementParameter field="TEXT" name="CONNECTION_FORMAT" value="row"/>
    <metadata connector="FLOW" name="tLogRow_41">
      <column defaultValue="" key="false" length="255" name="errorCode" nullable="true" precision="0" sourceType="" type="id_String" originalLength="-1" usefulColumn="true"/>
      <column defaultValue="" key="false" length="255" name="errorMessage" nullable="true" precision="0" sourceType="" type="id_String" originalLength="-1" usefulColumn="true"/>
    </metadata>
  </node>
  <node componentName="tLogRow" componentVersion="0.101" offsetLabelX="0" offsetLabelY="0" posX="704" posY="1440">
    <elementParameter field="TEXT" name="UNIQUE_NAME" value="tLogRow_42" show="false"/>
    <elementParameter field="RADIO" name="BASIC_MODE" value="false"/>
    <elementParameter field="RADIO" name="TABLE_PRINT" value="false"/>
    <elementParameter field="RADIO" name="VERTICAL" value="true"/>
    <elementParameter field="RADIO" name="PRINT_UNIQUE" value="true"/>
    <elementParameter field="RADIO" name="PRINT_LABEL" value="false"/>
    <elementParameter field="RADIO" name="PRINT_UNIQUE_LABEL" value="false"/>
    <elementParameter field="TEXT" name="FIELDSEPARATOR" value="&quot;|&quot;" show="false"/>
    <elementParameter field="CHECK" name="PRINT_HEADER" value="false" show="false"/>
    <elementParameter field="CHECK" name="PRINT_UNIQUE_NAME" value="false" show="false"/>
    <elementParameter field="CHECK" name="PRINT_COLNAMES" value="false" show="false"/>
    <elementParameter field="CHECK" name="USE_FIXED_LENGTH" value="false" show="false"/>
    <elementParameter field="TABLE" name="LENGTHS" show="false">
      <elementValue elementRef="SCHEMA_COLUMN" value="errorCode"/>
      <elementValue elementRef="LENGTH" value="10"/>
      <elementValue elementRef="SCHEMA_COLUMN" value="errorMessage"/>
      <elementValue elementRef="LENGTH" value="10"/>
    </elementParameter>
    <elementParameter field="CHECK" name="PRINT_CONTENT_WITH_LOG4J" value="true"/>
    <elementParameter field="TEXT" name="SCHEMA_OPT_NUM" value="100" show="false"/>
    <elementParameter field="TEXT" name="CONNECTION_FORMAT" value="row"/>
    <metadata connector="FLOW" name="tLogRow_42">
      <column defaultValue="" key="false" length="255" name="errorCode" nullable="true" precision="0" sourceType="" type="id_String" originalLength="-1" usefulColumn="true"/>
      <column defaultValue="" key="false" length="255" name="errorMessage" nullable="true" precision="0" sourceType="" type="id_String" originalLength="-1" usefulColumn="true"/>
    </metadata>
  </node>
  <node componentName="tMSSqlRow" componentVersion="0.102" offsetLabelX="0" offsetLabelY="0" posX="64" posY="1600">
    <elementParameter field="TEXT" name="UNIQUE_NAME" value="tDBRow_7" show="false"/>
    <elementParameter field="CHECK" name="USE_EXISTING_CONNECTION" value="true"/>
    <elementParameter field="COMPONENT_LIST" name="CONNECTION" value="tMSSqlConnection_4"/>
    <elementParameter field="CLOSED_LIST" name="DRIVER" value="JTDS" show="false"/>
    <elementParameter field="TEXT" name="HOST" value="&quot;&quot;" show="false"/>
    <elementParameter field="TEXT" name="PORT" value="&quot;1433&quot;" show="false"/>
    <elementParameter field="TEXT" name="DB_SCHEMA" value="&quot;&quot;" show="false"/>
    <elementParameter field="TEXT" name="DBNAME" value="&quot;&quot;" show="false"/>
    <elementParameter field="TEXT" name="TYPE" value="MSSQL" show="false"/>
    <elementParameter field="TEXT" name="USER" value="&quot;&quot;" show="false"/>
    <elementParameter field="PASSWORD" name="PASS" value="enc:system.encryption.key.v1:xCwxAllHC3jHD3KOOJGZRTmCmeMBEsowMR/CX277" show="false"/>
    <elementParameter field="DBTABLE" name="TABLE" value="&quot;&quot;"/>
    <elementParameter field="CHECK" name="IDENTITY_INSERT" value="false"/>
    <elementParameter field="QUERYSTORE_TYPE" name="QUERYSTORE" value="&quot;&quot;"/>
    <elementParameter field="TECHNICAL" name="QUERYSTORE:REPOSITORY_QUERYSTORE_TYPE" value="" show="false"/>
    <elementParameter field="TECHNICAL" name="QUERYSTORE:QUERYSTORE_TYPE" value="BUILT_IN"/>
    <elementParameter field="MEMO_SQL" name="QUERY" value="&quot;If Exists ( SELECT name &#xD;&#xA;            FROM sysobjects  &#xD;&#xA;            WHERE name = 'ImportMarkRelsProcessAll'&#xD;&#xA;            AND type = 'P')&#xD;&#xA;&#x9;DROP PROCEDURE ImportMarkRelsProcessAll&quot;"/>
    <elementParameter field="LABEL" name="NOTE" value="This option only applies when deploying and running in the Talend Runtime" show="false"/>
    <elementParameter field="CHECK" name="SPECIFY_DATASOURCE_ALIAS" value="false" show="false"/>
    <elementParameter field="TEXT" name="DATASOURCE_ALIAS" value="&quot;&quot;" show="false"/>
    <elementParameter field="CHECK" name="DIE_ON_ERROR" value="false"/>
    <elementParameter field="TEXT" name="PROPERTIES" value="&quot;&quot;" show="false"/>
    <elementParameter field="CHECK" name="ACTIVE_DIR_AUTH" value="false" show="false"/>
    <elementParameter field="CHECK" name="PROPAGATE_RECORD_SET" value="false"/>
    <elementParameter field="COLUMN_LIST" name="RECORD_SET_COLUMN" value="" show="false"/>
    <elementParameter field="CHECK" name="USE_PREPAREDSTATEMENT" value="false"/>
    <elementParameter field="TABLE" name="SET_PREPAREDSTATEMENT_PARAMETERS" show="false"/>
    <elementParameter field="ENCODING_TYPE" name="ENCODING" value="&quot;ISO-8859-15&quot;" show="false"/>
    <elementParameter field="TECHNICAL" name="ENCODING:ENCODING_TYPE" value="ISO-8859-15"/>
    <elementParameter field="TEXT" name="COMMIT_EVERY" value="10000" show="false"/>
    <elementParameter field="TEXT" name="CONNECTION_FORMAT" value="row"/>
    <metadata connector="FLOW" name="tDBRow_7"/>
    <metadata connector="REJECT" name="REJECT">
      <column defaultValue="" key="false" length="255" name="errorCode" nullable="true" precision="0" sourceType="" type="id_String" originalLength="-1" usefulColumn="true"/>
      <column defaultValue="" key="false" length="255" name="errorMessage" nullable="true" precision="0" sourceType="" type="id_String" originalLength="-1" usefulColumn="true"/>
    </metadata>
  </node>
  <node componentName="tMSSqlRow" componentVersion="0.102" offsetLabelX="0" offsetLabelY="0" posX="192" posY="1600">
    <elementParameter field="TEXT" name="UNIQUE_NAME" value="tDBRow_8" show="false"/>
    <elementParameter field="CHECK" name="USE_EXISTING_CONNECTION" value="true"/>
    <elementParameter field="COMPONENT_LIST" name="CONNECTION" value="tMSSqlConnection_4"/>
    <elementParameter field="CLOSED_LIST" name="DRIVER" value="JTDS" show="false"/>
    <elementParameter field="TEXT" name="HOST" value="&quot;&quot;" show="false"/>
    <elementParameter field="TEXT" name="PORT" value="&quot;1433&quot;" show="false"/>
    <elementParameter field="TEXT" name="DB_SCHEMA" value="&quot;&quot;" show="false"/>
    <elementParameter field="TEXT" name="DBNAME" value="&quot;&quot;" show="false"/>
    <elementParameter field="TEXT" name="TYPE" value="MSSQL" show="false"/>
    <elementParameter field="TEXT" name="USER" value="&quot;&quot;" show="false"/>
    <elementParameter field="PASSWORD" name="PASS" value="enc:system.encryption.key.v1:THwwAd90BrtK2URxj1+v72WqCHgZ0BwW4Hetan7B" show="false"/>
    <elementParameter field="DBTABLE" name="TABLE" value="&quot;&quot;"/>
    <elementParameter field="CHECK" name="IDENTITY_INSERT" value="false"/>
    <elementParameter field="QUERYSTORE_TYPE" name="QUERYSTORE" value="&quot;&quot;"/>
    <elementParameter field="TECHNICAL" name="QUERYSTORE:REPOSITORY_QUERYSTORE_TYPE" value="" show="false"/>
    <elementParameter field="TECHNICAL" name="QUERYSTORE:QUERYSTORE_TYPE" value="BUILT_IN"/>
    <elementParameter field="MEMO_SQL" name="QUERY" value="&quot;CREATE PROCEDURE ImportMarkRelsProcessAll&#xD;&#xA;AS &#xD;&#xA;&#x9;BEGIN&#xD;&#xA;/* insert forward relationships */&#xD;&#xA;    insert into ip_file_relationship (row_version, &#xD;&#xA;                                      file_seq1, file_typ1, file_ser1, file_nbr1, &#xD;&#xA;                                      file_seq2, file_typ2, file_ser2, file_nbr2, relationship_typ)&#xD;&#xA;    select  distinct 1, &#xD;&#xA;            file_seq, file_type, file_series, file_nbr,&#xD;&#xA;            related_file_seq, related_file_type, related_file_series, related_file_nbr,&#xD;&#xA;            relationship_type&#xD;&#xA;    from    [&quot;+ context.intermediateDB + &quot;].[dbo].VW_IMPORT_MARK_RELS&#xD;&#xA;    where   ind_import = '9' and&#xD;&#xA;            relationship_role = '1'&#xD;&#xA;    ;&#xD;&#xA;&#xD;&#xA;    /* insert backward relationships */&#xD;&#xA;    insert into ip_file_relationship (row_version, &#xD;&#xA;                                      file_seq1, file_typ1, file_ser1, file_nbr1, &#xD;&#xA;                                      file_seq2, file_typ2, file_ser2, file_nbr2, relationship_typ)&#xD;&#xA;    select  distinct 1, &#xD;&#xA;            related_file_seq, related_file_type, related_file_series, related_file_nbr,&#xD;&#xA;            file_seq, file_type, file_series, file_nbr,&#xD;&#xA;            relationship_type&#xD;&#xA;    from    [&quot;+ context.intermediateDB + &quot;].[dbo].VW_IMPORT_MARK_RELS&#xD;&#xA;    where   ind_import = '9' and&#xD;&#xA;            relationship_role = '2'&#xD;&#xA;    ;&#xD;&#xA;&#x9;END&#xD;&#xA;&quot;"/>
    <elementParameter field="LABEL" name="NOTE" value="This option only applies when deploying and running in the Talend Runtime" show="false"/>
    <elementParameter field="CHECK" name="SPECIFY_DATASOURCE_ALIAS" value="false" show="false"/>
    <elementParameter field="TEXT" name="DATASOURCE_ALIAS" value="&quot;&quot;" show="false"/>
    <elementParameter field="CHECK" name="DIE_ON_ERROR" value="false"/>
    <elementParameter field="TEXT" name="PROPERTIES" value="&quot;&quot;" show="false"/>
    <elementParameter field="CHECK" name="ACTIVE_DIR_AUTH" value="false" show="false"/>
    <elementParameter field="CHECK" name="PROPAGATE_RECORD_SET" value="false"/>
    <elementParameter field="COLUMN_LIST" name="RECORD_SET_COLUMN" value="" show="false"/>
    <elementParameter field="CHECK" name="USE_PREPAREDSTATEMENT" value="false"/>
    <elementParameter field="TABLE" name="SET_PREPAREDSTATEMENT_PARAMETERS" show="false"/>
    <elementParameter field="ENCODING_TYPE" name="ENCODING" value="&quot;ISO-8859-15&quot;" show="false"/>
    <elementParameter field="TECHNICAL" name="ENCODING:ENCODING_TYPE" value="ISO-8859-15"/>
    <elementParameter field="TEXT" name="COMMIT_EVERY" value="10000" show="false"/>
    <elementParameter field="TEXT" name="CONNECTION_FORMAT" value="row"/>
    <metadata connector="FLOW" name="tDBRow_8"/>
    <metadata connector="REJECT" name="REJECT">
      <column defaultValue="" key="false" length="255" name="errorCode" nullable="true" precision="0" sourceType="" type="id_String" originalLength="-1" usefulColumn="true"/>
      <column defaultValue="" key="false" length="255" name="errorMessage" nullable="true" precision="0" sourceType="" type="id_String" originalLength="-1" usefulColumn="true"/>
    </metadata>
  </node>
  <node componentName="tLogRow" componentVersion="0.101" offsetLabelX="0" offsetLabelY="0" posX="32" posY="1664">
    <elementParameter field="TEXT" name="UNIQUE_NAME" value="tLogRow_43" show="false"/>
    <elementParameter field="RADIO" name="BASIC_MODE" value="false"/>
    <elementParameter field="RADIO" name="TABLE_PRINT" value="false"/>
    <elementParameter field="RADIO" name="VERTICAL" value="true"/>
    <elementParameter field="RADIO" name="PRINT_UNIQUE" value="true"/>
    <elementParameter field="RADIO" name="PRINT_LABEL" value="false"/>
    <elementParameter field="RADIO" name="PRINT_UNIQUE_LABEL" value="false"/>
    <elementParameter field="TEXT" name="FIELDSEPARATOR" value="&quot;|&quot;" show="false"/>
    <elementParameter field="CHECK" name="PRINT_HEADER" value="false" show="false"/>
    <elementParameter field="CHECK" name="PRINT_UNIQUE_NAME" value="false" show="false"/>
    <elementParameter field="CHECK" name="PRINT_COLNAMES" value="false" show="false"/>
    <elementParameter field="CHECK" name="USE_FIXED_LENGTH" value="false" show="false"/>
    <elementParameter field="TABLE" name="LENGTHS" show="false">
      <elementValue elementRef="SCHEMA_COLUMN" value="errorCode"/>
      <elementValue elementRef="LENGTH" value="10"/>
      <elementValue elementRef="SCHEMA_COLUMN" value="errorMessage"/>
      <elementValue elementRef="LENGTH" value="10"/>
    </elementParameter>
    <elementParameter field="CHECK" name="PRINT_CONTENT_WITH_LOG4J" value="true"/>
    <elementParameter field="TEXT" name="SCHEMA_OPT_NUM" value="100" show="false"/>
    <elementParameter field="TEXT" name="CONNECTION_FORMAT" value="row"/>
    <metadata connector="FLOW" name="tLogRow_43">
      <column defaultValue="" key="false" length="255" name="errorCode" nullable="true" precision="0" sourceType="" type="id_String" originalLength="-1" usefulColumn="true"/>
      <column defaultValue="" key="false" length="255" name="errorMessage" nullable="true" precision="0" sourceType="" type="id_String" originalLength="-1" usefulColumn="true"/>
    </metadata>
  </node>
  <node componentName="tLogRow" componentVersion="0.101" offsetLabelX="0" offsetLabelY="0" posX="192" posY="1664">
    <elementParameter field="TEXT" name="UNIQUE_NAME" value="tLogRow_44" show="false"/>
    <elementParameter field="RADIO" name="BASIC_MODE" value="false"/>
    <elementParameter field="RADIO" name="TABLE_PRINT" value="false"/>
    <elementParameter field="RADIO" name="VERTICAL" value="true"/>
    <elementParameter field="RADIO" name="PRINT_UNIQUE" value="true"/>
    <elementParameter field="RADIO" name="PRINT_LABEL" value="false"/>
    <elementParameter field="RADIO" name="PRINT_UNIQUE_LABEL" value="false"/>
    <elementParameter field="TEXT" name="FIELDSEPARATOR" value="&quot;|&quot;" show="false"/>
    <elementParameter field="CHECK" name="PRINT_HEADER" value="false" show="false"/>
    <elementParameter field="CHECK" name="PRINT_UNIQUE_NAME" value="false" show="false"/>
    <elementParameter field="CHECK" name="PRINT_COLNAMES" value="false" show="false"/>
    <elementParameter field="CHECK" name="USE_FIXED_LENGTH" value="false" show="false"/>
    <elementParameter field="TABLE" name="LENGTHS" show="false">
      <elementValue elementRef="SCHEMA_COLUMN" value="errorCode"/>
      <elementValue elementRef="LENGTH" value="10"/>
      <elementValue elementRef="SCHEMA_COLUMN" value="errorMessage"/>
      <elementValue elementRef="LENGTH" value="10"/>
    </elementParameter>
    <elementParameter field="CHECK" name="PRINT_CONTENT_WITH_LOG4J" value="true"/>
    <elementParameter field="TEXT" name="SCHEMA_OPT_NUM" value="100" show="false"/>
    <elementParameter field="TEXT" name="CONNECTION_FORMAT" value="row"/>
    <metadata connector="FLOW" name="tLogRow_44">
      <column defaultValue="" key="false" length="255" name="errorCode" nullable="true" precision="0" sourceType="" type="id_String" originalLength="-1" usefulColumn="true"/>
      <column defaultValue="" key="false" length="255" name="errorMessage" nullable="true" precision="0" sourceType="" type="id_String" originalLength="-1" usefulColumn="true"/>
    </metadata>
  </node>
  <node componentName="tMSSqlRow" componentVersion="0.102" offsetLabelX="0" offsetLabelY="0" posX="512" posY="1792">
    <elementParameter field="TEXT" name="UNIQUE_NAME" value="tDBRow_13" show="false"/>
    <elementParameter field="CHECK" name="USE_EXISTING_CONNECTION" value="true"/>
    <elementParameter field="COMPONENT_LIST" name="CONNECTION" value="tMSSqlConnection_4"/>
    <elementParameter field="CLOSED_LIST" name="DRIVER" value="JTDS" show="false"/>
    <elementParameter field="TEXT" name="HOST" value="&quot;&quot;" show="false"/>
    <elementParameter field="TEXT" name="PORT" value="&quot;1433&quot;" show="false"/>
    <elementParameter field="TEXT" name="DB_SCHEMA" value="&quot;&quot;" show="false"/>
    <elementParameter field="TEXT" name="DBNAME" value="&quot;&quot;" show="false"/>
    <elementParameter field="TEXT" name="TYPE" value="MSSQL" show="false"/>
    <elementParameter field="TEXT" name="USER" value="&quot;&quot;" show="false"/>
    <elementParameter field="PASSWORD" name="PASS" value="enc:system.encryption.key.v1:KK9yI1SupfLK3AMTeDxZrn+CihOLQmVyGIwpyGV+" show="false"/>
    <elementParameter field="DBTABLE" name="TABLE" value="&quot;&quot;"/>
    <elementParameter field="CHECK" name="IDENTITY_INSERT" value="false"/>
    <elementParameter field="QUERYSTORE_TYPE" name="QUERYSTORE" value="&quot;&quot;"/>
    <elementParameter field="TECHNICAL" name="QUERYSTORE:REPOSITORY_QUERYSTORE_TYPE" value="" show="false"/>
    <elementParameter field="TECHNICAL" name="QUERYSTORE:QUERYSTORE_TYPE" value="BUILT_IN"/>
    <elementParameter field="MEMO_SQL" name="QUERY" value="&quot;If Exists ( SELECT name &#xD;&#xA;            FROM sysobjects  &#xD;&#xA;            WHERE name = 'MarkDateValidationPROC'&#xD;&#xA;            AND type = 'P')&#xD;&#xA;&#x9;DROP PROCEDURE MarkDateValidationPROC&quot;"/>
    <elementParameter field="LABEL" name="NOTE" value="This option only applies when deploying and running in the Talend Runtime" show="false"/>
    <elementParameter field="CHECK" name="SPECIFY_DATASOURCE_ALIAS" value="false" show="false"/>
    <elementParameter field="TEXT" name="DATASOURCE_ALIAS" value="&quot;&quot;" show="false"/>
    <elementParameter field="CHECK" name="DIE_ON_ERROR" value="false"/>
    <elementParameter field="TEXT" name="PROPERTIES" value="&quot;&quot;" show="false"/>
    <elementParameter field="CHECK" name="ACTIVE_DIR_AUTH" value="false" show="false"/>
    <elementParameter field="CHECK" name="PROPAGATE_RECORD_SET" value="false"/>
    <elementParameter field="COLUMN_LIST" name="RECORD_SET_COLUMN" value="" show="false"/>
    <elementParameter field="CHECK" name="USE_PREPAREDSTATEMENT" value="false"/>
    <elementParameter field="TABLE" name="SET_PREPAREDSTATEMENT_PARAMETERS" show="false"/>
    <elementParameter field="ENCODING_TYPE" name="ENCODING" value="&quot;ISO-8859-15&quot;" show="false"/>
    <elementParameter field="TECHNICAL" name="ENCODING:ENCODING_TYPE" value="ISO-8859-15"/>
    <elementParameter field="TEXT" name="COMMIT_EVERY" value="10000" show="false"/>
    <elementParameter field="TEXT" name="CONNECTION_FORMAT" value="row"/>
    <metadata connector="FLOW" name="tDBRow_13"/>
    <metadata connector="REJECT" name="REJECT">
      <column defaultValue="" key="false" length="255" name="errorCode" nullable="true" precision="0" sourceType="" type="id_String" originalLength="-1" usefulColumn="true"/>
      <column defaultValue="" key="false" length="255" name="errorMessage" nullable="true" precision="0" sourceType="" type="id_String" originalLength="-1" usefulColumn="true"/>
    </metadata>
  </node>
  <node componentName="tMSSqlRow" componentVersion="0.102" offsetLabelX="0" offsetLabelY="0" posX="640" posY="1792">
    <elementParameter field="TEXT" name="UNIQUE_NAME" value="tDBRow_14" show="false"/>
    <elementParameter field="CHECK" name="USE_EXISTING_CONNECTION" value="true"/>
    <elementParameter field="COMPONENT_LIST" name="CONNECTION" value="tMSSqlConnection_4"/>
    <elementParameter field="CLOSED_LIST" name="DRIVER" value="JTDS" show="false"/>
    <elementParameter field="TEXT" name="HOST" value="&quot;&quot;" show="false"/>
    <elementParameter field="TEXT" name="PORT" value="&quot;1433&quot;" show="false"/>
    <elementParameter field="TEXT" name="DB_SCHEMA" value="&quot;&quot;" show="false"/>
    <elementParameter field="TEXT" name="DBNAME" value="&quot;&quot;" show="false"/>
    <elementParameter field="TEXT" name="TYPE" value="MSSQL" show="false"/>
    <elementParameter field="TEXT" name="USER" value="&quot;&quot;" show="false"/>
    <elementParameter field="PASSWORD" name="PASS" value="enc:system.encryption.key.v1:h4ZWfOl93OQbwhufz2AMNp7rpw0ZtIFaUy8dgyyO" show="false"/>
    <elementParameter field="DBTABLE" name="TABLE" value="&quot;&quot;"/>
    <elementParameter field="CHECK" name="IDENTITY_INSERT" value="false"/>
    <elementParameter field="QUERYSTORE_TYPE" name="QUERYSTORE" value="&quot;&quot;"/>
    <elementParameter field="TECHNICAL" name="QUERYSTORE:REPOSITORY_QUERYSTORE_TYPE" value="" show="false"/>
    <elementParameter field="TECHNICAL" name="QUERYSTORE:QUERYSTORE_TYPE" value="BUILT_IN"/>
    <elementParameter field="MEMO_SQL" name="QUERY" value="&quot;CREATE PROCEDURE MarkDateValidationPROC&#xD;&#xA;AS &#xD;&#xA;&#x9;BEGIN&#xD;&#xA;SET NOCOUNT ON&#xD;&#xA;&#x9;&#x9;&#xD;&#xA;&#x9;&#x9;-- 1.&#x9;Validate CAPTURE_DATE&#xD;&#xA;&#x9;&#x9;INSERT INTO  [&quot;+ context.intermediateDB + &quot;].[dbo].VW_IMPORT_MARK_RESULT (file_seq, file_type, file_series, file_nbr, ind_import, msg_import) &#xD;&#xA;&#x9;&#x9;SELECT T.file_seq, T.file_type, T.file_series, T.file_nbr, 2, 'Invalid CAPTURE_DATE. CAPTURE_DATE required to be greater than 1700-01-01 and lower than the current date.' &#xD;&#xA;&#x9;&#x9;FROM  [&quot;+ context.intermediateDB + &quot;].[dbo].VW_IMPORT_MARK T WHERE CAPTURE_DATE > GETDATE() or CAST(DATEPART(YYYY, CAPTURE_DATE) as NUMERIC) &lt; 1700;&#x9;&#xD;&#xA;&#x9;&#x9;&#xD;&#xA;&#x9;&#x9;-- 2.&#x9;Validate ENTITLEMENT_DATE&#xD;&#xA;&#x9;&#x9;INSERT INTO  [&quot;+ context.intermediateDB + &quot;].[dbo].VW_IMPORT_MARK_RESULT (file_seq, file_type, file_series, file_nbr, ind_import, msg_import) &#xD;&#xA;&#x9;&#x9;SELECT T.file_seq, T.file_type, T.file_series, T.file_nbr, 2, 'Invalid ENTITLEMENT_DATE. ENTITLEMENT_DATE required to be greater than 1700-01-01 and lower than the current date.' &#xD;&#xA;&#x9;&#x9;FROM  [&quot;+ context.intermediateDB + &quot;].[dbo].VW_IMPORT_MARK T WHERE ENTITLEMENT_DATE > GETDATE() or CAST(DATEPART(YYYY, ENTITLEMENT_DATE) as NUMERIC) &lt; 1700;&#x9;&#xD;&#xA;&#x9;&#x9;&#xD;&#xA;&#x9;&#x9;-- 3.&#x9;Validate EXHIBITION_DATE&#xD;&#xA;&#x9;&#x9;INSERT INTO  [&quot;+ context.intermediateDB + &quot;].[dbo].VW_IMPORT_MARK_RESULT (file_seq, file_type, file_series, file_nbr, ind_import, msg_import) &#xD;&#xA;&#x9;&#x9;SELECT T.file_seq, T.file_type, T.file_series, T.file_nbr, 2, 'Invalid EXHIBITION_DATE. EXHIBITION_DATE required to be greater than 1700-01-01 and lower than the current date.' &#xD;&#xA;&#x9;&#x9;FROM  [&quot;+ context.intermediateDB + &quot;].[dbo].VW_IMPORT_MARK T WHERE EXHIBITION_DATE > GETDATE() or CAST(DATEPART(YYYY, EXHIBITION_DATE) as NUMERIC) &lt; 1700;&#x9;&#xD;&#xA;&#x9;&#x9;&#xD;&#xA;&#x9;&#x9;-- 4.&#x9;Validate PUBLICATION_DATE&#xD;&#xA;&#x9;&#x9;INSERT INTO  [&quot;+ context.intermediateDB + &quot;].[dbo].VW_IMPORT_MARK_RESULT (file_seq, file_type, file_series, file_nbr, ind_import, msg_import) &#xD;&#xA;&#x9;&#x9;SELECT T.file_seq, T.file_type, T.file_series, T.file_nbr, 2, 'Invalid PUBLICATION_DATE. PUBLICATION_DATE required to be greater than 1700-01-01 and lower than the current date.' &#xD;&#xA;&#x9;&#x9;FROM  [&quot;+ context.intermediateDB + &quot;].[dbo].VW_IMPORT_MARK T WHERE PUBLICATION_DATE > GETDATE() or CAST(DATEPART(YYYY, PUBLICATION_DATE) as NUMERIC) &lt; 1700;&#x9;&#xD;&#xA;&#x9;&#x9;&#xD;&#xA;&#x9;&#x9;-- 5.&#x9;Validate RECEPTION_DATE&#xD;&#xA;&#x9;&#x9;INSERT INTO  [&quot;+ context.intermediateDB + &quot;].[dbo].VW_IMPORT_MARK_RESULT (file_seq, file_type, file_series, file_nbr, ind_import, msg_import) &#xD;&#xA;&#x9;&#x9;SELECT T.file_seq, T.file_type, T.file_series, T.file_nbr, 2, 'Invalid RECEPTION_DATE. RECEPTION_DATE required to be greater than 1700-01-01 and lower than the current date.' &#xD;&#xA;&#x9;&#x9;FROM  [&quot;+ context.intermediateDB + &quot;].[dbo].VW_IMPORT_MARK T WHERE RECEPTION_DATE > GETDATE() or CAST(DATEPART(YYYY, RECEPTION_DATE) as NUMERIC) &lt; 1700;&#x9;&#xD;&#xA;&#x9;&#x9;&#xD;&#xA;&#x9;&#x9;-- 6.&#x9;Validate REGISTRATION_DATE&#xD;&#xA;&#x9;&#x9;INSERT INTO  [&quot;+ context.intermediateDB + &quot;].[dbo].VW_IMPORT_MARK_RESULT (file_seq, file_type, file_series, file_nbr, ind_import, msg_import) &#xD;&#xA;&#x9;&#x9;SELECT T.file_seq, T.file_type, T.file_series, T.file_nbr, 2, 'Invalid REGISTRATION_DATE. REGISTRATION_DATE required to be greater than 1700-01-01 and lower than the current date.' &#xD;&#xA;&#x9;&#x9;FROM  [&quot;+ context.intermediateDB + &quot;].[dbo].VW_IMPORT_MARK T WHERE REGISTRATION_DATE > GETDATE() or CAST(DATEPART(YYYY, REGISTRATION_DATE) as NUMERIC) &lt; 1700;&#x9;&#xD;&#xA;&#x9;&#x9;&#xD;&#xA;&#x9;&#x9;-- 7.&#x9;Validate ACTION_DATE&#xD;&#xA;&#x9;&#x9;INSERT INTO  [&quot;+ context.intermediateDB + &quot;].[dbo].VW_IMPORT_MARK_RESULT (file_seq, file_type, file_series, file_nbr, ind_import, msg_import) &#xD;&#xA;&#x9;&#x9;SELECT T.file_seq, T.file_type, T.file_series, T.file_nbr, 2, 'Invalid ACTION_DATE. ACTION_DATE required to be greater than 1700-01-01 and lower than the current date.' &#xD;&#xA;&#x9;&#x9;FROM  [&quot;+ context.intermediateDB + &quot;].[dbo].VW_IMPORT_MARK_ACTIONS T WHERE ACTION_DATE > GETDATE() or CAST(DATEPART(YYYY, ACTION_DATE) as NUMERIC) &lt; 1700;&#x9;&#xD;&#xA;&#x9;&#x9;&#xD;&#xA;&#x9;&#x9;-- 8.&#x9;Validate PUBLICATION_DATE&#xD;&#xA;&#x9;--&#x9;INSERT INTO  [&quot;+ context.intermediateDB + &quot;].[dbo].VW_IMPORT_MARK_RESULT (file_seq, file_type, file_series, file_nbr, ind_import, msg_import) &#xD;&#xA;&#x9;--&#x9;SELECT T.file_seq, T.file_type, T.file_series, T.file_nbr, 2, 'Invalid PUBLICATION_DATE. PUBLICATION_DATE required to be greater than 1700-01-01 and lower than the current date.' &#xD;&#xA;&#x9;--&#x9;FROM  [&quot;+ context.intermediateDB + &quot;].[dbo].VW_IMPORT_MARK_ACTIONS T WHERE PUBLICATION_DATE > GETDATE() or CAST(DATEPART(YYYY, PUBLICATION_DATE) as NUMERIC) &lt; 1700;&#x9;&#xD;&#xA;&#x9;&#x9;&#xD;&#xA;&#x9;&#x9;-- 9.&#x9;Validate RECEIPT_DATE&#xD;&#xA;&#x9;&#x9;INSERT INTO  [&quot;+ context.intermediateDB + &quot;].[dbo].VW_IMPORT_MARK_RESULT (file_seq, file_type, file_series, file_nbr, ind_import, msg_import) &#xD;&#xA;&#x9;&#x9;SELECT T.file_seq, T.file_type, T.file_series, T.file_nbr, 2, 'Invalid RECEIPT_DATE. RECEIPT_DATE required to be greater than 1700-01-01 and lower than the current date.' &#xD;&#xA;&#x9;&#x9;FROM  [&quot;+ context.intermediateDB + &quot;].[dbo].VW_IMPORT_MARK_PAYMENTS T WHERE RECEIPT_DATE > GETDATE() or CAST(DATEPART(YYYY, RECEIPT_DATE) as NUMERIC) &lt; 1700;&#x9;&#xD;&#xA;&#x9;&#x9;&#xD;&#xA;&#x9;&#x9;-- 10.&#x9;Validate PRIORITY_DATE&#xD;&#xA;&#x9;&#x9;INSERT INTO  [&quot;+ context.intermediateDB + &quot;].[dbo].VW_IMPORT_MARK_RESULT (file_seq, file_type, file_series, file_nbr, ind_import, msg_import) &#xD;&#xA;&#x9;&#x9;SELECT T.file_seq, T.file_type, T.file_series, T.file_nbr, 2, 'Invalid PRIORITY_DATE. PRIORITY_DATE required to be greater than 1700-01-01 and lower than the current date.' &#xD;&#xA;&#x9;&#x9;FROM  [&quot;+ context.intermediateDB + &quot;].[dbo].VW_IMPORT_MARK_PRIORITIES T WHERE PRIORITY_DATE > GETDATE() or CAST(DATEPART(YYYY, PRIORITY_DATE) as NUMERIC) &lt; 1700;&#x9;&#xD;&#xA;&#x9;&#x9;&#xD;&#xA;&#x9;&#x9;-- 11.&#x9;Validate FILING_DATE &#xD;&#xA;&#x9;&#x9;INSERT INTO  [&quot;+ context.intermediateDB + &quot;].[dbo].VW_IMPORT_MARK_RESULT (file_seq, file_type, file_series, file_nbr, ind_import, msg_import)&#xD;&#xA;&#x9;&#x9;SELECT T.file_seq, T.file_type, T.file_series, T.file_nbr, 2, 'Invalid FILING DATE. FILING DATE required to be greater than 1700-01-01 and lower than the current date.'&#xD;&#xA;&#x9;&#x9;FROM  [&quot;+ context.intermediateDB + &quot;].[dbo].VW_import_mark T WHERE FILING_DATE > GETDATE() or CAST(DATEPART(YYYY, FILING_DATE) as NUMERIC) &lt; 1700;&#x9;&#xD;&#xA;&#x9;&#x9;&#xD;&#xA;&#x9;&#x9;-----------------------------------------------------&#xD;&#xA;&#x9;&#x9;-- Can be a Future Date so no check with GETDATE()&#xD;&#xA;&#x9;&#x9;-----------------------------------------------------&#xD;&#xA;&#x9;&#x9;&#xD;&#xA;&#x9;&#x9;-- 1.&#x9;Validate EXPIRATION_DATE&#xD;&#xA;&#x9;&#x9;INSERT INTO  [&quot;+ context.intermediateDB + &quot;].[dbo].VW_IMPORT_MARK_RESULT (file_seq, file_type, file_series, file_nbr, ind_import, msg_import) &#xD;&#xA;&#x9;&#x9;SELECT T.file_seq, T.file_type, T.file_series, T.file_nbr, 2, 'Invalid EXPIRATION_DATE. EXPIRATION_DATE required to be greater than 1700-01-01 and lower than the current date.' &#xD;&#xA;&#x9;&#x9;FROM  [&quot;+ context.intermediateDB + &quot;].[dbo].VW_IMPORT_MARK T WHERE CAST(DATEPART(YYYY, EXPIRATION_DATE) as NUMERIC) &lt; 1700;&#x9;&#xD;&#xA;&#x9;&#x9;&#xD;&#xA;&#x9;&#x9;-- 2.&#x9;Validate MANUAL_DUE_DATE&#xD;&#xA;&#x9;&#x9;INSERT INTO  [&quot;+ context.intermediateDB + &quot;].[dbo].VW_IMPORT_MARK_RESULT (file_seq, file_type, file_series, file_nbr, ind_import, msg_import) &#xD;&#xA;&#x9;&#x9;SELECT T.file_seq, T.file_type, T.file_series, T.file_nbr, 2, 'Invalid MANUAL_DUE_DATE. MANUAL_DUE_DATE required to be greater than 1700-01-01 and lower than the current date.' &#xD;&#xA;&#x9;&#x9;FROM  [&quot;+ context.intermediateDB + &quot;].[dbo].VW_IMPORT_MARK_ACTIONS T WHERE CAST(DATEPART(YYYY, MANUAL_DUE_DATE) as NUMERIC) &lt; 1700;&#x9;&#xD;&#xA;&#x9;&#x9;SET NOCOUNT OFF;&#xD;&#xA;&#x9;END&#xD;&#xA;&quot;"/>
    <elementParameter field="LABEL" name="NOTE" value="This option only applies when deploying and running in the Talend Runtime" show="false"/>
    <elementParameter field="CHECK" name="SPECIFY_DATASOURCE_ALIAS" value="false" show="false"/>
    <elementParameter field="TEXT" name="DATASOURCE_ALIAS" value="&quot;&quot;" show="false"/>
    <elementParameter field="CHECK" name="DIE_ON_ERROR" value="false"/>
    <elementParameter field="TEXT" name="PROPERTIES" value="&quot;&quot;" show="false"/>
    <elementParameter field="CHECK" name="ACTIVE_DIR_AUTH" value="false" show="false"/>
    <elementParameter field="CHECK" name="PROPAGATE_RECORD_SET" value="false"/>
    <elementParameter field="COLUMN_LIST" name="RECORD_SET_COLUMN" value="" show="false"/>
    <elementParameter field="CHECK" name="USE_PREPAREDSTATEMENT" value="false"/>
    <elementParameter field="TABLE" name="SET_PREPAREDSTATEMENT_PARAMETERS" show="false"/>
    <elementParameter field="ENCODING_TYPE" name="ENCODING" value="&quot;ISO-8859-15&quot;" show="false"/>
    <elementParameter field="TECHNICAL" name="ENCODING:ENCODING_TYPE" value="ISO-8859-15"/>
    <elementParameter field="TEXT" name="COMMIT_EVERY" value="10000" show="false"/>
    <elementParameter field="TEXT" name="CONNECTION_FORMAT" value="row"/>
    <metadata connector="FLOW" name="tDBRow_14"/>
    <metadata connector="REJECT" name="REJECT">
      <column defaultValue="" key="false" length="255" name="errorCode" nullable="true" precision="0" sourceType="" type="id_String" originalLength="-1" usefulColumn="true"/>
      <column defaultValue="" key="false" length="255" name="errorMessage" nullable="true" precision="0" sourceType="" type="id_String" originalLength="-1" usefulColumn="true"/>
    </metadata>
  </node>
  <node componentName="tLogRow" componentVersion="0.101" offsetLabelX="0" offsetLabelY="0" posX="480" posY="1856">
    <elementParameter field="TEXT" name="UNIQUE_NAME" value="tLogRow_49" show="false"/>
    <elementParameter field="RADIO" name="BASIC_MODE" value="false"/>
    <elementParameter field="RADIO" name="TABLE_PRINT" value="false"/>
    <elementParameter field="RADIO" name="VERTICAL" value="true"/>
    <elementParameter field="RADIO" name="PRINT_UNIQUE" value="true"/>
    <elementParameter field="RADIO" name="PRINT_LABEL" value="false"/>
    <elementParameter field="RADIO" name="PRINT_UNIQUE_LABEL" value="false"/>
    <elementParameter field="TEXT" name="FIELDSEPARATOR" value="&quot;|&quot;" show="false"/>
    <elementParameter field="CHECK" name="PRINT_HEADER" value="false" show="false"/>
    <elementParameter field="CHECK" name="PRINT_UNIQUE_NAME" value="false" show="false"/>
    <elementParameter field="CHECK" name="PRINT_COLNAMES" value="false" show="false"/>
    <elementParameter field="CHECK" name="USE_FIXED_LENGTH" value="false" show="false"/>
    <elementParameter field="TABLE" name="LENGTHS" show="false">
      <elementValue elementRef="SCHEMA_COLUMN" value="errorCode"/>
      <elementValue elementRef="LENGTH" value="10"/>
      <elementValue elementRef="SCHEMA_COLUMN" value="errorMessage"/>
      <elementValue elementRef="LENGTH" value="10"/>
    </elementParameter>
    <elementParameter field="CHECK" name="PRINT_CONTENT_WITH_LOG4J" value="true"/>
    <elementParameter field="TEXT" name="SCHEMA_OPT_NUM" value="100" show="false"/>
    <elementParameter field="TEXT" name="CONNECTION_FORMAT" value="row"/>
    <metadata connector="FLOW" name="tLogRow_49">
      <column defaultValue="" key="false" length="255" name="errorCode" nullable="true" precision="0" sourceType="" type="id_String" originalLength="-1" usefulColumn="true"/>
      <column defaultValue="" key="false" length="255" name="errorMessage" nullable="true" precision="0" sourceType="" type="id_String" originalLength="-1" usefulColumn="true"/>
    </metadata>
  </node>
  <node componentName="tLogRow" componentVersion="0.101" offsetLabelX="0" offsetLabelY="0" posX="640" posY="1856">
    <elementParameter field="TEXT" name="UNIQUE_NAME" value="tLogRow_50" show="false"/>
    <elementParameter field="RADIO" name="BASIC_MODE" value="false"/>
    <elementParameter field="RADIO" name="TABLE_PRINT" value="false"/>
    <elementParameter field="RADIO" name="VERTICAL" value="true"/>
    <elementParameter field="RADIO" name="PRINT_UNIQUE" value="true"/>
    <elementParameter field="RADIO" name="PRINT_LABEL" value="false"/>
    <elementParameter field="RADIO" name="PRINT_UNIQUE_LABEL" value="false"/>
    <elementParameter field="TEXT" name="FIELDSEPARATOR" value="&quot;|&quot;" show="false"/>
    <elementParameter field="CHECK" name="PRINT_HEADER" value="false" show="false"/>
    <elementParameter field="CHECK" name="PRINT_UNIQUE_NAME" value="false" show="false"/>
    <elementParameter field="CHECK" name="PRINT_COLNAMES" value="false" show="false"/>
    <elementParameter field="CHECK" name="USE_FIXED_LENGTH" value="false" show="false"/>
    <elementParameter field="TABLE" name="LENGTHS" show="false">
      <elementValue elementRef="SCHEMA_COLUMN" value="errorCode"/>
      <elementValue elementRef="LENGTH" value="10"/>
      <elementValue elementRef="SCHEMA_COLUMN" value="errorMessage"/>
      <elementValue elementRef="LENGTH" value="10"/>
    </elementParameter>
    <elementParameter field="CHECK" name="PRINT_CONTENT_WITH_LOG4J" value="true"/>
    <elementParameter field="TEXT" name="SCHEMA_OPT_NUM" value="100" show="false"/>
    <elementParameter field="TEXT" name="CONNECTION_FORMAT" value="row"/>
    <metadata connector="FLOW" name="tLogRow_50">
      <column defaultValue="" key="false" length="255" name="errorCode" nullable="true" precision="0" sourceType="" type="id_String" originalLength="-1" usefulColumn="true"/>
      <column defaultValue="" key="false" length="255" name="errorMessage" nullable="true" precision="0" sourceType="" type="id_String" originalLength="-1" usefulColumn="true"/>
    </metadata>
  </node>
  <node componentName="tMSSqlRow" componentVersion="0.102" offsetLabelX="0" offsetLabelY="0" posX="-224" posY="1184">
    <elementParameter field="TEXT" name="UNIQUE_NAME" value="tDBRow_15" show="false"/>
    <elementParameter field="CHECK" name="ACTIVATE" value="false"/>
    <elementParameter field="CHECK" name="USE_EXISTING_CONNECTION" value="true"/>
    <elementParameter field="COMPONENT_LIST" name="CONNECTION" value="tMSSqlConnection_4"/>
    <elementParameter field="CLOSED_LIST" name="DRIVER" value="JTDS" show="false"/>
    <elementParameter field="TEXT" name="HOST" value="&quot;&quot;" show="false"/>
    <elementParameter field="TEXT" name="PORT" value="&quot;1433&quot;" show="false"/>
    <elementParameter field="TEXT" name="DB_SCHEMA" value="&quot;&quot;" show="false"/>
    <elementParameter field="TEXT" name="DBNAME" value="&quot;&quot;" show="false"/>
    <elementParameter field="TEXT" name="TYPE" value="MSSQL" show="false"/>
    <elementParameter field="TEXT" name="USER" value="&quot;&quot;" show="false"/>
    <elementParameter field="PASSWORD" name="PASS" value="enc:system.encryption.key.v1:ElaDgqzYYVNEFcObJrAJ9GTrYQ2iame/jviIYTy8" show="false"/>
    <elementParameter field="DBTABLE" name="TABLE" value="&quot;&quot;"/>
    <elementParameter field="CHECK" name="IDENTITY_INSERT" value="false"/>
    <elementParameter field="QUERYSTORE_TYPE" name="QUERYSTORE" value="&quot;&quot;"/>
    <elementParameter field="TECHNICAL" name="QUERYSTORE:REPOSITORY_QUERYSTORE_TYPE" value="" show="false"/>
    <elementParameter field="TECHNICAL" name="QUERYSTORE:QUERYSTORE_TYPE" value="BUILT_IN"/>
    <elementParameter field="MEMO_SQL" name="QUERY" value="&quot;&#xD;&#xA;&#xD;&#xA;CREATE  PROCEDURE dbo.Log_ProcedureCall&#xD;&#xA;  @Start1    NVARCHAR(50),&#xD;&#xA; @ProcedureName  NVARCHAR(50) = NULL,&#xD;&#xA; @Stage1      NVARCHAR(200) = NULL&#xD;&#xA;&#xD;&#xA;AS&#xD;&#xA;BEGIN&#xD;&#xA; SET NOCOUNT ON;&#xD;&#xA; &#xD;&#xA; &#xD;&#xA; INSERT dbo.ProcedureLog&#xD;&#xA; (&#xD;&#xA;  ProcedureName,&#xD;&#xA;  Stage,&#xD;&#xA;  StartDate,&#xD;&#xA;  TimeForCompletion&#xD;&#xA; )&#xD;&#xA; SELECT&#xD;&#xA;  @ProcedureName,&#xD;&#xA;  @Stage1,&#xD;&#xA;  convert(datetime,@Start1),&#xD;&#xA;  datediff(ss, convert(datetime,@Start1), getdate())&#xD;&#xA;  &#xD;&#xA;  ;&#xD;&#xA;  SET NOCOUNT OFF;&#xD;&#xA;END;&#xD;&#xA;&#xD;&#xA;&#xD;&#xA;&#xD;&#xA;&#xD;&#xA;&quot;"/>
    <elementParameter field="LABEL" name="NOTE" value="This option only applies when deploying and running in the Talend Runtime" show="false"/>
    <elementParameter field="CHECK" name="SPECIFY_DATASOURCE_ALIAS" value="false" show="false"/>
    <elementParameter field="TEXT" name="DATASOURCE_ALIAS" value="&quot;&quot;" show="false"/>
    <elementParameter field="CHECK" name="DIE_ON_ERROR" value="false"/>
    <elementParameter field="TEXT" name="PROPERTIES" value="&quot;&quot;" show="false"/>
    <elementParameter field="CHECK" name="ACTIVE_DIR_AUTH" value="false" show="false"/>
    <elementParameter field="CHECK" name="PROPAGATE_RECORD_SET" value="false"/>
    <elementParameter field="COLUMN_LIST" name="RECORD_SET_COLUMN" value="" show="false"/>
    <elementParameter field="CHECK" name="USE_PREPAREDSTATEMENT" value="false"/>
    <elementParameter field="TABLE" name="SET_PREPAREDSTATEMENT_PARAMETERS" show="false"/>
    <elementParameter field="ENCODING_TYPE" name="ENCODING" value="&quot;ISO-8859-15&quot;" show="false"/>
    <elementParameter field="TECHNICAL" name="ENCODING:ENCODING_TYPE" value="ISO-8859-15"/>
    <elementParameter field="TEXT" name="COMMIT_EVERY" value="10000" show="false"/>
    <elementParameter field="TEXT" name="CONNECTION_FORMAT" value="row"/>
    <metadata connector="FLOW" name="tDBRow_15"/>
    <metadata connector="REJECT" name="REJECT">
      <column defaultValue="" key="false" length="255" name="errorCode" nullable="true" precision="0" sourceType="" type="id_String" originalLength="-1" usefulColumn="true"/>
      <column defaultValue="" key="false" length="255" name="errorMessage" nullable="true" precision="0" sourceType="" type="id_String" originalLength="-1" usefulColumn="true"/>
    </metadata>
  </node>
  <node componentName="tLogRow" componentVersion="0.101" offsetLabelX="0" offsetLabelY="0" posX="-128" posY="1312">
    <elementParameter field="TEXT" name="UNIQUE_NAME" value="tLogRow_51" show="false"/>
    <elementParameter field="CHECK" name="ACTIVATE" value="false"/>
    <elementParameter field="RADIO" name="BASIC_MODE" value="false"/>
    <elementParameter field="RADIO" name="TABLE_PRINT" value="false"/>
    <elementParameter field="RADIO" name="VERTICAL" value="true"/>
    <elementParameter field="RADIO" name="PRINT_UNIQUE" value="true"/>
    <elementParameter field="RADIO" name="PRINT_LABEL" value="false"/>
    <elementParameter field="RADIO" name="PRINT_UNIQUE_LABEL" value="false"/>
    <elementParameter field="TEXT" name="FIELDSEPARATOR" value="&quot;|&quot;" show="false"/>
    <elementParameter field="CHECK" name="PRINT_HEADER" value="false" show="false"/>
    <elementParameter field="CHECK" name="PRINT_UNIQUE_NAME" value="false" show="false"/>
    <elementParameter field="CHECK" name="PRINT_COLNAMES" value="false" show="false"/>
    <elementParameter field="CHECK" name="USE_FIXED_LENGTH" value="false" show="false"/>
    <elementParameter field="TABLE" name="LENGTHS" show="false">
      <elementValue elementRef="SCHEMA_COLUMN" value="errorCode"/>
      <elementValue elementRef="LENGTH" value="10"/>
      <elementValue elementRef="SCHEMA_COLUMN" value="errorMessage"/>
      <elementValue elementRef="LENGTH" value="10"/>
    </elementParameter>
    <elementParameter field="CHECK" name="PRINT_CONTENT_WITH_LOG4J" value="true"/>
    <elementParameter field="TEXT" name="SCHEMA_OPT_NUM" value="100" show="false"/>
    <elementParameter field="TEXT" name="CONNECTION_FORMAT" value="row"/>
    <metadata connector="FLOW" name="tLogRow_51">
      <column defaultValue="" key="false" length="255" name="errorCode" nullable="true" precision="0" sourceType="" type="id_String" originalLength="-1" usefulColumn="true"/>
      <column defaultValue="" key="false" length="255" name="errorMessage" nullable="true" precision="0" sourceType="" type="id_String" originalLength="-1" usefulColumn="true"/>
    </metadata>
  </node>
  <node componentName="tStatCatcher" componentVersion="0.1" offsetLabelX="0" offsetLabelY="0" posX="-128" posY="288">
    <elementParameter field="TEXT" name="UNIQUE_NAME" value="tStatCatcher_1" show="false"/>
    <elementParameter field="TEXT" name="CONNECTION_FORMAT" value="row"/>
    <metadata connector="FLOW" name="tStatCatcher_1">
      <column defaultValue="" key="false" length="0" name="moment" nullable="true" pattern="&quot;yyyy-MM-dd HH:mm:ss&quot;" precision="0" sourceType="" type="id_Date" originalLength="-1" usefulColumn="true"/>
      <column defaultValue="" key="false" length="20" name="pid" nullable="true" precision="0" sourceType="" type="id_String" originalLength="-1" usefulColumn="true"/>
      <column defaultValue="" key="false" length="20" name="father_pid" nullable="true" precision="0" sourceType="" type="id_String" originalLength="-1" usefulColumn="true"/>
      <column defaultValue="" key="false" length="20" name="root_pid" nullable="true" precision="0" sourceType="" type="id_String" originalLength="-1" usefulColumn="true"/>
      <column defaultValue="" key="false" length="8" name="system_pid" nullable="true" precision="0" sourceType="" type="id_Long" originalLength="-1" usefulColumn="true"/>
      <column defaultValue="" key="false" length="50" name="project" nullable="true" precision="0" sourceType="" type="id_String" originalLength="-1" usefulColumn="true"/>
      <column defaultValue="" key="false" length="255" name="job" nullable="true" precision="0" sourceType="" type="id_String" originalLength="-1" usefulColumn="true"/>
      <column defaultValue="" key="false" length="255" name="job_repository_id" nullable="true" precision="0" sourceType="" type="id_String" originalLength="-1" usefulColumn="true"/>
      <column defaultValue="" key="false" length="255" name="job_version" nullable="true" precision="0" sourceType="" type="id_String" originalLength="-1" usefulColumn="true"/>
      <column defaultValue="" key="false" length="50" name="context" nullable="true" precision="0" sourceType="" type="id_String" originalLength="-1" usefulColumn="true"/>
      <column defaultValue="" key="false" length="255" name="origin" nullable="true" precision="0" sourceType="" type="id_String" originalLength="-1" usefulColumn="true"/>
      <column defaultValue="" key="false" length="255" name="message_type" nullable="true" precision="0" sourceType="" type="id_String" originalLength="-1" usefulColumn="true"/>
      <column defaultValue="" key="false" length="255" name="message" nullable="true" precision="0" sourceType="" type="id_String" originalLength="-1" usefulColumn="true"/>
      <column defaultValue="" key="false" length="8" name="duration" nullable="true" precision="0" sourceType="" type="id_Long" originalLength="-1" usefulColumn="true"/>
    </metadata>
  </node>
  <node componentName="tLogRow" componentVersion="0.101" offsetLabelX="0" offsetLabelY="0" posX="-128" posY="384">
    <elementParameter field="TEXT" name="UNIQUE_NAME" value="tLogRow_52" show="false"/>
    <elementParameter field="RADIO" name="BASIC_MODE" value="true"/>
    <elementParameter field="RADIO" name="TABLE_PRINT" value="false"/>
    <elementParameter field="RADIO" name="VERTICAL" value="false"/>
    <elementParameter field="RADIO" name="PRINT_UNIQUE" value="true" show="false"/>
    <elementParameter field="RADIO" name="PRINT_LABEL" value="false" show="false"/>
    <elementParameter field="RADIO" name="PRINT_UNIQUE_LABEL" value="false" show="false"/>
    <elementParameter field="TEXT" name="FIELDSEPARATOR" value="&quot;|&quot;"/>
    <elementParameter field="CHECK" name="PRINT_HEADER" value="false"/>
    <elementParameter field="CHECK" name="PRINT_UNIQUE_NAME" value="false"/>
    <elementParameter field="CHECK" name="PRINT_COLNAMES" value="false"/>
    <elementParameter field="CHECK" name="USE_FIXED_LENGTH" value="false"/>
    <elementParameter field="TABLE" name="LENGTHS" show="false">
      <elementValue elementRef="SCHEMA_COLUMN" value="moment"/>
      <elementValue elementRef="LENGTH" value="10"/>
      <elementValue elementRef="SCHEMA_COLUMN" value="job"/>
      <elementValue elementRef="LENGTH" value="10"/>
      <elementValue elementRef="SCHEMA_COLUMN" value="origin"/>
      <elementValue elementRef="LENGTH" value="10"/>
      <elementValue elementRef="SCHEMA_COLUMN" value="message_type"/>
      <elementValue elementRef="LENGTH" value="10"/>
      <elementValue elementRef="SCHEMA_COLUMN" value="message"/>
      <elementValue elementRef="LENGTH" value="10"/>
      <elementValue elementRef="SCHEMA_COLUMN" value="duration"/>
      <elementValue elementRef="LENGTH" value="10"/>
    </elementParameter>
    <elementParameter field="CHECK" name="PRINT_CONTENT_WITH_LOG4J" value="true"/>
    <elementParameter field="TEXT" name="SCHEMA_OPT_NUM" value="100" show="false"/>
    <elementParameter field="TEXT" name="CONNECTION_FORMAT" value="row"/>
    <metadata connector="FLOW" name="tLogRow_52">
      <column key="false" length="0" name="moment" nullable="true" pattern="&quot;yyyy-MM-dd HH:mm:ss&quot;" precision="0" sourceType="" type="id_Date" originalLength="-1" usefulColumn="true"/>
      <column key="false" length="255" name="job" nullable="true" precision="0" sourceType="" type="id_String" originalLength="-1" usefulColumn="true"/>
      <column key="false" length="255" name="origin" nullable="true" precision="0" sourceType="" type="id_String" originalLength="-1" usefulColumn="true"/>
      <column key="false" length="255" name="message_type" nullable="true" precision="0" sourceType="" type="id_String" originalLength="-1" usefulColumn="true"/>
      <column key="false" length="255" name="message" nullable="true" precision="0" sourceType="" type="id_String" originalLength="-1" usefulColumn="true"/>
      <column defaultValue="" key="false" length="8" name="duration" nullable="true" precision="0" sourceType="" type="id_Long" originalLength="-1" usefulColumn="true"/>
    </metadata>
  </node>
  <connection connectorName="SUBJOB_OK" label="OnSubjobOk" lineStyle="1" metaname="tMSSqlConnection_1" offsetLabelX="0" offsetLabelY="0" source="tMSSqlConnection_1" target="tMSSqlRow_40">
    <elementParameter field="TEXT" name="UNIQUE_NAME" value="OnSubjobOk1" show="false"/>
  </connection>
  <connection connectorName="SUBJOB_OK" label="OnSubjobOk" lineStyle="1" metaname="tMSSqlConnection_2" offsetLabelX="0" offsetLabelY="0" source="tMSSqlConnection_2" target="tMSSqlRow_4">
    <elementParameter field="TEXT" name="UNIQUE_NAME" value="OnSubjobOk2" show="false"/>
  </connection>
  <connection connectorName="FLOW" label="row6" lineStyle="0" metaname="tMSSqlRow_4" offsetLabelX="0" offsetLabelY="0" outputId="1" source="tMSSqlRow_4" target="tMSSqlRow_5">
    <elementParameter field="CHECK" name="MONITOR_CONNECTION" value="false"/>
    <elementParameter field="TEXT" name="UNIQUE_NAME" value="row6" show="false"/>
  </connection>
  <connection connectorName="REJECT" label="row62" lineStyle="0" metaname="REJECT" offsetLabelX="0" offsetLabelY="0" outputId="2" source="tMSSqlRow_4" target="tLogRow_4">
    <elementParameter field="CHECK" name="MONITOR_CONNECTION" value="false"/>
    <elementParameter field="TEXT" name="UNIQUE_NAME" value="row62" show="false"/>
  </connection>
  <connection connectorName="SUBJOB_OK" label="OnSubjobOk" lineStyle="1" metaname="tMSSqlRow_4" offsetLabelX="0" offsetLabelY="0" source="tMSSqlRow_4" target="tMSSqlConnection_3">
    <elementParameter field="TEXT" name="UNIQUE_NAME" value="OnSubjobOk15" show="false"/>
  </connection>
  <connection connectorName="REJECT" label="row63" lineStyle="0" metaname="REJECT" offsetLabelX="0" offsetLabelY="0" source="tMSSqlRow_5" target="tLogRow_5">
    <elementParameter field="CHECK" name="MONITOR_CONNECTION" value="false"/>
    <elementParameter field="TEXT" name="UNIQUE_NAME" value="row63" show="false"/>
  </connection>
  <connection connectorName="FLOW" label="row55" lineStyle="0" metaname="tMSSqlRow_40" offsetLabelX="0" offsetLabelY="0" outputId="1" source="tMSSqlRow_40" target="tMSSqlRow_1">
    <elementParameter field="CHECK" name="MONITOR_CONNECTION" value="false"/>
    <elementParameter field="TEXT" name="UNIQUE_NAME" value="row55" show="false"/>
  </connection>
  <connection connectorName="REJECT" label="row59" lineStyle="0" metaname="REJECT" offsetLabelX="0" offsetLabelY="0" outputId="2" source="tMSSqlRow_40" target="tLogRow_1">
    <elementParameter field="CHECK" name="MONITOR_CONNECTION" value="false"/>
    <elementParameter field="TEXT" name="UNIQUE_NAME" value="row59" show="false"/>
  </connection>
  <connection connectorName="SUBJOB_OK" label="OnSubjobOk" lineStyle="1" metaname="tMSSqlRow_40" offsetLabelX="0" offsetLabelY="0" source="tMSSqlRow_40" target="tMSSqlConnection_2">
    <elementParameter field="TEXT" name="UNIQUE_NAME" value="OnSubjobOk31" show="false"/>
  </connection>
  <connection connectorName="FLOW" label="row1" lineStyle="0" metaname="tMSSqlRow_1" offsetLabelX="0" offsetLabelY="0" outputId="1" source="tMSSqlRow_1" target="tMSSqlRow_3">
    <elementParameter field="CHECK" name="MONITOR_CONNECTION" value="false"/>
    <elementParameter field="TEXT" name="UNIQUE_NAME" value="row1" show="false"/>
  </connection>
  <connection connectorName="REJECT" label="row60" lineStyle="0" metaname="REJECT" offsetLabelX="0" offsetLabelY="0" outputId="2" source="tMSSqlRow_1" target="tLogRow_2">
    <elementParameter field="CHECK" name="MONITOR_CONNECTION" value="false"/>
    <elementParameter field="TEXT" name="UNIQUE_NAME" value="row60" show="false"/>
  </connection>
  <connection connectorName="FLOW" label="row4" lineStyle="0" metaname="tMSSqlRow_3" offsetLabelX="0" offsetLabelY="0" outputId="1" source="tMSSqlRow_3" target="tMSSqlRow_42">
    <elementParameter field="CHECK" name="MONITOR_CONNECTION" value="false"/>
    <elementParameter field="TEXT" name="UNIQUE_NAME" value="row4" show="false"/>
  </connection>
  <connection connectorName="REJECT" label="row61" lineStyle="0" metaname="REJECT" offsetLabelX="0" offsetLabelY="0" outputId="2" source="tMSSqlRow_3" target="tLogRow_3">
    <elementParameter field="CHECK" name="MONITOR_CONNECTION" value="false"/>
    <elementParameter field="TEXT" name="UNIQUE_NAME" value="row61" show="false"/>
  </connection>
  <connection connectorName="REJECT" label="row64" lineStyle="0" metaname="REJECT" offsetLabelX="0" offsetLabelY="0" source="tMSSqlRow_42" target="tLogRow_6">
    <elementParameter field="CHECK" name="MONITOR_CONNECTION" value="false"/>
    <elementParameter field="TEXT" name="UNIQUE_NAME" value="row64" show="false"/>
  </connection>
  <connection connectorName="SUBJOB_OK" label="OnSubjobOk" lineStyle="1" metaname="tMSSqlConnection_3" offsetLabelX="0" offsetLabelY="0" source="tMSSqlConnection_3" target="tMSSqlRow_6">
    <elementParameter field="TEXT" name="UNIQUE_NAME" value="OnSubjobOk3" show="false"/>
  </connection>
  <connection connectorName="FLOW" label="row2" lineStyle="0" metaname="tMSSqlRow_2" offsetLabelX="0" offsetLabelY="0" outputId="1" source="tMSSqlRow_2" target="tMSSqlCommit_3">
    <elementParameter field="CHECK" name="MONITOR_CONNECTION" value="false"/>
    <elementParameter field="CHECK" name="ACTIVATE" value="false" show="false"/>
    <elementParameter field="TEXT" name="UNIQUE_NAME" value="row2" show="false"/>
  </connection>
  <connection connectorName="REJECT" label="row66" lineStyle="0" metaname="tMSSqlRow_2" offsetLabelX="0" offsetLabelY="0" outputId="2" source="tMSSqlRow_2" target="tLogRow_7">
    <elementParameter field="CHECK" name="MONITOR_CONNECTION" value="false"/>
    <elementParameter field="CHECK" name="ACTIVATE" value="false" show="false"/>
    <elementParameter field="TEXT" name="UNIQUE_NAME" value="row66" show="false"/>
  </connection>
  <connection connectorName="COMPONENT_OK" label="OnComponentOk" lineStyle="3" metaname="tMSSqlConnection_4" offsetLabelX="0" offsetLabelY="0" source="tMSSqlConnection_4" target="tMSSqlRow_9">
    <elementParameter field="TEXT" name="UNIQUE_NAME" value="OnComponentOk3" show="false"/>
  </connection>
  <connection connectorName="REJECT" label="row65" lineStyle="0" metaname="tMSSqlRow_6" offsetLabelX="2" offsetLabelY="14" source="tMSSqlRow_6" target="tLogRow_8">
    <elementParameter field="CHECK" name="MONITOR_CONNECTION" value="false"/>
    <elementParameter field="TEXT" name="UNIQUE_NAME" value="row65" show="false"/>
  </connection>
  <connection connectorName="SUBJOB_OK" label="OnSubjobOk" lineStyle="1" metaname="tMSSqlRow_6" offsetLabelX="0" offsetLabelY="0" source="tMSSqlRow_6" target="tMSSqlConnection_4">
    <elementParameter field="TEXT" name="UNIQUE_NAME" value="OnSubjobOk5" show="false"/>
  </connection>
  <connection connectorName="FLOW" label="row7" lineStyle="0" metaname="tMSSqlRow_7" offsetLabelX="0" offsetLabelY="0" outputId="1" source="tMSSqlRow_7" target="tMSSqlRow_8">
    <elementParameter field="CHECK" name="MONITOR_CONNECTION" value="false"/>
    <elementParameter field="TEXT" name="UNIQUE_NAME" value="row7" show="false"/>
  </connection>
  <connection connectorName="REJECT" label="row69" lineStyle="0" metaname="tMSSqlRow_7" offsetLabelX="0" offsetLabelY="0" outputId="2" source="tMSSqlRow_7" target="tLogRow_9">
    <elementParameter field="CHECK" name="MONITOR_CONNECTION" value="false"/>
    <elementParameter field="TEXT" name="UNIQUE_NAME" value="row69" show="false"/>
  </connection>
  <connection connectorName="SUBJOB_OK" label="OnSubjobOk" lineStyle="1" metaname="tMSSqlRow_7" offsetLabelX="0" offsetLabelY="0" source="tMSSqlRow_7" target="tDBRow_1">
    <elementParameter field="TEXT" name="UNIQUE_NAME" value="OnSubjobOk6" show="false"/>
  </connection>
  <connection connectorName="REJECT" label="row70" lineStyle="0" metaname="tMSSqlRow_8" offsetLabelX="0" offsetLabelY="0" source="tMSSqlRow_8" target="tLogRow_10">
    <elementParameter field="CHECK" name="MONITOR_CONNECTION" value="false"/>
    <elementParameter field="TEXT" name="UNIQUE_NAME" value="row70" show="false"/>
  </connection>
  <connection connectorName="REJECT" label="row67" lineStyle="0" metaname="tMSSqlRow_9" offsetLabelX="0" offsetLabelY="0" source="tMSSqlRow_9" target="tLogRow_11">
    <elementParameter field="CHECK" name="MONITOR_CONNECTION" value="false"/>
    <elementParameter field="TEXT" name="UNIQUE_NAME" value="row67" show="false"/>
  </connection>
  <connection connectorName="SUBJOB_OK" label="OnSubjobOk" lineStyle="1" metaname="tMSSqlRow_9" offsetLabelX="0" offsetLabelY="0" source="tMSSqlRow_9" target="tMSSqlRow_10">
    <elementParameter field="TEXT" name="UNIQUE_NAME" value="OnSubjobOk7" show="false"/>
  </connection>
  <connection connectorName="REJECT" label="row68" lineStyle="0" metaname="tMSSqlRow_10" offsetLabelX="0" offsetLabelY="0" source="tMSSqlRow_10" target="tLogRow_12">
    <elementParameter field="CHECK" name="MONITOR_CONNECTION" value="false"/>
    <elementParameter field="TEXT" name="UNIQUE_NAME" value="row68" show="false"/>
  </connection>
  <connection connectorName="SUBJOB_OK" label="OnSubjobOk" lineStyle="1" metaname="tMSSqlRow_10" offsetLabelX="0" offsetLabelY="0" source="tMSSqlRow_10" target="tMSSqlRow_7">
    <elementParameter field="TEXT" name="UNIQUE_NAME" value="OnSubjobOk8" show="false"/>
  </connection>
  <connection connectorName="FLOW" label="row28" lineStyle="0" metaname="tMSSqlRow_11" offsetLabelX="0" offsetLabelY="0" outputId="1" source="tMSSqlRow_11" target="tMSSqlRow_12">
    <elementParameter field="CHECK" name="MONITOR_CONNECTION" value="false"/>
    <elementParameter field="TEXT" name="UNIQUE_NAME" value="row28" show="false"/>
  </connection>
  <connection connectorName="REJECT" label="row83" lineStyle="0" metaname="tMSSqlRow_11" offsetLabelX="0" offsetLabelY="0" outputId="2" source="tMSSqlRow_11" target="tLogRow_13">
    <elementParameter field="CHECK" name="MONITOR_CONNECTION" value="false"/>
    <elementParameter field="TEXT" name="UNIQUE_NAME" value="row83" show="false"/>
  </connection>
  <connection connectorName="SUBJOB_OK" label="OnSubjobOk" lineStyle="1" metaname="tMSSqlRow_11" offsetLabelX="0" offsetLabelY="0" source="tMSSqlRow_11" target="tMSSqlRow_13">
    <elementParameter field="TEXT" name="UNIQUE_NAME" value="OnSubjobOk9" show="false"/>
  </connection>
  <connection connectorName="REJECT" label="row84" lineStyle="0" metaname="tMSSqlRow_12" offsetLabelX="0" offsetLabelY="0" source="tMSSqlRow_12" target="tLogRow_14">
    <elementParameter field="CHECK" name="MONITOR_CONNECTION" value="false"/>
    <elementParameter field="TEXT" name="UNIQUE_NAME" value="row84" show="false"/>
  </connection>
  <connection connectorName="FLOW" label="row33" lineStyle="0" metaname="tMSSqlRow_13" offsetLabelX="0" offsetLabelY="0" outputId="1" source="tMSSqlRow_13" target="tMSSqlRow_14">
    <elementParameter field="CHECK" name="MONITOR_CONNECTION" value="false"/>
    <elementParameter field="TEXT" name="UNIQUE_NAME" value="row33" show="false"/>
  </connection>
  <connection connectorName="REJECT" label="row88" lineStyle="0" metaname="tMSSqlRow_13" offsetLabelX="0" offsetLabelY="0" outputId="2" source="tMSSqlRow_13" target="tLogRow_15">
    <elementParameter field="CHECK" name="MONITOR_CONNECTION" value="false"/>
    <elementParameter field="TEXT" name="UNIQUE_NAME" value="row88" show="false"/>
  </connection>
  <connection connectorName="SUBJOB_OK" label="OnSubjobOk" lineStyle="1" metaname="tMSSqlRow_13" offsetLabelX="0" offsetLabelY="0" source="tMSSqlRow_13" target="tMSSqlRow_15">
    <elementParameter field="TEXT" name="UNIQUE_NAME" value="OnSubjobOk10" show="false"/>
  </connection>
  <connection connectorName="REJECT" label="row89" lineStyle="0" metaname="tMSSqlRow_14" offsetLabelX="0" offsetLabelY="0" source="tMSSqlRow_14" target="tLogRow_16">
    <elementParameter field="CHECK" name="MONITOR_CONNECTION" value="false"/>
    <elementParameter field="TEXT" name="UNIQUE_NAME" value="row89" show="false"/>
  </connection>
  <connection connectorName="FLOW" label="row35" lineStyle="0" metaname="tMSSqlRow_15" offsetLabelX="0" offsetLabelY="0" outputId="1" source="tMSSqlRow_15" target="tMSSqlRow_16">
    <elementParameter field="CHECK" name="MONITOR_CONNECTION" value="false"/>
    <elementParameter field="TEXT" name="UNIQUE_NAME" value="row35" show="false"/>
  </connection>
  <connection connectorName="REJECT" label="row90" lineStyle="0" metaname="tMSSqlRow_15" offsetLabelX="0" offsetLabelY="0" outputId="2" source="tMSSqlRow_15" target="tLogRow_17">
    <elementParameter field="CHECK" name="MONITOR_CONNECTION" value="false"/>
    <elementParameter field="TEXT" name="UNIQUE_NAME" value="row90" show="false"/>
  </connection>
  <connection connectorName="SUBJOB_OK" label="OnSubjobOk" lineStyle="1" metaname="tMSSqlRow_15" offsetLabelX="0" offsetLabelY="0" source="tMSSqlRow_15" target="tMSSqlRow_17">
    <elementParameter field="TEXT" name="UNIQUE_NAME" value="OnSubjobOk11" show="false"/>
  </connection>
  <connection connectorName="REJECT" label="row91" lineStyle="0" metaname="tMSSqlRow_16" offsetLabelX="0" offsetLabelY="0" source="tMSSqlRow_16" target="tLogRow_18">
    <elementParameter field="CHECK" name="MONITOR_CONNECTION" value="false"/>
    <elementParameter field="TEXT" name="UNIQUE_NAME" value="row91" show="false"/>
  </connection>
  <connection connectorName="FLOW" label="row39" lineStyle="0" metaname="tMSSqlRow_17" offsetLabelX="0" offsetLabelY="0" outputId="1" source="tMSSqlRow_17" target="tMSSqlRow_18">
    <elementParameter field="CHECK" name="MONITOR_CONNECTION" value="false"/>
    <elementParameter field="TEXT" name="UNIQUE_NAME" value="row39" show="false"/>
  </connection>
  <connection connectorName="REJECT" label="row93" lineStyle="0" metaname="tMSSqlRow_17" offsetLabelX="0" offsetLabelY="0" outputId="2" source="tMSSqlRow_17" target="tLogRow_19">
    <elementParameter field="CHECK" name="MONITOR_CONNECTION" value="false"/>
    <elementParameter field="TEXT" name="UNIQUE_NAME" value="row93" show="false"/>
  </connection>
  <connection connectorName="SUBJOB_OK" label="OnSubjobOk" lineStyle="1" metaname="tMSSqlRow_17" offsetLabelX="0" offsetLabelY="0" source="tMSSqlRow_17" target="tMSSqlRow_19">
    <elementParameter field="TEXT" name="UNIQUE_NAME" value="OnSubjobOk12" show="false"/>
  </connection>
  <connection connectorName="REJECT" label="row94" lineStyle="0" metaname="tMSSqlRow_18" offsetLabelX="0" offsetLabelY="0" source="tMSSqlRow_18" target="tLogRow_20">
    <elementParameter field="CHECK" name="MONITOR_CONNECTION" value="false"/>
    <elementParameter field="TEXT" name="UNIQUE_NAME" value="row94" show="false"/>
  </connection>
  <connection connectorName="FLOW" label="row12" lineStyle="0" metaname="tMSSqlRow_19" offsetLabelX="0" offsetLabelY="0" outputId="1" source="tMSSqlRow_19" target="tMSSqlRow_20">
    <elementParameter field="CHECK" name="MONITOR_CONNECTION" value="false"/>
    <elementParameter field="TEXT" name="UNIQUE_NAME" value="row12" show="false"/>
  </connection>
  <connection connectorName="REJECT" label="row71" lineStyle="0" metaname="tMSSqlRow_19" offsetLabelX="0" offsetLabelY="0" outputId="2" source="tMSSqlRow_19" target="tLogRow_21">
    <elementParameter field="CHECK" name="MONITOR_CONNECTION" value="false"/>
    <elementParameter field="TEXT" name="UNIQUE_NAME" value="row71" show="false"/>
  </connection>
  <connection connectorName="SUBJOB_OK" label="OnSubjobOk" lineStyle="1" metaname="tMSSqlRow_19" offsetLabelX="0" offsetLabelY="0" source="tMSSqlRow_19" target="tMSSqlRow_21">
    <elementParameter field="TEXT" name="UNIQUE_NAME" value="OnSubjobOk13" show="false"/>
  </connection>
  <connection connectorName="REJECT" label="row72" lineStyle="0" metaname="tMSSqlRow_20" offsetLabelX="0" offsetLabelY="0" source="tMSSqlRow_20" target="tLogRow_22">
    <elementParameter field="CHECK" name="MONITOR_CONNECTION" value="false"/>
    <elementParameter field="TEXT" name="UNIQUE_NAME" value="row72" show="false"/>
  </connection>
  <connection connectorName="FLOW" label="row30" lineStyle="0" metaname="tMSSqlRow_21" offsetLabelX="0" offsetLabelY="0" outputId="1" source="tMSSqlRow_21" target="tMSSqlRow_22">
    <elementParameter field="CHECK" name="MONITOR_CONNECTION" value="false"/>
    <elementParameter field="TEXT" name="UNIQUE_NAME" value="row30" show="false"/>
  </connection>
  <connection connectorName="REJECT" label="row85" lineStyle="0" metaname="tMSSqlRow_21" offsetLabelX="0" offsetLabelY="0" outputId="2" source="tMSSqlRow_21" target="tLogRow_23">
    <elementParameter field="CHECK" name="MONITOR_CONNECTION" value="false"/>
    <elementParameter field="TEXT" name="UNIQUE_NAME" value="row85" show="false"/>
  </connection>
  <connection connectorName="SUBJOB_OK" label="OnSubjobOk" lineStyle="1" metaname="tMSSqlRow_21" offsetLabelX="0" offsetLabelY="0" source="tMSSqlRow_21" target="tMSSqlRow_23">
    <elementParameter field="TEXT" name="UNIQUE_NAME" value="OnSubjobOk28" show="false"/>
  </connection>
  <connection connectorName="REJECT" label="row86" lineStyle="0" metaname="tMSSqlRow_22" offsetLabelX="0" offsetLabelY="0" source="tMSSqlRow_22" target="tLogRow_24">
    <elementParameter field="CHECK" name="MONITOR_CONNECTION" value="false"/>
    <elementParameter field="TEXT" name="UNIQUE_NAME" value="row86" show="false"/>
  </connection>
  <connection connectorName="FLOW" label="row14" lineStyle="0" metaname="tMSSqlRow_23" offsetLabelX="0" offsetLabelY="0" outputId="1" source="tMSSqlRow_23" target="tMSSqlRow_24">
    <elementParameter field="CHECK" name="MONITOR_CONNECTION" value="false"/>
    <elementParameter field="TEXT" name="UNIQUE_NAME" value="row14" show="false"/>
  </connection>
  <connection connectorName="REJECT" label="row73" lineStyle="0" metaname="tMSSqlRow_23" offsetLabelX="0" offsetLabelY="0" outputId="2" source="tMSSqlRow_23" target="tLogRow_25">
    <elementParameter field="CHECK" name="MONITOR_CONNECTION" value="false"/>
    <elementParameter field="TEXT" name="UNIQUE_NAME" value="row73" show="false"/>
  </connection>
  <connection connectorName="SUBJOB_OK" label="OnSubjobOk" lineStyle="1" metaname="tMSSqlRow_23" offsetLabelX="0" offsetLabelY="0" source="tMSSqlRow_23" target="tMSSqlRow_25">
    <elementParameter field="TEXT" name="UNIQUE_NAME" value="OnSubjobOk14" show="false"/>
  </connection>
  <connection connectorName="REJECT" label="row74" lineStyle="0" metaname="tMSSqlRow_24" offsetLabelX="0" offsetLabelY="0" source="tMSSqlRow_24" target="tLogRow_26">
    <elementParameter field="CHECK" name="MONITOR_CONNECTION" value="false"/>
    <elementParameter field="TEXT" name="UNIQUE_NAME" value="row74" show="false"/>
  </connection>
  <connection connectorName="FLOW" label="row16" lineStyle="0" metaname="tMSSqlRow_25" offsetLabelX="0" offsetLabelY="0" outputId="1" source="tMSSqlRow_25" target="tMSSqlRow_26">
    <elementParameter field="CHECK" name="MONITOR_CONNECTION" value="false"/>
    <elementParameter field="TEXT" name="UNIQUE_NAME" value="row16" show="false"/>
  </connection>
  <connection connectorName="REJECT" label="row75" lineStyle="0" metaname="tMSSqlRow_25" offsetLabelX="0" offsetLabelY="0" outputId="2" source="tMSSqlRow_25" target="tLogRow_27">
    <elementParameter field="CHECK" name="MONITOR_CONNECTION" value="false"/>
    <elementParameter field="TEXT" name="UNIQUE_NAME" value="row75" show="false"/>
  </connection>
  <connection connectorName="SUBJOB_OK" label="OnSubjobOk" lineStyle="1" metaname="tMSSqlRow_25" offsetLabelX="0" offsetLabelY="0" source="tMSSqlRow_25" target="tMSSqlRow_27">
    <elementParameter field="TEXT" name="UNIQUE_NAME" value="OnSubjobOk29" show="false"/>
  </connection>
  <connection connectorName="REJECT" label="row76" lineStyle="0" metaname="tMSSqlRow_26" offsetLabelX="0" offsetLabelY="0" source="tMSSqlRow_26" target="tLogRow_28">
    <elementParameter field="CHECK" name="MONITOR_CONNECTION" value="false"/>
    <elementParameter field="TEXT" name="UNIQUE_NAME" value="row76" show="false"/>
  </connection>
  <connection connectorName="FLOW" label="row18" lineStyle="0" metaname="tMSSqlRow_27" offsetLabelX="0" offsetLabelY="0" outputId="1" source="tMSSqlRow_27" target="tMSSqlRow_28">
    <elementParameter field="CHECK" name="MONITOR_CONNECTION" value="false"/>
    <elementParameter field="TEXT" name="UNIQUE_NAME" value="row18" show="false"/>
  </connection>
  <connection connectorName="REJECT" label="row77" lineStyle="0" metaname="tMSSqlRow_27" offsetLabelX="0" offsetLabelY="0" outputId="2" source="tMSSqlRow_27" target="tLogRow_29">
    <elementParameter field="CHECK" name="MONITOR_CONNECTION" value="false"/>
    <elementParameter field="TEXT" name="UNIQUE_NAME" value="row77" show="false"/>
  </connection>
  <connection connectorName="SUBJOB_OK" label="OnSubjobOk" lineStyle="1" metaname="tMSSqlRow_27" offsetLabelX="0" offsetLabelY="0" source="tMSSqlRow_27" target="tMSSqlRow_29">
    <elementParameter field="TEXT" name="UNIQUE_NAME" value="OnSubjobOk16" show="false"/>
  </connection>
  <connection connectorName="REJECT" label="row78" lineStyle="0" metaname="tMSSqlRow_28" offsetLabelX="0" offsetLabelY="0" source="tMSSqlRow_28" target="tLogRow_30">
    <elementParameter field="CHECK" name="MONITOR_CONNECTION" value="false"/>
    <elementParameter field="TEXT" name="UNIQUE_NAME" value="row78" show="false"/>
  </connection>
  <connection connectorName="FLOW" label="row23" lineStyle="0" metaname="tMSSqlRow_29" offsetLabelX="0" offsetLabelY="0" outputId="1" source="tMSSqlRow_29" target="tMSSqlRow_30">
    <elementParameter field="CHECK" name="MONITOR_CONNECTION" value="false"/>
    <elementParameter field="TEXT" name="UNIQUE_NAME" value="row23" show="false"/>
  </connection>
  <connection connectorName="REJECT" label="row79" lineStyle="0" metaname="tMSSqlRow_29" offsetLabelX="0" offsetLabelY="0" outputId="2" source="tMSSqlRow_29" target="tLogRow_31">
    <elementParameter field="CHECK" name="MONITOR_CONNECTION" value="false"/>
    <elementParameter field="TEXT" name="UNIQUE_NAME" value="row79" show="false"/>
  </connection>
  <connection connectorName="SUBJOB_OK" label="OnSubjobOk" lineStyle="1" metaname="tMSSqlRow_29" offsetLabelX="0" offsetLabelY="0" source="tMSSqlRow_29" target="tMSSqlRow_31">
    <elementParameter field="TEXT" name="UNIQUE_NAME" value="OnSubjobOk30" show="false"/>
  </connection>
  <connection connectorName="REJECT" label="row80" lineStyle="0" metaname="tMSSqlRow_30" offsetLabelX="0" offsetLabelY="0" source="tMSSqlRow_30" target="tLogRow_32">
    <elementParameter field="CHECK" name="MONITOR_CONNECTION" value="false"/>
    <elementParameter field="TEXT" name="UNIQUE_NAME" value="row80" show="false"/>
  </connection>
  <connection connectorName="FLOW" label="row25" lineStyle="0" metaname="tMSSqlRow_31" offsetLabelX="0" offsetLabelY="0" outputId="1" source="tMSSqlRow_31" target="tMSSqlRow_32">
    <elementParameter field="CHECK" name="MONITOR_CONNECTION" value="false"/>
    <elementParameter field="TEXT" name="UNIQUE_NAME" value="row25" show="false"/>
  </connection>
  <connection connectorName="REJECT" label="row81" lineStyle="0" metaname="tMSSqlRow_31" offsetLabelX="0" offsetLabelY="0" outputId="2" source="tMSSqlRow_31" target="tLogRow_33">
    <elementParameter field="CHECK" name="MONITOR_CONNECTION" value="false"/>
    <elementParameter field="TEXT" name="UNIQUE_NAME" value="row81" show="false"/>
  </connection>
  <connection connectorName="SUBJOB_OK" label="OnSubjobOk" lineStyle="1" metaname="tMSSqlRow_31" offsetLabelX="0" offsetLabelY="0" source="tMSSqlRow_31" target="tMSSqlRow_33">
    <elementParameter field="TEXT" name="UNIQUE_NAME" value="OnSubjobOk17" show="false"/>
  </connection>
  <connection connectorName="REJECT" label="row82" lineStyle="0" metaname="tMSSqlRow_32" offsetLabelX="0" offsetLabelY="0" source="tMSSqlRow_32" target="tLogRow_34">
    <elementParameter field="CHECK" name="MONITOR_CONNECTION" value="false"/>
    <elementParameter field="TEXT" name="UNIQUE_NAME" value="row82" show="false"/>
  </connection>
  <connection connectorName="FLOW" label="row22" lineStyle="0" metaname="tMSSqlRow_33" offsetLabelX="0" offsetLabelY="0" outputId="1" source="tMSSqlRow_33" target="tMSSqlRow_34">
    <elementParameter field="CHECK" name="MONITOR_CONNECTION" value="false"/>
    <elementParameter field="TEXT" name="UNIQUE_NAME" value="row22" show="false"/>
  </connection>
  <connection connectorName="REJECT" label="row99" lineStyle="0" metaname="tMSSqlRow_33" offsetLabelX="0" offsetLabelY="0" outputId="2" source="tMSSqlRow_33" target="tLogRow_35">
    <elementParameter field="CHECK" name="MONITOR_CONNECTION" value="false"/>
    <elementParameter field="TEXT" name="UNIQUE_NAME" value="row99" show="false"/>
  </connection>
  <connection connectorName="SUBJOB_OK" label="OnSubjobOk" lineStyle="1" metaname="tMSSqlRow_33" offsetLabelX="0" offsetLabelY="0" source="tMSSqlRow_33" target="tMSSqlRow_35">
    <elementParameter field="TEXT" name="UNIQUE_NAME" value="OnSubjobOk19" show="false"/>
  </connection>
  <connection connectorName="REJECT" label="row100" lineStyle="0" metaname="tMSSqlRow_34" offsetLabelX="0" offsetLabelY="0" source="tMSSqlRow_34" target="tLogRow_36">
    <elementParameter field="CHECK" name="MONITOR_CONNECTION" value="false"/>
    <elementParameter field="TEXT" name="UNIQUE_NAME" value="row100" show="false"/>
  </connection>
  <connection connectorName="FLOW" label="row27" lineStyle="0" metaname="tDBRow_1" offsetLabelX="0" offsetLabelY="0" outputId="1" source="tDBRow_1" target="tDBRow_2">
    <elementParameter field="CHECK" name="MONITOR_CONNECTION" value="false"/>
    <elementParameter field="TEXT" name="UNIQUE_NAME" value="row27" show="false"/>
  </connection>
  <connection connectorName="REJECT" label="row32" lineStyle="0" metaname="tDBRow_1" offsetLabelX="0" offsetLabelY="0" outputId="2" source="tDBRow_1" target="tLogRow_37">
    <elementParameter field="CHECK" name="MONITOR_CONNECTION" value="false"/>
    <elementParameter field="TEXT" name="UNIQUE_NAME" value="row32" show="false"/>
  </connection>
  <connection connectorName="SUBJOB_OK" label="OnSubjobOk" lineStyle="1" metaname="tDBRow_1" offsetLabelX="0" offsetLabelY="0" source="tDBRow_1" target="tDBRow_3">
    <elementParameter field="TEXT" name="UNIQUE_NAME" value="OnSubjobOk4" show="false"/>
  </connection>
  <connection connectorName="REJECT" label="row38" lineStyle="0" metaname="tDBRow_2" offsetLabelX="0" offsetLabelY="0" source="tDBRow_2" target="tLogRow_38">
    <elementParameter field="CHECK" name="MONITOR_CONNECTION" value="false"/>
    <elementParameter field="TEXT" name="UNIQUE_NAME" value="row38" show="false"/>
  </connection>
  <connection connectorName="FLOW" label="row41" lineStyle="0" metaname="tDBRow_3" offsetLabelX="0" offsetLabelY="0" outputId="1" source="tDBRow_3" target="tDBRow_4">
    <elementParameter field="CHECK" name="MONITOR_CONNECTION" value="false"/>
    <elementParameter field="TEXT" name="UNIQUE_NAME" value="row41" show="false"/>
  </connection>
  <connection connectorName="REJECT" label="row42" lineStyle="0" metaname="tDBRow_3" offsetLabelX="0" offsetLabelY="0" outputId="2" source="tDBRow_3" target="tLogRow_39">
    <elementParameter field="CHECK" name="MONITOR_CONNECTION" value="false"/>
    <elementParameter field="TEXT" name="UNIQUE_NAME" value="row42" show="false"/>
  </connection>
  <connection connectorName="SUBJOB_OK" label="OnSubjobOk" lineStyle="1" metaname="tDBRow_3" offsetLabelX="0" offsetLabelY="0" source="tDBRow_3" target="tDBRow_5">
    <elementParameter field="TEXT" name="UNIQUE_NAME" value="OnSubjobOk20" show="false"/>
  </connection>
  <connection connectorName="REJECT" label="row44" lineStyle="0" metaname="tDBRow_4" offsetLabelX="0" offsetLabelY="0" source="tDBRow_4" target="tLogRow_40">
    <elementParameter field="CHECK" name="MONITOR_CONNECTION" value="false"/>
    <elementParameter field="TEXT" name="UNIQUE_NAME" value="row44" show="false"/>
  </connection>
  <connection connectorName="FLOW" label="row45" lineStyle="0" metaname="tDBRow_5" offsetLabelX="0" offsetLabelY="0" outputId="1" source="tDBRow_5" target="tDBRow_6">
    <elementParameter field="CHECK" name="MONITOR_CONNECTION" value="false"/>
    <elementParameter field="TEXT" name="UNIQUE_NAME" value="row45" show="false"/>
  </connection>
  <connection connectorName="REJECT" label="row46" lineStyle="0" metaname="tDBRow_5" offsetLabelX="0" offsetLabelY="0" outputId="2" source="tDBRow_5" target="tLogRow_41">
    <elementParameter field="CHECK" name="MONITOR_CONNECTION" value="false"/>
    <elementParameter field="TEXT" name="UNIQUE_NAME" value="row46" show="false"/>
  </connection>
  <connection connectorName="SUBJOB_OK" label="OnSubjobOk" lineStyle="1" metaname="tDBRow_5" offsetLabelX="0" offsetLabelY="0" source="tDBRow_5" target="tDBRow_7">
    <elementParameter field="TEXT" name="UNIQUE_NAME" value="OnSubjobOk21" show="false"/>
  </connection>
  <connection connectorName="REJECT" label="row49" lineStyle="0" metaname="tDBRow_6" offsetLabelX="0" offsetLabelY="0" source="tDBRow_6" target="tLogRow_42">
    <elementParameter field="CHECK" name="MONITOR_CONNECTION" value="false"/>
    <elementParameter field="TEXT" name="UNIQUE_NAME" value="row49" show="false"/>
  </connection>
  <connection connectorName="FLOW" label="row50" lineStyle="0" metaname="tDBRow_7" offsetLabelX="0" offsetLabelY="0" outputId="1" source="tDBRow_7" target="tDBRow_8">
    <elementParameter field="CHECK" name="MONITOR_CONNECTION" value="false"/>
    <elementParameter field="TEXT" name="UNIQUE_NAME" value="row50" show="false"/>
  </connection>
  <connection connectorName="REJECT" label="row51" lineStyle="0" metaname="tDBRow_7" offsetLabelX="0" offsetLabelY="0" outputId="2" source="tDBRow_7" target="tLogRow_43">
    <elementParameter field="CHECK" name="MONITOR_CONNECTION" value="false"/>
    <elementParameter field="TEXT" name="UNIQUE_NAME" value="row51" show="false"/>
  </connection>
  <connection connectorName="SUBJOB_OK" label="OnSubjobOk" lineStyle="1" metaname="tDBRow_7" offsetLabelX="0" offsetLabelY="0" source="tDBRow_7" target="tDBRow_13">
    <elementParameter field="TEXT" name="UNIQUE_NAME" value="OnSubjobOk22" show="false"/>
  </connection>
  <connection connectorName="REJECT" label="row53" lineStyle="0" metaname="tDBRow_8" offsetLabelX="0" offsetLabelY="0" source="tDBRow_8" target="tLogRow_44">
    <elementParameter field="CHECK" name="MONITOR_CONNECTION" value="false"/>
    <elementParameter field="TEXT" name="UNIQUE_NAME" value="row53" show="false"/>
  </connection>
  <connection connectorName="FLOW" label="row102" lineStyle="0" metaname="tDBRow_13" offsetLabelX="0" offsetLabelY="0" outputId="1" source="tDBRow_13" target="tDBRow_14">
    <elementParameter field="CHECK" name="MONITOR_CONNECTION" value="false"/>
    <elementParameter field="TEXT" name="UNIQUE_NAME" value="row102" show="false"/>
  </connection>
  <connection connectorName="REJECT" label="row103" lineStyle="0" metaname="tDBRow_13" offsetLabelX="0" offsetLabelY="0" outputId="2" source="tDBRow_13" target="tLogRow_49">
    <elementParameter field="CHECK" name="MONITOR_CONNECTION" value="false"/>
    <elementParameter field="TEXT" name="UNIQUE_NAME" value="row103" show="false"/>
  </connection>
  <connection connectorName="SUBJOB_OK" label="OnSubjobOk" lineStyle="1" metaname="tDBRow_13" offsetLabelX="0" offsetLabelY="0" source="tDBRow_13" target="tMSSqlRow_11">
    <elementParameter field="TEXT" name="UNIQUE_NAME" value="OnSubjobOk25" show="false"/>
  </connection>
  <connection connectorName="REJECT" label="row105" lineStyle="0" metaname="tDBRow_14" offsetLabelX="0" offsetLabelY="0" source="tDBRow_14" target="tLogRow_50">
    <elementParameter field="CHECK" name="MONITOR_CONNECTION" value="false"/>
    <elementParameter field="TEXT" name="UNIQUE_NAME" value="row105" show="false"/>
  </connection>
  <connection connectorName="REJECT" label="row107" lineStyle="0" metaname="tDBRow_15" offsetLabelX="0" offsetLabelY="0" source="tDBRow_15" target="tLogRow_51">
    <elementParameter field="CHECK" name="MONITOR_CONNECTION" value="false"/>
    <elementParameter field="CHECK" name="ACTIVATE" value="false" show="false"/>
    <elementParameter field="TEXT" name="UNIQUE_NAME" value="row107" show="false"/>
  </connection>
  <connection connectorName="FLOW" label="row108" lineStyle="0" metaname="tStatCatcher_1" offsetLabelX="0" offsetLabelY="0" source="tStatCatcher_1" target="tLogRow_52">
    <elementParameter field="CHECK" name="MONITOR_CONNECTION" value="false"/>
    <elementParameter field="TEXT" name="UNIQUE_NAME" value="row108" show="false"/>
  </connection>
  <subjob>
    <elementParameter field="TEXT" name="UNIQUE_NAME" value="tMSSqlConnection_1" show="false"/>
    <elementParameter field="COLOR" name="SUBJOB_TITLE_COLOR" value="92;131;150" show="false"/>
    <elementParameter field="COLOR" name="SUBJOB_COLOR" value="207;226;236"/>
  </subjob>
  <subjob>
    <elementParameter field="TEXT" name="UNIQUE_NAME" value="tMSSqlConnection_2" show="false"/>
    <elementParameter field="COLOR" name="SUBJOB_TITLE_COLOR" value="92;131;150" show="false"/>
    <elementParameter field="COLOR" name="SUBJOB_COLOR" value="207;226;236"/>
  </subjob>
  <subjob>
    <elementParameter field="TEXT" name="UNIQUE_NAME" value="tMSSqlRow_4" show="false"/>
    <elementParameter field="COLOR" name="SUBJOB_TITLE_COLOR" value="92;131;150" show="false"/>
    <elementParameter field="COLOR" name="SUBJOB_COLOR" value="207;226;236"/>
  </subjob>
  <subjob>
    <elementParameter field="TEXT" name="UNIQUE_NAME" value="tMSSqlRow_40" show="false"/>
    <elementParameter field="COLOR" name="SUBJOB_TITLE_COLOR" value="92;131;150" show="false"/>
    <elementParameter field="COLOR" name="SUBJOB_COLOR" value="207;226;236"/>
  </subjob>
  <subjob>
    <elementParameter field="TEXT" name="UNIQUE_NAME" value="tMSSqlConnection_3" show="false"/>
    <elementParameter field="COLOR" name="SUBJOB_TITLE_COLOR" value="92;131;150" show="false"/>
    <elementParameter field="COLOR" name="SUBJOB_COLOR" value="207;226;236"/>
  </subjob>
  <subjob>
    <elementParameter field="TEXT" name="UNIQUE_NAME" value="tMSSqlRow_2" show="false"/>
    <elementParameter field="COLOR" name="SUBJOB_TITLE_COLOR" value="92;131;150" show="false"/>
    <elementParameter field="COLOR" name="SUBJOB_COLOR" value="207;226;236"/>
  </subjob>
  <subjob>
    <elementParameter field="TEXT" name="UNIQUE_NAME" value="tMSSqlConnection_4" show="false"/>
    <elementParameter field="COLOR" name="SUBJOB_TITLE_COLOR" value="92;131;150" show="false"/>
    <elementParameter field="COLOR" name="SUBJOB_COLOR" value="207;226;236"/>
  </subjob>
  <subjob>
    <elementParameter field="TEXT" name="UNIQUE_NAME" value="tMSSqlRow_6" show="false"/>
    <elementParameter field="COLOR" name="SUBJOB_TITLE_COLOR" value="92;131;150" show="false"/>
    <elementParameter field="COLOR" name="SUBJOB_COLOR" value="207;226;236"/>
  </subjob>
  <subjob>
    <elementParameter field="TEXT" name="UNIQUE_NAME" value="tMSSqlRow_7" show="false"/>
    <elementParameter field="COLOR" name="SUBJOB_TITLE_COLOR" value="92;131;150" show="false"/>
    <elementParameter field="COLOR" name="SUBJOB_COLOR" value="207;226;236"/>
  </subjob>
  <subjob>
    <elementParameter field="TEXT" name="UNIQUE_NAME" value="tMSSqlRow_9" show="false"/>
    <elementParameter field="COLOR" name="SUBJOB_TITLE_COLOR" value="92;131;150" show="false"/>
    <elementParameter field="COLOR" name="SUBJOB_COLOR" value="207;226;236"/>
  </subjob>
  <subjob>
    <elementParameter field="TEXT" name="UNIQUE_NAME" value="tMSSqlRow_10" show="false"/>
    <elementParameter field="COLOR" name="SUBJOB_TITLE_COLOR" value="92;131;150" show="false"/>
    <elementParameter field="COLOR" name="SUBJOB_COLOR" value="207;226;236"/>
  </subjob>
  <subjob>
    <elementParameter field="TEXT" name="UNIQUE_NAME" value="tMSSqlRow_11" show="false"/>
    <elementParameter field="COLOR" name="SUBJOB_TITLE_COLOR" value="92;131;150" show="false"/>
    <elementParameter field="COLOR" name="SUBJOB_COLOR" value="207;226;236"/>
  </subjob>
  <subjob>
    <elementParameter field="TEXT" name="UNIQUE_NAME" value="tMSSqlRow_13" show="false"/>
    <elementParameter field="COLOR" name="SUBJOB_TITLE_COLOR" value="92;131;150" show="false"/>
    <elementParameter field="COLOR" name="SUBJOB_COLOR" value="207;226;236"/>
  </subjob>
  <subjob>
    <elementParameter field="TEXT" name="UNIQUE_NAME" value="tMSSqlRow_15" show="false"/>
    <elementParameter field="COLOR" name="SUBJOB_TITLE_COLOR" value="92;131;150" show="false"/>
    <elementParameter field="COLOR" name="SUBJOB_COLOR" value="207;226;236"/>
  </subjob>
  <subjob>
    <elementParameter field="TEXT" name="UNIQUE_NAME" value="tMSSqlRow_17" show="false"/>
    <elementParameter field="COLOR" name="SUBJOB_TITLE_COLOR" value="92;131;150" show="false"/>
    <elementParameter field="COLOR" name="SUBJOB_COLOR" value="207;226;236"/>
  </subjob>
  <subjob>
    <elementParameter field="TEXT" name="UNIQUE_NAME" value="tMSSqlRow_19" show="false"/>
    <elementParameter field="COLOR" name="SUBJOB_TITLE_COLOR" value="92;131;150" show="false"/>
    <elementParameter field="COLOR" name="SUBJOB_COLOR" value="207;226;236"/>
  </subjob>
  <subjob>
    <elementParameter field="TEXT" name="UNIQUE_NAME" value="tMSSqlRow_21" show="false"/>
    <elementParameter field="COLOR" name="SUBJOB_TITLE_COLOR" value="92;131;150" show="false"/>
    <elementParameter field="COLOR" name="SUBJOB_COLOR" value="207;226;236"/>
  </subjob>
  <subjob>
    <elementParameter field="TEXT" name="UNIQUE_NAME" value="tMSSqlRow_23" show="false"/>
    <elementParameter field="COLOR" name="SUBJOB_TITLE_COLOR" value="92;131;150" show="false"/>
    <elementParameter field="COLOR" name="SUBJOB_COLOR" value="207;226;236"/>
  </subjob>
  <subjob>
    <elementParameter field="TEXT" name="UNIQUE_NAME" value="tMSSqlRow_25" show="false"/>
    <elementParameter field="COLOR" name="SUBJOB_TITLE_COLOR" value="92;131;150" show="false"/>
    <elementParameter field="COLOR" name="SUBJOB_COLOR" value="207;226;236"/>
  </subjob>
  <subjob>
    <elementParameter field="TEXT" name="UNIQUE_NAME" value="tMSSqlRow_27" show="false"/>
    <elementParameter field="COLOR" name="SUBJOB_TITLE_COLOR" value="92;131;150" show="false"/>
    <elementParameter field="COLOR" name="SUBJOB_COLOR" value="207;226;236"/>
  </subjob>
  <subjob>
    <elementParameter field="TEXT" name="UNIQUE_NAME" value="tMSSqlRow_29" show="false"/>
    <elementParameter field="COLOR" name="SUBJOB_TITLE_COLOR" value="92;131;150" show="false"/>
    <elementParameter field="COLOR" name="SUBJOB_COLOR" value="207;226;236"/>
  </subjob>
  <subjob>
    <elementParameter field="TEXT" name="UNIQUE_NAME" value="tMSSqlRow_31" show="false"/>
    <elementParameter field="COLOR" name="SUBJOB_TITLE_COLOR" value="92;131;150" show="false"/>
    <elementParameter field="COLOR" name="SUBJOB_COLOR" value="207;226;236"/>
  </subjob>
  <subjob>
    <elementParameter field="TEXT" name="UNIQUE_NAME" value="tMSSqlRow_33" show="false"/>
    <elementParameter field="COLOR" name="SUBJOB_TITLE_COLOR" value="92;131;150" show="false"/>
    <elementParameter field="COLOR" name="SUBJOB_COLOR" value="207;226;236"/>
  </subjob>
  <subjob>
    <elementParameter field="TEXT" name="UNIQUE_NAME" value="tMSSqlRow_35" show="false"/>
    <elementParameter field="COLOR" name="SUBJOB_TITLE_COLOR" value="92;131;150" show="false"/>
    <elementParameter field="COLOR" name="SUBJOB_COLOR" value="207;226;236"/>
  </subjob>
  <subjob>
    <elementParameter field="TEXT" name="UNIQUE_NAME" value="tDBRow_1" show="false"/>
    <elementParameter field="COLOR" name="SUBJOB_TITLE_COLOR" value="92;131;150" show="false"/>
    <elementParameter field="COLOR" name="SUBJOB_COLOR" value="207;226;236"/>
  </subjob>
  <subjob>
    <elementParameter field="TEXT" name="UNIQUE_NAME" value="tDBRow_3" show="false"/>
    <elementParameter field="COLOR" name="SUBJOB_TITLE_COLOR" value="92;131;150" show="false"/>
    <elementParameter field="COLOR" name="SUBJOB_COLOR" value="207;226;236"/>
  </subjob>
  <subjob>
    <elementParameter field="TEXT" name="UNIQUE_NAME" value="tDBRow_5" show="false"/>
    <elementParameter field="COLOR" name="SUBJOB_TITLE_COLOR" value="92;131;150" show="false"/>
    <elementParameter field="COLOR" name="SUBJOB_COLOR" value="207;226;236"/>
  </subjob>
  <subjob>
    <elementParameter field="TEXT" name="UNIQUE_NAME" value="tDBRow_7" show="false"/>
    <elementParameter field="COLOR" name="SUBJOB_TITLE_COLOR" value="92;131;150" show="false"/>
    <elementParameter field="COLOR" name="SUBJOB_COLOR" value="207;226;236"/>
  </subjob>
  <subjob>
    <elementParameter field="TEXT" name="UNIQUE_NAME" value="tDBRow_13" show="false"/>
    <elementParameter field="COLOR" name="SUBJOB_TITLE_COLOR" value="92;131;150" show="false"/>
    <elementParameter field="COLOR" name="SUBJOB_COLOR" value="207;226;236"/>
  </subjob>
  <subjob>
    <elementParameter field="TEXT" name="UNIQUE_NAME" value="tDBRow_15" show="false"/>
    <elementParameter field="COLOR" name="SUBJOB_TITLE_COLOR" value="92;131;150" show="false"/>
    <elementParameter field="COLOR" name="SUBJOB_COLOR" value="207;226;236"/>
  </subjob>
  <subjob>
    <elementParameter field="TEXT" name="UNIQUE_NAME" value="tStatCatcher_1" show="false"/>
    <elementParameter field="COLOR" name="SUBJOB_TITLE_COLOR" value="92;131;150" show="false"/>
    <elementParameter field="COLOR" name="SUBJOB_COLOR" value="207;226;236"/>
  </subjob>
</talendfile:ProcessType>
