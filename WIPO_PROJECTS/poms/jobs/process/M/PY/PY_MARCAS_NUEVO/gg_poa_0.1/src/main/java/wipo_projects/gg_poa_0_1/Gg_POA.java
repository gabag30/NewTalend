// ============================================================================
//
// Copyright (c) 2006-2015, Talend Inc.
//
// This source code has been automatically generated by_Talend Open Studio for Data Integration
// / Licensed under the Apache License, Version 2.0 (the "License");
// you may not use this file except in compliance with the License.
// You may obtain a copy of the License at
// http://www.apache.org/licenses/LICENSE-2.0
// 
// Unless required by applicable law or agreed to in writing, software
// distributed under the License is distributed on an "AS IS" BASIS,
// WITHOUT WARRANTIES OR CONDITIONS OF ANY KIND, either express or implied.
// See the License for the specific language governing permissions and
// limitations under the License.


package wipo_projects.gg_poa_0_1;

import routines.Numeric;
import routines.DataOperation;
import routines.TalendDataGenerator;
import routines.TalendStringUtil;
import routines.TalendString;
import routines.StringHandling;
import routines.Relational;
import routines.TalendDate;
import routines.Mathematical;
import routines.IPAS;
import routines.system.*;
import routines.system.api.*;
import java.text.ParseException;
import java.text.SimpleDateFormat;
import java.util.Date;
import java.util.List;
import java.math.BigDecimal;
import java.io.ByteArrayOutputStream;
import java.io.ByteArrayInputStream;
import java.io.DataInputStream;
import java.io.DataOutputStream;
import java.io.ObjectOutputStream;
import java.io.ObjectInputStream;
import java.io.IOException;
import java.util.Comparator;
 





@SuppressWarnings("unused")

/**
 * Job: Gg_POA Purpose: automatizar el proceso de validación de la migración<br>
 * Description:  <br>
 * @author user@talend.com
 * @version 7.4.1.20201110_1014-M4
 * @status 
 */
public class Gg_POA implements TalendJob {

protected static void logIgnoredError(String message, Throwable cause) {
       System.err.println(message);
       if (cause != null) {
               cause.printStackTrace();
       }

}


	public final Object obj = new Object();

	// for transmiting parameters purpose
	private Object valueObject = null;

	public Object getValueObject() {
		return this.valueObject;
	}

	public void setValueObject(Object valueObject) {
		this.valueObject = valueObject;
	}
	
	private final static String defaultCharset = java.nio.charset.Charset.defaultCharset().name();

	
	private final static String utf8Charset = "UTF-8";
	//contains type for every context property
	public class PropertiesWithType extends java.util.Properties {
		private static final long serialVersionUID = 1L;
		private java.util.Map<String,String> propertyTypes = new java.util.HashMap<>();
		
		public PropertiesWithType(java.util.Properties properties){
			super(properties);
		}
		public PropertiesWithType(){
			super();
		}
		
		public void setContextType(String key, String type) {
			propertyTypes.put(key,type);
		}
	
		public String getContextType(String key) {
			return propertyTypes.get(key);
		}
	}
	
	// create and load default properties
	private java.util.Properties defaultProps = new java.util.Properties();
	// create application properties with default
	public class ContextProperties extends PropertiesWithType {

		private static final long serialVersionUID = 1L;

		public ContextProperties(java.util.Properties properties){
			super(properties);
		}
		public ContextProperties(){
			super();
		}

		public void synchronizeContext(){
			
			if(ipasHost != null){
				
					this.setProperty("ipasHost", ipasHost.toString());
				
			}
			
			if(ipasPort != null){
				
					this.setProperty("ipasPort", ipasPort.toString());
				
			}
			
			if(ipasDB != null){
				
					this.setProperty("ipasDB", ipasDB.toString());
				
			}
			
			if(ipasUser != null){
				
					this.setProperty("ipasUser", ipasUser.toString());
				
			}
			
			if(ipasPassword != null){
				
					this.setProperty("ipasPassword", ipasPassword.toString());
				
			}
			
			if(intermediateDB != null){
				
					this.setProperty("intermediateDB", intermediateDB.toString());
				
			}
			
		}
		
		//if the stored or passed value is "<TALEND_NULL>" string, it mean null
		public String getStringValue(String key) {
			String origin_value = this.getProperty(key);
			if(NULL_VALUE_EXPRESSION_IN_COMMAND_STRING_FOR_CHILD_JOB_ONLY.equals(origin_value)) {
				return null;
			}
			return origin_value;
		}

public String ipasHost;
public String getIpasHost(){
	return this.ipasHost;
}
public String ipasPort;
public String getIpasPort(){
	return this.ipasPort;
}
public String ipasDB;
public String getIpasDB(){
	return this.ipasDB;
}
public String ipasUser;
public String getIpasUser(){
	return this.ipasUser;
}
public String ipasPassword;
public String getIpasPassword(){
	return this.ipasPassword;
}
public String intermediateDB;
public String getIntermediateDB(){
	return this.intermediateDB;
}
	}
	protected ContextProperties context = new ContextProperties(); // will be instanciated by MS.
	public ContextProperties getContext() {
		return this.context;
	}
	private final String jobVersion = "0.1";
	private final String jobName = "Gg_POA";
	private final String projectName = "WIPO_PROJECTS";
	public Integer errorCode = null;
	private String currentComponent = "";
	
		private final java.util.Map<String, Object> globalMap = new java.util.HashMap<String, Object>();
        private final static java.util.Map<String, Object> junitGlobalMap = new java.util.HashMap<String, Object>();
	
		private final java.util.Map<String, Long> start_Hash = new java.util.HashMap<String, Long>();
		private final java.util.Map<String, Long> end_Hash = new java.util.HashMap<String, Long>();
		private final java.util.Map<String, Boolean> ok_Hash = new java.util.HashMap<String, Boolean>();
		public  final java.util.List<String[]> globalBuffer = new java.util.ArrayList<String[]>();
	

private RunStat runStat = new RunStat();

	// OSGi DataSource
	private final static String KEY_DB_DATASOURCES = "KEY_DB_DATASOURCES";
	
	private final static String KEY_DB_DATASOURCES_RAW = "KEY_DB_DATASOURCES_RAW";

	public void setDataSources(java.util.Map<String, javax.sql.DataSource> dataSources) {
		java.util.Map<String, routines.system.TalendDataSource> talendDataSources = new java.util.HashMap<String, routines.system.TalendDataSource>();
		for (java.util.Map.Entry<String, javax.sql.DataSource> dataSourceEntry : dataSources.entrySet()) {
			talendDataSources.put(dataSourceEntry.getKey(), new routines.system.TalendDataSource(dataSourceEntry.getValue()));
		}
		globalMap.put(KEY_DB_DATASOURCES, talendDataSources);
		globalMap.put(KEY_DB_DATASOURCES_RAW, new java.util.HashMap<String, javax.sql.DataSource>(dataSources));
	}

	StatCatcherUtils tStatCatcher_1 = new StatCatcherUtils("_cnAvAC54EeufTeppe5jqPQ", "0.1");

private final java.io.ByteArrayOutputStream baos = new java.io.ByteArrayOutputStream();
private final java.io.PrintStream errorMessagePS = new java.io.PrintStream(new java.io.BufferedOutputStream(baos));

public String getExceptionStackTrace() {
	if ("failure".equals(this.getStatus())) {
		errorMessagePS.flush();
		return baos.toString();
	}
	return null;
}

private Exception exception;

public Exception getException() {
	if ("failure".equals(this.getStatus())) {
		return this.exception;
	}
	return null;
}

private class TalendException extends Exception {

	private static final long serialVersionUID = 1L;

	private java.util.Map<String, Object> globalMap = null;
	private Exception e = null;
	private String currentComponent = null;
	private String virtualComponentName = null;
	
	public void setVirtualComponentName (String virtualComponentName){
		this.virtualComponentName = virtualComponentName;
	}

	private TalendException(Exception e, String errorComponent, final java.util.Map<String, Object> globalMap) {
		this.currentComponent= errorComponent;
		this.globalMap = globalMap;
		this.e = e;
	}

	public Exception getException() {
		return this.e;
	}

	public String getCurrentComponent() {
		return this.currentComponent;
	}

	
    public String getExceptionCauseMessage(Exception e){
        Throwable cause = e;
        String message = null;
        int i = 10;
        while (null != cause && 0 < i--) {
            message = cause.getMessage();
            if (null == message) {
                cause = cause.getCause();
            } else {
                break;          
            }
        }
        if (null == message) {
            message = e.getClass().getName();
        }   
        return message;
    }

	@Override
	public void printStackTrace() {
		if (!(e instanceof TalendException || e instanceof TDieException)) {
			if(virtualComponentName!=null && currentComponent.indexOf(virtualComponentName+"_")==0){
				globalMap.put(virtualComponentName+"_ERROR_MESSAGE",getExceptionCauseMessage(e));
			}
			globalMap.put(currentComponent+"_ERROR_MESSAGE",getExceptionCauseMessage(e));
			System.err.println("Exception in component " + currentComponent + " (" + jobName + ")");
		}
		if (!(e instanceof TDieException)) {
			if(e instanceof TalendException){
				e.printStackTrace();
			} else {
				e.printStackTrace();
				e.printStackTrace(errorMessagePS);
				Gg_POA.this.exception = e;
			}
		}
		if (!(e instanceof TalendException)) {
		try {
			for (java.lang.reflect.Method m : this.getClass().getEnclosingClass().getMethods()) {
				if (m.getName().compareTo(currentComponent + "_error") == 0) {
					m.invoke(Gg_POA.this, new Object[] { e , currentComponent, globalMap});
					break;
				}
			}

			if(!(e instanceof TDieException)){
			}
		} catch (Exception e) {
			this.e.printStackTrace();
		}
		}
	}
}

			public void tStatCatcher_1_error(Exception exception, String errorComponent, final java.util.Map<String, Object> globalMap) throws TalendException {
				
				end_Hash.put(errorComponent, System.currentTimeMillis());
				
				status = "failure";
				
					tStatCatcher_1_onSubJobError(exception, errorComponent, globalMap);
			}
			
			public void tLogRow_3_error(Exception exception, String errorComponent, final java.util.Map<String, Object> globalMap) throws TalendException {
				
				end_Hash.put(errorComponent, System.currentTimeMillis());
				
				status = "failure";
				
					tStatCatcher_1_onSubJobError(exception, errorComponent, globalMap);
			}
			
			public void tDBConnection_2_error(Exception exception, String errorComponent, final java.util.Map<String, Object> globalMap) throws TalendException {
				
				end_Hash.put(errorComponent, System.currentTimeMillis());
				
							tStatCatcher_1.addMessage("failure",errorComponent, end_Hash.get(errorComponent)-start_Hash.get(errorComponent));
							tStatCatcher_1Process(globalMap);
							
				status = "failure";
				
					tDBConnection_2_onSubJobError(exception, errorComponent, globalMap);
			}
			
			public void tDBConnection_1_error(Exception exception, String errorComponent, final java.util.Map<String, Object> globalMap) throws TalendException {
				
				end_Hash.put(errorComponent, System.currentTimeMillis());
				
							tStatCatcher_1.addMessage("failure",errorComponent, end_Hash.get(errorComponent)-start_Hash.get(errorComponent));
							tStatCatcher_1Process(globalMap);
							
				status = "failure";
				
					tDBConnection_1_onSubJobError(exception, errorComponent, globalMap);
			}
			
			public void tDBInput_1_error(Exception exception, String errorComponent, final java.util.Map<String, Object> globalMap) throws TalendException {
				
				end_Hash.put(errorComponent, System.currentTimeMillis());
				
				status = "failure";
				
					tDBInput_1_onSubJobError(exception, errorComponent, globalMap);
			}
			
			public void tMap_1_error(Exception exception, String errorComponent, final java.util.Map<String, Object> globalMap) throws TalendException {
				
				end_Hash.put(errorComponent, System.currentTimeMillis());
				
				status = "failure";
				
					tDBInput_1_onSubJobError(exception, errorComponent, globalMap);
			}
			
			public void tDBOutput_1_error(Exception exception, String errorComponent, final java.util.Map<String, Object> globalMap) throws TalendException {
				
				end_Hash.put(errorComponent, System.currentTimeMillis());
				
				status = "failure";
				
					tDBInput_1_onSubJobError(exception, errorComponent, globalMap);
			}
			
			public void tLogRow_2_error(Exception exception, String errorComponent, final java.util.Map<String, Object> globalMap) throws TalendException {
				
				end_Hash.put(errorComponent, System.currentTimeMillis());
				
				status = "failure";
				
					tDBInput_1_onSubJobError(exception, errorComponent, globalMap);
			}
			
			public void tDBInput_2_error(Exception exception, String errorComponent, final java.util.Map<String, Object> globalMap) throws TalendException {
				
				end_Hash.put(errorComponent, System.currentTimeMillis());
				
				status = "failure";
				
					tDBInput_2_onSubJobError(exception, errorComponent, globalMap);
			}
			
			public void tMap_2_error(Exception exception, String errorComponent, final java.util.Map<String, Object> globalMap) throws TalendException {
				
				end_Hash.put(errorComponent, System.currentTimeMillis());
				
				status = "failure";
				
					tDBInput_2_onSubJobError(exception, errorComponent, globalMap);
			}
			
			public void tDBOutput_2_error(Exception exception, String errorComponent, final java.util.Map<String, Object> globalMap) throws TalendException {
				
				end_Hash.put(errorComponent, System.currentTimeMillis());
				
				status = "failure";
				
					tDBInput_2_onSubJobError(exception, errorComponent, globalMap);
			}
			
			public void tLogRow_4_error(Exception exception, String errorComponent, final java.util.Map<String, Object> globalMap) throws TalendException {
				
				end_Hash.put(errorComponent, System.currentTimeMillis());
				
				status = "failure";
				
					tDBInput_2_onSubJobError(exception, errorComponent, globalMap);
			}
			
			public void tDBInput_5_error(Exception exception, String errorComponent, final java.util.Map<String, Object> globalMap) throws TalendException {
				
				end_Hash.put(errorComponent, System.currentTimeMillis());
				
				status = "failure";
				
					tDBInput_5_onSubJobError(exception, errorComponent, globalMap);
			}
			
			public void tMap_3_error(Exception exception, String errorComponent, final java.util.Map<String, Object> globalMap) throws TalendException {
				
				end_Hash.put(errorComponent, System.currentTimeMillis());
				
				status = "failure";
				
					tDBInput_5_onSubJobError(exception, errorComponent, globalMap);
			}
			
			public void tDBOutput_3_error(Exception exception, String errorComponent, final java.util.Map<String, Object> globalMap) throws TalendException {
				
				end_Hash.put(errorComponent, System.currentTimeMillis());
				
				status = "failure";
				
					tDBInput_5_onSubJobError(exception, errorComponent, globalMap);
			}
			
			public void tLogRow_5_error(Exception exception, String errorComponent, final java.util.Map<String, Object> globalMap) throws TalendException {
				
				end_Hash.put(errorComponent, System.currentTimeMillis());
				
				status = "failure";
				
					tDBInput_5_onSubJobError(exception, errorComponent, globalMap);
			}
			
			public void tDBInput_6_error(Exception exception, String errorComponent, final java.util.Map<String, Object> globalMap) throws TalendException {
				
				end_Hash.put(errorComponent, System.currentTimeMillis());
				
				status = "failure";
				
					tDBInput_6_onSubJobError(exception, errorComponent, globalMap);
			}
			
			public void tMap_4_error(Exception exception, String errorComponent, final java.util.Map<String, Object> globalMap) throws TalendException {
				
				end_Hash.put(errorComponent, System.currentTimeMillis());
				
				status = "failure";
				
					tDBInput_6_onSubJobError(exception, errorComponent, globalMap);
			}
			
			public void tDBOutput_4_error(Exception exception, String errorComponent, final java.util.Map<String, Object> globalMap) throws TalendException {
				
				end_Hash.put(errorComponent, System.currentTimeMillis());
				
				status = "failure";
				
					tDBInput_6_onSubJobError(exception, errorComponent, globalMap);
			}
			
			public void tLogRow_6_error(Exception exception, String errorComponent, final java.util.Map<String, Object> globalMap) throws TalendException {
				
				end_Hash.put(errorComponent, System.currentTimeMillis());
				
				status = "failure";
				
					tDBInput_6_onSubJobError(exception, errorComponent, globalMap);
			}
			
			public void tDBRow_1_error(Exception exception, String errorComponent, final java.util.Map<String, Object> globalMap) throws TalendException {
				
				end_Hash.put(errorComponent, System.currentTimeMillis());
				
				status = "failure";
				
					tDBRow_1_onSubJobError(exception, errorComponent, globalMap);
			}
			
			public void tLogRow_1_error(Exception exception, String errorComponent, final java.util.Map<String, Object> globalMap) throws TalendException {
				
				end_Hash.put(errorComponent, System.currentTimeMillis());
				
				status = "failure";
				
					tDBRow_1_onSubJobError(exception, errorComponent, globalMap);
			}
			
			public void tDBInput_3_error(Exception exception, String errorComponent, final java.util.Map<String, Object> globalMap) throws TalendException {
				
				end_Hash.put(errorComponent, System.currentTimeMillis());
				
				status = "failure";
				
					tDBInput_2_onSubJobError(exception, errorComponent, globalMap);
			}
			
			public void tDBInput_4_error(Exception exception, String errorComponent, final java.util.Map<String, Object> globalMap) throws TalendException {
				
				end_Hash.put(errorComponent, System.currentTimeMillis());
				
				status = "failure";
				
					tDBInput_5_onSubJobError(exception, errorComponent, globalMap);
			}
			
			public void tDBInput_7_error(Exception exception, String errorComponent, final java.util.Map<String, Object> globalMap) throws TalendException {
				
				end_Hash.put(errorComponent, System.currentTimeMillis());
				
				status = "failure";
				
					tDBInput_6_onSubJobError(exception, errorComponent, globalMap);
			}
			
			public void tDBInput_8_error(Exception exception, String errorComponent, final java.util.Map<String, Object> globalMap) throws TalendException {
				
				end_Hash.put(errorComponent, System.currentTimeMillis());
				
				status = "failure";
				
					tDBInput_6_onSubJobError(exception, errorComponent, globalMap);
			}
			
			public void tAdvancedHash_row5_error(Exception exception, String errorComponent, final java.util.Map<String, Object> globalMap) throws TalendException {
				
				end_Hash.put(errorComponent, System.currentTimeMillis());
				
				status = "failure";
				
					tDBInput_2_onSubJobError(exception, errorComponent, globalMap);
			}
			
			public void tAdvancedHash_row9_error(Exception exception, String errorComponent, final java.util.Map<String, Object> globalMap) throws TalendException {
				
				end_Hash.put(errorComponent, System.currentTimeMillis());
				
				status = "failure";
				
					tDBInput_5_onSubJobError(exception, errorComponent, globalMap);
			}
			
			public void tAdvancedHash_row12_error(Exception exception, String errorComponent, final java.util.Map<String, Object> globalMap) throws TalendException {
				
				end_Hash.put(errorComponent, System.currentTimeMillis());
				
				status = "failure";
				
					tDBInput_6_onSubJobError(exception, errorComponent, globalMap);
			}
			
			public void tAdvancedHash_row13_error(Exception exception, String errorComponent, final java.util.Map<String, Object> globalMap) throws TalendException {
				
				end_Hash.put(errorComponent, System.currentTimeMillis());
				
				status = "failure";
				
					tDBInput_6_onSubJobError(exception, errorComponent, globalMap);
			}
			
			public void tStatCatcher_1_onSubJobError(Exception exception, String errorComponent, final java.util.Map<String, Object> globalMap) throws TalendException {

resumeUtil.addLog("SYSTEM_LOG", "NODE:"+ errorComponent, "", Thread.currentThread().getId()+ "", "FATAL", "", exception.getMessage(), ResumeUtil.getExceptionStackTrace(exception),"");

			}
			public void tDBConnection_2_onSubJobError(Exception exception, String errorComponent, final java.util.Map<String, Object> globalMap) throws TalendException {

resumeUtil.addLog("SYSTEM_LOG", "NODE:"+ errorComponent, "", Thread.currentThread().getId()+ "", "FATAL", "", exception.getMessage(), ResumeUtil.getExceptionStackTrace(exception),"");

			}
			public void tDBConnection_1_onSubJobError(Exception exception, String errorComponent, final java.util.Map<String, Object> globalMap) throws TalendException {

resumeUtil.addLog("SYSTEM_LOG", "NODE:"+ errorComponent, "", Thread.currentThread().getId()+ "", "FATAL", "", exception.getMessage(), ResumeUtil.getExceptionStackTrace(exception),"");

			}
			public void tDBInput_1_onSubJobError(Exception exception, String errorComponent, final java.util.Map<String, Object> globalMap) throws TalendException {

resumeUtil.addLog("SYSTEM_LOG", "NODE:"+ errorComponent, "", Thread.currentThread().getId()+ "", "FATAL", "", exception.getMessage(), ResumeUtil.getExceptionStackTrace(exception),"");

			}
			public void tDBInput_2_onSubJobError(Exception exception, String errorComponent, final java.util.Map<String, Object> globalMap) throws TalendException {

resumeUtil.addLog("SYSTEM_LOG", "NODE:"+ errorComponent, "", Thread.currentThread().getId()+ "", "FATAL", "", exception.getMessage(), ResumeUtil.getExceptionStackTrace(exception),"");

			}
			public void tDBInput_5_onSubJobError(Exception exception, String errorComponent, final java.util.Map<String, Object> globalMap) throws TalendException {

resumeUtil.addLog("SYSTEM_LOG", "NODE:"+ errorComponent, "", Thread.currentThread().getId()+ "", "FATAL", "", exception.getMessage(), ResumeUtil.getExceptionStackTrace(exception),"");

			}
			public void tDBInput_6_onSubJobError(Exception exception, String errorComponent, final java.util.Map<String, Object> globalMap) throws TalendException {

resumeUtil.addLog("SYSTEM_LOG", "NODE:"+ errorComponent, "", Thread.currentThread().getId()+ "", "FATAL", "", exception.getMessage(), ResumeUtil.getExceptionStackTrace(exception),"");

			}
			public void tDBRow_1_onSubJobError(Exception exception, String errorComponent, final java.util.Map<String, Object> globalMap) throws TalendException {

resumeUtil.addLog("SYSTEM_LOG", "NODE:"+ errorComponent, "", Thread.currentThread().getId()+ "", "FATAL", "", exception.getMessage(), ResumeUtil.getExceptionStackTrace(exception),"");

			}
	






public static class row2Struct implements routines.system.IPersistableRow<row2Struct> {
    final static byte[] commonByteArrayLock_WIPO_PROJECTS_Gg_POA = new byte[0];
    static byte[] commonByteArray_WIPO_PROJECTS_Gg_POA = new byte[0];

	
			    public java.util.Date moment;

				public java.util.Date getMoment () {
					return this.moment;
				}
				
			    public String pid;

				public String getPid () {
					return this.pid;
				}
				
			    public String father_pid;

				public String getFather_pid () {
					return this.father_pid;
				}
				
			    public String root_pid;

				public String getRoot_pid () {
					return this.root_pid;
				}
				
			    public Long system_pid;

				public Long getSystem_pid () {
					return this.system_pid;
				}
				
			    public String project;

				public String getProject () {
					return this.project;
				}
				
			    public String job;

				public String getJob () {
					return this.job;
				}
				
			    public String job_repository_id;

				public String getJob_repository_id () {
					return this.job_repository_id;
				}
				
			    public String job_version;

				public String getJob_version () {
					return this.job_version;
				}
				
			    public String context;

				public String getContext () {
					return this.context;
				}
				
			    public String origin;

				public String getOrigin () {
					return this.origin;
				}
				
			    public String message_type;

				public String getMessage_type () {
					return this.message_type;
				}
				
			    public String message;

				public String getMessage () {
					return this.message;
				}
				
			    public Long duration;

				public Long getDuration () {
					return this.duration;
				}
				



	private java.util.Date readDate(ObjectInputStream dis) throws IOException{
		java.util.Date dateReturn = null;
        int length = 0;
        length = dis.readByte();
		if (length == -1) {
			dateReturn = null;
		} else {
	    	dateReturn = new Date(dis.readLong());
		}
		return dateReturn;
	}

    private void writeDate(java.util.Date date1, ObjectOutputStream dos) throws IOException{
		if(date1 == null) {
            dos.writeByte(-1);
		} else {
			dos.writeByte(0);
	    	dos.writeLong(date1.getTime());
    	}
    }

	private String readString(ObjectInputStream dis) throws IOException{
		String strReturn = null;
		int length = 0;
        length = dis.readInt();
		if (length == -1) {
			strReturn = null;
		} else {
			if(length > commonByteArray_WIPO_PROJECTS_Gg_POA.length) {
				if(length < 1024 && commonByteArray_WIPO_PROJECTS_Gg_POA.length == 0) {
   					commonByteArray_WIPO_PROJECTS_Gg_POA = new byte[1024];
				} else {
   					commonByteArray_WIPO_PROJECTS_Gg_POA = new byte[2 * length];
   				}
			}
			dis.readFully(commonByteArray_WIPO_PROJECTS_Gg_POA, 0, length);
			strReturn = new String(commonByteArray_WIPO_PROJECTS_Gg_POA, 0, length, utf8Charset);
		}
		return strReturn;
	}

    private void writeString(String str, ObjectOutputStream dos) throws IOException{
		if(str == null) {
            dos.writeInt(-1);
		} else {
            byte[] byteArray = str.getBytes(utf8Charset);
	    	dos.writeInt(byteArray.length);
			dos.write(byteArray);
    	}
    }

    public void readData(ObjectInputStream dis) {

		synchronized(commonByteArrayLock_WIPO_PROJECTS_Gg_POA) {

        	try {

        		int length = 0;
		
					this.moment = readDate(dis);
					
					this.pid = readString(dis);
					
					this.father_pid = readString(dis);
					
					this.root_pid = readString(dis);
					
			            length = dis.readByte();
           				if (length == -1) {
           	    			this.system_pid = null;
           				} else {
           			    	this.system_pid = dis.readLong();
           				}
					
					this.project = readString(dis);
					
					this.job = readString(dis);
					
					this.job_repository_id = readString(dis);
					
					this.job_version = readString(dis);
					
					this.context = readString(dis);
					
					this.origin = readString(dis);
					
					this.message_type = readString(dis);
					
					this.message = readString(dis);
					
			            length = dis.readByte();
           				if (length == -1) {
           	    			this.duration = null;
           				} else {
           			    	this.duration = dis.readLong();
           				}
					
        	} catch (IOException e) {
	            throw new RuntimeException(e);

		

        }

		

      }


    }

    public void writeData(ObjectOutputStream dos) {
        try {

		
					// java.util.Date
				
						writeDate(this.moment,dos);
					
					// String
				
						writeString(this.pid,dos);
					
					// String
				
						writeString(this.father_pid,dos);
					
					// String
				
						writeString(this.root_pid,dos);
					
					// Long
				
						if(this.system_pid == null) {
			                dos.writeByte(-1);
						} else {
               				dos.writeByte(0);
           			    	dos.writeLong(this.system_pid);
		            	}
					
					// String
				
						writeString(this.project,dos);
					
					// String
				
						writeString(this.job,dos);
					
					// String
				
						writeString(this.job_repository_id,dos);
					
					// String
				
						writeString(this.job_version,dos);
					
					// String
				
						writeString(this.context,dos);
					
					// String
				
						writeString(this.origin,dos);
					
					// String
				
						writeString(this.message_type,dos);
					
					// String
				
						writeString(this.message,dos);
					
					// Long
				
						if(this.duration == null) {
			                dos.writeByte(-1);
						} else {
               				dos.writeByte(0);
           			    	dos.writeLong(this.duration);
		            	}
					
        	} catch (IOException e) {
	            throw new RuntimeException(e);
        }


    }


    public String toString() {

		StringBuilder sb = new StringBuilder();
		sb.append(super.toString());
		sb.append("[");
		sb.append("moment="+String.valueOf(moment));
		sb.append(",pid="+pid);
		sb.append(",father_pid="+father_pid);
		sb.append(",root_pid="+root_pid);
		sb.append(",system_pid="+String.valueOf(system_pid));
		sb.append(",project="+project);
		sb.append(",job="+job);
		sb.append(",job_repository_id="+job_repository_id);
		sb.append(",job_version="+job_version);
		sb.append(",context="+context);
		sb.append(",origin="+origin);
		sb.append(",message_type="+message_type);
		sb.append(",message="+message);
		sb.append(",duration="+String.valueOf(duration));
	    sb.append("]");

	    return sb.toString();
    }

    /**
     * Compare keys
     */
    public int compareTo(row2Struct other) {

		int returnValue = -1;
		
	    return returnValue;
    }


    private int checkNullsAndCompare(Object object1, Object object2) {
        int returnValue = 0;
		if (object1 instanceof Comparable && object2 instanceof Comparable) {
            returnValue = ((Comparable) object1).compareTo(object2);
        } else if (object1 != null && object2 != null) {
            returnValue = compareStrings(object1.toString(), object2.toString());
        } else if (object1 == null && object2 != null) {
            returnValue = 1;
        } else if (object1 != null && object2 == null) {
            returnValue = -1;
        } else {
            returnValue = 0;
        }

        return returnValue;
    }

    private int compareStrings(String string1, String string2) {
        return string1.compareTo(string2);
    }


}
public void tStatCatcher_1Process(final java.util.Map<String, Object> globalMap) throws TalendException {
	globalMap.put("tStatCatcher_1_SUBPROCESS_STATE", 0);

 final boolean execStat = this.execStat;
	
		String iterateId = "";
	
	
	String currentComponent = "";
	java.util.Map<String, Object> resourceMap = new java.util.HashMap<String, Object>();

	try {
			// TDI-39566 avoid throwing an useless Exception
			boolean resumeIt = true;
			if (globalResumeTicket == false && resumeEntryMethodName != null) {
				String currentMethodName = new java.lang.Exception().getStackTrace()[0].getMethodName();
				resumeIt = resumeEntryMethodName.equals(currentMethodName);
			}
			if (resumeIt || globalResumeTicket) { //start the resume
				globalResumeTicket = true;



		row2Struct row2 = new row2Struct();




	
	/**
	 * [tLogRow_3 begin ] start
	 */

	

	
		
		ok_Hash.put("tLogRow_3", false);
		start_Hash.put("tLogRow_3", System.currentTimeMillis());
		
	
	currentComponent="tLogRow_3";

	
					if(execStat) {
						runStat.updateStatOnConnection(resourceMap,iterateId,0,0,"row2");
					}
				
		int tos_count_tLogRow_3 = 0;
		

	///////////////////////
	
		final String OUTPUT_FIELD_SEPARATOR_tLogRow_3 = "|";
		java.io.PrintStream consoleOut_tLogRow_3 = null;	

 		StringBuilder strBuffer_tLogRow_3 = null;
		int nb_line_tLogRow_3 = 0;
///////////////////////    			



 



/**
 * [tLogRow_3 begin ] stop
 */



	
	/**
	 * [tStatCatcher_1 begin ] start
	 */

	

	
		
		ok_Hash.put("tStatCatcher_1", false);
		start_Hash.put("tStatCatcher_1", System.currentTimeMillis());
		
	
	currentComponent="tStatCatcher_1";

	
		int tos_count_tStatCatcher_1 = 0;
		

	for (StatCatcherUtils.StatCatcherMessage scm : tStatCatcher_1.getMessages()) {
		row2.pid = pid;
		row2.root_pid = rootPid;
		row2.father_pid = fatherPid;	
    	row2.project = projectName;
    	row2.job = jobName;
    	row2.context = contextStr;
		row2.origin = (scm.getOrigin()==null || scm.getOrigin().length()<1 ? null : scm.getOrigin());
		row2.message = scm.getMessage();
		row2.duration = scm.getDuration();
		row2.moment = scm.getMoment();
		row2.message_type = scm.getMessageType();
		row2.job_version = scm.getJobVersion();
		row2.job_repository_id = scm.getJobId();
		row2.system_pid = scm.getSystemPid();

 



/**
 * [tStatCatcher_1 begin ] stop
 */
	
	/**
	 * [tStatCatcher_1 main ] start
	 */

	

	
	
	currentComponent="tStatCatcher_1";

	

 


	tos_count_tStatCatcher_1++;

/**
 * [tStatCatcher_1 main ] stop
 */
	
	/**
	 * [tStatCatcher_1 process_data_begin ] start
	 */

	

	
	
	currentComponent="tStatCatcher_1";

	

 



/**
 * [tStatCatcher_1 process_data_begin ] stop
 */

	
	/**
	 * [tLogRow_3 main ] start
	 */

	

	
	
	currentComponent="tLogRow_3";

	
					if(execStat){
						runStat.updateStatOnConnection(iterateId,1,1
						
							,"row2"
						
						);
					}
					
///////////////////////		
						



				strBuffer_tLogRow_3 = new StringBuilder();




   				
	    		if(row2.moment != null) { //              
                    							
       
				strBuffer_tLogRow_3.append(
								FormatterUtils.format_Date(row2.moment, "yyyy-MM-dd HH:mm:ss")				
				);


							
	    		} //  			

    			strBuffer_tLogRow_3.append("|");
    			


   				
	    		if(row2.job != null) { //              
                    							
       
				strBuffer_tLogRow_3.append(
				                String.valueOf(row2.job)							
				);


							
	    		} //  			

    			strBuffer_tLogRow_3.append("|");
    			


   				
	    		if(row2.origin != null) { //              
                    							
       
				strBuffer_tLogRow_3.append(
				                String.valueOf(row2.origin)							
				);


							
	    		} //  			

    			strBuffer_tLogRow_3.append("|");
    			


   				
	    		if(row2.message_type != null) { //              
                    							
       
				strBuffer_tLogRow_3.append(
				                String.valueOf(row2.message_type)							
				);


							
	    		} //  			

    			strBuffer_tLogRow_3.append("|");
    			


   				
	    		if(row2.message != null) { //              
                    							
       
				strBuffer_tLogRow_3.append(
				                String.valueOf(row2.message)							
				);


							
	    		} //  			

    			strBuffer_tLogRow_3.append("|");
    			


   				
	    		if(row2.duration != null) { //              
                    							
       
				strBuffer_tLogRow_3.append(
				                String.valueOf(row2.duration)							
				);


							
	    		} //  			
 

                    if (globalMap.get("tLogRow_CONSOLE")!=null)
                    {
                    	consoleOut_tLogRow_3 = (java.io.PrintStream) globalMap.get("tLogRow_CONSOLE");
                    }
                    else
                    {
                    	consoleOut_tLogRow_3 = new java.io.PrintStream(new java.io.BufferedOutputStream(System.out));
                    	globalMap.put("tLogRow_CONSOLE",consoleOut_tLogRow_3);
                    }
                    consoleOut_tLogRow_3.println(strBuffer_tLogRow_3.toString());
                    consoleOut_tLogRow_3.flush();
                    nb_line_tLogRow_3++;
//////

//////                    
                    
///////////////////////    			

 


	tos_count_tLogRow_3++;

/**
 * [tLogRow_3 main ] stop
 */
	
	/**
	 * [tLogRow_3 process_data_begin ] start
	 */

	

	
	
	currentComponent="tLogRow_3";

	

 



/**
 * [tLogRow_3 process_data_begin ] stop
 */
	
	/**
	 * [tLogRow_3 process_data_end ] start
	 */

	

	
	
	currentComponent="tLogRow_3";

	

 



/**
 * [tLogRow_3 process_data_end ] stop
 */



	
	/**
	 * [tStatCatcher_1 process_data_end ] start
	 */

	

	
	
	currentComponent="tStatCatcher_1";

	

 



/**
 * [tStatCatcher_1 process_data_end ] stop
 */
	
	/**
	 * [tStatCatcher_1 end ] start
	 */

	

	
	
	currentComponent="tStatCatcher_1";

	

	}


 

ok_Hash.put("tStatCatcher_1", true);
end_Hash.put("tStatCatcher_1", System.currentTimeMillis());




/**
 * [tStatCatcher_1 end ] stop
 */

	
	/**
	 * [tLogRow_3 end ] start
	 */

	

	
	
	currentComponent="tLogRow_3";

	


//////
//////
globalMap.put("tLogRow_3_NB_LINE",nb_line_tLogRow_3);

///////////////////////    			

				if(execStat){
			  		runStat.updateStat(resourceMap,iterateId,2,0,"row2");
			  	}
			  	
 

ok_Hash.put("tLogRow_3", true);
end_Hash.put("tLogRow_3", System.currentTimeMillis());




/**
 * [tLogRow_3 end ] stop
 */



				}//end the resume

				



	
			}catch(java.lang.Exception e){	
				
				TalendException te = new TalendException(e, currentComponent, globalMap);
				
				throw te;
			}catch(java.lang.Error error){	
				
					runStat.stopThreadStat();
				
				throw error;
			}finally{
				
				try{
					
	
	/**
	 * [tStatCatcher_1 finally ] start
	 */

	

	
	
	currentComponent="tStatCatcher_1";

	

 



/**
 * [tStatCatcher_1 finally ] stop
 */

	
	/**
	 * [tLogRow_3 finally ] start
	 */

	

	
	
	currentComponent="tLogRow_3";

	

 



/**
 * [tLogRow_3 finally ] stop
 */



				}catch(java.lang.Exception e){	
					//ignore
				}catch(java.lang.Error error){
					//ignore
				}
				resourceMap = null;
			}
		

		globalMap.put("tStatCatcher_1_SUBPROCESS_STATE", 1);
	}
	

public void tDBConnection_2Process(final java.util.Map<String, Object> globalMap) throws TalendException {
	globalMap.put("tDBConnection_2_SUBPROCESS_STATE", 0);

 final boolean execStat = this.execStat;
	
		String iterateId = "";
	
	
	String currentComponent = "";
	java.util.Map<String, Object> resourceMap = new java.util.HashMap<String, Object>();

	try {
			// TDI-39566 avoid throwing an useless Exception
			boolean resumeIt = true;
			if (globalResumeTicket == false && resumeEntryMethodName != null) {
				String currentMethodName = new java.lang.Exception().getStackTrace()[0].getMethodName();
				resumeIt = resumeEntryMethodName.equals(currentMethodName);
			}
			if (resumeIt || globalResumeTicket) { //start the resume
				globalResumeTicket = true;



		


	
	/**
	 * [tDBConnection_2 begin ] start
	 */

	

	
		
		ok_Hash.put("tDBConnection_2", false);
		start_Hash.put("tDBConnection_2", System.currentTimeMillis());
		
				tStatCatcher_1.addMessage("begin","tDBConnection_2");
				tStatCatcher_1Process(globalMap);
			
	
	currentComponent="tDBConnection_2";

	
		int tos_count_tDBConnection_2 = 0;
		
	

	
			String url_tDBConnection_2 = "jdbc:jtds:sqlserver://" + "localhost" ;
		String port_tDBConnection_2 = "1433";
		String dbname_tDBConnection_2 = "MARCAS_PY" ;
    	if (!"".equals(port_tDBConnection_2)) {
    		url_tDBConnection_2 += ":" + "1433";
    	}
    	if (!"".equals(dbname_tDBConnection_2)) {
    		
				url_tDBConnection_2 += "//" + "MARCAS_PY"; 
    	}

		url_tDBConnection_2 += ";appName=" + projectName + ";" + "";  
	String dbUser_tDBConnection_2 = "ADMIN";
	
	
		 
	final String decryptedPassword_tDBConnection_2 = routines.system.PasswordEncryptUtil.decryptPassword("enc:routine.encryption.key.v1:34HvlqQKWahsTVKeEWZcOJDcM0vw8PdGHbc2amBZuuqj");
		String dbPwd_tDBConnection_2 = decryptedPassword_tDBConnection_2;
	
	
	java.sql.Connection conn_tDBConnection_2 = null;
	
		
			String driverClass_tDBConnection_2 = "net.sourceforge.jtds.jdbc.Driver";
			java.lang.Class jdbcclazz_tDBConnection_2 = java.lang.Class.forName(driverClass_tDBConnection_2);
			globalMap.put("driverClass_tDBConnection_2", driverClass_tDBConnection_2);
		
			conn_tDBConnection_2 = java.sql.DriverManager.getConnection(url_tDBConnection_2,dbUser_tDBConnection_2,dbPwd_tDBConnection_2);

		globalMap.put("conn_tDBConnection_2", conn_tDBConnection_2);
	if (null != conn_tDBConnection_2) {
		
			conn_tDBConnection_2.setAutoCommit(true);
	}

	globalMap.put("dbschema_tDBConnection_2", "ADMIN");

	globalMap.put("db_tDBConnection_2",  "MARCAS_PY");
	
	globalMap.put("shareIdentitySetting_tDBConnection_2",  false);

	globalMap.put("driver_tDBConnection_2", "JTDS");

 



/**
 * [tDBConnection_2 begin ] stop
 */
	
	/**
	 * [tDBConnection_2 main ] start
	 */

	

	
	
	currentComponent="tDBConnection_2";

	

 


	tos_count_tDBConnection_2++;

/**
 * [tDBConnection_2 main ] stop
 */
	
	/**
	 * [tDBConnection_2 process_data_begin ] start
	 */

	

	
	
	currentComponent="tDBConnection_2";

	

 



/**
 * [tDBConnection_2 process_data_begin ] stop
 */
	
	/**
	 * [tDBConnection_2 process_data_end ] start
	 */

	

	
	
	currentComponent="tDBConnection_2";

	

 



/**
 * [tDBConnection_2 process_data_end ] stop
 */
	
	/**
	 * [tDBConnection_2 end ] start
	 */

	

	
	
	currentComponent="tDBConnection_2";

	

 

ok_Hash.put("tDBConnection_2", true);
end_Hash.put("tDBConnection_2", System.currentTimeMillis());

tStatCatcher_1.addMessage("end","tDBConnection_2", end_Hash.get("tDBConnection_2")-start_Hash.get("tDBConnection_2"));
tStatCatcher_1Process(globalMap);



/**
 * [tDBConnection_2 end ] stop
 */
				}//end the resume

				
				    			if(resumeEntryMethodName == null || globalResumeTicket){
				    				resumeUtil.addLog("CHECKPOINT", "CONNECTION:SUBJOB_OK:tDBConnection_2:OnSubjobOk", "", Thread.currentThread().getId() + "", "", "", "", "", "");
								}	    				    			
					    	
								if(execStat){    	
									runStat.updateStatOnConnection("OnSubjobOk3", 0, "ok");
								} 
							
							tDBConnection_1Process(globalMap); 
						



	
			}catch(java.lang.Exception e){	
				
				TalendException te = new TalendException(e, currentComponent, globalMap);
				
				throw te;
			}catch(java.lang.Error error){	
				
					runStat.stopThreadStat();
				
				throw error;
			}finally{
				
				try{
					
	
	/**
	 * [tDBConnection_2 finally ] start
	 */

	

	
	
	currentComponent="tDBConnection_2";

	

 



/**
 * [tDBConnection_2 finally ] stop
 */
				}catch(java.lang.Exception e){	
					//ignore
				}catch(java.lang.Error error){
					//ignore
				}
				resourceMap = null;
			}
		

		globalMap.put("tDBConnection_2_SUBPROCESS_STATE", 1);
	}
	

public void tDBConnection_1Process(final java.util.Map<String, Object> globalMap) throws TalendException {
	globalMap.put("tDBConnection_1_SUBPROCESS_STATE", 0);

 final boolean execStat = this.execStat;
	
		String iterateId = "";
	
	
	String currentComponent = "";
	java.util.Map<String, Object> resourceMap = new java.util.HashMap<String, Object>();

	try {
			// TDI-39566 avoid throwing an useless Exception
			boolean resumeIt = true;
			if (globalResumeTicket == false && resumeEntryMethodName != null) {
				String currentMethodName = new java.lang.Exception().getStackTrace()[0].getMethodName();
				resumeIt = resumeEntryMethodName.equals(currentMethodName);
			}
			if (resumeIt || globalResumeTicket) { //start the resume
				globalResumeTicket = true;



		


	
	/**
	 * [tDBConnection_1 begin ] start
	 */

	

	
		
		ok_Hash.put("tDBConnection_1", false);
		start_Hash.put("tDBConnection_1", System.currentTimeMillis());
		
				tStatCatcher_1.addMessage("begin","tDBConnection_1");
				tStatCatcher_1Process(globalMap);
			
	
	currentComponent="tDBConnection_1";

	
		int tos_count_tDBConnection_1 = 0;
		
	

	
			String url_tDBConnection_1 = "jdbc:jtds:sqlserver://" + "localhost" ;
		String port_tDBConnection_1 = "1433";
		String dbname_tDBConnection_1 = "PY_INTERMED" ;
    	if (!"".equals(port_tDBConnection_1)) {
    		url_tDBConnection_1 += ":" + "1433";
    	}
    	if (!"".equals(dbname_tDBConnection_1)) {
    		
				url_tDBConnection_1 += "//" + "PY_INTERMED"; 
    	}

		url_tDBConnection_1 += ";appName=" + projectName + ";" + "";  
	String dbUser_tDBConnection_1 = "sa";
	
	
		 
	final String decryptedPassword_tDBConnection_1 = routines.system.PasswordEncryptUtil.decryptPassword("enc:routine.encryption.key.v1:nLhRfF6wBTGWEiuemks92iO/v3EvcpzC3bseztfj6jheSZgx");
		String dbPwd_tDBConnection_1 = decryptedPassword_tDBConnection_1;
	
	
	java.sql.Connection conn_tDBConnection_1 = null;
	
		
			String driverClass_tDBConnection_1 = "net.sourceforge.jtds.jdbc.Driver";
			java.lang.Class jdbcclazz_tDBConnection_1 = java.lang.Class.forName(driverClass_tDBConnection_1);
			globalMap.put("driverClass_tDBConnection_1", driverClass_tDBConnection_1);
		
			conn_tDBConnection_1 = java.sql.DriverManager.getConnection(url_tDBConnection_1,dbUser_tDBConnection_1,dbPwd_tDBConnection_1);

		globalMap.put("conn_tDBConnection_1", conn_tDBConnection_1);
	if (null != conn_tDBConnection_1) {
		
			conn_tDBConnection_1.setAutoCommit(true);
	}

	globalMap.put("dbschema_tDBConnection_1", "dbo");

	globalMap.put("db_tDBConnection_1",  "PY_INTERMED");
	
	globalMap.put("shareIdentitySetting_tDBConnection_1",  false);

	globalMap.put("driver_tDBConnection_1", "JTDS");

 



/**
 * [tDBConnection_1 begin ] stop
 */
	
	/**
	 * [tDBConnection_1 main ] start
	 */

	

	
	
	currentComponent="tDBConnection_1";

	

 


	tos_count_tDBConnection_1++;

/**
 * [tDBConnection_1 main ] stop
 */
	
	/**
	 * [tDBConnection_1 process_data_begin ] start
	 */

	

	
	
	currentComponent="tDBConnection_1";

	

 



/**
 * [tDBConnection_1 process_data_begin ] stop
 */
	
	/**
	 * [tDBConnection_1 process_data_end ] start
	 */

	

	
	
	currentComponent="tDBConnection_1";

	

 



/**
 * [tDBConnection_1 process_data_end ] stop
 */
	
	/**
	 * [tDBConnection_1 end ] start
	 */

	

	
	
	currentComponent="tDBConnection_1";

	

 

ok_Hash.put("tDBConnection_1", true);
end_Hash.put("tDBConnection_1", System.currentTimeMillis());

tStatCatcher_1.addMessage("end","tDBConnection_1", end_Hash.get("tDBConnection_1")-start_Hash.get("tDBConnection_1"));
tStatCatcher_1Process(globalMap);



/**
 * [tDBConnection_1 end ] stop
 */
				}//end the resume

				
				    			if(resumeEntryMethodName == null || globalResumeTicket){
				    				resumeUtil.addLog("CHECKPOINT", "CONNECTION:SUBJOB_OK:tDBConnection_1:OnSubjobOk", "", Thread.currentThread().getId() + "", "", "", "", "", "");
								}	    				    			
					    	
								if(execStat){    	
									runStat.updateStatOnConnection("OnSubjobOk4", 0, "ok");
								} 
							
							tDBInput_1Process(globalMap); 
						



	
			}catch(java.lang.Exception e){	
				
				TalendException te = new TalendException(e, currentComponent, globalMap);
				
				throw te;
			}catch(java.lang.Error error){	
				
					runStat.stopThreadStat();
				
				throw error;
			}finally{
				
				try{
					
	
	/**
	 * [tDBConnection_1 finally ] start
	 */

	

	
	
	currentComponent="tDBConnection_1";

	

 



/**
 * [tDBConnection_1 finally ] stop
 */
				}catch(java.lang.Exception e){	
					//ignore
				}catch(java.lang.Error error){
					//ignore
				}
				resourceMap = null;
			}
		

		globalMap.put("tDBConnection_1_SUBPROCESS_STATE", 1);
	}
	


public static class row6Struct implements routines.system.IPersistableRow<row6Struct> {
    final static byte[] commonByteArrayLock_WIPO_PROJECTS_Gg_POA = new byte[0];
    static byte[] commonByteArray_WIPO_PROJECTS_Gg_POA = new byte[0];
	protected static final int DEFAULT_HASHCODE = 1;
    protected static final int PRIME = 31;
    protected int hashCode = DEFAULT_HASHCODE;
    public boolean hashCodeDirty = true;

    public String loopKey;



	
			    public BigDecimal ROW_VERSION;

				public BigDecimal getROW_VERSION () {
					return this.ROW_VERSION;
				}
				
			    public String DOC_ORI;

				public String getDOC_ORI () {
					return this.DOC_ORI;
				}
				
			    public String DOC_LOG;

				public String getDOC_LOG () {
					return this.DOC_LOG;
				}
				
			    public BigDecimal DOC_SER;

				public BigDecimal getDOC_SER () {
					return this.DOC_SER;
				}
				
			    public BigDecimal DOC_NBR;

				public BigDecimal getDOC_NBR () {
					return this.DOC_NBR;
				}
				
			    public BigDecimal POA_REG_NBR;

				public BigDecimal getPOA_REG_NBR () {
					return this.POA_REG_NBR;
				}
				
			    public java.util.Date POA_DATE;

				public java.util.Date getPOA_DATE () {
					return this.POA_DATE;
				}
				
			    public String SCOPE;

				public String getSCOPE () {
					return this.SCOPE;
				}
				
			    public String errorCode;

				public String getErrorCode () {
					return this.errorCode;
				}
				
			    public String errorMessage;

				public String getErrorMessage () {
					return this.errorMessage;
				}
				


	@Override
	public int hashCode() {
		if (this.hashCodeDirty) {
			final int prime = PRIME;
			int result = DEFAULT_HASHCODE;
	
						result = prime * result + ((this.DOC_ORI == null) ? 0 : this.DOC_ORI.hashCode());
					
						result = prime * result + ((this.DOC_LOG == null) ? 0 : this.DOC_LOG.hashCode());
					
						result = prime * result + ((this.DOC_SER == null) ? 0 : this.DOC_SER.hashCode());
					
						result = prime * result + ((this.DOC_NBR == null) ? 0 : this.DOC_NBR.hashCode());
					
    		this.hashCode = result;
    		this.hashCodeDirty = false;
		}
		return this.hashCode;
	}

	@Override
	public boolean equals(Object obj) {
		if (this == obj) return true;
		if (obj == null) return false;
		if (getClass() != obj.getClass()) return false;
		final row6Struct other = (row6Struct) obj;
		
						if (this.DOC_ORI == null) {
							if (other.DOC_ORI != null)
								return false;
						
						} else if (!this.DOC_ORI.equals(other.DOC_ORI))
						
							return false;
					
						if (this.DOC_LOG == null) {
							if (other.DOC_LOG != null)
								return false;
						
						} else if (!this.DOC_LOG.equals(other.DOC_LOG))
						
							return false;
					
						if (this.DOC_SER == null) {
							if (other.DOC_SER != null)
								return false;
						
						} else if (!this.DOC_SER.equals(other.DOC_SER))
						
							return false;
					
						if (this.DOC_NBR == null) {
							if (other.DOC_NBR != null)
								return false;
						
						} else if (!this.DOC_NBR.equals(other.DOC_NBR))
						
							return false;
					

		return true;
    }

	public void copyDataTo(row6Struct other) {

		other.ROW_VERSION = this.ROW_VERSION;
	            other.DOC_ORI = this.DOC_ORI;
	            other.DOC_LOG = this.DOC_LOG;
	            other.DOC_SER = this.DOC_SER;
	            other.DOC_NBR = this.DOC_NBR;
	            other.POA_REG_NBR = this.POA_REG_NBR;
	            other.POA_DATE = this.POA_DATE;
	            other.SCOPE = this.SCOPE;
	            other.errorCode = this.errorCode;
	            other.errorMessage = this.errorMessage;
	            
	}

	public void copyKeysDataTo(row6Struct other) {

		other.DOC_ORI = this.DOC_ORI;
	            	other.DOC_LOG = this.DOC_LOG;
	            	other.DOC_SER = this.DOC_SER;
	            	other.DOC_NBR = this.DOC_NBR;
	            	
	}




	private String readString(ObjectInputStream dis) throws IOException{
		String strReturn = null;
		int length = 0;
        length = dis.readInt();
		if (length == -1) {
			strReturn = null;
		} else {
			if(length > commonByteArray_WIPO_PROJECTS_Gg_POA.length) {
				if(length < 1024 && commonByteArray_WIPO_PROJECTS_Gg_POA.length == 0) {
   					commonByteArray_WIPO_PROJECTS_Gg_POA = new byte[1024];
				} else {
   					commonByteArray_WIPO_PROJECTS_Gg_POA = new byte[2 * length];
   				}
			}
			dis.readFully(commonByteArray_WIPO_PROJECTS_Gg_POA, 0, length);
			strReturn = new String(commonByteArray_WIPO_PROJECTS_Gg_POA, 0, length, utf8Charset);
		}
		return strReturn;
	}

    private void writeString(String str, ObjectOutputStream dos) throws IOException{
		if(str == null) {
            dos.writeInt(-1);
		} else {
            byte[] byteArray = str.getBytes(utf8Charset);
	    	dos.writeInt(byteArray.length);
			dos.write(byteArray);
    	}
    }

	private java.util.Date readDate(ObjectInputStream dis) throws IOException{
		java.util.Date dateReturn = null;
        int length = 0;
        length = dis.readByte();
		if (length == -1) {
			dateReturn = null;
		} else {
	    	dateReturn = new Date(dis.readLong());
		}
		return dateReturn;
	}

    private void writeDate(java.util.Date date1, ObjectOutputStream dos) throws IOException{
		if(date1 == null) {
            dos.writeByte(-1);
		} else {
			dos.writeByte(0);
	    	dos.writeLong(date1.getTime());
    	}
    }

    public void readData(ObjectInputStream dis) {

		synchronized(commonByteArrayLock_WIPO_PROJECTS_Gg_POA) {

        	try {

        		int length = 0;
		
						this.ROW_VERSION = (BigDecimal) dis.readObject();
					
					this.DOC_ORI = readString(dis);
					
					this.DOC_LOG = readString(dis);
					
						this.DOC_SER = (BigDecimal) dis.readObject();
					
						this.DOC_NBR = (BigDecimal) dis.readObject();
					
						this.POA_REG_NBR = (BigDecimal) dis.readObject();
					
					this.POA_DATE = readDate(dis);
					
					this.SCOPE = readString(dis);
					
					this.errorCode = readString(dis);
					
					this.errorMessage = readString(dis);
					
        	} catch (IOException e) {
	            throw new RuntimeException(e);

		
			} catch(ClassNotFoundException eCNFE) {
				 throw new RuntimeException(eCNFE);
		

        }

		

      }


    }

    public void writeData(ObjectOutputStream dos) {
        try {

		
					// BigDecimal
				
       			    	dos.writeObject(this.ROW_VERSION);
					
					// String
				
						writeString(this.DOC_ORI,dos);
					
					// String
				
						writeString(this.DOC_LOG,dos);
					
					// BigDecimal
				
       			    	dos.writeObject(this.DOC_SER);
					
					// BigDecimal
				
       			    	dos.writeObject(this.DOC_NBR);
					
					// BigDecimal
				
       			    	dos.writeObject(this.POA_REG_NBR);
					
					// java.util.Date
				
						writeDate(this.POA_DATE,dos);
					
					// String
				
						writeString(this.SCOPE,dos);
					
					// String
				
						writeString(this.errorCode,dos);
					
					// String
				
						writeString(this.errorMessage,dos);
					
        	} catch (IOException e) {
	            throw new RuntimeException(e);
        }


    }


    public String toString() {

		StringBuilder sb = new StringBuilder();
		sb.append(super.toString());
		sb.append("[");
		sb.append("ROW_VERSION="+String.valueOf(ROW_VERSION));
		sb.append(",DOC_ORI="+DOC_ORI);
		sb.append(",DOC_LOG="+DOC_LOG);
		sb.append(",DOC_SER="+String.valueOf(DOC_SER));
		sb.append(",DOC_NBR="+String.valueOf(DOC_NBR));
		sb.append(",POA_REG_NBR="+String.valueOf(POA_REG_NBR));
		sb.append(",POA_DATE="+String.valueOf(POA_DATE));
		sb.append(",SCOPE="+SCOPE);
		sb.append(",errorCode="+errorCode);
		sb.append(",errorMessage="+errorMessage);
	    sb.append("]");

	    return sb.toString();
    }

    /**
     * Compare keys
     */
    public int compareTo(row6Struct other) {

		int returnValue = -1;
		
						returnValue = checkNullsAndCompare(this.DOC_ORI, other.DOC_ORI);
						if(returnValue != 0) {
							return returnValue;
						}

					
						returnValue = checkNullsAndCompare(this.DOC_LOG, other.DOC_LOG);
						if(returnValue != 0) {
							return returnValue;
						}

					
						returnValue = checkNullsAndCompare(this.DOC_SER, other.DOC_SER);
						if(returnValue != 0) {
							return returnValue;
						}

					
						returnValue = checkNullsAndCompare(this.DOC_NBR, other.DOC_NBR);
						if(returnValue != 0) {
							return returnValue;
						}

					
	    return returnValue;
    }


    private int checkNullsAndCompare(Object object1, Object object2) {
        int returnValue = 0;
		if (object1 instanceof Comparable && object2 instanceof Comparable) {
            returnValue = ((Comparable) object1).compareTo(object2);
        } else if (object1 != null && object2 != null) {
            returnValue = compareStrings(object1.toString(), object2.toString());
        } else if (object1 == null && object2 != null) {
            returnValue = 1;
        } else if (object1 != null && object2 == null) {
            returnValue = -1;
        } else {
            returnValue = 0;
        }

        return returnValue;
    }

    private int compareStrings(String string1, String string2) {
        return string1.compareTo(string2);
    }


}

public static class set_poaStruct implements routines.system.IPersistableRow<set_poaStruct> {
    final static byte[] commonByteArrayLock_WIPO_PROJECTS_Gg_POA = new byte[0];
    static byte[] commonByteArray_WIPO_PROJECTS_Gg_POA = new byte[0];
	protected static final int DEFAULT_HASHCODE = 1;
    protected static final int PRIME = 31;
    protected int hashCode = DEFAULT_HASHCODE;
    public boolean hashCodeDirty = true;

    public String loopKey;



	
			    public BigDecimal ROW_VERSION;

				public BigDecimal getROW_VERSION () {
					return this.ROW_VERSION;
				}
				
			    public String DOC_ORI;

				public String getDOC_ORI () {
					return this.DOC_ORI;
				}
				
			    public String DOC_LOG;

				public String getDOC_LOG () {
					return this.DOC_LOG;
				}
				
			    public BigDecimal DOC_SER;

				public BigDecimal getDOC_SER () {
					return this.DOC_SER;
				}
				
			    public BigDecimal DOC_NBR;

				public BigDecimal getDOC_NBR () {
					return this.DOC_NBR;
				}
				
			    public BigDecimal POA_REG_NBR;

				public BigDecimal getPOA_REG_NBR () {
					return this.POA_REG_NBR;
				}
				
			    public java.util.Date POA_DATE;

				public java.util.Date getPOA_DATE () {
					return this.POA_DATE;
				}
				
			    public String SCOPE;

				public String getSCOPE () {
					return this.SCOPE;
				}
				


	@Override
	public int hashCode() {
		if (this.hashCodeDirty) {
			final int prime = PRIME;
			int result = DEFAULT_HASHCODE;
	
						result = prime * result + ((this.DOC_ORI == null) ? 0 : this.DOC_ORI.hashCode());
					
						result = prime * result + ((this.DOC_LOG == null) ? 0 : this.DOC_LOG.hashCode());
					
						result = prime * result + ((this.DOC_SER == null) ? 0 : this.DOC_SER.hashCode());
					
						result = prime * result + ((this.DOC_NBR == null) ? 0 : this.DOC_NBR.hashCode());
					
    		this.hashCode = result;
    		this.hashCodeDirty = false;
		}
		return this.hashCode;
	}

	@Override
	public boolean equals(Object obj) {
		if (this == obj) return true;
		if (obj == null) return false;
		if (getClass() != obj.getClass()) return false;
		final set_poaStruct other = (set_poaStruct) obj;
		
						if (this.DOC_ORI == null) {
							if (other.DOC_ORI != null)
								return false;
						
						} else if (!this.DOC_ORI.equals(other.DOC_ORI))
						
							return false;
					
						if (this.DOC_LOG == null) {
							if (other.DOC_LOG != null)
								return false;
						
						} else if (!this.DOC_LOG.equals(other.DOC_LOG))
						
							return false;
					
						if (this.DOC_SER == null) {
							if (other.DOC_SER != null)
								return false;
						
						} else if (!this.DOC_SER.equals(other.DOC_SER))
						
							return false;
					
						if (this.DOC_NBR == null) {
							if (other.DOC_NBR != null)
								return false;
						
						} else if (!this.DOC_NBR.equals(other.DOC_NBR))
						
							return false;
					

		return true;
    }

	public void copyDataTo(set_poaStruct other) {

		other.ROW_VERSION = this.ROW_VERSION;
	            other.DOC_ORI = this.DOC_ORI;
	            other.DOC_LOG = this.DOC_LOG;
	            other.DOC_SER = this.DOC_SER;
	            other.DOC_NBR = this.DOC_NBR;
	            other.POA_REG_NBR = this.POA_REG_NBR;
	            other.POA_DATE = this.POA_DATE;
	            other.SCOPE = this.SCOPE;
	            
	}

	public void copyKeysDataTo(set_poaStruct other) {

		other.DOC_ORI = this.DOC_ORI;
	            	other.DOC_LOG = this.DOC_LOG;
	            	other.DOC_SER = this.DOC_SER;
	            	other.DOC_NBR = this.DOC_NBR;
	            	
	}




	private String readString(ObjectInputStream dis) throws IOException{
		String strReturn = null;
		int length = 0;
        length = dis.readInt();
		if (length == -1) {
			strReturn = null;
		} else {
			if(length > commonByteArray_WIPO_PROJECTS_Gg_POA.length) {
				if(length < 1024 && commonByteArray_WIPO_PROJECTS_Gg_POA.length == 0) {
   					commonByteArray_WIPO_PROJECTS_Gg_POA = new byte[1024];
				} else {
   					commonByteArray_WIPO_PROJECTS_Gg_POA = new byte[2 * length];
   				}
			}
			dis.readFully(commonByteArray_WIPO_PROJECTS_Gg_POA, 0, length);
			strReturn = new String(commonByteArray_WIPO_PROJECTS_Gg_POA, 0, length, utf8Charset);
		}
		return strReturn;
	}

    private void writeString(String str, ObjectOutputStream dos) throws IOException{
		if(str == null) {
            dos.writeInt(-1);
		} else {
            byte[] byteArray = str.getBytes(utf8Charset);
	    	dos.writeInt(byteArray.length);
			dos.write(byteArray);
    	}
    }

	private java.util.Date readDate(ObjectInputStream dis) throws IOException{
		java.util.Date dateReturn = null;
        int length = 0;
        length = dis.readByte();
		if (length == -1) {
			dateReturn = null;
		} else {
	    	dateReturn = new Date(dis.readLong());
		}
		return dateReturn;
	}

    private void writeDate(java.util.Date date1, ObjectOutputStream dos) throws IOException{
		if(date1 == null) {
            dos.writeByte(-1);
		} else {
			dos.writeByte(0);
	    	dos.writeLong(date1.getTime());
    	}
    }

    public void readData(ObjectInputStream dis) {

		synchronized(commonByteArrayLock_WIPO_PROJECTS_Gg_POA) {

        	try {

        		int length = 0;
		
						this.ROW_VERSION = (BigDecimal) dis.readObject();
					
					this.DOC_ORI = readString(dis);
					
					this.DOC_LOG = readString(dis);
					
						this.DOC_SER = (BigDecimal) dis.readObject();
					
						this.DOC_NBR = (BigDecimal) dis.readObject();
					
						this.POA_REG_NBR = (BigDecimal) dis.readObject();
					
					this.POA_DATE = readDate(dis);
					
					this.SCOPE = readString(dis);
					
        	} catch (IOException e) {
	            throw new RuntimeException(e);

		
			} catch(ClassNotFoundException eCNFE) {
				 throw new RuntimeException(eCNFE);
		

        }

		

      }


    }

    public void writeData(ObjectOutputStream dos) {
        try {

		
					// BigDecimal
				
       			    	dos.writeObject(this.ROW_VERSION);
					
					// String
				
						writeString(this.DOC_ORI,dos);
					
					// String
				
						writeString(this.DOC_LOG,dos);
					
					// BigDecimal
				
       			    	dos.writeObject(this.DOC_SER);
					
					// BigDecimal
				
       			    	dos.writeObject(this.DOC_NBR);
					
					// BigDecimal
				
       			    	dos.writeObject(this.POA_REG_NBR);
					
					// java.util.Date
				
						writeDate(this.POA_DATE,dos);
					
					// String
				
						writeString(this.SCOPE,dos);
					
        	} catch (IOException e) {
	            throw new RuntimeException(e);
        }


    }


    public String toString() {

		StringBuilder sb = new StringBuilder();
		sb.append(super.toString());
		sb.append("[");
		sb.append("ROW_VERSION="+String.valueOf(ROW_VERSION));
		sb.append(",DOC_ORI="+DOC_ORI);
		sb.append(",DOC_LOG="+DOC_LOG);
		sb.append(",DOC_SER="+String.valueOf(DOC_SER));
		sb.append(",DOC_NBR="+String.valueOf(DOC_NBR));
		sb.append(",POA_REG_NBR="+String.valueOf(POA_REG_NBR));
		sb.append(",POA_DATE="+String.valueOf(POA_DATE));
		sb.append(",SCOPE="+SCOPE);
	    sb.append("]");

	    return sb.toString();
    }

    /**
     * Compare keys
     */
    public int compareTo(set_poaStruct other) {

		int returnValue = -1;
		
						returnValue = checkNullsAndCompare(this.DOC_ORI, other.DOC_ORI);
						if(returnValue != 0) {
							return returnValue;
						}

					
						returnValue = checkNullsAndCompare(this.DOC_LOG, other.DOC_LOG);
						if(returnValue != 0) {
							return returnValue;
						}

					
						returnValue = checkNullsAndCompare(this.DOC_SER, other.DOC_SER);
						if(returnValue != 0) {
							return returnValue;
						}

					
						returnValue = checkNullsAndCompare(this.DOC_NBR, other.DOC_NBR);
						if(returnValue != 0) {
							return returnValue;
						}

					
	    return returnValue;
    }


    private int checkNullsAndCompare(Object object1, Object object2) {
        int returnValue = 0;
		if (object1 instanceof Comparable && object2 instanceof Comparable) {
            returnValue = ((Comparable) object1).compareTo(object2);
        } else if (object1 != null && object2 != null) {
            returnValue = compareStrings(object1.toString(), object2.toString());
        } else if (object1 == null && object2 != null) {
            returnValue = 1;
        } else if (object1 != null && object2 == null) {
            returnValue = -1;
        } else {
            returnValue = 0;
        }

        return returnValue;
    }

    private int compareStrings(String string1, String string2) {
        return string1.compareTo(string2);
    }


}

public static class row1Struct implements routines.system.IPersistableRow<row1Struct> {
    final static byte[] commonByteArrayLock_WIPO_PROJECTS_Gg_POA = new byte[0];
    static byte[] commonByteArray_WIPO_PROJECTS_Gg_POA = new byte[0];

	
			    public String USERDOC_SEQ;

				public String getUSERDOC_SEQ () {
					return this.USERDOC_SEQ;
				}
				
			    public BigDecimal USERDOC_SERIES;

				public BigDecimal getUSERDOC_SERIES () {
					return this.USERDOC_SERIES;
				}
				
			    public BigDecimal USERDOC_NBR;

				public BigDecimal getUSERDOC_NBR () {
					return this.USERDOC_NBR;
				}
				
			    public String DOC_ORI;

				public String getDOC_ORI () {
					return this.DOC_ORI;
				}
				
			    public BigDecimal DOC_SERIES;

				public BigDecimal getDOC_SERIES () {
					return this.DOC_SERIES;
				}
				
			    public BigDecimal DOC_NBR;

				public BigDecimal getDOC_NBR () {
					return this.DOC_NBR;
				}
				
			    public BigDecimal IND_IMPORT;

				public BigDecimal getIND_IMPORT () {
					return this.IND_IMPORT;
				}
				
			    public String USERDOC_TYPE;

				public String getUSERDOC_TYPE () {
					return this.USERDOC_TYPE;
				}
				
			    public BigDecimal LAW_CODE;

				public BigDecimal getLAW_CODE () {
					return this.LAW_CODE;
				}
				
			    public java.util.Date FILING_DATE;

				public java.util.Date getFILING_DATE () {
					return this.FILING_DATE;
				}
				
			    public java.util.Date RECEPTION_DATE;

				public java.util.Date getRECEPTION_DATE () {
					return this.RECEPTION_DATE;
				}
				
			    public String NOTES;

				public String getNOTES () {
					return this.NOTES;
				}
				
			    public String APPLICANT_NOTES;

				public String getAPPLICANT_NOTES () {
					return this.APPLICANT_NOTES;
				}
				
			    public String PERSON_NAME;

				public String getPERSON_NAME () {
					return this.PERSON_NAME;
				}
				
			    public String PERSON_NAME_LANG2;

				public String getPERSON_NAME_LANG2 () {
					return this.PERSON_NAME_LANG2;
				}
				
			    public String NATIONALITY_COUNTRY_CODE;

				public String getNATIONALITY_COUNTRY_CODE () {
					return this.NATIONALITY_COUNTRY_CODE;
				}
				
			    public BigDecimal IND_COMPANY;

				public BigDecimal getIND_COMPANY () {
					return this.IND_COMPANY;
				}
				
			    public String LEGAL_NATURE;

				public String getLEGAL_NATURE () {
					return this.LEGAL_NATURE;
				}
				
			    public String LEGAL_NATURE_LANG2;

				public String getLEGAL_NATURE_LANG2 () {
					return this.LEGAL_NATURE_LANG2;
				}
				
			    public String LEGAL_ID_TYPE;

				public String getLEGAL_ID_TYPE () {
					return this.LEGAL_ID_TYPE;
				}
				
			    public BigDecimal LEGAL_ID_NBR;

				public BigDecimal getLEGAL_ID_NBR () {
					return this.LEGAL_ID_NBR;
				}
				
			    public String INDIVIDUAL_ID_TYPE;

				public String getINDIVIDUAL_ID_TYPE () {
					return this.INDIVIDUAL_ID_TYPE;
				}
				
			    public BigDecimal INDIVIDUAL_ID_NBR;

				public BigDecimal getINDIVIDUAL_ID_NBR () {
					return this.INDIVIDUAL_ID_NBR;
				}
				
			    public String RESIDENCE_COUNTRY_CODE;

				public String getRESIDENCE_COUNTRY_CODE () {
					return this.RESIDENCE_COUNTRY_CODE;
				}
				
			    public String STATE_NAME;

				public String getSTATE_NAME () {
					return this.STATE_NAME;
				}
				
			    public String STATE_CODE;

				public String getSTATE_CODE () {
					return this.STATE_CODE;
				}
				
			    public String CITY_NAME;

				public String getCITY_NAME () {
					return this.CITY_NAME;
				}
				
			    public String CITY_CODE;

				public String getCITY_CODE () {
					return this.CITY_CODE;
				}
				
			    public String ADDRESS_ZONE;

				public String getADDRESS_ZONE () {
					return this.ADDRESS_ZONE;
				}
				
			    public String ADDRESS_STREET;

				public String getADDRESS_STREET () {
					return this.ADDRESS_STREET;
				}
				
			    public String ADDRESS_STREET_LANG2;

				public String getADDRESS_STREET_LANG2 () {
					return this.ADDRESS_STREET_LANG2;
				}
				
			    public String ZIP_CODE;

				public String getZIP_CODE () {
					return this.ZIP_CODE;
				}
				
			    public String EMAIL;

				public String getEMAIL () {
					return this.EMAIL;
				}
				
			    public String TELEPHONE;

				public String getTELEPHONE () {
					return this.TELEPHONE;
				}
				
			    public String PERSON_GROUP_CODE;

				public String getPERSON_GROUP_CODE () {
					return this.PERSON_GROUP_CODE;
				}
				
			    public BigDecimal CAPTURE_USER_ID;

				public BigDecimal getCAPTURE_USER_ID () {
					return this.CAPTURE_USER_ID;
				}
				
			    public java.util.Date CAPTURE_DATE;

				public java.util.Date getCAPTURE_DATE () {
					return this.CAPTURE_DATE;
				}
				



	private String readString(ObjectInputStream dis) throws IOException{
		String strReturn = null;
		int length = 0;
        length = dis.readInt();
		if (length == -1) {
			strReturn = null;
		} else {
			if(length > commonByteArray_WIPO_PROJECTS_Gg_POA.length) {
				if(length < 1024 && commonByteArray_WIPO_PROJECTS_Gg_POA.length == 0) {
   					commonByteArray_WIPO_PROJECTS_Gg_POA = new byte[1024];
				} else {
   					commonByteArray_WIPO_PROJECTS_Gg_POA = new byte[2 * length];
   				}
			}
			dis.readFully(commonByteArray_WIPO_PROJECTS_Gg_POA, 0, length);
			strReturn = new String(commonByteArray_WIPO_PROJECTS_Gg_POA, 0, length, utf8Charset);
		}
		return strReturn;
	}

    private void writeString(String str, ObjectOutputStream dos) throws IOException{
		if(str == null) {
            dos.writeInt(-1);
		} else {
            byte[] byteArray = str.getBytes(utf8Charset);
	    	dos.writeInt(byteArray.length);
			dos.write(byteArray);
    	}
    }

	private java.util.Date readDate(ObjectInputStream dis) throws IOException{
		java.util.Date dateReturn = null;
        int length = 0;
        length = dis.readByte();
		if (length == -1) {
			dateReturn = null;
		} else {
	    	dateReturn = new Date(dis.readLong());
		}
		return dateReturn;
	}

    private void writeDate(java.util.Date date1, ObjectOutputStream dos) throws IOException{
		if(date1 == null) {
            dos.writeByte(-1);
		} else {
			dos.writeByte(0);
	    	dos.writeLong(date1.getTime());
    	}
    }

    public void readData(ObjectInputStream dis) {

		synchronized(commonByteArrayLock_WIPO_PROJECTS_Gg_POA) {

        	try {

        		int length = 0;
		
					this.USERDOC_SEQ = readString(dis);
					
						this.USERDOC_SERIES = (BigDecimal) dis.readObject();
					
						this.USERDOC_NBR = (BigDecimal) dis.readObject();
					
					this.DOC_ORI = readString(dis);
					
						this.DOC_SERIES = (BigDecimal) dis.readObject();
					
						this.DOC_NBR = (BigDecimal) dis.readObject();
					
						this.IND_IMPORT = (BigDecimal) dis.readObject();
					
					this.USERDOC_TYPE = readString(dis);
					
						this.LAW_CODE = (BigDecimal) dis.readObject();
					
					this.FILING_DATE = readDate(dis);
					
					this.RECEPTION_DATE = readDate(dis);
					
					this.NOTES = readString(dis);
					
					this.APPLICANT_NOTES = readString(dis);
					
					this.PERSON_NAME = readString(dis);
					
					this.PERSON_NAME_LANG2 = readString(dis);
					
					this.NATIONALITY_COUNTRY_CODE = readString(dis);
					
						this.IND_COMPANY = (BigDecimal) dis.readObject();
					
					this.LEGAL_NATURE = readString(dis);
					
					this.LEGAL_NATURE_LANG2 = readString(dis);
					
					this.LEGAL_ID_TYPE = readString(dis);
					
						this.LEGAL_ID_NBR = (BigDecimal) dis.readObject();
					
					this.INDIVIDUAL_ID_TYPE = readString(dis);
					
						this.INDIVIDUAL_ID_NBR = (BigDecimal) dis.readObject();
					
					this.RESIDENCE_COUNTRY_CODE = readString(dis);
					
					this.STATE_NAME = readString(dis);
					
					this.STATE_CODE = readString(dis);
					
					this.CITY_NAME = readString(dis);
					
					this.CITY_CODE = readString(dis);
					
					this.ADDRESS_ZONE = readString(dis);
					
					this.ADDRESS_STREET = readString(dis);
					
					this.ADDRESS_STREET_LANG2 = readString(dis);
					
					this.ZIP_CODE = readString(dis);
					
					this.EMAIL = readString(dis);
					
					this.TELEPHONE = readString(dis);
					
					this.PERSON_GROUP_CODE = readString(dis);
					
						this.CAPTURE_USER_ID = (BigDecimal) dis.readObject();
					
					this.CAPTURE_DATE = readDate(dis);
					
        	} catch (IOException e) {
	            throw new RuntimeException(e);

		
			} catch(ClassNotFoundException eCNFE) {
				 throw new RuntimeException(eCNFE);
		

        }

		

      }


    }

    public void writeData(ObjectOutputStream dos) {
        try {

		
					// String
				
						writeString(this.USERDOC_SEQ,dos);
					
					// BigDecimal
				
       			    	dos.writeObject(this.USERDOC_SERIES);
					
					// BigDecimal
				
       			    	dos.writeObject(this.USERDOC_NBR);
					
					// String
				
						writeString(this.DOC_ORI,dos);
					
					// BigDecimal
				
       			    	dos.writeObject(this.DOC_SERIES);
					
					// BigDecimal
				
       			    	dos.writeObject(this.DOC_NBR);
					
					// BigDecimal
				
       			    	dos.writeObject(this.IND_IMPORT);
					
					// String
				
						writeString(this.USERDOC_TYPE,dos);
					
					// BigDecimal
				
       			    	dos.writeObject(this.LAW_CODE);
					
					// java.util.Date
				
						writeDate(this.FILING_DATE,dos);
					
					// java.util.Date
				
						writeDate(this.RECEPTION_DATE,dos);
					
					// String
				
						writeString(this.NOTES,dos);
					
					// String
				
						writeString(this.APPLICANT_NOTES,dos);
					
					// String
				
						writeString(this.PERSON_NAME,dos);
					
					// String
				
						writeString(this.PERSON_NAME_LANG2,dos);
					
					// String
				
						writeString(this.NATIONALITY_COUNTRY_CODE,dos);
					
					// BigDecimal
				
       			    	dos.writeObject(this.IND_COMPANY);
					
					// String
				
						writeString(this.LEGAL_NATURE,dos);
					
					// String
				
						writeString(this.LEGAL_NATURE_LANG2,dos);
					
					// String
				
						writeString(this.LEGAL_ID_TYPE,dos);
					
					// BigDecimal
				
       			    	dos.writeObject(this.LEGAL_ID_NBR);
					
					// String
				
						writeString(this.INDIVIDUAL_ID_TYPE,dos);
					
					// BigDecimal
				
       			    	dos.writeObject(this.INDIVIDUAL_ID_NBR);
					
					// String
				
						writeString(this.RESIDENCE_COUNTRY_CODE,dos);
					
					// String
				
						writeString(this.STATE_NAME,dos);
					
					// String
				
						writeString(this.STATE_CODE,dos);
					
					// String
				
						writeString(this.CITY_NAME,dos);
					
					// String
				
						writeString(this.CITY_CODE,dos);
					
					// String
				
						writeString(this.ADDRESS_ZONE,dos);
					
					// String
				
						writeString(this.ADDRESS_STREET,dos);
					
					// String
				
						writeString(this.ADDRESS_STREET_LANG2,dos);
					
					// String
				
						writeString(this.ZIP_CODE,dos);
					
					// String
				
						writeString(this.EMAIL,dos);
					
					// String
				
						writeString(this.TELEPHONE,dos);
					
					// String
				
						writeString(this.PERSON_GROUP_CODE,dos);
					
					// BigDecimal
				
       			    	dos.writeObject(this.CAPTURE_USER_ID);
					
					// java.util.Date
				
						writeDate(this.CAPTURE_DATE,dos);
					
        	} catch (IOException e) {
	            throw new RuntimeException(e);
        }


    }


    public String toString() {

		StringBuilder sb = new StringBuilder();
		sb.append(super.toString());
		sb.append("[");
		sb.append("USERDOC_SEQ="+USERDOC_SEQ);
		sb.append(",USERDOC_SERIES="+String.valueOf(USERDOC_SERIES));
		sb.append(",USERDOC_NBR="+String.valueOf(USERDOC_NBR));
		sb.append(",DOC_ORI="+DOC_ORI);
		sb.append(",DOC_SERIES="+String.valueOf(DOC_SERIES));
		sb.append(",DOC_NBR="+String.valueOf(DOC_NBR));
		sb.append(",IND_IMPORT="+String.valueOf(IND_IMPORT));
		sb.append(",USERDOC_TYPE="+USERDOC_TYPE);
		sb.append(",LAW_CODE="+String.valueOf(LAW_CODE));
		sb.append(",FILING_DATE="+String.valueOf(FILING_DATE));
		sb.append(",RECEPTION_DATE="+String.valueOf(RECEPTION_DATE));
		sb.append(",NOTES="+NOTES);
		sb.append(",APPLICANT_NOTES="+APPLICANT_NOTES);
		sb.append(",PERSON_NAME="+PERSON_NAME);
		sb.append(",PERSON_NAME_LANG2="+PERSON_NAME_LANG2);
		sb.append(",NATIONALITY_COUNTRY_CODE="+NATIONALITY_COUNTRY_CODE);
		sb.append(",IND_COMPANY="+String.valueOf(IND_COMPANY));
		sb.append(",LEGAL_NATURE="+LEGAL_NATURE);
		sb.append(",LEGAL_NATURE_LANG2="+LEGAL_NATURE_LANG2);
		sb.append(",LEGAL_ID_TYPE="+LEGAL_ID_TYPE);
		sb.append(",LEGAL_ID_NBR="+String.valueOf(LEGAL_ID_NBR));
		sb.append(",INDIVIDUAL_ID_TYPE="+INDIVIDUAL_ID_TYPE);
		sb.append(",INDIVIDUAL_ID_NBR="+String.valueOf(INDIVIDUAL_ID_NBR));
		sb.append(",RESIDENCE_COUNTRY_CODE="+RESIDENCE_COUNTRY_CODE);
		sb.append(",STATE_NAME="+STATE_NAME);
		sb.append(",STATE_CODE="+STATE_CODE);
		sb.append(",CITY_NAME="+CITY_NAME);
		sb.append(",CITY_CODE="+CITY_CODE);
		sb.append(",ADDRESS_ZONE="+ADDRESS_ZONE);
		sb.append(",ADDRESS_STREET="+ADDRESS_STREET);
		sb.append(",ADDRESS_STREET_LANG2="+ADDRESS_STREET_LANG2);
		sb.append(",ZIP_CODE="+ZIP_CODE);
		sb.append(",EMAIL="+EMAIL);
		sb.append(",TELEPHONE="+TELEPHONE);
		sb.append(",PERSON_GROUP_CODE="+PERSON_GROUP_CODE);
		sb.append(",CAPTURE_USER_ID="+String.valueOf(CAPTURE_USER_ID));
		sb.append(",CAPTURE_DATE="+String.valueOf(CAPTURE_DATE));
	    sb.append("]");

	    return sb.toString();
    }

    /**
     * Compare keys
     */
    public int compareTo(row1Struct other) {

		int returnValue = -1;
		
	    return returnValue;
    }


    private int checkNullsAndCompare(Object object1, Object object2) {
        int returnValue = 0;
		if (object1 instanceof Comparable && object2 instanceof Comparable) {
            returnValue = ((Comparable) object1).compareTo(object2);
        } else if (object1 != null && object2 != null) {
            returnValue = compareStrings(object1.toString(), object2.toString());
        } else if (object1 == null && object2 != null) {
            returnValue = 1;
        } else if (object1 != null && object2 == null) {
            returnValue = -1;
        } else {
            returnValue = 0;
        }

        return returnValue;
    }

    private int compareStrings(String string1, String string2) {
        return string1.compareTo(string2);
    }


}
public void tDBInput_1Process(final java.util.Map<String, Object> globalMap) throws TalendException {
	globalMap.put("tDBInput_1_SUBPROCESS_STATE", 0);

 final boolean execStat = this.execStat;
	
		String iterateId = "";
	
	
	String currentComponent = "";
	java.util.Map<String, Object> resourceMap = new java.util.HashMap<String, Object>();

	try {
			// TDI-39566 avoid throwing an useless Exception
			boolean resumeIt = true;
			if (globalResumeTicket == false && resumeEntryMethodName != null) {
				String currentMethodName = new java.lang.Exception().getStackTrace()[0].getMethodName();
				resumeIt = resumeEntryMethodName.equals(currentMethodName);
			}
			if (resumeIt || globalResumeTicket) { //start the resume
				globalResumeTicket = true;



		row1Struct row1 = new row1Struct();
set_poaStruct set_poa = new set_poaStruct();
row6Struct row6 = new row6Struct();






	
	/**
	 * [tLogRow_2 begin ] start
	 */

	

	
		
		ok_Hash.put("tLogRow_2", false);
		start_Hash.put("tLogRow_2", System.currentTimeMillis());
		
	
	currentComponent="tLogRow_2";

	
					if(execStat) {
						runStat.updateStatOnConnection(resourceMap,iterateId,0,0,"row6");
					}
				
		int tos_count_tLogRow_2 = 0;
		

	///////////////////////
	
		final String OUTPUT_FIELD_SEPARATOR_tLogRow_2 = "|";
		java.io.PrintStream consoleOut_tLogRow_2 = null;	

 		StringBuilder strBuffer_tLogRow_2 = null;
		int nb_line_tLogRow_2 = 0;
///////////////////////    			



 



/**
 * [tLogRow_2 begin ] stop
 */



	
	/**
	 * [tDBOutput_1 begin ] start
	 */

	

	
		
		ok_Hash.put("tDBOutput_1", false);
		start_Hash.put("tDBOutput_1", System.currentTimeMillis());
		
	
	currentComponent="tDBOutput_1";

	
					if(execStat) {
						runStat.updateStatOnConnection(resourceMap,iterateId,0,0,"set_poa");
					}
				
		int tos_count_tDBOutput_1 = 0;
		



int nb_line_tDBOutput_1 = 0;
int nb_line_update_tDBOutput_1 = 0;
int nb_line_inserted_tDBOutput_1 = 0;
int nb_line_deleted_tDBOutput_1 = 0;
int nb_line_rejected_tDBOutput_1 = 0;

int deletedCount_tDBOutput_1=0;
int updatedCount_tDBOutput_1=0;
int insertedCount_tDBOutput_1=0;
int rejectedCount_tDBOutput_1=0;
String dbschema_tDBOutput_1 = null;
String tableName_tDBOutput_1 = null;
boolean whetherReject_tDBOutput_1 = false;

java.util.Calendar calendar_tDBOutput_1 = java.util.Calendar.getInstance();
long year1_tDBOutput_1 = TalendDate.parseDate("yyyy-MM-dd","0001-01-01").getTime();
long year2_tDBOutput_1 = TalendDate.parseDate("yyyy-MM-dd","1753-01-01").getTime();
long year10000_tDBOutput_1 = TalendDate.parseDate("yyyy-MM-dd HH:mm:ss","9999-12-31 24:00:00").getTime();
long date_tDBOutput_1;

java.util.Calendar calendar_datetimeoffset_tDBOutput_1 = java.util.Calendar.getInstance(java.util.TimeZone.getTimeZone("UTC"));

	
java.sql.Connection conn_tDBOutput_1 = null;
String dbUser_tDBOutput_1 = null;
    dbschema_tDBOutput_1 = "ADMIN";
    String driverClass_tDBOutput_1 = "net.sourceforge.jtds.jdbc.Driver";
	
    java.lang.Class.forName(driverClass_tDBOutput_1);
    String port_tDBOutput_1 = "1433";
    String dbname_tDBOutput_1 = "MARCAS_PY" ;
    String url_tDBOutput_1 = "jdbc:jtds:sqlserver://" + "localhost" ; 
    if (!"".equals(port_tDBOutput_1)) {
    	url_tDBOutput_1 += ":" + "1433";
    }
    if (!"".equals(dbname_tDBOutput_1)) {
				url_tDBOutput_1 += "//" + "MARCAS_PY"; 
	
    }
    url_tDBOutput_1 += ";appName=" + projectName + ";" + "";
    dbUser_tDBOutput_1 = "ADMIN";

 
	final String decryptedPassword_tDBOutput_1 = routines.system.PasswordEncryptUtil.decryptPassword("enc:routine.encryption.key.v1:s6ZBe2MyEukeMDSJSFkRhcMJ1MeiPTNEkXG6xgg4pJRQ");

    String dbPwd_tDBOutput_1 = decryptedPassword_tDBOutput_1;	
    conn_tDBOutput_1 = java.sql.DriverManager.getConnection(url_tDBOutput_1,dbUser_tDBOutput_1,dbPwd_tDBOutput_1);
	
		resourceMap.put("conn_tDBOutput_1", conn_tDBOutput_1);
	
        conn_tDBOutput_1.setAutoCommit(false);
        int commitEvery_tDBOutput_1 = 10000;
        int commitCounter_tDBOutput_1 = 0;


if(dbschema_tDBOutput_1 == null || dbschema_tDBOutput_1.trim().length() == 0) {
    tableName_tDBOutput_1 = "IP_POA";
} else {
    tableName_tDBOutput_1 = dbschema_tDBOutput_1 + "].[" + "IP_POA";
}
	int count_tDBOutput_1=0;

            try (java.sql.Statement stmtClear_tDBOutput_1 = conn_tDBOutput_1.createStatement()) {
                stmtClear_tDBOutput_1.executeUpdate("DELETE FROM [" + tableName_tDBOutput_1 + "]");
            }
        String insert_tDBOutput_1 = "INSERT INTO [" + tableName_tDBOutput_1 + "] ([ROW_VERSION],[DOC_ORI],[DOC_LOG],[DOC_SER],[DOC_NBR],[POA_REG_NBR],[POA_DATE],[SCOPE]) VALUES (?,?,?,?,?,?,?,?)";
        java.sql.PreparedStatement pstmt_tDBOutput_1 = conn_tDBOutput_1.prepareStatement(insert_tDBOutput_1);
        resourceMap.put("pstmt_tDBOutput_1", pstmt_tDBOutput_1);


 



/**
 * [tDBOutput_1 begin ] stop
 */



	
	/**
	 * [tMap_1 begin ] start
	 */

	

	
		
		ok_Hash.put("tMap_1", false);
		start_Hash.put("tMap_1", System.currentTimeMillis());
		
	
	currentComponent="tMap_1";

	
					if(execStat) {
						runStat.updateStatOnConnection(resourceMap,iterateId,0,0,"row1");
					}
				
		int tos_count_tMap_1 = 0;
		




// ###############################
// # Lookup's keys initialization
// ###############################        

// ###############################
// # Vars initialization
class  Var__tMap_1__Struct  {
}
Var__tMap_1__Struct Var__tMap_1 = new Var__tMap_1__Struct();
// ###############################

// ###############################
// # Outputs initialization
set_poaStruct set_poa_tmp = new set_poaStruct();
// ###############################

        
        



        









 



/**
 * [tMap_1 begin ] stop
 */



	
	/**
	 * [tDBInput_1 begin ] start
	 */

	

	
		
		ok_Hash.put("tDBInput_1", false);
		start_Hash.put("tDBInput_1", System.currentTimeMillis());
		
	
	currentComponent="tDBInput_1";

	
		int tos_count_tDBInput_1 = 0;
		
	
    
	
			org.talend.designer.components.util.mssql.MSSqlGenerateTimestampUtil mssqlGTU_tDBInput_1 = org.talend.designer.components.util.mssql.MSSqlUtilFactory.getMSSqlGenerateTimestampUtil();
			
			java.util.List<String> talendToDBList_tDBInput_1 = new java.util.ArrayList();
			String[] talendToDBArray_tDBInput_1  = new String[]{"FLOAT","NUMERIC","NUMERIC IDENTITY","DECIMAL","DECIMAL IDENTITY","REAL"}; 
			java.util.Collections.addAll(talendToDBList_tDBInput_1, talendToDBArray_tDBInput_1); 
		    int nb_line_tDBInput_1 = 0;
		    java.sql.Connection conn_tDBInput_1 = null;
				String driverClass_tDBInput_1 = "net.sourceforge.jtds.jdbc.Driver";
			    java.lang.Class jdbcclazz_tDBInput_1 = java.lang.Class.forName(driverClass_tDBInput_1);
				String dbUser_tDBInput_1 = "sa";
				
				 
	final String decryptedPassword_tDBInput_1 = routines.system.PasswordEncryptUtil.decryptPassword("enc:routine.encryption.key.v1:oo/uHNHdt5YGh/gJjeRPKvXMFdLqYf1QslfrAJ7ISMNwnlcZ");
				
				String dbPwd_tDBInput_1 = decryptedPassword_tDBInput_1;
				
		    String port_tDBInput_1 = "1433";
		    String dbname_tDBInput_1 = "PY_INTERMED" ;
			String url_tDBInput_1 = "jdbc:jtds:sqlserver://" + "localhost" ;
		    if (!"".equals(port_tDBInput_1)) {
		    	url_tDBInput_1 += ":" + "1433";
		    }
		    if (!"".equals(dbname_tDBInput_1)) {
				url_tDBInput_1 += "//" + "PY_INTERMED"; 
		    }
		    url_tDBInput_1 += ";appName=" + projectName + ";" + "";
		    String dbschema_tDBInput_1 = "dbo";
				
				conn_tDBInput_1 = java.sql.DriverManager.getConnection(url_tDBInput_1,dbUser_tDBInput_1,dbPwd_tDBInput_1);
		        
		    
			java.sql.Statement stmt_tDBInput_1 = conn_tDBInput_1.createStatement();

		    String dbquery_tDBInput_1 = "SELECT dbo.VW_IMPORT_USERDOC.USERDOC_SEQ,\n		dbo.VW_IMPORT_USERDOC.USERDOC_SERIES,\n		dbo.VW_IMPORT_USERDOC.USERDOC_NBR,\n"
+"		dbo.VW_IMPORT_USERDOC.DOC_ORI,\n		dbo.VW_IMPORT_USERDOC.DOC_SERIES,\n		dbo.VW_IMPORT_USERDOC.DOC_NBR,\n		dbo.VW_IMPORT_US"
+"ERDOC.IND_IMPORT,\n		dbo.VW_IMPORT_USERDOC.USERDOC_TYPE,\n		dbo.VW_IMPORT_USERDOC.LAW_CODE,\n		dbo.VW_IMPORT_USERDOC.FILING"
+"_DATE,\n		dbo.VW_IMPORT_USERDOC.RECEPTION_DATE,\n		dbo.VW_IMPORT_USERDOC.NOTES,\n		dbo.VW_IMPORT_USERDOC.APPLICANT_NOTES,\n	"
+"	dbo.VW_IMPORT_USERDOC.PERSON_NAME,\n		dbo.VW_IMPORT_USERDOC.PERSON_NAME_LANG2,\n		dbo.VW_IMPORT_USERDOC.NATIONALITY_COUNT"
+"RY_CODE,\n		dbo.VW_IMPORT_USERDOC.IND_COMPANY,\n		dbo.VW_IMPORT_USERDOC.LEGAL_NATURE,\n		dbo.VW_IMPORT_USERDOC.LEGAL_NATURE"
+"_LANG2,\n		dbo.VW_IMPORT_USERDOC.LEGAL_ID_TYPE,\n		dbo.VW_IMPORT_USERDOC.LEGAL_ID_NBR,\n		dbo.VW_IMPORT_USERDOC.INDIVIDUAL_"
+"ID_TYPE,\n		dbo.VW_IMPORT_USERDOC.INDIVIDUAL_ID_NBR,\n		dbo.VW_IMPORT_USERDOC.RESIDENCE_COUNTRY_CODE,\n		dbo.VW_IMPORT_USER"
+"DOC.STATE_NAME,\n		dbo.VW_IMPORT_USERDOC.STATE_CODE,\n		dbo.VW_IMPORT_USERDOC.CITY_NAME,\n		dbo.VW_IMPORT_USERDOC.CITY_CODE"
+",\n		dbo.VW_IMPORT_USERDOC.ADDRESS_ZONE,\n		dbo.VW_IMPORT_USERDOC.ADDRESS_STREET,\n		dbo.VW_IMPORT_USERDOC.ADDRESS_STREET_L"
+"ANG2,\n		dbo.VW_IMPORT_USERDOC.ZIP_CODE,\n		dbo.VW_IMPORT_USERDOC.EMAIL,\n		dbo.VW_IMPORT_USERDOC.TELEPHONE,\n		dbo.VW_IMPOR"
+"T_USERDOC.PERSON_GROUP_CODE,\n		dbo.VW_IMPORT_USERDOC.CAPTURE_USER_ID,\n		dbo.VW_IMPORT_USERDOC.CAPTURE_DATE\nFROM	dbo.VW_I"
+"MPORT_USERDOC where 		dbo.VW_IMPORT_USERDOC.USERDOC_TYPE='POA'";
		    

            	globalMap.put("tDBInput_1_QUERY",dbquery_tDBInput_1);
		    java.sql.ResultSet rs_tDBInput_1 = null;

		    try {
		    	rs_tDBInput_1 = stmt_tDBInput_1.executeQuery(dbquery_tDBInput_1);
		    	java.sql.ResultSetMetaData rsmd_tDBInput_1 = rs_tDBInput_1.getMetaData();
		    	int colQtyInRs_tDBInput_1 = rsmd_tDBInput_1.getColumnCount();

		    String tmpContent_tDBInput_1 = null;
		    
		    
		    while (rs_tDBInput_1.next()) {
		        nb_line_tDBInput_1++;
		        
							if(colQtyInRs_tDBInput_1 < 1) {
								row1.USERDOC_SEQ = null;
							} else {
	                         		
           		tmpContent_tDBInput_1 = rs_tDBInput_1.getString(1);
            if(tmpContent_tDBInput_1 != null) {
            	if (talendToDBList_tDBInput_1 .contains(rsmd_tDBInput_1.getColumnTypeName(1).toUpperCase(java.util.Locale.ENGLISH))) {
            		row1.USERDOC_SEQ = FormatterUtils.formatUnwithE(tmpContent_tDBInput_1);
            	} else {
                	row1.USERDOC_SEQ = tmpContent_tDBInput_1;
                }
            } else {
                row1.USERDOC_SEQ = null;
            }
		                    }
							if(colQtyInRs_tDBInput_1 < 2) {
								row1.USERDOC_SERIES = null;
							} else {
		                          
            row1.USERDOC_SERIES = rs_tDBInput_1.getBigDecimal(2);
            if(rs_tDBInput_1.wasNull()){
                    throw new RuntimeException("Null value in non-Nullable column");
            }
		                    }
							if(colQtyInRs_tDBInput_1 < 3) {
								row1.USERDOC_NBR = null;
							} else {
		                          
            row1.USERDOC_NBR = rs_tDBInput_1.getBigDecimal(3);
            if(rs_tDBInput_1.wasNull()){
                    throw new RuntimeException("Null value in non-Nullable column");
            }
		                    }
							if(colQtyInRs_tDBInput_1 < 4) {
								row1.DOC_ORI = null;
							} else {
	                         		
           		tmpContent_tDBInput_1 = rs_tDBInput_1.getString(4);
            if(tmpContent_tDBInput_1 != null) {
            	if (talendToDBList_tDBInput_1 .contains(rsmd_tDBInput_1.getColumnTypeName(4).toUpperCase(java.util.Locale.ENGLISH))) {
            		row1.DOC_ORI = FormatterUtils.formatUnwithE(tmpContent_tDBInput_1);
            	} else {
                	row1.DOC_ORI = tmpContent_tDBInput_1;
                }
            } else {
                row1.DOC_ORI = null;
            }
		                    }
							if(colQtyInRs_tDBInput_1 < 5) {
								row1.DOC_SERIES = null;
							} else {
		                          
            row1.DOC_SERIES = rs_tDBInput_1.getBigDecimal(5);
            if(rs_tDBInput_1.wasNull()){
                    row1.DOC_SERIES = null;
            }
		                    }
							if(colQtyInRs_tDBInput_1 < 6) {
								row1.DOC_NBR = null;
							} else {
		                          
            row1.DOC_NBR = rs_tDBInput_1.getBigDecimal(6);
            if(rs_tDBInput_1.wasNull()){
                    row1.DOC_NBR = null;
            }
		                    }
							if(colQtyInRs_tDBInput_1 < 7) {
								row1.IND_IMPORT = null;
							} else {
		                          
            row1.IND_IMPORT = rs_tDBInput_1.getBigDecimal(7);
            if(rs_tDBInput_1.wasNull()){
                    row1.IND_IMPORT = null;
            }
		                    }
							if(colQtyInRs_tDBInput_1 < 8) {
								row1.USERDOC_TYPE = null;
							} else {
	                         		
           		tmpContent_tDBInput_1 = rs_tDBInput_1.getString(8);
            if(tmpContent_tDBInput_1 != null) {
            	if (talendToDBList_tDBInput_1 .contains(rsmd_tDBInput_1.getColumnTypeName(8).toUpperCase(java.util.Locale.ENGLISH))) {
            		row1.USERDOC_TYPE = FormatterUtils.formatUnwithE(tmpContent_tDBInput_1);
            	} else {
                	row1.USERDOC_TYPE = tmpContent_tDBInput_1;
                }
            } else {
                row1.USERDOC_TYPE = null;
            }
		                    }
							if(colQtyInRs_tDBInput_1 < 9) {
								row1.LAW_CODE = null;
							} else {
		                          
            row1.LAW_CODE = rs_tDBInput_1.getBigDecimal(9);
            if(rs_tDBInput_1.wasNull()){
                    throw new RuntimeException("Null value in non-Nullable column");
            }
		                    }
							if(colQtyInRs_tDBInput_1 < 10) {
								row1.FILING_DATE = null;
							} else {
										
			row1.FILING_DATE = mssqlGTU_tDBInput_1.getDate(rsmd_tDBInput_1, rs_tDBInput_1, 10);
			
		                    }
							if(colQtyInRs_tDBInput_1 < 11) {
								row1.RECEPTION_DATE = null;
							} else {
										
			row1.RECEPTION_DATE = mssqlGTU_tDBInput_1.getDate(rsmd_tDBInput_1, rs_tDBInput_1, 11);
			
		                    }
							if(colQtyInRs_tDBInput_1 < 12) {
								row1.NOTES = null;
							} else {
	                         		
           		tmpContent_tDBInput_1 = rs_tDBInput_1.getString(12);
            if(tmpContent_tDBInput_1 != null) {
            	if (talendToDBList_tDBInput_1 .contains(rsmd_tDBInput_1.getColumnTypeName(12).toUpperCase(java.util.Locale.ENGLISH))) {
            		row1.NOTES = FormatterUtils.formatUnwithE(tmpContent_tDBInput_1);
            	} else {
                	row1.NOTES = tmpContent_tDBInput_1;
                }
            } else {
                row1.NOTES = null;
            }
		                    }
							if(colQtyInRs_tDBInput_1 < 13) {
								row1.APPLICANT_NOTES = null;
							} else {
	                         		
           		tmpContent_tDBInput_1 = rs_tDBInput_1.getString(13);
            if(tmpContent_tDBInput_1 != null) {
            	if (talendToDBList_tDBInput_1 .contains(rsmd_tDBInput_1.getColumnTypeName(13).toUpperCase(java.util.Locale.ENGLISH))) {
            		row1.APPLICANT_NOTES = FormatterUtils.formatUnwithE(tmpContent_tDBInput_1);
            	} else {
                	row1.APPLICANT_NOTES = tmpContent_tDBInput_1;
                }
            } else {
                row1.APPLICANT_NOTES = null;
            }
		                    }
							if(colQtyInRs_tDBInput_1 < 14) {
								row1.PERSON_NAME = null;
							} else {
	                         		
           		tmpContent_tDBInput_1 = rs_tDBInput_1.getString(14);
            if(tmpContent_tDBInput_1 != null) {
            	if (talendToDBList_tDBInput_1 .contains(rsmd_tDBInput_1.getColumnTypeName(14).toUpperCase(java.util.Locale.ENGLISH))) {
            		row1.PERSON_NAME = FormatterUtils.formatUnwithE(tmpContent_tDBInput_1);
            	} else {
                	row1.PERSON_NAME = tmpContent_tDBInput_1;
                }
            } else {
                row1.PERSON_NAME = null;
            }
		                    }
							if(colQtyInRs_tDBInput_1 < 15) {
								row1.PERSON_NAME_LANG2 = null;
							} else {
	                         		
           		tmpContent_tDBInput_1 = rs_tDBInput_1.getString(15);
            if(tmpContent_tDBInput_1 != null) {
            	if (talendToDBList_tDBInput_1 .contains(rsmd_tDBInput_1.getColumnTypeName(15).toUpperCase(java.util.Locale.ENGLISH))) {
            		row1.PERSON_NAME_LANG2 = FormatterUtils.formatUnwithE(tmpContent_tDBInput_1);
            	} else {
                	row1.PERSON_NAME_LANG2 = tmpContent_tDBInput_1;
                }
            } else {
                row1.PERSON_NAME_LANG2 = null;
            }
		                    }
							if(colQtyInRs_tDBInput_1 < 16) {
								row1.NATIONALITY_COUNTRY_CODE = null;
							} else {
	                         		
           		tmpContent_tDBInput_1 = rs_tDBInput_1.getString(16);
            if(tmpContent_tDBInput_1 != null) {
            	if (talendToDBList_tDBInput_1 .contains(rsmd_tDBInput_1.getColumnTypeName(16).toUpperCase(java.util.Locale.ENGLISH))) {
            		row1.NATIONALITY_COUNTRY_CODE = FormatterUtils.formatUnwithE(tmpContent_tDBInput_1);
            	} else {
                	row1.NATIONALITY_COUNTRY_CODE = tmpContent_tDBInput_1;
                }
            } else {
                row1.NATIONALITY_COUNTRY_CODE = null;
            }
		                    }
							if(colQtyInRs_tDBInput_1 < 17) {
								row1.IND_COMPANY = null;
							} else {
		                          
            row1.IND_COMPANY = rs_tDBInput_1.getBigDecimal(17);
            if(rs_tDBInput_1.wasNull()){
                    row1.IND_COMPANY = null;
            }
		                    }
							if(colQtyInRs_tDBInput_1 < 18) {
								row1.LEGAL_NATURE = null;
							} else {
	                         		
           		tmpContent_tDBInput_1 = rs_tDBInput_1.getString(18);
            if(tmpContent_tDBInput_1 != null) {
            	if (talendToDBList_tDBInput_1 .contains(rsmd_tDBInput_1.getColumnTypeName(18).toUpperCase(java.util.Locale.ENGLISH))) {
            		row1.LEGAL_NATURE = FormatterUtils.formatUnwithE(tmpContent_tDBInput_1);
            	} else {
                	row1.LEGAL_NATURE = tmpContent_tDBInput_1;
                }
            } else {
                row1.LEGAL_NATURE = null;
            }
		                    }
							if(colQtyInRs_tDBInput_1 < 19) {
								row1.LEGAL_NATURE_LANG2 = null;
							} else {
	                         		
           		tmpContent_tDBInput_1 = rs_tDBInput_1.getString(19);
            if(tmpContent_tDBInput_1 != null) {
            	if (talendToDBList_tDBInput_1 .contains(rsmd_tDBInput_1.getColumnTypeName(19).toUpperCase(java.util.Locale.ENGLISH))) {
            		row1.LEGAL_NATURE_LANG2 = FormatterUtils.formatUnwithE(tmpContent_tDBInput_1);
            	} else {
                	row1.LEGAL_NATURE_LANG2 = tmpContent_tDBInput_1;
                }
            } else {
                row1.LEGAL_NATURE_LANG2 = null;
            }
		                    }
							if(colQtyInRs_tDBInput_1 < 20) {
								row1.LEGAL_ID_TYPE = null;
							} else {
	                         		
           		tmpContent_tDBInput_1 = rs_tDBInput_1.getString(20);
            if(tmpContent_tDBInput_1 != null) {
            	if (talendToDBList_tDBInput_1 .contains(rsmd_tDBInput_1.getColumnTypeName(20).toUpperCase(java.util.Locale.ENGLISH))) {
            		row1.LEGAL_ID_TYPE = FormatterUtils.formatUnwithE(tmpContent_tDBInput_1);
            	} else {
                	row1.LEGAL_ID_TYPE = tmpContent_tDBInput_1;
                }
            } else {
                row1.LEGAL_ID_TYPE = null;
            }
		                    }
							if(colQtyInRs_tDBInput_1 < 21) {
								row1.LEGAL_ID_NBR = null;
							} else {
		                          
            row1.LEGAL_ID_NBR = rs_tDBInput_1.getBigDecimal(21);
            if(rs_tDBInput_1.wasNull()){
                    row1.LEGAL_ID_NBR = null;
            }
		                    }
							if(colQtyInRs_tDBInput_1 < 22) {
								row1.INDIVIDUAL_ID_TYPE = null;
							} else {
	                         		
           		tmpContent_tDBInput_1 = rs_tDBInput_1.getString(22);
            if(tmpContent_tDBInput_1 != null) {
            	if (talendToDBList_tDBInput_1 .contains(rsmd_tDBInput_1.getColumnTypeName(22).toUpperCase(java.util.Locale.ENGLISH))) {
            		row1.INDIVIDUAL_ID_TYPE = FormatterUtils.formatUnwithE(tmpContent_tDBInput_1);
            	} else {
                	row1.INDIVIDUAL_ID_TYPE = tmpContent_tDBInput_1;
                }
            } else {
                row1.INDIVIDUAL_ID_TYPE = null;
            }
		                    }
							if(colQtyInRs_tDBInput_1 < 23) {
								row1.INDIVIDUAL_ID_NBR = null;
							} else {
		                          
            row1.INDIVIDUAL_ID_NBR = rs_tDBInput_1.getBigDecimal(23);
            if(rs_tDBInput_1.wasNull()){
                    row1.INDIVIDUAL_ID_NBR = null;
            }
		                    }
							if(colQtyInRs_tDBInput_1 < 24) {
								row1.RESIDENCE_COUNTRY_CODE = null;
							} else {
	                         		
           		tmpContent_tDBInput_1 = rs_tDBInput_1.getString(24);
            if(tmpContent_tDBInput_1 != null) {
            	if (talendToDBList_tDBInput_1 .contains(rsmd_tDBInput_1.getColumnTypeName(24).toUpperCase(java.util.Locale.ENGLISH))) {
            		row1.RESIDENCE_COUNTRY_CODE = FormatterUtils.formatUnwithE(tmpContent_tDBInput_1);
            	} else {
                	row1.RESIDENCE_COUNTRY_CODE = tmpContent_tDBInput_1;
                }
            } else {
                row1.RESIDENCE_COUNTRY_CODE = null;
            }
		                    }
							if(colQtyInRs_tDBInput_1 < 25) {
								row1.STATE_NAME = null;
							} else {
	                         		
           		tmpContent_tDBInput_1 = rs_tDBInput_1.getString(25);
            if(tmpContent_tDBInput_1 != null) {
            	if (talendToDBList_tDBInput_1 .contains(rsmd_tDBInput_1.getColumnTypeName(25).toUpperCase(java.util.Locale.ENGLISH))) {
            		row1.STATE_NAME = FormatterUtils.formatUnwithE(tmpContent_tDBInput_1);
            	} else {
                	row1.STATE_NAME = tmpContent_tDBInput_1;
                }
            } else {
                row1.STATE_NAME = null;
            }
		                    }
							if(colQtyInRs_tDBInput_1 < 26) {
								row1.STATE_CODE = null;
							} else {
	                         		
           		tmpContent_tDBInput_1 = rs_tDBInput_1.getString(26);
            if(tmpContent_tDBInput_1 != null) {
            	if (talendToDBList_tDBInput_1 .contains(rsmd_tDBInput_1.getColumnTypeName(26).toUpperCase(java.util.Locale.ENGLISH))) {
            		row1.STATE_CODE = FormatterUtils.formatUnwithE(tmpContent_tDBInput_1);
            	} else {
                	row1.STATE_CODE = tmpContent_tDBInput_1;
                }
            } else {
                row1.STATE_CODE = null;
            }
		                    }
							if(colQtyInRs_tDBInput_1 < 27) {
								row1.CITY_NAME = null;
							} else {
	                         		
           		tmpContent_tDBInput_1 = rs_tDBInput_1.getString(27);
            if(tmpContent_tDBInput_1 != null) {
            	if (talendToDBList_tDBInput_1 .contains(rsmd_tDBInput_1.getColumnTypeName(27).toUpperCase(java.util.Locale.ENGLISH))) {
            		row1.CITY_NAME = FormatterUtils.formatUnwithE(tmpContent_tDBInput_1);
            	} else {
                	row1.CITY_NAME = tmpContent_tDBInput_1;
                }
            } else {
                row1.CITY_NAME = null;
            }
		                    }
							if(colQtyInRs_tDBInput_1 < 28) {
								row1.CITY_CODE = null;
							} else {
	                         		
           		tmpContent_tDBInput_1 = rs_tDBInput_1.getString(28);
            if(tmpContent_tDBInput_1 != null) {
            	if (talendToDBList_tDBInput_1 .contains(rsmd_tDBInput_1.getColumnTypeName(28).toUpperCase(java.util.Locale.ENGLISH))) {
            		row1.CITY_CODE = FormatterUtils.formatUnwithE(tmpContent_tDBInput_1);
            	} else {
                	row1.CITY_CODE = tmpContent_tDBInput_1;
                }
            } else {
                row1.CITY_CODE = null;
            }
		                    }
							if(colQtyInRs_tDBInput_1 < 29) {
								row1.ADDRESS_ZONE = null;
							} else {
	                         		
           		tmpContent_tDBInput_1 = rs_tDBInput_1.getString(29);
            if(tmpContent_tDBInput_1 != null) {
            	if (talendToDBList_tDBInput_1 .contains(rsmd_tDBInput_1.getColumnTypeName(29).toUpperCase(java.util.Locale.ENGLISH))) {
            		row1.ADDRESS_ZONE = FormatterUtils.formatUnwithE(tmpContent_tDBInput_1);
            	} else {
                	row1.ADDRESS_ZONE = tmpContent_tDBInput_1;
                }
            } else {
                row1.ADDRESS_ZONE = null;
            }
		                    }
							if(colQtyInRs_tDBInput_1 < 30) {
								row1.ADDRESS_STREET = null;
							} else {
	                         		
           		tmpContent_tDBInput_1 = rs_tDBInput_1.getString(30);
            if(tmpContent_tDBInput_1 != null) {
            	if (talendToDBList_tDBInput_1 .contains(rsmd_tDBInput_1.getColumnTypeName(30).toUpperCase(java.util.Locale.ENGLISH))) {
            		row1.ADDRESS_STREET = FormatterUtils.formatUnwithE(tmpContent_tDBInput_1);
            	} else {
                	row1.ADDRESS_STREET = tmpContent_tDBInput_1;
                }
            } else {
                row1.ADDRESS_STREET = null;
            }
		                    }
							if(colQtyInRs_tDBInput_1 < 31) {
								row1.ADDRESS_STREET_LANG2 = null;
							} else {
	                         		
           		tmpContent_tDBInput_1 = rs_tDBInput_1.getString(31);
            if(tmpContent_tDBInput_1 != null) {
            	if (talendToDBList_tDBInput_1 .contains(rsmd_tDBInput_1.getColumnTypeName(31).toUpperCase(java.util.Locale.ENGLISH))) {
            		row1.ADDRESS_STREET_LANG2 = FormatterUtils.formatUnwithE(tmpContent_tDBInput_1);
            	} else {
                	row1.ADDRESS_STREET_LANG2 = tmpContent_tDBInput_1;
                }
            } else {
                row1.ADDRESS_STREET_LANG2 = null;
            }
		                    }
							if(colQtyInRs_tDBInput_1 < 32) {
								row1.ZIP_CODE = null;
							} else {
	                         		
           		tmpContent_tDBInput_1 = rs_tDBInput_1.getString(32);
            if(tmpContent_tDBInput_1 != null) {
            	if (talendToDBList_tDBInput_1 .contains(rsmd_tDBInput_1.getColumnTypeName(32).toUpperCase(java.util.Locale.ENGLISH))) {
            		row1.ZIP_CODE = FormatterUtils.formatUnwithE(tmpContent_tDBInput_1);
            	} else {
                	row1.ZIP_CODE = tmpContent_tDBInput_1;
                }
            } else {
                row1.ZIP_CODE = null;
            }
		                    }
							if(colQtyInRs_tDBInput_1 < 33) {
								row1.EMAIL = null;
							} else {
	                         		
           		tmpContent_tDBInput_1 = rs_tDBInput_1.getString(33);
            if(tmpContent_tDBInput_1 != null) {
            	if (talendToDBList_tDBInput_1 .contains(rsmd_tDBInput_1.getColumnTypeName(33).toUpperCase(java.util.Locale.ENGLISH))) {
            		row1.EMAIL = FormatterUtils.formatUnwithE(tmpContent_tDBInput_1);
            	} else {
                	row1.EMAIL = tmpContent_tDBInput_1;
                }
            } else {
                row1.EMAIL = null;
            }
		                    }
							if(colQtyInRs_tDBInput_1 < 34) {
								row1.TELEPHONE = null;
							} else {
	                         		
           		tmpContent_tDBInput_1 = rs_tDBInput_1.getString(34);
            if(tmpContent_tDBInput_1 != null) {
            	if (talendToDBList_tDBInput_1 .contains(rsmd_tDBInput_1.getColumnTypeName(34).toUpperCase(java.util.Locale.ENGLISH))) {
            		row1.TELEPHONE = FormatterUtils.formatUnwithE(tmpContent_tDBInput_1);
            	} else {
                	row1.TELEPHONE = tmpContent_tDBInput_1;
                }
            } else {
                row1.TELEPHONE = null;
            }
		                    }
							if(colQtyInRs_tDBInput_1 < 35) {
								row1.PERSON_GROUP_CODE = null;
							} else {
	                         		
           		tmpContent_tDBInput_1 = rs_tDBInput_1.getString(35);
            if(tmpContent_tDBInput_1 != null) {
            	if (talendToDBList_tDBInput_1 .contains(rsmd_tDBInput_1.getColumnTypeName(35).toUpperCase(java.util.Locale.ENGLISH))) {
            		row1.PERSON_GROUP_CODE = FormatterUtils.formatUnwithE(tmpContent_tDBInput_1);
            	} else {
                	row1.PERSON_GROUP_CODE = tmpContent_tDBInput_1;
                }
            } else {
                row1.PERSON_GROUP_CODE = null;
            }
		                    }
							if(colQtyInRs_tDBInput_1 < 36) {
								row1.CAPTURE_USER_ID = null;
							} else {
		                          
            row1.CAPTURE_USER_ID = rs_tDBInput_1.getBigDecimal(36);
            if(rs_tDBInput_1.wasNull()){
                    row1.CAPTURE_USER_ID = null;
            }
		                    }
							if(colQtyInRs_tDBInput_1 < 37) {
								row1.CAPTURE_DATE = null;
							} else {
										
			row1.CAPTURE_DATE = mssqlGTU_tDBInput_1.getDate(rsmd_tDBInput_1, rs_tDBInput_1, 37);
			
		                    }
					





 



/**
 * [tDBInput_1 begin ] stop
 */
	
	/**
	 * [tDBInput_1 main ] start
	 */

	

	
	
	currentComponent="tDBInput_1";

	

 


	tos_count_tDBInput_1++;

/**
 * [tDBInput_1 main ] stop
 */
	
	/**
	 * [tDBInput_1 process_data_begin ] start
	 */

	

	
	
	currentComponent="tDBInput_1";

	

 



/**
 * [tDBInput_1 process_data_begin ] stop
 */

	
	/**
	 * [tMap_1 main ] start
	 */

	

	
	
	currentComponent="tMap_1";

	
					if(execStat){
						runStat.updateStatOnConnection(iterateId,1,1
						
							,"row1"
						
						);
					}
					

		
		
		boolean hasCasePrimitiveKeyWithNull_tMap_1 = false;
		
        // ###############################
        // # Input tables (lookups)
		  boolean rejectedInnerJoin_tMap_1 = false;
		  boolean mainRowRejected_tMap_1 = false;
            				    								  
		// ###############################
        { // start of Var scope
        
	        // ###############################
        	// # Vars tables
        
Var__tMap_1__Struct Var = Var__tMap_1;// ###############################
        // ###############################
        // # Output tables

set_poa = null;


// # Output table : 'set_poa'
set_poa_tmp.ROW_VERSION = new BigDecimal(1);
set_poa_tmp.DOC_ORI = row1.DOC_ORI;
set_poa_tmp.DOC_LOG = "E";
set_poa_tmp.DOC_SER = row1.DOC_SERIES ;
set_poa_tmp.DOC_NBR = row1.DOC_NBR;
set_poa_tmp.POA_REG_NBR = row1.USERDOC_NBR ;
set_poa_tmp.POA_DATE = row1.RECEPTION_DATE ;
set_poa_tmp.SCOPE = row1.NOTES!=null &&

row1.NOTES.length()>=253?


row1.NOTES.substring(0, 252) :

row1.NOTES ;
set_poa = set_poa_tmp;
// ###############################

} // end of Var scope

rejectedInnerJoin_tMap_1 = false;










 


	tos_count_tMap_1++;

/**
 * [tMap_1 main ] stop
 */
	
	/**
	 * [tMap_1 process_data_begin ] start
	 */

	

	
	
	currentComponent="tMap_1";

	

 



/**
 * [tMap_1 process_data_begin ] stop
 */
// Start of branch "set_poa"
if(set_poa != null) { 
			row6 = null;



	
	/**
	 * [tDBOutput_1 main ] start
	 */

	

	
	
	currentComponent="tDBOutput_1";

	
					if(execStat){
						runStat.updateStatOnConnection(iterateId,1,1
						
							,"set_poa"
						
						);
					}
					



            row6 = null;
        whetherReject_tDBOutput_1 = false;
            try {
                    pstmt_tDBOutput_1.setBigDecimal(1, set_poa.ROW_VERSION);

                    if(set_poa.DOC_ORI == null) {
pstmt_tDBOutput_1.setNull(2, java.sql.Types.VARCHAR);
} else {pstmt_tDBOutput_1.setString(2, set_poa.DOC_ORI);
}

                    if(set_poa.DOC_LOG == null) {
pstmt_tDBOutput_1.setNull(3, java.sql.Types.VARCHAR);
} else {pstmt_tDBOutput_1.setString(3, set_poa.DOC_LOG);
}

                    pstmt_tDBOutput_1.setBigDecimal(4, set_poa.DOC_SER);

                    pstmt_tDBOutput_1.setBigDecimal(5, set_poa.DOC_NBR);

                    pstmt_tDBOutput_1.setBigDecimal(6, set_poa.POA_REG_NBR);

                    if(set_poa.POA_DATE != null) {
pstmt_tDBOutput_1.setTimestamp(7, new java.sql.Timestamp(set_poa.POA_DATE.getTime()));
} else {
pstmt_tDBOutput_1.setNull(7, java.sql.Types.TIMESTAMP);
}

                    if(set_poa.SCOPE == null) {
pstmt_tDBOutput_1.setNull(8, java.sql.Types.VARCHAR);
} else {pstmt_tDBOutput_1.setString(8, set_poa.SCOPE);
}


                nb_line_tDBOutput_1++;
                insertedCount_tDBOutput_1 = insertedCount_tDBOutput_1 + pstmt_tDBOutput_1.executeUpdate();
            } catch(java.lang.Exception e) {
                whetherReject_tDBOutput_1 = true;
                        row6 = new row6Struct();
                            row6.ROW_VERSION = set_poa.ROW_VERSION;
                            row6.DOC_ORI = set_poa.DOC_ORI;
                            row6.DOC_LOG = set_poa.DOC_LOG;
                            row6.DOC_SER = set_poa.DOC_SER;
                            row6.DOC_NBR = set_poa.DOC_NBR;
                            row6.POA_REG_NBR = set_poa.POA_REG_NBR;
                            row6.POA_DATE = set_poa.POA_DATE;
                            row6.SCOPE = set_poa.SCOPE;
                        rejectedCount_tDBOutput_1 = rejectedCount_tDBOutput_1 + 1;
                        row6.errorCode = ((java.sql.SQLException)e).getSQLState();
                        row6.errorMessage = e.getMessage() + " - Line: " + tos_count_tDBOutput_1;
            }
            if(!whetherReject_tDBOutput_1) {
            }
            	//////////batch execute by batch size///////
            	class LimitBytesHelper_tDBOutput_1{
            		public int limitBytePart1(int counter,java.sql.PreparedStatement pstmt_tDBOutput_1) throws Exception {
                try {
						
						for(int countEach_tDBOutput_1: pstmt_tDBOutput_1.executeBatch()) {
							if(countEach_tDBOutput_1 == -2 || countEach_tDBOutput_1 == -3) {
								break;
							}
							counter += countEach_tDBOutput_1;
						}
						
                }catch (java.sql.BatchUpdateException e){
                	
                	int countSum_tDBOutput_1 = 0;
					for(int countEach_tDBOutput_1: e.getUpdateCounts()) {
						counter += (countEach_tDBOutput_1 < 0 ? 0 : countEach_tDBOutput_1);
					}
				
            	    	
                		System.err.println(e.getMessage());
                	
               			 }
    				return counter;
            	}
            	
            	public int limitBytePart2(int counter,java.sql.PreparedStatement pstmt_tDBOutput_1) throws Exception {
                try {
                		
						for(int countEach_tDBOutput_1: pstmt_tDBOutput_1.executeBatch()) {
							if(countEach_tDBOutput_1 == -2 || countEach_tDBOutput_1 == -3) {
								break;
							}
							counter += countEach_tDBOutput_1;
						}
						
                }catch (java.sql.BatchUpdateException e){
                	
                	
					for(int countEach_tDBOutput_1: e.getUpdateCounts()) {
						counter += (countEach_tDBOutput_1 < 0 ? 0 : countEach_tDBOutput_1);
					}
					
            	    	
                        System.err.println(e.getMessage());
                	
                		}	
                	return counter;	
            	}
            }

    	////////////commit every////////////
    			
    		    commitCounter_tDBOutput_1++;
                if(commitEvery_tDBOutput_1 <= commitCounter_tDBOutput_1) {
                	
                	conn_tDBOutput_1.commit();
            		
                	commitCounter_tDBOutput_1=0;
                }

 


	tos_count_tDBOutput_1++;

/**
 * [tDBOutput_1 main ] stop
 */
	
	/**
	 * [tDBOutput_1 process_data_begin ] start
	 */

	

	
	
	currentComponent="tDBOutput_1";

	

 



/**
 * [tDBOutput_1 process_data_begin ] stop
 */
// Start of branch "row6"
if(row6 != null) { 



	
	/**
	 * [tLogRow_2 main ] start
	 */

	

	
	
	currentComponent="tLogRow_2";

	
					if(execStat){
						runStat.updateStatOnConnection(iterateId,1,1
						
							,"row6"
						
						);
					}
					
///////////////////////		
						



				strBuffer_tLogRow_2 = new StringBuilder();




   				
	    		if(row6.ROW_VERSION != null) { //              
                    							
       
				strBuffer_tLogRow_2.append(
								row6.ROW_VERSION.setScale(0, java.math.RoundingMode.HALF_UP).toPlainString()				
				);


							
	    		} //  			

    			strBuffer_tLogRow_2.append("|");
    			


   				
	    		if(row6.DOC_ORI != null) { //              
                    							
       
				strBuffer_tLogRow_2.append(
				                String.valueOf(row6.DOC_ORI)							
				);


							
	    		} //  			

    			strBuffer_tLogRow_2.append("|");
    			


   				
	    		if(row6.DOC_LOG != null) { //              
                    							
       
				strBuffer_tLogRow_2.append(
				                String.valueOf(row6.DOC_LOG)							
				);


							
	    		} //  			

    			strBuffer_tLogRow_2.append("|");
    			


   				
	    		if(row6.DOC_SER != null) { //              
                    							
       
				strBuffer_tLogRow_2.append(
								row6.DOC_SER.setScale(0, java.math.RoundingMode.HALF_UP).toPlainString()				
				);


							
	    		} //  			

    			strBuffer_tLogRow_2.append("|");
    			


   				
	    		if(row6.DOC_NBR != null) { //              
                    							
       
				strBuffer_tLogRow_2.append(
								row6.DOC_NBR.setScale(0, java.math.RoundingMode.HALF_UP).toPlainString()				
				);


							
	    		} //  			

    			strBuffer_tLogRow_2.append("|");
    			


   				
	    		if(row6.POA_REG_NBR != null) { //              
                    							
       
				strBuffer_tLogRow_2.append(
								row6.POA_REG_NBR.setScale(0, java.math.RoundingMode.HALF_UP).toPlainString()				
				);


							
	    		} //  			

    			strBuffer_tLogRow_2.append("|");
    			


   				
	    		if(row6.POA_DATE != null) { //              
                    							
       
				strBuffer_tLogRow_2.append(
								FormatterUtils.format_Date(row6.POA_DATE, "dd-MM-yyyy")				
				);


							
	    		} //  			

    			strBuffer_tLogRow_2.append("|");
    			


   				
	    		if(row6.SCOPE != null) { //              
                    							
       
				strBuffer_tLogRow_2.append(
				                String.valueOf(row6.SCOPE)							
				);


							
	    		} //  			

    			strBuffer_tLogRow_2.append("|");
    			


   				
	    		if(row6.errorCode != null) { //              
                    							
       
				strBuffer_tLogRow_2.append(
				                String.valueOf(row6.errorCode)							
				);


							
	    		} //  			

    			strBuffer_tLogRow_2.append("|");
    			


   				
	    		if(row6.errorMessage != null) { //              
                    							
       
				strBuffer_tLogRow_2.append(
				                String.valueOf(row6.errorMessage)							
				);


							
	    		} //  			
 

                    if (globalMap.get("tLogRow_CONSOLE")!=null)
                    {
                    	consoleOut_tLogRow_2 = (java.io.PrintStream) globalMap.get("tLogRow_CONSOLE");
                    }
                    else
                    {
                    	consoleOut_tLogRow_2 = new java.io.PrintStream(new java.io.BufferedOutputStream(System.out));
                    	globalMap.put("tLogRow_CONSOLE",consoleOut_tLogRow_2);
                    }
                    consoleOut_tLogRow_2.println(strBuffer_tLogRow_2.toString());
                    consoleOut_tLogRow_2.flush();
                    nb_line_tLogRow_2++;
//////

//////                    
                    
///////////////////////    			

 


	tos_count_tLogRow_2++;

/**
 * [tLogRow_2 main ] stop
 */
	
	/**
	 * [tLogRow_2 process_data_begin ] start
	 */

	

	
	
	currentComponent="tLogRow_2";

	

 



/**
 * [tLogRow_2 process_data_begin ] stop
 */
	
	/**
	 * [tLogRow_2 process_data_end ] start
	 */

	

	
	
	currentComponent="tLogRow_2";

	

 



/**
 * [tLogRow_2 process_data_end ] stop
 */

} // End of branch "row6"




	
	/**
	 * [tDBOutput_1 process_data_end ] start
	 */

	

	
	
	currentComponent="tDBOutput_1";

	

 



/**
 * [tDBOutput_1 process_data_end ] stop
 */

} // End of branch "set_poa"




	
	/**
	 * [tMap_1 process_data_end ] start
	 */

	

	
	
	currentComponent="tMap_1";

	

 



/**
 * [tMap_1 process_data_end ] stop
 */



	
	/**
	 * [tDBInput_1 process_data_end ] start
	 */

	

	
	
	currentComponent="tDBInput_1";

	

 



/**
 * [tDBInput_1 process_data_end ] stop
 */
	
	/**
	 * [tDBInput_1 end ] start
	 */

	

	
	
	currentComponent="tDBInput_1";

	

	}
}finally{
	if (rs_tDBInput_1 != null) {
		rs_tDBInput_1.close();
	}
	if (stmt_tDBInput_1 != null) {
		stmt_tDBInput_1.close();
	}
		if(conn_tDBInput_1 != null && !conn_tDBInput_1.isClosed()) {
			
			conn_tDBInput_1.close();
			
			if("com.mysql.cj.jdbc.Driver".equals((String)globalMap.get("driverClass_"))
			    && routines.system.BundleUtils.inOSGi()) {
			        Class.forName("com.mysql.cj.jdbc.AbandonedConnectionCleanupThread").
			            getMethod("checkedShutdown").invoke(null, (Object[]) null);
			}
			
		}
}
globalMap.put("tDBInput_1_NB_LINE",nb_line_tDBInput_1);

 

ok_Hash.put("tDBInput_1", true);
end_Hash.put("tDBInput_1", System.currentTimeMillis());




/**
 * [tDBInput_1 end ] stop
 */

	
	/**
	 * [tMap_1 end ] start
	 */

	

	
	
	currentComponent="tMap_1";

	


// ###############################
// # Lookup hashes releasing
// ###############################      





				if(execStat){
			  		runStat.updateStat(resourceMap,iterateId,2,0,"row1");
			  	}
			  	
 

ok_Hash.put("tMap_1", true);
end_Hash.put("tMap_1", System.currentTimeMillis());




/**
 * [tMap_1 end ] stop
 */

	
	/**
	 * [tDBOutput_1 end ] start
	 */

	

	
	
	currentComponent="tDBOutput_1";

	



        if(pstmt_tDBOutput_1 != null) {
			
				pstmt_tDBOutput_1.close();
				resourceMap.remove("pstmt_tDBOutput_1");
			
        }
    resourceMap.put("statementClosed_tDBOutput_1", true);
            conn_tDBOutput_1.commit();
			
        conn_tDBOutput_1 .close();
        resourceMap.put("finish_tDBOutput_1", true);

	nb_line_deleted_tDBOutput_1=nb_line_deleted_tDBOutput_1+ deletedCount_tDBOutput_1;
	nb_line_update_tDBOutput_1=nb_line_update_tDBOutput_1 + updatedCount_tDBOutput_1;
	nb_line_inserted_tDBOutput_1=nb_line_inserted_tDBOutput_1 + insertedCount_tDBOutput_1;
	nb_line_rejected_tDBOutput_1=nb_line_rejected_tDBOutput_1 + rejectedCount_tDBOutput_1;
	
        globalMap.put("tDBOutput_1_NB_LINE",nb_line_tDBOutput_1);
        globalMap.put("tDBOutput_1_NB_LINE_UPDATED",nb_line_update_tDBOutput_1);
        globalMap.put("tDBOutput_1_NB_LINE_INSERTED",nb_line_inserted_tDBOutput_1);
        globalMap.put("tDBOutput_1_NB_LINE_DELETED",nb_line_deleted_tDBOutput_1);
        globalMap.put("tDBOutput_1_NB_LINE_REJECTED", nb_line_rejected_tDBOutput_1);
    

	

				if(execStat){
			  		runStat.updateStat(resourceMap,iterateId,2,0,"set_poa");
			  	}
			  	
 

ok_Hash.put("tDBOutput_1", true);
end_Hash.put("tDBOutput_1", System.currentTimeMillis());




/**
 * [tDBOutput_1 end ] stop
 */

	
	/**
	 * [tLogRow_2 end ] start
	 */

	

	
	
	currentComponent="tLogRow_2";

	


//////
//////
globalMap.put("tLogRow_2_NB_LINE",nb_line_tLogRow_2);

///////////////////////    			

				if(execStat){
			  		runStat.updateStat(resourceMap,iterateId,2,0,"row6");
			  	}
			  	
 

ok_Hash.put("tLogRow_2", true);
end_Hash.put("tLogRow_2", System.currentTimeMillis());




/**
 * [tLogRow_2 end ] stop
 */









				}//end the resume

				
				    			if(resumeEntryMethodName == null || globalResumeTicket){
				    				resumeUtil.addLog("CHECKPOINT", "CONNECTION:SUBJOB_OK:tDBInput_1:OnSubjobOk", "", Thread.currentThread().getId() + "", "", "", "", "", "");
								}	    				    			
					    	
								if(execStat){    	
									runStat.updateStatOnConnection("OnSubjobOk5", 0, "ok");
								} 
							
							tDBInput_2Process(globalMap); 
						



	
			}catch(java.lang.Exception e){	
				
				TalendException te = new TalendException(e, currentComponent, globalMap);
				
				throw te;
			}catch(java.lang.Error error){	
				
					runStat.stopThreadStat();
				
				throw error;
			}finally{
				
				try{
					
	
	/**
	 * [tDBInput_1 finally ] start
	 */

	

	
	
	currentComponent="tDBInput_1";

	

 



/**
 * [tDBInput_1 finally ] stop
 */

	
	/**
	 * [tMap_1 finally ] start
	 */

	

	
	
	currentComponent="tMap_1";

	

 



/**
 * [tMap_1 finally ] stop
 */

	
	/**
	 * [tDBOutput_1 finally ] start
	 */

	

	
	
	currentComponent="tDBOutput_1";

	



    try {
    if (resourceMap.get("statementClosed_tDBOutput_1") == null) {
                java.sql.PreparedStatement pstmtToClose_tDBOutput_1 = null;
                if ((pstmtToClose_tDBOutput_1 = (java.sql.PreparedStatement) resourceMap.remove("pstmt_tDBOutput_1")) != null) {
                    pstmtToClose_tDBOutput_1.close();
                }
    }
    } finally {
        if(resourceMap.get("finish_tDBOutput_1") == null){
            java.sql.Connection ctn_tDBOutput_1 = null;
            if((ctn_tDBOutput_1 = (java.sql.Connection)resourceMap.get("conn_tDBOutput_1")) != null){
                try {
                    ctn_tDBOutput_1.close();
                } catch (java.sql.SQLException sqlEx_tDBOutput_1) {
                    String errorMessage_tDBOutput_1 = "failed to close the connection in tDBOutput_1 :" + sqlEx_tDBOutput_1.getMessage();
                    System.err.println(errorMessage_tDBOutput_1);
                }
            }
        }
    }
 



/**
 * [tDBOutput_1 finally ] stop
 */

	
	/**
	 * [tLogRow_2 finally ] start
	 */

	

	
	
	currentComponent="tLogRow_2";

	

 



/**
 * [tLogRow_2 finally ] stop
 */









				}catch(java.lang.Exception e){	
					//ignore
				}catch(java.lang.Error error){
					//ignore
				}
				resourceMap = null;
			}
		

		globalMap.put("tDBInput_1_SUBPROCESS_STATE", 1);
	}
	


public static class row7Struct implements routines.system.IPersistableRow<row7Struct> {
    final static byte[] commonByteArrayLock_WIPO_PROJECTS_Gg_POA = new byte[0];
    static byte[] commonByteArray_WIPO_PROJECTS_Gg_POA = new byte[0];
	protected static final int DEFAULT_HASHCODE = 1;
    protected static final int PRIME = 31;
    protected int hashCode = DEFAULT_HASHCODE;
    public boolean hashCodeDirty = true;

    public String loopKey;



	
			    public BigDecimal ROW_VERSION;

				public BigDecimal getROW_VERSION () {
					return this.ROW_VERSION;
				}
				
			    public String DOC_ORI;

				public String getDOC_ORI () {
					return this.DOC_ORI;
				}
				
			    public String DOC_LOG;

				public String getDOC_LOG () {
					return this.DOC_LOG;
				}
				
			    public BigDecimal DOC_SER;

				public BigDecimal getDOC_SER () {
					return this.DOC_SER;
				}
				
			    public BigDecimal DOC_NBR;

				public BigDecimal getDOC_NBR () {
					return this.DOC_NBR;
				}
				
			    public BigDecimal PERSON_NBR;

				public BigDecimal getPERSON_NBR () {
					return this.PERSON_NBR;
				}
				
			    public BigDecimal ADDR_NBR;

				public BigDecimal getADDR_NBR () {
					return this.ADDR_NBR;
				}
				
			    public String errorCode;

				public String getErrorCode () {
					return this.errorCode;
				}
				
			    public String errorMessage;

				public String getErrorMessage () {
					return this.errorMessage;
				}
				


	@Override
	public int hashCode() {
		if (this.hashCodeDirty) {
			final int prime = PRIME;
			int result = DEFAULT_HASHCODE;
	
						result = prime * result + ((this.DOC_ORI == null) ? 0 : this.DOC_ORI.hashCode());
					
						result = prime * result + ((this.DOC_LOG == null) ? 0 : this.DOC_LOG.hashCode());
					
						result = prime * result + ((this.DOC_SER == null) ? 0 : this.DOC_SER.hashCode());
					
						result = prime * result + ((this.DOC_NBR == null) ? 0 : this.DOC_NBR.hashCode());
					
						result = prime * result + ((this.PERSON_NBR == null) ? 0 : this.PERSON_NBR.hashCode());
					
						result = prime * result + ((this.ADDR_NBR == null) ? 0 : this.ADDR_NBR.hashCode());
					
    		this.hashCode = result;
    		this.hashCodeDirty = false;
		}
		return this.hashCode;
	}

	@Override
	public boolean equals(Object obj) {
		if (this == obj) return true;
		if (obj == null) return false;
		if (getClass() != obj.getClass()) return false;
		final row7Struct other = (row7Struct) obj;
		
						if (this.DOC_ORI == null) {
							if (other.DOC_ORI != null)
								return false;
						
						} else if (!this.DOC_ORI.equals(other.DOC_ORI))
						
							return false;
					
						if (this.DOC_LOG == null) {
							if (other.DOC_LOG != null)
								return false;
						
						} else if (!this.DOC_LOG.equals(other.DOC_LOG))
						
							return false;
					
						if (this.DOC_SER == null) {
							if (other.DOC_SER != null)
								return false;
						
						} else if (!this.DOC_SER.equals(other.DOC_SER))
						
							return false;
					
						if (this.DOC_NBR == null) {
							if (other.DOC_NBR != null)
								return false;
						
						} else if (!this.DOC_NBR.equals(other.DOC_NBR))
						
							return false;
					
						if (this.PERSON_NBR == null) {
							if (other.PERSON_NBR != null)
								return false;
						
						} else if (!this.PERSON_NBR.equals(other.PERSON_NBR))
						
							return false;
					
						if (this.ADDR_NBR == null) {
							if (other.ADDR_NBR != null)
								return false;
						
						} else if (!this.ADDR_NBR.equals(other.ADDR_NBR))
						
							return false;
					

		return true;
    }

	public void copyDataTo(row7Struct other) {

		other.ROW_VERSION = this.ROW_VERSION;
	            other.DOC_ORI = this.DOC_ORI;
	            other.DOC_LOG = this.DOC_LOG;
	            other.DOC_SER = this.DOC_SER;
	            other.DOC_NBR = this.DOC_NBR;
	            other.PERSON_NBR = this.PERSON_NBR;
	            other.ADDR_NBR = this.ADDR_NBR;
	            other.errorCode = this.errorCode;
	            other.errorMessage = this.errorMessage;
	            
	}

	public void copyKeysDataTo(row7Struct other) {

		other.DOC_ORI = this.DOC_ORI;
	            	other.DOC_LOG = this.DOC_LOG;
	            	other.DOC_SER = this.DOC_SER;
	            	other.DOC_NBR = this.DOC_NBR;
	            	other.PERSON_NBR = this.PERSON_NBR;
	            	other.ADDR_NBR = this.ADDR_NBR;
	            	
	}




	private String readString(ObjectInputStream dis) throws IOException{
		String strReturn = null;
		int length = 0;
        length = dis.readInt();
		if (length == -1) {
			strReturn = null;
		} else {
			if(length > commonByteArray_WIPO_PROJECTS_Gg_POA.length) {
				if(length < 1024 && commonByteArray_WIPO_PROJECTS_Gg_POA.length == 0) {
   					commonByteArray_WIPO_PROJECTS_Gg_POA = new byte[1024];
				} else {
   					commonByteArray_WIPO_PROJECTS_Gg_POA = new byte[2 * length];
   				}
			}
			dis.readFully(commonByteArray_WIPO_PROJECTS_Gg_POA, 0, length);
			strReturn = new String(commonByteArray_WIPO_PROJECTS_Gg_POA, 0, length, utf8Charset);
		}
		return strReturn;
	}

    private void writeString(String str, ObjectOutputStream dos) throws IOException{
		if(str == null) {
            dos.writeInt(-1);
		} else {
            byte[] byteArray = str.getBytes(utf8Charset);
	    	dos.writeInt(byteArray.length);
			dos.write(byteArray);
    	}
    }

    public void readData(ObjectInputStream dis) {

		synchronized(commonByteArrayLock_WIPO_PROJECTS_Gg_POA) {

        	try {

        		int length = 0;
		
						this.ROW_VERSION = (BigDecimal) dis.readObject();
					
					this.DOC_ORI = readString(dis);
					
					this.DOC_LOG = readString(dis);
					
						this.DOC_SER = (BigDecimal) dis.readObject();
					
						this.DOC_NBR = (BigDecimal) dis.readObject();
					
						this.PERSON_NBR = (BigDecimal) dis.readObject();
					
						this.ADDR_NBR = (BigDecimal) dis.readObject();
					
					this.errorCode = readString(dis);
					
					this.errorMessage = readString(dis);
					
        	} catch (IOException e) {
	            throw new RuntimeException(e);

		
			} catch(ClassNotFoundException eCNFE) {
				 throw new RuntimeException(eCNFE);
		

        }

		

      }


    }

    public void writeData(ObjectOutputStream dos) {
        try {

		
					// BigDecimal
				
       			    	dos.writeObject(this.ROW_VERSION);
					
					// String
				
						writeString(this.DOC_ORI,dos);
					
					// String
				
						writeString(this.DOC_LOG,dos);
					
					// BigDecimal
				
       			    	dos.writeObject(this.DOC_SER);
					
					// BigDecimal
				
       			    	dos.writeObject(this.DOC_NBR);
					
					// BigDecimal
				
       			    	dos.writeObject(this.PERSON_NBR);
					
					// BigDecimal
				
       			    	dos.writeObject(this.ADDR_NBR);
					
					// String
				
						writeString(this.errorCode,dos);
					
					// String
				
						writeString(this.errorMessage,dos);
					
        	} catch (IOException e) {
	            throw new RuntimeException(e);
        }


    }


    public String toString() {

		StringBuilder sb = new StringBuilder();
		sb.append(super.toString());
		sb.append("[");
		sb.append("ROW_VERSION="+String.valueOf(ROW_VERSION));
		sb.append(",DOC_ORI="+DOC_ORI);
		sb.append(",DOC_LOG="+DOC_LOG);
		sb.append(",DOC_SER="+String.valueOf(DOC_SER));
		sb.append(",DOC_NBR="+String.valueOf(DOC_NBR));
		sb.append(",PERSON_NBR="+String.valueOf(PERSON_NBR));
		sb.append(",ADDR_NBR="+String.valueOf(ADDR_NBR));
		sb.append(",errorCode="+errorCode);
		sb.append(",errorMessage="+errorMessage);
	    sb.append("]");

	    return sb.toString();
    }

    /**
     * Compare keys
     */
    public int compareTo(row7Struct other) {

		int returnValue = -1;
		
						returnValue = checkNullsAndCompare(this.DOC_ORI, other.DOC_ORI);
						if(returnValue != 0) {
							return returnValue;
						}

					
						returnValue = checkNullsAndCompare(this.DOC_LOG, other.DOC_LOG);
						if(returnValue != 0) {
							return returnValue;
						}

					
						returnValue = checkNullsAndCompare(this.DOC_SER, other.DOC_SER);
						if(returnValue != 0) {
							return returnValue;
						}

					
						returnValue = checkNullsAndCompare(this.DOC_NBR, other.DOC_NBR);
						if(returnValue != 0) {
							return returnValue;
						}

					
						returnValue = checkNullsAndCompare(this.PERSON_NBR, other.PERSON_NBR);
						if(returnValue != 0) {
							return returnValue;
						}

					
						returnValue = checkNullsAndCompare(this.ADDR_NBR, other.ADDR_NBR);
						if(returnValue != 0) {
							return returnValue;
						}

					
	    return returnValue;
    }


    private int checkNullsAndCompare(Object object1, Object object2) {
        int returnValue = 0;
		if (object1 instanceof Comparable && object2 instanceof Comparable) {
            returnValue = ((Comparable) object1).compareTo(object2);
        } else if (object1 != null && object2 != null) {
            returnValue = compareStrings(object1.toString(), object2.toString());
        } else if (object1 == null && object2 != null) {
            returnValue = 1;
        } else if (object1 != null && object2 == null) {
            returnValue = -1;
        } else {
            returnValue = 0;
        }

        return returnValue;
    }

    private int compareStrings(String string1, String string2) {
        return string1.compareTo(string2);
    }


}

public static class poa_grantorsStruct implements routines.system.IPersistableRow<poa_grantorsStruct> {
    final static byte[] commonByteArrayLock_WIPO_PROJECTS_Gg_POA = new byte[0];
    static byte[] commonByteArray_WIPO_PROJECTS_Gg_POA = new byte[0];
	protected static final int DEFAULT_HASHCODE = 1;
    protected static final int PRIME = 31;
    protected int hashCode = DEFAULT_HASHCODE;
    public boolean hashCodeDirty = true;

    public String loopKey;



	
			    public BigDecimal ROW_VERSION;

				public BigDecimal getROW_VERSION () {
					return this.ROW_VERSION;
				}
				
			    public String DOC_ORI;

				public String getDOC_ORI () {
					return this.DOC_ORI;
				}
				
			    public String DOC_LOG;

				public String getDOC_LOG () {
					return this.DOC_LOG;
				}
				
			    public BigDecimal DOC_SER;

				public BigDecimal getDOC_SER () {
					return this.DOC_SER;
				}
				
			    public BigDecimal DOC_NBR;

				public BigDecimal getDOC_NBR () {
					return this.DOC_NBR;
				}
				
			    public BigDecimal PERSON_NBR;

				public BigDecimal getPERSON_NBR () {
					return this.PERSON_NBR;
				}
				
			    public BigDecimal ADDR_NBR;

				public BigDecimal getADDR_NBR () {
					return this.ADDR_NBR;
				}
				


	@Override
	public int hashCode() {
		if (this.hashCodeDirty) {
			final int prime = PRIME;
			int result = DEFAULT_HASHCODE;
	
						result = prime * result + ((this.DOC_ORI == null) ? 0 : this.DOC_ORI.hashCode());
					
						result = prime * result + ((this.DOC_LOG == null) ? 0 : this.DOC_LOG.hashCode());
					
						result = prime * result + ((this.DOC_SER == null) ? 0 : this.DOC_SER.hashCode());
					
						result = prime * result + ((this.DOC_NBR == null) ? 0 : this.DOC_NBR.hashCode());
					
						result = prime * result + ((this.PERSON_NBR == null) ? 0 : this.PERSON_NBR.hashCode());
					
						result = prime * result + ((this.ADDR_NBR == null) ? 0 : this.ADDR_NBR.hashCode());
					
    		this.hashCode = result;
    		this.hashCodeDirty = false;
		}
		return this.hashCode;
	}

	@Override
	public boolean equals(Object obj) {
		if (this == obj) return true;
		if (obj == null) return false;
		if (getClass() != obj.getClass()) return false;
		final poa_grantorsStruct other = (poa_grantorsStruct) obj;
		
						if (this.DOC_ORI == null) {
							if (other.DOC_ORI != null)
								return false;
						
						} else if (!this.DOC_ORI.equals(other.DOC_ORI))
						
							return false;
					
						if (this.DOC_LOG == null) {
							if (other.DOC_LOG != null)
								return false;
						
						} else if (!this.DOC_LOG.equals(other.DOC_LOG))
						
							return false;
					
						if (this.DOC_SER == null) {
							if (other.DOC_SER != null)
								return false;
						
						} else if (!this.DOC_SER.equals(other.DOC_SER))
						
							return false;
					
						if (this.DOC_NBR == null) {
							if (other.DOC_NBR != null)
								return false;
						
						} else if (!this.DOC_NBR.equals(other.DOC_NBR))
						
							return false;
					
						if (this.PERSON_NBR == null) {
							if (other.PERSON_NBR != null)
								return false;
						
						} else if (!this.PERSON_NBR.equals(other.PERSON_NBR))
						
							return false;
					
						if (this.ADDR_NBR == null) {
							if (other.ADDR_NBR != null)
								return false;
						
						} else if (!this.ADDR_NBR.equals(other.ADDR_NBR))
						
							return false;
					

		return true;
    }

	public void copyDataTo(poa_grantorsStruct other) {

		other.ROW_VERSION = this.ROW_VERSION;
	            other.DOC_ORI = this.DOC_ORI;
	            other.DOC_LOG = this.DOC_LOG;
	            other.DOC_SER = this.DOC_SER;
	            other.DOC_NBR = this.DOC_NBR;
	            other.PERSON_NBR = this.PERSON_NBR;
	            other.ADDR_NBR = this.ADDR_NBR;
	            
	}

	public void copyKeysDataTo(poa_grantorsStruct other) {

		other.DOC_ORI = this.DOC_ORI;
	            	other.DOC_LOG = this.DOC_LOG;
	            	other.DOC_SER = this.DOC_SER;
	            	other.DOC_NBR = this.DOC_NBR;
	            	other.PERSON_NBR = this.PERSON_NBR;
	            	other.ADDR_NBR = this.ADDR_NBR;
	            	
	}




	private String readString(ObjectInputStream dis) throws IOException{
		String strReturn = null;
		int length = 0;
        length = dis.readInt();
		if (length == -1) {
			strReturn = null;
		} else {
			if(length > commonByteArray_WIPO_PROJECTS_Gg_POA.length) {
				if(length < 1024 && commonByteArray_WIPO_PROJECTS_Gg_POA.length == 0) {
   					commonByteArray_WIPO_PROJECTS_Gg_POA = new byte[1024];
				} else {
   					commonByteArray_WIPO_PROJECTS_Gg_POA = new byte[2 * length];
   				}
			}
			dis.readFully(commonByteArray_WIPO_PROJECTS_Gg_POA, 0, length);
			strReturn = new String(commonByteArray_WIPO_PROJECTS_Gg_POA, 0, length, utf8Charset);
		}
		return strReturn;
	}

    private void writeString(String str, ObjectOutputStream dos) throws IOException{
		if(str == null) {
            dos.writeInt(-1);
		} else {
            byte[] byteArray = str.getBytes(utf8Charset);
	    	dos.writeInt(byteArray.length);
			dos.write(byteArray);
    	}
    }

    public void readData(ObjectInputStream dis) {

		synchronized(commonByteArrayLock_WIPO_PROJECTS_Gg_POA) {

        	try {

        		int length = 0;
		
						this.ROW_VERSION = (BigDecimal) dis.readObject();
					
					this.DOC_ORI = readString(dis);
					
					this.DOC_LOG = readString(dis);
					
						this.DOC_SER = (BigDecimal) dis.readObject();
					
						this.DOC_NBR = (BigDecimal) dis.readObject();
					
						this.PERSON_NBR = (BigDecimal) dis.readObject();
					
						this.ADDR_NBR = (BigDecimal) dis.readObject();
					
        	} catch (IOException e) {
	            throw new RuntimeException(e);

		
			} catch(ClassNotFoundException eCNFE) {
				 throw new RuntimeException(eCNFE);
		

        }

		

      }


    }

    public void writeData(ObjectOutputStream dos) {
        try {

		
					// BigDecimal
				
       			    	dos.writeObject(this.ROW_VERSION);
					
					// String
				
						writeString(this.DOC_ORI,dos);
					
					// String
				
						writeString(this.DOC_LOG,dos);
					
					// BigDecimal
				
       			    	dos.writeObject(this.DOC_SER);
					
					// BigDecimal
				
       			    	dos.writeObject(this.DOC_NBR);
					
					// BigDecimal
				
       			    	dos.writeObject(this.PERSON_NBR);
					
					// BigDecimal
				
       			    	dos.writeObject(this.ADDR_NBR);
					
        	} catch (IOException e) {
	            throw new RuntimeException(e);
        }


    }


    public String toString() {

		StringBuilder sb = new StringBuilder();
		sb.append(super.toString());
		sb.append("[");
		sb.append("ROW_VERSION="+String.valueOf(ROW_VERSION));
		sb.append(",DOC_ORI="+DOC_ORI);
		sb.append(",DOC_LOG="+DOC_LOG);
		sb.append(",DOC_SER="+String.valueOf(DOC_SER));
		sb.append(",DOC_NBR="+String.valueOf(DOC_NBR));
		sb.append(",PERSON_NBR="+String.valueOf(PERSON_NBR));
		sb.append(",ADDR_NBR="+String.valueOf(ADDR_NBR));
	    sb.append("]");

	    return sb.toString();
    }

    /**
     * Compare keys
     */
    public int compareTo(poa_grantorsStruct other) {

		int returnValue = -1;
		
						returnValue = checkNullsAndCompare(this.DOC_ORI, other.DOC_ORI);
						if(returnValue != 0) {
							return returnValue;
						}

					
						returnValue = checkNullsAndCompare(this.DOC_LOG, other.DOC_LOG);
						if(returnValue != 0) {
							return returnValue;
						}

					
						returnValue = checkNullsAndCompare(this.DOC_SER, other.DOC_SER);
						if(returnValue != 0) {
							return returnValue;
						}

					
						returnValue = checkNullsAndCompare(this.DOC_NBR, other.DOC_NBR);
						if(returnValue != 0) {
							return returnValue;
						}

					
						returnValue = checkNullsAndCompare(this.PERSON_NBR, other.PERSON_NBR);
						if(returnValue != 0) {
							return returnValue;
						}

					
						returnValue = checkNullsAndCompare(this.ADDR_NBR, other.ADDR_NBR);
						if(returnValue != 0) {
							return returnValue;
						}

					
	    return returnValue;
    }


    private int checkNullsAndCompare(Object object1, Object object2) {
        int returnValue = 0;
		if (object1 instanceof Comparable && object2 instanceof Comparable) {
            returnValue = ((Comparable) object1).compareTo(object2);
        } else if (object1 != null && object2 != null) {
            returnValue = compareStrings(object1.toString(), object2.toString());
        } else if (object1 == null && object2 != null) {
            returnValue = 1;
        } else if (object1 != null && object2 == null) {
            returnValue = -1;
        } else {
            returnValue = 0;
        }

        return returnValue;
    }

    private int compareStrings(String string1, String string2) {
        return string1.compareTo(string2);
    }


}

public static class row4Struct implements routines.system.IPersistableRow<row4Struct> {
    final static byte[] commonByteArrayLock_WIPO_PROJECTS_Gg_POA = new byte[0];
    static byte[] commonByteArray_WIPO_PROJECTS_Gg_POA = new byte[0];

	
			    public BigDecimal ROW_VERSION;

				public BigDecimal getROW_VERSION () {
					return this.ROW_VERSION;
				}
				
			    public String DOC_ORI;

				public String getDOC_ORI () {
					return this.DOC_ORI;
				}
				
			    public String DOC_LOG;

				public String getDOC_LOG () {
					return this.DOC_LOG;
				}
				
			    public BigDecimal DOC_SER;

				public BigDecimal getDOC_SER () {
					return this.DOC_SER;
				}
				
			    public BigDecimal DOC_NBR;

				public BigDecimal getDOC_NBR () {
					return this.DOC_NBR;
				}
				
			    public BigDecimal PERSON_NBR;

				public BigDecimal getPERSON_NBR () {
					return this.PERSON_NBR;
				}
				
			    public BigDecimal ADDR_NBR;

				public BigDecimal getADDR_NBR () {
					return this.ADDR_NBR;
				}
				
			    public String IND_SERVICE;

				public String getIND_SERVICE () {
					return this.IND_SERVICE;
				}
				
			    public String NOTES;

				public String getNOTES () {
					return this.NOTES;
				}
				



	private String readString(ObjectInputStream dis) throws IOException{
		String strReturn = null;
		int length = 0;
        length = dis.readInt();
		if (length == -1) {
			strReturn = null;
		} else {
			if(length > commonByteArray_WIPO_PROJECTS_Gg_POA.length) {
				if(length < 1024 && commonByteArray_WIPO_PROJECTS_Gg_POA.length == 0) {
   					commonByteArray_WIPO_PROJECTS_Gg_POA = new byte[1024];
				} else {
   					commonByteArray_WIPO_PROJECTS_Gg_POA = new byte[2 * length];
   				}
			}
			dis.readFully(commonByteArray_WIPO_PROJECTS_Gg_POA, 0, length);
			strReturn = new String(commonByteArray_WIPO_PROJECTS_Gg_POA, 0, length, utf8Charset);
		}
		return strReturn;
	}

    private void writeString(String str, ObjectOutputStream dos) throws IOException{
		if(str == null) {
            dos.writeInt(-1);
		} else {
            byte[] byteArray = str.getBytes(utf8Charset);
	    	dos.writeInt(byteArray.length);
			dos.write(byteArray);
    	}
    }

    public void readData(ObjectInputStream dis) {

		synchronized(commonByteArrayLock_WIPO_PROJECTS_Gg_POA) {

        	try {

        		int length = 0;
		
						this.ROW_VERSION = (BigDecimal) dis.readObject();
					
					this.DOC_ORI = readString(dis);
					
					this.DOC_LOG = readString(dis);
					
						this.DOC_SER = (BigDecimal) dis.readObject();
					
						this.DOC_NBR = (BigDecimal) dis.readObject();
					
						this.PERSON_NBR = (BigDecimal) dis.readObject();
					
						this.ADDR_NBR = (BigDecimal) dis.readObject();
					
					this.IND_SERVICE = readString(dis);
					
					this.NOTES = readString(dis);
					
        	} catch (IOException e) {
	            throw new RuntimeException(e);

		
			} catch(ClassNotFoundException eCNFE) {
				 throw new RuntimeException(eCNFE);
		

        }

		

      }


    }

    public void writeData(ObjectOutputStream dos) {
        try {

		
					// BigDecimal
				
       			    	dos.writeObject(this.ROW_VERSION);
					
					// String
				
						writeString(this.DOC_ORI,dos);
					
					// String
				
						writeString(this.DOC_LOG,dos);
					
					// BigDecimal
				
       			    	dos.writeObject(this.DOC_SER);
					
					// BigDecimal
				
       			    	dos.writeObject(this.DOC_NBR);
					
					// BigDecimal
				
       			    	dos.writeObject(this.PERSON_NBR);
					
					// BigDecimal
				
       			    	dos.writeObject(this.ADDR_NBR);
					
					// String
				
						writeString(this.IND_SERVICE,dos);
					
					// String
				
						writeString(this.NOTES,dos);
					
        	} catch (IOException e) {
	            throw new RuntimeException(e);
        }


    }


    public String toString() {

		StringBuilder sb = new StringBuilder();
		sb.append(super.toString());
		sb.append("[");
		sb.append("ROW_VERSION="+String.valueOf(ROW_VERSION));
		sb.append(",DOC_ORI="+DOC_ORI);
		sb.append(",DOC_LOG="+DOC_LOG);
		sb.append(",DOC_SER="+String.valueOf(DOC_SER));
		sb.append(",DOC_NBR="+String.valueOf(DOC_NBR));
		sb.append(",PERSON_NBR="+String.valueOf(PERSON_NBR));
		sb.append(",ADDR_NBR="+String.valueOf(ADDR_NBR));
		sb.append(",IND_SERVICE="+IND_SERVICE);
		sb.append(",NOTES="+NOTES);
	    sb.append("]");

	    return sb.toString();
    }

    /**
     * Compare keys
     */
    public int compareTo(row4Struct other) {

		int returnValue = -1;
		
	    return returnValue;
    }


    private int checkNullsAndCompare(Object object1, Object object2) {
        int returnValue = 0;
		if (object1 instanceof Comparable && object2 instanceof Comparable) {
            returnValue = ((Comparable) object1).compareTo(object2);
        } else if (object1 != null && object2 != null) {
            returnValue = compareStrings(object1.toString(), object2.toString());
        } else if (object1 == null && object2 != null) {
            returnValue = 1;
        } else if (object1 != null && object2 == null) {
            returnValue = -1;
        } else {
            returnValue = 0;
        }

        return returnValue;
    }

    private int compareStrings(String string1, String string2) {
        return string1.compareTo(string2);
    }


}

public static class after_tDBInput_2Struct implements routines.system.IPersistableRow<after_tDBInput_2Struct> {
    final static byte[] commonByteArrayLock_WIPO_PROJECTS_Gg_POA = new byte[0];
    static byte[] commonByteArray_WIPO_PROJECTS_Gg_POA = new byte[0];
	protected static final int DEFAULT_HASHCODE = 1;
    protected static final int PRIME = 31;
    protected int hashCode = DEFAULT_HASHCODE;
    public boolean hashCodeDirty = true;

    public String loopKey;



	
			    public BigDecimal ROW_VERSION;

				public BigDecimal getROW_VERSION () {
					return this.ROW_VERSION;
				}
				
			    public String DOC_ORI;

				public String getDOC_ORI () {
					return this.DOC_ORI;
				}
				
			    public String DOC_LOG;

				public String getDOC_LOG () {
					return this.DOC_LOG;
				}
				
			    public BigDecimal DOC_SER;

				public BigDecimal getDOC_SER () {
					return this.DOC_SER;
				}
				
			    public BigDecimal DOC_NBR;

				public BigDecimal getDOC_NBR () {
					return this.DOC_NBR;
				}
				
			    public BigDecimal PERSON_NBR;

				public BigDecimal getPERSON_NBR () {
					return this.PERSON_NBR;
				}
				
			    public BigDecimal ADDR_NBR;

				public BigDecimal getADDR_NBR () {
					return this.ADDR_NBR;
				}
				
			    public String IND_SERVICE;

				public String getIND_SERVICE () {
					return this.IND_SERVICE;
				}
				
			    public String NOTES;

				public String getNOTES () {
					return this.NOTES;
				}
				


	@Override
	public int hashCode() {
		if (this.hashCodeDirty) {
			final int prime = PRIME;
			int result = DEFAULT_HASHCODE;
	
						result = prime * result + ((this.DOC_ORI == null) ? 0 : this.DOC_ORI.hashCode());
					
						result = prime * result + ((this.DOC_LOG == null) ? 0 : this.DOC_LOG.hashCode());
					
						result = prime * result + ((this.DOC_SER == null) ? 0 : this.DOC_SER.hashCode());
					
						result = prime * result + ((this.DOC_NBR == null) ? 0 : this.DOC_NBR.hashCode());
					
						result = prime * result + ((this.PERSON_NBR == null) ? 0 : this.PERSON_NBR.hashCode());
					
						result = prime * result + ((this.ADDR_NBR == null) ? 0 : this.ADDR_NBR.hashCode());
					
    		this.hashCode = result;
    		this.hashCodeDirty = false;
		}
		return this.hashCode;
	}

	@Override
	public boolean equals(Object obj) {
		if (this == obj) return true;
		if (obj == null) return false;
		if (getClass() != obj.getClass()) return false;
		final after_tDBInput_2Struct other = (after_tDBInput_2Struct) obj;
		
						if (this.DOC_ORI == null) {
							if (other.DOC_ORI != null)
								return false;
						
						} else if (!this.DOC_ORI.equals(other.DOC_ORI))
						
							return false;
					
						if (this.DOC_LOG == null) {
							if (other.DOC_LOG != null)
								return false;
						
						} else if (!this.DOC_LOG.equals(other.DOC_LOG))
						
							return false;
					
						if (this.DOC_SER == null) {
							if (other.DOC_SER != null)
								return false;
						
						} else if (!this.DOC_SER.equals(other.DOC_SER))
						
							return false;
					
						if (this.DOC_NBR == null) {
							if (other.DOC_NBR != null)
								return false;
						
						} else if (!this.DOC_NBR.equals(other.DOC_NBR))
						
							return false;
					
						if (this.PERSON_NBR == null) {
							if (other.PERSON_NBR != null)
								return false;
						
						} else if (!this.PERSON_NBR.equals(other.PERSON_NBR))
						
							return false;
					
						if (this.ADDR_NBR == null) {
							if (other.ADDR_NBR != null)
								return false;
						
						} else if (!this.ADDR_NBR.equals(other.ADDR_NBR))
						
							return false;
					

		return true;
    }

	public void copyDataTo(after_tDBInput_2Struct other) {

		other.ROW_VERSION = this.ROW_VERSION;
	            other.DOC_ORI = this.DOC_ORI;
	            other.DOC_LOG = this.DOC_LOG;
	            other.DOC_SER = this.DOC_SER;
	            other.DOC_NBR = this.DOC_NBR;
	            other.PERSON_NBR = this.PERSON_NBR;
	            other.ADDR_NBR = this.ADDR_NBR;
	            other.IND_SERVICE = this.IND_SERVICE;
	            other.NOTES = this.NOTES;
	            
	}

	public void copyKeysDataTo(after_tDBInput_2Struct other) {

		other.DOC_ORI = this.DOC_ORI;
	            	other.DOC_LOG = this.DOC_LOG;
	            	other.DOC_SER = this.DOC_SER;
	            	other.DOC_NBR = this.DOC_NBR;
	            	other.PERSON_NBR = this.PERSON_NBR;
	            	other.ADDR_NBR = this.ADDR_NBR;
	            	
	}




	private String readString(ObjectInputStream dis) throws IOException{
		String strReturn = null;
		int length = 0;
        length = dis.readInt();
		if (length == -1) {
			strReturn = null;
		} else {
			if(length > commonByteArray_WIPO_PROJECTS_Gg_POA.length) {
				if(length < 1024 && commonByteArray_WIPO_PROJECTS_Gg_POA.length == 0) {
   					commonByteArray_WIPO_PROJECTS_Gg_POA = new byte[1024];
				} else {
   					commonByteArray_WIPO_PROJECTS_Gg_POA = new byte[2 * length];
   				}
			}
			dis.readFully(commonByteArray_WIPO_PROJECTS_Gg_POA, 0, length);
			strReturn = new String(commonByteArray_WIPO_PROJECTS_Gg_POA, 0, length, utf8Charset);
		}
		return strReturn;
	}

    private void writeString(String str, ObjectOutputStream dos) throws IOException{
		if(str == null) {
            dos.writeInt(-1);
		} else {
            byte[] byteArray = str.getBytes(utf8Charset);
	    	dos.writeInt(byteArray.length);
			dos.write(byteArray);
    	}
    }

    public void readData(ObjectInputStream dis) {

		synchronized(commonByteArrayLock_WIPO_PROJECTS_Gg_POA) {

        	try {

        		int length = 0;
		
						this.ROW_VERSION = (BigDecimal) dis.readObject();
					
					this.DOC_ORI = readString(dis);
					
					this.DOC_LOG = readString(dis);
					
						this.DOC_SER = (BigDecimal) dis.readObject();
					
						this.DOC_NBR = (BigDecimal) dis.readObject();
					
						this.PERSON_NBR = (BigDecimal) dis.readObject();
					
						this.ADDR_NBR = (BigDecimal) dis.readObject();
					
					this.IND_SERVICE = readString(dis);
					
					this.NOTES = readString(dis);
					
        	} catch (IOException e) {
	            throw new RuntimeException(e);

		
			} catch(ClassNotFoundException eCNFE) {
				 throw new RuntimeException(eCNFE);
		

        }

		

      }


    }

    public void writeData(ObjectOutputStream dos) {
        try {

		
					// BigDecimal
				
       			    	dos.writeObject(this.ROW_VERSION);
					
					// String
				
						writeString(this.DOC_ORI,dos);
					
					// String
				
						writeString(this.DOC_LOG,dos);
					
					// BigDecimal
				
       			    	dos.writeObject(this.DOC_SER);
					
					// BigDecimal
				
       			    	dos.writeObject(this.DOC_NBR);
					
					// BigDecimal
				
       			    	dos.writeObject(this.PERSON_NBR);
					
					// BigDecimal
				
       			    	dos.writeObject(this.ADDR_NBR);
					
					// String
				
						writeString(this.IND_SERVICE,dos);
					
					// String
				
						writeString(this.NOTES,dos);
					
        	} catch (IOException e) {
	            throw new RuntimeException(e);
        }


    }


    public String toString() {

		StringBuilder sb = new StringBuilder();
		sb.append(super.toString());
		sb.append("[");
		sb.append("ROW_VERSION="+String.valueOf(ROW_VERSION));
		sb.append(",DOC_ORI="+DOC_ORI);
		sb.append(",DOC_LOG="+DOC_LOG);
		sb.append(",DOC_SER="+String.valueOf(DOC_SER));
		sb.append(",DOC_NBR="+String.valueOf(DOC_NBR));
		sb.append(",PERSON_NBR="+String.valueOf(PERSON_NBR));
		sb.append(",ADDR_NBR="+String.valueOf(ADDR_NBR));
		sb.append(",IND_SERVICE="+IND_SERVICE);
		sb.append(",NOTES="+NOTES);
	    sb.append("]");

	    return sb.toString();
    }

    /**
     * Compare keys
     */
    public int compareTo(after_tDBInput_2Struct other) {

		int returnValue = -1;
		
						returnValue = checkNullsAndCompare(this.DOC_ORI, other.DOC_ORI);
						if(returnValue != 0) {
							return returnValue;
						}

					
						returnValue = checkNullsAndCompare(this.DOC_LOG, other.DOC_LOG);
						if(returnValue != 0) {
							return returnValue;
						}

					
						returnValue = checkNullsAndCompare(this.DOC_SER, other.DOC_SER);
						if(returnValue != 0) {
							return returnValue;
						}

					
						returnValue = checkNullsAndCompare(this.DOC_NBR, other.DOC_NBR);
						if(returnValue != 0) {
							return returnValue;
						}

					
						returnValue = checkNullsAndCompare(this.PERSON_NBR, other.PERSON_NBR);
						if(returnValue != 0) {
							return returnValue;
						}

					
						returnValue = checkNullsAndCompare(this.ADDR_NBR, other.ADDR_NBR);
						if(returnValue != 0) {
							return returnValue;
						}

					
	    return returnValue;
    }


    private int checkNullsAndCompare(Object object1, Object object2) {
        int returnValue = 0;
		if (object1 instanceof Comparable && object2 instanceof Comparable) {
            returnValue = ((Comparable) object1).compareTo(object2);
        } else if (object1 != null && object2 != null) {
            returnValue = compareStrings(object1.toString(), object2.toString());
        } else if (object1 == null && object2 != null) {
            returnValue = 1;
        } else if (object1 != null && object2 == null) {
            returnValue = -1;
        } else {
            returnValue = 0;
        }

        return returnValue;
    }

    private int compareStrings(String string1, String string2) {
        return string1.compareTo(string2);
    }


}
public void tDBInput_2Process(final java.util.Map<String, Object> globalMap) throws TalendException {
	globalMap.put("tDBInput_2_SUBPROCESS_STATE", 0);

 final boolean execStat = this.execStat;
	
		String iterateId = "";
	
	
	String currentComponent = "";
	java.util.Map<String, Object> resourceMap = new java.util.HashMap<String, Object>();

	try {
			// TDI-39566 avoid throwing an useless Exception
			boolean resumeIt = true;
			if (globalResumeTicket == false && resumeEntryMethodName != null) {
				String currentMethodName = new java.lang.Exception().getStackTrace()[0].getMethodName();
				resumeIt = resumeEntryMethodName.equals(currentMethodName);
			}
			if (resumeIt || globalResumeTicket) { //start the resume
				globalResumeTicket = true;


		tDBInput_3Process(globalMap);

		row4Struct row4 = new row4Struct();
poa_grantorsStruct poa_grantors = new poa_grantorsStruct();
row7Struct row7 = new row7Struct();






	
	/**
	 * [tLogRow_4 begin ] start
	 */

	

	
		
		ok_Hash.put("tLogRow_4", false);
		start_Hash.put("tLogRow_4", System.currentTimeMillis());
		
	
	currentComponent="tLogRow_4";

	
					if(execStat) {
						runStat.updateStatOnConnection(resourceMap,iterateId,0,0,"row7");
					}
				
		int tos_count_tLogRow_4 = 0;
		

	///////////////////////
	
		final String OUTPUT_FIELD_SEPARATOR_tLogRow_4 = "|";
		java.io.PrintStream consoleOut_tLogRow_4 = null;	

 		StringBuilder strBuffer_tLogRow_4 = null;
		int nb_line_tLogRow_4 = 0;
///////////////////////    			



 



/**
 * [tLogRow_4 begin ] stop
 */



	
	/**
	 * [tDBOutput_2 begin ] start
	 */

	

	
		
		ok_Hash.put("tDBOutput_2", false);
		start_Hash.put("tDBOutput_2", System.currentTimeMillis());
		
	
	currentComponent="tDBOutput_2";

	
					if(execStat) {
						runStat.updateStatOnConnection(resourceMap,iterateId,0,0,"poa_grantors");
					}
				
		int tos_count_tDBOutput_2 = 0;
		



int nb_line_tDBOutput_2 = 0;
int nb_line_update_tDBOutput_2 = 0;
int nb_line_inserted_tDBOutput_2 = 0;
int nb_line_deleted_tDBOutput_2 = 0;
int nb_line_rejected_tDBOutput_2 = 0;

int deletedCount_tDBOutput_2=0;
int updatedCount_tDBOutput_2=0;
int insertedCount_tDBOutput_2=0;
int rejectedCount_tDBOutput_2=0;
String dbschema_tDBOutput_2 = null;
String tableName_tDBOutput_2 = null;
boolean whetherReject_tDBOutput_2 = false;

java.util.Calendar calendar_tDBOutput_2 = java.util.Calendar.getInstance();
long year1_tDBOutput_2 = TalendDate.parseDate("yyyy-MM-dd","0001-01-01").getTime();
long year2_tDBOutput_2 = TalendDate.parseDate("yyyy-MM-dd","1753-01-01").getTime();
long year10000_tDBOutput_2 = TalendDate.parseDate("yyyy-MM-dd HH:mm:ss","9999-12-31 24:00:00").getTime();
long date_tDBOutput_2;

java.util.Calendar calendar_datetimeoffset_tDBOutput_2 = java.util.Calendar.getInstance(java.util.TimeZone.getTimeZone("UTC"));

	
java.sql.Connection conn_tDBOutput_2 = null;
String dbUser_tDBOutput_2 = null;
    dbschema_tDBOutput_2 = "ADMIN";
    String driverClass_tDBOutput_2 = "net.sourceforge.jtds.jdbc.Driver";
	
    java.lang.Class.forName(driverClass_tDBOutput_2);
    String port_tDBOutput_2 = "1433";
    String dbname_tDBOutput_2 = "MARCAS_PY" ;
    String url_tDBOutput_2 = "jdbc:jtds:sqlserver://" + "localhost" ; 
    if (!"".equals(port_tDBOutput_2)) {
    	url_tDBOutput_2 += ":" + "1433";
    }
    if (!"".equals(dbname_tDBOutput_2)) {
				url_tDBOutput_2 += "//" + "MARCAS_PY"; 
	
    }
    url_tDBOutput_2 += ";appName=" + projectName + ";" + "";
    dbUser_tDBOutput_2 = "ADMIN";

 
	final String decryptedPassword_tDBOutput_2 = routines.system.PasswordEncryptUtil.decryptPassword("enc:routine.encryption.key.v1:lZc+1pcOBFWSjmJygJsufy0bTmX5MldcLFFgzvNmCovo");

    String dbPwd_tDBOutput_2 = decryptedPassword_tDBOutput_2;	
    conn_tDBOutput_2 = java.sql.DriverManager.getConnection(url_tDBOutput_2,dbUser_tDBOutput_2,dbPwd_tDBOutput_2);
	
		resourceMap.put("conn_tDBOutput_2", conn_tDBOutput_2);
	
        conn_tDBOutput_2.setAutoCommit(false);
        int commitEvery_tDBOutput_2 = 10000;
        int commitCounter_tDBOutput_2 = 0;


if(dbschema_tDBOutput_2 == null || dbschema_tDBOutput_2.trim().length() == 0) {
    tableName_tDBOutput_2 = "IP_POA_GRANTORS";
} else {
    tableName_tDBOutput_2 = dbschema_tDBOutput_2 + "].[" + "IP_POA_GRANTORS";
}
	int count_tDBOutput_2=0;

            try (java.sql.Statement stmtClear_tDBOutput_2 = conn_tDBOutput_2.createStatement()) {
                stmtClear_tDBOutput_2.executeUpdate("DELETE FROM [" + tableName_tDBOutput_2 + "]");
            }
        String insert_tDBOutput_2 = "INSERT INTO [" + tableName_tDBOutput_2 + "] ([ROW_VERSION],[DOC_ORI],[DOC_LOG],[DOC_SER],[DOC_NBR],[PERSON_NBR],[ADDR_NBR]) VALUES (?,?,?,?,?,?,?)";
        java.sql.PreparedStatement pstmt_tDBOutput_2 = conn_tDBOutput_2.prepareStatement(insert_tDBOutput_2);
        resourceMap.put("pstmt_tDBOutput_2", pstmt_tDBOutput_2);


 



/**
 * [tDBOutput_2 begin ] stop
 */



	
	/**
	 * [tMap_2 begin ] start
	 */

	

	
		
		ok_Hash.put("tMap_2", false);
		start_Hash.put("tMap_2", System.currentTimeMillis());
		
	
	currentComponent="tMap_2";

	
					if(execStat) {
						runStat.updateStatOnConnection(resourceMap,iterateId,0,0,"row4");
					}
				
		int tos_count_tMap_2 = 0;
		




// ###############################
// # Lookup's keys initialization
	
		org.talend.designer.components.lookup.memory.AdvancedMemoryLookup<row5Struct> tHash_Lookup_row5 = (org.talend.designer.components.lookup.memory.AdvancedMemoryLookup<row5Struct>) 
				((org.talend.designer.components.lookup.memory.AdvancedMemoryLookup<row5Struct>) 
					globalMap.get( "tHash_Lookup_row5" ))
					;					
					
	

row5Struct row5HashKey = new row5Struct();
row5Struct row5Default = new row5Struct();
// ###############################        

// ###############################
// # Vars initialization
class  Var__tMap_2__Struct  {
}
Var__tMap_2__Struct Var__tMap_2 = new Var__tMap_2__Struct();
// ###############################

// ###############################
// # Outputs initialization
poa_grantorsStruct poa_grantors_tmp = new poa_grantorsStruct();
// ###############################

        
        



        









 



/**
 * [tMap_2 begin ] stop
 */



	
	/**
	 * [tDBInput_2 begin ] start
	 */

	

	
		
		ok_Hash.put("tDBInput_2", false);
		start_Hash.put("tDBInput_2", System.currentTimeMillis());
		
	
	currentComponent="tDBInput_2";

	
		int tos_count_tDBInput_2 = 0;
		
	
    
	
			org.talend.designer.components.util.mssql.MSSqlGenerateTimestampUtil mssqlGTU_tDBInput_2 = org.talend.designer.components.util.mssql.MSSqlUtilFactory.getMSSqlGenerateTimestampUtil();
			
			java.util.List<String> talendToDBList_tDBInput_2 = new java.util.ArrayList();
			String[] talendToDBArray_tDBInput_2  = new String[]{"FLOAT","NUMERIC","NUMERIC IDENTITY","DECIMAL","DECIMAL IDENTITY","REAL"}; 
			java.util.Collections.addAll(talendToDBList_tDBInput_2, talendToDBArray_tDBInput_2); 
		    int nb_line_tDBInput_2 = 0;
		    java.sql.Connection conn_tDBInput_2 = null;
				String driverClass_tDBInput_2 = "net.sourceforge.jtds.jdbc.Driver";
			    java.lang.Class jdbcclazz_tDBInput_2 = java.lang.Class.forName(driverClass_tDBInput_2);
				String dbUser_tDBInput_2 = "ADMIN";
				
				 
	final String decryptedPassword_tDBInput_2 = routines.system.PasswordEncryptUtil.decryptPassword("enc:routine.encryption.key.v1:I4I6NT9zEWkmZ86ApDLOMq3/2bbKZnR54rrOTkSsmRY5");
				
				String dbPwd_tDBInput_2 = decryptedPassword_tDBInput_2;
				
		    String port_tDBInput_2 = "1433";
		    String dbname_tDBInput_2 = "MARCAS_PY" ;
			String url_tDBInput_2 = "jdbc:jtds:sqlserver://" + "localhost" ;
		    if (!"".equals(port_tDBInput_2)) {
		    	url_tDBInput_2 += ":" + "1433";
		    }
		    if (!"".equals(dbname_tDBInput_2)) {
				url_tDBInput_2 += "//" + "MARCAS_PY"; 
		    }
		    url_tDBInput_2 += ";appName=" + projectName + ";" + "";
		    String dbschema_tDBInput_2 = "ADMIN";
				
				conn_tDBInput_2 = java.sql.DriverManager.getConnection(url_tDBInput_2,dbUser_tDBInput_2,dbPwd_tDBInput_2);
		        
		    
			java.sql.Statement stmt_tDBInput_2 = conn_tDBInput_2.createStatement();

		    String dbquery_tDBInput_2 = "SELECT ADMIN.IP_USERDOC_NEW_OWNERS.ROW_VERSION,\n		ADMIN.IP_USERDOC_NEW_OWNERS.DOC_ORI,\n		ADMIN.IP_USERDOC_NEW_OWNERS.DO"
+"C_LOG,\n		ADMIN.IP_USERDOC_NEW_OWNERS.DOC_SER,\n		ADMIN.IP_USERDOC_NEW_OWNERS.DOC_NBR,\n		ADMIN.IP_USERDOC_NEW_OWNERS.PERSO"
+"N_NBR,\n		ADMIN.IP_USERDOC_NEW_OWNERS.ADDR_NBR,\n		ADMIN.IP_USERDOC_NEW_OWNERS.IND_SERVICE,\n		ADMIN.IP_USERDOC_NEW_OWNERS."
+"NOTES\nFROM	ADMIN.IP_USERDOC_NEW_OWNERS";
		    

            	globalMap.put("tDBInput_2_QUERY",dbquery_tDBInput_2);
		    java.sql.ResultSet rs_tDBInput_2 = null;

		    try {
		    	rs_tDBInput_2 = stmt_tDBInput_2.executeQuery(dbquery_tDBInput_2);
		    	java.sql.ResultSetMetaData rsmd_tDBInput_2 = rs_tDBInput_2.getMetaData();
		    	int colQtyInRs_tDBInput_2 = rsmd_tDBInput_2.getColumnCount();

		    String tmpContent_tDBInput_2 = null;
		    
		    
		    while (rs_tDBInput_2.next()) {
		        nb_line_tDBInput_2++;
		        
							if(colQtyInRs_tDBInput_2 < 1) {
								row4.ROW_VERSION = null;
							} else {
		                          
            row4.ROW_VERSION = rs_tDBInput_2.getBigDecimal(1);
            if(rs_tDBInput_2.wasNull()){
                    throw new RuntimeException("Null value in non-Nullable column");
            }
		                    }
							if(colQtyInRs_tDBInput_2 < 2) {
								row4.DOC_ORI = null;
							} else {
	                         		
           		tmpContent_tDBInput_2 = rs_tDBInput_2.getString(2);
            if(tmpContent_tDBInput_2 != null) {
            	if (talendToDBList_tDBInput_2 .contains(rsmd_tDBInput_2.getColumnTypeName(2).toUpperCase(java.util.Locale.ENGLISH))) {
            		row4.DOC_ORI = FormatterUtils.formatUnwithE(tmpContent_tDBInput_2);
            	} else {
                	row4.DOC_ORI = tmpContent_tDBInput_2;
                }
            } else {
                row4.DOC_ORI = null;
            }
		                    }
							if(colQtyInRs_tDBInput_2 < 3) {
								row4.DOC_LOG = null;
							} else {
	                         		
           		tmpContent_tDBInput_2 = rs_tDBInput_2.getString(3);
            if(tmpContent_tDBInput_2 != null) {
            	if (talendToDBList_tDBInput_2 .contains(rsmd_tDBInput_2.getColumnTypeName(3).toUpperCase(java.util.Locale.ENGLISH))) {
            		row4.DOC_LOG = FormatterUtils.formatUnwithE(tmpContent_tDBInput_2);
            	} else {
                	row4.DOC_LOG = tmpContent_tDBInput_2;
                }
            } else {
                row4.DOC_LOG = null;
            }
		                    }
							if(colQtyInRs_tDBInput_2 < 4) {
								row4.DOC_SER = null;
							} else {
		                          
            row4.DOC_SER = rs_tDBInput_2.getBigDecimal(4);
            if(rs_tDBInput_2.wasNull()){
                    throw new RuntimeException("Null value in non-Nullable column");
            }
		                    }
							if(colQtyInRs_tDBInput_2 < 5) {
								row4.DOC_NBR = null;
							} else {
		                          
            row4.DOC_NBR = rs_tDBInput_2.getBigDecimal(5);
            if(rs_tDBInput_2.wasNull()){
                    throw new RuntimeException("Null value in non-Nullable column");
            }
		                    }
							if(colQtyInRs_tDBInput_2 < 6) {
								row4.PERSON_NBR = null;
							} else {
		                          
            row4.PERSON_NBR = rs_tDBInput_2.getBigDecimal(6);
            if(rs_tDBInput_2.wasNull()){
                    throw new RuntimeException("Null value in non-Nullable column");
            }
		                    }
							if(colQtyInRs_tDBInput_2 < 7) {
								row4.ADDR_NBR = null;
							} else {
		                          
            row4.ADDR_NBR = rs_tDBInput_2.getBigDecimal(7);
            if(rs_tDBInput_2.wasNull()){
                    throw new RuntimeException("Null value in non-Nullable column");
            }
		                    }
							if(colQtyInRs_tDBInput_2 < 8) {
								row4.IND_SERVICE = null;
							} else {
	                         		
           		tmpContent_tDBInput_2 = rs_tDBInput_2.getString(8);
            if(tmpContent_tDBInput_2 != null) {
            	if (talendToDBList_tDBInput_2 .contains(rsmd_tDBInput_2.getColumnTypeName(8).toUpperCase(java.util.Locale.ENGLISH))) {
            		row4.IND_SERVICE = FormatterUtils.formatUnwithE(tmpContent_tDBInput_2);
            	} else {
                	row4.IND_SERVICE = tmpContent_tDBInput_2;
                }
            } else {
                row4.IND_SERVICE = null;
            }
		                    }
							if(colQtyInRs_tDBInput_2 < 9) {
								row4.NOTES = null;
							} else {
	                         		
           		tmpContent_tDBInput_2 = rs_tDBInput_2.getString(9);
            if(tmpContent_tDBInput_2 != null) {
            	if (talendToDBList_tDBInput_2 .contains(rsmd_tDBInput_2.getColumnTypeName(9).toUpperCase(java.util.Locale.ENGLISH))) {
            		row4.NOTES = FormatterUtils.formatUnwithE(tmpContent_tDBInput_2);
            	} else {
                	row4.NOTES = tmpContent_tDBInput_2;
                }
            } else {
                row4.NOTES = null;
            }
		                    }
					





 



/**
 * [tDBInput_2 begin ] stop
 */
	
	/**
	 * [tDBInput_2 main ] start
	 */

	

	
	
	currentComponent="tDBInput_2";

	

 


	tos_count_tDBInput_2++;

/**
 * [tDBInput_2 main ] stop
 */
	
	/**
	 * [tDBInput_2 process_data_begin ] start
	 */

	

	
	
	currentComponent="tDBInput_2";

	

 



/**
 * [tDBInput_2 process_data_begin ] stop
 */

	
	/**
	 * [tMap_2 main ] start
	 */

	

	
	
	currentComponent="tMap_2";

	
					if(execStat){
						runStat.updateStatOnConnection(iterateId,1,1
						
							,"row4"
						
						);
					}
					

		
		
		boolean hasCasePrimitiveKeyWithNull_tMap_2 = false;
		
        // ###############################
        // # Input tables (lookups)
		  boolean rejectedInnerJoin_tMap_2 = false;
		  boolean mainRowRejected_tMap_2 = false;
            				    								  
		

				///////////////////////////////////////////////
				// Starting Lookup Table "row5" 
				///////////////////////////////////////////////


				
				
                            
 					    boolean forceLooprow5 = false;
       		  	    	
       		  	    	
 							row5Struct row5ObjectFromLookup = null;
                          
		           		  	if(!rejectedInnerJoin_tMap_2) { // G_TM_M_020

								
								hasCasePrimitiveKeyWithNull_tMap_2 = false;
								
                        		    		    row5HashKey.DOC_ORI = row4.DOC_ORI ;
                        		    		
                        		    		    row5HashKey.DOC_LOG = row4.DOC_LOG ;
                        		    		
                        		    		    row5HashKey.DOC_SER = row4.DOC_SER ;
                        		    		
                        		    		    row5HashKey.DOC_NBR = row4.DOC_NBR ;
                        		    		

								
		                        	row5HashKey.hashCodeDirty = true;
                        		
	  					
	  							
			  					
			  					
	  					
		  							tHash_Lookup_row5.lookup( row5HashKey );

	  							

	  							

 								
								  
								  if(!tHash_Lookup_row5.hasNext()) { // G_TM_M_090

  								
		  				
	  								
			  							rejectedInnerJoin_tMap_2 = true;
	  								
						
									
  									  		
 								
								  
								  } // G_TM_M_090

  								



							} // G_TM_M_020
			           		  	  
							
				           		if(tHash_Lookup_row5 != null && tHash_Lookup_row5.getCount(row5HashKey) > 1) { // G 071
			  							
			  						
									 		
									//System.out.println("WARNING: UNIQUE MATCH is configured for the lookup 'row5' and it contains more one result from keys :  row5.DOC_ORI = '" + row5HashKey.DOC_ORI + "', row5.DOC_LOG = '" + row5HashKey.DOC_LOG + "', row5.DOC_SER = '" + row5HashKey.DOC_SER + "', row5.DOC_NBR = '" + row5HashKey.DOC_NBR + "'");
								} // G 071
							

							row5Struct row5 = null;
                    		  	 
							   
                    		  	 
	       		  	    	row5Struct fromLookup_row5 = null;
							row5 = row5Default;
										 
							
								 
							
							
								if (tHash_Lookup_row5 !=null && tHash_Lookup_row5.hasNext()) { // G 099
								
							
								
								fromLookup_row5 = tHash_Lookup_row5.next();

							
							
								} // G 099
							
							

							if(fromLookup_row5 != null) {
								row5 = fromLookup_row5;
							}
							
							
							
			  							
								
	                    		  	
		                    
	            	
	            	
	            // ###############################
        { // start of Var scope
        
	        // ###############################
        	// # Vars tables
        
Var__tMap_2__Struct Var = Var__tMap_2;// ###############################
        // ###############################
        // # Output tables

poa_grantors = null;

if(!rejectedInnerJoin_tMap_2 ) {

// # Output table : 'poa_grantors'
poa_grantors_tmp.ROW_VERSION = row4.ROW_VERSION;
poa_grantors_tmp.DOC_ORI = row4.DOC_ORI;
poa_grantors_tmp.DOC_LOG = row4.DOC_LOG;
poa_grantors_tmp.DOC_SER = row4.DOC_SER;
poa_grantors_tmp.DOC_NBR = row4.DOC_NBR;
poa_grantors_tmp.PERSON_NBR = row4.PERSON_NBR;
poa_grantors_tmp.ADDR_NBR = row4.ADDR_NBR;
poa_grantors = poa_grantors_tmp;
}  // closing inner join bracket (2)
// ###############################

} // end of Var scope

rejectedInnerJoin_tMap_2 = false;










 


	tos_count_tMap_2++;

/**
 * [tMap_2 main ] stop
 */
	
	/**
	 * [tMap_2 process_data_begin ] start
	 */

	

	
	
	currentComponent="tMap_2";

	

 



/**
 * [tMap_2 process_data_begin ] stop
 */
// Start of branch "poa_grantors"
if(poa_grantors != null) { 
			row7 = null;



	
	/**
	 * [tDBOutput_2 main ] start
	 */

	

	
	
	currentComponent="tDBOutput_2";

	
					if(execStat){
						runStat.updateStatOnConnection(iterateId,1,1
						
							,"poa_grantors"
						
						);
					}
					



            row7 = null;
        whetherReject_tDBOutput_2 = false;
            try {
                    pstmt_tDBOutput_2.setBigDecimal(1, poa_grantors.ROW_VERSION);

                    if(poa_grantors.DOC_ORI == null) {
pstmt_tDBOutput_2.setNull(2, java.sql.Types.VARCHAR);
} else {pstmt_tDBOutput_2.setString(2, poa_grantors.DOC_ORI);
}

                    if(poa_grantors.DOC_LOG == null) {
pstmt_tDBOutput_2.setNull(3, java.sql.Types.VARCHAR);
} else {pstmt_tDBOutput_2.setString(3, poa_grantors.DOC_LOG);
}

                    pstmt_tDBOutput_2.setBigDecimal(4, poa_grantors.DOC_SER);

                    pstmt_tDBOutput_2.setBigDecimal(5, poa_grantors.DOC_NBR);

                    pstmt_tDBOutput_2.setBigDecimal(6, poa_grantors.PERSON_NBR);

                    pstmt_tDBOutput_2.setBigDecimal(7, poa_grantors.ADDR_NBR);


                nb_line_tDBOutput_2++;
                insertedCount_tDBOutput_2 = insertedCount_tDBOutput_2 + pstmt_tDBOutput_2.executeUpdate();
            } catch(java.lang.Exception e) {
                whetherReject_tDBOutput_2 = true;
                        row7 = new row7Struct();
                            row7.ROW_VERSION = poa_grantors.ROW_VERSION;
                            row7.DOC_ORI = poa_grantors.DOC_ORI;
                            row7.DOC_LOG = poa_grantors.DOC_LOG;
                            row7.DOC_SER = poa_grantors.DOC_SER;
                            row7.DOC_NBR = poa_grantors.DOC_NBR;
                            row7.PERSON_NBR = poa_grantors.PERSON_NBR;
                            row7.ADDR_NBR = poa_grantors.ADDR_NBR;
                        rejectedCount_tDBOutput_2 = rejectedCount_tDBOutput_2 + 1;
                        row7.errorCode = ((java.sql.SQLException)e).getSQLState();
                        row7.errorMessage = e.getMessage() + " - Line: " + tos_count_tDBOutput_2;
            }
            if(!whetherReject_tDBOutput_2) {
            }
            	//////////batch execute by batch size///////
            	class LimitBytesHelper_tDBOutput_2{
            		public int limitBytePart1(int counter,java.sql.PreparedStatement pstmt_tDBOutput_2) throws Exception {
                try {
						
						for(int countEach_tDBOutput_2: pstmt_tDBOutput_2.executeBatch()) {
							if(countEach_tDBOutput_2 == -2 || countEach_tDBOutput_2 == -3) {
								break;
							}
							counter += countEach_tDBOutput_2;
						}
						
                }catch (java.sql.BatchUpdateException e){
                	
                	int countSum_tDBOutput_2 = 0;
					for(int countEach_tDBOutput_2: e.getUpdateCounts()) {
						counter += (countEach_tDBOutput_2 < 0 ? 0 : countEach_tDBOutput_2);
					}
				
            	    	
                		System.err.println(e.getMessage());
                	
               			 }
    				return counter;
            	}
            	
            	public int limitBytePart2(int counter,java.sql.PreparedStatement pstmt_tDBOutput_2) throws Exception {
                try {
                		
						for(int countEach_tDBOutput_2: pstmt_tDBOutput_2.executeBatch()) {
							if(countEach_tDBOutput_2 == -2 || countEach_tDBOutput_2 == -3) {
								break;
							}
							counter += countEach_tDBOutput_2;
						}
						
                }catch (java.sql.BatchUpdateException e){
                	
                	
					for(int countEach_tDBOutput_2: e.getUpdateCounts()) {
						counter += (countEach_tDBOutput_2 < 0 ? 0 : countEach_tDBOutput_2);
					}
					
            	    	
                        System.err.println(e.getMessage());
                	
                		}	
                	return counter;	
            	}
            }

    	////////////commit every////////////
    			
    		    commitCounter_tDBOutput_2++;
                if(commitEvery_tDBOutput_2 <= commitCounter_tDBOutput_2) {
                	
                	conn_tDBOutput_2.commit();
            		
                	commitCounter_tDBOutput_2=0;
                }

 


	tos_count_tDBOutput_2++;

/**
 * [tDBOutput_2 main ] stop
 */
	
	/**
	 * [tDBOutput_2 process_data_begin ] start
	 */

	

	
	
	currentComponent="tDBOutput_2";

	

 



/**
 * [tDBOutput_2 process_data_begin ] stop
 */
// Start of branch "row7"
if(row7 != null) { 



	
	/**
	 * [tLogRow_4 main ] start
	 */

	

	
	
	currentComponent="tLogRow_4";

	
					if(execStat){
						runStat.updateStatOnConnection(iterateId,1,1
						
							,"row7"
						
						);
					}
					
///////////////////////		
						



				strBuffer_tLogRow_4 = new StringBuilder();




   				
	    		if(row7.ROW_VERSION != null) { //              
                    							
       
				strBuffer_tLogRow_4.append(
								row7.ROW_VERSION.setScale(0, java.math.RoundingMode.HALF_UP).toPlainString()				
				);


							
	    		} //  			

    			strBuffer_tLogRow_4.append("|");
    			


   				
	    		if(row7.DOC_ORI != null) { //              
                    							
       
				strBuffer_tLogRow_4.append(
				                String.valueOf(row7.DOC_ORI)							
				);


							
	    		} //  			

    			strBuffer_tLogRow_4.append("|");
    			


   				
	    		if(row7.DOC_LOG != null) { //              
                    							
       
				strBuffer_tLogRow_4.append(
				                String.valueOf(row7.DOC_LOG)							
				);


							
	    		} //  			

    			strBuffer_tLogRow_4.append("|");
    			


   				
	    		if(row7.DOC_SER != null) { //              
                    							
       
				strBuffer_tLogRow_4.append(
								row7.DOC_SER.setScale(0, java.math.RoundingMode.HALF_UP).toPlainString()				
				);


							
	    		} //  			

    			strBuffer_tLogRow_4.append("|");
    			


   				
	    		if(row7.DOC_NBR != null) { //              
                    							
       
				strBuffer_tLogRow_4.append(
								row7.DOC_NBR.setScale(0, java.math.RoundingMode.HALF_UP).toPlainString()				
				);


							
	    		} //  			

    			strBuffer_tLogRow_4.append("|");
    			


   				
	    		if(row7.PERSON_NBR != null) { //              
                    							
       
				strBuffer_tLogRow_4.append(
								row7.PERSON_NBR.setScale(0, java.math.RoundingMode.HALF_UP).toPlainString()				
				);


							
	    		} //  			

    			strBuffer_tLogRow_4.append("|");
    			


   				
	    		if(row7.ADDR_NBR != null) { //              
                    							
       
				strBuffer_tLogRow_4.append(
								row7.ADDR_NBR.setScale(0, java.math.RoundingMode.HALF_UP).toPlainString()				
				);


							
	    		} //  			

    			strBuffer_tLogRow_4.append("|");
    			


   				
	    		if(row7.errorCode != null) { //              
                    							
       
				strBuffer_tLogRow_4.append(
				                String.valueOf(row7.errorCode)							
				);


							
	    		} //  			

    			strBuffer_tLogRow_4.append("|");
    			


   				
	    		if(row7.errorMessage != null) { //              
                    							
       
				strBuffer_tLogRow_4.append(
				                String.valueOf(row7.errorMessage)							
				);


							
	    		} //  			
 

                    if (globalMap.get("tLogRow_CONSOLE")!=null)
                    {
                    	consoleOut_tLogRow_4 = (java.io.PrintStream) globalMap.get("tLogRow_CONSOLE");
                    }
                    else
                    {
                    	consoleOut_tLogRow_4 = new java.io.PrintStream(new java.io.BufferedOutputStream(System.out));
                    	globalMap.put("tLogRow_CONSOLE",consoleOut_tLogRow_4);
                    }
                    consoleOut_tLogRow_4.println(strBuffer_tLogRow_4.toString());
                    consoleOut_tLogRow_4.flush();
                    nb_line_tLogRow_4++;
//////

//////                    
                    
///////////////////////    			

 


	tos_count_tLogRow_4++;

/**
 * [tLogRow_4 main ] stop
 */
	
	/**
	 * [tLogRow_4 process_data_begin ] start
	 */

	

	
	
	currentComponent="tLogRow_4";

	

 



/**
 * [tLogRow_4 process_data_begin ] stop
 */
	
	/**
	 * [tLogRow_4 process_data_end ] start
	 */

	

	
	
	currentComponent="tLogRow_4";

	

 



/**
 * [tLogRow_4 process_data_end ] stop
 */

} // End of branch "row7"




	
	/**
	 * [tDBOutput_2 process_data_end ] start
	 */

	

	
	
	currentComponent="tDBOutput_2";

	

 



/**
 * [tDBOutput_2 process_data_end ] stop
 */

} // End of branch "poa_grantors"




	
	/**
	 * [tMap_2 process_data_end ] start
	 */

	

	
	
	currentComponent="tMap_2";

	

 



/**
 * [tMap_2 process_data_end ] stop
 */



	
	/**
	 * [tDBInput_2 process_data_end ] start
	 */

	

	
	
	currentComponent="tDBInput_2";

	

 



/**
 * [tDBInput_2 process_data_end ] stop
 */
	
	/**
	 * [tDBInput_2 end ] start
	 */

	

	
	
	currentComponent="tDBInput_2";

	

	}
}finally{
	if (rs_tDBInput_2 != null) {
		rs_tDBInput_2.close();
	}
	if (stmt_tDBInput_2 != null) {
		stmt_tDBInput_2.close();
	}
		if(conn_tDBInput_2 != null && !conn_tDBInput_2.isClosed()) {
			
			conn_tDBInput_2.close();
			
			if("com.mysql.cj.jdbc.Driver".equals((String)globalMap.get("driverClass_"))
			    && routines.system.BundleUtils.inOSGi()) {
			        Class.forName("com.mysql.cj.jdbc.AbandonedConnectionCleanupThread").
			            getMethod("checkedShutdown").invoke(null, (Object[]) null);
			}
			
		}
}
globalMap.put("tDBInput_2_NB_LINE",nb_line_tDBInput_2);

 

ok_Hash.put("tDBInput_2", true);
end_Hash.put("tDBInput_2", System.currentTimeMillis());




/**
 * [tDBInput_2 end ] stop
 */

	
	/**
	 * [tMap_2 end ] start
	 */

	

	
	
	currentComponent="tMap_2";

	


// ###############################
// # Lookup hashes releasing
					if(tHash_Lookup_row5 != null) {
						tHash_Lookup_row5.endGet();
					}
					globalMap.remove( "tHash_Lookup_row5" );

					
					
				
// ###############################      





				if(execStat){
			  		runStat.updateStat(resourceMap,iterateId,2,0,"row4");
			  	}
			  	
 

ok_Hash.put("tMap_2", true);
end_Hash.put("tMap_2", System.currentTimeMillis());




/**
 * [tMap_2 end ] stop
 */

	
	/**
	 * [tDBOutput_2 end ] start
	 */

	

	
	
	currentComponent="tDBOutput_2";

	



        if(pstmt_tDBOutput_2 != null) {
			
				pstmt_tDBOutput_2.close();
				resourceMap.remove("pstmt_tDBOutput_2");
			
        }
    resourceMap.put("statementClosed_tDBOutput_2", true);
            conn_tDBOutput_2.commit();
			
        conn_tDBOutput_2 .close();
        resourceMap.put("finish_tDBOutput_2", true);

	nb_line_deleted_tDBOutput_2=nb_line_deleted_tDBOutput_2+ deletedCount_tDBOutput_2;
	nb_line_update_tDBOutput_2=nb_line_update_tDBOutput_2 + updatedCount_tDBOutput_2;
	nb_line_inserted_tDBOutput_2=nb_line_inserted_tDBOutput_2 + insertedCount_tDBOutput_2;
	nb_line_rejected_tDBOutput_2=nb_line_rejected_tDBOutput_2 + rejectedCount_tDBOutput_2;
	
        globalMap.put("tDBOutput_2_NB_LINE",nb_line_tDBOutput_2);
        globalMap.put("tDBOutput_2_NB_LINE_UPDATED",nb_line_update_tDBOutput_2);
        globalMap.put("tDBOutput_2_NB_LINE_INSERTED",nb_line_inserted_tDBOutput_2);
        globalMap.put("tDBOutput_2_NB_LINE_DELETED",nb_line_deleted_tDBOutput_2);
        globalMap.put("tDBOutput_2_NB_LINE_REJECTED", nb_line_rejected_tDBOutput_2);
    

	

				if(execStat){
			  		runStat.updateStat(resourceMap,iterateId,2,0,"poa_grantors");
			  	}
			  	
 

ok_Hash.put("tDBOutput_2", true);
end_Hash.put("tDBOutput_2", System.currentTimeMillis());




/**
 * [tDBOutput_2 end ] stop
 */

	
	/**
	 * [tLogRow_4 end ] start
	 */

	

	
	
	currentComponent="tLogRow_4";

	


//////
//////
globalMap.put("tLogRow_4_NB_LINE",nb_line_tLogRow_4);

///////////////////////    			

				if(execStat){
			  		runStat.updateStat(resourceMap,iterateId,2,0,"row7");
			  	}
			  	
 

ok_Hash.put("tLogRow_4", true);
end_Hash.put("tLogRow_4", System.currentTimeMillis());




/**
 * [tLogRow_4 end ] stop
 */









				}//end the resume

				
				    			if(resumeEntryMethodName == null || globalResumeTicket){
				    				resumeUtil.addLog("CHECKPOINT", "CONNECTION:SUBJOB_OK:tDBInput_2:OnSubjobOk", "", Thread.currentThread().getId() + "", "", "", "", "", "");
								}	    				    			
					    	
								if(execStat){    	
									runStat.updateStatOnConnection("OnSubjobOk6", 0, "ok");
								} 
							
							tDBInput_5Process(globalMap); 
						



	
			}catch(java.lang.Exception e){	
				
				TalendException te = new TalendException(e, currentComponent, globalMap);
				
				throw te;
			}catch(java.lang.Error error){	
				
					runStat.stopThreadStat();
				
				throw error;
			}finally{
				
					     			//free memory for "tMap_2"
					     			globalMap.remove("tHash_Lookup_row5"); 
				     			
				try{
					
	
	/**
	 * [tDBInput_2 finally ] start
	 */

	

	
	
	currentComponent="tDBInput_2";

	

 



/**
 * [tDBInput_2 finally ] stop
 */

	
	/**
	 * [tMap_2 finally ] start
	 */

	

	
	
	currentComponent="tMap_2";

	

 



/**
 * [tMap_2 finally ] stop
 */

	
	/**
	 * [tDBOutput_2 finally ] start
	 */

	

	
	
	currentComponent="tDBOutput_2";

	



    try {
    if (resourceMap.get("statementClosed_tDBOutput_2") == null) {
                java.sql.PreparedStatement pstmtToClose_tDBOutput_2 = null;
                if ((pstmtToClose_tDBOutput_2 = (java.sql.PreparedStatement) resourceMap.remove("pstmt_tDBOutput_2")) != null) {
                    pstmtToClose_tDBOutput_2.close();
                }
    }
    } finally {
        if(resourceMap.get("finish_tDBOutput_2") == null){
            java.sql.Connection ctn_tDBOutput_2 = null;
            if((ctn_tDBOutput_2 = (java.sql.Connection)resourceMap.get("conn_tDBOutput_2")) != null){
                try {
                    ctn_tDBOutput_2.close();
                } catch (java.sql.SQLException sqlEx_tDBOutput_2) {
                    String errorMessage_tDBOutput_2 = "failed to close the connection in tDBOutput_2 :" + sqlEx_tDBOutput_2.getMessage();
                    System.err.println(errorMessage_tDBOutput_2);
                }
            }
        }
    }
 



/**
 * [tDBOutput_2 finally ] stop
 */

	
	/**
	 * [tLogRow_4 finally ] start
	 */

	

	
	
	currentComponent="tLogRow_4";

	

 



/**
 * [tLogRow_4 finally ] stop
 */









				}catch(java.lang.Exception e){	
					//ignore
				}catch(java.lang.Error error){
					//ignore
				}
				resourceMap = null;
			}
		

		globalMap.put("tDBInput_2_SUBPROCESS_STATE", 1);
	}
	


public static class row10Struct implements routines.system.IPersistableRow<row10Struct> {
    final static byte[] commonByteArrayLock_WIPO_PROJECTS_Gg_POA = new byte[0];
    static byte[] commonByteArray_WIPO_PROJECTS_Gg_POA = new byte[0];
	protected static final int DEFAULT_HASHCODE = 1;
    protected static final int PRIME = 31;
    protected int hashCode = DEFAULT_HASHCODE;
    public boolean hashCodeDirty = true;

    public String loopKey;



	
			    public BigDecimal ROW_VERSION;

				public BigDecimal getROW_VERSION () {
					return this.ROW_VERSION;
				}
				
			    public String DOC_ORI;

				public String getDOC_ORI () {
					return this.DOC_ORI;
				}
				
			    public String DOC_LOG;

				public String getDOC_LOG () {
					return this.DOC_LOG;
				}
				
			    public BigDecimal DOC_SER;

				public BigDecimal getDOC_SER () {
					return this.DOC_SER;
				}
				
			    public BigDecimal DOC_NBR;

				public BigDecimal getDOC_NBR () {
					return this.DOC_NBR;
				}
				
			    public BigDecimal PERSON_NBR;

				public BigDecimal getPERSON_NBR () {
					return this.PERSON_NBR;
				}
				
			    public String REPRESENTATIVE_TYP;

				public String getREPRESENTATIVE_TYP () {
					return this.REPRESENTATIVE_TYP;
				}
				
			    public BigDecimal ADDR_NBR;

				public BigDecimal getADDR_NBR () {
					return this.ADDR_NBR;
				}
				
			    public String errorCode;

				public String getErrorCode () {
					return this.errorCode;
				}
				
			    public String errorMessage;

				public String getErrorMessage () {
					return this.errorMessage;
				}
				


	@Override
	public int hashCode() {
		if (this.hashCodeDirty) {
			final int prime = PRIME;
			int result = DEFAULT_HASHCODE;
	
						result = prime * result + ((this.DOC_ORI == null) ? 0 : this.DOC_ORI.hashCode());
					
						result = prime * result + ((this.DOC_LOG == null) ? 0 : this.DOC_LOG.hashCode());
					
						result = prime * result + ((this.DOC_SER == null) ? 0 : this.DOC_SER.hashCode());
					
						result = prime * result + ((this.DOC_NBR == null) ? 0 : this.DOC_NBR.hashCode());
					
						result = prime * result + ((this.PERSON_NBR == null) ? 0 : this.PERSON_NBR.hashCode());
					
    		this.hashCode = result;
    		this.hashCodeDirty = false;
		}
		return this.hashCode;
	}

	@Override
	public boolean equals(Object obj) {
		if (this == obj) return true;
		if (obj == null) return false;
		if (getClass() != obj.getClass()) return false;
		final row10Struct other = (row10Struct) obj;
		
						if (this.DOC_ORI == null) {
							if (other.DOC_ORI != null)
								return false;
						
						} else if (!this.DOC_ORI.equals(other.DOC_ORI))
						
							return false;
					
						if (this.DOC_LOG == null) {
							if (other.DOC_LOG != null)
								return false;
						
						} else if (!this.DOC_LOG.equals(other.DOC_LOG))
						
							return false;
					
						if (this.DOC_SER == null) {
							if (other.DOC_SER != null)
								return false;
						
						} else if (!this.DOC_SER.equals(other.DOC_SER))
						
							return false;
					
						if (this.DOC_NBR == null) {
							if (other.DOC_NBR != null)
								return false;
						
						} else if (!this.DOC_NBR.equals(other.DOC_NBR))
						
							return false;
					
						if (this.PERSON_NBR == null) {
							if (other.PERSON_NBR != null)
								return false;
						
						} else if (!this.PERSON_NBR.equals(other.PERSON_NBR))
						
							return false;
					

		return true;
    }

	public void copyDataTo(row10Struct other) {

		other.ROW_VERSION = this.ROW_VERSION;
	            other.DOC_ORI = this.DOC_ORI;
	            other.DOC_LOG = this.DOC_LOG;
	            other.DOC_SER = this.DOC_SER;
	            other.DOC_NBR = this.DOC_NBR;
	            other.PERSON_NBR = this.PERSON_NBR;
	            other.REPRESENTATIVE_TYP = this.REPRESENTATIVE_TYP;
	            other.ADDR_NBR = this.ADDR_NBR;
	            other.errorCode = this.errorCode;
	            other.errorMessage = this.errorMessage;
	            
	}

	public void copyKeysDataTo(row10Struct other) {

		other.DOC_ORI = this.DOC_ORI;
	            	other.DOC_LOG = this.DOC_LOG;
	            	other.DOC_SER = this.DOC_SER;
	            	other.DOC_NBR = this.DOC_NBR;
	            	other.PERSON_NBR = this.PERSON_NBR;
	            	
	}




	private String readString(ObjectInputStream dis) throws IOException{
		String strReturn = null;
		int length = 0;
        length = dis.readInt();
		if (length == -1) {
			strReturn = null;
		} else {
			if(length > commonByteArray_WIPO_PROJECTS_Gg_POA.length) {
				if(length < 1024 && commonByteArray_WIPO_PROJECTS_Gg_POA.length == 0) {
   					commonByteArray_WIPO_PROJECTS_Gg_POA = new byte[1024];
				} else {
   					commonByteArray_WIPO_PROJECTS_Gg_POA = new byte[2 * length];
   				}
			}
			dis.readFully(commonByteArray_WIPO_PROJECTS_Gg_POA, 0, length);
			strReturn = new String(commonByteArray_WIPO_PROJECTS_Gg_POA, 0, length, utf8Charset);
		}
		return strReturn;
	}

    private void writeString(String str, ObjectOutputStream dos) throws IOException{
		if(str == null) {
            dos.writeInt(-1);
		} else {
            byte[] byteArray = str.getBytes(utf8Charset);
	    	dos.writeInt(byteArray.length);
			dos.write(byteArray);
    	}
    }

    public void readData(ObjectInputStream dis) {

		synchronized(commonByteArrayLock_WIPO_PROJECTS_Gg_POA) {

        	try {

        		int length = 0;
		
						this.ROW_VERSION = (BigDecimal) dis.readObject();
					
					this.DOC_ORI = readString(dis);
					
					this.DOC_LOG = readString(dis);
					
						this.DOC_SER = (BigDecimal) dis.readObject();
					
						this.DOC_NBR = (BigDecimal) dis.readObject();
					
						this.PERSON_NBR = (BigDecimal) dis.readObject();
					
					this.REPRESENTATIVE_TYP = readString(dis);
					
						this.ADDR_NBR = (BigDecimal) dis.readObject();
					
					this.errorCode = readString(dis);
					
					this.errorMessage = readString(dis);
					
        	} catch (IOException e) {
	            throw new RuntimeException(e);

		
			} catch(ClassNotFoundException eCNFE) {
				 throw new RuntimeException(eCNFE);
		

        }

		

      }


    }

    public void writeData(ObjectOutputStream dos) {
        try {

		
					// BigDecimal
				
       			    	dos.writeObject(this.ROW_VERSION);
					
					// String
				
						writeString(this.DOC_ORI,dos);
					
					// String
				
						writeString(this.DOC_LOG,dos);
					
					// BigDecimal
				
       			    	dos.writeObject(this.DOC_SER);
					
					// BigDecimal
				
       			    	dos.writeObject(this.DOC_NBR);
					
					// BigDecimal
				
       			    	dos.writeObject(this.PERSON_NBR);
					
					// String
				
						writeString(this.REPRESENTATIVE_TYP,dos);
					
					// BigDecimal
				
       			    	dos.writeObject(this.ADDR_NBR);
					
					// String
				
						writeString(this.errorCode,dos);
					
					// String
				
						writeString(this.errorMessage,dos);
					
        	} catch (IOException e) {
	            throw new RuntimeException(e);
        }


    }


    public String toString() {

		StringBuilder sb = new StringBuilder();
		sb.append(super.toString());
		sb.append("[");
		sb.append("ROW_VERSION="+String.valueOf(ROW_VERSION));
		sb.append(",DOC_ORI="+DOC_ORI);
		sb.append(",DOC_LOG="+DOC_LOG);
		sb.append(",DOC_SER="+String.valueOf(DOC_SER));
		sb.append(",DOC_NBR="+String.valueOf(DOC_NBR));
		sb.append(",PERSON_NBR="+String.valueOf(PERSON_NBR));
		sb.append(",REPRESENTATIVE_TYP="+REPRESENTATIVE_TYP);
		sb.append(",ADDR_NBR="+String.valueOf(ADDR_NBR));
		sb.append(",errorCode="+errorCode);
		sb.append(",errorMessage="+errorMessage);
	    sb.append("]");

	    return sb.toString();
    }

    /**
     * Compare keys
     */
    public int compareTo(row10Struct other) {

		int returnValue = -1;
		
						returnValue = checkNullsAndCompare(this.DOC_ORI, other.DOC_ORI);
						if(returnValue != 0) {
							return returnValue;
						}

					
						returnValue = checkNullsAndCompare(this.DOC_LOG, other.DOC_LOG);
						if(returnValue != 0) {
							return returnValue;
						}

					
						returnValue = checkNullsAndCompare(this.DOC_SER, other.DOC_SER);
						if(returnValue != 0) {
							return returnValue;
						}

					
						returnValue = checkNullsAndCompare(this.DOC_NBR, other.DOC_NBR);
						if(returnValue != 0) {
							return returnValue;
						}

					
						returnValue = checkNullsAndCompare(this.PERSON_NBR, other.PERSON_NBR);
						if(returnValue != 0) {
							return returnValue;
						}

					
	    return returnValue;
    }


    private int checkNullsAndCompare(Object object1, Object object2) {
        int returnValue = 0;
		if (object1 instanceof Comparable && object2 instanceof Comparable) {
            returnValue = ((Comparable) object1).compareTo(object2);
        } else if (object1 != null && object2 != null) {
            returnValue = compareStrings(object1.toString(), object2.toString());
        } else if (object1 == null && object2 != null) {
            returnValue = 1;
        } else if (object1 != null && object2 == null) {
            returnValue = -1;
        } else {
            returnValue = 0;
        }

        return returnValue;
    }

    private int compareStrings(String string1, String string2) {
        return string1.compareTo(string2);
    }


}

public static class poa_grantessStruct implements routines.system.IPersistableRow<poa_grantessStruct> {
    final static byte[] commonByteArrayLock_WIPO_PROJECTS_Gg_POA = new byte[0];
    static byte[] commonByteArray_WIPO_PROJECTS_Gg_POA = new byte[0];
	protected static final int DEFAULT_HASHCODE = 1;
    protected static final int PRIME = 31;
    protected int hashCode = DEFAULT_HASHCODE;
    public boolean hashCodeDirty = true;

    public String loopKey;



	
			    public BigDecimal ROW_VERSION;

				public BigDecimal getROW_VERSION () {
					return this.ROW_VERSION;
				}
				
			    public String DOC_ORI;

				public String getDOC_ORI () {
					return this.DOC_ORI;
				}
				
			    public String DOC_LOG;

				public String getDOC_LOG () {
					return this.DOC_LOG;
				}
				
			    public BigDecimal DOC_SER;

				public BigDecimal getDOC_SER () {
					return this.DOC_SER;
				}
				
			    public BigDecimal DOC_NBR;

				public BigDecimal getDOC_NBR () {
					return this.DOC_NBR;
				}
				
			    public BigDecimal PERSON_NBR;

				public BigDecimal getPERSON_NBR () {
					return this.PERSON_NBR;
				}
				
			    public String REPRESENTATIVE_TYP;

				public String getREPRESENTATIVE_TYP () {
					return this.REPRESENTATIVE_TYP;
				}
				
			    public BigDecimal ADDR_NBR;

				public BigDecimal getADDR_NBR () {
					return this.ADDR_NBR;
				}
				


	@Override
	public int hashCode() {
		if (this.hashCodeDirty) {
			final int prime = PRIME;
			int result = DEFAULT_HASHCODE;
	
						result = prime * result + ((this.DOC_ORI == null) ? 0 : this.DOC_ORI.hashCode());
					
						result = prime * result + ((this.DOC_LOG == null) ? 0 : this.DOC_LOG.hashCode());
					
						result = prime * result + ((this.DOC_SER == null) ? 0 : this.DOC_SER.hashCode());
					
						result = prime * result + ((this.DOC_NBR == null) ? 0 : this.DOC_NBR.hashCode());
					
						result = prime * result + ((this.PERSON_NBR == null) ? 0 : this.PERSON_NBR.hashCode());
					
    		this.hashCode = result;
    		this.hashCodeDirty = false;
		}
		return this.hashCode;
	}

	@Override
	public boolean equals(Object obj) {
		if (this == obj) return true;
		if (obj == null) return false;
		if (getClass() != obj.getClass()) return false;
		final poa_grantessStruct other = (poa_grantessStruct) obj;
		
						if (this.DOC_ORI == null) {
							if (other.DOC_ORI != null)
								return false;
						
						} else if (!this.DOC_ORI.equals(other.DOC_ORI))
						
							return false;
					
						if (this.DOC_LOG == null) {
							if (other.DOC_LOG != null)
								return false;
						
						} else if (!this.DOC_LOG.equals(other.DOC_LOG))
						
							return false;
					
						if (this.DOC_SER == null) {
							if (other.DOC_SER != null)
								return false;
						
						} else if (!this.DOC_SER.equals(other.DOC_SER))
						
							return false;
					
						if (this.DOC_NBR == null) {
							if (other.DOC_NBR != null)
								return false;
						
						} else if (!this.DOC_NBR.equals(other.DOC_NBR))
						
							return false;
					
						if (this.PERSON_NBR == null) {
							if (other.PERSON_NBR != null)
								return false;
						
						} else if (!this.PERSON_NBR.equals(other.PERSON_NBR))
						
							return false;
					

		return true;
    }

	public void copyDataTo(poa_grantessStruct other) {

		other.ROW_VERSION = this.ROW_VERSION;
	            other.DOC_ORI = this.DOC_ORI;
	            other.DOC_LOG = this.DOC_LOG;
	            other.DOC_SER = this.DOC_SER;
	            other.DOC_NBR = this.DOC_NBR;
	            other.PERSON_NBR = this.PERSON_NBR;
	            other.REPRESENTATIVE_TYP = this.REPRESENTATIVE_TYP;
	            other.ADDR_NBR = this.ADDR_NBR;
	            
	}

	public void copyKeysDataTo(poa_grantessStruct other) {

		other.DOC_ORI = this.DOC_ORI;
	            	other.DOC_LOG = this.DOC_LOG;
	            	other.DOC_SER = this.DOC_SER;
	            	other.DOC_NBR = this.DOC_NBR;
	            	other.PERSON_NBR = this.PERSON_NBR;
	            	
	}




	private String readString(ObjectInputStream dis) throws IOException{
		String strReturn = null;
		int length = 0;
        length = dis.readInt();
		if (length == -1) {
			strReturn = null;
		} else {
			if(length > commonByteArray_WIPO_PROJECTS_Gg_POA.length) {
				if(length < 1024 && commonByteArray_WIPO_PROJECTS_Gg_POA.length == 0) {
   					commonByteArray_WIPO_PROJECTS_Gg_POA = new byte[1024];
				} else {
   					commonByteArray_WIPO_PROJECTS_Gg_POA = new byte[2 * length];
   				}
			}
			dis.readFully(commonByteArray_WIPO_PROJECTS_Gg_POA, 0, length);
			strReturn = new String(commonByteArray_WIPO_PROJECTS_Gg_POA, 0, length, utf8Charset);
		}
		return strReturn;
	}

    private void writeString(String str, ObjectOutputStream dos) throws IOException{
		if(str == null) {
            dos.writeInt(-1);
		} else {
            byte[] byteArray = str.getBytes(utf8Charset);
	    	dos.writeInt(byteArray.length);
			dos.write(byteArray);
    	}
    }

    public void readData(ObjectInputStream dis) {

		synchronized(commonByteArrayLock_WIPO_PROJECTS_Gg_POA) {

        	try {

        		int length = 0;
		
						this.ROW_VERSION = (BigDecimal) dis.readObject();
					
					this.DOC_ORI = readString(dis);
					
					this.DOC_LOG = readString(dis);
					
						this.DOC_SER = (BigDecimal) dis.readObject();
					
						this.DOC_NBR = (BigDecimal) dis.readObject();
					
						this.PERSON_NBR = (BigDecimal) dis.readObject();
					
					this.REPRESENTATIVE_TYP = readString(dis);
					
						this.ADDR_NBR = (BigDecimal) dis.readObject();
					
        	} catch (IOException e) {
	            throw new RuntimeException(e);

		
			} catch(ClassNotFoundException eCNFE) {
				 throw new RuntimeException(eCNFE);
		

        }

		

      }


    }

    public void writeData(ObjectOutputStream dos) {
        try {

		
					// BigDecimal
				
       			    	dos.writeObject(this.ROW_VERSION);
					
					// String
				
						writeString(this.DOC_ORI,dos);
					
					// String
				
						writeString(this.DOC_LOG,dos);
					
					// BigDecimal
				
       			    	dos.writeObject(this.DOC_SER);
					
					// BigDecimal
				
       			    	dos.writeObject(this.DOC_NBR);
					
					// BigDecimal
				
       			    	dos.writeObject(this.PERSON_NBR);
					
					// String
				
						writeString(this.REPRESENTATIVE_TYP,dos);
					
					// BigDecimal
				
       			    	dos.writeObject(this.ADDR_NBR);
					
        	} catch (IOException e) {
	            throw new RuntimeException(e);
        }


    }


    public String toString() {

		StringBuilder sb = new StringBuilder();
		sb.append(super.toString());
		sb.append("[");
		sb.append("ROW_VERSION="+String.valueOf(ROW_VERSION));
		sb.append(",DOC_ORI="+DOC_ORI);
		sb.append(",DOC_LOG="+DOC_LOG);
		sb.append(",DOC_SER="+String.valueOf(DOC_SER));
		sb.append(",DOC_NBR="+String.valueOf(DOC_NBR));
		sb.append(",PERSON_NBR="+String.valueOf(PERSON_NBR));
		sb.append(",REPRESENTATIVE_TYP="+REPRESENTATIVE_TYP);
		sb.append(",ADDR_NBR="+String.valueOf(ADDR_NBR));
	    sb.append("]");

	    return sb.toString();
    }

    /**
     * Compare keys
     */
    public int compareTo(poa_grantessStruct other) {

		int returnValue = -1;
		
						returnValue = checkNullsAndCompare(this.DOC_ORI, other.DOC_ORI);
						if(returnValue != 0) {
							return returnValue;
						}

					
						returnValue = checkNullsAndCompare(this.DOC_LOG, other.DOC_LOG);
						if(returnValue != 0) {
							return returnValue;
						}

					
						returnValue = checkNullsAndCompare(this.DOC_SER, other.DOC_SER);
						if(returnValue != 0) {
							return returnValue;
						}

					
						returnValue = checkNullsAndCompare(this.DOC_NBR, other.DOC_NBR);
						if(returnValue != 0) {
							return returnValue;
						}

					
						returnValue = checkNullsAndCompare(this.PERSON_NBR, other.PERSON_NBR);
						if(returnValue != 0) {
							return returnValue;
						}

					
	    return returnValue;
    }


    private int checkNullsAndCompare(Object object1, Object object2) {
        int returnValue = 0;
		if (object1 instanceof Comparable && object2 instanceof Comparable) {
            returnValue = ((Comparable) object1).compareTo(object2);
        } else if (object1 != null && object2 != null) {
            returnValue = compareStrings(object1.toString(), object2.toString());
        } else if (object1 == null && object2 != null) {
            returnValue = 1;
        } else if (object1 != null && object2 == null) {
            returnValue = -1;
        } else {
            returnValue = 0;
        }

        return returnValue;
    }

    private int compareStrings(String string1, String string2) {
        return string1.compareTo(string2);
    }


}

public static class row8Struct implements routines.system.IPersistableRow<row8Struct> {
    final static byte[] commonByteArrayLock_WIPO_PROJECTS_Gg_POA = new byte[0];
    static byte[] commonByteArray_WIPO_PROJECTS_Gg_POA = new byte[0];

	
			    public BigDecimal ROW_VERSION;

				public BigDecimal getROW_VERSION () {
					return this.ROW_VERSION;
				}
				
			    public String DOC_ORI;

				public String getDOC_ORI () {
					return this.DOC_ORI;
				}
				
			    public String DOC_LOG;

				public String getDOC_LOG () {
					return this.DOC_LOG;
				}
				
			    public BigDecimal DOC_SER;

				public BigDecimal getDOC_SER () {
					return this.DOC_SER;
				}
				
			    public BigDecimal DOC_NBR;

				public BigDecimal getDOC_NBR () {
					return this.DOC_NBR;
				}
				
			    public BigDecimal PERSON_NBR;

				public BigDecimal getPERSON_NBR () {
					return this.PERSON_NBR;
				}
				
			    public BigDecimal ADDR_NBR;

				public BigDecimal getADDR_NBR () {
					return this.ADDR_NBR;
				}
				
			    public String REPRESENTATIVE_TYP;

				public String getREPRESENTATIVE_TYP () {
					return this.REPRESENTATIVE_TYP;
				}
				



	private String readString(ObjectInputStream dis) throws IOException{
		String strReturn = null;
		int length = 0;
        length = dis.readInt();
		if (length == -1) {
			strReturn = null;
		} else {
			if(length > commonByteArray_WIPO_PROJECTS_Gg_POA.length) {
				if(length < 1024 && commonByteArray_WIPO_PROJECTS_Gg_POA.length == 0) {
   					commonByteArray_WIPO_PROJECTS_Gg_POA = new byte[1024];
				} else {
   					commonByteArray_WIPO_PROJECTS_Gg_POA = new byte[2 * length];
   				}
			}
			dis.readFully(commonByteArray_WIPO_PROJECTS_Gg_POA, 0, length);
			strReturn = new String(commonByteArray_WIPO_PROJECTS_Gg_POA, 0, length, utf8Charset);
		}
		return strReturn;
	}

    private void writeString(String str, ObjectOutputStream dos) throws IOException{
		if(str == null) {
            dos.writeInt(-1);
		} else {
            byte[] byteArray = str.getBytes(utf8Charset);
	    	dos.writeInt(byteArray.length);
			dos.write(byteArray);
    	}
    }

    public void readData(ObjectInputStream dis) {

		synchronized(commonByteArrayLock_WIPO_PROJECTS_Gg_POA) {

        	try {

        		int length = 0;
		
						this.ROW_VERSION = (BigDecimal) dis.readObject();
					
					this.DOC_ORI = readString(dis);
					
					this.DOC_LOG = readString(dis);
					
						this.DOC_SER = (BigDecimal) dis.readObject();
					
						this.DOC_NBR = (BigDecimal) dis.readObject();
					
						this.PERSON_NBR = (BigDecimal) dis.readObject();
					
						this.ADDR_NBR = (BigDecimal) dis.readObject();
					
					this.REPRESENTATIVE_TYP = readString(dis);
					
        	} catch (IOException e) {
	            throw new RuntimeException(e);

		
			} catch(ClassNotFoundException eCNFE) {
				 throw new RuntimeException(eCNFE);
		

        }

		

      }


    }

    public void writeData(ObjectOutputStream dos) {
        try {

		
					// BigDecimal
				
       			    	dos.writeObject(this.ROW_VERSION);
					
					// String
				
						writeString(this.DOC_ORI,dos);
					
					// String
				
						writeString(this.DOC_LOG,dos);
					
					// BigDecimal
				
       			    	dos.writeObject(this.DOC_SER);
					
					// BigDecimal
				
       			    	dos.writeObject(this.DOC_NBR);
					
					// BigDecimal
				
       			    	dos.writeObject(this.PERSON_NBR);
					
					// BigDecimal
				
       			    	dos.writeObject(this.ADDR_NBR);
					
					// String
				
						writeString(this.REPRESENTATIVE_TYP,dos);
					
        	} catch (IOException e) {
	            throw new RuntimeException(e);
        }


    }


    public String toString() {

		StringBuilder sb = new StringBuilder();
		sb.append(super.toString());
		sb.append("[");
		sb.append("ROW_VERSION="+String.valueOf(ROW_VERSION));
		sb.append(",DOC_ORI="+DOC_ORI);
		sb.append(",DOC_LOG="+DOC_LOG);
		sb.append(",DOC_SER="+String.valueOf(DOC_SER));
		sb.append(",DOC_NBR="+String.valueOf(DOC_NBR));
		sb.append(",PERSON_NBR="+String.valueOf(PERSON_NBR));
		sb.append(",ADDR_NBR="+String.valueOf(ADDR_NBR));
		sb.append(",REPRESENTATIVE_TYP="+REPRESENTATIVE_TYP);
	    sb.append("]");

	    return sb.toString();
    }

    /**
     * Compare keys
     */
    public int compareTo(row8Struct other) {

		int returnValue = -1;
		
	    return returnValue;
    }


    private int checkNullsAndCompare(Object object1, Object object2) {
        int returnValue = 0;
		if (object1 instanceof Comparable && object2 instanceof Comparable) {
            returnValue = ((Comparable) object1).compareTo(object2);
        } else if (object1 != null && object2 != null) {
            returnValue = compareStrings(object1.toString(), object2.toString());
        } else if (object1 == null && object2 != null) {
            returnValue = 1;
        } else if (object1 != null && object2 == null) {
            returnValue = -1;
        } else {
            returnValue = 0;
        }

        return returnValue;
    }

    private int compareStrings(String string1, String string2) {
        return string1.compareTo(string2);
    }


}

public static class after_tDBInput_5Struct implements routines.system.IPersistableRow<after_tDBInput_5Struct> {
    final static byte[] commonByteArrayLock_WIPO_PROJECTS_Gg_POA = new byte[0];
    static byte[] commonByteArray_WIPO_PROJECTS_Gg_POA = new byte[0];
	protected static final int DEFAULT_HASHCODE = 1;
    protected static final int PRIME = 31;
    protected int hashCode = DEFAULT_HASHCODE;
    public boolean hashCodeDirty = true;

    public String loopKey;



	
			    public BigDecimal ROW_VERSION;

				public BigDecimal getROW_VERSION () {
					return this.ROW_VERSION;
				}
				
			    public String DOC_ORI;

				public String getDOC_ORI () {
					return this.DOC_ORI;
				}
				
			    public String DOC_LOG;

				public String getDOC_LOG () {
					return this.DOC_LOG;
				}
				
			    public BigDecimal DOC_SER;

				public BigDecimal getDOC_SER () {
					return this.DOC_SER;
				}
				
			    public BigDecimal DOC_NBR;

				public BigDecimal getDOC_NBR () {
					return this.DOC_NBR;
				}
				
			    public BigDecimal PERSON_NBR;

				public BigDecimal getPERSON_NBR () {
					return this.PERSON_NBR;
				}
				
			    public BigDecimal ADDR_NBR;

				public BigDecimal getADDR_NBR () {
					return this.ADDR_NBR;
				}
				
			    public String REPRESENTATIVE_TYP;

				public String getREPRESENTATIVE_TYP () {
					return this.REPRESENTATIVE_TYP;
				}
				


	@Override
	public int hashCode() {
		if (this.hashCodeDirty) {
			final int prime = PRIME;
			int result = DEFAULT_HASHCODE;
	
						result = prime * result + ((this.DOC_ORI == null) ? 0 : this.DOC_ORI.hashCode());
					
						result = prime * result + ((this.DOC_LOG == null) ? 0 : this.DOC_LOG.hashCode());
					
						result = prime * result + ((this.DOC_SER == null) ? 0 : this.DOC_SER.hashCode());
					
						result = prime * result + ((this.DOC_NBR == null) ? 0 : this.DOC_NBR.hashCode());
					
						result = prime * result + ((this.PERSON_NBR == null) ? 0 : this.PERSON_NBR.hashCode());
					
						result = prime * result + ((this.ADDR_NBR == null) ? 0 : this.ADDR_NBR.hashCode());
					
    		this.hashCode = result;
    		this.hashCodeDirty = false;
		}
		return this.hashCode;
	}

	@Override
	public boolean equals(Object obj) {
		if (this == obj) return true;
		if (obj == null) return false;
		if (getClass() != obj.getClass()) return false;
		final after_tDBInput_5Struct other = (after_tDBInput_5Struct) obj;
		
						if (this.DOC_ORI == null) {
							if (other.DOC_ORI != null)
								return false;
						
						} else if (!this.DOC_ORI.equals(other.DOC_ORI))
						
							return false;
					
						if (this.DOC_LOG == null) {
							if (other.DOC_LOG != null)
								return false;
						
						} else if (!this.DOC_LOG.equals(other.DOC_LOG))
						
							return false;
					
						if (this.DOC_SER == null) {
							if (other.DOC_SER != null)
								return false;
						
						} else if (!this.DOC_SER.equals(other.DOC_SER))
						
							return false;
					
						if (this.DOC_NBR == null) {
							if (other.DOC_NBR != null)
								return false;
						
						} else if (!this.DOC_NBR.equals(other.DOC_NBR))
						
							return false;
					
						if (this.PERSON_NBR == null) {
							if (other.PERSON_NBR != null)
								return false;
						
						} else if (!this.PERSON_NBR.equals(other.PERSON_NBR))
						
							return false;
					
						if (this.ADDR_NBR == null) {
							if (other.ADDR_NBR != null)
								return false;
						
						} else if (!this.ADDR_NBR.equals(other.ADDR_NBR))
						
							return false;
					

		return true;
    }

	public void copyDataTo(after_tDBInput_5Struct other) {

		other.ROW_VERSION = this.ROW_VERSION;
	            other.DOC_ORI = this.DOC_ORI;
	            other.DOC_LOG = this.DOC_LOG;
	            other.DOC_SER = this.DOC_SER;
	            other.DOC_NBR = this.DOC_NBR;
	            other.PERSON_NBR = this.PERSON_NBR;
	            other.ADDR_NBR = this.ADDR_NBR;
	            other.REPRESENTATIVE_TYP = this.REPRESENTATIVE_TYP;
	            
	}

	public void copyKeysDataTo(after_tDBInput_5Struct other) {

		other.DOC_ORI = this.DOC_ORI;
	            	other.DOC_LOG = this.DOC_LOG;
	            	other.DOC_SER = this.DOC_SER;
	            	other.DOC_NBR = this.DOC_NBR;
	            	other.PERSON_NBR = this.PERSON_NBR;
	            	other.ADDR_NBR = this.ADDR_NBR;
	            	
	}




	private String readString(ObjectInputStream dis) throws IOException{
		String strReturn = null;
		int length = 0;
        length = dis.readInt();
		if (length == -1) {
			strReturn = null;
		} else {
			if(length > commonByteArray_WIPO_PROJECTS_Gg_POA.length) {
				if(length < 1024 && commonByteArray_WIPO_PROJECTS_Gg_POA.length == 0) {
   					commonByteArray_WIPO_PROJECTS_Gg_POA = new byte[1024];
				} else {
   					commonByteArray_WIPO_PROJECTS_Gg_POA = new byte[2 * length];
   				}
			}
			dis.readFully(commonByteArray_WIPO_PROJECTS_Gg_POA, 0, length);
			strReturn = new String(commonByteArray_WIPO_PROJECTS_Gg_POA, 0, length, utf8Charset);
		}
		return strReturn;
	}

    private void writeString(String str, ObjectOutputStream dos) throws IOException{
		if(str == null) {
            dos.writeInt(-1);
		} else {
            byte[] byteArray = str.getBytes(utf8Charset);
	    	dos.writeInt(byteArray.length);
			dos.write(byteArray);
    	}
    }

    public void readData(ObjectInputStream dis) {

		synchronized(commonByteArrayLock_WIPO_PROJECTS_Gg_POA) {

        	try {

        		int length = 0;
		
						this.ROW_VERSION = (BigDecimal) dis.readObject();
					
					this.DOC_ORI = readString(dis);
					
					this.DOC_LOG = readString(dis);
					
						this.DOC_SER = (BigDecimal) dis.readObject();
					
						this.DOC_NBR = (BigDecimal) dis.readObject();
					
						this.PERSON_NBR = (BigDecimal) dis.readObject();
					
						this.ADDR_NBR = (BigDecimal) dis.readObject();
					
					this.REPRESENTATIVE_TYP = readString(dis);
					
        	} catch (IOException e) {
	            throw new RuntimeException(e);

		
			} catch(ClassNotFoundException eCNFE) {
				 throw new RuntimeException(eCNFE);
		

        }

		

      }


    }

    public void writeData(ObjectOutputStream dos) {
        try {

		
					// BigDecimal
				
       			    	dos.writeObject(this.ROW_VERSION);
					
					// String
				
						writeString(this.DOC_ORI,dos);
					
					// String
				
						writeString(this.DOC_LOG,dos);
					
					// BigDecimal
				
       			    	dos.writeObject(this.DOC_SER);
					
					// BigDecimal
				
       			    	dos.writeObject(this.DOC_NBR);
					
					// BigDecimal
				
       			    	dos.writeObject(this.PERSON_NBR);
					
					// BigDecimal
				
       			    	dos.writeObject(this.ADDR_NBR);
					
					// String
				
						writeString(this.REPRESENTATIVE_TYP,dos);
					
        	} catch (IOException e) {
	            throw new RuntimeException(e);
        }


    }


    public String toString() {

		StringBuilder sb = new StringBuilder();
		sb.append(super.toString());
		sb.append("[");
		sb.append("ROW_VERSION="+String.valueOf(ROW_VERSION));
		sb.append(",DOC_ORI="+DOC_ORI);
		sb.append(",DOC_LOG="+DOC_LOG);
		sb.append(",DOC_SER="+String.valueOf(DOC_SER));
		sb.append(",DOC_NBR="+String.valueOf(DOC_NBR));
		sb.append(",PERSON_NBR="+String.valueOf(PERSON_NBR));
		sb.append(",ADDR_NBR="+String.valueOf(ADDR_NBR));
		sb.append(",REPRESENTATIVE_TYP="+REPRESENTATIVE_TYP);
	    sb.append("]");

	    return sb.toString();
    }

    /**
     * Compare keys
     */
    public int compareTo(after_tDBInput_5Struct other) {

		int returnValue = -1;
		
						returnValue = checkNullsAndCompare(this.DOC_ORI, other.DOC_ORI);
						if(returnValue != 0) {
							return returnValue;
						}

					
						returnValue = checkNullsAndCompare(this.DOC_LOG, other.DOC_LOG);
						if(returnValue != 0) {
							return returnValue;
						}

					
						returnValue = checkNullsAndCompare(this.DOC_SER, other.DOC_SER);
						if(returnValue != 0) {
							return returnValue;
						}

					
						returnValue = checkNullsAndCompare(this.DOC_NBR, other.DOC_NBR);
						if(returnValue != 0) {
							return returnValue;
						}

					
						returnValue = checkNullsAndCompare(this.PERSON_NBR, other.PERSON_NBR);
						if(returnValue != 0) {
							return returnValue;
						}

					
						returnValue = checkNullsAndCompare(this.ADDR_NBR, other.ADDR_NBR);
						if(returnValue != 0) {
							return returnValue;
						}

					
	    return returnValue;
    }


    private int checkNullsAndCompare(Object object1, Object object2) {
        int returnValue = 0;
		if (object1 instanceof Comparable && object2 instanceof Comparable) {
            returnValue = ((Comparable) object1).compareTo(object2);
        } else if (object1 != null && object2 != null) {
            returnValue = compareStrings(object1.toString(), object2.toString());
        } else if (object1 == null && object2 != null) {
            returnValue = 1;
        } else if (object1 != null && object2 == null) {
            returnValue = -1;
        } else {
            returnValue = 0;
        }

        return returnValue;
    }

    private int compareStrings(String string1, String string2) {
        return string1.compareTo(string2);
    }


}
public void tDBInput_5Process(final java.util.Map<String, Object> globalMap) throws TalendException {
	globalMap.put("tDBInput_5_SUBPROCESS_STATE", 0);

 final boolean execStat = this.execStat;
	
		String iterateId = "";
	
	
	String currentComponent = "";
	java.util.Map<String, Object> resourceMap = new java.util.HashMap<String, Object>();

	try {
			// TDI-39566 avoid throwing an useless Exception
			boolean resumeIt = true;
			if (globalResumeTicket == false && resumeEntryMethodName != null) {
				String currentMethodName = new java.lang.Exception().getStackTrace()[0].getMethodName();
				resumeIt = resumeEntryMethodName.equals(currentMethodName);
			}
			if (resumeIt || globalResumeTicket) { //start the resume
				globalResumeTicket = true;


		tDBInput_4Process(globalMap);

		row8Struct row8 = new row8Struct();
poa_grantessStruct poa_grantess = new poa_grantessStruct();
row10Struct row10 = new row10Struct();






	
	/**
	 * [tLogRow_5 begin ] start
	 */

	

	
		
		ok_Hash.put("tLogRow_5", false);
		start_Hash.put("tLogRow_5", System.currentTimeMillis());
		
	
	currentComponent="tLogRow_5";

	
					if(execStat) {
						runStat.updateStatOnConnection(resourceMap,iterateId,0,0,"row10");
					}
				
		int tos_count_tLogRow_5 = 0;
		

	///////////////////////
	
		final String OUTPUT_FIELD_SEPARATOR_tLogRow_5 = "|";
		java.io.PrintStream consoleOut_tLogRow_5 = null;	

 		StringBuilder strBuffer_tLogRow_5 = null;
		int nb_line_tLogRow_5 = 0;
///////////////////////    			



 



/**
 * [tLogRow_5 begin ] stop
 */



	
	/**
	 * [tDBOutput_3 begin ] start
	 */

	

	
		
		ok_Hash.put("tDBOutput_3", false);
		start_Hash.put("tDBOutput_3", System.currentTimeMillis());
		
	
	currentComponent="tDBOutput_3";

	
					if(execStat) {
						runStat.updateStatOnConnection(resourceMap,iterateId,0,0,"poa_grantess");
					}
				
		int tos_count_tDBOutput_3 = 0;
		



int nb_line_tDBOutput_3 = 0;
int nb_line_update_tDBOutput_3 = 0;
int nb_line_inserted_tDBOutput_3 = 0;
int nb_line_deleted_tDBOutput_3 = 0;
int nb_line_rejected_tDBOutput_3 = 0;

int deletedCount_tDBOutput_3=0;
int updatedCount_tDBOutput_3=0;
int insertedCount_tDBOutput_3=0;
int rejectedCount_tDBOutput_3=0;
String dbschema_tDBOutput_3 = null;
String tableName_tDBOutput_3 = null;
boolean whetherReject_tDBOutput_3 = false;

java.util.Calendar calendar_tDBOutput_3 = java.util.Calendar.getInstance();
long year1_tDBOutput_3 = TalendDate.parseDate("yyyy-MM-dd","0001-01-01").getTime();
long year2_tDBOutput_3 = TalendDate.parseDate("yyyy-MM-dd","1753-01-01").getTime();
long year10000_tDBOutput_3 = TalendDate.parseDate("yyyy-MM-dd HH:mm:ss","9999-12-31 24:00:00").getTime();
long date_tDBOutput_3;

java.util.Calendar calendar_datetimeoffset_tDBOutput_3 = java.util.Calendar.getInstance(java.util.TimeZone.getTimeZone("UTC"));

	
java.sql.Connection conn_tDBOutput_3 = null;
String dbUser_tDBOutput_3 = null;
    dbschema_tDBOutput_3 = "ADMIN";
    String driverClass_tDBOutput_3 = "net.sourceforge.jtds.jdbc.Driver";
	
    java.lang.Class.forName(driverClass_tDBOutput_3);
    String port_tDBOutput_3 = "1433";
    String dbname_tDBOutput_3 = "MARCAS_PY" ;
    String url_tDBOutput_3 = "jdbc:jtds:sqlserver://" + "localhost" ; 
    if (!"".equals(port_tDBOutput_3)) {
    	url_tDBOutput_3 += ":" + "1433";
    }
    if (!"".equals(dbname_tDBOutput_3)) {
				url_tDBOutput_3 += "//" + "MARCAS_PY"; 
	
    }
    url_tDBOutput_3 += ";appName=" + projectName + ";" + "";
    dbUser_tDBOutput_3 = "ADMIN";

 
	final String decryptedPassword_tDBOutput_3 = routines.system.PasswordEncryptUtil.decryptPassword("enc:routine.encryption.key.v1:61B8KkJoZp5+EoRt9LRISJxz9EL6d0TarfvRl/0AMweR");

    String dbPwd_tDBOutput_3 = decryptedPassword_tDBOutput_3;	
    conn_tDBOutput_3 = java.sql.DriverManager.getConnection(url_tDBOutput_3,dbUser_tDBOutput_3,dbPwd_tDBOutput_3);
	
		resourceMap.put("conn_tDBOutput_3", conn_tDBOutput_3);
	
        conn_tDBOutput_3.setAutoCommit(false);
        int commitEvery_tDBOutput_3 = 10000;
        int commitCounter_tDBOutput_3 = 0;


if(dbschema_tDBOutput_3 == null || dbschema_tDBOutput_3.trim().length() == 0) {
    tableName_tDBOutput_3 = "IP_POA_GRANTEES";
} else {
    tableName_tDBOutput_3 = dbschema_tDBOutput_3 + "].[" + "IP_POA_GRANTEES";
}
	int count_tDBOutput_3=0;

        String insert_tDBOutput_3 = "INSERT INTO [" + tableName_tDBOutput_3 + "] ([ROW_VERSION],[DOC_ORI],[DOC_LOG],[DOC_SER],[DOC_NBR],[PERSON_NBR],[REPRESENTATIVE_TYP],[ADDR_NBR]) VALUES (?,?,?,?,?,?,?,?)";
        java.sql.PreparedStatement pstmt_tDBOutput_3 = conn_tDBOutput_3.prepareStatement(insert_tDBOutput_3);
        resourceMap.put("pstmt_tDBOutput_3", pstmt_tDBOutput_3);


 



/**
 * [tDBOutput_3 begin ] stop
 */



	
	/**
	 * [tMap_3 begin ] start
	 */

	

	
		
		ok_Hash.put("tMap_3", false);
		start_Hash.put("tMap_3", System.currentTimeMillis());
		
	
	currentComponent="tMap_3";

	
					if(execStat) {
						runStat.updateStatOnConnection(resourceMap,iterateId,0,0,"row8");
					}
				
		int tos_count_tMap_3 = 0;
		




// ###############################
// # Lookup's keys initialization
	
		org.talend.designer.components.lookup.memory.AdvancedMemoryLookup<row9Struct> tHash_Lookup_row9 = (org.talend.designer.components.lookup.memory.AdvancedMemoryLookup<row9Struct>) 
				((org.talend.designer.components.lookup.memory.AdvancedMemoryLookup<row9Struct>) 
					globalMap.get( "tHash_Lookup_row9" ))
					;					
					
	

row9Struct row9HashKey = new row9Struct();
row9Struct row9Default = new row9Struct();
// ###############################        

// ###############################
// # Vars initialization
class  Var__tMap_3__Struct  {
}
Var__tMap_3__Struct Var__tMap_3 = new Var__tMap_3__Struct();
// ###############################

// ###############################
// # Outputs initialization
poa_grantessStruct poa_grantess_tmp = new poa_grantessStruct();
// ###############################

        
        



        









 



/**
 * [tMap_3 begin ] stop
 */



	
	/**
	 * [tDBInput_5 begin ] start
	 */

	

	
		
		ok_Hash.put("tDBInput_5", false);
		start_Hash.put("tDBInput_5", System.currentTimeMillis());
		
	
	currentComponent="tDBInput_5";

	
		int tos_count_tDBInput_5 = 0;
		
	
    
	
			org.talend.designer.components.util.mssql.MSSqlGenerateTimestampUtil mssqlGTU_tDBInput_5 = org.talend.designer.components.util.mssql.MSSqlUtilFactory.getMSSqlGenerateTimestampUtil();
			
			java.util.List<String> talendToDBList_tDBInput_5 = new java.util.ArrayList();
			String[] talendToDBArray_tDBInput_5  = new String[]{"FLOAT","NUMERIC","NUMERIC IDENTITY","DECIMAL","DECIMAL IDENTITY","REAL"}; 
			java.util.Collections.addAll(talendToDBList_tDBInput_5, talendToDBArray_tDBInput_5); 
		    int nb_line_tDBInput_5 = 0;
		    java.sql.Connection conn_tDBInput_5 = null;
				String driverClass_tDBInput_5 = "net.sourceforge.jtds.jdbc.Driver";
			    java.lang.Class jdbcclazz_tDBInput_5 = java.lang.Class.forName(driverClass_tDBInput_5);
				String dbUser_tDBInput_5 = "ADMIN";
				
				 
	final String decryptedPassword_tDBInput_5 = routines.system.PasswordEncryptUtil.decryptPassword("enc:routine.encryption.key.v1:miSyOka6I6nSHQx+vjwSH93cjgrXhTfqLwIiaHqYNzzq");
				
				String dbPwd_tDBInput_5 = decryptedPassword_tDBInput_5;
				
		    String port_tDBInput_5 = "1433";
		    String dbname_tDBInput_5 = "MARCAS_PY" ;
			String url_tDBInput_5 = "jdbc:jtds:sqlserver://" + "localhost" ;
		    if (!"".equals(port_tDBInput_5)) {
		    	url_tDBInput_5 += ":" + "1433";
		    }
		    if (!"".equals(dbname_tDBInput_5)) {
				url_tDBInput_5 += "//" + "MARCAS_PY"; 
		    }
		    url_tDBInput_5 += ";appName=" + projectName + ";" + "";
		    String dbschema_tDBInput_5 = "ADMIN";
				
				conn_tDBInput_5 = java.sql.DriverManager.getConnection(url_tDBInput_5,dbUser_tDBInput_5,dbPwd_tDBInput_5);
		        
		    
			java.sql.Statement stmt_tDBInput_5 = conn_tDBInput_5.createStatement();

		    String dbquery_tDBInput_5 = "SELECT ADMIN.IP_USERDOC_REPRS.ROW_VERSION,\n		ADMIN.IP_USERDOC_REPRS.DOC_ORI,\n		ADMIN.IP_USERDOC_REPRS.DOC_LOG,\n		ADMIN."
+"IP_USERDOC_REPRS.DOC_SER,\n		ADMIN.IP_USERDOC_REPRS.DOC_NBR,\n		ADMIN.IP_USERDOC_REPRS.PERSON_NBR,\n		ADMIN.IP_USERDOC_REPR"
+"S.ADDR_NBR,\n		ADMIN.IP_USERDOC_REPRS.REPRESENTATIVE_TYP\nFROM	ADMIN.IP_USERDOC_REPRS";
		    

            	globalMap.put("tDBInput_5_QUERY",dbquery_tDBInput_5);
		    java.sql.ResultSet rs_tDBInput_5 = null;

		    try {
		    	rs_tDBInput_5 = stmt_tDBInput_5.executeQuery(dbquery_tDBInput_5);
		    	java.sql.ResultSetMetaData rsmd_tDBInput_5 = rs_tDBInput_5.getMetaData();
		    	int colQtyInRs_tDBInput_5 = rsmd_tDBInput_5.getColumnCount();

		    String tmpContent_tDBInput_5 = null;
		    
		    
		    while (rs_tDBInput_5.next()) {
		        nb_line_tDBInput_5++;
		        
							if(colQtyInRs_tDBInput_5 < 1) {
								row8.ROW_VERSION = null;
							} else {
		                          
            row8.ROW_VERSION = rs_tDBInput_5.getBigDecimal(1);
            if(rs_tDBInput_5.wasNull()){
                    throw new RuntimeException("Null value in non-Nullable column");
            }
		                    }
							if(colQtyInRs_tDBInput_5 < 2) {
								row8.DOC_ORI = null;
							} else {
	                         		
           		tmpContent_tDBInput_5 = rs_tDBInput_5.getString(2);
            if(tmpContent_tDBInput_5 != null) {
            	if (talendToDBList_tDBInput_5 .contains(rsmd_tDBInput_5.getColumnTypeName(2).toUpperCase(java.util.Locale.ENGLISH))) {
            		row8.DOC_ORI = FormatterUtils.formatUnwithE(tmpContent_tDBInput_5);
            	} else {
                	row8.DOC_ORI = tmpContent_tDBInput_5;
                }
            } else {
                row8.DOC_ORI = null;
            }
		                    }
							if(colQtyInRs_tDBInput_5 < 3) {
								row8.DOC_LOG = null;
							} else {
	                         		
           		tmpContent_tDBInput_5 = rs_tDBInput_5.getString(3);
            if(tmpContent_tDBInput_5 != null) {
            	if (talendToDBList_tDBInput_5 .contains(rsmd_tDBInput_5.getColumnTypeName(3).toUpperCase(java.util.Locale.ENGLISH))) {
            		row8.DOC_LOG = FormatterUtils.formatUnwithE(tmpContent_tDBInput_5);
            	} else {
                	row8.DOC_LOG = tmpContent_tDBInput_5;
                }
            } else {
                row8.DOC_LOG = null;
            }
		                    }
							if(colQtyInRs_tDBInput_5 < 4) {
								row8.DOC_SER = null;
							} else {
		                          
            row8.DOC_SER = rs_tDBInput_5.getBigDecimal(4);
            if(rs_tDBInput_5.wasNull()){
                    throw new RuntimeException("Null value in non-Nullable column");
            }
		                    }
							if(colQtyInRs_tDBInput_5 < 5) {
								row8.DOC_NBR = null;
							} else {
		                          
            row8.DOC_NBR = rs_tDBInput_5.getBigDecimal(5);
            if(rs_tDBInput_5.wasNull()){
                    throw new RuntimeException("Null value in non-Nullable column");
            }
		                    }
							if(colQtyInRs_tDBInput_5 < 6) {
								row8.PERSON_NBR = null;
							} else {
		                          
            row8.PERSON_NBR = rs_tDBInput_5.getBigDecimal(6);
            if(rs_tDBInput_5.wasNull()){
                    throw new RuntimeException("Null value in non-Nullable column");
            }
		                    }
							if(colQtyInRs_tDBInput_5 < 7) {
								row8.ADDR_NBR = null;
							} else {
		                          
            row8.ADDR_NBR = rs_tDBInput_5.getBigDecimal(7);
            if(rs_tDBInput_5.wasNull()){
                    throw new RuntimeException("Null value in non-Nullable column");
            }
		                    }
							if(colQtyInRs_tDBInput_5 < 8) {
								row8.REPRESENTATIVE_TYP = null;
							} else {
	                         		
           		tmpContent_tDBInput_5 = rs_tDBInput_5.getString(8);
            if(tmpContent_tDBInput_5 != null) {
            	if (talendToDBList_tDBInput_5 .contains(rsmd_tDBInput_5.getColumnTypeName(8).toUpperCase(java.util.Locale.ENGLISH))) {
            		row8.REPRESENTATIVE_TYP = FormatterUtils.formatUnwithE(tmpContent_tDBInput_5);
            	} else {
                	row8.REPRESENTATIVE_TYP = tmpContent_tDBInput_5;
                }
            } else {
                row8.REPRESENTATIVE_TYP = null;
            }
		                    }
					





 



/**
 * [tDBInput_5 begin ] stop
 */
	
	/**
	 * [tDBInput_5 main ] start
	 */

	

	
	
	currentComponent="tDBInput_5";

	

 


	tos_count_tDBInput_5++;

/**
 * [tDBInput_5 main ] stop
 */
	
	/**
	 * [tDBInput_5 process_data_begin ] start
	 */

	

	
	
	currentComponent="tDBInput_5";

	

 



/**
 * [tDBInput_5 process_data_begin ] stop
 */

	
	/**
	 * [tMap_3 main ] start
	 */

	

	
	
	currentComponent="tMap_3";

	
					if(execStat){
						runStat.updateStatOnConnection(iterateId,1,1
						
							,"row8"
						
						);
					}
					

		
		
		boolean hasCasePrimitiveKeyWithNull_tMap_3 = false;
		
        // ###############################
        // # Input tables (lookups)
		  boolean rejectedInnerJoin_tMap_3 = false;
		  boolean mainRowRejected_tMap_3 = false;
            				    								  
		

				///////////////////////////////////////////////
				// Starting Lookup Table "row9" 
				///////////////////////////////////////////////


				
				
                            
 					    boolean forceLooprow9 = false;
       		  	    	
       		  	    	
 							row9Struct row9ObjectFromLookup = null;
                          
		           		  	if(!rejectedInnerJoin_tMap_3) { // G_TM_M_020

								
								hasCasePrimitiveKeyWithNull_tMap_3 = false;
								
                        		    		    row9HashKey.DOC_ORI = row8.DOC_ORI ;
                        		    		
                        		    		    row9HashKey.DOC_LOG = row8.DOC_LOG ;
                        		    		
                        		    		    row9HashKey.DOC_SER = row8.DOC_SER ;
                        		    		
                        		    		    row9HashKey.DOC_NBR = row8.DOC_NBR ;
                        		    		

								
		                        	row9HashKey.hashCodeDirty = true;
                        		
	  					
	  							
			  					
			  					
	  					
		  							tHash_Lookup_row9.lookup( row9HashKey );

	  							

	  							

 								
								  
								  if(!tHash_Lookup_row9.hasNext()) { // G_TM_M_090

  								
		  				
	  								
			  							rejectedInnerJoin_tMap_3 = true;
	  								
						
									
  									  		
 								
								  
								  } // G_TM_M_090

  								



							} // G_TM_M_020
			           		  	  
							
				           		if(tHash_Lookup_row9 != null && tHash_Lookup_row9.getCount(row9HashKey) > 1) { // G 071
			  							
			  						
									 		
									//System.out.println("WARNING: UNIQUE MATCH is configured for the lookup 'row9' and it contains more one result from keys :  row9.DOC_ORI = '" + row9HashKey.DOC_ORI + "', row9.DOC_LOG = '" + row9HashKey.DOC_LOG + "', row9.DOC_SER = '" + row9HashKey.DOC_SER + "', row9.DOC_NBR = '" + row9HashKey.DOC_NBR + "'");
								} // G 071
							

							row9Struct row9 = null;
                    		  	 
							   
                    		  	 
	       		  	    	row9Struct fromLookup_row9 = null;
							row9 = row9Default;
										 
							
								 
							
							
								if (tHash_Lookup_row9 !=null && tHash_Lookup_row9.hasNext()) { // G 099
								
							
								
								fromLookup_row9 = tHash_Lookup_row9.next();

							
							
								} // G 099
							
							

							if(fromLookup_row9 != null) {
								row9 = fromLookup_row9;
							}
							
							
							
			  							
								
	                    		  	
		                    
	            	
	            	
	            // ###############################
        { // start of Var scope
        
	        // ###############################
        	// # Vars tables
        
Var__tMap_3__Struct Var = Var__tMap_3;// ###############################
        // ###############################
        // # Output tables

poa_grantess = null;

if(!rejectedInnerJoin_tMap_3 ) {

// # Output table : 'poa_grantess'
poa_grantess_tmp.ROW_VERSION = row8.ROW_VERSION;
poa_grantess_tmp.DOC_ORI = row8.DOC_ORI;
poa_grantess_tmp.DOC_LOG = row8.DOC_LOG;
poa_grantess_tmp.DOC_SER = row8.DOC_SER;
poa_grantess_tmp.DOC_NBR = row8.DOC_NBR;
poa_grantess_tmp.PERSON_NBR = row8.PERSON_NBR;
poa_grantess_tmp.REPRESENTATIVE_TYP = row8.REPRESENTATIVE_TYP;
poa_grantess_tmp.ADDR_NBR = row8.ADDR_NBR;
poa_grantess = poa_grantess_tmp;
}  // closing inner join bracket (2)
// ###############################

} // end of Var scope

rejectedInnerJoin_tMap_3 = false;










 


	tos_count_tMap_3++;

/**
 * [tMap_3 main ] stop
 */
	
	/**
	 * [tMap_3 process_data_begin ] start
	 */

	

	
	
	currentComponent="tMap_3";

	

 



/**
 * [tMap_3 process_data_begin ] stop
 */
// Start of branch "poa_grantess"
if(poa_grantess != null) { 
			row10 = null;



	
	/**
	 * [tDBOutput_3 main ] start
	 */

	

	
	
	currentComponent="tDBOutput_3";

	
					if(execStat){
						runStat.updateStatOnConnection(iterateId,1,1
						
							,"poa_grantess"
						
						);
					}
					



            row10 = null;
        whetherReject_tDBOutput_3 = false;
            try {
                    pstmt_tDBOutput_3.setBigDecimal(1, poa_grantess.ROW_VERSION);

                    if(poa_grantess.DOC_ORI == null) {
pstmt_tDBOutput_3.setNull(2, java.sql.Types.VARCHAR);
} else {pstmt_tDBOutput_3.setString(2, poa_grantess.DOC_ORI);
}

                    if(poa_grantess.DOC_LOG == null) {
pstmt_tDBOutput_3.setNull(3, java.sql.Types.VARCHAR);
} else {pstmt_tDBOutput_3.setString(3, poa_grantess.DOC_LOG);
}

                    pstmt_tDBOutput_3.setBigDecimal(4, poa_grantess.DOC_SER);

                    pstmt_tDBOutput_3.setBigDecimal(5, poa_grantess.DOC_NBR);

                    pstmt_tDBOutput_3.setBigDecimal(6, poa_grantess.PERSON_NBR);

                    if(poa_grantess.REPRESENTATIVE_TYP == null) {
pstmt_tDBOutput_3.setNull(7, java.sql.Types.VARCHAR);
} else {pstmt_tDBOutput_3.setString(7, poa_grantess.REPRESENTATIVE_TYP);
}

                    pstmt_tDBOutput_3.setBigDecimal(8, poa_grantess.ADDR_NBR);


                nb_line_tDBOutput_3++;
                insertedCount_tDBOutput_3 = insertedCount_tDBOutput_3 + pstmt_tDBOutput_3.executeUpdate();
            } catch(java.lang.Exception e) {
                whetherReject_tDBOutput_3 = true;
                        row10 = new row10Struct();
                            row10.ROW_VERSION = poa_grantess.ROW_VERSION;
                            row10.DOC_ORI = poa_grantess.DOC_ORI;
                            row10.DOC_LOG = poa_grantess.DOC_LOG;
                            row10.DOC_SER = poa_grantess.DOC_SER;
                            row10.DOC_NBR = poa_grantess.DOC_NBR;
                            row10.PERSON_NBR = poa_grantess.PERSON_NBR;
                            row10.REPRESENTATIVE_TYP = poa_grantess.REPRESENTATIVE_TYP;
                            row10.ADDR_NBR = poa_grantess.ADDR_NBR;
                        rejectedCount_tDBOutput_3 = rejectedCount_tDBOutput_3 + 1;
                        row10.errorCode = ((java.sql.SQLException)e).getSQLState();
                        row10.errorMessage = e.getMessage() + " - Line: " + tos_count_tDBOutput_3;
            }
            if(!whetherReject_tDBOutput_3) {
            }
            	//////////batch execute by batch size///////
            	class LimitBytesHelper_tDBOutput_3{
            		public int limitBytePart1(int counter,java.sql.PreparedStatement pstmt_tDBOutput_3) throws Exception {
                try {
						
						for(int countEach_tDBOutput_3: pstmt_tDBOutput_3.executeBatch()) {
							if(countEach_tDBOutput_3 == -2 || countEach_tDBOutput_3 == -3) {
								break;
							}
							counter += countEach_tDBOutput_3;
						}
						
                }catch (java.sql.BatchUpdateException e){
                	
                	int countSum_tDBOutput_3 = 0;
					for(int countEach_tDBOutput_3: e.getUpdateCounts()) {
						counter += (countEach_tDBOutput_3 < 0 ? 0 : countEach_tDBOutput_3);
					}
				
            	    	
                		System.err.println(e.getMessage());
                	
               			 }
    				return counter;
            	}
            	
            	public int limitBytePart2(int counter,java.sql.PreparedStatement pstmt_tDBOutput_3) throws Exception {
                try {
                		
						for(int countEach_tDBOutput_3: pstmt_tDBOutput_3.executeBatch()) {
							if(countEach_tDBOutput_3 == -2 || countEach_tDBOutput_3 == -3) {
								break;
							}
							counter += countEach_tDBOutput_3;
						}
						
                }catch (java.sql.BatchUpdateException e){
                	
                	
					for(int countEach_tDBOutput_3: e.getUpdateCounts()) {
						counter += (countEach_tDBOutput_3 < 0 ? 0 : countEach_tDBOutput_3);
					}
					
            	    	
                        System.err.println(e.getMessage());
                	
                		}	
                	return counter;	
            	}
            }

    	////////////commit every////////////
    			
    		    commitCounter_tDBOutput_3++;
                if(commitEvery_tDBOutput_3 <= commitCounter_tDBOutput_3) {
                	
                	conn_tDBOutput_3.commit();
            		
                	commitCounter_tDBOutput_3=0;
                }

 


	tos_count_tDBOutput_3++;

/**
 * [tDBOutput_3 main ] stop
 */
	
	/**
	 * [tDBOutput_3 process_data_begin ] start
	 */

	

	
	
	currentComponent="tDBOutput_3";

	

 



/**
 * [tDBOutput_3 process_data_begin ] stop
 */
// Start of branch "row10"
if(row10 != null) { 



	
	/**
	 * [tLogRow_5 main ] start
	 */

	

	
	
	currentComponent="tLogRow_5";

	
					if(execStat){
						runStat.updateStatOnConnection(iterateId,1,1
						
							,"row10"
						
						);
					}
					
///////////////////////		
						



				strBuffer_tLogRow_5 = new StringBuilder();




   				
	    		if(row10.ROW_VERSION != null) { //              
                    							
       
				strBuffer_tLogRow_5.append(
								row10.ROW_VERSION.setScale(0, java.math.RoundingMode.HALF_UP).toPlainString()				
				);


							
	    		} //  			

    			strBuffer_tLogRow_5.append("|");
    			


   				
	    		if(row10.DOC_ORI != null) { //              
                    							
       
				strBuffer_tLogRow_5.append(
				                String.valueOf(row10.DOC_ORI)							
				);


							
	    		} //  			

    			strBuffer_tLogRow_5.append("|");
    			


   				
	    		if(row10.DOC_LOG != null) { //              
                    							
       
				strBuffer_tLogRow_5.append(
				                String.valueOf(row10.DOC_LOG)							
				);


							
	    		} //  			

    			strBuffer_tLogRow_5.append("|");
    			


   				
	    		if(row10.DOC_SER != null) { //              
                    							
       
				strBuffer_tLogRow_5.append(
								row10.DOC_SER.setScale(0, java.math.RoundingMode.HALF_UP).toPlainString()				
				);


							
	    		} //  			

    			strBuffer_tLogRow_5.append("|");
    			


   				
	    		if(row10.DOC_NBR != null) { //              
                    							
       
				strBuffer_tLogRow_5.append(
								row10.DOC_NBR.setScale(0, java.math.RoundingMode.HALF_UP).toPlainString()				
				);


							
	    		} //  			

    			strBuffer_tLogRow_5.append("|");
    			


   				
	    		if(row10.PERSON_NBR != null) { //              
                    							
       
				strBuffer_tLogRow_5.append(
								row10.PERSON_NBR.setScale(0, java.math.RoundingMode.HALF_UP).toPlainString()				
				);


							
	    		} //  			

    			strBuffer_tLogRow_5.append("|");
    			


   				
	    		if(row10.REPRESENTATIVE_TYP != null) { //              
                    							
       
				strBuffer_tLogRow_5.append(
				                String.valueOf(row10.REPRESENTATIVE_TYP)							
				);


							
	    		} //  			

    			strBuffer_tLogRow_5.append("|");
    			


   				
	    		if(row10.ADDR_NBR != null) { //              
                    							
       
				strBuffer_tLogRow_5.append(
								row10.ADDR_NBR.setScale(0, java.math.RoundingMode.HALF_UP).toPlainString()				
				);


							
	    		} //  			

    			strBuffer_tLogRow_5.append("|");
    			


   				
	    		if(row10.errorCode != null) { //              
                    							
       
				strBuffer_tLogRow_5.append(
				                String.valueOf(row10.errorCode)							
				);


							
	    		} //  			

    			strBuffer_tLogRow_5.append("|");
    			


   				
	    		if(row10.errorMessage != null) { //              
                    							
       
				strBuffer_tLogRow_5.append(
				                String.valueOf(row10.errorMessage)							
				);


							
	    		} //  			
 

                    if (globalMap.get("tLogRow_CONSOLE")!=null)
                    {
                    	consoleOut_tLogRow_5 = (java.io.PrintStream) globalMap.get("tLogRow_CONSOLE");
                    }
                    else
                    {
                    	consoleOut_tLogRow_5 = new java.io.PrintStream(new java.io.BufferedOutputStream(System.out));
                    	globalMap.put("tLogRow_CONSOLE",consoleOut_tLogRow_5);
                    }
                    consoleOut_tLogRow_5.println(strBuffer_tLogRow_5.toString());
                    consoleOut_tLogRow_5.flush();
                    nb_line_tLogRow_5++;
//////

//////                    
                    
///////////////////////    			

 


	tos_count_tLogRow_5++;

/**
 * [tLogRow_5 main ] stop
 */
	
	/**
	 * [tLogRow_5 process_data_begin ] start
	 */

	

	
	
	currentComponent="tLogRow_5";

	

 



/**
 * [tLogRow_5 process_data_begin ] stop
 */
	
	/**
	 * [tLogRow_5 process_data_end ] start
	 */

	

	
	
	currentComponent="tLogRow_5";

	

 



/**
 * [tLogRow_5 process_data_end ] stop
 */

} // End of branch "row10"




	
	/**
	 * [tDBOutput_3 process_data_end ] start
	 */

	

	
	
	currentComponent="tDBOutput_3";

	

 



/**
 * [tDBOutput_3 process_data_end ] stop
 */

} // End of branch "poa_grantess"




	
	/**
	 * [tMap_3 process_data_end ] start
	 */

	

	
	
	currentComponent="tMap_3";

	

 



/**
 * [tMap_3 process_data_end ] stop
 */



	
	/**
	 * [tDBInput_5 process_data_end ] start
	 */

	

	
	
	currentComponent="tDBInput_5";

	

 



/**
 * [tDBInput_5 process_data_end ] stop
 */
	
	/**
	 * [tDBInput_5 end ] start
	 */

	

	
	
	currentComponent="tDBInput_5";

	

	}
}finally{
	if (rs_tDBInput_5 != null) {
		rs_tDBInput_5.close();
	}
	if (stmt_tDBInput_5 != null) {
		stmt_tDBInput_5.close();
	}
		if(conn_tDBInput_5 != null && !conn_tDBInput_5.isClosed()) {
			
			conn_tDBInput_5.close();
			
			if("com.mysql.cj.jdbc.Driver".equals((String)globalMap.get("driverClass_"))
			    && routines.system.BundleUtils.inOSGi()) {
			        Class.forName("com.mysql.cj.jdbc.AbandonedConnectionCleanupThread").
			            getMethod("checkedShutdown").invoke(null, (Object[]) null);
			}
			
		}
}
globalMap.put("tDBInput_5_NB_LINE",nb_line_tDBInput_5);

 

ok_Hash.put("tDBInput_5", true);
end_Hash.put("tDBInput_5", System.currentTimeMillis());




/**
 * [tDBInput_5 end ] stop
 */

	
	/**
	 * [tMap_3 end ] start
	 */

	

	
	
	currentComponent="tMap_3";

	


// ###############################
// # Lookup hashes releasing
					if(tHash_Lookup_row9 != null) {
						tHash_Lookup_row9.endGet();
					}
					globalMap.remove( "tHash_Lookup_row9" );

					
					
				
// ###############################      





				if(execStat){
			  		runStat.updateStat(resourceMap,iterateId,2,0,"row8");
			  	}
			  	
 

ok_Hash.put("tMap_3", true);
end_Hash.put("tMap_3", System.currentTimeMillis());




/**
 * [tMap_3 end ] stop
 */

	
	/**
	 * [tDBOutput_3 end ] start
	 */

	

	
	
	currentComponent="tDBOutput_3";

	



        if(pstmt_tDBOutput_3 != null) {
			
				pstmt_tDBOutput_3.close();
				resourceMap.remove("pstmt_tDBOutput_3");
			
        }
    resourceMap.put("statementClosed_tDBOutput_3", true);
            conn_tDBOutput_3.commit();
			
        conn_tDBOutput_3 .close();
        resourceMap.put("finish_tDBOutput_3", true);

	nb_line_deleted_tDBOutput_3=nb_line_deleted_tDBOutput_3+ deletedCount_tDBOutput_3;
	nb_line_update_tDBOutput_3=nb_line_update_tDBOutput_3 + updatedCount_tDBOutput_3;
	nb_line_inserted_tDBOutput_3=nb_line_inserted_tDBOutput_3 + insertedCount_tDBOutput_3;
	nb_line_rejected_tDBOutput_3=nb_line_rejected_tDBOutput_3 + rejectedCount_tDBOutput_3;
	
        globalMap.put("tDBOutput_3_NB_LINE",nb_line_tDBOutput_3);
        globalMap.put("tDBOutput_3_NB_LINE_UPDATED",nb_line_update_tDBOutput_3);
        globalMap.put("tDBOutput_3_NB_LINE_INSERTED",nb_line_inserted_tDBOutput_3);
        globalMap.put("tDBOutput_3_NB_LINE_DELETED",nb_line_deleted_tDBOutput_3);
        globalMap.put("tDBOutput_3_NB_LINE_REJECTED", nb_line_rejected_tDBOutput_3);
    

	

				if(execStat){
			  		runStat.updateStat(resourceMap,iterateId,2,0,"poa_grantess");
			  	}
			  	
 

ok_Hash.put("tDBOutput_3", true);
end_Hash.put("tDBOutput_3", System.currentTimeMillis());




/**
 * [tDBOutput_3 end ] stop
 */

	
	/**
	 * [tLogRow_5 end ] start
	 */

	

	
	
	currentComponent="tLogRow_5";

	


//////
//////
globalMap.put("tLogRow_5_NB_LINE",nb_line_tLogRow_5);

///////////////////////    			

				if(execStat){
			  		runStat.updateStat(resourceMap,iterateId,2,0,"row10");
			  	}
			  	
 

ok_Hash.put("tLogRow_5", true);
end_Hash.put("tLogRow_5", System.currentTimeMillis());




/**
 * [tLogRow_5 end ] stop
 */









				}//end the resume

				
				    			if(resumeEntryMethodName == null || globalResumeTicket){
				    				resumeUtil.addLog("CHECKPOINT", "CONNECTION:SUBJOB_OK:tDBInput_5:OnSubjobOk", "", Thread.currentThread().getId() + "", "", "", "", "", "");
								}	    				    			
					    	
								if(execStat){    	
									runStat.updateStatOnConnection("OnSubjobOk7", 0, "ok");
								} 
							
							tDBInput_6Process(globalMap); 
						



	
			}catch(java.lang.Exception e){	
				
				TalendException te = new TalendException(e, currentComponent, globalMap);
				
				throw te;
			}catch(java.lang.Error error){	
				
					runStat.stopThreadStat();
				
				throw error;
			}finally{
				
					     			//free memory for "tMap_3"
					     			globalMap.remove("tHash_Lookup_row9"); 
				     			
				try{
					
	
	/**
	 * [tDBInput_5 finally ] start
	 */

	

	
	
	currentComponent="tDBInput_5";

	

 



/**
 * [tDBInput_5 finally ] stop
 */

	
	/**
	 * [tMap_3 finally ] start
	 */

	

	
	
	currentComponent="tMap_3";

	

 



/**
 * [tMap_3 finally ] stop
 */

	
	/**
	 * [tDBOutput_3 finally ] start
	 */

	

	
	
	currentComponent="tDBOutput_3";

	



    try {
    if (resourceMap.get("statementClosed_tDBOutput_3") == null) {
                java.sql.PreparedStatement pstmtToClose_tDBOutput_3 = null;
                if ((pstmtToClose_tDBOutput_3 = (java.sql.PreparedStatement) resourceMap.remove("pstmt_tDBOutput_3")) != null) {
                    pstmtToClose_tDBOutput_3.close();
                }
    }
    } finally {
        if(resourceMap.get("finish_tDBOutput_3") == null){
            java.sql.Connection ctn_tDBOutput_3 = null;
            if((ctn_tDBOutput_3 = (java.sql.Connection)resourceMap.get("conn_tDBOutput_3")) != null){
                try {
                    ctn_tDBOutput_3.close();
                } catch (java.sql.SQLException sqlEx_tDBOutput_3) {
                    String errorMessage_tDBOutput_3 = "failed to close the connection in tDBOutput_3 :" + sqlEx_tDBOutput_3.getMessage();
                    System.err.println(errorMessage_tDBOutput_3);
                }
            }
        }
    }
 



/**
 * [tDBOutput_3 finally ] stop
 */

	
	/**
	 * [tLogRow_5 finally ] start
	 */

	

	
	
	currentComponent="tLogRow_5";

	

 



/**
 * [tLogRow_5 finally ] stop
 */









				}catch(java.lang.Exception e){	
					//ignore
				}catch(java.lang.Error error){
					//ignore
				}
				resourceMap = null;
			}
		

		globalMap.put("tDBInput_5_SUBPROCESS_STATE", 1);
	}
	


public static class row14Struct implements routines.system.IPersistableRow<row14Struct> {
    final static byte[] commonByteArrayLock_WIPO_PROJECTS_Gg_POA = new byte[0];
    static byte[] commonByteArray_WIPO_PROJECTS_Gg_POA = new byte[0];
	protected static final int DEFAULT_HASHCODE = 1;
    protected static final int PRIME = 31;
    protected int hashCode = DEFAULT_HASHCODE;
    public boolean hashCodeDirty = true;

    public String loopKey;



	
			    public String FILE_SEQ;

				public String getFILE_SEQ () {
					return this.FILE_SEQ;
				}
				
			    public String FILE_TYP;

				public String getFILE_TYP () {
					return this.FILE_TYP;
				}
				
			    public BigDecimal FILE_SER;

				public BigDecimal getFILE_SER () {
					return this.FILE_SER;
				}
				
			    public BigDecimal FILE_NBR;

				public BigDecimal getFILE_NBR () {
					return this.FILE_NBR;
				}
				
			    public String POA_DOC_ORI;

				public String getPOA_DOC_ORI () {
					return this.POA_DOC_ORI;
				}
				
			    public String POA_LOG_TYP;

				public String getPOA_LOG_TYP () {
					return this.POA_LOG_TYP;
				}
				
			    public BigDecimal POA_DOC_SER;

				public BigDecimal getPOA_DOC_SER () {
					return this.POA_DOC_SER;
				}
				
			    public BigDecimal POA_DOC_NBR;

				public BigDecimal getPOA_DOC_NBR () {
					return this.POA_DOC_NBR;
				}
				
			    public String errorCode;

				public String getErrorCode () {
					return this.errorCode;
				}
				
			    public String errorMessage;

				public String getErrorMessage () {
					return this.errorMessage;
				}
				


	@Override
	public int hashCode() {
		if (this.hashCodeDirty) {
			final int prime = PRIME;
			int result = DEFAULT_HASHCODE;
	
						result = prime * result + ((this.FILE_SEQ == null) ? 0 : this.FILE_SEQ.hashCode());
					
						result = prime * result + ((this.FILE_TYP == null) ? 0 : this.FILE_TYP.hashCode());
					
						result = prime * result + ((this.FILE_SER == null) ? 0 : this.FILE_SER.hashCode());
					
						result = prime * result + ((this.FILE_NBR == null) ? 0 : this.FILE_NBR.hashCode());
					
    		this.hashCode = result;
    		this.hashCodeDirty = false;
		}
		return this.hashCode;
	}

	@Override
	public boolean equals(Object obj) {
		if (this == obj) return true;
		if (obj == null) return false;
		if (getClass() != obj.getClass()) return false;
		final row14Struct other = (row14Struct) obj;
		
						if (this.FILE_SEQ == null) {
							if (other.FILE_SEQ != null)
								return false;
						
						} else if (!this.FILE_SEQ.equals(other.FILE_SEQ))
						
							return false;
					
						if (this.FILE_TYP == null) {
							if (other.FILE_TYP != null)
								return false;
						
						} else if (!this.FILE_TYP.equals(other.FILE_TYP))
						
							return false;
					
						if (this.FILE_SER == null) {
							if (other.FILE_SER != null)
								return false;
						
						} else if (!this.FILE_SER.equals(other.FILE_SER))
						
							return false;
					
						if (this.FILE_NBR == null) {
							if (other.FILE_NBR != null)
								return false;
						
						} else if (!this.FILE_NBR.equals(other.FILE_NBR))
						
							return false;
					

		return true;
    }

	public void copyDataTo(row14Struct other) {

		other.FILE_SEQ = this.FILE_SEQ;
	            other.FILE_TYP = this.FILE_TYP;
	            other.FILE_SER = this.FILE_SER;
	            other.FILE_NBR = this.FILE_NBR;
	            other.POA_DOC_ORI = this.POA_DOC_ORI;
	            other.POA_LOG_TYP = this.POA_LOG_TYP;
	            other.POA_DOC_SER = this.POA_DOC_SER;
	            other.POA_DOC_NBR = this.POA_DOC_NBR;
	            other.errorCode = this.errorCode;
	            other.errorMessage = this.errorMessage;
	            
	}

	public void copyKeysDataTo(row14Struct other) {

		other.FILE_SEQ = this.FILE_SEQ;
	            	other.FILE_TYP = this.FILE_TYP;
	            	other.FILE_SER = this.FILE_SER;
	            	other.FILE_NBR = this.FILE_NBR;
	            	
	}




	private String readString(ObjectInputStream dis) throws IOException{
		String strReturn = null;
		int length = 0;
        length = dis.readInt();
		if (length == -1) {
			strReturn = null;
		} else {
			if(length > commonByteArray_WIPO_PROJECTS_Gg_POA.length) {
				if(length < 1024 && commonByteArray_WIPO_PROJECTS_Gg_POA.length == 0) {
   					commonByteArray_WIPO_PROJECTS_Gg_POA = new byte[1024];
				} else {
   					commonByteArray_WIPO_PROJECTS_Gg_POA = new byte[2 * length];
   				}
			}
			dis.readFully(commonByteArray_WIPO_PROJECTS_Gg_POA, 0, length);
			strReturn = new String(commonByteArray_WIPO_PROJECTS_Gg_POA, 0, length, utf8Charset);
		}
		return strReturn;
	}

    private void writeString(String str, ObjectOutputStream dos) throws IOException{
		if(str == null) {
            dos.writeInt(-1);
		} else {
            byte[] byteArray = str.getBytes(utf8Charset);
	    	dos.writeInt(byteArray.length);
			dos.write(byteArray);
    	}
    }

    public void readData(ObjectInputStream dis) {

		synchronized(commonByteArrayLock_WIPO_PROJECTS_Gg_POA) {

        	try {

        		int length = 0;
		
					this.FILE_SEQ = readString(dis);
					
					this.FILE_TYP = readString(dis);
					
						this.FILE_SER = (BigDecimal) dis.readObject();
					
						this.FILE_NBR = (BigDecimal) dis.readObject();
					
					this.POA_DOC_ORI = readString(dis);
					
					this.POA_LOG_TYP = readString(dis);
					
						this.POA_DOC_SER = (BigDecimal) dis.readObject();
					
						this.POA_DOC_NBR = (BigDecimal) dis.readObject();
					
					this.errorCode = readString(dis);
					
					this.errorMessage = readString(dis);
					
        	} catch (IOException e) {
	            throw new RuntimeException(e);

		
			} catch(ClassNotFoundException eCNFE) {
				 throw new RuntimeException(eCNFE);
		

        }

		

      }


    }

    public void writeData(ObjectOutputStream dos) {
        try {

		
					// String
				
						writeString(this.FILE_SEQ,dos);
					
					// String
				
						writeString(this.FILE_TYP,dos);
					
					// BigDecimal
				
       			    	dos.writeObject(this.FILE_SER);
					
					// BigDecimal
				
       			    	dos.writeObject(this.FILE_NBR);
					
					// String
				
						writeString(this.POA_DOC_ORI,dos);
					
					// String
				
						writeString(this.POA_LOG_TYP,dos);
					
					// BigDecimal
				
       			    	dos.writeObject(this.POA_DOC_SER);
					
					// BigDecimal
				
       			    	dos.writeObject(this.POA_DOC_NBR);
					
					// String
				
						writeString(this.errorCode,dos);
					
					// String
				
						writeString(this.errorMessage,dos);
					
        	} catch (IOException e) {
	            throw new RuntimeException(e);
        }


    }


    public String toString() {

		StringBuilder sb = new StringBuilder();
		sb.append(super.toString());
		sb.append("[");
		sb.append("FILE_SEQ="+FILE_SEQ);
		sb.append(",FILE_TYP="+FILE_TYP);
		sb.append(",FILE_SER="+String.valueOf(FILE_SER));
		sb.append(",FILE_NBR="+String.valueOf(FILE_NBR));
		sb.append(",POA_DOC_ORI="+POA_DOC_ORI);
		sb.append(",POA_LOG_TYP="+POA_LOG_TYP);
		sb.append(",POA_DOC_SER="+String.valueOf(POA_DOC_SER));
		sb.append(",POA_DOC_NBR="+String.valueOf(POA_DOC_NBR));
		sb.append(",errorCode="+errorCode);
		sb.append(",errorMessage="+errorMessage);
	    sb.append("]");

	    return sb.toString();
    }

    /**
     * Compare keys
     */
    public int compareTo(row14Struct other) {

		int returnValue = -1;
		
						returnValue = checkNullsAndCompare(this.FILE_SEQ, other.FILE_SEQ);
						if(returnValue != 0) {
							return returnValue;
						}

					
						returnValue = checkNullsAndCompare(this.FILE_TYP, other.FILE_TYP);
						if(returnValue != 0) {
							return returnValue;
						}

					
						returnValue = checkNullsAndCompare(this.FILE_SER, other.FILE_SER);
						if(returnValue != 0) {
							return returnValue;
						}

					
						returnValue = checkNullsAndCompare(this.FILE_NBR, other.FILE_NBR);
						if(returnValue != 0) {
							return returnValue;
						}

					
	    return returnValue;
    }


    private int checkNullsAndCompare(Object object1, Object object2) {
        int returnValue = 0;
		if (object1 instanceof Comparable && object2 instanceof Comparable) {
            returnValue = ((Comparable) object1).compareTo(object2);
        } else if (object1 != null && object2 != null) {
            returnValue = compareStrings(object1.toString(), object2.toString());
        } else if (object1 == null && object2 != null) {
            returnValue = 1;
        } else if (object1 != null && object2 == null) {
            returnValue = -1;
        } else {
            returnValue = 0;
        }

        return returnValue;
    }

    private int compareStrings(String string1, String string2) {
        return string1.compareTo(string2);
    }


}

public static class update_marksStruct implements routines.system.IPersistableRow<update_marksStruct> {
    final static byte[] commonByteArrayLock_WIPO_PROJECTS_Gg_POA = new byte[0];
    static byte[] commonByteArray_WIPO_PROJECTS_Gg_POA = new byte[0];
	protected static final int DEFAULT_HASHCODE = 1;
    protected static final int PRIME = 31;
    protected int hashCode = DEFAULT_HASHCODE;
    public boolean hashCodeDirty = true;

    public String loopKey;



	
			    public String FILE_SEQ;

				public String getFILE_SEQ () {
					return this.FILE_SEQ;
				}
				
			    public String FILE_TYP;

				public String getFILE_TYP () {
					return this.FILE_TYP;
				}
				
			    public BigDecimal FILE_SER;

				public BigDecimal getFILE_SER () {
					return this.FILE_SER;
				}
				
			    public BigDecimal FILE_NBR;

				public BigDecimal getFILE_NBR () {
					return this.FILE_NBR;
				}
				
			    public String POA_DOC_ORI;

				public String getPOA_DOC_ORI () {
					return this.POA_DOC_ORI;
				}
				
			    public String POA_LOG_TYP;

				public String getPOA_LOG_TYP () {
					return this.POA_LOG_TYP;
				}
				
			    public BigDecimal POA_DOC_SER;

				public BigDecimal getPOA_DOC_SER () {
					return this.POA_DOC_SER;
				}
				
			    public BigDecimal POA_DOC_NBR;

				public BigDecimal getPOA_DOC_NBR () {
					return this.POA_DOC_NBR;
				}
				


	@Override
	public int hashCode() {
		if (this.hashCodeDirty) {
			final int prime = PRIME;
			int result = DEFAULT_HASHCODE;
	
						result = prime * result + ((this.FILE_SEQ == null) ? 0 : this.FILE_SEQ.hashCode());
					
						result = prime * result + ((this.FILE_TYP == null) ? 0 : this.FILE_TYP.hashCode());
					
						result = prime * result + ((this.FILE_SER == null) ? 0 : this.FILE_SER.hashCode());
					
						result = prime * result + ((this.FILE_NBR == null) ? 0 : this.FILE_NBR.hashCode());
					
    		this.hashCode = result;
    		this.hashCodeDirty = false;
		}
		return this.hashCode;
	}

	@Override
	public boolean equals(Object obj) {
		if (this == obj) return true;
		if (obj == null) return false;
		if (getClass() != obj.getClass()) return false;
		final update_marksStruct other = (update_marksStruct) obj;
		
						if (this.FILE_SEQ == null) {
							if (other.FILE_SEQ != null)
								return false;
						
						} else if (!this.FILE_SEQ.equals(other.FILE_SEQ))
						
							return false;
					
						if (this.FILE_TYP == null) {
							if (other.FILE_TYP != null)
								return false;
						
						} else if (!this.FILE_TYP.equals(other.FILE_TYP))
						
							return false;
					
						if (this.FILE_SER == null) {
							if (other.FILE_SER != null)
								return false;
						
						} else if (!this.FILE_SER.equals(other.FILE_SER))
						
							return false;
					
						if (this.FILE_NBR == null) {
							if (other.FILE_NBR != null)
								return false;
						
						} else if (!this.FILE_NBR.equals(other.FILE_NBR))
						
							return false;
					

		return true;
    }

	public void copyDataTo(update_marksStruct other) {

		other.FILE_SEQ = this.FILE_SEQ;
	            other.FILE_TYP = this.FILE_TYP;
	            other.FILE_SER = this.FILE_SER;
	            other.FILE_NBR = this.FILE_NBR;
	            other.POA_DOC_ORI = this.POA_DOC_ORI;
	            other.POA_LOG_TYP = this.POA_LOG_TYP;
	            other.POA_DOC_SER = this.POA_DOC_SER;
	            other.POA_DOC_NBR = this.POA_DOC_NBR;
	            
	}

	public void copyKeysDataTo(update_marksStruct other) {

		other.FILE_SEQ = this.FILE_SEQ;
	            	other.FILE_TYP = this.FILE_TYP;
	            	other.FILE_SER = this.FILE_SER;
	            	other.FILE_NBR = this.FILE_NBR;
	            	
	}




	private String readString(ObjectInputStream dis) throws IOException{
		String strReturn = null;
		int length = 0;
        length = dis.readInt();
		if (length == -1) {
			strReturn = null;
		} else {
			if(length > commonByteArray_WIPO_PROJECTS_Gg_POA.length) {
				if(length < 1024 && commonByteArray_WIPO_PROJECTS_Gg_POA.length == 0) {
   					commonByteArray_WIPO_PROJECTS_Gg_POA = new byte[1024];
				} else {
   					commonByteArray_WIPO_PROJECTS_Gg_POA = new byte[2 * length];
   				}
			}
			dis.readFully(commonByteArray_WIPO_PROJECTS_Gg_POA, 0, length);
			strReturn = new String(commonByteArray_WIPO_PROJECTS_Gg_POA, 0, length, utf8Charset);
		}
		return strReturn;
	}

    private void writeString(String str, ObjectOutputStream dos) throws IOException{
		if(str == null) {
            dos.writeInt(-1);
		} else {
            byte[] byteArray = str.getBytes(utf8Charset);
	    	dos.writeInt(byteArray.length);
			dos.write(byteArray);
    	}
    }

    public void readData(ObjectInputStream dis) {

		synchronized(commonByteArrayLock_WIPO_PROJECTS_Gg_POA) {

        	try {

        		int length = 0;
		
					this.FILE_SEQ = readString(dis);
					
					this.FILE_TYP = readString(dis);
					
						this.FILE_SER = (BigDecimal) dis.readObject();
					
						this.FILE_NBR = (BigDecimal) dis.readObject();
					
					this.POA_DOC_ORI = readString(dis);
					
					this.POA_LOG_TYP = readString(dis);
					
						this.POA_DOC_SER = (BigDecimal) dis.readObject();
					
						this.POA_DOC_NBR = (BigDecimal) dis.readObject();
					
        	} catch (IOException e) {
	            throw new RuntimeException(e);

		
			} catch(ClassNotFoundException eCNFE) {
				 throw new RuntimeException(eCNFE);
		

        }

		

      }


    }

    public void writeData(ObjectOutputStream dos) {
        try {

		
					// String
				
						writeString(this.FILE_SEQ,dos);
					
					// String
				
						writeString(this.FILE_TYP,dos);
					
					// BigDecimal
				
       			    	dos.writeObject(this.FILE_SER);
					
					// BigDecimal
				
       			    	dos.writeObject(this.FILE_NBR);
					
					// String
				
						writeString(this.POA_DOC_ORI,dos);
					
					// String
				
						writeString(this.POA_LOG_TYP,dos);
					
					// BigDecimal
				
       			    	dos.writeObject(this.POA_DOC_SER);
					
					// BigDecimal
				
       			    	dos.writeObject(this.POA_DOC_NBR);
					
        	} catch (IOException e) {
	            throw new RuntimeException(e);
        }


    }


    public String toString() {

		StringBuilder sb = new StringBuilder();
		sb.append(super.toString());
		sb.append("[");
		sb.append("FILE_SEQ="+FILE_SEQ);
		sb.append(",FILE_TYP="+FILE_TYP);
		sb.append(",FILE_SER="+String.valueOf(FILE_SER));
		sb.append(",FILE_NBR="+String.valueOf(FILE_NBR));
		sb.append(",POA_DOC_ORI="+POA_DOC_ORI);
		sb.append(",POA_LOG_TYP="+POA_LOG_TYP);
		sb.append(",POA_DOC_SER="+String.valueOf(POA_DOC_SER));
		sb.append(",POA_DOC_NBR="+String.valueOf(POA_DOC_NBR));
	    sb.append("]");

	    return sb.toString();
    }

    /**
     * Compare keys
     */
    public int compareTo(update_marksStruct other) {

		int returnValue = -1;
		
						returnValue = checkNullsAndCompare(this.FILE_SEQ, other.FILE_SEQ);
						if(returnValue != 0) {
							return returnValue;
						}

					
						returnValue = checkNullsAndCompare(this.FILE_TYP, other.FILE_TYP);
						if(returnValue != 0) {
							return returnValue;
						}

					
						returnValue = checkNullsAndCompare(this.FILE_SER, other.FILE_SER);
						if(returnValue != 0) {
							return returnValue;
						}

					
						returnValue = checkNullsAndCompare(this.FILE_NBR, other.FILE_NBR);
						if(returnValue != 0) {
							return returnValue;
						}

					
	    return returnValue;
    }


    private int checkNullsAndCompare(Object object1, Object object2) {
        int returnValue = 0;
		if (object1 instanceof Comparable && object2 instanceof Comparable) {
            returnValue = ((Comparable) object1).compareTo(object2);
        } else if (object1 != null && object2 != null) {
            returnValue = compareStrings(object1.toString(), object2.toString());
        } else if (object1 == null && object2 != null) {
            returnValue = 1;
        } else if (object1 != null && object2 == null) {
            returnValue = -1;
        } else {
            returnValue = 0;
        }

        return returnValue;
    }

    private int compareStrings(String string1, String string2) {
        return string1.compareTo(string2);
    }


}

public static class row11Struct implements routines.system.IPersistableRow<row11Struct> {
    final static byte[] commonByteArrayLock_WIPO_PROJECTS_Gg_POA = new byte[0];
    static byte[] commonByteArray_WIPO_PROJECTS_Gg_POA = new byte[0];

	
			    public String USERDOC_SEQ;

				public String getUSERDOC_SEQ () {
					return this.USERDOC_SEQ;
				}
				
			    public BigDecimal USERDOC_SERIES;

				public BigDecimal getUSERDOC_SERIES () {
					return this.USERDOC_SERIES;
				}
				
			    public BigDecimal USERDOC_NBR;

				public BigDecimal getUSERDOC_NBR () {
					return this.USERDOC_NBR;
				}
				
			    public String FILE_SEQ;

				public String getFILE_SEQ () {
					return this.FILE_SEQ;
				}
				
			    public String FILE_TYPE;

				public String getFILE_TYPE () {
					return this.FILE_TYPE;
				}
				
			    public BigDecimal FILE_SERIES;

				public BigDecimal getFILE_SERIES () {
					return this.FILE_SERIES;
				}
				
			    public BigDecimal FILE_NBR;

				public BigDecimal getFILE_NBR () {
					return this.FILE_NBR;
				}
				



	private String readString(ObjectInputStream dis) throws IOException{
		String strReturn = null;
		int length = 0;
        length = dis.readInt();
		if (length == -1) {
			strReturn = null;
		} else {
			if(length > commonByteArray_WIPO_PROJECTS_Gg_POA.length) {
				if(length < 1024 && commonByteArray_WIPO_PROJECTS_Gg_POA.length == 0) {
   					commonByteArray_WIPO_PROJECTS_Gg_POA = new byte[1024];
				} else {
   					commonByteArray_WIPO_PROJECTS_Gg_POA = new byte[2 * length];
   				}
			}
			dis.readFully(commonByteArray_WIPO_PROJECTS_Gg_POA, 0, length);
			strReturn = new String(commonByteArray_WIPO_PROJECTS_Gg_POA, 0, length, utf8Charset);
		}
		return strReturn;
	}

    private void writeString(String str, ObjectOutputStream dos) throws IOException{
		if(str == null) {
            dos.writeInt(-1);
		} else {
            byte[] byteArray = str.getBytes(utf8Charset);
	    	dos.writeInt(byteArray.length);
			dos.write(byteArray);
    	}
    }

    public void readData(ObjectInputStream dis) {

		synchronized(commonByteArrayLock_WIPO_PROJECTS_Gg_POA) {

        	try {

        		int length = 0;
		
					this.USERDOC_SEQ = readString(dis);
					
						this.USERDOC_SERIES = (BigDecimal) dis.readObject();
					
						this.USERDOC_NBR = (BigDecimal) dis.readObject();
					
					this.FILE_SEQ = readString(dis);
					
					this.FILE_TYPE = readString(dis);
					
						this.FILE_SERIES = (BigDecimal) dis.readObject();
					
						this.FILE_NBR = (BigDecimal) dis.readObject();
					
        	} catch (IOException e) {
	            throw new RuntimeException(e);

		
			} catch(ClassNotFoundException eCNFE) {
				 throw new RuntimeException(eCNFE);
		

        }

		

      }


    }

    public void writeData(ObjectOutputStream dos) {
        try {

		
					// String
				
						writeString(this.USERDOC_SEQ,dos);
					
					// BigDecimal
				
       			    	dos.writeObject(this.USERDOC_SERIES);
					
					// BigDecimal
				
       			    	dos.writeObject(this.USERDOC_NBR);
					
					// String
				
						writeString(this.FILE_SEQ,dos);
					
					// String
				
						writeString(this.FILE_TYPE,dos);
					
					// BigDecimal
				
       			    	dos.writeObject(this.FILE_SERIES);
					
					// BigDecimal
				
       			    	dos.writeObject(this.FILE_NBR);
					
        	} catch (IOException e) {
	            throw new RuntimeException(e);
        }


    }


    public String toString() {

		StringBuilder sb = new StringBuilder();
		sb.append(super.toString());
		sb.append("[");
		sb.append("USERDOC_SEQ="+USERDOC_SEQ);
		sb.append(",USERDOC_SERIES="+String.valueOf(USERDOC_SERIES));
		sb.append(",USERDOC_NBR="+String.valueOf(USERDOC_NBR));
		sb.append(",FILE_SEQ="+FILE_SEQ);
		sb.append(",FILE_TYPE="+FILE_TYPE);
		sb.append(",FILE_SERIES="+String.valueOf(FILE_SERIES));
		sb.append(",FILE_NBR="+String.valueOf(FILE_NBR));
	    sb.append("]");

	    return sb.toString();
    }

    /**
     * Compare keys
     */
    public int compareTo(row11Struct other) {

		int returnValue = -1;
		
	    return returnValue;
    }


    private int checkNullsAndCompare(Object object1, Object object2) {
        int returnValue = 0;
		if (object1 instanceof Comparable && object2 instanceof Comparable) {
            returnValue = ((Comparable) object1).compareTo(object2);
        } else if (object1 != null && object2 != null) {
            returnValue = compareStrings(object1.toString(), object2.toString());
        } else if (object1 == null && object2 != null) {
            returnValue = 1;
        } else if (object1 != null && object2 == null) {
            returnValue = -1;
        } else {
            returnValue = 0;
        }

        return returnValue;
    }

    private int compareStrings(String string1, String string2) {
        return string1.compareTo(string2);
    }


}

public static class after_tDBInput_6Struct implements routines.system.IPersistableRow<after_tDBInput_6Struct> {
    final static byte[] commonByteArrayLock_WIPO_PROJECTS_Gg_POA = new byte[0];
    static byte[] commonByteArray_WIPO_PROJECTS_Gg_POA = new byte[0];

	
			    public String USERDOC_SEQ;

				public String getUSERDOC_SEQ () {
					return this.USERDOC_SEQ;
				}
				
			    public BigDecimal USERDOC_SERIES;

				public BigDecimal getUSERDOC_SERIES () {
					return this.USERDOC_SERIES;
				}
				
			    public BigDecimal USERDOC_NBR;

				public BigDecimal getUSERDOC_NBR () {
					return this.USERDOC_NBR;
				}
				
			    public String FILE_SEQ;

				public String getFILE_SEQ () {
					return this.FILE_SEQ;
				}
				
			    public String FILE_TYPE;

				public String getFILE_TYPE () {
					return this.FILE_TYPE;
				}
				
			    public BigDecimal FILE_SERIES;

				public BigDecimal getFILE_SERIES () {
					return this.FILE_SERIES;
				}
				
			    public BigDecimal FILE_NBR;

				public BigDecimal getFILE_NBR () {
					return this.FILE_NBR;
				}
				



	private String readString(ObjectInputStream dis) throws IOException{
		String strReturn = null;
		int length = 0;
        length = dis.readInt();
		if (length == -1) {
			strReturn = null;
		} else {
			if(length > commonByteArray_WIPO_PROJECTS_Gg_POA.length) {
				if(length < 1024 && commonByteArray_WIPO_PROJECTS_Gg_POA.length == 0) {
   					commonByteArray_WIPO_PROJECTS_Gg_POA = new byte[1024];
				} else {
   					commonByteArray_WIPO_PROJECTS_Gg_POA = new byte[2 * length];
   				}
			}
			dis.readFully(commonByteArray_WIPO_PROJECTS_Gg_POA, 0, length);
			strReturn = new String(commonByteArray_WIPO_PROJECTS_Gg_POA, 0, length, utf8Charset);
		}
		return strReturn;
	}

    private void writeString(String str, ObjectOutputStream dos) throws IOException{
		if(str == null) {
            dos.writeInt(-1);
		} else {
            byte[] byteArray = str.getBytes(utf8Charset);
	    	dos.writeInt(byteArray.length);
			dos.write(byteArray);
    	}
    }

    public void readData(ObjectInputStream dis) {

		synchronized(commonByteArrayLock_WIPO_PROJECTS_Gg_POA) {

        	try {

        		int length = 0;
		
					this.USERDOC_SEQ = readString(dis);
					
						this.USERDOC_SERIES = (BigDecimal) dis.readObject();
					
						this.USERDOC_NBR = (BigDecimal) dis.readObject();
					
					this.FILE_SEQ = readString(dis);
					
					this.FILE_TYPE = readString(dis);
					
						this.FILE_SERIES = (BigDecimal) dis.readObject();
					
						this.FILE_NBR = (BigDecimal) dis.readObject();
					
        	} catch (IOException e) {
	            throw new RuntimeException(e);

		
			} catch(ClassNotFoundException eCNFE) {
				 throw new RuntimeException(eCNFE);
		

        }

		

      }


    }

    public void writeData(ObjectOutputStream dos) {
        try {

		
					// String
				
						writeString(this.USERDOC_SEQ,dos);
					
					// BigDecimal
				
       			    	dos.writeObject(this.USERDOC_SERIES);
					
					// BigDecimal
				
       			    	dos.writeObject(this.USERDOC_NBR);
					
					// String
				
						writeString(this.FILE_SEQ,dos);
					
					// String
				
						writeString(this.FILE_TYPE,dos);
					
					// BigDecimal
				
       			    	dos.writeObject(this.FILE_SERIES);
					
					// BigDecimal
				
       			    	dos.writeObject(this.FILE_NBR);
					
        	} catch (IOException e) {
	            throw new RuntimeException(e);
        }


    }


    public String toString() {

		StringBuilder sb = new StringBuilder();
		sb.append(super.toString());
		sb.append("[");
		sb.append("USERDOC_SEQ="+USERDOC_SEQ);
		sb.append(",USERDOC_SERIES="+String.valueOf(USERDOC_SERIES));
		sb.append(",USERDOC_NBR="+String.valueOf(USERDOC_NBR));
		sb.append(",FILE_SEQ="+FILE_SEQ);
		sb.append(",FILE_TYPE="+FILE_TYPE);
		sb.append(",FILE_SERIES="+String.valueOf(FILE_SERIES));
		sb.append(",FILE_NBR="+String.valueOf(FILE_NBR));
	    sb.append("]");

	    return sb.toString();
    }

    /**
     * Compare keys
     */
    public int compareTo(after_tDBInput_6Struct other) {

		int returnValue = -1;
		
	    return returnValue;
    }


    private int checkNullsAndCompare(Object object1, Object object2) {
        int returnValue = 0;
		if (object1 instanceof Comparable && object2 instanceof Comparable) {
            returnValue = ((Comparable) object1).compareTo(object2);
        } else if (object1 != null && object2 != null) {
            returnValue = compareStrings(object1.toString(), object2.toString());
        } else if (object1 == null && object2 != null) {
            returnValue = 1;
        } else if (object1 != null && object2 == null) {
            returnValue = -1;
        } else {
            returnValue = 0;
        }

        return returnValue;
    }

    private int compareStrings(String string1, String string2) {
        return string1.compareTo(string2);
    }


}
public void tDBInput_6Process(final java.util.Map<String, Object> globalMap) throws TalendException {
	globalMap.put("tDBInput_6_SUBPROCESS_STATE", 0);

 final boolean execStat = this.execStat;
	
		String iterateId = "";
	
	
	String currentComponent = "";
	java.util.Map<String, Object> resourceMap = new java.util.HashMap<String, Object>();

	try {
			// TDI-39566 avoid throwing an useless Exception
			boolean resumeIt = true;
			if (globalResumeTicket == false && resumeEntryMethodName != null) {
				String currentMethodName = new java.lang.Exception().getStackTrace()[0].getMethodName();
				resumeIt = resumeEntryMethodName.equals(currentMethodName);
			}
			if (resumeIt || globalResumeTicket) { //start the resume
				globalResumeTicket = true;


		tDBInput_7Process(globalMap);
		tDBInput_8Process(globalMap);

		row11Struct row11 = new row11Struct();
update_marksStruct update_marks = new update_marksStruct();
row14Struct row14 = new row14Struct();






	
	/**
	 * [tLogRow_6 begin ] start
	 */

	

	
		
		ok_Hash.put("tLogRow_6", false);
		start_Hash.put("tLogRow_6", System.currentTimeMillis());
		
	
	currentComponent="tLogRow_6";

	
					if(execStat) {
						runStat.updateStatOnConnection(resourceMap,iterateId,0,0,"row14");
					}
				
		int tos_count_tLogRow_6 = 0;
		

	///////////////////////
	
		final String OUTPUT_FIELD_SEPARATOR_tLogRow_6 = "|";
		java.io.PrintStream consoleOut_tLogRow_6 = null;	

 		StringBuilder strBuffer_tLogRow_6 = null;
		int nb_line_tLogRow_6 = 0;
///////////////////////    			



 



/**
 * [tLogRow_6 begin ] stop
 */



	
	/**
	 * [tDBOutput_4 begin ] start
	 */

	

	
		
		ok_Hash.put("tDBOutput_4", false);
		start_Hash.put("tDBOutput_4", System.currentTimeMillis());
		
	
	currentComponent="tDBOutput_4";

	
					if(execStat) {
						runStat.updateStatOnConnection(resourceMap,iterateId,0,0,"update_marks");
					}
				
		int tos_count_tDBOutput_4 = 0;
		



int nb_line_tDBOutput_4 = 0;
int nb_line_update_tDBOutput_4 = 0;
int nb_line_inserted_tDBOutput_4 = 0;
int nb_line_deleted_tDBOutput_4 = 0;
int nb_line_rejected_tDBOutput_4 = 0;

int deletedCount_tDBOutput_4=0;
int updatedCount_tDBOutput_4=0;
int insertedCount_tDBOutput_4=0;
int rejectedCount_tDBOutput_4=0;
String dbschema_tDBOutput_4 = null;
String tableName_tDBOutput_4 = null;
boolean whetherReject_tDBOutput_4 = false;

java.util.Calendar calendar_tDBOutput_4 = java.util.Calendar.getInstance();
long year1_tDBOutput_4 = TalendDate.parseDate("yyyy-MM-dd","0001-01-01").getTime();
long year2_tDBOutput_4 = TalendDate.parseDate("yyyy-MM-dd","1753-01-01").getTime();
long year10000_tDBOutput_4 = TalendDate.parseDate("yyyy-MM-dd HH:mm:ss","9999-12-31 24:00:00").getTime();
long date_tDBOutput_4;

java.util.Calendar calendar_datetimeoffset_tDBOutput_4 = java.util.Calendar.getInstance(java.util.TimeZone.getTimeZone("UTC"));

        int updateKeyCount_tDBOutput_4 = 4;
        if(updateKeyCount_tDBOutput_4 < 1) {
            throw new RuntimeException("For update, Schema must have a key");
        }
	
java.sql.Connection conn_tDBOutput_4 = null;
String dbUser_tDBOutput_4 = null;
    dbschema_tDBOutput_4 = "ADMIN";
    String driverClass_tDBOutput_4 = "net.sourceforge.jtds.jdbc.Driver";
	
    java.lang.Class.forName(driverClass_tDBOutput_4);
    String port_tDBOutput_4 = "1433";
    String dbname_tDBOutput_4 = "MARCAS_PY" ;
    String url_tDBOutput_4 = "jdbc:jtds:sqlserver://" + "localhost" ; 
    if (!"".equals(port_tDBOutput_4)) {
    	url_tDBOutput_4 += ":" + "1433";
    }
    if (!"".equals(dbname_tDBOutput_4)) {
				url_tDBOutput_4 += "//" + "MARCAS_PY"; 
	
    }
    url_tDBOutput_4 += ";appName=" + projectName + ";" + "";
    dbUser_tDBOutput_4 = "ADMIN";

 
	final String decryptedPassword_tDBOutput_4 = routines.system.PasswordEncryptUtil.decryptPassword("enc:routine.encryption.key.v1:eLBZb10S9Ev9kzwfhFvO74ivIGl84Ehw02g+nJBIRr7W");

    String dbPwd_tDBOutput_4 = decryptedPassword_tDBOutput_4;	
    conn_tDBOutput_4 = java.sql.DriverManager.getConnection(url_tDBOutput_4,dbUser_tDBOutput_4,dbPwd_tDBOutput_4);
	
		resourceMap.put("conn_tDBOutput_4", conn_tDBOutput_4);
	
        conn_tDBOutput_4.setAutoCommit(false);
        int commitEvery_tDBOutput_4 = 10000;
        int commitCounter_tDBOutput_4 = 0;


if(dbschema_tDBOutput_4 == null || dbschema_tDBOutput_4.trim().length() == 0) {
    tableName_tDBOutput_4 = "IP_MARK";
} else {
    tableName_tDBOutput_4 = dbschema_tDBOutput_4 + "].[" + "IP_MARK";
}
	int count_tDBOutput_4=0;

        String update_tDBOutput_4 = "UPDATE [" + tableName_tDBOutput_4 + "] SET [POA_DOC_ORI] = ?,[POA_LOG_TYP] = ?,[POA_DOC_SER] = ?,[POA_DOC_NBR] = ? WHERE [FILE_SEQ] = ? AND [FILE_TYP] = ? AND [FILE_SER] = ? AND [FILE_NBR] = ?";
        java.sql.PreparedStatement pstmt_tDBOutput_4 = conn_tDBOutput_4.prepareStatement(update_tDBOutput_4);
        resourceMap.put("pstmt_tDBOutput_4", pstmt_tDBOutput_4);

 



/**
 * [tDBOutput_4 begin ] stop
 */



	
	/**
	 * [tMap_4 begin ] start
	 */

	

	
		
		ok_Hash.put("tMap_4", false);
		start_Hash.put("tMap_4", System.currentTimeMillis());
		
	
	currentComponent="tMap_4";

	
					if(execStat) {
						runStat.updateStatOnConnection(resourceMap,iterateId,0,0,"row11");
					}
				
		int tos_count_tMap_4 = 0;
		




// ###############################
// # Lookup's keys initialization
	
		org.talend.designer.components.lookup.memory.AdvancedMemoryLookup<row12Struct> tHash_Lookup_row12 = (org.talend.designer.components.lookup.memory.AdvancedMemoryLookup<row12Struct>) 
				((org.talend.designer.components.lookup.memory.AdvancedMemoryLookup<row12Struct>) 
					globalMap.get( "tHash_Lookup_row12" ))
					;					
					
	

row12Struct row12HashKey = new row12Struct();
row12Struct row12Default = new row12Struct();
	
		org.talend.designer.components.lookup.memory.AdvancedMemoryLookup<row13Struct> tHash_Lookup_row13 = (org.talend.designer.components.lookup.memory.AdvancedMemoryLookup<row13Struct>) 
				((org.talend.designer.components.lookup.memory.AdvancedMemoryLookup<row13Struct>) 
					globalMap.get( "tHash_Lookup_row13" ))
					;					
					
	

row13Struct row13HashKey = new row13Struct();
row13Struct row13Default = new row13Struct();
// ###############################        

// ###############################
// # Vars initialization
class  Var__tMap_4__Struct  {
}
Var__tMap_4__Struct Var__tMap_4 = new Var__tMap_4__Struct();
// ###############################

// ###############################
// # Outputs initialization
update_marksStruct update_marks_tmp = new update_marksStruct();
// ###############################

        
        



        









 



/**
 * [tMap_4 begin ] stop
 */



	
	/**
	 * [tDBInput_6 begin ] start
	 */

	

	
		
		ok_Hash.put("tDBInput_6", false);
		start_Hash.put("tDBInput_6", System.currentTimeMillis());
		
	
	currentComponent="tDBInput_6";

	
		int tos_count_tDBInput_6 = 0;
		
	
    
	
			org.talend.designer.components.util.mssql.MSSqlGenerateTimestampUtil mssqlGTU_tDBInput_6 = org.talend.designer.components.util.mssql.MSSqlUtilFactory.getMSSqlGenerateTimestampUtil();
			
			java.util.List<String> talendToDBList_tDBInput_6 = new java.util.ArrayList();
			String[] talendToDBArray_tDBInput_6  = new String[]{"FLOAT","NUMERIC","NUMERIC IDENTITY","DECIMAL","DECIMAL IDENTITY","REAL"}; 
			java.util.Collections.addAll(talendToDBList_tDBInput_6, talendToDBArray_tDBInput_6); 
		    int nb_line_tDBInput_6 = 0;
		    java.sql.Connection conn_tDBInput_6 = null;
				String driverClass_tDBInput_6 = "net.sourceforge.jtds.jdbc.Driver";
			    java.lang.Class jdbcclazz_tDBInput_6 = java.lang.Class.forName(driverClass_tDBInput_6);
				String dbUser_tDBInput_6 = "sa";
				
				 
	final String decryptedPassword_tDBInput_6 = routines.system.PasswordEncryptUtil.decryptPassword("enc:routine.encryption.key.v1:3VJ9siQRgVzW136ezpIb/Wcsk92AyH3c9XBbtow0tVgqeIsq");
				
				String dbPwd_tDBInput_6 = decryptedPassword_tDBInput_6;
				
		    String port_tDBInput_6 = "1433";
		    String dbname_tDBInput_6 = "PY_INTERMED" ;
			String url_tDBInput_6 = "jdbc:jtds:sqlserver://" + "localhost" ;
		    if (!"".equals(port_tDBInput_6)) {
		    	url_tDBInput_6 += ":" + "1433";
		    }
		    if (!"".equals(dbname_tDBInput_6)) {
				url_tDBInput_6 += "//" + "PY_INTERMED"; 
		    }
		    url_tDBInput_6 += ";appName=" + projectName + ";" + "";
		    String dbschema_tDBInput_6 = "dbo";
				
				conn_tDBInput_6 = java.sql.DriverManager.getConnection(url_tDBInput_6,dbUser_tDBInput_6,dbPwd_tDBInput_6);
		        
		    
			java.sql.Statement stmt_tDBInput_6 = conn_tDBInput_6.createStatement();

		    String dbquery_tDBInput_6 = "SELECT dbo.VW_IMPORT_USERDOC_FILES.USERDOC_SEQ,\n		dbo.VW_IMPORT_USERDOC_FILES.USERDOC_SERIES,\n		dbo.VW_IMPORT_USERDOC_F"
+"ILES.USERDOC_NBR,\n		dbo.VW_IMPORT_USERDOC_FILES.FILE_SEQ,\n		dbo.VW_IMPORT_USERDOC_FILES.FILE_TYPE,\n		dbo.VW_IMPORT_USERD"
+"OC_FILES.FILE_SERIES,\n		dbo.VW_IMPORT_USERDOC_FILES.FILE_NBR\nFROM	dbo.VW_IMPORT_USERDOC_FILES";
		    

            	globalMap.put("tDBInput_6_QUERY",dbquery_tDBInput_6);
		    java.sql.ResultSet rs_tDBInput_6 = null;

		    try {
		    	rs_tDBInput_6 = stmt_tDBInput_6.executeQuery(dbquery_tDBInput_6);
		    	java.sql.ResultSetMetaData rsmd_tDBInput_6 = rs_tDBInput_6.getMetaData();
		    	int colQtyInRs_tDBInput_6 = rsmd_tDBInput_6.getColumnCount();

		    String tmpContent_tDBInput_6 = null;
		    
		    
		    while (rs_tDBInput_6.next()) {
		        nb_line_tDBInput_6++;
		        
							if(colQtyInRs_tDBInput_6 < 1) {
								row11.USERDOC_SEQ = null;
							} else {
	                         		
           		tmpContent_tDBInput_6 = rs_tDBInput_6.getString(1);
            if(tmpContent_tDBInput_6 != null) {
            	if (talendToDBList_tDBInput_6 .contains(rsmd_tDBInput_6.getColumnTypeName(1).toUpperCase(java.util.Locale.ENGLISH))) {
            		row11.USERDOC_SEQ = FormatterUtils.formatUnwithE(tmpContent_tDBInput_6);
            	} else {
                	row11.USERDOC_SEQ = tmpContent_tDBInput_6;
                }
            } else {
                row11.USERDOC_SEQ = null;
            }
		                    }
							if(colQtyInRs_tDBInput_6 < 2) {
								row11.USERDOC_SERIES = null;
							} else {
		                          
            row11.USERDOC_SERIES = rs_tDBInput_6.getBigDecimal(2);
            if(rs_tDBInput_6.wasNull()){
                    throw new RuntimeException("Null value in non-Nullable column");
            }
		                    }
							if(colQtyInRs_tDBInput_6 < 3) {
								row11.USERDOC_NBR = null;
							} else {
		                          
            row11.USERDOC_NBR = rs_tDBInput_6.getBigDecimal(3);
            if(rs_tDBInput_6.wasNull()){
                    throw new RuntimeException("Null value in non-Nullable column");
            }
		                    }
							if(colQtyInRs_tDBInput_6 < 4) {
								row11.FILE_SEQ = null;
							} else {
	                         		
           		tmpContent_tDBInput_6 = rs_tDBInput_6.getString(4);
            if(tmpContent_tDBInput_6 != null) {
            	if (talendToDBList_tDBInput_6 .contains(rsmd_tDBInput_6.getColumnTypeName(4).toUpperCase(java.util.Locale.ENGLISH))) {
            		row11.FILE_SEQ = FormatterUtils.formatUnwithE(tmpContent_tDBInput_6);
            	} else {
                	row11.FILE_SEQ = tmpContent_tDBInput_6;
                }
            } else {
                row11.FILE_SEQ = null;
            }
		                    }
							if(colQtyInRs_tDBInput_6 < 5) {
								row11.FILE_TYPE = null;
							} else {
	                         		
           		tmpContent_tDBInput_6 = rs_tDBInput_6.getString(5);
            if(tmpContent_tDBInput_6 != null) {
            	if (talendToDBList_tDBInput_6 .contains(rsmd_tDBInput_6.getColumnTypeName(5).toUpperCase(java.util.Locale.ENGLISH))) {
            		row11.FILE_TYPE = FormatterUtils.formatUnwithE(tmpContent_tDBInput_6);
            	} else {
                	row11.FILE_TYPE = tmpContent_tDBInput_6;
                }
            } else {
                row11.FILE_TYPE = null;
            }
		                    }
							if(colQtyInRs_tDBInput_6 < 6) {
								row11.FILE_SERIES = null;
							} else {
		                          
            row11.FILE_SERIES = rs_tDBInput_6.getBigDecimal(6);
            if(rs_tDBInput_6.wasNull()){
                    throw new RuntimeException("Null value in non-Nullable column");
            }
		                    }
							if(colQtyInRs_tDBInput_6 < 7) {
								row11.FILE_NBR = null;
							} else {
		                          
            row11.FILE_NBR = rs_tDBInput_6.getBigDecimal(7);
            if(rs_tDBInput_6.wasNull()){
                    throw new RuntimeException("Null value in non-Nullable column");
            }
		                    }
					





 



/**
 * [tDBInput_6 begin ] stop
 */
	
	/**
	 * [tDBInput_6 main ] start
	 */

	

	
	
	currentComponent="tDBInput_6";

	

 


	tos_count_tDBInput_6++;

/**
 * [tDBInput_6 main ] stop
 */
	
	/**
	 * [tDBInput_6 process_data_begin ] start
	 */

	

	
	
	currentComponent="tDBInput_6";

	

 



/**
 * [tDBInput_6 process_data_begin ] stop
 */

	
	/**
	 * [tMap_4 main ] start
	 */

	

	
	
	currentComponent="tMap_4";

	
					if(execStat){
						runStat.updateStatOnConnection(iterateId,1,1
						
							,"row11"
						
						);
					}
					

		
		
		boolean hasCasePrimitiveKeyWithNull_tMap_4 = false;
		
        // ###############################
        // # Input tables (lookups)
		  boolean rejectedInnerJoin_tMap_4 = false;
		  boolean mainRowRejected_tMap_4 = false;
            				    								  
		

				///////////////////////////////////////////////
				// Starting Lookup Table "row12" 
				///////////////////////////////////////////////


				
				
                            
 					    boolean forceLooprow12 = false;
       		  	    	
       		  	    	
 							row12Struct row12ObjectFromLookup = null;
                          
		           		  	if(!rejectedInnerJoin_tMap_4) { // G_TM_M_020

								
								hasCasePrimitiveKeyWithNull_tMap_4 = false;
								
                        		    		    row12HashKey.USERDOC_SEQ = row11.USERDOC_SEQ  ;
                        		    		
                        		    		    row12HashKey.USERDOC_SERIES = row11.USERDOC_SERIES ;
                        		    		
                        		    		    row12HashKey.USERDOC_NBR = row11.USERDOC_NBR;
                        		    		

								
		                        	row12HashKey.hashCodeDirty = true;
                        		
	  					
	  							
			  					
			  					
	  					
		  							tHash_Lookup_row12.lookup( row12HashKey );

	  							

	  							

 								
								  
								  if(!tHash_Lookup_row12.hasNext()) { // G_TM_M_090

  								
		  				
	  								
			  							rejectedInnerJoin_tMap_4 = true;
	  								
						
									
  									  		
 								
								  
								  } // G_TM_M_090

  								



							} // G_TM_M_020
			           		  	  
							
				           		if(tHash_Lookup_row12 != null && tHash_Lookup_row12.getCount(row12HashKey) > 1) { // G 071
			  							
			  						
									 		
									//System.out.println("WARNING: UNIQUE MATCH is configured for the lookup 'row12' and it contains more one result from keys :  row12.USERDOC_SEQ = '" + row12HashKey.USERDOC_SEQ + "', row12.USERDOC_SERIES = '" + row12HashKey.USERDOC_SERIES + "', row12.USERDOC_NBR = '" + row12HashKey.USERDOC_NBR + "'");
								} // G 071
							

							row12Struct row12 = null;
                    		  	 
							   
                    		  	 
	       		  	    	row12Struct fromLookup_row12 = null;
							row12 = row12Default;
										 
							
								 
							
							
								if (tHash_Lookup_row12 !=null && tHash_Lookup_row12.hasNext()) { // G 099
								
							
								
								fromLookup_row12 = tHash_Lookup_row12.next();

							
							
								} // G 099
							
							

							if(fromLookup_row12 != null) {
								row12 = fromLookup_row12;
							}
							
							
							
			  							
								
	                    		  	
		                    
	            	
	           	
	            	
	            	
	            

				///////////////////////////////////////////////
				// Starting Lookup Table "row13" 
				///////////////////////////////////////////////


				
				
                            
 					    boolean forceLooprow13 = false;
       		  	    	
       		  	    	
 							row13Struct row13ObjectFromLookup = null;
                          
		           		  	if(!rejectedInnerJoin_tMap_4) { // G_TM_M_020

								
								hasCasePrimitiveKeyWithNull_tMap_4 = false;
								
                        		    		    row13HashKey.DOC_ORI = row12.DOC_ORI ;
                        		    		
                        		    		    row13HashKey.DOC_LOG = "E";
                        		    		
                        		    		    row13HashKey.DOC_SER = row12.DOC_SERIES;
                        		    		
                        		    		    row13HashKey.DOC_NBR = row12.DOC_NBR;
                        		    		

								
		                        	row13HashKey.hashCodeDirty = true;
                        		
	  					
	  							
			  					
			  					
	  					
		  							tHash_Lookup_row13.lookup( row13HashKey );

	  							

	  							

 								
								  
								  if(!tHash_Lookup_row13.hasNext()) { // G_TM_M_090

  								
		  				
	  								
			  							rejectedInnerJoin_tMap_4 = true;
	  								
						
									
  									  		
 								
								  
								  } // G_TM_M_090

  								



							} // G_TM_M_020
			           		  	  
							
				           		if(tHash_Lookup_row13 != null && tHash_Lookup_row13.getCount(row13HashKey) > 1) { // G 071
			  							
			  						
									 		
									//System.out.println("WARNING: UNIQUE MATCH is configured for the lookup 'row13' and it contains more one result from keys :  row13.DOC_ORI = '" + row13HashKey.DOC_ORI + "', row13.DOC_LOG = '" + row13HashKey.DOC_LOG + "', row13.DOC_SER = '" + row13HashKey.DOC_SER + "', row13.DOC_NBR = '" + row13HashKey.DOC_NBR + "'");
								} // G 071
							

							row13Struct row13 = null;
                    		  	 
							   
                    		  	 
	       		  	    	row13Struct fromLookup_row13 = null;
							row13 = row13Default;
										 
							
								 
							
							
								if (tHash_Lookup_row13 !=null && tHash_Lookup_row13.hasNext()) { // G 099
								
							
								
								fromLookup_row13 = tHash_Lookup_row13.next();

							
							
								} // G 099
							
							

							if(fromLookup_row13 != null) {
								row13 = fromLookup_row13;
							}
							
							
							
			  							
								
	                    		  	
		                    
	            	
	            	
	            // ###############################
        { // start of Var scope
        
	        // ###############################
        	// # Vars tables
        
Var__tMap_4__Struct Var = Var__tMap_4;// ###############################
        // ###############################
        // # Output tables

update_marks = null;

if(!rejectedInnerJoin_tMap_4 ) {

// # Output table : 'update_marks'
update_marks_tmp.FILE_SEQ = row11.FILE_SEQ;
update_marks_tmp.FILE_TYP = row11.FILE_TYPE ;
update_marks_tmp.FILE_SER = row11.FILE_SERIES ;
update_marks_tmp.FILE_NBR = row11.FILE_NBR;
update_marks_tmp.POA_DOC_ORI = row13.DOC_ORI ;
update_marks_tmp.POA_LOG_TYP = "E";
update_marks_tmp.POA_DOC_SER = row13.DOC_SER  ;
update_marks_tmp.POA_DOC_NBR = row13.DOC_NBR ;
update_marks = update_marks_tmp;
}  // closing inner join bracket (2)
// ###############################

} // end of Var scope

rejectedInnerJoin_tMap_4 = false;










 


	tos_count_tMap_4++;

/**
 * [tMap_4 main ] stop
 */
	
	/**
	 * [tMap_4 process_data_begin ] start
	 */

	

	
	
	currentComponent="tMap_4";

	

 



/**
 * [tMap_4 process_data_begin ] stop
 */
// Start of branch "update_marks"
if(update_marks != null) { 
			row14 = null;



	
	/**
	 * [tDBOutput_4 main ] start
	 */

	

	
	
	currentComponent="tDBOutput_4";

	
					if(execStat){
						runStat.updateStatOnConnection(iterateId,1,1
						
							,"update_marks"
						
						);
					}
					



            row14 = null;
        whetherReject_tDBOutput_4 = false;
            try {
                    if(update_marks.POA_DOC_ORI == null) {
pstmt_tDBOutput_4.setNull(1, java.sql.Types.VARCHAR);
} else {pstmt_tDBOutput_4.setString(1, update_marks.POA_DOC_ORI);
}

                    if(update_marks.POA_LOG_TYP == null) {
pstmt_tDBOutput_4.setNull(2, java.sql.Types.VARCHAR);
} else {pstmt_tDBOutput_4.setString(2, update_marks.POA_LOG_TYP);
}

                    pstmt_tDBOutput_4.setBigDecimal(3, update_marks.POA_DOC_SER);

                    pstmt_tDBOutput_4.setBigDecimal(4, update_marks.POA_DOC_NBR);


                    if(update_marks.FILE_SEQ == null) {
pstmt_tDBOutput_4.setNull(5 + count_tDBOutput_4, java.sql.Types.VARCHAR);
} else {pstmt_tDBOutput_4.setString(5 + count_tDBOutput_4, update_marks.FILE_SEQ);
}


                    if(update_marks.FILE_TYP == null) {
pstmt_tDBOutput_4.setNull(6 + count_tDBOutput_4, java.sql.Types.VARCHAR);
} else {pstmt_tDBOutput_4.setString(6 + count_tDBOutput_4, update_marks.FILE_TYP);
}


                    pstmt_tDBOutput_4.setBigDecimal(7 + count_tDBOutput_4, update_marks.FILE_SER);


                    pstmt_tDBOutput_4.setBigDecimal(8 + count_tDBOutput_4, update_marks.FILE_NBR);


                nb_line_tDBOutput_4++;
                updatedCount_tDBOutput_4 = updatedCount_tDBOutput_4 + pstmt_tDBOutput_4.executeUpdate();
        	    
            } catch(java.lang.Exception e) {
                whetherReject_tDBOutput_4 = true;
                        row14 = new row14Struct();
                            row14.FILE_SEQ = update_marks.FILE_SEQ;
                            row14.FILE_TYP = update_marks.FILE_TYP;
                            row14.FILE_SER = update_marks.FILE_SER;
                            row14.FILE_NBR = update_marks.FILE_NBR;
                            row14.POA_DOC_ORI = update_marks.POA_DOC_ORI;
                            row14.POA_LOG_TYP = update_marks.POA_LOG_TYP;
                            row14.POA_DOC_SER = update_marks.POA_DOC_SER;
                            row14.POA_DOC_NBR = update_marks.POA_DOC_NBR;
                        rejectedCount_tDBOutput_4 = rejectedCount_tDBOutput_4 + 1;
                        row14.errorCode = ((java.sql.SQLException)e).getSQLState();
                        row14.errorMessage = e.getMessage() + " - Line: " + tos_count_tDBOutput_4;
            }
            if(!whetherReject_tDBOutput_4) {
            }
            	//////////batch execute by batch size///////
            	class LimitBytesHelper_tDBOutput_4{
            		public int limitBytePart1(int counter,java.sql.PreparedStatement pstmt_tDBOutput_4) throws Exception {
                try {
						
						for(int countEach_tDBOutput_4: pstmt_tDBOutput_4.executeBatch()) {
							if(countEach_tDBOutput_4 == -2 || countEach_tDBOutput_4 == -3) {
								break;
							}
							counter += countEach_tDBOutput_4;
						}
						
                }catch (java.sql.BatchUpdateException e){
                	
                	int countSum_tDBOutput_4 = 0;
					for(int countEach_tDBOutput_4: e.getUpdateCounts()) {
						counter += (countEach_tDBOutput_4 < 0 ? 0 : countEach_tDBOutput_4);
					}
				
            	    	
                		System.err.println(e.getMessage());
                	
               			 }
    				return counter;
            	}
            	
            	public int limitBytePart2(int counter,java.sql.PreparedStatement pstmt_tDBOutput_4) throws Exception {
                try {
                		
						for(int countEach_tDBOutput_4: pstmt_tDBOutput_4.executeBatch()) {
							if(countEach_tDBOutput_4 == -2 || countEach_tDBOutput_4 == -3) {
								break;
							}
							counter += countEach_tDBOutput_4;
						}
						
                }catch (java.sql.BatchUpdateException e){
                	
                	
					for(int countEach_tDBOutput_4: e.getUpdateCounts()) {
						counter += (countEach_tDBOutput_4 < 0 ? 0 : countEach_tDBOutput_4);
					}
					
            	    	
                        System.err.println(e.getMessage());
                	
                		}	
                	return counter;	
            	}
            }

    	////////////commit every////////////
    			
    		    commitCounter_tDBOutput_4++;
                if(commitEvery_tDBOutput_4 <= commitCounter_tDBOutput_4) {
                	
                	conn_tDBOutput_4.commit();
            		
                	commitCounter_tDBOutput_4=0;
                }

 


	tos_count_tDBOutput_4++;

/**
 * [tDBOutput_4 main ] stop
 */
	
	/**
	 * [tDBOutput_4 process_data_begin ] start
	 */

	

	
	
	currentComponent="tDBOutput_4";

	

 



/**
 * [tDBOutput_4 process_data_begin ] stop
 */
// Start of branch "row14"
if(row14 != null) { 



	
	/**
	 * [tLogRow_6 main ] start
	 */

	

	
	
	currentComponent="tLogRow_6";

	
					if(execStat){
						runStat.updateStatOnConnection(iterateId,1,1
						
							,"row14"
						
						);
					}
					
///////////////////////		
						



				strBuffer_tLogRow_6 = new StringBuilder();




   				
	    		if(row14.FILE_SEQ != null) { //              
                    							
       
				strBuffer_tLogRow_6.append(
				                String.valueOf(row14.FILE_SEQ)							
				);


							
	    		} //  			

    			strBuffer_tLogRow_6.append("|");
    			


   				
	    		if(row14.FILE_TYP != null) { //              
                    							
       
				strBuffer_tLogRow_6.append(
				                String.valueOf(row14.FILE_TYP)							
				);


							
	    		} //  			

    			strBuffer_tLogRow_6.append("|");
    			


   				
	    		if(row14.FILE_SER != null) { //              
                    							
       
				strBuffer_tLogRow_6.append(
								row14.FILE_SER.setScale(0, java.math.RoundingMode.HALF_UP).toPlainString()				
				);


							
	    		} //  			

    			strBuffer_tLogRow_6.append("|");
    			


   				
	    		if(row14.FILE_NBR != null) { //              
                    							
       
				strBuffer_tLogRow_6.append(
								row14.FILE_NBR.setScale(0, java.math.RoundingMode.HALF_UP).toPlainString()				
				);


							
	    		} //  			

    			strBuffer_tLogRow_6.append("|");
    			


   				
	    		if(row14.POA_DOC_ORI != null) { //              
                    							
       
				strBuffer_tLogRow_6.append(
				                String.valueOf(row14.POA_DOC_ORI)							
				);


							
	    		} //  			

    			strBuffer_tLogRow_6.append("|");
    			


   				
	    		if(row14.POA_LOG_TYP != null) { //              
                    							
       
				strBuffer_tLogRow_6.append(
				                String.valueOf(row14.POA_LOG_TYP)							
				);


							
	    		} //  			

    			strBuffer_tLogRow_6.append("|");
    			


   				
	    		if(row14.POA_DOC_SER != null) { //              
                    							
       
				strBuffer_tLogRow_6.append(
								row14.POA_DOC_SER.setScale(0, java.math.RoundingMode.HALF_UP).toPlainString()				
				);


							
	    		} //  			

    			strBuffer_tLogRow_6.append("|");
    			


   				
	    		if(row14.POA_DOC_NBR != null) { //              
                    							
       
				strBuffer_tLogRow_6.append(
								row14.POA_DOC_NBR.setScale(0, java.math.RoundingMode.HALF_UP).toPlainString()				
				);


							
	    		} //  			

    			strBuffer_tLogRow_6.append("|");
    			


   				
	    		if(row14.errorCode != null) { //              
                    							
       
				strBuffer_tLogRow_6.append(
				                String.valueOf(row14.errorCode)							
				);


							
	    		} //  			

    			strBuffer_tLogRow_6.append("|");
    			


   				
	    		if(row14.errorMessage != null) { //              
                    							
       
				strBuffer_tLogRow_6.append(
				                String.valueOf(row14.errorMessage)							
				);


							
	    		} //  			
 

                    if (globalMap.get("tLogRow_CONSOLE")!=null)
                    {
                    	consoleOut_tLogRow_6 = (java.io.PrintStream) globalMap.get("tLogRow_CONSOLE");
                    }
                    else
                    {
                    	consoleOut_tLogRow_6 = new java.io.PrintStream(new java.io.BufferedOutputStream(System.out));
                    	globalMap.put("tLogRow_CONSOLE",consoleOut_tLogRow_6);
                    }
                    consoleOut_tLogRow_6.println(strBuffer_tLogRow_6.toString());
                    consoleOut_tLogRow_6.flush();
                    nb_line_tLogRow_6++;
//////

//////                    
                    
///////////////////////    			

 


	tos_count_tLogRow_6++;

/**
 * [tLogRow_6 main ] stop
 */
	
	/**
	 * [tLogRow_6 process_data_begin ] start
	 */

	

	
	
	currentComponent="tLogRow_6";

	

 



/**
 * [tLogRow_6 process_data_begin ] stop
 */
	
	/**
	 * [tLogRow_6 process_data_end ] start
	 */

	

	
	
	currentComponent="tLogRow_6";

	

 



/**
 * [tLogRow_6 process_data_end ] stop
 */

} // End of branch "row14"




	
	/**
	 * [tDBOutput_4 process_data_end ] start
	 */

	

	
	
	currentComponent="tDBOutput_4";

	

 



/**
 * [tDBOutput_4 process_data_end ] stop
 */

} // End of branch "update_marks"




	
	/**
	 * [tMap_4 process_data_end ] start
	 */

	

	
	
	currentComponent="tMap_4";

	

 



/**
 * [tMap_4 process_data_end ] stop
 */



	
	/**
	 * [tDBInput_6 process_data_end ] start
	 */

	

	
	
	currentComponent="tDBInput_6";

	

 



/**
 * [tDBInput_6 process_data_end ] stop
 */
	
	/**
	 * [tDBInput_6 end ] start
	 */

	

	
	
	currentComponent="tDBInput_6";

	

	}
}finally{
	if (rs_tDBInput_6 != null) {
		rs_tDBInput_6.close();
	}
	if (stmt_tDBInput_6 != null) {
		stmt_tDBInput_6.close();
	}
		if(conn_tDBInput_6 != null && !conn_tDBInput_6.isClosed()) {
			
			conn_tDBInput_6.close();
			
			if("com.mysql.cj.jdbc.Driver".equals((String)globalMap.get("driverClass_"))
			    && routines.system.BundleUtils.inOSGi()) {
			        Class.forName("com.mysql.cj.jdbc.AbandonedConnectionCleanupThread").
			            getMethod("checkedShutdown").invoke(null, (Object[]) null);
			}
			
		}
}
globalMap.put("tDBInput_6_NB_LINE",nb_line_tDBInput_6);

 

ok_Hash.put("tDBInput_6", true);
end_Hash.put("tDBInput_6", System.currentTimeMillis());




/**
 * [tDBInput_6 end ] stop
 */

	
	/**
	 * [tMap_4 end ] start
	 */

	

	
	
	currentComponent="tMap_4";

	


// ###############################
// # Lookup hashes releasing
					if(tHash_Lookup_row12 != null) {
						tHash_Lookup_row12.endGet();
					}
					globalMap.remove( "tHash_Lookup_row12" );

					
					
				
					if(tHash_Lookup_row13 != null) {
						tHash_Lookup_row13.endGet();
					}
					globalMap.remove( "tHash_Lookup_row13" );

					
					
				
// ###############################      





				if(execStat){
			  		runStat.updateStat(resourceMap,iterateId,2,0,"row11");
			  	}
			  	
 

ok_Hash.put("tMap_4", true);
end_Hash.put("tMap_4", System.currentTimeMillis());




/**
 * [tMap_4 end ] stop
 */

	
	/**
	 * [tDBOutput_4 end ] start
	 */

	

	
	
	currentComponent="tDBOutput_4";

	



        if(pstmt_tDBOutput_4 != null) {
			
				pstmt_tDBOutput_4.close();
				resourceMap.remove("pstmt_tDBOutput_4");
			
        }
    resourceMap.put("statementClosed_tDBOutput_4", true);
            conn_tDBOutput_4.commit();
			
        conn_tDBOutput_4 .close();
        resourceMap.put("finish_tDBOutput_4", true);

	nb_line_deleted_tDBOutput_4=nb_line_deleted_tDBOutput_4+ deletedCount_tDBOutput_4;
	nb_line_update_tDBOutput_4=nb_line_update_tDBOutput_4 + updatedCount_tDBOutput_4;
	nb_line_inserted_tDBOutput_4=nb_line_inserted_tDBOutput_4 + insertedCount_tDBOutput_4;
	nb_line_rejected_tDBOutput_4=nb_line_rejected_tDBOutput_4 + rejectedCount_tDBOutput_4;
	
        globalMap.put("tDBOutput_4_NB_LINE",nb_line_tDBOutput_4);
        globalMap.put("tDBOutput_4_NB_LINE_UPDATED",nb_line_update_tDBOutput_4);
        globalMap.put("tDBOutput_4_NB_LINE_INSERTED",nb_line_inserted_tDBOutput_4);
        globalMap.put("tDBOutput_4_NB_LINE_DELETED",nb_line_deleted_tDBOutput_4);
        globalMap.put("tDBOutput_4_NB_LINE_REJECTED", nb_line_rejected_tDBOutput_4);
    

	

				if(execStat){
			  		runStat.updateStat(resourceMap,iterateId,2,0,"update_marks");
			  	}
			  	
 

ok_Hash.put("tDBOutput_4", true);
end_Hash.put("tDBOutput_4", System.currentTimeMillis());




/**
 * [tDBOutput_4 end ] stop
 */

	
	/**
	 * [tLogRow_6 end ] start
	 */

	

	
	
	currentComponent="tLogRow_6";

	


//////
//////
globalMap.put("tLogRow_6_NB_LINE",nb_line_tLogRow_6);

///////////////////////    			

				if(execStat){
			  		runStat.updateStat(resourceMap,iterateId,2,0,"row14");
			  	}
			  	
 

ok_Hash.put("tLogRow_6", true);
end_Hash.put("tLogRow_6", System.currentTimeMillis());




/**
 * [tLogRow_6 end ] stop
 */









				}//end the resume

				
				    			if(resumeEntryMethodName == null || globalResumeTicket){
				    				resumeUtil.addLog("CHECKPOINT", "CONNECTION:SUBJOB_OK:tDBInput_6:OnSubjobOk", "", Thread.currentThread().getId() + "", "", "", "", "", "");
								}	    				    			
					    	
								if(execStat){    	
									runStat.updateStatOnConnection("OnSubjobOk8", 0, "ok");
								} 
							
							tDBRow_1Process(globalMap); 
						



	
			}catch(java.lang.Exception e){	
				
				TalendException te = new TalendException(e, currentComponent, globalMap);
				
				throw te;
			}catch(java.lang.Error error){	
				
					runStat.stopThreadStat();
				
				throw error;
			}finally{
				
					     			//free memory for "tMap_4"
					     			globalMap.remove("tHash_Lookup_row12"); 
				     			
					     			//free memory for "tMap_4"
					     			globalMap.remove("tHash_Lookup_row13"); 
				     			
				try{
					
	
	/**
	 * [tDBInput_6 finally ] start
	 */

	

	
	
	currentComponent="tDBInput_6";

	

 



/**
 * [tDBInput_6 finally ] stop
 */

	
	/**
	 * [tMap_4 finally ] start
	 */

	

	
	
	currentComponent="tMap_4";

	

 



/**
 * [tMap_4 finally ] stop
 */

	
	/**
	 * [tDBOutput_4 finally ] start
	 */

	

	
	
	currentComponent="tDBOutput_4";

	



    try {
    if (resourceMap.get("statementClosed_tDBOutput_4") == null) {
                java.sql.PreparedStatement pstmtToClose_tDBOutput_4 = null;
                if ((pstmtToClose_tDBOutput_4 = (java.sql.PreparedStatement) resourceMap.remove("pstmt_tDBOutput_4")) != null) {
                    pstmtToClose_tDBOutput_4.close();
                }
    }
    } finally {
        if(resourceMap.get("finish_tDBOutput_4") == null){
            java.sql.Connection ctn_tDBOutput_4 = null;
            if((ctn_tDBOutput_4 = (java.sql.Connection)resourceMap.get("conn_tDBOutput_4")) != null){
                try {
                    ctn_tDBOutput_4.close();
                } catch (java.sql.SQLException sqlEx_tDBOutput_4) {
                    String errorMessage_tDBOutput_4 = "failed to close the connection in tDBOutput_4 :" + sqlEx_tDBOutput_4.getMessage();
                    System.err.println(errorMessage_tDBOutput_4);
                }
            }
        }
    }
 



/**
 * [tDBOutput_4 finally ] stop
 */

	
	/**
	 * [tLogRow_6 finally ] start
	 */

	

	
	
	currentComponent="tLogRow_6";

	

 



/**
 * [tLogRow_6 finally ] stop
 */









				}catch(java.lang.Exception e){	
					//ignore
				}catch(java.lang.Error error){
					//ignore
				}
				resourceMap = null;
			}
		

		globalMap.put("tDBInput_6_SUBPROCESS_STATE", 1);
	}
	


public static class row3Struct implements routines.system.IPersistableRow<row3Struct> {
    final static byte[] commonByteArrayLock_WIPO_PROJECTS_Gg_POA = new byte[0];
    static byte[] commonByteArray_WIPO_PROJECTS_Gg_POA = new byte[0];

	
			    public String errorCode;

				public String getErrorCode () {
					return this.errorCode;
				}
				
			    public String errorMessage;

				public String getErrorMessage () {
					return this.errorMessage;
				}
				



	private String readString(ObjectInputStream dis) throws IOException{
		String strReturn = null;
		int length = 0;
        length = dis.readInt();
		if (length == -1) {
			strReturn = null;
		} else {
			if(length > commonByteArray_WIPO_PROJECTS_Gg_POA.length) {
				if(length < 1024 && commonByteArray_WIPO_PROJECTS_Gg_POA.length == 0) {
   					commonByteArray_WIPO_PROJECTS_Gg_POA = new byte[1024];
				} else {
   					commonByteArray_WIPO_PROJECTS_Gg_POA = new byte[2 * length];
   				}
			}
			dis.readFully(commonByteArray_WIPO_PROJECTS_Gg_POA, 0, length);
			strReturn = new String(commonByteArray_WIPO_PROJECTS_Gg_POA, 0, length, utf8Charset);
		}
		return strReturn;
	}

    private void writeString(String str, ObjectOutputStream dos) throws IOException{
		if(str == null) {
            dos.writeInt(-1);
		} else {
            byte[] byteArray = str.getBytes(utf8Charset);
	    	dos.writeInt(byteArray.length);
			dos.write(byteArray);
    	}
    }

    public void readData(ObjectInputStream dis) {

		synchronized(commonByteArrayLock_WIPO_PROJECTS_Gg_POA) {

        	try {

        		int length = 0;
		
					this.errorCode = readString(dis);
					
					this.errorMessage = readString(dis);
					
        	} catch (IOException e) {
	            throw new RuntimeException(e);

		

        }

		

      }


    }

    public void writeData(ObjectOutputStream dos) {
        try {

		
					// String
				
						writeString(this.errorCode,dos);
					
					// String
				
						writeString(this.errorMessage,dos);
					
        	} catch (IOException e) {
	            throw new RuntimeException(e);
        }


    }


    public String toString() {

		StringBuilder sb = new StringBuilder();
		sb.append(super.toString());
		sb.append("[");
		sb.append("errorCode="+errorCode);
		sb.append(",errorMessage="+errorMessage);
	    sb.append("]");

	    return sb.toString();
    }

    /**
     * Compare keys
     */
    public int compareTo(row3Struct other) {

		int returnValue = -1;
		
	    return returnValue;
    }


    private int checkNullsAndCompare(Object object1, Object object2) {
        int returnValue = 0;
		if (object1 instanceof Comparable && object2 instanceof Comparable) {
            returnValue = ((Comparable) object1).compareTo(object2);
        } else if (object1 != null && object2 != null) {
            returnValue = compareStrings(object1.toString(), object2.toString());
        } else if (object1 == null && object2 != null) {
            returnValue = 1;
        } else if (object1 != null && object2 == null) {
            returnValue = -1;
        } else {
            returnValue = 0;
        }

        return returnValue;
    }

    private int compareStrings(String string1, String string2) {
        return string1.compareTo(string2);
    }


}
public void tDBRow_1Process(final java.util.Map<String, Object> globalMap) throws TalendException {
	globalMap.put("tDBRow_1_SUBPROCESS_STATE", 0);

 final boolean execStat = this.execStat;
	
		String iterateId = "";
	
	
	String currentComponent = "";
	java.util.Map<String, Object> resourceMap = new java.util.HashMap<String, Object>();

	try {
			// TDI-39566 avoid throwing an useless Exception
			boolean resumeIt = true;
			if (globalResumeTicket == false && resumeEntryMethodName != null) {
				String currentMethodName = new java.lang.Exception().getStackTrace()[0].getMethodName();
				resumeIt = resumeEntryMethodName.equals(currentMethodName);
			}
			if (resumeIt || globalResumeTicket) { //start the resume
				globalResumeTicket = true;



		row3Struct row3 = new row3Struct();




	
	/**
	 * [tLogRow_1 begin ] start
	 */

	

	
		
		ok_Hash.put("tLogRow_1", false);
		start_Hash.put("tLogRow_1", System.currentTimeMillis());
		
	
	currentComponent="tLogRow_1";

	
					if(execStat) {
						runStat.updateStatOnConnection(resourceMap,iterateId,0,0,"row3");
					}
				
		int tos_count_tLogRow_1 = 0;
		

	///////////////////////
	
		final String OUTPUT_FIELD_SEPARATOR_tLogRow_1 = "|";
		java.io.PrintStream consoleOut_tLogRow_1 = null;	

 		StringBuilder strBuffer_tLogRow_1 = null;
		int nb_line_tLogRow_1 = 0;
///////////////////////    			



 



/**
 * [tLogRow_1 begin ] stop
 */



	
	/**
	 * [tDBRow_1 begin ] start
	 */

	

	
		
		ok_Hash.put("tDBRow_1", false);
		start_Hash.put("tDBRow_1", System.currentTimeMillis());
		
	
	currentComponent="tDBRow_1";

	
		int tos_count_tDBRow_1 = 0;
		

	java.sql.Connection conn_tDBRow_1 = null;
	String query_tDBRow_1 = "";
	boolean whetherReject_tDBRow_1 = false;
				conn_tDBRow_1 = (java.sql.Connection)globalMap.get("conn_tDBConnection_2");
			
    resourceMap.put("conn_tDBRow_1", conn_tDBRow_1);
        java.sql.Statement stmt_tDBRow_1 = conn_tDBRow_1.createStatement();
        resourceMap.put("stmt_tDBRow_1", stmt_tDBRow_1);

 



/**
 * [tDBRow_1 begin ] stop
 */
	
	/**
	 * [tDBRow_1 main ] start
	 */

	

	
	
	currentComponent="tDBRow_1";

	

		row3 = null;
		
query_tDBRow_1 = "\n update ip_proc \n  set STATUS_CODE='PRO'\n  where proc_typ='11'\n------------------------------  \n";
whetherReject_tDBRow_1 = false;
globalMap.put("tDBRow_1_QUERY",query_tDBRow_1);
try {
		stmt_tDBRow_1.execute(query_tDBRow_1);
		
	} catch (java.lang.Exception e) {
		whetherReject_tDBRow_1 = true;
		
				row3 = new row3Struct();
				
				row3.errorCode = ((java.sql.SQLException)e).getSQLState();
				row3.errorMessage = e.getMessage() + " - Line: " + tos_count_tDBRow_1;
				
	}
	
	if(!whetherReject_tDBRow_1) {
		
	}
	

 


	tos_count_tDBRow_1++;

/**
 * [tDBRow_1 main ] stop
 */
	
	/**
	 * [tDBRow_1 process_data_begin ] start
	 */

	

	
	
	currentComponent="tDBRow_1";

	

 



/**
 * [tDBRow_1 process_data_begin ] stop
 */
// Start of branch "row3"
if(row3 != null) { 



	
	/**
	 * [tLogRow_1 main ] start
	 */

	

	
	
	currentComponent="tLogRow_1";

	
					if(execStat){
						runStat.updateStatOnConnection(iterateId,1,1
						
							,"row3"
						
						);
					}
					
///////////////////////		
						



				strBuffer_tLogRow_1 = new StringBuilder();




   				
	    		if(row3.errorCode != null) { //              
                    							
       
				strBuffer_tLogRow_1.append(
				                String.valueOf(row3.errorCode)							
				);


							
	    		} //  			

    			strBuffer_tLogRow_1.append("|");
    			


   				
	    		if(row3.errorMessage != null) { //              
                    							
       
				strBuffer_tLogRow_1.append(
				                String.valueOf(row3.errorMessage)							
				);


							
	    		} //  			
 

                    if (globalMap.get("tLogRow_CONSOLE")!=null)
                    {
                    	consoleOut_tLogRow_1 = (java.io.PrintStream) globalMap.get("tLogRow_CONSOLE");
                    }
                    else
                    {
                    	consoleOut_tLogRow_1 = new java.io.PrintStream(new java.io.BufferedOutputStream(System.out));
                    	globalMap.put("tLogRow_CONSOLE",consoleOut_tLogRow_1);
                    }
                    consoleOut_tLogRow_1.println(strBuffer_tLogRow_1.toString());
                    consoleOut_tLogRow_1.flush();
                    nb_line_tLogRow_1++;
//////

//////                    
                    
///////////////////////    			

 


	tos_count_tLogRow_1++;

/**
 * [tLogRow_1 main ] stop
 */
	
	/**
	 * [tLogRow_1 process_data_begin ] start
	 */

	

	
	
	currentComponent="tLogRow_1";

	

 



/**
 * [tLogRow_1 process_data_begin ] stop
 */
	
	/**
	 * [tLogRow_1 process_data_end ] start
	 */

	

	
	
	currentComponent="tLogRow_1";

	

 



/**
 * [tLogRow_1 process_data_end ] stop
 */

} // End of branch "row3"




	
	/**
	 * [tDBRow_1 process_data_end ] start
	 */

	

	
	
	currentComponent="tDBRow_1";

	

 



/**
 * [tDBRow_1 process_data_end ] stop
 */
	
	/**
	 * [tDBRow_1 end ] start
	 */

	

	
	
	currentComponent="tDBRow_1";

	

	
        stmt_tDBRow_1.close();
        resourceMap.remove("stmt_tDBRow_1");
    resourceMap.put("statementClosed_tDBRow_1", true);
    resourceMap.put("finish_tDBRow_1", true);
 

ok_Hash.put("tDBRow_1", true);
end_Hash.put("tDBRow_1", System.currentTimeMillis());




/**
 * [tDBRow_1 end ] stop
 */

	
	/**
	 * [tLogRow_1 end ] start
	 */

	

	
	
	currentComponent="tLogRow_1";

	


//////
//////
globalMap.put("tLogRow_1_NB_LINE",nb_line_tLogRow_1);

///////////////////////    			

				if(execStat){
			  		runStat.updateStat(resourceMap,iterateId,2,0,"row3");
			  	}
			  	
 

ok_Hash.put("tLogRow_1", true);
end_Hash.put("tLogRow_1", System.currentTimeMillis());




/**
 * [tLogRow_1 end ] stop
 */



				}//end the resume

				



	
			}catch(java.lang.Exception e){	
				
				TalendException te = new TalendException(e, currentComponent, globalMap);
				
				throw te;
			}catch(java.lang.Error error){	
				
					runStat.stopThreadStat();
				
				throw error;
			}finally{
				
				try{
					
	
	/**
	 * [tDBRow_1 finally ] start
	 */

	

	
	
	currentComponent="tDBRow_1";

	

    if (resourceMap.get("statementClosed_tDBRow_1") == null) {
            java.sql.Statement stmtToClose_tDBRow_1 = null;
            if ((stmtToClose_tDBRow_1 = (java.sql.Statement) resourceMap.remove("stmt_tDBRow_1")) != null) {
                stmtToClose_tDBRow_1.close();
            }
    }
 



/**
 * [tDBRow_1 finally ] stop
 */

	
	/**
	 * [tLogRow_1 finally ] start
	 */

	

	
	
	currentComponent="tLogRow_1";

	

 



/**
 * [tLogRow_1 finally ] stop
 */



				}catch(java.lang.Exception e){	
					//ignore
				}catch(java.lang.Error error){
					//ignore
				}
				resourceMap = null;
			}
		

		globalMap.put("tDBRow_1_SUBPROCESS_STATE", 1);
	}
	


public static class row5Struct implements routines.system.IPersistableComparableLookupRow<row5Struct> {
    final static byte[] commonByteArrayLock_WIPO_PROJECTS_Gg_POA = new byte[0];
    static byte[] commonByteArray_WIPO_PROJECTS_Gg_POA = new byte[0];
	protected static final int DEFAULT_HASHCODE = 1;
    protected static final int PRIME = 31;
    protected int hashCode = DEFAULT_HASHCODE;
    public boolean hashCodeDirty = true;

    public String loopKey;



	
			    public BigDecimal ROW_VERSION;

				public BigDecimal getROW_VERSION () {
					return this.ROW_VERSION;
				}
				
			    public String DOC_ORI;

				public String getDOC_ORI () {
					return this.DOC_ORI;
				}
				
			    public String DOC_LOG;

				public String getDOC_LOG () {
					return this.DOC_LOG;
				}
				
			    public BigDecimal DOC_SER;

				public BigDecimal getDOC_SER () {
					return this.DOC_SER;
				}
				
			    public BigDecimal DOC_NBR;

				public BigDecimal getDOC_NBR () {
					return this.DOC_NBR;
				}
				
			    public BigDecimal POA_REG_NBR;

				public BigDecimal getPOA_REG_NBR () {
					return this.POA_REG_NBR;
				}
				
			    public java.util.Date POA_DATE;

				public java.util.Date getPOA_DATE () {
					return this.POA_DATE;
				}
				
			    public String SCOPE;

				public String getSCOPE () {
					return this.SCOPE;
				}
				


	@Override
	public int hashCode() {
		if (this.hashCodeDirty) {
			final int prime = PRIME;
			int result = DEFAULT_HASHCODE;
	
						result = prime * result + ((this.DOC_ORI == null) ? 0 : this.DOC_ORI.hashCode());
					
						result = prime * result + ((this.DOC_LOG == null) ? 0 : this.DOC_LOG.hashCode());
					
						result = prime * result + ((this.DOC_SER == null) ? 0 : new Double(this.DOC_SER.doubleValue()).hashCode());
						
						result = prime * result + ((this.DOC_NBR == null) ? 0 : new Double(this.DOC_NBR.doubleValue()).hashCode());
						
    		this.hashCode = result;
    		this.hashCodeDirty = false;
		}
		return this.hashCode;
	}

	@Override
	public boolean equals(Object obj) {
		if (this == obj) return true;
		if (obj == null) return false;
		if (getClass() != obj.getClass()) return false;
		final row5Struct other = (row5Struct) obj;
		
						if (this.DOC_ORI == null) {
							if (other.DOC_ORI != null)
								return false;
						
						} else if (!this.DOC_ORI.equals(other.DOC_ORI))
						
							return false;
					
						if (this.DOC_LOG == null) {
							if (other.DOC_LOG != null)
								return false;
						
						} else if (!this.DOC_LOG.equals(other.DOC_LOG))
						
							return false;
					
						if (this.DOC_SER == null) {
							if (other.DOC_SER != null)
								return false;
						
						} else if ((other.DOC_SER == null) || (this.DOC_SER.compareTo(other.DOC_SER)!=0))
						
							return false;
					
						if (this.DOC_NBR == null) {
							if (other.DOC_NBR != null)
								return false;
						
						} else if ((other.DOC_NBR == null) || (this.DOC_NBR.compareTo(other.DOC_NBR)!=0))
						
							return false;
					

		return true;
    }

	public void copyDataTo(row5Struct other) {

		other.ROW_VERSION = this.ROW_VERSION;
	            other.DOC_ORI = this.DOC_ORI;
	            other.DOC_LOG = this.DOC_LOG;
	            other.DOC_SER = this.DOC_SER;
	            other.DOC_NBR = this.DOC_NBR;
	            other.POA_REG_NBR = this.POA_REG_NBR;
	            other.POA_DATE = this.POA_DATE;
	            other.SCOPE = this.SCOPE;
	            
	}

	public void copyKeysDataTo(row5Struct other) {

		other.DOC_ORI = this.DOC_ORI;
	            	other.DOC_LOG = this.DOC_LOG;
	            	other.DOC_SER = this.DOC_SER;
	            	other.DOC_NBR = this.DOC_NBR;
	            	
	}




	private String readString(ObjectInputStream dis) throws IOException{
		String strReturn = null;
		int length = 0;
        length = dis.readInt();
		if (length == -1) {
			strReturn = null;
		} else {
			if(length > commonByteArray_WIPO_PROJECTS_Gg_POA.length) {
				if(length < 1024 && commonByteArray_WIPO_PROJECTS_Gg_POA.length == 0) {
   					commonByteArray_WIPO_PROJECTS_Gg_POA = new byte[1024];
				} else {
   					commonByteArray_WIPO_PROJECTS_Gg_POA = new byte[2 * length];
   				}
			}
			dis.readFully(commonByteArray_WIPO_PROJECTS_Gg_POA, 0, length);
			strReturn = new String(commonByteArray_WIPO_PROJECTS_Gg_POA, 0, length, utf8Charset);
		}
		return strReturn;
	}

    private void writeString(String str, ObjectOutputStream dos) throws IOException{
		if(str == null) {
            dos.writeInt(-1);
		} else {
            byte[] byteArray = str.getBytes(utf8Charset);
	    	dos.writeInt(byteArray.length);
			dos.write(byteArray);
    	}
    }

	private java.util.Date readDate(DataInputStream dis, ObjectInputStream ois) throws IOException{
		java.util.Date dateReturn = null;
		int length = 0;
        length = dis.readByte();
		if (length == -1) {
			dateReturn = null;
		} else {
	    	dateReturn = new Date(dis.readLong());
		}
		return dateReturn;
	}

	private void writeDate(java.util.Date date1, DataOutputStream dos, ObjectOutputStream oos) throws IOException{
		if(date1 == null) {
            dos.writeByte(-1);
		} else {
			dos.writeByte(0);
	    	dos.writeLong(date1.getTime());
    	}
	}

	private String readString(DataInputStream dis, ObjectInputStream ois) throws IOException{
		String strReturn = null;
		int length = 0;
        length = dis.readInt();
		if (length == -1) {
			strReturn = null;
		} else {
			byte[] byteArray = new byte[length];
			dis.read(byteArray);
			strReturn = new String(byteArray, utf8Charset);
		}
		return strReturn;
	}

	private void writeString(String str, DataOutputStream dos, ObjectOutputStream oos) throws IOException{
		if(str == null) {
            dos.writeInt(-1);
		} else {
            byte[] byteArray = str.getBytes(utf8Charset);
	    	dos.writeInt(byteArray.length);
			dos.write(byteArray);
    	}
	}

    public void readKeysData(ObjectInputStream dis) {

		synchronized(commonByteArrayLock_WIPO_PROJECTS_Gg_POA) {

        	try {

        		int length = 0;
		
					this.DOC_ORI = readString(dis);
					
					this.DOC_LOG = readString(dis);
					
						this.DOC_SER = (BigDecimal) dis.readObject();
					
						this.DOC_NBR = (BigDecimal) dis.readObject();
					
        	} catch (IOException e) {
	            throw new RuntimeException(e);

		
			} catch(ClassNotFoundException eCNFE) {
				 throw new RuntimeException(eCNFE);
		

        }

		

      }


    }

    public void writeKeysData(ObjectOutputStream dos) {
        try {

		
					// String
				
						writeString(this.DOC_ORI,dos);
					
					// String
				
						writeString(this.DOC_LOG,dos);
					
					// BigDecimal
				
       			    	dos.writeObject(this.DOC_SER);
					
					// BigDecimal
				
       			    	dos.writeObject(this.DOC_NBR);
					
        	} catch (IOException e) {
	            throw new RuntimeException(e);
        }


    }



    /**
     * Fill Values data by reading ObjectInputStream.
     */
    public void readValuesData(DataInputStream dis, ObjectInputStream ois) {
        try {

			int length = 0;
		
       			    	this.ROW_VERSION = (BigDecimal) ois.readObject();
					
       			    	this.POA_REG_NBR = (BigDecimal) ois.readObject();
					
						this.POA_DATE = readDate(dis,ois);
					
						this.SCOPE = readString(dis,ois);
					
        	} catch (IOException e) {
	            throw new RuntimeException(e);

		
			} catch(ClassNotFoundException eCNFE) {
				 throw new RuntimeException(eCNFE);
		

        }

		

    }

    /**
     * Return a byte array which represents Values data.
     */
    public void writeValuesData(DataOutputStream dos, ObjectOutputStream oos) {
        try {

		
       			    	oos.writeObject(this.ROW_VERSION);
					
       			    	oos.writeObject(this.POA_REG_NBR);
					
						writeDate(this.POA_DATE, dos, oos);
					
						writeString(this.SCOPE, dos, oos);
					
        	} catch (IOException e) {
	            throw new RuntimeException(e);
        	}

    }


    public String toString() {

		StringBuilder sb = new StringBuilder();
		sb.append(super.toString());
		sb.append("[");
		sb.append("ROW_VERSION="+String.valueOf(ROW_VERSION));
		sb.append(",DOC_ORI="+DOC_ORI);
		sb.append(",DOC_LOG="+DOC_LOG);
		sb.append(",DOC_SER="+String.valueOf(DOC_SER));
		sb.append(",DOC_NBR="+String.valueOf(DOC_NBR));
		sb.append(",POA_REG_NBR="+String.valueOf(POA_REG_NBR));
		sb.append(",POA_DATE="+String.valueOf(POA_DATE));
		sb.append(",SCOPE="+SCOPE);
	    sb.append("]");

	    return sb.toString();
    }

    /**
     * Compare keys
     */
    public int compareTo(row5Struct other) {

		int returnValue = -1;
		
						returnValue = checkNullsAndCompare(this.DOC_ORI, other.DOC_ORI);
						if(returnValue != 0) {
							return returnValue;
						}

					
						returnValue = checkNullsAndCompare(this.DOC_LOG, other.DOC_LOG);
						if(returnValue != 0) {
							return returnValue;
						}

					
						returnValue = checkNullsAndCompare(this.DOC_SER, other.DOC_SER);
						if(returnValue != 0) {
							return returnValue;
						}

					
						returnValue = checkNullsAndCompare(this.DOC_NBR, other.DOC_NBR);
						if(returnValue != 0) {
							return returnValue;
						}

					
	    return returnValue;
    }


    private int checkNullsAndCompare(Object object1, Object object2) {
        int returnValue = 0;
		if (object1 instanceof Comparable && object2 instanceof Comparable) {
            returnValue = ((Comparable) object1).compareTo(object2);
        } else if (object1 != null && object2 != null) {
            returnValue = compareStrings(object1.toString(), object2.toString());
        } else if (object1 == null && object2 != null) {
            returnValue = 1;
        } else if (object1 != null && object2 == null) {
            returnValue = -1;
        } else {
            returnValue = 0;
        }

        return returnValue;
    }

    private int compareStrings(String string1, String string2) {
        return string1.compareTo(string2);
    }


}
public void tDBInput_3Process(final java.util.Map<String, Object> globalMap) throws TalendException {
	globalMap.put("tDBInput_3_SUBPROCESS_STATE", 0);

 final boolean execStat = this.execStat;
	
		String iterateId = "";
	
	
	String currentComponent = "";
	java.util.Map<String, Object> resourceMap = new java.util.HashMap<String, Object>();

	try {
			// TDI-39566 avoid throwing an useless Exception
			boolean resumeIt = true;
			if (globalResumeTicket == false && resumeEntryMethodName != null) {
				String currentMethodName = new java.lang.Exception().getStackTrace()[0].getMethodName();
				resumeIt = resumeEntryMethodName.equals(currentMethodName);
			}
			if (resumeIt || globalResumeTicket) { //start the resume
				globalResumeTicket = true;



		row5Struct row5 = new row5Struct();




	
	/**
	 * [tAdvancedHash_row5 begin ] start
	 */

	

	
		
		ok_Hash.put("tAdvancedHash_row5", false);
		start_Hash.put("tAdvancedHash_row5", System.currentTimeMillis());
		
	
	currentComponent="tAdvancedHash_row5";

	
					if(execStat) {
						runStat.updateStatOnConnection(resourceMap,iterateId,0,0,"row5");
					}
				
		int tos_count_tAdvancedHash_row5 = 0;
		

			   		// connection name:row5
			   		// source node:tDBInput_3 - inputs:(after_tDBInput_2) outputs:(row5,row5) | target node:tAdvancedHash_row5 - inputs:(row5) outputs:()
			   		// linked node: tMap_2 - inputs:(row4,row5) outputs:(poa_grantors)
			   
			   		org.talend.designer.components.lookup.common.ICommonLookup.MATCHING_MODE matchingModeEnum_row5 = 
			   			org.talend.designer.components.lookup.common.ICommonLookup.MATCHING_MODE.UNIQUE_MATCH;
			   			
			   
	   			org.talend.designer.components.lookup.memory.AdvancedMemoryLookup<row5Struct> tHash_Lookup_row5 =org.talend.designer.components.lookup.memory.AdvancedMemoryLookup.
	   						<row5Struct>getLookup(matchingModeEnum_row5);
	   						   
		   	   	   globalMap.put("tHash_Lookup_row5", tHash_Lookup_row5);
		   	   	   
				
           

 



/**
 * [tAdvancedHash_row5 begin ] stop
 */



	
	/**
	 * [tDBInput_3 begin ] start
	 */

	

	
		
		ok_Hash.put("tDBInput_3", false);
		start_Hash.put("tDBInput_3", System.currentTimeMillis());
		
	
	currentComponent="tDBInput_3";

	
		int tos_count_tDBInput_3 = 0;
		
	
    
	
			org.talend.designer.components.util.mssql.MSSqlGenerateTimestampUtil mssqlGTU_tDBInput_3 = org.talend.designer.components.util.mssql.MSSqlUtilFactory.getMSSqlGenerateTimestampUtil();
			
			java.util.List<String> talendToDBList_tDBInput_3 = new java.util.ArrayList();
			String[] talendToDBArray_tDBInput_3  = new String[]{"FLOAT","NUMERIC","NUMERIC IDENTITY","DECIMAL","DECIMAL IDENTITY","REAL"}; 
			java.util.Collections.addAll(talendToDBList_tDBInput_3, talendToDBArray_tDBInput_3); 
		    int nb_line_tDBInput_3 = 0;
		    java.sql.Connection conn_tDBInput_3 = null;
				String driverClass_tDBInput_3 = "net.sourceforge.jtds.jdbc.Driver";
			    java.lang.Class jdbcclazz_tDBInput_3 = java.lang.Class.forName(driverClass_tDBInput_3);
				String dbUser_tDBInput_3 = "ADMIN";
				
				 
	final String decryptedPassword_tDBInput_3 = routines.system.PasswordEncryptUtil.decryptPassword("enc:routine.encryption.key.v1:JVvVvIWgDdVXv1xCgW4FS8sFN/FRNG1ozcLFONkF9bhe");
				
				String dbPwd_tDBInput_3 = decryptedPassword_tDBInput_3;
				
		    String port_tDBInput_3 = "1433";
		    String dbname_tDBInput_3 = "MARCAS_PY" ;
			String url_tDBInput_3 = "jdbc:jtds:sqlserver://" + "localhost" ;
		    if (!"".equals(port_tDBInput_3)) {
		    	url_tDBInput_3 += ":" + "1433";
		    }
		    if (!"".equals(dbname_tDBInput_3)) {
				url_tDBInput_3 += "//" + "MARCAS_PY"; 
		    }
		    url_tDBInput_3 += ";appName=" + projectName + ";" + "";
		    String dbschema_tDBInput_3 = "ADMIN";
				
				conn_tDBInput_3 = java.sql.DriverManager.getConnection(url_tDBInput_3,dbUser_tDBInput_3,dbPwd_tDBInput_3);
		        
		    
			java.sql.Statement stmt_tDBInput_3 = conn_tDBInput_3.createStatement();

		    String dbquery_tDBInput_3 = "SELECT ADMIN.IP_POA.ROW_VERSION,\n		ADMIN.IP_POA.DOC_ORI,\n		ADMIN.IP_POA.DOC_LOG,\n		ADMIN.IP_POA.DOC_SER,\n		ADMIN.IP_POA"
+".DOC_NBR,\n		ADMIN.IP_POA.POA_REG_NBR,\n		ADMIN.IP_POA.POA_DATE,\n		ADMIN.IP_POA.SCOPE\nFROM	ADMIN.IP_POA";
		    

            	globalMap.put("tDBInput_3_QUERY",dbquery_tDBInput_3);
		    java.sql.ResultSet rs_tDBInput_3 = null;

		    try {
		    	rs_tDBInput_3 = stmt_tDBInput_3.executeQuery(dbquery_tDBInput_3);
		    	java.sql.ResultSetMetaData rsmd_tDBInput_3 = rs_tDBInput_3.getMetaData();
		    	int colQtyInRs_tDBInput_3 = rsmd_tDBInput_3.getColumnCount();

		    String tmpContent_tDBInput_3 = null;
		    
		    
		    while (rs_tDBInput_3.next()) {
		        nb_line_tDBInput_3++;
		        
							if(colQtyInRs_tDBInput_3 < 1) {
								row5.ROW_VERSION = null;
							} else {
		                          
            row5.ROW_VERSION = rs_tDBInput_3.getBigDecimal(1);
            if(rs_tDBInput_3.wasNull()){
                    throw new RuntimeException("Null value in non-Nullable column");
            }
		                    }
							if(colQtyInRs_tDBInput_3 < 2) {
								row5.DOC_ORI = null;
							} else {
	                         		
           		tmpContent_tDBInput_3 = rs_tDBInput_3.getString(2);
            if(tmpContent_tDBInput_3 != null) {
            	if (talendToDBList_tDBInput_3 .contains(rsmd_tDBInput_3.getColumnTypeName(2).toUpperCase(java.util.Locale.ENGLISH))) {
            		row5.DOC_ORI = FormatterUtils.formatUnwithE(tmpContent_tDBInput_3);
            	} else {
                	row5.DOC_ORI = tmpContent_tDBInput_3;
                }
            } else {
                row5.DOC_ORI = null;
            }
		                    }
							if(colQtyInRs_tDBInput_3 < 3) {
								row5.DOC_LOG = null;
							} else {
	                         		
           		tmpContent_tDBInput_3 = rs_tDBInput_3.getString(3);
            if(tmpContent_tDBInput_3 != null) {
            	if (talendToDBList_tDBInput_3 .contains(rsmd_tDBInput_3.getColumnTypeName(3).toUpperCase(java.util.Locale.ENGLISH))) {
            		row5.DOC_LOG = FormatterUtils.formatUnwithE(tmpContent_tDBInput_3);
            	} else {
                	row5.DOC_LOG = tmpContent_tDBInput_3;
                }
            } else {
                row5.DOC_LOG = null;
            }
		                    }
							if(colQtyInRs_tDBInput_3 < 4) {
								row5.DOC_SER = null;
							} else {
		                          
            row5.DOC_SER = rs_tDBInput_3.getBigDecimal(4);
            if(rs_tDBInput_3.wasNull()){
                    throw new RuntimeException("Null value in non-Nullable column");
            }
		                    }
							if(colQtyInRs_tDBInput_3 < 5) {
								row5.DOC_NBR = null;
							} else {
		                          
            row5.DOC_NBR = rs_tDBInput_3.getBigDecimal(5);
            if(rs_tDBInput_3.wasNull()){
                    throw new RuntimeException("Null value in non-Nullable column");
            }
		                    }
							if(colQtyInRs_tDBInput_3 < 6) {
								row5.POA_REG_NBR = null;
							} else {
		                          
            row5.POA_REG_NBR = rs_tDBInput_3.getBigDecimal(6);
            if(rs_tDBInput_3.wasNull()){
                    row5.POA_REG_NBR = null;
            }
		                    }
							if(colQtyInRs_tDBInput_3 < 7) {
								row5.POA_DATE = null;
							} else {
										
			row5.POA_DATE = mssqlGTU_tDBInput_3.getDate(rsmd_tDBInput_3, rs_tDBInput_3, 7);
			
		                    }
							if(colQtyInRs_tDBInput_3 < 8) {
								row5.SCOPE = null;
							} else {
	                         		
           		tmpContent_tDBInput_3 = rs_tDBInput_3.getString(8);
            if(tmpContent_tDBInput_3 != null) {
            	if (talendToDBList_tDBInput_3 .contains(rsmd_tDBInput_3.getColumnTypeName(8).toUpperCase(java.util.Locale.ENGLISH))) {
            		row5.SCOPE = FormatterUtils.formatUnwithE(tmpContent_tDBInput_3);
            	} else {
                	row5.SCOPE = tmpContent_tDBInput_3;
                }
            } else {
                row5.SCOPE = null;
            }
		                    }
					





 



/**
 * [tDBInput_3 begin ] stop
 */
	
	/**
	 * [tDBInput_3 main ] start
	 */

	

	
	
	currentComponent="tDBInput_3";

	

 


	tos_count_tDBInput_3++;

/**
 * [tDBInput_3 main ] stop
 */
	
	/**
	 * [tDBInput_3 process_data_begin ] start
	 */

	

	
	
	currentComponent="tDBInput_3";

	

 



/**
 * [tDBInput_3 process_data_begin ] stop
 */

	
	/**
	 * [tAdvancedHash_row5 main ] start
	 */

	

	
	
	currentComponent="tAdvancedHash_row5";

	
					if(execStat){
						runStat.updateStatOnConnection(iterateId,1,1
						
							,"row5"
						
						);
					}
					


			   
			   

					row5Struct row5_HashRow = new row5Struct();
		   	   	   
				
				row5_HashRow.ROW_VERSION = row5.ROW_VERSION;
				
				row5_HashRow.DOC_ORI = row5.DOC_ORI;
				
				row5_HashRow.DOC_LOG = row5.DOC_LOG;
				
				row5_HashRow.DOC_SER = row5.DOC_SER;
				
				row5_HashRow.DOC_NBR = row5.DOC_NBR;
				
				row5_HashRow.POA_REG_NBR = row5.POA_REG_NBR;
				
				row5_HashRow.POA_DATE = row5.POA_DATE;
				
				row5_HashRow.SCOPE = row5.SCOPE;
				
			tHash_Lookup_row5.put(row5_HashRow);
			
            




 


	tos_count_tAdvancedHash_row5++;

/**
 * [tAdvancedHash_row5 main ] stop
 */
	
	/**
	 * [tAdvancedHash_row5 process_data_begin ] start
	 */

	

	
	
	currentComponent="tAdvancedHash_row5";

	

 



/**
 * [tAdvancedHash_row5 process_data_begin ] stop
 */
	
	/**
	 * [tAdvancedHash_row5 process_data_end ] start
	 */

	

	
	
	currentComponent="tAdvancedHash_row5";

	

 



/**
 * [tAdvancedHash_row5 process_data_end ] stop
 */



	
	/**
	 * [tDBInput_3 process_data_end ] start
	 */

	

	
	
	currentComponent="tDBInput_3";

	

 



/**
 * [tDBInput_3 process_data_end ] stop
 */
	
	/**
	 * [tDBInput_3 end ] start
	 */

	

	
	
	currentComponent="tDBInput_3";

	

	}
}finally{
	if (rs_tDBInput_3 != null) {
		rs_tDBInput_3.close();
	}
	if (stmt_tDBInput_3 != null) {
		stmt_tDBInput_3.close();
	}
		if(conn_tDBInput_3 != null && !conn_tDBInput_3.isClosed()) {
			
			conn_tDBInput_3.close();
			
			if("com.mysql.cj.jdbc.Driver".equals((String)globalMap.get("driverClass_"))
			    && routines.system.BundleUtils.inOSGi()) {
			        Class.forName("com.mysql.cj.jdbc.AbandonedConnectionCleanupThread").
			            getMethod("checkedShutdown").invoke(null, (Object[]) null);
			}
			
		}
}
globalMap.put("tDBInput_3_NB_LINE",nb_line_tDBInput_3);

 

ok_Hash.put("tDBInput_3", true);
end_Hash.put("tDBInput_3", System.currentTimeMillis());




/**
 * [tDBInput_3 end ] stop
 */

	
	/**
	 * [tAdvancedHash_row5 end ] start
	 */

	

	
	
	currentComponent="tAdvancedHash_row5";

	

tHash_Lookup_row5.endPut();

				if(execStat){
			  		runStat.updateStat(resourceMap,iterateId,2,0,"row5");
			  	}
			  	
 

ok_Hash.put("tAdvancedHash_row5", true);
end_Hash.put("tAdvancedHash_row5", System.currentTimeMillis());




/**
 * [tAdvancedHash_row5 end ] stop
 */



				}//end the resume

				



	
			}catch(java.lang.Exception e){	
				
				TalendException te = new TalendException(e, currentComponent, globalMap);
				
				throw te;
			}catch(java.lang.Error error){	
				
					runStat.stopThreadStat();
				
				throw error;
			}finally{
				
				try{
					
	
	/**
	 * [tDBInput_3 finally ] start
	 */

	

	
	
	currentComponent="tDBInput_3";

	

 



/**
 * [tDBInput_3 finally ] stop
 */

	
	/**
	 * [tAdvancedHash_row5 finally ] start
	 */

	

	
	
	currentComponent="tAdvancedHash_row5";

	

 



/**
 * [tAdvancedHash_row5 finally ] stop
 */



				}catch(java.lang.Exception e){	
					//ignore
				}catch(java.lang.Error error){
					//ignore
				}
				resourceMap = null;
			}
		

		globalMap.put("tDBInput_3_SUBPROCESS_STATE", 1);
	}
	


public static class row9Struct implements routines.system.IPersistableComparableLookupRow<row9Struct> {
    final static byte[] commonByteArrayLock_WIPO_PROJECTS_Gg_POA = new byte[0];
    static byte[] commonByteArray_WIPO_PROJECTS_Gg_POA = new byte[0];
	protected static final int DEFAULT_HASHCODE = 1;
    protected static final int PRIME = 31;
    protected int hashCode = DEFAULT_HASHCODE;
    public boolean hashCodeDirty = true;

    public String loopKey;



	
			    public BigDecimal ROW_VERSION;

				public BigDecimal getROW_VERSION () {
					return this.ROW_VERSION;
				}
				
			    public String DOC_ORI;

				public String getDOC_ORI () {
					return this.DOC_ORI;
				}
				
			    public String DOC_LOG;

				public String getDOC_LOG () {
					return this.DOC_LOG;
				}
				
			    public BigDecimal DOC_SER;

				public BigDecimal getDOC_SER () {
					return this.DOC_SER;
				}
				
			    public BigDecimal DOC_NBR;

				public BigDecimal getDOC_NBR () {
					return this.DOC_NBR;
				}
				
			    public BigDecimal POA_REG_NBR;

				public BigDecimal getPOA_REG_NBR () {
					return this.POA_REG_NBR;
				}
				
			    public java.util.Date POA_DATE;

				public java.util.Date getPOA_DATE () {
					return this.POA_DATE;
				}
				
			    public String SCOPE;

				public String getSCOPE () {
					return this.SCOPE;
				}
				


	@Override
	public int hashCode() {
		if (this.hashCodeDirty) {
			final int prime = PRIME;
			int result = DEFAULT_HASHCODE;
	
						result = prime * result + ((this.DOC_ORI == null) ? 0 : this.DOC_ORI.hashCode());
					
						result = prime * result + ((this.DOC_LOG == null) ? 0 : this.DOC_LOG.hashCode());
					
						result = prime * result + ((this.DOC_SER == null) ? 0 : new Double(this.DOC_SER.doubleValue()).hashCode());
						
						result = prime * result + ((this.DOC_NBR == null) ? 0 : new Double(this.DOC_NBR.doubleValue()).hashCode());
						
    		this.hashCode = result;
    		this.hashCodeDirty = false;
		}
		return this.hashCode;
	}

	@Override
	public boolean equals(Object obj) {
		if (this == obj) return true;
		if (obj == null) return false;
		if (getClass() != obj.getClass()) return false;
		final row9Struct other = (row9Struct) obj;
		
						if (this.DOC_ORI == null) {
							if (other.DOC_ORI != null)
								return false;
						
						} else if (!this.DOC_ORI.equals(other.DOC_ORI))
						
							return false;
					
						if (this.DOC_LOG == null) {
							if (other.DOC_LOG != null)
								return false;
						
						} else if (!this.DOC_LOG.equals(other.DOC_LOG))
						
							return false;
					
						if (this.DOC_SER == null) {
							if (other.DOC_SER != null)
								return false;
						
						} else if ((other.DOC_SER == null) || (this.DOC_SER.compareTo(other.DOC_SER)!=0))
						
							return false;
					
						if (this.DOC_NBR == null) {
							if (other.DOC_NBR != null)
								return false;
						
						} else if ((other.DOC_NBR == null) || (this.DOC_NBR.compareTo(other.DOC_NBR)!=0))
						
							return false;
					

		return true;
    }

	public void copyDataTo(row9Struct other) {

		other.ROW_VERSION = this.ROW_VERSION;
	            other.DOC_ORI = this.DOC_ORI;
	            other.DOC_LOG = this.DOC_LOG;
	            other.DOC_SER = this.DOC_SER;
	            other.DOC_NBR = this.DOC_NBR;
	            other.POA_REG_NBR = this.POA_REG_NBR;
	            other.POA_DATE = this.POA_DATE;
	            other.SCOPE = this.SCOPE;
	            
	}

	public void copyKeysDataTo(row9Struct other) {

		other.DOC_ORI = this.DOC_ORI;
	            	other.DOC_LOG = this.DOC_LOG;
	            	other.DOC_SER = this.DOC_SER;
	            	other.DOC_NBR = this.DOC_NBR;
	            	
	}




	private String readString(ObjectInputStream dis) throws IOException{
		String strReturn = null;
		int length = 0;
        length = dis.readInt();
		if (length == -1) {
			strReturn = null;
		} else {
			if(length > commonByteArray_WIPO_PROJECTS_Gg_POA.length) {
				if(length < 1024 && commonByteArray_WIPO_PROJECTS_Gg_POA.length == 0) {
   					commonByteArray_WIPO_PROJECTS_Gg_POA = new byte[1024];
				} else {
   					commonByteArray_WIPO_PROJECTS_Gg_POA = new byte[2 * length];
   				}
			}
			dis.readFully(commonByteArray_WIPO_PROJECTS_Gg_POA, 0, length);
			strReturn = new String(commonByteArray_WIPO_PROJECTS_Gg_POA, 0, length, utf8Charset);
		}
		return strReturn;
	}

    private void writeString(String str, ObjectOutputStream dos) throws IOException{
		if(str == null) {
            dos.writeInt(-1);
		} else {
            byte[] byteArray = str.getBytes(utf8Charset);
	    	dos.writeInt(byteArray.length);
			dos.write(byteArray);
    	}
    }

	private java.util.Date readDate(DataInputStream dis, ObjectInputStream ois) throws IOException{
		java.util.Date dateReturn = null;
		int length = 0;
        length = dis.readByte();
		if (length == -1) {
			dateReturn = null;
		} else {
	    	dateReturn = new Date(dis.readLong());
		}
		return dateReturn;
	}

	private void writeDate(java.util.Date date1, DataOutputStream dos, ObjectOutputStream oos) throws IOException{
		if(date1 == null) {
            dos.writeByte(-1);
		} else {
			dos.writeByte(0);
	    	dos.writeLong(date1.getTime());
    	}
	}

	private String readString(DataInputStream dis, ObjectInputStream ois) throws IOException{
		String strReturn = null;
		int length = 0;
        length = dis.readInt();
		if (length == -1) {
			strReturn = null;
		} else {
			byte[] byteArray = new byte[length];
			dis.read(byteArray);
			strReturn = new String(byteArray, utf8Charset);
		}
		return strReturn;
	}

	private void writeString(String str, DataOutputStream dos, ObjectOutputStream oos) throws IOException{
		if(str == null) {
            dos.writeInt(-1);
		} else {
            byte[] byteArray = str.getBytes(utf8Charset);
	    	dos.writeInt(byteArray.length);
			dos.write(byteArray);
    	}
	}

    public void readKeysData(ObjectInputStream dis) {

		synchronized(commonByteArrayLock_WIPO_PROJECTS_Gg_POA) {

        	try {

        		int length = 0;
		
					this.DOC_ORI = readString(dis);
					
					this.DOC_LOG = readString(dis);
					
						this.DOC_SER = (BigDecimal) dis.readObject();
					
						this.DOC_NBR = (BigDecimal) dis.readObject();
					
        	} catch (IOException e) {
	            throw new RuntimeException(e);

		
			} catch(ClassNotFoundException eCNFE) {
				 throw new RuntimeException(eCNFE);
		

        }

		

      }


    }

    public void writeKeysData(ObjectOutputStream dos) {
        try {

		
					// String
				
						writeString(this.DOC_ORI,dos);
					
					// String
				
						writeString(this.DOC_LOG,dos);
					
					// BigDecimal
				
       			    	dos.writeObject(this.DOC_SER);
					
					// BigDecimal
				
       			    	dos.writeObject(this.DOC_NBR);
					
        	} catch (IOException e) {
	            throw new RuntimeException(e);
        }


    }



    /**
     * Fill Values data by reading ObjectInputStream.
     */
    public void readValuesData(DataInputStream dis, ObjectInputStream ois) {
        try {

			int length = 0;
		
       			    	this.ROW_VERSION = (BigDecimal) ois.readObject();
					
       			    	this.POA_REG_NBR = (BigDecimal) ois.readObject();
					
						this.POA_DATE = readDate(dis,ois);
					
						this.SCOPE = readString(dis,ois);
					
        	} catch (IOException e) {
	            throw new RuntimeException(e);

		
			} catch(ClassNotFoundException eCNFE) {
				 throw new RuntimeException(eCNFE);
		

        }

		

    }

    /**
     * Return a byte array which represents Values data.
     */
    public void writeValuesData(DataOutputStream dos, ObjectOutputStream oos) {
        try {

		
       			    	oos.writeObject(this.ROW_VERSION);
					
       			    	oos.writeObject(this.POA_REG_NBR);
					
						writeDate(this.POA_DATE, dos, oos);
					
						writeString(this.SCOPE, dos, oos);
					
        	} catch (IOException e) {
	            throw new RuntimeException(e);
        	}

    }


    public String toString() {

		StringBuilder sb = new StringBuilder();
		sb.append(super.toString());
		sb.append("[");
		sb.append("ROW_VERSION="+String.valueOf(ROW_VERSION));
		sb.append(",DOC_ORI="+DOC_ORI);
		sb.append(",DOC_LOG="+DOC_LOG);
		sb.append(",DOC_SER="+String.valueOf(DOC_SER));
		sb.append(",DOC_NBR="+String.valueOf(DOC_NBR));
		sb.append(",POA_REG_NBR="+String.valueOf(POA_REG_NBR));
		sb.append(",POA_DATE="+String.valueOf(POA_DATE));
		sb.append(",SCOPE="+SCOPE);
	    sb.append("]");

	    return sb.toString();
    }

    /**
     * Compare keys
     */
    public int compareTo(row9Struct other) {

		int returnValue = -1;
		
						returnValue = checkNullsAndCompare(this.DOC_ORI, other.DOC_ORI);
						if(returnValue != 0) {
							return returnValue;
						}

					
						returnValue = checkNullsAndCompare(this.DOC_LOG, other.DOC_LOG);
						if(returnValue != 0) {
							return returnValue;
						}

					
						returnValue = checkNullsAndCompare(this.DOC_SER, other.DOC_SER);
						if(returnValue != 0) {
							return returnValue;
						}

					
						returnValue = checkNullsAndCompare(this.DOC_NBR, other.DOC_NBR);
						if(returnValue != 0) {
							return returnValue;
						}

					
	    return returnValue;
    }


    private int checkNullsAndCompare(Object object1, Object object2) {
        int returnValue = 0;
		if (object1 instanceof Comparable && object2 instanceof Comparable) {
            returnValue = ((Comparable) object1).compareTo(object2);
        } else if (object1 != null && object2 != null) {
            returnValue = compareStrings(object1.toString(), object2.toString());
        } else if (object1 == null && object2 != null) {
            returnValue = 1;
        } else if (object1 != null && object2 == null) {
            returnValue = -1;
        } else {
            returnValue = 0;
        }

        return returnValue;
    }

    private int compareStrings(String string1, String string2) {
        return string1.compareTo(string2);
    }


}
public void tDBInput_4Process(final java.util.Map<String, Object> globalMap) throws TalendException {
	globalMap.put("tDBInput_4_SUBPROCESS_STATE", 0);

 final boolean execStat = this.execStat;
	
		String iterateId = "";
	
	
	String currentComponent = "";
	java.util.Map<String, Object> resourceMap = new java.util.HashMap<String, Object>();

	try {
			// TDI-39566 avoid throwing an useless Exception
			boolean resumeIt = true;
			if (globalResumeTicket == false && resumeEntryMethodName != null) {
				String currentMethodName = new java.lang.Exception().getStackTrace()[0].getMethodName();
				resumeIt = resumeEntryMethodName.equals(currentMethodName);
			}
			if (resumeIt || globalResumeTicket) { //start the resume
				globalResumeTicket = true;



		row9Struct row9 = new row9Struct();




	
	/**
	 * [tAdvancedHash_row9 begin ] start
	 */

	

	
		
		ok_Hash.put("tAdvancedHash_row9", false);
		start_Hash.put("tAdvancedHash_row9", System.currentTimeMillis());
		
	
	currentComponent="tAdvancedHash_row9";

	
					if(execStat) {
						runStat.updateStatOnConnection(resourceMap,iterateId,0,0,"row9");
					}
				
		int tos_count_tAdvancedHash_row9 = 0;
		

			   		// connection name:row9
			   		// source node:tDBInput_4 - inputs:(after_tDBInput_5) outputs:(row9,row9) | target node:tAdvancedHash_row9 - inputs:(row9) outputs:()
			   		// linked node: tMap_3 - inputs:(row8,row9) outputs:(poa_grantess)
			   
			   		org.talend.designer.components.lookup.common.ICommonLookup.MATCHING_MODE matchingModeEnum_row9 = 
			   			org.talend.designer.components.lookup.common.ICommonLookup.MATCHING_MODE.UNIQUE_MATCH;
			   			
			   
	   			org.talend.designer.components.lookup.memory.AdvancedMemoryLookup<row9Struct> tHash_Lookup_row9 =org.talend.designer.components.lookup.memory.AdvancedMemoryLookup.
	   						<row9Struct>getLookup(matchingModeEnum_row9);
	   						   
		   	   	   globalMap.put("tHash_Lookup_row9", tHash_Lookup_row9);
		   	   	   
				
           

 



/**
 * [tAdvancedHash_row9 begin ] stop
 */



	
	/**
	 * [tDBInput_4 begin ] start
	 */

	

	
		
		ok_Hash.put("tDBInput_4", false);
		start_Hash.put("tDBInput_4", System.currentTimeMillis());
		
	
	currentComponent="tDBInput_4";

	
		int tos_count_tDBInput_4 = 0;
		
	
    
	
			org.talend.designer.components.util.mssql.MSSqlGenerateTimestampUtil mssqlGTU_tDBInput_4 = org.talend.designer.components.util.mssql.MSSqlUtilFactory.getMSSqlGenerateTimestampUtil();
			
			java.util.List<String> talendToDBList_tDBInput_4 = new java.util.ArrayList();
			String[] talendToDBArray_tDBInput_4  = new String[]{"FLOAT","NUMERIC","NUMERIC IDENTITY","DECIMAL","DECIMAL IDENTITY","REAL"}; 
			java.util.Collections.addAll(talendToDBList_tDBInput_4, talendToDBArray_tDBInput_4); 
		    int nb_line_tDBInput_4 = 0;
		    java.sql.Connection conn_tDBInput_4 = null;
				String driverClass_tDBInput_4 = "net.sourceforge.jtds.jdbc.Driver";
			    java.lang.Class jdbcclazz_tDBInput_4 = java.lang.Class.forName(driverClass_tDBInput_4);
				String dbUser_tDBInput_4 = "ADMIN";
				
				 
	final String decryptedPassword_tDBInput_4 = routines.system.PasswordEncryptUtil.decryptPassword("enc:routine.encryption.key.v1:AtgBgY6+6B5Z/TfxdnlXGj6tsmwQqiF6wkrg6Tt1RdWw");
				
				String dbPwd_tDBInput_4 = decryptedPassword_tDBInput_4;
				
		    String port_tDBInput_4 = "1433";
		    String dbname_tDBInput_4 = "MARCAS_PY" ;
			String url_tDBInput_4 = "jdbc:jtds:sqlserver://" + "localhost" ;
		    if (!"".equals(port_tDBInput_4)) {
		    	url_tDBInput_4 += ":" + "1433";
		    }
		    if (!"".equals(dbname_tDBInput_4)) {
				url_tDBInput_4 += "//" + "MARCAS_PY"; 
		    }
		    url_tDBInput_4 += ";appName=" + projectName + ";" + "";
		    String dbschema_tDBInput_4 = "ADMIN";
				
				conn_tDBInput_4 = java.sql.DriverManager.getConnection(url_tDBInput_4,dbUser_tDBInput_4,dbPwd_tDBInput_4);
		        
		    
			java.sql.Statement stmt_tDBInput_4 = conn_tDBInput_4.createStatement();

		    String dbquery_tDBInput_4 = "SELECT ADMIN.IP_POA.ROW_VERSION,\n		ADMIN.IP_POA.DOC_ORI,\n		ADMIN.IP_POA.DOC_LOG,\n		ADMIN.IP_POA.DOC_SER,\n		ADMIN.IP_POA"
+".DOC_NBR,\n		ADMIN.IP_POA.POA_REG_NBR,\n		ADMIN.IP_POA.POA_DATE,\n		ADMIN.IP_POA.SCOPE\nFROM	ADMIN.IP_POA";
		    

            	globalMap.put("tDBInput_4_QUERY",dbquery_tDBInput_4);
		    java.sql.ResultSet rs_tDBInput_4 = null;

		    try {
		    	rs_tDBInput_4 = stmt_tDBInput_4.executeQuery(dbquery_tDBInput_4);
		    	java.sql.ResultSetMetaData rsmd_tDBInput_4 = rs_tDBInput_4.getMetaData();
		    	int colQtyInRs_tDBInput_4 = rsmd_tDBInput_4.getColumnCount();

		    String tmpContent_tDBInput_4 = null;
		    
		    
		    while (rs_tDBInput_4.next()) {
		        nb_line_tDBInput_4++;
		        
							if(colQtyInRs_tDBInput_4 < 1) {
								row9.ROW_VERSION = null;
							} else {
		                          
            row9.ROW_VERSION = rs_tDBInput_4.getBigDecimal(1);
            if(rs_tDBInput_4.wasNull()){
                    throw new RuntimeException("Null value in non-Nullable column");
            }
		                    }
							if(colQtyInRs_tDBInput_4 < 2) {
								row9.DOC_ORI = null;
							} else {
	                         		
           		tmpContent_tDBInput_4 = rs_tDBInput_4.getString(2);
            if(tmpContent_tDBInput_4 != null) {
            	if (talendToDBList_tDBInput_4 .contains(rsmd_tDBInput_4.getColumnTypeName(2).toUpperCase(java.util.Locale.ENGLISH))) {
            		row9.DOC_ORI = FormatterUtils.formatUnwithE(tmpContent_tDBInput_4);
            	} else {
                	row9.DOC_ORI = tmpContent_tDBInput_4;
                }
            } else {
                row9.DOC_ORI = null;
            }
		                    }
							if(colQtyInRs_tDBInput_4 < 3) {
								row9.DOC_LOG = null;
							} else {
	                         		
           		tmpContent_tDBInput_4 = rs_tDBInput_4.getString(3);
            if(tmpContent_tDBInput_4 != null) {
            	if (talendToDBList_tDBInput_4 .contains(rsmd_tDBInput_4.getColumnTypeName(3).toUpperCase(java.util.Locale.ENGLISH))) {
            		row9.DOC_LOG = FormatterUtils.formatUnwithE(tmpContent_tDBInput_4);
            	} else {
                	row9.DOC_LOG = tmpContent_tDBInput_4;
                }
            } else {
                row9.DOC_LOG = null;
            }
		                    }
							if(colQtyInRs_tDBInput_4 < 4) {
								row9.DOC_SER = null;
							} else {
		                          
            row9.DOC_SER = rs_tDBInput_4.getBigDecimal(4);
            if(rs_tDBInput_4.wasNull()){
                    throw new RuntimeException("Null value in non-Nullable column");
            }
		                    }
							if(colQtyInRs_tDBInput_4 < 5) {
								row9.DOC_NBR = null;
							} else {
		                          
            row9.DOC_NBR = rs_tDBInput_4.getBigDecimal(5);
            if(rs_tDBInput_4.wasNull()){
                    throw new RuntimeException("Null value in non-Nullable column");
            }
		                    }
							if(colQtyInRs_tDBInput_4 < 6) {
								row9.POA_REG_NBR = null;
							} else {
		                          
            row9.POA_REG_NBR = rs_tDBInput_4.getBigDecimal(6);
            if(rs_tDBInput_4.wasNull()){
                    row9.POA_REG_NBR = null;
            }
		                    }
							if(colQtyInRs_tDBInput_4 < 7) {
								row9.POA_DATE = null;
							} else {
										
			row9.POA_DATE = mssqlGTU_tDBInput_4.getDate(rsmd_tDBInput_4, rs_tDBInput_4, 7);
			
		                    }
							if(colQtyInRs_tDBInput_4 < 8) {
								row9.SCOPE = null;
							} else {
	                         		
           		tmpContent_tDBInput_4 = rs_tDBInput_4.getString(8);
            if(tmpContent_tDBInput_4 != null) {
            	if (talendToDBList_tDBInput_4 .contains(rsmd_tDBInput_4.getColumnTypeName(8).toUpperCase(java.util.Locale.ENGLISH))) {
            		row9.SCOPE = FormatterUtils.formatUnwithE(tmpContent_tDBInput_4);
            	} else {
                	row9.SCOPE = tmpContent_tDBInput_4;
                }
            } else {
                row9.SCOPE = null;
            }
		                    }
					





 



/**
 * [tDBInput_4 begin ] stop
 */
	
	/**
	 * [tDBInput_4 main ] start
	 */

	

	
	
	currentComponent="tDBInput_4";

	

 


	tos_count_tDBInput_4++;

/**
 * [tDBInput_4 main ] stop
 */
	
	/**
	 * [tDBInput_4 process_data_begin ] start
	 */

	

	
	
	currentComponent="tDBInput_4";

	

 



/**
 * [tDBInput_4 process_data_begin ] stop
 */

	
	/**
	 * [tAdvancedHash_row9 main ] start
	 */

	

	
	
	currentComponent="tAdvancedHash_row9";

	
					if(execStat){
						runStat.updateStatOnConnection(iterateId,1,1
						
							,"row9"
						
						);
					}
					


			   
			   

					row9Struct row9_HashRow = new row9Struct();
		   	   	   
				
				row9_HashRow.ROW_VERSION = row9.ROW_VERSION;
				
				row9_HashRow.DOC_ORI = row9.DOC_ORI;
				
				row9_HashRow.DOC_LOG = row9.DOC_LOG;
				
				row9_HashRow.DOC_SER = row9.DOC_SER;
				
				row9_HashRow.DOC_NBR = row9.DOC_NBR;
				
				row9_HashRow.POA_REG_NBR = row9.POA_REG_NBR;
				
				row9_HashRow.POA_DATE = row9.POA_DATE;
				
				row9_HashRow.SCOPE = row9.SCOPE;
				
			tHash_Lookup_row9.put(row9_HashRow);
			
            




 


	tos_count_tAdvancedHash_row9++;

/**
 * [tAdvancedHash_row9 main ] stop
 */
	
	/**
	 * [tAdvancedHash_row9 process_data_begin ] start
	 */

	

	
	
	currentComponent="tAdvancedHash_row9";

	

 



/**
 * [tAdvancedHash_row9 process_data_begin ] stop
 */
	
	/**
	 * [tAdvancedHash_row9 process_data_end ] start
	 */

	

	
	
	currentComponent="tAdvancedHash_row9";

	

 



/**
 * [tAdvancedHash_row9 process_data_end ] stop
 */



	
	/**
	 * [tDBInput_4 process_data_end ] start
	 */

	

	
	
	currentComponent="tDBInput_4";

	

 



/**
 * [tDBInput_4 process_data_end ] stop
 */
	
	/**
	 * [tDBInput_4 end ] start
	 */

	

	
	
	currentComponent="tDBInput_4";

	

	}
}finally{
	if (rs_tDBInput_4 != null) {
		rs_tDBInput_4.close();
	}
	if (stmt_tDBInput_4 != null) {
		stmt_tDBInput_4.close();
	}
		if(conn_tDBInput_4 != null && !conn_tDBInput_4.isClosed()) {
			
			conn_tDBInput_4.close();
			
			if("com.mysql.cj.jdbc.Driver".equals((String)globalMap.get("driverClass_"))
			    && routines.system.BundleUtils.inOSGi()) {
			        Class.forName("com.mysql.cj.jdbc.AbandonedConnectionCleanupThread").
			            getMethod("checkedShutdown").invoke(null, (Object[]) null);
			}
			
		}
}
globalMap.put("tDBInput_4_NB_LINE",nb_line_tDBInput_4);

 

ok_Hash.put("tDBInput_4", true);
end_Hash.put("tDBInput_4", System.currentTimeMillis());




/**
 * [tDBInput_4 end ] stop
 */

	
	/**
	 * [tAdvancedHash_row9 end ] start
	 */

	

	
	
	currentComponent="tAdvancedHash_row9";

	

tHash_Lookup_row9.endPut();

				if(execStat){
			  		runStat.updateStat(resourceMap,iterateId,2,0,"row9");
			  	}
			  	
 

ok_Hash.put("tAdvancedHash_row9", true);
end_Hash.put("tAdvancedHash_row9", System.currentTimeMillis());




/**
 * [tAdvancedHash_row9 end ] stop
 */



				}//end the resume

				



	
			}catch(java.lang.Exception e){	
				
				TalendException te = new TalendException(e, currentComponent, globalMap);
				
				throw te;
			}catch(java.lang.Error error){	
				
					runStat.stopThreadStat();
				
				throw error;
			}finally{
				
				try{
					
	
	/**
	 * [tDBInput_4 finally ] start
	 */

	

	
	
	currentComponent="tDBInput_4";

	

 



/**
 * [tDBInput_4 finally ] stop
 */

	
	/**
	 * [tAdvancedHash_row9 finally ] start
	 */

	

	
	
	currentComponent="tAdvancedHash_row9";

	

 



/**
 * [tAdvancedHash_row9 finally ] stop
 */



				}catch(java.lang.Exception e){	
					//ignore
				}catch(java.lang.Error error){
					//ignore
				}
				resourceMap = null;
			}
		

		globalMap.put("tDBInput_4_SUBPROCESS_STATE", 1);
	}
	


public static class row12Struct implements routines.system.IPersistableComparableLookupRow<row12Struct> {
    final static byte[] commonByteArrayLock_WIPO_PROJECTS_Gg_POA = new byte[0];
    static byte[] commonByteArray_WIPO_PROJECTS_Gg_POA = new byte[0];
	protected static final int DEFAULT_HASHCODE = 1;
    protected static final int PRIME = 31;
    protected int hashCode = DEFAULT_HASHCODE;
    public boolean hashCodeDirty = true;

    public String loopKey;



	
			    public String USERDOC_SEQ;

				public String getUSERDOC_SEQ () {
					return this.USERDOC_SEQ;
				}
				
			    public BigDecimal USERDOC_SERIES;

				public BigDecimal getUSERDOC_SERIES () {
					return this.USERDOC_SERIES;
				}
				
			    public BigDecimal USERDOC_NBR;

				public BigDecimal getUSERDOC_NBR () {
					return this.USERDOC_NBR;
				}
				
			    public String DOC_ORI;

				public String getDOC_ORI () {
					return this.DOC_ORI;
				}
				
			    public BigDecimal DOC_SERIES;

				public BigDecimal getDOC_SERIES () {
					return this.DOC_SERIES;
				}
				
			    public BigDecimal DOC_NBR;

				public BigDecimal getDOC_NBR () {
					return this.DOC_NBR;
				}
				
			    public BigDecimal IND_IMPORT;

				public BigDecimal getIND_IMPORT () {
					return this.IND_IMPORT;
				}
				
			    public String USERDOC_TYPE;

				public String getUSERDOC_TYPE () {
					return this.USERDOC_TYPE;
				}
				
			    public BigDecimal LAW_CODE;

				public BigDecimal getLAW_CODE () {
					return this.LAW_CODE;
				}
				
			    public java.util.Date FILING_DATE;

				public java.util.Date getFILING_DATE () {
					return this.FILING_DATE;
				}
				
			    public java.util.Date RECEPTION_DATE;

				public java.util.Date getRECEPTION_DATE () {
					return this.RECEPTION_DATE;
				}
				
			    public String NOTES;

				public String getNOTES () {
					return this.NOTES;
				}
				
			    public String APPLICANT_NOTES;

				public String getAPPLICANT_NOTES () {
					return this.APPLICANT_NOTES;
				}
				
			    public String PERSON_NAME;

				public String getPERSON_NAME () {
					return this.PERSON_NAME;
				}
				
			    public String PERSON_NAME_LANG2;

				public String getPERSON_NAME_LANG2 () {
					return this.PERSON_NAME_LANG2;
				}
				
			    public String NATIONALITY_COUNTRY_CODE;

				public String getNATIONALITY_COUNTRY_CODE () {
					return this.NATIONALITY_COUNTRY_CODE;
				}
				
			    public BigDecimal IND_COMPANY;

				public BigDecimal getIND_COMPANY () {
					return this.IND_COMPANY;
				}
				
			    public String LEGAL_NATURE;

				public String getLEGAL_NATURE () {
					return this.LEGAL_NATURE;
				}
				
			    public String LEGAL_NATURE_LANG2;

				public String getLEGAL_NATURE_LANG2 () {
					return this.LEGAL_NATURE_LANG2;
				}
				
			    public String LEGAL_ID_TYPE;

				public String getLEGAL_ID_TYPE () {
					return this.LEGAL_ID_TYPE;
				}
				
			    public BigDecimal LEGAL_ID_NBR;

				public BigDecimal getLEGAL_ID_NBR () {
					return this.LEGAL_ID_NBR;
				}
				
			    public String INDIVIDUAL_ID_TYPE;

				public String getINDIVIDUAL_ID_TYPE () {
					return this.INDIVIDUAL_ID_TYPE;
				}
				
			    public BigDecimal INDIVIDUAL_ID_NBR;

				public BigDecimal getINDIVIDUAL_ID_NBR () {
					return this.INDIVIDUAL_ID_NBR;
				}
				
			    public String RESIDENCE_COUNTRY_CODE;

				public String getRESIDENCE_COUNTRY_CODE () {
					return this.RESIDENCE_COUNTRY_CODE;
				}
				
			    public String STATE_NAME;

				public String getSTATE_NAME () {
					return this.STATE_NAME;
				}
				
			    public String STATE_CODE;

				public String getSTATE_CODE () {
					return this.STATE_CODE;
				}
				
			    public String CITY_NAME;

				public String getCITY_NAME () {
					return this.CITY_NAME;
				}
				
			    public String CITY_CODE;

				public String getCITY_CODE () {
					return this.CITY_CODE;
				}
				
			    public String ADDRESS_ZONE;

				public String getADDRESS_ZONE () {
					return this.ADDRESS_ZONE;
				}
				
			    public String ADDRESS_STREET;

				public String getADDRESS_STREET () {
					return this.ADDRESS_STREET;
				}
				
			    public String ADDRESS_STREET_LANG2;

				public String getADDRESS_STREET_LANG2 () {
					return this.ADDRESS_STREET_LANG2;
				}
				
			    public String ZIP_CODE;

				public String getZIP_CODE () {
					return this.ZIP_CODE;
				}
				
			    public String EMAIL;

				public String getEMAIL () {
					return this.EMAIL;
				}
				
			    public String TELEPHONE;

				public String getTELEPHONE () {
					return this.TELEPHONE;
				}
				
			    public String PERSON_GROUP_CODE;

				public String getPERSON_GROUP_CODE () {
					return this.PERSON_GROUP_CODE;
				}
				
			    public BigDecimal CAPTURE_USER_ID;

				public BigDecimal getCAPTURE_USER_ID () {
					return this.CAPTURE_USER_ID;
				}
				
			    public java.util.Date CAPTURE_DATE;

				public java.util.Date getCAPTURE_DATE () {
					return this.CAPTURE_DATE;
				}
				


	@Override
	public int hashCode() {
		if (this.hashCodeDirty) {
			final int prime = PRIME;
			int result = DEFAULT_HASHCODE;
	
						result = prime * result + ((this.USERDOC_SEQ == null) ? 0 : this.USERDOC_SEQ.hashCode());
					
						result = prime * result + ((this.USERDOC_SERIES == null) ? 0 : new Double(this.USERDOC_SERIES.doubleValue()).hashCode());
						
						result = prime * result + ((this.USERDOC_NBR == null) ? 0 : new Double(this.USERDOC_NBR.doubleValue()).hashCode());
						
    		this.hashCode = result;
    		this.hashCodeDirty = false;
		}
		return this.hashCode;
	}

	@Override
	public boolean equals(Object obj) {
		if (this == obj) return true;
		if (obj == null) return false;
		if (getClass() != obj.getClass()) return false;
		final row12Struct other = (row12Struct) obj;
		
						if (this.USERDOC_SEQ == null) {
							if (other.USERDOC_SEQ != null)
								return false;
						
						} else if (!this.USERDOC_SEQ.equals(other.USERDOC_SEQ))
						
							return false;
					
						if (this.USERDOC_SERIES == null) {
							if (other.USERDOC_SERIES != null)
								return false;
						
						} else if ((other.USERDOC_SERIES == null) || (this.USERDOC_SERIES.compareTo(other.USERDOC_SERIES)!=0))
						
							return false;
					
						if (this.USERDOC_NBR == null) {
							if (other.USERDOC_NBR != null)
								return false;
						
						} else if ((other.USERDOC_NBR == null) || (this.USERDOC_NBR.compareTo(other.USERDOC_NBR)!=0))
						
							return false;
					

		return true;
    }

	public void copyDataTo(row12Struct other) {

		other.USERDOC_SEQ = this.USERDOC_SEQ;
	            other.USERDOC_SERIES = this.USERDOC_SERIES;
	            other.USERDOC_NBR = this.USERDOC_NBR;
	            other.DOC_ORI = this.DOC_ORI;
	            other.DOC_SERIES = this.DOC_SERIES;
	            other.DOC_NBR = this.DOC_NBR;
	            other.IND_IMPORT = this.IND_IMPORT;
	            other.USERDOC_TYPE = this.USERDOC_TYPE;
	            other.LAW_CODE = this.LAW_CODE;
	            other.FILING_DATE = this.FILING_DATE;
	            other.RECEPTION_DATE = this.RECEPTION_DATE;
	            other.NOTES = this.NOTES;
	            other.APPLICANT_NOTES = this.APPLICANT_NOTES;
	            other.PERSON_NAME = this.PERSON_NAME;
	            other.PERSON_NAME_LANG2 = this.PERSON_NAME_LANG2;
	            other.NATIONALITY_COUNTRY_CODE = this.NATIONALITY_COUNTRY_CODE;
	            other.IND_COMPANY = this.IND_COMPANY;
	            other.LEGAL_NATURE = this.LEGAL_NATURE;
	            other.LEGAL_NATURE_LANG2 = this.LEGAL_NATURE_LANG2;
	            other.LEGAL_ID_TYPE = this.LEGAL_ID_TYPE;
	            other.LEGAL_ID_NBR = this.LEGAL_ID_NBR;
	            other.INDIVIDUAL_ID_TYPE = this.INDIVIDUAL_ID_TYPE;
	            other.INDIVIDUAL_ID_NBR = this.INDIVIDUAL_ID_NBR;
	            other.RESIDENCE_COUNTRY_CODE = this.RESIDENCE_COUNTRY_CODE;
	            other.STATE_NAME = this.STATE_NAME;
	            other.STATE_CODE = this.STATE_CODE;
	            other.CITY_NAME = this.CITY_NAME;
	            other.CITY_CODE = this.CITY_CODE;
	            other.ADDRESS_ZONE = this.ADDRESS_ZONE;
	            other.ADDRESS_STREET = this.ADDRESS_STREET;
	            other.ADDRESS_STREET_LANG2 = this.ADDRESS_STREET_LANG2;
	            other.ZIP_CODE = this.ZIP_CODE;
	            other.EMAIL = this.EMAIL;
	            other.TELEPHONE = this.TELEPHONE;
	            other.PERSON_GROUP_CODE = this.PERSON_GROUP_CODE;
	            other.CAPTURE_USER_ID = this.CAPTURE_USER_ID;
	            other.CAPTURE_DATE = this.CAPTURE_DATE;
	            
	}

	public void copyKeysDataTo(row12Struct other) {

		other.USERDOC_SEQ = this.USERDOC_SEQ;
	            	other.USERDOC_SERIES = this.USERDOC_SERIES;
	            	other.USERDOC_NBR = this.USERDOC_NBR;
	            	
	}




	private String readString(ObjectInputStream dis) throws IOException{
		String strReturn = null;
		int length = 0;
        length = dis.readInt();
		if (length == -1) {
			strReturn = null;
		} else {
			if(length > commonByteArray_WIPO_PROJECTS_Gg_POA.length) {
				if(length < 1024 && commonByteArray_WIPO_PROJECTS_Gg_POA.length == 0) {
   					commonByteArray_WIPO_PROJECTS_Gg_POA = new byte[1024];
				} else {
   					commonByteArray_WIPO_PROJECTS_Gg_POA = new byte[2 * length];
   				}
			}
			dis.readFully(commonByteArray_WIPO_PROJECTS_Gg_POA, 0, length);
			strReturn = new String(commonByteArray_WIPO_PROJECTS_Gg_POA, 0, length, utf8Charset);
		}
		return strReturn;
	}

    private void writeString(String str, ObjectOutputStream dos) throws IOException{
		if(str == null) {
            dos.writeInt(-1);
		} else {
            byte[] byteArray = str.getBytes(utf8Charset);
	    	dos.writeInt(byteArray.length);
			dos.write(byteArray);
    	}
    }

	private String readString(DataInputStream dis, ObjectInputStream ois) throws IOException{
		String strReturn = null;
		int length = 0;
        length = dis.readInt();
		if (length == -1) {
			strReturn = null;
		} else {
			byte[] byteArray = new byte[length];
			dis.read(byteArray);
			strReturn = new String(byteArray, utf8Charset);
		}
		return strReturn;
	}

	private void writeString(String str, DataOutputStream dos, ObjectOutputStream oos) throws IOException{
		if(str == null) {
            dos.writeInt(-1);
		} else {
            byte[] byteArray = str.getBytes(utf8Charset);
	    	dos.writeInt(byteArray.length);
			dos.write(byteArray);
    	}
	}

	private java.util.Date readDate(DataInputStream dis, ObjectInputStream ois) throws IOException{
		java.util.Date dateReturn = null;
		int length = 0;
        length = dis.readByte();
		if (length == -1) {
			dateReturn = null;
		} else {
	    	dateReturn = new Date(dis.readLong());
		}
		return dateReturn;
	}

	private void writeDate(java.util.Date date1, DataOutputStream dos, ObjectOutputStream oos) throws IOException{
		if(date1 == null) {
            dos.writeByte(-1);
		} else {
			dos.writeByte(0);
	    	dos.writeLong(date1.getTime());
    	}
	}

    public void readKeysData(ObjectInputStream dis) {

		synchronized(commonByteArrayLock_WIPO_PROJECTS_Gg_POA) {

        	try {

        		int length = 0;
		
					this.USERDOC_SEQ = readString(dis);
					
						this.USERDOC_SERIES = (BigDecimal) dis.readObject();
					
						this.USERDOC_NBR = (BigDecimal) dis.readObject();
					
        	} catch (IOException e) {
	            throw new RuntimeException(e);

		
			} catch(ClassNotFoundException eCNFE) {
				 throw new RuntimeException(eCNFE);
		

        }

		

      }


    }

    public void writeKeysData(ObjectOutputStream dos) {
        try {

		
					// String
				
						writeString(this.USERDOC_SEQ,dos);
					
					// BigDecimal
				
       			    	dos.writeObject(this.USERDOC_SERIES);
					
					// BigDecimal
				
       			    	dos.writeObject(this.USERDOC_NBR);
					
        	} catch (IOException e) {
	            throw new RuntimeException(e);
        }


    }



    /**
     * Fill Values data by reading ObjectInputStream.
     */
    public void readValuesData(DataInputStream dis, ObjectInputStream ois) {
        try {

			int length = 0;
		
						this.DOC_ORI = readString(dis,ois);
					
       			    	this.DOC_SERIES = (BigDecimal) ois.readObject();
					
       			    	this.DOC_NBR = (BigDecimal) ois.readObject();
					
       			    	this.IND_IMPORT = (BigDecimal) ois.readObject();
					
						this.USERDOC_TYPE = readString(dis,ois);
					
       			    	this.LAW_CODE = (BigDecimal) ois.readObject();
					
						this.FILING_DATE = readDate(dis,ois);
					
						this.RECEPTION_DATE = readDate(dis,ois);
					
						this.NOTES = readString(dis,ois);
					
						this.APPLICANT_NOTES = readString(dis,ois);
					
						this.PERSON_NAME = readString(dis,ois);
					
						this.PERSON_NAME_LANG2 = readString(dis,ois);
					
						this.NATIONALITY_COUNTRY_CODE = readString(dis,ois);
					
       			    	this.IND_COMPANY = (BigDecimal) ois.readObject();
					
						this.LEGAL_NATURE = readString(dis,ois);
					
						this.LEGAL_NATURE_LANG2 = readString(dis,ois);
					
						this.LEGAL_ID_TYPE = readString(dis,ois);
					
       			    	this.LEGAL_ID_NBR = (BigDecimal) ois.readObject();
					
						this.INDIVIDUAL_ID_TYPE = readString(dis,ois);
					
       			    	this.INDIVIDUAL_ID_NBR = (BigDecimal) ois.readObject();
					
						this.RESIDENCE_COUNTRY_CODE = readString(dis,ois);
					
						this.STATE_NAME = readString(dis,ois);
					
						this.STATE_CODE = readString(dis,ois);
					
						this.CITY_NAME = readString(dis,ois);
					
						this.CITY_CODE = readString(dis,ois);
					
						this.ADDRESS_ZONE = readString(dis,ois);
					
						this.ADDRESS_STREET = readString(dis,ois);
					
						this.ADDRESS_STREET_LANG2 = readString(dis,ois);
					
						this.ZIP_CODE = readString(dis,ois);
					
						this.EMAIL = readString(dis,ois);
					
						this.TELEPHONE = readString(dis,ois);
					
						this.PERSON_GROUP_CODE = readString(dis,ois);
					
       			    	this.CAPTURE_USER_ID = (BigDecimal) ois.readObject();
					
						this.CAPTURE_DATE = readDate(dis,ois);
					
        	} catch (IOException e) {
	            throw new RuntimeException(e);

		
			} catch(ClassNotFoundException eCNFE) {
				 throw new RuntimeException(eCNFE);
		

        }

		

    }

    /**
     * Return a byte array which represents Values data.
     */
    public void writeValuesData(DataOutputStream dos, ObjectOutputStream oos) {
        try {

		
						writeString(this.DOC_ORI, dos, oos);
					
       			    	oos.writeObject(this.DOC_SERIES);
					
       			    	oos.writeObject(this.DOC_NBR);
					
       			    	oos.writeObject(this.IND_IMPORT);
					
						writeString(this.USERDOC_TYPE, dos, oos);
					
       			    	oos.writeObject(this.LAW_CODE);
					
						writeDate(this.FILING_DATE, dos, oos);
					
						writeDate(this.RECEPTION_DATE, dos, oos);
					
						writeString(this.NOTES, dos, oos);
					
						writeString(this.APPLICANT_NOTES, dos, oos);
					
						writeString(this.PERSON_NAME, dos, oos);
					
						writeString(this.PERSON_NAME_LANG2, dos, oos);
					
						writeString(this.NATIONALITY_COUNTRY_CODE, dos, oos);
					
       			    	oos.writeObject(this.IND_COMPANY);
					
						writeString(this.LEGAL_NATURE, dos, oos);
					
						writeString(this.LEGAL_NATURE_LANG2, dos, oos);
					
						writeString(this.LEGAL_ID_TYPE, dos, oos);
					
       			    	oos.writeObject(this.LEGAL_ID_NBR);
					
						writeString(this.INDIVIDUAL_ID_TYPE, dos, oos);
					
       			    	oos.writeObject(this.INDIVIDUAL_ID_NBR);
					
						writeString(this.RESIDENCE_COUNTRY_CODE, dos, oos);
					
						writeString(this.STATE_NAME, dos, oos);
					
						writeString(this.STATE_CODE, dos, oos);
					
						writeString(this.CITY_NAME, dos, oos);
					
						writeString(this.CITY_CODE, dos, oos);
					
						writeString(this.ADDRESS_ZONE, dos, oos);
					
						writeString(this.ADDRESS_STREET, dos, oos);
					
						writeString(this.ADDRESS_STREET_LANG2, dos, oos);
					
						writeString(this.ZIP_CODE, dos, oos);
					
						writeString(this.EMAIL, dos, oos);
					
						writeString(this.TELEPHONE, dos, oos);
					
						writeString(this.PERSON_GROUP_CODE, dos, oos);
					
       			    	oos.writeObject(this.CAPTURE_USER_ID);
					
						writeDate(this.CAPTURE_DATE, dos, oos);
					
        	} catch (IOException e) {
	            throw new RuntimeException(e);
        	}

    }


    public String toString() {

		StringBuilder sb = new StringBuilder();
		sb.append(super.toString());
		sb.append("[");
		sb.append("USERDOC_SEQ="+USERDOC_SEQ);
		sb.append(",USERDOC_SERIES="+String.valueOf(USERDOC_SERIES));
		sb.append(",USERDOC_NBR="+String.valueOf(USERDOC_NBR));
		sb.append(",DOC_ORI="+DOC_ORI);
		sb.append(",DOC_SERIES="+String.valueOf(DOC_SERIES));
		sb.append(",DOC_NBR="+String.valueOf(DOC_NBR));
		sb.append(",IND_IMPORT="+String.valueOf(IND_IMPORT));
		sb.append(",USERDOC_TYPE="+USERDOC_TYPE);
		sb.append(",LAW_CODE="+String.valueOf(LAW_CODE));
		sb.append(",FILING_DATE="+String.valueOf(FILING_DATE));
		sb.append(",RECEPTION_DATE="+String.valueOf(RECEPTION_DATE));
		sb.append(",NOTES="+NOTES);
		sb.append(",APPLICANT_NOTES="+APPLICANT_NOTES);
		sb.append(",PERSON_NAME="+PERSON_NAME);
		sb.append(",PERSON_NAME_LANG2="+PERSON_NAME_LANG2);
		sb.append(",NATIONALITY_COUNTRY_CODE="+NATIONALITY_COUNTRY_CODE);
		sb.append(",IND_COMPANY="+String.valueOf(IND_COMPANY));
		sb.append(",LEGAL_NATURE="+LEGAL_NATURE);
		sb.append(",LEGAL_NATURE_LANG2="+LEGAL_NATURE_LANG2);
		sb.append(",LEGAL_ID_TYPE="+LEGAL_ID_TYPE);
		sb.append(",LEGAL_ID_NBR="+String.valueOf(LEGAL_ID_NBR));
		sb.append(",INDIVIDUAL_ID_TYPE="+INDIVIDUAL_ID_TYPE);
		sb.append(",INDIVIDUAL_ID_NBR="+String.valueOf(INDIVIDUAL_ID_NBR));
		sb.append(",RESIDENCE_COUNTRY_CODE="+RESIDENCE_COUNTRY_CODE);
		sb.append(",STATE_NAME="+STATE_NAME);
		sb.append(",STATE_CODE="+STATE_CODE);
		sb.append(",CITY_NAME="+CITY_NAME);
		sb.append(",CITY_CODE="+CITY_CODE);
		sb.append(",ADDRESS_ZONE="+ADDRESS_ZONE);
		sb.append(",ADDRESS_STREET="+ADDRESS_STREET);
		sb.append(",ADDRESS_STREET_LANG2="+ADDRESS_STREET_LANG2);
		sb.append(",ZIP_CODE="+ZIP_CODE);
		sb.append(",EMAIL="+EMAIL);
		sb.append(",TELEPHONE="+TELEPHONE);
		sb.append(",PERSON_GROUP_CODE="+PERSON_GROUP_CODE);
		sb.append(",CAPTURE_USER_ID="+String.valueOf(CAPTURE_USER_ID));
		sb.append(",CAPTURE_DATE="+String.valueOf(CAPTURE_DATE));
	    sb.append("]");

	    return sb.toString();
    }

    /**
     * Compare keys
     */
    public int compareTo(row12Struct other) {

		int returnValue = -1;
		
						returnValue = checkNullsAndCompare(this.USERDOC_SEQ, other.USERDOC_SEQ);
						if(returnValue != 0) {
							return returnValue;
						}

					
						returnValue = checkNullsAndCompare(this.USERDOC_SERIES, other.USERDOC_SERIES);
						if(returnValue != 0) {
							return returnValue;
						}

					
						returnValue = checkNullsAndCompare(this.USERDOC_NBR, other.USERDOC_NBR);
						if(returnValue != 0) {
							return returnValue;
						}

					
	    return returnValue;
    }


    private int checkNullsAndCompare(Object object1, Object object2) {
        int returnValue = 0;
		if (object1 instanceof Comparable && object2 instanceof Comparable) {
            returnValue = ((Comparable) object1).compareTo(object2);
        } else if (object1 != null && object2 != null) {
            returnValue = compareStrings(object1.toString(), object2.toString());
        } else if (object1 == null && object2 != null) {
            returnValue = 1;
        } else if (object1 != null && object2 == null) {
            returnValue = -1;
        } else {
            returnValue = 0;
        }

        return returnValue;
    }

    private int compareStrings(String string1, String string2) {
        return string1.compareTo(string2);
    }


}
public void tDBInput_7Process(final java.util.Map<String, Object> globalMap) throws TalendException {
	globalMap.put("tDBInput_7_SUBPROCESS_STATE", 0);

 final boolean execStat = this.execStat;
	
		String iterateId = "";
	
	
	String currentComponent = "";
	java.util.Map<String, Object> resourceMap = new java.util.HashMap<String, Object>();

	try {
			// TDI-39566 avoid throwing an useless Exception
			boolean resumeIt = true;
			if (globalResumeTicket == false && resumeEntryMethodName != null) {
				String currentMethodName = new java.lang.Exception().getStackTrace()[0].getMethodName();
				resumeIt = resumeEntryMethodName.equals(currentMethodName);
			}
			if (resumeIt || globalResumeTicket) { //start the resume
				globalResumeTicket = true;



		row12Struct row12 = new row12Struct();




	
	/**
	 * [tAdvancedHash_row12 begin ] start
	 */

	

	
		
		ok_Hash.put("tAdvancedHash_row12", false);
		start_Hash.put("tAdvancedHash_row12", System.currentTimeMillis());
		
	
	currentComponent="tAdvancedHash_row12";

	
					if(execStat) {
						runStat.updateStatOnConnection(resourceMap,iterateId,0,0,"row12");
					}
				
		int tos_count_tAdvancedHash_row12 = 0;
		

			   		// connection name:row12
			   		// source node:tDBInput_7 - inputs:(after_tDBInput_6) outputs:(row12,row12) | target node:tAdvancedHash_row12 - inputs:(row12) outputs:()
			   		// linked node: tMap_4 - inputs:(row11,row12,row13) outputs:(update_marks)
			   
			   		org.talend.designer.components.lookup.common.ICommonLookup.MATCHING_MODE matchingModeEnum_row12 = 
			   			org.talend.designer.components.lookup.common.ICommonLookup.MATCHING_MODE.UNIQUE_MATCH;
			   			
			   
	   			org.talend.designer.components.lookup.memory.AdvancedMemoryLookup<row12Struct> tHash_Lookup_row12 =org.talend.designer.components.lookup.memory.AdvancedMemoryLookup.
	   						<row12Struct>getLookup(matchingModeEnum_row12);
	   						   
		   	   	   globalMap.put("tHash_Lookup_row12", tHash_Lookup_row12);
		   	   	   
				
           

 



/**
 * [tAdvancedHash_row12 begin ] stop
 */



	
	/**
	 * [tDBInput_7 begin ] start
	 */

	

	
		
		ok_Hash.put("tDBInput_7", false);
		start_Hash.put("tDBInput_7", System.currentTimeMillis());
		
	
	currentComponent="tDBInput_7";

	
		int tos_count_tDBInput_7 = 0;
		
	
    
	
			org.talend.designer.components.util.mssql.MSSqlGenerateTimestampUtil mssqlGTU_tDBInput_7 = org.talend.designer.components.util.mssql.MSSqlUtilFactory.getMSSqlGenerateTimestampUtil();
			
			java.util.List<String> talendToDBList_tDBInput_7 = new java.util.ArrayList();
			String[] talendToDBArray_tDBInput_7  = new String[]{"FLOAT","NUMERIC","NUMERIC IDENTITY","DECIMAL","DECIMAL IDENTITY","REAL"}; 
			java.util.Collections.addAll(talendToDBList_tDBInput_7, talendToDBArray_tDBInput_7); 
		    int nb_line_tDBInput_7 = 0;
		    java.sql.Connection conn_tDBInput_7 = null;
				String driverClass_tDBInput_7 = "net.sourceforge.jtds.jdbc.Driver";
			    java.lang.Class jdbcclazz_tDBInput_7 = java.lang.Class.forName(driverClass_tDBInput_7);
				String dbUser_tDBInput_7 = "sa";
				
				 
	final String decryptedPassword_tDBInput_7 = routines.system.PasswordEncryptUtil.decryptPassword("enc:routine.encryption.key.v1:gFEP/xjM6ZHI6sGk1wEeWJti4uJJhJCOEahZmp4tlYEMHJ2g");
				
				String dbPwd_tDBInput_7 = decryptedPassword_tDBInput_7;
				
		    String port_tDBInput_7 = "1433";
		    String dbname_tDBInput_7 = "PY_INTERMED" ;
			String url_tDBInput_7 = "jdbc:jtds:sqlserver://" + "localhost" ;
		    if (!"".equals(port_tDBInput_7)) {
		    	url_tDBInput_7 += ":" + "1433";
		    }
		    if (!"".equals(dbname_tDBInput_7)) {
				url_tDBInput_7 += "//" + "PY_INTERMED"; 
		    }
		    url_tDBInput_7 += ";appName=" + projectName + ";" + "";
		    String dbschema_tDBInput_7 = "dbo";
				
				conn_tDBInput_7 = java.sql.DriverManager.getConnection(url_tDBInput_7,dbUser_tDBInput_7,dbPwd_tDBInput_7);
		        
		    
			java.sql.Statement stmt_tDBInput_7 = conn_tDBInput_7.createStatement();

		    String dbquery_tDBInput_7 = "SELECT dbo.VW_IMPORT_USERDOC.USERDOC_SEQ,\n		dbo.VW_IMPORT_USERDOC.USERDOC_SERIES,\n		dbo.VW_IMPORT_USERDOC.USERDOC_NBR,\n"
+"		dbo.VW_IMPORT_USERDOC.DOC_ORI,\n		dbo.VW_IMPORT_USERDOC.DOC_SERIES,\n		dbo.VW_IMPORT_USERDOC.DOC_NBR,\n		dbo.VW_IMPORT_US"
+"ERDOC.IND_IMPORT,\n		dbo.VW_IMPORT_USERDOC.USERDOC_TYPE,\n		dbo.VW_IMPORT_USERDOC.LAW_CODE,\n		dbo.VW_IMPORT_USERDOC.FILING"
+"_DATE,\n		dbo.VW_IMPORT_USERDOC.RECEPTION_DATE,\n		dbo.VW_IMPORT_USERDOC.NOTES,\n		dbo.VW_IMPORT_USERDOC.APPLICANT_NOTES,\n	"
+"	dbo.VW_IMPORT_USERDOC.PERSON_NAME,\n		dbo.VW_IMPORT_USERDOC.PERSON_NAME_LANG2,\n		dbo.VW_IMPORT_USERDOC.NATIONALITY_COUNT"
+"RY_CODE,\n		dbo.VW_IMPORT_USERDOC.IND_COMPANY,\n		dbo.VW_IMPORT_USERDOC.LEGAL_NATURE,\n		dbo.VW_IMPORT_USERDOC.LEGAL_NATURE"
+"_LANG2,\n		dbo.VW_IMPORT_USERDOC.LEGAL_ID_TYPE,\n		dbo.VW_IMPORT_USERDOC.LEGAL_ID_NBR,\n		dbo.VW_IMPORT_USERDOC.INDIVIDUAL_"
+"ID_TYPE,\n		dbo.VW_IMPORT_USERDOC.INDIVIDUAL_ID_NBR,\n		dbo.VW_IMPORT_USERDOC.RESIDENCE_COUNTRY_CODE,\n		dbo.VW_IMPORT_USER"
+"DOC.STATE_NAME,\n		dbo.VW_IMPORT_USERDOC.STATE_CODE,\n		dbo.VW_IMPORT_USERDOC.CITY_NAME,\n		dbo.VW_IMPORT_USERDOC.CITY_CODE"
+",\n		dbo.VW_IMPORT_USERDOC.ADDRESS_ZONE,\n		dbo.VW_IMPORT_USERDOC.ADDRESS_STREET,\n		dbo.VW_IMPORT_USERDOC.ADDRESS_STREET_L"
+"ANG2,\n		dbo.VW_IMPORT_USERDOC.ZIP_CODE,\n		dbo.VW_IMPORT_USERDOC.EMAIL,\n		dbo.VW_IMPORT_USERDOC.TELEPHONE,\n		dbo.VW_IMPOR"
+"T_USERDOC.PERSON_GROUP_CODE,\n		dbo.VW_IMPORT_USERDOC.CAPTURE_USER_ID,\n		dbo.VW_IMPORT_USERDOC.CAPTURE_DATE\nFROM	dbo.VW_I"
+"MPORT_USERDOC where 		dbo.VW_IMPORT_USERDOC.USERDOC_TYPE='POA'";
		    

            	globalMap.put("tDBInput_7_QUERY",dbquery_tDBInput_7);
		    java.sql.ResultSet rs_tDBInput_7 = null;

		    try {
		    	rs_tDBInput_7 = stmt_tDBInput_7.executeQuery(dbquery_tDBInput_7);
		    	java.sql.ResultSetMetaData rsmd_tDBInput_7 = rs_tDBInput_7.getMetaData();
		    	int colQtyInRs_tDBInput_7 = rsmd_tDBInput_7.getColumnCount();

		    String tmpContent_tDBInput_7 = null;
		    
		    
		    while (rs_tDBInput_7.next()) {
		        nb_line_tDBInput_7++;
		        
							if(colQtyInRs_tDBInput_7 < 1) {
								row12.USERDOC_SEQ = null;
							} else {
	                         		
           		tmpContent_tDBInput_7 = rs_tDBInput_7.getString(1);
            if(tmpContent_tDBInput_7 != null) {
            	if (talendToDBList_tDBInput_7 .contains(rsmd_tDBInput_7.getColumnTypeName(1).toUpperCase(java.util.Locale.ENGLISH))) {
            		row12.USERDOC_SEQ = FormatterUtils.formatUnwithE(tmpContent_tDBInput_7);
            	} else {
                	row12.USERDOC_SEQ = tmpContent_tDBInput_7;
                }
            } else {
                row12.USERDOC_SEQ = null;
            }
		                    }
							if(colQtyInRs_tDBInput_7 < 2) {
								row12.USERDOC_SERIES = null;
							} else {
		                          
            row12.USERDOC_SERIES = rs_tDBInput_7.getBigDecimal(2);
            if(rs_tDBInput_7.wasNull()){
                    throw new RuntimeException("Null value in non-Nullable column");
            }
		                    }
							if(colQtyInRs_tDBInput_7 < 3) {
								row12.USERDOC_NBR = null;
							} else {
		                          
            row12.USERDOC_NBR = rs_tDBInput_7.getBigDecimal(3);
            if(rs_tDBInput_7.wasNull()){
                    throw new RuntimeException("Null value in non-Nullable column");
            }
		                    }
							if(colQtyInRs_tDBInput_7 < 4) {
								row12.DOC_ORI = null;
							} else {
	                         		
           		tmpContent_tDBInput_7 = rs_tDBInput_7.getString(4);
            if(tmpContent_tDBInput_7 != null) {
            	if (talendToDBList_tDBInput_7 .contains(rsmd_tDBInput_7.getColumnTypeName(4).toUpperCase(java.util.Locale.ENGLISH))) {
            		row12.DOC_ORI = FormatterUtils.formatUnwithE(tmpContent_tDBInput_7);
            	} else {
                	row12.DOC_ORI = tmpContent_tDBInput_7;
                }
            } else {
                row12.DOC_ORI = null;
            }
		                    }
							if(colQtyInRs_tDBInput_7 < 5) {
								row12.DOC_SERIES = null;
							} else {
		                          
            row12.DOC_SERIES = rs_tDBInput_7.getBigDecimal(5);
            if(rs_tDBInput_7.wasNull()){
                    row12.DOC_SERIES = null;
            }
		                    }
							if(colQtyInRs_tDBInput_7 < 6) {
								row12.DOC_NBR = null;
							} else {
		                          
            row12.DOC_NBR = rs_tDBInput_7.getBigDecimal(6);
            if(rs_tDBInput_7.wasNull()){
                    row12.DOC_NBR = null;
            }
		                    }
							if(colQtyInRs_tDBInput_7 < 7) {
								row12.IND_IMPORT = null;
							} else {
		                          
            row12.IND_IMPORT = rs_tDBInput_7.getBigDecimal(7);
            if(rs_tDBInput_7.wasNull()){
                    row12.IND_IMPORT = null;
            }
		                    }
							if(colQtyInRs_tDBInput_7 < 8) {
								row12.USERDOC_TYPE = null;
							} else {
	                         		
           		tmpContent_tDBInput_7 = rs_tDBInput_7.getString(8);
            if(tmpContent_tDBInput_7 != null) {
            	if (talendToDBList_tDBInput_7 .contains(rsmd_tDBInput_7.getColumnTypeName(8).toUpperCase(java.util.Locale.ENGLISH))) {
            		row12.USERDOC_TYPE = FormatterUtils.formatUnwithE(tmpContent_tDBInput_7);
            	} else {
                	row12.USERDOC_TYPE = tmpContent_tDBInput_7;
                }
            } else {
                row12.USERDOC_TYPE = null;
            }
		                    }
							if(colQtyInRs_tDBInput_7 < 9) {
								row12.LAW_CODE = null;
							} else {
		                          
            row12.LAW_CODE = rs_tDBInput_7.getBigDecimal(9);
            if(rs_tDBInput_7.wasNull()){
                    throw new RuntimeException("Null value in non-Nullable column");
            }
		                    }
							if(colQtyInRs_tDBInput_7 < 10) {
								row12.FILING_DATE = null;
							} else {
										
			row12.FILING_DATE = mssqlGTU_tDBInput_7.getDate(rsmd_tDBInput_7, rs_tDBInput_7, 10);
			
		                    }
							if(colQtyInRs_tDBInput_7 < 11) {
								row12.RECEPTION_DATE = null;
							} else {
										
			row12.RECEPTION_DATE = mssqlGTU_tDBInput_7.getDate(rsmd_tDBInput_7, rs_tDBInput_7, 11);
			
		                    }
							if(colQtyInRs_tDBInput_7 < 12) {
								row12.NOTES = null;
							} else {
	                         		
           		tmpContent_tDBInput_7 = rs_tDBInput_7.getString(12);
            if(tmpContent_tDBInput_7 != null) {
            	if (talendToDBList_tDBInput_7 .contains(rsmd_tDBInput_7.getColumnTypeName(12).toUpperCase(java.util.Locale.ENGLISH))) {
            		row12.NOTES = FormatterUtils.formatUnwithE(tmpContent_tDBInput_7);
            	} else {
                	row12.NOTES = tmpContent_tDBInput_7;
                }
            } else {
                row12.NOTES = null;
            }
		                    }
							if(colQtyInRs_tDBInput_7 < 13) {
								row12.APPLICANT_NOTES = null;
							} else {
	                         		
           		tmpContent_tDBInput_7 = rs_tDBInput_7.getString(13);
            if(tmpContent_tDBInput_7 != null) {
            	if (talendToDBList_tDBInput_7 .contains(rsmd_tDBInput_7.getColumnTypeName(13).toUpperCase(java.util.Locale.ENGLISH))) {
            		row12.APPLICANT_NOTES = FormatterUtils.formatUnwithE(tmpContent_tDBInput_7);
            	} else {
                	row12.APPLICANT_NOTES = tmpContent_tDBInput_7;
                }
            } else {
                row12.APPLICANT_NOTES = null;
            }
		                    }
							if(colQtyInRs_tDBInput_7 < 14) {
								row12.PERSON_NAME = null;
							} else {
	                         		
           		tmpContent_tDBInput_7 = rs_tDBInput_7.getString(14);
            if(tmpContent_tDBInput_7 != null) {
            	if (talendToDBList_tDBInput_7 .contains(rsmd_tDBInput_7.getColumnTypeName(14).toUpperCase(java.util.Locale.ENGLISH))) {
            		row12.PERSON_NAME = FormatterUtils.formatUnwithE(tmpContent_tDBInput_7);
            	} else {
                	row12.PERSON_NAME = tmpContent_tDBInput_7;
                }
            } else {
                row12.PERSON_NAME = null;
            }
		                    }
							if(colQtyInRs_tDBInput_7 < 15) {
								row12.PERSON_NAME_LANG2 = null;
							} else {
	                         		
           		tmpContent_tDBInput_7 = rs_tDBInput_7.getString(15);
            if(tmpContent_tDBInput_7 != null) {
            	if (talendToDBList_tDBInput_7 .contains(rsmd_tDBInput_7.getColumnTypeName(15).toUpperCase(java.util.Locale.ENGLISH))) {
            		row12.PERSON_NAME_LANG2 = FormatterUtils.formatUnwithE(tmpContent_tDBInput_7);
            	} else {
                	row12.PERSON_NAME_LANG2 = tmpContent_tDBInput_7;
                }
            } else {
                row12.PERSON_NAME_LANG2 = null;
            }
		                    }
							if(colQtyInRs_tDBInput_7 < 16) {
								row12.NATIONALITY_COUNTRY_CODE = null;
							} else {
	                         		
           		tmpContent_tDBInput_7 = rs_tDBInput_7.getString(16);
            if(tmpContent_tDBInput_7 != null) {
            	if (talendToDBList_tDBInput_7 .contains(rsmd_tDBInput_7.getColumnTypeName(16).toUpperCase(java.util.Locale.ENGLISH))) {
            		row12.NATIONALITY_COUNTRY_CODE = FormatterUtils.formatUnwithE(tmpContent_tDBInput_7);
            	} else {
                	row12.NATIONALITY_COUNTRY_CODE = tmpContent_tDBInput_7;
                }
            } else {
                row12.NATIONALITY_COUNTRY_CODE = null;
            }
		                    }
							if(colQtyInRs_tDBInput_7 < 17) {
								row12.IND_COMPANY = null;
							} else {
		                          
            row12.IND_COMPANY = rs_tDBInput_7.getBigDecimal(17);
            if(rs_tDBInput_7.wasNull()){
                    row12.IND_COMPANY = null;
            }
		                    }
							if(colQtyInRs_tDBInput_7 < 18) {
								row12.LEGAL_NATURE = null;
							} else {
	                         		
           		tmpContent_tDBInput_7 = rs_tDBInput_7.getString(18);
            if(tmpContent_tDBInput_7 != null) {
            	if (talendToDBList_tDBInput_7 .contains(rsmd_tDBInput_7.getColumnTypeName(18).toUpperCase(java.util.Locale.ENGLISH))) {
            		row12.LEGAL_NATURE = FormatterUtils.formatUnwithE(tmpContent_tDBInput_7);
            	} else {
                	row12.LEGAL_NATURE = tmpContent_tDBInput_7;
                }
            } else {
                row12.LEGAL_NATURE = null;
            }
		                    }
							if(colQtyInRs_tDBInput_7 < 19) {
								row12.LEGAL_NATURE_LANG2 = null;
							} else {
	                         		
           		tmpContent_tDBInput_7 = rs_tDBInput_7.getString(19);
            if(tmpContent_tDBInput_7 != null) {
            	if (talendToDBList_tDBInput_7 .contains(rsmd_tDBInput_7.getColumnTypeName(19).toUpperCase(java.util.Locale.ENGLISH))) {
            		row12.LEGAL_NATURE_LANG2 = FormatterUtils.formatUnwithE(tmpContent_tDBInput_7);
            	} else {
                	row12.LEGAL_NATURE_LANG2 = tmpContent_tDBInput_7;
                }
            } else {
                row12.LEGAL_NATURE_LANG2 = null;
            }
		                    }
							if(colQtyInRs_tDBInput_7 < 20) {
								row12.LEGAL_ID_TYPE = null;
							} else {
	                         		
           		tmpContent_tDBInput_7 = rs_tDBInput_7.getString(20);
            if(tmpContent_tDBInput_7 != null) {
            	if (talendToDBList_tDBInput_7 .contains(rsmd_tDBInput_7.getColumnTypeName(20).toUpperCase(java.util.Locale.ENGLISH))) {
            		row12.LEGAL_ID_TYPE = FormatterUtils.formatUnwithE(tmpContent_tDBInput_7);
            	} else {
                	row12.LEGAL_ID_TYPE = tmpContent_tDBInput_7;
                }
            } else {
                row12.LEGAL_ID_TYPE = null;
            }
		                    }
							if(colQtyInRs_tDBInput_7 < 21) {
								row12.LEGAL_ID_NBR = null;
							} else {
		                          
            row12.LEGAL_ID_NBR = rs_tDBInput_7.getBigDecimal(21);
            if(rs_tDBInput_7.wasNull()){
                    row12.LEGAL_ID_NBR = null;
            }
		                    }
							if(colQtyInRs_tDBInput_7 < 22) {
								row12.INDIVIDUAL_ID_TYPE = null;
							} else {
	                         		
           		tmpContent_tDBInput_7 = rs_tDBInput_7.getString(22);
            if(tmpContent_tDBInput_7 != null) {
            	if (talendToDBList_tDBInput_7 .contains(rsmd_tDBInput_7.getColumnTypeName(22).toUpperCase(java.util.Locale.ENGLISH))) {
            		row12.INDIVIDUAL_ID_TYPE = FormatterUtils.formatUnwithE(tmpContent_tDBInput_7);
            	} else {
                	row12.INDIVIDUAL_ID_TYPE = tmpContent_tDBInput_7;
                }
            } else {
                row12.INDIVIDUAL_ID_TYPE = null;
            }
		                    }
							if(colQtyInRs_tDBInput_7 < 23) {
								row12.INDIVIDUAL_ID_NBR = null;
							} else {
		                          
            row12.INDIVIDUAL_ID_NBR = rs_tDBInput_7.getBigDecimal(23);
            if(rs_tDBInput_7.wasNull()){
                    row12.INDIVIDUAL_ID_NBR = null;
            }
		                    }
							if(colQtyInRs_tDBInput_7 < 24) {
								row12.RESIDENCE_COUNTRY_CODE = null;
							} else {
	                         		
           		tmpContent_tDBInput_7 = rs_tDBInput_7.getString(24);
            if(tmpContent_tDBInput_7 != null) {
            	if (talendToDBList_tDBInput_7 .contains(rsmd_tDBInput_7.getColumnTypeName(24).toUpperCase(java.util.Locale.ENGLISH))) {
            		row12.RESIDENCE_COUNTRY_CODE = FormatterUtils.formatUnwithE(tmpContent_tDBInput_7);
            	} else {
                	row12.RESIDENCE_COUNTRY_CODE = tmpContent_tDBInput_7;
                }
            } else {
                row12.RESIDENCE_COUNTRY_CODE = null;
            }
		                    }
							if(colQtyInRs_tDBInput_7 < 25) {
								row12.STATE_NAME = null;
							} else {
	                         		
           		tmpContent_tDBInput_7 = rs_tDBInput_7.getString(25);
            if(tmpContent_tDBInput_7 != null) {
            	if (talendToDBList_tDBInput_7 .contains(rsmd_tDBInput_7.getColumnTypeName(25).toUpperCase(java.util.Locale.ENGLISH))) {
            		row12.STATE_NAME = FormatterUtils.formatUnwithE(tmpContent_tDBInput_7);
            	} else {
                	row12.STATE_NAME = tmpContent_tDBInput_7;
                }
            } else {
                row12.STATE_NAME = null;
            }
		                    }
							if(colQtyInRs_tDBInput_7 < 26) {
								row12.STATE_CODE = null;
							} else {
	                         		
           		tmpContent_tDBInput_7 = rs_tDBInput_7.getString(26);
            if(tmpContent_tDBInput_7 != null) {
            	if (talendToDBList_tDBInput_7 .contains(rsmd_tDBInput_7.getColumnTypeName(26).toUpperCase(java.util.Locale.ENGLISH))) {
            		row12.STATE_CODE = FormatterUtils.formatUnwithE(tmpContent_tDBInput_7);
            	} else {
                	row12.STATE_CODE = tmpContent_tDBInput_7;
                }
            } else {
                row12.STATE_CODE = null;
            }
		                    }
							if(colQtyInRs_tDBInput_7 < 27) {
								row12.CITY_NAME = null;
							} else {
	                         		
           		tmpContent_tDBInput_7 = rs_tDBInput_7.getString(27);
            if(tmpContent_tDBInput_7 != null) {
            	if (talendToDBList_tDBInput_7 .contains(rsmd_tDBInput_7.getColumnTypeName(27).toUpperCase(java.util.Locale.ENGLISH))) {
            		row12.CITY_NAME = FormatterUtils.formatUnwithE(tmpContent_tDBInput_7);
            	} else {
                	row12.CITY_NAME = tmpContent_tDBInput_7;
                }
            } else {
                row12.CITY_NAME = null;
            }
		                    }
							if(colQtyInRs_tDBInput_7 < 28) {
								row12.CITY_CODE = null;
							} else {
	                         		
           		tmpContent_tDBInput_7 = rs_tDBInput_7.getString(28);
            if(tmpContent_tDBInput_7 != null) {
            	if (talendToDBList_tDBInput_7 .contains(rsmd_tDBInput_7.getColumnTypeName(28).toUpperCase(java.util.Locale.ENGLISH))) {
            		row12.CITY_CODE = FormatterUtils.formatUnwithE(tmpContent_tDBInput_7);
            	} else {
                	row12.CITY_CODE = tmpContent_tDBInput_7;
                }
            } else {
                row12.CITY_CODE = null;
            }
		                    }
							if(colQtyInRs_tDBInput_7 < 29) {
								row12.ADDRESS_ZONE = null;
							} else {
	                         		
           		tmpContent_tDBInput_7 = rs_tDBInput_7.getString(29);
            if(tmpContent_tDBInput_7 != null) {
            	if (talendToDBList_tDBInput_7 .contains(rsmd_tDBInput_7.getColumnTypeName(29).toUpperCase(java.util.Locale.ENGLISH))) {
            		row12.ADDRESS_ZONE = FormatterUtils.formatUnwithE(tmpContent_tDBInput_7);
            	} else {
                	row12.ADDRESS_ZONE = tmpContent_tDBInput_7;
                }
            } else {
                row12.ADDRESS_ZONE = null;
            }
		                    }
							if(colQtyInRs_tDBInput_7 < 30) {
								row12.ADDRESS_STREET = null;
							} else {
	                         		
           		tmpContent_tDBInput_7 = rs_tDBInput_7.getString(30);
            if(tmpContent_tDBInput_7 != null) {
            	if (talendToDBList_tDBInput_7 .contains(rsmd_tDBInput_7.getColumnTypeName(30).toUpperCase(java.util.Locale.ENGLISH))) {
            		row12.ADDRESS_STREET = FormatterUtils.formatUnwithE(tmpContent_tDBInput_7);
            	} else {
                	row12.ADDRESS_STREET = tmpContent_tDBInput_7;
                }
            } else {
                row12.ADDRESS_STREET = null;
            }
		                    }
							if(colQtyInRs_tDBInput_7 < 31) {
								row12.ADDRESS_STREET_LANG2 = null;
							} else {
	                         		
           		tmpContent_tDBInput_7 = rs_tDBInput_7.getString(31);
            if(tmpContent_tDBInput_7 != null) {
            	if (talendToDBList_tDBInput_7 .contains(rsmd_tDBInput_7.getColumnTypeName(31).toUpperCase(java.util.Locale.ENGLISH))) {
            		row12.ADDRESS_STREET_LANG2 = FormatterUtils.formatUnwithE(tmpContent_tDBInput_7);
            	} else {
                	row12.ADDRESS_STREET_LANG2 = tmpContent_tDBInput_7;
                }
            } else {
                row12.ADDRESS_STREET_LANG2 = null;
            }
		                    }
							if(colQtyInRs_tDBInput_7 < 32) {
								row12.ZIP_CODE = null;
							} else {
	                         		
           		tmpContent_tDBInput_7 = rs_tDBInput_7.getString(32);
            if(tmpContent_tDBInput_7 != null) {
            	if (talendToDBList_tDBInput_7 .contains(rsmd_tDBInput_7.getColumnTypeName(32).toUpperCase(java.util.Locale.ENGLISH))) {
            		row12.ZIP_CODE = FormatterUtils.formatUnwithE(tmpContent_tDBInput_7);
            	} else {
                	row12.ZIP_CODE = tmpContent_tDBInput_7;
                }
            } else {
                row12.ZIP_CODE = null;
            }
		                    }
							if(colQtyInRs_tDBInput_7 < 33) {
								row12.EMAIL = null;
							} else {
	                         		
           		tmpContent_tDBInput_7 = rs_tDBInput_7.getString(33);
            if(tmpContent_tDBInput_7 != null) {
            	if (talendToDBList_tDBInput_7 .contains(rsmd_tDBInput_7.getColumnTypeName(33).toUpperCase(java.util.Locale.ENGLISH))) {
            		row12.EMAIL = FormatterUtils.formatUnwithE(tmpContent_tDBInput_7);
            	} else {
                	row12.EMAIL = tmpContent_tDBInput_7;
                }
            } else {
                row12.EMAIL = null;
            }
		                    }
							if(colQtyInRs_tDBInput_7 < 34) {
								row12.TELEPHONE = null;
							} else {
	                         		
           		tmpContent_tDBInput_7 = rs_tDBInput_7.getString(34);
            if(tmpContent_tDBInput_7 != null) {
            	if (talendToDBList_tDBInput_7 .contains(rsmd_tDBInput_7.getColumnTypeName(34).toUpperCase(java.util.Locale.ENGLISH))) {
            		row12.TELEPHONE = FormatterUtils.formatUnwithE(tmpContent_tDBInput_7);
            	} else {
                	row12.TELEPHONE = tmpContent_tDBInput_7;
                }
            } else {
                row12.TELEPHONE = null;
            }
		                    }
							if(colQtyInRs_tDBInput_7 < 35) {
								row12.PERSON_GROUP_CODE = null;
							} else {
	                         		
           		tmpContent_tDBInput_7 = rs_tDBInput_7.getString(35);
            if(tmpContent_tDBInput_7 != null) {
            	if (talendToDBList_tDBInput_7 .contains(rsmd_tDBInput_7.getColumnTypeName(35).toUpperCase(java.util.Locale.ENGLISH))) {
            		row12.PERSON_GROUP_CODE = FormatterUtils.formatUnwithE(tmpContent_tDBInput_7);
            	} else {
                	row12.PERSON_GROUP_CODE = tmpContent_tDBInput_7;
                }
            } else {
                row12.PERSON_GROUP_CODE = null;
            }
		                    }
							if(colQtyInRs_tDBInput_7 < 36) {
								row12.CAPTURE_USER_ID = null;
							} else {
		                          
            row12.CAPTURE_USER_ID = rs_tDBInput_7.getBigDecimal(36);
            if(rs_tDBInput_7.wasNull()){
                    row12.CAPTURE_USER_ID = null;
            }
		                    }
							if(colQtyInRs_tDBInput_7 < 37) {
								row12.CAPTURE_DATE = null;
							} else {
										
			row12.CAPTURE_DATE = mssqlGTU_tDBInput_7.getDate(rsmd_tDBInput_7, rs_tDBInput_7, 37);
			
		                    }
					





 



/**
 * [tDBInput_7 begin ] stop
 */
	
	/**
	 * [tDBInput_7 main ] start
	 */

	

	
	
	currentComponent="tDBInput_7";

	

 


	tos_count_tDBInput_7++;

/**
 * [tDBInput_7 main ] stop
 */
	
	/**
	 * [tDBInput_7 process_data_begin ] start
	 */

	

	
	
	currentComponent="tDBInput_7";

	

 



/**
 * [tDBInput_7 process_data_begin ] stop
 */

	
	/**
	 * [tAdvancedHash_row12 main ] start
	 */

	

	
	
	currentComponent="tAdvancedHash_row12";

	
					if(execStat){
						runStat.updateStatOnConnection(iterateId,1,1
						
							,"row12"
						
						);
					}
					


			   
			   

					row12Struct row12_HashRow = new row12Struct();
		   	   	   
				
				row12_HashRow.USERDOC_SEQ = row12.USERDOC_SEQ;
				
				row12_HashRow.USERDOC_SERIES = row12.USERDOC_SERIES;
				
				row12_HashRow.USERDOC_NBR = row12.USERDOC_NBR;
				
				row12_HashRow.DOC_ORI = row12.DOC_ORI;
				
				row12_HashRow.DOC_SERIES = row12.DOC_SERIES;
				
				row12_HashRow.DOC_NBR = row12.DOC_NBR;
				
				row12_HashRow.IND_IMPORT = row12.IND_IMPORT;
				
				row12_HashRow.USERDOC_TYPE = row12.USERDOC_TYPE;
				
				row12_HashRow.LAW_CODE = row12.LAW_CODE;
				
				row12_HashRow.FILING_DATE = row12.FILING_DATE;
				
				row12_HashRow.RECEPTION_DATE = row12.RECEPTION_DATE;
				
				row12_HashRow.NOTES = row12.NOTES;
				
				row12_HashRow.APPLICANT_NOTES = row12.APPLICANT_NOTES;
				
				row12_HashRow.PERSON_NAME = row12.PERSON_NAME;
				
				row12_HashRow.PERSON_NAME_LANG2 = row12.PERSON_NAME_LANG2;
				
				row12_HashRow.NATIONALITY_COUNTRY_CODE = row12.NATIONALITY_COUNTRY_CODE;
				
				row12_HashRow.IND_COMPANY = row12.IND_COMPANY;
				
				row12_HashRow.LEGAL_NATURE = row12.LEGAL_NATURE;
				
				row12_HashRow.LEGAL_NATURE_LANG2 = row12.LEGAL_NATURE_LANG2;
				
				row12_HashRow.LEGAL_ID_TYPE = row12.LEGAL_ID_TYPE;
				
				row12_HashRow.LEGAL_ID_NBR = row12.LEGAL_ID_NBR;
				
				row12_HashRow.INDIVIDUAL_ID_TYPE = row12.INDIVIDUAL_ID_TYPE;
				
				row12_HashRow.INDIVIDUAL_ID_NBR = row12.INDIVIDUAL_ID_NBR;
				
				row12_HashRow.RESIDENCE_COUNTRY_CODE = row12.RESIDENCE_COUNTRY_CODE;
				
				row12_HashRow.STATE_NAME = row12.STATE_NAME;
				
				row12_HashRow.STATE_CODE = row12.STATE_CODE;
				
				row12_HashRow.CITY_NAME = row12.CITY_NAME;
				
				row12_HashRow.CITY_CODE = row12.CITY_CODE;
				
				row12_HashRow.ADDRESS_ZONE = row12.ADDRESS_ZONE;
				
				row12_HashRow.ADDRESS_STREET = row12.ADDRESS_STREET;
				
				row12_HashRow.ADDRESS_STREET_LANG2 = row12.ADDRESS_STREET_LANG2;
				
				row12_HashRow.ZIP_CODE = row12.ZIP_CODE;
				
				row12_HashRow.EMAIL = row12.EMAIL;
				
				row12_HashRow.TELEPHONE = row12.TELEPHONE;
				
				row12_HashRow.PERSON_GROUP_CODE = row12.PERSON_GROUP_CODE;
				
				row12_HashRow.CAPTURE_USER_ID = row12.CAPTURE_USER_ID;
				
				row12_HashRow.CAPTURE_DATE = row12.CAPTURE_DATE;
				
			tHash_Lookup_row12.put(row12_HashRow);
			
            




 


	tos_count_tAdvancedHash_row12++;

/**
 * [tAdvancedHash_row12 main ] stop
 */
	
	/**
	 * [tAdvancedHash_row12 process_data_begin ] start
	 */

	

	
	
	currentComponent="tAdvancedHash_row12";

	

 



/**
 * [tAdvancedHash_row12 process_data_begin ] stop
 */
	
	/**
	 * [tAdvancedHash_row12 process_data_end ] start
	 */

	

	
	
	currentComponent="tAdvancedHash_row12";

	

 



/**
 * [tAdvancedHash_row12 process_data_end ] stop
 */



	
	/**
	 * [tDBInput_7 process_data_end ] start
	 */

	

	
	
	currentComponent="tDBInput_7";

	

 



/**
 * [tDBInput_7 process_data_end ] stop
 */
	
	/**
	 * [tDBInput_7 end ] start
	 */

	

	
	
	currentComponent="tDBInput_7";

	

	}
}finally{
	if (rs_tDBInput_7 != null) {
		rs_tDBInput_7.close();
	}
	if (stmt_tDBInput_7 != null) {
		stmt_tDBInput_7.close();
	}
		if(conn_tDBInput_7 != null && !conn_tDBInput_7.isClosed()) {
			
			conn_tDBInput_7.close();
			
			if("com.mysql.cj.jdbc.Driver".equals((String)globalMap.get("driverClass_"))
			    && routines.system.BundleUtils.inOSGi()) {
			        Class.forName("com.mysql.cj.jdbc.AbandonedConnectionCleanupThread").
			            getMethod("checkedShutdown").invoke(null, (Object[]) null);
			}
			
		}
}
globalMap.put("tDBInput_7_NB_LINE",nb_line_tDBInput_7);

 

ok_Hash.put("tDBInput_7", true);
end_Hash.put("tDBInput_7", System.currentTimeMillis());




/**
 * [tDBInput_7 end ] stop
 */

	
	/**
	 * [tAdvancedHash_row12 end ] start
	 */

	

	
	
	currentComponent="tAdvancedHash_row12";

	

tHash_Lookup_row12.endPut();

				if(execStat){
			  		runStat.updateStat(resourceMap,iterateId,2,0,"row12");
			  	}
			  	
 

ok_Hash.put("tAdvancedHash_row12", true);
end_Hash.put("tAdvancedHash_row12", System.currentTimeMillis());




/**
 * [tAdvancedHash_row12 end ] stop
 */



				}//end the resume

				



	
			}catch(java.lang.Exception e){	
				
				TalendException te = new TalendException(e, currentComponent, globalMap);
				
				throw te;
			}catch(java.lang.Error error){	
				
					runStat.stopThreadStat();
				
				throw error;
			}finally{
				
				try{
					
	
	/**
	 * [tDBInput_7 finally ] start
	 */

	

	
	
	currentComponent="tDBInput_7";

	

 



/**
 * [tDBInput_7 finally ] stop
 */

	
	/**
	 * [tAdvancedHash_row12 finally ] start
	 */

	

	
	
	currentComponent="tAdvancedHash_row12";

	

 



/**
 * [tAdvancedHash_row12 finally ] stop
 */



				}catch(java.lang.Exception e){	
					//ignore
				}catch(java.lang.Error error){
					//ignore
				}
				resourceMap = null;
			}
		

		globalMap.put("tDBInput_7_SUBPROCESS_STATE", 1);
	}
	


public static class row13Struct implements routines.system.IPersistableComparableLookupRow<row13Struct> {
    final static byte[] commonByteArrayLock_WIPO_PROJECTS_Gg_POA = new byte[0];
    static byte[] commonByteArray_WIPO_PROJECTS_Gg_POA = new byte[0];
	protected static final int DEFAULT_HASHCODE = 1;
    protected static final int PRIME = 31;
    protected int hashCode = DEFAULT_HASHCODE;
    public boolean hashCodeDirty = true;

    public String loopKey;



	
			    public BigDecimal ROW_VERSION;

				public BigDecimal getROW_VERSION () {
					return this.ROW_VERSION;
				}
				
			    public String DOC_ORI;

				public String getDOC_ORI () {
					return this.DOC_ORI;
				}
				
			    public String DOC_LOG;

				public String getDOC_LOG () {
					return this.DOC_LOG;
				}
				
			    public BigDecimal DOC_SER;

				public BigDecimal getDOC_SER () {
					return this.DOC_SER;
				}
				
			    public BigDecimal DOC_NBR;

				public BigDecimal getDOC_NBR () {
					return this.DOC_NBR;
				}
				
			    public BigDecimal POA_REG_NBR;

				public BigDecimal getPOA_REG_NBR () {
					return this.POA_REG_NBR;
				}
				
			    public java.util.Date POA_DATE;

				public java.util.Date getPOA_DATE () {
					return this.POA_DATE;
				}
				
			    public String SCOPE;

				public String getSCOPE () {
					return this.SCOPE;
				}
				


	@Override
	public int hashCode() {
		if (this.hashCodeDirty) {
			final int prime = PRIME;
			int result = DEFAULT_HASHCODE;
	
						result = prime * result + ((this.DOC_ORI == null) ? 0 : this.DOC_ORI.hashCode());
					
						result = prime * result + ((this.DOC_LOG == null) ? 0 : this.DOC_LOG.hashCode());
					
						result = prime * result + ((this.DOC_SER == null) ? 0 : new Double(this.DOC_SER.doubleValue()).hashCode());
						
						result = prime * result + ((this.DOC_NBR == null) ? 0 : new Double(this.DOC_NBR.doubleValue()).hashCode());
						
    		this.hashCode = result;
    		this.hashCodeDirty = false;
		}
		return this.hashCode;
	}

	@Override
	public boolean equals(Object obj) {
		if (this == obj) return true;
		if (obj == null) return false;
		if (getClass() != obj.getClass()) return false;
		final row13Struct other = (row13Struct) obj;
		
						if (this.DOC_ORI == null) {
							if (other.DOC_ORI != null)
								return false;
						
						} else if (!this.DOC_ORI.equals(other.DOC_ORI))
						
							return false;
					
						if (this.DOC_LOG == null) {
							if (other.DOC_LOG != null)
								return false;
						
						} else if (!this.DOC_LOG.equals(other.DOC_LOG))
						
							return false;
					
						if (this.DOC_SER == null) {
							if (other.DOC_SER != null)
								return false;
						
						} else if ((other.DOC_SER == null) || (this.DOC_SER.compareTo(other.DOC_SER)!=0))
						
							return false;
					
						if (this.DOC_NBR == null) {
							if (other.DOC_NBR != null)
								return false;
						
						} else if ((other.DOC_NBR == null) || (this.DOC_NBR.compareTo(other.DOC_NBR)!=0))
						
							return false;
					

		return true;
    }

	public void copyDataTo(row13Struct other) {

		other.ROW_VERSION = this.ROW_VERSION;
	            other.DOC_ORI = this.DOC_ORI;
	            other.DOC_LOG = this.DOC_LOG;
	            other.DOC_SER = this.DOC_SER;
	            other.DOC_NBR = this.DOC_NBR;
	            other.POA_REG_NBR = this.POA_REG_NBR;
	            other.POA_DATE = this.POA_DATE;
	            other.SCOPE = this.SCOPE;
	            
	}

	public void copyKeysDataTo(row13Struct other) {

		other.DOC_ORI = this.DOC_ORI;
	            	other.DOC_LOG = this.DOC_LOG;
	            	other.DOC_SER = this.DOC_SER;
	            	other.DOC_NBR = this.DOC_NBR;
	            	
	}




	private String readString(ObjectInputStream dis) throws IOException{
		String strReturn = null;
		int length = 0;
        length = dis.readInt();
		if (length == -1) {
			strReturn = null;
		} else {
			if(length > commonByteArray_WIPO_PROJECTS_Gg_POA.length) {
				if(length < 1024 && commonByteArray_WIPO_PROJECTS_Gg_POA.length == 0) {
   					commonByteArray_WIPO_PROJECTS_Gg_POA = new byte[1024];
				} else {
   					commonByteArray_WIPO_PROJECTS_Gg_POA = new byte[2 * length];
   				}
			}
			dis.readFully(commonByteArray_WIPO_PROJECTS_Gg_POA, 0, length);
			strReturn = new String(commonByteArray_WIPO_PROJECTS_Gg_POA, 0, length, utf8Charset);
		}
		return strReturn;
	}

    private void writeString(String str, ObjectOutputStream dos) throws IOException{
		if(str == null) {
            dos.writeInt(-1);
		} else {
            byte[] byteArray = str.getBytes(utf8Charset);
	    	dos.writeInt(byteArray.length);
			dos.write(byteArray);
    	}
    }

	private java.util.Date readDate(DataInputStream dis, ObjectInputStream ois) throws IOException{
		java.util.Date dateReturn = null;
		int length = 0;
        length = dis.readByte();
		if (length == -1) {
			dateReturn = null;
		} else {
	    	dateReturn = new Date(dis.readLong());
		}
		return dateReturn;
	}

	private void writeDate(java.util.Date date1, DataOutputStream dos, ObjectOutputStream oos) throws IOException{
		if(date1 == null) {
            dos.writeByte(-1);
		} else {
			dos.writeByte(0);
	    	dos.writeLong(date1.getTime());
    	}
	}

	private String readString(DataInputStream dis, ObjectInputStream ois) throws IOException{
		String strReturn = null;
		int length = 0;
        length = dis.readInt();
		if (length == -1) {
			strReturn = null;
		} else {
			byte[] byteArray = new byte[length];
			dis.read(byteArray);
			strReturn = new String(byteArray, utf8Charset);
		}
		return strReturn;
	}

	private void writeString(String str, DataOutputStream dos, ObjectOutputStream oos) throws IOException{
		if(str == null) {
            dos.writeInt(-1);
		} else {
            byte[] byteArray = str.getBytes(utf8Charset);
	    	dos.writeInt(byteArray.length);
			dos.write(byteArray);
    	}
	}

    public void readKeysData(ObjectInputStream dis) {

		synchronized(commonByteArrayLock_WIPO_PROJECTS_Gg_POA) {

        	try {

        		int length = 0;
		
					this.DOC_ORI = readString(dis);
					
					this.DOC_LOG = readString(dis);
					
						this.DOC_SER = (BigDecimal) dis.readObject();
					
						this.DOC_NBR = (BigDecimal) dis.readObject();
					
        	} catch (IOException e) {
	            throw new RuntimeException(e);

		
			} catch(ClassNotFoundException eCNFE) {
				 throw new RuntimeException(eCNFE);
		

        }

		

      }


    }

    public void writeKeysData(ObjectOutputStream dos) {
        try {

		
					// String
				
						writeString(this.DOC_ORI,dos);
					
					// String
				
						writeString(this.DOC_LOG,dos);
					
					// BigDecimal
				
       			    	dos.writeObject(this.DOC_SER);
					
					// BigDecimal
				
       			    	dos.writeObject(this.DOC_NBR);
					
        	} catch (IOException e) {
	            throw new RuntimeException(e);
        }


    }



    /**
     * Fill Values data by reading ObjectInputStream.
     */
    public void readValuesData(DataInputStream dis, ObjectInputStream ois) {
        try {

			int length = 0;
		
       			    	this.ROW_VERSION = (BigDecimal) ois.readObject();
					
       			    	this.POA_REG_NBR = (BigDecimal) ois.readObject();
					
						this.POA_DATE = readDate(dis,ois);
					
						this.SCOPE = readString(dis,ois);
					
        	} catch (IOException e) {
	            throw new RuntimeException(e);

		
			} catch(ClassNotFoundException eCNFE) {
				 throw new RuntimeException(eCNFE);
		

        }

		

    }

    /**
     * Return a byte array which represents Values data.
     */
    public void writeValuesData(DataOutputStream dos, ObjectOutputStream oos) {
        try {

		
       			    	oos.writeObject(this.ROW_VERSION);
					
       			    	oos.writeObject(this.POA_REG_NBR);
					
						writeDate(this.POA_DATE, dos, oos);
					
						writeString(this.SCOPE, dos, oos);
					
        	} catch (IOException e) {
	            throw new RuntimeException(e);
        	}

    }


    public String toString() {

		StringBuilder sb = new StringBuilder();
		sb.append(super.toString());
		sb.append("[");
		sb.append("ROW_VERSION="+String.valueOf(ROW_VERSION));
		sb.append(",DOC_ORI="+DOC_ORI);
		sb.append(",DOC_LOG="+DOC_LOG);
		sb.append(",DOC_SER="+String.valueOf(DOC_SER));
		sb.append(",DOC_NBR="+String.valueOf(DOC_NBR));
		sb.append(",POA_REG_NBR="+String.valueOf(POA_REG_NBR));
		sb.append(",POA_DATE="+String.valueOf(POA_DATE));
		sb.append(",SCOPE="+SCOPE);
	    sb.append("]");

	    return sb.toString();
    }

    /**
     * Compare keys
     */
    public int compareTo(row13Struct other) {

		int returnValue = -1;
		
						returnValue = checkNullsAndCompare(this.DOC_ORI, other.DOC_ORI);
						if(returnValue != 0) {
							return returnValue;
						}

					
						returnValue = checkNullsAndCompare(this.DOC_LOG, other.DOC_LOG);
						if(returnValue != 0) {
							return returnValue;
						}

					
						returnValue = checkNullsAndCompare(this.DOC_SER, other.DOC_SER);
						if(returnValue != 0) {
							return returnValue;
						}

					
						returnValue = checkNullsAndCompare(this.DOC_NBR, other.DOC_NBR);
						if(returnValue != 0) {
							return returnValue;
						}

					
	    return returnValue;
    }


    private int checkNullsAndCompare(Object object1, Object object2) {
        int returnValue = 0;
		if (object1 instanceof Comparable && object2 instanceof Comparable) {
            returnValue = ((Comparable) object1).compareTo(object2);
        } else if (object1 != null && object2 != null) {
            returnValue = compareStrings(object1.toString(), object2.toString());
        } else if (object1 == null && object2 != null) {
            returnValue = 1;
        } else if (object1 != null && object2 == null) {
            returnValue = -1;
        } else {
            returnValue = 0;
        }

        return returnValue;
    }

    private int compareStrings(String string1, String string2) {
        return string1.compareTo(string2);
    }


}
public void tDBInput_8Process(final java.util.Map<String, Object> globalMap) throws TalendException {
	globalMap.put("tDBInput_8_SUBPROCESS_STATE", 0);

 final boolean execStat = this.execStat;
	
		String iterateId = "";
	
	
	String currentComponent = "";
	java.util.Map<String, Object> resourceMap = new java.util.HashMap<String, Object>();

	try {
			// TDI-39566 avoid throwing an useless Exception
			boolean resumeIt = true;
			if (globalResumeTicket == false && resumeEntryMethodName != null) {
				String currentMethodName = new java.lang.Exception().getStackTrace()[0].getMethodName();
				resumeIt = resumeEntryMethodName.equals(currentMethodName);
			}
			if (resumeIt || globalResumeTicket) { //start the resume
				globalResumeTicket = true;



		row13Struct row13 = new row13Struct();




	
	/**
	 * [tAdvancedHash_row13 begin ] start
	 */

	

	
		
		ok_Hash.put("tAdvancedHash_row13", false);
		start_Hash.put("tAdvancedHash_row13", System.currentTimeMillis());
		
	
	currentComponent="tAdvancedHash_row13";

	
					if(execStat) {
						runStat.updateStatOnConnection(resourceMap,iterateId,0,0,"row13");
					}
				
		int tos_count_tAdvancedHash_row13 = 0;
		

			   		// connection name:row13
			   		// source node:tDBInput_8 - inputs:(after_tDBInput_6) outputs:(row13,row13) | target node:tAdvancedHash_row13 - inputs:(row13) outputs:()
			   		// linked node: tMap_4 - inputs:(row11,row12,row13) outputs:(update_marks)
			   
			   		org.talend.designer.components.lookup.common.ICommonLookup.MATCHING_MODE matchingModeEnum_row13 = 
			   			org.talend.designer.components.lookup.common.ICommonLookup.MATCHING_MODE.UNIQUE_MATCH;
			   			
			   
	   			org.talend.designer.components.lookup.memory.AdvancedMemoryLookup<row13Struct> tHash_Lookup_row13 =org.talend.designer.components.lookup.memory.AdvancedMemoryLookup.
	   						<row13Struct>getLookup(matchingModeEnum_row13);
	   						   
		   	   	   globalMap.put("tHash_Lookup_row13", tHash_Lookup_row13);
		   	   	   
				
           

 



/**
 * [tAdvancedHash_row13 begin ] stop
 */



	
	/**
	 * [tDBInput_8 begin ] start
	 */

	

	
		
		ok_Hash.put("tDBInput_8", false);
		start_Hash.put("tDBInput_8", System.currentTimeMillis());
		
	
	currentComponent="tDBInput_8";

	
		int tos_count_tDBInput_8 = 0;
		
	
    
	
			org.talend.designer.components.util.mssql.MSSqlGenerateTimestampUtil mssqlGTU_tDBInput_8 = org.talend.designer.components.util.mssql.MSSqlUtilFactory.getMSSqlGenerateTimestampUtil();
			
			java.util.List<String> talendToDBList_tDBInput_8 = new java.util.ArrayList();
			String[] talendToDBArray_tDBInput_8  = new String[]{"FLOAT","NUMERIC","NUMERIC IDENTITY","DECIMAL","DECIMAL IDENTITY","REAL"}; 
			java.util.Collections.addAll(talendToDBList_tDBInput_8, talendToDBArray_tDBInput_8); 
		    int nb_line_tDBInput_8 = 0;
		    java.sql.Connection conn_tDBInput_8 = null;
				String driverClass_tDBInput_8 = "net.sourceforge.jtds.jdbc.Driver";
			    java.lang.Class jdbcclazz_tDBInput_8 = java.lang.Class.forName(driverClass_tDBInput_8);
				String dbUser_tDBInput_8 = "ADMIN";
				
				 
	final String decryptedPassword_tDBInput_8 = routines.system.PasswordEncryptUtil.decryptPassword("enc:routine.encryption.key.v1:imqpvQZxS71oiaoQi5oxA91QXhS18pWh1iPYgwH9XImh");
				
				String dbPwd_tDBInput_8 = decryptedPassword_tDBInput_8;
				
		    String port_tDBInput_8 = "1433";
		    String dbname_tDBInput_8 = "MARCAS_PY" ;
			String url_tDBInput_8 = "jdbc:jtds:sqlserver://" + "localhost" ;
		    if (!"".equals(port_tDBInput_8)) {
		    	url_tDBInput_8 += ":" + "1433";
		    }
		    if (!"".equals(dbname_tDBInput_8)) {
				url_tDBInput_8 += "//" + "MARCAS_PY"; 
		    }
		    url_tDBInput_8 += ";appName=" + projectName + ";" + "";
		    String dbschema_tDBInput_8 = "ADMIN";
				
				conn_tDBInput_8 = java.sql.DriverManager.getConnection(url_tDBInput_8,dbUser_tDBInput_8,dbPwd_tDBInput_8);
		        
		    
			java.sql.Statement stmt_tDBInput_8 = conn_tDBInput_8.createStatement();

		    String dbquery_tDBInput_8 = "SELECT ADMIN.IP_POA.ROW_VERSION,\n		ADMIN.IP_POA.DOC_ORI,\n		ADMIN.IP_POA.DOC_LOG,\n		ADMIN.IP_POA.DOC_SER,\n		ADMIN.IP_POA"
+".DOC_NBR,\n		ADMIN.IP_POA.POA_REG_NBR,\n		ADMIN.IP_POA.POA_DATE,\n		ADMIN.IP_POA.SCOPE\nFROM	ADMIN.IP_POA";
		    

            	globalMap.put("tDBInput_8_QUERY",dbquery_tDBInput_8);
		    java.sql.ResultSet rs_tDBInput_8 = null;

		    try {
		    	rs_tDBInput_8 = stmt_tDBInput_8.executeQuery(dbquery_tDBInput_8);
		    	java.sql.ResultSetMetaData rsmd_tDBInput_8 = rs_tDBInput_8.getMetaData();
		    	int colQtyInRs_tDBInput_8 = rsmd_tDBInput_8.getColumnCount();

		    String tmpContent_tDBInput_8 = null;
		    
		    
		    while (rs_tDBInput_8.next()) {
		        nb_line_tDBInput_8++;
		        
							if(colQtyInRs_tDBInput_8 < 1) {
								row13.ROW_VERSION = null;
							} else {
		                          
            row13.ROW_VERSION = rs_tDBInput_8.getBigDecimal(1);
            if(rs_tDBInput_8.wasNull()){
                    throw new RuntimeException("Null value in non-Nullable column");
            }
		                    }
							if(colQtyInRs_tDBInput_8 < 2) {
								row13.DOC_ORI = null;
							} else {
	                         		
           		tmpContent_tDBInput_8 = rs_tDBInput_8.getString(2);
            if(tmpContent_tDBInput_8 != null) {
            	if (talendToDBList_tDBInput_8 .contains(rsmd_tDBInput_8.getColumnTypeName(2).toUpperCase(java.util.Locale.ENGLISH))) {
            		row13.DOC_ORI = FormatterUtils.formatUnwithE(tmpContent_tDBInput_8);
            	} else {
                	row13.DOC_ORI = tmpContent_tDBInput_8;
                }
            } else {
                row13.DOC_ORI = null;
            }
		                    }
							if(colQtyInRs_tDBInput_8 < 3) {
								row13.DOC_LOG = null;
							} else {
	                         		
           		tmpContent_tDBInput_8 = rs_tDBInput_8.getString(3);
            if(tmpContent_tDBInput_8 != null) {
            	if (talendToDBList_tDBInput_8 .contains(rsmd_tDBInput_8.getColumnTypeName(3).toUpperCase(java.util.Locale.ENGLISH))) {
            		row13.DOC_LOG = FormatterUtils.formatUnwithE(tmpContent_tDBInput_8);
            	} else {
                	row13.DOC_LOG = tmpContent_tDBInput_8;
                }
            } else {
                row13.DOC_LOG = null;
            }
		                    }
							if(colQtyInRs_tDBInput_8 < 4) {
								row13.DOC_SER = null;
							} else {
		                          
            row13.DOC_SER = rs_tDBInput_8.getBigDecimal(4);
            if(rs_tDBInput_8.wasNull()){
                    throw new RuntimeException("Null value in non-Nullable column");
            }
		                    }
							if(colQtyInRs_tDBInput_8 < 5) {
								row13.DOC_NBR = null;
							} else {
		                          
            row13.DOC_NBR = rs_tDBInput_8.getBigDecimal(5);
            if(rs_tDBInput_8.wasNull()){
                    throw new RuntimeException("Null value in non-Nullable column");
            }
		                    }
							if(colQtyInRs_tDBInput_8 < 6) {
								row13.POA_REG_NBR = null;
							} else {
		                          
            row13.POA_REG_NBR = rs_tDBInput_8.getBigDecimal(6);
            if(rs_tDBInput_8.wasNull()){
                    row13.POA_REG_NBR = null;
            }
		                    }
							if(colQtyInRs_tDBInput_8 < 7) {
								row13.POA_DATE = null;
							} else {
										
			row13.POA_DATE = mssqlGTU_tDBInput_8.getDate(rsmd_tDBInput_8, rs_tDBInput_8, 7);
			
		                    }
							if(colQtyInRs_tDBInput_8 < 8) {
								row13.SCOPE = null;
							} else {
	                         		
           		tmpContent_tDBInput_8 = rs_tDBInput_8.getString(8);
            if(tmpContent_tDBInput_8 != null) {
            	if (talendToDBList_tDBInput_8 .contains(rsmd_tDBInput_8.getColumnTypeName(8).toUpperCase(java.util.Locale.ENGLISH))) {
            		row13.SCOPE = FormatterUtils.formatUnwithE(tmpContent_tDBInput_8);
            	} else {
                	row13.SCOPE = tmpContent_tDBInput_8;
                }
            } else {
                row13.SCOPE = null;
            }
		                    }
					





 



/**
 * [tDBInput_8 begin ] stop
 */
	
	/**
	 * [tDBInput_8 main ] start
	 */

	

	
	
	currentComponent="tDBInput_8";

	

 


	tos_count_tDBInput_8++;

/**
 * [tDBInput_8 main ] stop
 */
	
	/**
	 * [tDBInput_8 process_data_begin ] start
	 */

	

	
	
	currentComponent="tDBInput_8";

	

 



/**
 * [tDBInput_8 process_data_begin ] stop
 */

	
	/**
	 * [tAdvancedHash_row13 main ] start
	 */

	

	
	
	currentComponent="tAdvancedHash_row13";

	
					if(execStat){
						runStat.updateStatOnConnection(iterateId,1,1
						
							,"row13"
						
						);
					}
					


			   
			   

					row13Struct row13_HashRow = new row13Struct();
		   	   	   
				
				row13_HashRow.ROW_VERSION = row13.ROW_VERSION;
				
				row13_HashRow.DOC_ORI = row13.DOC_ORI;
				
				row13_HashRow.DOC_LOG = row13.DOC_LOG;
				
				row13_HashRow.DOC_SER = row13.DOC_SER;
				
				row13_HashRow.DOC_NBR = row13.DOC_NBR;
				
				row13_HashRow.POA_REG_NBR = row13.POA_REG_NBR;
				
				row13_HashRow.POA_DATE = row13.POA_DATE;
				
				row13_HashRow.SCOPE = row13.SCOPE;
				
			tHash_Lookup_row13.put(row13_HashRow);
			
            




 


	tos_count_tAdvancedHash_row13++;

/**
 * [tAdvancedHash_row13 main ] stop
 */
	
	/**
	 * [tAdvancedHash_row13 process_data_begin ] start
	 */

	

	
	
	currentComponent="tAdvancedHash_row13";

	

 



/**
 * [tAdvancedHash_row13 process_data_begin ] stop
 */
	
	/**
	 * [tAdvancedHash_row13 process_data_end ] start
	 */

	

	
	
	currentComponent="tAdvancedHash_row13";

	

 



/**
 * [tAdvancedHash_row13 process_data_end ] stop
 */



	
	/**
	 * [tDBInput_8 process_data_end ] start
	 */

	

	
	
	currentComponent="tDBInput_8";

	

 



/**
 * [tDBInput_8 process_data_end ] stop
 */
	
	/**
	 * [tDBInput_8 end ] start
	 */

	

	
	
	currentComponent="tDBInput_8";

	

	}
}finally{
	if (rs_tDBInput_8 != null) {
		rs_tDBInput_8.close();
	}
	if (stmt_tDBInput_8 != null) {
		stmt_tDBInput_8.close();
	}
		if(conn_tDBInput_8 != null && !conn_tDBInput_8.isClosed()) {
			
			conn_tDBInput_8.close();
			
			if("com.mysql.cj.jdbc.Driver".equals((String)globalMap.get("driverClass_"))
			    && routines.system.BundleUtils.inOSGi()) {
			        Class.forName("com.mysql.cj.jdbc.AbandonedConnectionCleanupThread").
			            getMethod("checkedShutdown").invoke(null, (Object[]) null);
			}
			
		}
}
globalMap.put("tDBInput_8_NB_LINE",nb_line_tDBInput_8);

 

ok_Hash.put("tDBInput_8", true);
end_Hash.put("tDBInput_8", System.currentTimeMillis());




/**
 * [tDBInput_8 end ] stop
 */

	
	/**
	 * [tAdvancedHash_row13 end ] start
	 */

	

	
	
	currentComponent="tAdvancedHash_row13";

	

tHash_Lookup_row13.endPut();

				if(execStat){
			  		runStat.updateStat(resourceMap,iterateId,2,0,"row13");
			  	}
			  	
 

ok_Hash.put("tAdvancedHash_row13", true);
end_Hash.put("tAdvancedHash_row13", System.currentTimeMillis());




/**
 * [tAdvancedHash_row13 end ] stop
 */



				}//end the resume

				



	
			}catch(java.lang.Exception e){	
				
				TalendException te = new TalendException(e, currentComponent, globalMap);
				
				throw te;
			}catch(java.lang.Error error){	
				
					runStat.stopThreadStat();
				
				throw error;
			}finally{
				
				try{
					
	
	/**
	 * [tDBInput_8 finally ] start
	 */

	

	
	
	currentComponent="tDBInput_8";

	

 



/**
 * [tDBInput_8 finally ] stop
 */

	
	/**
	 * [tAdvancedHash_row13 finally ] start
	 */

	

	
	
	currentComponent="tAdvancedHash_row13";

	

 



/**
 * [tAdvancedHash_row13 finally ] stop
 */



				}catch(java.lang.Exception e){	
					//ignore
				}catch(java.lang.Error error){
					//ignore
				}
				resourceMap = null;
			}
		

		globalMap.put("tDBInput_8_SUBPROCESS_STATE", 1);
	}
	
    public String resuming_logs_dir_path = null;
    public String resuming_checkpoint_path = null;
    public String parent_part_launcher = null;
    private String resumeEntryMethodName = null;
    private boolean globalResumeTicket = false;

    public boolean watch = false;
    // portStats is null, it means don't execute the statistics
    public Integer portStats = null;
    public int portTraces = 4334;
    public String clientHost;
    public String defaultClientHost = "localhost";
    public String contextStr = "Default";
    public boolean isDefaultContext = true;
    public String pid = "0";
    public String rootPid = null;
    public String fatherPid = null;
    public String fatherNode = null;
    public long startTime = 0;
    public boolean isChildJob = false;
    public String log4jLevel = "";
    
    private boolean enableLogStash;

    private boolean execStat = true;

    private ThreadLocal<java.util.Map<String, String>> threadLocal = new ThreadLocal<java.util.Map<String, String>>() {
        protected java.util.Map<String, String> initialValue() {
            java.util.Map<String,String> threadRunResultMap = new java.util.HashMap<String, String>();
            threadRunResultMap.put("errorCode", null);
            threadRunResultMap.put("status", "");
            return threadRunResultMap;
        };
    };


    protected PropertiesWithType context_param = new PropertiesWithType();
    public java.util.Map<String, Object> parentContextMap = new java.util.HashMap<String, Object>();

    public String status= "";
    

    public static void main(String[] args){
        final Gg_POA Gg_POAClass = new Gg_POA();

        int exitCode = Gg_POAClass.runJobInTOS(args);

        System.exit(exitCode);
    }


    public String[][] runJob(String[] args) {

        int exitCode = runJobInTOS(args);
        String[][] bufferValue = new String[][] { { Integer.toString(exitCode) } };

        return bufferValue;
    }

    public boolean hastBufferOutputComponent() {
		boolean hastBufferOutput = false;
    	
        return hastBufferOutput;
    }

    public int runJobInTOS(String[] args) {
	   	// reset status
	   	status = "";
	   	
        String lastStr = "";
        for (String arg : args) {
            if (arg.equalsIgnoreCase("--context_param")) {
                lastStr = arg;
            } else if (lastStr.equals("")) {
                evalParam(arg);
            } else {
                evalParam(lastStr + " " + arg);
                lastStr = "";
            }
        }
        enableLogStash = "true".equalsIgnoreCase(System.getProperty("audit.enabled"));

    	
    	

        if(clientHost == null) {
            clientHost = defaultClientHost;
        }

        if(pid == null || "0".equals(pid)) {
            pid = TalendString.getAsciiRandomString(6);
        }

        if (rootPid==null) {
            rootPid = pid;
        }
        if (fatherPid==null) {
            fatherPid = pid;
        }else{
            isChildJob = true;
        }

        if (portStats != null) {
            // portStats = -1; //for testing
            if (portStats < 0 || portStats > 65535) {
                // issue:10869, the portStats is invalid, so this client socket can't open
                System.err.println("The statistics socket port " + portStats + " is invalid.");
                execStat = false;
            }
        } else {
            execStat = false;
        }

        try {
            //call job/subjob with an existing context, like: --context=production. if without this parameter, there will use the default context instead.
            java.io.InputStream inContext = Gg_POA.class.getClassLoader().getResourceAsStream("wipo_projects/gg_poa_0_1/contexts/" + contextStr + ".properties");
            if (inContext == null) {
                inContext = Gg_POA.class.getClassLoader().getResourceAsStream("config/contexts/" + contextStr + ".properties");
            }
            if (inContext != null) {
                try {
                    //defaultProps is in order to keep the original context value
                    if(context != null && context.isEmpty()) {
	                defaultProps.load(inContext);
	                context = new ContextProperties(defaultProps);
                    }
                } finally {
                    inContext.close();
                }
            } else if (!isDefaultContext) {
                //print info and job continue to run, for case: context_param is not empty.
                System.err.println("Could not find the context " + contextStr);
            }

            if(!context_param.isEmpty()) {
                context.putAll(context_param);
				//set types for params from parentJobs
				for (Object key: context_param.keySet()){
					String context_key = key.toString();
					String context_type = context_param.getContextType(context_key);
					context.setContextType(context_key, context_type);

				}
            }
            class ContextProcessing {
                private void processContext_0() {
                        context.setContextType("ipasHost", "id_String");
                        if(context.getStringValue("ipasHost") == null) {
                            context.ipasHost = null;
                        } else {
                            context.ipasHost=(String) context.getProperty("ipasHost");
                        }
                        context.setContextType("ipasPort", "id_String");
                        if(context.getStringValue("ipasPort") == null) {
                            context.ipasPort = null;
                        } else {
                            context.ipasPort=(String) context.getProperty("ipasPort");
                        }
                        context.setContextType("ipasDB", "id_String");
                        if(context.getStringValue("ipasDB") == null) {
                            context.ipasDB = null;
                        } else {
                            context.ipasDB=(String) context.getProperty("ipasDB");
                        }
                        context.setContextType("ipasUser", "id_String");
                        if(context.getStringValue("ipasUser") == null) {
                            context.ipasUser = null;
                        } else {
                            context.ipasUser=(String) context.getProperty("ipasUser");
                        }
                        context.setContextType("ipasPassword", "id_String");
                        if(context.getStringValue("ipasPassword") == null) {
                            context.ipasPassword = null;
                        } else {
                            context.ipasPassword=(String) context.getProperty("ipasPassword");
                        }
                        context.setContextType("intermediateDB", "id_String");
                        if(context.getStringValue("intermediateDB") == null) {
                            context.intermediateDB = null;
                        } else {
                            context.intermediateDB=(String) context.getProperty("intermediateDB");
                        }
                } 
                public void processAllContext() {
                        processContext_0();
                }
            }

            new ContextProcessing().processAllContext();
        } catch (java.io.IOException ie) {
            System.err.println("Could not load context "+contextStr);
            ie.printStackTrace();
        }

        // get context value from parent directly
        if (parentContextMap != null && !parentContextMap.isEmpty()) {if (parentContextMap.containsKey("ipasHost")) {
                context.ipasHost = (String) parentContextMap.get("ipasHost");
            }if (parentContextMap.containsKey("ipasPort")) {
                context.ipasPort = (String) parentContextMap.get("ipasPort");
            }if (parentContextMap.containsKey("ipasDB")) {
                context.ipasDB = (String) parentContextMap.get("ipasDB");
            }if (parentContextMap.containsKey("ipasUser")) {
                context.ipasUser = (String) parentContextMap.get("ipasUser");
            }if (parentContextMap.containsKey("ipasPassword")) {
                context.ipasPassword = (String) parentContextMap.get("ipasPassword");
            }if (parentContextMap.containsKey("intermediateDB")) {
                context.intermediateDB = (String) parentContextMap.get("intermediateDB");
            }
        }

        //Resume: init the resumeUtil
        resumeEntryMethodName = ResumeUtil.getResumeEntryMethodName(resuming_checkpoint_path);
        resumeUtil = new ResumeUtil(resuming_logs_dir_path, isChildJob, rootPid);
        resumeUtil.initCommonInfo(pid, rootPid, fatherPid, projectName, jobName, contextStr, jobVersion);

		List<String> parametersToEncrypt = new java.util.ArrayList<String>();
        //Resume: jobStart
        resumeUtil.addLog("JOB_STARTED", "JOB:" + jobName, parent_part_launcher, Thread.currentThread().getId() + "", "","","","",resumeUtil.convertToJsonText(context,parametersToEncrypt));

if(execStat) {
    try {
        runStat.openSocket(!isChildJob);
        runStat.setAllPID(rootPid, fatherPid, pid, jobName);
        runStat.startThreadStat(clientHost, portStats);
        runStat.updateStatOnJob(RunStat.JOBSTART, fatherNode);
    } catch (java.io.IOException ioException) {
        ioException.printStackTrace();
    }
}



	
	    java.util.concurrent.ConcurrentHashMap<Object, Object> concurrentHashMap = new java.util.concurrent.ConcurrentHashMap<Object, Object>();
	    globalMap.put("concurrentHashMap", concurrentHashMap);
	

    long startUsedMemory = Runtime.getRuntime().totalMemory() - Runtime.getRuntime().freeMemory();
    long endUsedMemory = 0;
    long end = 0;

    startTime = System.currentTimeMillis();
        tStatCatcher_1.addMessage("begin");


this.globalResumeTicket = true;//to run tPreJob




        try {
            tStatCatcher_1Process(globalMap);
        } catch (java.lang.Exception e) {
            e.printStackTrace();
        }

this.globalResumeTicket = false;//to run others jobs

try {
errorCode = null;tDBConnection_2Process(globalMap);
if(!"failure".equals(status)) { status = "end"; }
}catch (TalendException e_tDBConnection_2) {
globalMap.put("tDBConnection_2_SUBPROCESS_STATE", -1);

e_tDBConnection_2.printStackTrace();

}

this.globalResumeTicket = true;//to run tPostJob




        end = System.currentTimeMillis();

        if (watch) {
            System.out.println((end-startTime)+" milliseconds");
        }

        endUsedMemory = Runtime.getRuntime().totalMemory() - Runtime.getRuntime().freeMemory();
        if (false) {
            System.out.println((endUsedMemory - startUsedMemory) + " bytes memory increase when running : Gg_POA");
        }
        tStatCatcher_1.addMessage(status==""?"end":status, (end-startTime));
        try {
            tStatCatcher_1Process(globalMap);
        } catch (java.lang.Exception e) {
            e.printStackTrace();
        }



if (execStat) {
    runStat.updateStatOnJob(RunStat.JOBEND, fatherNode);
    runStat.stopThreadStat();
}
    int returnCode = 0;


    if(errorCode == null) {
         returnCode = status != null && status.equals("failure") ? 1 : 0;
    } else {
         returnCode = errorCode.intValue();
    }
    resumeUtil.addLog("JOB_ENDED", "JOB:" + jobName, parent_part_launcher, Thread.currentThread().getId() + "", "","" + returnCode,"","","");

    return returnCode;

  }

    // only for OSGi env
    public void destroy() {
    closeSqlDbConnections();


    }



    private void closeSqlDbConnections() {
        try {
            Object obj_conn;
            obj_conn = globalMap.remove("conn_tDBConnection_2");
            if (null != obj_conn) {
                ((java.sql.Connection) obj_conn).close();
            }
            obj_conn = globalMap.remove("conn_tDBConnection_1");
            if (null != obj_conn) {
                ((java.sql.Connection) obj_conn).close();
            }
        } catch (java.lang.Exception e) {
        }
    }











    private java.util.Map<String, Object> getSharedConnections4REST() {
        java.util.Map<String, Object> connections = new java.util.HashMap<String, Object>();
            connections.put("conn_tDBConnection_2", globalMap.get("conn_tDBConnection_2"));
            connections.put("conn_tDBConnection_1", globalMap.get("conn_tDBConnection_1"));






        return connections;
    }

    private void evalParam(String arg) {
        if (arg.startsWith("--resuming_logs_dir_path")) {
            resuming_logs_dir_path = arg.substring(25);
        } else if (arg.startsWith("--resuming_checkpoint_path")) {
            resuming_checkpoint_path = arg.substring(27);
        } else if (arg.startsWith("--parent_part_launcher")) {
            parent_part_launcher = arg.substring(23);
        } else if (arg.startsWith("--watch")) {
            watch = true;
        } else if (arg.startsWith("--stat_port=")) {
            String portStatsStr = arg.substring(12);
            if (portStatsStr != null && !portStatsStr.equals("null")) {
                portStats = Integer.parseInt(portStatsStr);
            }
        } else if (arg.startsWith("--trace_port=")) {
            portTraces = Integer.parseInt(arg.substring(13));
        } else if (arg.startsWith("--client_host=")) {
            clientHost = arg.substring(14);
        } else if (arg.startsWith("--context=")) {
            contextStr = arg.substring(10);
            isDefaultContext = false;
        } else if (arg.startsWith("--father_pid=")) {
            fatherPid = arg.substring(13);
        } else if (arg.startsWith("--root_pid=")) {
            rootPid = arg.substring(11);
        } else if (arg.startsWith("--father_node=")) {
            fatherNode = arg.substring(14);
        } else if (arg.startsWith("--pid=")) {
            pid = arg.substring(6);
        } else if (arg.startsWith("--context_type")) {
            String keyValue = arg.substring(15);
			int index = -1;
            if (keyValue != null && (index = keyValue.indexOf('=')) > -1) {
                if (fatherPid==null) {
                    context_param.setContextType(keyValue.substring(0, index), replaceEscapeChars(keyValue.substring(index + 1)));
                } else { // the subjob won't escape the especial chars
                    context_param.setContextType(keyValue.substring(0, index), keyValue.substring(index + 1) );
                }

            }

		} else if (arg.startsWith("--context_param")) {
            String keyValue = arg.substring(16);
            int index = -1;
            if (keyValue != null && (index = keyValue.indexOf('=')) > -1) {
                if (fatherPid==null) {
                    context_param.put(keyValue.substring(0, index), replaceEscapeChars(keyValue.substring(index + 1)));
                } else { // the subjob won't escape the especial chars
                    context_param.put(keyValue.substring(0, index), keyValue.substring(index + 1) );
                }
            }
        } else if (arg.startsWith("--log4jLevel=")) {
            log4jLevel = arg.substring(13);
		} else if (arg.startsWith("--audit.enabled") && arg.contains("=")) {//for trunjob call
		    final int equal = arg.indexOf('=');
			final String key = arg.substring("--".length(), equal);
			System.setProperty(key, arg.substring(equal + 1));
		}
    }
    
    private static final String NULL_VALUE_EXPRESSION_IN_COMMAND_STRING_FOR_CHILD_JOB_ONLY = "<TALEND_NULL>";

    private final String[][] escapeChars = {
        {"\\\\","\\"},{"\\n","\n"},{"\\'","\'"},{"\\r","\r"},
        {"\\f","\f"},{"\\b","\b"},{"\\t","\t"}
        };
    private String replaceEscapeChars (String keyValue) {

		if (keyValue == null || ("").equals(keyValue.trim())) {
			return keyValue;
		}

		StringBuilder result = new StringBuilder();
		int currIndex = 0;
		while (currIndex < keyValue.length()) {
			int index = -1;
			// judege if the left string includes escape chars
			for (String[] strArray : escapeChars) {
				index = keyValue.indexOf(strArray[0],currIndex);
				if (index>=0) {

					result.append(keyValue.substring(currIndex, index + strArray[0].length()).replace(strArray[0], strArray[1]));
					currIndex = index + strArray[0].length();
					break;
				}
			}
			// if the left string doesn't include escape chars, append the left into the result
			if (index < 0) {
				result.append(keyValue.substring(currIndex));
				currIndex = currIndex + keyValue.length();
			}
		}

		return result.toString();
    }

    public Integer getErrorCode() {
        return errorCode;
    }


    public String getStatus() {
        return status;
    }

    ResumeUtil resumeUtil = null;
}
/************************************************************************************************
 *     480121 characters generated by Talend Open Studio for Data Integration 
 *     on the November 25, 2020 at 2:42:41 PM CET
 ************************************************************************************************/