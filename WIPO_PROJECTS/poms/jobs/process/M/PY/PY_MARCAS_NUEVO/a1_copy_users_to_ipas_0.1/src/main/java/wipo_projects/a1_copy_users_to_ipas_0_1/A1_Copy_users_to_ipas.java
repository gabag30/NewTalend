// ============================================================================
//
// Copyright (c) 2006-2015, Talend Inc.
//
// This source code has been automatically generated by_Talend Open Studio for Data Integration
// / Licensed under the Apache License, Version 2.0 (the "License");
// you may not use this file except in compliance with the License.
// You may obtain a copy of the License at
// http://www.apache.org/licenses/LICENSE-2.0
// 
// Unless required by applicable law or agreed to in writing, software
// distributed under the License is distributed on an "AS IS" BASIS,
// WITHOUT WARRANTIES OR CONDITIONS OF ANY KIND, either express or implied.
// See the License for the specific language governing permissions and
// limitations under the License.

package wipo_projects.a1_copy_users_to_ipas_0_1;

import routines.Numeric;
import routines.DataOperation;
import routines.TalendDataGenerator;
import routines.TalendStringUtil;
import routines.TalendString;
import routines.StringHandling;
import routines.Relational;
import routines.TalendDate;
import routines.Mathematical;
import routines.IPAS;
import routines.system.*;
import routines.system.api.*;
import java.text.ParseException;
import java.text.SimpleDateFormat;
import java.util.Date;
import java.util.List;
import java.math.BigDecimal;
import java.io.ByteArrayOutputStream;
import java.io.ByteArrayInputStream;
import java.io.DataInputStream;
import java.io.DataOutputStream;
import java.io.ObjectOutputStream;
import java.io.ObjectInputStream;
import java.io.IOException;
import java.util.Comparator;

@SuppressWarnings("unused")

/**
 * Job: A1_Copy_users_to_ipas Purpose: migracion marcas<br>
 * Description: <br>
 * 
 * @author user@talend.com
 * @version 7.4.1.20200916_1624-M2
 * @status
 */
public class A1_Copy_users_to_ipas implements TalendJob {

	protected static void logIgnoredError(String message, Throwable cause) {
		System.err.println(message);
		if (cause != null) {
			cause.printStackTrace();
		}

	}

	public final Object obj = new Object();

	// for transmiting parameters purpose
	private Object valueObject = null;

	public Object getValueObject() {
		return this.valueObject;
	}

	public void setValueObject(Object valueObject) {
		this.valueObject = valueObject;
	}

	private Object[] multiThreadLockWrite = new Object[0];

	private final static String defaultCharset = java.nio.charset.Charset.defaultCharset().name();

	private final static String utf8Charset = "UTF-8";

	// contains type for every context property
	public class PropertiesWithType extends java.util.Properties {
		private static final long serialVersionUID = 1L;
		private java.util.Map<String, String> propertyTypes = new java.util.HashMap<>();

		public PropertiesWithType(java.util.Properties properties) {
			super(properties);
		}

		public PropertiesWithType() {
			super();
		}

		public void setContextType(String key, String type) {
			propertyTypes.put(key, type);
		}

		public String getContextType(String key) {
			return propertyTypes.get(key);
		}
	}

	// create and load default properties
	private java.util.Properties defaultProps = new java.util.Properties();

	// create application properties with default
	public class ContextProperties extends PropertiesWithType {

		private static final long serialVersionUID = 1L;

		public ContextProperties(java.util.Properties properties) {
			super(properties);
		}

		public ContextProperties() {
			super();
		}

		public void synchronizeContext() {

			if (hostInterMed != null) {

				this.setProperty("hostInterMed", hostInterMed.toString());

			}

			if (portInterMed != null) {

				this.setProperty("portInterMed", portInterMed.toString());

			}

			if (userInterMed != null) {

				this.setProperty("userInterMed", userInterMed.toString());

			}

			if (passwordInterMed != null) {

				this.setProperty("passwordInterMed", passwordInterMed.toString());

			}

			if (databaseInterMed != null) {

				this.setProperty("databaseInterMed", databaseInterMed.toString());

			}

			if (processAll != null) {

				this.setProperty("processAll", processAll.toString());

			}

			if (postgreUser != null) {

				this.setProperty("postgreUser", postgreUser.toString());

			}

			if (postgrePassword != null) {

				this.setProperty("postgrePassword", postgrePassword.toString());

			}

			if (postgreDb != null) {

				this.setProperty("postgreDb", postgreDb.toString());

			}

		}

		// if the stored or passed value is "<TALEND_NULL>" string, it mean null
		public String getStringValue(String key) {
			String origin_value = this.getProperty(key);
			if (NULL_VALUE_EXPRESSION_IN_COMMAND_STRING_FOR_CHILD_JOB_ONLY.equals(origin_value)) {
				return null;
			}
			return origin_value;
		}

		public String hostInterMed;

		public String getHostInterMed() {
			return this.hostInterMed;
		}

		public String portInterMed;

		public String getPortInterMed() {
			return this.portInterMed;
		}

		public String userInterMed;

		public String getUserInterMed() {
			return this.userInterMed;
		}

		public String passwordInterMed;

		public String getPasswordInterMed() {
			return this.passwordInterMed;
		}

		public String databaseInterMed;

		public String getDatabaseInterMed() {
			return this.databaseInterMed;
		}

		public String processAll;

		public String getProcessAll() {
			return this.processAll;
		}

		public String postgreUser;

		public String getPostgreUser() {
			return this.postgreUser;
		}

		public String postgrePassword;

		public String getPostgrePassword() {
			return this.postgrePassword;
		}

		public String postgreDb;

		public String getPostgreDb() {
			return this.postgreDb;
		}
	}

	protected ContextProperties context = new ContextProperties(); // will be instanciated by MS.

	public ContextProperties getContext() {
		return this.context;
	}

	private final String jobVersion = "0.1";
	private final String jobName = "A1_Copy_users_to_ipas";
	private final String projectName = "WIPO_PROJECTS";
	public Integer errorCode = null;
	private String currentComponent = "";

	private final java.util.Map<String, Object> globalMap = java.util.Collections
			.synchronizedMap(new java.util.HashMap<String, Object>());

	private final java.util.Map<String, Long> start_Hash = java.util.Collections
			.synchronizedMap(new java.util.HashMap<String, Long>());
	private final java.util.Map<String, Long> end_Hash = java.util.Collections
			.synchronizedMap(new java.util.HashMap<String, Long>());
	private final java.util.Map<String, Boolean> ok_Hash = java.util.Collections
			.synchronizedMap(new java.util.HashMap<String, Boolean>());
	public final java.util.List<String[]> globalBuffer = java.util.Collections
			.synchronizedList(new java.util.ArrayList<String[]>());

	private RunStat runStat = new RunStat();

	// OSGi DataSource
	private final static String KEY_DB_DATASOURCES = "KEY_DB_DATASOURCES";

	private final static String KEY_DB_DATASOURCES_RAW = "KEY_DB_DATASOURCES_RAW";

	public void setDataSources(java.util.Map<String, javax.sql.DataSource> dataSources) {
		java.util.Map<String, routines.system.TalendDataSource> talendDataSources = new java.util.HashMap<String, routines.system.TalendDataSource>();
		for (java.util.Map.Entry<String, javax.sql.DataSource> dataSourceEntry : dataSources.entrySet()) {
			talendDataSources.put(dataSourceEntry.getKey(),
					new routines.system.TalendDataSource(dataSourceEntry.getValue()));
		}
		globalMap.put(KEY_DB_DATASOURCES, talendDataSources);
		globalMap.put(KEY_DB_DATASOURCES_RAW, new java.util.HashMap<String, javax.sql.DataSource>(dataSources));
	}

	StatCatcherUtils tStatCatcher_1 = new StatCatcherUtils("_XU_8wA_BEeujsKtDo8QJjQ", "0.1");

	private final java.io.ByteArrayOutputStream baos = new java.io.ByteArrayOutputStream();
	private final java.io.PrintStream errorMessagePS = new java.io.PrintStream(new java.io.BufferedOutputStream(baos));

	public String getExceptionStackTrace() {
		if ("failure".equals(this.getStatus())) {
			errorMessagePS.flush();
			return baos.toString();
		}
		return null;
	}

	private Exception exception;

	public Exception getException() {
		if ("failure".equals(this.getStatus())) {
			return this.exception;
		}
		return null;
	}

	private class TalendException extends Exception {

		private static final long serialVersionUID = 1L;

		private java.util.Map<String, Object> globalMap = null;
		private Exception e = null;
		private String currentComponent = null;
		private String virtualComponentName = null;

		public void setVirtualComponentName(String virtualComponentName) {
			this.virtualComponentName = virtualComponentName;
		}

		private TalendException(Exception e, String errorComponent, final java.util.Map<String, Object> globalMap) {
			this.currentComponent = errorComponent;
			this.globalMap = globalMap;
			this.e = e;
		}

		public Exception getException() {
			return this.e;
		}

		public String getCurrentComponent() {
			return this.currentComponent;
		}

		public String getExceptionCauseMessage(Exception e) {
			Throwable cause = e;
			String message = null;
			int i = 10;
			while (null != cause && 0 < i--) {
				message = cause.getMessage();
				if (null == message) {
					cause = cause.getCause();
				} else {
					break;
				}
			}
			if (null == message) {
				message = e.getClass().getName();
			}
			return message;
		}

		@Override
		public void printStackTrace() {
			if (!(e instanceof TalendException || e instanceof TDieException)) {
				if (virtualComponentName != null && currentComponent.indexOf(virtualComponentName + "_") == 0) {
					globalMap.put(virtualComponentName + "_ERROR_MESSAGE", getExceptionCauseMessage(e));
				}
				globalMap.put(currentComponent + "_ERROR_MESSAGE", getExceptionCauseMessage(e));
				System.err.println("Exception in component " + currentComponent + " (" + jobName + ")");
			}
			if (!(e instanceof TDieException)) {
				if (e instanceof TalendException) {
					e.printStackTrace();
				} else {
					e.printStackTrace();
					e.printStackTrace(errorMessagePS);
					A1_Copy_users_to_ipas.this.exception = e;
				}
			}
			if (!(e instanceof TalendException)) {
				try {
					for (java.lang.reflect.Method m : this.getClass().getEnclosingClass().getMethods()) {
						if (m.getName().compareTo(currentComponent + "_error") == 0) {
							m.invoke(A1_Copy_users_to_ipas.this, new Object[] { e, currentComponent, globalMap });
							break;
						}
					}

					if (!(e instanceof TDieException)) {
					}
				} catch (Exception e) {
					this.e.printStackTrace();
				}
			}
		}
	}

	public void tDBConnection_3_error(Exception exception, String errorComponent,
			final java.util.Map<String, Object> globalMap) throws TalendException {

		end_Hash.put(errorComponent, System.currentTimeMillis());

		tStatCatcher_1.addMessage("failure", errorComponent,
				end_Hash.get(errorComponent) - start_Hash.get(errorComponent));
		tStatCatcher_1Process(globalMap);

		((java.util.Map) threadLocal.get()).put("status", "failure");

		tDBConnection_3_onSubJobError(exception, errorComponent, globalMap);
	}

	public void tDBConnection_2_error(Exception exception, String errorComponent,
			final java.util.Map<String, Object> globalMap) throws TalendException {

		end_Hash.put(errorComponent, System.currentTimeMillis());

		((java.util.Map) threadLocal.get()).put("status", "failure");

		tDBConnection_2_onSubJobError(exception, errorComponent, globalMap);
	}

	public void tDBInput_1_error(Exception exception, String errorComponent,
			final java.util.Map<String, Object> globalMap) throws TalendException {

		end_Hash.put(errorComponent, System.currentTimeMillis());

		((java.util.Map) threadLocal.get()).put("status", "failure");

		tDBInput_1_onSubJobError(exception, errorComponent, globalMap);
	}

	public void tMap_1_error(Exception exception, String errorComponent, final java.util.Map<String, Object> globalMap)
			throws TalendException {

		end_Hash.put(errorComponent, System.currentTimeMillis());

		((java.util.Map) threadLocal.get()).put("status", "failure");

		tDBInput_1_onSubJobError(exception, errorComponent, globalMap);
	}

	public void tDBOutput_2_error(Exception exception, String errorComponent,
			final java.util.Map<String, Object> globalMap) throws TalendException {

		end_Hash.put(errorComponent, System.currentTimeMillis());

		((java.util.Map) threadLocal.get()).put("status", "failure");

		tDBInput_1_onSubJobError(exception, errorComponent, globalMap);
	}

	public void tDBOutput_1_error(Exception exception, String errorComponent,
			final java.util.Map<String, Object> globalMap) throws TalendException {

		end_Hash.put(errorComponent, System.currentTimeMillis());

		((java.util.Map) threadLocal.get()).put("status", "failure");

		tDBInput_1_onSubJobError(exception, errorComponent, globalMap);
	}

	public void tDBOutput_3_error(Exception exception, String errorComponent,
			final java.util.Map<String, Object> globalMap) throws TalendException {

		end_Hash.put(errorComponent, System.currentTimeMillis());

		((java.util.Map) threadLocal.get()).put("status", "failure");

		tDBInput_1_onSubJobError(exception, errorComponent, globalMap);
	}

	public void tDBInput_9_error(Exception exception, String errorComponent,
			final java.util.Map<String, Object> globalMap) throws TalendException {

		end_Hash.put(errorComponent, System.currentTimeMillis());

		((java.util.Map) threadLocal.get()).put("status", "failure");

		tDBInput_9_onSubJobError(exception, errorComponent, globalMap);
	}

	public void tMap_4_error(Exception exception, String errorComponent, final java.util.Map<String, Object> globalMap)
			throws TalendException {

		end_Hash.put(errorComponent, System.currentTimeMillis());

		((java.util.Map) threadLocal.get()).put("status", "failure");

		tDBInput_9_onSubJobError(exception, errorComponent, globalMap);
	}

	public void tDBOutput_5_error(Exception exception, String errorComponent,
			final java.util.Map<String, Object> globalMap) throws TalendException {

		end_Hash.put(errorComponent, System.currentTimeMillis());

		((java.util.Map) threadLocal.get()).put("status", "failure");

		tDBInput_9_onSubJobError(exception, errorComponent, globalMap);
	}

	public void tLogRow_5_error(Exception exception, String errorComponent,
			final java.util.Map<String, Object> globalMap) throws TalendException {

		end_Hash.put(errorComponent, System.currentTimeMillis());

		((java.util.Map) threadLocal.get()).put("status", "failure");

		tDBInput_9_onSubJobError(exception, errorComponent, globalMap);
	}

	public void tDBInput_6_error(Exception exception, String errorComponent,
			final java.util.Map<String, Object> globalMap) throws TalendException {

		end_Hash.put(errorComponent, System.currentTimeMillis());

		((java.util.Map) threadLocal.get()).put("status", "failure");

		tDBInput_9_onSubJobError(exception, errorComponent, globalMap);
	}

	public void tStatCatcher_1_error(Exception exception, String errorComponent,
			final java.util.Map<String, Object> globalMap) throws TalendException {

		end_Hash.put(errorComponent, System.currentTimeMillis());

		((java.util.Map) threadLocal.get()).put("status", "failure");

		tStatCatcher_1_onSubJobError(exception, errorComponent, globalMap);
	}

	public void tLogRow_13_error(Exception exception, String errorComponent,
			final java.util.Map<String, Object> globalMap) throws TalendException {

		end_Hash.put(errorComponent, System.currentTimeMillis());

		((java.util.Map) threadLocal.get()).put("status", "failure");

		tStatCatcher_1_onSubJobError(exception, errorComponent, globalMap);
	}

	public void tAdvancedHash_row12_error(Exception exception, String errorComponent,
			final java.util.Map<String, Object> globalMap) throws TalendException {

		end_Hash.put(errorComponent, System.currentTimeMillis());

		((java.util.Map) threadLocal.get()).put("status", "failure");

		tDBInput_9_onSubJobError(exception, errorComponent, globalMap);
	}

	public void tDBConnection_3_onSubJobError(Exception exception, String errorComponent,
			final java.util.Map<String, Object> globalMap) throws TalendException {

		resumeUtil.addLog("SYSTEM_LOG", "NODE:" + errorComponent, "", Thread.currentThread().getId() + "", "FATAL", "",
				exception.getMessage(), ResumeUtil.getExceptionStackTrace(exception), "");

	}

	public void tDBConnection_2_onSubJobError(Exception exception, String errorComponent,
			final java.util.Map<String, Object> globalMap) throws TalendException {

		resumeUtil.addLog("SYSTEM_LOG", "NODE:" + errorComponent, "", Thread.currentThread().getId() + "", "FATAL", "",
				exception.getMessage(), ResumeUtil.getExceptionStackTrace(exception), "");

	}

	public void tDBInput_1_onSubJobError(Exception exception, String errorComponent,
			final java.util.Map<String, Object> globalMap) throws TalendException {

		resumeUtil.addLog("SYSTEM_LOG", "NODE:" + errorComponent, "", Thread.currentThread().getId() + "", "FATAL", "",
				exception.getMessage(), ResumeUtil.getExceptionStackTrace(exception), "");

	}

	public void tDBInput_9_onSubJobError(Exception exception, String errorComponent,
			final java.util.Map<String, Object> globalMap) throws TalendException {

		resumeUtil.addLog("SYSTEM_LOG", "NODE:" + errorComponent, "", Thread.currentThread().getId() + "", "FATAL", "",
				exception.getMessage(), ResumeUtil.getExceptionStackTrace(exception), "");

	}

	public void tStatCatcher_1_onSubJobError(Exception exception, String errorComponent,
			final java.util.Map<String, Object> globalMap) throws TalendException {

		resumeUtil.addLog("SYSTEM_LOG", "NODE:" + errorComponent, "", Thread.currentThread().getId() + "", "FATAL", "",
				exception.getMessage(), ResumeUtil.getExceptionStackTrace(exception), "");

	}

	public void tDBConnection_3Process(final java.util.Map<String, Object> globalMap) throws TalendException {
		globalMap.put("tDBConnection_3_SUBPROCESS_STATE", 0);

		final boolean execStat = this.execStat;

		String iterateId = "";

		String currentComponent = "";
		java.util.Map<String, Object> resourceMap = new java.util.HashMap<String, Object>();

		try {
			// TDI-39566 avoid throwing an useless Exception
			boolean resumeIt = true;
			if (globalResumeTicket == false && resumeEntryMethodName != null) {
				String currentMethodName = new java.lang.Exception().getStackTrace()[0].getMethodName();
				resumeIt = resumeEntryMethodName.equals(currentMethodName);
			}
			if (resumeIt || globalResumeTicket) { // start the resume
				globalResumeTicket = true;

				/**
				 * [tDBConnection_3 begin ] start
				 */

				ok_Hash.put("tDBConnection_3", false);
				start_Hash.put("tDBConnection_3", System.currentTimeMillis());

				tStatCatcher_1.addMessage("begin", "tDBConnection_3");
				tStatCatcher_1Process(globalMap);

				currentComponent = "tDBConnection_3";

				int tos_count_tDBConnection_3 = 0;

				String url_tDBConnection_3 = "jdbc:jtds:sqlserver://" + "localhost";
				String port_tDBConnection_3 = "1433";
				String dbname_tDBConnection_3 = "MARCAS_PY";
				if (!"".equals(port_tDBConnection_3)) {
					url_tDBConnection_3 += ":" + "1433";
				}
				if (!"".equals(dbname_tDBConnection_3)) {

					url_tDBConnection_3 += "//" + "MARCAS_PY";
				}

				url_tDBConnection_3 += ";appName=" + projectName + ";" + "";
				String dbUser_tDBConnection_3 = "ADMIN";

				final String decryptedPassword_tDBConnection_3 = routines.system.PasswordEncryptUtil
						.decryptPassword("enc:routine.encryption.key.v1:b9UfXas6g7B6ZTsMalaa9JHFa0VJJOwe5gI9kMk5TwU8");
				String dbPwd_tDBConnection_3 = decryptedPassword_tDBConnection_3;

				java.sql.Connection conn_tDBConnection_3 = null;

				String driverClass_tDBConnection_3 = "net.sourceforge.jtds.jdbc.Driver";
				java.lang.Class jdbcclazz_tDBConnection_3 = java.lang.Class.forName(driverClass_tDBConnection_3);
				globalMap.put("driverClass_tDBConnection_3", driverClass_tDBConnection_3);

				conn_tDBConnection_3 = java.sql.DriverManager.getConnection(url_tDBConnection_3, dbUser_tDBConnection_3,
						dbPwd_tDBConnection_3);

				globalMap.put("conn_tDBConnection_3", conn_tDBConnection_3);
				if (null != conn_tDBConnection_3) {

					conn_tDBConnection_3.setAutoCommit(true);
				}

				globalMap.put("dbschema_tDBConnection_3", "ADMIN");

				globalMap.put("db_tDBConnection_3", "MARCAS_PY");

				globalMap.put("shareIdentitySetting_tDBConnection_3", false);

				globalMap.put("driver_tDBConnection_3", "JTDS");

				/**
				 * [tDBConnection_3 begin ] stop
				 */

				/**
				 * [tDBConnection_3 main ] start
				 */

				currentComponent = "tDBConnection_3";

				tos_count_tDBConnection_3++;

				/**
				 * [tDBConnection_3 main ] stop
				 */

				/**
				 * [tDBConnection_3 process_data_begin ] start
				 */

				currentComponent = "tDBConnection_3";

				/**
				 * [tDBConnection_3 process_data_begin ] stop
				 */

				/**
				 * [tDBConnection_3 process_data_end ] start
				 */

				currentComponent = "tDBConnection_3";

				/**
				 * [tDBConnection_3 process_data_end ] stop
				 */

				/**
				 * [tDBConnection_3 end ] start
				 */

				currentComponent = "tDBConnection_3";

				ok_Hash.put("tDBConnection_3", true);
				end_Hash.put("tDBConnection_3", System.currentTimeMillis());

				tStatCatcher_1.addMessage("end", "tDBConnection_3",
						end_Hash.get("tDBConnection_3") - start_Hash.get("tDBConnection_3"));
				tStatCatcher_1Process(globalMap);

				/**
				 * [tDBConnection_3 end ] stop
				 */
			} // end the resume

			if (resumeEntryMethodName == null || globalResumeTicket) {
				resumeUtil.addLog("CHECKPOINT", "CONNECTION:SUBJOB_OK:tDBConnection_3:OnSubjobOk", "",
						Thread.currentThread().getId() + "", "", "", "", "", "");
			}

			if (execStat) {
				runStat.updateStatOnConnection("OnSubjobOk11", 0, "ok");
			}

			tDBConnection_2Process(globalMap);

		} catch (java.lang.Exception e) {

			TalendException te = new TalendException(e, currentComponent, globalMap);

			throw te;
		} catch (java.lang.Error error) {

			runStat.stopThreadStat();

			throw error;
		} finally {

			try {

				/**
				 * [tDBConnection_3 finally ] start
				 */

				currentComponent = "tDBConnection_3";

				/**
				 * [tDBConnection_3 finally ] stop
				 */
			} catch (java.lang.Exception e) {
				// ignore
			} catch (java.lang.Error error) {
				// ignore
			}
			resourceMap = null;
		}

		globalMap.put("tDBConnection_3_SUBPROCESS_STATE", 1);
	}

	public void tDBConnection_2Process(final java.util.Map<String, Object> globalMap) throws TalendException {
		globalMap.put("tDBConnection_2_SUBPROCESS_STATE", 0);

		final boolean execStat = this.execStat;

		String iterateId = "";

		String currentComponent = "";
		java.util.Map<String, Object> resourceMap = new java.util.HashMap<String, Object>();

		try {
			// TDI-39566 avoid throwing an useless Exception
			boolean resumeIt = true;
			if (globalResumeTicket == false && resumeEntryMethodName != null) {
				String currentMethodName = new java.lang.Exception().getStackTrace()[0].getMethodName();
				resumeIt = resumeEntryMethodName.equals(currentMethodName);
			}
			if (resumeIt || globalResumeTicket) { // start the resume
				globalResumeTicket = true;

				/**
				 * [tDBConnection_2 begin ] start
				 */

				ok_Hash.put("tDBConnection_2", false);
				start_Hash.put("tDBConnection_2", System.currentTimeMillis());

				currentComponent = "tDBConnection_2";

				int tos_count_tDBConnection_2 = 0;

				String dbProperties_tDBConnection_2 = "";
				String url_tDBConnection_2 = "jdbc:postgresql://" + "localhost" + ":" + "5432" + "/" + "Paraguay";

				if (dbProperties_tDBConnection_2 != null && !"".equals(dbProperties_tDBConnection_2.trim())) {
					url_tDBConnection_2 = url_tDBConnection_2 + "?" + dbProperties_tDBConnection_2;
				}
				String dbUser_tDBConnection_2 = "postgres";

				final String decryptedPassword_tDBConnection_2 = routines.system.PasswordEncryptUtil.decryptPassword(
						"enc:routine.encryption.key.v1:hiBeKSrw1BCzDPptal/O87g6ROk4JAbqEDFyPqMcGgqEWOgK");
				String dbPwd_tDBConnection_2 = decryptedPassword_tDBConnection_2;

				java.sql.Connection conn_tDBConnection_2 = null;

				java.util.Enumeration<java.sql.Driver> drivers_tDBConnection_2 = java.sql.DriverManager.getDrivers();
				java.util.Set<String> redShiftDriverNames_tDBConnection_2 = new java.util.HashSet<String>(
						java.util.Arrays.asList("com.amazon.redshift.jdbc.Driver", "com.amazon.redshift.jdbc41.Driver",
								"com.amazon.redshift.jdbc42.Driver"));
				while (drivers_tDBConnection_2.hasMoreElements()) {
					java.sql.Driver d_tDBConnection_2 = drivers_tDBConnection_2.nextElement();
					if (redShiftDriverNames_tDBConnection_2.contains(d_tDBConnection_2.getClass().getName())) {
						try {
							java.sql.DriverManager.deregisterDriver(d_tDBConnection_2);
							java.sql.DriverManager.registerDriver(d_tDBConnection_2);
						} catch (java.lang.Exception e_tDBConnection_2) {
							// do nothing
						}
					}
				}
				String driverClass_tDBConnection_2 = "org.postgresql.Driver";
				java.lang.Class jdbcclazz_tDBConnection_2 = java.lang.Class.forName(driverClass_tDBConnection_2);
				globalMap.put("driverClass_tDBConnection_2", driverClass_tDBConnection_2);

				conn_tDBConnection_2 = java.sql.DriverManager.getConnection(url_tDBConnection_2, dbUser_tDBConnection_2,
						dbPwd_tDBConnection_2);

				globalMap.put("conn_tDBConnection_2", conn_tDBConnection_2);
				if (null != conn_tDBConnection_2) {

					conn_tDBConnection_2.setAutoCommit(false);
				}

				globalMap.put("schema_" + "tDBConnection_2", "public");

				/**
				 * [tDBConnection_2 begin ] stop
				 */

				/**
				 * [tDBConnection_2 main ] start
				 */

				currentComponent = "tDBConnection_2";

				tos_count_tDBConnection_2++;

				/**
				 * [tDBConnection_2 main ] stop
				 */

				/**
				 * [tDBConnection_2 process_data_begin ] start
				 */

				currentComponent = "tDBConnection_2";

				/**
				 * [tDBConnection_2 process_data_begin ] stop
				 */

				/**
				 * [tDBConnection_2 process_data_end ] start
				 */

				currentComponent = "tDBConnection_2";

				/**
				 * [tDBConnection_2 process_data_end ] stop
				 */

				/**
				 * [tDBConnection_2 end ] start
				 */

				currentComponent = "tDBConnection_2";

				ok_Hash.put("tDBConnection_2", true);
				end_Hash.put("tDBConnection_2", System.currentTimeMillis());

				/**
				 * [tDBConnection_2 end ] stop
				 */
			} // end the resume

			if (resumeEntryMethodName == null || globalResumeTicket) {
				resumeUtil.addLog("CHECKPOINT", "CONNECTION:SUBJOB_OK:tDBConnection_2:OnSubjobOk", "",
						Thread.currentThread().getId() + "", "", "", "", "", "");
			}

			if (execStat) {
				runStat.updateStatOnConnection("OnSubjobOk1", 0, "ok");
			}

			tDBInput_1Process(globalMap);

		} catch (java.lang.Exception e) {

			TalendException te = new TalendException(e, currentComponent, globalMap);

			throw te;
		} catch (java.lang.Error error) {

			runStat.stopThreadStat();

			throw error;
		} finally {

			try {

				/**
				 * [tDBConnection_2 finally ] start
				 */

				currentComponent = "tDBConnection_2";

				/**
				 * [tDBConnection_2 finally ] stop
				 */
			} catch (java.lang.Exception e) {
				// ignore
			} catch (java.lang.Error error) {
				// ignore
			}
			resourceMap = null;
		}

		globalMap.put("tDBConnection_2_SUBPROCESS_STATE", 1);
	}

	public static class set_divisionStruct implements routines.system.IPersistableRow<set_divisionStruct> {
		final static byte[] commonByteArrayLock_WIPO_PROJECTS_A1_Copy_users_to_ipas = new byte[0];
		static byte[] commonByteArray_WIPO_PROJECTS_A1_Copy_users_to_ipas = new byte[0];
		protected static final int DEFAULT_HASHCODE = 1;
		protected static final int PRIME = 31;
		protected int hashCode = DEFAULT_HASHCODE;
		public boolean hashCodeDirty = true;

		public String loopKey;

		public BigDecimal ROW_VERSION;

		public BigDecimal getROW_VERSION() {
			return this.ROW_VERSION;
		}

		public String OFFICE_DIVISION_CODE;

		public String getOFFICE_DIVISION_CODE() {
			return this.OFFICE_DIVISION_CODE;
		}

		public String OFFICE_DIVISION_NAME;

		public String getOFFICE_DIVISION_NAME() {
			return this.OFFICE_DIVISION_NAME;
		}

		public BigDecimal SIGNATURE_USER_ID;

		public BigDecimal getSIGNATURE_USER_ID() {
			return this.SIGNATURE_USER_ID;
		}

		public String XML_DESIGNER;

		public String getXML_DESIGNER() {
			return this.XML_DESIGNER;
		}

		public BigDecimal SIGNATURE_GROUP_ID;

		public BigDecimal getSIGNATURE_GROUP_ID() {
			return this.SIGNATURE_GROUP_ID;
		}

		public BigDecimal SECRECY_GROUP_ID;

		public BigDecimal getSECRECY_GROUP_ID() {
			return this.SECRECY_GROUP_ID;
		}

		public java.util.Date CREATION_DATE;

		public java.util.Date getCREATION_DATE() {
			return this.CREATION_DATE;
		}

		public BigDecimal CREATION_USER_ID;

		public BigDecimal getCREATION_USER_ID() {
			return this.CREATION_USER_ID;
		}

		public java.util.Date LAST_UPDATE_DATE;

		public java.util.Date getLAST_UPDATE_DATE() {
			return this.LAST_UPDATE_DATE;
		}

		public BigDecimal LAST_UPDATE_USER_ID;

		public BigDecimal getLAST_UPDATE_USER_ID() {
			return this.LAST_UPDATE_USER_ID;
		}

		public String DESCRIPTION;

		public String getDESCRIPTION() {
			return this.DESCRIPTION;
		}

		public BigDecimal SIGNATURE_USER_ID_SECONDARY;

		public BigDecimal getSIGNATURE_USER_ID_SECONDARY() {
			return this.SIGNATURE_USER_ID_SECONDARY;
		}

		@Override
		public int hashCode() {
			if (this.hashCodeDirty) {
				final int prime = PRIME;
				int result = DEFAULT_HASHCODE;

				result = prime * result
						+ ((this.OFFICE_DIVISION_CODE == null) ? 0 : this.OFFICE_DIVISION_CODE.hashCode());

				this.hashCode = result;
				this.hashCodeDirty = false;
			}
			return this.hashCode;
		}

		@Override
		public boolean equals(Object obj) {
			if (this == obj)
				return true;
			if (obj == null)
				return false;
			if (getClass() != obj.getClass())
				return false;
			final set_divisionStruct other = (set_divisionStruct) obj;

			if (this.OFFICE_DIVISION_CODE == null) {
				if (other.OFFICE_DIVISION_CODE != null)
					return false;

			} else if (!this.OFFICE_DIVISION_CODE.equals(other.OFFICE_DIVISION_CODE))

				return false;

			return true;
		}

		public void copyDataTo(set_divisionStruct other) {

			other.ROW_VERSION = this.ROW_VERSION;
			other.OFFICE_DIVISION_CODE = this.OFFICE_DIVISION_CODE;
			other.OFFICE_DIVISION_NAME = this.OFFICE_DIVISION_NAME;
			other.SIGNATURE_USER_ID = this.SIGNATURE_USER_ID;
			other.XML_DESIGNER = this.XML_DESIGNER;
			other.SIGNATURE_GROUP_ID = this.SIGNATURE_GROUP_ID;
			other.SECRECY_GROUP_ID = this.SECRECY_GROUP_ID;
			other.CREATION_DATE = this.CREATION_DATE;
			other.CREATION_USER_ID = this.CREATION_USER_ID;
			other.LAST_UPDATE_DATE = this.LAST_UPDATE_DATE;
			other.LAST_UPDATE_USER_ID = this.LAST_UPDATE_USER_ID;
			other.DESCRIPTION = this.DESCRIPTION;
			other.SIGNATURE_USER_ID_SECONDARY = this.SIGNATURE_USER_ID_SECONDARY;

		}

		public void copyKeysDataTo(set_divisionStruct other) {

			other.OFFICE_DIVISION_CODE = this.OFFICE_DIVISION_CODE;

		}

		private String readString(ObjectInputStream dis) throws IOException {
			String strReturn = null;
			int length = 0;
			length = dis.readInt();
			if (length == -1) {
				strReturn = null;
			} else {
				if (length > commonByteArray_WIPO_PROJECTS_A1_Copy_users_to_ipas.length) {
					if (length < 1024 && commonByteArray_WIPO_PROJECTS_A1_Copy_users_to_ipas.length == 0) {
						commonByteArray_WIPO_PROJECTS_A1_Copy_users_to_ipas = new byte[1024];
					} else {
						commonByteArray_WIPO_PROJECTS_A1_Copy_users_to_ipas = new byte[2 * length];
					}
				}
				dis.readFully(commonByteArray_WIPO_PROJECTS_A1_Copy_users_to_ipas, 0, length);
				strReturn = new String(commonByteArray_WIPO_PROJECTS_A1_Copy_users_to_ipas, 0, length, utf8Charset);
			}
			return strReturn;
		}

		private void writeString(String str, ObjectOutputStream dos) throws IOException {
			if (str == null) {
				dos.writeInt(-1);
			} else {
				byte[] byteArray = str.getBytes(utf8Charset);
				dos.writeInt(byteArray.length);
				dos.write(byteArray);
			}
		}

		private java.util.Date readDate(ObjectInputStream dis) throws IOException {
			java.util.Date dateReturn = null;
			int length = 0;
			length = dis.readByte();
			if (length == -1) {
				dateReturn = null;
			} else {
				dateReturn = new Date(dis.readLong());
			}
			return dateReturn;
		}

		private void writeDate(java.util.Date date1, ObjectOutputStream dos) throws IOException {
			if (date1 == null) {
				dos.writeByte(-1);
			} else {
				dos.writeByte(0);
				dos.writeLong(date1.getTime());
			}
		}

		public void readData(ObjectInputStream dis) {

			synchronized (commonByteArrayLock_WIPO_PROJECTS_A1_Copy_users_to_ipas) {

				try {

					int length = 0;

					this.ROW_VERSION = (BigDecimal) dis.readObject();

					this.OFFICE_DIVISION_CODE = readString(dis);

					this.OFFICE_DIVISION_NAME = readString(dis);

					this.SIGNATURE_USER_ID = (BigDecimal) dis.readObject();

					this.XML_DESIGNER = readString(dis);

					this.SIGNATURE_GROUP_ID = (BigDecimal) dis.readObject();

					this.SECRECY_GROUP_ID = (BigDecimal) dis.readObject();

					this.CREATION_DATE = readDate(dis);

					this.CREATION_USER_ID = (BigDecimal) dis.readObject();

					this.LAST_UPDATE_DATE = readDate(dis);

					this.LAST_UPDATE_USER_ID = (BigDecimal) dis.readObject();

					this.DESCRIPTION = readString(dis);

					this.SIGNATURE_USER_ID_SECONDARY = (BigDecimal) dis.readObject();

				} catch (IOException e) {
					throw new RuntimeException(e);

				} catch (ClassNotFoundException eCNFE) {
					throw new RuntimeException(eCNFE);

				}

			}

		}

		public void writeData(ObjectOutputStream dos) {
			try {

				// BigDecimal

				dos.writeObject(this.ROW_VERSION);

				// String

				writeString(this.OFFICE_DIVISION_CODE, dos);

				// String

				writeString(this.OFFICE_DIVISION_NAME, dos);

				// BigDecimal

				dos.writeObject(this.SIGNATURE_USER_ID);

				// String

				writeString(this.XML_DESIGNER, dos);

				// BigDecimal

				dos.writeObject(this.SIGNATURE_GROUP_ID);

				// BigDecimal

				dos.writeObject(this.SECRECY_GROUP_ID);

				// java.util.Date

				writeDate(this.CREATION_DATE, dos);

				// BigDecimal

				dos.writeObject(this.CREATION_USER_ID);

				// java.util.Date

				writeDate(this.LAST_UPDATE_DATE, dos);

				// BigDecimal

				dos.writeObject(this.LAST_UPDATE_USER_ID);

				// String

				writeString(this.DESCRIPTION, dos);

				// BigDecimal

				dos.writeObject(this.SIGNATURE_USER_ID_SECONDARY);

			} catch (IOException e) {
				throw new RuntimeException(e);
			}

		}

		public String toString() {

			StringBuilder sb = new StringBuilder();
			sb.append(super.toString());
			sb.append("[");
			sb.append("ROW_VERSION=" + String.valueOf(ROW_VERSION));
			sb.append(",OFFICE_DIVISION_CODE=" + OFFICE_DIVISION_CODE);
			sb.append(",OFFICE_DIVISION_NAME=" + OFFICE_DIVISION_NAME);
			sb.append(",SIGNATURE_USER_ID=" + String.valueOf(SIGNATURE_USER_ID));
			sb.append(",XML_DESIGNER=" + XML_DESIGNER);
			sb.append(",SIGNATURE_GROUP_ID=" + String.valueOf(SIGNATURE_GROUP_ID));
			sb.append(",SECRECY_GROUP_ID=" + String.valueOf(SECRECY_GROUP_ID));
			sb.append(",CREATION_DATE=" + String.valueOf(CREATION_DATE));
			sb.append(",CREATION_USER_ID=" + String.valueOf(CREATION_USER_ID));
			sb.append(",LAST_UPDATE_DATE=" + String.valueOf(LAST_UPDATE_DATE));
			sb.append(",LAST_UPDATE_USER_ID=" + String.valueOf(LAST_UPDATE_USER_ID));
			sb.append(",DESCRIPTION=" + DESCRIPTION);
			sb.append(",SIGNATURE_USER_ID_SECONDARY=" + String.valueOf(SIGNATURE_USER_ID_SECONDARY));
			sb.append("]");

			return sb.toString();
		}

		/**
		 * Compare keys
		 */
		public int compareTo(set_divisionStruct other) {

			int returnValue = -1;

			returnValue = checkNullsAndCompare(this.OFFICE_DIVISION_CODE, other.OFFICE_DIVISION_CODE);
			if (returnValue != 0) {
				return returnValue;
			}

			return returnValue;
		}

		private int checkNullsAndCompare(Object object1, Object object2) {
			int returnValue = 0;
			if (object1 instanceof Comparable && object2 instanceof Comparable) {
				returnValue = ((Comparable) object1).compareTo(object2);
			} else if (object1 != null && object2 != null) {
				returnValue = compareStrings(object1.toString(), object2.toString());
			} else if (object1 == null && object2 != null) {
				returnValue = 1;
			} else if (object1 != null && object2 == null) {
				returnValue = -1;
			} else {
				returnValue = 0;
			}

			return returnValue;
		}

		private int compareStrings(String string1, String string2) {
			return string1.compareTo(string2);
		}

	}

	public static class set_departamentStruct implements routines.system.IPersistableRow<set_departamentStruct> {
		final static byte[] commonByteArrayLock_WIPO_PROJECTS_A1_Copy_users_to_ipas = new byte[0];
		static byte[] commonByteArray_WIPO_PROJECTS_A1_Copy_users_to_ipas = new byte[0];
		protected static final int DEFAULT_HASHCODE = 1;
		protected static final int PRIME = 31;
		protected int hashCode = DEFAULT_HASHCODE;
		public boolean hashCodeDirty = true;

		public String loopKey;

		public BigDecimal ROW_VERSION;

		public BigDecimal getROW_VERSION() {
			return this.ROW_VERSION;
		}

		public String OFFICE_DIVISION_CODE;

		public String getOFFICE_DIVISION_CODE() {
			return this.OFFICE_DIVISION_CODE;
		}

		public String OFFICE_DEPARTMENT_CODE;

		public String getOFFICE_DEPARTMENT_CODE() {
			return this.OFFICE_DEPARTMENT_CODE;
		}

		public String OFFICE_DEPARTMENT_NAME;

		public String getOFFICE_DEPARTMENT_NAME() {
			return this.OFFICE_DEPARTMENT_NAME;
		}

		public BigDecimal SIGNATURE_USER_ID;

		public BigDecimal getSIGNATURE_USER_ID() {
			return this.SIGNATURE_USER_ID;
		}

		public String XML_DESIGNER;

		public String getXML_DESIGNER() {
			return this.XML_DESIGNER;
		}

		public BigDecimal SIGNATURE_GROUP_ID;

		public BigDecimal getSIGNATURE_GROUP_ID() {
			return this.SIGNATURE_GROUP_ID;
		}

		public BigDecimal SECRECY_GROUP_ID;

		public BigDecimal getSECRECY_GROUP_ID() {
			return this.SECRECY_GROUP_ID;
		}

		public java.util.Date CREATION_DATE;

		public java.util.Date getCREATION_DATE() {
			return this.CREATION_DATE;
		}

		public BigDecimal CREATION_USER_ID;

		public BigDecimal getCREATION_USER_ID() {
			return this.CREATION_USER_ID;
		}

		public java.util.Date LAST_UPDATE_DATE;

		public java.util.Date getLAST_UPDATE_DATE() {
			return this.LAST_UPDATE_DATE;
		}

		public BigDecimal LAST_UPDATE_USER_ID;

		public BigDecimal getLAST_UPDATE_USER_ID() {
			return this.LAST_UPDATE_USER_ID;
		}

		public String DESCRIPTION;

		public String getDESCRIPTION() {
			return this.DESCRIPTION;
		}

		public BigDecimal SIGNATURE_USER_ID_SECONDARY;

		public BigDecimal getSIGNATURE_USER_ID_SECONDARY() {
			return this.SIGNATURE_USER_ID_SECONDARY;
		}

		@Override
		public int hashCode() {
			if (this.hashCodeDirty) {
				final int prime = PRIME;
				int result = DEFAULT_HASHCODE;

				result = prime * result
						+ ((this.OFFICE_DIVISION_CODE == null) ? 0 : this.OFFICE_DIVISION_CODE.hashCode());

				result = prime * result
						+ ((this.OFFICE_DEPARTMENT_CODE == null) ? 0 : this.OFFICE_DEPARTMENT_CODE.hashCode());

				this.hashCode = result;
				this.hashCodeDirty = false;
			}
			return this.hashCode;
		}

		@Override
		public boolean equals(Object obj) {
			if (this == obj)
				return true;
			if (obj == null)
				return false;
			if (getClass() != obj.getClass())
				return false;
			final set_departamentStruct other = (set_departamentStruct) obj;

			if (this.OFFICE_DIVISION_CODE == null) {
				if (other.OFFICE_DIVISION_CODE != null)
					return false;

			} else if (!this.OFFICE_DIVISION_CODE.equals(other.OFFICE_DIVISION_CODE))

				return false;

			if (this.OFFICE_DEPARTMENT_CODE == null) {
				if (other.OFFICE_DEPARTMENT_CODE != null)
					return false;

			} else if (!this.OFFICE_DEPARTMENT_CODE.equals(other.OFFICE_DEPARTMENT_CODE))

				return false;

			return true;
		}

		public void copyDataTo(set_departamentStruct other) {

			other.ROW_VERSION = this.ROW_VERSION;
			other.OFFICE_DIVISION_CODE = this.OFFICE_DIVISION_CODE;
			other.OFFICE_DEPARTMENT_CODE = this.OFFICE_DEPARTMENT_CODE;
			other.OFFICE_DEPARTMENT_NAME = this.OFFICE_DEPARTMENT_NAME;
			other.SIGNATURE_USER_ID = this.SIGNATURE_USER_ID;
			other.XML_DESIGNER = this.XML_DESIGNER;
			other.SIGNATURE_GROUP_ID = this.SIGNATURE_GROUP_ID;
			other.SECRECY_GROUP_ID = this.SECRECY_GROUP_ID;
			other.CREATION_DATE = this.CREATION_DATE;
			other.CREATION_USER_ID = this.CREATION_USER_ID;
			other.LAST_UPDATE_DATE = this.LAST_UPDATE_DATE;
			other.LAST_UPDATE_USER_ID = this.LAST_UPDATE_USER_ID;
			other.DESCRIPTION = this.DESCRIPTION;
			other.SIGNATURE_USER_ID_SECONDARY = this.SIGNATURE_USER_ID_SECONDARY;

		}

		public void copyKeysDataTo(set_departamentStruct other) {

			other.OFFICE_DIVISION_CODE = this.OFFICE_DIVISION_CODE;
			other.OFFICE_DEPARTMENT_CODE = this.OFFICE_DEPARTMENT_CODE;

		}

		private String readString(ObjectInputStream dis) throws IOException {
			String strReturn = null;
			int length = 0;
			length = dis.readInt();
			if (length == -1) {
				strReturn = null;
			} else {
				if (length > commonByteArray_WIPO_PROJECTS_A1_Copy_users_to_ipas.length) {
					if (length < 1024 && commonByteArray_WIPO_PROJECTS_A1_Copy_users_to_ipas.length == 0) {
						commonByteArray_WIPO_PROJECTS_A1_Copy_users_to_ipas = new byte[1024];
					} else {
						commonByteArray_WIPO_PROJECTS_A1_Copy_users_to_ipas = new byte[2 * length];
					}
				}
				dis.readFully(commonByteArray_WIPO_PROJECTS_A1_Copy_users_to_ipas, 0, length);
				strReturn = new String(commonByteArray_WIPO_PROJECTS_A1_Copy_users_to_ipas, 0, length, utf8Charset);
			}
			return strReturn;
		}

		private void writeString(String str, ObjectOutputStream dos) throws IOException {
			if (str == null) {
				dos.writeInt(-1);
			} else {
				byte[] byteArray = str.getBytes(utf8Charset);
				dos.writeInt(byteArray.length);
				dos.write(byteArray);
			}
		}

		private java.util.Date readDate(ObjectInputStream dis) throws IOException {
			java.util.Date dateReturn = null;
			int length = 0;
			length = dis.readByte();
			if (length == -1) {
				dateReturn = null;
			} else {
				dateReturn = new Date(dis.readLong());
			}
			return dateReturn;
		}

		private void writeDate(java.util.Date date1, ObjectOutputStream dos) throws IOException {
			if (date1 == null) {
				dos.writeByte(-1);
			} else {
				dos.writeByte(0);
				dos.writeLong(date1.getTime());
			}
		}

		public void readData(ObjectInputStream dis) {

			synchronized (commonByteArrayLock_WIPO_PROJECTS_A1_Copy_users_to_ipas) {

				try {

					int length = 0;

					this.ROW_VERSION = (BigDecimal) dis.readObject();

					this.OFFICE_DIVISION_CODE = readString(dis);

					this.OFFICE_DEPARTMENT_CODE = readString(dis);

					this.OFFICE_DEPARTMENT_NAME = readString(dis);

					this.SIGNATURE_USER_ID = (BigDecimal) dis.readObject();

					this.XML_DESIGNER = readString(dis);

					this.SIGNATURE_GROUP_ID = (BigDecimal) dis.readObject();

					this.SECRECY_GROUP_ID = (BigDecimal) dis.readObject();

					this.CREATION_DATE = readDate(dis);

					this.CREATION_USER_ID = (BigDecimal) dis.readObject();

					this.LAST_UPDATE_DATE = readDate(dis);

					this.LAST_UPDATE_USER_ID = (BigDecimal) dis.readObject();

					this.DESCRIPTION = readString(dis);

					this.SIGNATURE_USER_ID_SECONDARY = (BigDecimal) dis.readObject();

				} catch (IOException e) {
					throw new RuntimeException(e);

				} catch (ClassNotFoundException eCNFE) {
					throw new RuntimeException(eCNFE);

				}

			}

		}

		public void writeData(ObjectOutputStream dos) {
			try {

				// BigDecimal

				dos.writeObject(this.ROW_VERSION);

				// String

				writeString(this.OFFICE_DIVISION_CODE, dos);

				// String

				writeString(this.OFFICE_DEPARTMENT_CODE, dos);

				// String

				writeString(this.OFFICE_DEPARTMENT_NAME, dos);

				// BigDecimal

				dos.writeObject(this.SIGNATURE_USER_ID);

				// String

				writeString(this.XML_DESIGNER, dos);

				// BigDecimal

				dos.writeObject(this.SIGNATURE_GROUP_ID);

				// BigDecimal

				dos.writeObject(this.SECRECY_GROUP_ID);

				// java.util.Date

				writeDate(this.CREATION_DATE, dos);

				// BigDecimal

				dos.writeObject(this.CREATION_USER_ID);

				// java.util.Date

				writeDate(this.LAST_UPDATE_DATE, dos);

				// BigDecimal

				dos.writeObject(this.LAST_UPDATE_USER_ID);

				// String

				writeString(this.DESCRIPTION, dos);

				// BigDecimal

				dos.writeObject(this.SIGNATURE_USER_ID_SECONDARY);

			} catch (IOException e) {
				throw new RuntimeException(e);
			}

		}

		public String toString() {

			StringBuilder sb = new StringBuilder();
			sb.append(super.toString());
			sb.append("[");
			sb.append("ROW_VERSION=" + String.valueOf(ROW_VERSION));
			sb.append(",OFFICE_DIVISION_CODE=" + OFFICE_DIVISION_CODE);
			sb.append(",OFFICE_DEPARTMENT_CODE=" + OFFICE_DEPARTMENT_CODE);
			sb.append(",OFFICE_DEPARTMENT_NAME=" + OFFICE_DEPARTMENT_NAME);
			sb.append(",SIGNATURE_USER_ID=" + String.valueOf(SIGNATURE_USER_ID));
			sb.append(",XML_DESIGNER=" + XML_DESIGNER);
			sb.append(",SIGNATURE_GROUP_ID=" + String.valueOf(SIGNATURE_GROUP_ID));
			sb.append(",SECRECY_GROUP_ID=" + String.valueOf(SECRECY_GROUP_ID));
			sb.append(",CREATION_DATE=" + String.valueOf(CREATION_DATE));
			sb.append(",CREATION_USER_ID=" + String.valueOf(CREATION_USER_ID));
			sb.append(",LAST_UPDATE_DATE=" + String.valueOf(LAST_UPDATE_DATE));
			sb.append(",LAST_UPDATE_USER_ID=" + String.valueOf(LAST_UPDATE_USER_ID));
			sb.append(",DESCRIPTION=" + DESCRIPTION);
			sb.append(",SIGNATURE_USER_ID_SECONDARY=" + String.valueOf(SIGNATURE_USER_ID_SECONDARY));
			sb.append("]");

			return sb.toString();
		}

		/**
		 * Compare keys
		 */
		public int compareTo(set_departamentStruct other) {

			int returnValue = -1;

			returnValue = checkNullsAndCompare(this.OFFICE_DIVISION_CODE, other.OFFICE_DIVISION_CODE);
			if (returnValue != 0) {
				return returnValue;
			}

			returnValue = checkNullsAndCompare(this.OFFICE_DEPARTMENT_CODE, other.OFFICE_DEPARTMENT_CODE);
			if (returnValue != 0) {
				return returnValue;
			}

			return returnValue;
		}

		private int checkNullsAndCompare(Object object1, Object object2) {
			int returnValue = 0;
			if (object1 instanceof Comparable && object2 instanceof Comparable) {
				returnValue = ((Comparable) object1).compareTo(object2);
			} else if (object1 != null && object2 != null) {
				returnValue = compareStrings(object1.toString(), object2.toString());
			} else if (object1 == null && object2 != null) {
				returnValue = 1;
			} else if (object1 != null && object2 == null) {
				returnValue = -1;
			} else {
				returnValue = 0;
			}

			return returnValue;
		}

		private int compareStrings(String string1, String string2) {
			return string1.compareTo(string2);
		}

	}

	public static class set_sectionStruct implements routines.system.IPersistableRow<set_sectionStruct> {
		final static byte[] commonByteArrayLock_WIPO_PROJECTS_A1_Copy_users_to_ipas = new byte[0];
		static byte[] commonByteArray_WIPO_PROJECTS_A1_Copy_users_to_ipas = new byte[0];
		protected static final int DEFAULT_HASHCODE = 1;
		protected static final int PRIME = 31;
		protected int hashCode = DEFAULT_HASHCODE;
		public boolean hashCodeDirty = true;

		public String loopKey;

		public BigDecimal ROW_VERSION;

		public BigDecimal getROW_VERSION() {
			return this.ROW_VERSION;
		}

		public String OFFICE_DIVISION_CODE;

		public String getOFFICE_DIVISION_CODE() {
			return this.OFFICE_DIVISION_CODE;
		}

		public String OFFICE_DEPARTMENT_CODE;

		public String getOFFICE_DEPARTMENT_CODE() {
			return this.OFFICE_DEPARTMENT_CODE;
		}

		public String OFFICE_SECTION_CODE;

		public String getOFFICE_SECTION_CODE() {
			return this.OFFICE_SECTION_CODE;
		}

		public String OFFICE_SECTION_NAME;

		public String getOFFICE_SECTION_NAME() {
			return this.OFFICE_SECTION_NAME;
		}

		public BigDecimal SIGNATURE_USER_ID;

		public BigDecimal getSIGNATURE_USER_ID() {
			return this.SIGNATURE_USER_ID;
		}

		public String IND_DELIVERY_ANY_MEMBER;

		public String getIND_DELIVERY_ANY_MEMBER() {
			return this.IND_DELIVERY_ANY_MEMBER;
		}

		public String IND_DELIVERY_IGNORE;

		public String getIND_DELIVERY_IGNORE() {
			return this.IND_DELIVERY_IGNORE;
		}

		public String XML_DESIGNER;

		public String getXML_DESIGNER() {
			return this.XML_DESIGNER;
		}

		public BigDecimal SIGNATURE_GROUP_ID;

		public BigDecimal getSIGNATURE_GROUP_ID() {
			return this.SIGNATURE_GROUP_ID;
		}

		public BigDecimal SECRECY_GROUP_ID;

		public BigDecimal getSECRECY_GROUP_ID() {
			return this.SECRECY_GROUP_ID;
		}

		public java.util.Date CREATION_DATE;

		public java.util.Date getCREATION_DATE() {
			return this.CREATION_DATE;
		}

		public BigDecimal CREATION_USER_ID;

		public BigDecimal getCREATION_USER_ID() {
			return this.CREATION_USER_ID;
		}

		public java.util.Date LAST_UPDATE_DATE;

		public java.util.Date getLAST_UPDATE_DATE() {
			return this.LAST_UPDATE_DATE;
		}

		public BigDecimal LAST_UPDATE_USER_ID;

		public BigDecimal getLAST_UPDATE_USER_ID() {
			return this.LAST_UPDATE_USER_ID;
		}

		public String DESCRIPTION;

		public String getDESCRIPTION() {
			return this.DESCRIPTION;
		}

		public BigDecimal SIGNATURE_USER_ID_SECONDARY;

		public BigDecimal getSIGNATURE_USER_ID_SECONDARY() {
			return this.SIGNATURE_USER_ID_SECONDARY;
		}

		@Override
		public int hashCode() {
			if (this.hashCodeDirty) {
				final int prime = PRIME;
				int result = DEFAULT_HASHCODE;

				result = prime * result
						+ ((this.OFFICE_DIVISION_CODE == null) ? 0 : this.OFFICE_DIVISION_CODE.hashCode());

				result = prime * result
						+ ((this.OFFICE_DEPARTMENT_CODE == null) ? 0 : this.OFFICE_DEPARTMENT_CODE.hashCode());

				result = prime * result
						+ ((this.OFFICE_SECTION_CODE == null) ? 0 : this.OFFICE_SECTION_CODE.hashCode());

				this.hashCode = result;
				this.hashCodeDirty = false;
			}
			return this.hashCode;
		}

		@Override
		public boolean equals(Object obj) {
			if (this == obj)
				return true;
			if (obj == null)
				return false;
			if (getClass() != obj.getClass())
				return false;
			final set_sectionStruct other = (set_sectionStruct) obj;

			if (this.OFFICE_DIVISION_CODE == null) {
				if (other.OFFICE_DIVISION_CODE != null)
					return false;

			} else if (!this.OFFICE_DIVISION_CODE.equals(other.OFFICE_DIVISION_CODE))

				return false;

			if (this.OFFICE_DEPARTMENT_CODE == null) {
				if (other.OFFICE_DEPARTMENT_CODE != null)
					return false;

			} else if (!this.OFFICE_DEPARTMENT_CODE.equals(other.OFFICE_DEPARTMENT_CODE))

				return false;

			if (this.OFFICE_SECTION_CODE == null) {
				if (other.OFFICE_SECTION_CODE != null)
					return false;

			} else if (!this.OFFICE_SECTION_CODE.equals(other.OFFICE_SECTION_CODE))

				return false;

			return true;
		}

		public void copyDataTo(set_sectionStruct other) {

			other.ROW_VERSION = this.ROW_VERSION;
			other.OFFICE_DIVISION_CODE = this.OFFICE_DIVISION_CODE;
			other.OFFICE_DEPARTMENT_CODE = this.OFFICE_DEPARTMENT_CODE;
			other.OFFICE_SECTION_CODE = this.OFFICE_SECTION_CODE;
			other.OFFICE_SECTION_NAME = this.OFFICE_SECTION_NAME;
			other.SIGNATURE_USER_ID = this.SIGNATURE_USER_ID;
			other.IND_DELIVERY_ANY_MEMBER = this.IND_DELIVERY_ANY_MEMBER;
			other.IND_DELIVERY_IGNORE = this.IND_DELIVERY_IGNORE;
			other.XML_DESIGNER = this.XML_DESIGNER;
			other.SIGNATURE_GROUP_ID = this.SIGNATURE_GROUP_ID;
			other.SECRECY_GROUP_ID = this.SECRECY_GROUP_ID;
			other.CREATION_DATE = this.CREATION_DATE;
			other.CREATION_USER_ID = this.CREATION_USER_ID;
			other.LAST_UPDATE_DATE = this.LAST_UPDATE_DATE;
			other.LAST_UPDATE_USER_ID = this.LAST_UPDATE_USER_ID;
			other.DESCRIPTION = this.DESCRIPTION;
			other.SIGNATURE_USER_ID_SECONDARY = this.SIGNATURE_USER_ID_SECONDARY;

		}

		public void copyKeysDataTo(set_sectionStruct other) {

			other.OFFICE_DIVISION_CODE = this.OFFICE_DIVISION_CODE;
			other.OFFICE_DEPARTMENT_CODE = this.OFFICE_DEPARTMENT_CODE;
			other.OFFICE_SECTION_CODE = this.OFFICE_SECTION_CODE;

		}

		private String readString(ObjectInputStream dis) throws IOException {
			String strReturn = null;
			int length = 0;
			length = dis.readInt();
			if (length == -1) {
				strReturn = null;
			} else {
				if (length > commonByteArray_WIPO_PROJECTS_A1_Copy_users_to_ipas.length) {
					if (length < 1024 && commonByteArray_WIPO_PROJECTS_A1_Copy_users_to_ipas.length == 0) {
						commonByteArray_WIPO_PROJECTS_A1_Copy_users_to_ipas = new byte[1024];
					} else {
						commonByteArray_WIPO_PROJECTS_A1_Copy_users_to_ipas = new byte[2 * length];
					}
				}
				dis.readFully(commonByteArray_WIPO_PROJECTS_A1_Copy_users_to_ipas, 0, length);
				strReturn = new String(commonByteArray_WIPO_PROJECTS_A1_Copy_users_to_ipas, 0, length, utf8Charset);
			}
			return strReturn;
		}

		private void writeString(String str, ObjectOutputStream dos) throws IOException {
			if (str == null) {
				dos.writeInt(-1);
			} else {
				byte[] byteArray = str.getBytes(utf8Charset);
				dos.writeInt(byteArray.length);
				dos.write(byteArray);
			}
		}

		private java.util.Date readDate(ObjectInputStream dis) throws IOException {
			java.util.Date dateReturn = null;
			int length = 0;
			length = dis.readByte();
			if (length == -1) {
				dateReturn = null;
			} else {
				dateReturn = new Date(dis.readLong());
			}
			return dateReturn;
		}

		private void writeDate(java.util.Date date1, ObjectOutputStream dos) throws IOException {
			if (date1 == null) {
				dos.writeByte(-1);
			} else {
				dos.writeByte(0);
				dos.writeLong(date1.getTime());
			}
		}

		public void readData(ObjectInputStream dis) {

			synchronized (commonByteArrayLock_WIPO_PROJECTS_A1_Copy_users_to_ipas) {

				try {

					int length = 0;

					this.ROW_VERSION = (BigDecimal) dis.readObject();

					this.OFFICE_DIVISION_CODE = readString(dis);

					this.OFFICE_DEPARTMENT_CODE = readString(dis);

					this.OFFICE_SECTION_CODE = readString(dis);

					this.OFFICE_SECTION_NAME = readString(dis);

					this.SIGNATURE_USER_ID = (BigDecimal) dis.readObject();

					this.IND_DELIVERY_ANY_MEMBER = readString(dis);

					this.IND_DELIVERY_IGNORE = readString(dis);

					this.XML_DESIGNER = readString(dis);

					this.SIGNATURE_GROUP_ID = (BigDecimal) dis.readObject();

					this.SECRECY_GROUP_ID = (BigDecimal) dis.readObject();

					this.CREATION_DATE = readDate(dis);

					this.CREATION_USER_ID = (BigDecimal) dis.readObject();

					this.LAST_UPDATE_DATE = readDate(dis);

					this.LAST_UPDATE_USER_ID = (BigDecimal) dis.readObject();

					this.DESCRIPTION = readString(dis);

					this.SIGNATURE_USER_ID_SECONDARY = (BigDecimal) dis.readObject();

				} catch (IOException e) {
					throw new RuntimeException(e);

				} catch (ClassNotFoundException eCNFE) {
					throw new RuntimeException(eCNFE);

				}

			}

		}

		public void writeData(ObjectOutputStream dos) {
			try {

				// BigDecimal

				dos.writeObject(this.ROW_VERSION);

				// String

				writeString(this.OFFICE_DIVISION_CODE, dos);

				// String

				writeString(this.OFFICE_DEPARTMENT_CODE, dos);

				// String

				writeString(this.OFFICE_SECTION_CODE, dos);

				// String

				writeString(this.OFFICE_SECTION_NAME, dos);

				// BigDecimal

				dos.writeObject(this.SIGNATURE_USER_ID);

				// String

				writeString(this.IND_DELIVERY_ANY_MEMBER, dos);

				// String

				writeString(this.IND_DELIVERY_IGNORE, dos);

				// String

				writeString(this.XML_DESIGNER, dos);

				// BigDecimal

				dos.writeObject(this.SIGNATURE_GROUP_ID);

				// BigDecimal

				dos.writeObject(this.SECRECY_GROUP_ID);

				// java.util.Date

				writeDate(this.CREATION_DATE, dos);

				// BigDecimal

				dos.writeObject(this.CREATION_USER_ID);

				// java.util.Date

				writeDate(this.LAST_UPDATE_DATE, dos);

				// BigDecimal

				dos.writeObject(this.LAST_UPDATE_USER_ID);

				// String

				writeString(this.DESCRIPTION, dos);

				// BigDecimal

				dos.writeObject(this.SIGNATURE_USER_ID_SECONDARY);

			} catch (IOException e) {
				throw new RuntimeException(e);
			}

		}

		public String toString() {

			StringBuilder sb = new StringBuilder();
			sb.append(super.toString());
			sb.append("[");
			sb.append("ROW_VERSION=" + String.valueOf(ROW_VERSION));
			sb.append(",OFFICE_DIVISION_CODE=" + OFFICE_DIVISION_CODE);
			sb.append(",OFFICE_DEPARTMENT_CODE=" + OFFICE_DEPARTMENT_CODE);
			sb.append(",OFFICE_SECTION_CODE=" + OFFICE_SECTION_CODE);
			sb.append(",OFFICE_SECTION_NAME=" + OFFICE_SECTION_NAME);
			sb.append(",SIGNATURE_USER_ID=" + String.valueOf(SIGNATURE_USER_ID));
			sb.append(",IND_DELIVERY_ANY_MEMBER=" + IND_DELIVERY_ANY_MEMBER);
			sb.append(",IND_DELIVERY_IGNORE=" + IND_DELIVERY_IGNORE);
			sb.append(",XML_DESIGNER=" + XML_DESIGNER);
			sb.append(",SIGNATURE_GROUP_ID=" + String.valueOf(SIGNATURE_GROUP_ID));
			sb.append(",SECRECY_GROUP_ID=" + String.valueOf(SECRECY_GROUP_ID));
			sb.append(",CREATION_DATE=" + String.valueOf(CREATION_DATE));
			sb.append(",CREATION_USER_ID=" + String.valueOf(CREATION_USER_ID));
			sb.append(",LAST_UPDATE_DATE=" + String.valueOf(LAST_UPDATE_DATE));
			sb.append(",LAST_UPDATE_USER_ID=" + String.valueOf(LAST_UPDATE_USER_ID));
			sb.append(",DESCRIPTION=" + DESCRIPTION);
			sb.append(",SIGNATURE_USER_ID_SECONDARY=" + String.valueOf(SIGNATURE_USER_ID_SECONDARY));
			sb.append("]");

			return sb.toString();
		}

		/**
		 * Compare keys
		 */
		public int compareTo(set_sectionStruct other) {

			int returnValue = -1;

			returnValue = checkNullsAndCompare(this.OFFICE_DIVISION_CODE, other.OFFICE_DIVISION_CODE);
			if (returnValue != 0) {
				return returnValue;
			}

			returnValue = checkNullsAndCompare(this.OFFICE_DEPARTMENT_CODE, other.OFFICE_DEPARTMENT_CODE);
			if (returnValue != 0) {
				return returnValue;
			}

			returnValue = checkNullsAndCompare(this.OFFICE_SECTION_CODE, other.OFFICE_SECTION_CODE);
			if (returnValue != 0) {
				return returnValue;
			}

			return returnValue;
		}

		private int checkNullsAndCompare(Object object1, Object object2) {
			int returnValue = 0;
			if (object1 instanceof Comparable && object2 instanceof Comparable) {
				returnValue = ((Comparable) object1).compareTo(object2);
			} else if (object1 != null && object2 != null) {
				returnValue = compareStrings(object1.toString(), object2.toString());
			} else if (object1 == null && object2 != null) {
				returnValue = 1;
			} else if (object1 != null && object2 == null) {
				returnValue = -1;
			} else {
				returnValue = 0;
			}

			return returnValue;
		}

		private int compareStrings(String string1, String string2) {
			return string1.compareTo(string2);
		}

	}

	public static class row2Struct implements routines.system.IPersistableRow<row2Struct> {
		final static byte[] commonByteArrayLock_WIPO_PROJECTS_A1_Copy_users_to_ipas = new byte[0];
		static byte[] commonByteArray_WIPO_PROJECTS_A1_Copy_users_to_ipas = new byte[0];

		public String dummy;

		public String getDummy() {
			return this.dummy;
		}

		private String readString(ObjectInputStream dis) throws IOException {
			String strReturn = null;
			int length = 0;
			length = dis.readInt();
			if (length == -1) {
				strReturn = null;
			} else {
				if (length > commonByteArray_WIPO_PROJECTS_A1_Copy_users_to_ipas.length) {
					if (length < 1024 && commonByteArray_WIPO_PROJECTS_A1_Copy_users_to_ipas.length == 0) {
						commonByteArray_WIPO_PROJECTS_A1_Copy_users_to_ipas = new byte[1024];
					} else {
						commonByteArray_WIPO_PROJECTS_A1_Copy_users_to_ipas = new byte[2 * length];
					}
				}
				dis.readFully(commonByteArray_WIPO_PROJECTS_A1_Copy_users_to_ipas, 0, length);
				strReturn = new String(commonByteArray_WIPO_PROJECTS_A1_Copy_users_to_ipas, 0, length, utf8Charset);
			}
			return strReturn;
		}

		private void writeString(String str, ObjectOutputStream dos) throws IOException {
			if (str == null) {
				dos.writeInt(-1);
			} else {
				byte[] byteArray = str.getBytes(utf8Charset);
				dos.writeInt(byteArray.length);
				dos.write(byteArray);
			}
		}

		public void readData(ObjectInputStream dis) {

			synchronized (commonByteArrayLock_WIPO_PROJECTS_A1_Copy_users_to_ipas) {

				try {

					int length = 0;

					this.dummy = readString(dis);

				} catch (IOException e) {
					throw new RuntimeException(e);

				}

			}

		}

		public void writeData(ObjectOutputStream dos) {
			try {

				// String

				writeString(this.dummy, dos);

			} catch (IOException e) {
				throw new RuntimeException(e);
			}

		}

		public String toString() {

			StringBuilder sb = new StringBuilder();
			sb.append(super.toString());
			sb.append("[");
			sb.append("dummy=" + dummy);
			sb.append("]");

			return sb.toString();
		}

		/**
		 * Compare keys
		 */
		public int compareTo(row2Struct other) {

			int returnValue = -1;

			return returnValue;
		}

		private int checkNullsAndCompare(Object object1, Object object2) {
			int returnValue = 0;
			if (object1 instanceof Comparable && object2 instanceof Comparable) {
				returnValue = ((Comparable) object1).compareTo(object2);
			} else if (object1 != null && object2 != null) {
				returnValue = compareStrings(object1.toString(), object2.toString());
			} else if (object1 == null && object2 != null) {
				returnValue = 1;
			} else if (object1 != null && object2 == null) {
				returnValue = -1;
			} else {
				returnValue = 0;
			}

			return returnValue;
		}

		private int compareStrings(String string1, String string2) {
			return string1.compareTo(string2);
		}

	}

	public void tDBInput_1Process(final java.util.Map<String, Object> globalMap) throws TalendException {
		globalMap.put("tDBInput_1_SUBPROCESS_STATE", 0);

		final boolean execStat = this.execStat;

		String iterateId = "";

		String currentComponent = "";
		java.util.Map<String, Object> resourceMap = new java.util.HashMap<String, Object>();

		try {
			// TDI-39566 avoid throwing an useless Exception
			boolean resumeIt = true;
			if (globalResumeTicket == false && resumeEntryMethodName != null) {
				String currentMethodName = new java.lang.Exception().getStackTrace()[0].getMethodName();
				resumeIt = resumeEntryMethodName.equals(currentMethodName);
			}
			if (resumeIt || globalResumeTicket) { // start the resume
				globalResumeTicket = true;

				row2Struct row2 = new row2Struct();
				set_divisionStruct set_division = new set_divisionStruct();
				set_departamentStruct set_departament = new set_departamentStruct();
				set_sectionStruct set_section = new set_sectionStruct();

				/**
				 * [tDBOutput_2 begin ] start
				 */

				ok_Hash.put("tDBOutput_2", false);
				start_Hash.put("tDBOutput_2", System.currentTimeMillis());

				currentComponent = "tDBOutput_2";

				if (execStat) {
					runStat.updateStatOnConnection(resourceMap, iterateId, 0, 0, "set_division");
				}

				int tos_count_tDBOutput_2 = 0;

				int nb_line_tDBOutput_2 = 0;
				int nb_line_update_tDBOutput_2 = 0;
				int nb_line_inserted_tDBOutput_2 = 0;
				int nb_line_deleted_tDBOutput_2 = 0;
				int nb_line_rejected_tDBOutput_2 = 0;

				int deletedCount_tDBOutput_2 = 0;
				int updatedCount_tDBOutput_2 = 0;
				int insertedCount_tDBOutput_2 = 0;
				int rowsToCommitCount_tDBOutput_2 = 0;
				int rejectedCount_tDBOutput_2 = 0;
				String dbschema_tDBOutput_2 = null;
				String tableName_tDBOutput_2 = null;
				boolean whetherReject_tDBOutput_2 = false;

				java.util.Calendar calendar_tDBOutput_2 = java.util.Calendar.getInstance();
				long year1_tDBOutput_2 = TalendDate.parseDate("yyyy-MM-dd", "0001-01-01").getTime();
				long year2_tDBOutput_2 = TalendDate.parseDate("yyyy-MM-dd", "1753-01-01").getTime();
				long year10000_tDBOutput_2 = TalendDate.parseDate("yyyy-MM-dd HH:mm:ss", "9999-12-31 24:00:00")
						.getTime();
				long date_tDBOutput_2;

				java.util.Calendar calendar_datetimeoffset_tDBOutput_2 = java.util.Calendar
						.getInstance(java.util.TimeZone.getTimeZone("UTC"));

				int updateKeyCount_tDBOutput_2 = 1;
				if (updateKeyCount_tDBOutput_2 < 1) {
					throw new RuntimeException("For update, Schema must have a key");
				}

				java.sql.Connection conn_tDBOutput_2 = null;
				String dbUser_tDBOutput_2 = null;
				dbschema_tDBOutput_2 = (String) globalMap.get("dbschema_tDBConnection_3");

				conn_tDBOutput_2 = (java.sql.Connection) globalMap.get("conn_tDBConnection_3");

				if (dbschema_tDBOutput_2 == null || dbschema_tDBOutput_2.trim().length() == 0) {
					tableName_tDBOutput_2 = "CF_OFFICE_DIVISION";
				} else {
					tableName_tDBOutput_2 = dbschema_tDBOutput_2 + "].[" + "CF_OFFICE_DIVISION";
				}
				int count_tDBOutput_2 = 0;

				java.sql.PreparedStatement pstmt_tDBOutput_2 = conn_tDBOutput_2.prepareStatement(
						"SELECT COUNT(1) FROM [" + tableName_tDBOutput_2 + "] WHERE [OFFICE_DIVISION_CODE] = ?");
				resourceMap.put("pstmt_tDBOutput_2", pstmt_tDBOutput_2);
				String insert_tDBOutput_2 = "INSERT INTO [" + tableName_tDBOutput_2
						+ "] ([ROW_VERSION],[OFFICE_DIVISION_CODE],[OFFICE_DIVISION_NAME],[SIGNATURE_USER_ID],[XML_DESIGNER],[SIGNATURE_GROUP_ID],[SECRECY_GROUP_ID],[CREATION_DATE],[CREATION_USER_ID],[LAST_UPDATE_DATE],[LAST_UPDATE_USER_ID],[DESCRIPTION],[SIGNATURE_USER_ID_SECONDARY]) VALUES (?,?,?,?,?,?,?,?,?,?,?,?,?)";
				java.sql.PreparedStatement pstmtInsert_tDBOutput_2 = conn_tDBOutput_2
						.prepareStatement(insert_tDBOutput_2);
				resourceMap.put("pstmtInsert_tDBOutput_2", pstmtInsert_tDBOutput_2);
				String update_tDBOutput_2 = "UPDATE [" + tableName_tDBOutput_2
						+ "] SET [ROW_VERSION] = ?,[OFFICE_DIVISION_NAME] = ?,[SIGNATURE_USER_ID] = ?,[XML_DESIGNER] = ?,[SIGNATURE_GROUP_ID] = ?,[SECRECY_GROUP_ID] = ?,[CREATION_DATE] = ?,[CREATION_USER_ID] = ?,[LAST_UPDATE_DATE] = ?,[LAST_UPDATE_USER_ID] = ?,[DESCRIPTION] = ?,[SIGNATURE_USER_ID_SECONDARY] = ? WHERE [OFFICE_DIVISION_CODE] = ?";
				java.sql.PreparedStatement pstmtUpdate_tDBOutput_2 = conn_tDBOutput_2
						.prepareStatement(update_tDBOutput_2);
				resourceMap.put("pstmtUpdate_tDBOutput_2", pstmtUpdate_tDBOutput_2);
				boolean isShareIdentity_tDBOutput_2 = globalMap.get("shareIdentitySetting_tDBConnection_3") != null
						&& (Boolean) globalMap.get("shareIdentitySetting_tDBConnection_3") == true;

				/**
				 * [tDBOutput_2 begin ] stop
				 */

				/**
				 * [tDBOutput_1 begin ] start
				 */

				ok_Hash.put("tDBOutput_1", false);
				start_Hash.put("tDBOutput_1", System.currentTimeMillis());

				currentComponent = "tDBOutput_1";

				if (execStat) {
					runStat.updateStatOnConnection(resourceMap, iterateId, 0, 0, "set_departament");
				}

				int tos_count_tDBOutput_1 = 0;

				int nb_line_tDBOutput_1 = 0;
				int nb_line_update_tDBOutput_1 = 0;
				int nb_line_inserted_tDBOutput_1 = 0;
				int nb_line_deleted_tDBOutput_1 = 0;
				int nb_line_rejected_tDBOutput_1 = 0;

				int deletedCount_tDBOutput_1 = 0;
				int updatedCount_tDBOutput_1 = 0;
				int insertedCount_tDBOutput_1 = 0;
				int rowsToCommitCount_tDBOutput_1 = 0;
				int rejectedCount_tDBOutput_1 = 0;
				String dbschema_tDBOutput_1 = null;
				String tableName_tDBOutput_1 = null;
				boolean whetherReject_tDBOutput_1 = false;

				java.util.Calendar calendar_tDBOutput_1 = java.util.Calendar.getInstance();
				long year1_tDBOutput_1 = TalendDate.parseDate("yyyy-MM-dd", "0001-01-01").getTime();
				long year2_tDBOutput_1 = TalendDate.parseDate("yyyy-MM-dd", "1753-01-01").getTime();
				long year10000_tDBOutput_1 = TalendDate.parseDate("yyyy-MM-dd HH:mm:ss", "9999-12-31 24:00:00")
						.getTime();
				long date_tDBOutput_1;

				java.util.Calendar calendar_datetimeoffset_tDBOutput_1 = java.util.Calendar
						.getInstance(java.util.TimeZone.getTimeZone("UTC"));

				int updateKeyCount_tDBOutput_1 = 2;
				if (updateKeyCount_tDBOutput_1 < 1) {
					throw new RuntimeException("For update, Schema must have a key");
				}

				java.sql.Connection conn_tDBOutput_1 = null;
				String dbUser_tDBOutput_1 = null;
				dbschema_tDBOutput_1 = (String) globalMap.get("dbschema_tDBConnection_3");

				conn_tDBOutput_1 = (java.sql.Connection) globalMap.get("conn_tDBConnection_3");

				if (dbschema_tDBOutput_1 == null || dbschema_tDBOutput_1.trim().length() == 0) {
					tableName_tDBOutput_1 = "CF_OFFICE_DEPARTMENT";
				} else {
					tableName_tDBOutput_1 = dbschema_tDBOutput_1 + "].[" + "CF_OFFICE_DEPARTMENT";
				}
				int count_tDBOutput_1 = 0;

				java.sql.PreparedStatement pstmt_tDBOutput_1 = conn_tDBOutput_1
						.prepareStatement("SELECT COUNT(1) FROM [" + tableName_tDBOutput_1
								+ "] WHERE [OFFICE_DIVISION_CODE] = ? AND [OFFICE_DEPARTMENT_CODE] = ?");
				resourceMap.put("pstmt_tDBOutput_1", pstmt_tDBOutput_1);
				String insert_tDBOutput_1 = "INSERT INTO [" + tableName_tDBOutput_1
						+ "] ([ROW_VERSION],[OFFICE_DIVISION_CODE],[OFFICE_DEPARTMENT_CODE],[OFFICE_DEPARTMENT_NAME],[SIGNATURE_USER_ID],[XML_DESIGNER],[SIGNATURE_GROUP_ID],[SECRECY_GROUP_ID],[CREATION_DATE],[CREATION_USER_ID],[LAST_UPDATE_DATE],[LAST_UPDATE_USER_ID],[DESCRIPTION],[SIGNATURE_USER_ID_SECONDARY]) VALUES (?,?,?,?,?,?,?,?,?,?,?,?,?,?)";
				java.sql.PreparedStatement pstmtInsert_tDBOutput_1 = conn_tDBOutput_1
						.prepareStatement(insert_tDBOutput_1);
				resourceMap.put("pstmtInsert_tDBOutput_1", pstmtInsert_tDBOutput_1);
				String update_tDBOutput_1 = "UPDATE [" + tableName_tDBOutput_1
						+ "] SET [ROW_VERSION] = ?,[OFFICE_DEPARTMENT_NAME] = ?,[SIGNATURE_USER_ID] = ?,[XML_DESIGNER] = ?,[SIGNATURE_GROUP_ID] = ?,[SECRECY_GROUP_ID] = ?,[CREATION_DATE] = ?,[CREATION_USER_ID] = ?,[LAST_UPDATE_DATE] = ?,[LAST_UPDATE_USER_ID] = ?,[DESCRIPTION] = ?,[SIGNATURE_USER_ID_SECONDARY] = ? WHERE [OFFICE_DIVISION_CODE] = ? AND [OFFICE_DEPARTMENT_CODE] = ?";
				java.sql.PreparedStatement pstmtUpdate_tDBOutput_1 = conn_tDBOutput_1
						.prepareStatement(update_tDBOutput_1);
				resourceMap.put("pstmtUpdate_tDBOutput_1", pstmtUpdate_tDBOutput_1);
				boolean isShareIdentity_tDBOutput_1 = globalMap.get("shareIdentitySetting_tDBConnection_3") != null
						&& (Boolean) globalMap.get("shareIdentitySetting_tDBConnection_3") == true;

				/**
				 * [tDBOutput_1 begin ] stop
				 */

				/**
				 * [tDBOutput_3 begin ] start
				 */

				ok_Hash.put("tDBOutput_3", false);
				start_Hash.put("tDBOutput_3", System.currentTimeMillis());

				currentComponent = "tDBOutput_3";

				if (execStat) {
					runStat.updateStatOnConnection(resourceMap, iterateId, 0, 0, "set_section");
				}

				int tos_count_tDBOutput_3 = 0;

				int nb_line_tDBOutput_3 = 0;
				int nb_line_update_tDBOutput_3 = 0;
				int nb_line_inserted_tDBOutput_3 = 0;
				int nb_line_deleted_tDBOutput_3 = 0;
				int nb_line_rejected_tDBOutput_3 = 0;

				int deletedCount_tDBOutput_3 = 0;
				int updatedCount_tDBOutput_3 = 0;
				int insertedCount_tDBOutput_3 = 0;
				int rowsToCommitCount_tDBOutput_3 = 0;
				int rejectedCount_tDBOutput_3 = 0;
				String dbschema_tDBOutput_3 = null;
				String tableName_tDBOutput_3 = null;
				boolean whetherReject_tDBOutput_3 = false;

				java.util.Calendar calendar_tDBOutput_3 = java.util.Calendar.getInstance();
				long year1_tDBOutput_3 = TalendDate.parseDate("yyyy-MM-dd", "0001-01-01").getTime();
				long year2_tDBOutput_3 = TalendDate.parseDate("yyyy-MM-dd", "1753-01-01").getTime();
				long year10000_tDBOutput_3 = TalendDate.parseDate("yyyy-MM-dd HH:mm:ss", "9999-12-31 24:00:00")
						.getTime();
				long date_tDBOutput_3;

				java.util.Calendar calendar_datetimeoffset_tDBOutput_3 = java.util.Calendar
						.getInstance(java.util.TimeZone.getTimeZone("UTC"));

				int updateKeyCount_tDBOutput_3 = 3;
				if (updateKeyCount_tDBOutput_3 < 1) {
					throw new RuntimeException("For update, Schema must have a key");
				}

				java.sql.Connection conn_tDBOutput_3 = null;
				String dbUser_tDBOutput_3 = null;
				dbschema_tDBOutput_3 = (String) globalMap.get("dbschema_tDBConnection_3");

				conn_tDBOutput_3 = (java.sql.Connection) globalMap.get("conn_tDBConnection_3");

				if (dbschema_tDBOutput_3 == null || dbschema_tDBOutput_3.trim().length() == 0) {
					tableName_tDBOutput_3 = "CF_OFFICE_SECTION";
				} else {
					tableName_tDBOutput_3 = dbschema_tDBOutput_3 + "].[" + "CF_OFFICE_SECTION";
				}
				int count_tDBOutput_3 = 0;

				java.sql.PreparedStatement pstmt_tDBOutput_3 = conn_tDBOutput_3
						.prepareStatement("SELECT COUNT(1) FROM [" + tableName_tDBOutput_3
								+ "] WHERE [OFFICE_DIVISION_CODE] = ? AND [OFFICE_DEPARTMENT_CODE] = ? AND [OFFICE_SECTION_CODE] = ?");
				resourceMap.put("pstmt_tDBOutput_3", pstmt_tDBOutput_3);
				String insert_tDBOutput_3 = "INSERT INTO [" + tableName_tDBOutput_3
						+ "] ([ROW_VERSION],[OFFICE_DIVISION_CODE],[OFFICE_DEPARTMENT_CODE],[OFFICE_SECTION_CODE],[OFFICE_SECTION_NAME],[SIGNATURE_USER_ID],[IND_DELIVERY_ANY_MEMBER],[IND_DELIVERY_IGNORE],[XML_DESIGNER],[SIGNATURE_GROUP_ID],[SECRECY_GROUP_ID],[CREATION_DATE],[CREATION_USER_ID],[LAST_UPDATE_DATE],[LAST_UPDATE_USER_ID],[DESCRIPTION],[SIGNATURE_USER_ID_SECONDARY]) VALUES (?,?,?,?,?,?,?,?,?,?,?,?,?,?,?,?,?)";
				java.sql.PreparedStatement pstmtInsert_tDBOutput_3 = conn_tDBOutput_3
						.prepareStatement(insert_tDBOutput_3);
				resourceMap.put("pstmtInsert_tDBOutput_3", pstmtInsert_tDBOutput_3);
				String update_tDBOutput_3 = "UPDATE [" + tableName_tDBOutput_3
						+ "] SET [ROW_VERSION] = ?,[OFFICE_SECTION_NAME] = ?,[SIGNATURE_USER_ID] = ?,[IND_DELIVERY_ANY_MEMBER] = ?,[IND_DELIVERY_IGNORE] = ?,[XML_DESIGNER] = ?,[SIGNATURE_GROUP_ID] = ?,[SECRECY_GROUP_ID] = ?,[CREATION_DATE] = ?,[CREATION_USER_ID] = ?,[LAST_UPDATE_DATE] = ?,[LAST_UPDATE_USER_ID] = ?,[DESCRIPTION] = ?,[SIGNATURE_USER_ID_SECONDARY] = ? WHERE [OFFICE_DIVISION_CODE] = ? AND [OFFICE_DEPARTMENT_CODE] = ? AND [OFFICE_SECTION_CODE] = ?";
				java.sql.PreparedStatement pstmtUpdate_tDBOutput_3 = conn_tDBOutput_3
						.prepareStatement(update_tDBOutput_3);
				resourceMap.put("pstmtUpdate_tDBOutput_3", pstmtUpdate_tDBOutput_3);
				boolean isShareIdentity_tDBOutput_3 = globalMap.get("shareIdentitySetting_tDBConnection_3") != null
						&& (Boolean) globalMap.get("shareIdentitySetting_tDBConnection_3") == true;

				/**
				 * [tDBOutput_3 begin ] stop
				 */

				/**
				 * [tMap_1 begin ] start
				 */

				ok_Hash.put("tMap_1", false);
				start_Hash.put("tMap_1", System.currentTimeMillis());

				currentComponent = "tMap_1";

				if (execStat) {
					runStat.updateStatOnConnection(resourceMap, iterateId, 0, 0, "row2");
				}

				int tos_count_tMap_1 = 0;

// ###############################
// # Lookup's keys initialization
// ###############################        

// ###############################
// # Vars initialization
				class Var__tMap_1__Struct {
				}
				Var__tMap_1__Struct Var__tMap_1 = new Var__tMap_1__Struct();
// ###############################

// ###############################
// # Outputs initialization
				set_divisionStruct set_division_tmp = new set_divisionStruct();
				set_departamentStruct set_departament_tmp = new set_departamentStruct();
				set_sectionStruct set_section_tmp = new set_sectionStruct();
// ###############################

				/**
				 * [tMap_1 begin ] stop
				 */

				/**
				 * [tDBInput_1 begin ] start
				 */

				ok_Hash.put("tDBInput_1", false);
				start_Hash.put("tDBInput_1", System.currentTimeMillis());

				currentComponent = "tDBInput_1";

				int tos_count_tDBInput_1 = 0;

				org.talend.designer.components.util.mssql.MSSqlGenerateTimestampUtil mssqlGTU_tDBInput_1 = org.talend.designer.components.util.mssql.MSSqlUtilFactory
						.getMSSqlGenerateTimestampUtil();

				java.util.List<String> talendToDBList_tDBInput_1 = new java.util.ArrayList();
				String[] talendToDBArray_tDBInput_1 = new String[] { "FLOAT", "NUMERIC", "NUMERIC IDENTITY", "DECIMAL",
						"DECIMAL IDENTITY", "REAL" };
				java.util.Collections.addAll(talendToDBList_tDBInput_1, talendToDBArray_tDBInput_1);
				int nb_line_tDBInput_1 = 0;
				java.sql.Connection conn_tDBInput_1 = null;
				conn_tDBInput_1 = (java.sql.Connection) globalMap.get("conn_tDBConnection_3");

				String dbschema_tDBInput_1 = (String) globalMap.get("dbschema_tDBConnection_3");

				java.sql.Statement stmt_tDBInput_1 = conn_tDBInput_1.createStatement();

				String dbquery_tDBInput_1 = "SELECT ADMIN.dual.\"dummy\" \nFROM	 ADMIN.dual";

				globalMap.put("tDBInput_1_QUERY", dbquery_tDBInput_1);
				java.sql.ResultSet rs_tDBInput_1 = null;

				try {
					rs_tDBInput_1 = stmt_tDBInput_1.executeQuery(dbquery_tDBInput_1);
					java.sql.ResultSetMetaData rsmd_tDBInput_1 = rs_tDBInput_1.getMetaData();
					int colQtyInRs_tDBInput_1 = rsmd_tDBInput_1.getColumnCount();

					String tmpContent_tDBInput_1 = null;

					while (rs_tDBInput_1.next()) {
						nb_line_tDBInput_1++;

						if (colQtyInRs_tDBInput_1 < 1) {
							row2.dummy = null;
						} else {

							tmpContent_tDBInput_1 = rs_tDBInput_1.getString(1);
							if (tmpContent_tDBInput_1 != null) {
								if (talendToDBList_tDBInput_1.contains(
										rsmd_tDBInput_1.getColumnTypeName(1).toUpperCase(java.util.Locale.ENGLISH))) {
									row2.dummy = FormatterUtils.formatUnwithE(tmpContent_tDBInput_1);
								} else {
									row2.dummy = tmpContent_tDBInput_1;
								}
							} else {
								row2.dummy = null;
							}
						}

						/**
						 * [tDBInput_1 begin ] stop
						 */

						/**
						 * [tDBInput_1 main ] start
						 */

						currentComponent = "tDBInput_1";

						tos_count_tDBInput_1++;

						/**
						 * [tDBInput_1 main ] stop
						 */

						/**
						 * [tDBInput_1 process_data_begin ] start
						 */

						currentComponent = "tDBInput_1";

						/**
						 * [tDBInput_1 process_data_begin ] stop
						 */

						/**
						 * [tMap_1 main ] start
						 */

						currentComponent = "tMap_1";

						if (execStat) {
							runStat.updateStatOnConnection(iterateId, 1, 1

									, "row2"

							);
						}

						boolean hasCasePrimitiveKeyWithNull_tMap_1 = false;

						// ###############################
						// # Input tables (lookups)
						boolean rejectedInnerJoin_tMap_1 = false;
						boolean mainRowRejected_tMap_1 = false;

						// ###############################
						{ // start of Var scope

							// ###############################
							// # Vars tables

							Var__tMap_1__Struct Var = Var__tMap_1;// ###############################
							// ###############################
							// # Output tables

							set_division = null;
							set_departament = null;
							set_section = null;

// # Output table : 'set_division'
							set_division_tmp.ROW_VERSION = new BigDecimal("1");
							set_division_tmp.OFFICE_DIVISION_CODE = "DIN";
							set_division_tmp.OFFICE_DIVISION_NAME = "DINAPI MARCAS";
							set_division_tmp.SIGNATURE_USER_ID = null;
							set_division_tmp.XML_DESIGNER = null;
							set_division_tmp.SIGNATURE_GROUP_ID = null;
							set_division_tmp.SECRECY_GROUP_ID = null;
							set_division_tmp.CREATION_DATE = null;
							set_division_tmp.CREATION_USER_ID = null;
							set_division_tmp.LAST_UPDATE_DATE = null;
							set_division_tmp.LAST_UPDATE_USER_ID = null;
							set_division_tmp.DESCRIPTION = row2.dummy;
							set_division_tmp.SIGNATURE_USER_ID_SECONDARY = null;
							set_division = set_division_tmp;

// # Output table : 'set_departament'
							set_departament_tmp.ROW_VERSION = new BigDecimal("1");
							set_departament_tmp.OFFICE_DIVISION_CODE = "DIN";
							set_departament_tmp.OFFICE_DEPARTMENT_CODE = "MA";
							set_departament_tmp.OFFICE_DEPARTMENT_NAME = "Departamento de Marcas";
							set_departament_tmp.SIGNATURE_USER_ID = null;
							set_departament_tmp.XML_DESIGNER = null;
							set_departament_tmp.SIGNATURE_GROUP_ID = null;
							set_departament_tmp.SECRECY_GROUP_ID = null;
							set_departament_tmp.CREATION_DATE = null;
							set_departament_tmp.CREATION_USER_ID = null;
							set_departament_tmp.LAST_UPDATE_DATE = null;
							set_departament_tmp.LAST_UPDATE_USER_ID = null;
							set_departament_tmp.DESCRIPTION = null;
							set_departament_tmp.SIGNATURE_USER_ID_SECONDARY = null;
							set_departament = set_departament_tmp;

// # Output table : 'set_section'
							set_section_tmp.ROW_VERSION = new BigDecimal("1");
							set_section_tmp.OFFICE_DIVISION_CODE = "DIN";
							set_section_tmp.OFFICE_DEPARTMENT_CODE = "MA";
							set_section_tmp.OFFICE_SECTION_CODE = "EX";
							set_section_tmp.OFFICE_SECTION_NAME = "Examen de Marcas";
							set_section_tmp.SIGNATURE_USER_ID = null;
							set_section_tmp.IND_DELIVERY_ANY_MEMBER = null;
							set_section_tmp.IND_DELIVERY_IGNORE = null;
							set_section_tmp.XML_DESIGNER = null;
							set_section_tmp.SIGNATURE_GROUP_ID = null;
							set_section_tmp.SECRECY_GROUP_ID = null;
							set_section_tmp.CREATION_DATE = null;
							set_section_tmp.CREATION_USER_ID = null;
							set_section_tmp.LAST_UPDATE_DATE = null;
							set_section_tmp.LAST_UPDATE_USER_ID = null;
							set_section_tmp.DESCRIPTION = null;
							set_section_tmp.SIGNATURE_USER_ID_SECONDARY = null;
							set_section = set_section_tmp;
// ###############################

						} // end of Var scope

						rejectedInnerJoin_tMap_1 = false;

						tos_count_tMap_1++;

						/**
						 * [tMap_1 main ] stop
						 */

						/**
						 * [tMap_1 process_data_begin ] start
						 */

						currentComponent = "tMap_1";

						/**
						 * [tMap_1 process_data_begin ] stop
						 */
// Start of branch "set_division"
						if (set_division != null) {

							/**
							 * [tDBOutput_2 main ] start
							 */

							currentComponent = "tDBOutput_2";

							if (execStat) {
								runStat.updateStatOnConnection(iterateId, 1, 1

										, "set_division"

								);
							}

							whetherReject_tDBOutput_2 = false;

							if (set_division.OFFICE_DIVISION_CODE == null) {
								pstmt_tDBOutput_2.setNull(1, java.sql.Types.VARCHAR);
							} else {
								pstmt_tDBOutput_2.setString(1, set_division.OFFICE_DIVISION_CODE);
							}

							int checkCount_tDBOutput_2 = -1;
							try (java.sql.ResultSet rs_tDBOutput_2 = pstmt_tDBOutput_2.executeQuery()) {
								while (rs_tDBOutput_2.next()) {
									checkCount_tDBOutput_2 = rs_tDBOutput_2.getInt(1);
								}
							}
							if (checkCount_tDBOutput_2 > 0) {
								pstmtUpdate_tDBOutput_2.setBigDecimal(1, set_division.ROW_VERSION);

								if (set_division.OFFICE_DIVISION_NAME == null) {
									pstmtUpdate_tDBOutput_2.setNull(2, java.sql.Types.VARCHAR);
								} else {
									pstmtUpdate_tDBOutput_2.setString(2, set_division.OFFICE_DIVISION_NAME);
								}

								pstmtUpdate_tDBOutput_2.setBigDecimal(3, set_division.SIGNATURE_USER_ID);

								if (set_division.XML_DESIGNER == null) {
									pstmtUpdate_tDBOutput_2.setNull(4, java.sql.Types.VARCHAR);
								} else {
									pstmtUpdate_tDBOutput_2.setString(4, set_division.XML_DESIGNER);
								}

								pstmtUpdate_tDBOutput_2.setBigDecimal(5, set_division.SIGNATURE_GROUP_ID);

								pstmtUpdate_tDBOutput_2.setBigDecimal(6, set_division.SECRECY_GROUP_ID);

								if (set_division.CREATION_DATE != null) {
									pstmtUpdate_tDBOutput_2.setTimestamp(7,
											new java.sql.Timestamp(set_division.CREATION_DATE.getTime()));
								} else {
									pstmtUpdate_tDBOutput_2.setNull(7, java.sql.Types.TIMESTAMP);
								}

								pstmtUpdate_tDBOutput_2.setBigDecimal(8, set_division.CREATION_USER_ID);

								if (set_division.LAST_UPDATE_DATE != null) {
									pstmtUpdate_tDBOutput_2.setTimestamp(9,
											new java.sql.Timestamp(set_division.LAST_UPDATE_DATE.getTime()));
								} else {
									pstmtUpdate_tDBOutput_2.setNull(9, java.sql.Types.TIMESTAMP);
								}

								pstmtUpdate_tDBOutput_2.setBigDecimal(10, set_division.LAST_UPDATE_USER_ID);

								if (set_division.DESCRIPTION == null) {
									pstmtUpdate_tDBOutput_2.setNull(11, java.sql.Types.VARCHAR);
								} else {
									pstmtUpdate_tDBOutput_2.setString(11, set_division.DESCRIPTION);
								}

								pstmtUpdate_tDBOutput_2.setBigDecimal(12, set_division.SIGNATURE_USER_ID_SECONDARY);

								if (set_division.OFFICE_DIVISION_CODE == null) {
									pstmtUpdate_tDBOutput_2.setNull(13 + count_tDBOutput_2, java.sql.Types.VARCHAR);
								} else {
									pstmtUpdate_tDBOutput_2.setString(13 + count_tDBOutput_2,
											set_division.OFFICE_DIVISION_CODE);
								}

								try {
									int processedCount_tDBOutput_2 = pstmtUpdate_tDBOutput_2.executeUpdate();
									updatedCount_tDBOutput_2 += processedCount_tDBOutput_2;
									rowsToCommitCount_tDBOutput_2 += processedCount_tDBOutput_2;
									nb_line_tDBOutput_2++;

								} catch (java.lang.Exception e) {
									whetherReject_tDBOutput_2 = true;
									nb_line_tDBOutput_2++;

									System.err.println(e.getMessage());
								}
							} else {
								pstmtInsert_tDBOutput_2.setBigDecimal(1, set_division.ROW_VERSION);

								if (set_division.OFFICE_DIVISION_CODE == null) {
									pstmtInsert_tDBOutput_2.setNull(2, java.sql.Types.VARCHAR);
								} else {
									pstmtInsert_tDBOutput_2.setString(2, set_division.OFFICE_DIVISION_CODE);
								}

								if (set_division.OFFICE_DIVISION_NAME == null) {
									pstmtInsert_tDBOutput_2.setNull(3, java.sql.Types.VARCHAR);
								} else {
									pstmtInsert_tDBOutput_2.setString(3, set_division.OFFICE_DIVISION_NAME);
								}

								pstmtInsert_tDBOutput_2.setBigDecimal(4, set_division.SIGNATURE_USER_ID);

								if (set_division.XML_DESIGNER == null) {
									pstmtInsert_tDBOutput_2.setNull(5, java.sql.Types.VARCHAR);
								} else {
									pstmtInsert_tDBOutput_2.setString(5, set_division.XML_DESIGNER);
								}

								pstmtInsert_tDBOutput_2.setBigDecimal(6, set_division.SIGNATURE_GROUP_ID);

								pstmtInsert_tDBOutput_2.setBigDecimal(7, set_division.SECRECY_GROUP_ID);

								if (set_division.CREATION_DATE != null) {
									pstmtInsert_tDBOutput_2.setTimestamp(8,
											new java.sql.Timestamp(set_division.CREATION_DATE.getTime()));
								} else {
									pstmtInsert_tDBOutput_2.setNull(8, java.sql.Types.TIMESTAMP);
								}

								pstmtInsert_tDBOutput_2.setBigDecimal(9, set_division.CREATION_USER_ID);

								if (set_division.LAST_UPDATE_DATE != null) {
									pstmtInsert_tDBOutput_2.setTimestamp(10,
											new java.sql.Timestamp(set_division.LAST_UPDATE_DATE.getTime()));
								} else {
									pstmtInsert_tDBOutput_2.setNull(10, java.sql.Types.TIMESTAMP);
								}

								pstmtInsert_tDBOutput_2.setBigDecimal(11, set_division.LAST_UPDATE_USER_ID);

								if (set_division.DESCRIPTION == null) {
									pstmtInsert_tDBOutput_2.setNull(12, java.sql.Types.VARCHAR);
								} else {
									pstmtInsert_tDBOutput_2.setString(12, set_division.DESCRIPTION);
								}

								pstmtInsert_tDBOutput_2.setBigDecimal(13, set_division.SIGNATURE_USER_ID_SECONDARY);

								try {
									int processedCount_tDBOutput_2 = pstmtInsert_tDBOutput_2.executeUpdate();
									insertedCount_tDBOutput_2 += processedCount_tDBOutput_2;
									rowsToCommitCount_tDBOutput_2 += processedCount_tDBOutput_2;
									nb_line_tDBOutput_2++;
								} catch (java.lang.Exception e) {
									whetherReject_tDBOutput_2 = true;
									nb_line_tDBOutput_2++;

									System.err.println(e.getMessage());
								}
							}
							////////// batch execute by batch size///////
							class LimitBytesHelper_tDBOutput_2 {
								public int limitBytePart1(int counter, java.sql.PreparedStatement pstmt_tDBOutput_2)
										throws Exception {
									try {

										for (int countEach_tDBOutput_2 : pstmt_tDBOutput_2.executeBatch()) {
											if (countEach_tDBOutput_2 == -2 || countEach_tDBOutput_2 == -3) {
												break;
											}
											counter += countEach_tDBOutput_2;
										}

									} catch (java.sql.BatchUpdateException e) {

										int countSum_tDBOutput_2 = 0;
										for (int countEach_tDBOutput_2 : e.getUpdateCounts()) {
											counter += (countEach_tDBOutput_2 < 0 ? 0 : countEach_tDBOutput_2);
										}

										System.err.println(e.getMessage());

									}
									return counter;
								}

								public int limitBytePart2(int counter, java.sql.PreparedStatement pstmt_tDBOutput_2)
										throws Exception {
									try {

										for (int countEach_tDBOutput_2 : pstmt_tDBOutput_2.executeBatch()) {
											if (countEach_tDBOutput_2 == -2 || countEach_tDBOutput_2 == -3) {
												break;
											}
											counter += countEach_tDBOutput_2;
										}

									} catch (java.sql.BatchUpdateException e) {

										for (int countEach_tDBOutput_2 : e.getUpdateCounts()) {
											counter += (countEach_tDBOutput_2 < 0 ? 0 : countEach_tDBOutput_2);
										}

										System.err.println(e.getMessage());

									}
									return counter;
								}
							}

							//////////// commit every////////////

							tos_count_tDBOutput_2++;

							/**
							 * [tDBOutput_2 main ] stop
							 */

							/**
							 * [tDBOutput_2 process_data_begin ] start
							 */

							currentComponent = "tDBOutput_2";

							/**
							 * [tDBOutput_2 process_data_begin ] stop
							 */

							/**
							 * [tDBOutput_2 process_data_end ] start
							 */

							currentComponent = "tDBOutput_2";

							/**
							 * [tDBOutput_2 process_data_end ] stop
							 */

						} // End of branch "set_division"

// Start of branch "set_departament"
						if (set_departament != null) {

							/**
							 * [tDBOutput_1 main ] start
							 */

							currentComponent = "tDBOutput_1";

							if (execStat) {
								runStat.updateStatOnConnection(iterateId, 1, 1

										, "set_departament"

								);
							}

							whetherReject_tDBOutput_1 = false;

							if (set_departament.OFFICE_DIVISION_CODE == null) {
								pstmt_tDBOutput_1.setNull(1, java.sql.Types.VARCHAR);
							} else {
								pstmt_tDBOutput_1.setString(1, set_departament.OFFICE_DIVISION_CODE);
							}

							if (set_departament.OFFICE_DEPARTMENT_CODE == null) {
								pstmt_tDBOutput_1.setNull(2, java.sql.Types.VARCHAR);
							} else {
								pstmt_tDBOutput_1.setString(2, set_departament.OFFICE_DEPARTMENT_CODE);
							}

							int checkCount_tDBOutput_1 = -1;
							try (java.sql.ResultSet rs_tDBOutput_1 = pstmt_tDBOutput_1.executeQuery()) {
								while (rs_tDBOutput_1.next()) {
									checkCount_tDBOutput_1 = rs_tDBOutput_1.getInt(1);
								}
							}
							if (checkCount_tDBOutput_1 > 0) {
								pstmtUpdate_tDBOutput_1.setBigDecimal(1, set_departament.ROW_VERSION);

								if (set_departament.OFFICE_DEPARTMENT_NAME == null) {
									pstmtUpdate_tDBOutput_1.setNull(2, java.sql.Types.VARCHAR);
								} else {
									pstmtUpdate_tDBOutput_1.setString(2, set_departament.OFFICE_DEPARTMENT_NAME);
								}

								pstmtUpdate_tDBOutput_1.setBigDecimal(3, set_departament.SIGNATURE_USER_ID);

								if (set_departament.XML_DESIGNER == null) {
									pstmtUpdate_tDBOutput_1.setNull(4, java.sql.Types.VARCHAR);
								} else {
									pstmtUpdate_tDBOutput_1.setString(4, set_departament.XML_DESIGNER);
								}

								pstmtUpdate_tDBOutput_1.setBigDecimal(5, set_departament.SIGNATURE_GROUP_ID);

								pstmtUpdate_tDBOutput_1.setBigDecimal(6, set_departament.SECRECY_GROUP_ID);

								if (set_departament.CREATION_DATE != null) {
									pstmtUpdate_tDBOutput_1.setTimestamp(7,
											new java.sql.Timestamp(set_departament.CREATION_DATE.getTime()));
								} else {
									pstmtUpdate_tDBOutput_1.setNull(7, java.sql.Types.TIMESTAMP);
								}

								pstmtUpdate_tDBOutput_1.setBigDecimal(8, set_departament.CREATION_USER_ID);

								if (set_departament.LAST_UPDATE_DATE != null) {
									pstmtUpdate_tDBOutput_1.setTimestamp(9,
											new java.sql.Timestamp(set_departament.LAST_UPDATE_DATE.getTime()));
								} else {
									pstmtUpdate_tDBOutput_1.setNull(9, java.sql.Types.TIMESTAMP);
								}

								pstmtUpdate_tDBOutput_1.setBigDecimal(10, set_departament.LAST_UPDATE_USER_ID);

								if (set_departament.DESCRIPTION == null) {
									pstmtUpdate_tDBOutput_1.setNull(11, java.sql.Types.VARCHAR);
								} else {
									pstmtUpdate_tDBOutput_1.setString(11, set_departament.DESCRIPTION);
								}

								pstmtUpdate_tDBOutput_1.setBigDecimal(12, set_departament.SIGNATURE_USER_ID_SECONDARY);

								if (set_departament.OFFICE_DIVISION_CODE == null) {
									pstmtUpdate_tDBOutput_1.setNull(13 + count_tDBOutput_1, java.sql.Types.VARCHAR);
								} else {
									pstmtUpdate_tDBOutput_1.setString(13 + count_tDBOutput_1,
											set_departament.OFFICE_DIVISION_CODE);
								}

								if (set_departament.OFFICE_DEPARTMENT_CODE == null) {
									pstmtUpdate_tDBOutput_1.setNull(14 + count_tDBOutput_1, java.sql.Types.VARCHAR);
								} else {
									pstmtUpdate_tDBOutput_1.setString(14 + count_tDBOutput_1,
											set_departament.OFFICE_DEPARTMENT_CODE);
								}

								try {
									int processedCount_tDBOutput_1 = pstmtUpdate_tDBOutput_1.executeUpdate();
									updatedCount_tDBOutput_1 += processedCount_tDBOutput_1;
									rowsToCommitCount_tDBOutput_1 += processedCount_tDBOutput_1;
									nb_line_tDBOutput_1++;

								} catch (java.lang.Exception e) {
									whetherReject_tDBOutput_1 = true;
									nb_line_tDBOutput_1++;

									System.err.println(e.getMessage());
								}
							} else {
								pstmtInsert_tDBOutput_1.setBigDecimal(1, set_departament.ROW_VERSION);

								if (set_departament.OFFICE_DIVISION_CODE == null) {
									pstmtInsert_tDBOutput_1.setNull(2, java.sql.Types.VARCHAR);
								} else {
									pstmtInsert_tDBOutput_1.setString(2, set_departament.OFFICE_DIVISION_CODE);
								}

								if (set_departament.OFFICE_DEPARTMENT_CODE == null) {
									pstmtInsert_tDBOutput_1.setNull(3, java.sql.Types.VARCHAR);
								} else {
									pstmtInsert_tDBOutput_1.setString(3, set_departament.OFFICE_DEPARTMENT_CODE);
								}

								if (set_departament.OFFICE_DEPARTMENT_NAME == null) {
									pstmtInsert_tDBOutput_1.setNull(4, java.sql.Types.VARCHAR);
								} else {
									pstmtInsert_tDBOutput_1.setString(4, set_departament.OFFICE_DEPARTMENT_NAME);
								}

								pstmtInsert_tDBOutput_1.setBigDecimal(5, set_departament.SIGNATURE_USER_ID);

								if (set_departament.XML_DESIGNER == null) {
									pstmtInsert_tDBOutput_1.setNull(6, java.sql.Types.VARCHAR);
								} else {
									pstmtInsert_tDBOutput_1.setString(6, set_departament.XML_DESIGNER);
								}

								pstmtInsert_tDBOutput_1.setBigDecimal(7, set_departament.SIGNATURE_GROUP_ID);

								pstmtInsert_tDBOutput_1.setBigDecimal(8, set_departament.SECRECY_GROUP_ID);

								if (set_departament.CREATION_DATE != null) {
									pstmtInsert_tDBOutput_1.setTimestamp(9,
											new java.sql.Timestamp(set_departament.CREATION_DATE.getTime()));
								} else {
									pstmtInsert_tDBOutput_1.setNull(9, java.sql.Types.TIMESTAMP);
								}

								pstmtInsert_tDBOutput_1.setBigDecimal(10, set_departament.CREATION_USER_ID);

								if (set_departament.LAST_UPDATE_DATE != null) {
									pstmtInsert_tDBOutput_1.setTimestamp(11,
											new java.sql.Timestamp(set_departament.LAST_UPDATE_DATE.getTime()));
								} else {
									pstmtInsert_tDBOutput_1.setNull(11, java.sql.Types.TIMESTAMP);
								}

								pstmtInsert_tDBOutput_1.setBigDecimal(12, set_departament.LAST_UPDATE_USER_ID);

								if (set_departament.DESCRIPTION == null) {
									pstmtInsert_tDBOutput_1.setNull(13, java.sql.Types.VARCHAR);
								} else {
									pstmtInsert_tDBOutput_1.setString(13, set_departament.DESCRIPTION);
								}

								pstmtInsert_tDBOutput_1.setBigDecimal(14, set_departament.SIGNATURE_USER_ID_SECONDARY);

								try {
									int processedCount_tDBOutput_1 = pstmtInsert_tDBOutput_1.executeUpdate();
									insertedCount_tDBOutput_1 += processedCount_tDBOutput_1;
									rowsToCommitCount_tDBOutput_1 += processedCount_tDBOutput_1;
									nb_line_tDBOutput_1++;
								} catch (java.lang.Exception e) {
									whetherReject_tDBOutput_1 = true;
									nb_line_tDBOutput_1++;

									System.err.println(e.getMessage());
								}
							}
							////////// batch execute by batch size///////
							class LimitBytesHelper_tDBOutput_1 {
								public int limitBytePart1(int counter, java.sql.PreparedStatement pstmt_tDBOutput_1)
										throws Exception {
									try {

										for (int countEach_tDBOutput_1 : pstmt_tDBOutput_1.executeBatch()) {
											if (countEach_tDBOutput_1 == -2 || countEach_tDBOutput_1 == -3) {
												break;
											}
											counter += countEach_tDBOutput_1;
										}

									} catch (java.sql.BatchUpdateException e) {

										int countSum_tDBOutput_1 = 0;
										for (int countEach_tDBOutput_1 : e.getUpdateCounts()) {
											counter += (countEach_tDBOutput_1 < 0 ? 0 : countEach_tDBOutput_1);
										}

										System.err.println(e.getMessage());

									}
									return counter;
								}

								public int limitBytePart2(int counter, java.sql.PreparedStatement pstmt_tDBOutput_1)
										throws Exception {
									try {

										for (int countEach_tDBOutput_1 : pstmt_tDBOutput_1.executeBatch()) {
											if (countEach_tDBOutput_1 == -2 || countEach_tDBOutput_1 == -3) {
												break;
											}
											counter += countEach_tDBOutput_1;
										}

									} catch (java.sql.BatchUpdateException e) {

										for (int countEach_tDBOutput_1 : e.getUpdateCounts()) {
											counter += (countEach_tDBOutput_1 < 0 ? 0 : countEach_tDBOutput_1);
										}

										System.err.println(e.getMessage());

									}
									return counter;
								}
							}

							//////////// commit every////////////

							tos_count_tDBOutput_1++;

							/**
							 * [tDBOutput_1 main ] stop
							 */

							/**
							 * [tDBOutput_1 process_data_begin ] start
							 */

							currentComponent = "tDBOutput_1";

							/**
							 * [tDBOutput_1 process_data_begin ] stop
							 */

							/**
							 * [tDBOutput_1 process_data_end ] start
							 */

							currentComponent = "tDBOutput_1";

							/**
							 * [tDBOutput_1 process_data_end ] stop
							 */

						} // End of branch "set_departament"

// Start of branch "set_section"
						if (set_section != null) {

							/**
							 * [tDBOutput_3 main ] start
							 */

							currentComponent = "tDBOutput_3";

							if (execStat) {
								runStat.updateStatOnConnection(iterateId, 1, 1

										, "set_section"

								);
							}

							whetherReject_tDBOutput_3 = false;

							if (set_section.OFFICE_DIVISION_CODE == null) {
								pstmt_tDBOutput_3.setNull(1, java.sql.Types.VARCHAR);
							} else {
								pstmt_tDBOutput_3.setString(1, set_section.OFFICE_DIVISION_CODE);
							}

							if (set_section.OFFICE_DEPARTMENT_CODE == null) {
								pstmt_tDBOutput_3.setNull(2, java.sql.Types.VARCHAR);
							} else {
								pstmt_tDBOutput_3.setString(2, set_section.OFFICE_DEPARTMENT_CODE);
							}

							if (set_section.OFFICE_SECTION_CODE == null) {
								pstmt_tDBOutput_3.setNull(3, java.sql.Types.VARCHAR);
							} else {
								pstmt_tDBOutput_3.setString(3, set_section.OFFICE_SECTION_CODE);
							}

							int checkCount_tDBOutput_3 = -1;
							try (java.sql.ResultSet rs_tDBOutput_3 = pstmt_tDBOutput_3.executeQuery()) {
								while (rs_tDBOutput_3.next()) {
									checkCount_tDBOutput_3 = rs_tDBOutput_3.getInt(1);
								}
							}
							if (checkCount_tDBOutput_3 > 0) {
								pstmtUpdate_tDBOutput_3.setBigDecimal(1, set_section.ROW_VERSION);

								if (set_section.OFFICE_SECTION_NAME == null) {
									pstmtUpdate_tDBOutput_3.setNull(2, java.sql.Types.VARCHAR);
								} else {
									pstmtUpdate_tDBOutput_3.setString(2, set_section.OFFICE_SECTION_NAME);
								}

								pstmtUpdate_tDBOutput_3.setBigDecimal(3, set_section.SIGNATURE_USER_ID);

								if (set_section.IND_DELIVERY_ANY_MEMBER == null) {
									pstmtUpdate_tDBOutput_3.setNull(4, java.sql.Types.VARCHAR);
								} else {
									pstmtUpdate_tDBOutput_3.setString(4, set_section.IND_DELIVERY_ANY_MEMBER);
								}

								if (set_section.IND_DELIVERY_IGNORE == null) {
									pstmtUpdate_tDBOutput_3.setNull(5, java.sql.Types.VARCHAR);
								} else {
									pstmtUpdate_tDBOutput_3.setString(5, set_section.IND_DELIVERY_IGNORE);
								}

								if (set_section.XML_DESIGNER == null) {
									pstmtUpdate_tDBOutput_3.setNull(6, java.sql.Types.VARCHAR);
								} else {
									pstmtUpdate_tDBOutput_3.setString(6, set_section.XML_DESIGNER);
								}

								pstmtUpdate_tDBOutput_3.setBigDecimal(7, set_section.SIGNATURE_GROUP_ID);

								pstmtUpdate_tDBOutput_3.setBigDecimal(8, set_section.SECRECY_GROUP_ID);

								if (set_section.CREATION_DATE != null) {
									pstmtUpdate_tDBOutput_3.setTimestamp(9,
											new java.sql.Timestamp(set_section.CREATION_DATE.getTime()));
								} else {
									pstmtUpdate_tDBOutput_3.setNull(9, java.sql.Types.TIMESTAMP);
								}

								pstmtUpdate_tDBOutput_3.setBigDecimal(10, set_section.CREATION_USER_ID);

								if (set_section.LAST_UPDATE_DATE != null) {
									pstmtUpdate_tDBOutput_3.setTimestamp(11,
											new java.sql.Timestamp(set_section.LAST_UPDATE_DATE.getTime()));
								} else {
									pstmtUpdate_tDBOutput_3.setNull(11, java.sql.Types.TIMESTAMP);
								}

								pstmtUpdate_tDBOutput_3.setBigDecimal(12, set_section.LAST_UPDATE_USER_ID);

								if (set_section.DESCRIPTION == null) {
									pstmtUpdate_tDBOutput_3.setNull(13, java.sql.Types.VARCHAR);
								} else {
									pstmtUpdate_tDBOutput_3.setString(13, set_section.DESCRIPTION);
								}

								pstmtUpdate_tDBOutput_3.setBigDecimal(14, set_section.SIGNATURE_USER_ID_SECONDARY);

								if (set_section.OFFICE_DIVISION_CODE == null) {
									pstmtUpdate_tDBOutput_3.setNull(15 + count_tDBOutput_3, java.sql.Types.VARCHAR);
								} else {
									pstmtUpdate_tDBOutput_3.setString(15 + count_tDBOutput_3,
											set_section.OFFICE_DIVISION_CODE);
								}

								if (set_section.OFFICE_DEPARTMENT_CODE == null) {
									pstmtUpdate_tDBOutput_3.setNull(16 + count_tDBOutput_3, java.sql.Types.VARCHAR);
								} else {
									pstmtUpdate_tDBOutput_3.setString(16 + count_tDBOutput_3,
											set_section.OFFICE_DEPARTMENT_CODE);
								}

								if (set_section.OFFICE_SECTION_CODE == null) {
									pstmtUpdate_tDBOutput_3.setNull(17 + count_tDBOutput_3, java.sql.Types.VARCHAR);
								} else {
									pstmtUpdate_tDBOutput_3.setString(17 + count_tDBOutput_3,
											set_section.OFFICE_SECTION_CODE);
								}

								try {
									int processedCount_tDBOutput_3 = pstmtUpdate_tDBOutput_3.executeUpdate();
									updatedCount_tDBOutput_3 += processedCount_tDBOutput_3;
									rowsToCommitCount_tDBOutput_3 += processedCount_tDBOutput_3;
									nb_line_tDBOutput_3++;

								} catch (java.lang.Exception e) {
									whetherReject_tDBOutput_3 = true;
									nb_line_tDBOutput_3++;

									System.err.println(e.getMessage());
								}
							} else {
								pstmtInsert_tDBOutput_3.setBigDecimal(1, set_section.ROW_VERSION);

								if (set_section.OFFICE_DIVISION_CODE == null) {
									pstmtInsert_tDBOutput_3.setNull(2, java.sql.Types.VARCHAR);
								} else {
									pstmtInsert_tDBOutput_3.setString(2, set_section.OFFICE_DIVISION_CODE);
								}

								if (set_section.OFFICE_DEPARTMENT_CODE == null) {
									pstmtInsert_tDBOutput_3.setNull(3, java.sql.Types.VARCHAR);
								} else {
									pstmtInsert_tDBOutput_3.setString(3, set_section.OFFICE_DEPARTMENT_CODE);
								}

								if (set_section.OFFICE_SECTION_CODE == null) {
									pstmtInsert_tDBOutput_3.setNull(4, java.sql.Types.VARCHAR);
								} else {
									pstmtInsert_tDBOutput_3.setString(4, set_section.OFFICE_SECTION_CODE);
								}

								if (set_section.OFFICE_SECTION_NAME == null) {
									pstmtInsert_tDBOutput_3.setNull(5, java.sql.Types.VARCHAR);
								} else {
									pstmtInsert_tDBOutput_3.setString(5, set_section.OFFICE_SECTION_NAME);
								}

								pstmtInsert_tDBOutput_3.setBigDecimal(6, set_section.SIGNATURE_USER_ID);

								if (set_section.IND_DELIVERY_ANY_MEMBER == null) {
									pstmtInsert_tDBOutput_3.setNull(7, java.sql.Types.VARCHAR);
								} else {
									pstmtInsert_tDBOutput_3.setString(7, set_section.IND_DELIVERY_ANY_MEMBER);
								}

								if (set_section.IND_DELIVERY_IGNORE == null) {
									pstmtInsert_tDBOutput_3.setNull(8, java.sql.Types.VARCHAR);
								} else {
									pstmtInsert_tDBOutput_3.setString(8, set_section.IND_DELIVERY_IGNORE);
								}

								if (set_section.XML_DESIGNER == null) {
									pstmtInsert_tDBOutput_3.setNull(9, java.sql.Types.VARCHAR);
								} else {
									pstmtInsert_tDBOutput_3.setString(9, set_section.XML_DESIGNER);
								}

								pstmtInsert_tDBOutput_3.setBigDecimal(10, set_section.SIGNATURE_GROUP_ID);

								pstmtInsert_tDBOutput_3.setBigDecimal(11, set_section.SECRECY_GROUP_ID);

								if (set_section.CREATION_DATE != null) {
									pstmtInsert_tDBOutput_3.setTimestamp(12,
											new java.sql.Timestamp(set_section.CREATION_DATE.getTime()));
								} else {
									pstmtInsert_tDBOutput_3.setNull(12, java.sql.Types.TIMESTAMP);
								}

								pstmtInsert_tDBOutput_3.setBigDecimal(13, set_section.CREATION_USER_ID);

								if (set_section.LAST_UPDATE_DATE != null) {
									pstmtInsert_tDBOutput_3.setTimestamp(14,
											new java.sql.Timestamp(set_section.LAST_UPDATE_DATE.getTime()));
								} else {
									pstmtInsert_tDBOutput_3.setNull(14, java.sql.Types.TIMESTAMP);
								}

								pstmtInsert_tDBOutput_3.setBigDecimal(15, set_section.LAST_UPDATE_USER_ID);

								if (set_section.DESCRIPTION == null) {
									pstmtInsert_tDBOutput_3.setNull(16, java.sql.Types.VARCHAR);
								} else {
									pstmtInsert_tDBOutput_3.setString(16, set_section.DESCRIPTION);
								}

								pstmtInsert_tDBOutput_3.setBigDecimal(17, set_section.SIGNATURE_USER_ID_SECONDARY);

								try {
									int processedCount_tDBOutput_3 = pstmtInsert_tDBOutput_3.executeUpdate();
									insertedCount_tDBOutput_3 += processedCount_tDBOutput_3;
									rowsToCommitCount_tDBOutput_3 += processedCount_tDBOutput_3;
									nb_line_tDBOutput_3++;
								} catch (java.lang.Exception e) {
									whetherReject_tDBOutput_3 = true;
									nb_line_tDBOutput_3++;

									System.err.println(e.getMessage());
								}
							}
							////////// batch execute by batch size///////
							class LimitBytesHelper_tDBOutput_3 {
								public int limitBytePart1(int counter, java.sql.PreparedStatement pstmt_tDBOutput_3)
										throws Exception {
									try {

										for (int countEach_tDBOutput_3 : pstmt_tDBOutput_3.executeBatch()) {
											if (countEach_tDBOutput_3 == -2 || countEach_tDBOutput_3 == -3) {
												break;
											}
											counter += countEach_tDBOutput_3;
										}

									} catch (java.sql.BatchUpdateException e) {

										int countSum_tDBOutput_3 = 0;
										for (int countEach_tDBOutput_3 : e.getUpdateCounts()) {
											counter += (countEach_tDBOutput_3 < 0 ? 0 : countEach_tDBOutput_3);
										}

										System.err.println(e.getMessage());

									}
									return counter;
								}

								public int limitBytePart2(int counter, java.sql.PreparedStatement pstmt_tDBOutput_3)
										throws Exception {
									try {

										for (int countEach_tDBOutput_3 : pstmt_tDBOutput_3.executeBatch()) {
											if (countEach_tDBOutput_3 == -2 || countEach_tDBOutput_3 == -3) {
												break;
											}
											counter += countEach_tDBOutput_3;
										}

									} catch (java.sql.BatchUpdateException e) {

										for (int countEach_tDBOutput_3 : e.getUpdateCounts()) {
											counter += (countEach_tDBOutput_3 < 0 ? 0 : countEach_tDBOutput_3);
										}

										System.err.println(e.getMessage());

									}
									return counter;
								}
							}

							//////////// commit every////////////

							tos_count_tDBOutput_3++;

							/**
							 * [tDBOutput_3 main ] stop
							 */

							/**
							 * [tDBOutput_3 process_data_begin ] start
							 */

							currentComponent = "tDBOutput_3";

							/**
							 * [tDBOutput_3 process_data_begin ] stop
							 */

							/**
							 * [tDBOutput_3 process_data_end ] start
							 */

							currentComponent = "tDBOutput_3";

							/**
							 * [tDBOutput_3 process_data_end ] stop
							 */

						} // End of branch "set_section"

						/**
						 * [tMap_1 process_data_end ] start
						 */

						currentComponent = "tMap_1";

						/**
						 * [tMap_1 process_data_end ] stop
						 */

						/**
						 * [tDBInput_1 process_data_end ] start
						 */

						currentComponent = "tDBInput_1";

						/**
						 * [tDBInput_1 process_data_end ] stop
						 */

						/**
						 * [tDBInput_1 end ] start
						 */

						currentComponent = "tDBInput_1";

					}
				} finally {
					if (rs_tDBInput_1 != null) {
						rs_tDBInput_1.close();
					}
					if (stmt_tDBInput_1 != null) {
						stmt_tDBInput_1.close();
					}
				}
				globalMap.put("tDBInput_1_NB_LINE", nb_line_tDBInput_1);

				ok_Hash.put("tDBInput_1", true);
				end_Hash.put("tDBInput_1", System.currentTimeMillis());

				/**
				 * [tDBInput_1 end ] stop
				 */

				/**
				 * [tMap_1 end ] start
				 */

				currentComponent = "tMap_1";

// ###############################
// # Lookup hashes releasing
// ###############################      

				if (execStat) {
					runStat.updateStat(resourceMap, iterateId, 2, 0, "row2");
				}

				ok_Hash.put("tMap_1", true);
				end_Hash.put("tMap_1", System.currentTimeMillis());

				/**
				 * [tMap_1 end ] stop
				 */

				/**
				 * [tDBOutput_2 end ] start
				 */

				currentComponent = "tDBOutput_2";

				if (pstmtUpdate_tDBOutput_2 != null) {
					pstmtUpdate_tDBOutput_2.close();
					resourceMap.remove("pstmtUpdate_tDBOutput_2");
				}
				if (pstmtInsert_tDBOutput_2 != null) {
					pstmtInsert_tDBOutput_2.close();
					resourceMap.remove("pstmtInsert_tDBOutput_2");
				}
				if (pstmt_tDBOutput_2 != null) {
					pstmt_tDBOutput_2.close();
					resourceMap.remove("pstmt_tDBOutput_2");
				}
				resourceMap.put("statementClosed_tDBOutput_2", true);

				nb_line_deleted_tDBOutput_2 = nb_line_deleted_tDBOutput_2 + deletedCount_tDBOutput_2;
				nb_line_update_tDBOutput_2 = nb_line_update_tDBOutput_2 + updatedCount_tDBOutput_2;
				nb_line_inserted_tDBOutput_2 = nb_line_inserted_tDBOutput_2 + insertedCount_tDBOutput_2;
				nb_line_rejected_tDBOutput_2 = nb_line_rejected_tDBOutput_2 + rejectedCount_tDBOutput_2;

				globalMap.put("tDBOutput_2_NB_LINE", nb_line_tDBOutput_2);
				globalMap.put("tDBOutput_2_NB_LINE_UPDATED", nb_line_update_tDBOutput_2);
				globalMap.put("tDBOutput_2_NB_LINE_INSERTED", nb_line_inserted_tDBOutput_2);
				globalMap.put("tDBOutput_2_NB_LINE_DELETED", nb_line_deleted_tDBOutput_2);
				globalMap.put("tDBOutput_2_NB_LINE_REJECTED", nb_line_rejected_tDBOutput_2);

				if (execStat) {
					runStat.updateStat(resourceMap, iterateId, 2, 0, "set_division");
				}

				ok_Hash.put("tDBOutput_2", true);
				end_Hash.put("tDBOutput_2", System.currentTimeMillis());

				/**
				 * [tDBOutput_2 end ] stop
				 */

				/**
				 * [tDBOutput_1 end ] start
				 */

				currentComponent = "tDBOutput_1";

				if (pstmtUpdate_tDBOutput_1 != null) {
					pstmtUpdate_tDBOutput_1.close();
					resourceMap.remove("pstmtUpdate_tDBOutput_1");
				}
				if (pstmtInsert_tDBOutput_1 != null) {
					pstmtInsert_tDBOutput_1.close();
					resourceMap.remove("pstmtInsert_tDBOutput_1");
				}
				if (pstmt_tDBOutput_1 != null) {
					pstmt_tDBOutput_1.close();
					resourceMap.remove("pstmt_tDBOutput_1");
				}
				resourceMap.put("statementClosed_tDBOutput_1", true);

				nb_line_deleted_tDBOutput_1 = nb_line_deleted_tDBOutput_1 + deletedCount_tDBOutput_1;
				nb_line_update_tDBOutput_1 = nb_line_update_tDBOutput_1 + updatedCount_tDBOutput_1;
				nb_line_inserted_tDBOutput_1 = nb_line_inserted_tDBOutput_1 + insertedCount_tDBOutput_1;
				nb_line_rejected_tDBOutput_1 = nb_line_rejected_tDBOutput_1 + rejectedCount_tDBOutput_1;

				globalMap.put("tDBOutput_1_NB_LINE", nb_line_tDBOutput_1);
				globalMap.put("tDBOutput_1_NB_LINE_UPDATED", nb_line_update_tDBOutput_1);
				globalMap.put("tDBOutput_1_NB_LINE_INSERTED", nb_line_inserted_tDBOutput_1);
				globalMap.put("tDBOutput_1_NB_LINE_DELETED", nb_line_deleted_tDBOutput_1);
				globalMap.put("tDBOutput_1_NB_LINE_REJECTED", nb_line_rejected_tDBOutput_1);

				if (execStat) {
					runStat.updateStat(resourceMap, iterateId, 2, 0, "set_departament");
				}

				ok_Hash.put("tDBOutput_1", true);
				end_Hash.put("tDBOutput_1", System.currentTimeMillis());

				/**
				 * [tDBOutput_1 end ] stop
				 */

				/**
				 * [tDBOutput_3 end ] start
				 */

				currentComponent = "tDBOutput_3";

				if (pstmtUpdate_tDBOutput_3 != null) {
					pstmtUpdate_tDBOutput_3.close();
					resourceMap.remove("pstmtUpdate_tDBOutput_3");
				}
				if (pstmtInsert_tDBOutput_3 != null) {
					pstmtInsert_tDBOutput_3.close();
					resourceMap.remove("pstmtInsert_tDBOutput_3");
				}
				if (pstmt_tDBOutput_3 != null) {
					pstmt_tDBOutput_3.close();
					resourceMap.remove("pstmt_tDBOutput_3");
				}
				resourceMap.put("statementClosed_tDBOutput_3", true);

				nb_line_deleted_tDBOutput_3 = nb_line_deleted_tDBOutput_3 + deletedCount_tDBOutput_3;
				nb_line_update_tDBOutput_3 = nb_line_update_tDBOutput_3 + updatedCount_tDBOutput_3;
				nb_line_inserted_tDBOutput_3 = nb_line_inserted_tDBOutput_3 + insertedCount_tDBOutput_3;
				nb_line_rejected_tDBOutput_3 = nb_line_rejected_tDBOutput_3 + rejectedCount_tDBOutput_3;

				globalMap.put("tDBOutput_3_NB_LINE", nb_line_tDBOutput_3);
				globalMap.put("tDBOutput_3_NB_LINE_UPDATED", nb_line_update_tDBOutput_3);
				globalMap.put("tDBOutput_3_NB_LINE_INSERTED", nb_line_inserted_tDBOutput_3);
				globalMap.put("tDBOutput_3_NB_LINE_DELETED", nb_line_deleted_tDBOutput_3);
				globalMap.put("tDBOutput_3_NB_LINE_REJECTED", nb_line_rejected_tDBOutput_3);

				if (execStat) {
					runStat.updateStat(resourceMap, iterateId, 2, 0, "set_section");
				}

				ok_Hash.put("tDBOutput_3", true);
				end_Hash.put("tDBOutput_3", System.currentTimeMillis());

				/**
				 * [tDBOutput_3 end ] stop
				 */

			} // end the resume

			if (resumeEntryMethodName == null || globalResumeTicket) {
				resumeUtil.addLog("CHECKPOINT", "CONNECTION:SUBJOB_OK:tDBInput_1:OnSubjobOk", "",
						Thread.currentThread().getId() + "", "", "", "", "", "");
			}

			if (execStat) {
				runStat.updateStatOnConnection("OnSubjobOk16", 0, "ok");
			}

			tDBInput_9Process(globalMap);

		} catch (java.lang.Exception e) {

			TalendException te = new TalendException(e, currentComponent, globalMap);

			throw te;
		} catch (java.lang.Error error) {

			runStat.stopThreadStat();

			throw error;
		} finally {

			try {

				/**
				 * [tDBInput_1 finally ] start
				 */

				currentComponent = "tDBInput_1";

				/**
				 * [tDBInput_1 finally ] stop
				 */

				/**
				 * [tMap_1 finally ] start
				 */

				currentComponent = "tMap_1";

				/**
				 * [tMap_1 finally ] stop
				 */

				/**
				 * [tDBOutput_2 finally ] start
				 */

				currentComponent = "tDBOutput_2";

				if (resourceMap.get("statementClosed_tDBOutput_2") == null) {
					java.sql.PreparedStatement pstmtUpdateToClose_tDBOutput_2 = null;
					if ((pstmtUpdateToClose_tDBOutput_2 = (java.sql.PreparedStatement) resourceMap
							.remove("pstmtUpdate_tDBOutput_2")) != null) {
						pstmtUpdateToClose_tDBOutput_2.close();
					}
					java.sql.PreparedStatement pstmtInsertToClose_tDBOutput_2 = null;
					if ((pstmtInsertToClose_tDBOutput_2 = (java.sql.PreparedStatement) resourceMap
							.remove("pstmtInsert_tDBOutput_2")) != null) {
						pstmtInsertToClose_tDBOutput_2.close();
					}
					java.sql.PreparedStatement pstmtToClose_tDBOutput_2 = null;
					if ((pstmtToClose_tDBOutput_2 = (java.sql.PreparedStatement) resourceMap
							.remove("pstmt_tDBOutput_2")) != null) {
						pstmtToClose_tDBOutput_2.close();
					}
				}

				/**
				 * [tDBOutput_2 finally ] stop
				 */

				/**
				 * [tDBOutput_1 finally ] start
				 */

				currentComponent = "tDBOutput_1";

				if (resourceMap.get("statementClosed_tDBOutput_1") == null) {
					java.sql.PreparedStatement pstmtUpdateToClose_tDBOutput_1 = null;
					if ((pstmtUpdateToClose_tDBOutput_1 = (java.sql.PreparedStatement) resourceMap
							.remove("pstmtUpdate_tDBOutput_1")) != null) {
						pstmtUpdateToClose_tDBOutput_1.close();
					}
					java.sql.PreparedStatement pstmtInsertToClose_tDBOutput_1 = null;
					if ((pstmtInsertToClose_tDBOutput_1 = (java.sql.PreparedStatement) resourceMap
							.remove("pstmtInsert_tDBOutput_1")) != null) {
						pstmtInsertToClose_tDBOutput_1.close();
					}
					java.sql.PreparedStatement pstmtToClose_tDBOutput_1 = null;
					if ((pstmtToClose_tDBOutput_1 = (java.sql.PreparedStatement) resourceMap
							.remove("pstmt_tDBOutput_1")) != null) {
						pstmtToClose_tDBOutput_1.close();
					}
				}

				/**
				 * [tDBOutput_1 finally ] stop
				 */

				/**
				 * [tDBOutput_3 finally ] start
				 */

				currentComponent = "tDBOutput_3";

				if (resourceMap.get("statementClosed_tDBOutput_3") == null) {
					java.sql.PreparedStatement pstmtUpdateToClose_tDBOutput_3 = null;
					if ((pstmtUpdateToClose_tDBOutput_3 = (java.sql.PreparedStatement) resourceMap
							.remove("pstmtUpdate_tDBOutput_3")) != null) {
						pstmtUpdateToClose_tDBOutput_3.close();
					}
					java.sql.PreparedStatement pstmtInsertToClose_tDBOutput_3 = null;
					if ((pstmtInsertToClose_tDBOutput_3 = (java.sql.PreparedStatement) resourceMap
							.remove("pstmtInsert_tDBOutput_3")) != null) {
						pstmtInsertToClose_tDBOutput_3.close();
					}
					java.sql.PreparedStatement pstmtToClose_tDBOutput_3 = null;
					if ((pstmtToClose_tDBOutput_3 = (java.sql.PreparedStatement) resourceMap
							.remove("pstmt_tDBOutput_3")) != null) {
						pstmtToClose_tDBOutput_3.close();
					}
				}

				/**
				 * [tDBOutput_3 finally ] stop
				 */

			} catch (java.lang.Exception e) {
				// ignore
			} catch (java.lang.Error error) {
				// ignore
			}
			resourceMap = null;
		}

		globalMap.put("tDBInput_1_SUBPROCESS_STATE", 1);
	}

	public static class row15Struct implements routines.system.IPersistableRow<row15Struct> {
		final static byte[] commonByteArrayLock_WIPO_PROJECTS_A1_Copy_users_to_ipas = new byte[0];
		static byte[] commonByteArray_WIPO_PROJECTS_A1_Copy_users_to_ipas = new byte[0];
		protected static final int DEFAULT_HASHCODE = 1;
		protected static final int PRIME = 31;
		protected int hashCode = DEFAULT_HASHCODE;
		public boolean hashCodeDirty = true;

		public String loopKey;

		public BigDecimal ROW_VERSION;

		public BigDecimal getROW_VERSION() {
			return this.ROW_VERSION;
		}

		public BigDecimal USER_ID;

		public BigDecimal getUSER_ID() {
			return this.USER_ID;
		}

		public String USER_NAME;

		public String getUSER_NAME() {
			return this.USER_NAME;
		}

		public String LOGIN;

		public String getLOGIN() {
			return this.LOGIN;
		}

		public String IND_ADMINISTRATOR;

		public String getIND_ADMINISTRATOR() {
			return this.IND_ADMINISTRATOR;
		}

		public String IND_EXAMINER;

		public String getIND_EXAMINER() {
			return this.IND_EXAMINER;
		}

		public String IND_INACTIVE;

		public String getIND_INACTIVE() {
			return this.IND_INACTIVE;
		}

		public String IND_EXTERNAL;

		public String getIND_EXTERNAL() {
			return this.IND_EXTERNAL;
		}

		public String OFFICE_DIVISION_CODE;

		public String getOFFICE_DIVISION_CODE() {
			return this.OFFICE_DIVISION_CODE;
		}

		public String OFFICE_DEPARTMENT_CODE;

		public String getOFFICE_DEPARTMENT_CODE() {
			return this.OFFICE_DEPARTMENT_CODE;
		}

		public String OFFICE_SECTION_CODE;

		public String getOFFICE_SECTION_CODE() {
			return this.OFFICE_SECTION_CODE;
		}

		public String INITIALS;

		public String getINITIALS() {
			return this.INITIALS;
		}

		public String FOOTER_DESCRIPTION;

		public String getFOOTER_DESCRIPTION() {
			return this.FOOTER_DESCRIPTION;
		}

		public BigDecimal QTY_WORK;

		public BigDecimal getQTY_WORK() {
			return this.QTY_WORK;
		}

		public String IND_TEST_USER;

		public String getIND_TEST_USER() {
			return this.IND_TEST_USER;
		}

		public String FORCE_DOC_ORI;

		public String getFORCE_DOC_ORI() {
			return this.FORCE_DOC_ORI;
		}

		public String LOGIN_PASSWORD;

		public String getLOGIN_PASSWORD() {
			return this.LOGIN_PASSWORD;
		}

		public java.util.Date LAST_LOGIN_DATE;

		public java.util.Date getLAST_LOGIN_DATE() {
			return this.LAST_LOGIN_DATE;
		}

		public String EMAIL;

		public String getEMAIL() {
			return this.EMAIL;
		}

		public String TELEPHONE;

		public String getTELEPHONE() {
			return this.TELEPHONE;
		}

		public String FULL_NAME;

		public String getFULL_NAME() {
			return this.FULL_NAME;
		}

		public String PERSONAL_ID;

		public String getPERSONAL_ID() {
			return this.PERSONAL_ID;
		}

		public java.util.Date CREATION_DATE;

		public java.util.Date getCREATION_DATE() {
			return this.CREATION_DATE;
		}

		public BigDecimal CREATION_USER_ID;

		public BigDecimal getCREATION_USER_ID() {
			return this.CREATION_USER_ID;
		}

		public java.util.Date LAST_UPDATE_DATE;

		public java.util.Date getLAST_UPDATE_DATE() {
			return this.LAST_UPDATE_DATE;
		}

		public BigDecimal LAST_UPDATE_USER_ID;

		public BigDecimal getLAST_UPDATE_USER_ID() {
			return this.LAST_UPDATE_USER_ID;
		}

		public String SIGNATURE_TYP;

		public String getSIGNATURE_TYP() {
			return this.SIGNATURE_TYP;
		}

		public Object SIGNATURE_DATA;

		public Object getSIGNATURE_DATA() {
			return this.SIGNATURE_DATA;
		}

		public String errorCode;

		public String getErrorCode() {
			return this.errorCode;
		}

		public String errorMessage;

		public String getErrorMessage() {
			return this.errorMessage;
		}

		@Override
		public int hashCode() {
			if (this.hashCodeDirty) {
				final int prime = PRIME;
				int result = DEFAULT_HASHCODE;

				result = prime * result + ((this.USER_ID == null) ? 0 : this.USER_ID.hashCode());

				this.hashCode = result;
				this.hashCodeDirty = false;
			}
			return this.hashCode;
		}

		@Override
		public boolean equals(Object obj) {
			if (this == obj)
				return true;
			if (obj == null)
				return false;
			if (getClass() != obj.getClass())
				return false;
			final row15Struct other = (row15Struct) obj;

			if (this.USER_ID == null) {
				if (other.USER_ID != null)
					return false;

			} else if (!this.USER_ID.equals(other.USER_ID))

				return false;

			return true;
		}

		public void copyDataTo(row15Struct other) {

			other.ROW_VERSION = this.ROW_VERSION;
			other.USER_ID = this.USER_ID;
			other.USER_NAME = this.USER_NAME;
			other.LOGIN = this.LOGIN;
			other.IND_ADMINISTRATOR = this.IND_ADMINISTRATOR;
			other.IND_EXAMINER = this.IND_EXAMINER;
			other.IND_INACTIVE = this.IND_INACTIVE;
			other.IND_EXTERNAL = this.IND_EXTERNAL;
			other.OFFICE_DIVISION_CODE = this.OFFICE_DIVISION_CODE;
			other.OFFICE_DEPARTMENT_CODE = this.OFFICE_DEPARTMENT_CODE;
			other.OFFICE_SECTION_CODE = this.OFFICE_SECTION_CODE;
			other.INITIALS = this.INITIALS;
			other.FOOTER_DESCRIPTION = this.FOOTER_DESCRIPTION;
			other.QTY_WORK = this.QTY_WORK;
			other.IND_TEST_USER = this.IND_TEST_USER;
			other.FORCE_DOC_ORI = this.FORCE_DOC_ORI;
			other.LOGIN_PASSWORD = this.LOGIN_PASSWORD;
			other.LAST_LOGIN_DATE = this.LAST_LOGIN_DATE;
			other.EMAIL = this.EMAIL;
			other.TELEPHONE = this.TELEPHONE;
			other.FULL_NAME = this.FULL_NAME;
			other.PERSONAL_ID = this.PERSONAL_ID;
			other.CREATION_DATE = this.CREATION_DATE;
			other.CREATION_USER_ID = this.CREATION_USER_ID;
			other.LAST_UPDATE_DATE = this.LAST_UPDATE_DATE;
			other.LAST_UPDATE_USER_ID = this.LAST_UPDATE_USER_ID;
			other.SIGNATURE_TYP = this.SIGNATURE_TYP;
			other.SIGNATURE_DATA = this.SIGNATURE_DATA;
			other.errorCode = this.errorCode;
			other.errorMessage = this.errorMessage;

		}

		public void copyKeysDataTo(row15Struct other) {

			other.USER_ID = this.USER_ID;

		}

		private String readString(ObjectInputStream dis) throws IOException {
			String strReturn = null;
			int length = 0;
			length = dis.readInt();
			if (length == -1) {
				strReturn = null;
			} else {
				if (length > commonByteArray_WIPO_PROJECTS_A1_Copy_users_to_ipas.length) {
					if (length < 1024 && commonByteArray_WIPO_PROJECTS_A1_Copy_users_to_ipas.length == 0) {
						commonByteArray_WIPO_PROJECTS_A1_Copy_users_to_ipas = new byte[1024];
					} else {
						commonByteArray_WIPO_PROJECTS_A1_Copy_users_to_ipas = new byte[2 * length];
					}
				}
				dis.readFully(commonByteArray_WIPO_PROJECTS_A1_Copy_users_to_ipas, 0, length);
				strReturn = new String(commonByteArray_WIPO_PROJECTS_A1_Copy_users_to_ipas, 0, length, utf8Charset);
			}
			return strReturn;
		}

		private void writeString(String str, ObjectOutputStream dos) throws IOException {
			if (str == null) {
				dos.writeInt(-1);
			} else {
				byte[] byteArray = str.getBytes(utf8Charset);
				dos.writeInt(byteArray.length);
				dos.write(byteArray);
			}
		}

		private java.util.Date readDate(ObjectInputStream dis) throws IOException {
			java.util.Date dateReturn = null;
			int length = 0;
			length = dis.readByte();
			if (length == -1) {
				dateReturn = null;
			} else {
				dateReturn = new Date(dis.readLong());
			}
			return dateReturn;
		}

		private void writeDate(java.util.Date date1, ObjectOutputStream dos) throws IOException {
			if (date1 == null) {
				dos.writeByte(-1);
			} else {
				dos.writeByte(0);
				dos.writeLong(date1.getTime());
			}
		}

		public void readData(ObjectInputStream dis) {

			synchronized (commonByteArrayLock_WIPO_PROJECTS_A1_Copy_users_to_ipas) {

				try {

					int length = 0;

					this.ROW_VERSION = (BigDecimal) dis.readObject();

					this.USER_ID = (BigDecimal) dis.readObject();

					this.USER_NAME = readString(dis);

					this.LOGIN = readString(dis);

					this.IND_ADMINISTRATOR = readString(dis);

					this.IND_EXAMINER = readString(dis);

					this.IND_INACTIVE = readString(dis);

					this.IND_EXTERNAL = readString(dis);

					this.OFFICE_DIVISION_CODE = readString(dis);

					this.OFFICE_DEPARTMENT_CODE = readString(dis);

					this.OFFICE_SECTION_CODE = readString(dis);

					this.INITIALS = readString(dis);

					this.FOOTER_DESCRIPTION = readString(dis);

					this.QTY_WORK = (BigDecimal) dis.readObject();

					this.IND_TEST_USER = readString(dis);

					this.FORCE_DOC_ORI = readString(dis);

					this.LOGIN_PASSWORD = readString(dis);

					this.LAST_LOGIN_DATE = readDate(dis);

					this.EMAIL = readString(dis);

					this.TELEPHONE = readString(dis);

					this.FULL_NAME = readString(dis);

					this.PERSONAL_ID = readString(dis);

					this.CREATION_DATE = readDate(dis);

					this.CREATION_USER_ID = (BigDecimal) dis.readObject();

					this.LAST_UPDATE_DATE = readDate(dis);

					this.LAST_UPDATE_USER_ID = (BigDecimal) dis.readObject();

					this.SIGNATURE_TYP = readString(dis);

					this.SIGNATURE_DATA = (Object) dis.readObject();

					this.errorCode = readString(dis);

					this.errorMessage = readString(dis);

				} catch (IOException e) {
					throw new RuntimeException(e);

				} catch (ClassNotFoundException eCNFE) {
					throw new RuntimeException(eCNFE);

				}

			}

		}

		public void writeData(ObjectOutputStream dos) {
			try {

				// BigDecimal

				dos.writeObject(this.ROW_VERSION);

				// BigDecimal

				dos.writeObject(this.USER_ID);

				// String

				writeString(this.USER_NAME, dos);

				// String

				writeString(this.LOGIN, dos);

				// String

				writeString(this.IND_ADMINISTRATOR, dos);

				// String

				writeString(this.IND_EXAMINER, dos);

				// String

				writeString(this.IND_INACTIVE, dos);

				// String

				writeString(this.IND_EXTERNAL, dos);

				// String

				writeString(this.OFFICE_DIVISION_CODE, dos);

				// String

				writeString(this.OFFICE_DEPARTMENT_CODE, dos);

				// String

				writeString(this.OFFICE_SECTION_CODE, dos);

				// String

				writeString(this.INITIALS, dos);

				// String

				writeString(this.FOOTER_DESCRIPTION, dos);

				// BigDecimal

				dos.writeObject(this.QTY_WORK);

				// String

				writeString(this.IND_TEST_USER, dos);

				// String

				writeString(this.FORCE_DOC_ORI, dos);

				// String

				writeString(this.LOGIN_PASSWORD, dos);

				// java.util.Date

				writeDate(this.LAST_LOGIN_DATE, dos);

				// String

				writeString(this.EMAIL, dos);

				// String

				writeString(this.TELEPHONE, dos);

				// String

				writeString(this.FULL_NAME, dos);

				// String

				writeString(this.PERSONAL_ID, dos);

				// java.util.Date

				writeDate(this.CREATION_DATE, dos);

				// BigDecimal

				dos.writeObject(this.CREATION_USER_ID);

				// java.util.Date

				writeDate(this.LAST_UPDATE_DATE, dos);

				// BigDecimal

				dos.writeObject(this.LAST_UPDATE_USER_ID);

				// String

				writeString(this.SIGNATURE_TYP, dos);

				// Object

				dos.writeObject(this.SIGNATURE_DATA);

				// String

				writeString(this.errorCode, dos);

				// String

				writeString(this.errorMessage, dos);

			} catch (IOException e) {
				throw new RuntimeException(e);
			}

		}

		public String toString() {

			StringBuilder sb = new StringBuilder();
			sb.append(super.toString());
			sb.append("[");
			sb.append("ROW_VERSION=" + String.valueOf(ROW_VERSION));
			sb.append(",USER_ID=" + String.valueOf(USER_ID));
			sb.append(",USER_NAME=" + USER_NAME);
			sb.append(",LOGIN=" + LOGIN);
			sb.append(",IND_ADMINISTRATOR=" + IND_ADMINISTRATOR);
			sb.append(",IND_EXAMINER=" + IND_EXAMINER);
			sb.append(",IND_INACTIVE=" + IND_INACTIVE);
			sb.append(",IND_EXTERNAL=" + IND_EXTERNAL);
			sb.append(",OFFICE_DIVISION_CODE=" + OFFICE_DIVISION_CODE);
			sb.append(",OFFICE_DEPARTMENT_CODE=" + OFFICE_DEPARTMENT_CODE);
			sb.append(",OFFICE_SECTION_CODE=" + OFFICE_SECTION_CODE);
			sb.append(",INITIALS=" + INITIALS);
			sb.append(",FOOTER_DESCRIPTION=" + FOOTER_DESCRIPTION);
			sb.append(",QTY_WORK=" + String.valueOf(QTY_WORK));
			sb.append(",IND_TEST_USER=" + IND_TEST_USER);
			sb.append(",FORCE_DOC_ORI=" + FORCE_DOC_ORI);
			sb.append(",LOGIN_PASSWORD=" + LOGIN_PASSWORD);
			sb.append(",LAST_LOGIN_DATE=" + String.valueOf(LAST_LOGIN_DATE));
			sb.append(",EMAIL=" + EMAIL);
			sb.append(",TELEPHONE=" + TELEPHONE);
			sb.append(",FULL_NAME=" + FULL_NAME);
			sb.append(",PERSONAL_ID=" + PERSONAL_ID);
			sb.append(",CREATION_DATE=" + String.valueOf(CREATION_DATE));
			sb.append(",CREATION_USER_ID=" + String.valueOf(CREATION_USER_ID));
			sb.append(",LAST_UPDATE_DATE=" + String.valueOf(LAST_UPDATE_DATE));
			sb.append(",LAST_UPDATE_USER_ID=" + String.valueOf(LAST_UPDATE_USER_ID));
			sb.append(",SIGNATURE_TYP=" + SIGNATURE_TYP);
			sb.append(",SIGNATURE_DATA=" + String.valueOf(SIGNATURE_DATA));
			sb.append(",errorCode=" + errorCode);
			sb.append(",errorMessage=" + errorMessage);
			sb.append("]");

			return sb.toString();
		}

		/**
		 * Compare keys
		 */
		public int compareTo(row15Struct other) {

			int returnValue = -1;

			returnValue = checkNullsAndCompare(this.USER_ID, other.USER_ID);
			if (returnValue != 0) {
				return returnValue;
			}

			return returnValue;
		}

		private int checkNullsAndCompare(Object object1, Object object2) {
			int returnValue = 0;
			if (object1 instanceof Comparable && object2 instanceof Comparable) {
				returnValue = ((Comparable) object1).compareTo(object2);
			} else if (object1 != null && object2 != null) {
				returnValue = compareStrings(object1.toString(), object2.toString());
			} else if (object1 == null && object2 != null) {
				returnValue = 1;
			} else if (object1 != null && object2 == null) {
				returnValue = -1;
			} else {
				returnValue = 0;
			}

			return returnValue;
		}

		private int compareStrings(String string1, String string2) {
			return string1.compareTo(string2);
		}

	}

	public static class insert_users_ipasStruct implements routines.system.IPersistableRow<insert_users_ipasStruct> {
		final static byte[] commonByteArrayLock_WIPO_PROJECTS_A1_Copy_users_to_ipas = new byte[0];
		static byte[] commonByteArray_WIPO_PROJECTS_A1_Copy_users_to_ipas = new byte[0];
		protected static final int DEFAULT_HASHCODE = 1;
		protected static final int PRIME = 31;
		protected int hashCode = DEFAULT_HASHCODE;
		public boolean hashCodeDirty = true;

		public String loopKey;

		public BigDecimal ROW_VERSION;

		public BigDecimal getROW_VERSION() {
			return this.ROW_VERSION;
		}

		public BigDecimal USER_ID;

		public BigDecimal getUSER_ID() {
			return this.USER_ID;
		}

		public String USER_NAME;

		public String getUSER_NAME() {
			return this.USER_NAME;
		}

		public String LOGIN;

		public String getLOGIN() {
			return this.LOGIN;
		}

		public String IND_ADMINISTRATOR;

		public String getIND_ADMINISTRATOR() {
			return this.IND_ADMINISTRATOR;
		}

		public String IND_EXAMINER;

		public String getIND_EXAMINER() {
			return this.IND_EXAMINER;
		}

		public String IND_INACTIVE;

		public String getIND_INACTIVE() {
			return this.IND_INACTIVE;
		}

		public String IND_EXTERNAL;

		public String getIND_EXTERNAL() {
			return this.IND_EXTERNAL;
		}

		public String OFFICE_DIVISION_CODE;

		public String getOFFICE_DIVISION_CODE() {
			return this.OFFICE_DIVISION_CODE;
		}

		public String OFFICE_DEPARTMENT_CODE;

		public String getOFFICE_DEPARTMENT_CODE() {
			return this.OFFICE_DEPARTMENT_CODE;
		}

		public String OFFICE_SECTION_CODE;

		public String getOFFICE_SECTION_CODE() {
			return this.OFFICE_SECTION_CODE;
		}

		public String INITIALS;

		public String getINITIALS() {
			return this.INITIALS;
		}

		public String FOOTER_DESCRIPTION;

		public String getFOOTER_DESCRIPTION() {
			return this.FOOTER_DESCRIPTION;
		}

		public BigDecimal QTY_WORK;

		public BigDecimal getQTY_WORK() {
			return this.QTY_WORK;
		}

		public String IND_TEST_USER;

		public String getIND_TEST_USER() {
			return this.IND_TEST_USER;
		}

		public String FORCE_DOC_ORI;

		public String getFORCE_DOC_ORI() {
			return this.FORCE_DOC_ORI;
		}

		public String LOGIN_PASSWORD;

		public String getLOGIN_PASSWORD() {
			return this.LOGIN_PASSWORD;
		}

		public java.util.Date LAST_LOGIN_DATE;

		public java.util.Date getLAST_LOGIN_DATE() {
			return this.LAST_LOGIN_DATE;
		}

		public String EMAIL;

		public String getEMAIL() {
			return this.EMAIL;
		}

		public String TELEPHONE;

		public String getTELEPHONE() {
			return this.TELEPHONE;
		}

		public String FULL_NAME;

		public String getFULL_NAME() {
			return this.FULL_NAME;
		}

		public String PERSONAL_ID;

		public String getPERSONAL_ID() {
			return this.PERSONAL_ID;
		}

		public java.util.Date CREATION_DATE;

		public java.util.Date getCREATION_DATE() {
			return this.CREATION_DATE;
		}

		public BigDecimal CREATION_USER_ID;

		public BigDecimal getCREATION_USER_ID() {
			return this.CREATION_USER_ID;
		}

		public java.util.Date LAST_UPDATE_DATE;

		public java.util.Date getLAST_UPDATE_DATE() {
			return this.LAST_UPDATE_DATE;
		}

		public BigDecimal LAST_UPDATE_USER_ID;

		public BigDecimal getLAST_UPDATE_USER_ID() {
			return this.LAST_UPDATE_USER_ID;
		}

		public String SIGNATURE_TYP;

		public String getSIGNATURE_TYP() {
			return this.SIGNATURE_TYP;
		}

		public Object SIGNATURE_DATA;

		public Object getSIGNATURE_DATA() {
			return this.SIGNATURE_DATA;
		}

		@Override
		public int hashCode() {
			if (this.hashCodeDirty) {
				final int prime = PRIME;
				int result = DEFAULT_HASHCODE;

				result = prime * result + ((this.USER_ID == null) ? 0 : this.USER_ID.hashCode());

				this.hashCode = result;
				this.hashCodeDirty = false;
			}
			return this.hashCode;
		}

		@Override
		public boolean equals(Object obj) {
			if (this == obj)
				return true;
			if (obj == null)
				return false;
			if (getClass() != obj.getClass())
				return false;
			final insert_users_ipasStruct other = (insert_users_ipasStruct) obj;

			if (this.USER_ID == null) {
				if (other.USER_ID != null)
					return false;

			} else if (!this.USER_ID.equals(other.USER_ID))

				return false;

			return true;
		}

		public void copyDataTo(insert_users_ipasStruct other) {

			other.ROW_VERSION = this.ROW_VERSION;
			other.USER_ID = this.USER_ID;
			other.USER_NAME = this.USER_NAME;
			other.LOGIN = this.LOGIN;
			other.IND_ADMINISTRATOR = this.IND_ADMINISTRATOR;
			other.IND_EXAMINER = this.IND_EXAMINER;
			other.IND_INACTIVE = this.IND_INACTIVE;
			other.IND_EXTERNAL = this.IND_EXTERNAL;
			other.OFFICE_DIVISION_CODE = this.OFFICE_DIVISION_CODE;
			other.OFFICE_DEPARTMENT_CODE = this.OFFICE_DEPARTMENT_CODE;
			other.OFFICE_SECTION_CODE = this.OFFICE_SECTION_CODE;
			other.INITIALS = this.INITIALS;
			other.FOOTER_DESCRIPTION = this.FOOTER_DESCRIPTION;
			other.QTY_WORK = this.QTY_WORK;
			other.IND_TEST_USER = this.IND_TEST_USER;
			other.FORCE_DOC_ORI = this.FORCE_DOC_ORI;
			other.LOGIN_PASSWORD = this.LOGIN_PASSWORD;
			other.LAST_LOGIN_DATE = this.LAST_LOGIN_DATE;
			other.EMAIL = this.EMAIL;
			other.TELEPHONE = this.TELEPHONE;
			other.FULL_NAME = this.FULL_NAME;
			other.PERSONAL_ID = this.PERSONAL_ID;
			other.CREATION_DATE = this.CREATION_DATE;
			other.CREATION_USER_ID = this.CREATION_USER_ID;
			other.LAST_UPDATE_DATE = this.LAST_UPDATE_DATE;
			other.LAST_UPDATE_USER_ID = this.LAST_UPDATE_USER_ID;
			other.SIGNATURE_TYP = this.SIGNATURE_TYP;
			other.SIGNATURE_DATA = this.SIGNATURE_DATA;

		}

		public void copyKeysDataTo(insert_users_ipasStruct other) {

			other.USER_ID = this.USER_ID;

		}

		private String readString(ObjectInputStream dis) throws IOException {
			String strReturn = null;
			int length = 0;
			length = dis.readInt();
			if (length == -1) {
				strReturn = null;
			} else {
				if (length > commonByteArray_WIPO_PROJECTS_A1_Copy_users_to_ipas.length) {
					if (length < 1024 && commonByteArray_WIPO_PROJECTS_A1_Copy_users_to_ipas.length == 0) {
						commonByteArray_WIPO_PROJECTS_A1_Copy_users_to_ipas = new byte[1024];
					} else {
						commonByteArray_WIPO_PROJECTS_A1_Copy_users_to_ipas = new byte[2 * length];
					}
				}
				dis.readFully(commonByteArray_WIPO_PROJECTS_A1_Copy_users_to_ipas, 0, length);
				strReturn = new String(commonByteArray_WIPO_PROJECTS_A1_Copy_users_to_ipas, 0, length, utf8Charset);
			}
			return strReturn;
		}

		private void writeString(String str, ObjectOutputStream dos) throws IOException {
			if (str == null) {
				dos.writeInt(-1);
			} else {
				byte[] byteArray = str.getBytes(utf8Charset);
				dos.writeInt(byteArray.length);
				dos.write(byteArray);
			}
		}

		private java.util.Date readDate(ObjectInputStream dis) throws IOException {
			java.util.Date dateReturn = null;
			int length = 0;
			length = dis.readByte();
			if (length == -1) {
				dateReturn = null;
			} else {
				dateReturn = new Date(dis.readLong());
			}
			return dateReturn;
		}

		private void writeDate(java.util.Date date1, ObjectOutputStream dos) throws IOException {
			if (date1 == null) {
				dos.writeByte(-1);
			} else {
				dos.writeByte(0);
				dos.writeLong(date1.getTime());
			}
		}

		public void readData(ObjectInputStream dis) {

			synchronized (commonByteArrayLock_WIPO_PROJECTS_A1_Copy_users_to_ipas) {

				try {

					int length = 0;

					this.ROW_VERSION = (BigDecimal) dis.readObject();

					this.USER_ID = (BigDecimal) dis.readObject();

					this.USER_NAME = readString(dis);

					this.LOGIN = readString(dis);

					this.IND_ADMINISTRATOR = readString(dis);

					this.IND_EXAMINER = readString(dis);

					this.IND_INACTIVE = readString(dis);

					this.IND_EXTERNAL = readString(dis);

					this.OFFICE_DIVISION_CODE = readString(dis);

					this.OFFICE_DEPARTMENT_CODE = readString(dis);

					this.OFFICE_SECTION_CODE = readString(dis);

					this.INITIALS = readString(dis);

					this.FOOTER_DESCRIPTION = readString(dis);

					this.QTY_WORK = (BigDecimal) dis.readObject();

					this.IND_TEST_USER = readString(dis);

					this.FORCE_DOC_ORI = readString(dis);

					this.LOGIN_PASSWORD = readString(dis);

					this.LAST_LOGIN_DATE = readDate(dis);

					this.EMAIL = readString(dis);

					this.TELEPHONE = readString(dis);

					this.FULL_NAME = readString(dis);

					this.PERSONAL_ID = readString(dis);

					this.CREATION_DATE = readDate(dis);

					this.CREATION_USER_ID = (BigDecimal) dis.readObject();

					this.LAST_UPDATE_DATE = readDate(dis);

					this.LAST_UPDATE_USER_ID = (BigDecimal) dis.readObject();

					this.SIGNATURE_TYP = readString(dis);

					this.SIGNATURE_DATA = (Object) dis.readObject();

				} catch (IOException e) {
					throw new RuntimeException(e);

				} catch (ClassNotFoundException eCNFE) {
					throw new RuntimeException(eCNFE);

				}

			}

		}

		public void writeData(ObjectOutputStream dos) {
			try {

				// BigDecimal

				dos.writeObject(this.ROW_VERSION);

				// BigDecimal

				dos.writeObject(this.USER_ID);

				// String

				writeString(this.USER_NAME, dos);

				// String

				writeString(this.LOGIN, dos);

				// String

				writeString(this.IND_ADMINISTRATOR, dos);

				// String

				writeString(this.IND_EXAMINER, dos);

				// String

				writeString(this.IND_INACTIVE, dos);

				// String

				writeString(this.IND_EXTERNAL, dos);

				// String

				writeString(this.OFFICE_DIVISION_CODE, dos);

				// String

				writeString(this.OFFICE_DEPARTMENT_CODE, dos);

				// String

				writeString(this.OFFICE_SECTION_CODE, dos);

				// String

				writeString(this.INITIALS, dos);

				// String

				writeString(this.FOOTER_DESCRIPTION, dos);

				// BigDecimal

				dos.writeObject(this.QTY_WORK);

				// String

				writeString(this.IND_TEST_USER, dos);

				// String

				writeString(this.FORCE_DOC_ORI, dos);

				// String

				writeString(this.LOGIN_PASSWORD, dos);

				// java.util.Date

				writeDate(this.LAST_LOGIN_DATE, dos);

				// String

				writeString(this.EMAIL, dos);

				// String

				writeString(this.TELEPHONE, dos);

				// String

				writeString(this.FULL_NAME, dos);

				// String

				writeString(this.PERSONAL_ID, dos);

				// java.util.Date

				writeDate(this.CREATION_DATE, dos);

				// BigDecimal

				dos.writeObject(this.CREATION_USER_ID);

				// java.util.Date

				writeDate(this.LAST_UPDATE_DATE, dos);

				// BigDecimal

				dos.writeObject(this.LAST_UPDATE_USER_ID);

				// String

				writeString(this.SIGNATURE_TYP, dos);

				// Object

				dos.writeObject(this.SIGNATURE_DATA);

			} catch (IOException e) {
				throw new RuntimeException(e);
			}

		}

		public String toString() {

			StringBuilder sb = new StringBuilder();
			sb.append(super.toString());
			sb.append("[");
			sb.append("ROW_VERSION=" + String.valueOf(ROW_VERSION));
			sb.append(",USER_ID=" + String.valueOf(USER_ID));
			sb.append(",USER_NAME=" + USER_NAME);
			sb.append(",LOGIN=" + LOGIN);
			sb.append(",IND_ADMINISTRATOR=" + IND_ADMINISTRATOR);
			sb.append(",IND_EXAMINER=" + IND_EXAMINER);
			sb.append(",IND_INACTIVE=" + IND_INACTIVE);
			sb.append(",IND_EXTERNAL=" + IND_EXTERNAL);
			sb.append(",OFFICE_DIVISION_CODE=" + OFFICE_DIVISION_CODE);
			sb.append(",OFFICE_DEPARTMENT_CODE=" + OFFICE_DEPARTMENT_CODE);
			sb.append(",OFFICE_SECTION_CODE=" + OFFICE_SECTION_CODE);
			sb.append(",INITIALS=" + INITIALS);
			sb.append(",FOOTER_DESCRIPTION=" + FOOTER_DESCRIPTION);
			sb.append(",QTY_WORK=" + String.valueOf(QTY_WORK));
			sb.append(",IND_TEST_USER=" + IND_TEST_USER);
			sb.append(",FORCE_DOC_ORI=" + FORCE_DOC_ORI);
			sb.append(",LOGIN_PASSWORD=" + LOGIN_PASSWORD);
			sb.append(",LAST_LOGIN_DATE=" + String.valueOf(LAST_LOGIN_DATE));
			sb.append(",EMAIL=" + EMAIL);
			sb.append(",TELEPHONE=" + TELEPHONE);
			sb.append(",FULL_NAME=" + FULL_NAME);
			sb.append(",PERSONAL_ID=" + PERSONAL_ID);
			sb.append(",CREATION_DATE=" + String.valueOf(CREATION_DATE));
			sb.append(",CREATION_USER_ID=" + String.valueOf(CREATION_USER_ID));
			sb.append(",LAST_UPDATE_DATE=" + String.valueOf(LAST_UPDATE_DATE));
			sb.append(",LAST_UPDATE_USER_ID=" + String.valueOf(LAST_UPDATE_USER_ID));
			sb.append(",SIGNATURE_TYP=" + SIGNATURE_TYP);
			sb.append(",SIGNATURE_DATA=" + String.valueOf(SIGNATURE_DATA));
			sb.append("]");

			return sb.toString();
		}

		/**
		 * Compare keys
		 */
		public int compareTo(insert_users_ipasStruct other) {

			int returnValue = -1;

			returnValue = checkNullsAndCompare(this.USER_ID, other.USER_ID);
			if (returnValue != 0) {
				return returnValue;
			}

			return returnValue;
		}

		private int checkNullsAndCompare(Object object1, Object object2) {
			int returnValue = 0;
			if (object1 instanceof Comparable && object2 instanceof Comparable) {
				returnValue = ((Comparable) object1).compareTo(object2);
			} else if (object1 != null && object2 != null) {
				returnValue = compareStrings(object1.toString(), object2.toString());
			} else if (object1 == null && object2 != null) {
				returnValue = 1;
			} else if (object1 != null && object2 == null) {
				returnValue = -1;
			} else {
				returnValue = 0;
			}

			return returnValue;
		}

		private int compareStrings(String string1, String string2) {
			return string1.compareTo(string2);
		}

	}

	public static class row11Struct implements routines.system.IPersistableRow<row11Struct> {
		final static byte[] commonByteArrayLock_WIPO_PROJECTS_A1_Copy_users_to_ipas = new byte[0];
		static byte[] commonByteArray_WIPO_PROJECTS_A1_Copy_users_to_ipas = new byte[0];

		public String cod_usuario;

		public String getCod_usuario() {
			return this.cod_usuario;
		}

		public String nom_usuario;

		public String getNom_usuario() {
			return this.nom_usuario;
		}

		public String ind_administrador;

		public String getInd_administrador() {
			return this.ind_administrador;
		}

		public String ind_conectado;

		public String getInd_conectado() {
			return this.ind_conectado;
		}

		public Short num_bandeja_activa;

		public Short getNum_bandeja_activa() {
			return this.num_bandeja_activa;
		}

		public Integer cod_dependencia;

		public Integer getCod_dependencia() {
			return this.cod_dependencia;
		}

		private String readString(ObjectInputStream dis) throws IOException {
			String strReturn = null;
			int length = 0;
			length = dis.readInt();
			if (length == -1) {
				strReturn = null;
			} else {
				if (length > commonByteArray_WIPO_PROJECTS_A1_Copy_users_to_ipas.length) {
					if (length < 1024 && commonByteArray_WIPO_PROJECTS_A1_Copy_users_to_ipas.length == 0) {
						commonByteArray_WIPO_PROJECTS_A1_Copy_users_to_ipas = new byte[1024];
					} else {
						commonByteArray_WIPO_PROJECTS_A1_Copy_users_to_ipas = new byte[2 * length];
					}
				}
				dis.readFully(commonByteArray_WIPO_PROJECTS_A1_Copy_users_to_ipas, 0, length);
				strReturn = new String(commonByteArray_WIPO_PROJECTS_A1_Copy_users_to_ipas, 0, length, utf8Charset);
			}
			return strReturn;
		}

		private void writeString(String str, ObjectOutputStream dos) throws IOException {
			if (str == null) {
				dos.writeInt(-1);
			} else {
				byte[] byteArray = str.getBytes(utf8Charset);
				dos.writeInt(byteArray.length);
				dos.write(byteArray);
			}
		}

		private Integer readInteger(ObjectInputStream dis) throws IOException {
			Integer intReturn;
			int length = 0;
			length = dis.readByte();
			if (length == -1) {
				intReturn = null;
			} else {
				intReturn = dis.readInt();
			}
			return intReturn;
		}

		private void writeInteger(Integer intNum, ObjectOutputStream dos) throws IOException {
			if (intNum == null) {
				dos.writeByte(-1);
			} else {
				dos.writeByte(0);
				dos.writeInt(intNum);
			}
		}

		public void readData(ObjectInputStream dis) {

			synchronized (commonByteArrayLock_WIPO_PROJECTS_A1_Copy_users_to_ipas) {

				try {

					int length = 0;

					this.cod_usuario = readString(dis);

					this.nom_usuario = readString(dis);

					this.ind_administrador = readString(dis);

					this.ind_conectado = readString(dis);

					length = dis.readByte();
					if (length == -1) {
						this.num_bandeja_activa = null;
					} else {
						this.num_bandeja_activa = dis.readShort();
					}

					this.cod_dependencia = readInteger(dis);

				} catch (IOException e) {
					throw new RuntimeException(e);

				}

			}

		}

		public void writeData(ObjectOutputStream dos) {
			try {

				// String

				writeString(this.cod_usuario, dos);

				// String

				writeString(this.nom_usuario, dos);

				// String

				writeString(this.ind_administrador, dos);

				// String

				writeString(this.ind_conectado, dos);

				// Short

				if (this.num_bandeja_activa == null) {
					dos.writeByte(-1);
				} else {
					dos.writeByte(0);
					dos.writeShort(this.num_bandeja_activa);
				}

				// Integer

				writeInteger(this.cod_dependencia, dos);

			} catch (IOException e) {
				throw new RuntimeException(e);
			}

		}

		public String toString() {

			StringBuilder sb = new StringBuilder();
			sb.append(super.toString());
			sb.append("[");
			sb.append("cod_usuario=" + cod_usuario);
			sb.append(",nom_usuario=" + nom_usuario);
			sb.append(",ind_administrador=" + ind_administrador);
			sb.append(",ind_conectado=" + ind_conectado);
			sb.append(",num_bandeja_activa=" + String.valueOf(num_bandeja_activa));
			sb.append(",cod_dependencia=" + String.valueOf(cod_dependencia));
			sb.append("]");

			return sb.toString();
		}

		/**
		 * Compare keys
		 */
		public int compareTo(row11Struct other) {

			int returnValue = -1;

			return returnValue;
		}

		private int checkNullsAndCompare(Object object1, Object object2) {
			int returnValue = 0;
			if (object1 instanceof Comparable && object2 instanceof Comparable) {
				returnValue = ((Comparable) object1).compareTo(object2);
			} else if (object1 != null && object2 != null) {
				returnValue = compareStrings(object1.toString(), object2.toString());
			} else if (object1 == null && object2 != null) {
				returnValue = 1;
			} else if (object1 != null && object2 == null) {
				returnValue = -1;
			} else {
				returnValue = 0;
			}

			return returnValue;
		}

		private int compareStrings(String string1, String string2) {
			return string1.compareTo(string2);
		}

	}

	public static class after_tDBInput_9Struct implements routines.system.IPersistableRow<after_tDBInput_9Struct> {
		final static byte[] commonByteArrayLock_WIPO_PROJECTS_A1_Copy_users_to_ipas = new byte[0];
		static byte[] commonByteArray_WIPO_PROJECTS_A1_Copy_users_to_ipas = new byte[0];

		public String cod_usuario;

		public String getCod_usuario() {
			return this.cod_usuario;
		}

		public String nom_usuario;

		public String getNom_usuario() {
			return this.nom_usuario;
		}

		public String ind_administrador;

		public String getInd_administrador() {
			return this.ind_administrador;
		}

		public String ind_conectado;

		public String getInd_conectado() {
			return this.ind_conectado;
		}

		public Short num_bandeja_activa;

		public Short getNum_bandeja_activa() {
			return this.num_bandeja_activa;
		}

		public Integer cod_dependencia;

		public Integer getCod_dependencia() {
			return this.cod_dependencia;
		}

		private String readString(ObjectInputStream dis) throws IOException {
			String strReturn = null;
			int length = 0;
			length = dis.readInt();
			if (length == -1) {
				strReturn = null;
			} else {
				if (length > commonByteArray_WIPO_PROJECTS_A1_Copy_users_to_ipas.length) {
					if (length < 1024 && commonByteArray_WIPO_PROJECTS_A1_Copy_users_to_ipas.length == 0) {
						commonByteArray_WIPO_PROJECTS_A1_Copy_users_to_ipas = new byte[1024];
					} else {
						commonByteArray_WIPO_PROJECTS_A1_Copy_users_to_ipas = new byte[2 * length];
					}
				}
				dis.readFully(commonByteArray_WIPO_PROJECTS_A1_Copy_users_to_ipas, 0, length);
				strReturn = new String(commonByteArray_WIPO_PROJECTS_A1_Copy_users_to_ipas, 0, length, utf8Charset);
			}
			return strReturn;
		}

		private void writeString(String str, ObjectOutputStream dos) throws IOException {
			if (str == null) {
				dos.writeInt(-1);
			} else {
				byte[] byteArray = str.getBytes(utf8Charset);
				dos.writeInt(byteArray.length);
				dos.write(byteArray);
			}
		}

		private Integer readInteger(ObjectInputStream dis) throws IOException {
			Integer intReturn;
			int length = 0;
			length = dis.readByte();
			if (length == -1) {
				intReturn = null;
			} else {
				intReturn = dis.readInt();
			}
			return intReturn;
		}

		private void writeInteger(Integer intNum, ObjectOutputStream dos) throws IOException {
			if (intNum == null) {
				dos.writeByte(-1);
			} else {
				dos.writeByte(0);
				dos.writeInt(intNum);
			}
		}

		public void readData(ObjectInputStream dis) {

			synchronized (commonByteArrayLock_WIPO_PROJECTS_A1_Copy_users_to_ipas) {

				try {

					int length = 0;

					this.cod_usuario = readString(dis);

					this.nom_usuario = readString(dis);

					this.ind_administrador = readString(dis);

					this.ind_conectado = readString(dis);

					length = dis.readByte();
					if (length == -1) {
						this.num_bandeja_activa = null;
					} else {
						this.num_bandeja_activa = dis.readShort();
					}

					this.cod_dependencia = readInteger(dis);

				} catch (IOException e) {
					throw new RuntimeException(e);

				}

			}

		}

		public void writeData(ObjectOutputStream dos) {
			try {

				// String

				writeString(this.cod_usuario, dos);

				// String

				writeString(this.nom_usuario, dos);

				// String

				writeString(this.ind_administrador, dos);

				// String

				writeString(this.ind_conectado, dos);

				// Short

				if (this.num_bandeja_activa == null) {
					dos.writeByte(-1);
				} else {
					dos.writeByte(0);
					dos.writeShort(this.num_bandeja_activa);
				}

				// Integer

				writeInteger(this.cod_dependencia, dos);

			} catch (IOException e) {
				throw new RuntimeException(e);
			}

		}

		public String toString() {

			StringBuilder sb = new StringBuilder();
			sb.append(super.toString());
			sb.append("[");
			sb.append("cod_usuario=" + cod_usuario);
			sb.append(",nom_usuario=" + nom_usuario);
			sb.append(",ind_administrador=" + ind_administrador);
			sb.append(",ind_conectado=" + ind_conectado);
			sb.append(",num_bandeja_activa=" + String.valueOf(num_bandeja_activa));
			sb.append(",cod_dependencia=" + String.valueOf(cod_dependencia));
			sb.append("]");

			return sb.toString();
		}

		/**
		 * Compare keys
		 */
		public int compareTo(after_tDBInput_9Struct other) {

			int returnValue = -1;

			return returnValue;
		}

		private int checkNullsAndCompare(Object object1, Object object2) {
			int returnValue = 0;
			if (object1 instanceof Comparable && object2 instanceof Comparable) {
				returnValue = ((Comparable) object1).compareTo(object2);
			} else if (object1 != null && object2 != null) {
				returnValue = compareStrings(object1.toString(), object2.toString());
			} else if (object1 == null && object2 != null) {
				returnValue = 1;
			} else if (object1 != null && object2 == null) {
				returnValue = -1;
			} else {
				returnValue = 0;
			}

			return returnValue;
		}

		private int compareStrings(String string1, String string2) {
			return string1.compareTo(string2);
		}

	}

	public void tDBInput_9Process(final java.util.Map<String, Object> globalMap) throws TalendException {
		globalMap.put("tDBInput_9_SUBPROCESS_STATE", 0);

		final boolean execStat = this.execStat;

		String iterateId = "";

		String currentComponent = "";
		java.util.Map<String, Object> resourceMap = new java.util.HashMap<String, Object>();

		try {
			// TDI-39566 avoid throwing an useless Exception
			boolean resumeIt = true;
			if (globalResumeTicket == false && resumeEntryMethodName != null) {
				String currentMethodName = new java.lang.Exception().getStackTrace()[0].getMethodName();
				resumeIt = resumeEntryMethodName.equals(currentMethodName);
			}
			if (resumeIt || globalResumeTicket) { // start the resume
				globalResumeTicket = true;

				tDBInput_6Process(globalMap);

				row11Struct row11 = new row11Struct();
				insert_users_ipasStruct insert_users_ipas = new insert_users_ipasStruct();
				row15Struct row15 = new row15Struct();

				/**
				 * [tLogRow_5 begin ] start
				 */

				ok_Hash.put("tLogRow_5", false);
				start_Hash.put("tLogRow_5", System.currentTimeMillis());

				currentComponent = "tLogRow_5";

				if (execStat) {
					runStat.updateStatOnConnection(resourceMap, iterateId, 0, 0, "row15");
				}

				int tos_count_tLogRow_5 = 0;

				///////////////////////

				final String OUTPUT_FIELD_SEPARATOR_tLogRow_5 = "|";
				java.io.PrintStream consoleOut_tLogRow_5 = null;

				StringBuilder strBuffer_tLogRow_5 = null;
				int nb_line_tLogRow_5 = 0;
///////////////////////    			

				/**
				 * [tLogRow_5 begin ] stop
				 */

				/**
				 * [tDBOutput_5 begin ] start
				 */

				ok_Hash.put("tDBOutput_5", false);
				start_Hash.put("tDBOutput_5", System.currentTimeMillis());

				currentComponent = "tDBOutput_5";

				if (execStat) {
					runStat.updateStatOnConnection(resourceMap, iterateId, 0, 0, "insert_users_ipas");
				}

				int tos_count_tDBOutput_5 = 0;

				int nb_line_tDBOutput_5 = 0;
				int nb_line_update_tDBOutput_5 = 0;
				int nb_line_inserted_tDBOutput_5 = 0;
				int nb_line_deleted_tDBOutput_5 = 0;
				int nb_line_rejected_tDBOutput_5 = 0;

				int deletedCount_tDBOutput_5 = 0;
				int updatedCount_tDBOutput_5 = 0;
				int insertedCount_tDBOutput_5 = 0;
				int rowsToCommitCount_tDBOutput_5 = 0;
				int rejectedCount_tDBOutput_5 = 0;
				String dbschema_tDBOutput_5 = null;
				String tableName_tDBOutput_5 = null;
				boolean whetherReject_tDBOutput_5 = false;

				java.util.Calendar calendar_tDBOutput_5 = java.util.Calendar.getInstance();
				long year1_tDBOutput_5 = TalendDate.parseDate("yyyy-MM-dd", "0001-01-01").getTime();
				long year2_tDBOutput_5 = TalendDate.parseDate("yyyy-MM-dd", "1753-01-01").getTime();
				long year10000_tDBOutput_5 = TalendDate.parseDate("yyyy-MM-dd HH:mm:ss", "9999-12-31 24:00:00")
						.getTime();
				long date_tDBOutput_5;

				java.util.Calendar calendar_datetimeoffset_tDBOutput_5 = java.util.Calendar
						.getInstance(java.util.TimeZone.getTimeZone("UTC"));

				java.sql.Connection conn_tDBOutput_5 = null;
				String dbUser_tDBOutput_5 = null;
				dbschema_tDBOutput_5 = (String) globalMap.get("dbschema_tDBConnection_3");

				conn_tDBOutput_5 = (java.sql.Connection) globalMap.get("conn_tDBConnection_3");

				if (dbschema_tDBOutput_5 == null || dbschema_tDBOutput_5.trim().length() == 0) {
					tableName_tDBOutput_5 = "IP_USER";
				} else {
					tableName_tDBOutput_5 = dbschema_tDBOutput_5 + "].[" + "IP_USER";
				}
				int count_tDBOutput_5 = 0;

				String insert_tDBOutput_5 = "INSERT INTO [" + tableName_tDBOutput_5
						+ "] ([ROW_VERSION],[USER_ID],[USER_NAME],[LOGIN],[IND_ADMINISTRATOR],[IND_EXAMINER],[IND_INACTIVE],[IND_EXTERNAL],[OFFICE_DIVISION_CODE],[OFFICE_DEPARTMENT_CODE],[OFFICE_SECTION_CODE],[INITIALS],[FOOTER_DESCRIPTION],[QTY_WORK],[IND_TEST_USER],[FORCE_DOC_ORI],[LOGIN_PASSWORD],[LAST_LOGIN_DATE],[EMAIL],[TELEPHONE],[FULL_NAME],[PERSONAL_ID],[CREATION_DATE],[CREATION_USER_ID],[LAST_UPDATE_DATE],[LAST_UPDATE_USER_ID],[SIGNATURE_TYP],[SIGNATURE_DATA]) VALUES (?,?,?,?,?,?,?,?,?,?,?,?,?,?,?,?,?,?,?,?,?,?,?,?,?,?,?,?)";
				java.sql.PreparedStatement pstmt_tDBOutput_5 = conn_tDBOutput_5.prepareStatement(insert_tDBOutput_5);
				resourceMap.put("pstmt_tDBOutput_5", pstmt_tDBOutput_5);

				boolean isShareIdentity_tDBOutput_5 = globalMap.get("shareIdentitySetting_tDBConnection_3") != null
						&& (Boolean) globalMap.get("shareIdentitySetting_tDBConnection_3") == true;

				/**
				 * [tDBOutput_5 begin ] stop
				 */

				/**
				 * [tMap_4 begin ] start
				 */

				ok_Hash.put("tMap_4", false);
				start_Hash.put("tMap_4", System.currentTimeMillis());

				currentComponent = "tMap_4";

				if (execStat) {
					runStat.updateStatOnConnection(resourceMap, iterateId, 0, 0, "row11");
				}

				int tos_count_tMap_4 = 0;

// ###############################
// # Lookup's keys initialization

				org.talend.designer.components.lookup.memory.AdvancedMemoryLookup<row12Struct> tHash_Lookup_row12 = (org.talend.designer.components.lookup.memory.AdvancedMemoryLookup<row12Struct>) ((org.talend.designer.components.lookup.memory.AdvancedMemoryLookup<row12Struct>) globalMap
						.get("tHash_Lookup_row12"));

				row12Struct row12HashKey = new row12Struct();
				row12Struct row12Default = new row12Struct();
// ###############################        

// ###############################
// # Vars initialization
				class Var__tMap_4__Struct {
				}
				Var__tMap_4__Struct Var__tMap_4 = new Var__tMap_4__Struct();
// ###############################

// ###############################
// # Outputs initialization
				insert_users_ipasStruct insert_users_ipas_tmp = new insert_users_ipasStruct();
// ###############################

				/**
				 * [tMap_4 begin ] stop
				 */

				/**
				 * [tDBInput_9 begin ] start
				 */

				ok_Hash.put("tDBInput_9", false);
				start_Hash.put("tDBInput_9", System.currentTimeMillis());

				currentComponent = "tDBInput_9";

				int tos_count_tDBInput_9 = 0;

				int nb_line_tDBInput_9 = 0;
				java.sql.Connection conn_tDBInput_9 = null;
				conn_tDBInput_9 = (java.sql.Connection) globalMap.get("conn_tDBConnection_2");

				java.sql.Statement stmt_tDBInput_9 = conn_tDBInput_9.createStatement();

				String dbquery_tDBInput_9 = "SELECT \n  \"Paraguay\".\"public\".\"usuario_marcas\".\"cod_usuario\", \n  \"Paraguay\".\"public\".\"usuario_marcas\".\"n"
						+ "om_usuario\", \n  \"Paraguay\".\"public\".\"usuario_marcas\".\"ind_administrador\", \n  \"Paraguay\".\"public\".\"usuario_"
						+ "marcas\".\"ind_conectado\", \n  \"Paraguay\".\"public\".\"usuario_marcas\".\"num_bandeja_activa\", \n  \"Paraguay\".\"publ"
						+ "ic\".\"usuario_marcas\".\"cod_dependencia\"\nFROM \"Paraguay\".\"public\".\"usuario_marcas\"";

				globalMap.put("tDBInput_9_QUERY", dbquery_tDBInput_9);
				java.sql.ResultSet rs_tDBInput_9 = null;

				try {
					rs_tDBInput_9 = stmt_tDBInput_9.executeQuery(dbquery_tDBInput_9);
					java.sql.ResultSetMetaData rsmd_tDBInput_9 = rs_tDBInput_9.getMetaData();
					int colQtyInRs_tDBInput_9 = rsmd_tDBInput_9.getColumnCount();

					String tmpContent_tDBInput_9 = null;

					while (rs_tDBInput_9.next()) {
						nb_line_tDBInput_9++;

						if (colQtyInRs_tDBInput_9 < 1) {
							row11.cod_usuario = null;
						} else {

							row11.cod_usuario = routines.system.JDBCUtil.getString(rs_tDBInput_9, 1, false);
						}
						if (colQtyInRs_tDBInput_9 < 2) {
							row11.nom_usuario = null;
						} else {

							row11.nom_usuario = routines.system.JDBCUtil.getString(rs_tDBInput_9, 2, false);
						}
						if (colQtyInRs_tDBInput_9 < 3) {
							row11.ind_administrador = null;
						} else {

							row11.ind_administrador = routines.system.JDBCUtil.getString(rs_tDBInput_9, 3, false);
						}
						if (colQtyInRs_tDBInput_9 < 4) {
							row11.ind_conectado = null;
						} else {

							row11.ind_conectado = routines.system.JDBCUtil.getString(rs_tDBInput_9, 4, false);
						}
						if (colQtyInRs_tDBInput_9 < 5) {
							row11.num_bandeja_activa = null;
						} else {

							row11.num_bandeja_activa = rs_tDBInput_9.getShort(5);
							if (rs_tDBInput_9.wasNull()) {
								row11.num_bandeja_activa = null;
							}
						}
						if (colQtyInRs_tDBInput_9 < 6) {
							row11.cod_dependencia = null;
						} else {

							row11.cod_dependencia = rs_tDBInput_9.getInt(6);
							if (rs_tDBInput_9.wasNull()) {
								row11.cod_dependencia = null;
							}
						}

						/**
						 * [tDBInput_9 begin ] stop
						 */

						/**
						 * [tDBInput_9 main ] start
						 */

						currentComponent = "tDBInput_9";

						tos_count_tDBInput_9++;

						/**
						 * [tDBInput_9 main ] stop
						 */

						/**
						 * [tDBInput_9 process_data_begin ] start
						 */

						currentComponent = "tDBInput_9";

						/**
						 * [tDBInput_9 process_data_begin ] stop
						 */

						/**
						 * [tMap_4 main ] start
						 */

						currentComponent = "tMap_4";

						if (execStat) {
							runStat.updateStatOnConnection(iterateId, 1, 1

									, "row11"

							);
						}

						boolean hasCasePrimitiveKeyWithNull_tMap_4 = false;

						// ###############################
						// # Input tables (lookups)
						boolean rejectedInnerJoin_tMap_4 = false;
						boolean mainRowRejected_tMap_4 = false;

						///////////////////////////////////////////////
						// Starting Lookup Table "row12"
						///////////////////////////////////////////////

						boolean forceLooprow12 = false;

						row12Struct row12ObjectFromLookup = null;

						if (!rejectedInnerJoin_tMap_4) { // G_TM_M_020

							hasCasePrimitiveKeyWithNull_tMap_4 = false;

							row12HashKey.nombre = row11.nom_usuario;

							row12HashKey.hashCodeDirty = true;

							tHash_Lookup_row12.lookup(row12HashKey);

						} // G_TM_M_020

						if (tHash_Lookup_row12 != null && tHash_Lookup_row12.getCount(row12HashKey) > 1) { // G 071

							// System.out.println("WARNING: UNIQUE MATCH is configured for the lookup
							// 'row12' and it contains more one result from keys : row12.nombre = '" +
							// row12HashKey.nombre + "'");
						} // G 071

						row12Struct row12 = null;

						row12Struct fromLookup_row12 = null;
						row12 = row12Default;

						if (tHash_Lookup_row12 != null && tHash_Lookup_row12.hasNext()) { // G 099

							fromLookup_row12 = tHash_Lookup_row12.next();

						} // G 099

						if (fromLookup_row12 != null) {
							row12 = fromLookup_row12;
						}

						// ###############################
						{ // start of Var scope

							// ###############################
							// # Vars tables

							Var__tMap_4__Struct Var = Var__tMap_4;// ###############################
							// ###############################
							// # Output tables

							insert_users_ipas = null;

// # Output table : 'insert_users_ipas'
							insert_users_ipas_tmp.ROW_VERSION = new BigDecimal("1");
							insert_users_ipas_tmp.USER_ID = new BigDecimal(Numeric.sequence("s1", 5, 1));
							insert_users_ipas_tmp.USER_NAME = row11.nom_usuario;
							insert_users_ipas_tmp.LOGIN = row11.cod_usuario;
							insert_users_ipas_tmp.IND_ADMINISTRATOR = "N";
							insert_users_ipas_tmp.IND_EXAMINER = "S";
							insert_users_ipas_tmp.IND_INACTIVE = "N";
							insert_users_ipas_tmp.IND_EXTERNAL = null;
							insert_users_ipas_tmp.OFFICE_DIVISION_CODE = "DIN";
							insert_users_ipas_tmp.OFFICE_DEPARTMENT_CODE = "MA";
							insert_users_ipas_tmp.OFFICE_SECTION_CODE = "EX";
							insert_users_ipas_tmp.INITIALS = row11.cod_usuario;
							insert_users_ipas_tmp.FOOTER_DESCRIPTION = null;
							insert_users_ipas_tmp.QTY_WORK = null;
							insert_users_ipas_tmp.IND_TEST_USER = null;
							insert_users_ipas_tmp.FORCE_DOC_ORI = null;
							insert_users_ipas_tmp.LOGIN_PASSWORD = null;
							insert_users_ipas_tmp.LAST_LOGIN_DATE = null;
							insert_users_ipas_tmp.EMAIL = row12.email;
							insert_users_ipas_tmp.TELEPHONE = null;
							insert_users_ipas_tmp.FULL_NAME = row11.nom_usuario;
							insert_users_ipas_tmp.PERSONAL_ID = row12.cedula;
							insert_users_ipas_tmp.CREATION_DATE = null;
							insert_users_ipas_tmp.CREATION_USER_ID = null;
							insert_users_ipas_tmp.LAST_UPDATE_DATE = null;
							insert_users_ipas_tmp.LAST_UPDATE_USER_ID = null;
							insert_users_ipas_tmp.SIGNATURE_TYP = null;
							insert_users_ipas_tmp.SIGNATURE_DATA = null;
							insert_users_ipas = insert_users_ipas_tmp;
// ###############################

						} // end of Var scope

						rejectedInnerJoin_tMap_4 = false;

						tos_count_tMap_4++;

						/**
						 * [tMap_4 main ] stop
						 */

						/**
						 * [tMap_4 process_data_begin ] start
						 */

						currentComponent = "tMap_4";

						/**
						 * [tMap_4 process_data_begin ] stop
						 */
// Start of branch "insert_users_ipas"
						if (insert_users_ipas != null) {
							row15 = null;

							/**
							 * [tDBOutput_5 main ] start
							 */

							currentComponent = "tDBOutput_5";

							if (execStat) {
								runStat.updateStatOnConnection(iterateId, 1, 1

										, "insert_users_ipas"

								);
							}

							row15 = null;
							whetherReject_tDBOutput_5 = false;
							try {
								pstmt_tDBOutput_5.setBigDecimal(1, insert_users_ipas.ROW_VERSION);

								pstmt_tDBOutput_5.setBigDecimal(2, insert_users_ipas.USER_ID);

								if (insert_users_ipas.USER_NAME == null) {
									pstmt_tDBOutput_5.setNull(3, java.sql.Types.VARCHAR);
								} else {
									pstmt_tDBOutput_5.setString(3, insert_users_ipas.USER_NAME);
								}

								if (insert_users_ipas.LOGIN == null) {
									pstmt_tDBOutput_5.setNull(4, java.sql.Types.VARCHAR);
								} else {
									pstmt_tDBOutput_5.setString(4, insert_users_ipas.LOGIN);
								}

								if (insert_users_ipas.IND_ADMINISTRATOR == null) {
									pstmt_tDBOutput_5.setNull(5, java.sql.Types.VARCHAR);
								} else {
									pstmt_tDBOutput_5.setString(5, insert_users_ipas.IND_ADMINISTRATOR);
								}

								if (insert_users_ipas.IND_EXAMINER == null) {
									pstmt_tDBOutput_5.setNull(6, java.sql.Types.VARCHAR);
								} else {
									pstmt_tDBOutput_5.setString(6, insert_users_ipas.IND_EXAMINER);
								}

								if (insert_users_ipas.IND_INACTIVE == null) {
									pstmt_tDBOutput_5.setNull(7, java.sql.Types.VARCHAR);
								} else {
									pstmt_tDBOutput_5.setString(7, insert_users_ipas.IND_INACTIVE);
								}

								if (insert_users_ipas.IND_EXTERNAL == null) {
									pstmt_tDBOutput_5.setNull(8, java.sql.Types.VARCHAR);
								} else {
									pstmt_tDBOutput_5.setString(8, insert_users_ipas.IND_EXTERNAL);
								}

								if (insert_users_ipas.OFFICE_DIVISION_CODE == null) {
									pstmt_tDBOutput_5.setNull(9, java.sql.Types.VARCHAR);
								} else {
									pstmt_tDBOutput_5.setString(9, insert_users_ipas.OFFICE_DIVISION_CODE);
								}

								if (insert_users_ipas.OFFICE_DEPARTMENT_CODE == null) {
									pstmt_tDBOutput_5.setNull(10, java.sql.Types.VARCHAR);
								} else {
									pstmt_tDBOutput_5.setString(10, insert_users_ipas.OFFICE_DEPARTMENT_CODE);
								}

								if (insert_users_ipas.OFFICE_SECTION_CODE == null) {
									pstmt_tDBOutput_5.setNull(11, java.sql.Types.VARCHAR);
								} else {
									pstmt_tDBOutput_5.setString(11, insert_users_ipas.OFFICE_SECTION_CODE);
								}

								if (insert_users_ipas.INITIALS == null) {
									pstmt_tDBOutput_5.setNull(12, java.sql.Types.VARCHAR);
								} else {
									pstmt_tDBOutput_5.setString(12, insert_users_ipas.INITIALS);
								}

								if (insert_users_ipas.FOOTER_DESCRIPTION == null) {
									pstmt_tDBOutput_5.setNull(13, java.sql.Types.VARCHAR);
								} else {
									pstmt_tDBOutput_5.setString(13, insert_users_ipas.FOOTER_DESCRIPTION);
								}

								pstmt_tDBOutput_5.setBigDecimal(14, insert_users_ipas.QTY_WORK);

								if (insert_users_ipas.IND_TEST_USER == null) {
									pstmt_tDBOutput_5.setNull(15, java.sql.Types.VARCHAR);
								} else {
									pstmt_tDBOutput_5.setString(15, insert_users_ipas.IND_TEST_USER);
								}

								if (insert_users_ipas.FORCE_DOC_ORI == null) {
									pstmt_tDBOutput_5.setNull(16, java.sql.Types.VARCHAR);
								} else {
									pstmt_tDBOutput_5.setString(16, insert_users_ipas.FORCE_DOC_ORI);
								}

								if (insert_users_ipas.LOGIN_PASSWORD == null) {
									pstmt_tDBOutput_5.setNull(17, java.sql.Types.VARCHAR);
								} else {
									pstmt_tDBOutput_5.setString(17, insert_users_ipas.LOGIN_PASSWORD);
								}

								if (insert_users_ipas.LAST_LOGIN_DATE != null) {
									pstmt_tDBOutput_5.setTimestamp(18,
											new java.sql.Timestamp(insert_users_ipas.LAST_LOGIN_DATE.getTime()));
								} else {
									pstmt_tDBOutput_5.setNull(18, java.sql.Types.TIMESTAMP);
								}

								if (insert_users_ipas.EMAIL == null) {
									pstmt_tDBOutput_5.setNull(19, java.sql.Types.VARCHAR);
								} else {
									pstmt_tDBOutput_5.setString(19, insert_users_ipas.EMAIL);
								}

								if (insert_users_ipas.TELEPHONE == null) {
									pstmt_tDBOutput_5.setNull(20, java.sql.Types.VARCHAR);
								} else {
									pstmt_tDBOutput_5.setString(20, insert_users_ipas.TELEPHONE);
								}

								if (insert_users_ipas.FULL_NAME == null) {
									pstmt_tDBOutput_5.setNull(21, java.sql.Types.VARCHAR);
								} else {
									pstmt_tDBOutput_5.setString(21, insert_users_ipas.FULL_NAME);
								}

								if (insert_users_ipas.PERSONAL_ID == null) {
									pstmt_tDBOutput_5.setNull(22, java.sql.Types.VARCHAR);
								} else {
									pstmt_tDBOutput_5.setString(22, insert_users_ipas.PERSONAL_ID);
								}

								if (insert_users_ipas.CREATION_DATE != null) {
									pstmt_tDBOutput_5.setTimestamp(23,
											new java.sql.Timestamp(insert_users_ipas.CREATION_DATE.getTime()));
								} else {
									pstmt_tDBOutput_5.setNull(23, java.sql.Types.TIMESTAMP);
								}

								pstmt_tDBOutput_5.setBigDecimal(24, insert_users_ipas.CREATION_USER_ID);

								if (insert_users_ipas.LAST_UPDATE_DATE != null) {
									pstmt_tDBOutput_5.setTimestamp(25,
											new java.sql.Timestamp(insert_users_ipas.LAST_UPDATE_DATE.getTime()));
								} else {
									pstmt_tDBOutput_5.setNull(25, java.sql.Types.TIMESTAMP);
								}

								pstmt_tDBOutput_5.setBigDecimal(26, insert_users_ipas.LAST_UPDATE_USER_ID);

								if (insert_users_ipas.SIGNATURE_TYP == null) {
									pstmt_tDBOutput_5.setNull(27, java.sql.Types.VARCHAR);
								} else {
									pstmt_tDBOutput_5.setString(27, insert_users_ipas.SIGNATURE_TYP);
								}

								if (insert_users_ipas.SIGNATURE_DATA == null) {
									pstmt_tDBOutput_5.setNull(28, java.sql.Types.OTHER);
								} else {
									pstmt_tDBOutput_5.setObject(28, insert_users_ipas.SIGNATURE_DATA);
								}

								nb_line_tDBOutput_5++;
								int processedCount_tDBOutput_5 = pstmt_tDBOutput_5.executeUpdate();
								insertedCount_tDBOutput_5 += processedCount_tDBOutput_5;
								rowsToCommitCount_tDBOutput_5 += processedCount_tDBOutput_5;
							} catch (java.lang.Exception e) {
								whetherReject_tDBOutput_5 = true;
								row15 = new row15Struct();
								row15.ROW_VERSION = insert_users_ipas.ROW_VERSION;
								row15.USER_ID = insert_users_ipas.USER_ID;
								row15.USER_NAME = insert_users_ipas.USER_NAME;
								row15.LOGIN = insert_users_ipas.LOGIN;
								row15.IND_ADMINISTRATOR = insert_users_ipas.IND_ADMINISTRATOR;
								row15.IND_EXAMINER = insert_users_ipas.IND_EXAMINER;
								row15.IND_INACTIVE = insert_users_ipas.IND_INACTIVE;
								row15.IND_EXTERNAL = insert_users_ipas.IND_EXTERNAL;
								row15.OFFICE_DIVISION_CODE = insert_users_ipas.OFFICE_DIVISION_CODE;
								row15.OFFICE_DEPARTMENT_CODE = insert_users_ipas.OFFICE_DEPARTMENT_CODE;
								row15.OFFICE_SECTION_CODE = insert_users_ipas.OFFICE_SECTION_CODE;
								row15.INITIALS = insert_users_ipas.INITIALS;
								row15.FOOTER_DESCRIPTION = insert_users_ipas.FOOTER_DESCRIPTION;
								row15.QTY_WORK = insert_users_ipas.QTY_WORK;
								row15.IND_TEST_USER = insert_users_ipas.IND_TEST_USER;
								row15.FORCE_DOC_ORI = insert_users_ipas.FORCE_DOC_ORI;
								row15.LOGIN_PASSWORD = insert_users_ipas.LOGIN_PASSWORD;
								row15.LAST_LOGIN_DATE = insert_users_ipas.LAST_LOGIN_DATE;
								row15.EMAIL = insert_users_ipas.EMAIL;
								row15.TELEPHONE = insert_users_ipas.TELEPHONE;
								row15.FULL_NAME = insert_users_ipas.FULL_NAME;
								row15.PERSONAL_ID = insert_users_ipas.PERSONAL_ID;
								row15.CREATION_DATE = insert_users_ipas.CREATION_DATE;
								row15.CREATION_USER_ID = insert_users_ipas.CREATION_USER_ID;
								row15.LAST_UPDATE_DATE = insert_users_ipas.LAST_UPDATE_DATE;
								row15.LAST_UPDATE_USER_ID = insert_users_ipas.LAST_UPDATE_USER_ID;
								row15.SIGNATURE_TYP = insert_users_ipas.SIGNATURE_TYP;
								row15.SIGNATURE_DATA = insert_users_ipas.SIGNATURE_DATA;
								rejectedCount_tDBOutput_5 = rejectedCount_tDBOutput_5 + 1;
								row15.errorCode = ((java.sql.SQLException) e).getSQLState();
								row15.errorMessage = e.getMessage() + " - Line: " + tos_count_tDBOutput_5;
							}
							if (!whetherReject_tDBOutput_5) {
							}
							////////// batch execute by batch size///////
							class LimitBytesHelper_tDBOutput_5 {
								public int limitBytePart1(int counter, java.sql.PreparedStatement pstmt_tDBOutput_5)
										throws Exception {
									try {

										for (int countEach_tDBOutput_5 : pstmt_tDBOutput_5.executeBatch()) {
											if (countEach_tDBOutput_5 == -2 || countEach_tDBOutput_5 == -3) {
												break;
											}
											counter += countEach_tDBOutput_5;
										}

									} catch (java.sql.BatchUpdateException e) {

										int countSum_tDBOutput_5 = 0;
										for (int countEach_tDBOutput_5 : e.getUpdateCounts()) {
											counter += (countEach_tDBOutput_5 < 0 ? 0 : countEach_tDBOutput_5);
										}

										System.err.println(e.getMessage());

									}
									return counter;
								}

								public int limitBytePart2(int counter, java.sql.PreparedStatement pstmt_tDBOutput_5)
										throws Exception {
									try {

										for (int countEach_tDBOutput_5 : pstmt_tDBOutput_5.executeBatch()) {
											if (countEach_tDBOutput_5 == -2 || countEach_tDBOutput_5 == -3) {
												break;
											}
											counter += countEach_tDBOutput_5;
										}

									} catch (java.sql.BatchUpdateException e) {

										for (int countEach_tDBOutput_5 : e.getUpdateCounts()) {
											counter += (countEach_tDBOutput_5 < 0 ? 0 : countEach_tDBOutput_5);
										}

										System.err.println(e.getMessage());

									}
									return counter;
								}
							}

							//////////// commit every////////////

							tos_count_tDBOutput_5++;

							/**
							 * [tDBOutput_5 main ] stop
							 */

							/**
							 * [tDBOutput_5 process_data_begin ] start
							 */

							currentComponent = "tDBOutput_5";

							/**
							 * [tDBOutput_5 process_data_begin ] stop
							 */
// Start of branch "row15"
							if (row15 != null) {

								/**
								 * [tLogRow_5 main ] start
								 */

								currentComponent = "tLogRow_5";

								if (execStat) {
									runStat.updateStatOnConnection(iterateId, 1, 1

											, "row15"

									);
								}

///////////////////////		

								strBuffer_tLogRow_5 = new StringBuilder();

								if (row15.ROW_VERSION != null) { //

									strBuffer_tLogRow_5.append(row15.ROW_VERSION
											.setScale(0, java.math.RoundingMode.HALF_UP).toPlainString());

								} //

								strBuffer_tLogRow_5.append("|");

								if (row15.USER_ID != null) { //

									strBuffer_tLogRow_5.append(
											row15.USER_ID.setScale(0, java.math.RoundingMode.HALF_UP).toPlainString());

								} //

								strBuffer_tLogRow_5.append("|");

								if (row15.USER_NAME != null) { //

									strBuffer_tLogRow_5.append(String.valueOf(row15.USER_NAME));

								} //

								strBuffer_tLogRow_5.append("|");

								if (row15.LOGIN != null) { //

									strBuffer_tLogRow_5.append(String.valueOf(row15.LOGIN));

								} //

								strBuffer_tLogRow_5.append("|");

								if (row15.IND_ADMINISTRATOR != null) { //

									strBuffer_tLogRow_5.append(String.valueOf(row15.IND_ADMINISTRATOR));

								} //

								strBuffer_tLogRow_5.append("|");

								if (row15.IND_EXAMINER != null) { //

									strBuffer_tLogRow_5.append(String.valueOf(row15.IND_EXAMINER));

								} //

								strBuffer_tLogRow_5.append("|");

								if (row15.IND_INACTIVE != null) { //

									strBuffer_tLogRow_5.append(String.valueOf(row15.IND_INACTIVE));

								} //

								strBuffer_tLogRow_5.append("|");

								if (row15.IND_EXTERNAL != null) { //

									strBuffer_tLogRow_5.append(String.valueOf(row15.IND_EXTERNAL));

								} //

								strBuffer_tLogRow_5.append("|");

								if (row15.OFFICE_DIVISION_CODE != null) { //

									strBuffer_tLogRow_5.append(String.valueOf(row15.OFFICE_DIVISION_CODE));

								} //

								strBuffer_tLogRow_5.append("|");

								if (row15.OFFICE_DEPARTMENT_CODE != null) { //

									strBuffer_tLogRow_5.append(String.valueOf(row15.OFFICE_DEPARTMENT_CODE));

								} //

								strBuffer_tLogRow_5.append("|");

								if (row15.OFFICE_SECTION_CODE != null) { //

									strBuffer_tLogRow_5.append(String.valueOf(row15.OFFICE_SECTION_CODE));

								} //

								strBuffer_tLogRow_5.append("|");

								if (row15.INITIALS != null) { //

									strBuffer_tLogRow_5.append(String.valueOf(row15.INITIALS));

								} //

								strBuffer_tLogRow_5.append("|");

								if (row15.FOOTER_DESCRIPTION != null) { //

									strBuffer_tLogRow_5.append(String.valueOf(row15.FOOTER_DESCRIPTION));

								} //

								strBuffer_tLogRow_5.append("|");

								if (row15.QTY_WORK != null) { //

									strBuffer_tLogRow_5.append(
											row15.QTY_WORK.setScale(0, java.math.RoundingMode.HALF_UP).toPlainString());

								} //

								strBuffer_tLogRow_5.append("|");

								if (row15.IND_TEST_USER != null) { //

									strBuffer_tLogRow_5.append(String.valueOf(row15.IND_TEST_USER));

								} //

								strBuffer_tLogRow_5.append("|");

								if (row15.FORCE_DOC_ORI != null) { //

									strBuffer_tLogRow_5.append(String.valueOf(row15.FORCE_DOC_ORI));

								} //

								strBuffer_tLogRow_5.append("|");

								if (row15.LOGIN_PASSWORD != null) { //

									strBuffer_tLogRow_5.append(String.valueOf(row15.LOGIN_PASSWORD));

								} //

								strBuffer_tLogRow_5.append("|");

								if (row15.LAST_LOGIN_DATE != null) { //

									strBuffer_tLogRow_5
											.append(FormatterUtils.format_Date(row15.LAST_LOGIN_DATE, "dd-MM-yyyy"));

								} //

								strBuffer_tLogRow_5.append("|");

								if (row15.EMAIL != null) { //

									strBuffer_tLogRow_5.append(String.valueOf(row15.EMAIL));

								} //

								strBuffer_tLogRow_5.append("|");

								if (row15.TELEPHONE != null) { //

									strBuffer_tLogRow_5.append(String.valueOf(row15.TELEPHONE));

								} //

								strBuffer_tLogRow_5.append("|");

								if (row15.FULL_NAME != null) { //

									strBuffer_tLogRow_5.append(String.valueOf(row15.FULL_NAME));

								} //

								strBuffer_tLogRow_5.append("|");

								if (row15.PERSONAL_ID != null) { //

									strBuffer_tLogRow_5.append(String.valueOf(row15.PERSONAL_ID));

								} //

								strBuffer_tLogRow_5.append("|");

								if (row15.CREATION_DATE != null) { //

									strBuffer_tLogRow_5
											.append(FormatterUtils.format_Date(row15.CREATION_DATE, "dd-MM-yyyy"));

								} //

								strBuffer_tLogRow_5.append("|");

								if (row15.CREATION_USER_ID != null) { //

									strBuffer_tLogRow_5.append(row15.CREATION_USER_ID
											.setScale(0, java.math.RoundingMode.HALF_UP).toPlainString());

								} //

								strBuffer_tLogRow_5.append("|");

								if (row15.LAST_UPDATE_DATE != null) { //

									strBuffer_tLogRow_5
											.append(FormatterUtils.format_Date(row15.LAST_UPDATE_DATE, "dd-MM-yyyy"));

								} //

								strBuffer_tLogRow_5.append("|");

								if (row15.LAST_UPDATE_USER_ID != null) { //

									strBuffer_tLogRow_5.append(row15.LAST_UPDATE_USER_ID
											.setScale(0, java.math.RoundingMode.HALF_UP).toPlainString());

								} //

								strBuffer_tLogRow_5.append("|");

								if (row15.SIGNATURE_TYP != null) { //

									strBuffer_tLogRow_5.append(String.valueOf(row15.SIGNATURE_TYP));

								} //

								strBuffer_tLogRow_5.append("|");

								if (row15.SIGNATURE_DATA != null) { //

									strBuffer_tLogRow_5.append(String.valueOf(row15.SIGNATURE_DATA));

								} //

								strBuffer_tLogRow_5.append("|");

								if (row15.errorCode != null) { //

									strBuffer_tLogRow_5.append(String.valueOf(row15.errorCode));

								} //

								strBuffer_tLogRow_5.append("|");

								if (row15.errorMessage != null) { //

									strBuffer_tLogRow_5.append(String.valueOf(row15.errorMessage));

								} //

								if (globalMap.get("tLogRow_CONSOLE") != null) {
									consoleOut_tLogRow_5 = (java.io.PrintStream) globalMap.get("tLogRow_CONSOLE");
								} else {
									consoleOut_tLogRow_5 = new java.io.PrintStream(
											new java.io.BufferedOutputStream(System.out));
									globalMap.put("tLogRow_CONSOLE", consoleOut_tLogRow_5);
								}
								consoleOut_tLogRow_5.println(strBuffer_tLogRow_5.toString());
								consoleOut_tLogRow_5.flush();
								nb_line_tLogRow_5++;
//////

//////                    

///////////////////////    			

								tos_count_tLogRow_5++;

								/**
								 * [tLogRow_5 main ] stop
								 */

								/**
								 * [tLogRow_5 process_data_begin ] start
								 */

								currentComponent = "tLogRow_5";

								/**
								 * [tLogRow_5 process_data_begin ] stop
								 */

								/**
								 * [tLogRow_5 process_data_end ] start
								 */

								currentComponent = "tLogRow_5";

								/**
								 * [tLogRow_5 process_data_end ] stop
								 */

							} // End of branch "row15"

							/**
							 * [tDBOutput_5 process_data_end ] start
							 */

							currentComponent = "tDBOutput_5";

							/**
							 * [tDBOutput_5 process_data_end ] stop
							 */

						} // End of branch "insert_users_ipas"

						/**
						 * [tMap_4 process_data_end ] start
						 */

						currentComponent = "tMap_4";

						/**
						 * [tMap_4 process_data_end ] stop
						 */

						/**
						 * [tDBInput_9 process_data_end ] start
						 */

						currentComponent = "tDBInput_9";

						/**
						 * [tDBInput_9 process_data_end ] stop
						 */

						/**
						 * [tDBInput_9 end ] start
						 */

						currentComponent = "tDBInput_9";

					}
				} finally {
					if (rs_tDBInput_9 != null) {
						rs_tDBInput_9.close();
					}
					if (stmt_tDBInput_9 != null) {
						stmt_tDBInput_9.close();
					}
				}
				globalMap.put("tDBInput_9_NB_LINE", nb_line_tDBInput_9);

				ok_Hash.put("tDBInput_9", true);
				end_Hash.put("tDBInput_9", System.currentTimeMillis());

				/**
				 * [tDBInput_9 end ] stop
				 */

				/**
				 * [tMap_4 end ] start
				 */

				currentComponent = "tMap_4";

// ###############################
// # Lookup hashes releasing
				if (tHash_Lookup_row12 != null) {
					tHash_Lookup_row12.endGet();
				}
				globalMap.remove("tHash_Lookup_row12");

// ###############################      

				if (execStat) {
					runStat.updateStat(resourceMap, iterateId, 2, 0, "row11");
				}

				ok_Hash.put("tMap_4", true);
				end_Hash.put("tMap_4", System.currentTimeMillis());

				/**
				 * [tMap_4 end ] stop
				 */

				/**
				 * [tDBOutput_5 end ] start
				 */

				currentComponent = "tDBOutput_5";

				if (pstmt_tDBOutput_5 != null) {

					pstmt_tDBOutput_5.close();
					resourceMap.remove("pstmt_tDBOutput_5");

				}
				resourceMap.put("statementClosed_tDBOutput_5", true);

				nb_line_deleted_tDBOutput_5 = nb_line_deleted_tDBOutput_5 + deletedCount_tDBOutput_5;
				nb_line_update_tDBOutput_5 = nb_line_update_tDBOutput_5 + updatedCount_tDBOutput_5;
				nb_line_inserted_tDBOutput_5 = nb_line_inserted_tDBOutput_5 + insertedCount_tDBOutput_5;
				nb_line_rejected_tDBOutput_5 = nb_line_rejected_tDBOutput_5 + rejectedCount_tDBOutput_5;

				globalMap.put("tDBOutput_5_NB_LINE", nb_line_tDBOutput_5);
				globalMap.put("tDBOutput_5_NB_LINE_UPDATED", nb_line_update_tDBOutput_5);
				globalMap.put("tDBOutput_5_NB_LINE_INSERTED", nb_line_inserted_tDBOutput_5);
				globalMap.put("tDBOutput_5_NB_LINE_DELETED", nb_line_deleted_tDBOutput_5);
				globalMap.put("tDBOutput_5_NB_LINE_REJECTED", nb_line_rejected_tDBOutput_5);

				if (execStat) {
					runStat.updateStat(resourceMap, iterateId, 2, 0, "insert_users_ipas");
				}

				ok_Hash.put("tDBOutput_5", true);
				end_Hash.put("tDBOutput_5", System.currentTimeMillis());

				/**
				 * [tDBOutput_5 end ] stop
				 */

				/**
				 * [tLogRow_5 end ] start
				 */

				currentComponent = "tLogRow_5";

//////
//////
				globalMap.put("tLogRow_5_NB_LINE", nb_line_tLogRow_5);

///////////////////////    			

				if (execStat) {
					runStat.updateStat(resourceMap, iterateId, 2, 0, "row15");
				}

				ok_Hash.put("tLogRow_5", true);
				end_Hash.put("tLogRow_5", System.currentTimeMillis());

				/**
				 * [tLogRow_5 end ] stop
				 */

			} // end the resume

		} catch (java.lang.Exception e) {

			TalendException te = new TalendException(e, currentComponent, globalMap);

			throw te;
		} catch (java.lang.Error error) {

			runStat.stopThreadStat();

			throw error;
		} finally {

			// free memory for "tMap_4"
			globalMap.remove("tHash_Lookup_row12");

			try {

				/**
				 * [tDBInput_9 finally ] start
				 */

				currentComponent = "tDBInput_9";

				/**
				 * [tDBInput_9 finally ] stop
				 */

				/**
				 * [tMap_4 finally ] start
				 */

				currentComponent = "tMap_4";

				/**
				 * [tMap_4 finally ] stop
				 */

				/**
				 * [tDBOutput_5 finally ] start
				 */

				currentComponent = "tDBOutput_5";

				if (resourceMap.get("statementClosed_tDBOutput_5") == null) {
					java.sql.PreparedStatement pstmtToClose_tDBOutput_5 = null;
					if ((pstmtToClose_tDBOutput_5 = (java.sql.PreparedStatement) resourceMap
							.remove("pstmt_tDBOutput_5")) != null) {
						pstmtToClose_tDBOutput_5.close();
					}
				}

				/**
				 * [tDBOutput_5 finally ] stop
				 */

				/**
				 * [tLogRow_5 finally ] start
				 */

				currentComponent = "tLogRow_5";

				/**
				 * [tLogRow_5 finally ] stop
				 */

			} catch (java.lang.Exception e) {
				// ignore
			} catch (java.lang.Error error) {
				// ignore
			}
			resourceMap = null;
		}

		globalMap.put("tDBInput_9_SUBPROCESS_STATE", 1);
	}

	public static class row12Struct implements routines.system.IPersistableComparableLookupRow<row12Struct> {
		final static byte[] commonByteArrayLock_WIPO_PROJECTS_A1_Copy_users_to_ipas = new byte[0];
		static byte[] commonByteArray_WIPO_PROJECTS_A1_Copy_users_to_ipas = new byte[0];
		protected static final int DEFAULT_HASHCODE = 1;
		protected static final int PRIME = 31;
		protected int hashCode = DEFAULT_HASHCODE;
		public boolean hashCodeDirty = true;

		public String loopKey;

		public Long codigo;

		public Long getCodigo() {
			return this.codigo;
		}

		public String nombre;

		public String getNombre() {
			return this.nombre;
		}

		public String tipo;

		public String getTipo() {
			return this.tipo;
		}

		public String login;

		public String getLogin() {
			return this.login;
		}

		public String clave;

		public String getClave() {
			return this.clave;
		}

		public String email;

		public String getEmail() {
			return this.email;
		}

		public java.util.Date usuario_freg;

		public java.util.Date getUsuario_freg() {
			return this.usuario_freg;
		}

		public String cedula;

		public String getCedula() {
			return this.cedula;
		}

		@Override
		public int hashCode() {
			if (this.hashCodeDirty) {
				final int prime = PRIME;
				int result = DEFAULT_HASHCODE;

				result = prime * result + ((this.nombre == null) ? 0 : this.nombre.hashCode());

				this.hashCode = result;
				this.hashCodeDirty = false;
			}
			return this.hashCode;
		}

		@Override
		public boolean equals(Object obj) {
			if (this == obj)
				return true;
			if (obj == null)
				return false;
			if (getClass() != obj.getClass())
				return false;
			final row12Struct other = (row12Struct) obj;

			if (this.nombre == null) {
				if (other.nombre != null)
					return false;

			} else if (!this.nombre.equals(other.nombre))

				return false;

			return true;
		}

		public void copyDataTo(row12Struct other) {

			other.codigo = this.codigo;
			other.nombre = this.nombre;
			other.tipo = this.tipo;
			other.login = this.login;
			other.clave = this.clave;
			other.email = this.email;
			other.usuario_freg = this.usuario_freg;
			other.cedula = this.cedula;

		}

		public void copyKeysDataTo(row12Struct other) {

			other.nombre = this.nombre;

		}

		private String readString(ObjectInputStream dis) throws IOException {
			String strReturn = null;
			int length = 0;
			length = dis.readInt();
			if (length == -1) {
				strReturn = null;
			} else {
				if (length > commonByteArray_WIPO_PROJECTS_A1_Copy_users_to_ipas.length) {
					if (length < 1024 && commonByteArray_WIPO_PROJECTS_A1_Copy_users_to_ipas.length == 0) {
						commonByteArray_WIPO_PROJECTS_A1_Copy_users_to_ipas = new byte[1024];
					} else {
						commonByteArray_WIPO_PROJECTS_A1_Copy_users_to_ipas = new byte[2 * length];
					}
				}
				dis.readFully(commonByteArray_WIPO_PROJECTS_A1_Copy_users_to_ipas, 0, length);
				strReturn = new String(commonByteArray_WIPO_PROJECTS_A1_Copy_users_to_ipas, 0, length, utf8Charset);
			}
			return strReturn;
		}

		private void writeString(String str, ObjectOutputStream dos) throws IOException {
			if (str == null) {
				dos.writeInt(-1);
			} else {
				byte[] byteArray = str.getBytes(utf8Charset);
				dos.writeInt(byteArray.length);
				dos.write(byteArray);
			}
		}

		private String readString(DataInputStream dis, ObjectInputStream ois) throws IOException {
			String strReturn = null;
			int length = 0;
			length = dis.readInt();
			if (length == -1) {
				strReturn = null;
			} else {
				byte[] byteArray = new byte[length];
				dis.read(byteArray);
				strReturn = new String(byteArray, utf8Charset);
			}
			return strReturn;
		}

		private void writeString(String str, DataOutputStream dos, ObjectOutputStream oos) throws IOException {
			if (str == null) {
				dos.writeInt(-1);
			} else {
				byte[] byteArray = str.getBytes(utf8Charset);
				dos.writeInt(byteArray.length);
				dos.write(byteArray);
			}
		}

		private java.util.Date readDate(DataInputStream dis, ObjectInputStream ois) throws IOException {
			java.util.Date dateReturn = null;
			int length = 0;
			length = dis.readByte();
			if (length == -1) {
				dateReturn = null;
			} else {
				dateReturn = new Date(dis.readLong());
			}
			return dateReturn;
		}

		private void writeDate(java.util.Date date1, DataOutputStream dos, ObjectOutputStream oos) throws IOException {
			if (date1 == null) {
				dos.writeByte(-1);
			} else {
				dos.writeByte(0);
				dos.writeLong(date1.getTime());
			}
		}

		public void readKeysData(ObjectInputStream dis) {

			synchronized (commonByteArrayLock_WIPO_PROJECTS_A1_Copy_users_to_ipas) {

				try {

					int length = 0;

					this.nombre = readString(dis);

				} catch (IOException e) {
					throw new RuntimeException(e);

				}

			}

		}

		public void writeKeysData(ObjectOutputStream dos) {
			try {

				// String

				writeString(this.nombre, dos);

			} catch (IOException e) {
				throw new RuntimeException(e);
			}

		}

		/**
		 * Fill Values data by reading ObjectInputStream.
		 */
		public void readValuesData(DataInputStream dis, ObjectInputStream ois) {
			try {

				int length = 0;

				length = dis.readByte();
				if (length == -1) {
					this.codigo = null;
				} else {
					this.codigo = dis.readLong();
				}

				this.tipo = readString(dis, ois);

				this.login = readString(dis, ois);

				this.clave = readString(dis, ois);

				this.email = readString(dis, ois);

				this.usuario_freg = readDate(dis, ois);

				this.cedula = readString(dis, ois);

			} catch (IOException e) {
				throw new RuntimeException(e);

			}

		}

		/**
		 * Return a byte array which represents Values data.
		 */
		public void writeValuesData(DataOutputStream dos, ObjectOutputStream oos) {
			try {

				if (this.codigo == null) {
					dos.writeByte(-1);
				} else {
					dos.writeByte(0);
					dos.writeLong(this.codigo);
				}

				writeString(this.tipo, dos, oos);

				writeString(this.login, dos, oos);

				writeString(this.clave, dos, oos);

				writeString(this.email, dos, oos);

				writeDate(this.usuario_freg, dos, oos);

				writeString(this.cedula, dos, oos);

			} catch (IOException e) {
				throw new RuntimeException(e);
			}

		}

		public String toString() {

			StringBuilder sb = new StringBuilder();
			sb.append(super.toString());
			sb.append("[");
			sb.append("codigo=" + String.valueOf(codigo));
			sb.append(",nombre=" + nombre);
			sb.append(",tipo=" + tipo);
			sb.append(",login=" + login);
			sb.append(",clave=" + clave);
			sb.append(",email=" + email);
			sb.append(",usuario_freg=" + String.valueOf(usuario_freg));
			sb.append(",cedula=" + cedula);
			sb.append("]");

			return sb.toString();
		}

		/**
		 * Compare keys
		 */
		public int compareTo(row12Struct other) {

			int returnValue = -1;

			returnValue = checkNullsAndCompare(this.nombre, other.nombre);
			if (returnValue != 0) {
				return returnValue;
			}

			return returnValue;
		}

		private int checkNullsAndCompare(Object object1, Object object2) {
			int returnValue = 0;
			if (object1 instanceof Comparable && object2 instanceof Comparable) {
				returnValue = ((Comparable) object1).compareTo(object2);
			} else if (object1 != null && object2 != null) {
				returnValue = compareStrings(object1.toString(), object2.toString());
			} else if (object1 == null && object2 != null) {
				returnValue = 1;
			} else if (object1 != null && object2 == null) {
				returnValue = -1;
			} else {
				returnValue = 0;
			}

			return returnValue;
		}

		private int compareStrings(String string1, String string2) {
			return string1.compareTo(string2);
		}

	}

	public void tDBInput_6Process(final java.util.Map<String, Object> globalMap) throws TalendException {
		globalMap.put("tDBInput_6_SUBPROCESS_STATE", 0);

		final boolean execStat = this.execStat;

		String iterateId = "";

		String currentComponent = "";
		java.util.Map<String, Object> resourceMap = new java.util.HashMap<String, Object>();

		try {
			// TDI-39566 avoid throwing an useless Exception
			boolean resumeIt = true;
			if (globalResumeTicket == false && resumeEntryMethodName != null) {
				String currentMethodName = new java.lang.Exception().getStackTrace()[0].getMethodName();
				resumeIt = resumeEntryMethodName.equals(currentMethodName);
			}
			if (resumeIt || globalResumeTicket) { // start the resume
				globalResumeTicket = true;

				row12Struct row12 = new row12Struct();

				/**
				 * [tAdvancedHash_row12 begin ] start
				 */

				ok_Hash.put("tAdvancedHash_row12", false);
				start_Hash.put("tAdvancedHash_row12", System.currentTimeMillis());

				currentComponent = "tAdvancedHash_row12";

				if (execStat) {
					runStat.updateStatOnConnection(resourceMap, iterateId, 0, 0, "row12");
				}

				int tos_count_tAdvancedHash_row12 = 0;

				// connection name:row12
				// source node:tDBInput_6 - inputs:(after_tDBInput_9) outputs:(row12,row12) |
				// target node:tAdvancedHash_row12 - inputs:(row12) outputs:()
				// linked node: tMap_4 - inputs:(row11,row12) outputs:(insert_users_ipas)

				org.talend.designer.components.lookup.common.ICommonLookup.MATCHING_MODE matchingModeEnum_row12 = org.talend.designer.components.lookup.common.ICommonLookup.MATCHING_MODE.UNIQUE_MATCH;

				org.talend.designer.components.lookup.memory.AdvancedMemoryLookup<row12Struct> tHash_Lookup_row12 = org.talend.designer.components.lookup.memory.AdvancedMemoryLookup
						.<row12Struct>getLookup(matchingModeEnum_row12);

				globalMap.put("tHash_Lookup_row12", tHash_Lookup_row12);

				/**
				 * [tAdvancedHash_row12 begin ] stop
				 */

				/**
				 * [tDBInput_6 begin ] start
				 */

				ok_Hash.put("tDBInput_6", false);
				start_Hash.put("tDBInput_6", System.currentTimeMillis());

				currentComponent = "tDBInput_6";

				int tos_count_tDBInput_6 = 0;

				int nb_line_tDBInput_6 = 0;
				java.sql.Connection conn_tDBInput_6 = null;
				conn_tDBInput_6 = (java.sql.Connection) globalMap.get("conn_tDBConnection_2");

				java.sql.Statement stmt_tDBInput_6 = conn_tDBInput_6.createStatement();

				String dbquery_tDBInput_6 = "SELECT \n  \"Paraguay\".\"public\".\"usuarios\".\"codigo\", \n  \"Paraguay\".\"public\".\"usuarios\".\"nombre\", \n  \"Par"
						+ "aguay\".\"public\".\"usuarios\".\"tipo\", \n  \"Paraguay\".\"public\".\"usuarios\".\"login\", \n  \"Paraguay\".\"public\"."
						+ "\"usuarios\".\"clave\", \n  \"Paraguay\".\"public\".\"usuarios\".\"email\", \n  \"Paraguay\".\"public\".\"usuarios\".\"usu"
						+ "ario_freg\", \n  \"Paraguay\".\"public\".\"usuarios\".\"cedula\"\nFROM \"Paraguay\".\"public\".\"usuarios\"";

				globalMap.put("tDBInput_6_QUERY", dbquery_tDBInput_6);
				java.sql.ResultSet rs_tDBInput_6 = null;

				try {
					rs_tDBInput_6 = stmt_tDBInput_6.executeQuery(dbquery_tDBInput_6);
					java.sql.ResultSetMetaData rsmd_tDBInput_6 = rs_tDBInput_6.getMetaData();
					int colQtyInRs_tDBInput_6 = rsmd_tDBInput_6.getColumnCount();

					String tmpContent_tDBInput_6 = null;

					while (rs_tDBInput_6.next()) {
						nb_line_tDBInput_6++;

						if (colQtyInRs_tDBInput_6 < 1) {
							row12.codigo = null;
						} else {

							row12.codigo = rs_tDBInput_6.getLong(1);
							if (rs_tDBInput_6.wasNull()) {
								row12.codigo = null;
							}
						}
						if (colQtyInRs_tDBInput_6 < 2) {
							row12.nombre = null;
						} else {

							row12.nombre = routines.system.JDBCUtil.getString(rs_tDBInput_6, 2, false);
						}
						if (colQtyInRs_tDBInput_6 < 3) {
							row12.tipo = null;
						} else {

							row12.tipo = routines.system.JDBCUtil.getString(rs_tDBInput_6, 3, false);
						}
						if (colQtyInRs_tDBInput_6 < 4) {
							row12.login = null;
						} else {

							row12.login = routines.system.JDBCUtil.getString(rs_tDBInput_6, 4, false);
						}
						if (colQtyInRs_tDBInput_6 < 5) {
							row12.clave = null;
						} else {

							row12.clave = routines.system.JDBCUtil.getString(rs_tDBInput_6, 5, false);
						}
						if (colQtyInRs_tDBInput_6 < 6) {
							row12.email = null;
						} else {

							row12.email = routines.system.JDBCUtil.getString(rs_tDBInput_6, 6, false);
						}
						if (colQtyInRs_tDBInput_6 < 7) {
							row12.usuario_freg = null;
						} else {

							row12.usuario_freg = routines.system.JDBCUtil.getDate(rs_tDBInput_6, 7);
						}
						if (colQtyInRs_tDBInput_6 < 8) {
							row12.cedula = null;
						} else {

							row12.cedula = routines.system.JDBCUtil.getString(rs_tDBInput_6, 8, false);
						}

						/**
						 * [tDBInput_6 begin ] stop
						 */

						/**
						 * [tDBInput_6 main ] start
						 */

						currentComponent = "tDBInput_6";

						tos_count_tDBInput_6++;

						/**
						 * [tDBInput_6 main ] stop
						 */

						/**
						 * [tDBInput_6 process_data_begin ] start
						 */

						currentComponent = "tDBInput_6";

						/**
						 * [tDBInput_6 process_data_begin ] stop
						 */

						/**
						 * [tAdvancedHash_row12 main ] start
						 */

						currentComponent = "tAdvancedHash_row12";

						if (execStat) {
							runStat.updateStatOnConnection(iterateId, 1, 1

									, "row12"

							);
						}

						row12Struct row12_HashRow = new row12Struct();

						row12_HashRow.codigo = row12.codigo;

						row12_HashRow.nombre = row12.nombre;

						row12_HashRow.tipo = row12.tipo;

						row12_HashRow.login = row12.login;

						row12_HashRow.clave = row12.clave;

						row12_HashRow.email = row12.email;

						row12_HashRow.usuario_freg = row12.usuario_freg;

						row12_HashRow.cedula = row12.cedula;

						tHash_Lookup_row12.put(row12_HashRow);

						tos_count_tAdvancedHash_row12++;

						/**
						 * [tAdvancedHash_row12 main ] stop
						 */

						/**
						 * [tAdvancedHash_row12 process_data_begin ] start
						 */

						currentComponent = "tAdvancedHash_row12";

						/**
						 * [tAdvancedHash_row12 process_data_begin ] stop
						 */

						/**
						 * [tAdvancedHash_row12 process_data_end ] start
						 */

						currentComponent = "tAdvancedHash_row12";

						/**
						 * [tAdvancedHash_row12 process_data_end ] stop
						 */

						/**
						 * [tDBInput_6 process_data_end ] start
						 */

						currentComponent = "tDBInput_6";

						/**
						 * [tDBInput_6 process_data_end ] stop
						 */

						/**
						 * [tDBInput_6 end ] start
						 */

						currentComponent = "tDBInput_6";

					}
				} finally {
					if (rs_tDBInput_6 != null) {
						rs_tDBInput_6.close();
					}
					if (stmt_tDBInput_6 != null) {
						stmt_tDBInput_6.close();
					}
				}
				globalMap.put("tDBInput_6_NB_LINE", nb_line_tDBInput_6);

				ok_Hash.put("tDBInput_6", true);
				end_Hash.put("tDBInput_6", System.currentTimeMillis());

				/**
				 * [tDBInput_6 end ] stop
				 */

				/**
				 * [tAdvancedHash_row12 end ] start
				 */

				currentComponent = "tAdvancedHash_row12";

				tHash_Lookup_row12.endPut();

				if (execStat) {
					runStat.updateStat(resourceMap, iterateId, 2, 0, "row12");
				}

				ok_Hash.put("tAdvancedHash_row12", true);
				end_Hash.put("tAdvancedHash_row12", System.currentTimeMillis());

				/**
				 * [tAdvancedHash_row12 end ] stop
				 */

			} // end the resume

		} catch (java.lang.Exception e) {

			TalendException te = new TalendException(e, currentComponent, globalMap);

			throw te;
		} catch (java.lang.Error error) {

			runStat.stopThreadStat();

			throw error;
		} finally {

			try {

				/**
				 * [tDBInput_6 finally ] start
				 */

				currentComponent = "tDBInput_6";

				/**
				 * [tDBInput_6 finally ] stop
				 */

				/**
				 * [tAdvancedHash_row12 finally ] start
				 */

				currentComponent = "tAdvancedHash_row12";

				/**
				 * [tAdvancedHash_row12 finally ] stop
				 */

			} catch (java.lang.Exception e) {
				// ignore
			} catch (java.lang.Error error) {
				// ignore
			}
			resourceMap = null;
		}

		globalMap.put("tDBInput_6_SUBPROCESS_STATE", 1);
	}

	public static class row1Struct implements routines.system.IPersistableRow<row1Struct> {
		final static byte[] commonByteArrayLock_WIPO_PROJECTS_A1_Copy_users_to_ipas = new byte[0];
		static byte[] commonByteArray_WIPO_PROJECTS_A1_Copy_users_to_ipas = new byte[0];

		public java.util.Date moment;

		public java.util.Date getMoment() {
			return this.moment;
		}

		public String pid;

		public String getPid() {
			return this.pid;
		}

		public String father_pid;

		public String getFather_pid() {
			return this.father_pid;
		}

		public String root_pid;

		public String getRoot_pid() {
			return this.root_pid;
		}

		public Long system_pid;

		public Long getSystem_pid() {
			return this.system_pid;
		}

		public String project;

		public String getProject() {
			return this.project;
		}

		public String job;

		public String getJob() {
			return this.job;
		}

		public String job_repository_id;

		public String getJob_repository_id() {
			return this.job_repository_id;
		}

		public String job_version;

		public String getJob_version() {
			return this.job_version;
		}

		public String context;

		public String getContext() {
			return this.context;
		}

		public String origin;

		public String getOrigin() {
			return this.origin;
		}

		public String message_type;

		public String getMessage_type() {
			return this.message_type;
		}

		public String message;

		public String getMessage() {
			return this.message;
		}

		public Long duration;

		public Long getDuration() {
			return this.duration;
		}

		private java.util.Date readDate(ObjectInputStream dis) throws IOException {
			java.util.Date dateReturn = null;
			int length = 0;
			length = dis.readByte();
			if (length == -1) {
				dateReturn = null;
			} else {
				dateReturn = new Date(dis.readLong());
			}
			return dateReturn;
		}

		private void writeDate(java.util.Date date1, ObjectOutputStream dos) throws IOException {
			if (date1 == null) {
				dos.writeByte(-1);
			} else {
				dos.writeByte(0);
				dos.writeLong(date1.getTime());
			}
		}

		private String readString(ObjectInputStream dis) throws IOException {
			String strReturn = null;
			int length = 0;
			length = dis.readInt();
			if (length == -1) {
				strReturn = null;
			} else {
				if (length > commonByteArray_WIPO_PROJECTS_A1_Copy_users_to_ipas.length) {
					if (length < 1024 && commonByteArray_WIPO_PROJECTS_A1_Copy_users_to_ipas.length == 0) {
						commonByteArray_WIPO_PROJECTS_A1_Copy_users_to_ipas = new byte[1024];
					} else {
						commonByteArray_WIPO_PROJECTS_A1_Copy_users_to_ipas = new byte[2 * length];
					}
				}
				dis.readFully(commonByteArray_WIPO_PROJECTS_A1_Copy_users_to_ipas, 0, length);
				strReturn = new String(commonByteArray_WIPO_PROJECTS_A1_Copy_users_to_ipas, 0, length, utf8Charset);
			}
			return strReturn;
		}

		private void writeString(String str, ObjectOutputStream dos) throws IOException {
			if (str == null) {
				dos.writeInt(-1);
			} else {
				byte[] byteArray = str.getBytes(utf8Charset);
				dos.writeInt(byteArray.length);
				dos.write(byteArray);
			}
		}

		public void readData(ObjectInputStream dis) {

			synchronized (commonByteArrayLock_WIPO_PROJECTS_A1_Copy_users_to_ipas) {

				try {

					int length = 0;

					this.moment = readDate(dis);

					this.pid = readString(dis);

					this.father_pid = readString(dis);

					this.root_pid = readString(dis);

					length = dis.readByte();
					if (length == -1) {
						this.system_pid = null;
					} else {
						this.system_pid = dis.readLong();
					}

					this.project = readString(dis);

					this.job = readString(dis);

					this.job_repository_id = readString(dis);

					this.job_version = readString(dis);

					this.context = readString(dis);

					this.origin = readString(dis);

					this.message_type = readString(dis);

					this.message = readString(dis);

					length = dis.readByte();
					if (length == -1) {
						this.duration = null;
					} else {
						this.duration = dis.readLong();
					}

				} catch (IOException e) {
					throw new RuntimeException(e);

				}

			}

		}

		public void writeData(ObjectOutputStream dos) {
			try {

				// java.util.Date

				writeDate(this.moment, dos);

				// String

				writeString(this.pid, dos);

				// String

				writeString(this.father_pid, dos);

				// String

				writeString(this.root_pid, dos);

				// Long

				if (this.system_pid == null) {
					dos.writeByte(-1);
				} else {
					dos.writeByte(0);
					dos.writeLong(this.system_pid);
				}

				// String

				writeString(this.project, dos);

				// String

				writeString(this.job, dos);

				// String

				writeString(this.job_repository_id, dos);

				// String

				writeString(this.job_version, dos);

				// String

				writeString(this.context, dos);

				// String

				writeString(this.origin, dos);

				// String

				writeString(this.message_type, dos);

				// String

				writeString(this.message, dos);

				// Long

				if (this.duration == null) {
					dos.writeByte(-1);
				} else {
					dos.writeByte(0);
					dos.writeLong(this.duration);
				}

			} catch (IOException e) {
				throw new RuntimeException(e);
			}

		}

		public String toString() {

			StringBuilder sb = new StringBuilder();
			sb.append(super.toString());
			sb.append("[");
			sb.append("moment=" + String.valueOf(moment));
			sb.append(",pid=" + pid);
			sb.append(",father_pid=" + father_pid);
			sb.append(",root_pid=" + root_pid);
			sb.append(",system_pid=" + String.valueOf(system_pid));
			sb.append(",project=" + project);
			sb.append(",job=" + job);
			sb.append(",job_repository_id=" + job_repository_id);
			sb.append(",job_version=" + job_version);
			sb.append(",context=" + context);
			sb.append(",origin=" + origin);
			sb.append(",message_type=" + message_type);
			sb.append(",message=" + message);
			sb.append(",duration=" + String.valueOf(duration));
			sb.append("]");

			return sb.toString();
		}

		/**
		 * Compare keys
		 */
		public int compareTo(row1Struct other) {

			int returnValue = -1;

			return returnValue;
		}

		private int checkNullsAndCompare(Object object1, Object object2) {
			int returnValue = 0;
			if (object1 instanceof Comparable && object2 instanceof Comparable) {
				returnValue = ((Comparable) object1).compareTo(object2);
			} else if (object1 != null && object2 != null) {
				returnValue = compareStrings(object1.toString(), object2.toString());
			} else if (object1 == null && object2 != null) {
				returnValue = 1;
			} else if (object1 != null && object2 == null) {
				returnValue = -1;
			} else {
				returnValue = 0;
			}

			return returnValue;
		}

		private int compareStrings(String string1, String string2) {
			return string1.compareTo(string2);
		}

	}

	public void tStatCatcher_1Process(final java.util.Map<String, Object> globalMap) throws TalendException {
		globalMap.put("tStatCatcher_1_SUBPROCESS_STATE", 0);

		final boolean execStat = this.execStat;

		String iterateId = "";

		String currentComponent = "";
		java.util.Map<String, Object> resourceMap = new java.util.HashMap<String, Object>();

		try {
			// TDI-39566 avoid throwing an useless Exception
			boolean resumeIt = true;
			if (globalResumeTicket == false && resumeEntryMethodName != null) {
				String currentMethodName = new java.lang.Exception().getStackTrace()[0].getMethodName();
				resumeIt = resumeEntryMethodName.equals(currentMethodName);
			}
			if (resumeIt || globalResumeTicket) { // start the resume
				globalResumeTicket = true;

				row1Struct row1 = new row1Struct();

				/**
				 * [tLogRow_13 begin ] start
				 */

				ok_Hash.put("tLogRow_13", false);
				start_Hash.put("tLogRow_13", System.currentTimeMillis());

				currentComponent = "tLogRow_13";

				if (execStat) {
					runStat.updateStatOnConnection(resourceMap, iterateId, 0, 0, "row1");
				}

				int tos_count_tLogRow_13 = 0;

				///////////////////////

				final String OUTPUT_FIELD_SEPARATOR_tLogRow_13 = "|";
				java.io.PrintStream consoleOut_tLogRow_13 = null;

				StringBuilder strBuffer_tLogRow_13 = null;
				int nb_line_tLogRow_13 = 0;
///////////////////////    			

				/**
				 * [tLogRow_13 begin ] stop
				 */

				/**
				 * [tStatCatcher_1 begin ] start
				 */

				ok_Hash.put("tStatCatcher_1", false);
				start_Hash.put("tStatCatcher_1", System.currentTimeMillis());

				currentComponent = "tStatCatcher_1";

				int tos_count_tStatCatcher_1 = 0;

				for (StatCatcherUtils.StatCatcherMessage scm : tStatCatcher_1.getMessages()) {
					row1.pid = pid;
					row1.root_pid = rootPid;
					row1.father_pid = fatherPid;
					row1.project = projectName;
					row1.job = jobName;
					row1.context = contextStr;
					row1.origin = (scm.getOrigin() == null || scm.getOrigin().length() < 1 ? null : scm.getOrigin());
					row1.message = scm.getMessage();
					row1.duration = scm.getDuration();
					row1.moment = scm.getMoment();
					row1.message_type = scm.getMessageType();
					row1.job_version = scm.getJobVersion();
					row1.job_repository_id = scm.getJobId();
					row1.system_pid = scm.getSystemPid();

					/**
					 * [tStatCatcher_1 begin ] stop
					 */

					/**
					 * [tStatCatcher_1 main ] start
					 */

					currentComponent = "tStatCatcher_1";

					tos_count_tStatCatcher_1++;

					/**
					 * [tStatCatcher_1 main ] stop
					 */

					/**
					 * [tStatCatcher_1 process_data_begin ] start
					 */

					currentComponent = "tStatCatcher_1";

					/**
					 * [tStatCatcher_1 process_data_begin ] stop
					 */

					/**
					 * [tLogRow_13 main ] start
					 */

					currentComponent = "tLogRow_13";

					if (execStat) {
						runStat.updateStatOnConnection(iterateId, 1, 1

								, "row1"

						);
					}

///////////////////////		

					strBuffer_tLogRow_13 = new StringBuilder();

					if (row1.moment != null) { //

						strBuffer_tLogRow_13.append(FormatterUtils.format_Date(row1.moment, "yyyy-MM-dd HH:mm:ss"));

					} //

					strBuffer_tLogRow_13.append("|");

					if (row1.job != null) { //

						strBuffer_tLogRow_13.append(String.valueOf(row1.job));

					} //

					strBuffer_tLogRow_13.append("|");

					if (row1.origin != null) { //

						strBuffer_tLogRow_13.append(String.valueOf(row1.origin));

					} //

					strBuffer_tLogRow_13.append("|");

					if (row1.message_type != null) { //

						strBuffer_tLogRow_13.append(String.valueOf(row1.message_type));

					} //

					strBuffer_tLogRow_13.append("|");

					if (row1.message != null) { //

						strBuffer_tLogRow_13.append(String.valueOf(row1.message));

					} //

					strBuffer_tLogRow_13.append("|");

					if (row1.duration != null) { //

						strBuffer_tLogRow_13.append(String.valueOf(row1.duration));

					} //

					if (globalMap.get("tLogRow_CONSOLE") != null) {
						consoleOut_tLogRow_13 = (java.io.PrintStream) globalMap.get("tLogRow_CONSOLE");
					} else {
						consoleOut_tLogRow_13 = new java.io.PrintStream(new java.io.BufferedOutputStream(System.out));
						globalMap.put("tLogRow_CONSOLE", consoleOut_tLogRow_13);
					}
					consoleOut_tLogRow_13.println(strBuffer_tLogRow_13.toString());
					consoleOut_tLogRow_13.flush();
					nb_line_tLogRow_13++;
//////

//////                    

///////////////////////    			

					tos_count_tLogRow_13++;

					/**
					 * [tLogRow_13 main ] stop
					 */

					/**
					 * [tLogRow_13 process_data_begin ] start
					 */

					currentComponent = "tLogRow_13";

					/**
					 * [tLogRow_13 process_data_begin ] stop
					 */

					/**
					 * [tLogRow_13 process_data_end ] start
					 */

					currentComponent = "tLogRow_13";

					/**
					 * [tLogRow_13 process_data_end ] stop
					 */

					/**
					 * [tStatCatcher_1 process_data_end ] start
					 */

					currentComponent = "tStatCatcher_1";

					/**
					 * [tStatCatcher_1 process_data_end ] stop
					 */

					/**
					 * [tStatCatcher_1 end ] start
					 */

					currentComponent = "tStatCatcher_1";

				}

				ok_Hash.put("tStatCatcher_1", true);
				end_Hash.put("tStatCatcher_1", System.currentTimeMillis());

				/**
				 * [tStatCatcher_1 end ] stop
				 */

				/**
				 * [tLogRow_13 end ] start
				 */

				currentComponent = "tLogRow_13";

//////
//////
				globalMap.put("tLogRow_13_NB_LINE", nb_line_tLogRow_13);

///////////////////////    			

				if (execStat) {
					runStat.updateStat(resourceMap, iterateId, 2, 0, "row1");
				}

				ok_Hash.put("tLogRow_13", true);
				end_Hash.put("tLogRow_13", System.currentTimeMillis());

				/**
				 * [tLogRow_13 end ] stop
				 */

			} // end the resume

		} catch (java.lang.Exception e) {

			TalendException te = new TalendException(e, currentComponent, globalMap);

			throw te;
		} catch (java.lang.Error error) {

			runStat.stopThreadStat();

			throw error;
		} finally {

			try {

				/**
				 * [tStatCatcher_1 finally ] start
				 */

				currentComponent = "tStatCatcher_1";

				/**
				 * [tStatCatcher_1 finally ] stop
				 */

				/**
				 * [tLogRow_13 finally ] start
				 */

				currentComponent = "tLogRow_13";

				/**
				 * [tLogRow_13 finally ] stop
				 */

			} catch (java.lang.Exception e) {
				// ignore
			} catch (java.lang.Error error) {
				// ignore
			}
			resourceMap = null;
		}

		globalMap.put("tStatCatcher_1_SUBPROCESS_STATE", 1);
	}

	public String resuming_logs_dir_path = null;
	public String resuming_checkpoint_path = null;
	public String parent_part_launcher = null;
	private String resumeEntryMethodName = null;
	private boolean globalResumeTicket = false;

	public boolean watch = false;
	// portStats is null, it means don't execute the statistics
	public Integer portStats = null;
	public int portTraces = 4334;
	public String clientHost;
	public String defaultClientHost = "localhost";
	public String contextStr = "Default";
	public boolean isDefaultContext = true;
	public String pid = "0";
	public String rootPid = null;
	public String fatherPid = null;
	public String fatherNode = null;
	public long startTime = 0;
	public boolean isChildJob = false;
	public String log4jLevel = "";

	private boolean enableLogStash;

	private boolean execStat = true;

	private ThreadLocal<java.util.Map<String, String>> threadLocal = new ThreadLocal<java.util.Map<String, String>>() {
		protected java.util.Map<String, String> initialValue() {
			java.util.Map<String, String> threadRunResultMap = new java.util.HashMap<String, String>();
			threadRunResultMap.put("errorCode", null);
			threadRunResultMap.put("status", "");
			return threadRunResultMap;
		};
	};

	private SyncInt runningThreadCount = new SyncInt();

	private class SyncInt {
		private int count = 0;

		public synchronized void add(int i) {
			count += i;
		}

		public synchronized int getCount() {
			return count;
		}
	}

	protected PropertiesWithType context_param = new PropertiesWithType();
	public java.util.Map<String, Object> parentContextMap = new java.util.HashMap<String, Object>();

	public String status = "";

	public static void main(String[] args) {
		final A1_Copy_users_to_ipas A1_Copy_users_to_ipasClass = new A1_Copy_users_to_ipas();

		int exitCode = A1_Copy_users_to_ipasClass.runJobInTOS(args);

		System.exit(exitCode);
	}

	public String[][] runJob(String[] args) {

		int exitCode = runJobInTOS(args);
		String[][] bufferValue = new String[][] { { Integer.toString(exitCode) } };

		return bufferValue;
	}

	public boolean hastBufferOutputComponent() {
		boolean hastBufferOutput = false;

		return hastBufferOutput;
	}

	public int runJobInTOS(String[] args) {
		// reset status
		status = "";

		String lastStr = "";
		for (String arg : args) {
			if (arg.equalsIgnoreCase("--context_param")) {
				lastStr = arg;
			} else if (lastStr.equals("")) {
				evalParam(arg);
			} else {
				evalParam(lastStr + " " + arg);
				lastStr = "";
			}
		}
		enableLogStash = "true".equalsIgnoreCase(System.getProperty("audit.enabled"));

		if (clientHost == null) {
			clientHost = defaultClientHost;
		}

		if (pid == null || "0".equals(pid)) {
			pid = TalendString.getAsciiRandomString(6);
		}

		if (rootPid == null) {
			rootPid = pid;
		}
		if (fatherPid == null) {
			fatherPid = pid;
		} else {
			isChildJob = true;
		}

		if (portStats != null) {
			// portStats = -1; //for testing
			if (portStats < 0 || portStats > 65535) {
				// issue:10869, the portStats is invalid, so this client socket can't open
				System.err.println("The statistics socket port " + portStats + " is invalid.");
				execStat = false;
			}
		} else {
			execStat = false;
		}

		try {
			// call job/subjob with an existing context, like: --context=production. if
			// without this parameter, there will use the default context instead.
			java.io.InputStream inContext = A1_Copy_users_to_ipas.class.getClassLoader().getResourceAsStream(
					"wipo_projects/a1_copy_users_to_ipas_0_1/contexts/" + contextStr + ".properties");
			if (inContext == null) {
				inContext = A1_Copy_users_to_ipas.class.getClassLoader()
						.getResourceAsStream("config/contexts/" + contextStr + ".properties");
			}
			if (inContext != null) {
				// defaultProps is in order to keep the original context value
				if (context != null && context.isEmpty()) {
					defaultProps.load(inContext);
					context = new ContextProperties(defaultProps);
				}

				inContext.close();
			} else if (!isDefaultContext) {
				// print info and job continue to run, for case: context_param is not empty.
				System.err.println("Could not find the context " + contextStr);
			}

			if (!context_param.isEmpty()) {
				context.putAll(context_param);
				// set types for params from parentJobs
				for (Object key : context_param.keySet()) {
					String context_key = key.toString();
					String context_type = context_param.getContextType(context_key);
					context.setContextType(context_key, context_type);

				}
			}
			class ContextProcessing {
				private void processContext_0() {
					context.setContextType("hostInterMed", "id_String");
					if (context.getStringValue("hostInterMed") == null) {
						context.hostInterMed = null;
					} else {
						context.hostInterMed = (String) context.getProperty("hostInterMed");
					}
					context.setContextType("portInterMed", "id_String");
					if (context.getStringValue("portInterMed") == null) {
						context.portInterMed = null;
					} else {
						context.portInterMed = (String) context.getProperty("portInterMed");
					}
					context.setContextType("userInterMed", "id_String");
					if (context.getStringValue("userInterMed") == null) {
						context.userInterMed = null;
					} else {
						context.userInterMed = (String) context.getProperty("userInterMed");
					}
					context.setContextType("passwordInterMed", "id_String");
					if (context.getStringValue("passwordInterMed") == null) {
						context.passwordInterMed = null;
					} else {
						context.passwordInterMed = (String) context.getProperty("passwordInterMed");
					}
					context.setContextType("databaseInterMed", "id_String");
					if (context.getStringValue("databaseInterMed") == null) {
						context.databaseInterMed = null;
					} else {
						context.databaseInterMed = (String) context.getProperty("databaseInterMed");
					}
					context.setContextType("processAll", "id_String");
					if (context.getStringValue("processAll") == null) {
						context.processAll = null;
					} else {
						context.processAll = (String) context.getProperty("processAll");
					}
					context.setContextType("postgreUser", "id_String");
					if (context.getStringValue("postgreUser") == null) {
						context.postgreUser = null;
					} else {
						context.postgreUser = (String) context.getProperty("postgreUser");
					}
					context.setContextType("postgrePassword", "id_String");
					if (context.getStringValue("postgrePassword") == null) {
						context.postgrePassword = null;
					} else {
						context.postgrePassword = (String) context.getProperty("postgrePassword");
					}
					context.setContextType("postgreDb", "id_String");
					if (context.getStringValue("postgreDb") == null) {
						context.postgreDb = null;
					} else {
						context.postgreDb = (String) context.getProperty("postgreDb");
					}
				}

				public void processAllContext() {
					processContext_0();
				}
			}

			new ContextProcessing().processAllContext();
		} catch (java.io.IOException ie) {
			System.err.println("Could not load context " + contextStr);
			ie.printStackTrace();
		}

		// get context value from parent directly
		if (parentContextMap != null && !parentContextMap.isEmpty()) {
			if (parentContextMap.containsKey("hostInterMed")) {
				context.hostInterMed = (String) parentContextMap.get("hostInterMed");
			}
			if (parentContextMap.containsKey("portInterMed")) {
				context.portInterMed = (String) parentContextMap.get("portInterMed");
			}
			if (parentContextMap.containsKey("userInterMed")) {
				context.userInterMed = (String) parentContextMap.get("userInterMed");
			}
			if (parentContextMap.containsKey("passwordInterMed")) {
				context.passwordInterMed = (String) parentContextMap.get("passwordInterMed");
			}
			if (parentContextMap.containsKey("databaseInterMed")) {
				context.databaseInterMed = (String) parentContextMap.get("databaseInterMed");
			}
			if (parentContextMap.containsKey("processAll")) {
				context.processAll = (String) parentContextMap.get("processAll");
			}
			if (parentContextMap.containsKey("postgreUser")) {
				context.postgreUser = (String) parentContextMap.get("postgreUser");
			}
			if (parentContextMap.containsKey("postgrePassword")) {
				context.postgrePassword = (String) parentContextMap.get("postgrePassword");
			}
			if (parentContextMap.containsKey("postgreDb")) {
				context.postgreDb = (String) parentContextMap.get("postgreDb");
			}
		}

		// Resume: init the resumeUtil
		resumeEntryMethodName = ResumeUtil.getResumeEntryMethodName(resuming_checkpoint_path);
		resumeUtil = new ResumeUtil(resuming_logs_dir_path, isChildJob, rootPid);
		resumeUtil.initCommonInfo(pid, rootPid, fatherPid, projectName, jobName, contextStr, jobVersion);

		List<String> parametersToEncrypt = new java.util.ArrayList<String>();
		// Resume: jobStart
		resumeUtil.addLog("JOB_STARTED", "JOB:" + jobName, parent_part_launcher, Thread.currentThread().getId() + "",
				"", "", "", "", resumeUtil.convertToJsonText(context, parametersToEncrypt));

		if (execStat) {
			try {
				runStat.openSocket(!isChildJob);
				runStat.setAllPID(rootPid, fatherPid, pid, jobName);
				runStat.startThreadStat(clientHost, portStats);
				runStat.updateStatOnJob(RunStat.JOBSTART, fatherNode);
			} catch (java.io.IOException ioException) {
				ioException.printStackTrace();
			}
		}

		java.util.concurrent.ConcurrentHashMap<Object, Object> concurrentHashMap = new java.util.concurrent.ConcurrentHashMap<Object, Object>();
		globalMap.put("concurrentHashMap", concurrentHashMap);

		long startUsedMemory = Runtime.getRuntime().totalMemory() - Runtime.getRuntime().freeMemory();
		long endUsedMemory = 0;
		long end = 0;

		startTime = System.currentTimeMillis();
		tStatCatcher_1.addMessage("begin");

		this.globalResumeTicket = true;// to run tPreJob

		try {
			tStatCatcher_1Process(globalMap);
		} catch (java.lang.Exception e) {
			e.printStackTrace();
		}

		this.globalResumeTicket = false;// to run others jobs
		final Thread launchingThread = Thread.currentThread();
		runningThreadCount.add(1);
		new Thread() {
			public void run() {
				java.util.Map threadRunResultMap = new java.util.HashMap();
				threadRunResultMap.put("errorCode", null);
				threadRunResultMap.put("status", "");
				threadLocal.set(threadRunResultMap);

				try {
					((java.util.Map) threadLocal.get()).put("errorCode", null);
					tDBConnection_3Process(globalMap);
					if (!"failure".equals(((java.util.Map) threadLocal.get()).get("status"))) {
						((java.util.Map) threadLocal.get()).put("status", "end");
					}
				} catch (TalendException e_tDBConnection_3) {
					globalMap.put("tDBConnection_3_SUBPROCESS_STATE", -1);

					e_tDBConnection_3.printStackTrace();

				} catch (java.lang.Error e_tDBConnection_3) {
					globalMap.put("tDBConnection_3_SUBPROCESS_STATE", -1);
					((java.util.Map) threadLocal.get()).put("status", "failure");
					throw e_tDBConnection_3;

				} finally {
					Integer localErrorCode = (Integer) (((java.util.Map) threadLocal.get()).get("errorCode"));
					String localStatus = (String) (((java.util.Map) threadLocal.get()).get("status"));
					if (localErrorCode != null) {
						if (errorCode == null || localErrorCode.compareTo(errorCode) > 0) {
							errorCode = localErrorCode;
						}
					}
					if (!status.equals("failure")) {
						status = localStatus;
					}

					if ("true".equals(((java.util.Map) threadLocal.get()).get("JobInterrupted"))) {
						launchingThread.interrupt();
					}

					runningThreadCount.add(-1);
				}
			}
		}.start();

		boolean interrupted = false;
		while (runningThreadCount.getCount() > 0) {
			try {
				Thread.sleep(10);
			} catch (java.lang.InterruptedException e) {
				interrupted = true;
			} catch (java.lang.Exception e) {
				e.printStackTrace();
			}
		}

		if (interrupted) {
			Thread.currentThread().interrupt();
		}

		this.globalResumeTicket = true;// to run tPostJob

		end = System.currentTimeMillis();

		if (watch) {
			System.out.println((end - startTime) + " milliseconds");
		}

		endUsedMemory = Runtime.getRuntime().totalMemory() - Runtime.getRuntime().freeMemory();
		if (false) {
			System.out.println(
					(endUsedMemory - startUsedMemory) + " bytes memory increase when running : A1_Copy_users_to_ipas");
		}
		tStatCatcher_1.addMessage(status == "" ? "end" : status, (end - startTime));
		try {
			tStatCatcher_1Process(globalMap);
		} catch (java.lang.Exception e) {
			e.printStackTrace();
		}

		if (execStat) {
			runStat.updateStatOnJob(RunStat.JOBEND, fatherNode);
			runStat.stopThreadStat();
		}
		int returnCode = 0;
		if (errorCode == null) {
			returnCode = status != null && status.equals("failure") ? 1 : 0;
		} else {
			returnCode = errorCode.intValue();
		}
		resumeUtil.addLog("JOB_ENDED", "JOB:" + jobName, parent_part_launcher, Thread.currentThread().getId() + "", "",
				"" + returnCode, "", "", "");

		return returnCode;

	}

	// only for OSGi env
	public void destroy() {
		closeSqlDbConnections();

	}

	private void closeSqlDbConnections() {
		try {
			Object obj_conn;
			obj_conn = globalMap.remove("conn_tDBConnection_3");
			if (null != obj_conn) {
				((java.sql.Connection) obj_conn).close();
			}
			obj_conn = globalMap.remove("conn_tDBConnection_2");
			if (null != obj_conn) {
				((java.sql.Connection) obj_conn).close();
			}
		} catch (java.lang.Exception e) {
		}
	}

	private java.util.Map<String, Object> getSharedConnections4REST() {
		java.util.Map<String, Object> connections = new java.util.HashMap<String, Object>();
		connections.put("conn_tDBConnection_3", globalMap.get("conn_tDBConnection_3"));
		connections.put("conn_tDBConnection_2", globalMap.get("conn_tDBConnection_2"));

		return connections;
	}

	private void evalParam(String arg) {
		if (arg.startsWith("--resuming_logs_dir_path")) {
			resuming_logs_dir_path = arg.substring(25);
		} else if (arg.startsWith("--resuming_checkpoint_path")) {
			resuming_checkpoint_path = arg.substring(27);
		} else if (arg.startsWith("--parent_part_launcher")) {
			parent_part_launcher = arg.substring(23);
		} else if (arg.startsWith("--watch")) {
			watch = true;
		} else if (arg.startsWith("--stat_port=")) {
			String portStatsStr = arg.substring(12);
			if (portStatsStr != null && !portStatsStr.equals("null")) {
				portStats = Integer.parseInt(portStatsStr);
			}
		} else if (arg.startsWith("--trace_port=")) {
			portTraces = Integer.parseInt(arg.substring(13));
		} else if (arg.startsWith("--client_host=")) {
			clientHost = arg.substring(14);
		} else if (arg.startsWith("--context=")) {
			contextStr = arg.substring(10);
			isDefaultContext = false;
		} else if (arg.startsWith("--father_pid=")) {
			fatherPid = arg.substring(13);
		} else if (arg.startsWith("--root_pid=")) {
			rootPid = arg.substring(11);
		} else if (arg.startsWith("--father_node=")) {
			fatherNode = arg.substring(14);
		} else if (arg.startsWith("--pid=")) {
			pid = arg.substring(6);
		} else if (arg.startsWith("--context_type")) {
			String keyValue = arg.substring(15);
			int index = -1;
			if (keyValue != null && (index = keyValue.indexOf('=')) > -1) {
				if (fatherPid == null) {
					context_param.setContextType(keyValue.substring(0, index),
							replaceEscapeChars(keyValue.substring(index + 1)));
				} else { // the subjob won't escape the especial chars
					context_param.setContextType(keyValue.substring(0, index), keyValue.substring(index + 1));
				}

			}

		} else if (arg.startsWith("--context_param")) {
			String keyValue = arg.substring(16);
			int index = -1;
			if (keyValue != null && (index = keyValue.indexOf('=')) > -1) {
				if (fatherPid == null) {
					context_param.put(keyValue.substring(0, index), replaceEscapeChars(keyValue.substring(index + 1)));
				} else { // the subjob won't escape the especial chars
					context_param.put(keyValue.substring(0, index), keyValue.substring(index + 1));
				}
			}
		} else if (arg.startsWith("--log4jLevel=")) {
			log4jLevel = arg.substring(13);
		} else if (arg.startsWith("--audit.enabled") && arg.contains("=")) {// for trunjob call
			final int equal = arg.indexOf('=');
			final String key = arg.substring("--".length(), equal);
			System.setProperty(key, arg.substring(equal + 1));
		}
	}

	private static final String NULL_VALUE_EXPRESSION_IN_COMMAND_STRING_FOR_CHILD_JOB_ONLY = "<TALEND_NULL>";

	private final String[][] escapeChars = { { "\\\\", "\\" }, { "\\n", "\n" }, { "\\'", "\'" }, { "\\r", "\r" },
			{ "\\f", "\f" }, { "\\b", "\b" }, { "\\t", "\t" } };

	private String replaceEscapeChars(String keyValue) {

		if (keyValue == null || ("").equals(keyValue.trim())) {
			return keyValue;
		}

		StringBuilder result = new StringBuilder();
		int currIndex = 0;
		while (currIndex < keyValue.length()) {
			int index = -1;
			// judege if the left string includes escape chars
			for (String[] strArray : escapeChars) {
				index = keyValue.indexOf(strArray[0], currIndex);
				if (index >= 0) {

					result.append(keyValue.substring(currIndex, index + strArray[0].length()).replace(strArray[0],
							strArray[1]));
					currIndex = index + strArray[0].length();
					break;
				}
			}
			// if the left string doesn't include escape chars, append the left into the
			// result
			if (index < 0) {
				result.append(keyValue.substring(currIndex));
				currIndex = currIndex + keyValue.length();
			}
		}

		return result.toString();
	}

	public Integer getErrorCode() {
		return errorCode;
	}

	public String getStatus() {
		return status;
	}

	ResumeUtil resumeUtil = null;
}
/************************************************************************************************
 * 265351 characters generated by Talend Open Studio for Data Integration on the
 * October 16, 2020 at 5:22:55 PM CEST
 ************************************************************************************************/