// ============================================================================
//
// Copyright (c) 2006-2015, Talend Inc.
//
// This source code has been automatically generated by_Talend Open Studio for Data Integration
// / Licensed under the Apache License, Version 2.0 (the "License");
// you may not use this file except in compliance with the License.
// You may obtain a copy of the License at
// http://www.apache.org/licenses/LICENSE-2.0
// 
// Unless required by applicable law or agreed to in writing, software
// distributed under the License is distributed on an "AS IS" BASIS,
// WITHOUT WARRANTIES OR CONDITIONS OF ANY KIND, either express or implied.
// See the License for the specific language governing permissions and
// limitations under the License.

package wipo_projects.a1_gen_marcas_0_1;

import routines.Numeric;
import routines.DataOperation;
import routines.TalendDataGenerator;
import routines.TalendStringUtil;
import routines.TalendString;
import routines.StringHandling;
import routines.Relational;
import routines.TalendDate;
import routines.Mathematical;
import routines.system.*;
import routines.system.api.*;
import java.text.ParseException;
import java.text.SimpleDateFormat;
import java.util.Date;
import java.util.List;
import java.math.BigDecimal;
import java.io.ByteArrayOutputStream;
import java.io.ByteArrayInputStream;
import java.io.DataInputStream;
import java.io.DataOutputStream;
import java.io.ObjectOutputStream;
import java.io.ObjectInputStream;
import java.io.IOException;
import java.util.Comparator;

@SuppressWarnings("unused")

/**
 * Job: A1_Gen_Marcas Purpose: proceso de migraci√≥n de datos de pataguay<br>
 * Description: <br>
 * 
 * @author user@talend.com
 * @version 7.4.1.20201015_1726-M3
 * @status
 */
public class A1_Gen_Marcas implements TalendJob {

	protected static void logIgnoredError(String message, Throwable cause) {
		System.err.println(message);
		if (cause != null) {
			cause.printStackTrace();
		}

	}

	public final Object obj = new Object();

	// for transmiting parameters purpose
	private Object valueObject = null;

	public Object getValueObject() {
		return this.valueObject;
	}

	public void setValueObject(Object valueObject) {
		this.valueObject = valueObject;
	}

	private final static String defaultCharset = java.nio.charset.Charset.defaultCharset().name();

	private final static String utf8Charset = "UTF-8";

	// contains type for every context property
	public class PropertiesWithType extends java.util.Properties {
		private static final long serialVersionUID = 1L;
		private java.util.Map<String, String> propertyTypes = new java.util.HashMap<>();

		public PropertiesWithType(java.util.Properties properties) {
			super(properties);
		}

		public PropertiesWithType() {
			super();
		}

		public void setContextType(String key, String type) {
			propertyTypes.put(key, type);
		}

		public String getContextType(String key) {
			return propertyTypes.get(key);
		}
	}

	// create and load default properties
	private java.util.Properties defaultProps = new java.util.Properties();

	// create application properties with default
	public class ContextProperties extends PropertiesWithType {

		private static final long serialVersionUID = 1L;

		public ContextProperties(java.util.Properties properties) {
			super(properties);
		}

		public ContextProperties() {
			super();
		}

		public void synchronizeContext() {

			if (intermediateType != null) {

				this.setProperty("intermediateType", intermediateType.toString());

			}

			if (intermediateHost != null) {

				this.setProperty("intermediateHost", intermediateHost.toString());

			}

			if (intermediatePort != null) {

				this.setProperty("intermediatePort", intermediatePort.toString());

			}

			if (intermediateUser != null) {

				this.setProperty("intermediateUser", intermediateUser.toString());

			}

			if (intermediatePassword != null) {

				this.setProperty("intermediatePassword", intermediatePassword.toString());

			}

			if (intermediateDB != null) {

				this.setProperty("intermediateDB", intermediateDB.toString());

			}

			if (intermediatePath != null) {

				this.setProperty("intermediatePath", intermediatePath.toString());

			}

			if (fileNameIntermed != null) {

				this.setProperty("fileNameIntermed", fileNameIntermed.toString());

			}

			if (logNameIntermed != null) {

				this.setProperty("logNameIntermed", logNameIntermed.toString());

			}

			if (logsFold != null) {

				this.setProperty("logsFold", logsFold.toString());

			}

			if (ipasHost != null) {

				this.setProperty("ipasHost", ipasHost.toString());

			}

			if (ipasPort != null) {

				this.setProperty("ipasPort", ipasPort.toString());

			}

			if (ipasDB != null) {

				this.setProperty("ipasDB", ipasDB.toString());

			}

			if (ipasUser != null) {

				this.setProperty("ipasUser", ipasUser.toString());

			}

			if (ipasPassword != null) {

				this.setProperty("ipasPassword", ipasPassword.toString());

			}

			if (ipasSaPassword != null) {

				this.setProperty("ipasSaPassword", ipasSaPassword.toString());

			}

			if (dumpIpasCero != null) {

				this.setProperty("dumpIpasCero", dumpIpasCero.toString());

			}

			if (utilityFolder != null) {

				this.setProperty("utilityFolder", utilityFolder.toString());

			}

			if (logosRootFolder != null) {

				this.setProperty("logosRootFolder", logosRootFolder.toString());

			}

			if (postgreUser != null) {

				this.setProperty("postgreUser", postgreUser.toString());

			}

			if (postgrePassword != null) {

				this.setProperty("postgrePassword", postgrePassword.toString());

			}

			if (postgreDb != null) {

				this.setProperty("postgreDb", postgreDb.toString());

			}

			if (sid != null) {

				this.setProperty("sid", sid.toString());

			}

			if (mssqlserverInstance != null) {

				this.setProperty("mssqlserverInstance", mssqlserverInstance.toString());

			}

			if (databaseType != null) {

				this.setProperty("databaseType", databaseType.toString());

			}

		}

		// if the stored or passed value is "<TALEND_NULL>" string, it mean null
		public String getStringValue(String key) {
			String origin_value = this.getProperty(key);
			if (NULL_VALUE_EXPRESSION_IN_COMMAND_STRING_FOR_CHILD_JOB_ONLY.equals(origin_value)) {
				return null;
			}
			return origin_value;
		}

		public String intermediateType;

		public String getIntermediateType() {
			return this.intermediateType;
		}

		public String intermediateHost;

		public String getIntermediateHost() {
			return this.intermediateHost;
		}

		public String intermediatePort;

		public String getIntermediatePort() {
			return this.intermediatePort;
		}

		public String intermediateUser;

		public String getIntermediateUser() {
			return this.intermediateUser;
		}

		public String intermediatePassword;

		public String getIntermediatePassword() {
			return this.intermediatePassword;
		}

		public String intermediateDB;

		public String getIntermediateDB() {
			return this.intermediateDB;
		}

		public String intermediatePath;

		public String getIntermediatePath() {
			return this.intermediatePath;
		}

		public String fileNameIntermed;

		public String getFileNameIntermed() {
			return this.fileNameIntermed;
		}

		public String logNameIntermed;

		public String getLogNameIntermed() {
			return this.logNameIntermed;
		}

		public String logsFold;

		public String getLogsFold() {
			return this.logsFold;
		}

		public String ipasHost;

		public String getIpasHost() {
			return this.ipasHost;
		}

		public String ipasPort;

		public String getIpasPort() {
			return this.ipasPort;
		}

		public String ipasDB;

		public String getIpasDB() {
			return this.ipasDB;
		}

		public String ipasUser;

		public String getIpasUser() {
			return this.ipasUser;
		}

		public String ipasPassword;

		public String getIpasPassword() {
			return this.ipasPassword;
		}

		public String ipasSaPassword;

		public String getIpasSaPassword() {
			return this.ipasSaPassword;
		}

		public String dumpIpasCero;

		public String getDumpIpasCero() {
			return this.dumpIpasCero;
		}

		public String utilityFolder;

		public String getUtilityFolder() {
			return this.utilityFolder;
		}

		public String logosRootFolder;

		public String getLogosRootFolder() {
			return this.logosRootFolder;
		}

		public String postgreUser;

		public String getPostgreUser() {
			return this.postgreUser;
		}

		public String postgrePassword;

		public String getPostgrePassword() {
			return this.postgrePassword;
		}

		public String postgreDb;

		public String getPostgreDb() {
			return this.postgreDb;
		}

		public String sid;

		public String getSid() {
			return this.sid;
		}

		public String mssqlserverInstance;

		public String getMssqlserverInstance() {
			return this.mssqlserverInstance;
		}

		public String databaseType;

		public String getDatabaseType() {
			return this.databaseType;
		}
	}

	protected ContextProperties context = new ContextProperties(); // will be instanciated by MS.

	public ContextProperties getContext() {
		return this.context;
	}

	private final String jobVersion = "0.1";
	private final String jobName = "A1_Gen_Marcas";
	private final String projectName = "WIPO_PROJECTS";
	public Integer errorCode = null;
	private String currentComponent = "";

	private final java.util.Map<String, Object> globalMap = new java.util.HashMap<String, Object>();
	private final static java.util.Map<String, Object> junitGlobalMap = new java.util.HashMap<String, Object>();

	private final java.util.Map<String, Long> start_Hash = new java.util.HashMap<String, Long>();
	private final java.util.Map<String, Long> end_Hash = new java.util.HashMap<String, Long>();
	private final java.util.Map<String, Boolean> ok_Hash = new java.util.HashMap<String, Boolean>();
	public final java.util.List<String[]> globalBuffer = new java.util.ArrayList<String[]>();

	private RunStat runStat = new RunStat();

	// OSGi DataSource
	private final static String KEY_DB_DATASOURCES = "KEY_DB_DATASOURCES";

	private final static String KEY_DB_DATASOURCES_RAW = "KEY_DB_DATASOURCES_RAW";

	public void setDataSources(java.util.Map<String, javax.sql.DataSource> dataSources) {
		java.util.Map<String, routines.system.TalendDataSource> talendDataSources = new java.util.HashMap<String, routines.system.TalendDataSource>();
		for (java.util.Map.Entry<String, javax.sql.DataSource> dataSourceEntry : dataSources.entrySet()) {
			talendDataSources.put(dataSourceEntry.getKey(),
					new routines.system.TalendDataSource(dataSourceEntry.getValue()));
		}
		globalMap.put(KEY_DB_DATASOURCES, talendDataSources);
		globalMap.put(KEY_DB_DATASOURCES_RAW, new java.util.HashMap<String, javax.sql.DataSource>(dataSources));
	}

	StatCatcherUtils tStatCatcher_1 = new StatCatcherUtils("_VubPoN7YEem7Qe8o507aSw", "0.1");

	private final java.io.ByteArrayOutputStream baos = new java.io.ByteArrayOutputStream();
	private final java.io.PrintStream errorMessagePS = new java.io.PrintStream(new java.io.BufferedOutputStream(baos));

	public String getExceptionStackTrace() {
		if ("failure".equals(this.getStatus())) {
			errorMessagePS.flush();
			return baos.toString();
		}
		return null;
	}

	private Exception exception;

	public Exception getException() {
		if ("failure".equals(this.getStatus())) {
			return this.exception;
		}
		return null;
	}

	private class TalendException extends Exception {

		private static final long serialVersionUID = 1L;

		private java.util.Map<String, Object> globalMap = null;
		private Exception e = null;
		private String currentComponent = null;
		private String virtualComponentName = null;

		public void setVirtualComponentName(String virtualComponentName) {
			this.virtualComponentName = virtualComponentName;
		}

		private TalendException(Exception e, String errorComponent, final java.util.Map<String, Object> globalMap) {
			this.currentComponent = errorComponent;
			this.globalMap = globalMap;
			this.e = e;
		}

		public Exception getException() {
			return this.e;
		}

		public String getCurrentComponent() {
			return this.currentComponent;
		}

		public String getExceptionCauseMessage(Exception e) {
			Throwable cause = e;
			String message = null;
			int i = 10;
			while (null != cause && 0 < i--) {
				message = cause.getMessage();
				if (null == message) {
					cause = cause.getCause();
				} else {
					break;
				}
			}
			if (null == message) {
				message = e.getClass().getName();
			}
			return message;
		}

		@Override
		public void printStackTrace() {
			if (!(e instanceof TalendException || e instanceof TDieException)) {
				if (virtualComponentName != null && currentComponent.indexOf(virtualComponentName + "_") == 0) {
					globalMap.put(virtualComponentName + "_ERROR_MESSAGE", getExceptionCauseMessage(e));
				}
				globalMap.put(currentComponent + "_ERROR_MESSAGE", getExceptionCauseMessage(e));
				System.err.println("Exception in component " + currentComponent + " (" + jobName + ")");
			}
			if (!(e instanceof TDieException)) {
				if (e instanceof TalendException) {
					e.printStackTrace();
				} else {
					e.printStackTrace();
					e.printStackTrace(errorMessagePS);
					A1_Gen_Marcas.this.exception = e;
				}
			}
			if (!(e instanceof TalendException)) {
				try {
					for (java.lang.reflect.Method m : this.getClass().getEnclosingClass().getMethods()) {
						if (m.getName().compareTo(currentComponent + "_error") == 0) {
							m.invoke(A1_Gen_Marcas.this, new Object[] { e, currentComponent, globalMap });
							break;
						}
					}

					if (!(e instanceof TDieException)) {
					}
				} catch (Exception e) {
					this.e.printStackTrace();
				}
			}
		}
	}

	public void tRunJob_9_error(Exception exception, String errorComponent,
			final java.util.Map<String, Object> globalMap) throws TalendException {

		end_Hash.put(errorComponent, System.currentTimeMillis());

		tStatCatcher_1.addMessage("failure", errorComponent,
				end_Hash.get(errorComponent) - start_Hash.get(errorComponent));
		tStatCatcher_1Process(globalMap);

		status = "failure";

		tRunJob_9_onSubJobError(exception, errorComponent, globalMap);
	}

	public void tRunJob_10_error(Exception exception, String errorComponent,
			final java.util.Map<String, Object> globalMap) throws TalendException {

		end_Hash.put(errorComponent, System.currentTimeMillis());

		tStatCatcher_1.addMessage("failure", errorComponent,
				end_Hash.get(errorComponent) - start_Hash.get(errorComponent));
		tStatCatcher_1Process(globalMap);

		status = "failure";

		tRunJob_9_onSubJobError(exception, errorComponent, globalMap);
	}

	public void tRunJob_11_error(Exception exception, String errorComponent,
			final java.util.Map<String, Object> globalMap) throws TalendException {

		end_Hash.put(errorComponent, System.currentTimeMillis());

		tStatCatcher_1.addMessage("failure", errorComponent,
				end_Hash.get(errorComponent) - start_Hash.get(errorComponent));
		tStatCatcher_1Process(globalMap);

		status = "failure";

		tRunJob_11_onSubJobError(exception, errorComponent, globalMap);
	}

	public void tRunJob_12_error(Exception exception, String errorComponent,
			final java.util.Map<String, Object> globalMap) throws TalendException {

		end_Hash.put(errorComponent, System.currentTimeMillis());

		tStatCatcher_1.addMessage("failure", errorComponent,
				end_Hash.get(errorComponent) - start_Hash.get(errorComponent));
		tStatCatcher_1Process(globalMap);

		status = "failure";

		tRunJob_12_onSubJobError(exception, errorComponent, globalMap);
	}

	public void tStatCatcher_1_error(Exception exception, String errorComponent,
			final java.util.Map<String, Object> globalMap) throws TalendException {

		end_Hash.put(errorComponent, System.currentTimeMillis());

		status = "failure";

		tStatCatcher_1_onSubJobError(exception, errorComponent, globalMap);
	}

	public void tLogRow_1_error(Exception exception, String errorComponent,
			final java.util.Map<String, Object> globalMap) throws TalendException {

		end_Hash.put(errorComponent, System.currentTimeMillis());

		status = "failure";

		tStatCatcher_1_onSubJobError(exception, errorComponent, globalMap);
	}

	public void tRunJob_9_onSubJobError(Exception exception, String errorComponent,
			final java.util.Map<String, Object> globalMap) throws TalendException {

		resumeUtil.addLog("SYSTEM_LOG", "NODE:" + errorComponent, "", Thread.currentThread().getId() + "", "FATAL", "",
				exception.getMessage(), ResumeUtil.getExceptionStackTrace(exception), "");

	}

	public void tRunJob_11_onSubJobError(Exception exception, String errorComponent,
			final java.util.Map<String, Object> globalMap) throws TalendException {

		resumeUtil.addLog("SYSTEM_LOG", "NODE:" + errorComponent, "", Thread.currentThread().getId() + "", "FATAL", "",
				exception.getMessage(), ResumeUtil.getExceptionStackTrace(exception), "");

	}

	public void tRunJob_12_onSubJobError(Exception exception, String errorComponent,
			final java.util.Map<String, Object> globalMap) throws TalendException {

		resumeUtil.addLog("SYSTEM_LOG", "NODE:" + errorComponent, "", Thread.currentThread().getId() + "", "FATAL", "",
				exception.getMessage(), ResumeUtil.getExceptionStackTrace(exception), "");

	}

	public void tStatCatcher_1_onSubJobError(Exception exception, String errorComponent,
			final java.util.Map<String, Object> globalMap) throws TalendException {

		resumeUtil.addLog("SYSTEM_LOG", "NODE:" + errorComponent, "", Thread.currentThread().getId() + "", "FATAL", "",
				exception.getMessage(), ResumeUtil.getExceptionStackTrace(exception), "");

	}

	public static class row7Struct implements routines.system.IPersistableRow<row7Struct> {
		final static byte[] commonByteArrayLock_WIPO_PROJECTS_A1_Gen_Marcas = new byte[0];
		static byte[] commonByteArray_WIPO_PROJECTS_A1_Gen_Marcas = new byte[0];

		public void readData(ObjectInputStream dis) {

			synchronized (commonByteArrayLock_WIPO_PROJECTS_A1_Gen_Marcas) {

				try {

					int length = 0;

				}

				finally {
				}

			}

		}

		public void writeData(ObjectOutputStream dos) {
			try {

			}

			finally {
			}

		}

		public String toString() {

			StringBuilder sb = new StringBuilder();
			sb.append(super.toString());
			sb.append("[");
			sb.append("]");

			return sb.toString();
		}

		/**
		 * Compare keys
		 */
		public int compareTo(row7Struct other) {

			int returnValue = -1;

			return returnValue;
		}

		private int checkNullsAndCompare(Object object1, Object object2) {
			int returnValue = 0;
			if (object1 instanceof Comparable && object2 instanceof Comparable) {
				returnValue = ((Comparable) object1).compareTo(object2);
			} else if (object1 != null && object2 != null) {
				returnValue = compareStrings(object1.toString(), object2.toString());
			} else if (object1 == null && object2 != null) {
				returnValue = 1;
			} else if (object1 != null && object2 == null) {
				returnValue = -1;
			} else {
				returnValue = 0;
			}

			return returnValue;
		}

		private int compareStrings(String string1, String string2) {
			return string1.compareTo(string2);
		}

	}

	public void tRunJob_9Process(final java.util.Map<String, Object> globalMap) throws TalendException {
		globalMap.put("tRunJob_9_SUBPROCESS_STATE", 0);

		final boolean execStat = this.execStat;

		String iterateId = "";

		String currentComponent = "";
		java.util.Map<String, Object> resourceMap = new java.util.HashMap<String, Object>();

		try {
			// TDI-39566 avoid throwing an useless Exception
			boolean resumeIt = true;
			if (globalResumeTicket == false && resumeEntryMethodName != null) {
				String currentMethodName = new java.lang.Exception().getStackTrace()[0].getMethodName();
				resumeIt = resumeEntryMethodName.equals(currentMethodName);
			}
			if (resumeIt || globalResumeTicket) { // start the resume
				globalResumeTicket = true;

				row7Struct row7 = new row7Struct();

				/**
				 * [tRunJob_10 begin ] start
				 */

				ok_Hash.put("tRunJob_10", false);
				start_Hash.put("tRunJob_10", System.currentTimeMillis());

				tStatCatcher_1.addMessage("begin", "tRunJob_10");
				tStatCatcher_1Process(globalMap);

				currentComponent = "tRunJob_10";

				if (execStat) {
					runStat.updateStatOnConnection(resourceMap, iterateId, 0, 0, "row7");
				}

				int tos_count_tRunJob_10 = 0;

				/**
				 * [tRunJob_10 begin ] stop
				 */

				/**
				 * [tRunJob_9 begin ] start
				 */

				ok_Hash.put("tRunJob_9", false);
				start_Hash.put("tRunJob_9", System.currentTimeMillis());

				tStatCatcher_1.addMessage("begin", "tRunJob_9");
				tStatCatcher_1Process(globalMap);

				currentComponent = "tRunJob_9";

				int tos_count_tRunJob_9 = 0;

				/**
				 * [tRunJob_9 begin ] stop
				 */

				/**
				 * [tRunJob_9 main ] start
				 */

				currentComponent = "tRunJob_9";

				java.util.List<String> paraList_tRunJob_9 = new java.util.ArrayList<String>();

				paraList_tRunJob_9.add("--father_pid=" + pid);

				paraList_tRunJob_9.add("--root_pid=" + rootPid);

				paraList_tRunJob_9.add("--father_node=tRunJob_9");

				paraList_tRunJob_9.add("--context=Default");

				if (enableLogStash) {
					paraList_tRunJob_9.add("--audit.enabled=" + enableLogStash);
				}

				// for feature:10589

				paraList_tRunJob_9.add("--stat_port=" + portStats);

				if (resuming_logs_dir_path != null) {
					paraList_tRunJob_9.add("--resuming_logs_dir_path=" + resuming_logs_dir_path);
				}
				String childResumePath_tRunJob_9 = ResumeUtil.getChildJobCheckPointPath(resuming_checkpoint_path);
				String tRunJobName_tRunJob_9 = ResumeUtil.getRighttRunJob(resuming_checkpoint_path);
				if ("tRunJob_9".equals(tRunJobName_tRunJob_9) && childResumePath_tRunJob_9 != null) {
					paraList_tRunJob_9.add("--resuming_checkpoint_path="
							+ ResumeUtil.getChildJobCheckPointPath(resuming_checkpoint_path));
				}
				paraList_tRunJob_9.add("--parent_part_launcher=JOB:" + jobName + "/NODE:tRunJob_9");

				java.util.Map<String, Object> parentContextMap_tRunJob_9 = new java.util.HashMap<String, Object>();

				java.util.List<String> paraListForLog_tRunJob_9 = new java.util.ArrayList<String>();
				paraListForLog_tRunJob_9.addAll(paraList_tRunJob_9);
				List<String> parametersToEncrypt_tRunJob_9 = new java.util.ArrayList<String>();

				Object obj_tRunJob_9 = null;

				obj_tRunJob_9 = context.intermediateHost;
				if (obj_tRunJob_9 != null) {
					if (obj_tRunJob_9.getClass().getName().equals("java.util.Date")) {
						paraList_tRunJob_9
								.add("--context_param intermediateHost=" + ((java.util.Date) obj_tRunJob_9).getTime());
					} else {
						paraList_tRunJob_9.add("--context_param intermediateHost="
								+ RuntimeUtils.tRunJobConvertContext(obj_tRunJob_9));
					}
				} else {
					paraList_tRunJob_9.add("--context_param intermediateHost="
							+ NULL_VALUE_EXPRESSION_IN_COMMAND_STRING_FOR_CHILD_JOB_ONLY);
				}

				if (parametersToEncrypt_tRunJob_9.contains("intermediateHost") && obj_tRunJob_9 != null) {
					paraListForLog_tRunJob_9.add(
							"--context_param intermediateHost=" + routines.system.PasswordEncryptUtil.encryptPassword(
									String.valueOf(RuntimeUtils.tRunJobConvertContext(obj_tRunJob_9))));
				} else {
					paraListForLog_tRunJob_9.add(
							"--context_param intermediateHost=" + RuntimeUtils.tRunJobConvertContext(obj_tRunJob_9));
				}

				parentContextMap_tRunJob_9.put("intermediateHost", obj_tRunJob_9);

				obj_tRunJob_9 = context.intermediatePort;
				if (obj_tRunJob_9 != null) {
					if (obj_tRunJob_9.getClass().getName().equals("java.util.Date")) {
						paraList_tRunJob_9
								.add("--context_param intermediatePort=" + ((java.util.Date) obj_tRunJob_9).getTime());
					} else {
						paraList_tRunJob_9.add("--context_param intermediatePort="
								+ RuntimeUtils.tRunJobConvertContext(obj_tRunJob_9));
					}
				} else {
					paraList_tRunJob_9.add("--context_param intermediatePort="
							+ NULL_VALUE_EXPRESSION_IN_COMMAND_STRING_FOR_CHILD_JOB_ONLY);
				}

				if (parametersToEncrypt_tRunJob_9.contains("intermediatePort") && obj_tRunJob_9 != null) {
					paraListForLog_tRunJob_9.add(
							"--context_param intermediatePort=" + routines.system.PasswordEncryptUtil.encryptPassword(
									String.valueOf(RuntimeUtils.tRunJobConvertContext(obj_tRunJob_9))));
				} else {
					paraListForLog_tRunJob_9.add(
							"--context_param intermediatePort=" + RuntimeUtils.tRunJobConvertContext(obj_tRunJob_9));
				}

				parentContextMap_tRunJob_9.put("intermediatePort", obj_tRunJob_9);

				obj_tRunJob_9 = context.intermediateUser;
				if (obj_tRunJob_9 != null) {
					if (obj_tRunJob_9.getClass().getName().equals("java.util.Date")) {
						paraList_tRunJob_9
								.add("--context_param intermediateUser=" + ((java.util.Date) obj_tRunJob_9).getTime());
					} else {
						paraList_tRunJob_9.add("--context_param intermediateUser="
								+ RuntimeUtils.tRunJobConvertContext(obj_tRunJob_9));
					}
				} else {
					paraList_tRunJob_9.add("--context_param intermediateUser="
							+ NULL_VALUE_EXPRESSION_IN_COMMAND_STRING_FOR_CHILD_JOB_ONLY);
				}

				if (parametersToEncrypt_tRunJob_9.contains("intermediateUser") && obj_tRunJob_9 != null) {
					paraListForLog_tRunJob_9.add(
							"--context_param intermediateUser=" + routines.system.PasswordEncryptUtil.encryptPassword(
									String.valueOf(RuntimeUtils.tRunJobConvertContext(obj_tRunJob_9))));
				} else {
					paraListForLog_tRunJob_9.add(
							"--context_param intermediateUser=" + RuntimeUtils.tRunJobConvertContext(obj_tRunJob_9));
				}

				parentContextMap_tRunJob_9.put("intermediateUser", obj_tRunJob_9);

				obj_tRunJob_9 = context.intermediatePassword;
				if (obj_tRunJob_9 != null) {
					if (obj_tRunJob_9.getClass().getName().equals("java.util.Date")) {
						paraList_tRunJob_9.add(
								"--context_param intermediatePassword=" + ((java.util.Date) obj_tRunJob_9).getTime());
					} else {
						paraList_tRunJob_9.add("--context_param intermediatePassword="
								+ RuntimeUtils.tRunJobConvertContext(obj_tRunJob_9));
					}
				} else {
					paraList_tRunJob_9.add("--context_param intermediatePassword="
							+ NULL_VALUE_EXPRESSION_IN_COMMAND_STRING_FOR_CHILD_JOB_ONLY);
				}

				if (parametersToEncrypt_tRunJob_9.contains("intermediatePassword") && obj_tRunJob_9 != null) {
					paraListForLog_tRunJob_9.add("--context_param intermediatePassword="
							+ routines.system.PasswordEncryptUtil.encryptPassword(
									String.valueOf(RuntimeUtils.tRunJobConvertContext(obj_tRunJob_9))));
				} else {
					paraListForLog_tRunJob_9.add("--context_param intermediatePassword="
							+ RuntimeUtils.tRunJobConvertContext(obj_tRunJob_9));
				}

				parentContextMap_tRunJob_9.put("intermediatePassword", obj_tRunJob_9);

				obj_tRunJob_9 = context.intermediateDB;
				if (obj_tRunJob_9 != null) {
					if (obj_tRunJob_9.getClass().getName().equals("java.util.Date")) {
						paraList_tRunJob_9
								.add("--context_param intermediateDB=" + ((java.util.Date) obj_tRunJob_9).getTime());
					} else {
						paraList_tRunJob_9.add(
								"--context_param intermediateDB=" + RuntimeUtils.tRunJobConvertContext(obj_tRunJob_9));
					}
				} else {
					paraList_tRunJob_9.add("--context_param intermediateDB="
							+ NULL_VALUE_EXPRESSION_IN_COMMAND_STRING_FOR_CHILD_JOB_ONLY);
				}

				if (parametersToEncrypt_tRunJob_9.contains("intermediateDB") && obj_tRunJob_9 != null) {
					paraListForLog_tRunJob_9.add("--context_param intermediateDB=" + routines.system.PasswordEncryptUtil
							.encryptPassword(String.valueOf(RuntimeUtils.tRunJobConvertContext(obj_tRunJob_9))));
				} else {
					paraListForLog_tRunJob_9
							.add("--context_param intermediateDB=" + RuntimeUtils.tRunJobConvertContext(obj_tRunJob_9));
				}

				parentContextMap_tRunJob_9.put("intermediateDB", obj_tRunJob_9);

				obj_tRunJob_9 = context.ipasHost;
				if (obj_tRunJob_9 != null) {
					if (obj_tRunJob_9.getClass().getName().equals("java.util.Date")) {
						paraList_tRunJob_9
								.add("--context_param ipasHost=" + ((java.util.Date) obj_tRunJob_9).getTime());
					} else {
						paraList_tRunJob_9
								.add("--context_param ipasHost=" + RuntimeUtils.tRunJobConvertContext(obj_tRunJob_9));
					}
				} else {
					paraList_tRunJob_9.add(
							"--context_param ipasHost=" + NULL_VALUE_EXPRESSION_IN_COMMAND_STRING_FOR_CHILD_JOB_ONLY);
				}

				if (parametersToEncrypt_tRunJob_9.contains("ipasHost") && obj_tRunJob_9 != null) {
					paraListForLog_tRunJob_9.add("--context_param ipasHost=" + routines.system.PasswordEncryptUtil
							.encryptPassword(String.valueOf(RuntimeUtils.tRunJobConvertContext(obj_tRunJob_9))));
				} else {
					paraListForLog_tRunJob_9
							.add("--context_param ipasHost=" + RuntimeUtils.tRunJobConvertContext(obj_tRunJob_9));
				}

				parentContextMap_tRunJob_9.put("ipasHost", obj_tRunJob_9);

				obj_tRunJob_9 = context.ipasPort;
				if (obj_tRunJob_9 != null) {
					if (obj_tRunJob_9.getClass().getName().equals("java.util.Date")) {
						paraList_tRunJob_9
								.add("--context_param ipasPort=" + ((java.util.Date) obj_tRunJob_9).getTime());
					} else {
						paraList_tRunJob_9
								.add("--context_param ipasPort=" + RuntimeUtils.tRunJobConvertContext(obj_tRunJob_9));
					}
				} else {
					paraList_tRunJob_9.add(
							"--context_param ipasPort=" + NULL_VALUE_EXPRESSION_IN_COMMAND_STRING_FOR_CHILD_JOB_ONLY);
				}

				if (parametersToEncrypt_tRunJob_9.contains("ipasPort") && obj_tRunJob_9 != null) {
					paraListForLog_tRunJob_9.add("--context_param ipasPort=" + routines.system.PasswordEncryptUtil
							.encryptPassword(String.valueOf(RuntimeUtils.tRunJobConvertContext(obj_tRunJob_9))));
				} else {
					paraListForLog_tRunJob_9
							.add("--context_param ipasPort=" + RuntimeUtils.tRunJobConvertContext(obj_tRunJob_9));
				}

				parentContextMap_tRunJob_9.put("ipasPort", obj_tRunJob_9);

				obj_tRunJob_9 = context.ipasDB;
				if (obj_tRunJob_9 != null) {
					if (obj_tRunJob_9.getClass().getName().equals("java.util.Date")) {
						paraList_tRunJob_9.add("--context_param ipasDB=" + ((java.util.Date) obj_tRunJob_9).getTime());
					} else {
						paraList_tRunJob_9
								.add("--context_param ipasDB=" + RuntimeUtils.tRunJobConvertContext(obj_tRunJob_9));
					}
				} else {
					paraList_tRunJob_9.add(
							"--context_param ipasDB=" + NULL_VALUE_EXPRESSION_IN_COMMAND_STRING_FOR_CHILD_JOB_ONLY);
				}

				if (parametersToEncrypt_tRunJob_9.contains("ipasDB") && obj_tRunJob_9 != null) {
					paraListForLog_tRunJob_9.add("--context_param ipasDB=" + routines.system.PasswordEncryptUtil
							.encryptPassword(String.valueOf(RuntimeUtils.tRunJobConvertContext(obj_tRunJob_9))));
				} else {
					paraListForLog_tRunJob_9
							.add("--context_param ipasDB=" + RuntimeUtils.tRunJobConvertContext(obj_tRunJob_9));
				}

				parentContextMap_tRunJob_9.put("ipasDB", obj_tRunJob_9);

				obj_tRunJob_9 = context.ipasUser;
				if (obj_tRunJob_9 != null) {
					if (obj_tRunJob_9.getClass().getName().equals("java.util.Date")) {
						paraList_tRunJob_9
								.add("--context_param ipasUser=" + ((java.util.Date) obj_tRunJob_9).getTime());
					} else {
						paraList_tRunJob_9
								.add("--context_param ipasUser=" + RuntimeUtils.tRunJobConvertContext(obj_tRunJob_9));
					}
				} else {
					paraList_tRunJob_9.add(
							"--context_param ipasUser=" + NULL_VALUE_EXPRESSION_IN_COMMAND_STRING_FOR_CHILD_JOB_ONLY);
				}

				if (parametersToEncrypt_tRunJob_9.contains("ipasUser") && obj_tRunJob_9 != null) {
					paraListForLog_tRunJob_9.add("--context_param ipasUser=" + routines.system.PasswordEncryptUtil
							.encryptPassword(String.valueOf(RuntimeUtils.tRunJobConvertContext(obj_tRunJob_9))));
				} else {
					paraListForLog_tRunJob_9
							.add("--context_param ipasUser=" + RuntimeUtils.tRunJobConvertContext(obj_tRunJob_9));
				}

				parentContextMap_tRunJob_9.put("ipasUser", obj_tRunJob_9);

				obj_tRunJob_9 = context.ipasPassword;
				if (obj_tRunJob_9 != null) {
					if (obj_tRunJob_9.getClass().getName().equals("java.util.Date")) {
						paraList_tRunJob_9
								.add("--context_param ipasPassword=" + ((java.util.Date) obj_tRunJob_9).getTime());
					} else {
						paraList_tRunJob_9.add(
								"--context_param ipasPassword=" + RuntimeUtils.tRunJobConvertContext(obj_tRunJob_9));
					}
				} else {
					paraList_tRunJob_9.add("--context_param ipasPassword="
							+ NULL_VALUE_EXPRESSION_IN_COMMAND_STRING_FOR_CHILD_JOB_ONLY);
				}

				if (parametersToEncrypt_tRunJob_9.contains("ipasPassword") && obj_tRunJob_9 != null) {
					paraListForLog_tRunJob_9.add("--context_param ipasPassword=" + routines.system.PasswordEncryptUtil
							.encryptPassword(String.valueOf(RuntimeUtils.tRunJobConvertContext(obj_tRunJob_9))));
				} else {
					paraListForLog_tRunJob_9
							.add("--context_param ipasPassword=" + RuntimeUtils.tRunJobConvertContext(obj_tRunJob_9));
				}

				parentContextMap_tRunJob_9.put("ipasPassword", obj_tRunJob_9);

				obj_tRunJob_9 = context.ipasSaPassword;
				if (obj_tRunJob_9 != null) {
					if (obj_tRunJob_9.getClass().getName().equals("java.util.Date")) {
						paraList_tRunJob_9
								.add("--context_param ipasSaPassword=" + ((java.util.Date) obj_tRunJob_9).getTime());
					} else {
						paraList_tRunJob_9.add(
								"--context_param ipasSaPassword=" + RuntimeUtils.tRunJobConvertContext(obj_tRunJob_9));
					}
				} else {
					paraList_tRunJob_9.add("--context_param ipasSaPassword="
							+ NULL_VALUE_EXPRESSION_IN_COMMAND_STRING_FOR_CHILD_JOB_ONLY);
				}

				if (parametersToEncrypt_tRunJob_9.contains("ipasSaPassword") && obj_tRunJob_9 != null) {
					paraListForLog_tRunJob_9.add("--context_param ipasSaPassword=" + routines.system.PasswordEncryptUtil
							.encryptPassword(String.valueOf(RuntimeUtils.tRunJobConvertContext(obj_tRunJob_9))));
				} else {
					paraListForLog_tRunJob_9
							.add("--context_param ipasSaPassword=" + RuntimeUtils.tRunJobConvertContext(obj_tRunJob_9));
				}

				parentContextMap_tRunJob_9.put("ipasSaPassword", obj_tRunJob_9);

				obj_tRunJob_9 = context.dumpIpasCero;
				if (obj_tRunJob_9 != null) {
					if (obj_tRunJob_9.getClass().getName().equals("java.util.Date")) {
						paraList_tRunJob_9.add(
								"--context_param dumpBaseIpasLocation=" + ((java.util.Date) obj_tRunJob_9).getTime());
					} else {
						paraList_tRunJob_9.add("--context_param dumpBaseIpasLocation="
								+ RuntimeUtils.tRunJobConvertContext(obj_tRunJob_9));
					}
				} else {
					paraList_tRunJob_9.add("--context_param dumpBaseIpasLocation="
							+ NULL_VALUE_EXPRESSION_IN_COMMAND_STRING_FOR_CHILD_JOB_ONLY);
				}

				if (parametersToEncrypt_tRunJob_9.contains("dumpBaseIpasLocation") && obj_tRunJob_9 != null) {
					paraListForLog_tRunJob_9.add("--context_param dumpBaseIpasLocation="
							+ routines.system.PasswordEncryptUtil.encryptPassword(
									String.valueOf(RuntimeUtils.tRunJobConvertContext(obj_tRunJob_9))));
				} else {
					paraListForLog_tRunJob_9.add("--context_param dumpBaseIpasLocation="
							+ RuntimeUtils.tRunJobConvertContext(obj_tRunJob_9));
				}

				parentContextMap_tRunJob_9.put("dumpBaseIpasLocation", obj_tRunJob_9);

				obj_tRunJob_9 = context.intermediatePath;
				if (obj_tRunJob_9 != null) {
					if (obj_tRunJob_9.getClass().getName().equals("java.util.Date")) {
						paraList_tRunJob_9
								.add("--context_param sqlLocation=" + ((java.util.Date) obj_tRunJob_9).getTime());
					} else {
						paraList_tRunJob_9.add(
								"--context_param sqlLocation=" + RuntimeUtils.tRunJobConvertContext(obj_tRunJob_9));
					}
				} else {
					paraList_tRunJob_9.add("--context_param sqlLocation="
							+ NULL_VALUE_EXPRESSION_IN_COMMAND_STRING_FOR_CHILD_JOB_ONLY);
				}

				if (parametersToEncrypt_tRunJob_9.contains("sqlLocation") && obj_tRunJob_9 != null) {
					paraListForLog_tRunJob_9.add("--context_param sqlLocation=" + routines.system.PasswordEncryptUtil
							.encryptPassword(String.valueOf(RuntimeUtils.tRunJobConvertContext(obj_tRunJob_9))));
				} else {
					paraListForLog_tRunJob_9
							.add("--context_param sqlLocation=" + RuntimeUtils.tRunJobConvertContext(obj_tRunJob_9));
				}

				parentContextMap_tRunJob_9.put("sqlLocation", obj_tRunJob_9);

				System.out.println(
						"tRunJob_9 in A1_Gen_Marcas call wipo_projects.f_ipas_env_cre_0_1.F_IPAS_ENV_CRE with:\n\n"
								+ paraListForLog_tRunJob_9 + "\n");

				wipo_projects.f_ipas_env_cre_0_1.F_IPAS_ENV_CRE childJob_tRunJob_9 = new wipo_projects.f_ipas_env_cre_0_1.F_IPAS_ENV_CRE();
				// pass DataSources
				java.util.Map<String, routines.system.TalendDataSource> talendDataSources_tRunJob_9 = (java.util.Map<String, routines.system.TalendDataSource>) globalMap
						.get(KEY_DB_DATASOURCES);
				if (null != talendDataSources_tRunJob_9) {
					java.util.Map<String, javax.sql.DataSource> dataSources_tRunJob_9 = new java.util.HashMap<String, javax.sql.DataSource>();
					for (java.util.Map.Entry<String, routines.system.TalendDataSource> talendDataSourceEntry_tRunJob_9 : talendDataSources_tRunJob_9
							.entrySet()) {
						dataSources_tRunJob_9.put(talendDataSourceEntry_tRunJob_9.getKey(),
								talendDataSourceEntry_tRunJob_9.getValue().getRawDataSource());
					}
					childJob_tRunJob_9.setDataSources(dataSources_tRunJob_9);
				}

				childJob_tRunJob_9.parentContextMap = parentContextMap_tRunJob_9;

				String[][] childReturn_tRunJob_9 = childJob_tRunJob_9
						.runJob((String[]) paraList_tRunJob_9.toArray(new String[paraList_tRunJob_9.size()]));

				if (childJob_tRunJob_9.getErrorCode() == null) {
					globalMap.put("tRunJob_9_CHILD_RETURN_CODE",
							childJob_tRunJob_9.getStatus() != null && ("failure").equals(childJob_tRunJob_9.getStatus())
									? 1
									: 0);
				} else {
					globalMap.put("tRunJob_9_CHILD_RETURN_CODE", childJob_tRunJob_9.getErrorCode());
				}
				if (childJob_tRunJob_9.getExceptionStackTrace() != null) {
					globalMap.put("tRunJob_9_CHILD_EXCEPTION_STACKTRACE", childJob_tRunJob_9.getExceptionStackTrace());
				}
				errorCode = childJob_tRunJob_9.getErrorCode();
				if (childJob_tRunJob_9.getErrorCode() != null || ("failure").equals(childJob_tRunJob_9.getStatus())) {
					java.lang.Exception ce_tRunJob_9 = childJob_tRunJob_9.getException();
					throw new RuntimeException("Child job running failed.\n" + ((ce_tRunJob_9 != null)
							? (ce_tRunJob_9.getClass().getName() + ": " + ce_tRunJob_9.getMessage())
							: ""));
				}
				for (String[] item_tRunJob_9 : childReturn_tRunJob_9) {
					if (childJob_tRunJob_9.hastBufferOutputComponent() || true) {

					}

					tos_count_tRunJob_9++;

					/**
					 * [tRunJob_9 main ] stop
					 */

					/**
					 * [tRunJob_9 process_data_begin ] start
					 */

					currentComponent = "tRunJob_9";

					/**
					 * [tRunJob_9 process_data_begin ] stop
					 */

					/**
					 * [tRunJob_10 main ] start
					 */

					currentComponent = "tRunJob_10";

					if (execStat) {
						runStat.updateStatOnConnection(iterateId, 1, 1

								, "row7"

						);
					}

					java.util.List<String> paraList_tRunJob_10 = new java.util.ArrayList<String>();

					paraList_tRunJob_10.add("--father_pid=" + pid);

					paraList_tRunJob_10.add("--root_pid=" + rootPid);

					paraList_tRunJob_10.add("--father_node=tRunJob_10");

					paraList_tRunJob_10.add("--context=Default");

					if (enableLogStash) {
						paraList_tRunJob_10.add("--audit.enabled=" + enableLogStash);
					}

					// for feature:10589

					paraList_tRunJob_10.add("--stat_port=" + portStats);

					if (resuming_logs_dir_path != null) {
						paraList_tRunJob_10.add("--resuming_logs_dir_path=" + resuming_logs_dir_path);
					}
					String childResumePath_tRunJob_10 = ResumeUtil.getChildJobCheckPointPath(resuming_checkpoint_path);
					String tRunJobName_tRunJob_10 = ResumeUtil.getRighttRunJob(resuming_checkpoint_path);
					if ("tRunJob_10".equals(tRunJobName_tRunJob_10) && childResumePath_tRunJob_10 != null) {
						paraList_tRunJob_10.add("--resuming_checkpoint_path="
								+ ResumeUtil.getChildJobCheckPointPath(resuming_checkpoint_path));
					}
					paraList_tRunJob_10.add("--parent_part_launcher=JOB:" + jobName + "/NODE:tRunJob_10");

					java.util.Map<String, Object> parentContextMap_tRunJob_10 = new java.util.HashMap<String, Object>();

					java.util.List<String> paraListForLog_tRunJob_10 = new java.util.ArrayList<String>();
					paraListForLog_tRunJob_10.addAll(paraList_tRunJob_10);
					List<String> parametersToEncrypt_tRunJob_10 = new java.util.ArrayList<String>();

					Object obj_tRunJob_10 = null;

					obj_tRunJob_10 = context.ipasHost;
					if (obj_tRunJob_10 != null) {
						if (obj_tRunJob_10.getClass().getName().equals("java.util.Date")) {
							paraList_tRunJob_10
									.add("--context_param ipasHost=" + ((java.util.Date) obj_tRunJob_10).getTime());
						} else {
							paraList_tRunJob_10.add(
									"--context_param ipasHost=" + RuntimeUtils.tRunJobConvertContext(obj_tRunJob_10));
						}
					} else {
						paraList_tRunJob_10.add("--context_param ipasHost="
								+ NULL_VALUE_EXPRESSION_IN_COMMAND_STRING_FOR_CHILD_JOB_ONLY);
					}

					if (parametersToEncrypt_tRunJob_10.contains("ipasHost") && obj_tRunJob_10 != null) {
						paraListForLog_tRunJob_10.add("--context_param ipasHost=" + routines.system.PasswordEncryptUtil
								.encryptPassword(String.valueOf(RuntimeUtils.tRunJobConvertContext(obj_tRunJob_10))));
					} else {
						paraListForLog_tRunJob_10
								.add("--context_param ipasHost=" + RuntimeUtils.tRunJobConvertContext(obj_tRunJob_10));
					}

					parentContextMap_tRunJob_10.put("ipasHost", obj_tRunJob_10);

					obj_tRunJob_10 = context.ipasPort;
					if (obj_tRunJob_10 != null) {
						if (obj_tRunJob_10.getClass().getName().equals("java.util.Date")) {
							paraList_tRunJob_10
									.add("--context_param ipasPort=" + ((java.util.Date) obj_tRunJob_10).getTime());
						} else {
							paraList_tRunJob_10.add(
									"--context_param ipasPort=" + RuntimeUtils.tRunJobConvertContext(obj_tRunJob_10));
						}
					} else {
						paraList_tRunJob_10.add("--context_param ipasPort="
								+ NULL_VALUE_EXPRESSION_IN_COMMAND_STRING_FOR_CHILD_JOB_ONLY);
					}

					if (parametersToEncrypt_tRunJob_10.contains("ipasPort") && obj_tRunJob_10 != null) {
						paraListForLog_tRunJob_10.add("--context_param ipasPort=" + routines.system.PasswordEncryptUtil
								.encryptPassword(String.valueOf(RuntimeUtils.tRunJobConvertContext(obj_tRunJob_10))));
					} else {
						paraListForLog_tRunJob_10
								.add("--context_param ipasPort=" + RuntimeUtils.tRunJobConvertContext(obj_tRunJob_10));
					}

					parentContextMap_tRunJob_10.put("ipasPort", obj_tRunJob_10);

					obj_tRunJob_10 = context.ipasDB;
					if (obj_tRunJob_10 != null) {
						if (obj_tRunJob_10.getClass().getName().equals("java.util.Date")) {
							paraList_tRunJob_10
									.add("--context_param ipasDB=" + ((java.util.Date) obj_tRunJob_10).getTime());
						} else {
							paraList_tRunJob_10.add(
									"--context_param ipasDB=" + RuntimeUtils.tRunJobConvertContext(obj_tRunJob_10));
						}
					} else {
						paraList_tRunJob_10.add(
								"--context_param ipasDB=" + NULL_VALUE_EXPRESSION_IN_COMMAND_STRING_FOR_CHILD_JOB_ONLY);
					}

					if (parametersToEncrypt_tRunJob_10.contains("ipasDB") && obj_tRunJob_10 != null) {
						paraListForLog_tRunJob_10.add("--context_param ipasDB=" + routines.system.PasswordEncryptUtil
								.encryptPassword(String.valueOf(RuntimeUtils.tRunJobConvertContext(obj_tRunJob_10))));
					} else {
						paraListForLog_tRunJob_10
								.add("--context_param ipasDB=" + RuntimeUtils.tRunJobConvertContext(obj_tRunJob_10));
					}

					parentContextMap_tRunJob_10.put("ipasDB", obj_tRunJob_10);

					obj_tRunJob_10 = context.ipasUser;
					if (obj_tRunJob_10 != null) {
						if (obj_tRunJob_10.getClass().getName().equals("java.util.Date")) {
							paraList_tRunJob_10
									.add("--context_param ipasUser=" + ((java.util.Date) obj_tRunJob_10).getTime());
						} else {
							paraList_tRunJob_10.add(
									"--context_param ipasUser=" + RuntimeUtils.tRunJobConvertContext(obj_tRunJob_10));
						}
					} else {
						paraList_tRunJob_10.add("--context_param ipasUser="
								+ NULL_VALUE_EXPRESSION_IN_COMMAND_STRING_FOR_CHILD_JOB_ONLY);
					}

					if (parametersToEncrypt_tRunJob_10.contains("ipasUser") && obj_tRunJob_10 != null) {
						paraListForLog_tRunJob_10.add("--context_param ipasUser=" + routines.system.PasswordEncryptUtil
								.encryptPassword(String.valueOf(RuntimeUtils.tRunJobConvertContext(obj_tRunJob_10))));
					} else {
						paraListForLog_tRunJob_10
								.add("--context_param ipasUser=" + RuntimeUtils.tRunJobConvertContext(obj_tRunJob_10));
					}

					parentContextMap_tRunJob_10.put("ipasUser", obj_tRunJob_10);

					obj_tRunJob_10 = context.ipasPassword;
					if (obj_tRunJob_10 != null) {
						if (obj_tRunJob_10.getClass().getName().equals("java.util.Date")) {
							paraList_tRunJob_10
									.add("--context_param ipasPassword=" + ((java.util.Date) obj_tRunJob_10).getTime());
						} else {
							paraList_tRunJob_10.add("--context_param ipasPassword="
									+ RuntimeUtils.tRunJobConvertContext(obj_tRunJob_10));
						}
					} else {
						paraList_tRunJob_10.add("--context_param ipasPassword="
								+ NULL_VALUE_EXPRESSION_IN_COMMAND_STRING_FOR_CHILD_JOB_ONLY);
					}

					if (parametersToEncrypt_tRunJob_10.contains("ipasPassword") && obj_tRunJob_10 != null) {
						paraListForLog_tRunJob_10.add(
								"--context_param ipasPassword=" + routines.system.PasswordEncryptUtil.encryptPassword(
										String.valueOf(RuntimeUtils.tRunJobConvertContext(obj_tRunJob_10))));
					} else {
						paraListForLog_tRunJob_10.add(
								"--context_param ipasPassword=" + RuntimeUtils.tRunJobConvertContext(obj_tRunJob_10));
					}

					parentContextMap_tRunJob_10.put("ipasPassword", obj_tRunJob_10);

					obj_tRunJob_10 = context.intermediateDB;
					if (obj_tRunJob_10 != null) {
						if (obj_tRunJob_10.getClass().getName().equals("java.util.Date")) {
							paraList_tRunJob_10.add(
									"--context_param intermediateDB=" + ((java.util.Date) obj_tRunJob_10).getTime());
						} else {
							paraList_tRunJob_10.add("--context_param intermediateDB="
									+ RuntimeUtils.tRunJobConvertContext(obj_tRunJob_10));
						}
					} else {
						paraList_tRunJob_10.add("--context_param intermediateDB="
								+ NULL_VALUE_EXPRESSION_IN_COMMAND_STRING_FOR_CHILD_JOB_ONLY);
					}

					if (parametersToEncrypt_tRunJob_10.contains("intermediateDB") && obj_tRunJob_10 != null) {
						paraListForLog_tRunJob_10.add(
								"--context_param intermediateDB=" + routines.system.PasswordEncryptUtil.encryptPassword(
										String.valueOf(RuntimeUtils.tRunJobConvertContext(obj_tRunJob_10))));
					} else {
						paraListForLog_tRunJob_10.add(
								"--context_param intermediateDB=" + RuntimeUtils.tRunJobConvertContext(obj_tRunJob_10));
					}

					parentContextMap_tRunJob_10.put("intermediateDB", obj_tRunJob_10);

					System.out.println(
							"tRunJob_10 in A1_Gen_Marcas call wipo_projects.fa_corr_pre_mig_tm_py_0_1.Fa_Corr_pre_mig_TM_PY with:\n\n"
									+ paraListForLog_tRunJob_10 + "\n");

					wipo_projects.fa_corr_pre_mig_tm_py_0_1.Fa_Corr_pre_mig_TM_PY childJob_tRunJob_10 = new wipo_projects.fa_corr_pre_mig_tm_py_0_1.Fa_Corr_pre_mig_TM_PY();
					// pass DataSources
					java.util.Map<String, routines.system.TalendDataSource> talendDataSources_tRunJob_10 = (java.util.Map<String, routines.system.TalendDataSource>) globalMap
							.get(KEY_DB_DATASOURCES);
					if (null != talendDataSources_tRunJob_10) {
						java.util.Map<String, javax.sql.DataSource> dataSources_tRunJob_10 = new java.util.HashMap<String, javax.sql.DataSource>();
						for (java.util.Map.Entry<String, routines.system.TalendDataSource> talendDataSourceEntry_tRunJob_10 : talendDataSources_tRunJob_10
								.entrySet()) {
							dataSources_tRunJob_10.put(talendDataSourceEntry_tRunJob_10.getKey(),
									talendDataSourceEntry_tRunJob_10.getValue().getRawDataSource());
						}
						childJob_tRunJob_10.setDataSources(dataSources_tRunJob_10);
					}

					childJob_tRunJob_10.parentContextMap = parentContextMap_tRunJob_10;

					String[][] childReturn_tRunJob_10 = childJob_tRunJob_10
							.runJob((String[]) paraList_tRunJob_10.toArray(new String[paraList_tRunJob_10.size()]));

					if (childJob_tRunJob_10.getErrorCode() == null) {
						globalMap.put("tRunJob_10_CHILD_RETURN_CODE", childJob_tRunJob_10.getStatus() != null
								&& ("failure").equals(childJob_tRunJob_10.getStatus()) ? 1 : 0);
					} else {
						globalMap.put("tRunJob_10_CHILD_RETURN_CODE", childJob_tRunJob_10.getErrorCode());
					}
					if (childJob_tRunJob_10.getExceptionStackTrace() != null) {
						globalMap.put("tRunJob_10_CHILD_EXCEPTION_STACKTRACE",
								childJob_tRunJob_10.getExceptionStackTrace());
					}
					errorCode = childJob_tRunJob_10.getErrorCode();
					if (childJob_tRunJob_10.getErrorCode() != null
							|| ("failure").equals(childJob_tRunJob_10.getStatus())) {
						java.lang.Exception ce_tRunJob_10 = childJob_tRunJob_10.getException();
						throw new RuntimeException("Child job running failed.\n" + ((ce_tRunJob_10 != null)
								? (ce_tRunJob_10.getClass().getName() + ": " + ce_tRunJob_10.getMessage())
								: ""));
					}

					tos_count_tRunJob_10++;

					/**
					 * [tRunJob_10 main ] stop
					 */

					/**
					 * [tRunJob_10 process_data_begin ] start
					 */

					currentComponent = "tRunJob_10";

					/**
					 * [tRunJob_10 process_data_begin ] stop
					 */

					/**
					 * [tRunJob_10 process_data_end ] start
					 */

					currentComponent = "tRunJob_10";

					/**
					 * [tRunJob_10 process_data_end ] stop
					 */

				} // C_01

				/**
				 * [tRunJob_9 process_data_end ] start
				 */

				currentComponent = "tRunJob_9";

				/**
				 * [tRunJob_9 process_data_end ] stop
				 */

				/**
				 * [tRunJob_9 end ] start
				 */

				currentComponent = "tRunJob_9";

				ok_Hash.put("tRunJob_9", true);
				end_Hash.put("tRunJob_9", System.currentTimeMillis());

				tStatCatcher_1.addMessage("end", "tRunJob_9", end_Hash.get("tRunJob_9") - start_Hash.get("tRunJob_9"));
				tStatCatcher_1Process(globalMap);

				/**
				 * [tRunJob_9 end ] stop
				 */

				/**
				 * [tRunJob_10 end ] start
				 */

				currentComponent = "tRunJob_10";

				if (execStat) {
					runStat.updateStat(resourceMap, iterateId, 2, 0, "row7");
				}

				ok_Hash.put("tRunJob_10", true);
				end_Hash.put("tRunJob_10", System.currentTimeMillis());

				tStatCatcher_1.addMessage("end", "tRunJob_10",
						end_Hash.get("tRunJob_10") - start_Hash.get("tRunJob_10"));
				tStatCatcher_1Process(globalMap);

				/**
				 * [tRunJob_10 end ] stop
				 */

			} // end the resume

			if (resumeEntryMethodName == null || globalResumeTicket) {
				resumeUtil.addLog("CHECKPOINT", "CONNECTION:SUBJOB_OK:tRunJob_9:OnSubjobOk", "",
						Thread.currentThread().getId() + "", "", "", "", "", "");
			}

			if (execStat) {
				runStat.updateStatOnConnection("OnSubjobOk6", 0, "ok");
			}

			tRunJob_11Process(globalMap);

		} catch (java.lang.Exception e) {

			TalendException te = new TalendException(e, currentComponent, globalMap);

			throw te;
		} catch (java.lang.Error error) {

			runStat.stopThreadStat();

			throw error;
		} finally {

			try {

				/**
				 * [tRunJob_9 finally ] start
				 */

				currentComponent = "tRunJob_9";

				/**
				 * [tRunJob_9 finally ] stop
				 */

				/**
				 * [tRunJob_10 finally ] start
				 */

				currentComponent = "tRunJob_10";

				/**
				 * [tRunJob_10 finally ] stop
				 */

			} catch (java.lang.Exception e) {
				// ignore
			} catch (java.lang.Error error) {
				// ignore
			}
			resourceMap = null;
		}

		globalMap.put("tRunJob_9_SUBPROCESS_STATE", 1);
	}

	public void tRunJob_11Process(final java.util.Map<String, Object> globalMap) throws TalendException {
		globalMap.put("tRunJob_11_SUBPROCESS_STATE", 0);

		final boolean execStat = this.execStat;

		String iterateId = "";

		String currentComponent = "";
		java.util.Map<String, Object> resourceMap = new java.util.HashMap<String, Object>();

		try {
			// TDI-39566 avoid throwing an useless Exception
			boolean resumeIt = true;
			if (globalResumeTicket == false && resumeEntryMethodName != null) {
				String currentMethodName = new java.lang.Exception().getStackTrace()[0].getMethodName();
				resumeIt = resumeEntryMethodName.equals(currentMethodName);
			}
			if (resumeIt || globalResumeTicket) { // start the resume
				globalResumeTicket = true;

				/**
				 * [tRunJob_11 begin ] start
				 */

				ok_Hash.put("tRunJob_11", false);
				start_Hash.put("tRunJob_11", System.currentTimeMillis());

				tStatCatcher_1.addMessage("begin", "tRunJob_11");
				tStatCatcher_1Process(globalMap);

				currentComponent = "tRunJob_11";

				int tos_count_tRunJob_11 = 0;

				class DealChildJobLibrary_tRunJob_11 {

					public String replaceJarPathsFromCrcMap(String originalClassPathLine) throws java.lang.Exception {
						String classPathLine = "";
						String crcMapPath = new java.io.File("../crcMap").getCanonicalPath();
						if (isNeedAddLibsPath(crcMapPath)) {
							java.util.Map<String, String> crcMap = null;
							java.io.ObjectInputStream ois = new ObjectInputStream(
									new java.io.FileInputStream(crcMapPath));
							crcMap = (java.util.Map<String, String>) ois.readObject();
							ois.close();
							classPathLine = addLibsPath(originalClassPathLine, crcMap);
						} else {
							classPathLine = originalClassPathLine;
						}
						return classPathLine;
					}

					private boolean isNeedAddLibsPath(String crcMapPath) {
						if (!(new java.io.File(crcMapPath).exists())) {// when not use cache
							return false;
						}
						return true;
					}

					private String addLibsPath(String line, java.util.Map<String, String> crcMap) {
						for (java.util.Map.Entry<String, String> entry : crcMap.entrySet()) {
							line = adaptLibPaths(line, entry);
						}
						return line;
					}

					private String adaptLibPaths(String line, java.util.Map.Entry<String, String> entry) {
						String jarName = entry.getValue();
						String crc = entry.getKey();
						String libStringFinder = "../lib/" + jarName;
						if (line.contains(libStringFinder)) {
							line = line.replace(libStringFinder, "../../../cache/lib/" + crc + "/" + jarName);
						} else if (line.contains(":$ROOT_PATH/" + jarName + ":")) {
							line = line.replace(":$ROOT_PATH/" + jarName + ":",
									":$ROOT_PATH/../../../cache/lib/" + crc + "/" + jarName + ":");
						} else if (line.contains(";" + jarName + ";")) {
							line = line.replace(";" + jarName + ";",
									";../../../cache/lib/" + crc + "/" + jarName + ";");
						}
						return line;
					}

				}
				DealChildJobLibrary_tRunJob_11 dealChildJobLibrary_tRunJob_11 = new DealChildJobLibrary_tRunJob_11();

				class JVMArgumentHelper_tRunJob_11 {

					public void addArgumentsTo(java.util.List<String> target_argument_list,
							String argument_from_child) {

						target_argument_list.add(argument_from_child);
					}

				}

				JVMArgumentHelper_tRunJob_11 jvm_argument_helper_tRunJob_11 = new JVMArgumentHelper_tRunJob_11();

				String audit_jar_path_tRunJob_11 = System.getProperty("classpath.extended");

				/**
				 * [tRunJob_11 begin ] stop
				 */

				/**
				 * [tRunJob_11 main ] start
				 */

				currentComponent = "tRunJob_11";

				java.util.List<String> paraList_tRunJob_11 = new java.util.ArrayList<String>();

				String osName_tRunJob_11 = System.getProperty("os.name");
				if (osName_tRunJob_11 != null && osName_tRunJob_11.toLowerCase().startsWith("win")) {

					paraList_tRunJob_11.add("C:/Program Files/Amazon Corretto/jdk11.0.4_10/bin/java.exe");
					String m2 = System.getProperty("talend.component.manager.m2.repository");
					if (m2 != null) {
						paraList_tRunJob_11.add("-Dtalend.component.manager.m2.repository=" + m2);
					}

					if (enableLogStash) {
						System.getProperties().stringPropertyNames().stream().filter(it -> it.startsWith("audit."))
								.forEach(key -> paraList_tRunJob_11.add("-D" + key + "=" + System.getProperty(key)));
					}

					System.getProperties().stringPropertyNames().stream()
							.filter(it -> it.startsWith("runtime.lineage.") || "classpath.extended".equals(it))
							.forEach(key -> paraList_tRunJob_11.add("-D" + key + "=" + System.getProperty(key)));

					jvm_argument_helper_tRunJob_11.addArgumentsTo(paraList_tRunJob_11, "-Xms256M");

					jvm_argument_helper_tRunJob_11.addArgumentsTo(paraList_tRunJob_11, "-Xmx1024M");

					jvm_argument_helper_tRunJob_11.addArgumentsTo(paraList_tRunJob_11, "-Dfile.encoding=UTF-8");

					jvm_argument_helper_tRunJob_11.addArgumentsTo(paraList_tRunJob_11,
							"-Dtalend.component.manager.m2.repository=G:/TOS_DI-20201015_1726-V7.4.1M3/configuration/.m2/repository");

					jvm_argument_helper_tRunJob_11.addArgumentsTo(paraList_tRunJob_11, "-cp");

					String classpath_tRunJob_11_6 = "G:/GitHub/NewTalend/WIPO_PROJECTS/poms/jobs/process/OMPI/MigCommon/g1_val_mig_agents_0.1/target/classpath.jar;";

					if (audit_jar_path_tRunJob_11 != null && !audit_jar_path_tRunJob_11.isEmpty()) {
						classpath_tRunJob_11_6 += audit_jar_path_tRunJob_11;
					}

					jvm_argument_helper_tRunJob_11.addArgumentsTo(paraList_tRunJob_11,
							dealChildJobLibrary_tRunJob_11.replaceJarPathsFromCrcMap(classpath_tRunJob_11_6));

					jvm_argument_helper_tRunJob_11.addArgumentsTo(paraList_tRunJob_11,
							"wipo_projects.g1_val_mig_agents_0_1.G1_Val_mig_AGENTS");

					jvm_argument_helper_tRunJob_11.addArgumentsTo(paraList_tRunJob_11, "--father_pid=" + pid);

					jvm_argument_helper_tRunJob_11.addArgumentsTo(paraList_tRunJob_11, "--root_pid=" + rootPid);

					jvm_argument_helper_tRunJob_11.addArgumentsTo(paraList_tRunJob_11, "--father_node=tRunJob_11");

					jvm_argument_helper_tRunJob_11.addArgumentsTo(paraList_tRunJob_11, "--context=Default");

					jvm_argument_helper_tRunJob_11.addArgumentsTo(paraList_tRunJob_11, "%*");

				} else {

					paraList_tRunJob_11.add("C:/Program Files/Amazon Corretto/jdk11.0.4_10/bin/java.exe");
					String m2 = System.getProperty("talend.component.manager.m2.repository");
					if (m2 != null) {
						paraList_tRunJob_11.add("-Dtalend.component.manager.m2.repository=" + m2);
					}

					if (enableLogStash) {
						System.getProperties().stringPropertyNames().stream().filter(it -> it.startsWith("audit."))
								.forEach(key -> paraList_tRunJob_11.add("-D" + key + "=" + System.getProperty(key)));
					}

					System.getProperties().stringPropertyNames().stream()
							.filter(it -> it.startsWith("runtime.lineage.") || "classpath.extended".equals(it))
							.forEach(key -> paraList_tRunJob_11.add("-D" + key + "=" + System.getProperty(key)));

					jvm_argument_helper_tRunJob_11.addArgumentsTo(paraList_tRunJob_11, "-Xms256M");

					jvm_argument_helper_tRunJob_11.addArgumentsTo(paraList_tRunJob_11, "-Xmx1024M");

					jvm_argument_helper_tRunJob_11.addArgumentsTo(paraList_tRunJob_11, "-Dfile.encoding=UTF-8");

					jvm_argument_helper_tRunJob_11.addArgumentsTo(paraList_tRunJob_11,
							"-Dtalend.component.manager.m2.repository=G:/TOS_DI-20201015_1726-V7.4.1M3/configuration/.m2/repository");

					jvm_argument_helper_tRunJob_11.addArgumentsTo(paraList_tRunJob_11, "-cp");

					String classpath_tRunJob_11_6 = "G:/GitHub/NewTalend/WIPO_PROJECTS/poms/jobs/process/OMPI/MigCommon/g1_val_mig_agents_0.1/target/classes:G:/GitHub/NewTalend/WIPO_PROJECTS/poms/jobs/process/OMPI/MigCommon/g1_val_mig_agents_0.1/src/main/ext-resources:G:/GitHub/NewTalend/WIPO_PROJECTS/poms/code/routines/target/classes:.:G:/TOS_DI-20201015_1726-V7.4.1M3/configuration/.m2/repository/org/apache/logging/log4j/log4j-slf4j-impl/2.12.1/log4j-slf4j-impl-2.12.1.jar:G:/TOS_DI-20201015_1726-V7.4.1M3/configuration/.m2/repository/org/apache/logging/log4j/log4j-api/2.12.1/log4j-api-2.12.1.jar:G:/TOS_DI-20201015_1726-V7.4.1M3/configuration/.m2/repository/org/apache/logging/log4j/log4j-core/2.12.1/log4j-core-2.12.1.jar:G:/TOS_DI-20201015_1726-V7.4.1M3/configuration/.m2/repository/net/sourceforge/jtds/jtds/1.3.1-patch-20190523/jtds-1.3.1-patch-20190523.jar:G:/TOS_DI-20201015_1726-V7.4.1M3/configuration/.m2/repository/org/dom4j/dom4j/2.1.3/dom4j-2.1.3.jar:G:/TOS_DI-20201015_1726-V7.4.1M3/configuration/.m2/repository/org/talend/libraries/imgscalr-lib-4.2/6.0.0-SNAPSHOT/imgscalr-lib-4.2-6.0.0-SNAPSHOT.jar:G:/TOS_DI-20201015_1726-V7.4.1M3/configuration/.m2/repository/org/talend/libraries/crypto-utils/6.0.0-SNAPSHOT/crypto-utils-6.0.0-SNAPSHOT.jar:G:/TOS_DI-20201015_1726-V7.4.1M3/configuration/.m2/repository/org/slf4j/slf4j-api/1.7.25/slf4j-api-1.7.25.jar:";

					if (audit_jar_path_tRunJob_11 != null && !audit_jar_path_tRunJob_11.isEmpty()) {
						classpath_tRunJob_11_6 += audit_jar_path_tRunJob_11;
					}

					jvm_argument_helper_tRunJob_11.addArgumentsTo(paraList_tRunJob_11,
							dealChildJobLibrary_tRunJob_11.replaceJarPathsFromCrcMap(classpath_tRunJob_11_6)
									.replace("$ROOT_PATH", System.getProperty("user.dir")));

					jvm_argument_helper_tRunJob_11.addArgumentsTo(paraList_tRunJob_11,
							"wipo_projects.g1_val_mig_agents_0_1.G1_Val_mig_AGENTS");

					jvm_argument_helper_tRunJob_11.addArgumentsTo(paraList_tRunJob_11, "--father_pid=" + pid);

					jvm_argument_helper_tRunJob_11.addArgumentsTo(paraList_tRunJob_11, "--root_pid=" + rootPid);

					jvm_argument_helper_tRunJob_11.addArgumentsTo(paraList_tRunJob_11, "--father_node=tRunJob_11");

					jvm_argument_helper_tRunJob_11.addArgumentsTo(paraList_tRunJob_11, "--context=Default");

					jvm_argument_helper_tRunJob_11.addArgumentsTo(paraList_tRunJob_11, "$@");

				}

				if (enableLogStash) {
					paraList_tRunJob_11.add("--audit.enabled=" + enableLogStash);
				}

				// for feature:10589

				paraList_tRunJob_11.add("--stat_port=" + null);

				if (resuming_logs_dir_path != null) {
					paraList_tRunJob_11.add("--resuming_logs_dir_path=" + resuming_logs_dir_path);
				}
				String childResumePath_tRunJob_11 = ResumeUtil.getChildJobCheckPointPath(resuming_checkpoint_path);
				String tRunJobName_tRunJob_11 = ResumeUtil.getRighttRunJob(resuming_checkpoint_path);
				if ("tRunJob_11".equals(tRunJobName_tRunJob_11) && childResumePath_tRunJob_11 != null) {
					paraList_tRunJob_11.add("--resuming_checkpoint_path="
							+ ResumeUtil.getChildJobCheckPointPath(resuming_checkpoint_path));
				}
				paraList_tRunJob_11.add("--parent_part_launcher=JOB:" + jobName + "/NODE:tRunJob_11");

				java.util.Map<String, Object> parentContextMap_tRunJob_11 = new java.util.HashMap<String, Object>();

				java.util.List<String> paraListForLog_tRunJob_11 = new java.util.ArrayList<String>();
				paraListForLog_tRunJob_11.addAll(paraList_tRunJob_11);
				List<String> parametersToEncrypt_tRunJob_11 = new java.util.ArrayList<String>();

				Object obj_tRunJob_11 = null;

				obj_tRunJob_11 = context.intermediateHost;
				if (obj_tRunJob_11 != null) {
					if (obj_tRunJob_11.getClass().getName().equals("java.util.Date")) {
						paraList_tRunJob_11
								.add("--context_param intermediateHost=" + ((java.util.Date) obj_tRunJob_11).getTime());
					} else {
						paraList_tRunJob_11.add("--context_param intermediateHost="
								+ RuntimeUtils.tRunJobConvertContext(obj_tRunJob_11));
					}
				} else {
					paraList_tRunJob_11.add("--context_param intermediateHost="
							+ NULL_VALUE_EXPRESSION_IN_COMMAND_STRING_FOR_CHILD_JOB_ONLY);
				}

				if (parametersToEncrypt_tRunJob_11.contains("intermediateHost") && obj_tRunJob_11 != null) {
					paraListForLog_tRunJob_11.add(
							"--context_param intermediateHost=" + routines.system.PasswordEncryptUtil.encryptPassword(
									String.valueOf(RuntimeUtils.tRunJobConvertContext(obj_tRunJob_11))));
				} else {
					paraListForLog_tRunJob_11.add(
							"--context_param intermediateHost=" + RuntimeUtils.tRunJobConvertContext(obj_tRunJob_11));
				}

				parentContextMap_tRunJob_11.put("intermediateHost", obj_tRunJob_11);

				obj_tRunJob_11 = context.intermediatePort;
				if (obj_tRunJob_11 != null) {
					if (obj_tRunJob_11.getClass().getName().equals("java.util.Date")) {
						paraList_tRunJob_11
								.add("--context_param intermediatePort=" + ((java.util.Date) obj_tRunJob_11).getTime());
					} else {
						paraList_tRunJob_11.add("--context_param intermediatePort="
								+ RuntimeUtils.tRunJobConvertContext(obj_tRunJob_11));
					}
				} else {
					paraList_tRunJob_11.add("--context_param intermediatePort="
							+ NULL_VALUE_EXPRESSION_IN_COMMAND_STRING_FOR_CHILD_JOB_ONLY);
				}

				if (parametersToEncrypt_tRunJob_11.contains("intermediatePort") && obj_tRunJob_11 != null) {
					paraListForLog_tRunJob_11.add(
							"--context_param intermediatePort=" + routines.system.PasswordEncryptUtil.encryptPassword(
									String.valueOf(RuntimeUtils.tRunJobConvertContext(obj_tRunJob_11))));
				} else {
					paraListForLog_tRunJob_11.add(
							"--context_param intermediatePort=" + RuntimeUtils.tRunJobConvertContext(obj_tRunJob_11));
				}

				parentContextMap_tRunJob_11.put("intermediatePort", obj_tRunJob_11);

				obj_tRunJob_11 = context.intermediateDB;
				if (obj_tRunJob_11 != null) {
					if (obj_tRunJob_11.getClass().getName().equals("java.util.Date")) {
						paraList_tRunJob_11
								.add("--context_param intermediateDB=" + ((java.util.Date) obj_tRunJob_11).getTime());
					} else {
						paraList_tRunJob_11.add(
								"--context_param intermediateDB=" + RuntimeUtils.tRunJobConvertContext(obj_tRunJob_11));
					}
				} else {
					paraList_tRunJob_11.add("--context_param intermediateDB="
							+ NULL_VALUE_EXPRESSION_IN_COMMAND_STRING_FOR_CHILD_JOB_ONLY);
				}

				if (parametersToEncrypt_tRunJob_11.contains("intermediateDB") && obj_tRunJob_11 != null) {
					paraListForLog_tRunJob_11.add(
							"--context_param intermediateDB=" + routines.system.PasswordEncryptUtil.encryptPassword(
									String.valueOf(RuntimeUtils.tRunJobConvertContext(obj_tRunJob_11))));
				} else {
					paraListForLog_tRunJob_11.add(
							"--context_param intermediateDB=" + RuntimeUtils.tRunJobConvertContext(obj_tRunJob_11));
				}

				parentContextMap_tRunJob_11.put("intermediateDB", obj_tRunJob_11);

				obj_tRunJob_11 = context.intermediateUser;
				if (obj_tRunJob_11 != null) {
					if (obj_tRunJob_11.getClass().getName().equals("java.util.Date")) {
						paraList_tRunJob_11
								.add("--context_param intermediateUser=" + ((java.util.Date) obj_tRunJob_11).getTime());
					} else {
						paraList_tRunJob_11.add("--context_param intermediateUser="
								+ RuntimeUtils.tRunJobConvertContext(obj_tRunJob_11));
					}
				} else {
					paraList_tRunJob_11.add("--context_param intermediateUser="
							+ NULL_VALUE_EXPRESSION_IN_COMMAND_STRING_FOR_CHILD_JOB_ONLY);
				}

				if (parametersToEncrypt_tRunJob_11.contains("intermediateUser") && obj_tRunJob_11 != null) {
					paraListForLog_tRunJob_11.add(
							"--context_param intermediateUser=" + routines.system.PasswordEncryptUtil.encryptPassword(
									String.valueOf(RuntimeUtils.tRunJobConvertContext(obj_tRunJob_11))));
				} else {
					paraListForLog_tRunJob_11.add(
							"--context_param intermediateUser=" + RuntimeUtils.tRunJobConvertContext(obj_tRunJob_11));
				}

				parentContextMap_tRunJob_11.put("intermediateUser", obj_tRunJob_11);

				obj_tRunJob_11 = context.intermediatePassword;
				if (obj_tRunJob_11 != null) {
					if (obj_tRunJob_11.getClass().getName().equals("java.util.Date")) {
						paraList_tRunJob_11.add(
								"--context_param intermediatePassword=" + ((java.util.Date) obj_tRunJob_11).getTime());
					} else {
						paraList_tRunJob_11.add("--context_param intermediatePassword="
								+ RuntimeUtils.tRunJobConvertContext(obj_tRunJob_11));
					}
				} else {
					paraList_tRunJob_11.add("--context_param intermediatePassword="
							+ NULL_VALUE_EXPRESSION_IN_COMMAND_STRING_FOR_CHILD_JOB_ONLY);
				}

				if (parametersToEncrypt_tRunJob_11.contains("intermediatePassword") && obj_tRunJob_11 != null) {
					paraListForLog_tRunJob_11.add("--context_param intermediatePassword="
							+ routines.system.PasswordEncryptUtil.encryptPassword(
									String.valueOf(RuntimeUtils.tRunJobConvertContext(obj_tRunJob_11))));
				} else {
					paraListForLog_tRunJob_11.add("--context_param intermediatePassword="
							+ RuntimeUtils.tRunJobConvertContext(obj_tRunJob_11));
				}

				parentContextMap_tRunJob_11.put("intermediatePassword", obj_tRunJob_11);

				obj_tRunJob_11 = context.ipasHost;
				if (obj_tRunJob_11 != null) {
					if (obj_tRunJob_11.getClass().getName().equals("java.util.Date")) {
						paraList_tRunJob_11
								.add("--context_param ipasHost=" + ((java.util.Date) obj_tRunJob_11).getTime());
					} else {
						paraList_tRunJob_11
								.add("--context_param ipasHost=" + RuntimeUtils.tRunJobConvertContext(obj_tRunJob_11));
					}
				} else {
					paraList_tRunJob_11.add(
							"--context_param ipasHost=" + NULL_VALUE_EXPRESSION_IN_COMMAND_STRING_FOR_CHILD_JOB_ONLY);
				}

				if (parametersToEncrypt_tRunJob_11.contains("ipasHost") && obj_tRunJob_11 != null) {
					paraListForLog_tRunJob_11.add("--context_param ipasHost=" + routines.system.PasswordEncryptUtil
							.encryptPassword(String.valueOf(RuntimeUtils.tRunJobConvertContext(obj_tRunJob_11))));
				} else {
					paraListForLog_tRunJob_11
							.add("--context_param ipasHost=" + RuntimeUtils.tRunJobConvertContext(obj_tRunJob_11));
				}

				parentContextMap_tRunJob_11.put("ipasHost", obj_tRunJob_11);

				obj_tRunJob_11 = context.ipasPort;
				if (obj_tRunJob_11 != null) {
					if (obj_tRunJob_11.getClass().getName().equals("java.util.Date")) {
						paraList_tRunJob_11
								.add("--context_param ipasPort=" + ((java.util.Date) obj_tRunJob_11).getTime());
					} else {
						paraList_tRunJob_11
								.add("--context_param ipasPort=" + RuntimeUtils.tRunJobConvertContext(obj_tRunJob_11));
					}
				} else {
					paraList_tRunJob_11.add(
							"--context_param ipasPort=" + NULL_VALUE_EXPRESSION_IN_COMMAND_STRING_FOR_CHILD_JOB_ONLY);
				}

				if (parametersToEncrypt_tRunJob_11.contains("ipasPort") && obj_tRunJob_11 != null) {
					paraListForLog_tRunJob_11.add("--context_param ipasPort=" + routines.system.PasswordEncryptUtil
							.encryptPassword(String.valueOf(RuntimeUtils.tRunJobConvertContext(obj_tRunJob_11))));
				} else {
					paraListForLog_tRunJob_11
							.add("--context_param ipasPort=" + RuntimeUtils.tRunJobConvertContext(obj_tRunJob_11));
				}

				parentContextMap_tRunJob_11.put("ipasPort", obj_tRunJob_11);

				obj_tRunJob_11 = context.ipasDB;
				if (obj_tRunJob_11 != null) {
					if (obj_tRunJob_11.getClass().getName().equals("java.util.Date")) {
						paraList_tRunJob_11
								.add("--context_param ipasDB=" + ((java.util.Date) obj_tRunJob_11).getTime());
					} else {
						paraList_tRunJob_11
								.add("--context_param ipasDB=" + RuntimeUtils.tRunJobConvertContext(obj_tRunJob_11));
					}
				} else {
					paraList_tRunJob_11.add(
							"--context_param ipasDB=" + NULL_VALUE_EXPRESSION_IN_COMMAND_STRING_FOR_CHILD_JOB_ONLY);
				}

				if (parametersToEncrypt_tRunJob_11.contains("ipasDB") && obj_tRunJob_11 != null) {
					paraListForLog_tRunJob_11.add("--context_param ipasDB=" + routines.system.PasswordEncryptUtil
							.encryptPassword(String.valueOf(RuntimeUtils.tRunJobConvertContext(obj_tRunJob_11))));
				} else {
					paraListForLog_tRunJob_11
							.add("--context_param ipasDB=" + RuntimeUtils.tRunJobConvertContext(obj_tRunJob_11));
				}

				parentContextMap_tRunJob_11.put("ipasDB", obj_tRunJob_11);

				obj_tRunJob_11 = context.ipasUser;
				if (obj_tRunJob_11 != null) {
					if (obj_tRunJob_11.getClass().getName().equals("java.util.Date")) {
						paraList_tRunJob_11
								.add("--context_param ipasUser=" + ((java.util.Date) obj_tRunJob_11).getTime());
					} else {
						paraList_tRunJob_11
								.add("--context_param ipasUser=" + RuntimeUtils.tRunJobConvertContext(obj_tRunJob_11));
					}
				} else {
					paraList_tRunJob_11.add(
							"--context_param ipasUser=" + NULL_VALUE_EXPRESSION_IN_COMMAND_STRING_FOR_CHILD_JOB_ONLY);
				}

				if (parametersToEncrypt_tRunJob_11.contains("ipasUser") && obj_tRunJob_11 != null) {
					paraListForLog_tRunJob_11.add("--context_param ipasUser=" + routines.system.PasswordEncryptUtil
							.encryptPassword(String.valueOf(RuntimeUtils.tRunJobConvertContext(obj_tRunJob_11))));
				} else {
					paraListForLog_tRunJob_11
							.add("--context_param ipasUser=" + RuntimeUtils.tRunJobConvertContext(obj_tRunJob_11));
				}

				parentContextMap_tRunJob_11.put("ipasUser", obj_tRunJob_11);

				obj_tRunJob_11 = context.ipasPassword;
				if (obj_tRunJob_11 != null) {
					if (obj_tRunJob_11.getClass().getName().equals("java.util.Date")) {
						paraList_tRunJob_11
								.add("--context_param ipasPassword=" + ((java.util.Date) obj_tRunJob_11).getTime());
					} else {
						paraList_tRunJob_11.add(
								"--context_param ipasPassword=" + RuntimeUtils.tRunJobConvertContext(obj_tRunJob_11));
					}
				} else {
					paraList_tRunJob_11.add("--context_param ipasPassword="
							+ NULL_VALUE_EXPRESSION_IN_COMMAND_STRING_FOR_CHILD_JOB_ONLY);
				}

				if (parametersToEncrypt_tRunJob_11.contains("ipasPassword") && obj_tRunJob_11 != null) {
					paraListForLog_tRunJob_11.add("--context_param ipasPassword=" + routines.system.PasswordEncryptUtil
							.encryptPassword(String.valueOf(RuntimeUtils.tRunJobConvertContext(obj_tRunJob_11))));
				} else {
					paraListForLog_tRunJob_11
							.add("--context_param ipasPassword=" + RuntimeUtils.tRunJobConvertContext(obj_tRunJob_11));
				}

				parentContextMap_tRunJob_11.put("ipasPassword", obj_tRunJob_11);

				obj_tRunJob_11 = context.ipasSaPassword;
				if (obj_tRunJob_11 != null) {
					if (obj_tRunJob_11.getClass().getName().equals("java.util.Date")) {
						paraList_tRunJob_11
								.add("--context_param ipasSaPassword=" + ((java.util.Date) obj_tRunJob_11).getTime());
					} else {
						paraList_tRunJob_11.add(
								"--context_param ipasSaPassword=" + RuntimeUtils.tRunJobConvertContext(obj_tRunJob_11));
					}
				} else {
					paraList_tRunJob_11.add("--context_param ipasSaPassword="
							+ NULL_VALUE_EXPRESSION_IN_COMMAND_STRING_FOR_CHILD_JOB_ONLY);
				}

				if (parametersToEncrypt_tRunJob_11.contains("ipasSaPassword") && obj_tRunJob_11 != null) {
					paraListForLog_tRunJob_11.add(
							"--context_param ipasSaPassword=" + routines.system.PasswordEncryptUtil.encryptPassword(
									String.valueOf(RuntimeUtils.tRunJobConvertContext(obj_tRunJob_11))));
				} else {
					paraListForLog_tRunJob_11.add(
							"--context_param ipasSaPassword=" + RuntimeUtils.tRunJobConvertContext(obj_tRunJob_11));
				}

				parentContextMap_tRunJob_11.put("ipasSaPassword", obj_tRunJob_11);

				obj_tRunJob_11 = true;
				if (obj_tRunJob_11 != null) {
					if (obj_tRunJob_11.getClass().getName().equals("java.util.Date")) {
						paraList_tRunJob_11
								.add("--context_param processAll=" + ((java.util.Date) obj_tRunJob_11).getTime());
					} else {
						paraList_tRunJob_11.add(
								"--context_param processAll=" + RuntimeUtils.tRunJobConvertContext(obj_tRunJob_11));
					}
				} else {
					paraList_tRunJob_11.add(
							"--context_param processAll=" + NULL_VALUE_EXPRESSION_IN_COMMAND_STRING_FOR_CHILD_JOB_ONLY);
				}

				if (parametersToEncrypt_tRunJob_11.contains("processAll") && obj_tRunJob_11 != null) {
					paraListForLog_tRunJob_11.add("--context_param processAll=" + routines.system.PasswordEncryptUtil
							.encryptPassword(String.valueOf(RuntimeUtils.tRunJobConvertContext(obj_tRunJob_11))));
				} else {
					paraListForLog_tRunJob_11
							.add("--context_param processAll=" + RuntimeUtils.tRunJobConvertContext(obj_tRunJob_11));
				}

				parentContextMap_tRunJob_11.put("processAll", obj_tRunJob_11);

				System.out.println("tRunJob_11 in A1_Gen_Marcas call G1_Val_mig_AGENTS with:\n\n"
						+ paraListForLog_tRunJob_11 + "\n");

				class ConsoleHelper_tRunJob_11 {
					private Thread getNormalThread(Process process) {
						return new Thread() {
							public void run() {
								try {
									java.io.BufferedReader reader = new java.io.BufferedReader(
											new java.io.InputStreamReader(process.getInputStream()));
									String line = "";
									try {
										while ((line = reader.readLine()) != null) {
											System.out.println(line);
										}
									} finally {
										reader.close();
									}
								} catch (java.io.IOException ioe) {

									ioe.printStackTrace();
								}
							}
						};
					}

					private Thread getErrorThread(Process process, StringBuffer sb) {
						return new Thread() {
							public void run() {
								try {
									java.io.BufferedReader reader = new java.io.BufferedReader(
											new java.io.InputStreamReader(process.getErrorStream()));
									String line = "";
									try {
										while ((line = reader.readLine()) != null) {
											sb.append(line).append("\n");
										}
									} finally {
										reader.close();
									}
								} catch (java.io.IOException ioe) {

									ioe.printStackTrace();
								}
							}
						};
					}
				}
				ConsoleHelper_tRunJob_11 consoleHelper_tRunJob_11 = new ConsoleHelper_tRunJob_11();

				Runtime runtime_tRunJob_11 = Runtime.getRuntime();
				Process ps_tRunJob_11 = null;

				// 0 indicates normal termination
				int result_tRunJob_11;
				StringBuffer errorMsg_tRunJob_11 = new StringBuffer();
				try {
					ps_tRunJob_11 = runtime_tRunJob_11
							.exec((String[]) paraList_tRunJob_11.toArray(new String[paraList_tRunJob_11.size()]));

					Thread normal_tRunJob_11 = consoleHelper_tRunJob_11.getNormalThread(ps_tRunJob_11);
					normal_tRunJob_11.start();

					Thread error_tRunJob_11 = consoleHelper_tRunJob_11.getErrorThread(ps_tRunJob_11,
							errorMsg_tRunJob_11);
					error_tRunJob_11.start();

					result_tRunJob_11 = ps_tRunJob_11.waitFor();
					normal_tRunJob_11.join();
					error_tRunJob_11.join();
				} catch (ThreadDeath tde) {
					ps_tRunJob_11.destroy();
					throw tde;
				}

				globalMap.put("tRunJob_11_CHILD_RETURN_CODE", result_tRunJob_11);
				if (result_tRunJob_11 != 0) {
					globalMap.put("tRunJob_11_CHILD_EXCEPTION_STACKTRACE", errorMsg_tRunJob_11.toString());

					throw new RuntimeException("Child job returns " + result_tRunJob_11
							+ ". It doesn't terminate normally.\n" + errorMsg_tRunJob_11.toString());

				}

				tos_count_tRunJob_11++;

				/**
				 * [tRunJob_11 main ] stop
				 */

				/**
				 * [tRunJob_11 process_data_begin ] start
				 */

				currentComponent = "tRunJob_11";

				/**
				 * [tRunJob_11 process_data_begin ] stop
				 */

				/**
				 * [tRunJob_11 process_data_end ] start
				 */

				currentComponent = "tRunJob_11";

				/**
				 * [tRunJob_11 process_data_end ] stop
				 */

				/**
				 * [tRunJob_11 end ] start
				 */

				currentComponent = "tRunJob_11";

				ok_Hash.put("tRunJob_11", true);
				end_Hash.put("tRunJob_11", System.currentTimeMillis());

				tStatCatcher_1.addMessage("end", "tRunJob_11",
						end_Hash.get("tRunJob_11") - start_Hash.get("tRunJob_11"));
				tStatCatcher_1Process(globalMap);

				/**
				 * [tRunJob_11 end ] stop
				 */
			} // end the resume

			if (resumeEntryMethodName == null || globalResumeTicket) {
				resumeUtil.addLog("CHECKPOINT", "CONNECTION:SUBJOB_OK:tRunJob_11:OnSubjobOk", "",
						Thread.currentThread().getId() + "", "", "", "", "", "");
			}

			if (execStat) {
				runStat.updateStatOnConnection("OnSubjobOk21", 0, "ok");
			}

			tRunJob_12Process(globalMap);

		} catch (java.lang.Exception e) {

			TalendException te = new TalendException(e, currentComponent, globalMap);

			throw te;
		} catch (java.lang.Error error) {

			runStat.stopThreadStat();

			throw error;
		} finally {

			try {

				/**
				 * [tRunJob_11 finally ] start
				 */

				currentComponent = "tRunJob_11";

				/**
				 * [tRunJob_11 finally ] stop
				 */
			} catch (java.lang.Exception e) {
				// ignore
			} catch (java.lang.Error error) {
				// ignore
			}
			resourceMap = null;
		}

		globalMap.put("tRunJob_11_SUBPROCESS_STATE", 1);
	}

	public void tRunJob_12Process(final java.util.Map<String, Object> globalMap) throws TalendException {
		globalMap.put("tRunJob_12_SUBPROCESS_STATE", 0);

		final boolean execStat = this.execStat;

		String iterateId = "";

		String currentComponent = "";
		java.util.Map<String, Object> resourceMap = new java.util.HashMap<String, Object>();

		try {
			// TDI-39566 avoid throwing an useless Exception
			boolean resumeIt = true;
			if (globalResumeTicket == false && resumeEntryMethodName != null) {
				String currentMethodName = new java.lang.Exception().getStackTrace()[0].getMethodName();
				resumeIt = resumeEntryMethodName.equals(currentMethodName);
			}
			if (resumeIt || globalResumeTicket) { // start the resume
				globalResumeTicket = true;

				/**
				 * [tRunJob_12 begin ] start
				 */

				ok_Hash.put("tRunJob_12", false);
				start_Hash.put("tRunJob_12", System.currentTimeMillis());

				tStatCatcher_1.addMessage("begin", "tRunJob_12");
				tStatCatcher_1Process(globalMap);

				currentComponent = "tRunJob_12";

				int tos_count_tRunJob_12 = 0;

				class DealChildJobLibrary_tRunJob_12 {

					public String replaceJarPathsFromCrcMap(String originalClassPathLine) throws java.lang.Exception {
						String classPathLine = "";
						String crcMapPath = new java.io.File("../crcMap").getCanonicalPath();
						if (isNeedAddLibsPath(crcMapPath)) {
							java.util.Map<String, String> crcMap = null;
							java.io.ObjectInputStream ois = new ObjectInputStream(
									new java.io.FileInputStream(crcMapPath));
							crcMap = (java.util.Map<String, String>) ois.readObject();
							ois.close();
							classPathLine = addLibsPath(originalClassPathLine, crcMap);
						} else {
							classPathLine = originalClassPathLine;
						}
						return classPathLine;
					}

					private boolean isNeedAddLibsPath(String crcMapPath) {
						if (!(new java.io.File(crcMapPath).exists())) {// when not use cache
							return false;
						}
						return true;
					}

					private String addLibsPath(String line, java.util.Map<String, String> crcMap) {
						for (java.util.Map.Entry<String, String> entry : crcMap.entrySet()) {
							line = adaptLibPaths(line, entry);
						}
						return line;
					}

					private String adaptLibPaths(String line, java.util.Map.Entry<String, String> entry) {
						String jarName = entry.getValue();
						String crc = entry.getKey();
						String libStringFinder = "../lib/" + jarName;
						if (line.contains(libStringFinder)) {
							line = line.replace(libStringFinder, "../../../cache/lib/" + crc + "/" + jarName);
						} else if (line.contains(":$ROOT_PATH/" + jarName + ":")) {
							line = line.replace(":$ROOT_PATH/" + jarName + ":",
									":$ROOT_PATH/../../../cache/lib/" + crc + "/" + jarName + ":");
						} else if (line.contains(";" + jarName + ";")) {
							line = line.replace(";" + jarName + ";",
									";../../../cache/lib/" + crc + "/" + jarName + ";");
						}
						return line;
					}

				}
				DealChildJobLibrary_tRunJob_12 dealChildJobLibrary_tRunJob_12 = new DealChildJobLibrary_tRunJob_12();

				class JVMArgumentHelper_tRunJob_12 {

					public void addArgumentsTo(java.util.List<String> target_argument_list,
							String argument_from_child) {

						target_argument_list.add(argument_from_child);
					}

				}

				JVMArgumentHelper_tRunJob_12 jvm_argument_helper_tRunJob_12 = new JVMArgumentHelper_tRunJob_12();

				String audit_jar_path_tRunJob_12 = System.getProperty("classpath.extended");

				/**
				 * [tRunJob_12 begin ] stop
				 */

				/**
				 * [tRunJob_12 main ] start
				 */

				currentComponent = "tRunJob_12";

				java.util.List<String> paraList_tRunJob_12 = new java.util.ArrayList<String>();

				String osName_tRunJob_12 = System.getProperty("os.name");
				if (osName_tRunJob_12 != null && osName_tRunJob_12.toLowerCase().startsWith("win")) {

					paraList_tRunJob_12.add("C:/Program Files/Amazon Corretto/jdk11.0.4_10/bin/java.exe");
					String m2 = System.getProperty("talend.component.manager.m2.repository");
					if (m2 != null) {
						paraList_tRunJob_12.add("-Dtalend.component.manager.m2.repository=" + m2);
					}

					if (enableLogStash) {
						System.getProperties().stringPropertyNames().stream().filter(it -> it.startsWith("audit."))
								.forEach(key -> paraList_tRunJob_12.add("-D" + key + "=" + System.getProperty(key)));
					}

					System.getProperties().stringPropertyNames().stream()
							.filter(it -> it.startsWith("runtime.lineage.") || "classpath.extended".equals(it))
							.forEach(key -> paraList_tRunJob_12.add("-D" + key + "=" + System.getProperty(key)));

					jvm_argument_helper_tRunJob_12.addArgumentsTo(paraList_tRunJob_12, "-Xms256M");

					jvm_argument_helper_tRunJob_12.addArgumentsTo(paraList_tRunJob_12, "-Xmx1024M");

					jvm_argument_helper_tRunJob_12.addArgumentsTo(paraList_tRunJob_12, "-Dfile.encoding=UTF-8");

					jvm_argument_helper_tRunJob_12.addArgumentsTo(paraList_tRunJob_12,
							"-Dtalend.component.manager.m2.repository=G:/TOS_DI-20201015_1726-V7.4.1M3/configuration/.m2/repository");

					jvm_argument_helper_tRunJob_12.addArgumentsTo(paraList_tRunJob_12, "-cp");

					String classpath_tRunJob_12_6 = "G:/GitHub/NewTalend/WIPO_PROJECTS/poms/jobs/process/OMPI/MigCommon/g2a_val_tm_0.1/target/classpath.jar;";

					if (audit_jar_path_tRunJob_12 != null && !audit_jar_path_tRunJob_12.isEmpty()) {
						classpath_tRunJob_12_6 += audit_jar_path_tRunJob_12;
					}

					jvm_argument_helper_tRunJob_12.addArgumentsTo(paraList_tRunJob_12,
							dealChildJobLibrary_tRunJob_12.replaceJarPathsFromCrcMap(classpath_tRunJob_12_6));

					jvm_argument_helper_tRunJob_12.addArgumentsTo(paraList_tRunJob_12,
							"wipo_projects.g2a_val_tm_0_1.G2a_Val_TM");

					jvm_argument_helper_tRunJob_12.addArgumentsTo(paraList_tRunJob_12, "--father_pid=" + pid);

					jvm_argument_helper_tRunJob_12.addArgumentsTo(paraList_tRunJob_12, "--root_pid=" + rootPid);

					jvm_argument_helper_tRunJob_12.addArgumentsTo(paraList_tRunJob_12, "--father_node=tRunJob_12");

					jvm_argument_helper_tRunJob_12.addArgumentsTo(paraList_tRunJob_12, "--context=Default");

					jvm_argument_helper_tRunJob_12.addArgumentsTo(paraList_tRunJob_12, "%*");

				} else {

					paraList_tRunJob_12.add("C:/Program Files/Amazon Corretto/jdk11.0.4_10/bin/java.exe");
					String m2 = System.getProperty("talend.component.manager.m2.repository");
					if (m2 != null) {
						paraList_tRunJob_12.add("-Dtalend.component.manager.m2.repository=" + m2);
					}

					if (enableLogStash) {
						System.getProperties().stringPropertyNames().stream().filter(it -> it.startsWith("audit."))
								.forEach(key -> paraList_tRunJob_12.add("-D" + key + "=" + System.getProperty(key)));
					}

					System.getProperties().stringPropertyNames().stream()
							.filter(it -> it.startsWith("runtime.lineage.") || "classpath.extended".equals(it))
							.forEach(key -> paraList_tRunJob_12.add("-D" + key + "=" + System.getProperty(key)));

					jvm_argument_helper_tRunJob_12.addArgumentsTo(paraList_tRunJob_12, "-Xms256M");

					jvm_argument_helper_tRunJob_12.addArgumentsTo(paraList_tRunJob_12, "-Xmx1024M");

					jvm_argument_helper_tRunJob_12.addArgumentsTo(paraList_tRunJob_12, "-Dfile.encoding=UTF-8");

					jvm_argument_helper_tRunJob_12.addArgumentsTo(paraList_tRunJob_12,
							"-Dtalend.component.manager.m2.repository=G:/TOS_DI-20201015_1726-V7.4.1M3/configuration/.m2/repository");

					jvm_argument_helper_tRunJob_12.addArgumentsTo(paraList_tRunJob_12, "-cp");

					String classpath_tRunJob_12_6 = "G:/GitHub/NewTalend/WIPO_PROJECTS/poms/jobs/process/OMPI/MigCommon/g2a_val_tm_0.1/target/classes:G:/GitHub/NewTalend/WIPO_PROJECTS/poms/jobs/process/OMPI/MigCommon/g2a_val_tm_0.1/src/main/ext-resources:G:/GitHub/NewTalend/WIPO_PROJECTS/poms/code/routines/target/classes:.:G:/TOS_DI-20201015_1726-V7.4.1M3/configuration/.m2/repository/org/apache/logging/log4j/log4j-slf4j-impl/2.12.1/log4j-slf4j-impl-2.12.1.jar:G:/TOS_DI-20201015_1726-V7.4.1M3/configuration/.m2/repository/org/apache/logging/log4j/log4j-api/2.12.1/log4j-api-2.12.1.jar:G:/TOS_DI-20201015_1726-V7.4.1M3/configuration/.m2/repository/org/apache/logging/log4j/log4j-core/2.12.1/log4j-core-2.12.1.jar:G:/TOS_DI-20201015_1726-V7.4.1M3/configuration/.m2/repository/net/sourceforge/jtds/jtds/1.3.1-patch-20190523/jtds-1.3.1-patch-20190523.jar:G:/TOS_DI-20201015_1726-V7.4.1M3/configuration/.m2/repository/org/dom4j/dom4j/2.1.3/dom4j-2.1.3.jar:G:/TOS_DI-20201015_1726-V7.4.1M3/configuration/.m2/repository/org/talend/libraries/imgscalr-lib-4.2/6.0.0-SNAPSHOT/imgscalr-lib-4.2-6.0.0-SNAPSHOT.jar:G:/TOS_DI-20201015_1726-V7.4.1M3/configuration/.m2/repository/org/talend/libraries/crypto-utils/6.0.0-SNAPSHOT/crypto-utils-6.0.0-SNAPSHOT.jar:G:/TOS_DI-20201015_1726-V7.4.1M3/configuration/.m2/repository/org/slf4j/slf4j-api/1.7.25/slf4j-api-1.7.25.jar:";

					if (audit_jar_path_tRunJob_12 != null && !audit_jar_path_tRunJob_12.isEmpty()) {
						classpath_tRunJob_12_6 += audit_jar_path_tRunJob_12;
					}

					jvm_argument_helper_tRunJob_12.addArgumentsTo(paraList_tRunJob_12,
							dealChildJobLibrary_tRunJob_12.replaceJarPathsFromCrcMap(classpath_tRunJob_12_6)
									.replace("$ROOT_PATH", System.getProperty("user.dir")));

					jvm_argument_helper_tRunJob_12.addArgumentsTo(paraList_tRunJob_12,
							"wipo_projects.g2a_val_tm_0_1.G2a_Val_TM");

					jvm_argument_helper_tRunJob_12.addArgumentsTo(paraList_tRunJob_12, "--father_pid=" + pid);

					jvm_argument_helper_tRunJob_12.addArgumentsTo(paraList_tRunJob_12, "--root_pid=" + rootPid);

					jvm_argument_helper_tRunJob_12.addArgumentsTo(paraList_tRunJob_12, "--father_node=tRunJob_12");

					jvm_argument_helper_tRunJob_12.addArgumentsTo(paraList_tRunJob_12, "--context=Default");

					jvm_argument_helper_tRunJob_12.addArgumentsTo(paraList_tRunJob_12, "$@");

				}

				if (enableLogStash) {
					paraList_tRunJob_12.add("--audit.enabled=" + enableLogStash);
				}

				// for feature:10589

				paraList_tRunJob_12.add("--stat_port=" + null);

				if (resuming_logs_dir_path != null) {
					paraList_tRunJob_12.add("--resuming_logs_dir_path=" + resuming_logs_dir_path);
				}
				String childResumePath_tRunJob_12 = ResumeUtil.getChildJobCheckPointPath(resuming_checkpoint_path);
				String tRunJobName_tRunJob_12 = ResumeUtil.getRighttRunJob(resuming_checkpoint_path);
				if ("tRunJob_12".equals(tRunJobName_tRunJob_12) && childResumePath_tRunJob_12 != null) {
					paraList_tRunJob_12.add("--resuming_checkpoint_path="
							+ ResumeUtil.getChildJobCheckPointPath(resuming_checkpoint_path));
				}
				paraList_tRunJob_12.add("--parent_part_launcher=JOB:" + jobName + "/NODE:tRunJob_12");

				java.util.Map<String, Object> parentContextMap_tRunJob_12 = new java.util.HashMap<String, Object>();

				java.util.List<String> paraListForLog_tRunJob_12 = new java.util.ArrayList<String>();
				paraListForLog_tRunJob_12.addAll(paraList_tRunJob_12);
				List<String> parametersToEncrypt_tRunJob_12 = new java.util.ArrayList<String>();

				Object obj_tRunJob_12 = null;

				obj_tRunJob_12 = context.intermediateHost;
				if (obj_tRunJob_12 != null) {
					if (obj_tRunJob_12.getClass().getName().equals("java.util.Date")) {
						paraList_tRunJob_12
								.add("--context_param intermediateHost=" + ((java.util.Date) obj_tRunJob_12).getTime());
					} else {
						paraList_tRunJob_12.add("--context_param intermediateHost="
								+ RuntimeUtils.tRunJobConvertContext(obj_tRunJob_12));
					}
				} else {
					paraList_tRunJob_12.add("--context_param intermediateHost="
							+ NULL_VALUE_EXPRESSION_IN_COMMAND_STRING_FOR_CHILD_JOB_ONLY);
				}

				if (parametersToEncrypt_tRunJob_12.contains("intermediateHost") && obj_tRunJob_12 != null) {
					paraListForLog_tRunJob_12.add(
							"--context_param intermediateHost=" + routines.system.PasswordEncryptUtil.encryptPassword(
									String.valueOf(RuntimeUtils.tRunJobConvertContext(obj_tRunJob_12))));
				} else {
					paraListForLog_tRunJob_12.add(
							"--context_param intermediateHost=" + RuntimeUtils.tRunJobConvertContext(obj_tRunJob_12));
				}

				parentContextMap_tRunJob_12.put("intermediateHost", obj_tRunJob_12);

				obj_tRunJob_12 = context.intermediatePort;
				if (obj_tRunJob_12 != null) {
					if (obj_tRunJob_12.getClass().getName().equals("java.util.Date")) {
						paraList_tRunJob_12
								.add("--context_param intermediatePort=" + ((java.util.Date) obj_tRunJob_12).getTime());
					} else {
						paraList_tRunJob_12.add("--context_param intermediatePort="
								+ RuntimeUtils.tRunJobConvertContext(obj_tRunJob_12));
					}
				} else {
					paraList_tRunJob_12.add("--context_param intermediatePort="
							+ NULL_VALUE_EXPRESSION_IN_COMMAND_STRING_FOR_CHILD_JOB_ONLY);
				}

				if (parametersToEncrypt_tRunJob_12.contains("intermediatePort") && obj_tRunJob_12 != null) {
					paraListForLog_tRunJob_12.add(
							"--context_param intermediatePort=" + routines.system.PasswordEncryptUtil.encryptPassword(
									String.valueOf(RuntimeUtils.tRunJobConvertContext(obj_tRunJob_12))));
				} else {
					paraListForLog_tRunJob_12.add(
							"--context_param intermediatePort=" + RuntimeUtils.tRunJobConvertContext(obj_tRunJob_12));
				}

				parentContextMap_tRunJob_12.put("intermediatePort", obj_tRunJob_12);

				obj_tRunJob_12 = context.intermediateDB;
				if (obj_tRunJob_12 != null) {
					if (obj_tRunJob_12.getClass().getName().equals("java.util.Date")) {
						paraList_tRunJob_12
								.add("--context_param intermediateDB=" + ((java.util.Date) obj_tRunJob_12).getTime());
					} else {
						paraList_tRunJob_12.add(
								"--context_param intermediateDB=" + RuntimeUtils.tRunJobConvertContext(obj_tRunJob_12));
					}
				} else {
					paraList_tRunJob_12.add("--context_param intermediateDB="
							+ NULL_VALUE_EXPRESSION_IN_COMMAND_STRING_FOR_CHILD_JOB_ONLY);
				}

				if (parametersToEncrypt_tRunJob_12.contains("intermediateDB") && obj_tRunJob_12 != null) {
					paraListForLog_tRunJob_12.add(
							"--context_param intermediateDB=" + routines.system.PasswordEncryptUtil.encryptPassword(
									String.valueOf(RuntimeUtils.tRunJobConvertContext(obj_tRunJob_12))));
				} else {
					paraListForLog_tRunJob_12.add(
							"--context_param intermediateDB=" + RuntimeUtils.tRunJobConvertContext(obj_tRunJob_12));
				}

				parentContextMap_tRunJob_12.put("intermediateDB", obj_tRunJob_12);

				obj_tRunJob_12 = context.intermediateUser;
				if (obj_tRunJob_12 != null) {
					if (obj_tRunJob_12.getClass().getName().equals("java.util.Date")) {
						paraList_tRunJob_12
								.add("--context_param intermediateUser=" + ((java.util.Date) obj_tRunJob_12).getTime());
					} else {
						paraList_tRunJob_12.add("--context_param intermediateUser="
								+ RuntimeUtils.tRunJobConvertContext(obj_tRunJob_12));
					}
				} else {
					paraList_tRunJob_12.add("--context_param intermediateUser="
							+ NULL_VALUE_EXPRESSION_IN_COMMAND_STRING_FOR_CHILD_JOB_ONLY);
				}

				if (parametersToEncrypt_tRunJob_12.contains("intermediateUser") && obj_tRunJob_12 != null) {
					paraListForLog_tRunJob_12.add(
							"--context_param intermediateUser=" + routines.system.PasswordEncryptUtil.encryptPassword(
									String.valueOf(RuntimeUtils.tRunJobConvertContext(obj_tRunJob_12))));
				} else {
					paraListForLog_tRunJob_12.add(
							"--context_param intermediateUser=" + RuntimeUtils.tRunJobConvertContext(obj_tRunJob_12));
				}

				parentContextMap_tRunJob_12.put("intermediateUser", obj_tRunJob_12);

				obj_tRunJob_12 = context.intermediatePassword;
				if (obj_tRunJob_12 != null) {
					if (obj_tRunJob_12.getClass().getName().equals("java.util.Date")) {
						paraList_tRunJob_12.add(
								"--context_param intermediatePassword=" + ((java.util.Date) obj_tRunJob_12).getTime());
					} else {
						paraList_tRunJob_12.add("--context_param intermediatePassword="
								+ RuntimeUtils.tRunJobConvertContext(obj_tRunJob_12));
					}
				} else {
					paraList_tRunJob_12.add("--context_param intermediatePassword="
							+ NULL_VALUE_EXPRESSION_IN_COMMAND_STRING_FOR_CHILD_JOB_ONLY);
				}

				if (parametersToEncrypt_tRunJob_12.contains("intermediatePassword") && obj_tRunJob_12 != null) {
					paraListForLog_tRunJob_12.add("--context_param intermediatePassword="
							+ routines.system.PasswordEncryptUtil.encryptPassword(
									String.valueOf(RuntimeUtils.tRunJobConvertContext(obj_tRunJob_12))));
				} else {
					paraListForLog_tRunJob_12.add("--context_param intermediatePassword="
							+ RuntimeUtils.tRunJobConvertContext(obj_tRunJob_12));
				}

				parentContextMap_tRunJob_12.put("intermediatePassword", obj_tRunJob_12);

				obj_tRunJob_12 = context.ipasHost;
				if (obj_tRunJob_12 != null) {
					if (obj_tRunJob_12.getClass().getName().equals("java.util.Date")) {
						paraList_tRunJob_12
								.add("--context_param ipasHost=" + ((java.util.Date) obj_tRunJob_12).getTime());
					} else {
						paraList_tRunJob_12
								.add("--context_param ipasHost=" + RuntimeUtils.tRunJobConvertContext(obj_tRunJob_12));
					}
				} else {
					paraList_tRunJob_12.add(
							"--context_param ipasHost=" + NULL_VALUE_EXPRESSION_IN_COMMAND_STRING_FOR_CHILD_JOB_ONLY);
				}

				if (parametersToEncrypt_tRunJob_12.contains("ipasHost") && obj_tRunJob_12 != null) {
					paraListForLog_tRunJob_12.add("--context_param ipasHost=" + routines.system.PasswordEncryptUtil
							.encryptPassword(String.valueOf(RuntimeUtils.tRunJobConvertContext(obj_tRunJob_12))));
				} else {
					paraListForLog_tRunJob_12
							.add("--context_param ipasHost=" + RuntimeUtils.tRunJobConvertContext(obj_tRunJob_12));
				}

				parentContextMap_tRunJob_12.put("ipasHost", obj_tRunJob_12);

				obj_tRunJob_12 = context.ipasPort;
				if (obj_tRunJob_12 != null) {
					if (obj_tRunJob_12.getClass().getName().equals("java.util.Date")) {
						paraList_tRunJob_12
								.add("--context_param ipasPort=" + ((java.util.Date) obj_tRunJob_12).getTime());
					} else {
						paraList_tRunJob_12
								.add("--context_param ipasPort=" + RuntimeUtils.tRunJobConvertContext(obj_tRunJob_12));
					}
				} else {
					paraList_tRunJob_12.add(
							"--context_param ipasPort=" + NULL_VALUE_EXPRESSION_IN_COMMAND_STRING_FOR_CHILD_JOB_ONLY);
				}

				if (parametersToEncrypt_tRunJob_12.contains("ipasPort") && obj_tRunJob_12 != null) {
					paraListForLog_tRunJob_12.add("--context_param ipasPort=" + routines.system.PasswordEncryptUtil
							.encryptPassword(String.valueOf(RuntimeUtils.tRunJobConvertContext(obj_tRunJob_12))));
				} else {
					paraListForLog_tRunJob_12
							.add("--context_param ipasPort=" + RuntimeUtils.tRunJobConvertContext(obj_tRunJob_12));
				}

				parentContextMap_tRunJob_12.put("ipasPort", obj_tRunJob_12);

				obj_tRunJob_12 = context.ipasDB;
				if (obj_tRunJob_12 != null) {
					if (obj_tRunJob_12.getClass().getName().equals("java.util.Date")) {
						paraList_tRunJob_12
								.add("--context_param ipasDB=" + ((java.util.Date) obj_tRunJob_12).getTime());
					} else {
						paraList_tRunJob_12
								.add("--context_param ipasDB=" + RuntimeUtils.tRunJobConvertContext(obj_tRunJob_12));
					}
				} else {
					paraList_tRunJob_12.add(
							"--context_param ipasDB=" + NULL_VALUE_EXPRESSION_IN_COMMAND_STRING_FOR_CHILD_JOB_ONLY);
				}

				if (parametersToEncrypt_tRunJob_12.contains("ipasDB") && obj_tRunJob_12 != null) {
					paraListForLog_tRunJob_12.add("--context_param ipasDB=" + routines.system.PasswordEncryptUtil
							.encryptPassword(String.valueOf(RuntimeUtils.tRunJobConvertContext(obj_tRunJob_12))));
				} else {
					paraListForLog_tRunJob_12
							.add("--context_param ipasDB=" + RuntimeUtils.tRunJobConvertContext(obj_tRunJob_12));
				}

				parentContextMap_tRunJob_12.put("ipasDB", obj_tRunJob_12);

				obj_tRunJob_12 = context.ipasUser;
				if (obj_tRunJob_12 != null) {
					if (obj_tRunJob_12.getClass().getName().equals("java.util.Date")) {
						paraList_tRunJob_12
								.add("--context_param ipasUser=" + ((java.util.Date) obj_tRunJob_12).getTime());
					} else {
						paraList_tRunJob_12
								.add("--context_param ipasUser=" + RuntimeUtils.tRunJobConvertContext(obj_tRunJob_12));
					}
				} else {
					paraList_tRunJob_12.add(
							"--context_param ipasUser=" + NULL_VALUE_EXPRESSION_IN_COMMAND_STRING_FOR_CHILD_JOB_ONLY);
				}

				if (parametersToEncrypt_tRunJob_12.contains("ipasUser") && obj_tRunJob_12 != null) {
					paraListForLog_tRunJob_12.add("--context_param ipasUser=" + routines.system.PasswordEncryptUtil
							.encryptPassword(String.valueOf(RuntimeUtils.tRunJobConvertContext(obj_tRunJob_12))));
				} else {
					paraListForLog_tRunJob_12
							.add("--context_param ipasUser=" + RuntimeUtils.tRunJobConvertContext(obj_tRunJob_12));
				}

				parentContextMap_tRunJob_12.put("ipasUser", obj_tRunJob_12);

				obj_tRunJob_12 = context.ipasPassword;
				if (obj_tRunJob_12 != null) {
					if (obj_tRunJob_12.getClass().getName().equals("java.util.Date")) {
						paraList_tRunJob_12
								.add("--context_param ipasPassword=" + ((java.util.Date) obj_tRunJob_12).getTime());
					} else {
						paraList_tRunJob_12.add(
								"--context_param ipasPassword=" + RuntimeUtils.tRunJobConvertContext(obj_tRunJob_12));
					}
				} else {
					paraList_tRunJob_12.add("--context_param ipasPassword="
							+ NULL_VALUE_EXPRESSION_IN_COMMAND_STRING_FOR_CHILD_JOB_ONLY);
				}

				if (parametersToEncrypt_tRunJob_12.contains("ipasPassword") && obj_tRunJob_12 != null) {
					paraListForLog_tRunJob_12.add("--context_param ipasPassword=" + routines.system.PasswordEncryptUtil
							.encryptPassword(String.valueOf(RuntimeUtils.tRunJobConvertContext(obj_tRunJob_12))));
				} else {
					paraListForLog_tRunJob_12
							.add("--context_param ipasPassword=" + RuntimeUtils.tRunJobConvertContext(obj_tRunJob_12));
				}

				parentContextMap_tRunJob_12.put("ipasPassword", obj_tRunJob_12);

				obj_tRunJob_12 = context.ipasSaPassword;
				if (obj_tRunJob_12 != null) {
					if (obj_tRunJob_12.getClass().getName().equals("java.util.Date")) {
						paraList_tRunJob_12
								.add("--context_param ipasSaPassword=" + ((java.util.Date) obj_tRunJob_12).getTime());
					} else {
						paraList_tRunJob_12.add(
								"--context_param ipasSaPassword=" + RuntimeUtils.tRunJobConvertContext(obj_tRunJob_12));
					}
				} else {
					paraList_tRunJob_12.add("--context_param ipasSaPassword="
							+ NULL_VALUE_EXPRESSION_IN_COMMAND_STRING_FOR_CHILD_JOB_ONLY);
				}

				if (parametersToEncrypt_tRunJob_12.contains("ipasSaPassword") && obj_tRunJob_12 != null) {
					paraListForLog_tRunJob_12.add(
							"--context_param ipasSaPassword=" + routines.system.PasswordEncryptUtil.encryptPassword(
									String.valueOf(RuntimeUtils.tRunJobConvertContext(obj_tRunJob_12))));
				} else {
					paraListForLog_tRunJob_12.add(
							"--context_param ipasSaPassword=" + RuntimeUtils.tRunJobConvertContext(obj_tRunJob_12));
				}

				parentContextMap_tRunJob_12.put("ipasSaPassword", obj_tRunJob_12);

				obj_tRunJob_12 = true;
				if (obj_tRunJob_12 != null) {
					if (obj_tRunJob_12.getClass().getName().equals("java.util.Date")) {
						paraList_tRunJob_12
								.add("--context_param processAll=" + ((java.util.Date) obj_tRunJob_12).getTime());
					} else {
						paraList_tRunJob_12.add(
								"--context_param processAll=" + RuntimeUtils.tRunJobConvertContext(obj_tRunJob_12));
					}
				} else {
					paraList_tRunJob_12.add(
							"--context_param processAll=" + NULL_VALUE_EXPRESSION_IN_COMMAND_STRING_FOR_CHILD_JOB_ONLY);
				}

				if (parametersToEncrypt_tRunJob_12.contains("processAll") && obj_tRunJob_12 != null) {
					paraListForLog_tRunJob_12.add("--context_param processAll=" + routines.system.PasswordEncryptUtil
							.encryptPassword(String.valueOf(RuntimeUtils.tRunJobConvertContext(obj_tRunJob_12))));
				} else {
					paraListForLog_tRunJob_12
							.add("--context_param processAll=" + RuntimeUtils.tRunJobConvertContext(obj_tRunJob_12));
				}

				parentContextMap_tRunJob_12.put("processAll", obj_tRunJob_12);

				System.out.println(
						"tRunJob_12 in A1_Gen_Marcas call G2a_Val_TM with:\n\n" + paraListForLog_tRunJob_12 + "\n");

				class ConsoleHelper_tRunJob_12 {
					private Thread getNormalThread(Process process) {
						return new Thread() {
							public void run() {
								try {
									java.io.BufferedReader reader = new java.io.BufferedReader(
											new java.io.InputStreamReader(process.getInputStream()));
									String line = "";
									try {
										while ((line = reader.readLine()) != null) {
											System.out.println(line);
										}
									} finally {
										reader.close();
									}
								} catch (java.io.IOException ioe) {

									ioe.printStackTrace();
								}
							}
						};
					}

					private Thread getErrorThread(Process process, StringBuffer sb) {
						return new Thread() {
							public void run() {
								try {
									java.io.BufferedReader reader = new java.io.BufferedReader(
											new java.io.InputStreamReader(process.getErrorStream()));
									String line = "";
									try {
										while ((line = reader.readLine()) != null) {
											sb.append(line).append("\n");
										}
									} finally {
										reader.close();
									}
								} catch (java.io.IOException ioe) {

									ioe.printStackTrace();
								}
							}
						};
					}
				}
				ConsoleHelper_tRunJob_12 consoleHelper_tRunJob_12 = new ConsoleHelper_tRunJob_12();

				Runtime runtime_tRunJob_12 = Runtime.getRuntime();
				Process ps_tRunJob_12 = null;

				// 0 indicates normal termination
				int result_tRunJob_12;
				StringBuffer errorMsg_tRunJob_12 = new StringBuffer();
				try {
					ps_tRunJob_12 = runtime_tRunJob_12
							.exec((String[]) paraList_tRunJob_12.toArray(new String[paraList_tRunJob_12.size()]));

					Thread normal_tRunJob_12 = consoleHelper_tRunJob_12.getNormalThread(ps_tRunJob_12);
					normal_tRunJob_12.start();

					Thread error_tRunJob_12 = consoleHelper_tRunJob_12.getErrorThread(ps_tRunJob_12,
							errorMsg_tRunJob_12);
					error_tRunJob_12.start();

					result_tRunJob_12 = ps_tRunJob_12.waitFor();
					normal_tRunJob_12.join();
					error_tRunJob_12.join();
				} catch (ThreadDeath tde) {
					ps_tRunJob_12.destroy();
					throw tde;
				}

				globalMap.put("tRunJob_12_CHILD_RETURN_CODE", result_tRunJob_12);
				if (result_tRunJob_12 != 0) {
					globalMap.put("tRunJob_12_CHILD_EXCEPTION_STACKTRACE", errorMsg_tRunJob_12.toString());

					throw new RuntimeException("Child job returns " + result_tRunJob_12
							+ ". It doesn't terminate normally.\n" + errorMsg_tRunJob_12.toString());

				}

				tos_count_tRunJob_12++;

				/**
				 * [tRunJob_12 main ] stop
				 */

				/**
				 * [tRunJob_12 process_data_begin ] start
				 */

				currentComponent = "tRunJob_12";

				/**
				 * [tRunJob_12 process_data_begin ] stop
				 */

				/**
				 * [tRunJob_12 process_data_end ] start
				 */

				currentComponent = "tRunJob_12";

				/**
				 * [tRunJob_12 process_data_end ] stop
				 */

				/**
				 * [tRunJob_12 end ] start
				 */

				currentComponent = "tRunJob_12";

				ok_Hash.put("tRunJob_12", true);
				end_Hash.put("tRunJob_12", System.currentTimeMillis());

				tStatCatcher_1.addMessage("end", "tRunJob_12",
						end_Hash.get("tRunJob_12") - start_Hash.get("tRunJob_12"));
				tStatCatcher_1Process(globalMap);

				/**
				 * [tRunJob_12 end ] stop
				 */
			} // end the resume

		} catch (java.lang.Exception e) {

			TalendException te = new TalendException(e, currentComponent, globalMap);

			throw te;
		} catch (java.lang.Error error) {

			runStat.stopThreadStat();

			throw error;
		} finally {

			try {

				/**
				 * [tRunJob_12 finally ] start
				 */

				currentComponent = "tRunJob_12";

				/**
				 * [tRunJob_12 finally ] stop
				 */
			} catch (java.lang.Exception e) {
				// ignore
			} catch (java.lang.Error error) {
				// ignore
			}
			resourceMap = null;
		}

		globalMap.put("tRunJob_12_SUBPROCESS_STATE", 1);
	}

	public static class row2Struct implements routines.system.IPersistableRow<row2Struct> {
		final static byte[] commonByteArrayLock_WIPO_PROJECTS_A1_Gen_Marcas = new byte[0];
		static byte[] commonByteArray_WIPO_PROJECTS_A1_Gen_Marcas = new byte[0];

		public java.util.Date moment;

		public java.util.Date getMoment() {
			return this.moment;
		}

		public String pid;

		public String getPid() {
			return this.pid;
		}

		public String father_pid;

		public String getFather_pid() {
			return this.father_pid;
		}

		public String root_pid;

		public String getRoot_pid() {
			return this.root_pid;
		}

		public Long system_pid;

		public Long getSystem_pid() {
			return this.system_pid;
		}

		public String project;

		public String getProject() {
			return this.project;
		}

		public String job;

		public String getJob() {
			return this.job;
		}

		public String job_repository_id;

		public String getJob_repository_id() {
			return this.job_repository_id;
		}

		public String job_version;

		public String getJob_version() {
			return this.job_version;
		}

		public String context;

		public String getContext() {
			return this.context;
		}

		public String origin;

		public String getOrigin() {
			return this.origin;
		}

		public String message_type;

		public String getMessage_type() {
			return this.message_type;
		}

		public String message;

		public String getMessage() {
			return this.message;
		}

		public Long duration;

		public Long getDuration() {
			return this.duration;
		}

		private java.util.Date readDate(ObjectInputStream dis) throws IOException {
			java.util.Date dateReturn = null;
			int length = 0;
			length = dis.readByte();
			if (length == -1) {
				dateReturn = null;
			} else {
				dateReturn = new Date(dis.readLong());
			}
			return dateReturn;
		}

		private void writeDate(java.util.Date date1, ObjectOutputStream dos) throws IOException {
			if (date1 == null) {
				dos.writeByte(-1);
			} else {
				dos.writeByte(0);
				dos.writeLong(date1.getTime());
			}
		}

		private String readString(ObjectInputStream dis) throws IOException {
			String strReturn = null;
			int length = 0;
			length = dis.readInt();
			if (length == -1) {
				strReturn = null;
			} else {
				if (length > commonByteArray_WIPO_PROJECTS_A1_Gen_Marcas.length) {
					if (length < 1024 && commonByteArray_WIPO_PROJECTS_A1_Gen_Marcas.length == 0) {
						commonByteArray_WIPO_PROJECTS_A1_Gen_Marcas = new byte[1024];
					} else {
						commonByteArray_WIPO_PROJECTS_A1_Gen_Marcas = new byte[2 * length];
					}
				}
				dis.readFully(commonByteArray_WIPO_PROJECTS_A1_Gen_Marcas, 0, length);
				strReturn = new String(commonByteArray_WIPO_PROJECTS_A1_Gen_Marcas, 0, length, utf8Charset);
			}
			return strReturn;
		}

		private void writeString(String str, ObjectOutputStream dos) throws IOException {
			if (str == null) {
				dos.writeInt(-1);
			} else {
				byte[] byteArray = str.getBytes(utf8Charset);
				dos.writeInt(byteArray.length);
				dos.write(byteArray);
			}
		}

		public void readData(ObjectInputStream dis) {

			synchronized (commonByteArrayLock_WIPO_PROJECTS_A1_Gen_Marcas) {

				try {

					int length = 0;

					this.moment = readDate(dis);

					this.pid = readString(dis);

					this.father_pid = readString(dis);

					this.root_pid = readString(dis);

					length = dis.readByte();
					if (length == -1) {
						this.system_pid = null;
					} else {
						this.system_pid = dis.readLong();
					}

					this.project = readString(dis);

					this.job = readString(dis);

					this.job_repository_id = readString(dis);

					this.job_version = readString(dis);

					this.context = readString(dis);

					this.origin = readString(dis);

					this.message_type = readString(dis);

					this.message = readString(dis);

					length = dis.readByte();
					if (length == -1) {
						this.duration = null;
					} else {
						this.duration = dis.readLong();
					}

				} catch (IOException e) {
					throw new RuntimeException(e);

				}

			}

		}

		public void writeData(ObjectOutputStream dos) {
			try {

				// java.util.Date

				writeDate(this.moment, dos);

				// String

				writeString(this.pid, dos);

				// String

				writeString(this.father_pid, dos);

				// String

				writeString(this.root_pid, dos);

				// Long

				if (this.system_pid == null) {
					dos.writeByte(-1);
				} else {
					dos.writeByte(0);
					dos.writeLong(this.system_pid);
				}

				// String

				writeString(this.project, dos);

				// String

				writeString(this.job, dos);

				// String

				writeString(this.job_repository_id, dos);

				// String

				writeString(this.job_version, dos);

				// String

				writeString(this.context, dos);

				// String

				writeString(this.origin, dos);

				// String

				writeString(this.message_type, dos);

				// String

				writeString(this.message, dos);

				// Long

				if (this.duration == null) {
					dos.writeByte(-1);
				} else {
					dos.writeByte(0);
					dos.writeLong(this.duration);
				}

			} catch (IOException e) {
				throw new RuntimeException(e);
			}

		}

		public String toString() {

			StringBuilder sb = new StringBuilder();
			sb.append(super.toString());
			sb.append("[");
			sb.append("moment=" + String.valueOf(moment));
			sb.append(",pid=" + pid);
			sb.append(",father_pid=" + father_pid);
			sb.append(",root_pid=" + root_pid);
			sb.append(",system_pid=" + String.valueOf(system_pid));
			sb.append(",project=" + project);
			sb.append(",job=" + job);
			sb.append(",job_repository_id=" + job_repository_id);
			sb.append(",job_version=" + job_version);
			sb.append(",context=" + context);
			sb.append(",origin=" + origin);
			sb.append(",message_type=" + message_type);
			sb.append(",message=" + message);
			sb.append(",duration=" + String.valueOf(duration));
			sb.append("]");

			return sb.toString();
		}

		/**
		 * Compare keys
		 */
		public int compareTo(row2Struct other) {

			int returnValue = -1;

			return returnValue;
		}

		private int checkNullsAndCompare(Object object1, Object object2) {
			int returnValue = 0;
			if (object1 instanceof Comparable && object2 instanceof Comparable) {
				returnValue = ((Comparable) object1).compareTo(object2);
			} else if (object1 != null && object2 != null) {
				returnValue = compareStrings(object1.toString(), object2.toString());
			} else if (object1 == null && object2 != null) {
				returnValue = 1;
			} else if (object1 != null && object2 == null) {
				returnValue = -1;
			} else {
				returnValue = 0;
			}

			return returnValue;
		}

		private int compareStrings(String string1, String string2) {
			return string1.compareTo(string2);
		}

	}

	public void tStatCatcher_1Process(final java.util.Map<String, Object> globalMap) throws TalendException {
		globalMap.put("tStatCatcher_1_SUBPROCESS_STATE", 0);

		final boolean execStat = this.execStat;

		String iterateId = "";

		String currentComponent = "";
		java.util.Map<String, Object> resourceMap = new java.util.HashMap<String, Object>();

		try {
			// TDI-39566 avoid throwing an useless Exception
			boolean resumeIt = true;
			if (globalResumeTicket == false && resumeEntryMethodName != null) {
				String currentMethodName = new java.lang.Exception().getStackTrace()[0].getMethodName();
				resumeIt = resumeEntryMethodName.equals(currentMethodName);
			}
			if (resumeIt || globalResumeTicket) { // start the resume
				globalResumeTicket = true;

				row2Struct row2 = new row2Struct();

				/**
				 * [tLogRow_1 begin ] start
				 */

				ok_Hash.put("tLogRow_1", false);
				start_Hash.put("tLogRow_1", System.currentTimeMillis());

				currentComponent = "tLogRow_1";

				if (execStat) {
					runStat.updateStatOnConnection(resourceMap, iterateId, 0, 0, "row2");
				}

				int tos_count_tLogRow_1 = 0;

				///////////////////////

				final String OUTPUT_FIELD_SEPARATOR_tLogRow_1 = "|";
				java.io.PrintStream consoleOut_tLogRow_1 = null;

				StringBuilder strBuffer_tLogRow_1 = null;
				int nb_line_tLogRow_1 = 0;
///////////////////////    			

				/**
				 * [tLogRow_1 begin ] stop
				 */

				/**
				 * [tStatCatcher_1 begin ] start
				 */

				ok_Hash.put("tStatCatcher_1", false);
				start_Hash.put("tStatCatcher_1", System.currentTimeMillis());

				currentComponent = "tStatCatcher_1";

				int tos_count_tStatCatcher_1 = 0;

				for (StatCatcherUtils.StatCatcherMessage scm : tStatCatcher_1.getMessages()) {
					row2.pid = pid;
					row2.root_pid = rootPid;
					row2.father_pid = fatherPid;
					row2.project = projectName;
					row2.job = jobName;
					row2.context = contextStr;
					row2.origin = (scm.getOrigin() == null || scm.getOrigin().length() < 1 ? null : scm.getOrigin());
					row2.message = scm.getMessage();
					row2.duration = scm.getDuration();
					row2.moment = scm.getMoment();
					row2.message_type = scm.getMessageType();
					row2.job_version = scm.getJobVersion();
					row2.job_repository_id = scm.getJobId();
					row2.system_pid = scm.getSystemPid();

					/**
					 * [tStatCatcher_1 begin ] stop
					 */

					/**
					 * [tStatCatcher_1 main ] start
					 */

					currentComponent = "tStatCatcher_1";

					tos_count_tStatCatcher_1++;

					/**
					 * [tStatCatcher_1 main ] stop
					 */

					/**
					 * [tStatCatcher_1 process_data_begin ] start
					 */

					currentComponent = "tStatCatcher_1";

					/**
					 * [tStatCatcher_1 process_data_begin ] stop
					 */

					/**
					 * [tLogRow_1 main ] start
					 */

					currentComponent = "tLogRow_1";

					if (execStat) {
						runStat.updateStatOnConnection(iterateId, 1, 1

								, "row2"

						);
					}

///////////////////////		

					strBuffer_tLogRow_1 = new StringBuilder();

					if (row2.moment != null) { //

						strBuffer_tLogRow_1.append(FormatterUtils.format_Date(row2.moment, "yyyy-MM-dd HH:mm:ss"));

					} //

					strBuffer_tLogRow_1.append("|");

					if (row2.job != null) { //

						strBuffer_tLogRow_1.append(String.valueOf(row2.job));

					} //

					strBuffer_tLogRow_1.append("|");

					if (row2.origin != null) { //

						strBuffer_tLogRow_1.append(String.valueOf(row2.origin));

					} //

					strBuffer_tLogRow_1.append("|");

					if (row2.message_type != null) { //

						strBuffer_tLogRow_1.append(String.valueOf(row2.message_type));

					} //

					strBuffer_tLogRow_1.append("|");

					if (row2.message != null) { //

						strBuffer_tLogRow_1.append(String.valueOf(row2.message));

					} //

					strBuffer_tLogRow_1.append("|");

					if (row2.duration != null) { //

						strBuffer_tLogRow_1.append(String.valueOf(row2.duration));

					} //

					if (globalMap.get("tLogRow_CONSOLE") != null) {
						consoleOut_tLogRow_1 = (java.io.PrintStream) globalMap.get("tLogRow_CONSOLE");
					} else {
						consoleOut_tLogRow_1 = new java.io.PrintStream(new java.io.BufferedOutputStream(System.out));
						globalMap.put("tLogRow_CONSOLE", consoleOut_tLogRow_1);
					}
					consoleOut_tLogRow_1.println(strBuffer_tLogRow_1.toString());
					consoleOut_tLogRow_1.flush();
					nb_line_tLogRow_1++;
//////

//////                    

///////////////////////    			

					tos_count_tLogRow_1++;

					/**
					 * [tLogRow_1 main ] stop
					 */

					/**
					 * [tLogRow_1 process_data_begin ] start
					 */

					currentComponent = "tLogRow_1";

					/**
					 * [tLogRow_1 process_data_begin ] stop
					 */

					/**
					 * [tLogRow_1 process_data_end ] start
					 */

					currentComponent = "tLogRow_1";

					/**
					 * [tLogRow_1 process_data_end ] stop
					 */

					/**
					 * [tStatCatcher_1 process_data_end ] start
					 */

					currentComponent = "tStatCatcher_1";

					/**
					 * [tStatCatcher_1 process_data_end ] stop
					 */

					/**
					 * [tStatCatcher_1 end ] start
					 */

					currentComponent = "tStatCatcher_1";

				}

				ok_Hash.put("tStatCatcher_1", true);
				end_Hash.put("tStatCatcher_1", System.currentTimeMillis());

				/**
				 * [tStatCatcher_1 end ] stop
				 */

				/**
				 * [tLogRow_1 end ] start
				 */

				currentComponent = "tLogRow_1";

//////
//////
				globalMap.put("tLogRow_1_NB_LINE", nb_line_tLogRow_1);

///////////////////////    			

				if (execStat) {
					runStat.updateStat(resourceMap, iterateId, 2, 0, "row2");
				}

				ok_Hash.put("tLogRow_1", true);
				end_Hash.put("tLogRow_1", System.currentTimeMillis());

				/**
				 * [tLogRow_1 end ] stop
				 */

			} // end the resume

		} catch (java.lang.Exception e) {

			TalendException te = new TalendException(e, currentComponent, globalMap);

			throw te;
		} catch (java.lang.Error error) {

			runStat.stopThreadStat();

			throw error;
		} finally {

			try {

				/**
				 * [tStatCatcher_1 finally ] start
				 */

				currentComponent = "tStatCatcher_1";

				/**
				 * [tStatCatcher_1 finally ] stop
				 */

				/**
				 * [tLogRow_1 finally ] start
				 */

				currentComponent = "tLogRow_1";

				/**
				 * [tLogRow_1 finally ] stop
				 */

			} catch (java.lang.Exception e) {
				// ignore
			} catch (java.lang.Error error) {
				// ignore
			}
			resourceMap = null;
		}

		globalMap.put("tStatCatcher_1_SUBPROCESS_STATE", 1);
	}

	public String resuming_logs_dir_path = null;
	public String resuming_checkpoint_path = null;
	public String parent_part_launcher = null;
	private String resumeEntryMethodName = null;
	private boolean globalResumeTicket = false;

	public boolean watch = false;
	// portStats is null, it means don't execute the statistics
	public Integer portStats = null;
	public int portTraces = 4334;
	public String clientHost;
	public String defaultClientHost = "localhost";
	public String contextStr = "Default";
	public boolean isDefaultContext = true;
	public String pid = "0";
	public String rootPid = null;
	public String fatherPid = null;
	public String fatherNode = null;
	public long startTime = 0;
	public boolean isChildJob = false;
	public String log4jLevel = "";

	private boolean enableLogStash;

	private boolean execStat = true;

	private ThreadLocal<java.util.Map<String, String>> threadLocal = new ThreadLocal<java.util.Map<String, String>>() {
		protected java.util.Map<String, String> initialValue() {
			java.util.Map<String, String> threadRunResultMap = new java.util.HashMap<String, String>();
			threadRunResultMap.put("errorCode", null);
			threadRunResultMap.put("status", "");
			return threadRunResultMap;
		};
	};

	protected PropertiesWithType context_param = new PropertiesWithType();
	public java.util.Map<String, Object> parentContextMap = new java.util.HashMap<String, Object>();

	public String status = "";

	public static void main(String[] args) {
		final A1_Gen_Marcas A1_Gen_MarcasClass = new A1_Gen_Marcas();

		int exitCode = A1_Gen_MarcasClass.runJobInTOS(args);

		System.exit(exitCode);
	}

	public String[][] runJob(String[] args) {

		int exitCode = runJobInTOS(args);
		String[][] bufferValue = new String[][] { { Integer.toString(exitCode) } };

		return bufferValue;
	}

	public boolean hastBufferOutputComponent() {
		boolean hastBufferOutput = false;

		return hastBufferOutput;
	}

	public int runJobInTOS(String[] args) {
		// reset status
		status = "";

		String lastStr = "";
		for (String arg : args) {
			if (arg.equalsIgnoreCase("--context_param")) {
				lastStr = arg;
			} else if (lastStr.equals("")) {
				evalParam(arg);
			} else {
				evalParam(lastStr + " " + arg);
				lastStr = "";
			}
		}
		enableLogStash = "true".equalsIgnoreCase(System.getProperty("audit.enabled"));

		if (clientHost == null) {
			clientHost = defaultClientHost;
		}

		if (pid == null || "0".equals(pid)) {
			pid = TalendString.getAsciiRandomString(6);
		}

		if (rootPid == null) {
			rootPid = pid;
		}
		if (fatherPid == null) {
			fatherPid = pid;
		} else {
			isChildJob = true;
		}

		if (portStats != null) {
			// portStats = -1; //for testing
			if (portStats < 0 || portStats > 65535) {
				// issue:10869, the portStats is invalid, so this client socket can't open
				System.err.println("The statistics socket port " + portStats + " is invalid.");
				execStat = false;
			}
		} else {
			execStat = false;
		}

		try {
			// call job/subjob with an existing context, like: --context=production. if
			// without this parameter, there will use the default context instead.
			java.io.InputStream inContext = A1_Gen_Marcas.class.getClassLoader()
					.getResourceAsStream("wipo_projects/a1_gen_marcas_0_1/contexts/" + contextStr + ".properties");
			if (inContext == null) {
				inContext = A1_Gen_Marcas.class.getClassLoader()
						.getResourceAsStream("config/contexts/" + contextStr + ".properties");
			}
			if (inContext != null) {
				// defaultProps is in order to keep the original context value
				if (context != null && context.isEmpty()) {
					defaultProps.load(inContext);
					context = new ContextProperties(defaultProps);
				}

				inContext.close();
			} else if (!isDefaultContext) {
				// print info and job continue to run, for case: context_param is not empty.
				System.err.println("Could not find the context " + contextStr);
			}

			if (!context_param.isEmpty()) {
				context.putAll(context_param);
				// set types for params from parentJobs
				for (Object key : context_param.keySet()) {
					String context_key = key.toString();
					String context_type = context_param.getContextType(context_key);
					context.setContextType(context_key, context_type);

				}
			}
			class ContextProcessing {
				private void processContext_0() {
					context.setContextType("intermediateType", "id_String");
					if (context.getStringValue("intermediateType") == null) {
						context.intermediateType = null;
					} else {
						context.intermediateType = (String) context.getProperty("intermediateType");
					}
					context.setContextType("intermediateHost", "id_String");
					if (context.getStringValue("intermediateHost") == null) {
						context.intermediateHost = null;
					} else {
						context.intermediateHost = (String) context.getProperty("intermediateHost");
					}
					context.setContextType("intermediatePort", "id_String");
					if (context.getStringValue("intermediatePort") == null) {
						context.intermediatePort = null;
					} else {
						context.intermediatePort = (String) context.getProperty("intermediatePort");
					}
					context.setContextType("intermediateUser", "id_String");
					if (context.getStringValue("intermediateUser") == null) {
						context.intermediateUser = null;
					} else {
						context.intermediateUser = (String) context.getProperty("intermediateUser");
					}
					context.setContextType("intermediatePassword", "id_String");
					if (context.getStringValue("intermediatePassword") == null) {
						context.intermediatePassword = null;
					} else {
						context.intermediatePassword = (String) context.getProperty("intermediatePassword");
					}
					context.setContextType("intermediateDB", "id_String");
					if (context.getStringValue("intermediateDB") == null) {
						context.intermediateDB = null;
					} else {
						context.intermediateDB = (String) context.getProperty("intermediateDB");
					}
					context.setContextType("intermediatePath", "id_String");
					if (context.getStringValue("intermediatePath") == null) {
						context.intermediatePath = null;
					} else {
						context.intermediatePath = (String) context.getProperty("intermediatePath");
					}
					context.setContextType("fileNameIntermed", "id_String");
					if (context.getStringValue("fileNameIntermed") == null) {
						context.fileNameIntermed = null;
					} else {
						context.fileNameIntermed = (String) context.getProperty("fileNameIntermed");
					}
					context.setContextType("logNameIntermed", "id_String");
					if (context.getStringValue("logNameIntermed") == null) {
						context.logNameIntermed = null;
					} else {
						context.logNameIntermed = (String) context.getProperty("logNameIntermed");
					}
					context.setContextType("logsFold", "id_String");
					if (context.getStringValue("logsFold") == null) {
						context.logsFold = null;
					} else {
						context.logsFold = (String) context.getProperty("logsFold");
					}
					context.setContextType("ipasHost", "id_String");
					if (context.getStringValue("ipasHost") == null) {
						context.ipasHost = null;
					} else {
						context.ipasHost = (String) context.getProperty("ipasHost");
					}
					context.setContextType("ipasPort", "id_String");
					if (context.getStringValue("ipasPort") == null) {
						context.ipasPort = null;
					} else {
						context.ipasPort = (String) context.getProperty("ipasPort");
					}
					context.setContextType("ipasDB", "id_String");
					if (context.getStringValue("ipasDB") == null) {
						context.ipasDB = null;
					} else {
						context.ipasDB = (String) context.getProperty("ipasDB");
					}
					context.setContextType("ipasUser", "id_String");
					if (context.getStringValue("ipasUser") == null) {
						context.ipasUser = null;
					} else {
						context.ipasUser = (String) context.getProperty("ipasUser");
					}
					context.setContextType("ipasPassword", "id_String");
					if (context.getStringValue("ipasPassword") == null) {
						context.ipasPassword = null;
					} else {
						context.ipasPassword = (String) context.getProperty("ipasPassword");
					}
					context.setContextType("ipasSaPassword", "id_String");
					if (context.getStringValue("ipasSaPassword") == null) {
						context.ipasSaPassword = null;
					} else {
						context.ipasSaPassword = (String) context.getProperty("ipasSaPassword");
					}
					context.setContextType("dumpIpasCero", "id_String");
					if (context.getStringValue("dumpIpasCero") == null) {
						context.dumpIpasCero = null;
					} else {
						context.dumpIpasCero = (String) context.getProperty("dumpIpasCero");
					}
					context.setContextType("utilityFolder", "id_String");
					if (context.getStringValue("utilityFolder") == null) {
						context.utilityFolder = null;
					} else {
						context.utilityFolder = (String) context.getProperty("utilityFolder");
					}
					context.setContextType("logosRootFolder", "id_String");
					if (context.getStringValue("logosRootFolder") == null) {
						context.logosRootFolder = null;
					} else {
						context.logosRootFolder = (String) context.getProperty("logosRootFolder");
					}
					context.setContextType("postgreUser", "id_String");
					if (context.getStringValue("postgreUser") == null) {
						context.postgreUser = null;
					} else {
						context.postgreUser = (String) context.getProperty("postgreUser");
					}
					context.setContextType("postgrePassword", "id_String");
					if (context.getStringValue("postgrePassword") == null) {
						context.postgrePassword = null;
					} else {
						context.postgrePassword = (String) context.getProperty("postgrePassword");
					}
					context.setContextType("postgreDb", "id_String");
					if (context.getStringValue("postgreDb") == null) {
						context.postgreDb = null;
					} else {
						context.postgreDb = (String) context.getProperty("postgreDb");
					}
					context.setContextType("sid", "id_String");
					if (context.getStringValue("sid") == null) {
						context.sid = null;
					} else {
						context.sid = (String) context.getProperty("sid");
					}
					context.setContextType("mssqlserverInstance", "id_String");
					if (context.getStringValue("mssqlserverInstance") == null) {
						context.mssqlserverInstance = null;
					} else {
						context.mssqlserverInstance = (String) context.getProperty("mssqlserverInstance");
					}
					context.setContextType("databaseType", "id_String");
					if (context.getStringValue("databaseType") == null) {
						context.databaseType = null;
					} else {
						context.databaseType = (String) context.getProperty("databaseType");
					}
				}

				public void processAllContext() {
					processContext_0();
				}
			}

			new ContextProcessing().processAllContext();
		} catch (java.io.IOException ie) {
			System.err.println("Could not load context " + contextStr);
			ie.printStackTrace();
		}

		// get context value from parent directly
		if (parentContextMap != null && !parentContextMap.isEmpty()) {
			if (parentContextMap.containsKey("intermediateType")) {
				context.intermediateType = (String) parentContextMap.get("intermediateType");
			}
			if (parentContextMap.containsKey("intermediateHost")) {
				context.intermediateHost = (String) parentContextMap.get("intermediateHost");
			}
			if (parentContextMap.containsKey("intermediatePort")) {
				context.intermediatePort = (String) parentContextMap.get("intermediatePort");
			}
			if (parentContextMap.containsKey("intermediateUser")) {
				context.intermediateUser = (String) parentContextMap.get("intermediateUser");
			}
			if (parentContextMap.containsKey("intermediatePassword")) {
				context.intermediatePassword = (String) parentContextMap.get("intermediatePassword");
			}
			if (parentContextMap.containsKey("intermediateDB")) {
				context.intermediateDB = (String) parentContextMap.get("intermediateDB");
			}
			if (parentContextMap.containsKey("intermediatePath")) {
				context.intermediatePath = (String) parentContextMap.get("intermediatePath");
			}
			if (parentContextMap.containsKey("fileNameIntermed")) {
				context.fileNameIntermed = (String) parentContextMap.get("fileNameIntermed");
			}
			if (parentContextMap.containsKey("logNameIntermed")) {
				context.logNameIntermed = (String) parentContextMap.get("logNameIntermed");
			}
			if (parentContextMap.containsKey("logsFold")) {
				context.logsFold = (String) parentContextMap.get("logsFold");
			}
			if (parentContextMap.containsKey("ipasHost")) {
				context.ipasHost = (String) parentContextMap.get("ipasHost");
			}
			if (parentContextMap.containsKey("ipasPort")) {
				context.ipasPort = (String) parentContextMap.get("ipasPort");
			}
			if (parentContextMap.containsKey("ipasDB")) {
				context.ipasDB = (String) parentContextMap.get("ipasDB");
			}
			if (parentContextMap.containsKey("ipasUser")) {
				context.ipasUser = (String) parentContextMap.get("ipasUser");
			}
			if (parentContextMap.containsKey("ipasPassword")) {
				context.ipasPassword = (String) parentContextMap.get("ipasPassword");
			}
			if (parentContextMap.containsKey("ipasSaPassword")) {
				context.ipasSaPassword = (String) parentContextMap.get("ipasSaPassword");
			}
			if (parentContextMap.containsKey("dumpIpasCero")) {
				context.dumpIpasCero = (String) parentContextMap.get("dumpIpasCero");
			}
			if (parentContextMap.containsKey("utilityFolder")) {
				context.utilityFolder = (String) parentContextMap.get("utilityFolder");
			}
			if (parentContextMap.containsKey("logosRootFolder")) {
				context.logosRootFolder = (String) parentContextMap.get("logosRootFolder");
			}
			if (parentContextMap.containsKey("postgreUser")) {
				context.postgreUser = (String) parentContextMap.get("postgreUser");
			}
			if (parentContextMap.containsKey("postgrePassword")) {
				context.postgrePassword = (String) parentContextMap.get("postgrePassword");
			}
			if (parentContextMap.containsKey("postgreDb")) {
				context.postgreDb = (String) parentContextMap.get("postgreDb");
			}
			if (parentContextMap.containsKey("sid")) {
				context.sid = (String) parentContextMap.get("sid");
			}
			if (parentContextMap.containsKey("mssqlserverInstance")) {
				context.mssqlserverInstance = (String) parentContextMap.get("mssqlserverInstance");
			}
			if (parentContextMap.containsKey("databaseType")) {
				context.databaseType = (String) parentContextMap.get("databaseType");
			}
		}

		// Resume: init the resumeUtil
		resumeEntryMethodName = ResumeUtil.getResumeEntryMethodName(resuming_checkpoint_path);
		resumeUtil = new ResumeUtil(resuming_logs_dir_path, isChildJob, rootPid);
		resumeUtil.initCommonInfo(pid, rootPid, fatherPid, projectName, jobName, contextStr, jobVersion);

		List<String> parametersToEncrypt = new java.util.ArrayList<String>();
		// Resume: jobStart
		resumeUtil.addLog("JOB_STARTED", "JOB:" + jobName, parent_part_launcher, Thread.currentThread().getId() + "",
				"", "", "", "", resumeUtil.convertToJsonText(context, parametersToEncrypt));

		if (execStat) {
			try {
				runStat.openSocket(!isChildJob);
				runStat.setAllPID(rootPid, fatherPid, pid, jobName);
				runStat.startThreadStat(clientHost, portStats);
				runStat.updateStatOnJob(RunStat.JOBSTART, fatherNode);
			} catch (java.io.IOException ioException) {
				ioException.printStackTrace();
			}
		}

		java.util.concurrent.ConcurrentHashMap<Object, Object> concurrentHashMap = new java.util.concurrent.ConcurrentHashMap<Object, Object>();
		globalMap.put("concurrentHashMap", concurrentHashMap);

		long startUsedMemory = Runtime.getRuntime().totalMemory() - Runtime.getRuntime().freeMemory();
		long endUsedMemory = 0;
		long end = 0;

		startTime = System.currentTimeMillis();
		tStatCatcher_1.addMessage("begin");

		this.globalResumeTicket = true;// to run tPreJob

		try {
			tStatCatcher_1Process(globalMap);
		} catch (java.lang.Exception e) {
			e.printStackTrace();
		}

		this.globalResumeTicket = false;// to run others jobs

		try {
			errorCode = null;
			tRunJob_9Process(globalMap);
			if (!"failure".equals(status)) {
				status = "end";
			}
		} catch (TalendException e_tRunJob_9) {
			globalMap.put("tRunJob_9_SUBPROCESS_STATE", -1);

			e_tRunJob_9.printStackTrace();

		}

		this.globalResumeTicket = true;// to run tPostJob

		end = System.currentTimeMillis();

		if (watch) {
			System.out.println((end - startTime) + " milliseconds");
		}

		endUsedMemory = Runtime.getRuntime().totalMemory() - Runtime.getRuntime().freeMemory();
		if (false) {
			System.out
					.println((endUsedMemory - startUsedMemory) + " bytes memory increase when running : A1_Gen_Marcas");
		}
		tStatCatcher_1.addMessage(status == "" ? "end" : status, (end - startTime));
		try {
			tStatCatcher_1Process(globalMap);
		} catch (java.lang.Exception e) {
			e.printStackTrace();
		}

		if (execStat) {
			runStat.updateStatOnJob(RunStat.JOBEND, fatherNode);
			runStat.stopThreadStat();
		}
		int returnCode = 0;

		if (errorCode == null) {
			returnCode = status != null && status.equals("failure") ? 1 : 0;
		} else {
			returnCode = errorCode.intValue();
		}
		resumeUtil.addLog("JOB_ENDED", "JOB:" + jobName, parent_part_launcher, Thread.currentThread().getId() + "", "",
				"" + returnCode, "", "", "");

		return returnCode;

	}

	// only for OSGi env
	public void destroy() {

	}

	private java.util.Map<String, Object> getSharedConnections4REST() {
		java.util.Map<String, Object> connections = new java.util.HashMap<String, Object>();

		return connections;
	}

	private void evalParam(String arg) {
		if (arg.startsWith("--resuming_logs_dir_path")) {
			resuming_logs_dir_path = arg.substring(25);
		} else if (arg.startsWith("--resuming_checkpoint_path")) {
			resuming_checkpoint_path = arg.substring(27);
		} else if (arg.startsWith("--parent_part_launcher")) {
			parent_part_launcher = arg.substring(23);
		} else if (arg.startsWith("--watch")) {
			watch = true;
		} else if (arg.startsWith("--stat_port=")) {
			String portStatsStr = arg.substring(12);
			if (portStatsStr != null && !portStatsStr.equals("null")) {
				portStats = Integer.parseInt(portStatsStr);
			}
		} else if (arg.startsWith("--trace_port=")) {
			portTraces = Integer.parseInt(arg.substring(13));
		} else if (arg.startsWith("--client_host=")) {
			clientHost = arg.substring(14);
		} else if (arg.startsWith("--context=")) {
			contextStr = arg.substring(10);
			isDefaultContext = false;
		} else if (arg.startsWith("--father_pid=")) {
			fatherPid = arg.substring(13);
		} else if (arg.startsWith("--root_pid=")) {
			rootPid = arg.substring(11);
		} else if (arg.startsWith("--father_node=")) {
			fatherNode = arg.substring(14);
		} else if (arg.startsWith("--pid=")) {
			pid = arg.substring(6);
		} else if (arg.startsWith("--context_type")) {
			String keyValue = arg.substring(15);
			int index = -1;
			if (keyValue != null && (index = keyValue.indexOf('=')) > -1) {
				if (fatherPid == null) {
					context_param.setContextType(keyValue.substring(0, index),
							replaceEscapeChars(keyValue.substring(index + 1)));
				} else { // the subjob won't escape the especial chars
					context_param.setContextType(keyValue.substring(0, index), keyValue.substring(index + 1));
				}

			}

		} else if (arg.startsWith("--context_param")) {
			String keyValue = arg.substring(16);
			int index = -1;
			if (keyValue != null && (index = keyValue.indexOf('=')) > -1) {
				if (fatherPid == null) {
					context_param.put(keyValue.substring(0, index), replaceEscapeChars(keyValue.substring(index + 1)));
				} else { // the subjob won't escape the especial chars
					context_param.put(keyValue.substring(0, index), keyValue.substring(index + 1));
				}
			}
		} else if (arg.startsWith("--log4jLevel=")) {
			log4jLevel = arg.substring(13);
		} else if (arg.startsWith("--audit.enabled") && arg.contains("=")) {// for trunjob call
			final int equal = arg.indexOf('=');
			final String key = arg.substring("--".length(), equal);
			System.setProperty(key, arg.substring(equal + 1));
		}
	}

	private static final String NULL_VALUE_EXPRESSION_IN_COMMAND_STRING_FOR_CHILD_JOB_ONLY = "<TALEND_NULL>";

	private final String[][] escapeChars = { { "\\\\", "\\" }, { "\\n", "\n" }, { "\\'", "\'" }, { "\\r", "\r" },
			{ "\\f", "\f" }, { "\\b", "\b" }, { "\\t", "\t" } };

	private String replaceEscapeChars(String keyValue) {

		if (keyValue == null || ("").equals(keyValue.trim())) {
			return keyValue;
		}

		StringBuilder result = new StringBuilder();
		int currIndex = 0;
		while (currIndex < keyValue.length()) {
			int index = -1;
			// judege if the left string includes escape chars
			for (String[] strArray : escapeChars) {
				index = keyValue.indexOf(strArray[0], currIndex);
				if (index >= 0) {

					result.append(keyValue.substring(currIndex, index + strArray[0].length()).replace(strArray[0],
							strArray[1]));
					currIndex = index + strArray[0].length();
					break;
				}
			}
			// if the left string doesn't include escape chars, append the left into the
			// result
			if (index < 0) {
				result.append(keyValue.substring(currIndex));
				currIndex = currIndex + keyValue.length();
			}
		}

		return result.toString();
	}

	public Integer getErrorCode() {
		return errorCode;
	}

	public String getStatus() {
		return status;
	}

	ResumeUtil resumeUtil = null;
}
/************************************************************************************************
 * 151906 characters generated by Talend Open Studio for Data Integration on the
 * November 5, 2020 at 4:40:05 PM CET
 ************************************************************************************************/