// ============================================================================
//
// Copyright (c) 2006-2015, Talend Inc.
//
// This source code has been automatically generated by_Talend Open Studio for Data Integration
// / Licensed under the Apache License, Version 2.0 (the "License");
// you may not use this file except in compliance with the License.
// You may obtain a copy of the License at
// http://www.apache.org/licenses/LICENSE-2.0
// 
// Unless required by applicable law or agreed to in writing, software
// distributed under the License is distributed on an "AS IS" BASIS,
// WITHOUT WARRANTIES OR CONDITIONS OF ANY KIND, either express or implied.
// See the License for the specific language governing permissions and
// limitations under the License.

package wipo_projects.e1a_marc_a_interm_copy_0_1;

import routines.Numeric;
import routines.DataOperation;
import routines.TalendDataGenerator;
import routines.TalendStringUtil;
import routines.TalendString;
import routines.StringHandling;
import routines.Relational;
import routines.TalendDate;
import routines.Mathematical;
import routines.IPAS;
import routines.system.*;
import routines.system.api.*;
import java.text.ParseException;
import java.text.SimpleDateFormat;
import java.util.Date;
import java.util.List;
import java.math.BigDecimal;
import java.io.ByteArrayOutputStream;
import java.io.ByteArrayInputStream;
import java.io.DataInputStream;
import java.io.DataOutputStream;
import java.io.ObjectOutputStream;
import java.io.ObjectInputStream;
import java.io.IOException;
import java.util.Comparator;

@SuppressWarnings("unused")

/**
 * Job: E1a_Marc_a_interm_Copy Purpose: migracion marcas<br>
 * Description: <br>
 * 
 * @author user@talend.com
 * @version 7.4.1.20201015_1726-M3
 * @status
 */
public class E1a_Marc_a_interm_Copy implements TalendJob {

	protected static void logIgnoredError(String message, Throwable cause) {
		System.err.println(message);
		if (cause != null) {
			cause.printStackTrace();
		}

	}

	public final Object obj = new Object();

	// for transmiting parameters purpose
	private Object valueObject = null;

	public Object getValueObject() {
		return this.valueObject;
	}

	public void setValueObject(Object valueObject) {
		this.valueObject = valueObject;
	}

	private Object[] multiThreadLockWrite = new Object[0];

	private final static String defaultCharset = java.nio.charset.Charset.defaultCharset().name();

	private final static String utf8Charset = "UTF-8";

	// contains type for every context property
	public class PropertiesWithType extends java.util.Properties {
		private static final long serialVersionUID = 1L;
		private java.util.Map<String, String> propertyTypes = new java.util.HashMap<>();

		public PropertiesWithType(java.util.Properties properties) {
			super(properties);
		}

		public PropertiesWithType() {
			super();
		}

		public void setContextType(String key, String type) {
			propertyTypes.put(key, type);
		}

		public String getContextType(String key) {
			return propertyTypes.get(key);
		}
	}

	// create and load default properties
	private java.util.Properties defaultProps = new java.util.Properties();

	// create application properties with default
	public class ContextProperties extends PropertiesWithType {

		private static final long serialVersionUID = 1L;

		public ContextProperties(java.util.Properties properties) {
			super(properties);
		}

		public ContextProperties() {
			super();
		}

		public void synchronizeContext() {

			if (hostInterMed != null) {

				this.setProperty("hostInterMed", hostInterMed.toString());

			}

			if (portInterMed != null) {

				this.setProperty("portInterMed", portInterMed.toString());

			}

			if (userInterMed != null) {

				this.setProperty("userInterMed", userInterMed.toString());

			}

			if (passwordInterMed != null) {

				this.setProperty("passwordInterMed", passwordInterMed.toString());

			}

			if (databaseInterMed != null) {

				this.setProperty("databaseInterMed", databaseInterMed.toString());

			}

			if (processAll != null) {

				this.setProperty("processAll", processAll.toString());

			}

			if (postgreUser != null) {

				this.setProperty("postgreUser", postgreUser.toString());

			}

			if (postgrePassword != null) {

				this.setProperty("postgrePassword", postgrePassword.toString());

			}

			if (postgreDb != null) {

				this.setProperty("postgreDb", postgreDb.toString());

			}

		}

		// if the stored or passed value is "<TALEND_NULL>" string, it mean null
		public String getStringValue(String key) {
			String origin_value = this.getProperty(key);
			if (NULL_VALUE_EXPRESSION_IN_COMMAND_STRING_FOR_CHILD_JOB_ONLY.equals(origin_value)) {
				return null;
			}
			return origin_value;
		}

		public String hostInterMed;

		public String getHostInterMed() {
			return this.hostInterMed;
		}

		public String portInterMed;

		public String getPortInterMed() {
			return this.portInterMed;
		}

		public String userInterMed;

		public String getUserInterMed() {
			return this.userInterMed;
		}

		public String passwordInterMed;

		public String getPasswordInterMed() {
			return this.passwordInterMed;
		}

		public String databaseInterMed;

		public String getDatabaseInterMed() {
			return this.databaseInterMed;
		}

		public String processAll;

		public String getProcessAll() {
			return this.processAll;
		}

		public String postgreUser;

		public String getPostgreUser() {
			return this.postgreUser;
		}

		public String postgrePassword;

		public String getPostgrePassword() {
			return this.postgrePassword;
		}

		public String postgreDb;

		public String getPostgreDb() {
			return this.postgreDb;
		}
	}

	protected ContextProperties context = new ContextProperties(); // will be instanciated by MS.

	public ContextProperties getContext() {
		return this.context;
	}

	private final String jobVersion = "0.1";
	private final String jobName = "E1a_Marc_a_interm_Copy";
	private final String projectName = "WIPO_PROJECTS";
	public Integer errorCode = null;
	private String currentComponent = "";

	private final java.util.Map<String, Object> globalMap = java.util.Collections
			.synchronizedMap(new java.util.HashMap<String, Object>());

	private final java.util.Map<String, Long> start_Hash = java.util.Collections
			.synchronizedMap(new java.util.HashMap<String, Long>());
	private final java.util.Map<String, Long> end_Hash = java.util.Collections
			.synchronizedMap(new java.util.HashMap<String, Long>());
	private final java.util.Map<String, Boolean> ok_Hash = java.util.Collections
			.synchronizedMap(new java.util.HashMap<String, Boolean>());
	public final java.util.List<String[]> globalBuffer = java.util.Collections
			.synchronizedList(new java.util.ArrayList<String[]>());

	private RunStat runStat = new RunStat();

	// OSGi DataSource
	private final static String KEY_DB_DATASOURCES = "KEY_DB_DATASOURCES";

	private final static String KEY_DB_DATASOURCES_RAW = "KEY_DB_DATASOURCES_RAW";

	public void setDataSources(java.util.Map<String, javax.sql.DataSource> dataSources) {
		java.util.Map<String, routines.system.TalendDataSource> talendDataSources = new java.util.HashMap<String, routines.system.TalendDataSource>();
		for (java.util.Map.Entry<String, javax.sql.DataSource> dataSourceEntry : dataSources.entrySet()) {
			talendDataSources.put(dataSourceEntry.getKey(),
					new routines.system.TalendDataSource(dataSourceEntry.getValue()));
		}
		globalMap.put(KEY_DB_DATASOURCES, talendDataSources);
		globalMap.put(KEY_DB_DATASOURCES_RAW, new java.util.HashMap<String, javax.sql.DataSource>(dataSources));
	}

	StatCatcherUtils tStatCatcher_1 = new StatCatcherUtils("_k8v80P2iEeqq-eaT_osC5g", "0.1");

	private final java.io.ByteArrayOutputStream baos = new java.io.ByteArrayOutputStream();
	private final java.io.PrintStream errorMessagePS = new java.io.PrintStream(new java.io.BufferedOutputStream(baos));

	public String getExceptionStackTrace() {
		if ("failure".equals(this.getStatus())) {
			errorMessagePS.flush();
			return baos.toString();
		}
		return null;
	}

	private Exception exception;

	public Exception getException() {
		if ("failure".equals(this.getStatus())) {
			return this.exception;
		}
		return null;
	}

	private class TalendException extends Exception {

		private static final long serialVersionUID = 1L;

		private java.util.Map<String, Object> globalMap = null;
		private Exception e = null;
		private String currentComponent = null;
		private String virtualComponentName = null;

		public void setVirtualComponentName(String virtualComponentName) {
			this.virtualComponentName = virtualComponentName;
		}

		private TalendException(Exception e, String errorComponent, final java.util.Map<String, Object> globalMap) {
			this.currentComponent = errorComponent;
			this.globalMap = globalMap;
			this.e = e;
		}

		public Exception getException() {
			return this.e;
		}

		public String getCurrentComponent() {
			return this.currentComponent;
		}

		public String getExceptionCauseMessage(Exception e) {
			Throwable cause = e;
			String message = null;
			int i = 10;
			while (null != cause && 0 < i--) {
				message = cause.getMessage();
				if (null == message) {
					cause = cause.getCause();
				} else {
					break;
				}
			}
			if (null == message) {
				message = e.getClass().getName();
			}
			return message;
		}

		@Override
		public void printStackTrace() {
			if (!(e instanceof TalendException || e instanceof TDieException)) {
				if (virtualComponentName != null && currentComponent.indexOf(virtualComponentName + "_") == 0) {
					globalMap.put(virtualComponentName + "_ERROR_MESSAGE", getExceptionCauseMessage(e));
				}
				globalMap.put(currentComponent + "_ERROR_MESSAGE", getExceptionCauseMessage(e));
				System.err.println("Exception in component " + currentComponent + " (" + jobName + ")");
			}
			if (!(e instanceof TDieException)) {
				if (e instanceof TalendException) {
					e.printStackTrace();
				} else {
					e.printStackTrace();
					e.printStackTrace(errorMessagePS);
					E1a_Marc_a_interm_Copy.this.exception = e;
				}
			}
			if (!(e instanceof TalendException)) {
				try {
					for (java.lang.reflect.Method m : this.getClass().getEnclosingClass().getMethods()) {
						if (m.getName().compareTo(currentComponent + "_error") == 0) {
							m.invoke(E1a_Marc_a_interm_Copy.this, new Object[] { e, currentComponent, globalMap });
							break;
						}
					}

					if (!(e instanceof TDieException)) {
					}
				} catch (Exception e) {
					this.e.printStackTrace();
				}
			}
		}
	}

	public void tDBConnection_3_error(Exception exception, String errorComponent,
			final java.util.Map<String, Object> globalMap) throws TalendException {

		end_Hash.put(errorComponent, System.currentTimeMillis());

		((java.util.Map) threadLocal.get()).put("status", "failure");

		tDBConnection_3_onSubJobError(exception, errorComponent, globalMap);
	}

	public void tDBConnection_2_error(Exception exception, String errorComponent,
			final java.util.Map<String, Object> globalMap) throws TalendException {

		end_Hash.put(errorComponent, System.currentTimeMillis());

		((java.util.Map) threadLocal.get()).put("status", "failure");

		tDBConnection_2_onSubJobError(exception, errorComponent, globalMap);
	}

	public void tDBConnection_1_error(Exception exception, String errorComponent,
			final java.util.Map<String, Object> globalMap) throws TalendException {

		end_Hash.put(errorComponent, System.currentTimeMillis());

		((java.util.Map) threadLocal.get()).put("status", "failure");

		tDBConnection_1_onSubJobError(exception, errorComponent, globalMap);
	}

	public void tDBInput_3_error(Exception exception, String errorComponent,
			final java.util.Map<String, Object> globalMap) throws TalendException {

		end_Hash.put(errorComponent, System.currentTimeMillis());

		((java.util.Map) threadLocal.get()).put("status", "failure");

		tDBInput_3_onSubJobError(exception, errorComponent, globalMap);
	}

	public void tMap_3_error(Exception exception, String errorComponent, final java.util.Map<String, Object> globalMap)
			throws TalendException {

		end_Hash.put(errorComponent, System.currentTimeMillis());

		((java.util.Map) threadLocal.get()).put("status", "failure");

		tDBInput_3_onSubJobError(exception, errorComponent, globalMap);
	}

	public void tDBOutput_4_error(Exception exception, String errorComponent,
			final java.util.Map<String, Object> globalMap) throws TalendException {

		end_Hash.put(errorComponent, System.currentTimeMillis());

		((java.util.Map) threadLocal.get()).put("status", "failure");

		tDBInput_3_onSubJobError(exception, errorComponent, globalMap);
	}

	public void tLogRow_4_error(Exception exception, String errorComponent,
			final java.util.Map<String, Object> globalMap) throws TalendException {

		end_Hash.put(errorComponent, System.currentTimeMillis());

		((java.util.Map) threadLocal.get()).put("status", "failure");

		tDBInput_3_onSubJobError(exception, errorComponent, globalMap);
	}

	public void tDBInput_33_error(Exception exception, String errorComponent,
			final java.util.Map<String, Object> globalMap) throws TalendException {

		end_Hash.put(errorComponent, System.currentTimeMillis());

		((java.util.Map) threadLocal.get()).put("status", "failure");

		tDBInput_33_onSubJobError(exception, errorComponent, globalMap);
	}

	public void tMap_12_error(Exception exception, String errorComponent, final java.util.Map<String, Object> globalMap)
			throws TalendException {

		end_Hash.put(errorComponent, System.currentTimeMillis());

		((java.util.Map) threadLocal.get()).put("status", "failure");

		tDBInput_33_onSubJobError(exception, errorComponent, globalMap);
	}

	public void tDBOutput_13_error(Exception exception, String errorComponent,
			final java.util.Map<String, Object> globalMap) throws TalendException {

		end_Hash.put(errorComponent, System.currentTimeMillis());

		((java.util.Map) threadLocal.get()).put("status", "failure");

		tDBInput_33_onSubJobError(exception, errorComponent, globalMap);
	}

	public void tLogRow_14_error(Exception exception, String errorComponent,
			final java.util.Map<String, Object> globalMap) throws TalendException {

		end_Hash.put(errorComponent, System.currentTimeMillis());

		((java.util.Map) threadLocal.get()).put("status", "failure");

		tDBInput_33_onSubJobError(exception, errorComponent, globalMap);
	}

	public void tDBInput_4_error(Exception exception, String errorComponent,
			final java.util.Map<String, Object> globalMap) throws TalendException {

		end_Hash.put(errorComponent, System.currentTimeMillis());

		((java.util.Map) threadLocal.get()).put("status", "failure");

		tDBInput_3_onSubJobError(exception, errorComponent, globalMap);
	}

	public void tDBInput_6_error(Exception exception, String errorComponent,
			final java.util.Map<String, Object> globalMap) throws TalendException {

		end_Hash.put(errorComponent, System.currentTimeMillis());

		((java.util.Map) threadLocal.get()).put("status", "failure");

		tDBInput_3_onSubJobError(exception, errorComponent, globalMap);
	}

	public void tDBInput_31_error(Exception exception, String errorComponent,
			final java.util.Map<String, Object> globalMap) throws TalendException {

		end_Hash.put(errorComponent, System.currentTimeMillis());

		((java.util.Map) threadLocal.get()).put("status", "failure");

		tDBInput_33_onSubJobError(exception, errorComponent, globalMap);
	}

	public void tStatCatcher_1_error(Exception exception, String errorComponent,
			final java.util.Map<String, Object> globalMap) throws TalendException {

		end_Hash.put(errorComponent, System.currentTimeMillis());

		((java.util.Map) threadLocal.get()).put("status", "failure");

		tStatCatcher_1_onSubJobError(exception, errorComponent, globalMap);
	}

	public void tLogRow_13_error(Exception exception, String errorComponent,
			final java.util.Map<String, Object> globalMap) throws TalendException {

		end_Hash.put(errorComponent, System.currentTimeMillis());

		((java.util.Map) threadLocal.get()).put("status", "failure");

		tStatCatcher_1_onSubJobError(exception, errorComponent, globalMap);
	}

	public void tAdvancedHash_row9_error(Exception exception, String errorComponent,
			final java.util.Map<String, Object> globalMap) throws TalendException {

		end_Hash.put(errorComponent, System.currentTimeMillis());

		((java.util.Map) threadLocal.get()).put("status", "failure");

		tDBInput_3_onSubJobError(exception, errorComponent, globalMap);
	}

	public void tAdvancedHash_row11_error(Exception exception, String errorComponent,
			final java.util.Map<String, Object> globalMap) throws TalendException {

		end_Hash.put(errorComponent, System.currentTimeMillis());

		((java.util.Map) threadLocal.get()).put("status", "failure");

		tDBInput_3_onSubJobError(exception, errorComponent, globalMap);
	}

	public void tAdvancedHash_row44_error(Exception exception, String errorComponent,
			final java.util.Map<String, Object> globalMap) throws TalendException {

		end_Hash.put(errorComponent, System.currentTimeMillis());

		((java.util.Map) threadLocal.get()).put("status", "failure");

		tDBInput_33_onSubJobError(exception, errorComponent, globalMap);
	}

	public void tDBConnection_3_onSubJobError(Exception exception, String errorComponent,
			final java.util.Map<String, Object> globalMap) throws TalendException {

		resumeUtil.addLog("SYSTEM_LOG", "NODE:" + errorComponent, "", Thread.currentThread().getId() + "", "FATAL", "",
				exception.getMessage(), ResumeUtil.getExceptionStackTrace(exception), "");

	}

	public void tDBConnection_2_onSubJobError(Exception exception, String errorComponent,
			final java.util.Map<String, Object> globalMap) throws TalendException {

		resumeUtil.addLog("SYSTEM_LOG", "NODE:" + errorComponent, "", Thread.currentThread().getId() + "", "FATAL", "",
				exception.getMessage(), ResumeUtil.getExceptionStackTrace(exception), "");

	}

	public void tDBConnection_1_onSubJobError(Exception exception, String errorComponent,
			final java.util.Map<String, Object> globalMap) throws TalendException {

		resumeUtil.addLog("SYSTEM_LOG", "NODE:" + errorComponent, "", Thread.currentThread().getId() + "", "FATAL", "",
				exception.getMessage(), ResumeUtil.getExceptionStackTrace(exception), "");

	}

	public void tDBInput_3_onSubJobError(Exception exception, String errorComponent,
			final java.util.Map<String, Object> globalMap) throws TalendException {

		resumeUtil.addLog("SYSTEM_LOG", "NODE:" + errorComponent, "", Thread.currentThread().getId() + "", "FATAL", "",
				exception.getMessage(), ResumeUtil.getExceptionStackTrace(exception), "");

	}

	public void tDBInput_33_onSubJobError(Exception exception, String errorComponent,
			final java.util.Map<String, Object> globalMap) throws TalendException {

		resumeUtil.addLog("SYSTEM_LOG", "NODE:" + errorComponent, "", Thread.currentThread().getId() + "", "FATAL", "",
				exception.getMessage(), ResumeUtil.getExceptionStackTrace(exception), "");

	}

	public void tStatCatcher_1_onSubJobError(Exception exception, String errorComponent,
			final java.util.Map<String, Object> globalMap) throws TalendException {

		resumeUtil.addLog("SYSTEM_LOG", "NODE:" + errorComponent, "", Thread.currentThread().getId() + "", "FATAL", "",
				exception.getMessage(), ResumeUtil.getExceptionStackTrace(exception), "");

	}

	public void tDBConnection_3Process(final java.util.Map<String, Object> globalMap) throws TalendException {
		globalMap.put("tDBConnection_3_SUBPROCESS_STATE", 0);

		final boolean execStat = this.execStat;

		String iterateId = "";

		String currentComponent = "";
		java.util.Map<String, Object> resourceMap = new java.util.HashMap<String, Object>();

		try {
			// TDI-39566 avoid throwing an useless Exception
			boolean resumeIt = true;
			if (globalResumeTicket == false && resumeEntryMethodName != null) {
				String currentMethodName = new java.lang.Exception().getStackTrace()[0].getMethodName();
				resumeIt = resumeEntryMethodName.equals(currentMethodName);
			}
			if (resumeIt || globalResumeTicket) { // start the resume
				globalResumeTicket = true;

				/**
				 * [tDBConnection_3 begin ] start
				 */

				ok_Hash.put("tDBConnection_3", false);
				start_Hash.put("tDBConnection_3", System.currentTimeMillis());

				currentComponent = "tDBConnection_3";

				int tos_count_tDBConnection_3 = 0;

				String url_tDBConnection_3 = "jdbc:jtds:sqlserver://" + "localhost";
				String port_tDBConnection_3 = "1433";
				String dbname_tDBConnection_3 = "MARCAS_PY";
				if (!"".equals(port_tDBConnection_3)) {
					url_tDBConnection_3 += ":" + "1433";
				}
				if (!"".equals(dbname_tDBConnection_3)) {

					url_tDBConnection_3 += "//" + "MARCAS_PY";
				}

				url_tDBConnection_3 += ";appName=" + projectName + ";" + "";
				String dbUser_tDBConnection_3 = "ADMIN";

				final String decryptedPassword_tDBConnection_3 = routines.system.PasswordEncryptUtil
						.decryptPassword("enc:routine.encryption.key.v1:Kbt4IYcXBnCikjaPG+uZ5Ax0l1c+2Szo+adQeQ28cJsH");
				String dbPwd_tDBConnection_3 = decryptedPassword_tDBConnection_3;

				java.sql.Connection conn_tDBConnection_3 = null;

				String driverClass_tDBConnection_3 = "net.sourceforge.jtds.jdbc.Driver";
				java.lang.Class jdbcclazz_tDBConnection_3 = java.lang.Class.forName(driverClass_tDBConnection_3);
				globalMap.put("driverClass_tDBConnection_3", driverClass_tDBConnection_3);

				conn_tDBConnection_3 = java.sql.DriverManager.getConnection(url_tDBConnection_3, dbUser_tDBConnection_3,
						dbPwd_tDBConnection_3);

				globalMap.put("conn_tDBConnection_3", conn_tDBConnection_3);
				if (null != conn_tDBConnection_3) {

					conn_tDBConnection_3.setAutoCommit(false);
				}

				globalMap.put("dbschema_tDBConnection_3", "ADMIN");

				globalMap.put("db_tDBConnection_3", "MARCAS_PY");

				globalMap.put("shareIdentitySetting_tDBConnection_3", false);

				globalMap.put("driver_tDBConnection_3", "JTDS");

				/**
				 * [tDBConnection_3 begin ] stop
				 */

				/**
				 * [tDBConnection_3 main ] start
				 */

				currentComponent = "tDBConnection_3";

				tos_count_tDBConnection_3++;

				/**
				 * [tDBConnection_3 main ] stop
				 */

				/**
				 * [tDBConnection_3 process_data_begin ] start
				 */

				currentComponent = "tDBConnection_3";

				/**
				 * [tDBConnection_3 process_data_begin ] stop
				 */

				/**
				 * [tDBConnection_3 process_data_end ] start
				 */

				currentComponent = "tDBConnection_3";

				/**
				 * [tDBConnection_3 process_data_end ] stop
				 */

				/**
				 * [tDBConnection_3 end ] start
				 */

				currentComponent = "tDBConnection_3";

				ok_Hash.put("tDBConnection_3", true);
				end_Hash.put("tDBConnection_3", System.currentTimeMillis());

				/**
				 * [tDBConnection_3 end ] stop
				 */
			} // end the resume

			if (resumeEntryMethodName == null || globalResumeTicket) {
				resumeUtil.addLog("CHECKPOINT", "CONNECTION:SUBJOB_OK:tDBConnection_3:OnSubjobOk", "",
						Thread.currentThread().getId() + "", "", "", "", "", "");
			}

			if (execStat) {
				runStat.updateStatOnConnection("OnSubjobOk11", 0, "ok");
			}

			tDBConnection_2Process(globalMap);

		} catch (java.lang.Exception e) {

			TalendException te = new TalendException(e, currentComponent, globalMap);

			throw te;
		} catch (java.lang.Error error) {

			runStat.stopThreadStat();

			throw error;
		} finally {

			try {

				/**
				 * [tDBConnection_3 finally ] start
				 */

				currentComponent = "tDBConnection_3";

				/**
				 * [tDBConnection_3 finally ] stop
				 */
			} catch (java.lang.Exception e) {
				// ignore
			} catch (java.lang.Error error) {
				// ignore
			}
			resourceMap = null;
		}

		globalMap.put("tDBConnection_3_SUBPROCESS_STATE", 1);
	}

	public void tDBConnection_2Process(final java.util.Map<String, Object> globalMap) throws TalendException {
		globalMap.put("tDBConnection_2_SUBPROCESS_STATE", 0);

		final boolean execStat = this.execStat;

		String iterateId = "";

		String currentComponent = "";
		java.util.Map<String, Object> resourceMap = new java.util.HashMap<String, Object>();

		try {
			// TDI-39566 avoid throwing an useless Exception
			boolean resumeIt = true;
			if (globalResumeTicket == false && resumeEntryMethodName != null) {
				String currentMethodName = new java.lang.Exception().getStackTrace()[0].getMethodName();
				resumeIt = resumeEntryMethodName.equals(currentMethodName);
			}
			if (resumeIt || globalResumeTicket) { // start the resume
				globalResumeTicket = true;

				/**
				 * [tDBConnection_2 begin ] start
				 */

				ok_Hash.put("tDBConnection_2", false);
				start_Hash.put("tDBConnection_2", System.currentTimeMillis());

				currentComponent = "tDBConnection_2";

				int tos_count_tDBConnection_2 = 0;

				String dbProperties_tDBConnection_2 = "";
				String url_tDBConnection_2 = "jdbc:postgresql://" + "localhost" + ":" + "5432" + "/" + "Paraguay";

				if (dbProperties_tDBConnection_2 != null && !"".equals(dbProperties_tDBConnection_2.trim())) {
					url_tDBConnection_2 = url_tDBConnection_2 + "?" + dbProperties_tDBConnection_2;
				}
				String dbUser_tDBConnection_2 = "postgres";

				final String decryptedPassword_tDBConnection_2 = routines.system.PasswordEncryptUtil.decryptPassword(
						"enc:routine.encryption.key.v1:a9hfrKXtuEC1FKK6AoA2dsT9H0ggW63iG5DdLrIbY0y2wK+D");
				String dbPwd_tDBConnection_2 = decryptedPassword_tDBConnection_2;

				java.sql.Connection conn_tDBConnection_2 = null;

				java.util.Enumeration<java.sql.Driver> drivers_tDBConnection_2 = java.sql.DriverManager.getDrivers();
				java.util.Set<String> redShiftDriverNames_tDBConnection_2 = new java.util.HashSet<String>(
						java.util.Arrays.asList("com.amazon.redshift.jdbc.Driver", "com.amazon.redshift.jdbc41.Driver",
								"com.amazon.redshift.jdbc42.Driver"));
				while (drivers_tDBConnection_2.hasMoreElements()) {
					java.sql.Driver d_tDBConnection_2 = drivers_tDBConnection_2.nextElement();
					if (redShiftDriverNames_tDBConnection_2.contains(d_tDBConnection_2.getClass().getName())) {
						try {
							java.sql.DriverManager.deregisterDriver(d_tDBConnection_2);
							java.sql.DriverManager.registerDriver(d_tDBConnection_2);
						} catch (java.lang.Exception e_tDBConnection_2) {
							// do nothing
						}
					}
				}
				String driverClass_tDBConnection_2 = "org.postgresql.Driver";
				java.lang.Class jdbcclazz_tDBConnection_2 = java.lang.Class.forName(driverClass_tDBConnection_2);
				globalMap.put("driverClass_tDBConnection_2", driverClass_tDBConnection_2);

				conn_tDBConnection_2 = java.sql.DriverManager.getConnection(url_tDBConnection_2, dbUser_tDBConnection_2,
						dbPwd_tDBConnection_2);

				globalMap.put("conn_tDBConnection_2", conn_tDBConnection_2);
				if (null != conn_tDBConnection_2) {

					conn_tDBConnection_2.setAutoCommit(false);
				}

				globalMap.put("schema_" + "tDBConnection_2", "public");

				/**
				 * [tDBConnection_2 begin ] stop
				 */

				/**
				 * [tDBConnection_2 main ] start
				 */

				currentComponent = "tDBConnection_2";

				tos_count_tDBConnection_2++;

				/**
				 * [tDBConnection_2 main ] stop
				 */

				/**
				 * [tDBConnection_2 process_data_begin ] start
				 */

				currentComponent = "tDBConnection_2";

				/**
				 * [tDBConnection_2 process_data_begin ] stop
				 */

				/**
				 * [tDBConnection_2 process_data_end ] start
				 */

				currentComponent = "tDBConnection_2";

				/**
				 * [tDBConnection_2 process_data_end ] stop
				 */

				/**
				 * [tDBConnection_2 end ] start
				 */

				currentComponent = "tDBConnection_2";

				ok_Hash.put("tDBConnection_2", true);
				end_Hash.put("tDBConnection_2", System.currentTimeMillis());

				/**
				 * [tDBConnection_2 end ] stop
				 */
			} // end the resume

			if (resumeEntryMethodName == null || globalResumeTicket) {
				resumeUtil.addLog("CHECKPOINT", "CONNECTION:SUBJOB_OK:tDBConnection_2:OnSubjobOk", "",
						Thread.currentThread().getId() + "", "", "", "", "", "");
			}

			if (execStat) {
				runStat.updateStatOnConnection("OnSubjobOk16", 0, "ok");
			}

			tDBConnection_1Process(globalMap);

		} catch (java.lang.Exception e) {

			TalendException te = new TalendException(e, currentComponent, globalMap);

			throw te;
		} catch (java.lang.Error error) {

			runStat.stopThreadStat();

			throw error;
		} finally {

			try {

				/**
				 * [tDBConnection_2 finally ] start
				 */

				currentComponent = "tDBConnection_2";

				/**
				 * [tDBConnection_2 finally ] stop
				 */
			} catch (java.lang.Exception e) {
				// ignore
			} catch (java.lang.Error error) {
				// ignore
			}
			resourceMap = null;
		}

		globalMap.put("tDBConnection_2_SUBPROCESS_STATE", 1);
	}

	public void tDBConnection_1Process(final java.util.Map<String, Object> globalMap) throws TalendException {
		globalMap.put("tDBConnection_1_SUBPROCESS_STATE", 0);

		final boolean execStat = this.execStat;

		String iterateId = "";

		String currentComponent = "";
		java.util.Map<String, Object> resourceMap = new java.util.HashMap<String, Object>();

		try {
			// TDI-39566 avoid throwing an useless Exception
			boolean resumeIt = true;
			if (globalResumeTicket == false && resumeEntryMethodName != null) {
				String currentMethodName = new java.lang.Exception().getStackTrace()[0].getMethodName();
				resumeIt = resumeEntryMethodName.equals(currentMethodName);
			}
			if (resumeIt || globalResumeTicket) { // start the resume
				globalResumeTicket = true;

				/**
				 * [tDBConnection_1 begin ] start
				 */

				ok_Hash.put("tDBConnection_1", false);
				start_Hash.put("tDBConnection_1", System.currentTimeMillis());

				currentComponent = "tDBConnection_1";

				int tos_count_tDBConnection_1 = 0;

				String url_tDBConnection_1 = "jdbc:jtds:sqlserver://" + "localhost";
				String port_tDBConnection_1 = "1433";
				String dbname_tDBConnection_1 = "PY_INTERMED";
				if (!"".equals(port_tDBConnection_1)) {
					url_tDBConnection_1 += ":" + "1433";
				}
				if (!"".equals(dbname_tDBConnection_1)) {

					url_tDBConnection_1 += "//" + "PY_INTERMED";
				}

				url_tDBConnection_1 += ";appName=" + projectName + ";" + "";
				String dbUser_tDBConnection_1 = "sa";

				final String decryptedPassword_tDBConnection_1 = routines.system.PasswordEncryptUtil.decryptPassword(
						"enc:routine.encryption.key.v1:J5fU65HnRy5o36DlimUGIOZHxt4jUAhXiI0cdB6uTnbLx4d7");
				String dbPwd_tDBConnection_1 = decryptedPassword_tDBConnection_1;

				java.sql.Connection conn_tDBConnection_1 = null;

				String driverClass_tDBConnection_1 = "net.sourceforge.jtds.jdbc.Driver";
				java.lang.Class jdbcclazz_tDBConnection_1 = java.lang.Class.forName(driverClass_tDBConnection_1);
				globalMap.put("driverClass_tDBConnection_1", driverClass_tDBConnection_1);

				conn_tDBConnection_1 = java.sql.DriverManager.getConnection(url_tDBConnection_1, dbUser_tDBConnection_1,
						dbPwd_tDBConnection_1);

				globalMap.put("conn_tDBConnection_1", conn_tDBConnection_1);
				if (null != conn_tDBConnection_1) {

					conn_tDBConnection_1.setAutoCommit(true);
				}

				globalMap.put("dbschema_tDBConnection_1", "dbo");

				globalMap.put("db_tDBConnection_1", "PY_INTERMED");

				globalMap.put("shareIdentitySetting_tDBConnection_1", false);

				globalMap.put("driver_tDBConnection_1", "JTDS");

				/**
				 * [tDBConnection_1 begin ] stop
				 */

				/**
				 * [tDBConnection_1 main ] start
				 */

				currentComponent = "tDBConnection_1";

				tos_count_tDBConnection_1++;

				/**
				 * [tDBConnection_1 main ] stop
				 */

				/**
				 * [tDBConnection_1 process_data_begin ] start
				 */

				currentComponent = "tDBConnection_1";

				/**
				 * [tDBConnection_1 process_data_begin ] stop
				 */

				/**
				 * [tDBConnection_1 process_data_end ] start
				 */

				currentComponent = "tDBConnection_1";

				/**
				 * [tDBConnection_1 process_data_end ] stop
				 */

				/**
				 * [tDBConnection_1 end ] start
				 */

				currentComponent = "tDBConnection_1";

				ok_Hash.put("tDBConnection_1", true);
				end_Hash.put("tDBConnection_1", System.currentTimeMillis());

				/**
				 * [tDBConnection_1 end ] stop
				 */
			} // end the resume

			if (resumeEntryMethodName == null || globalResumeTicket) {
				resumeUtil.addLog("CHECKPOINT", "CONNECTION:SUBJOB_OK:tDBConnection_1:OnSubjobOk", "",
						Thread.currentThread().getId() + "", "", "", "", "", "");
			}

			if (execStat) {
				runStat.updateStatOnConnection("OnSubjobOk4", 0, "ok");
			}

			tDBInput_3Process(globalMap);

		} catch (java.lang.Exception e) {

			TalendException te = new TalendException(e, currentComponent, globalMap);

			throw te;
		} catch (java.lang.Error error) {

			runStat.stopThreadStat();

			throw error;
		} finally {

			try {

				/**
				 * [tDBConnection_1 finally ] start
				 */

				currentComponent = "tDBConnection_1";

				/**
				 * [tDBConnection_1 finally ] stop
				 */
			} catch (java.lang.Exception e) {
				// ignore
			} catch (java.lang.Error error) {
				// ignore
			}
			resourceMap = null;
		}

		globalMap.put("tDBConnection_1_SUBPROCESS_STATE", 1);
	}

	public static class row10Struct implements routines.system.IPersistableRow<row10Struct> {
		final static byte[] commonByteArrayLock_WIPO_PROJECTS_E1a_Marc_a_interm_Copy = new byte[0];
		static byte[] commonByteArray_WIPO_PROJECTS_E1a_Marc_a_interm_Copy = new byte[0];
		protected static final int DEFAULT_HASHCODE = 1;
		protected static final int PRIME = 31;
		protected int hashCode = DEFAULT_HASHCODE;
		public boolean hashCodeDirty = true;

		public String loopKey;

		public String FILE_SEQ;

		public String getFILE_SEQ() {
			return this.FILE_SEQ;
		}

		public String FILE_TYPE;

		public String getFILE_TYPE() {
			return this.FILE_TYPE;
		}

		public BigDecimal FILE_SERIES;

		public BigDecimal getFILE_SERIES() {
			return this.FILE_SERIES;
		}

		public BigDecimal FILE_NBR;

		public BigDecimal getFILE_NBR() {
			return this.FILE_NBR;
		}

		public String ACTION_TYPE;

		public String getACTION_TYPE() {
			return this.ACTION_TYPE;
		}

		public java.util.Date ACTION_DATE;

		public java.util.Date getACTION_DATE() {
			return this.ACTION_DATE;
		}

		public java.util.Date MANUAL_DUE_DATE;

		public java.util.Date getMANUAL_DUE_DATE() {
			return this.MANUAL_DUE_DATE;
		}

		public BigDecimal RESPONSIBLE_USER;

		public BigDecimal getRESPONSIBLE_USER() {
			return this.RESPONSIBLE_USER;
		}

		public String ACTION_NOTES1;

		public String getACTION_NOTES1() {
			return this.ACTION_NOTES1;
		}

		public String ACTION_NOTES2;

		public String getACTION_NOTES2() {
			return this.ACTION_NOTES2;
		}

		public String ACTION_NOTES3;

		public String getACTION_NOTES3() {
			return this.ACTION_NOTES3;
		}

		public String ACTION_NOTES4;

		public String getACTION_NOTES4() {
			return this.ACTION_NOTES4;
		}

		public String ACTION_NOTES5;

		public String getACTION_NOTES5() {
			return this.ACTION_NOTES5;
		}

		public String GENERAL_NOTES;

		public String getGENERAL_NOTES() {
			return this.GENERAL_NOTES;
		}

		public String SELECTED_OPTIONS_TEXT;

		public String getSELECTED_OPTIONS_TEXT() {
			return this.SELECTED_OPTIONS_TEXT;
		}

		public BigDecimal ACTION_USER;

		public BigDecimal getACTION_USER() {
			return this.ACTION_USER;
		}

		public String ACTION_CATEGORY;

		public String getACTION_CATEGORY() {
			return this.ACTION_CATEGORY;
		}

		public String SPECIAL_FINAL_STATUS;

		public String getSPECIAL_FINAL_STATUS() {
			return this.SPECIAL_FINAL_STATUS;
		}

		public String JOURNAL_CODE;

		public String getJOURNAL_CODE() {
			return this.JOURNAL_CODE;
		}

		public java.util.Date PUBLICATION_DATE;

		public java.util.Date getPUBLICATION_DATE() {
			return this.PUBLICATION_DATE;
		}

		public String IPAS_PROC_TYP;

		public String getIPAS_PROC_TYP() {
			return this.IPAS_PROC_TYP;
		}

		public BigDecimal IPAS_PROC_NBR;

		public BigDecimal getIPAS_PROC_NBR() {
			return this.IPAS_PROC_NBR;
		}

		public BigDecimal IPAS_ACTION_NBR;

		public BigDecimal getIPAS_ACTION_NBR() {
			return this.IPAS_ACTION_NBR;
		}

		public String errorCode;

		public String getErrorCode() {
			return this.errorCode;
		}

		public String errorMessage;

		public String getErrorMessage() {
			return this.errorMessage;
		}

		@Override
		public int hashCode() {
			if (this.hashCodeDirty) {
				final int prime = PRIME;
				int result = DEFAULT_HASHCODE;

				result = prime * result + ((this.FILE_SEQ == null) ? 0 : this.FILE_SEQ.hashCode());

				result = prime * result + ((this.FILE_TYPE == null) ? 0 : this.FILE_TYPE.hashCode());

				result = prime * result + ((this.FILE_SERIES == null) ? 0 : this.FILE_SERIES.hashCode());

				result = prime * result + ((this.FILE_NBR == null) ? 0 : this.FILE_NBR.hashCode());

				result = prime * result + ((this.ACTION_TYPE == null) ? 0 : this.ACTION_TYPE.hashCode());

				result = prime * result + ((this.ACTION_DATE == null) ? 0 : this.ACTION_DATE.hashCode());

				this.hashCode = result;
				this.hashCodeDirty = false;
			}
			return this.hashCode;
		}

		@Override
		public boolean equals(Object obj) {
			if (this == obj)
				return true;
			if (obj == null)
				return false;
			if (getClass() != obj.getClass())
				return false;
			final row10Struct other = (row10Struct) obj;

			if (this.FILE_SEQ == null) {
				if (other.FILE_SEQ != null)
					return false;

			} else if (!this.FILE_SEQ.equals(other.FILE_SEQ))

				return false;

			if (this.FILE_TYPE == null) {
				if (other.FILE_TYPE != null)
					return false;

			} else if (!this.FILE_TYPE.equals(other.FILE_TYPE))

				return false;

			if (this.FILE_SERIES == null) {
				if (other.FILE_SERIES != null)
					return false;

			} else if (!this.FILE_SERIES.equals(other.FILE_SERIES))

				return false;

			if (this.FILE_NBR == null) {
				if (other.FILE_NBR != null)
					return false;

			} else if (!this.FILE_NBR.equals(other.FILE_NBR))

				return false;

			if (this.ACTION_TYPE == null) {
				if (other.ACTION_TYPE != null)
					return false;

			} else if (!this.ACTION_TYPE.equals(other.ACTION_TYPE))

				return false;

			if (this.ACTION_DATE == null) {
				if (other.ACTION_DATE != null)
					return false;

			} else if (!this.ACTION_DATE.equals(other.ACTION_DATE))

				return false;

			return true;
		}

		public void copyDataTo(row10Struct other) {

			other.FILE_SEQ = this.FILE_SEQ;
			other.FILE_TYPE = this.FILE_TYPE;
			other.FILE_SERIES = this.FILE_SERIES;
			other.FILE_NBR = this.FILE_NBR;
			other.ACTION_TYPE = this.ACTION_TYPE;
			other.ACTION_DATE = this.ACTION_DATE;
			other.MANUAL_DUE_DATE = this.MANUAL_DUE_DATE;
			other.RESPONSIBLE_USER = this.RESPONSIBLE_USER;
			other.ACTION_NOTES1 = this.ACTION_NOTES1;
			other.ACTION_NOTES2 = this.ACTION_NOTES2;
			other.ACTION_NOTES3 = this.ACTION_NOTES3;
			other.ACTION_NOTES4 = this.ACTION_NOTES4;
			other.ACTION_NOTES5 = this.ACTION_NOTES5;
			other.GENERAL_NOTES = this.GENERAL_NOTES;
			other.SELECTED_OPTIONS_TEXT = this.SELECTED_OPTIONS_TEXT;
			other.ACTION_USER = this.ACTION_USER;
			other.ACTION_CATEGORY = this.ACTION_CATEGORY;
			other.SPECIAL_FINAL_STATUS = this.SPECIAL_FINAL_STATUS;
			other.JOURNAL_CODE = this.JOURNAL_CODE;
			other.PUBLICATION_DATE = this.PUBLICATION_DATE;
			other.IPAS_PROC_TYP = this.IPAS_PROC_TYP;
			other.IPAS_PROC_NBR = this.IPAS_PROC_NBR;
			other.IPAS_ACTION_NBR = this.IPAS_ACTION_NBR;
			other.errorCode = this.errorCode;
			other.errorMessage = this.errorMessage;

		}

		public void copyKeysDataTo(row10Struct other) {

			other.FILE_SEQ = this.FILE_SEQ;
			other.FILE_TYPE = this.FILE_TYPE;
			other.FILE_SERIES = this.FILE_SERIES;
			other.FILE_NBR = this.FILE_NBR;
			other.ACTION_TYPE = this.ACTION_TYPE;
			other.ACTION_DATE = this.ACTION_DATE;

		}

		private String readString(ObjectInputStream dis) throws IOException {
			String strReturn = null;
			int length = 0;
			length = dis.readInt();
			if (length == -1) {
				strReturn = null;
			} else {
				if (length > commonByteArray_WIPO_PROJECTS_E1a_Marc_a_interm_Copy.length) {
					if (length < 1024 && commonByteArray_WIPO_PROJECTS_E1a_Marc_a_interm_Copy.length == 0) {
						commonByteArray_WIPO_PROJECTS_E1a_Marc_a_interm_Copy = new byte[1024];
					} else {
						commonByteArray_WIPO_PROJECTS_E1a_Marc_a_interm_Copy = new byte[2 * length];
					}
				}
				dis.readFully(commonByteArray_WIPO_PROJECTS_E1a_Marc_a_interm_Copy, 0, length);
				strReturn = new String(commonByteArray_WIPO_PROJECTS_E1a_Marc_a_interm_Copy, 0, length, utf8Charset);
			}
			return strReturn;
		}

		private void writeString(String str, ObjectOutputStream dos) throws IOException {
			if (str == null) {
				dos.writeInt(-1);
			} else {
				byte[] byteArray = str.getBytes(utf8Charset);
				dos.writeInt(byteArray.length);
				dos.write(byteArray);
			}
		}

		private java.util.Date readDate(ObjectInputStream dis) throws IOException {
			java.util.Date dateReturn = null;
			int length = 0;
			length = dis.readByte();
			if (length == -1) {
				dateReturn = null;
			} else {
				dateReturn = new Date(dis.readLong());
			}
			return dateReturn;
		}

		private void writeDate(java.util.Date date1, ObjectOutputStream dos) throws IOException {
			if (date1 == null) {
				dos.writeByte(-1);
			} else {
				dos.writeByte(0);
				dos.writeLong(date1.getTime());
			}
		}

		public void readData(ObjectInputStream dis) {

			synchronized (commonByteArrayLock_WIPO_PROJECTS_E1a_Marc_a_interm_Copy) {

				try {

					int length = 0;

					this.FILE_SEQ = readString(dis);

					this.FILE_TYPE = readString(dis);

					this.FILE_SERIES = (BigDecimal) dis.readObject();

					this.FILE_NBR = (BigDecimal) dis.readObject();

					this.ACTION_TYPE = readString(dis);

					this.ACTION_DATE = readDate(dis);

					this.MANUAL_DUE_DATE = readDate(dis);

					this.RESPONSIBLE_USER = (BigDecimal) dis.readObject();

					this.ACTION_NOTES1 = readString(dis);

					this.ACTION_NOTES2 = readString(dis);

					this.ACTION_NOTES3 = readString(dis);

					this.ACTION_NOTES4 = readString(dis);

					this.ACTION_NOTES5 = readString(dis);

					this.GENERAL_NOTES = readString(dis);

					this.SELECTED_OPTIONS_TEXT = readString(dis);

					this.ACTION_USER = (BigDecimal) dis.readObject();

					this.ACTION_CATEGORY = readString(dis);

					this.SPECIAL_FINAL_STATUS = readString(dis);

					this.JOURNAL_CODE = readString(dis);

					this.PUBLICATION_DATE = readDate(dis);

					this.IPAS_PROC_TYP = readString(dis);

					this.IPAS_PROC_NBR = (BigDecimal) dis.readObject();

					this.IPAS_ACTION_NBR = (BigDecimal) dis.readObject();

					this.errorCode = readString(dis);

					this.errorMessage = readString(dis);

				} catch (IOException e) {
					throw new RuntimeException(e);

				} catch (ClassNotFoundException eCNFE) {
					throw new RuntimeException(eCNFE);

				}

			}

		}

		public void writeData(ObjectOutputStream dos) {
			try {

				// String

				writeString(this.FILE_SEQ, dos);

				// String

				writeString(this.FILE_TYPE, dos);

				// BigDecimal

				dos.writeObject(this.FILE_SERIES);

				// BigDecimal

				dos.writeObject(this.FILE_NBR);

				// String

				writeString(this.ACTION_TYPE, dos);

				// java.util.Date

				writeDate(this.ACTION_DATE, dos);

				// java.util.Date

				writeDate(this.MANUAL_DUE_DATE, dos);

				// BigDecimal

				dos.writeObject(this.RESPONSIBLE_USER);

				// String

				writeString(this.ACTION_NOTES1, dos);

				// String

				writeString(this.ACTION_NOTES2, dos);

				// String

				writeString(this.ACTION_NOTES3, dos);

				// String

				writeString(this.ACTION_NOTES4, dos);

				// String

				writeString(this.ACTION_NOTES5, dos);

				// String

				writeString(this.GENERAL_NOTES, dos);

				// String

				writeString(this.SELECTED_OPTIONS_TEXT, dos);

				// BigDecimal

				dos.writeObject(this.ACTION_USER);

				// String

				writeString(this.ACTION_CATEGORY, dos);

				// String

				writeString(this.SPECIAL_FINAL_STATUS, dos);

				// String

				writeString(this.JOURNAL_CODE, dos);

				// java.util.Date

				writeDate(this.PUBLICATION_DATE, dos);

				// String

				writeString(this.IPAS_PROC_TYP, dos);

				// BigDecimal

				dos.writeObject(this.IPAS_PROC_NBR);

				// BigDecimal

				dos.writeObject(this.IPAS_ACTION_NBR);

				// String

				writeString(this.errorCode, dos);

				// String

				writeString(this.errorMessage, dos);

			} catch (IOException e) {
				throw new RuntimeException(e);
			}

		}

		public String toString() {

			StringBuilder sb = new StringBuilder();
			sb.append(super.toString());
			sb.append("[");
			sb.append("FILE_SEQ=" + FILE_SEQ);
			sb.append(",FILE_TYPE=" + FILE_TYPE);
			sb.append(",FILE_SERIES=" + String.valueOf(FILE_SERIES));
			sb.append(",FILE_NBR=" + String.valueOf(FILE_NBR));
			sb.append(",ACTION_TYPE=" + ACTION_TYPE);
			sb.append(",ACTION_DATE=" + String.valueOf(ACTION_DATE));
			sb.append(",MANUAL_DUE_DATE=" + String.valueOf(MANUAL_DUE_DATE));
			sb.append(",RESPONSIBLE_USER=" + String.valueOf(RESPONSIBLE_USER));
			sb.append(",ACTION_NOTES1=" + ACTION_NOTES1);
			sb.append(",ACTION_NOTES2=" + ACTION_NOTES2);
			sb.append(",ACTION_NOTES3=" + ACTION_NOTES3);
			sb.append(",ACTION_NOTES4=" + ACTION_NOTES4);
			sb.append(",ACTION_NOTES5=" + ACTION_NOTES5);
			sb.append(",GENERAL_NOTES=" + GENERAL_NOTES);
			sb.append(",SELECTED_OPTIONS_TEXT=" + SELECTED_OPTIONS_TEXT);
			sb.append(",ACTION_USER=" + String.valueOf(ACTION_USER));
			sb.append(",ACTION_CATEGORY=" + ACTION_CATEGORY);
			sb.append(",SPECIAL_FINAL_STATUS=" + SPECIAL_FINAL_STATUS);
			sb.append(",JOURNAL_CODE=" + JOURNAL_CODE);
			sb.append(",PUBLICATION_DATE=" + String.valueOf(PUBLICATION_DATE));
			sb.append(",IPAS_PROC_TYP=" + IPAS_PROC_TYP);
			sb.append(",IPAS_PROC_NBR=" + String.valueOf(IPAS_PROC_NBR));
			sb.append(",IPAS_ACTION_NBR=" + String.valueOf(IPAS_ACTION_NBR));
			sb.append(",errorCode=" + errorCode);
			sb.append(",errorMessage=" + errorMessage);
			sb.append("]");

			return sb.toString();
		}

		/**
		 * Compare keys
		 */
		public int compareTo(row10Struct other) {

			int returnValue = -1;

			returnValue = checkNullsAndCompare(this.FILE_SEQ, other.FILE_SEQ);
			if (returnValue != 0) {
				return returnValue;
			}

			returnValue = checkNullsAndCompare(this.FILE_TYPE, other.FILE_TYPE);
			if (returnValue != 0) {
				return returnValue;
			}

			returnValue = checkNullsAndCompare(this.FILE_SERIES, other.FILE_SERIES);
			if (returnValue != 0) {
				return returnValue;
			}

			returnValue = checkNullsAndCompare(this.FILE_NBR, other.FILE_NBR);
			if (returnValue != 0) {
				return returnValue;
			}

			returnValue = checkNullsAndCompare(this.ACTION_TYPE, other.ACTION_TYPE);
			if (returnValue != 0) {
				return returnValue;
			}

			returnValue = checkNullsAndCompare(this.ACTION_DATE, other.ACTION_DATE);
			if (returnValue != 0) {
				return returnValue;
			}

			return returnValue;
		}

		private int checkNullsAndCompare(Object object1, Object object2) {
			int returnValue = 0;
			if (object1 instanceof Comparable && object2 instanceof Comparable) {
				returnValue = ((Comparable) object1).compareTo(object2);
			} else if (object1 != null && object2 != null) {
				returnValue = compareStrings(object1.toString(), object2.toString());
			} else if (object1 == null && object2 != null) {
				returnValue = 1;
			} else if (object1 != null && object2 == null) {
				returnValue = -1;
			} else {
				returnValue = 0;
			}

			return returnValue;
		}

		private int compareStrings(String string1, String string2) {
			return string1.compareTo(string2);
		}

	}

	public static class insert_actionsStruct implements routines.system.IPersistableRow<insert_actionsStruct> {
		final static byte[] commonByteArrayLock_WIPO_PROJECTS_E1a_Marc_a_interm_Copy = new byte[0];
		static byte[] commonByteArray_WIPO_PROJECTS_E1a_Marc_a_interm_Copy = new byte[0];
		protected static final int DEFAULT_HASHCODE = 1;
		protected static final int PRIME = 31;
		protected int hashCode = DEFAULT_HASHCODE;
		public boolean hashCodeDirty = true;

		public String loopKey;

		public String FILE_SEQ;

		public String getFILE_SEQ() {
			return this.FILE_SEQ;
		}

		public String FILE_TYPE;

		public String getFILE_TYPE() {
			return this.FILE_TYPE;
		}

		public BigDecimal FILE_SERIES;

		public BigDecimal getFILE_SERIES() {
			return this.FILE_SERIES;
		}

		public BigDecimal FILE_NBR;

		public BigDecimal getFILE_NBR() {
			return this.FILE_NBR;
		}

		public String ACTION_TYPE;

		public String getACTION_TYPE() {
			return this.ACTION_TYPE;
		}

		public java.util.Date ACTION_DATE;

		public java.util.Date getACTION_DATE() {
			return this.ACTION_DATE;
		}

		public java.util.Date MANUAL_DUE_DATE;

		public java.util.Date getMANUAL_DUE_DATE() {
			return this.MANUAL_DUE_DATE;
		}

		public BigDecimal RESPONSIBLE_USER;

		public BigDecimal getRESPONSIBLE_USER() {
			return this.RESPONSIBLE_USER;
		}

		public String ACTION_NOTES1;

		public String getACTION_NOTES1() {
			return this.ACTION_NOTES1;
		}

		public String ACTION_NOTES2;

		public String getACTION_NOTES2() {
			return this.ACTION_NOTES2;
		}

		public String ACTION_NOTES3;

		public String getACTION_NOTES3() {
			return this.ACTION_NOTES3;
		}

		public String ACTION_NOTES4;

		public String getACTION_NOTES4() {
			return this.ACTION_NOTES4;
		}

		public String ACTION_NOTES5;

		public String getACTION_NOTES5() {
			return this.ACTION_NOTES5;
		}

		public String GENERAL_NOTES;

		public String getGENERAL_NOTES() {
			return this.GENERAL_NOTES;
		}

		public String SELECTED_OPTIONS_TEXT;

		public String getSELECTED_OPTIONS_TEXT() {
			return this.SELECTED_OPTIONS_TEXT;
		}

		public BigDecimal ACTION_USER;

		public BigDecimal getACTION_USER() {
			return this.ACTION_USER;
		}

		public String ACTION_CATEGORY;

		public String getACTION_CATEGORY() {
			return this.ACTION_CATEGORY;
		}

		public String SPECIAL_FINAL_STATUS;

		public String getSPECIAL_FINAL_STATUS() {
			return this.SPECIAL_FINAL_STATUS;
		}

		public String JOURNAL_CODE;

		public String getJOURNAL_CODE() {
			return this.JOURNAL_CODE;
		}

		public java.util.Date PUBLICATION_DATE;

		public java.util.Date getPUBLICATION_DATE() {
			return this.PUBLICATION_DATE;
		}

		public String IPAS_PROC_TYP;

		public String getIPAS_PROC_TYP() {
			return this.IPAS_PROC_TYP;
		}

		public BigDecimal IPAS_PROC_NBR;

		public BigDecimal getIPAS_PROC_NBR() {
			return this.IPAS_PROC_NBR;
		}

		public BigDecimal IPAS_ACTION_NBR;

		public BigDecimal getIPAS_ACTION_NBR() {
			return this.IPAS_ACTION_NBR;
		}

		@Override
		public int hashCode() {
			if (this.hashCodeDirty) {
				final int prime = PRIME;
				int result = DEFAULT_HASHCODE;

				result = prime * result + ((this.FILE_SEQ == null) ? 0 : this.FILE_SEQ.hashCode());

				result = prime * result + ((this.FILE_TYPE == null) ? 0 : this.FILE_TYPE.hashCode());

				result = prime * result + ((this.FILE_SERIES == null) ? 0 : this.FILE_SERIES.hashCode());

				result = prime * result + ((this.FILE_NBR == null) ? 0 : this.FILE_NBR.hashCode());

				result = prime * result + ((this.ACTION_TYPE == null) ? 0 : this.ACTION_TYPE.hashCode());

				result = prime * result + ((this.ACTION_DATE == null) ? 0 : this.ACTION_DATE.hashCode());

				this.hashCode = result;
				this.hashCodeDirty = false;
			}
			return this.hashCode;
		}

		@Override
		public boolean equals(Object obj) {
			if (this == obj)
				return true;
			if (obj == null)
				return false;
			if (getClass() != obj.getClass())
				return false;
			final insert_actionsStruct other = (insert_actionsStruct) obj;

			if (this.FILE_SEQ == null) {
				if (other.FILE_SEQ != null)
					return false;

			} else if (!this.FILE_SEQ.equals(other.FILE_SEQ))

				return false;

			if (this.FILE_TYPE == null) {
				if (other.FILE_TYPE != null)
					return false;

			} else if (!this.FILE_TYPE.equals(other.FILE_TYPE))

				return false;

			if (this.FILE_SERIES == null) {
				if (other.FILE_SERIES != null)
					return false;

			} else if (!this.FILE_SERIES.equals(other.FILE_SERIES))

				return false;

			if (this.FILE_NBR == null) {
				if (other.FILE_NBR != null)
					return false;

			} else if (!this.FILE_NBR.equals(other.FILE_NBR))

				return false;

			if (this.ACTION_TYPE == null) {
				if (other.ACTION_TYPE != null)
					return false;

			} else if (!this.ACTION_TYPE.equals(other.ACTION_TYPE))

				return false;

			if (this.ACTION_DATE == null) {
				if (other.ACTION_DATE != null)
					return false;

			} else if (!this.ACTION_DATE.equals(other.ACTION_DATE))

				return false;

			return true;
		}

		public void copyDataTo(insert_actionsStruct other) {

			other.FILE_SEQ = this.FILE_SEQ;
			other.FILE_TYPE = this.FILE_TYPE;
			other.FILE_SERIES = this.FILE_SERIES;
			other.FILE_NBR = this.FILE_NBR;
			other.ACTION_TYPE = this.ACTION_TYPE;
			other.ACTION_DATE = this.ACTION_DATE;
			other.MANUAL_DUE_DATE = this.MANUAL_DUE_DATE;
			other.RESPONSIBLE_USER = this.RESPONSIBLE_USER;
			other.ACTION_NOTES1 = this.ACTION_NOTES1;
			other.ACTION_NOTES2 = this.ACTION_NOTES2;
			other.ACTION_NOTES3 = this.ACTION_NOTES3;
			other.ACTION_NOTES4 = this.ACTION_NOTES4;
			other.ACTION_NOTES5 = this.ACTION_NOTES5;
			other.GENERAL_NOTES = this.GENERAL_NOTES;
			other.SELECTED_OPTIONS_TEXT = this.SELECTED_OPTIONS_TEXT;
			other.ACTION_USER = this.ACTION_USER;
			other.ACTION_CATEGORY = this.ACTION_CATEGORY;
			other.SPECIAL_FINAL_STATUS = this.SPECIAL_FINAL_STATUS;
			other.JOURNAL_CODE = this.JOURNAL_CODE;
			other.PUBLICATION_DATE = this.PUBLICATION_DATE;
			other.IPAS_PROC_TYP = this.IPAS_PROC_TYP;
			other.IPAS_PROC_NBR = this.IPAS_PROC_NBR;
			other.IPAS_ACTION_NBR = this.IPAS_ACTION_NBR;

		}

		public void copyKeysDataTo(insert_actionsStruct other) {

			other.FILE_SEQ = this.FILE_SEQ;
			other.FILE_TYPE = this.FILE_TYPE;
			other.FILE_SERIES = this.FILE_SERIES;
			other.FILE_NBR = this.FILE_NBR;
			other.ACTION_TYPE = this.ACTION_TYPE;
			other.ACTION_DATE = this.ACTION_DATE;

		}

		private String readString(ObjectInputStream dis) throws IOException {
			String strReturn = null;
			int length = 0;
			length = dis.readInt();
			if (length == -1) {
				strReturn = null;
			} else {
				if (length > commonByteArray_WIPO_PROJECTS_E1a_Marc_a_interm_Copy.length) {
					if (length < 1024 && commonByteArray_WIPO_PROJECTS_E1a_Marc_a_interm_Copy.length == 0) {
						commonByteArray_WIPO_PROJECTS_E1a_Marc_a_interm_Copy = new byte[1024];
					} else {
						commonByteArray_WIPO_PROJECTS_E1a_Marc_a_interm_Copy = new byte[2 * length];
					}
				}
				dis.readFully(commonByteArray_WIPO_PROJECTS_E1a_Marc_a_interm_Copy, 0, length);
				strReturn = new String(commonByteArray_WIPO_PROJECTS_E1a_Marc_a_interm_Copy, 0, length, utf8Charset);
			}
			return strReturn;
		}

		private void writeString(String str, ObjectOutputStream dos) throws IOException {
			if (str == null) {
				dos.writeInt(-1);
			} else {
				byte[] byteArray = str.getBytes(utf8Charset);
				dos.writeInt(byteArray.length);
				dos.write(byteArray);
			}
		}

		private java.util.Date readDate(ObjectInputStream dis) throws IOException {
			java.util.Date dateReturn = null;
			int length = 0;
			length = dis.readByte();
			if (length == -1) {
				dateReturn = null;
			} else {
				dateReturn = new Date(dis.readLong());
			}
			return dateReturn;
		}

		private void writeDate(java.util.Date date1, ObjectOutputStream dos) throws IOException {
			if (date1 == null) {
				dos.writeByte(-1);
			} else {
				dos.writeByte(0);
				dos.writeLong(date1.getTime());
			}
		}

		public void readData(ObjectInputStream dis) {

			synchronized (commonByteArrayLock_WIPO_PROJECTS_E1a_Marc_a_interm_Copy) {

				try {

					int length = 0;

					this.FILE_SEQ = readString(dis);

					this.FILE_TYPE = readString(dis);

					this.FILE_SERIES = (BigDecimal) dis.readObject();

					this.FILE_NBR = (BigDecimal) dis.readObject();

					this.ACTION_TYPE = readString(dis);

					this.ACTION_DATE = readDate(dis);

					this.MANUAL_DUE_DATE = readDate(dis);

					this.RESPONSIBLE_USER = (BigDecimal) dis.readObject();

					this.ACTION_NOTES1 = readString(dis);

					this.ACTION_NOTES2 = readString(dis);

					this.ACTION_NOTES3 = readString(dis);

					this.ACTION_NOTES4 = readString(dis);

					this.ACTION_NOTES5 = readString(dis);

					this.GENERAL_NOTES = readString(dis);

					this.SELECTED_OPTIONS_TEXT = readString(dis);

					this.ACTION_USER = (BigDecimal) dis.readObject();

					this.ACTION_CATEGORY = readString(dis);

					this.SPECIAL_FINAL_STATUS = readString(dis);

					this.JOURNAL_CODE = readString(dis);

					this.PUBLICATION_DATE = readDate(dis);

					this.IPAS_PROC_TYP = readString(dis);

					this.IPAS_PROC_NBR = (BigDecimal) dis.readObject();

					this.IPAS_ACTION_NBR = (BigDecimal) dis.readObject();

				} catch (IOException e) {
					throw new RuntimeException(e);

				} catch (ClassNotFoundException eCNFE) {
					throw new RuntimeException(eCNFE);

				}

			}

		}

		public void writeData(ObjectOutputStream dos) {
			try {

				// String

				writeString(this.FILE_SEQ, dos);

				// String

				writeString(this.FILE_TYPE, dos);

				// BigDecimal

				dos.writeObject(this.FILE_SERIES);

				// BigDecimal

				dos.writeObject(this.FILE_NBR);

				// String

				writeString(this.ACTION_TYPE, dos);

				// java.util.Date

				writeDate(this.ACTION_DATE, dos);

				// java.util.Date

				writeDate(this.MANUAL_DUE_DATE, dos);

				// BigDecimal

				dos.writeObject(this.RESPONSIBLE_USER);

				// String

				writeString(this.ACTION_NOTES1, dos);

				// String

				writeString(this.ACTION_NOTES2, dos);

				// String

				writeString(this.ACTION_NOTES3, dos);

				// String

				writeString(this.ACTION_NOTES4, dos);

				// String

				writeString(this.ACTION_NOTES5, dos);

				// String

				writeString(this.GENERAL_NOTES, dos);

				// String

				writeString(this.SELECTED_OPTIONS_TEXT, dos);

				// BigDecimal

				dos.writeObject(this.ACTION_USER);

				// String

				writeString(this.ACTION_CATEGORY, dos);

				// String

				writeString(this.SPECIAL_FINAL_STATUS, dos);

				// String

				writeString(this.JOURNAL_CODE, dos);

				// java.util.Date

				writeDate(this.PUBLICATION_DATE, dos);

				// String

				writeString(this.IPAS_PROC_TYP, dos);

				// BigDecimal

				dos.writeObject(this.IPAS_PROC_NBR);

				// BigDecimal

				dos.writeObject(this.IPAS_ACTION_NBR);

			} catch (IOException e) {
				throw new RuntimeException(e);
			}

		}

		public String toString() {

			StringBuilder sb = new StringBuilder();
			sb.append(super.toString());
			sb.append("[");
			sb.append("FILE_SEQ=" + FILE_SEQ);
			sb.append(",FILE_TYPE=" + FILE_TYPE);
			sb.append(",FILE_SERIES=" + String.valueOf(FILE_SERIES));
			sb.append(",FILE_NBR=" + String.valueOf(FILE_NBR));
			sb.append(",ACTION_TYPE=" + ACTION_TYPE);
			sb.append(",ACTION_DATE=" + String.valueOf(ACTION_DATE));
			sb.append(",MANUAL_DUE_DATE=" + String.valueOf(MANUAL_DUE_DATE));
			sb.append(",RESPONSIBLE_USER=" + String.valueOf(RESPONSIBLE_USER));
			sb.append(",ACTION_NOTES1=" + ACTION_NOTES1);
			sb.append(",ACTION_NOTES2=" + ACTION_NOTES2);
			sb.append(",ACTION_NOTES3=" + ACTION_NOTES3);
			sb.append(",ACTION_NOTES4=" + ACTION_NOTES4);
			sb.append(",ACTION_NOTES5=" + ACTION_NOTES5);
			sb.append(",GENERAL_NOTES=" + GENERAL_NOTES);
			sb.append(",SELECTED_OPTIONS_TEXT=" + SELECTED_OPTIONS_TEXT);
			sb.append(",ACTION_USER=" + String.valueOf(ACTION_USER));
			sb.append(",ACTION_CATEGORY=" + ACTION_CATEGORY);
			sb.append(",SPECIAL_FINAL_STATUS=" + SPECIAL_FINAL_STATUS);
			sb.append(",JOURNAL_CODE=" + JOURNAL_CODE);
			sb.append(",PUBLICATION_DATE=" + String.valueOf(PUBLICATION_DATE));
			sb.append(",IPAS_PROC_TYP=" + IPAS_PROC_TYP);
			sb.append(",IPAS_PROC_NBR=" + String.valueOf(IPAS_PROC_NBR));
			sb.append(",IPAS_ACTION_NBR=" + String.valueOf(IPAS_ACTION_NBR));
			sb.append("]");

			return sb.toString();
		}

		/**
		 * Compare keys
		 */
		public int compareTo(insert_actionsStruct other) {

			int returnValue = -1;

			returnValue = checkNullsAndCompare(this.FILE_SEQ, other.FILE_SEQ);
			if (returnValue != 0) {
				return returnValue;
			}

			returnValue = checkNullsAndCompare(this.FILE_TYPE, other.FILE_TYPE);
			if (returnValue != 0) {
				return returnValue;
			}

			returnValue = checkNullsAndCompare(this.FILE_SERIES, other.FILE_SERIES);
			if (returnValue != 0) {
				return returnValue;
			}

			returnValue = checkNullsAndCompare(this.FILE_NBR, other.FILE_NBR);
			if (returnValue != 0) {
				return returnValue;
			}

			returnValue = checkNullsAndCompare(this.ACTION_TYPE, other.ACTION_TYPE);
			if (returnValue != 0) {
				return returnValue;
			}

			returnValue = checkNullsAndCompare(this.ACTION_DATE, other.ACTION_DATE);
			if (returnValue != 0) {
				return returnValue;
			}

			return returnValue;
		}

		private int checkNullsAndCompare(Object object1, Object object2) {
			int returnValue = 0;
			if (object1 instanceof Comparable && object2 instanceof Comparable) {
				returnValue = ((Comparable) object1).compareTo(object2);
			} else if (object1 != null && object2 != null) {
				returnValue = compareStrings(object1.toString(), object2.toString());
			} else if (object1 == null && object2 != null) {
				returnValue = 1;
			} else if (object1 != null && object2 == null) {
				returnValue = -1;
			} else {
				returnValue = 0;
			}

			return returnValue;
		}

		private int compareStrings(String string1, String string2) {
			return string1.compareTo(string2);
		}

	}

	public static class row8Struct implements routines.system.IPersistableRow<row8Struct> {
		final static byte[] commonByteArrayLock_WIPO_PROJECTS_E1a_Marc_a_interm_Copy = new byte[0];
		static byte[] commonByteArray_WIPO_PROJECTS_E1a_Marc_a_interm_Copy = new byte[0];

		public Long num_acta;

		public Long getNum_acta() {
			return this.num_acta;
		}

		public Short sec_movimiento;

		public Short getSec_movimiento() {
			return this.sec_movimiento;
		}

		public String tip_movimiento;

		public String getTip_movimiento() {
			return this.tip_movimiento;
		}

		public java.util.Date fec_movimiento;

		public java.util.Date getFec_movimiento() {
			return this.fec_movimiento;
		}

		public String obs_movimiento;

		public String getObs_movimiento() {
			return this.obs_movimiento;
		}

		public String cod_usuario;

		public String getCod_usuario() {
			return this.cod_usuario;
		}

		public Integer num_registro;

		public Integer getNum_registro() {
			return this.num_registro;
		}

		public java.util.Date fec_vencimiento;

		public java.util.Date getFec_vencimiento() {
			return this.fec_vencimiento;
		}

		public String ind_falta_aprob;

		public String getInd_falta_aprob() {
			return this.ind_falta_aprob;
		}

		public String obs1;

		public String getObs1() {
			return this.obs1;
		}

		public String obs2;

		public String getObs2() {
			return this.obs2;
		}

		public String obs3;

		public String getObs3() {
			return this.obs3;
		}

		public String obs4;

		public String getObs4() {
			return this.obs4;
		}

		public String obs5;

		public String getObs5() {
			return this.obs5;
		}

		public String secs_opciones;

		public String getSecs_opciones() {
			return this.secs_opciones;
		}

		public String ind_impresion;

		public String getInd_impresion() {
			return this.ind_impresion;
		}

		public String cod_status_ant;

		public String getCod_status_ant() {
			return this.cod_status_ant;
		}

		public java.util.Date fec_movimiento_ant;

		public java.util.Date getFec_movimiento_ant() {
			return this.fec_movimiento_ant;
		}

		public String cod_status;

		public String getCod_status() {
			return this.cod_status;
		}

		private String readString(ObjectInputStream dis) throws IOException {
			String strReturn = null;
			int length = 0;
			length = dis.readInt();
			if (length == -1) {
				strReturn = null;
			} else {
				if (length > commonByteArray_WIPO_PROJECTS_E1a_Marc_a_interm_Copy.length) {
					if (length < 1024 && commonByteArray_WIPO_PROJECTS_E1a_Marc_a_interm_Copy.length == 0) {
						commonByteArray_WIPO_PROJECTS_E1a_Marc_a_interm_Copy = new byte[1024];
					} else {
						commonByteArray_WIPO_PROJECTS_E1a_Marc_a_interm_Copy = new byte[2 * length];
					}
				}
				dis.readFully(commonByteArray_WIPO_PROJECTS_E1a_Marc_a_interm_Copy, 0, length);
				strReturn = new String(commonByteArray_WIPO_PROJECTS_E1a_Marc_a_interm_Copy, 0, length, utf8Charset);
			}
			return strReturn;
		}

		private void writeString(String str, ObjectOutputStream dos) throws IOException {
			if (str == null) {
				dos.writeInt(-1);
			} else {
				byte[] byteArray = str.getBytes(utf8Charset);
				dos.writeInt(byteArray.length);
				dos.write(byteArray);
			}
		}

		private java.util.Date readDate(ObjectInputStream dis) throws IOException {
			java.util.Date dateReturn = null;
			int length = 0;
			length = dis.readByte();
			if (length == -1) {
				dateReturn = null;
			} else {
				dateReturn = new Date(dis.readLong());
			}
			return dateReturn;
		}

		private void writeDate(java.util.Date date1, ObjectOutputStream dos) throws IOException {
			if (date1 == null) {
				dos.writeByte(-1);
			} else {
				dos.writeByte(0);
				dos.writeLong(date1.getTime());
			}
		}

		private Integer readInteger(ObjectInputStream dis) throws IOException {
			Integer intReturn;
			int length = 0;
			length = dis.readByte();
			if (length == -1) {
				intReturn = null;
			} else {
				intReturn = dis.readInt();
			}
			return intReturn;
		}

		private void writeInteger(Integer intNum, ObjectOutputStream dos) throws IOException {
			if (intNum == null) {
				dos.writeByte(-1);
			} else {
				dos.writeByte(0);
				dos.writeInt(intNum);
			}
		}

		public void readData(ObjectInputStream dis) {

			synchronized (commonByteArrayLock_WIPO_PROJECTS_E1a_Marc_a_interm_Copy) {

				try {

					int length = 0;

					length = dis.readByte();
					if (length == -1) {
						this.num_acta = null;
					} else {
						this.num_acta = dis.readLong();
					}

					length = dis.readByte();
					if (length == -1) {
						this.sec_movimiento = null;
					} else {
						this.sec_movimiento = dis.readShort();
					}

					this.tip_movimiento = readString(dis);

					this.fec_movimiento = readDate(dis);

					this.obs_movimiento = readString(dis);

					this.cod_usuario = readString(dis);

					this.num_registro = readInteger(dis);

					this.fec_vencimiento = readDate(dis);

					this.ind_falta_aprob = readString(dis);

					this.obs1 = readString(dis);

					this.obs2 = readString(dis);

					this.obs3 = readString(dis);

					this.obs4 = readString(dis);

					this.obs5 = readString(dis);

					this.secs_opciones = readString(dis);

					this.ind_impresion = readString(dis);

					this.cod_status_ant = readString(dis);

					this.fec_movimiento_ant = readDate(dis);

					this.cod_status = readString(dis);

				} catch (IOException e) {
					throw new RuntimeException(e);

				}

			}

		}

		public void writeData(ObjectOutputStream dos) {
			try {

				// Long

				if (this.num_acta == null) {
					dos.writeByte(-1);
				} else {
					dos.writeByte(0);
					dos.writeLong(this.num_acta);
				}

				// Short

				if (this.sec_movimiento == null) {
					dos.writeByte(-1);
				} else {
					dos.writeByte(0);
					dos.writeShort(this.sec_movimiento);
				}

				// String

				writeString(this.tip_movimiento, dos);

				// java.util.Date

				writeDate(this.fec_movimiento, dos);

				// String

				writeString(this.obs_movimiento, dos);

				// String

				writeString(this.cod_usuario, dos);

				// Integer

				writeInteger(this.num_registro, dos);

				// java.util.Date

				writeDate(this.fec_vencimiento, dos);

				// String

				writeString(this.ind_falta_aprob, dos);

				// String

				writeString(this.obs1, dos);

				// String

				writeString(this.obs2, dos);

				// String

				writeString(this.obs3, dos);

				// String

				writeString(this.obs4, dos);

				// String

				writeString(this.obs5, dos);

				// String

				writeString(this.secs_opciones, dos);

				// String

				writeString(this.ind_impresion, dos);

				// String

				writeString(this.cod_status_ant, dos);

				// java.util.Date

				writeDate(this.fec_movimiento_ant, dos);

				// String

				writeString(this.cod_status, dos);

			} catch (IOException e) {
				throw new RuntimeException(e);
			}

		}

		public String toString() {

			StringBuilder sb = new StringBuilder();
			sb.append(super.toString());
			sb.append("[");
			sb.append("num_acta=" + String.valueOf(num_acta));
			sb.append(",sec_movimiento=" + String.valueOf(sec_movimiento));
			sb.append(",tip_movimiento=" + tip_movimiento);
			sb.append(",fec_movimiento=" + String.valueOf(fec_movimiento));
			sb.append(",obs_movimiento=" + obs_movimiento);
			sb.append(",cod_usuario=" + cod_usuario);
			sb.append(",num_registro=" + String.valueOf(num_registro));
			sb.append(",fec_vencimiento=" + String.valueOf(fec_vencimiento));
			sb.append(",ind_falta_aprob=" + ind_falta_aprob);
			sb.append(",obs1=" + obs1);
			sb.append(",obs2=" + obs2);
			sb.append(",obs3=" + obs3);
			sb.append(",obs4=" + obs4);
			sb.append(",obs5=" + obs5);
			sb.append(",secs_opciones=" + secs_opciones);
			sb.append(",ind_impresion=" + ind_impresion);
			sb.append(",cod_status_ant=" + cod_status_ant);
			sb.append(",fec_movimiento_ant=" + String.valueOf(fec_movimiento_ant));
			sb.append(",cod_status=" + cod_status);
			sb.append("]");

			return sb.toString();
		}

		/**
		 * Compare keys
		 */
		public int compareTo(row8Struct other) {

			int returnValue = -1;

			return returnValue;
		}

		private int checkNullsAndCompare(Object object1, Object object2) {
			int returnValue = 0;
			if (object1 instanceof Comparable && object2 instanceof Comparable) {
				returnValue = ((Comparable) object1).compareTo(object2);
			} else if (object1 != null && object2 != null) {
				returnValue = compareStrings(object1.toString(), object2.toString());
			} else if (object1 == null && object2 != null) {
				returnValue = 1;
			} else if (object1 != null && object2 == null) {
				returnValue = -1;
			} else {
				returnValue = 0;
			}

			return returnValue;
		}

		private int compareStrings(String string1, String string2) {
			return string1.compareTo(string2);
		}

	}

	public static class after_tDBInput_3Struct implements routines.system.IPersistableRow<after_tDBInput_3Struct> {
		final static byte[] commonByteArrayLock_WIPO_PROJECTS_E1a_Marc_a_interm_Copy = new byte[0];
		static byte[] commonByteArray_WIPO_PROJECTS_E1a_Marc_a_interm_Copy = new byte[0];

		public Long num_acta;

		public Long getNum_acta() {
			return this.num_acta;
		}

		public Short sec_movimiento;

		public Short getSec_movimiento() {
			return this.sec_movimiento;
		}

		public String tip_movimiento;

		public String getTip_movimiento() {
			return this.tip_movimiento;
		}

		public java.util.Date fec_movimiento;

		public java.util.Date getFec_movimiento() {
			return this.fec_movimiento;
		}

		public String obs_movimiento;

		public String getObs_movimiento() {
			return this.obs_movimiento;
		}

		public String cod_usuario;

		public String getCod_usuario() {
			return this.cod_usuario;
		}

		public Integer num_registro;

		public Integer getNum_registro() {
			return this.num_registro;
		}

		public java.util.Date fec_vencimiento;

		public java.util.Date getFec_vencimiento() {
			return this.fec_vencimiento;
		}

		public String ind_falta_aprob;

		public String getInd_falta_aprob() {
			return this.ind_falta_aprob;
		}

		public String obs1;

		public String getObs1() {
			return this.obs1;
		}

		public String obs2;

		public String getObs2() {
			return this.obs2;
		}

		public String obs3;

		public String getObs3() {
			return this.obs3;
		}

		public String obs4;

		public String getObs4() {
			return this.obs4;
		}

		public String obs5;

		public String getObs5() {
			return this.obs5;
		}

		public String secs_opciones;

		public String getSecs_opciones() {
			return this.secs_opciones;
		}

		public String ind_impresion;

		public String getInd_impresion() {
			return this.ind_impresion;
		}

		public String cod_status_ant;

		public String getCod_status_ant() {
			return this.cod_status_ant;
		}

		public java.util.Date fec_movimiento_ant;

		public java.util.Date getFec_movimiento_ant() {
			return this.fec_movimiento_ant;
		}

		public String cod_status;

		public String getCod_status() {
			return this.cod_status;
		}

		private String readString(ObjectInputStream dis) throws IOException {
			String strReturn = null;
			int length = 0;
			length = dis.readInt();
			if (length == -1) {
				strReturn = null;
			} else {
				if (length > commonByteArray_WIPO_PROJECTS_E1a_Marc_a_interm_Copy.length) {
					if (length < 1024 && commonByteArray_WIPO_PROJECTS_E1a_Marc_a_interm_Copy.length == 0) {
						commonByteArray_WIPO_PROJECTS_E1a_Marc_a_interm_Copy = new byte[1024];
					} else {
						commonByteArray_WIPO_PROJECTS_E1a_Marc_a_interm_Copy = new byte[2 * length];
					}
				}
				dis.readFully(commonByteArray_WIPO_PROJECTS_E1a_Marc_a_interm_Copy, 0, length);
				strReturn = new String(commonByteArray_WIPO_PROJECTS_E1a_Marc_a_interm_Copy, 0, length, utf8Charset);
			}
			return strReturn;
		}

		private void writeString(String str, ObjectOutputStream dos) throws IOException {
			if (str == null) {
				dos.writeInt(-1);
			} else {
				byte[] byteArray = str.getBytes(utf8Charset);
				dos.writeInt(byteArray.length);
				dos.write(byteArray);
			}
		}

		private java.util.Date readDate(ObjectInputStream dis) throws IOException {
			java.util.Date dateReturn = null;
			int length = 0;
			length = dis.readByte();
			if (length == -1) {
				dateReturn = null;
			} else {
				dateReturn = new Date(dis.readLong());
			}
			return dateReturn;
		}

		private void writeDate(java.util.Date date1, ObjectOutputStream dos) throws IOException {
			if (date1 == null) {
				dos.writeByte(-1);
			} else {
				dos.writeByte(0);
				dos.writeLong(date1.getTime());
			}
		}

		private Integer readInteger(ObjectInputStream dis) throws IOException {
			Integer intReturn;
			int length = 0;
			length = dis.readByte();
			if (length == -1) {
				intReturn = null;
			} else {
				intReturn = dis.readInt();
			}
			return intReturn;
		}

		private void writeInteger(Integer intNum, ObjectOutputStream dos) throws IOException {
			if (intNum == null) {
				dos.writeByte(-1);
			} else {
				dos.writeByte(0);
				dos.writeInt(intNum);
			}
		}

		public void readData(ObjectInputStream dis) {

			synchronized (commonByteArrayLock_WIPO_PROJECTS_E1a_Marc_a_interm_Copy) {

				try {

					int length = 0;

					length = dis.readByte();
					if (length == -1) {
						this.num_acta = null;
					} else {
						this.num_acta = dis.readLong();
					}

					length = dis.readByte();
					if (length == -1) {
						this.sec_movimiento = null;
					} else {
						this.sec_movimiento = dis.readShort();
					}

					this.tip_movimiento = readString(dis);

					this.fec_movimiento = readDate(dis);

					this.obs_movimiento = readString(dis);

					this.cod_usuario = readString(dis);

					this.num_registro = readInteger(dis);

					this.fec_vencimiento = readDate(dis);

					this.ind_falta_aprob = readString(dis);

					this.obs1 = readString(dis);

					this.obs2 = readString(dis);

					this.obs3 = readString(dis);

					this.obs4 = readString(dis);

					this.obs5 = readString(dis);

					this.secs_opciones = readString(dis);

					this.ind_impresion = readString(dis);

					this.cod_status_ant = readString(dis);

					this.fec_movimiento_ant = readDate(dis);

					this.cod_status = readString(dis);

				} catch (IOException e) {
					throw new RuntimeException(e);

				}

			}

		}

		public void writeData(ObjectOutputStream dos) {
			try {

				// Long

				if (this.num_acta == null) {
					dos.writeByte(-1);
				} else {
					dos.writeByte(0);
					dos.writeLong(this.num_acta);
				}

				// Short

				if (this.sec_movimiento == null) {
					dos.writeByte(-1);
				} else {
					dos.writeByte(0);
					dos.writeShort(this.sec_movimiento);
				}

				// String

				writeString(this.tip_movimiento, dos);

				// java.util.Date

				writeDate(this.fec_movimiento, dos);

				// String

				writeString(this.obs_movimiento, dos);

				// String

				writeString(this.cod_usuario, dos);

				// Integer

				writeInteger(this.num_registro, dos);

				// java.util.Date

				writeDate(this.fec_vencimiento, dos);

				// String

				writeString(this.ind_falta_aprob, dos);

				// String

				writeString(this.obs1, dos);

				// String

				writeString(this.obs2, dos);

				// String

				writeString(this.obs3, dos);

				// String

				writeString(this.obs4, dos);

				// String

				writeString(this.obs5, dos);

				// String

				writeString(this.secs_opciones, dos);

				// String

				writeString(this.ind_impresion, dos);

				// String

				writeString(this.cod_status_ant, dos);

				// java.util.Date

				writeDate(this.fec_movimiento_ant, dos);

				// String

				writeString(this.cod_status, dos);

			} catch (IOException e) {
				throw new RuntimeException(e);
			}

		}

		public String toString() {

			StringBuilder sb = new StringBuilder();
			sb.append(super.toString());
			sb.append("[");
			sb.append("num_acta=" + String.valueOf(num_acta));
			sb.append(",sec_movimiento=" + String.valueOf(sec_movimiento));
			sb.append(",tip_movimiento=" + tip_movimiento);
			sb.append(",fec_movimiento=" + String.valueOf(fec_movimiento));
			sb.append(",obs_movimiento=" + obs_movimiento);
			sb.append(",cod_usuario=" + cod_usuario);
			sb.append(",num_registro=" + String.valueOf(num_registro));
			sb.append(",fec_vencimiento=" + String.valueOf(fec_vencimiento));
			sb.append(",ind_falta_aprob=" + ind_falta_aprob);
			sb.append(",obs1=" + obs1);
			sb.append(",obs2=" + obs2);
			sb.append(",obs3=" + obs3);
			sb.append(",obs4=" + obs4);
			sb.append(",obs5=" + obs5);
			sb.append(",secs_opciones=" + secs_opciones);
			sb.append(",ind_impresion=" + ind_impresion);
			sb.append(",cod_status_ant=" + cod_status_ant);
			sb.append(",fec_movimiento_ant=" + String.valueOf(fec_movimiento_ant));
			sb.append(",cod_status=" + cod_status);
			sb.append("]");

			return sb.toString();
		}

		/**
		 * Compare keys
		 */
		public int compareTo(after_tDBInput_3Struct other) {

			int returnValue = -1;

			return returnValue;
		}

		private int checkNullsAndCompare(Object object1, Object object2) {
			int returnValue = 0;
			if (object1 instanceof Comparable && object2 instanceof Comparable) {
				returnValue = ((Comparable) object1).compareTo(object2);
			} else if (object1 != null && object2 != null) {
				returnValue = compareStrings(object1.toString(), object2.toString());
			} else if (object1 == null && object2 != null) {
				returnValue = 1;
			} else if (object1 != null && object2 == null) {
				returnValue = -1;
			} else {
				returnValue = 0;
			}

			return returnValue;
		}

		private int compareStrings(String string1, String string2) {
			return string1.compareTo(string2);
		}

	}

	public void tDBInput_3Process(final java.util.Map<String, Object> globalMap) throws TalendException {
		globalMap.put("tDBInput_3_SUBPROCESS_STATE", 0);

		final boolean execStat = this.execStat;

		String iterateId = "";

		String currentComponent = "";
		java.util.Map<String, Object> resourceMap = new java.util.HashMap<String, Object>();

		try {
			// TDI-39566 avoid throwing an useless Exception
			boolean resumeIt = true;
			if (globalResumeTicket == false && resumeEntryMethodName != null) {
				String currentMethodName = new java.lang.Exception().getStackTrace()[0].getMethodName();
				resumeIt = resumeEntryMethodName.equals(currentMethodName);
			}
			if (resumeIt || globalResumeTicket) { // start the resume
				globalResumeTicket = true;

				tDBInput_4Process(globalMap);
				tDBInput_6Process(globalMap);

				row8Struct row8 = new row8Struct();
				insert_actionsStruct insert_actions = new insert_actionsStruct();
				row10Struct row10 = new row10Struct();

				/**
				 * [tLogRow_4 begin ] start
				 */

				ok_Hash.put("tLogRow_4", false);
				start_Hash.put("tLogRow_4", System.currentTimeMillis());

				currentComponent = "tLogRow_4";

				if (execStat) {
					runStat.updateStatOnConnection(resourceMap, iterateId, 0, 0, "row10");
				}

				int tos_count_tLogRow_4 = 0;

				///////////////////////

				final String OUTPUT_FIELD_SEPARATOR_tLogRow_4 = "|";
				java.io.PrintStream consoleOut_tLogRow_4 = null;

				StringBuilder strBuffer_tLogRow_4 = null;
				int nb_line_tLogRow_4 = 0;
///////////////////////    			

				/**
				 * [tLogRow_4 begin ] stop
				 */

				/**
				 * [tDBOutput_4 begin ] start
				 */

				ok_Hash.put("tDBOutput_4", false);
				start_Hash.put("tDBOutput_4", System.currentTimeMillis());

				currentComponent = "tDBOutput_4";

				if (execStat) {
					runStat.updateStatOnConnection(resourceMap, iterateId, 0, 0, "insert_actions");
				}

				int tos_count_tDBOutput_4 = 0;

				int nb_line_tDBOutput_4 = 0;
				int nb_line_update_tDBOutput_4 = 0;
				int nb_line_inserted_tDBOutput_4 = 0;
				int nb_line_deleted_tDBOutput_4 = 0;
				int nb_line_rejected_tDBOutput_4 = 0;

				int deletedCount_tDBOutput_4 = 0;
				int updatedCount_tDBOutput_4 = 0;
				int insertedCount_tDBOutput_4 = 0;
				int rejectedCount_tDBOutput_4 = 0;
				String dbschema_tDBOutput_4 = null;
				String tableName_tDBOutput_4 = null;
				boolean whetherReject_tDBOutput_4 = false;

				java.util.Calendar calendar_tDBOutput_4 = java.util.Calendar.getInstance();
				long year1_tDBOutput_4 = TalendDate.parseDate("yyyy-MM-dd", "0001-01-01").getTime();
				long year2_tDBOutput_4 = TalendDate.parseDate("yyyy-MM-dd", "1753-01-01").getTime();
				long year10000_tDBOutput_4 = TalendDate.parseDate("yyyy-MM-dd HH:mm:ss", "9999-12-31 24:00:00")
						.getTime();
				long date_tDBOutput_4;

				java.util.Calendar calendar_datetimeoffset_tDBOutput_4 = java.util.Calendar
						.getInstance(java.util.TimeZone.getTimeZone("UTC"));

				int updateKeyCount_tDBOutput_4 = 6;
				if (updateKeyCount_tDBOutput_4 < 1) {
					throw new RuntimeException("For update, Schema must have a key");
				}

				java.sql.Connection conn_tDBOutput_4 = null;
				String dbUser_tDBOutput_4 = null;
				dbschema_tDBOutput_4 = (String) globalMap.get("dbschema_tDBConnection_1");

				conn_tDBOutput_4 = (java.sql.Connection) globalMap.get("conn_tDBConnection_1");

				if (dbschema_tDBOutput_4 == null || dbschema_tDBOutput_4.trim().length() == 0) {
					tableName_tDBOutput_4 = "VW_IMPORT_MARK_ACTIONS";
				} else {
					tableName_tDBOutput_4 = dbschema_tDBOutput_4 + "].[" + "VW_IMPORT_MARK_ACTIONS";
				}
				int count_tDBOutput_4 = 0;

				int rsTruncCountNumber_tDBOutput_4 = 0;
				try (java.sql.Statement stmtTruncCount_tDBOutput_4 = conn_tDBOutput_4.createStatement()) {
					try (java.sql.ResultSet rsTruncCount_tDBOutput_4 = stmtTruncCount_tDBOutput_4
							.executeQuery("SELECT COUNT(1) FROM [" + tableName_tDBOutput_4 + "]")) {
						if (rsTruncCount_tDBOutput_4.next()) {
							rsTruncCountNumber_tDBOutput_4 = rsTruncCount_tDBOutput_4.getInt(1);
						}
					}
				}
				try (java.sql.Statement stmtTrunc_tDBOutput_4 = conn_tDBOutput_4.createStatement()) {
					stmtTrunc_tDBOutput_4.executeUpdate("TRUNCATE TABLE [" + tableName_tDBOutput_4 + "]");
					deletedCount_tDBOutput_4 += rsTruncCountNumber_tDBOutput_4;
				}
				java.sql.PreparedStatement pstmt_tDBOutput_4 = conn_tDBOutput_4
						.prepareStatement("SELECT COUNT(1) FROM [" + tableName_tDBOutput_4
								+ "] WHERE [FILE_SEQ] = ? AND [FILE_TYPE] = ? AND [FILE_SERIES] = ? AND [FILE_NBR] = ? AND [ACTION_TYPE] = ? AND [ACTION_DATE] = ?");
				resourceMap.put("pstmt_tDBOutput_4", pstmt_tDBOutput_4);
				String insert_tDBOutput_4 = "INSERT INTO [" + tableName_tDBOutput_4
						+ "] ([FILE_SEQ],[FILE_TYPE],[FILE_SERIES],[FILE_NBR],[ACTION_TYPE],[ACTION_DATE],[MANUAL_DUE_DATE],[RESPONSIBLE_USER],[ACTION_NOTES1],[ACTION_NOTES2],[ACTION_NOTES3],[ACTION_NOTES4],[ACTION_NOTES5],[GENERAL_NOTES],[SELECTED_OPTIONS_TEXT],[ACTION_USER],[ACTION_CATEGORY],[SPECIAL_FINAL_STATUS],[JOURNAL_CODE],[PUBLICATION_DATE],[IPAS_PROC_TYP],[IPAS_PROC_NBR],[IPAS_ACTION_NBR]) VALUES (?,?,?,?,?,?,?,?,?,?,?,?,?,?,?,?,?,?,?,?,?,?,?)";
				java.sql.PreparedStatement pstmtInsert_tDBOutput_4 = conn_tDBOutput_4
						.prepareStatement(insert_tDBOutput_4);
				resourceMap.put("pstmtInsert_tDBOutput_4", pstmtInsert_tDBOutput_4);
				String update_tDBOutput_4 = "UPDATE [" + tableName_tDBOutput_4
						+ "] SET [MANUAL_DUE_DATE] = ?,[RESPONSIBLE_USER] = ?,[ACTION_NOTES1] = ?,[ACTION_NOTES2] = ?,[ACTION_NOTES3] = ?,[ACTION_NOTES4] = ?,[ACTION_NOTES5] = ?,[GENERAL_NOTES] = ?,[SELECTED_OPTIONS_TEXT] = ?,[ACTION_USER] = ?,[ACTION_CATEGORY] = ?,[SPECIAL_FINAL_STATUS] = ?,[JOURNAL_CODE] = ?,[PUBLICATION_DATE] = ?,[IPAS_PROC_TYP] = ?,[IPAS_PROC_NBR] = ?,[IPAS_ACTION_NBR] = ? WHERE [FILE_SEQ] = ? AND [FILE_TYPE] = ? AND [FILE_SERIES] = ? AND [FILE_NBR] = ? AND [ACTION_TYPE] = ? AND [ACTION_DATE] = ?";
				java.sql.PreparedStatement pstmtUpdate_tDBOutput_4 = conn_tDBOutput_4
						.prepareStatement(update_tDBOutput_4);
				resourceMap.put("pstmtUpdate_tDBOutput_4", pstmtUpdate_tDBOutput_4);
				boolean isShareIdentity_tDBOutput_4 = globalMap.get("shareIdentitySetting_tDBConnection_1") != null
						&& (Boolean) globalMap.get("shareIdentitySetting_tDBConnection_1") == true;

				/**
				 * [tDBOutput_4 begin ] stop
				 */

				/**
				 * [tMap_3 begin ] start
				 */

				ok_Hash.put("tMap_3", false);
				start_Hash.put("tMap_3", System.currentTimeMillis());

				currentComponent = "tMap_3";

				if (execStat) {
					runStat.updateStatOnConnection(resourceMap, iterateId, 0, 0, "row8");
				}

				int tos_count_tMap_3 = 0;

// ###############################
// # Lookup's keys initialization

				org.talend.designer.components.lookup.memory.AdvancedMemoryLookup<row9Struct> tHash_Lookup_row9 = (org.talend.designer.components.lookup.memory.AdvancedMemoryLookup<row9Struct>) ((org.talend.designer.components.lookup.memory.AdvancedMemoryLookup<row9Struct>) globalMap
						.get("tHash_Lookup_row9"));

				row9Struct row9HashKey = new row9Struct();
				row9Struct row9Default = new row9Struct();

				org.talend.designer.components.lookup.memory.AdvancedMemoryLookup<row11Struct> tHash_Lookup_row11 = (org.talend.designer.components.lookup.memory.AdvancedMemoryLookup<row11Struct>) ((org.talend.designer.components.lookup.memory.AdvancedMemoryLookup<row11Struct>) globalMap
						.get("tHash_Lookup_row11"));

				row11Struct row11HashKey = new row11Struct();
				row11Struct row11Default = new row11Struct();
// ###############################        

// ###############################
// # Vars initialization
				class Var__tMap_3__Struct {
				}
				Var__tMap_3__Struct Var__tMap_3 = new Var__tMap_3__Struct();
// ###############################

// ###############################
// # Outputs initialization
				insert_actionsStruct insert_actions_tmp = new insert_actionsStruct();
// ###############################

				/**
				 * [tMap_3 begin ] stop
				 */

				/**
				 * [tDBInput_3 begin ] start
				 */

				ok_Hash.put("tDBInput_3", false);
				start_Hash.put("tDBInput_3", System.currentTimeMillis());

				currentComponent = "tDBInput_3";

				int tos_count_tDBInput_3 = 0;

				int nb_line_tDBInput_3 = 0;
				java.sql.Connection conn_tDBInput_3 = null;
				conn_tDBInput_3 = (java.sql.Connection) globalMap.get("conn_tDBConnection_2");

				java.sql.Statement stmt_tDBInput_3 = conn_tDBInput_3.createStatement();

				String dbquery_tDBInput_3 = "SELECT \n  \"Paraguay\".\"public\".\"movimiento\".\"num_acta\", \n  \"Paraguay\".\"public\".\"movimiento\".\"sec_movimien"
						+ "to\", \n  \"Paraguay\".\"public\".\"movimiento\".\"tip_movimiento\", \n  \"Paraguay\".\"public\".\"movimiento\".\"fec_movi"
						+ "miento\", \n  \"Paraguay\".\"public\".\"movimiento\".\"obs_movimiento\", \n  \"Paraguay\".\"public\".\"movimiento\".\"cod_"
						+ "usuario\", \n  \"Paraguay\".\"public\".\"movimiento\".\"num_registro\", \n  \"Paraguay\".\"public\".\"movimiento\".\"fec_v"
						+ "encimiento\", \n  \"Paraguay\".\"public\".\"movimiento\".\"ind_falta_aprob\", \n  \"Paraguay\".\"public\".\"movimiento\"."
						+ "\"obs1\", \n  \"Paraguay\".\"public\".\"movimiento\".\"obs2\", \n  \"Paraguay\".\"public\".\"movimiento\".\"obs3\", \n  \"P"
						+ "araguay\".\"public\".\"movimiento\".\"obs4\", \n  \"Paraguay\".\"public\".\"movimiento\".\"obs5\", \n  \"Paraguay\".\"publ"
						+ "ic\".\"movimiento\".\"secs_opciones\", \n  \"Paraguay\".\"public\".\"movimiento\".\"ind_impresion\", \n  \"Paraguay\".\"pu"
						+ "blic\".\"movimiento\".\"cod_status_ant\", \n  \"Paraguay\".\"public\".\"movimiento\".\"fec_movimiento_ant\", \n  \"Paragua"
						+ "y\".\"public\".\"movimiento\".\"cod_status\"\nFROM \"Paraguay\".\"public\".\"movimiento\"";

				globalMap.put("tDBInput_3_QUERY", dbquery_tDBInput_3);
				java.sql.ResultSet rs_tDBInput_3 = null;

				try {
					rs_tDBInput_3 = stmt_tDBInput_3.executeQuery(dbquery_tDBInput_3);
					java.sql.ResultSetMetaData rsmd_tDBInput_3 = rs_tDBInput_3.getMetaData();
					int colQtyInRs_tDBInput_3 = rsmd_tDBInput_3.getColumnCount();

					String tmpContent_tDBInput_3 = null;

					while (rs_tDBInput_3.next()) {
						nb_line_tDBInput_3++;

						if (colQtyInRs_tDBInput_3 < 1) {
							row8.num_acta = null;
						} else {

							row8.num_acta = rs_tDBInput_3.getLong(1);
							if (rs_tDBInput_3.wasNull()) {
								row8.num_acta = null;
							}
						}
						if (colQtyInRs_tDBInput_3 < 2) {
							row8.sec_movimiento = null;
						} else {

							row8.sec_movimiento = rs_tDBInput_3.getShort(2);
							if (rs_tDBInput_3.wasNull()) {
								row8.sec_movimiento = null;
							}
						}
						if (colQtyInRs_tDBInput_3 < 3) {
							row8.tip_movimiento = null;
						} else {

							row8.tip_movimiento = routines.system.JDBCUtil.getString(rs_tDBInput_3, 3, false);
						}
						if (colQtyInRs_tDBInput_3 < 4) {
							row8.fec_movimiento = null;
						} else {

							row8.fec_movimiento = routines.system.JDBCUtil.getDate(rs_tDBInput_3, 4);
						}
						if (colQtyInRs_tDBInput_3 < 5) {
							row8.obs_movimiento = null;
						} else {

							row8.obs_movimiento = routines.system.JDBCUtil.getString(rs_tDBInput_3, 5, false);
						}
						if (colQtyInRs_tDBInput_3 < 6) {
							row8.cod_usuario = null;
						} else {

							row8.cod_usuario = routines.system.JDBCUtil.getString(rs_tDBInput_3, 6, false);
						}
						if (colQtyInRs_tDBInput_3 < 7) {
							row8.num_registro = null;
						} else {

							row8.num_registro = rs_tDBInput_3.getInt(7);
							if (rs_tDBInput_3.wasNull()) {
								row8.num_registro = null;
							}
						}
						if (colQtyInRs_tDBInput_3 < 8) {
							row8.fec_vencimiento = null;
						} else {

							row8.fec_vencimiento = routines.system.JDBCUtil.getDate(rs_tDBInput_3, 8);
						}
						if (colQtyInRs_tDBInput_3 < 9) {
							row8.ind_falta_aprob = null;
						} else {

							row8.ind_falta_aprob = routines.system.JDBCUtil.getString(rs_tDBInput_3, 9, false);
						}
						if (colQtyInRs_tDBInput_3 < 10) {
							row8.obs1 = null;
						} else {

							row8.obs1 = routines.system.JDBCUtil.getString(rs_tDBInput_3, 10, false);
						}
						if (colQtyInRs_tDBInput_3 < 11) {
							row8.obs2 = null;
						} else {

							row8.obs2 = routines.system.JDBCUtil.getString(rs_tDBInput_3, 11, false);
						}
						if (colQtyInRs_tDBInput_3 < 12) {
							row8.obs3 = null;
						} else {

							row8.obs3 = routines.system.JDBCUtil.getString(rs_tDBInput_3, 12, false);
						}
						if (colQtyInRs_tDBInput_3 < 13) {
							row8.obs4 = null;
						} else {

							row8.obs4 = routines.system.JDBCUtil.getString(rs_tDBInput_3, 13, false);
						}
						if (colQtyInRs_tDBInput_3 < 14) {
							row8.obs5 = null;
						} else {

							row8.obs5 = routines.system.JDBCUtil.getString(rs_tDBInput_3, 14, false);
						}
						if (colQtyInRs_tDBInput_3 < 15) {
							row8.secs_opciones = null;
						} else {

							row8.secs_opciones = routines.system.JDBCUtil.getString(rs_tDBInput_3, 15, false);
						}
						if (colQtyInRs_tDBInput_3 < 16) {
							row8.ind_impresion = null;
						} else {

							row8.ind_impresion = routines.system.JDBCUtil.getString(rs_tDBInput_3, 16, false);
						}
						if (colQtyInRs_tDBInput_3 < 17) {
							row8.cod_status_ant = null;
						} else {

							row8.cod_status_ant = routines.system.JDBCUtil.getString(rs_tDBInput_3, 17, false);
						}
						if (colQtyInRs_tDBInput_3 < 18) {
							row8.fec_movimiento_ant = null;
						} else {

							row8.fec_movimiento_ant = routines.system.JDBCUtil.getDate(rs_tDBInput_3, 18);
						}
						if (colQtyInRs_tDBInput_3 < 19) {
							row8.cod_status = null;
						} else {

							row8.cod_status = routines.system.JDBCUtil.getString(rs_tDBInput_3, 19, false);
						}

						/**
						 * [tDBInput_3 begin ] stop
						 */

						/**
						 * [tDBInput_3 main ] start
						 */

						currentComponent = "tDBInput_3";

						tos_count_tDBInput_3++;

						/**
						 * [tDBInput_3 main ] stop
						 */

						/**
						 * [tDBInput_3 process_data_begin ] start
						 */

						currentComponent = "tDBInput_3";

						/**
						 * [tDBInput_3 process_data_begin ] stop
						 */

						/**
						 * [tMap_3 main ] start
						 */

						currentComponent = "tMap_3";

						if (execStat) {
							runStat.updateStatOnConnection(iterateId, 1, 1

									, "row8"

							);
						}

						boolean hasCasePrimitiveKeyWithNull_tMap_3 = false;

						// ###############################
						// # Input tables (lookups)
						boolean rejectedInnerJoin_tMap_3 = false;
						boolean mainRowRejected_tMap_3 = false;

						///////////////////////////////////////////////
						// Starting Lookup Table "row9"
						///////////////////////////////////////////////

						boolean forceLooprow9 = false;

						row9Struct row9ObjectFromLookup = null;

						if (!rejectedInnerJoin_tMap_3) { // G_TM_M_020

							hasCasePrimitiveKeyWithNull_tMap_3 = false;

							row9HashKey.FILE_NBR = new BigDecimal(row8.num_acta);

							row9HashKey.hashCodeDirty = true;

							tHash_Lookup_row9.lookup(row9HashKey);

						} // G_TM_M_020

						if (tHash_Lookup_row9 != null && tHash_Lookup_row9.getCount(row9HashKey) > 1) { // G 071

							// System.out.println("WARNING: UNIQUE MATCH is configured for the lookup 'row9'
							// and it contains more one result from keys : row9.FILE_NBR = '" +
							// row9HashKey.FILE_NBR + "'");
						} // G 071

						row9Struct row9 = null;

						row9Struct fromLookup_row9 = null;
						row9 = row9Default;

						if (tHash_Lookup_row9 != null && tHash_Lookup_row9.hasNext()) { // G 099

							fromLookup_row9 = tHash_Lookup_row9.next();

						} // G 099

						if (fromLookup_row9 != null) {
							row9 = fromLookup_row9;
						}

						///////////////////////////////////////////////
						// Starting Lookup Table "row11"
						///////////////////////////////////////////////

						boolean forceLooprow11 = false;

						row11Struct row11ObjectFromLookup = null;

						if (!rejectedInnerJoin_tMap_3) { // G_TM_M_020

							hasCasePrimitiveKeyWithNull_tMap_3 = false;

							row11HashKey.LOGIN = row8.cod_usuario;

							row11HashKey.hashCodeDirty = true;

							tHash_Lookup_row11.lookup(row11HashKey);

						} // G_TM_M_020

						if (tHash_Lookup_row11 != null && tHash_Lookup_row11.getCount(row11HashKey) > 1) { // G 071

							// System.out.println("WARNING: UNIQUE MATCH is configured for the lookup
							// 'row11' and it contains more one result from keys : row11.LOGIN = '" +
							// row11HashKey.LOGIN + "'");
						} // G 071

						row11Struct row11 = null;

						row11Struct fromLookup_row11 = null;
						row11 = row11Default;

						if (tHash_Lookup_row11 != null && tHash_Lookup_row11.hasNext()) { // G 099

							fromLookup_row11 = tHash_Lookup_row11.next();

						} // G 099

						if (fromLookup_row11 != null) {
							row11 = fromLookup_row11;
						}

						// ###############################
						{ // start of Var scope

							// ###############################
							// # Vars tables

							Var__tMap_3__Struct Var = Var__tMap_3;// ###############################
							// ###############################
							// # Output tables

							insert_actions = null;

// # Output table : 'insert_actions'
							insert_actions_tmp.FILE_SEQ = row9.FILE_SEQ;
							insert_actions_tmp.FILE_TYPE = row9.FILE_TYPE;
							insert_actions_tmp.FILE_SERIES = row9.FILE_SERIES;
							insert_actions_tmp.FILE_NBR = row9.FILE_NBR;
							insert_actions_tmp.ACTION_TYPE = row8.tip_movimiento;
							insert_actions_tmp.ACTION_DATE = TalendDate.compareDate(row8.fec_movimiento,
									TalendDate.parseDateInUTC("yyyy-MM-dd HH:mm:ss", "1800-01-01 00:00:00"),
									"yyyy-MM-dd") == 1 ? row8.fec_movimiento
											: row8.fec_movimiento_ant != null ? row8.fec_movimiento_ant
													: TalendDate.getCurrentDate();
							insert_actions_tmp.MANUAL_DUE_DATE = null;
							insert_actions_tmp.RESPONSIBLE_USER = row11.USER_ID != null ? row11.USER_ID
									: new BigDecimal("4");
							insert_actions_tmp.ACTION_NOTES1 = row8.obs1;
							insert_actions_tmp.ACTION_NOTES2 = row8.obs2;
							insert_actions_tmp.ACTION_NOTES3 = row8.obs3;
							insert_actions_tmp.ACTION_NOTES4 = row8.obs4;
							insert_actions_tmp.ACTION_NOTES5 = row8.obs5;
							insert_actions_tmp.GENERAL_NOTES = row8.obs_movimiento;
							insert_actions_tmp.SELECTED_OPTIONS_TEXT = row8.secs_opciones;
							insert_actions_tmp.ACTION_USER = row11.USER_ID != null ? row11.USER_ID
									: new BigDecimal("4");
							insert_actions_tmp.ACTION_CATEGORY = "N";
							insert_actions_tmp.SPECIAL_FINAL_STATUS = null;
							insert_actions_tmp.JOURNAL_CODE = null;
							insert_actions_tmp.PUBLICATION_DATE = null;
							insert_actions_tmp.IPAS_PROC_TYP = null;
							insert_actions_tmp.IPAS_PROC_NBR = null;
							insert_actions_tmp.IPAS_ACTION_NBR = null;
							insert_actions = insert_actions_tmp;
// ###############################

						} // end of Var scope

						rejectedInnerJoin_tMap_3 = false;

						tos_count_tMap_3++;

						/**
						 * [tMap_3 main ] stop
						 */

						/**
						 * [tMap_3 process_data_begin ] start
						 */

						currentComponent = "tMap_3";

						/**
						 * [tMap_3 process_data_begin ] stop
						 */
// Start of branch "insert_actions"
						if (insert_actions != null) {
							row10 = null;

							/**
							 * [tDBOutput_4 main ] start
							 */

							currentComponent = "tDBOutput_4";

							if (execStat) {
								runStat.updateStatOnConnection(iterateId, 1, 1

										, "insert_actions"

								);
							}

							row10 = null;
							whetherReject_tDBOutput_4 = false;

							if (insert_actions.FILE_SEQ == null) {
								pstmt_tDBOutput_4.setNull(1, java.sql.Types.VARCHAR);
							} else {
								pstmt_tDBOutput_4.setString(1, insert_actions.FILE_SEQ);
							}

							if (insert_actions.FILE_TYPE == null) {
								pstmt_tDBOutput_4.setNull(2, java.sql.Types.VARCHAR);
							} else {
								pstmt_tDBOutput_4.setString(2, insert_actions.FILE_TYPE);
							}

							pstmt_tDBOutput_4.setBigDecimal(3, insert_actions.FILE_SERIES);

							pstmt_tDBOutput_4.setBigDecimal(4, insert_actions.FILE_NBR);

							if (insert_actions.ACTION_TYPE == null) {
								pstmt_tDBOutput_4.setNull(5, java.sql.Types.VARCHAR);
							} else {
								pstmt_tDBOutput_4.setString(5, insert_actions.ACTION_TYPE);
							}

							if (insert_actions.ACTION_DATE != null) {
								pstmt_tDBOutput_4.setTimestamp(6,
										new java.sql.Timestamp(insert_actions.ACTION_DATE.getTime()));
							} else {
								pstmt_tDBOutput_4.setNull(6, java.sql.Types.TIMESTAMP);
							}

							int checkCount_tDBOutput_4 = -1;
							try (java.sql.ResultSet rs_tDBOutput_4 = pstmt_tDBOutput_4.executeQuery()) {
								while (rs_tDBOutput_4.next()) {
									checkCount_tDBOutput_4 = rs_tDBOutput_4.getInt(1);
								}
							}
							if (checkCount_tDBOutput_4 > 0) {
								try {
									if (insert_actions.MANUAL_DUE_DATE != null) {
										pstmtUpdate_tDBOutput_4.setTimestamp(1,
												new java.sql.Timestamp(insert_actions.MANUAL_DUE_DATE.getTime()));
									} else {
										pstmtUpdate_tDBOutput_4.setNull(1, java.sql.Types.TIMESTAMP);
									}

									pstmtUpdate_tDBOutput_4.setBigDecimal(2, insert_actions.RESPONSIBLE_USER);

									if (insert_actions.ACTION_NOTES1 == null) {
										pstmtUpdate_tDBOutput_4.setNull(3, java.sql.Types.VARCHAR);
									} else {
										pstmtUpdate_tDBOutput_4.setString(3, insert_actions.ACTION_NOTES1);
									}

									if (insert_actions.ACTION_NOTES2 == null) {
										pstmtUpdate_tDBOutput_4.setNull(4, java.sql.Types.VARCHAR);
									} else {
										pstmtUpdate_tDBOutput_4.setString(4, insert_actions.ACTION_NOTES2);
									}

									if (insert_actions.ACTION_NOTES3 == null) {
										pstmtUpdate_tDBOutput_4.setNull(5, java.sql.Types.VARCHAR);
									} else {
										pstmtUpdate_tDBOutput_4.setString(5, insert_actions.ACTION_NOTES3);
									}

									if (insert_actions.ACTION_NOTES4 == null) {
										pstmtUpdate_tDBOutput_4.setNull(6, java.sql.Types.VARCHAR);
									} else {
										pstmtUpdate_tDBOutput_4.setString(6, insert_actions.ACTION_NOTES4);
									}

									if (insert_actions.ACTION_NOTES5 == null) {
										pstmtUpdate_tDBOutput_4.setNull(7, java.sql.Types.VARCHAR);
									} else {
										pstmtUpdate_tDBOutput_4.setString(7, insert_actions.ACTION_NOTES5);
									}

									if (insert_actions.GENERAL_NOTES == null) {
										pstmtUpdate_tDBOutput_4.setNull(8, java.sql.Types.VARCHAR);
									} else {
										pstmtUpdate_tDBOutput_4.setString(8, insert_actions.GENERAL_NOTES);
									}

									if (insert_actions.SELECTED_OPTIONS_TEXT == null) {
										pstmtUpdate_tDBOutput_4.setNull(9, java.sql.Types.VARCHAR);
									} else {
										pstmtUpdate_tDBOutput_4.setString(9, insert_actions.SELECTED_OPTIONS_TEXT);
									}

									pstmtUpdate_tDBOutput_4.setBigDecimal(10, insert_actions.ACTION_USER);

									if (insert_actions.ACTION_CATEGORY == null) {
										pstmtUpdate_tDBOutput_4.setNull(11, java.sql.Types.VARCHAR);
									} else {
										pstmtUpdate_tDBOutput_4.setString(11, insert_actions.ACTION_CATEGORY);
									}

									if (insert_actions.SPECIAL_FINAL_STATUS == null) {
										pstmtUpdate_tDBOutput_4.setNull(12, java.sql.Types.VARCHAR);
									} else {
										pstmtUpdate_tDBOutput_4.setString(12, insert_actions.SPECIAL_FINAL_STATUS);
									}

									if (insert_actions.JOURNAL_CODE == null) {
										pstmtUpdate_tDBOutput_4.setNull(13, java.sql.Types.VARCHAR);
									} else {
										pstmtUpdate_tDBOutput_4.setString(13, insert_actions.JOURNAL_CODE);
									}

									if (insert_actions.PUBLICATION_DATE != null) {
										pstmtUpdate_tDBOutput_4.setTimestamp(14,
												new java.sql.Timestamp(insert_actions.PUBLICATION_DATE.getTime()));
									} else {
										pstmtUpdate_tDBOutput_4.setNull(14, java.sql.Types.TIMESTAMP);
									}

									if (insert_actions.IPAS_PROC_TYP == null) {
										pstmtUpdate_tDBOutput_4.setNull(15, java.sql.Types.VARCHAR);
									} else {
										pstmtUpdate_tDBOutput_4.setString(15, insert_actions.IPAS_PROC_TYP);
									}

									pstmtUpdate_tDBOutput_4.setBigDecimal(16, insert_actions.IPAS_PROC_NBR);

									pstmtUpdate_tDBOutput_4.setBigDecimal(17, insert_actions.IPAS_ACTION_NBR);

									if (insert_actions.FILE_SEQ == null) {
										pstmtUpdate_tDBOutput_4.setNull(18 + count_tDBOutput_4, java.sql.Types.VARCHAR);
									} else {
										pstmtUpdate_tDBOutput_4.setString(18 + count_tDBOutput_4,
												insert_actions.FILE_SEQ);
									}

									if (insert_actions.FILE_TYPE == null) {
										pstmtUpdate_tDBOutput_4.setNull(19 + count_tDBOutput_4, java.sql.Types.VARCHAR);
									} else {
										pstmtUpdate_tDBOutput_4.setString(19 + count_tDBOutput_4,
												insert_actions.FILE_TYPE);
									}

									pstmtUpdate_tDBOutput_4.setBigDecimal(20 + count_tDBOutput_4,
											insert_actions.FILE_SERIES);

									pstmtUpdate_tDBOutput_4.setBigDecimal(21 + count_tDBOutput_4,
											insert_actions.FILE_NBR);

									if (insert_actions.ACTION_TYPE == null) {
										pstmtUpdate_tDBOutput_4.setNull(22 + count_tDBOutput_4, java.sql.Types.VARCHAR);
									} else {
										pstmtUpdate_tDBOutput_4.setString(22 + count_tDBOutput_4,
												insert_actions.ACTION_TYPE);
									}

									if (insert_actions.ACTION_DATE != null) {
										pstmtUpdate_tDBOutput_4.setTimestamp(23 + count_tDBOutput_4,
												new java.sql.Timestamp(insert_actions.ACTION_DATE.getTime()));
									} else {
										pstmtUpdate_tDBOutput_4.setNull(23 + count_tDBOutput_4,
												java.sql.Types.TIMESTAMP);
									}

									updatedCount_tDBOutput_4 = updatedCount_tDBOutput_4
											+ pstmtUpdate_tDBOutput_4.executeUpdate();
									nb_line_tDBOutput_4++;

								} catch (java.lang.Exception e) {
									whetherReject_tDBOutput_4 = true;
									nb_line_tDBOutput_4++;

									row10 = new row10Struct();
									row10.FILE_SEQ = insert_actions.FILE_SEQ;
									row10.FILE_TYPE = insert_actions.FILE_TYPE;
									row10.FILE_SERIES = insert_actions.FILE_SERIES;
									row10.FILE_NBR = insert_actions.FILE_NBR;
									row10.ACTION_TYPE = insert_actions.ACTION_TYPE;
									row10.ACTION_DATE = insert_actions.ACTION_DATE;
									row10.MANUAL_DUE_DATE = insert_actions.MANUAL_DUE_DATE;
									row10.RESPONSIBLE_USER = insert_actions.RESPONSIBLE_USER;
									row10.ACTION_NOTES1 = insert_actions.ACTION_NOTES1;
									row10.ACTION_NOTES2 = insert_actions.ACTION_NOTES2;
									row10.ACTION_NOTES3 = insert_actions.ACTION_NOTES3;
									row10.ACTION_NOTES4 = insert_actions.ACTION_NOTES4;
									row10.ACTION_NOTES5 = insert_actions.ACTION_NOTES5;
									row10.GENERAL_NOTES = insert_actions.GENERAL_NOTES;
									row10.SELECTED_OPTIONS_TEXT = insert_actions.SELECTED_OPTIONS_TEXT;
									row10.ACTION_USER = insert_actions.ACTION_USER;
									row10.ACTION_CATEGORY = insert_actions.ACTION_CATEGORY;
									row10.SPECIAL_FINAL_STATUS = insert_actions.SPECIAL_FINAL_STATUS;
									row10.JOURNAL_CODE = insert_actions.JOURNAL_CODE;
									row10.PUBLICATION_DATE = insert_actions.PUBLICATION_DATE;
									row10.IPAS_PROC_TYP = insert_actions.IPAS_PROC_TYP;
									row10.IPAS_PROC_NBR = insert_actions.IPAS_PROC_NBR;
									row10.IPAS_ACTION_NBR = insert_actions.IPAS_ACTION_NBR;
									rejectedCount_tDBOutput_4 = rejectedCount_tDBOutput_4 + 1;
									row10.errorCode = ((java.sql.SQLException) e).getSQLState();
									row10.errorMessage = e.getMessage() + " - Line: " + tos_count_tDBOutput_4;
								}
							} else {
								try {
									if (insert_actions.FILE_SEQ == null) {
										pstmtInsert_tDBOutput_4.setNull(1, java.sql.Types.VARCHAR);
									} else {
										pstmtInsert_tDBOutput_4.setString(1, insert_actions.FILE_SEQ);
									}

									if (insert_actions.FILE_TYPE == null) {
										pstmtInsert_tDBOutput_4.setNull(2, java.sql.Types.VARCHAR);
									} else {
										pstmtInsert_tDBOutput_4.setString(2, insert_actions.FILE_TYPE);
									}

									pstmtInsert_tDBOutput_4.setBigDecimal(3, insert_actions.FILE_SERIES);

									pstmtInsert_tDBOutput_4.setBigDecimal(4, insert_actions.FILE_NBR);

									if (insert_actions.ACTION_TYPE == null) {
										pstmtInsert_tDBOutput_4.setNull(5, java.sql.Types.VARCHAR);
									} else {
										pstmtInsert_tDBOutput_4.setString(5, insert_actions.ACTION_TYPE);
									}

									if (insert_actions.ACTION_DATE != null) {
										pstmtInsert_tDBOutput_4.setTimestamp(6,
												new java.sql.Timestamp(insert_actions.ACTION_DATE.getTime()));
									} else {
										pstmtInsert_tDBOutput_4.setNull(6, java.sql.Types.TIMESTAMP);
									}

									if (insert_actions.MANUAL_DUE_DATE != null) {
										pstmtInsert_tDBOutput_4.setTimestamp(7,
												new java.sql.Timestamp(insert_actions.MANUAL_DUE_DATE.getTime()));
									} else {
										pstmtInsert_tDBOutput_4.setNull(7, java.sql.Types.TIMESTAMP);
									}

									pstmtInsert_tDBOutput_4.setBigDecimal(8, insert_actions.RESPONSIBLE_USER);

									if (insert_actions.ACTION_NOTES1 == null) {
										pstmtInsert_tDBOutput_4.setNull(9, java.sql.Types.VARCHAR);
									} else {
										pstmtInsert_tDBOutput_4.setString(9, insert_actions.ACTION_NOTES1);
									}

									if (insert_actions.ACTION_NOTES2 == null) {
										pstmtInsert_tDBOutput_4.setNull(10, java.sql.Types.VARCHAR);
									} else {
										pstmtInsert_tDBOutput_4.setString(10, insert_actions.ACTION_NOTES2);
									}

									if (insert_actions.ACTION_NOTES3 == null) {
										pstmtInsert_tDBOutput_4.setNull(11, java.sql.Types.VARCHAR);
									} else {
										pstmtInsert_tDBOutput_4.setString(11, insert_actions.ACTION_NOTES3);
									}

									if (insert_actions.ACTION_NOTES4 == null) {
										pstmtInsert_tDBOutput_4.setNull(12, java.sql.Types.VARCHAR);
									} else {
										pstmtInsert_tDBOutput_4.setString(12, insert_actions.ACTION_NOTES4);
									}

									if (insert_actions.ACTION_NOTES5 == null) {
										pstmtInsert_tDBOutput_4.setNull(13, java.sql.Types.VARCHAR);
									} else {
										pstmtInsert_tDBOutput_4.setString(13, insert_actions.ACTION_NOTES5);
									}

									if (insert_actions.GENERAL_NOTES == null) {
										pstmtInsert_tDBOutput_4.setNull(14, java.sql.Types.VARCHAR);
									} else {
										pstmtInsert_tDBOutput_4.setString(14, insert_actions.GENERAL_NOTES);
									}

									if (insert_actions.SELECTED_OPTIONS_TEXT == null) {
										pstmtInsert_tDBOutput_4.setNull(15, java.sql.Types.VARCHAR);
									} else {
										pstmtInsert_tDBOutput_4.setString(15, insert_actions.SELECTED_OPTIONS_TEXT);
									}

									pstmtInsert_tDBOutput_4.setBigDecimal(16, insert_actions.ACTION_USER);

									if (insert_actions.ACTION_CATEGORY == null) {
										pstmtInsert_tDBOutput_4.setNull(17, java.sql.Types.VARCHAR);
									} else {
										pstmtInsert_tDBOutput_4.setString(17, insert_actions.ACTION_CATEGORY);
									}

									if (insert_actions.SPECIAL_FINAL_STATUS == null) {
										pstmtInsert_tDBOutput_4.setNull(18, java.sql.Types.VARCHAR);
									} else {
										pstmtInsert_tDBOutput_4.setString(18, insert_actions.SPECIAL_FINAL_STATUS);
									}

									if (insert_actions.JOURNAL_CODE == null) {
										pstmtInsert_tDBOutput_4.setNull(19, java.sql.Types.VARCHAR);
									} else {
										pstmtInsert_tDBOutput_4.setString(19, insert_actions.JOURNAL_CODE);
									}

									if (insert_actions.PUBLICATION_DATE != null) {
										pstmtInsert_tDBOutput_4.setTimestamp(20,
												new java.sql.Timestamp(insert_actions.PUBLICATION_DATE.getTime()));
									} else {
										pstmtInsert_tDBOutput_4.setNull(20, java.sql.Types.TIMESTAMP);
									}

									if (insert_actions.IPAS_PROC_TYP == null) {
										pstmtInsert_tDBOutput_4.setNull(21, java.sql.Types.VARCHAR);
									} else {
										pstmtInsert_tDBOutput_4.setString(21, insert_actions.IPAS_PROC_TYP);
									}

									pstmtInsert_tDBOutput_4.setBigDecimal(22, insert_actions.IPAS_PROC_NBR);

									pstmtInsert_tDBOutput_4.setBigDecimal(23, insert_actions.IPAS_ACTION_NBR);

									insertedCount_tDBOutput_4 = insertedCount_tDBOutput_4
											+ pstmtInsert_tDBOutput_4.executeUpdate();
									nb_line_tDBOutput_4++;
								} catch (java.lang.Exception e) {
									whetherReject_tDBOutput_4 = true;
									nb_line_tDBOutput_4++;

									row10 = new row10Struct();
									row10.FILE_SEQ = insert_actions.FILE_SEQ;
									row10.FILE_TYPE = insert_actions.FILE_TYPE;
									row10.FILE_SERIES = insert_actions.FILE_SERIES;
									row10.FILE_NBR = insert_actions.FILE_NBR;
									row10.ACTION_TYPE = insert_actions.ACTION_TYPE;
									row10.ACTION_DATE = insert_actions.ACTION_DATE;
									row10.MANUAL_DUE_DATE = insert_actions.MANUAL_DUE_DATE;
									row10.RESPONSIBLE_USER = insert_actions.RESPONSIBLE_USER;
									row10.ACTION_NOTES1 = insert_actions.ACTION_NOTES1;
									row10.ACTION_NOTES2 = insert_actions.ACTION_NOTES2;
									row10.ACTION_NOTES3 = insert_actions.ACTION_NOTES3;
									row10.ACTION_NOTES4 = insert_actions.ACTION_NOTES4;
									row10.ACTION_NOTES5 = insert_actions.ACTION_NOTES5;
									row10.GENERAL_NOTES = insert_actions.GENERAL_NOTES;
									row10.SELECTED_OPTIONS_TEXT = insert_actions.SELECTED_OPTIONS_TEXT;
									row10.ACTION_USER = insert_actions.ACTION_USER;
									row10.ACTION_CATEGORY = insert_actions.ACTION_CATEGORY;
									row10.SPECIAL_FINAL_STATUS = insert_actions.SPECIAL_FINAL_STATUS;
									row10.JOURNAL_CODE = insert_actions.JOURNAL_CODE;
									row10.PUBLICATION_DATE = insert_actions.PUBLICATION_DATE;
									row10.IPAS_PROC_TYP = insert_actions.IPAS_PROC_TYP;
									row10.IPAS_PROC_NBR = insert_actions.IPAS_PROC_NBR;
									row10.IPAS_ACTION_NBR = insert_actions.IPAS_ACTION_NBR;
									rejectedCount_tDBOutput_4 = rejectedCount_tDBOutput_4 + 1;
									row10.errorCode = ((java.sql.SQLException) e).getSQLState();
									row10.errorMessage = e.getMessage() + " - Line: " + tos_count_tDBOutput_4;
								}
							}
							if (!whetherReject_tDBOutput_4) {
							}
							////////// batch execute by batch size///////
							class LimitBytesHelper_tDBOutput_4 {
								public int limitBytePart1(int counter, java.sql.PreparedStatement pstmt_tDBOutput_4)
										throws Exception {
									try {

										for (int countEach_tDBOutput_4 : pstmt_tDBOutput_4.executeBatch()) {
											if (countEach_tDBOutput_4 == -2 || countEach_tDBOutput_4 == -3) {
												break;
											}
											counter += countEach_tDBOutput_4;
										}

									} catch (java.sql.BatchUpdateException e) {

										int countSum_tDBOutput_4 = 0;
										for (int countEach_tDBOutput_4 : e.getUpdateCounts()) {
											counter += (countEach_tDBOutput_4 < 0 ? 0 : countEach_tDBOutput_4);
										}

										System.err.println(e.getMessage());

									}
									return counter;
								}

								public int limitBytePart2(int counter, java.sql.PreparedStatement pstmt_tDBOutput_4)
										throws Exception {
									try {

										for (int countEach_tDBOutput_4 : pstmt_tDBOutput_4.executeBatch()) {
											if (countEach_tDBOutput_4 == -2 || countEach_tDBOutput_4 == -3) {
												break;
											}
											counter += countEach_tDBOutput_4;
										}

									} catch (java.sql.BatchUpdateException e) {

										for (int countEach_tDBOutput_4 : e.getUpdateCounts()) {
											counter += (countEach_tDBOutput_4 < 0 ? 0 : countEach_tDBOutput_4);
										}

										System.err.println(e.getMessage());

									}
									return counter;
								}
							}

							//////////// commit every////////////

							tos_count_tDBOutput_4++;

							/**
							 * [tDBOutput_4 main ] stop
							 */

							/**
							 * [tDBOutput_4 process_data_begin ] start
							 */

							currentComponent = "tDBOutput_4";

							/**
							 * [tDBOutput_4 process_data_begin ] stop
							 */
// Start of branch "row10"
							if (row10 != null) {

								/**
								 * [tLogRow_4 main ] start
								 */

								currentComponent = "tLogRow_4";

								if (execStat) {
									runStat.updateStatOnConnection(iterateId, 1, 1

											, "row10"

									);
								}

///////////////////////		

								strBuffer_tLogRow_4 = new StringBuilder();

								if (row10.FILE_SEQ != null) { //

									strBuffer_tLogRow_4.append(String.valueOf(row10.FILE_SEQ));

								} //

								strBuffer_tLogRow_4.append("|");

								if (row10.FILE_TYPE != null) { //

									strBuffer_tLogRow_4.append(String.valueOf(row10.FILE_TYPE));

								} //

								strBuffer_tLogRow_4.append("|");

								if (row10.FILE_SERIES != null) { //

									strBuffer_tLogRow_4.append(row10.FILE_SERIES
											.setScale(0, java.math.RoundingMode.HALF_UP).toPlainString());

								} //

								strBuffer_tLogRow_4.append("|");

								if (row10.FILE_NBR != null) { //

									strBuffer_tLogRow_4.append(
											row10.FILE_NBR.setScale(0, java.math.RoundingMode.HALF_UP).toPlainString());

								} //

								strBuffer_tLogRow_4.append("|");

								if (row10.ACTION_TYPE != null) { //

									strBuffer_tLogRow_4.append(String.valueOf(row10.ACTION_TYPE));

								} //

								strBuffer_tLogRow_4.append("|");

								if (row10.ACTION_DATE != null) { //

									strBuffer_tLogRow_4
											.append(FormatterUtils.format_Date(row10.ACTION_DATE, "dd-MM-yyyy"));

								} //

								strBuffer_tLogRow_4.append("|");

								if (row10.MANUAL_DUE_DATE != null) { //

									strBuffer_tLogRow_4
											.append(FormatterUtils.format_Date(row10.MANUAL_DUE_DATE, "dd-MM-yyyy"));

								} //

								strBuffer_tLogRow_4.append("|");

								if (row10.RESPONSIBLE_USER != null) { //

									strBuffer_tLogRow_4.append(row10.RESPONSIBLE_USER
											.setScale(0, java.math.RoundingMode.HALF_UP).toPlainString());

								} //

								strBuffer_tLogRow_4.append("|");

								if (row10.ACTION_NOTES1 != null) { //

									strBuffer_tLogRow_4.append(String.valueOf(row10.ACTION_NOTES1));

								} //

								strBuffer_tLogRow_4.append("|");

								if (row10.ACTION_NOTES2 != null) { //

									strBuffer_tLogRow_4.append(String.valueOf(row10.ACTION_NOTES2));

								} //

								strBuffer_tLogRow_4.append("|");

								if (row10.ACTION_NOTES3 != null) { //

									strBuffer_tLogRow_4.append(String.valueOf(row10.ACTION_NOTES3));

								} //

								strBuffer_tLogRow_4.append("|");

								if (row10.ACTION_NOTES4 != null) { //

									strBuffer_tLogRow_4.append(String.valueOf(row10.ACTION_NOTES4));

								} //

								strBuffer_tLogRow_4.append("|");

								if (row10.ACTION_NOTES5 != null) { //

									strBuffer_tLogRow_4.append(String.valueOf(row10.ACTION_NOTES5));

								} //

								strBuffer_tLogRow_4.append("|");

								if (row10.GENERAL_NOTES != null) { //

									strBuffer_tLogRow_4.append(String.valueOf(row10.GENERAL_NOTES));

								} //

								strBuffer_tLogRow_4.append("|");

								if (row10.SELECTED_OPTIONS_TEXT != null) { //

									strBuffer_tLogRow_4.append(String.valueOf(row10.SELECTED_OPTIONS_TEXT));

								} //

								strBuffer_tLogRow_4.append("|");

								if (row10.ACTION_USER != null) { //

									strBuffer_tLogRow_4.append(row10.ACTION_USER
											.setScale(0, java.math.RoundingMode.HALF_UP).toPlainString());

								} //

								strBuffer_tLogRow_4.append("|");

								if (row10.ACTION_CATEGORY != null) { //

									strBuffer_tLogRow_4.append(String.valueOf(row10.ACTION_CATEGORY));

								} //

								strBuffer_tLogRow_4.append("|");

								if (row10.SPECIAL_FINAL_STATUS != null) { //

									strBuffer_tLogRow_4.append(String.valueOf(row10.SPECIAL_FINAL_STATUS));

								} //

								strBuffer_tLogRow_4.append("|");

								if (row10.JOURNAL_CODE != null) { //

									strBuffer_tLogRow_4.append(String.valueOf(row10.JOURNAL_CODE));

								} //

								strBuffer_tLogRow_4.append("|");

								if (row10.PUBLICATION_DATE != null) { //

									strBuffer_tLogRow_4
											.append(FormatterUtils.format_Date(row10.PUBLICATION_DATE, "dd-MM-yyyy"));

								} //

								strBuffer_tLogRow_4.append("|");

								if (row10.IPAS_PROC_TYP != null) { //

									strBuffer_tLogRow_4.append(String.valueOf(row10.IPAS_PROC_TYP));

								} //

								strBuffer_tLogRow_4.append("|");

								if (row10.IPAS_PROC_NBR != null) { //

									strBuffer_tLogRow_4.append(row10.IPAS_PROC_NBR
											.setScale(0, java.math.RoundingMode.HALF_UP).toPlainString());

								} //

								strBuffer_tLogRow_4.append("|");

								if (row10.IPAS_ACTION_NBR != null) { //

									strBuffer_tLogRow_4.append(row10.IPAS_ACTION_NBR
											.setScale(0, java.math.RoundingMode.HALF_UP).toPlainString());

								} //

								strBuffer_tLogRow_4.append("|");

								if (row10.errorCode != null) { //

									strBuffer_tLogRow_4.append(String.valueOf(row10.errorCode));

								} //

								strBuffer_tLogRow_4.append("|");

								if (row10.errorMessage != null) { //

									strBuffer_tLogRow_4.append(String.valueOf(row10.errorMessage));

								} //

								if (globalMap.get("tLogRow_CONSOLE") != null) {
									consoleOut_tLogRow_4 = (java.io.PrintStream) globalMap.get("tLogRow_CONSOLE");
								} else {
									consoleOut_tLogRow_4 = new java.io.PrintStream(
											new java.io.BufferedOutputStream(System.out));
									globalMap.put("tLogRow_CONSOLE", consoleOut_tLogRow_4);
								}
								consoleOut_tLogRow_4.println(strBuffer_tLogRow_4.toString());
								consoleOut_tLogRow_4.flush();
								nb_line_tLogRow_4++;
//////

//////                    

///////////////////////    			

								tos_count_tLogRow_4++;

								/**
								 * [tLogRow_4 main ] stop
								 */

								/**
								 * [tLogRow_4 process_data_begin ] start
								 */

								currentComponent = "tLogRow_4";

								/**
								 * [tLogRow_4 process_data_begin ] stop
								 */

								/**
								 * [tLogRow_4 process_data_end ] start
								 */

								currentComponent = "tLogRow_4";

								/**
								 * [tLogRow_4 process_data_end ] stop
								 */

							} // End of branch "row10"

							/**
							 * [tDBOutput_4 process_data_end ] start
							 */

							currentComponent = "tDBOutput_4";

							/**
							 * [tDBOutput_4 process_data_end ] stop
							 */

						} // End of branch "insert_actions"

						/**
						 * [tMap_3 process_data_end ] start
						 */

						currentComponent = "tMap_3";

						/**
						 * [tMap_3 process_data_end ] stop
						 */

						/**
						 * [tDBInput_3 process_data_end ] start
						 */

						currentComponent = "tDBInput_3";

						/**
						 * [tDBInput_3 process_data_end ] stop
						 */

						/**
						 * [tDBInput_3 end ] start
						 */

						currentComponent = "tDBInput_3";

					}
				} finally {
					if (rs_tDBInput_3 != null) {
						rs_tDBInput_3.close();
					}
					if (stmt_tDBInput_3 != null) {
						stmt_tDBInput_3.close();
					}
				}
				globalMap.put("tDBInput_3_NB_LINE", nb_line_tDBInput_3);

				ok_Hash.put("tDBInput_3", true);
				end_Hash.put("tDBInput_3", System.currentTimeMillis());

				/**
				 * [tDBInput_3 end ] stop
				 */

				/**
				 * [tMap_3 end ] start
				 */

				currentComponent = "tMap_3";

// ###############################
// # Lookup hashes releasing
				if (tHash_Lookup_row9 != null) {
					tHash_Lookup_row9.endGet();
				}
				globalMap.remove("tHash_Lookup_row9");

				if (tHash_Lookup_row11 != null) {
					tHash_Lookup_row11.endGet();
				}
				globalMap.remove("tHash_Lookup_row11");

// ###############################      

				if (execStat) {
					runStat.updateStat(resourceMap, iterateId, 2, 0, "row8");
				}

				ok_Hash.put("tMap_3", true);
				end_Hash.put("tMap_3", System.currentTimeMillis());

				/**
				 * [tMap_3 end ] stop
				 */

				/**
				 * [tDBOutput_4 end ] start
				 */

				currentComponent = "tDBOutput_4";

				if (pstmtUpdate_tDBOutput_4 != null) {
					pstmtUpdate_tDBOutput_4.close();
					resourceMap.remove("pstmtUpdate_tDBOutput_4");
				}
				if (pstmtInsert_tDBOutput_4 != null) {
					pstmtInsert_tDBOutput_4.close();
					resourceMap.remove("pstmtInsert_tDBOutput_4");
				}
				if (pstmt_tDBOutput_4 != null) {
					pstmt_tDBOutput_4.close();
					resourceMap.remove("pstmt_tDBOutput_4");
				}
				resourceMap.put("statementClosed_tDBOutput_4", true);

				nb_line_deleted_tDBOutput_4 = nb_line_deleted_tDBOutput_4 + deletedCount_tDBOutput_4;
				nb_line_update_tDBOutput_4 = nb_line_update_tDBOutput_4 + updatedCount_tDBOutput_4;
				nb_line_inserted_tDBOutput_4 = nb_line_inserted_tDBOutput_4 + insertedCount_tDBOutput_4;
				nb_line_rejected_tDBOutput_4 = nb_line_rejected_tDBOutput_4 + rejectedCount_tDBOutput_4;

				globalMap.put("tDBOutput_4_NB_LINE", nb_line_tDBOutput_4);
				globalMap.put("tDBOutput_4_NB_LINE_UPDATED", nb_line_update_tDBOutput_4);
				globalMap.put("tDBOutput_4_NB_LINE_INSERTED", nb_line_inserted_tDBOutput_4);
				globalMap.put("tDBOutput_4_NB_LINE_DELETED", nb_line_deleted_tDBOutput_4);
				globalMap.put("tDBOutput_4_NB_LINE_REJECTED", nb_line_rejected_tDBOutput_4);

				if (execStat) {
					runStat.updateStat(resourceMap, iterateId, 2, 0, "insert_actions");
				}

				ok_Hash.put("tDBOutput_4", true);
				end_Hash.put("tDBOutput_4", System.currentTimeMillis());

				/**
				 * [tDBOutput_4 end ] stop
				 */

				/**
				 * [tLogRow_4 end ] start
				 */

				currentComponent = "tLogRow_4";

//////
//////
				globalMap.put("tLogRow_4_NB_LINE", nb_line_tLogRow_4);

///////////////////////    			

				if (execStat) {
					runStat.updateStat(resourceMap, iterateId, 2, 0, "row10");
				}

				ok_Hash.put("tLogRow_4", true);
				end_Hash.put("tLogRow_4", System.currentTimeMillis());

				/**
				 * [tLogRow_4 end ] stop
				 */

			} // end the resume

			if (resumeEntryMethodName == null || globalResumeTicket) {
				resumeUtil.addLog("CHECKPOINT", "CONNECTION:SUBJOB_OK:tDBInput_3:OnSubjobOk", "",
						Thread.currentThread().getId() + "", "", "", "", "", "");
			}

			if (execStat) {
				runStat.updateStatOnConnection("OnSubjobOk18", 0, "ok");
			}

			tDBInput_33Process(globalMap);

		} catch (java.lang.Exception e) {

			TalendException te = new TalendException(e, currentComponent, globalMap);

			throw te;
		} catch (java.lang.Error error) {

			runStat.stopThreadStat();

			throw error;
		} finally {

			// free memory for "tMap_3"
			globalMap.remove("tHash_Lookup_row9");

			// free memory for "tMap_3"
			globalMap.remove("tHash_Lookup_row11");

			try {

				/**
				 * [tDBInput_3 finally ] start
				 */

				currentComponent = "tDBInput_3";

				/**
				 * [tDBInput_3 finally ] stop
				 */

				/**
				 * [tMap_3 finally ] start
				 */

				currentComponent = "tMap_3";

				/**
				 * [tMap_3 finally ] stop
				 */

				/**
				 * [tDBOutput_4 finally ] start
				 */

				currentComponent = "tDBOutput_4";

				if (resourceMap.get("statementClosed_tDBOutput_4") == null) {
					java.sql.PreparedStatement pstmtUpdateToClose_tDBOutput_4 = null;
					if ((pstmtUpdateToClose_tDBOutput_4 = (java.sql.PreparedStatement) resourceMap
							.remove("pstmtUpdate_tDBOutput_4")) != null) {
						pstmtUpdateToClose_tDBOutput_4.close();
					}
					java.sql.PreparedStatement pstmtInsertToClose_tDBOutput_4 = null;
					if ((pstmtInsertToClose_tDBOutput_4 = (java.sql.PreparedStatement) resourceMap
							.remove("pstmtInsert_tDBOutput_4")) != null) {
						pstmtInsertToClose_tDBOutput_4.close();
					}
					java.sql.PreparedStatement pstmtToClose_tDBOutput_4 = null;
					if ((pstmtToClose_tDBOutput_4 = (java.sql.PreparedStatement) resourceMap
							.remove("pstmt_tDBOutput_4")) != null) {
						pstmtToClose_tDBOutput_4.close();
					}
				}

				/**
				 * [tDBOutput_4 finally ] stop
				 */

				/**
				 * [tLogRow_4 finally ] start
				 */

				currentComponent = "tLogRow_4";

				/**
				 * [tLogRow_4 finally ] stop
				 */

			} catch (java.lang.Exception e) {
				// ignore
			} catch (java.lang.Error error) {
				// ignore
			}
			resourceMap = null;
		}

		globalMap.put("tDBInput_3_SUBPROCESS_STATE", 1);
	}

	public static class row45Struct implements routines.system.IPersistableRow<row45Struct> {
		final static byte[] commonByteArrayLock_WIPO_PROJECTS_E1a_Marc_a_interm_Copy = new byte[0];
		static byte[] commonByteArray_WIPO_PROJECTS_E1a_Marc_a_interm_Copy = new byte[0];

		public String FILE_SEQ;

		public String getFILE_SEQ() {
			return this.FILE_SEQ;
		}

		public String FILE_TYPE;

		public String getFILE_TYPE() {
			return this.FILE_TYPE;
		}

		public BigDecimal FILE_SERIES;

		public BigDecimal getFILE_SERIES() {
			return this.FILE_SERIES;
		}

		public BigDecimal FILE_NBR;

		public BigDecimal getFILE_NBR() {
			return this.FILE_NBR;
		}

		public String ACTION_TYPE;

		public String getACTION_TYPE() {
			return this.ACTION_TYPE;
		}

		public java.util.Date ACTION_DATE;

		public java.util.Date getACTION_DATE() {
			return this.ACTION_DATE;
		}

		public java.util.Date MANUAL_DUE_DATE;

		public java.util.Date getMANUAL_DUE_DATE() {
			return this.MANUAL_DUE_DATE;
		}

		public BigDecimal RESPONSIBLE_USER;

		public BigDecimal getRESPONSIBLE_USER() {
			return this.RESPONSIBLE_USER;
		}

		public String ACTION_NOTES1;

		public String getACTION_NOTES1() {
			return this.ACTION_NOTES1;
		}

		public String ACTION_NOTES2;

		public String getACTION_NOTES2() {
			return this.ACTION_NOTES2;
		}

		public String ACTION_NOTES3;

		public String getACTION_NOTES3() {
			return this.ACTION_NOTES3;
		}

		public String ACTION_NOTES4;

		public String getACTION_NOTES4() {
			return this.ACTION_NOTES4;
		}

		public String ACTION_NOTES5;

		public String getACTION_NOTES5() {
			return this.ACTION_NOTES5;
		}

		public String GENERAL_NOTES;

		public String getGENERAL_NOTES() {
			return this.GENERAL_NOTES;
		}

		public String SELECTED_OPTIONS_TEXT;

		public String getSELECTED_OPTIONS_TEXT() {
			return this.SELECTED_OPTIONS_TEXT;
		}

		public BigDecimal ACTION_USER;

		public BigDecimal getACTION_USER() {
			return this.ACTION_USER;
		}

		public String ACTION_CATEGORY;

		public String getACTION_CATEGORY() {
			return this.ACTION_CATEGORY;
		}

		public String SPECIAL_FINAL_STATUS;

		public String getSPECIAL_FINAL_STATUS() {
			return this.SPECIAL_FINAL_STATUS;
		}

		public String JOURNAL_CODE;

		public String getJOURNAL_CODE() {
			return this.JOURNAL_CODE;
		}

		public java.util.Date PUBLICATION_DATE;

		public java.util.Date getPUBLICATION_DATE() {
			return this.PUBLICATION_DATE;
		}

		public String IPAS_PROC_TYP;

		public String getIPAS_PROC_TYP() {
			return this.IPAS_PROC_TYP;
		}

		public BigDecimal IPAS_PROC_NBR;

		public BigDecimal getIPAS_PROC_NBR() {
			return this.IPAS_PROC_NBR;
		}

		public BigDecimal IPAS_ACTION_NBR;

		public BigDecimal getIPAS_ACTION_NBR() {
			return this.IPAS_ACTION_NBR;
		}

		public String errorCode;

		public String getErrorCode() {
			return this.errorCode;
		}

		public String errorMessage;

		public String getErrorMessage() {
			return this.errorMessage;
		}

		private String readString(ObjectInputStream dis) throws IOException {
			String strReturn = null;
			int length = 0;
			length = dis.readInt();
			if (length == -1) {
				strReturn = null;
			} else {
				if (length > commonByteArray_WIPO_PROJECTS_E1a_Marc_a_interm_Copy.length) {
					if (length < 1024 && commonByteArray_WIPO_PROJECTS_E1a_Marc_a_interm_Copy.length == 0) {
						commonByteArray_WIPO_PROJECTS_E1a_Marc_a_interm_Copy = new byte[1024];
					} else {
						commonByteArray_WIPO_PROJECTS_E1a_Marc_a_interm_Copy = new byte[2 * length];
					}
				}
				dis.readFully(commonByteArray_WIPO_PROJECTS_E1a_Marc_a_interm_Copy, 0, length);
				strReturn = new String(commonByteArray_WIPO_PROJECTS_E1a_Marc_a_interm_Copy, 0, length, utf8Charset);
			}
			return strReturn;
		}

		private void writeString(String str, ObjectOutputStream dos) throws IOException {
			if (str == null) {
				dos.writeInt(-1);
			} else {
				byte[] byteArray = str.getBytes(utf8Charset);
				dos.writeInt(byteArray.length);
				dos.write(byteArray);
			}
		}

		private java.util.Date readDate(ObjectInputStream dis) throws IOException {
			java.util.Date dateReturn = null;
			int length = 0;
			length = dis.readByte();
			if (length == -1) {
				dateReturn = null;
			} else {
				dateReturn = new Date(dis.readLong());
			}
			return dateReturn;
		}

		private void writeDate(java.util.Date date1, ObjectOutputStream dos) throws IOException {
			if (date1 == null) {
				dos.writeByte(-1);
			} else {
				dos.writeByte(0);
				dos.writeLong(date1.getTime());
			}
		}

		public void readData(ObjectInputStream dis) {

			synchronized (commonByteArrayLock_WIPO_PROJECTS_E1a_Marc_a_interm_Copy) {

				try {

					int length = 0;

					this.FILE_SEQ = readString(dis);

					this.FILE_TYPE = readString(dis);

					this.FILE_SERIES = (BigDecimal) dis.readObject();

					this.FILE_NBR = (BigDecimal) dis.readObject();

					this.ACTION_TYPE = readString(dis);

					this.ACTION_DATE = readDate(dis);

					this.MANUAL_DUE_DATE = readDate(dis);

					this.RESPONSIBLE_USER = (BigDecimal) dis.readObject();

					this.ACTION_NOTES1 = readString(dis);

					this.ACTION_NOTES2 = readString(dis);

					this.ACTION_NOTES3 = readString(dis);

					this.ACTION_NOTES4 = readString(dis);

					this.ACTION_NOTES5 = readString(dis);

					this.GENERAL_NOTES = readString(dis);

					this.SELECTED_OPTIONS_TEXT = readString(dis);

					this.ACTION_USER = (BigDecimal) dis.readObject();

					this.ACTION_CATEGORY = readString(dis);

					this.SPECIAL_FINAL_STATUS = readString(dis);

					this.JOURNAL_CODE = readString(dis);

					this.PUBLICATION_DATE = readDate(dis);

					this.IPAS_PROC_TYP = readString(dis);

					this.IPAS_PROC_NBR = (BigDecimal) dis.readObject();

					this.IPAS_ACTION_NBR = (BigDecimal) dis.readObject();

					this.errorCode = readString(dis);

					this.errorMessage = readString(dis);

				} catch (IOException e) {
					throw new RuntimeException(e);

				} catch (ClassNotFoundException eCNFE) {
					throw new RuntimeException(eCNFE);

				}

			}

		}

		public void writeData(ObjectOutputStream dos) {
			try {

				// String

				writeString(this.FILE_SEQ, dos);

				// String

				writeString(this.FILE_TYPE, dos);

				// BigDecimal

				dos.writeObject(this.FILE_SERIES);

				// BigDecimal

				dos.writeObject(this.FILE_NBR);

				// String

				writeString(this.ACTION_TYPE, dos);

				// java.util.Date

				writeDate(this.ACTION_DATE, dos);

				// java.util.Date

				writeDate(this.MANUAL_DUE_DATE, dos);

				// BigDecimal

				dos.writeObject(this.RESPONSIBLE_USER);

				// String

				writeString(this.ACTION_NOTES1, dos);

				// String

				writeString(this.ACTION_NOTES2, dos);

				// String

				writeString(this.ACTION_NOTES3, dos);

				// String

				writeString(this.ACTION_NOTES4, dos);

				// String

				writeString(this.ACTION_NOTES5, dos);

				// String

				writeString(this.GENERAL_NOTES, dos);

				// String

				writeString(this.SELECTED_OPTIONS_TEXT, dos);

				// BigDecimal

				dos.writeObject(this.ACTION_USER);

				// String

				writeString(this.ACTION_CATEGORY, dos);

				// String

				writeString(this.SPECIAL_FINAL_STATUS, dos);

				// String

				writeString(this.JOURNAL_CODE, dos);

				// java.util.Date

				writeDate(this.PUBLICATION_DATE, dos);

				// String

				writeString(this.IPAS_PROC_TYP, dos);

				// BigDecimal

				dos.writeObject(this.IPAS_PROC_NBR);

				// BigDecimal

				dos.writeObject(this.IPAS_ACTION_NBR);

				// String

				writeString(this.errorCode, dos);

				// String

				writeString(this.errorMessage, dos);

			} catch (IOException e) {
				throw new RuntimeException(e);
			}

		}

		public String toString() {

			StringBuilder sb = new StringBuilder();
			sb.append(super.toString());
			sb.append("[");
			sb.append("FILE_SEQ=" + FILE_SEQ);
			sb.append(",FILE_TYPE=" + FILE_TYPE);
			sb.append(",FILE_SERIES=" + String.valueOf(FILE_SERIES));
			sb.append(",FILE_NBR=" + String.valueOf(FILE_NBR));
			sb.append(",ACTION_TYPE=" + ACTION_TYPE);
			sb.append(",ACTION_DATE=" + String.valueOf(ACTION_DATE));
			sb.append(",MANUAL_DUE_DATE=" + String.valueOf(MANUAL_DUE_DATE));
			sb.append(",RESPONSIBLE_USER=" + String.valueOf(RESPONSIBLE_USER));
			sb.append(",ACTION_NOTES1=" + ACTION_NOTES1);
			sb.append(",ACTION_NOTES2=" + ACTION_NOTES2);
			sb.append(",ACTION_NOTES3=" + ACTION_NOTES3);
			sb.append(",ACTION_NOTES4=" + ACTION_NOTES4);
			sb.append(",ACTION_NOTES5=" + ACTION_NOTES5);
			sb.append(",GENERAL_NOTES=" + GENERAL_NOTES);
			sb.append(",SELECTED_OPTIONS_TEXT=" + SELECTED_OPTIONS_TEXT);
			sb.append(",ACTION_USER=" + String.valueOf(ACTION_USER));
			sb.append(",ACTION_CATEGORY=" + ACTION_CATEGORY);
			sb.append(",SPECIAL_FINAL_STATUS=" + SPECIAL_FINAL_STATUS);
			sb.append(",JOURNAL_CODE=" + JOURNAL_CODE);
			sb.append(",PUBLICATION_DATE=" + String.valueOf(PUBLICATION_DATE));
			sb.append(",IPAS_PROC_TYP=" + IPAS_PROC_TYP);
			sb.append(",IPAS_PROC_NBR=" + String.valueOf(IPAS_PROC_NBR));
			sb.append(",IPAS_ACTION_NBR=" + String.valueOf(IPAS_ACTION_NBR));
			sb.append(",errorCode=" + errorCode);
			sb.append(",errorMessage=" + errorMessage);
			sb.append("]");

			return sb.toString();
		}

		/**
		 * Compare keys
		 */
		public int compareTo(row45Struct other) {

			int returnValue = -1;

			return returnValue;
		}

		private int checkNullsAndCompare(Object object1, Object object2) {
			int returnValue = 0;
			if (object1 instanceof Comparable && object2 instanceof Comparable) {
				returnValue = ((Comparable) object1).compareTo(object2);
			} else if (object1 != null && object2 != null) {
				returnValue = compareStrings(object1.toString(), object2.toString());
			} else if (object1 == null && object2 != null) {
				returnValue = 1;
			} else if (object1 != null && object2 == null) {
				returnValue = -1;
			} else {
				returnValue = 0;
			}

			return returnValue;
		}

		private int compareStrings(String string1, String string2) {
			return string1.compareTo(string2);
		}

	}

	public static class copyOfinsert_actionsStruct
			implements routines.system.IPersistableRow<copyOfinsert_actionsStruct> {
		final static byte[] commonByteArrayLock_WIPO_PROJECTS_E1a_Marc_a_interm_Copy = new byte[0];
		static byte[] commonByteArray_WIPO_PROJECTS_E1a_Marc_a_interm_Copy = new byte[0];

		public String FILE_SEQ;

		public String getFILE_SEQ() {
			return this.FILE_SEQ;
		}

		public String FILE_TYPE;

		public String getFILE_TYPE() {
			return this.FILE_TYPE;
		}

		public BigDecimal FILE_SERIES;

		public BigDecimal getFILE_SERIES() {
			return this.FILE_SERIES;
		}

		public BigDecimal FILE_NBR;

		public BigDecimal getFILE_NBR() {
			return this.FILE_NBR;
		}

		public String ACTION_TYPE;

		public String getACTION_TYPE() {
			return this.ACTION_TYPE;
		}

		public java.util.Date ACTION_DATE;

		public java.util.Date getACTION_DATE() {
			return this.ACTION_DATE;
		}

		public java.util.Date MANUAL_DUE_DATE;

		public java.util.Date getMANUAL_DUE_DATE() {
			return this.MANUAL_DUE_DATE;
		}

		public BigDecimal RESPONSIBLE_USER;

		public BigDecimal getRESPONSIBLE_USER() {
			return this.RESPONSIBLE_USER;
		}

		public String ACTION_NOTES1;

		public String getACTION_NOTES1() {
			return this.ACTION_NOTES1;
		}

		public String ACTION_NOTES2;

		public String getACTION_NOTES2() {
			return this.ACTION_NOTES2;
		}

		public String ACTION_NOTES3;

		public String getACTION_NOTES3() {
			return this.ACTION_NOTES3;
		}

		public String ACTION_NOTES4;

		public String getACTION_NOTES4() {
			return this.ACTION_NOTES4;
		}

		public String ACTION_NOTES5;

		public String getACTION_NOTES5() {
			return this.ACTION_NOTES5;
		}

		public String GENERAL_NOTES;

		public String getGENERAL_NOTES() {
			return this.GENERAL_NOTES;
		}

		public String SELECTED_OPTIONS_TEXT;

		public String getSELECTED_OPTIONS_TEXT() {
			return this.SELECTED_OPTIONS_TEXT;
		}

		public BigDecimal ACTION_USER;

		public BigDecimal getACTION_USER() {
			return this.ACTION_USER;
		}

		public String ACTION_CATEGORY;

		public String getACTION_CATEGORY() {
			return this.ACTION_CATEGORY;
		}

		public String SPECIAL_FINAL_STATUS;

		public String getSPECIAL_FINAL_STATUS() {
			return this.SPECIAL_FINAL_STATUS;
		}

		public String JOURNAL_CODE;

		public String getJOURNAL_CODE() {
			return this.JOURNAL_CODE;
		}

		public java.util.Date PUBLICATION_DATE;

		public java.util.Date getPUBLICATION_DATE() {
			return this.PUBLICATION_DATE;
		}

		public String IPAS_PROC_TYP;

		public String getIPAS_PROC_TYP() {
			return this.IPAS_PROC_TYP;
		}

		public BigDecimal IPAS_PROC_NBR;

		public BigDecimal getIPAS_PROC_NBR() {
			return this.IPAS_PROC_NBR;
		}

		public BigDecimal IPAS_ACTION_NBR;

		public BigDecimal getIPAS_ACTION_NBR() {
			return this.IPAS_ACTION_NBR;
		}

		private String readString(ObjectInputStream dis) throws IOException {
			String strReturn = null;
			int length = 0;
			length = dis.readInt();
			if (length == -1) {
				strReturn = null;
			} else {
				if (length > commonByteArray_WIPO_PROJECTS_E1a_Marc_a_interm_Copy.length) {
					if (length < 1024 && commonByteArray_WIPO_PROJECTS_E1a_Marc_a_interm_Copy.length == 0) {
						commonByteArray_WIPO_PROJECTS_E1a_Marc_a_interm_Copy = new byte[1024];
					} else {
						commonByteArray_WIPO_PROJECTS_E1a_Marc_a_interm_Copy = new byte[2 * length];
					}
				}
				dis.readFully(commonByteArray_WIPO_PROJECTS_E1a_Marc_a_interm_Copy, 0, length);
				strReturn = new String(commonByteArray_WIPO_PROJECTS_E1a_Marc_a_interm_Copy, 0, length, utf8Charset);
			}
			return strReturn;
		}

		private void writeString(String str, ObjectOutputStream dos) throws IOException {
			if (str == null) {
				dos.writeInt(-1);
			} else {
				byte[] byteArray = str.getBytes(utf8Charset);
				dos.writeInt(byteArray.length);
				dos.write(byteArray);
			}
		}

		private java.util.Date readDate(ObjectInputStream dis) throws IOException {
			java.util.Date dateReturn = null;
			int length = 0;
			length = dis.readByte();
			if (length == -1) {
				dateReturn = null;
			} else {
				dateReturn = new Date(dis.readLong());
			}
			return dateReturn;
		}

		private void writeDate(java.util.Date date1, ObjectOutputStream dos) throws IOException {
			if (date1 == null) {
				dos.writeByte(-1);
			} else {
				dos.writeByte(0);
				dos.writeLong(date1.getTime());
			}
		}

		public void readData(ObjectInputStream dis) {

			synchronized (commonByteArrayLock_WIPO_PROJECTS_E1a_Marc_a_interm_Copy) {

				try {

					int length = 0;

					this.FILE_SEQ = readString(dis);

					this.FILE_TYPE = readString(dis);

					this.FILE_SERIES = (BigDecimal) dis.readObject();

					this.FILE_NBR = (BigDecimal) dis.readObject();

					this.ACTION_TYPE = readString(dis);

					this.ACTION_DATE = readDate(dis);

					this.MANUAL_DUE_DATE = readDate(dis);

					this.RESPONSIBLE_USER = (BigDecimal) dis.readObject();

					this.ACTION_NOTES1 = readString(dis);

					this.ACTION_NOTES2 = readString(dis);

					this.ACTION_NOTES3 = readString(dis);

					this.ACTION_NOTES4 = readString(dis);

					this.ACTION_NOTES5 = readString(dis);

					this.GENERAL_NOTES = readString(dis);

					this.SELECTED_OPTIONS_TEXT = readString(dis);

					this.ACTION_USER = (BigDecimal) dis.readObject();

					this.ACTION_CATEGORY = readString(dis);

					this.SPECIAL_FINAL_STATUS = readString(dis);

					this.JOURNAL_CODE = readString(dis);

					this.PUBLICATION_DATE = readDate(dis);

					this.IPAS_PROC_TYP = readString(dis);

					this.IPAS_PROC_NBR = (BigDecimal) dis.readObject();

					this.IPAS_ACTION_NBR = (BigDecimal) dis.readObject();

				} catch (IOException e) {
					throw new RuntimeException(e);

				} catch (ClassNotFoundException eCNFE) {
					throw new RuntimeException(eCNFE);

				}

			}

		}

		public void writeData(ObjectOutputStream dos) {
			try {

				// String

				writeString(this.FILE_SEQ, dos);

				// String

				writeString(this.FILE_TYPE, dos);

				// BigDecimal

				dos.writeObject(this.FILE_SERIES);

				// BigDecimal

				dos.writeObject(this.FILE_NBR);

				// String

				writeString(this.ACTION_TYPE, dos);

				// java.util.Date

				writeDate(this.ACTION_DATE, dos);

				// java.util.Date

				writeDate(this.MANUAL_DUE_DATE, dos);

				// BigDecimal

				dos.writeObject(this.RESPONSIBLE_USER);

				// String

				writeString(this.ACTION_NOTES1, dos);

				// String

				writeString(this.ACTION_NOTES2, dos);

				// String

				writeString(this.ACTION_NOTES3, dos);

				// String

				writeString(this.ACTION_NOTES4, dos);

				// String

				writeString(this.ACTION_NOTES5, dos);

				// String

				writeString(this.GENERAL_NOTES, dos);

				// String

				writeString(this.SELECTED_OPTIONS_TEXT, dos);

				// BigDecimal

				dos.writeObject(this.ACTION_USER);

				// String

				writeString(this.ACTION_CATEGORY, dos);

				// String

				writeString(this.SPECIAL_FINAL_STATUS, dos);

				// String

				writeString(this.JOURNAL_CODE, dos);

				// java.util.Date

				writeDate(this.PUBLICATION_DATE, dos);

				// String

				writeString(this.IPAS_PROC_TYP, dos);

				// BigDecimal

				dos.writeObject(this.IPAS_PROC_NBR);

				// BigDecimal

				dos.writeObject(this.IPAS_ACTION_NBR);

			} catch (IOException e) {
				throw new RuntimeException(e);
			}

		}

		public String toString() {

			StringBuilder sb = new StringBuilder();
			sb.append(super.toString());
			sb.append("[");
			sb.append("FILE_SEQ=" + FILE_SEQ);
			sb.append(",FILE_TYPE=" + FILE_TYPE);
			sb.append(",FILE_SERIES=" + String.valueOf(FILE_SERIES));
			sb.append(",FILE_NBR=" + String.valueOf(FILE_NBR));
			sb.append(",ACTION_TYPE=" + ACTION_TYPE);
			sb.append(",ACTION_DATE=" + String.valueOf(ACTION_DATE));
			sb.append(",MANUAL_DUE_DATE=" + String.valueOf(MANUAL_DUE_DATE));
			sb.append(",RESPONSIBLE_USER=" + String.valueOf(RESPONSIBLE_USER));
			sb.append(",ACTION_NOTES1=" + ACTION_NOTES1);
			sb.append(",ACTION_NOTES2=" + ACTION_NOTES2);
			sb.append(",ACTION_NOTES3=" + ACTION_NOTES3);
			sb.append(",ACTION_NOTES4=" + ACTION_NOTES4);
			sb.append(",ACTION_NOTES5=" + ACTION_NOTES5);
			sb.append(",GENERAL_NOTES=" + GENERAL_NOTES);
			sb.append(",SELECTED_OPTIONS_TEXT=" + SELECTED_OPTIONS_TEXT);
			sb.append(",ACTION_USER=" + String.valueOf(ACTION_USER));
			sb.append(",ACTION_CATEGORY=" + ACTION_CATEGORY);
			sb.append(",SPECIAL_FINAL_STATUS=" + SPECIAL_FINAL_STATUS);
			sb.append(",JOURNAL_CODE=" + JOURNAL_CODE);
			sb.append(",PUBLICATION_DATE=" + String.valueOf(PUBLICATION_DATE));
			sb.append(",IPAS_PROC_TYP=" + IPAS_PROC_TYP);
			sb.append(",IPAS_PROC_NBR=" + String.valueOf(IPAS_PROC_NBR));
			sb.append(",IPAS_ACTION_NBR=" + String.valueOf(IPAS_ACTION_NBR));
			sb.append("]");

			return sb.toString();
		}

		/**
		 * Compare keys
		 */
		public int compareTo(copyOfinsert_actionsStruct other) {

			int returnValue = -1;

			return returnValue;
		}

		private int checkNullsAndCompare(Object object1, Object object2) {
			int returnValue = 0;
			if (object1 instanceof Comparable && object2 instanceof Comparable) {
				returnValue = ((Comparable) object1).compareTo(object2);
			} else if (object1 != null && object2 != null) {
				returnValue = compareStrings(object1.toString(), object2.toString());
			} else if (object1 == null && object2 != null) {
				returnValue = 1;
			} else if (object1 != null && object2 == null) {
				returnValue = -1;
			} else {
				returnValue = 0;
			}

			return returnValue;
		}

		private int compareStrings(String string1, String string2) {
			return string1.compareTo(string2);
		}

	}

	public static class row43Struct implements routines.system.IPersistableRow<row43Struct> {
		final static byte[] commonByteArrayLock_WIPO_PROJECTS_E1a_Marc_a_interm_Copy = new byte[0];
		static byte[] commonByteArray_WIPO_PROJECTS_E1a_Marc_a_interm_Copy = new byte[0];

		public Long num_acta;

		public Long getNum_acta() {
			return this.num_acta;
		}

		public String tip_solicitud;

		public String getTip_solicitud() {
			return this.tip_solicitud;
		}

		public Integer cod_primer_titular;

		public Integer getCod_primer_titular() {
			return this.cod_primer_titular;
		}

		public Long num_registro_viejo;

		public Long getNum_registro_viejo() {
			return this.num_registro_viejo;
		}

		public Long num_acta_nuevo;

		public Long getNum_acta_nuevo() {
			return this.num_acta_nuevo;
		}

		public String tip_signo;

		public String getTip_signo() {
			return this.tip_signo;
		}

		public Integer cod_denominacion;

		public Integer getCod_denominacion() {
			return this.cod_denominacion;
		}

		public Short num_clase;

		public Short getNum_clase() {
			return this.num_clase;
		}

		public Short num_agente;

		public Short getNum_agente() {
			return this.num_agente;
		}

		public String num_reg_prioridad;

		public String getNum_reg_prioridad() {
			return this.num_reg_prioridad;
		}

		public String cod_pais_prioridad;

		public String getCod_pais_prioridad() {
			return this.cod_pais_prioridad;
		}

		public java.util.Date fec_prioridad;

		public java.util.Date getFec_prioridad() {
			return this.fec_prioridad;
		}

		public String cod_status;

		public String getCod_status() {
			return this.cod_status;
		}

		public java.util.Date fec_status;

		public java.util.Date getFec_status() {
			return this.fec_status;
		}

		public java.util.Date fec_registro;

		public java.util.Date getFec_registro() {
			return this.fec_registro;
		}

		public Integer num_registro;

		public Integer getNum_registro() {
			return this.num_registro;
		}

		public java.util.Date fec_ingreso;

		public java.util.Date getFec_ingreso() {
			return this.fec_ingreso;
		}

		public java.util.Date fec_cambio;

		public java.util.Date getFec_cambio() {
			return this.fec_cambio;
		}

		public String cod_usuario_cambio;

		public String getCod_usuario_cambio() {
			return this.cod_usuario_cambio;
		}

		public java.util.Date fec_solicitud;

		public java.util.Date getFec_solicitud() {
			return this.fec_solicitud;
		}

		public Long num_logotipo;

		public Long getNum_logotipo() {
			return this.num_logotipo;
		}

		public java.util.Date fec_vencimiento;

		public java.util.Date getFec_vencimiento() {
			return this.fec_vencimiento;
		}

		public Short tip_tramite;

		public Short getTip_tramite() {
			return this.tip_tramite;
		}

		public Integer num_registro_poder;

		public Integer getNum_registro_poder() {
			return this.num_registro_poder;
		}

		public Short ed_niza;

		public Short getEd_niza() {
			return this.ed_niza;
		}

		public String tip_signo_old;

		public String getTip_signo_old() {
			return this.tip_signo_old;
		}

		public Short num_agente_old;

		public Short getNum_agente_old() {
			return this.num_agente_old;
		}

		public String cod_pais_prioridad_old;

		public String getCod_pais_prioridad_old() {
			return this.cod_pais_prioridad_old;
		}

		private String readString(ObjectInputStream dis) throws IOException {
			String strReturn = null;
			int length = 0;
			length = dis.readInt();
			if (length == -1) {
				strReturn = null;
			} else {
				if (length > commonByteArray_WIPO_PROJECTS_E1a_Marc_a_interm_Copy.length) {
					if (length < 1024 && commonByteArray_WIPO_PROJECTS_E1a_Marc_a_interm_Copy.length == 0) {
						commonByteArray_WIPO_PROJECTS_E1a_Marc_a_interm_Copy = new byte[1024];
					} else {
						commonByteArray_WIPO_PROJECTS_E1a_Marc_a_interm_Copy = new byte[2 * length];
					}
				}
				dis.readFully(commonByteArray_WIPO_PROJECTS_E1a_Marc_a_interm_Copy, 0, length);
				strReturn = new String(commonByteArray_WIPO_PROJECTS_E1a_Marc_a_interm_Copy, 0, length, utf8Charset);
			}
			return strReturn;
		}

		private void writeString(String str, ObjectOutputStream dos) throws IOException {
			if (str == null) {
				dos.writeInt(-1);
			} else {
				byte[] byteArray = str.getBytes(utf8Charset);
				dos.writeInt(byteArray.length);
				dos.write(byteArray);
			}
		}

		private Integer readInteger(ObjectInputStream dis) throws IOException {
			Integer intReturn;
			int length = 0;
			length = dis.readByte();
			if (length == -1) {
				intReturn = null;
			} else {
				intReturn = dis.readInt();
			}
			return intReturn;
		}

		private void writeInteger(Integer intNum, ObjectOutputStream dos) throws IOException {
			if (intNum == null) {
				dos.writeByte(-1);
			} else {
				dos.writeByte(0);
				dos.writeInt(intNum);
			}
		}

		private java.util.Date readDate(ObjectInputStream dis) throws IOException {
			java.util.Date dateReturn = null;
			int length = 0;
			length = dis.readByte();
			if (length == -1) {
				dateReturn = null;
			} else {
				dateReturn = new Date(dis.readLong());
			}
			return dateReturn;
		}

		private void writeDate(java.util.Date date1, ObjectOutputStream dos) throws IOException {
			if (date1 == null) {
				dos.writeByte(-1);
			} else {
				dos.writeByte(0);
				dos.writeLong(date1.getTime());
			}
		}

		public void readData(ObjectInputStream dis) {

			synchronized (commonByteArrayLock_WIPO_PROJECTS_E1a_Marc_a_interm_Copy) {

				try {

					int length = 0;

					length = dis.readByte();
					if (length == -1) {
						this.num_acta = null;
					} else {
						this.num_acta = dis.readLong();
					}

					this.tip_solicitud = readString(dis);

					this.cod_primer_titular = readInteger(dis);

					length = dis.readByte();
					if (length == -1) {
						this.num_registro_viejo = null;
					} else {
						this.num_registro_viejo = dis.readLong();
					}

					length = dis.readByte();
					if (length == -1) {
						this.num_acta_nuevo = null;
					} else {
						this.num_acta_nuevo = dis.readLong();
					}

					this.tip_signo = readString(dis);

					this.cod_denominacion = readInteger(dis);

					length = dis.readByte();
					if (length == -1) {
						this.num_clase = null;
					} else {
						this.num_clase = dis.readShort();
					}

					length = dis.readByte();
					if (length == -1) {
						this.num_agente = null;
					} else {
						this.num_agente = dis.readShort();
					}

					this.num_reg_prioridad = readString(dis);

					this.cod_pais_prioridad = readString(dis);

					this.fec_prioridad = readDate(dis);

					this.cod_status = readString(dis);

					this.fec_status = readDate(dis);

					this.fec_registro = readDate(dis);

					this.num_registro = readInteger(dis);

					this.fec_ingreso = readDate(dis);

					this.fec_cambio = readDate(dis);

					this.cod_usuario_cambio = readString(dis);

					this.fec_solicitud = readDate(dis);

					length = dis.readByte();
					if (length == -1) {
						this.num_logotipo = null;
					} else {
						this.num_logotipo = dis.readLong();
					}

					this.fec_vencimiento = readDate(dis);

					length = dis.readByte();
					if (length == -1) {
						this.tip_tramite = null;
					} else {
						this.tip_tramite = dis.readShort();
					}

					this.num_registro_poder = readInteger(dis);

					length = dis.readByte();
					if (length == -1) {
						this.ed_niza = null;
					} else {
						this.ed_niza = dis.readShort();
					}

					this.tip_signo_old = readString(dis);

					length = dis.readByte();
					if (length == -1) {
						this.num_agente_old = null;
					} else {
						this.num_agente_old = dis.readShort();
					}

					this.cod_pais_prioridad_old = readString(dis);

				} catch (IOException e) {
					throw new RuntimeException(e);

				}

			}

		}

		public void writeData(ObjectOutputStream dos) {
			try {

				// Long

				if (this.num_acta == null) {
					dos.writeByte(-1);
				} else {
					dos.writeByte(0);
					dos.writeLong(this.num_acta);
				}

				// String

				writeString(this.tip_solicitud, dos);

				// Integer

				writeInteger(this.cod_primer_titular, dos);

				// Long

				if (this.num_registro_viejo == null) {
					dos.writeByte(-1);
				} else {
					dos.writeByte(0);
					dos.writeLong(this.num_registro_viejo);
				}

				// Long

				if (this.num_acta_nuevo == null) {
					dos.writeByte(-1);
				} else {
					dos.writeByte(0);
					dos.writeLong(this.num_acta_nuevo);
				}

				// String

				writeString(this.tip_signo, dos);

				// Integer

				writeInteger(this.cod_denominacion, dos);

				// Short

				if (this.num_clase == null) {
					dos.writeByte(-1);
				} else {
					dos.writeByte(0);
					dos.writeShort(this.num_clase);
				}

				// Short

				if (this.num_agente == null) {
					dos.writeByte(-1);
				} else {
					dos.writeByte(0);
					dos.writeShort(this.num_agente);
				}

				// String

				writeString(this.num_reg_prioridad, dos);

				// String

				writeString(this.cod_pais_prioridad, dos);

				// java.util.Date

				writeDate(this.fec_prioridad, dos);

				// String

				writeString(this.cod_status, dos);

				// java.util.Date

				writeDate(this.fec_status, dos);

				// java.util.Date

				writeDate(this.fec_registro, dos);

				// Integer

				writeInteger(this.num_registro, dos);

				// java.util.Date

				writeDate(this.fec_ingreso, dos);

				// java.util.Date

				writeDate(this.fec_cambio, dos);

				// String

				writeString(this.cod_usuario_cambio, dos);

				// java.util.Date

				writeDate(this.fec_solicitud, dos);

				// Long

				if (this.num_logotipo == null) {
					dos.writeByte(-1);
				} else {
					dos.writeByte(0);
					dos.writeLong(this.num_logotipo);
				}

				// java.util.Date

				writeDate(this.fec_vencimiento, dos);

				// Short

				if (this.tip_tramite == null) {
					dos.writeByte(-1);
				} else {
					dos.writeByte(0);
					dos.writeShort(this.tip_tramite);
				}

				// Integer

				writeInteger(this.num_registro_poder, dos);

				// Short

				if (this.ed_niza == null) {
					dos.writeByte(-1);
				} else {
					dos.writeByte(0);
					dos.writeShort(this.ed_niza);
				}

				// String

				writeString(this.tip_signo_old, dos);

				// Short

				if (this.num_agente_old == null) {
					dos.writeByte(-1);
				} else {
					dos.writeByte(0);
					dos.writeShort(this.num_agente_old);
				}

				// String

				writeString(this.cod_pais_prioridad_old, dos);

			} catch (IOException e) {
				throw new RuntimeException(e);
			}

		}

		public String toString() {

			StringBuilder sb = new StringBuilder();
			sb.append(super.toString());
			sb.append("[");
			sb.append("num_acta=" + String.valueOf(num_acta));
			sb.append(",tip_solicitud=" + tip_solicitud);
			sb.append(",cod_primer_titular=" + String.valueOf(cod_primer_titular));
			sb.append(",num_registro_viejo=" + String.valueOf(num_registro_viejo));
			sb.append(",num_acta_nuevo=" + String.valueOf(num_acta_nuevo));
			sb.append(",tip_signo=" + tip_signo);
			sb.append(",cod_denominacion=" + String.valueOf(cod_denominacion));
			sb.append(",num_clase=" + String.valueOf(num_clase));
			sb.append(",num_agente=" + String.valueOf(num_agente));
			sb.append(",num_reg_prioridad=" + num_reg_prioridad);
			sb.append(",cod_pais_prioridad=" + cod_pais_prioridad);
			sb.append(",fec_prioridad=" + String.valueOf(fec_prioridad));
			sb.append(",cod_status=" + cod_status);
			sb.append(",fec_status=" + String.valueOf(fec_status));
			sb.append(",fec_registro=" + String.valueOf(fec_registro));
			sb.append(",num_registro=" + String.valueOf(num_registro));
			sb.append(",fec_ingreso=" + String.valueOf(fec_ingreso));
			sb.append(",fec_cambio=" + String.valueOf(fec_cambio));
			sb.append(",cod_usuario_cambio=" + cod_usuario_cambio);
			sb.append(",fec_solicitud=" + String.valueOf(fec_solicitud));
			sb.append(",num_logotipo=" + String.valueOf(num_logotipo));
			sb.append(",fec_vencimiento=" + String.valueOf(fec_vencimiento));
			sb.append(",tip_tramite=" + String.valueOf(tip_tramite));
			sb.append(",num_registro_poder=" + String.valueOf(num_registro_poder));
			sb.append(",ed_niza=" + String.valueOf(ed_niza));
			sb.append(",tip_signo_old=" + tip_signo_old);
			sb.append(",num_agente_old=" + String.valueOf(num_agente_old));
			sb.append(",cod_pais_prioridad_old=" + cod_pais_prioridad_old);
			sb.append("]");

			return sb.toString();
		}

		/**
		 * Compare keys
		 */
		public int compareTo(row43Struct other) {

			int returnValue = -1;

			return returnValue;
		}

		private int checkNullsAndCompare(Object object1, Object object2) {
			int returnValue = 0;
			if (object1 instanceof Comparable && object2 instanceof Comparable) {
				returnValue = ((Comparable) object1).compareTo(object2);
			} else if (object1 != null && object2 != null) {
				returnValue = compareStrings(object1.toString(), object2.toString());
			} else if (object1 == null && object2 != null) {
				returnValue = 1;
			} else if (object1 != null && object2 == null) {
				returnValue = -1;
			} else {
				returnValue = 0;
			}

			return returnValue;
		}

		private int compareStrings(String string1, String string2) {
			return string1.compareTo(string2);
		}

	}

	public static class after_tDBInput_33Struct implements routines.system.IPersistableRow<after_tDBInput_33Struct> {
		final static byte[] commonByteArrayLock_WIPO_PROJECTS_E1a_Marc_a_interm_Copy = new byte[0];
		static byte[] commonByteArray_WIPO_PROJECTS_E1a_Marc_a_interm_Copy = new byte[0];

		public Long num_acta;

		public Long getNum_acta() {
			return this.num_acta;
		}

		public String tip_solicitud;

		public String getTip_solicitud() {
			return this.tip_solicitud;
		}

		public Integer cod_primer_titular;

		public Integer getCod_primer_titular() {
			return this.cod_primer_titular;
		}

		public Long num_registro_viejo;

		public Long getNum_registro_viejo() {
			return this.num_registro_viejo;
		}

		public Long num_acta_nuevo;

		public Long getNum_acta_nuevo() {
			return this.num_acta_nuevo;
		}

		public String tip_signo;

		public String getTip_signo() {
			return this.tip_signo;
		}

		public Integer cod_denominacion;

		public Integer getCod_denominacion() {
			return this.cod_denominacion;
		}

		public Short num_clase;

		public Short getNum_clase() {
			return this.num_clase;
		}

		public Short num_agente;

		public Short getNum_agente() {
			return this.num_agente;
		}

		public String num_reg_prioridad;

		public String getNum_reg_prioridad() {
			return this.num_reg_prioridad;
		}

		public String cod_pais_prioridad;

		public String getCod_pais_prioridad() {
			return this.cod_pais_prioridad;
		}

		public java.util.Date fec_prioridad;

		public java.util.Date getFec_prioridad() {
			return this.fec_prioridad;
		}

		public String cod_status;

		public String getCod_status() {
			return this.cod_status;
		}

		public java.util.Date fec_status;

		public java.util.Date getFec_status() {
			return this.fec_status;
		}

		public java.util.Date fec_registro;

		public java.util.Date getFec_registro() {
			return this.fec_registro;
		}

		public Integer num_registro;

		public Integer getNum_registro() {
			return this.num_registro;
		}

		public java.util.Date fec_ingreso;

		public java.util.Date getFec_ingreso() {
			return this.fec_ingreso;
		}

		public java.util.Date fec_cambio;

		public java.util.Date getFec_cambio() {
			return this.fec_cambio;
		}

		public String cod_usuario_cambio;

		public String getCod_usuario_cambio() {
			return this.cod_usuario_cambio;
		}

		public java.util.Date fec_solicitud;

		public java.util.Date getFec_solicitud() {
			return this.fec_solicitud;
		}

		public Long num_logotipo;

		public Long getNum_logotipo() {
			return this.num_logotipo;
		}

		public java.util.Date fec_vencimiento;

		public java.util.Date getFec_vencimiento() {
			return this.fec_vencimiento;
		}

		public Short tip_tramite;

		public Short getTip_tramite() {
			return this.tip_tramite;
		}

		public Integer num_registro_poder;

		public Integer getNum_registro_poder() {
			return this.num_registro_poder;
		}

		public Short ed_niza;

		public Short getEd_niza() {
			return this.ed_niza;
		}

		public String tip_signo_old;

		public String getTip_signo_old() {
			return this.tip_signo_old;
		}

		public Short num_agente_old;

		public Short getNum_agente_old() {
			return this.num_agente_old;
		}

		public String cod_pais_prioridad_old;

		public String getCod_pais_prioridad_old() {
			return this.cod_pais_prioridad_old;
		}

		private String readString(ObjectInputStream dis) throws IOException {
			String strReturn = null;
			int length = 0;
			length = dis.readInt();
			if (length == -1) {
				strReturn = null;
			} else {
				if (length > commonByteArray_WIPO_PROJECTS_E1a_Marc_a_interm_Copy.length) {
					if (length < 1024 && commonByteArray_WIPO_PROJECTS_E1a_Marc_a_interm_Copy.length == 0) {
						commonByteArray_WIPO_PROJECTS_E1a_Marc_a_interm_Copy = new byte[1024];
					} else {
						commonByteArray_WIPO_PROJECTS_E1a_Marc_a_interm_Copy = new byte[2 * length];
					}
				}
				dis.readFully(commonByteArray_WIPO_PROJECTS_E1a_Marc_a_interm_Copy, 0, length);
				strReturn = new String(commonByteArray_WIPO_PROJECTS_E1a_Marc_a_interm_Copy, 0, length, utf8Charset);
			}
			return strReturn;
		}

		private void writeString(String str, ObjectOutputStream dos) throws IOException {
			if (str == null) {
				dos.writeInt(-1);
			} else {
				byte[] byteArray = str.getBytes(utf8Charset);
				dos.writeInt(byteArray.length);
				dos.write(byteArray);
			}
		}

		private Integer readInteger(ObjectInputStream dis) throws IOException {
			Integer intReturn;
			int length = 0;
			length = dis.readByte();
			if (length == -1) {
				intReturn = null;
			} else {
				intReturn = dis.readInt();
			}
			return intReturn;
		}

		private void writeInteger(Integer intNum, ObjectOutputStream dos) throws IOException {
			if (intNum == null) {
				dos.writeByte(-1);
			} else {
				dos.writeByte(0);
				dos.writeInt(intNum);
			}
		}

		private java.util.Date readDate(ObjectInputStream dis) throws IOException {
			java.util.Date dateReturn = null;
			int length = 0;
			length = dis.readByte();
			if (length == -1) {
				dateReturn = null;
			} else {
				dateReturn = new Date(dis.readLong());
			}
			return dateReturn;
		}

		private void writeDate(java.util.Date date1, ObjectOutputStream dos) throws IOException {
			if (date1 == null) {
				dos.writeByte(-1);
			} else {
				dos.writeByte(0);
				dos.writeLong(date1.getTime());
			}
		}

		public void readData(ObjectInputStream dis) {

			synchronized (commonByteArrayLock_WIPO_PROJECTS_E1a_Marc_a_interm_Copy) {

				try {

					int length = 0;

					length = dis.readByte();
					if (length == -1) {
						this.num_acta = null;
					} else {
						this.num_acta = dis.readLong();
					}

					this.tip_solicitud = readString(dis);

					this.cod_primer_titular = readInteger(dis);

					length = dis.readByte();
					if (length == -1) {
						this.num_registro_viejo = null;
					} else {
						this.num_registro_viejo = dis.readLong();
					}

					length = dis.readByte();
					if (length == -1) {
						this.num_acta_nuevo = null;
					} else {
						this.num_acta_nuevo = dis.readLong();
					}

					this.tip_signo = readString(dis);

					this.cod_denominacion = readInteger(dis);

					length = dis.readByte();
					if (length == -1) {
						this.num_clase = null;
					} else {
						this.num_clase = dis.readShort();
					}

					length = dis.readByte();
					if (length == -1) {
						this.num_agente = null;
					} else {
						this.num_agente = dis.readShort();
					}

					this.num_reg_prioridad = readString(dis);

					this.cod_pais_prioridad = readString(dis);

					this.fec_prioridad = readDate(dis);

					this.cod_status = readString(dis);

					this.fec_status = readDate(dis);

					this.fec_registro = readDate(dis);

					this.num_registro = readInteger(dis);

					this.fec_ingreso = readDate(dis);

					this.fec_cambio = readDate(dis);

					this.cod_usuario_cambio = readString(dis);

					this.fec_solicitud = readDate(dis);

					length = dis.readByte();
					if (length == -1) {
						this.num_logotipo = null;
					} else {
						this.num_logotipo = dis.readLong();
					}

					this.fec_vencimiento = readDate(dis);

					length = dis.readByte();
					if (length == -1) {
						this.tip_tramite = null;
					} else {
						this.tip_tramite = dis.readShort();
					}

					this.num_registro_poder = readInteger(dis);

					length = dis.readByte();
					if (length == -1) {
						this.ed_niza = null;
					} else {
						this.ed_niza = dis.readShort();
					}

					this.tip_signo_old = readString(dis);

					length = dis.readByte();
					if (length == -1) {
						this.num_agente_old = null;
					} else {
						this.num_agente_old = dis.readShort();
					}

					this.cod_pais_prioridad_old = readString(dis);

				} catch (IOException e) {
					throw new RuntimeException(e);

				}

			}

		}

		public void writeData(ObjectOutputStream dos) {
			try {

				// Long

				if (this.num_acta == null) {
					dos.writeByte(-1);
				} else {
					dos.writeByte(0);
					dos.writeLong(this.num_acta);
				}

				// String

				writeString(this.tip_solicitud, dos);

				// Integer

				writeInteger(this.cod_primer_titular, dos);

				// Long

				if (this.num_registro_viejo == null) {
					dos.writeByte(-1);
				} else {
					dos.writeByte(0);
					dos.writeLong(this.num_registro_viejo);
				}

				// Long

				if (this.num_acta_nuevo == null) {
					dos.writeByte(-1);
				} else {
					dos.writeByte(0);
					dos.writeLong(this.num_acta_nuevo);
				}

				// String

				writeString(this.tip_signo, dos);

				// Integer

				writeInteger(this.cod_denominacion, dos);

				// Short

				if (this.num_clase == null) {
					dos.writeByte(-1);
				} else {
					dos.writeByte(0);
					dos.writeShort(this.num_clase);
				}

				// Short

				if (this.num_agente == null) {
					dos.writeByte(-1);
				} else {
					dos.writeByte(0);
					dos.writeShort(this.num_agente);
				}

				// String

				writeString(this.num_reg_prioridad, dos);

				// String

				writeString(this.cod_pais_prioridad, dos);

				// java.util.Date

				writeDate(this.fec_prioridad, dos);

				// String

				writeString(this.cod_status, dos);

				// java.util.Date

				writeDate(this.fec_status, dos);

				// java.util.Date

				writeDate(this.fec_registro, dos);

				// Integer

				writeInteger(this.num_registro, dos);

				// java.util.Date

				writeDate(this.fec_ingreso, dos);

				// java.util.Date

				writeDate(this.fec_cambio, dos);

				// String

				writeString(this.cod_usuario_cambio, dos);

				// java.util.Date

				writeDate(this.fec_solicitud, dos);

				// Long

				if (this.num_logotipo == null) {
					dos.writeByte(-1);
				} else {
					dos.writeByte(0);
					dos.writeLong(this.num_logotipo);
				}

				// java.util.Date

				writeDate(this.fec_vencimiento, dos);

				// Short

				if (this.tip_tramite == null) {
					dos.writeByte(-1);
				} else {
					dos.writeByte(0);
					dos.writeShort(this.tip_tramite);
				}

				// Integer

				writeInteger(this.num_registro_poder, dos);

				// Short

				if (this.ed_niza == null) {
					dos.writeByte(-1);
				} else {
					dos.writeByte(0);
					dos.writeShort(this.ed_niza);
				}

				// String

				writeString(this.tip_signo_old, dos);

				// Short

				if (this.num_agente_old == null) {
					dos.writeByte(-1);
				} else {
					dos.writeByte(0);
					dos.writeShort(this.num_agente_old);
				}

				// String

				writeString(this.cod_pais_prioridad_old, dos);

			} catch (IOException e) {
				throw new RuntimeException(e);
			}

		}

		public String toString() {

			StringBuilder sb = new StringBuilder();
			sb.append(super.toString());
			sb.append("[");
			sb.append("num_acta=" + String.valueOf(num_acta));
			sb.append(",tip_solicitud=" + tip_solicitud);
			sb.append(",cod_primer_titular=" + String.valueOf(cod_primer_titular));
			sb.append(",num_registro_viejo=" + String.valueOf(num_registro_viejo));
			sb.append(",num_acta_nuevo=" + String.valueOf(num_acta_nuevo));
			sb.append(",tip_signo=" + tip_signo);
			sb.append(",cod_denominacion=" + String.valueOf(cod_denominacion));
			sb.append(",num_clase=" + String.valueOf(num_clase));
			sb.append(",num_agente=" + String.valueOf(num_agente));
			sb.append(",num_reg_prioridad=" + num_reg_prioridad);
			sb.append(",cod_pais_prioridad=" + cod_pais_prioridad);
			sb.append(",fec_prioridad=" + String.valueOf(fec_prioridad));
			sb.append(",cod_status=" + cod_status);
			sb.append(",fec_status=" + String.valueOf(fec_status));
			sb.append(",fec_registro=" + String.valueOf(fec_registro));
			sb.append(",num_registro=" + String.valueOf(num_registro));
			sb.append(",fec_ingreso=" + String.valueOf(fec_ingreso));
			sb.append(",fec_cambio=" + String.valueOf(fec_cambio));
			sb.append(",cod_usuario_cambio=" + cod_usuario_cambio);
			sb.append(",fec_solicitud=" + String.valueOf(fec_solicitud));
			sb.append(",num_logotipo=" + String.valueOf(num_logotipo));
			sb.append(",fec_vencimiento=" + String.valueOf(fec_vencimiento));
			sb.append(",tip_tramite=" + String.valueOf(tip_tramite));
			sb.append(",num_registro_poder=" + String.valueOf(num_registro_poder));
			sb.append(",ed_niza=" + String.valueOf(ed_niza));
			sb.append(",tip_signo_old=" + tip_signo_old);
			sb.append(",num_agente_old=" + String.valueOf(num_agente_old));
			sb.append(",cod_pais_prioridad_old=" + cod_pais_prioridad_old);
			sb.append("]");

			return sb.toString();
		}

		/**
		 * Compare keys
		 */
		public int compareTo(after_tDBInput_33Struct other) {

			int returnValue = -1;

			return returnValue;
		}

		private int checkNullsAndCompare(Object object1, Object object2) {
			int returnValue = 0;
			if (object1 instanceof Comparable && object2 instanceof Comparable) {
				returnValue = ((Comparable) object1).compareTo(object2);
			} else if (object1 != null && object2 != null) {
				returnValue = compareStrings(object1.toString(), object2.toString());
			} else if (object1 == null && object2 != null) {
				returnValue = 1;
			} else if (object1 != null && object2 == null) {
				returnValue = -1;
			} else {
				returnValue = 0;
			}

			return returnValue;
		}

		private int compareStrings(String string1, String string2) {
			return string1.compareTo(string2);
		}

	}

	public void tDBInput_33Process(final java.util.Map<String, Object> globalMap) throws TalendException {
		globalMap.put("tDBInput_33_SUBPROCESS_STATE", 0);

		final boolean execStat = this.execStat;

		String iterateId = "";

		String currentComponent = "";
		java.util.Map<String, Object> resourceMap = new java.util.HashMap<String, Object>();

		try {
			// TDI-39566 avoid throwing an useless Exception
			boolean resumeIt = true;
			if (globalResumeTicket == false && resumeEntryMethodName != null) {
				String currentMethodName = new java.lang.Exception().getStackTrace()[0].getMethodName();
				resumeIt = resumeEntryMethodName.equals(currentMethodName);
			}
			if (resumeIt || globalResumeTicket) { // start the resume
				globalResumeTicket = true;

				tDBInput_31Process(globalMap);

				row43Struct row43 = new row43Struct();
				copyOfinsert_actionsStruct copyOfinsert_actions = new copyOfinsert_actionsStruct();
				row45Struct row45 = new row45Struct();

				/**
				 * [tLogRow_14 begin ] start
				 */

				ok_Hash.put("tLogRow_14", false);
				start_Hash.put("tLogRow_14", System.currentTimeMillis());

				currentComponent = "tLogRow_14";

				if (execStat) {
					runStat.updateStatOnConnection(resourceMap, iterateId, 0, 0, "row45");
				}

				int tos_count_tLogRow_14 = 0;

				///////////////////////

				final String OUTPUT_FIELD_SEPARATOR_tLogRow_14 = "|";
				java.io.PrintStream consoleOut_tLogRow_14 = null;

				StringBuilder strBuffer_tLogRow_14 = null;
				int nb_line_tLogRow_14 = 0;
///////////////////////    			

				/**
				 * [tLogRow_14 begin ] stop
				 */

				/**
				 * [tDBOutput_13 begin ] start
				 */

				ok_Hash.put("tDBOutput_13", false);
				start_Hash.put("tDBOutput_13", System.currentTimeMillis());

				currentComponent = "tDBOutput_13";

				if (execStat) {
					runStat.updateStatOnConnection(resourceMap, iterateId, 0, 0, "copyOfinsert_actions");
				}

				int tos_count_tDBOutput_13 = 0;

				int nb_line_tDBOutput_13 = 0;
				int nb_line_update_tDBOutput_13 = 0;
				int nb_line_inserted_tDBOutput_13 = 0;
				int nb_line_deleted_tDBOutput_13 = 0;
				int nb_line_rejected_tDBOutput_13 = 0;

				int deletedCount_tDBOutput_13 = 0;
				int updatedCount_tDBOutput_13 = 0;
				int insertedCount_tDBOutput_13 = 0;
				int rejectedCount_tDBOutput_13 = 0;
				String dbschema_tDBOutput_13 = null;
				String tableName_tDBOutput_13 = null;
				boolean whetherReject_tDBOutput_13 = false;

				java.util.Calendar calendar_tDBOutput_13 = java.util.Calendar.getInstance();
				long year1_tDBOutput_13 = TalendDate.parseDate("yyyy-MM-dd", "0001-01-01").getTime();
				long year2_tDBOutput_13 = TalendDate.parseDate("yyyy-MM-dd", "1753-01-01").getTime();
				long year10000_tDBOutput_13 = TalendDate.parseDate("yyyy-MM-dd HH:mm:ss", "9999-12-31 24:00:00")
						.getTime();
				long date_tDBOutput_13;

				java.util.Calendar calendar_datetimeoffset_tDBOutput_13 = java.util.Calendar
						.getInstance(java.util.TimeZone.getTimeZone("UTC"));

				java.sql.Connection conn_tDBOutput_13 = null;
				String dbUser_tDBOutput_13 = null;
				dbschema_tDBOutput_13 = (String) globalMap.get("dbschema_tDBConnection_1");

				conn_tDBOutput_13 = (java.sql.Connection) globalMap.get("conn_tDBConnection_1");

				if (dbschema_tDBOutput_13 == null || dbschema_tDBOutput_13.trim().length() == 0) {
					tableName_tDBOutput_13 = "VW_IMPORT_MARK_ACTIONS";
				} else {
					tableName_tDBOutput_13 = dbschema_tDBOutput_13 + "].[" + "VW_IMPORT_MARK_ACTIONS";
				}
				int count_tDBOutput_13 = 0;

				String insert_tDBOutput_13 = "INSERT INTO [" + tableName_tDBOutput_13
						+ "] ([FILE_SEQ],[FILE_TYPE],[FILE_SERIES],[FILE_NBR],[ACTION_TYPE],[ACTION_DATE],[MANUAL_DUE_DATE],[RESPONSIBLE_USER],[ACTION_NOTES1],[ACTION_NOTES2],[ACTION_NOTES3],[ACTION_NOTES4],[ACTION_NOTES5],[GENERAL_NOTES],[SELECTED_OPTIONS_TEXT],[ACTION_USER],[ACTION_CATEGORY],[SPECIAL_FINAL_STATUS],[JOURNAL_CODE],[PUBLICATION_DATE],[IPAS_PROC_TYP],[IPAS_PROC_NBR],[IPAS_ACTION_NBR]) VALUES (?,?,?,?,?,?,?,?,?,?,?,?,?,?,?,?,?,?,?,?,?,?,?)";
				java.sql.PreparedStatement pstmt_tDBOutput_13 = conn_tDBOutput_13.prepareStatement(insert_tDBOutput_13);
				resourceMap.put("pstmt_tDBOutput_13", pstmt_tDBOutput_13);

				boolean isShareIdentity_tDBOutput_13 = globalMap.get("shareIdentitySetting_tDBConnection_1") != null
						&& (Boolean) globalMap.get("shareIdentitySetting_tDBConnection_1") == true;

				/**
				 * [tDBOutput_13 begin ] stop
				 */

				/**
				 * [tMap_12 begin ] start
				 */

				ok_Hash.put("tMap_12", false);
				start_Hash.put("tMap_12", System.currentTimeMillis());

				currentComponent = "tMap_12";

				if (execStat) {
					runStat.updateStatOnConnection(resourceMap, iterateId, 0, 0, "row43");
				}

				int tos_count_tMap_12 = 0;

// ###############################
// # Lookup's keys initialization

				org.talend.designer.components.lookup.memory.AdvancedMemoryLookup<row44Struct> tHash_Lookup_row44 = (org.talend.designer.components.lookup.memory.AdvancedMemoryLookup<row44Struct>) ((org.talend.designer.components.lookup.memory.AdvancedMemoryLookup<row44Struct>) globalMap
						.get("tHash_Lookup_row44"));

				row44Struct row44HashKey = new row44Struct();
				row44Struct row44Default = new row44Struct();
// ###############################        

// ###############################
// # Vars initialization
				class Var__tMap_12__Struct {
				}
				Var__tMap_12__Struct Var__tMap_12 = new Var__tMap_12__Struct();
// ###############################

// ###############################
// # Outputs initialization
				copyOfinsert_actionsStruct copyOfinsert_actions_tmp = new copyOfinsert_actionsStruct();
// ###############################

				/**
				 * [tMap_12 begin ] stop
				 */

				/**
				 * [tDBInput_33 begin ] start
				 */

				ok_Hash.put("tDBInput_33", false);
				start_Hash.put("tDBInput_33", System.currentTimeMillis());

				currentComponent = "tDBInput_33";

				int tos_count_tDBInput_33 = 0;

				int nb_line_tDBInput_33 = 0;
				java.sql.Connection conn_tDBInput_33 = null;
				conn_tDBInput_33 = (java.sql.Connection) globalMap.get("conn_tDBConnection_2");

				java.sql.Statement stmt_tDBInput_33 = conn_tDBInput_33.createStatement();

				String dbquery_tDBInput_33 = "SELECT \n  \"Paraguay\".\"public\".\"marca\".\"num_acta\", \n  \"Paraguay\".\"public\".\"marca\".\"tip_solicitud\", \n  \""
						+ "Paraguay\".\"public\".\"marca\".\"cod_primer_titular\", \n  \"Paraguay\".\"public\".\"marca\".\"num_registro_viejo\", \n  "
						+ "\"Paraguay\".\"public\".\"marca\".\"num_acta_nuevo\", \n  \"Paraguay\".\"public\".\"marca\".\"tip_signo\", \n  \"Paraguay"
						+ "\".\"public\".\"marca\".\"cod_denominacion\", \n  \"Paraguay\".\"public\".\"marca\".\"num_clase\", \n  \"Paraguay\".\"publ"
						+ "ic\".\"marca\".\"num_agente\", \n  \"Paraguay\".\"public\".\"marca\".\"num_reg_prioridad\", \n  \"Paraguay\".\"public\".\""
						+ "marca\".\"cod_pais_prioridad\", \n  \"Paraguay\".\"public\".\"marca\".\"fec_prioridad\", \n  \"Paraguay\".\"public\".\"mar"
						+ "ca\".\"cod_status\", \n  \"Paraguay\".\"public\".\"marca\".\"fec_status\", \n  \"Paraguay\".\"public\".\"marca\".\"fec_reg"
						+ "istro\", \n  \"Paraguay\".\"public\".\"marca\".\"num_registro\", \n  \"Paraguay\".\"public\".\"marca\".\"fec_ingreso\", \n "
						+ " \"Paraguay\".\"public\".\"marca\".\"fec_cambio\", \n  \"Paraguay\".\"public\".\"marca\".\"cod_usuario_cambio\", \n  \"Par"
						+ "aguay\".\"public\".\"marca\".\"fec_solicitud\", \n  \"Paraguay\".\"public\".\"marca\".\"num_logotipo\", \n  \"Paraguay\"."
						+ "\"public\".\"marca\".\"fec_vencimiento\", \n  \"Paraguay\".\"public\".\"marca\".\"tip_tramite\", \n  \"Paraguay\".\"public"
						+ "\".\"marca\".\"num_registro_poder\", \n  \"Paraguay\".\"public\".\"marca\".\"ed_niza\", \n  \"Paraguay\".\"public\".\"marc"
						+ "a\".\"tip_signo_old\", \n  \"Paraguay\".\"public\".\"marca\".\"num_agente_old\", \n  \"Paraguay\".\"public\".\"marca\".\"c"
						+ "od_pais_prioridad_old\"\nFROM \"Paraguay\".\"public\".\"marca\" where   \"Paraguay\".\"public\".\"marca\".\"num_logotipo"
						+ "\" is not null";

				globalMap.put("tDBInput_33_QUERY", dbquery_tDBInput_33);
				java.sql.ResultSet rs_tDBInput_33 = null;

				try {
					rs_tDBInput_33 = stmt_tDBInput_33.executeQuery(dbquery_tDBInput_33);
					java.sql.ResultSetMetaData rsmd_tDBInput_33 = rs_tDBInput_33.getMetaData();
					int colQtyInRs_tDBInput_33 = rsmd_tDBInput_33.getColumnCount();

					String tmpContent_tDBInput_33 = null;

					while (rs_tDBInput_33.next()) {
						nb_line_tDBInput_33++;

						if (colQtyInRs_tDBInput_33 < 1) {
							row43.num_acta = null;
						} else {

							row43.num_acta = rs_tDBInput_33.getLong(1);
							if (rs_tDBInput_33.wasNull()) {
								row43.num_acta = null;
							}
						}
						if (colQtyInRs_tDBInput_33 < 2) {
							row43.tip_solicitud = null;
						} else {

							row43.tip_solicitud = routines.system.JDBCUtil.getString(rs_tDBInput_33, 2, false);
						}
						if (colQtyInRs_tDBInput_33 < 3) {
							row43.cod_primer_titular = null;
						} else {

							row43.cod_primer_titular = rs_tDBInput_33.getInt(3);
							if (rs_tDBInput_33.wasNull()) {
								row43.cod_primer_titular = null;
							}
						}
						if (colQtyInRs_tDBInput_33 < 4) {
							row43.num_registro_viejo = null;
						} else {

							row43.num_registro_viejo = rs_tDBInput_33.getLong(4);
							if (rs_tDBInput_33.wasNull()) {
								row43.num_registro_viejo = null;
							}
						}
						if (colQtyInRs_tDBInput_33 < 5) {
							row43.num_acta_nuevo = null;
						} else {

							row43.num_acta_nuevo = rs_tDBInput_33.getLong(5);
							if (rs_tDBInput_33.wasNull()) {
								row43.num_acta_nuevo = null;
							}
						}
						if (colQtyInRs_tDBInput_33 < 6) {
							row43.tip_signo = null;
						} else {

							row43.tip_signo = routines.system.JDBCUtil.getString(rs_tDBInput_33, 6, false);
						}
						if (colQtyInRs_tDBInput_33 < 7) {
							row43.cod_denominacion = null;
						} else {

							row43.cod_denominacion = rs_tDBInput_33.getInt(7);
							if (rs_tDBInput_33.wasNull()) {
								row43.cod_denominacion = null;
							}
						}
						if (colQtyInRs_tDBInput_33 < 8) {
							row43.num_clase = null;
						} else {

							row43.num_clase = rs_tDBInput_33.getShort(8);
							if (rs_tDBInput_33.wasNull()) {
								row43.num_clase = null;
							}
						}
						if (colQtyInRs_tDBInput_33 < 9) {
							row43.num_agente = null;
						} else {

							row43.num_agente = rs_tDBInput_33.getShort(9);
							if (rs_tDBInput_33.wasNull()) {
								row43.num_agente = null;
							}
						}
						if (colQtyInRs_tDBInput_33 < 10) {
							row43.num_reg_prioridad = null;
						} else {

							row43.num_reg_prioridad = routines.system.JDBCUtil.getString(rs_tDBInput_33, 10, false);
						}
						if (colQtyInRs_tDBInput_33 < 11) {
							row43.cod_pais_prioridad = null;
						} else {

							row43.cod_pais_prioridad = routines.system.JDBCUtil.getString(rs_tDBInput_33, 11, false);
						}
						if (colQtyInRs_tDBInput_33 < 12) {
							row43.fec_prioridad = null;
						} else {

							row43.fec_prioridad = routines.system.JDBCUtil.getDate(rs_tDBInput_33, 12);
						}
						if (colQtyInRs_tDBInput_33 < 13) {
							row43.cod_status = null;
						} else {

							row43.cod_status = routines.system.JDBCUtil.getString(rs_tDBInput_33, 13, false);
						}
						if (colQtyInRs_tDBInput_33 < 14) {
							row43.fec_status = null;
						} else {

							row43.fec_status = routines.system.JDBCUtil.getDate(rs_tDBInput_33, 14);
						}
						if (colQtyInRs_tDBInput_33 < 15) {
							row43.fec_registro = null;
						} else {

							row43.fec_registro = routines.system.JDBCUtil.getDate(rs_tDBInput_33, 15);
						}
						if (colQtyInRs_tDBInput_33 < 16) {
							row43.num_registro = null;
						} else {

							row43.num_registro = rs_tDBInput_33.getInt(16);
							if (rs_tDBInput_33.wasNull()) {
								row43.num_registro = null;
							}
						}
						if (colQtyInRs_tDBInput_33 < 17) {
							row43.fec_ingreso = null;
						} else {

							row43.fec_ingreso = routines.system.JDBCUtil.getDate(rs_tDBInput_33, 17);
						}
						if (colQtyInRs_tDBInput_33 < 18) {
							row43.fec_cambio = null;
						} else {

							row43.fec_cambio = routines.system.JDBCUtil.getDate(rs_tDBInput_33, 18);
						}
						if (colQtyInRs_tDBInput_33 < 19) {
							row43.cod_usuario_cambio = null;
						} else {

							row43.cod_usuario_cambio = routines.system.JDBCUtil.getString(rs_tDBInput_33, 19, false);
						}
						if (colQtyInRs_tDBInput_33 < 20) {
							row43.fec_solicitud = null;
						} else {

							row43.fec_solicitud = routines.system.JDBCUtil.getDate(rs_tDBInput_33, 20);
						}
						if (colQtyInRs_tDBInput_33 < 21) {
							row43.num_logotipo = null;
						} else {

							row43.num_logotipo = rs_tDBInput_33.getLong(21);
							if (rs_tDBInput_33.wasNull()) {
								row43.num_logotipo = null;
							}
						}
						if (colQtyInRs_tDBInput_33 < 22) {
							row43.fec_vencimiento = null;
						} else {

							row43.fec_vencimiento = routines.system.JDBCUtil.getDate(rs_tDBInput_33, 22);
						}
						if (colQtyInRs_tDBInput_33 < 23) {
							row43.tip_tramite = null;
						} else {

							row43.tip_tramite = rs_tDBInput_33.getShort(23);
							if (rs_tDBInput_33.wasNull()) {
								row43.tip_tramite = null;
							}
						}
						if (colQtyInRs_tDBInput_33 < 24) {
							row43.num_registro_poder = null;
						} else {

							row43.num_registro_poder = rs_tDBInput_33.getInt(24);
							if (rs_tDBInput_33.wasNull()) {
								row43.num_registro_poder = null;
							}
						}
						if (colQtyInRs_tDBInput_33 < 25) {
							row43.ed_niza = null;
						} else {

							row43.ed_niza = rs_tDBInput_33.getShort(25);
							if (rs_tDBInput_33.wasNull()) {
								row43.ed_niza = null;
							}
						}
						if (colQtyInRs_tDBInput_33 < 26) {
							row43.tip_signo_old = null;
						} else {

							row43.tip_signo_old = routines.system.JDBCUtil.getString(rs_tDBInput_33, 26, false);
						}
						if (colQtyInRs_tDBInput_33 < 27) {
							row43.num_agente_old = null;
						} else {

							row43.num_agente_old = rs_tDBInput_33.getShort(27);
							if (rs_tDBInput_33.wasNull()) {
								row43.num_agente_old = null;
							}
						}
						if (colQtyInRs_tDBInput_33 < 28) {
							row43.cod_pais_prioridad_old = null;
						} else {

							row43.cod_pais_prioridad_old = routines.system.JDBCUtil.getString(rs_tDBInput_33, 28,
									false);
						}

						/**
						 * [tDBInput_33 begin ] stop
						 */

						/**
						 * [tDBInput_33 main ] start
						 */

						currentComponent = "tDBInput_33";

						tos_count_tDBInput_33++;

						/**
						 * [tDBInput_33 main ] stop
						 */

						/**
						 * [tDBInput_33 process_data_begin ] start
						 */

						currentComponent = "tDBInput_33";

						/**
						 * [tDBInput_33 process_data_begin ] stop
						 */

						/**
						 * [tMap_12 main ] start
						 */

						currentComponent = "tMap_12";

						if (execStat) {
							runStat.updateStatOnConnection(iterateId, 1, 1

									, "row43"

							);
						}

						boolean hasCasePrimitiveKeyWithNull_tMap_12 = false;

						// ###############################
						// # Input tables (lookups)
						boolean rejectedInnerJoin_tMap_12 = false;
						boolean mainRowRejected_tMap_12 = false;

						///////////////////////////////////////////////
						// Starting Lookup Table "row44"
						///////////////////////////////////////////////

						boolean forceLooprow44 = false;

						row44Struct row44ObjectFromLookup = null;

						if (!rejectedInnerJoin_tMap_12) { // G_TM_M_020

							hasCasePrimitiveKeyWithNull_tMap_12 = false;

							row44HashKey.FILE_NBR = new BigDecimal(row43.num_acta);

							row44HashKey.hashCodeDirty = true;

							tHash_Lookup_row44.lookup(row44HashKey);

						} // G_TM_M_020

						if (tHash_Lookup_row44 != null && tHash_Lookup_row44.getCount(row44HashKey) > 1) { // G 071

							// System.out.println("WARNING: UNIQUE MATCH is configured for the lookup
							// 'row44' and it contains more one result from keys : row44.FILE_NBR = '" +
							// row44HashKey.FILE_NBR + "'");
						} // G 071

						row44Struct row44 = null;

						row44Struct fromLookup_row44 = null;
						row44 = row44Default;

						if (tHash_Lookup_row44 != null && tHash_Lookup_row44.hasNext()) { // G 099

							fromLookup_row44 = tHash_Lookup_row44.next();

						} // G 099

						if (fromLookup_row44 != null) {
							row44 = fromLookup_row44;
						}

						// ###############################
						{ // start of Var scope

							// ###############################
							// # Vars tables

							Var__tMap_12__Struct Var = Var__tMap_12;// ###############################
							// ###############################
							// # Output tables

							copyOfinsert_actions = null;

// # Output table : 'copyOfinsert_actions'
							copyOfinsert_actions_tmp.FILE_SEQ = row44.FILE_SEQ;
							copyOfinsert_actions_tmp.FILE_TYPE = row44.FILE_TYPE;
							copyOfinsert_actions_tmp.FILE_SERIES = row44.FILE_SERIES;
							copyOfinsert_actions_tmp.FILE_NBR = row44.FILE_NBR;
							copyOfinsert_actions_tmp.ACTION_TYPE = "WIPO";
							copyOfinsert_actions_tmp.ACTION_DATE = row43.fec_status;
							copyOfinsert_actions_tmp.MANUAL_DUE_DATE = null;
							copyOfinsert_actions_tmp.RESPONSIBLE_USER = new BigDecimal("4");
							copyOfinsert_actions_tmp.ACTION_NOTES1 = null;
							copyOfinsert_actions_tmp.ACTION_NOTES2 = null;
							copyOfinsert_actions_tmp.ACTION_NOTES3 = null;
							copyOfinsert_actions_tmp.ACTION_NOTES4 = null;
							copyOfinsert_actions_tmp.ACTION_NOTES5 = "Actualizacion del estado del expediente";
							copyOfinsert_actions_tmp.GENERAL_NOTES = "Actualizacion del estado del expediente";
							copyOfinsert_actions_tmp.SELECTED_OPTIONS_TEXT = null;
							copyOfinsert_actions_tmp.ACTION_USER = new BigDecimal("4");
							copyOfinsert_actions_tmp.ACTION_CATEGORY = "S";
							copyOfinsert_actions_tmp.SPECIAL_FINAL_STATUS = row43.cod_status;
							copyOfinsert_actions_tmp.JOURNAL_CODE = null;
							copyOfinsert_actions_tmp.PUBLICATION_DATE = null;
							copyOfinsert_actions_tmp.IPAS_PROC_TYP = null;
							copyOfinsert_actions_tmp.IPAS_PROC_NBR = null;
							copyOfinsert_actions_tmp.IPAS_ACTION_NBR = null;
							copyOfinsert_actions = copyOfinsert_actions_tmp;
// ###############################

						} // end of Var scope

						rejectedInnerJoin_tMap_12 = false;

						tos_count_tMap_12++;

						/**
						 * [tMap_12 main ] stop
						 */

						/**
						 * [tMap_12 process_data_begin ] start
						 */

						currentComponent = "tMap_12";

						/**
						 * [tMap_12 process_data_begin ] stop
						 */
// Start of branch "copyOfinsert_actions"
						if (copyOfinsert_actions != null) {
							row45 = null;

							/**
							 * [tDBOutput_13 main ] start
							 */

							currentComponent = "tDBOutput_13";

							if (execStat) {
								runStat.updateStatOnConnection(iterateId, 1, 1

										, "copyOfinsert_actions"

								);
							}

							row45 = null;
							whetherReject_tDBOutput_13 = false;
							try {
								if (copyOfinsert_actions.FILE_SEQ == null) {
									pstmt_tDBOutput_13.setNull(1, java.sql.Types.VARCHAR);
								} else {
									pstmt_tDBOutput_13.setString(1, copyOfinsert_actions.FILE_SEQ);
								}

								if (copyOfinsert_actions.FILE_TYPE == null) {
									pstmt_tDBOutput_13.setNull(2, java.sql.Types.VARCHAR);
								} else {
									pstmt_tDBOutput_13.setString(2, copyOfinsert_actions.FILE_TYPE);
								}

								pstmt_tDBOutput_13.setBigDecimal(3, copyOfinsert_actions.FILE_SERIES);

								pstmt_tDBOutput_13.setBigDecimal(4, copyOfinsert_actions.FILE_NBR);

								if (copyOfinsert_actions.ACTION_TYPE == null) {
									pstmt_tDBOutput_13.setNull(5, java.sql.Types.VARCHAR);
								} else {
									pstmt_tDBOutput_13.setString(5, copyOfinsert_actions.ACTION_TYPE);
								}

								if (copyOfinsert_actions.ACTION_DATE != null) {
									pstmt_tDBOutput_13.setTimestamp(6,
											new java.sql.Timestamp(copyOfinsert_actions.ACTION_DATE.getTime()));
								} else {
									pstmt_tDBOutput_13.setNull(6, java.sql.Types.TIMESTAMP);
								}

								if (copyOfinsert_actions.MANUAL_DUE_DATE != null) {
									pstmt_tDBOutput_13.setTimestamp(7,
											new java.sql.Timestamp(copyOfinsert_actions.MANUAL_DUE_DATE.getTime()));
								} else {
									pstmt_tDBOutput_13.setNull(7, java.sql.Types.TIMESTAMP);
								}

								pstmt_tDBOutput_13.setBigDecimal(8, copyOfinsert_actions.RESPONSIBLE_USER);

								if (copyOfinsert_actions.ACTION_NOTES1 == null) {
									pstmt_tDBOutput_13.setNull(9, java.sql.Types.VARCHAR);
								} else {
									pstmt_tDBOutput_13.setString(9, copyOfinsert_actions.ACTION_NOTES1);
								}

								if (copyOfinsert_actions.ACTION_NOTES2 == null) {
									pstmt_tDBOutput_13.setNull(10, java.sql.Types.VARCHAR);
								} else {
									pstmt_tDBOutput_13.setString(10, copyOfinsert_actions.ACTION_NOTES2);
								}

								if (copyOfinsert_actions.ACTION_NOTES3 == null) {
									pstmt_tDBOutput_13.setNull(11, java.sql.Types.VARCHAR);
								} else {
									pstmt_tDBOutput_13.setString(11, copyOfinsert_actions.ACTION_NOTES3);
								}

								if (copyOfinsert_actions.ACTION_NOTES4 == null) {
									pstmt_tDBOutput_13.setNull(12, java.sql.Types.VARCHAR);
								} else {
									pstmt_tDBOutput_13.setString(12, copyOfinsert_actions.ACTION_NOTES4);
								}

								if (copyOfinsert_actions.ACTION_NOTES5 == null) {
									pstmt_tDBOutput_13.setNull(13, java.sql.Types.VARCHAR);
								} else {
									pstmt_tDBOutput_13.setString(13, copyOfinsert_actions.ACTION_NOTES5);
								}

								if (copyOfinsert_actions.GENERAL_NOTES == null) {
									pstmt_tDBOutput_13.setNull(14, java.sql.Types.VARCHAR);
								} else {
									pstmt_tDBOutput_13.setString(14, copyOfinsert_actions.GENERAL_NOTES);
								}

								if (copyOfinsert_actions.SELECTED_OPTIONS_TEXT == null) {
									pstmt_tDBOutput_13.setNull(15, java.sql.Types.VARCHAR);
								} else {
									pstmt_tDBOutput_13.setString(15, copyOfinsert_actions.SELECTED_OPTIONS_TEXT);
								}

								pstmt_tDBOutput_13.setBigDecimal(16, copyOfinsert_actions.ACTION_USER);

								if (copyOfinsert_actions.ACTION_CATEGORY == null) {
									pstmt_tDBOutput_13.setNull(17, java.sql.Types.VARCHAR);
								} else {
									pstmt_tDBOutput_13.setString(17, copyOfinsert_actions.ACTION_CATEGORY);
								}

								if (copyOfinsert_actions.SPECIAL_FINAL_STATUS == null) {
									pstmt_tDBOutput_13.setNull(18, java.sql.Types.VARCHAR);
								} else {
									pstmt_tDBOutput_13.setString(18, copyOfinsert_actions.SPECIAL_FINAL_STATUS);
								}

								if (copyOfinsert_actions.JOURNAL_CODE == null) {
									pstmt_tDBOutput_13.setNull(19, java.sql.Types.VARCHAR);
								} else {
									pstmt_tDBOutput_13.setString(19, copyOfinsert_actions.JOURNAL_CODE);
								}

								if (copyOfinsert_actions.PUBLICATION_DATE != null) {
									pstmt_tDBOutput_13.setTimestamp(20,
											new java.sql.Timestamp(copyOfinsert_actions.PUBLICATION_DATE.getTime()));
								} else {
									pstmt_tDBOutput_13.setNull(20, java.sql.Types.TIMESTAMP);
								}

								if (copyOfinsert_actions.IPAS_PROC_TYP == null) {
									pstmt_tDBOutput_13.setNull(21, java.sql.Types.VARCHAR);
								} else {
									pstmt_tDBOutput_13.setString(21, copyOfinsert_actions.IPAS_PROC_TYP);
								}

								pstmt_tDBOutput_13.setBigDecimal(22, copyOfinsert_actions.IPAS_PROC_NBR);

								pstmt_tDBOutput_13.setBigDecimal(23, copyOfinsert_actions.IPAS_ACTION_NBR);

								nb_line_tDBOutput_13++;
								insertedCount_tDBOutput_13 = insertedCount_tDBOutput_13
										+ pstmt_tDBOutput_13.executeUpdate();
							} catch (java.lang.Exception e) {
								whetherReject_tDBOutput_13 = true;
								row45 = new row45Struct();
								row45.FILE_SEQ = copyOfinsert_actions.FILE_SEQ;
								row45.FILE_TYPE = copyOfinsert_actions.FILE_TYPE;
								row45.FILE_SERIES = copyOfinsert_actions.FILE_SERIES;
								row45.FILE_NBR = copyOfinsert_actions.FILE_NBR;
								row45.ACTION_TYPE = copyOfinsert_actions.ACTION_TYPE;
								row45.ACTION_DATE = copyOfinsert_actions.ACTION_DATE;
								row45.MANUAL_DUE_DATE = copyOfinsert_actions.MANUAL_DUE_DATE;
								row45.RESPONSIBLE_USER = copyOfinsert_actions.RESPONSIBLE_USER;
								row45.ACTION_NOTES1 = copyOfinsert_actions.ACTION_NOTES1;
								row45.ACTION_NOTES2 = copyOfinsert_actions.ACTION_NOTES2;
								row45.ACTION_NOTES3 = copyOfinsert_actions.ACTION_NOTES3;
								row45.ACTION_NOTES4 = copyOfinsert_actions.ACTION_NOTES4;
								row45.ACTION_NOTES5 = copyOfinsert_actions.ACTION_NOTES5;
								row45.GENERAL_NOTES = copyOfinsert_actions.GENERAL_NOTES;
								row45.SELECTED_OPTIONS_TEXT = copyOfinsert_actions.SELECTED_OPTIONS_TEXT;
								row45.ACTION_USER = copyOfinsert_actions.ACTION_USER;
								row45.ACTION_CATEGORY = copyOfinsert_actions.ACTION_CATEGORY;
								row45.SPECIAL_FINAL_STATUS = copyOfinsert_actions.SPECIAL_FINAL_STATUS;
								row45.JOURNAL_CODE = copyOfinsert_actions.JOURNAL_CODE;
								row45.PUBLICATION_DATE = copyOfinsert_actions.PUBLICATION_DATE;
								row45.IPAS_PROC_TYP = copyOfinsert_actions.IPAS_PROC_TYP;
								row45.IPAS_PROC_NBR = copyOfinsert_actions.IPAS_PROC_NBR;
								row45.IPAS_ACTION_NBR = copyOfinsert_actions.IPAS_ACTION_NBR;
								rejectedCount_tDBOutput_13 = rejectedCount_tDBOutput_13 + 1;
								row45.errorCode = ((java.sql.SQLException) e).getSQLState();
								row45.errorMessage = e.getMessage() + " - Line: " + tos_count_tDBOutput_13;
							}
							if (!whetherReject_tDBOutput_13) {
							}
							////////// batch execute by batch size///////
							class LimitBytesHelper_tDBOutput_13 {
								public int limitBytePart1(int counter, java.sql.PreparedStatement pstmt_tDBOutput_13)
										throws Exception {
									try {

										for (int countEach_tDBOutput_13 : pstmt_tDBOutput_13.executeBatch()) {
											if (countEach_tDBOutput_13 == -2 || countEach_tDBOutput_13 == -3) {
												break;
											}
											counter += countEach_tDBOutput_13;
										}

									} catch (java.sql.BatchUpdateException e) {

										int countSum_tDBOutput_13 = 0;
										for (int countEach_tDBOutput_13 : e.getUpdateCounts()) {
											counter += (countEach_tDBOutput_13 < 0 ? 0 : countEach_tDBOutput_13);
										}

										System.err.println(e.getMessage());

									}
									return counter;
								}

								public int limitBytePart2(int counter, java.sql.PreparedStatement pstmt_tDBOutput_13)
										throws Exception {
									try {

										for (int countEach_tDBOutput_13 : pstmt_tDBOutput_13.executeBatch()) {
											if (countEach_tDBOutput_13 == -2 || countEach_tDBOutput_13 == -3) {
												break;
											}
											counter += countEach_tDBOutput_13;
										}

									} catch (java.sql.BatchUpdateException e) {

										for (int countEach_tDBOutput_13 : e.getUpdateCounts()) {
											counter += (countEach_tDBOutput_13 < 0 ? 0 : countEach_tDBOutput_13);
										}

										System.err.println(e.getMessage());

									}
									return counter;
								}
							}

							//////////// commit every////////////

							tos_count_tDBOutput_13++;

							/**
							 * [tDBOutput_13 main ] stop
							 */

							/**
							 * [tDBOutput_13 process_data_begin ] start
							 */

							currentComponent = "tDBOutput_13";

							/**
							 * [tDBOutput_13 process_data_begin ] stop
							 */
// Start of branch "row45"
							if (row45 != null) {

								/**
								 * [tLogRow_14 main ] start
								 */

								currentComponent = "tLogRow_14";

								if (execStat) {
									runStat.updateStatOnConnection(iterateId, 1, 1

											, "row45"

									);
								}

///////////////////////		

								strBuffer_tLogRow_14 = new StringBuilder();

								if (row45.FILE_SEQ != null) { //

									strBuffer_tLogRow_14.append(String.valueOf(row45.FILE_SEQ));

								} //

								strBuffer_tLogRow_14.append("|");

								if (row45.FILE_TYPE != null) { //

									strBuffer_tLogRow_14.append(String.valueOf(row45.FILE_TYPE));

								} //

								strBuffer_tLogRow_14.append("|");

								if (row45.FILE_SERIES != null) { //

									strBuffer_tLogRow_14.append(row45.FILE_SERIES
											.setScale(0, java.math.RoundingMode.HALF_UP).toPlainString());

								} //

								strBuffer_tLogRow_14.append("|");

								if (row45.FILE_NBR != null) { //

									strBuffer_tLogRow_14.append(
											row45.FILE_NBR.setScale(0, java.math.RoundingMode.HALF_UP).toPlainString());

								} //

								strBuffer_tLogRow_14.append("|");

								if (row45.ACTION_TYPE != null) { //

									strBuffer_tLogRow_14.append(String.valueOf(row45.ACTION_TYPE));

								} //

								strBuffer_tLogRow_14.append("|");

								if (row45.ACTION_DATE != null) { //

									strBuffer_tLogRow_14
											.append(FormatterUtils.format_Date(row45.ACTION_DATE, "dd-MM-yyyy"));

								} //

								strBuffer_tLogRow_14.append("|");

								if (row45.MANUAL_DUE_DATE != null) { //

									strBuffer_tLogRow_14
											.append(FormatterUtils.format_Date(row45.MANUAL_DUE_DATE, "dd-MM-yyyy"));

								} //

								strBuffer_tLogRow_14.append("|");

								if (row45.RESPONSIBLE_USER != null) { //

									strBuffer_tLogRow_14.append(row45.RESPONSIBLE_USER
											.setScale(0, java.math.RoundingMode.HALF_UP).toPlainString());

								} //

								strBuffer_tLogRow_14.append("|");

								if (row45.ACTION_NOTES1 != null) { //

									strBuffer_tLogRow_14.append(String.valueOf(row45.ACTION_NOTES1));

								} //

								strBuffer_tLogRow_14.append("|");

								if (row45.ACTION_NOTES2 != null) { //

									strBuffer_tLogRow_14.append(String.valueOf(row45.ACTION_NOTES2));

								} //

								strBuffer_tLogRow_14.append("|");

								if (row45.ACTION_NOTES3 != null) { //

									strBuffer_tLogRow_14.append(String.valueOf(row45.ACTION_NOTES3));

								} //

								strBuffer_tLogRow_14.append("|");

								if (row45.ACTION_NOTES4 != null) { //

									strBuffer_tLogRow_14.append(String.valueOf(row45.ACTION_NOTES4));

								} //

								strBuffer_tLogRow_14.append("|");

								if (row45.ACTION_NOTES5 != null) { //

									strBuffer_tLogRow_14.append(String.valueOf(row45.ACTION_NOTES5));

								} //

								strBuffer_tLogRow_14.append("|");

								if (row45.GENERAL_NOTES != null) { //

									strBuffer_tLogRow_14.append(String.valueOf(row45.GENERAL_NOTES));

								} //

								strBuffer_tLogRow_14.append("|");

								if (row45.SELECTED_OPTIONS_TEXT != null) { //

									strBuffer_tLogRow_14.append(String.valueOf(row45.SELECTED_OPTIONS_TEXT));

								} //

								strBuffer_tLogRow_14.append("|");

								if (row45.ACTION_USER != null) { //

									strBuffer_tLogRow_14.append(row45.ACTION_USER
											.setScale(0, java.math.RoundingMode.HALF_UP).toPlainString());

								} //

								strBuffer_tLogRow_14.append("|");

								if (row45.ACTION_CATEGORY != null) { //

									strBuffer_tLogRow_14.append(String.valueOf(row45.ACTION_CATEGORY));

								} //

								strBuffer_tLogRow_14.append("|");

								if (row45.SPECIAL_FINAL_STATUS != null) { //

									strBuffer_tLogRow_14.append(String.valueOf(row45.SPECIAL_FINAL_STATUS));

								} //

								strBuffer_tLogRow_14.append("|");

								if (row45.JOURNAL_CODE != null) { //

									strBuffer_tLogRow_14.append(String.valueOf(row45.JOURNAL_CODE));

								} //

								strBuffer_tLogRow_14.append("|");

								if (row45.PUBLICATION_DATE != null) { //

									strBuffer_tLogRow_14
											.append(FormatterUtils.format_Date(row45.PUBLICATION_DATE, "dd-MM-yyyy"));

								} //

								strBuffer_tLogRow_14.append("|");

								if (row45.IPAS_PROC_TYP != null) { //

									strBuffer_tLogRow_14.append(String.valueOf(row45.IPAS_PROC_TYP));

								} //

								strBuffer_tLogRow_14.append("|");

								if (row45.IPAS_PROC_NBR != null) { //

									strBuffer_tLogRow_14.append(row45.IPAS_PROC_NBR
											.setScale(0, java.math.RoundingMode.HALF_UP).toPlainString());

								} //

								strBuffer_tLogRow_14.append("|");

								if (row45.IPAS_ACTION_NBR != null) { //

									strBuffer_tLogRow_14.append(row45.IPAS_ACTION_NBR
											.setScale(0, java.math.RoundingMode.HALF_UP).toPlainString());

								} //

								strBuffer_tLogRow_14.append("|");

								if (row45.errorCode != null) { //

									strBuffer_tLogRow_14.append(String.valueOf(row45.errorCode));

								} //

								strBuffer_tLogRow_14.append("|");

								if (row45.errorMessage != null) { //

									strBuffer_tLogRow_14.append(String.valueOf(row45.errorMessage));

								} //

								if (globalMap.get("tLogRow_CONSOLE") != null) {
									consoleOut_tLogRow_14 = (java.io.PrintStream) globalMap.get("tLogRow_CONSOLE");
								} else {
									consoleOut_tLogRow_14 = new java.io.PrintStream(
											new java.io.BufferedOutputStream(System.out));
									globalMap.put("tLogRow_CONSOLE", consoleOut_tLogRow_14);
								}
								consoleOut_tLogRow_14.println(strBuffer_tLogRow_14.toString());
								consoleOut_tLogRow_14.flush();
								nb_line_tLogRow_14++;
//////

//////                    

///////////////////////    			

								tos_count_tLogRow_14++;

								/**
								 * [tLogRow_14 main ] stop
								 */

								/**
								 * [tLogRow_14 process_data_begin ] start
								 */

								currentComponent = "tLogRow_14";

								/**
								 * [tLogRow_14 process_data_begin ] stop
								 */

								/**
								 * [tLogRow_14 process_data_end ] start
								 */

								currentComponent = "tLogRow_14";

								/**
								 * [tLogRow_14 process_data_end ] stop
								 */

							} // End of branch "row45"

							/**
							 * [tDBOutput_13 process_data_end ] start
							 */

							currentComponent = "tDBOutput_13";

							/**
							 * [tDBOutput_13 process_data_end ] stop
							 */

						} // End of branch "copyOfinsert_actions"

						/**
						 * [tMap_12 process_data_end ] start
						 */

						currentComponent = "tMap_12";

						/**
						 * [tMap_12 process_data_end ] stop
						 */

						/**
						 * [tDBInput_33 process_data_end ] start
						 */

						currentComponent = "tDBInput_33";

						/**
						 * [tDBInput_33 process_data_end ] stop
						 */

						/**
						 * [tDBInput_33 end ] start
						 */

						currentComponent = "tDBInput_33";

					}
				} finally {
					if (rs_tDBInput_33 != null) {
						rs_tDBInput_33.close();
					}
					if (stmt_tDBInput_33 != null) {
						stmt_tDBInput_33.close();
					}
				}
				globalMap.put("tDBInput_33_NB_LINE", nb_line_tDBInput_33);

				ok_Hash.put("tDBInput_33", true);
				end_Hash.put("tDBInput_33", System.currentTimeMillis());

				/**
				 * [tDBInput_33 end ] stop
				 */

				/**
				 * [tMap_12 end ] start
				 */

				currentComponent = "tMap_12";

// ###############################
// # Lookup hashes releasing
				if (tHash_Lookup_row44 != null) {
					tHash_Lookup_row44.endGet();
				}
				globalMap.remove("tHash_Lookup_row44");

// ###############################      

				if (execStat) {
					runStat.updateStat(resourceMap, iterateId, 2, 0, "row43");
				}

				ok_Hash.put("tMap_12", true);
				end_Hash.put("tMap_12", System.currentTimeMillis());

				/**
				 * [tMap_12 end ] stop
				 */

				/**
				 * [tDBOutput_13 end ] start
				 */

				currentComponent = "tDBOutput_13";

				if (pstmt_tDBOutput_13 != null) {

					pstmt_tDBOutput_13.close();
					resourceMap.remove("pstmt_tDBOutput_13");

				}
				resourceMap.put("statementClosed_tDBOutput_13", true);

				nb_line_deleted_tDBOutput_13 = nb_line_deleted_tDBOutput_13 + deletedCount_tDBOutput_13;
				nb_line_update_tDBOutput_13 = nb_line_update_tDBOutput_13 + updatedCount_tDBOutput_13;
				nb_line_inserted_tDBOutput_13 = nb_line_inserted_tDBOutput_13 + insertedCount_tDBOutput_13;
				nb_line_rejected_tDBOutput_13 = nb_line_rejected_tDBOutput_13 + rejectedCount_tDBOutput_13;

				globalMap.put("tDBOutput_13_NB_LINE", nb_line_tDBOutput_13);
				globalMap.put("tDBOutput_13_NB_LINE_UPDATED", nb_line_update_tDBOutput_13);
				globalMap.put("tDBOutput_13_NB_LINE_INSERTED", nb_line_inserted_tDBOutput_13);
				globalMap.put("tDBOutput_13_NB_LINE_DELETED", nb_line_deleted_tDBOutput_13);
				globalMap.put("tDBOutput_13_NB_LINE_REJECTED", nb_line_rejected_tDBOutput_13);

				if (execStat) {
					runStat.updateStat(resourceMap, iterateId, 2, 0, "copyOfinsert_actions");
				}

				ok_Hash.put("tDBOutput_13", true);
				end_Hash.put("tDBOutput_13", System.currentTimeMillis());

				/**
				 * [tDBOutput_13 end ] stop
				 */

				/**
				 * [tLogRow_14 end ] start
				 */

				currentComponent = "tLogRow_14";

//////
//////
				globalMap.put("tLogRow_14_NB_LINE", nb_line_tLogRow_14);

///////////////////////    			

				if (execStat) {
					runStat.updateStat(resourceMap, iterateId, 2, 0, "row45");
				}

				ok_Hash.put("tLogRow_14", true);
				end_Hash.put("tLogRow_14", System.currentTimeMillis());

				/**
				 * [tLogRow_14 end ] stop
				 */

			} // end the resume

		} catch (java.lang.Exception e) {

			TalendException te = new TalendException(e, currentComponent, globalMap);

			throw te;
		} catch (java.lang.Error error) {

			runStat.stopThreadStat();

			throw error;
		} finally {

			// free memory for "tMap_12"
			globalMap.remove("tHash_Lookup_row44");

			try {

				/**
				 * [tDBInput_33 finally ] start
				 */

				currentComponent = "tDBInput_33";

				/**
				 * [tDBInput_33 finally ] stop
				 */

				/**
				 * [tMap_12 finally ] start
				 */

				currentComponent = "tMap_12";

				/**
				 * [tMap_12 finally ] stop
				 */

				/**
				 * [tDBOutput_13 finally ] start
				 */

				currentComponent = "tDBOutput_13";

				if (resourceMap.get("statementClosed_tDBOutput_13") == null) {
					java.sql.PreparedStatement pstmtToClose_tDBOutput_13 = null;
					if ((pstmtToClose_tDBOutput_13 = (java.sql.PreparedStatement) resourceMap
							.remove("pstmt_tDBOutput_13")) != null) {
						pstmtToClose_tDBOutput_13.close();
					}
				}

				/**
				 * [tDBOutput_13 finally ] stop
				 */

				/**
				 * [tLogRow_14 finally ] start
				 */

				currentComponent = "tLogRow_14";

				/**
				 * [tLogRow_14 finally ] stop
				 */

			} catch (java.lang.Exception e) {
				// ignore
			} catch (java.lang.Error error) {
				// ignore
			}
			resourceMap = null;
		}

		globalMap.put("tDBInput_33_SUBPROCESS_STATE", 1);
	}

	public static class row9Struct implements routines.system.IPersistableComparableLookupRow<row9Struct> {
		final static byte[] commonByteArrayLock_WIPO_PROJECTS_E1a_Marc_a_interm_Copy = new byte[0];
		static byte[] commonByteArray_WIPO_PROJECTS_E1a_Marc_a_interm_Copy = new byte[0];
		protected static final int DEFAULT_HASHCODE = 1;
		protected static final int PRIME = 31;
		protected int hashCode = DEFAULT_HASHCODE;
		public boolean hashCodeDirty = true;

		public String loopKey;

		public String FILE_SEQ;

		public String getFILE_SEQ() {
			return this.FILE_SEQ;
		}

		public String FILE_TYPE;

		public String getFILE_TYPE() {
			return this.FILE_TYPE;
		}

		public BigDecimal FILE_SERIES;

		public BigDecimal getFILE_SERIES() {
			return this.FILE_SERIES;
		}

		public BigDecimal FILE_NBR;

		public BigDecimal getFILE_NBR() {
			return this.FILE_NBR;
		}

		public String DOC_ORI;

		public String getDOC_ORI() {
			return this.DOC_ORI;
		}

		public BigDecimal DOC_SERIES;

		public BigDecimal getDOC_SERIES() {
			return this.DOC_SERIES;
		}

		public BigDecimal DOC_NBR;

		public BigDecimal getDOC_NBR() {
			return this.DOC_NBR;
		}

		public BigDecimal IND_IMPORT;

		public BigDecimal getIND_IMPORT() {
			return this.IND_IMPORT;
		}

		public String APPLICATION_TYPE;

		public String getAPPLICATION_TYPE() {
			return this.APPLICATION_TYPE;
		}

		public String APPLICATION_SUBTYPE;

		public String getAPPLICATION_SUBTYPE() {
			return this.APPLICATION_SUBTYPE;
		}

		public BigDecimal LAW_CODE;

		public BigDecimal getLAW_CODE() {
			return this.LAW_CODE;
		}

		public java.util.Date FILING_DATE;

		public java.util.Date getFILING_DATE() {
			return this.FILING_DATE;
		}

		public java.util.Date RECEPTION_DATE;

		public java.util.Date getRECEPTION_DATE() {
			return this.RECEPTION_DATE;
		}

		public java.util.Date PUBLICATION_DATE;

		public java.util.Date getPUBLICATION_DATE() {
			return this.PUBLICATION_DATE;
		}

		public String PUBLICATION_NOTES;

		public String getPUBLICATION_NOTES() {
			return this.PUBLICATION_NOTES;
		}

		public BigDecimal IND_REGISTERED;

		public BigDecimal getIND_REGISTERED() {
			return this.IND_REGISTERED;
		}

		public String REGISTRATION_TYPE;

		public String getREGISTRATION_TYPE() {
			return this.REGISTRATION_TYPE;
		}

		public BigDecimal REGISTRATION_SERIES;

		public BigDecimal getREGISTRATION_SERIES() {
			return this.REGISTRATION_SERIES;
		}

		public BigDecimal REGISTRATION_NBR;

		public BigDecimal getREGISTRATION_NBR() {
			return this.REGISTRATION_NBR;
		}

		public String REGISTRATION_DUP;

		public String getREGISTRATION_DUP() {
			return this.REGISTRATION_DUP;
		}

		public java.util.Date REGISTRATION_DATE;

		public java.util.Date getREGISTRATION_DATE() {
			return this.REGISTRATION_DATE;
		}

		public java.util.Date ENTITLEMENT_DATE;

		public java.util.Date getENTITLEMENT_DATE() {
			return this.ENTITLEMENT_DATE;
		}

		public java.util.Date EXPIRATION_DATE;

		public java.util.Date getEXPIRATION_DATE() {
			return this.EXPIRATION_DATE;
		}

		public java.util.Date EXHIBITION_DATE;

		public java.util.Date getEXHIBITION_DATE() {
			return this.EXHIBITION_DATE;
		}

		public String EXHIBITION_NOTES;

		public String getEXHIBITION_NOTES() {
			return this.EXHIBITION_NOTES;
		}

		public String SIGN_TYPE;

		public String getSIGN_TYPE() {
			return this.SIGN_TYPE;
		}

		public String MARK_NAME;

		public String getMARK_NAME() {
			return this.MARK_NAME;
		}

		public String MARK_NAME_LANG2;

		public String getMARK_NAME_LANG2() {
			return this.MARK_NAME_LANG2;
		}

		public String MARK_TRANSLATION;

		public String getMARK_TRANSLATION() {
			return this.MARK_TRANSLATION;
		}

		public String MARK_TRANSLATION_LANG2;

		public String getMARK_TRANSLATION_LANG2() {
			return this.MARK_TRANSLATION_LANG2;
		}

		public String MARK_TRANSLITERATION;

		public String getMARK_TRANSLITERATION() {
			return this.MARK_TRANSLITERATION;
		}

		public String MARK_TRANSLITERATION_LANG2;

		public String getMARK_TRANSLITERATION_LANG2() {
			return this.MARK_TRANSLITERATION_LANG2;
		}

		public String SERIES_DESCRIPTION;

		public String getSERIES_DESCRIPTION() {
			return this.SERIES_DESCRIPTION;
		}

		public String COLOUR_DESCRIPTION;

		public String getCOLOUR_DESCRIPTION() {
			return this.COLOUR_DESCRIPTION;
		}

		public String COLOUR_DESCR_LANG2;

		public String getCOLOUR_DESCR_LANG2() {
			return this.COLOUR_DESCR_LANG2;
		}

		public String DISCLAIMER;

		public String getDISCLAIMER() {
			return this.DISCLAIMER;
		}

		public String DISCLAIMER_LANG2;

		public String getDISCLAIMER_LANG2() {
			return this.DISCLAIMER_LANG2;
		}

		public String BY_CONSENT;

		public String getBY_CONSENT() {
			return this.BY_CONSENT;
		}

		public String REGULATIONS;

		public String getREGULATIONS() {
			return this.REGULATIONS;
		}

		public String NOTES;

		public String getNOTES() {
			return this.NOTES;
		}

		public BigDecimal CAPTURE_USER_ID;

		public BigDecimal getCAPTURE_USER_ID() {
			return this.CAPTURE_USER_ID;
		}

		public java.util.Date CAPTURE_DATE;

		public java.util.Date getCAPTURE_DATE() {
			return this.CAPTURE_DATE;
		}

		public BigDecimal PUBLICATION_NBR;

		public BigDecimal getPUBLICATION_NBR() {
			return this.PUBLICATION_NBR;
		}

		public String PUBLICATION_SER;

		public String getPUBLICATION_SER() {
			return this.PUBLICATION_SER;
		}

		public String PUBLICATION_TYP;

		public String getPUBLICATION_TYP() {
			return this.PUBLICATION_TYP;
		}

		@Override
		public int hashCode() {
			if (this.hashCodeDirty) {
				final int prime = PRIME;
				int result = DEFAULT_HASHCODE;

				result = prime * result
						+ ((this.FILE_NBR == null) ? 0 : new Double(this.FILE_NBR.doubleValue()).hashCode());

				this.hashCode = result;
				this.hashCodeDirty = false;
			}
			return this.hashCode;
		}

		@Override
		public boolean equals(Object obj) {
			if (this == obj)
				return true;
			if (obj == null)
				return false;
			if (getClass() != obj.getClass())
				return false;
			final row9Struct other = (row9Struct) obj;

			if (this.FILE_NBR == null) {
				if (other.FILE_NBR != null)
					return false;

			} else if ((other.FILE_NBR == null) || (this.FILE_NBR.compareTo(other.FILE_NBR) != 0))

				return false;

			return true;
		}

		public void copyDataTo(row9Struct other) {

			other.FILE_SEQ = this.FILE_SEQ;
			other.FILE_TYPE = this.FILE_TYPE;
			other.FILE_SERIES = this.FILE_SERIES;
			other.FILE_NBR = this.FILE_NBR;
			other.DOC_ORI = this.DOC_ORI;
			other.DOC_SERIES = this.DOC_SERIES;
			other.DOC_NBR = this.DOC_NBR;
			other.IND_IMPORT = this.IND_IMPORT;
			other.APPLICATION_TYPE = this.APPLICATION_TYPE;
			other.APPLICATION_SUBTYPE = this.APPLICATION_SUBTYPE;
			other.LAW_CODE = this.LAW_CODE;
			other.FILING_DATE = this.FILING_DATE;
			other.RECEPTION_DATE = this.RECEPTION_DATE;
			other.PUBLICATION_DATE = this.PUBLICATION_DATE;
			other.PUBLICATION_NOTES = this.PUBLICATION_NOTES;
			other.IND_REGISTERED = this.IND_REGISTERED;
			other.REGISTRATION_TYPE = this.REGISTRATION_TYPE;
			other.REGISTRATION_SERIES = this.REGISTRATION_SERIES;
			other.REGISTRATION_NBR = this.REGISTRATION_NBR;
			other.REGISTRATION_DUP = this.REGISTRATION_DUP;
			other.REGISTRATION_DATE = this.REGISTRATION_DATE;
			other.ENTITLEMENT_DATE = this.ENTITLEMENT_DATE;
			other.EXPIRATION_DATE = this.EXPIRATION_DATE;
			other.EXHIBITION_DATE = this.EXHIBITION_DATE;
			other.EXHIBITION_NOTES = this.EXHIBITION_NOTES;
			other.SIGN_TYPE = this.SIGN_TYPE;
			other.MARK_NAME = this.MARK_NAME;
			other.MARK_NAME_LANG2 = this.MARK_NAME_LANG2;
			other.MARK_TRANSLATION = this.MARK_TRANSLATION;
			other.MARK_TRANSLATION_LANG2 = this.MARK_TRANSLATION_LANG2;
			other.MARK_TRANSLITERATION = this.MARK_TRANSLITERATION;
			other.MARK_TRANSLITERATION_LANG2 = this.MARK_TRANSLITERATION_LANG2;
			other.SERIES_DESCRIPTION = this.SERIES_DESCRIPTION;
			other.COLOUR_DESCRIPTION = this.COLOUR_DESCRIPTION;
			other.COLOUR_DESCR_LANG2 = this.COLOUR_DESCR_LANG2;
			other.DISCLAIMER = this.DISCLAIMER;
			other.DISCLAIMER_LANG2 = this.DISCLAIMER_LANG2;
			other.BY_CONSENT = this.BY_CONSENT;
			other.REGULATIONS = this.REGULATIONS;
			other.NOTES = this.NOTES;
			other.CAPTURE_USER_ID = this.CAPTURE_USER_ID;
			other.CAPTURE_DATE = this.CAPTURE_DATE;
			other.PUBLICATION_NBR = this.PUBLICATION_NBR;
			other.PUBLICATION_SER = this.PUBLICATION_SER;
			other.PUBLICATION_TYP = this.PUBLICATION_TYP;

		}

		public void copyKeysDataTo(row9Struct other) {

			other.FILE_NBR = this.FILE_NBR;

		}

		private String readString(DataInputStream dis, ObjectInputStream ois) throws IOException {
			String strReturn = null;
			int length = 0;
			length = dis.readInt();
			if (length == -1) {
				strReturn = null;
			} else {
				byte[] byteArray = new byte[length];
				dis.read(byteArray);
				strReturn = new String(byteArray, utf8Charset);
			}
			return strReturn;
		}

		private void writeString(String str, DataOutputStream dos, ObjectOutputStream oos) throws IOException {
			if (str == null) {
				dos.writeInt(-1);
			} else {
				byte[] byteArray = str.getBytes(utf8Charset);
				dos.writeInt(byteArray.length);
				dos.write(byteArray);
			}
		}

		private java.util.Date readDate(DataInputStream dis, ObjectInputStream ois) throws IOException {
			java.util.Date dateReturn = null;
			int length = 0;
			length = dis.readByte();
			if (length == -1) {
				dateReturn = null;
			} else {
				dateReturn = new Date(dis.readLong());
			}
			return dateReturn;
		}

		private void writeDate(java.util.Date date1, DataOutputStream dos, ObjectOutputStream oos) throws IOException {
			if (date1 == null) {
				dos.writeByte(-1);
			} else {
				dos.writeByte(0);
				dos.writeLong(date1.getTime());
			}
		}

		public void readKeysData(ObjectInputStream dis) {

			synchronized (commonByteArrayLock_WIPO_PROJECTS_E1a_Marc_a_interm_Copy) {

				try {

					int length = 0;

					this.FILE_NBR = (BigDecimal) dis.readObject();

				} catch (IOException e) {
					throw new RuntimeException(e);

				} catch (ClassNotFoundException eCNFE) {
					throw new RuntimeException(eCNFE);

				}

			}

		}

		public void writeKeysData(ObjectOutputStream dos) {
			try {

				// BigDecimal

				dos.writeObject(this.FILE_NBR);

			} catch (IOException e) {
				throw new RuntimeException(e);
			}

		}

		/**
		 * Fill Values data by reading ObjectInputStream.
		 */
		public void readValuesData(DataInputStream dis, ObjectInputStream ois) {
			try {

				int length = 0;

				this.FILE_SEQ = readString(dis, ois);

				this.FILE_TYPE = readString(dis, ois);

				this.FILE_SERIES = (BigDecimal) ois.readObject();

				this.DOC_ORI = readString(dis, ois);

				this.DOC_SERIES = (BigDecimal) ois.readObject();

				this.DOC_NBR = (BigDecimal) ois.readObject();

				this.IND_IMPORT = (BigDecimal) ois.readObject();

				this.APPLICATION_TYPE = readString(dis, ois);

				this.APPLICATION_SUBTYPE = readString(dis, ois);

				this.LAW_CODE = (BigDecimal) ois.readObject();

				this.FILING_DATE = readDate(dis, ois);

				this.RECEPTION_DATE = readDate(dis, ois);

				this.PUBLICATION_DATE = readDate(dis, ois);

				this.PUBLICATION_NOTES = readString(dis, ois);

				this.IND_REGISTERED = (BigDecimal) ois.readObject();

				this.REGISTRATION_TYPE = readString(dis, ois);

				this.REGISTRATION_SERIES = (BigDecimal) ois.readObject();

				this.REGISTRATION_NBR = (BigDecimal) ois.readObject();

				this.REGISTRATION_DUP = readString(dis, ois);

				this.REGISTRATION_DATE = readDate(dis, ois);

				this.ENTITLEMENT_DATE = readDate(dis, ois);

				this.EXPIRATION_DATE = readDate(dis, ois);

				this.EXHIBITION_DATE = readDate(dis, ois);

				this.EXHIBITION_NOTES = readString(dis, ois);

				this.SIGN_TYPE = readString(dis, ois);

				this.MARK_NAME = readString(dis, ois);

				this.MARK_NAME_LANG2 = readString(dis, ois);

				this.MARK_TRANSLATION = readString(dis, ois);

				this.MARK_TRANSLATION_LANG2 = readString(dis, ois);

				this.MARK_TRANSLITERATION = readString(dis, ois);

				this.MARK_TRANSLITERATION_LANG2 = readString(dis, ois);

				this.SERIES_DESCRIPTION = readString(dis, ois);

				this.COLOUR_DESCRIPTION = readString(dis, ois);

				this.COLOUR_DESCR_LANG2 = readString(dis, ois);

				this.DISCLAIMER = readString(dis, ois);

				this.DISCLAIMER_LANG2 = readString(dis, ois);

				this.BY_CONSENT = readString(dis, ois);

				this.REGULATIONS = readString(dis, ois);

				this.NOTES = readString(dis, ois);

				this.CAPTURE_USER_ID = (BigDecimal) ois.readObject();

				this.CAPTURE_DATE = readDate(dis, ois);

				this.PUBLICATION_NBR = (BigDecimal) ois.readObject();

				this.PUBLICATION_SER = readString(dis, ois);

				this.PUBLICATION_TYP = readString(dis, ois);

			} catch (IOException e) {
				throw new RuntimeException(e);

			} catch (ClassNotFoundException eCNFE) {
				throw new RuntimeException(eCNFE);

			}

		}

		/**
		 * Return a byte array which represents Values data.
		 */
		public void writeValuesData(DataOutputStream dos, ObjectOutputStream oos) {
			try {

				writeString(this.FILE_SEQ, dos, oos);

				writeString(this.FILE_TYPE, dos, oos);

				oos.writeObject(this.FILE_SERIES);

				writeString(this.DOC_ORI, dos, oos);

				oos.writeObject(this.DOC_SERIES);

				oos.writeObject(this.DOC_NBR);

				oos.writeObject(this.IND_IMPORT);

				writeString(this.APPLICATION_TYPE, dos, oos);

				writeString(this.APPLICATION_SUBTYPE, dos, oos);

				oos.writeObject(this.LAW_CODE);

				writeDate(this.FILING_DATE, dos, oos);

				writeDate(this.RECEPTION_DATE, dos, oos);

				writeDate(this.PUBLICATION_DATE, dos, oos);

				writeString(this.PUBLICATION_NOTES, dos, oos);

				oos.writeObject(this.IND_REGISTERED);

				writeString(this.REGISTRATION_TYPE, dos, oos);

				oos.writeObject(this.REGISTRATION_SERIES);

				oos.writeObject(this.REGISTRATION_NBR);

				writeString(this.REGISTRATION_DUP, dos, oos);

				writeDate(this.REGISTRATION_DATE, dos, oos);

				writeDate(this.ENTITLEMENT_DATE, dos, oos);

				writeDate(this.EXPIRATION_DATE, dos, oos);

				writeDate(this.EXHIBITION_DATE, dos, oos);

				writeString(this.EXHIBITION_NOTES, dos, oos);

				writeString(this.SIGN_TYPE, dos, oos);

				writeString(this.MARK_NAME, dos, oos);

				writeString(this.MARK_NAME_LANG2, dos, oos);

				writeString(this.MARK_TRANSLATION, dos, oos);

				writeString(this.MARK_TRANSLATION_LANG2, dos, oos);

				writeString(this.MARK_TRANSLITERATION, dos, oos);

				writeString(this.MARK_TRANSLITERATION_LANG2, dos, oos);

				writeString(this.SERIES_DESCRIPTION, dos, oos);

				writeString(this.COLOUR_DESCRIPTION, dos, oos);

				writeString(this.COLOUR_DESCR_LANG2, dos, oos);

				writeString(this.DISCLAIMER, dos, oos);

				writeString(this.DISCLAIMER_LANG2, dos, oos);

				writeString(this.BY_CONSENT, dos, oos);

				writeString(this.REGULATIONS, dos, oos);

				writeString(this.NOTES, dos, oos);

				oos.writeObject(this.CAPTURE_USER_ID);

				writeDate(this.CAPTURE_DATE, dos, oos);

				oos.writeObject(this.PUBLICATION_NBR);

				writeString(this.PUBLICATION_SER, dos, oos);

				writeString(this.PUBLICATION_TYP, dos, oos);

			} catch (IOException e) {
				throw new RuntimeException(e);
			}

		}

		public String toString() {

			StringBuilder sb = new StringBuilder();
			sb.append(super.toString());
			sb.append("[");
			sb.append("FILE_SEQ=" + FILE_SEQ);
			sb.append(",FILE_TYPE=" + FILE_TYPE);
			sb.append(",FILE_SERIES=" + String.valueOf(FILE_SERIES));
			sb.append(",FILE_NBR=" + String.valueOf(FILE_NBR));
			sb.append(",DOC_ORI=" + DOC_ORI);
			sb.append(",DOC_SERIES=" + String.valueOf(DOC_SERIES));
			sb.append(",DOC_NBR=" + String.valueOf(DOC_NBR));
			sb.append(",IND_IMPORT=" + String.valueOf(IND_IMPORT));
			sb.append(",APPLICATION_TYPE=" + APPLICATION_TYPE);
			sb.append(",APPLICATION_SUBTYPE=" + APPLICATION_SUBTYPE);
			sb.append(",LAW_CODE=" + String.valueOf(LAW_CODE));
			sb.append(",FILING_DATE=" + String.valueOf(FILING_DATE));
			sb.append(",RECEPTION_DATE=" + String.valueOf(RECEPTION_DATE));
			sb.append(",PUBLICATION_DATE=" + String.valueOf(PUBLICATION_DATE));
			sb.append(",PUBLICATION_NOTES=" + PUBLICATION_NOTES);
			sb.append(",IND_REGISTERED=" + String.valueOf(IND_REGISTERED));
			sb.append(",REGISTRATION_TYPE=" + REGISTRATION_TYPE);
			sb.append(",REGISTRATION_SERIES=" + String.valueOf(REGISTRATION_SERIES));
			sb.append(",REGISTRATION_NBR=" + String.valueOf(REGISTRATION_NBR));
			sb.append(",REGISTRATION_DUP=" + REGISTRATION_DUP);
			sb.append(",REGISTRATION_DATE=" + String.valueOf(REGISTRATION_DATE));
			sb.append(",ENTITLEMENT_DATE=" + String.valueOf(ENTITLEMENT_DATE));
			sb.append(",EXPIRATION_DATE=" + String.valueOf(EXPIRATION_DATE));
			sb.append(",EXHIBITION_DATE=" + String.valueOf(EXHIBITION_DATE));
			sb.append(",EXHIBITION_NOTES=" + EXHIBITION_NOTES);
			sb.append(",SIGN_TYPE=" + SIGN_TYPE);
			sb.append(",MARK_NAME=" + MARK_NAME);
			sb.append(",MARK_NAME_LANG2=" + MARK_NAME_LANG2);
			sb.append(",MARK_TRANSLATION=" + MARK_TRANSLATION);
			sb.append(",MARK_TRANSLATION_LANG2=" + MARK_TRANSLATION_LANG2);
			sb.append(",MARK_TRANSLITERATION=" + MARK_TRANSLITERATION);
			sb.append(",MARK_TRANSLITERATION_LANG2=" + MARK_TRANSLITERATION_LANG2);
			sb.append(",SERIES_DESCRIPTION=" + SERIES_DESCRIPTION);
			sb.append(",COLOUR_DESCRIPTION=" + COLOUR_DESCRIPTION);
			sb.append(",COLOUR_DESCR_LANG2=" + COLOUR_DESCR_LANG2);
			sb.append(",DISCLAIMER=" + DISCLAIMER);
			sb.append(",DISCLAIMER_LANG2=" + DISCLAIMER_LANG2);
			sb.append(",BY_CONSENT=" + BY_CONSENT);
			sb.append(",REGULATIONS=" + REGULATIONS);
			sb.append(",NOTES=" + NOTES);
			sb.append(",CAPTURE_USER_ID=" + String.valueOf(CAPTURE_USER_ID));
			sb.append(",CAPTURE_DATE=" + String.valueOf(CAPTURE_DATE));
			sb.append(",PUBLICATION_NBR=" + String.valueOf(PUBLICATION_NBR));
			sb.append(",PUBLICATION_SER=" + PUBLICATION_SER);
			sb.append(",PUBLICATION_TYP=" + PUBLICATION_TYP);
			sb.append("]");

			return sb.toString();
		}

		/**
		 * Compare keys
		 */
		public int compareTo(row9Struct other) {

			int returnValue = -1;

			returnValue = checkNullsAndCompare(this.FILE_NBR, other.FILE_NBR);
			if (returnValue != 0) {
				return returnValue;
			}

			return returnValue;
		}

		private int checkNullsAndCompare(Object object1, Object object2) {
			int returnValue = 0;
			if (object1 instanceof Comparable && object2 instanceof Comparable) {
				returnValue = ((Comparable) object1).compareTo(object2);
			} else if (object1 != null && object2 != null) {
				returnValue = compareStrings(object1.toString(), object2.toString());
			} else if (object1 == null && object2 != null) {
				returnValue = 1;
			} else if (object1 != null && object2 == null) {
				returnValue = -1;
			} else {
				returnValue = 0;
			}

			return returnValue;
		}

		private int compareStrings(String string1, String string2) {
			return string1.compareTo(string2);
		}

	}

	public void tDBInput_4Process(final java.util.Map<String, Object> globalMap) throws TalendException {
		globalMap.put("tDBInput_4_SUBPROCESS_STATE", 0);

		final boolean execStat = this.execStat;

		String iterateId = "";

		String currentComponent = "";
		java.util.Map<String, Object> resourceMap = new java.util.HashMap<String, Object>();

		try {
			// TDI-39566 avoid throwing an useless Exception
			boolean resumeIt = true;
			if (globalResumeTicket == false && resumeEntryMethodName != null) {
				String currentMethodName = new java.lang.Exception().getStackTrace()[0].getMethodName();
				resumeIt = resumeEntryMethodName.equals(currentMethodName);
			}
			if (resumeIt || globalResumeTicket) { // start the resume
				globalResumeTicket = true;

				row9Struct row9 = new row9Struct();

				/**
				 * [tAdvancedHash_row9 begin ] start
				 */

				ok_Hash.put("tAdvancedHash_row9", false);
				start_Hash.put("tAdvancedHash_row9", System.currentTimeMillis());

				currentComponent = "tAdvancedHash_row9";

				if (execStat) {
					runStat.updateStatOnConnection(resourceMap, iterateId, 0, 0, "row9");
				}

				int tos_count_tAdvancedHash_row9 = 0;

				// connection name:row9
				// source node:tDBInput_4 - inputs:(after_tDBInput_3) outputs:(row9,row9) |
				// target node:tAdvancedHash_row9 - inputs:(row9) outputs:()
				// linked node: tMap_3 - inputs:(row8,row9,row11) outputs:(insert_actions)

				org.talend.designer.components.lookup.common.ICommonLookup.MATCHING_MODE matchingModeEnum_row9 = org.talend.designer.components.lookup.common.ICommonLookup.MATCHING_MODE.UNIQUE_MATCH;

				org.talend.designer.components.lookup.memory.AdvancedMemoryLookup<row9Struct> tHash_Lookup_row9 = org.talend.designer.components.lookup.memory.AdvancedMemoryLookup
						.<row9Struct>getLookup(matchingModeEnum_row9);

				globalMap.put("tHash_Lookup_row9", tHash_Lookup_row9);

				/**
				 * [tAdvancedHash_row9 begin ] stop
				 */

				/**
				 * [tDBInput_4 begin ] start
				 */

				ok_Hash.put("tDBInput_4", false);
				start_Hash.put("tDBInput_4", System.currentTimeMillis());

				currentComponent = "tDBInput_4";

				int tos_count_tDBInput_4 = 0;

				org.talend.designer.components.util.mssql.MSSqlGenerateTimestampUtil mssqlGTU_tDBInput_4 = org.talend.designer.components.util.mssql.MSSqlUtilFactory
						.getMSSqlGenerateTimestampUtil();

				java.util.List<String> talendToDBList_tDBInput_4 = new java.util.ArrayList();
				String[] talendToDBArray_tDBInput_4 = new String[] { "FLOAT", "NUMERIC", "NUMERIC IDENTITY", "DECIMAL",
						"DECIMAL IDENTITY", "REAL" };
				java.util.Collections.addAll(talendToDBList_tDBInput_4, talendToDBArray_tDBInput_4);
				int nb_line_tDBInput_4 = 0;
				java.sql.Connection conn_tDBInput_4 = null;
				conn_tDBInput_4 = (java.sql.Connection) globalMap.get("conn_tDBConnection_1");

				String dbschema_tDBInput_4 = (String) globalMap.get("dbschema_tDBConnection_1");

				java.sql.Statement stmt_tDBInput_4 = conn_tDBInput_4.createStatement();

				String dbquery_tDBInput_4 = "SELECT dbo.VW_IMPORT_MARK.FILE_SEQ,\n		dbo.VW_IMPORT_MARK.FILE_TYPE,\n		dbo.VW_IMPORT_MARK.FILE_SERIES,\n		dbo.VW_IMPORT_M"
						+ "ARK.FILE_NBR,\n		dbo.VW_IMPORT_MARK.DOC_ORI,\n		dbo.VW_IMPORT_MARK.DOC_SERIES,\n		dbo.VW_IMPORT_MARK.DOC_NBR,\n		dbo.VW_IMPO"
						+ "RT_MARK.IND_IMPORT,\n		dbo.VW_IMPORT_MARK.APPLICATION_TYPE,\n		dbo.VW_IMPORT_MARK.APPLICATION_SUBTYPE,\n		dbo.VW_IMPORT_MAR"
						+ "K.LAW_CODE,\n		dbo.VW_IMPORT_MARK.FILING_DATE,\n		dbo.VW_IMPORT_MARK.RECEPTION_DATE,\n		dbo.VW_IMPORT_MARK.PUBLICATION_DATE"
						+ ",\n		dbo.VW_IMPORT_MARK.PUBLICATION_NOTES,\n		dbo.VW_IMPORT_MARK.IND_REGISTERED,\n		dbo.VW_IMPORT_MARK.REGISTRATION_TYPE,\n	"
						+ "	dbo.VW_IMPORT_MARK.REGISTRATION_SERIES,\n		dbo.VW_IMPORT_MARK.REGISTRATION_NBR,\n		dbo.VW_IMPORT_MARK.REGISTRATION_DUP,\n	"
						+ "	dbo.VW_IMPORT_MARK.REGISTRATION_DATE,\n		dbo.VW_IMPORT_MARK.ENTITLEMENT_DATE,\n		dbo.VW_IMPORT_MARK.EXPIRATION_DATE,\n		db"
						+ "o.VW_IMPORT_MARK.EXHIBITION_DATE,\n		dbo.VW_IMPORT_MARK.EXHIBITION_NOTES,\n		dbo.VW_IMPORT_MARK.SIGN_TYPE,\n		dbo.VW_IMPORT"
						+ "_MARK.MARK_NAME,\n		dbo.VW_IMPORT_MARK.MARK_NAME_LANG2,\n		dbo.VW_IMPORT_MARK.MARK_TRANSLATION,\n		dbo.VW_IMPORT_MARK.MARK_"
						+ "TRANSLATION_LANG2,\n		dbo.VW_IMPORT_MARK.MARK_TRANSLITERATION,\n		dbo.VW_IMPORT_MARK.MARK_TRANSLITERATION_LANG2,\n		dbo.VW_"
						+ "IMPORT_MARK.SERIES_DESCRIPTION,\n		dbo.VW_IMPORT_MARK.COLOUR_DESCRIPTION,\n		dbo.VW_IMPORT_MARK.COLOUR_DESCR_LANG2,\n		dbo."
						+ "VW_IMPORT_MARK.DISCLAIMER,\n		dbo.VW_IMPORT_MARK.DISCLAIMER_LANG2,\n		dbo.VW_IMPORT_MARK.BY_CONSENT,\n		dbo.VW_IMPORT_MARK."
						+ "REGULATIONS,\n		dbo.VW_IMPORT_MARK.NOTES,\n		dbo.VW_IMPORT_MARK.CAPTURE_USER_ID,\n		dbo.VW_IMPORT_MARK.CAPTURE_DATE,\n		dbo."
						+ "VW_IMPORT_MARK.PUBLICATION_NBR,\n		dbo.VW_IMPORT_MARK.PUBLICATION_SER,\n		dbo.VW_IMPORT_MARK.PUBLICATION_TYP\nFROM	dbo.VW_I"
						+ "MPORT_MARK";

				globalMap.put("tDBInput_4_QUERY", dbquery_tDBInput_4);
				java.sql.ResultSet rs_tDBInput_4 = null;

				try {
					rs_tDBInput_4 = stmt_tDBInput_4.executeQuery(dbquery_tDBInput_4);
					java.sql.ResultSetMetaData rsmd_tDBInput_4 = rs_tDBInput_4.getMetaData();
					int colQtyInRs_tDBInput_4 = rsmd_tDBInput_4.getColumnCount();

					String tmpContent_tDBInput_4 = null;

					while (rs_tDBInput_4.next()) {
						nb_line_tDBInput_4++;

						if (colQtyInRs_tDBInput_4 < 1) {
							row9.FILE_SEQ = null;
						} else {

							tmpContent_tDBInput_4 = rs_tDBInput_4.getString(1);
							if (tmpContent_tDBInput_4 != null) {
								if (talendToDBList_tDBInput_4.contains(
										rsmd_tDBInput_4.getColumnTypeName(1).toUpperCase(java.util.Locale.ENGLISH))) {
									row9.FILE_SEQ = FormatterUtils.formatUnwithE(tmpContent_tDBInput_4);
								} else {
									row9.FILE_SEQ = tmpContent_tDBInput_4;
								}
							} else {
								row9.FILE_SEQ = null;
							}
						}
						if (colQtyInRs_tDBInput_4 < 2) {
							row9.FILE_TYPE = null;
						} else {

							tmpContent_tDBInput_4 = rs_tDBInput_4.getString(2);
							if (tmpContent_tDBInput_4 != null) {
								if (talendToDBList_tDBInput_4.contains(
										rsmd_tDBInput_4.getColumnTypeName(2).toUpperCase(java.util.Locale.ENGLISH))) {
									row9.FILE_TYPE = FormatterUtils.formatUnwithE(tmpContent_tDBInput_4);
								} else {
									row9.FILE_TYPE = tmpContent_tDBInput_4;
								}
							} else {
								row9.FILE_TYPE = null;
							}
						}
						if (colQtyInRs_tDBInput_4 < 3) {
							row9.FILE_SERIES = null;
						} else {

							row9.FILE_SERIES = rs_tDBInput_4.getBigDecimal(3);
							if (rs_tDBInput_4.wasNull()) {
								throw new RuntimeException("Null value in non-Nullable column");
							}
						}
						if (colQtyInRs_tDBInput_4 < 4) {
							row9.FILE_NBR = null;
						} else {

							row9.FILE_NBR = rs_tDBInput_4.getBigDecimal(4);
							if (rs_tDBInput_4.wasNull()) {
								throw new RuntimeException("Null value in non-Nullable column");
							}
						}
						if (colQtyInRs_tDBInput_4 < 5) {
							row9.DOC_ORI = null;
						} else {

							tmpContent_tDBInput_4 = rs_tDBInput_4.getString(5);
							if (tmpContent_tDBInput_4 != null) {
								if (talendToDBList_tDBInput_4.contains(
										rsmd_tDBInput_4.getColumnTypeName(5).toUpperCase(java.util.Locale.ENGLISH))) {
									row9.DOC_ORI = FormatterUtils.formatUnwithE(tmpContent_tDBInput_4);
								} else {
									row9.DOC_ORI = tmpContent_tDBInput_4;
								}
							} else {
								row9.DOC_ORI = null;
							}
						}
						if (colQtyInRs_tDBInput_4 < 6) {
							row9.DOC_SERIES = null;
						} else {

							row9.DOC_SERIES = rs_tDBInput_4.getBigDecimal(6);
							if (rs_tDBInput_4.wasNull()) {
								row9.DOC_SERIES = null;
							}
						}
						if (colQtyInRs_tDBInput_4 < 7) {
							row9.DOC_NBR = null;
						} else {

							row9.DOC_NBR = rs_tDBInput_4.getBigDecimal(7);
							if (rs_tDBInput_4.wasNull()) {
								row9.DOC_NBR = null;
							}
						}
						if (colQtyInRs_tDBInput_4 < 8) {
							row9.IND_IMPORT = null;
						} else {

							row9.IND_IMPORT = rs_tDBInput_4.getBigDecimal(8);
							if (rs_tDBInput_4.wasNull()) {
								row9.IND_IMPORT = null;
							}
						}
						if (colQtyInRs_tDBInput_4 < 9) {
							row9.APPLICATION_TYPE = null;
						} else {

							tmpContent_tDBInput_4 = rs_tDBInput_4.getString(9);
							if (tmpContent_tDBInput_4 != null) {
								if (talendToDBList_tDBInput_4.contains(
										rsmd_tDBInput_4.getColumnTypeName(9).toUpperCase(java.util.Locale.ENGLISH))) {
									row9.APPLICATION_TYPE = FormatterUtils.formatUnwithE(tmpContent_tDBInput_4);
								} else {
									row9.APPLICATION_TYPE = tmpContent_tDBInput_4;
								}
							} else {
								row9.APPLICATION_TYPE = null;
							}
						}
						if (colQtyInRs_tDBInput_4 < 10) {
							row9.APPLICATION_SUBTYPE = null;
						} else {

							tmpContent_tDBInput_4 = rs_tDBInput_4.getString(10);
							if (tmpContent_tDBInput_4 != null) {
								if (talendToDBList_tDBInput_4.contains(
										rsmd_tDBInput_4.getColumnTypeName(10).toUpperCase(java.util.Locale.ENGLISH))) {
									row9.APPLICATION_SUBTYPE = FormatterUtils.formatUnwithE(tmpContent_tDBInput_4);
								} else {
									row9.APPLICATION_SUBTYPE = tmpContent_tDBInput_4;
								}
							} else {
								row9.APPLICATION_SUBTYPE = null;
							}
						}
						if (colQtyInRs_tDBInput_4 < 11) {
							row9.LAW_CODE = null;
						} else {

							row9.LAW_CODE = rs_tDBInput_4.getBigDecimal(11);
							if (rs_tDBInput_4.wasNull()) {
								throw new RuntimeException("Null value in non-Nullable column");
							}
						}
						if (colQtyInRs_tDBInput_4 < 12) {
							row9.FILING_DATE = null;
						} else {

							row9.FILING_DATE = mssqlGTU_tDBInput_4.getDate(rsmd_tDBInput_4, rs_tDBInput_4, 12);

						}
						if (colQtyInRs_tDBInput_4 < 13) {
							row9.RECEPTION_DATE = null;
						} else {

							row9.RECEPTION_DATE = mssqlGTU_tDBInput_4.getDate(rsmd_tDBInput_4, rs_tDBInput_4, 13);

						}
						if (colQtyInRs_tDBInput_4 < 14) {
							row9.PUBLICATION_DATE = null;
						} else {

							row9.PUBLICATION_DATE = mssqlGTU_tDBInput_4.getDate(rsmd_tDBInput_4, rs_tDBInput_4, 14);

						}
						if (colQtyInRs_tDBInput_4 < 15) {
							row9.PUBLICATION_NOTES = null;
						} else {

							tmpContent_tDBInput_4 = rs_tDBInput_4.getString(15);
							if (tmpContent_tDBInput_4 != null) {
								if (talendToDBList_tDBInput_4.contains(
										rsmd_tDBInput_4.getColumnTypeName(15).toUpperCase(java.util.Locale.ENGLISH))) {
									row9.PUBLICATION_NOTES = FormatterUtils.formatUnwithE(tmpContent_tDBInput_4);
								} else {
									row9.PUBLICATION_NOTES = tmpContent_tDBInput_4;
								}
							} else {
								row9.PUBLICATION_NOTES = null;
							}
						}
						if (colQtyInRs_tDBInput_4 < 16) {
							row9.IND_REGISTERED = null;
						} else {

							row9.IND_REGISTERED = rs_tDBInput_4.getBigDecimal(16);
							if (rs_tDBInput_4.wasNull()) {
								row9.IND_REGISTERED = null;
							}
						}
						if (colQtyInRs_tDBInput_4 < 17) {
							row9.REGISTRATION_TYPE = null;
						} else {

							tmpContent_tDBInput_4 = rs_tDBInput_4.getString(17);
							if (tmpContent_tDBInput_4 != null) {
								if (talendToDBList_tDBInput_4.contains(
										rsmd_tDBInput_4.getColumnTypeName(17).toUpperCase(java.util.Locale.ENGLISH))) {
									row9.REGISTRATION_TYPE = FormatterUtils.formatUnwithE(tmpContent_tDBInput_4);
								} else {
									row9.REGISTRATION_TYPE = tmpContent_tDBInput_4;
								}
							} else {
								row9.REGISTRATION_TYPE = null;
							}
						}
						if (colQtyInRs_tDBInput_4 < 18) {
							row9.REGISTRATION_SERIES = null;
						} else {

							row9.REGISTRATION_SERIES = rs_tDBInput_4.getBigDecimal(18);
							if (rs_tDBInput_4.wasNull()) {
								row9.REGISTRATION_SERIES = null;
							}
						}
						if (colQtyInRs_tDBInput_4 < 19) {
							row9.REGISTRATION_NBR = null;
						} else {

							row9.REGISTRATION_NBR = rs_tDBInput_4.getBigDecimal(19);
							if (rs_tDBInput_4.wasNull()) {
								row9.REGISTRATION_NBR = null;
							}
						}
						if (colQtyInRs_tDBInput_4 < 20) {
							row9.REGISTRATION_DUP = null;
						} else {

							tmpContent_tDBInput_4 = rs_tDBInput_4.getString(20);
							if (tmpContent_tDBInput_4 != null) {
								if (talendToDBList_tDBInput_4.contains(
										rsmd_tDBInput_4.getColumnTypeName(20).toUpperCase(java.util.Locale.ENGLISH))) {
									row9.REGISTRATION_DUP = FormatterUtils.formatUnwithE(tmpContent_tDBInput_4);
								} else {
									row9.REGISTRATION_DUP = tmpContent_tDBInput_4;
								}
							} else {
								row9.REGISTRATION_DUP = null;
							}
						}
						if (colQtyInRs_tDBInput_4 < 21) {
							row9.REGISTRATION_DATE = null;
						} else {

							row9.REGISTRATION_DATE = mssqlGTU_tDBInput_4.getDate(rsmd_tDBInput_4, rs_tDBInput_4, 21);

						}
						if (colQtyInRs_tDBInput_4 < 22) {
							row9.ENTITLEMENT_DATE = null;
						} else {

							row9.ENTITLEMENT_DATE = mssqlGTU_tDBInput_4.getDate(rsmd_tDBInput_4, rs_tDBInput_4, 22);

						}
						if (colQtyInRs_tDBInput_4 < 23) {
							row9.EXPIRATION_DATE = null;
						} else {

							row9.EXPIRATION_DATE = mssqlGTU_tDBInput_4.getDate(rsmd_tDBInput_4, rs_tDBInput_4, 23);

						}
						if (colQtyInRs_tDBInput_4 < 24) {
							row9.EXHIBITION_DATE = null;
						} else {

							row9.EXHIBITION_DATE = mssqlGTU_tDBInput_4.getDate(rsmd_tDBInput_4, rs_tDBInput_4, 24);

						}
						if (colQtyInRs_tDBInput_4 < 25) {
							row9.EXHIBITION_NOTES = null;
						} else {

							tmpContent_tDBInput_4 = rs_tDBInput_4.getString(25);
							if (tmpContent_tDBInput_4 != null) {
								if (talendToDBList_tDBInput_4.contains(
										rsmd_tDBInput_4.getColumnTypeName(25).toUpperCase(java.util.Locale.ENGLISH))) {
									row9.EXHIBITION_NOTES = FormatterUtils.formatUnwithE(tmpContent_tDBInput_4);
								} else {
									row9.EXHIBITION_NOTES = tmpContent_tDBInput_4;
								}
							} else {
								row9.EXHIBITION_NOTES = null;
							}
						}
						if (colQtyInRs_tDBInput_4 < 26) {
							row9.SIGN_TYPE = null;
						} else {

							tmpContent_tDBInput_4 = rs_tDBInput_4.getString(26);
							if (tmpContent_tDBInput_4 != null) {
								if (talendToDBList_tDBInput_4.contains(
										rsmd_tDBInput_4.getColumnTypeName(26).toUpperCase(java.util.Locale.ENGLISH))) {
									row9.SIGN_TYPE = FormatterUtils.formatUnwithE(tmpContent_tDBInput_4);
								} else {
									row9.SIGN_TYPE = tmpContent_tDBInput_4;
								}
							} else {
								row9.SIGN_TYPE = null;
							}
						}
						if (colQtyInRs_tDBInput_4 < 27) {
							row9.MARK_NAME = null;
						} else {

							tmpContent_tDBInput_4 = rs_tDBInput_4.getString(27);
							if (tmpContent_tDBInput_4 != null) {
								if (talendToDBList_tDBInput_4.contains(
										rsmd_tDBInput_4.getColumnTypeName(27).toUpperCase(java.util.Locale.ENGLISH))) {
									row9.MARK_NAME = FormatterUtils.formatUnwithE(tmpContent_tDBInput_4);
								} else {
									row9.MARK_NAME = tmpContent_tDBInput_4;
								}
							} else {
								row9.MARK_NAME = null;
							}
						}
						if (colQtyInRs_tDBInput_4 < 28) {
							row9.MARK_NAME_LANG2 = null;
						} else {

							tmpContent_tDBInput_4 = rs_tDBInput_4.getString(28);
							if (tmpContent_tDBInput_4 != null) {
								if (talendToDBList_tDBInput_4.contains(
										rsmd_tDBInput_4.getColumnTypeName(28).toUpperCase(java.util.Locale.ENGLISH))) {
									row9.MARK_NAME_LANG2 = FormatterUtils.formatUnwithE(tmpContent_tDBInput_4);
								} else {
									row9.MARK_NAME_LANG2 = tmpContent_tDBInput_4;
								}
							} else {
								row9.MARK_NAME_LANG2 = null;
							}
						}
						if (colQtyInRs_tDBInput_4 < 29) {
							row9.MARK_TRANSLATION = null;
						} else {

							tmpContent_tDBInput_4 = rs_tDBInput_4.getString(29);
							if (tmpContent_tDBInput_4 != null) {
								if (talendToDBList_tDBInput_4.contains(
										rsmd_tDBInput_4.getColumnTypeName(29).toUpperCase(java.util.Locale.ENGLISH))) {
									row9.MARK_TRANSLATION = FormatterUtils.formatUnwithE(tmpContent_tDBInput_4);
								} else {
									row9.MARK_TRANSLATION = tmpContent_tDBInput_4;
								}
							} else {
								row9.MARK_TRANSLATION = null;
							}
						}
						if (colQtyInRs_tDBInput_4 < 30) {
							row9.MARK_TRANSLATION_LANG2 = null;
						} else {

							tmpContent_tDBInput_4 = rs_tDBInput_4.getString(30);
							if (tmpContent_tDBInput_4 != null) {
								if (talendToDBList_tDBInput_4.contains(
										rsmd_tDBInput_4.getColumnTypeName(30).toUpperCase(java.util.Locale.ENGLISH))) {
									row9.MARK_TRANSLATION_LANG2 = FormatterUtils.formatUnwithE(tmpContent_tDBInput_4);
								} else {
									row9.MARK_TRANSLATION_LANG2 = tmpContent_tDBInput_4;
								}
							} else {
								row9.MARK_TRANSLATION_LANG2 = null;
							}
						}
						if (colQtyInRs_tDBInput_4 < 31) {
							row9.MARK_TRANSLITERATION = null;
						} else {

							tmpContent_tDBInput_4 = rs_tDBInput_4.getString(31);
							if (tmpContent_tDBInput_4 != null) {
								if (talendToDBList_tDBInput_4.contains(
										rsmd_tDBInput_4.getColumnTypeName(31).toUpperCase(java.util.Locale.ENGLISH))) {
									row9.MARK_TRANSLITERATION = FormatterUtils.formatUnwithE(tmpContent_tDBInput_4);
								} else {
									row9.MARK_TRANSLITERATION = tmpContent_tDBInput_4;
								}
							} else {
								row9.MARK_TRANSLITERATION = null;
							}
						}
						if (colQtyInRs_tDBInput_4 < 32) {
							row9.MARK_TRANSLITERATION_LANG2 = null;
						} else {

							tmpContent_tDBInput_4 = rs_tDBInput_4.getString(32);
							if (tmpContent_tDBInput_4 != null) {
								if (talendToDBList_tDBInput_4.contains(
										rsmd_tDBInput_4.getColumnTypeName(32).toUpperCase(java.util.Locale.ENGLISH))) {
									row9.MARK_TRANSLITERATION_LANG2 = FormatterUtils
											.formatUnwithE(tmpContent_tDBInput_4);
								} else {
									row9.MARK_TRANSLITERATION_LANG2 = tmpContent_tDBInput_4;
								}
							} else {
								row9.MARK_TRANSLITERATION_LANG2 = null;
							}
						}
						if (colQtyInRs_tDBInput_4 < 33) {
							row9.SERIES_DESCRIPTION = null;
						} else {

							tmpContent_tDBInput_4 = rs_tDBInput_4.getString(33);
							if (tmpContent_tDBInput_4 != null) {
								if (talendToDBList_tDBInput_4.contains(
										rsmd_tDBInput_4.getColumnTypeName(33).toUpperCase(java.util.Locale.ENGLISH))) {
									row9.SERIES_DESCRIPTION = FormatterUtils.formatUnwithE(tmpContent_tDBInput_4);
								} else {
									row9.SERIES_DESCRIPTION = tmpContent_tDBInput_4;
								}
							} else {
								row9.SERIES_DESCRIPTION = null;
							}
						}
						if (colQtyInRs_tDBInput_4 < 34) {
							row9.COLOUR_DESCRIPTION = null;
						} else {

							tmpContent_tDBInput_4 = rs_tDBInput_4.getString(34);
							if (tmpContent_tDBInput_4 != null) {
								if (talendToDBList_tDBInput_4.contains(
										rsmd_tDBInput_4.getColumnTypeName(34).toUpperCase(java.util.Locale.ENGLISH))) {
									row9.COLOUR_DESCRIPTION = FormatterUtils.formatUnwithE(tmpContent_tDBInput_4);
								} else {
									row9.COLOUR_DESCRIPTION = tmpContent_tDBInput_4;
								}
							} else {
								row9.COLOUR_DESCRIPTION = null;
							}
						}
						if (colQtyInRs_tDBInput_4 < 35) {
							row9.COLOUR_DESCR_LANG2 = null;
						} else {

							tmpContent_tDBInput_4 = rs_tDBInput_4.getString(35);
							if (tmpContent_tDBInput_4 != null) {
								if (talendToDBList_tDBInput_4.contains(
										rsmd_tDBInput_4.getColumnTypeName(35).toUpperCase(java.util.Locale.ENGLISH))) {
									row9.COLOUR_DESCR_LANG2 = FormatterUtils.formatUnwithE(tmpContent_tDBInput_4);
								} else {
									row9.COLOUR_DESCR_LANG2 = tmpContent_tDBInput_4;
								}
							} else {
								row9.COLOUR_DESCR_LANG2 = null;
							}
						}
						if (colQtyInRs_tDBInput_4 < 36) {
							row9.DISCLAIMER = null;
						} else {

							tmpContent_tDBInput_4 = rs_tDBInput_4.getString(36);
							if (tmpContent_tDBInput_4 != null) {
								if (talendToDBList_tDBInput_4.contains(
										rsmd_tDBInput_4.getColumnTypeName(36).toUpperCase(java.util.Locale.ENGLISH))) {
									row9.DISCLAIMER = FormatterUtils.formatUnwithE(tmpContent_tDBInput_4);
								} else {
									row9.DISCLAIMER = tmpContent_tDBInput_4;
								}
							} else {
								row9.DISCLAIMER = null;
							}
						}
						if (colQtyInRs_tDBInput_4 < 37) {
							row9.DISCLAIMER_LANG2 = null;
						} else {

							tmpContent_tDBInput_4 = rs_tDBInput_4.getString(37);
							if (tmpContent_tDBInput_4 != null) {
								if (talendToDBList_tDBInput_4.contains(
										rsmd_tDBInput_4.getColumnTypeName(37).toUpperCase(java.util.Locale.ENGLISH))) {
									row9.DISCLAIMER_LANG2 = FormatterUtils.formatUnwithE(tmpContent_tDBInput_4);
								} else {
									row9.DISCLAIMER_LANG2 = tmpContent_tDBInput_4;
								}
							} else {
								row9.DISCLAIMER_LANG2 = null;
							}
						}
						if (colQtyInRs_tDBInput_4 < 38) {
							row9.BY_CONSENT = null;
						} else {

							tmpContent_tDBInput_4 = rs_tDBInput_4.getString(38);
							if (tmpContent_tDBInput_4 != null) {
								if (talendToDBList_tDBInput_4.contains(
										rsmd_tDBInput_4.getColumnTypeName(38).toUpperCase(java.util.Locale.ENGLISH))) {
									row9.BY_CONSENT = FormatterUtils.formatUnwithE(tmpContent_tDBInput_4);
								} else {
									row9.BY_CONSENT = tmpContent_tDBInput_4;
								}
							} else {
								row9.BY_CONSENT = null;
							}
						}
						if (colQtyInRs_tDBInput_4 < 39) {
							row9.REGULATIONS = null;
						} else {

							tmpContent_tDBInput_4 = rs_tDBInput_4.getString(39);
							if (tmpContent_tDBInput_4 != null) {
								if (talendToDBList_tDBInput_4.contains(
										rsmd_tDBInput_4.getColumnTypeName(39).toUpperCase(java.util.Locale.ENGLISH))) {
									row9.REGULATIONS = FormatterUtils.formatUnwithE(tmpContent_tDBInput_4);
								} else {
									row9.REGULATIONS = tmpContent_tDBInput_4;
								}
							} else {
								row9.REGULATIONS = null;
							}
						}
						if (colQtyInRs_tDBInput_4 < 40) {
							row9.NOTES = null;
						} else {

							tmpContent_tDBInput_4 = rs_tDBInput_4.getString(40);
							if (tmpContent_tDBInput_4 != null) {
								if (talendToDBList_tDBInput_4.contains(
										rsmd_tDBInput_4.getColumnTypeName(40).toUpperCase(java.util.Locale.ENGLISH))) {
									row9.NOTES = FormatterUtils.formatUnwithE(tmpContent_tDBInput_4);
								} else {
									row9.NOTES = tmpContent_tDBInput_4;
								}
							} else {
								row9.NOTES = null;
							}
						}
						if (colQtyInRs_tDBInput_4 < 41) {
							row9.CAPTURE_USER_ID = null;
						} else {

							row9.CAPTURE_USER_ID = rs_tDBInput_4.getBigDecimal(41);
							if (rs_tDBInput_4.wasNull()) {
								row9.CAPTURE_USER_ID = null;
							}
						}
						if (colQtyInRs_tDBInput_4 < 42) {
							row9.CAPTURE_DATE = null;
						} else {

							row9.CAPTURE_DATE = mssqlGTU_tDBInput_4.getDate(rsmd_tDBInput_4, rs_tDBInput_4, 42);

						}
						if (colQtyInRs_tDBInput_4 < 43) {
							row9.PUBLICATION_NBR = null;
						} else {

							row9.PUBLICATION_NBR = rs_tDBInput_4.getBigDecimal(43);
							if (rs_tDBInput_4.wasNull()) {
								row9.PUBLICATION_NBR = null;
							}
						}
						if (colQtyInRs_tDBInput_4 < 44) {
							row9.PUBLICATION_SER = null;
						} else {

							tmpContent_tDBInput_4 = rs_tDBInput_4.getString(44);
							if (tmpContent_tDBInput_4 != null) {
								if (talendToDBList_tDBInput_4.contains(
										rsmd_tDBInput_4.getColumnTypeName(44).toUpperCase(java.util.Locale.ENGLISH))) {
									row9.PUBLICATION_SER = FormatterUtils.formatUnwithE(tmpContent_tDBInput_4);
								} else {
									row9.PUBLICATION_SER = tmpContent_tDBInput_4;
								}
							} else {
								row9.PUBLICATION_SER = null;
							}
						}
						if (colQtyInRs_tDBInput_4 < 45) {
							row9.PUBLICATION_TYP = null;
						} else {

							tmpContent_tDBInput_4 = rs_tDBInput_4.getString(45);
							if (tmpContent_tDBInput_4 != null) {
								if (talendToDBList_tDBInput_4.contains(
										rsmd_tDBInput_4.getColumnTypeName(45).toUpperCase(java.util.Locale.ENGLISH))) {
									row9.PUBLICATION_TYP = FormatterUtils.formatUnwithE(tmpContent_tDBInput_4);
								} else {
									row9.PUBLICATION_TYP = tmpContent_tDBInput_4;
								}
							} else {
								row9.PUBLICATION_TYP = null;
							}
						}

						/**
						 * [tDBInput_4 begin ] stop
						 */

						/**
						 * [tDBInput_4 main ] start
						 */

						currentComponent = "tDBInput_4";

						tos_count_tDBInput_4++;

						/**
						 * [tDBInput_4 main ] stop
						 */

						/**
						 * [tDBInput_4 process_data_begin ] start
						 */

						currentComponent = "tDBInput_4";

						/**
						 * [tDBInput_4 process_data_begin ] stop
						 */

						/**
						 * [tAdvancedHash_row9 main ] start
						 */

						currentComponent = "tAdvancedHash_row9";

						if (execStat) {
							runStat.updateStatOnConnection(iterateId, 1, 1

									, "row9"

							);
						}

						row9Struct row9_HashRow = new row9Struct();

						row9_HashRow.FILE_SEQ = row9.FILE_SEQ;

						row9_HashRow.FILE_TYPE = row9.FILE_TYPE;

						row9_HashRow.FILE_SERIES = row9.FILE_SERIES;

						row9_HashRow.FILE_NBR = row9.FILE_NBR;

						row9_HashRow.DOC_ORI = row9.DOC_ORI;

						row9_HashRow.DOC_SERIES = row9.DOC_SERIES;

						row9_HashRow.DOC_NBR = row9.DOC_NBR;

						row9_HashRow.IND_IMPORT = row9.IND_IMPORT;

						row9_HashRow.APPLICATION_TYPE = row9.APPLICATION_TYPE;

						row9_HashRow.APPLICATION_SUBTYPE = row9.APPLICATION_SUBTYPE;

						row9_HashRow.LAW_CODE = row9.LAW_CODE;

						row9_HashRow.FILING_DATE = row9.FILING_DATE;

						row9_HashRow.RECEPTION_DATE = row9.RECEPTION_DATE;

						row9_HashRow.PUBLICATION_DATE = row9.PUBLICATION_DATE;

						row9_HashRow.PUBLICATION_NOTES = row9.PUBLICATION_NOTES;

						row9_HashRow.IND_REGISTERED = row9.IND_REGISTERED;

						row9_HashRow.REGISTRATION_TYPE = row9.REGISTRATION_TYPE;

						row9_HashRow.REGISTRATION_SERIES = row9.REGISTRATION_SERIES;

						row9_HashRow.REGISTRATION_NBR = row9.REGISTRATION_NBR;

						row9_HashRow.REGISTRATION_DUP = row9.REGISTRATION_DUP;

						row9_HashRow.REGISTRATION_DATE = row9.REGISTRATION_DATE;

						row9_HashRow.ENTITLEMENT_DATE = row9.ENTITLEMENT_DATE;

						row9_HashRow.EXPIRATION_DATE = row9.EXPIRATION_DATE;

						row9_HashRow.EXHIBITION_DATE = row9.EXHIBITION_DATE;

						row9_HashRow.EXHIBITION_NOTES = row9.EXHIBITION_NOTES;

						row9_HashRow.SIGN_TYPE = row9.SIGN_TYPE;

						row9_HashRow.MARK_NAME = row9.MARK_NAME;

						row9_HashRow.MARK_NAME_LANG2 = row9.MARK_NAME_LANG2;

						row9_HashRow.MARK_TRANSLATION = row9.MARK_TRANSLATION;

						row9_HashRow.MARK_TRANSLATION_LANG2 = row9.MARK_TRANSLATION_LANG2;

						row9_HashRow.MARK_TRANSLITERATION = row9.MARK_TRANSLITERATION;

						row9_HashRow.MARK_TRANSLITERATION_LANG2 = row9.MARK_TRANSLITERATION_LANG2;

						row9_HashRow.SERIES_DESCRIPTION = row9.SERIES_DESCRIPTION;

						row9_HashRow.COLOUR_DESCRIPTION = row9.COLOUR_DESCRIPTION;

						row9_HashRow.COLOUR_DESCR_LANG2 = row9.COLOUR_DESCR_LANG2;

						row9_HashRow.DISCLAIMER = row9.DISCLAIMER;

						row9_HashRow.DISCLAIMER_LANG2 = row9.DISCLAIMER_LANG2;

						row9_HashRow.BY_CONSENT = row9.BY_CONSENT;

						row9_HashRow.REGULATIONS = row9.REGULATIONS;

						row9_HashRow.NOTES = row9.NOTES;

						row9_HashRow.CAPTURE_USER_ID = row9.CAPTURE_USER_ID;

						row9_HashRow.CAPTURE_DATE = row9.CAPTURE_DATE;

						row9_HashRow.PUBLICATION_NBR = row9.PUBLICATION_NBR;

						row9_HashRow.PUBLICATION_SER = row9.PUBLICATION_SER;

						row9_HashRow.PUBLICATION_TYP = row9.PUBLICATION_TYP;

						tHash_Lookup_row9.put(row9_HashRow);

						tos_count_tAdvancedHash_row9++;

						/**
						 * [tAdvancedHash_row9 main ] stop
						 */

						/**
						 * [tAdvancedHash_row9 process_data_begin ] start
						 */

						currentComponent = "tAdvancedHash_row9";

						/**
						 * [tAdvancedHash_row9 process_data_begin ] stop
						 */

						/**
						 * [tAdvancedHash_row9 process_data_end ] start
						 */

						currentComponent = "tAdvancedHash_row9";

						/**
						 * [tAdvancedHash_row9 process_data_end ] stop
						 */

						/**
						 * [tDBInput_4 process_data_end ] start
						 */

						currentComponent = "tDBInput_4";

						/**
						 * [tDBInput_4 process_data_end ] stop
						 */

						/**
						 * [tDBInput_4 end ] start
						 */

						currentComponent = "tDBInput_4";

					}
				} finally {
					if (rs_tDBInput_4 != null) {
						rs_tDBInput_4.close();
					}
					if (stmt_tDBInput_4 != null) {
						stmt_tDBInput_4.close();
					}
				}
				globalMap.put("tDBInput_4_NB_LINE", nb_line_tDBInput_4);

				ok_Hash.put("tDBInput_4", true);
				end_Hash.put("tDBInput_4", System.currentTimeMillis());

				/**
				 * [tDBInput_4 end ] stop
				 */

				/**
				 * [tAdvancedHash_row9 end ] start
				 */

				currentComponent = "tAdvancedHash_row9";

				tHash_Lookup_row9.endPut();

				if (execStat) {
					runStat.updateStat(resourceMap, iterateId, 2, 0, "row9");
				}

				ok_Hash.put("tAdvancedHash_row9", true);
				end_Hash.put("tAdvancedHash_row9", System.currentTimeMillis());

				/**
				 * [tAdvancedHash_row9 end ] stop
				 */

			} // end the resume

		} catch (java.lang.Exception e) {

			TalendException te = new TalendException(e, currentComponent, globalMap);

			throw te;
		} catch (java.lang.Error error) {

			runStat.stopThreadStat();

			throw error;
		} finally {

			try {

				/**
				 * [tDBInput_4 finally ] start
				 */

				currentComponent = "tDBInput_4";

				/**
				 * [tDBInput_4 finally ] stop
				 */

				/**
				 * [tAdvancedHash_row9 finally ] start
				 */

				currentComponent = "tAdvancedHash_row9";

				/**
				 * [tAdvancedHash_row9 finally ] stop
				 */

			} catch (java.lang.Exception e) {
				// ignore
			} catch (java.lang.Error error) {
				// ignore
			}
			resourceMap = null;
		}

		globalMap.put("tDBInput_4_SUBPROCESS_STATE", 1);
	}

	public static class row11Struct implements routines.system.IPersistableComparableLookupRow<row11Struct> {
		final static byte[] commonByteArrayLock_WIPO_PROJECTS_E1a_Marc_a_interm_Copy = new byte[0];
		static byte[] commonByteArray_WIPO_PROJECTS_E1a_Marc_a_interm_Copy = new byte[0];
		protected static final int DEFAULT_HASHCODE = 1;
		protected static final int PRIME = 31;
		protected int hashCode = DEFAULT_HASHCODE;
		public boolean hashCodeDirty = true;

		public String loopKey;

		public BigDecimal ROW_VERSION;

		public BigDecimal getROW_VERSION() {
			return this.ROW_VERSION;
		}

		public BigDecimal USER_ID;

		public BigDecimal getUSER_ID() {
			return this.USER_ID;
		}

		public String USER_NAME;

		public String getUSER_NAME() {
			return this.USER_NAME;
		}

		public String LOGIN;

		public String getLOGIN() {
			return this.LOGIN;
		}

		public String IND_ADMINISTRATOR;

		public String getIND_ADMINISTRATOR() {
			return this.IND_ADMINISTRATOR;
		}

		public String IND_EXAMINER;

		public String getIND_EXAMINER() {
			return this.IND_EXAMINER;
		}

		public String IND_INACTIVE;

		public String getIND_INACTIVE() {
			return this.IND_INACTIVE;
		}

		public String IND_EXTERNAL;

		public String getIND_EXTERNAL() {
			return this.IND_EXTERNAL;
		}

		public String OFFICE_DIVISION_CODE;

		public String getOFFICE_DIVISION_CODE() {
			return this.OFFICE_DIVISION_CODE;
		}

		public String OFFICE_DEPARTMENT_CODE;

		public String getOFFICE_DEPARTMENT_CODE() {
			return this.OFFICE_DEPARTMENT_CODE;
		}

		public String OFFICE_SECTION_CODE;

		public String getOFFICE_SECTION_CODE() {
			return this.OFFICE_SECTION_CODE;
		}

		public String INITIALS;

		public String getINITIALS() {
			return this.INITIALS;
		}

		public String FOOTER_DESCRIPTION;

		public String getFOOTER_DESCRIPTION() {
			return this.FOOTER_DESCRIPTION;
		}

		public BigDecimal QTY_WORK;

		public BigDecimal getQTY_WORK() {
			return this.QTY_WORK;
		}

		public String IND_TEST_USER;

		public String getIND_TEST_USER() {
			return this.IND_TEST_USER;
		}

		public String FORCE_DOC_ORI;

		public String getFORCE_DOC_ORI() {
			return this.FORCE_DOC_ORI;
		}

		public String LOGIN_PASSWORD;

		public String getLOGIN_PASSWORD() {
			return this.LOGIN_PASSWORD;
		}

		public java.util.Date LAST_LOGIN_DATE;

		public java.util.Date getLAST_LOGIN_DATE() {
			return this.LAST_LOGIN_DATE;
		}

		public String EMAIL;

		public String getEMAIL() {
			return this.EMAIL;
		}

		public String TELEPHONE;

		public String getTELEPHONE() {
			return this.TELEPHONE;
		}

		public String FULL_NAME;

		public String getFULL_NAME() {
			return this.FULL_NAME;
		}

		public String PERSONAL_ID;

		public String getPERSONAL_ID() {
			return this.PERSONAL_ID;
		}

		public java.util.Date CREATION_DATE;

		public java.util.Date getCREATION_DATE() {
			return this.CREATION_DATE;
		}

		public BigDecimal CREATION_USER_ID;

		public BigDecimal getCREATION_USER_ID() {
			return this.CREATION_USER_ID;
		}

		public java.util.Date LAST_UPDATE_DATE;

		public java.util.Date getLAST_UPDATE_DATE() {
			return this.LAST_UPDATE_DATE;
		}

		public BigDecimal LAST_UPDATE_USER_ID;

		public BigDecimal getLAST_UPDATE_USER_ID() {
			return this.LAST_UPDATE_USER_ID;
		}

		public String SIGNATURE_TYP;

		public String getSIGNATURE_TYP() {
			return this.SIGNATURE_TYP;
		}

		public Object SIGNATURE_DATA;

		public Object getSIGNATURE_DATA() {
			return this.SIGNATURE_DATA;
		}

		@Override
		public int hashCode() {
			if (this.hashCodeDirty) {
				final int prime = PRIME;
				int result = DEFAULT_HASHCODE;

				result = prime * result + ((this.LOGIN == null) ? 0 : this.LOGIN.hashCode());

				this.hashCode = result;
				this.hashCodeDirty = false;
			}
			return this.hashCode;
		}

		@Override
		public boolean equals(Object obj) {
			if (this == obj)
				return true;
			if (obj == null)
				return false;
			if (getClass() != obj.getClass())
				return false;
			final row11Struct other = (row11Struct) obj;

			if (this.LOGIN == null) {
				if (other.LOGIN != null)
					return false;

			} else if (!this.LOGIN.equals(other.LOGIN))

				return false;

			return true;
		}

		public void copyDataTo(row11Struct other) {

			other.ROW_VERSION = this.ROW_VERSION;
			other.USER_ID = this.USER_ID;
			other.USER_NAME = this.USER_NAME;
			other.LOGIN = this.LOGIN;
			other.IND_ADMINISTRATOR = this.IND_ADMINISTRATOR;
			other.IND_EXAMINER = this.IND_EXAMINER;
			other.IND_INACTIVE = this.IND_INACTIVE;
			other.IND_EXTERNAL = this.IND_EXTERNAL;
			other.OFFICE_DIVISION_CODE = this.OFFICE_DIVISION_CODE;
			other.OFFICE_DEPARTMENT_CODE = this.OFFICE_DEPARTMENT_CODE;
			other.OFFICE_SECTION_CODE = this.OFFICE_SECTION_CODE;
			other.INITIALS = this.INITIALS;
			other.FOOTER_DESCRIPTION = this.FOOTER_DESCRIPTION;
			other.QTY_WORK = this.QTY_WORK;
			other.IND_TEST_USER = this.IND_TEST_USER;
			other.FORCE_DOC_ORI = this.FORCE_DOC_ORI;
			other.LOGIN_PASSWORD = this.LOGIN_PASSWORD;
			other.LAST_LOGIN_DATE = this.LAST_LOGIN_DATE;
			other.EMAIL = this.EMAIL;
			other.TELEPHONE = this.TELEPHONE;
			other.FULL_NAME = this.FULL_NAME;
			other.PERSONAL_ID = this.PERSONAL_ID;
			other.CREATION_DATE = this.CREATION_DATE;
			other.CREATION_USER_ID = this.CREATION_USER_ID;
			other.LAST_UPDATE_DATE = this.LAST_UPDATE_DATE;
			other.LAST_UPDATE_USER_ID = this.LAST_UPDATE_USER_ID;
			other.SIGNATURE_TYP = this.SIGNATURE_TYP;
			other.SIGNATURE_DATA = this.SIGNATURE_DATA;

		}

		public void copyKeysDataTo(row11Struct other) {

			other.LOGIN = this.LOGIN;

		}

		private String readString(DataInputStream dis, ObjectInputStream ois) throws IOException {
			String strReturn = null;
			int length = 0;
			length = dis.readInt();
			if (length == -1) {
				strReturn = null;
			} else {
				byte[] byteArray = new byte[length];
				dis.read(byteArray);
				strReturn = new String(byteArray, utf8Charset);
			}
			return strReturn;
		}

		private void writeString(String str, DataOutputStream dos, ObjectOutputStream oos) throws IOException {
			if (str == null) {
				dos.writeInt(-1);
			} else {
				byte[] byteArray = str.getBytes(utf8Charset);
				dos.writeInt(byteArray.length);
				dos.write(byteArray);
			}
		}

		private String readString(ObjectInputStream dis) throws IOException {
			String strReturn = null;
			int length = 0;
			length = dis.readInt();
			if (length == -1) {
				strReturn = null;
			} else {
				if (length > commonByteArray_WIPO_PROJECTS_E1a_Marc_a_interm_Copy.length) {
					if (length < 1024 && commonByteArray_WIPO_PROJECTS_E1a_Marc_a_interm_Copy.length == 0) {
						commonByteArray_WIPO_PROJECTS_E1a_Marc_a_interm_Copy = new byte[1024];
					} else {
						commonByteArray_WIPO_PROJECTS_E1a_Marc_a_interm_Copy = new byte[2 * length];
					}
				}
				dis.readFully(commonByteArray_WIPO_PROJECTS_E1a_Marc_a_interm_Copy, 0, length);
				strReturn = new String(commonByteArray_WIPO_PROJECTS_E1a_Marc_a_interm_Copy, 0, length, utf8Charset);
			}
			return strReturn;
		}

		private void writeString(String str, ObjectOutputStream dos) throws IOException {
			if (str == null) {
				dos.writeInt(-1);
			} else {
				byte[] byteArray = str.getBytes(utf8Charset);
				dos.writeInt(byteArray.length);
				dos.write(byteArray);
			}
		}

		private java.util.Date readDate(DataInputStream dis, ObjectInputStream ois) throws IOException {
			java.util.Date dateReturn = null;
			int length = 0;
			length = dis.readByte();
			if (length == -1) {
				dateReturn = null;
			} else {
				dateReturn = new Date(dis.readLong());
			}
			return dateReturn;
		}

		private void writeDate(java.util.Date date1, DataOutputStream dos, ObjectOutputStream oos) throws IOException {
			if (date1 == null) {
				dos.writeByte(-1);
			} else {
				dos.writeByte(0);
				dos.writeLong(date1.getTime());
			}
		}

		public void readKeysData(ObjectInputStream dis) {

			synchronized (commonByteArrayLock_WIPO_PROJECTS_E1a_Marc_a_interm_Copy) {

				try {

					int length = 0;

					this.LOGIN = readString(dis);

				} catch (IOException e) {
					throw new RuntimeException(e);

				}

			}

		}

		public void writeKeysData(ObjectOutputStream dos) {
			try {

				// String

				writeString(this.LOGIN, dos);

			} catch (IOException e) {
				throw new RuntimeException(e);
			}

		}

		/**
		 * Fill Values data by reading ObjectInputStream.
		 */
		public void readValuesData(DataInputStream dis, ObjectInputStream ois) {
			try {

				int length = 0;

				this.ROW_VERSION = (BigDecimal) ois.readObject();

				this.USER_ID = (BigDecimal) ois.readObject();

				this.USER_NAME = readString(dis, ois);

				this.IND_ADMINISTRATOR = readString(dis, ois);

				this.IND_EXAMINER = readString(dis, ois);

				this.IND_INACTIVE = readString(dis, ois);

				this.IND_EXTERNAL = readString(dis, ois);

				this.OFFICE_DIVISION_CODE = readString(dis, ois);

				this.OFFICE_DEPARTMENT_CODE = readString(dis, ois);

				this.OFFICE_SECTION_CODE = readString(dis, ois);

				this.INITIALS = readString(dis, ois);

				this.FOOTER_DESCRIPTION = readString(dis, ois);

				this.QTY_WORK = (BigDecimal) ois.readObject();

				this.IND_TEST_USER = readString(dis, ois);

				this.FORCE_DOC_ORI = readString(dis, ois);

				this.LOGIN_PASSWORD = readString(dis, ois);

				this.LAST_LOGIN_DATE = readDate(dis, ois);

				this.EMAIL = readString(dis, ois);

				this.TELEPHONE = readString(dis, ois);

				this.FULL_NAME = readString(dis, ois);

				this.PERSONAL_ID = readString(dis, ois);

				this.CREATION_DATE = readDate(dis, ois);

				this.CREATION_USER_ID = (BigDecimal) ois.readObject();

				this.LAST_UPDATE_DATE = readDate(dis, ois);

				this.LAST_UPDATE_USER_ID = (BigDecimal) ois.readObject();

				this.SIGNATURE_TYP = readString(dis, ois);

				this.SIGNATURE_DATA = (Object) ois.readObject();

			} catch (IOException e) {
				throw new RuntimeException(e);

			} catch (ClassNotFoundException eCNFE) {
				throw new RuntimeException(eCNFE);

			}

		}

		/**
		 * Return a byte array which represents Values data.
		 */
		public void writeValuesData(DataOutputStream dos, ObjectOutputStream oos) {
			try {

				oos.writeObject(this.ROW_VERSION);

				oos.writeObject(this.USER_ID);

				writeString(this.USER_NAME, dos, oos);

				writeString(this.IND_ADMINISTRATOR, dos, oos);

				writeString(this.IND_EXAMINER, dos, oos);

				writeString(this.IND_INACTIVE, dos, oos);

				writeString(this.IND_EXTERNAL, dos, oos);

				writeString(this.OFFICE_DIVISION_CODE, dos, oos);

				writeString(this.OFFICE_DEPARTMENT_CODE, dos, oos);

				writeString(this.OFFICE_SECTION_CODE, dos, oos);

				writeString(this.INITIALS, dos, oos);

				writeString(this.FOOTER_DESCRIPTION, dos, oos);

				oos.writeObject(this.QTY_WORK);

				writeString(this.IND_TEST_USER, dos, oos);

				writeString(this.FORCE_DOC_ORI, dos, oos);

				writeString(this.LOGIN_PASSWORD, dos, oos);

				writeDate(this.LAST_LOGIN_DATE, dos, oos);

				writeString(this.EMAIL, dos, oos);

				writeString(this.TELEPHONE, dos, oos);

				writeString(this.FULL_NAME, dos, oos);

				writeString(this.PERSONAL_ID, dos, oos);

				writeDate(this.CREATION_DATE, dos, oos);

				oos.writeObject(this.CREATION_USER_ID);

				writeDate(this.LAST_UPDATE_DATE, dos, oos);

				oos.writeObject(this.LAST_UPDATE_USER_ID);

				writeString(this.SIGNATURE_TYP, dos, oos);

				oos.writeObject(this.SIGNATURE_DATA);

			} catch (IOException e) {
				throw new RuntimeException(e);
			}

		}

		public String toString() {

			StringBuilder sb = new StringBuilder();
			sb.append(super.toString());
			sb.append("[");
			sb.append("ROW_VERSION=" + String.valueOf(ROW_VERSION));
			sb.append(",USER_ID=" + String.valueOf(USER_ID));
			sb.append(",USER_NAME=" + USER_NAME);
			sb.append(",LOGIN=" + LOGIN);
			sb.append(",IND_ADMINISTRATOR=" + IND_ADMINISTRATOR);
			sb.append(",IND_EXAMINER=" + IND_EXAMINER);
			sb.append(",IND_INACTIVE=" + IND_INACTIVE);
			sb.append(",IND_EXTERNAL=" + IND_EXTERNAL);
			sb.append(",OFFICE_DIVISION_CODE=" + OFFICE_DIVISION_CODE);
			sb.append(",OFFICE_DEPARTMENT_CODE=" + OFFICE_DEPARTMENT_CODE);
			sb.append(",OFFICE_SECTION_CODE=" + OFFICE_SECTION_CODE);
			sb.append(",INITIALS=" + INITIALS);
			sb.append(",FOOTER_DESCRIPTION=" + FOOTER_DESCRIPTION);
			sb.append(",QTY_WORK=" + String.valueOf(QTY_WORK));
			sb.append(",IND_TEST_USER=" + IND_TEST_USER);
			sb.append(",FORCE_DOC_ORI=" + FORCE_DOC_ORI);
			sb.append(",LOGIN_PASSWORD=" + LOGIN_PASSWORD);
			sb.append(",LAST_LOGIN_DATE=" + String.valueOf(LAST_LOGIN_DATE));
			sb.append(",EMAIL=" + EMAIL);
			sb.append(",TELEPHONE=" + TELEPHONE);
			sb.append(",FULL_NAME=" + FULL_NAME);
			sb.append(",PERSONAL_ID=" + PERSONAL_ID);
			sb.append(",CREATION_DATE=" + String.valueOf(CREATION_DATE));
			sb.append(",CREATION_USER_ID=" + String.valueOf(CREATION_USER_ID));
			sb.append(",LAST_UPDATE_DATE=" + String.valueOf(LAST_UPDATE_DATE));
			sb.append(",LAST_UPDATE_USER_ID=" + String.valueOf(LAST_UPDATE_USER_ID));
			sb.append(",SIGNATURE_TYP=" + SIGNATURE_TYP);
			sb.append(",SIGNATURE_DATA=" + String.valueOf(SIGNATURE_DATA));
			sb.append("]");

			return sb.toString();
		}

		/**
		 * Compare keys
		 */
		public int compareTo(row11Struct other) {

			int returnValue = -1;

			returnValue = checkNullsAndCompare(this.LOGIN, other.LOGIN);
			if (returnValue != 0) {
				return returnValue;
			}

			return returnValue;
		}

		private int checkNullsAndCompare(Object object1, Object object2) {
			int returnValue = 0;
			if (object1 instanceof Comparable && object2 instanceof Comparable) {
				returnValue = ((Comparable) object1).compareTo(object2);
			} else if (object1 != null && object2 != null) {
				returnValue = compareStrings(object1.toString(), object2.toString());
			} else if (object1 == null && object2 != null) {
				returnValue = 1;
			} else if (object1 != null && object2 == null) {
				returnValue = -1;
			} else {
				returnValue = 0;
			}

			return returnValue;
		}

		private int compareStrings(String string1, String string2) {
			return string1.compareTo(string2);
		}

	}

	public void tDBInput_6Process(final java.util.Map<String, Object> globalMap) throws TalendException {
		globalMap.put("tDBInput_6_SUBPROCESS_STATE", 0);

		final boolean execStat = this.execStat;

		String iterateId = "";

		String currentComponent = "";
		java.util.Map<String, Object> resourceMap = new java.util.HashMap<String, Object>();

		try {
			// TDI-39566 avoid throwing an useless Exception
			boolean resumeIt = true;
			if (globalResumeTicket == false && resumeEntryMethodName != null) {
				String currentMethodName = new java.lang.Exception().getStackTrace()[0].getMethodName();
				resumeIt = resumeEntryMethodName.equals(currentMethodName);
			}
			if (resumeIt || globalResumeTicket) { // start the resume
				globalResumeTicket = true;

				row11Struct row11 = new row11Struct();

				/**
				 * [tAdvancedHash_row11 begin ] start
				 */

				ok_Hash.put("tAdvancedHash_row11", false);
				start_Hash.put("tAdvancedHash_row11", System.currentTimeMillis());

				currentComponent = "tAdvancedHash_row11";

				if (execStat) {
					runStat.updateStatOnConnection(resourceMap, iterateId, 0, 0, "row11");
				}

				int tos_count_tAdvancedHash_row11 = 0;

				// connection name:row11
				// source node:tDBInput_6 - inputs:(after_tDBInput_3) outputs:(row11,row11) |
				// target node:tAdvancedHash_row11 - inputs:(row11) outputs:()
				// linked node: tMap_3 - inputs:(row8,row9,row11) outputs:(insert_actions)

				org.talend.designer.components.lookup.common.ICommonLookup.MATCHING_MODE matchingModeEnum_row11 = org.talend.designer.components.lookup.common.ICommonLookup.MATCHING_MODE.UNIQUE_MATCH;

				org.talend.designer.components.lookup.memory.AdvancedMemoryLookup<row11Struct> tHash_Lookup_row11 = org.talend.designer.components.lookup.memory.AdvancedMemoryLookup
						.<row11Struct>getLookup(matchingModeEnum_row11);

				globalMap.put("tHash_Lookup_row11", tHash_Lookup_row11);

				/**
				 * [tAdvancedHash_row11 begin ] stop
				 */

				/**
				 * [tDBInput_6 begin ] start
				 */

				ok_Hash.put("tDBInput_6", false);
				start_Hash.put("tDBInput_6", System.currentTimeMillis());

				currentComponent = "tDBInput_6";

				int tos_count_tDBInput_6 = 0;

				org.talend.designer.components.util.mssql.MSSqlGenerateTimestampUtil mssqlGTU_tDBInput_6 = org.talend.designer.components.util.mssql.MSSqlUtilFactory
						.getMSSqlGenerateTimestampUtil();

				java.util.List<String> talendToDBList_tDBInput_6 = new java.util.ArrayList();
				String[] talendToDBArray_tDBInput_6 = new String[] { "FLOAT", "NUMERIC", "NUMERIC IDENTITY", "DECIMAL",
						"DECIMAL IDENTITY", "REAL" };
				java.util.Collections.addAll(talendToDBList_tDBInput_6, talendToDBArray_tDBInput_6);
				int nb_line_tDBInput_6 = 0;
				java.sql.Connection conn_tDBInput_6 = null;
				String driverClass_tDBInput_6 = "net.sourceforge.jtds.jdbc.Driver";
				java.lang.Class jdbcclazz_tDBInput_6 = java.lang.Class.forName(driverClass_tDBInput_6);
				String dbUser_tDBInput_6 = "ADMIN";

				final String decryptedPassword_tDBInput_6 = routines.system.PasswordEncryptUtil
						.decryptPassword("enc:routine.encryption.key.v1:00zXR1BhozEfmZ9jxWVhwiKzuT/jte47F1EyfNlCAFDW");

				String dbPwd_tDBInput_6 = decryptedPassword_tDBInput_6;

				String port_tDBInput_6 = "1433";
				String dbname_tDBInput_6 = "MARCAS_PY";
				String url_tDBInput_6 = "jdbc:jtds:sqlserver://" + "localhost";
				if (!"".equals(port_tDBInput_6)) {
					url_tDBInput_6 += ":" + "1433";
				}
				if (!"".equals(dbname_tDBInput_6)) {
					url_tDBInput_6 += "//" + "MARCAS_PY";
				}
				url_tDBInput_6 += ";appName=" + projectName + ";" + "";
				String dbschema_tDBInput_6 = "ADMIN";

				conn_tDBInput_6 = java.sql.DriverManager.getConnection(url_tDBInput_6, dbUser_tDBInput_6,
						dbPwd_tDBInput_6);

				java.sql.Statement stmt_tDBInput_6 = conn_tDBInput_6.createStatement();

				String dbquery_tDBInput_6 = "SELECT ADMIN.IP_USER.ROW_VERSION,\n		ADMIN.IP_USER.\"USER_ID\",\n		ADMIN.IP_USER.\"USER_NAME\",\n		ADMIN.IP_USER.LOGIN,\n		"
						+ "ADMIN.IP_USER.IND_ADMINISTRATOR,\n		ADMIN.IP_USER.IND_EXAMINER,\n		ADMIN.IP_USER.IND_INACTIVE,\n		ADMIN.IP_USER.IND_EXTERNA"
						+ "L,\n		ADMIN.IP_USER.OFFICE_DIVISION_CODE,\n		ADMIN.IP_USER.OFFICE_DEPARTMENT_CODE,\n		ADMIN.IP_USER.OFFICE_SECTION_CODE,\n		"
						+ "ADMIN.IP_USER.INITIALS,\n		ADMIN.IP_USER.FOOTER_DESCRIPTION,\n		ADMIN.IP_USER.QTY_WORK,\n		ADMIN.IP_USER.IND_TEST_USER,\n		A"
						+ "DMIN.IP_USER.FORCE_DOC_ORI,\n		ADMIN.IP_USER.LOGIN_PASSWORD,\n		ADMIN.IP_USER.LAST_LOGIN_DATE,\n		ADMIN.IP_USER.EMAIL,\n		AD"
						+ "MIN.IP_USER.TELEPHONE,\n		ADMIN.IP_USER.FULL_NAME,\n		ADMIN.IP_USER.PERSONAL_ID,\n		ADMIN.IP_USER.CREATION_DATE,\n		ADMIN.IP"
						+ "_USER.CREATION_USER_ID,\n		ADMIN.IP_USER.LAST_UPDATE_DATE,\n		ADMIN.IP_USER.LAST_UPDATE_USER_ID,\n		ADMIN.IP_USER.SIGNATURE"
						+ "_TYP,\n		ADMIN.IP_USER.SIGNATURE_DATA\nFROM	ADMIN.IP_USER";

				globalMap.put("tDBInput_6_QUERY", dbquery_tDBInput_6);
				java.sql.ResultSet rs_tDBInput_6 = null;

				try {
					rs_tDBInput_6 = stmt_tDBInput_6.executeQuery(dbquery_tDBInput_6);
					java.sql.ResultSetMetaData rsmd_tDBInput_6 = rs_tDBInput_6.getMetaData();
					int colQtyInRs_tDBInput_6 = rsmd_tDBInput_6.getColumnCount();

					String tmpContent_tDBInput_6 = null;

					while (rs_tDBInput_6.next()) {
						nb_line_tDBInput_6++;

						if (colQtyInRs_tDBInput_6 < 1) {
							row11.ROW_VERSION = null;
						} else {

							row11.ROW_VERSION = rs_tDBInput_6.getBigDecimal(1);
							if (rs_tDBInput_6.wasNull()) {
								throw new RuntimeException("Null value in non-Nullable column");
							}
						}
						if (colQtyInRs_tDBInput_6 < 2) {
							row11.USER_ID = null;
						} else {

							row11.USER_ID = rs_tDBInput_6.getBigDecimal(2);
							if (rs_tDBInput_6.wasNull()) {
								throw new RuntimeException("Null value in non-Nullable column");
							}
						}
						if (colQtyInRs_tDBInput_6 < 3) {
							row11.USER_NAME = null;
						} else {

							tmpContent_tDBInput_6 = rs_tDBInput_6.getString(3);
							if (tmpContent_tDBInput_6 != null) {
								if (talendToDBList_tDBInput_6.contains(
										rsmd_tDBInput_6.getColumnTypeName(3).toUpperCase(java.util.Locale.ENGLISH))) {
									row11.USER_NAME = FormatterUtils.formatUnwithE(tmpContent_tDBInput_6);
								} else {
									row11.USER_NAME = tmpContent_tDBInput_6;
								}
							} else {
								row11.USER_NAME = null;
							}
						}
						if (colQtyInRs_tDBInput_6 < 4) {
							row11.LOGIN = null;
						} else {

							tmpContent_tDBInput_6 = rs_tDBInput_6.getString(4);
							if (tmpContent_tDBInput_6 != null) {
								if (talendToDBList_tDBInput_6.contains(
										rsmd_tDBInput_6.getColumnTypeName(4).toUpperCase(java.util.Locale.ENGLISH))) {
									row11.LOGIN = FormatterUtils.formatUnwithE(tmpContent_tDBInput_6);
								} else {
									row11.LOGIN = tmpContent_tDBInput_6;
								}
							} else {
								row11.LOGIN = null;
							}
						}
						if (colQtyInRs_tDBInput_6 < 5) {
							row11.IND_ADMINISTRATOR = null;
						} else {

							tmpContent_tDBInput_6 = rs_tDBInput_6.getString(5);
							if (tmpContent_tDBInput_6 != null) {
								if (talendToDBList_tDBInput_6.contains(
										rsmd_tDBInput_6.getColumnTypeName(5).toUpperCase(java.util.Locale.ENGLISH))) {
									row11.IND_ADMINISTRATOR = FormatterUtils.formatUnwithE(tmpContent_tDBInput_6);
								} else {
									row11.IND_ADMINISTRATOR = tmpContent_tDBInput_6;
								}
							} else {
								row11.IND_ADMINISTRATOR = null;
							}
						}
						if (colQtyInRs_tDBInput_6 < 6) {
							row11.IND_EXAMINER = null;
						} else {

							tmpContent_tDBInput_6 = rs_tDBInput_6.getString(6);
							if (tmpContent_tDBInput_6 != null) {
								if (talendToDBList_tDBInput_6.contains(
										rsmd_tDBInput_6.getColumnTypeName(6).toUpperCase(java.util.Locale.ENGLISH))) {
									row11.IND_EXAMINER = FormatterUtils.formatUnwithE(tmpContent_tDBInput_6);
								} else {
									row11.IND_EXAMINER = tmpContent_tDBInput_6;
								}
							} else {
								row11.IND_EXAMINER = null;
							}
						}
						if (colQtyInRs_tDBInput_6 < 7) {
							row11.IND_INACTIVE = null;
						} else {

							tmpContent_tDBInput_6 = rs_tDBInput_6.getString(7);
							if (tmpContent_tDBInput_6 != null) {
								if (talendToDBList_tDBInput_6.contains(
										rsmd_tDBInput_6.getColumnTypeName(7).toUpperCase(java.util.Locale.ENGLISH))) {
									row11.IND_INACTIVE = FormatterUtils.formatUnwithE(tmpContent_tDBInput_6);
								} else {
									row11.IND_INACTIVE = tmpContent_tDBInput_6;
								}
							} else {
								row11.IND_INACTIVE = null;
							}
						}
						if (colQtyInRs_tDBInput_6 < 8) {
							row11.IND_EXTERNAL = null;
						} else {

							tmpContent_tDBInput_6 = rs_tDBInput_6.getString(8);
							if (tmpContent_tDBInput_6 != null) {
								if (talendToDBList_tDBInput_6.contains(
										rsmd_tDBInput_6.getColumnTypeName(8).toUpperCase(java.util.Locale.ENGLISH))) {
									row11.IND_EXTERNAL = FormatterUtils.formatUnwithE(tmpContent_tDBInput_6);
								} else {
									row11.IND_EXTERNAL = tmpContent_tDBInput_6;
								}
							} else {
								row11.IND_EXTERNAL = null;
							}
						}
						if (colQtyInRs_tDBInput_6 < 9) {
							row11.OFFICE_DIVISION_CODE = null;
						} else {

							tmpContent_tDBInput_6 = rs_tDBInput_6.getString(9);
							if (tmpContent_tDBInput_6 != null) {
								if (talendToDBList_tDBInput_6.contains(
										rsmd_tDBInput_6.getColumnTypeName(9).toUpperCase(java.util.Locale.ENGLISH))) {
									row11.OFFICE_DIVISION_CODE = FormatterUtils.formatUnwithE(tmpContent_tDBInput_6);
								} else {
									row11.OFFICE_DIVISION_CODE = tmpContent_tDBInput_6;
								}
							} else {
								row11.OFFICE_DIVISION_CODE = null;
							}
						}
						if (colQtyInRs_tDBInput_6 < 10) {
							row11.OFFICE_DEPARTMENT_CODE = null;
						} else {

							tmpContent_tDBInput_6 = rs_tDBInput_6.getString(10);
							if (tmpContent_tDBInput_6 != null) {
								if (talendToDBList_tDBInput_6.contains(
										rsmd_tDBInput_6.getColumnTypeName(10).toUpperCase(java.util.Locale.ENGLISH))) {
									row11.OFFICE_DEPARTMENT_CODE = FormatterUtils.formatUnwithE(tmpContent_tDBInput_6);
								} else {
									row11.OFFICE_DEPARTMENT_CODE = tmpContent_tDBInput_6;
								}
							} else {
								row11.OFFICE_DEPARTMENT_CODE = null;
							}
						}
						if (colQtyInRs_tDBInput_6 < 11) {
							row11.OFFICE_SECTION_CODE = null;
						} else {

							tmpContent_tDBInput_6 = rs_tDBInput_6.getString(11);
							if (tmpContent_tDBInput_6 != null) {
								if (talendToDBList_tDBInput_6.contains(
										rsmd_tDBInput_6.getColumnTypeName(11).toUpperCase(java.util.Locale.ENGLISH))) {
									row11.OFFICE_SECTION_CODE = FormatterUtils.formatUnwithE(tmpContent_tDBInput_6);
								} else {
									row11.OFFICE_SECTION_CODE = tmpContent_tDBInput_6;
								}
							} else {
								row11.OFFICE_SECTION_CODE = null;
							}
						}
						if (colQtyInRs_tDBInput_6 < 12) {
							row11.INITIALS = null;
						} else {

							tmpContent_tDBInput_6 = rs_tDBInput_6.getString(12);
							if (tmpContent_tDBInput_6 != null) {
								if (talendToDBList_tDBInput_6.contains(
										rsmd_tDBInput_6.getColumnTypeName(12).toUpperCase(java.util.Locale.ENGLISH))) {
									row11.INITIALS = FormatterUtils.formatUnwithE(tmpContent_tDBInput_6);
								} else {
									row11.INITIALS = tmpContent_tDBInput_6;
								}
							} else {
								row11.INITIALS = null;
							}
						}
						if (colQtyInRs_tDBInput_6 < 13) {
							row11.FOOTER_DESCRIPTION = null;
						} else {

							tmpContent_tDBInput_6 = rs_tDBInput_6.getString(13);
							if (tmpContent_tDBInput_6 != null) {
								if (talendToDBList_tDBInput_6.contains(
										rsmd_tDBInput_6.getColumnTypeName(13).toUpperCase(java.util.Locale.ENGLISH))) {
									row11.FOOTER_DESCRIPTION = FormatterUtils.formatUnwithE(tmpContent_tDBInput_6);
								} else {
									row11.FOOTER_DESCRIPTION = tmpContent_tDBInput_6;
								}
							} else {
								row11.FOOTER_DESCRIPTION = null;
							}
						}
						if (colQtyInRs_tDBInput_6 < 14) {
							row11.QTY_WORK = null;
						} else {

							row11.QTY_WORK = rs_tDBInput_6.getBigDecimal(14);
							if (rs_tDBInput_6.wasNull()) {
								row11.QTY_WORK = null;
							}
						}
						if (colQtyInRs_tDBInput_6 < 15) {
							row11.IND_TEST_USER = null;
						} else {

							tmpContent_tDBInput_6 = rs_tDBInput_6.getString(15);
							if (tmpContent_tDBInput_6 != null) {
								if (talendToDBList_tDBInput_6.contains(
										rsmd_tDBInput_6.getColumnTypeName(15).toUpperCase(java.util.Locale.ENGLISH))) {
									row11.IND_TEST_USER = FormatterUtils.formatUnwithE(tmpContent_tDBInput_6);
								} else {
									row11.IND_TEST_USER = tmpContent_tDBInput_6;
								}
							} else {
								row11.IND_TEST_USER = null;
							}
						}
						if (colQtyInRs_tDBInput_6 < 16) {
							row11.FORCE_DOC_ORI = null;
						} else {

							tmpContent_tDBInput_6 = rs_tDBInput_6.getString(16);
							if (tmpContent_tDBInput_6 != null) {
								if (talendToDBList_tDBInput_6.contains(
										rsmd_tDBInput_6.getColumnTypeName(16).toUpperCase(java.util.Locale.ENGLISH))) {
									row11.FORCE_DOC_ORI = FormatterUtils.formatUnwithE(tmpContent_tDBInput_6);
								} else {
									row11.FORCE_DOC_ORI = tmpContent_tDBInput_6;
								}
							} else {
								row11.FORCE_DOC_ORI = null;
							}
						}
						if (colQtyInRs_tDBInput_6 < 17) {
							row11.LOGIN_PASSWORD = null;
						} else {

							tmpContent_tDBInput_6 = rs_tDBInput_6.getString(17);
							if (tmpContent_tDBInput_6 != null) {
								if (talendToDBList_tDBInput_6.contains(
										rsmd_tDBInput_6.getColumnTypeName(17).toUpperCase(java.util.Locale.ENGLISH))) {
									row11.LOGIN_PASSWORD = FormatterUtils.formatUnwithE(tmpContent_tDBInput_6);
								} else {
									row11.LOGIN_PASSWORD = tmpContent_tDBInput_6;
								}
							} else {
								row11.LOGIN_PASSWORD = null;
							}
						}
						if (colQtyInRs_tDBInput_6 < 18) {
							row11.LAST_LOGIN_DATE = null;
						} else {

							row11.LAST_LOGIN_DATE = mssqlGTU_tDBInput_6.getDate(rsmd_tDBInput_6, rs_tDBInput_6, 18);

						}
						if (colQtyInRs_tDBInput_6 < 19) {
							row11.EMAIL = null;
						} else {

							tmpContent_tDBInput_6 = rs_tDBInput_6.getString(19);
							if (tmpContent_tDBInput_6 != null) {
								if (talendToDBList_tDBInput_6.contains(
										rsmd_tDBInput_6.getColumnTypeName(19).toUpperCase(java.util.Locale.ENGLISH))) {
									row11.EMAIL = FormatterUtils.formatUnwithE(tmpContent_tDBInput_6);
								} else {
									row11.EMAIL = tmpContent_tDBInput_6;
								}
							} else {
								row11.EMAIL = null;
							}
						}
						if (colQtyInRs_tDBInput_6 < 20) {
							row11.TELEPHONE = null;
						} else {

							tmpContent_tDBInput_6 = rs_tDBInput_6.getString(20);
							if (tmpContent_tDBInput_6 != null) {
								if (talendToDBList_tDBInput_6.contains(
										rsmd_tDBInput_6.getColumnTypeName(20).toUpperCase(java.util.Locale.ENGLISH))) {
									row11.TELEPHONE = FormatterUtils.formatUnwithE(tmpContent_tDBInput_6);
								} else {
									row11.TELEPHONE = tmpContent_tDBInput_6;
								}
							} else {
								row11.TELEPHONE = null;
							}
						}
						if (colQtyInRs_tDBInput_6 < 21) {
							row11.FULL_NAME = null;
						} else {

							tmpContent_tDBInput_6 = rs_tDBInput_6.getString(21);
							if (tmpContent_tDBInput_6 != null) {
								if (talendToDBList_tDBInput_6.contains(
										rsmd_tDBInput_6.getColumnTypeName(21).toUpperCase(java.util.Locale.ENGLISH))) {
									row11.FULL_NAME = FormatterUtils.formatUnwithE(tmpContent_tDBInput_6);
								} else {
									row11.FULL_NAME = tmpContent_tDBInput_6;
								}
							} else {
								row11.FULL_NAME = null;
							}
						}
						if (colQtyInRs_tDBInput_6 < 22) {
							row11.PERSONAL_ID = null;
						} else {

							tmpContent_tDBInput_6 = rs_tDBInput_6.getString(22);
							if (tmpContent_tDBInput_6 != null) {
								if (talendToDBList_tDBInput_6.contains(
										rsmd_tDBInput_6.getColumnTypeName(22).toUpperCase(java.util.Locale.ENGLISH))) {
									row11.PERSONAL_ID = FormatterUtils.formatUnwithE(tmpContent_tDBInput_6);
								} else {
									row11.PERSONAL_ID = tmpContent_tDBInput_6;
								}
							} else {
								row11.PERSONAL_ID = null;
							}
						}
						if (colQtyInRs_tDBInput_6 < 23) {
							row11.CREATION_DATE = null;
						} else {

							row11.CREATION_DATE = mssqlGTU_tDBInput_6.getDate(rsmd_tDBInput_6, rs_tDBInput_6, 23);

						}
						if (colQtyInRs_tDBInput_6 < 24) {
							row11.CREATION_USER_ID = null;
						} else {

							row11.CREATION_USER_ID = rs_tDBInput_6.getBigDecimal(24);
							if (rs_tDBInput_6.wasNull()) {
								row11.CREATION_USER_ID = null;
							}
						}
						if (colQtyInRs_tDBInput_6 < 25) {
							row11.LAST_UPDATE_DATE = null;
						} else {

							row11.LAST_UPDATE_DATE = mssqlGTU_tDBInput_6.getDate(rsmd_tDBInput_6, rs_tDBInput_6, 25);

						}
						if (colQtyInRs_tDBInput_6 < 26) {
							row11.LAST_UPDATE_USER_ID = null;
						} else {

							row11.LAST_UPDATE_USER_ID = rs_tDBInput_6.getBigDecimal(26);
							if (rs_tDBInput_6.wasNull()) {
								row11.LAST_UPDATE_USER_ID = null;
							}
						}
						if (colQtyInRs_tDBInput_6 < 27) {
							row11.SIGNATURE_TYP = null;
						} else {

							tmpContent_tDBInput_6 = rs_tDBInput_6.getString(27);
							if (tmpContent_tDBInput_6 != null) {
								if (talendToDBList_tDBInput_6.contains(
										rsmd_tDBInput_6.getColumnTypeName(27).toUpperCase(java.util.Locale.ENGLISH))) {
									row11.SIGNATURE_TYP = FormatterUtils.formatUnwithE(tmpContent_tDBInput_6);
								} else {
									row11.SIGNATURE_TYP = tmpContent_tDBInput_6;
								}
							} else {
								row11.SIGNATURE_TYP = null;
							}
						}
						if (colQtyInRs_tDBInput_6 < 28) {
							row11.SIGNATURE_DATA = null;
						} else {

							row11.SIGNATURE_DATA = rs_tDBInput_6.getObject(28);
							if (rs_tDBInput_6.wasNull()) {
								row11.SIGNATURE_DATA = null;
							}
						}

						/**
						 * [tDBInput_6 begin ] stop
						 */

						/**
						 * [tDBInput_6 main ] start
						 */

						currentComponent = "tDBInput_6";

						tos_count_tDBInput_6++;

						/**
						 * [tDBInput_6 main ] stop
						 */

						/**
						 * [tDBInput_6 process_data_begin ] start
						 */

						currentComponent = "tDBInput_6";

						/**
						 * [tDBInput_6 process_data_begin ] stop
						 */

						/**
						 * [tAdvancedHash_row11 main ] start
						 */

						currentComponent = "tAdvancedHash_row11";

						if (execStat) {
							runStat.updateStatOnConnection(iterateId, 1, 1

									, "row11"

							);
						}

						row11Struct row11_HashRow = new row11Struct();

						row11_HashRow.ROW_VERSION = row11.ROW_VERSION;

						row11_HashRow.USER_ID = row11.USER_ID;

						row11_HashRow.USER_NAME = row11.USER_NAME;

						row11_HashRow.LOGIN = row11.LOGIN;

						row11_HashRow.IND_ADMINISTRATOR = row11.IND_ADMINISTRATOR;

						row11_HashRow.IND_EXAMINER = row11.IND_EXAMINER;

						row11_HashRow.IND_INACTIVE = row11.IND_INACTIVE;

						row11_HashRow.IND_EXTERNAL = row11.IND_EXTERNAL;

						row11_HashRow.OFFICE_DIVISION_CODE = row11.OFFICE_DIVISION_CODE;

						row11_HashRow.OFFICE_DEPARTMENT_CODE = row11.OFFICE_DEPARTMENT_CODE;

						row11_HashRow.OFFICE_SECTION_CODE = row11.OFFICE_SECTION_CODE;

						row11_HashRow.INITIALS = row11.INITIALS;

						row11_HashRow.FOOTER_DESCRIPTION = row11.FOOTER_DESCRIPTION;

						row11_HashRow.QTY_WORK = row11.QTY_WORK;

						row11_HashRow.IND_TEST_USER = row11.IND_TEST_USER;

						row11_HashRow.FORCE_DOC_ORI = row11.FORCE_DOC_ORI;

						row11_HashRow.LOGIN_PASSWORD = row11.LOGIN_PASSWORD;

						row11_HashRow.LAST_LOGIN_DATE = row11.LAST_LOGIN_DATE;

						row11_HashRow.EMAIL = row11.EMAIL;

						row11_HashRow.TELEPHONE = row11.TELEPHONE;

						row11_HashRow.FULL_NAME = row11.FULL_NAME;

						row11_HashRow.PERSONAL_ID = row11.PERSONAL_ID;

						row11_HashRow.CREATION_DATE = row11.CREATION_DATE;

						row11_HashRow.CREATION_USER_ID = row11.CREATION_USER_ID;

						row11_HashRow.LAST_UPDATE_DATE = row11.LAST_UPDATE_DATE;

						row11_HashRow.LAST_UPDATE_USER_ID = row11.LAST_UPDATE_USER_ID;

						row11_HashRow.SIGNATURE_TYP = row11.SIGNATURE_TYP;

						row11_HashRow.SIGNATURE_DATA = row11.SIGNATURE_DATA;

						tHash_Lookup_row11.put(row11_HashRow);

						tos_count_tAdvancedHash_row11++;

						/**
						 * [tAdvancedHash_row11 main ] stop
						 */

						/**
						 * [tAdvancedHash_row11 process_data_begin ] start
						 */

						currentComponent = "tAdvancedHash_row11";

						/**
						 * [tAdvancedHash_row11 process_data_begin ] stop
						 */

						/**
						 * [tAdvancedHash_row11 process_data_end ] start
						 */

						currentComponent = "tAdvancedHash_row11";

						/**
						 * [tAdvancedHash_row11 process_data_end ] stop
						 */

						/**
						 * [tDBInput_6 process_data_end ] start
						 */

						currentComponent = "tDBInput_6";

						/**
						 * [tDBInput_6 process_data_end ] stop
						 */

						/**
						 * [tDBInput_6 end ] start
						 */

						currentComponent = "tDBInput_6";

					}
				} finally {
					if (rs_tDBInput_6 != null) {
						rs_tDBInput_6.close();
					}
					if (stmt_tDBInput_6 != null) {
						stmt_tDBInput_6.close();
					}
					if (conn_tDBInput_6 != null && !conn_tDBInput_6.isClosed()) {

						conn_tDBInput_6.close();

						if ("com.mysql.cj.jdbc.Driver".equals((String) globalMap.get("driverClass_"))
								&& routines.system.BundleUtils.inOSGi()) {
							Class.forName("com.mysql.cj.jdbc.AbandonedConnectionCleanupThread")
									.getMethod("checkedShutdown").invoke(null, (Object[]) null);
						}

					}
				}
				globalMap.put("tDBInput_6_NB_LINE", nb_line_tDBInput_6);

				ok_Hash.put("tDBInput_6", true);
				end_Hash.put("tDBInput_6", System.currentTimeMillis());

				/**
				 * [tDBInput_6 end ] stop
				 */

				/**
				 * [tAdvancedHash_row11 end ] start
				 */

				currentComponent = "tAdvancedHash_row11";

				tHash_Lookup_row11.endPut();

				if (execStat) {
					runStat.updateStat(resourceMap, iterateId, 2, 0, "row11");
				}

				ok_Hash.put("tAdvancedHash_row11", true);
				end_Hash.put("tAdvancedHash_row11", System.currentTimeMillis());

				/**
				 * [tAdvancedHash_row11 end ] stop
				 */

			} // end the resume

		} catch (java.lang.Exception e) {

			TalendException te = new TalendException(e, currentComponent, globalMap);

			throw te;
		} catch (java.lang.Error error) {

			runStat.stopThreadStat();

			throw error;
		} finally {

			try {

				/**
				 * [tDBInput_6 finally ] start
				 */

				currentComponent = "tDBInput_6";

				/**
				 * [tDBInput_6 finally ] stop
				 */

				/**
				 * [tAdvancedHash_row11 finally ] start
				 */

				currentComponent = "tAdvancedHash_row11";

				/**
				 * [tAdvancedHash_row11 finally ] stop
				 */

			} catch (java.lang.Exception e) {
				// ignore
			} catch (java.lang.Error error) {
				// ignore
			}
			resourceMap = null;
		}

		globalMap.put("tDBInput_6_SUBPROCESS_STATE", 1);
	}

	public static class row44Struct implements routines.system.IPersistableComparableLookupRow<row44Struct> {
		final static byte[] commonByteArrayLock_WIPO_PROJECTS_E1a_Marc_a_interm_Copy = new byte[0];
		static byte[] commonByteArray_WIPO_PROJECTS_E1a_Marc_a_interm_Copy = new byte[0];
		protected static final int DEFAULT_HASHCODE = 1;
		protected static final int PRIME = 31;
		protected int hashCode = DEFAULT_HASHCODE;
		public boolean hashCodeDirty = true;

		public String loopKey;

		public String FILE_SEQ;

		public String getFILE_SEQ() {
			return this.FILE_SEQ;
		}

		public String FILE_TYPE;

		public String getFILE_TYPE() {
			return this.FILE_TYPE;
		}

		public BigDecimal FILE_SERIES;

		public BigDecimal getFILE_SERIES() {
			return this.FILE_SERIES;
		}

		public BigDecimal FILE_NBR;

		public BigDecimal getFILE_NBR() {
			return this.FILE_NBR;
		}

		public String DOC_ORI;

		public String getDOC_ORI() {
			return this.DOC_ORI;
		}

		public BigDecimal DOC_SERIES;

		public BigDecimal getDOC_SERIES() {
			return this.DOC_SERIES;
		}

		public BigDecimal DOC_NBR;

		public BigDecimal getDOC_NBR() {
			return this.DOC_NBR;
		}

		public BigDecimal IND_IMPORT;

		public BigDecimal getIND_IMPORT() {
			return this.IND_IMPORT;
		}

		public String APPLICATION_TYPE;

		public String getAPPLICATION_TYPE() {
			return this.APPLICATION_TYPE;
		}

		public String APPLICATION_SUBTYPE;

		public String getAPPLICATION_SUBTYPE() {
			return this.APPLICATION_SUBTYPE;
		}

		public BigDecimal LAW_CODE;

		public BigDecimal getLAW_CODE() {
			return this.LAW_CODE;
		}

		public java.util.Date FILING_DATE;

		public java.util.Date getFILING_DATE() {
			return this.FILING_DATE;
		}

		public java.util.Date RECEPTION_DATE;

		public java.util.Date getRECEPTION_DATE() {
			return this.RECEPTION_DATE;
		}

		public java.util.Date PUBLICATION_DATE;

		public java.util.Date getPUBLICATION_DATE() {
			return this.PUBLICATION_DATE;
		}

		public String PUBLICATION_NOTES;

		public String getPUBLICATION_NOTES() {
			return this.PUBLICATION_NOTES;
		}

		public BigDecimal IND_REGISTERED;

		public BigDecimal getIND_REGISTERED() {
			return this.IND_REGISTERED;
		}

		public String REGISTRATION_TYPE;

		public String getREGISTRATION_TYPE() {
			return this.REGISTRATION_TYPE;
		}

		public BigDecimal REGISTRATION_SERIES;

		public BigDecimal getREGISTRATION_SERIES() {
			return this.REGISTRATION_SERIES;
		}

		public BigDecimal REGISTRATION_NBR;

		public BigDecimal getREGISTRATION_NBR() {
			return this.REGISTRATION_NBR;
		}

		public String REGISTRATION_DUP;

		public String getREGISTRATION_DUP() {
			return this.REGISTRATION_DUP;
		}

		public java.util.Date REGISTRATION_DATE;

		public java.util.Date getREGISTRATION_DATE() {
			return this.REGISTRATION_DATE;
		}

		public java.util.Date ENTITLEMENT_DATE;

		public java.util.Date getENTITLEMENT_DATE() {
			return this.ENTITLEMENT_DATE;
		}

		public java.util.Date EXPIRATION_DATE;

		public java.util.Date getEXPIRATION_DATE() {
			return this.EXPIRATION_DATE;
		}

		public java.util.Date EXHIBITION_DATE;

		public java.util.Date getEXHIBITION_DATE() {
			return this.EXHIBITION_DATE;
		}

		public String EXHIBITION_NOTES;

		public String getEXHIBITION_NOTES() {
			return this.EXHIBITION_NOTES;
		}

		public String SIGN_TYPE;

		public String getSIGN_TYPE() {
			return this.SIGN_TYPE;
		}

		public String MARK_NAME;

		public String getMARK_NAME() {
			return this.MARK_NAME;
		}

		public String MARK_NAME_LANG2;

		public String getMARK_NAME_LANG2() {
			return this.MARK_NAME_LANG2;
		}

		public String MARK_TRANSLATION;

		public String getMARK_TRANSLATION() {
			return this.MARK_TRANSLATION;
		}

		public String MARK_TRANSLATION_LANG2;

		public String getMARK_TRANSLATION_LANG2() {
			return this.MARK_TRANSLATION_LANG2;
		}

		public String MARK_TRANSLITERATION;

		public String getMARK_TRANSLITERATION() {
			return this.MARK_TRANSLITERATION;
		}

		public String MARK_TRANSLITERATION_LANG2;

		public String getMARK_TRANSLITERATION_LANG2() {
			return this.MARK_TRANSLITERATION_LANG2;
		}

		public String SERIES_DESCRIPTION;

		public String getSERIES_DESCRIPTION() {
			return this.SERIES_DESCRIPTION;
		}

		public String COLOUR_DESCRIPTION;

		public String getCOLOUR_DESCRIPTION() {
			return this.COLOUR_DESCRIPTION;
		}

		public String COLOUR_DESCR_LANG2;

		public String getCOLOUR_DESCR_LANG2() {
			return this.COLOUR_DESCR_LANG2;
		}

		public String DISCLAIMER;

		public String getDISCLAIMER() {
			return this.DISCLAIMER;
		}

		public String DISCLAIMER_LANG2;

		public String getDISCLAIMER_LANG2() {
			return this.DISCLAIMER_LANG2;
		}

		public String BY_CONSENT;

		public String getBY_CONSENT() {
			return this.BY_CONSENT;
		}

		public String REGULATIONS;

		public String getREGULATIONS() {
			return this.REGULATIONS;
		}

		public String NOTES;

		public String getNOTES() {
			return this.NOTES;
		}

		public BigDecimal CAPTURE_USER_ID;

		public BigDecimal getCAPTURE_USER_ID() {
			return this.CAPTURE_USER_ID;
		}

		public java.util.Date CAPTURE_DATE;

		public java.util.Date getCAPTURE_DATE() {
			return this.CAPTURE_DATE;
		}

		public BigDecimal PUBLICATION_NBR;

		public BigDecimal getPUBLICATION_NBR() {
			return this.PUBLICATION_NBR;
		}

		public String PUBLICATION_SER;

		public String getPUBLICATION_SER() {
			return this.PUBLICATION_SER;
		}

		public String PUBLICATION_TYP;

		public String getPUBLICATION_TYP() {
			return this.PUBLICATION_TYP;
		}

		@Override
		public int hashCode() {
			if (this.hashCodeDirty) {
				final int prime = PRIME;
				int result = DEFAULT_HASHCODE;

				result = prime * result
						+ ((this.FILE_NBR == null) ? 0 : new Double(this.FILE_NBR.doubleValue()).hashCode());

				this.hashCode = result;
				this.hashCodeDirty = false;
			}
			return this.hashCode;
		}

		@Override
		public boolean equals(Object obj) {
			if (this == obj)
				return true;
			if (obj == null)
				return false;
			if (getClass() != obj.getClass())
				return false;
			final row44Struct other = (row44Struct) obj;

			if (this.FILE_NBR == null) {
				if (other.FILE_NBR != null)
					return false;

			} else if ((other.FILE_NBR == null) || (this.FILE_NBR.compareTo(other.FILE_NBR) != 0))

				return false;

			return true;
		}

		public void copyDataTo(row44Struct other) {

			other.FILE_SEQ = this.FILE_SEQ;
			other.FILE_TYPE = this.FILE_TYPE;
			other.FILE_SERIES = this.FILE_SERIES;
			other.FILE_NBR = this.FILE_NBR;
			other.DOC_ORI = this.DOC_ORI;
			other.DOC_SERIES = this.DOC_SERIES;
			other.DOC_NBR = this.DOC_NBR;
			other.IND_IMPORT = this.IND_IMPORT;
			other.APPLICATION_TYPE = this.APPLICATION_TYPE;
			other.APPLICATION_SUBTYPE = this.APPLICATION_SUBTYPE;
			other.LAW_CODE = this.LAW_CODE;
			other.FILING_DATE = this.FILING_DATE;
			other.RECEPTION_DATE = this.RECEPTION_DATE;
			other.PUBLICATION_DATE = this.PUBLICATION_DATE;
			other.PUBLICATION_NOTES = this.PUBLICATION_NOTES;
			other.IND_REGISTERED = this.IND_REGISTERED;
			other.REGISTRATION_TYPE = this.REGISTRATION_TYPE;
			other.REGISTRATION_SERIES = this.REGISTRATION_SERIES;
			other.REGISTRATION_NBR = this.REGISTRATION_NBR;
			other.REGISTRATION_DUP = this.REGISTRATION_DUP;
			other.REGISTRATION_DATE = this.REGISTRATION_DATE;
			other.ENTITLEMENT_DATE = this.ENTITLEMENT_DATE;
			other.EXPIRATION_DATE = this.EXPIRATION_DATE;
			other.EXHIBITION_DATE = this.EXHIBITION_DATE;
			other.EXHIBITION_NOTES = this.EXHIBITION_NOTES;
			other.SIGN_TYPE = this.SIGN_TYPE;
			other.MARK_NAME = this.MARK_NAME;
			other.MARK_NAME_LANG2 = this.MARK_NAME_LANG2;
			other.MARK_TRANSLATION = this.MARK_TRANSLATION;
			other.MARK_TRANSLATION_LANG2 = this.MARK_TRANSLATION_LANG2;
			other.MARK_TRANSLITERATION = this.MARK_TRANSLITERATION;
			other.MARK_TRANSLITERATION_LANG2 = this.MARK_TRANSLITERATION_LANG2;
			other.SERIES_DESCRIPTION = this.SERIES_DESCRIPTION;
			other.COLOUR_DESCRIPTION = this.COLOUR_DESCRIPTION;
			other.COLOUR_DESCR_LANG2 = this.COLOUR_DESCR_LANG2;
			other.DISCLAIMER = this.DISCLAIMER;
			other.DISCLAIMER_LANG2 = this.DISCLAIMER_LANG2;
			other.BY_CONSENT = this.BY_CONSENT;
			other.REGULATIONS = this.REGULATIONS;
			other.NOTES = this.NOTES;
			other.CAPTURE_USER_ID = this.CAPTURE_USER_ID;
			other.CAPTURE_DATE = this.CAPTURE_DATE;
			other.PUBLICATION_NBR = this.PUBLICATION_NBR;
			other.PUBLICATION_SER = this.PUBLICATION_SER;
			other.PUBLICATION_TYP = this.PUBLICATION_TYP;

		}

		public void copyKeysDataTo(row44Struct other) {

			other.FILE_NBR = this.FILE_NBR;

		}

		private String readString(DataInputStream dis, ObjectInputStream ois) throws IOException {
			String strReturn = null;
			int length = 0;
			length = dis.readInt();
			if (length == -1) {
				strReturn = null;
			} else {
				byte[] byteArray = new byte[length];
				dis.read(byteArray);
				strReturn = new String(byteArray, utf8Charset);
			}
			return strReturn;
		}

		private void writeString(String str, DataOutputStream dos, ObjectOutputStream oos) throws IOException {
			if (str == null) {
				dos.writeInt(-1);
			} else {
				byte[] byteArray = str.getBytes(utf8Charset);
				dos.writeInt(byteArray.length);
				dos.write(byteArray);
			}
		}

		private java.util.Date readDate(DataInputStream dis, ObjectInputStream ois) throws IOException {
			java.util.Date dateReturn = null;
			int length = 0;
			length = dis.readByte();
			if (length == -1) {
				dateReturn = null;
			} else {
				dateReturn = new Date(dis.readLong());
			}
			return dateReturn;
		}

		private void writeDate(java.util.Date date1, DataOutputStream dos, ObjectOutputStream oos) throws IOException {
			if (date1 == null) {
				dos.writeByte(-1);
			} else {
				dos.writeByte(0);
				dos.writeLong(date1.getTime());
			}
		}

		public void readKeysData(ObjectInputStream dis) {

			synchronized (commonByteArrayLock_WIPO_PROJECTS_E1a_Marc_a_interm_Copy) {

				try {

					int length = 0;

					this.FILE_NBR = (BigDecimal) dis.readObject();

				} catch (IOException e) {
					throw new RuntimeException(e);

				} catch (ClassNotFoundException eCNFE) {
					throw new RuntimeException(eCNFE);

				}

			}

		}

		public void writeKeysData(ObjectOutputStream dos) {
			try {

				// BigDecimal

				dos.writeObject(this.FILE_NBR);

			} catch (IOException e) {
				throw new RuntimeException(e);
			}

		}

		/**
		 * Fill Values data by reading ObjectInputStream.
		 */
		public void readValuesData(DataInputStream dis, ObjectInputStream ois) {
			try {

				int length = 0;

				this.FILE_SEQ = readString(dis, ois);

				this.FILE_TYPE = readString(dis, ois);

				this.FILE_SERIES = (BigDecimal) ois.readObject();

				this.DOC_ORI = readString(dis, ois);

				this.DOC_SERIES = (BigDecimal) ois.readObject();

				this.DOC_NBR = (BigDecimal) ois.readObject();

				this.IND_IMPORT = (BigDecimal) ois.readObject();

				this.APPLICATION_TYPE = readString(dis, ois);

				this.APPLICATION_SUBTYPE = readString(dis, ois);

				this.LAW_CODE = (BigDecimal) ois.readObject();

				this.FILING_DATE = readDate(dis, ois);

				this.RECEPTION_DATE = readDate(dis, ois);

				this.PUBLICATION_DATE = readDate(dis, ois);

				this.PUBLICATION_NOTES = readString(dis, ois);

				this.IND_REGISTERED = (BigDecimal) ois.readObject();

				this.REGISTRATION_TYPE = readString(dis, ois);

				this.REGISTRATION_SERIES = (BigDecimal) ois.readObject();

				this.REGISTRATION_NBR = (BigDecimal) ois.readObject();

				this.REGISTRATION_DUP = readString(dis, ois);

				this.REGISTRATION_DATE = readDate(dis, ois);

				this.ENTITLEMENT_DATE = readDate(dis, ois);

				this.EXPIRATION_DATE = readDate(dis, ois);

				this.EXHIBITION_DATE = readDate(dis, ois);

				this.EXHIBITION_NOTES = readString(dis, ois);

				this.SIGN_TYPE = readString(dis, ois);

				this.MARK_NAME = readString(dis, ois);

				this.MARK_NAME_LANG2 = readString(dis, ois);

				this.MARK_TRANSLATION = readString(dis, ois);

				this.MARK_TRANSLATION_LANG2 = readString(dis, ois);

				this.MARK_TRANSLITERATION = readString(dis, ois);

				this.MARK_TRANSLITERATION_LANG2 = readString(dis, ois);

				this.SERIES_DESCRIPTION = readString(dis, ois);

				this.COLOUR_DESCRIPTION = readString(dis, ois);

				this.COLOUR_DESCR_LANG2 = readString(dis, ois);

				this.DISCLAIMER = readString(dis, ois);

				this.DISCLAIMER_LANG2 = readString(dis, ois);

				this.BY_CONSENT = readString(dis, ois);

				this.REGULATIONS = readString(dis, ois);

				this.NOTES = readString(dis, ois);

				this.CAPTURE_USER_ID = (BigDecimal) ois.readObject();

				this.CAPTURE_DATE = readDate(dis, ois);

				this.PUBLICATION_NBR = (BigDecimal) ois.readObject();

				this.PUBLICATION_SER = readString(dis, ois);

				this.PUBLICATION_TYP = readString(dis, ois);

			} catch (IOException e) {
				throw new RuntimeException(e);

			} catch (ClassNotFoundException eCNFE) {
				throw new RuntimeException(eCNFE);

			}

		}

		/**
		 * Return a byte array which represents Values data.
		 */
		public void writeValuesData(DataOutputStream dos, ObjectOutputStream oos) {
			try {

				writeString(this.FILE_SEQ, dos, oos);

				writeString(this.FILE_TYPE, dos, oos);

				oos.writeObject(this.FILE_SERIES);

				writeString(this.DOC_ORI, dos, oos);

				oos.writeObject(this.DOC_SERIES);

				oos.writeObject(this.DOC_NBR);

				oos.writeObject(this.IND_IMPORT);

				writeString(this.APPLICATION_TYPE, dos, oos);

				writeString(this.APPLICATION_SUBTYPE, dos, oos);

				oos.writeObject(this.LAW_CODE);

				writeDate(this.FILING_DATE, dos, oos);

				writeDate(this.RECEPTION_DATE, dos, oos);

				writeDate(this.PUBLICATION_DATE, dos, oos);

				writeString(this.PUBLICATION_NOTES, dos, oos);

				oos.writeObject(this.IND_REGISTERED);

				writeString(this.REGISTRATION_TYPE, dos, oos);

				oos.writeObject(this.REGISTRATION_SERIES);

				oos.writeObject(this.REGISTRATION_NBR);

				writeString(this.REGISTRATION_DUP, dos, oos);

				writeDate(this.REGISTRATION_DATE, dos, oos);

				writeDate(this.ENTITLEMENT_DATE, dos, oos);

				writeDate(this.EXPIRATION_DATE, dos, oos);

				writeDate(this.EXHIBITION_DATE, dos, oos);

				writeString(this.EXHIBITION_NOTES, dos, oos);

				writeString(this.SIGN_TYPE, dos, oos);

				writeString(this.MARK_NAME, dos, oos);

				writeString(this.MARK_NAME_LANG2, dos, oos);

				writeString(this.MARK_TRANSLATION, dos, oos);

				writeString(this.MARK_TRANSLATION_LANG2, dos, oos);

				writeString(this.MARK_TRANSLITERATION, dos, oos);

				writeString(this.MARK_TRANSLITERATION_LANG2, dos, oos);

				writeString(this.SERIES_DESCRIPTION, dos, oos);

				writeString(this.COLOUR_DESCRIPTION, dos, oos);

				writeString(this.COLOUR_DESCR_LANG2, dos, oos);

				writeString(this.DISCLAIMER, dos, oos);

				writeString(this.DISCLAIMER_LANG2, dos, oos);

				writeString(this.BY_CONSENT, dos, oos);

				writeString(this.REGULATIONS, dos, oos);

				writeString(this.NOTES, dos, oos);

				oos.writeObject(this.CAPTURE_USER_ID);

				writeDate(this.CAPTURE_DATE, dos, oos);

				oos.writeObject(this.PUBLICATION_NBR);

				writeString(this.PUBLICATION_SER, dos, oos);

				writeString(this.PUBLICATION_TYP, dos, oos);

			} catch (IOException e) {
				throw new RuntimeException(e);
			}

		}

		public String toString() {

			StringBuilder sb = new StringBuilder();
			sb.append(super.toString());
			sb.append("[");
			sb.append("FILE_SEQ=" + FILE_SEQ);
			sb.append(",FILE_TYPE=" + FILE_TYPE);
			sb.append(",FILE_SERIES=" + String.valueOf(FILE_SERIES));
			sb.append(",FILE_NBR=" + String.valueOf(FILE_NBR));
			sb.append(",DOC_ORI=" + DOC_ORI);
			sb.append(",DOC_SERIES=" + String.valueOf(DOC_SERIES));
			sb.append(",DOC_NBR=" + String.valueOf(DOC_NBR));
			sb.append(",IND_IMPORT=" + String.valueOf(IND_IMPORT));
			sb.append(",APPLICATION_TYPE=" + APPLICATION_TYPE);
			sb.append(",APPLICATION_SUBTYPE=" + APPLICATION_SUBTYPE);
			sb.append(",LAW_CODE=" + String.valueOf(LAW_CODE));
			sb.append(",FILING_DATE=" + String.valueOf(FILING_DATE));
			sb.append(",RECEPTION_DATE=" + String.valueOf(RECEPTION_DATE));
			sb.append(",PUBLICATION_DATE=" + String.valueOf(PUBLICATION_DATE));
			sb.append(",PUBLICATION_NOTES=" + PUBLICATION_NOTES);
			sb.append(",IND_REGISTERED=" + String.valueOf(IND_REGISTERED));
			sb.append(",REGISTRATION_TYPE=" + REGISTRATION_TYPE);
			sb.append(",REGISTRATION_SERIES=" + String.valueOf(REGISTRATION_SERIES));
			sb.append(",REGISTRATION_NBR=" + String.valueOf(REGISTRATION_NBR));
			sb.append(",REGISTRATION_DUP=" + REGISTRATION_DUP);
			sb.append(",REGISTRATION_DATE=" + String.valueOf(REGISTRATION_DATE));
			sb.append(",ENTITLEMENT_DATE=" + String.valueOf(ENTITLEMENT_DATE));
			sb.append(",EXPIRATION_DATE=" + String.valueOf(EXPIRATION_DATE));
			sb.append(",EXHIBITION_DATE=" + String.valueOf(EXHIBITION_DATE));
			sb.append(",EXHIBITION_NOTES=" + EXHIBITION_NOTES);
			sb.append(",SIGN_TYPE=" + SIGN_TYPE);
			sb.append(",MARK_NAME=" + MARK_NAME);
			sb.append(",MARK_NAME_LANG2=" + MARK_NAME_LANG2);
			sb.append(",MARK_TRANSLATION=" + MARK_TRANSLATION);
			sb.append(",MARK_TRANSLATION_LANG2=" + MARK_TRANSLATION_LANG2);
			sb.append(",MARK_TRANSLITERATION=" + MARK_TRANSLITERATION);
			sb.append(",MARK_TRANSLITERATION_LANG2=" + MARK_TRANSLITERATION_LANG2);
			sb.append(",SERIES_DESCRIPTION=" + SERIES_DESCRIPTION);
			sb.append(",COLOUR_DESCRIPTION=" + COLOUR_DESCRIPTION);
			sb.append(",COLOUR_DESCR_LANG2=" + COLOUR_DESCR_LANG2);
			sb.append(",DISCLAIMER=" + DISCLAIMER);
			sb.append(",DISCLAIMER_LANG2=" + DISCLAIMER_LANG2);
			sb.append(",BY_CONSENT=" + BY_CONSENT);
			sb.append(",REGULATIONS=" + REGULATIONS);
			sb.append(",NOTES=" + NOTES);
			sb.append(",CAPTURE_USER_ID=" + String.valueOf(CAPTURE_USER_ID));
			sb.append(",CAPTURE_DATE=" + String.valueOf(CAPTURE_DATE));
			sb.append(",PUBLICATION_NBR=" + String.valueOf(PUBLICATION_NBR));
			sb.append(",PUBLICATION_SER=" + PUBLICATION_SER);
			sb.append(",PUBLICATION_TYP=" + PUBLICATION_TYP);
			sb.append("]");

			return sb.toString();
		}

		/**
		 * Compare keys
		 */
		public int compareTo(row44Struct other) {

			int returnValue = -1;

			returnValue = checkNullsAndCompare(this.FILE_NBR, other.FILE_NBR);
			if (returnValue != 0) {
				return returnValue;
			}

			return returnValue;
		}

		private int checkNullsAndCompare(Object object1, Object object2) {
			int returnValue = 0;
			if (object1 instanceof Comparable && object2 instanceof Comparable) {
				returnValue = ((Comparable) object1).compareTo(object2);
			} else if (object1 != null && object2 != null) {
				returnValue = compareStrings(object1.toString(), object2.toString());
			} else if (object1 == null && object2 != null) {
				returnValue = 1;
			} else if (object1 != null && object2 == null) {
				returnValue = -1;
			} else {
				returnValue = 0;
			}

			return returnValue;
		}

		private int compareStrings(String string1, String string2) {
			return string1.compareTo(string2);
		}

	}

	public void tDBInput_31Process(final java.util.Map<String, Object> globalMap) throws TalendException {
		globalMap.put("tDBInput_31_SUBPROCESS_STATE", 0);

		final boolean execStat = this.execStat;

		String iterateId = "";

		String currentComponent = "";
		java.util.Map<String, Object> resourceMap = new java.util.HashMap<String, Object>();

		try {
			// TDI-39566 avoid throwing an useless Exception
			boolean resumeIt = true;
			if (globalResumeTicket == false && resumeEntryMethodName != null) {
				String currentMethodName = new java.lang.Exception().getStackTrace()[0].getMethodName();
				resumeIt = resumeEntryMethodName.equals(currentMethodName);
			}
			if (resumeIt || globalResumeTicket) { // start the resume
				globalResumeTicket = true;

				row44Struct row44 = new row44Struct();

				/**
				 * [tAdvancedHash_row44 begin ] start
				 */

				ok_Hash.put("tAdvancedHash_row44", false);
				start_Hash.put("tAdvancedHash_row44", System.currentTimeMillis());

				currentComponent = "tAdvancedHash_row44";

				if (execStat) {
					runStat.updateStatOnConnection(resourceMap, iterateId, 0, 0, "row44");
				}

				int tos_count_tAdvancedHash_row44 = 0;

				// connection name:row44
				// source node:tDBInput_31 - inputs:(after_tDBInput_33) outputs:(row44,row44) |
				// target node:tAdvancedHash_row44 - inputs:(row44) outputs:()
				// linked node: tMap_12 - inputs:(row43,row44) outputs:(copyOfinsert_actions)

				org.talend.designer.components.lookup.common.ICommonLookup.MATCHING_MODE matchingModeEnum_row44 = org.talend.designer.components.lookup.common.ICommonLookup.MATCHING_MODE.UNIQUE_MATCH;

				org.talend.designer.components.lookup.memory.AdvancedMemoryLookup<row44Struct> tHash_Lookup_row44 = org.talend.designer.components.lookup.memory.AdvancedMemoryLookup
						.<row44Struct>getLookup(matchingModeEnum_row44);

				globalMap.put("tHash_Lookup_row44", tHash_Lookup_row44);

				/**
				 * [tAdvancedHash_row44 begin ] stop
				 */

				/**
				 * [tDBInput_31 begin ] start
				 */

				ok_Hash.put("tDBInput_31", false);
				start_Hash.put("tDBInput_31", System.currentTimeMillis());

				currentComponent = "tDBInput_31";

				int tos_count_tDBInput_31 = 0;

				org.talend.designer.components.util.mssql.MSSqlGenerateTimestampUtil mssqlGTU_tDBInput_31 = org.talend.designer.components.util.mssql.MSSqlUtilFactory
						.getMSSqlGenerateTimestampUtil();

				java.util.List<String> talendToDBList_tDBInput_31 = new java.util.ArrayList();
				String[] talendToDBArray_tDBInput_31 = new String[] { "FLOAT", "NUMERIC", "NUMERIC IDENTITY", "DECIMAL",
						"DECIMAL IDENTITY", "REAL" };
				java.util.Collections.addAll(talendToDBList_tDBInput_31, talendToDBArray_tDBInput_31);
				int nb_line_tDBInput_31 = 0;
				java.sql.Connection conn_tDBInput_31 = null;
				conn_tDBInput_31 = (java.sql.Connection) globalMap.get("conn_tDBConnection_1");

				String dbschema_tDBInput_31 = (String) globalMap.get("dbschema_tDBConnection_1");

				java.sql.Statement stmt_tDBInput_31 = conn_tDBInput_31.createStatement();

				String dbquery_tDBInput_31 = "SELECT dbo.VW_IMPORT_MARK.FILE_SEQ,\n		dbo.VW_IMPORT_MARK.FILE_TYPE,\n		dbo.VW_IMPORT_MARK.FILE_SERIES,\n		dbo.VW_IMPORT_M"
						+ "ARK.FILE_NBR,\n		dbo.VW_IMPORT_MARK.DOC_ORI,\n		dbo.VW_IMPORT_MARK.DOC_SERIES,\n		dbo.VW_IMPORT_MARK.DOC_NBR,\n		dbo.VW_IMPO"
						+ "RT_MARK.IND_IMPORT,\n		dbo.VW_IMPORT_MARK.APPLICATION_TYPE,\n		dbo.VW_IMPORT_MARK.APPLICATION_SUBTYPE,\n		dbo.VW_IMPORT_MAR"
						+ "K.LAW_CODE,\n		dbo.VW_IMPORT_MARK.FILING_DATE,\n		dbo.VW_IMPORT_MARK.RECEPTION_DATE,\n		dbo.VW_IMPORT_MARK.PUBLICATION_DATE"
						+ ",\n		dbo.VW_IMPORT_MARK.PUBLICATION_NOTES,\n		dbo.VW_IMPORT_MARK.IND_REGISTERED,\n		dbo.VW_IMPORT_MARK.REGISTRATION_TYPE,\n	"
						+ "	dbo.VW_IMPORT_MARK.REGISTRATION_SERIES,\n		dbo.VW_IMPORT_MARK.REGISTRATION_NBR,\n		dbo.VW_IMPORT_MARK.REGISTRATION_DUP,\n	"
						+ "	dbo.VW_IMPORT_MARK.REGISTRATION_DATE,\n		dbo.VW_IMPORT_MARK.ENTITLEMENT_DATE,\n		dbo.VW_IMPORT_MARK.EXPIRATION_DATE,\n		db"
						+ "o.VW_IMPORT_MARK.EXHIBITION_DATE,\n		dbo.VW_IMPORT_MARK.EXHIBITION_NOTES,\n		dbo.VW_IMPORT_MARK.SIGN_TYPE,\n		dbo.VW_IMPORT"
						+ "_MARK.MARK_NAME,\n		dbo.VW_IMPORT_MARK.MARK_NAME_LANG2,\n		dbo.VW_IMPORT_MARK.MARK_TRANSLATION,\n		dbo.VW_IMPORT_MARK.MARK_"
						+ "TRANSLATION_LANG2,\n		dbo.VW_IMPORT_MARK.MARK_TRANSLITERATION,\n		dbo.VW_IMPORT_MARK.MARK_TRANSLITERATION_LANG2,\n		dbo.VW_"
						+ "IMPORT_MARK.SERIES_DESCRIPTION,\n		dbo.VW_IMPORT_MARK.COLOUR_DESCRIPTION,\n		dbo.VW_IMPORT_MARK.COLOUR_DESCR_LANG2,\n		dbo."
						+ "VW_IMPORT_MARK.DISCLAIMER,\n		dbo.VW_IMPORT_MARK.DISCLAIMER_LANG2,\n		dbo.VW_IMPORT_MARK.BY_CONSENT,\n		dbo.VW_IMPORT_MARK."
						+ "REGULATIONS,\n		dbo.VW_IMPORT_MARK.NOTES,\n		dbo.VW_IMPORT_MARK.CAPTURE_USER_ID,\n		dbo.VW_IMPORT_MARK.CAPTURE_DATE,\n		dbo."
						+ "VW_IMPORT_MARK.PUBLICATION_NBR,\n		dbo.VW_IMPORT_MARK.PUBLICATION_SER,\n		dbo.VW_IMPORT_MARK.PUBLICATION_TYP\nFROM	dbo.VW_I"
						+ "MPORT_MARK";

				globalMap.put("tDBInput_31_QUERY", dbquery_tDBInput_31);
				java.sql.ResultSet rs_tDBInput_31 = null;

				try {
					rs_tDBInput_31 = stmt_tDBInput_31.executeQuery(dbquery_tDBInput_31);
					java.sql.ResultSetMetaData rsmd_tDBInput_31 = rs_tDBInput_31.getMetaData();
					int colQtyInRs_tDBInput_31 = rsmd_tDBInput_31.getColumnCount();

					String tmpContent_tDBInput_31 = null;

					while (rs_tDBInput_31.next()) {
						nb_line_tDBInput_31++;

						if (colQtyInRs_tDBInput_31 < 1) {
							row44.FILE_SEQ = null;
						} else {

							tmpContent_tDBInput_31 = rs_tDBInput_31.getString(1);
							if (tmpContent_tDBInput_31 != null) {
								if (talendToDBList_tDBInput_31.contains(
										rsmd_tDBInput_31.getColumnTypeName(1).toUpperCase(java.util.Locale.ENGLISH))) {
									row44.FILE_SEQ = FormatterUtils.formatUnwithE(tmpContent_tDBInput_31);
								} else {
									row44.FILE_SEQ = tmpContent_tDBInput_31;
								}
							} else {
								row44.FILE_SEQ = null;
							}
						}
						if (colQtyInRs_tDBInput_31 < 2) {
							row44.FILE_TYPE = null;
						} else {

							tmpContent_tDBInput_31 = rs_tDBInput_31.getString(2);
							if (tmpContent_tDBInput_31 != null) {
								if (talendToDBList_tDBInput_31.contains(
										rsmd_tDBInput_31.getColumnTypeName(2).toUpperCase(java.util.Locale.ENGLISH))) {
									row44.FILE_TYPE = FormatterUtils.formatUnwithE(tmpContent_tDBInput_31);
								} else {
									row44.FILE_TYPE = tmpContent_tDBInput_31;
								}
							} else {
								row44.FILE_TYPE = null;
							}
						}
						if (colQtyInRs_tDBInput_31 < 3) {
							row44.FILE_SERIES = null;
						} else {

							row44.FILE_SERIES = rs_tDBInput_31.getBigDecimal(3);
							if (rs_tDBInput_31.wasNull()) {
								throw new RuntimeException("Null value in non-Nullable column");
							}
						}
						if (colQtyInRs_tDBInput_31 < 4) {
							row44.FILE_NBR = null;
						} else {

							row44.FILE_NBR = rs_tDBInput_31.getBigDecimal(4);
							if (rs_tDBInput_31.wasNull()) {
								throw new RuntimeException("Null value in non-Nullable column");
							}
						}
						if (colQtyInRs_tDBInput_31 < 5) {
							row44.DOC_ORI = null;
						} else {

							tmpContent_tDBInput_31 = rs_tDBInput_31.getString(5);
							if (tmpContent_tDBInput_31 != null) {
								if (talendToDBList_tDBInput_31.contains(
										rsmd_tDBInput_31.getColumnTypeName(5).toUpperCase(java.util.Locale.ENGLISH))) {
									row44.DOC_ORI = FormatterUtils.formatUnwithE(tmpContent_tDBInput_31);
								} else {
									row44.DOC_ORI = tmpContent_tDBInput_31;
								}
							} else {
								row44.DOC_ORI = null;
							}
						}
						if (colQtyInRs_tDBInput_31 < 6) {
							row44.DOC_SERIES = null;
						} else {

							row44.DOC_SERIES = rs_tDBInput_31.getBigDecimal(6);
							if (rs_tDBInput_31.wasNull()) {
								row44.DOC_SERIES = null;
							}
						}
						if (colQtyInRs_tDBInput_31 < 7) {
							row44.DOC_NBR = null;
						} else {

							row44.DOC_NBR = rs_tDBInput_31.getBigDecimal(7);
							if (rs_tDBInput_31.wasNull()) {
								row44.DOC_NBR = null;
							}
						}
						if (colQtyInRs_tDBInput_31 < 8) {
							row44.IND_IMPORT = null;
						} else {

							row44.IND_IMPORT = rs_tDBInput_31.getBigDecimal(8);
							if (rs_tDBInput_31.wasNull()) {
								row44.IND_IMPORT = null;
							}
						}
						if (colQtyInRs_tDBInput_31 < 9) {
							row44.APPLICATION_TYPE = null;
						} else {

							tmpContent_tDBInput_31 = rs_tDBInput_31.getString(9);
							if (tmpContent_tDBInput_31 != null) {
								if (talendToDBList_tDBInput_31.contains(
										rsmd_tDBInput_31.getColumnTypeName(9).toUpperCase(java.util.Locale.ENGLISH))) {
									row44.APPLICATION_TYPE = FormatterUtils.formatUnwithE(tmpContent_tDBInput_31);
								} else {
									row44.APPLICATION_TYPE = tmpContent_tDBInput_31;
								}
							} else {
								row44.APPLICATION_TYPE = null;
							}
						}
						if (colQtyInRs_tDBInput_31 < 10) {
							row44.APPLICATION_SUBTYPE = null;
						} else {

							tmpContent_tDBInput_31 = rs_tDBInput_31.getString(10);
							if (tmpContent_tDBInput_31 != null) {
								if (talendToDBList_tDBInput_31.contains(
										rsmd_tDBInput_31.getColumnTypeName(10).toUpperCase(java.util.Locale.ENGLISH))) {
									row44.APPLICATION_SUBTYPE = FormatterUtils.formatUnwithE(tmpContent_tDBInput_31);
								} else {
									row44.APPLICATION_SUBTYPE = tmpContent_tDBInput_31;
								}
							} else {
								row44.APPLICATION_SUBTYPE = null;
							}
						}
						if (colQtyInRs_tDBInput_31 < 11) {
							row44.LAW_CODE = null;
						} else {

							row44.LAW_CODE = rs_tDBInput_31.getBigDecimal(11);
							if (rs_tDBInput_31.wasNull()) {
								throw new RuntimeException("Null value in non-Nullable column");
							}
						}
						if (colQtyInRs_tDBInput_31 < 12) {
							row44.FILING_DATE = null;
						} else {

							row44.FILING_DATE = mssqlGTU_tDBInput_31.getDate(rsmd_tDBInput_31, rs_tDBInput_31, 12);

						}
						if (colQtyInRs_tDBInput_31 < 13) {
							row44.RECEPTION_DATE = null;
						} else {

							row44.RECEPTION_DATE = mssqlGTU_tDBInput_31.getDate(rsmd_tDBInput_31, rs_tDBInput_31, 13);

						}
						if (colQtyInRs_tDBInput_31 < 14) {
							row44.PUBLICATION_DATE = null;
						} else {

							row44.PUBLICATION_DATE = mssqlGTU_tDBInput_31.getDate(rsmd_tDBInput_31, rs_tDBInput_31, 14);

						}
						if (colQtyInRs_tDBInput_31 < 15) {
							row44.PUBLICATION_NOTES = null;
						} else {

							tmpContent_tDBInput_31 = rs_tDBInput_31.getString(15);
							if (tmpContent_tDBInput_31 != null) {
								if (talendToDBList_tDBInput_31.contains(
										rsmd_tDBInput_31.getColumnTypeName(15).toUpperCase(java.util.Locale.ENGLISH))) {
									row44.PUBLICATION_NOTES = FormatterUtils.formatUnwithE(tmpContent_tDBInput_31);
								} else {
									row44.PUBLICATION_NOTES = tmpContent_tDBInput_31;
								}
							} else {
								row44.PUBLICATION_NOTES = null;
							}
						}
						if (colQtyInRs_tDBInput_31 < 16) {
							row44.IND_REGISTERED = null;
						} else {

							row44.IND_REGISTERED = rs_tDBInput_31.getBigDecimal(16);
							if (rs_tDBInput_31.wasNull()) {
								row44.IND_REGISTERED = null;
							}
						}
						if (colQtyInRs_tDBInput_31 < 17) {
							row44.REGISTRATION_TYPE = null;
						} else {

							tmpContent_tDBInput_31 = rs_tDBInput_31.getString(17);
							if (tmpContent_tDBInput_31 != null) {
								if (talendToDBList_tDBInput_31.contains(
										rsmd_tDBInput_31.getColumnTypeName(17).toUpperCase(java.util.Locale.ENGLISH))) {
									row44.REGISTRATION_TYPE = FormatterUtils.formatUnwithE(tmpContent_tDBInput_31);
								} else {
									row44.REGISTRATION_TYPE = tmpContent_tDBInput_31;
								}
							} else {
								row44.REGISTRATION_TYPE = null;
							}
						}
						if (colQtyInRs_tDBInput_31 < 18) {
							row44.REGISTRATION_SERIES = null;
						} else {

							row44.REGISTRATION_SERIES = rs_tDBInput_31.getBigDecimal(18);
							if (rs_tDBInput_31.wasNull()) {
								row44.REGISTRATION_SERIES = null;
							}
						}
						if (colQtyInRs_tDBInput_31 < 19) {
							row44.REGISTRATION_NBR = null;
						} else {

							row44.REGISTRATION_NBR = rs_tDBInput_31.getBigDecimal(19);
							if (rs_tDBInput_31.wasNull()) {
								row44.REGISTRATION_NBR = null;
							}
						}
						if (colQtyInRs_tDBInput_31 < 20) {
							row44.REGISTRATION_DUP = null;
						} else {

							tmpContent_tDBInput_31 = rs_tDBInput_31.getString(20);
							if (tmpContent_tDBInput_31 != null) {
								if (talendToDBList_tDBInput_31.contains(
										rsmd_tDBInput_31.getColumnTypeName(20).toUpperCase(java.util.Locale.ENGLISH))) {
									row44.REGISTRATION_DUP = FormatterUtils.formatUnwithE(tmpContent_tDBInput_31);
								} else {
									row44.REGISTRATION_DUP = tmpContent_tDBInput_31;
								}
							} else {
								row44.REGISTRATION_DUP = null;
							}
						}
						if (colQtyInRs_tDBInput_31 < 21) {
							row44.REGISTRATION_DATE = null;
						} else {

							row44.REGISTRATION_DATE = mssqlGTU_tDBInput_31.getDate(rsmd_tDBInput_31, rs_tDBInput_31,
									21);

						}
						if (colQtyInRs_tDBInput_31 < 22) {
							row44.ENTITLEMENT_DATE = null;
						} else {

							row44.ENTITLEMENT_DATE = mssqlGTU_tDBInput_31.getDate(rsmd_tDBInput_31, rs_tDBInput_31, 22);

						}
						if (colQtyInRs_tDBInput_31 < 23) {
							row44.EXPIRATION_DATE = null;
						} else {

							row44.EXPIRATION_DATE = mssqlGTU_tDBInput_31.getDate(rsmd_tDBInput_31, rs_tDBInput_31, 23);

						}
						if (colQtyInRs_tDBInput_31 < 24) {
							row44.EXHIBITION_DATE = null;
						} else {

							row44.EXHIBITION_DATE = mssqlGTU_tDBInput_31.getDate(rsmd_tDBInput_31, rs_tDBInput_31, 24);

						}
						if (colQtyInRs_tDBInput_31 < 25) {
							row44.EXHIBITION_NOTES = null;
						} else {

							tmpContent_tDBInput_31 = rs_tDBInput_31.getString(25);
							if (tmpContent_tDBInput_31 != null) {
								if (talendToDBList_tDBInput_31.contains(
										rsmd_tDBInput_31.getColumnTypeName(25).toUpperCase(java.util.Locale.ENGLISH))) {
									row44.EXHIBITION_NOTES = FormatterUtils.formatUnwithE(tmpContent_tDBInput_31);
								} else {
									row44.EXHIBITION_NOTES = tmpContent_tDBInput_31;
								}
							} else {
								row44.EXHIBITION_NOTES = null;
							}
						}
						if (colQtyInRs_tDBInput_31 < 26) {
							row44.SIGN_TYPE = null;
						} else {

							tmpContent_tDBInput_31 = rs_tDBInput_31.getString(26);
							if (tmpContent_tDBInput_31 != null) {
								if (talendToDBList_tDBInput_31.contains(
										rsmd_tDBInput_31.getColumnTypeName(26).toUpperCase(java.util.Locale.ENGLISH))) {
									row44.SIGN_TYPE = FormatterUtils.formatUnwithE(tmpContent_tDBInput_31);
								} else {
									row44.SIGN_TYPE = tmpContent_tDBInput_31;
								}
							} else {
								row44.SIGN_TYPE = null;
							}
						}
						if (colQtyInRs_tDBInput_31 < 27) {
							row44.MARK_NAME = null;
						} else {

							tmpContent_tDBInput_31 = rs_tDBInput_31.getString(27);
							if (tmpContent_tDBInput_31 != null) {
								if (talendToDBList_tDBInput_31.contains(
										rsmd_tDBInput_31.getColumnTypeName(27).toUpperCase(java.util.Locale.ENGLISH))) {
									row44.MARK_NAME = FormatterUtils.formatUnwithE(tmpContent_tDBInput_31);
								} else {
									row44.MARK_NAME = tmpContent_tDBInput_31;
								}
							} else {
								row44.MARK_NAME = null;
							}
						}
						if (colQtyInRs_tDBInput_31 < 28) {
							row44.MARK_NAME_LANG2 = null;
						} else {

							tmpContent_tDBInput_31 = rs_tDBInput_31.getString(28);
							if (tmpContent_tDBInput_31 != null) {
								if (talendToDBList_tDBInput_31.contains(
										rsmd_tDBInput_31.getColumnTypeName(28).toUpperCase(java.util.Locale.ENGLISH))) {
									row44.MARK_NAME_LANG2 = FormatterUtils.formatUnwithE(tmpContent_tDBInput_31);
								} else {
									row44.MARK_NAME_LANG2 = tmpContent_tDBInput_31;
								}
							} else {
								row44.MARK_NAME_LANG2 = null;
							}
						}
						if (colQtyInRs_tDBInput_31 < 29) {
							row44.MARK_TRANSLATION = null;
						} else {

							tmpContent_tDBInput_31 = rs_tDBInput_31.getString(29);
							if (tmpContent_tDBInput_31 != null) {
								if (talendToDBList_tDBInput_31.contains(
										rsmd_tDBInput_31.getColumnTypeName(29).toUpperCase(java.util.Locale.ENGLISH))) {
									row44.MARK_TRANSLATION = FormatterUtils.formatUnwithE(tmpContent_tDBInput_31);
								} else {
									row44.MARK_TRANSLATION = tmpContent_tDBInput_31;
								}
							} else {
								row44.MARK_TRANSLATION = null;
							}
						}
						if (colQtyInRs_tDBInput_31 < 30) {
							row44.MARK_TRANSLATION_LANG2 = null;
						} else {

							tmpContent_tDBInput_31 = rs_tDBInput_31.getString(30);
							if (tmpContent_tDBInput_31 != null) {
								if (talendToDBList_tDBInput_31.contains(
										rsmd_tDBInput_31.getColumnTypeName(30).toUpperCase(java.util.Locale.ENGLISH))) {
									row44.MARK_TRANSLATION_LANG2 = FormatterUtils.formatUnwithE(tmpContent_tDBInput_31);
								} else {
									row44.MARK_TRANSLATION_LANG2 = tmpContent_tDBInput_31;
								}
							} else {
								row44.MARK_TRANSLATION_LANG2 = null;
							}
						}
						if (colQtyInRs_tDBInput_31 < 31) {
							row44.MARK_TRANSLITERATION = null;
						} else {

							tmpContent_tDBInput_31 = rs_tDBInput_31.getString(31);
							if (tmpContent_tDBInput_31 != null) {
								if (talendToDBList_tDBInput_31.contains(
										rsmd_tDBInput_31.getColumnTypeName(31).toUpperCase(java.util.Locale.ENGLISH))) {
									row44.MARK_TRANSLITERATION = FormatterUtils.formatUnwithE(tmpContent_tDBInput_31);
								} else {
									row44.MARK_TRANSLITERATION = tmpContent_tDBInput_31;
								}
							} else {
								row44.MARK_TRANSLITERATION = null;
							}
						}
						if (colQtyInRs_tDBInput_31 < 32) {
							row44.MARK_TRANSLITERATION_LANG2 = null;
						} else {

							tmpContent_tDBInput_31 = rs_tDBInput_31.getString(32);
							if (tmpContent_tDBInput_31 != null) {
								if (talendToDBList_tDBInput_31.contains(
										rsmd_tDBInput_31.getColumnTypeName(32).toUpperCase(java.util.Locale.ENGLISH))) {
									row44.MARK_TRANSLITERATION_LANG2 = FormatterUtils
											.formatUnwithE(tmpContent_tDBInput_31);
								} else {
									row44.MARK_TRANSLITERATION_LANG2 = tmpContent_tDBInput_31;
								}
							} else {
								row44.MARK_TRANSLITERATION_LANG2 = null;
							}
						}
						if (colQtyInRs_tDBInput_31 < 33) {
							row44.SERIES_DESCRIPTION = null;
						} else {

							tmpContent_tDBInput_31 = rs_tDBInput_31.getString(33);
							if (tmpContent_tDBInput_31 != null) {
								if (talendToDBList_tDBInput_31.contains(
										rsmd_tDBInput_31.getColumnTypeName(33).toUpperCase(java.util.Locale.ENGLISH))) {
									row44.SERIES_DESCRIPTION = FormatterUtils.formatUnwithE(tmpContent_tDBInput_31);
								} else {
									row44.SERIES_DESCRIPTION = tmpContent_tDBInput_31;
								}
							} else {
								row44.SERIES_DESCRIPTION = null;
							}
						}
						if (colQtyInRs_tDBInput_31 < 34) {
							row44.COLOUR_DESCRIPTION = null;
						} else {

							tmpContent_tDBInput_31 = rs_tDBInput_31.getString(34);
							if (tmpContent_tDBInput_31 != null) {
								if (talendToDBList_tDBInput_31.contains(
										rsmd_tDBInput_31.getColumnTypeName(34).toUpperCase(java.util.Locale.ENGLISH))) {
									row44.COLOUR_DESCRIPTION = FormatterUtils.formatUnwithE(tmpContent_tDBInput_31);
								} else {
									row44.COLOUR_DESCRIPTION = tmpContent_tDBInput_31;
								}
							} else {
								row44.COLOUR_DESCRIPTION = null;
							}
						}
						if (colQtyInRs_tDBInput_31 < 35) {
							row44.COLOUR_DESCR_LANG2 = null;
						} else {

							tmpContent_tDBInput_31 = rs_tDBInput_31.getString(35);
							if (tmpContent_tDBInput_31 != null) {
								if (talendToDBList_tDBInput_31.contains(
										rsmd_tDBInput_31.getColumnTypeName(35).toUpperCase(java.util.Locale.ENGLISH))) {
									row44.COLOUR_DESCR_LANG2 = FormatterUtils.formatUnwithE(tmpContent_tDBInput_31);
								} else {
									row44.COLOUR_DESCR_LANG2 = tmpContent_tDBInput_31;
								}
							} else {
								row44.COLOUR_DESCR_LANG2 = null;
							}
						}
						if (colQtyInRs_tDBInput_31 < 36) {
							row44.DISCLAIMER = null;
						} else {

							tmpContent_tDBInput_31 = rs_tDBInput_31.getString(36);
							if (tmpContent_tDBInput_31 != null) {
								if (talendToDBList_tDBInput_31.contains(
										rsmd_tDBInput_31.getColumnTypeName(36).toUpperCase(java.util.Locale.ENGLISH))) {
									row44.DISCLAIMER = FormatterUtils.formatUnwithE(tmpContent_tDBInput_31);
								} else {
									row44.DISCLAIMER = tmpContent_tDBInput_31;
								}
							} else {
								row44.DISCLAIMER = null;
							}
						}
						if (colQtyInRs_tDBInput_31 < 37) {
							row44.DISCLAIMER_LANG2 = null;
						} else {

							tmpContent_tDBInput_31 = rs_tDBInput_31.getString(37);
							if (tmpContent_tDBInput_31 != null) {
								if (talendToDBList_tDBInput_31.contains(
										rsmd_tDBInput_31.getColumnTypeName(37).toUpperCase(java.util.Locale.ENGLISH))) {
									row44.DISCLAIMER_LANG2 = FormatterUtils.formatUnwithE(tmpContent_tDBInput_31);
								} else {
									row44.DISCLAIMER_LANG2 = tmpContent_tDBInput_31;
								}
							} else {
								row44.DISCLAIMER_LANG2 = null;
							}
						}
						if (colQtyInRs_tDBInput_31 < 38) {
							row44.BY_CONSENT = null;
						} else {

							tmpContent_tDBInput_31 = rs_tDBInput_31.getString(38);
							if (tmpContent_tDBInput_31 != null) {
								if (talendToDBList_tDBInput_31.contains(
										rsmd_tDBInput_31.getColumnTypeName(38).toUpperCase(java.util.Locale.ENGLISH))) {
									row44.BY_CONSENT = FormatterUtils.formatUnwithE(tmpContent_tDBInput_31);
								} else {
									row44.BY_CONSENT = tmpContent_tDBInput_31;
								}
							} else {
								row44.BY_CONSENT = null;
							}
						}
						if (colQtyInRs_tDBInput_31 < 39) {
							row44.REGULATIONS = null;
						} else {

							tmpContent_tDBInput_31 = rs_tDBInput_31.getString(39);
							if (tmpContent_tDBInput_31 != null) {
								if (talendToDBList_tDBInput_31.contains(
										rsmd_tDBInput_31.getColumnTypeName(39).toUpperCase(java.util.Locale.ENGLISH))) {
									row44.REGULATIONS = FormatterUtils.formatUnwithE(tmpContent_tDBInput_31);
								} else {
									row44.REGULATIONS = tmpContent_tDBInput_31;
								}
							} else {
								row44.REGULATIONS = null;
							}
						}
						if (colQtyInRs_tDBInput_31 < 40) {
							row44.NOTES = null;
						} else {

							tmpContent_tDBInput_31 = rs_tDBInput_31.getString(40);
							if (tmpContent_tDBInput_31 != null) {
								if (talendToDBList_tDBInput_31.contains(
										rsmd_tDBInput_31.getColumnTypeName(40).toUpperCase(java.util.Locale.ENGLISH))) {
									row44.NOTES = FormatterUtils.formatUnwithE(tmpContent_tDBInput_31);
								} else {
									row44.NOTES = tmpContent_tDBInput_31;
								}
							} else {
								row44.NOTES = null;
							}
						}
						if (colQtyInRs_tDBInput_31 < 41) {
							row44.CAPTURE_USER_ID = null;
						} else {

							row44.CAPTURE_USER_ID = rs_tDBInput_31.getBigDecimal(41);
							if (rs_tDBInput_31.wasNull()) {
								row44.CAPTURE_USER_ID = null;
							}
						}
						if (colQtyInRs_tDBInput_31 < 42) {
							row44.CAPTURE_DATE = null;
						} else {

							row44.CAPTURE_DATE = mssqlGTU_tDBInput_31.getDate(rsmd_tDBInput_31, rs_tDBInput_31, 42);

						}
						if (colQtyInRs_tDBInput_31 < 43) {
							row44.PUBLICATION_NBR = null;
						} else {

							row44.PUBLICATION_NBR = rs_tDBInput_31.getBigDecimal(43);
							if (rs_tDBInput_31.wasNull()) {
								row44.PUBLICATION_NBR = null;
							}
						}
						if (colQtyInRs_tDBInput_31 < 44) {
							row44.PUBLICATION_SER = null;
						} else {

							tmpContent_tDBInput_31 = rs_tDBInput_31.getString(44);
							if (tmpContent_tDBInput_31 != null) {
								if (talendToDBList_tDBInput_31.contains(
										rsmd_tDBInput_31.getColumnTypeName(44).toUpperCase(java.util.Locale.ENGLISH))) {
									row44.PUBLICATION_SER = FormatterUtils.formatUnwithE(tmpContent_tDBInput_31);
								} else {
									row44.PUBLICATION_SER = tmpContent_tDBInput_31;
								}
							} else {
								row44.PUBLICATION_SER = null;
							}
						}
						if (colQtyInRs_tDBInput_31 < 45) {
							row44.PUBLICATION_TYP = null;
						} else {

							tmpContent_tDBInput_31 = rs_tDBInput_31.getString(45);
							if (tmpContent_tDBInput_31 != null) {
								if (talendToDBList_tDBInput_31.contains(
										rsmd_tDBInput_31.getColumnTypeName(45).toUpperCase(java.util.Locale.ENGLISH))) {
									row44.PUBLICATION_TYP = FormatterUtils.formatUnwithE(tmpContent_tDBInput_31);
								} else {
									row44.PUBLICATION_TYP = tmpContent_tDBInput_31;
								}
							} else {
								row44.PUBLICATION_TYP = null;
							}
						}

						/**
						 * [tDBInput_31 begin ] stop
						 */

						/**
						 * [tDBInput_31 main ] start
						 */

						currentComponent = "tDBInput_31";

						tos_count_tDBInput_31++;

						/**
						 * [tDBInput_31 main ] stop
						 */

						/**
						 * [tDBInput_31 process_data_begin ] start
						 */

						currentComponent = "tDBInput_31";

						/**
						 * [tDBInput_31 process_data_begin ] stop
						 */

						/**
						 * [tAdvancedHash_row44 main ] start
						 */

						currentComponent = "tAdvancedHash_row44";

						if (execStat) {
							runStat.updateStatOnConnection(iterateId, 1, 1

									, "row44"

							);
						}

						row44Struct row44_HashRow = new row44Struct();

						row44_HashRow.FILE_SEQ = row44.FILE_SEQ;

						row44_HashRow.FILE_TYPE = row44.FILE_TYPE;

						row44_HashRow.FILE_SERIES = row44.FILE_SERIES;

						row44_HashRow.FILE_NBR = row44.FILE_NBR;

						row44_HashRow.DOC_ORI = row44.DOC_ORI;

						row44_HashRow.DOC_SERIES = row44.DOC_SERIES;

						row44_HashRow.DOC_NBR = row44.DOC_NBR;

						row44_HashRow.IND_IMPORT = row44.IND_IMPORT;

						row44_HashRow.APPLICATION_TYPE = row44.APPLICATION_TYPE;

						row44_HashRow.APPLICATION_SUBTYPE = row44.APPLICATION_SUBTYPE;

						row44_HashRow.LAW_CODE = row44.LAW_CODE;

						row44_HashRow.FILING_DATE = row44.FILING_DATE;

						row44_HashRow.RECEPTION_DATE = row44.RECEPTION_DATE;

						row44_HashRow.PUBLICATION_DATE = row44.PUBLICATION_DATE;

						row44_HashRow.PUBLICATION_NOTES = row44.PUBLICATION_NOTES;

						row44_HashRow.IND_REGISTERED = row44.IND_REGISTERED;

						row44_HashRow.REGISTRATION_TYPE = row44.REGISTRATION_TYPE;

						row44_HashRow.REGISTRATION_SERIES = row44.REGISTRATION_SERIES;

						row44_HashRow.REGISTRATION_NBR = row44.REGISTRATION_NBR;

						row44_HashRow.REGISTRATION_DUP = row44.REGISTRATION_DUP;

						row44_HashRow.REGISTRATION_DATE = row44.REGISTRATION_DATE;

						row44_HashRow.ENTITLEMENT_DATE = row44.ENTITLEMENT_DATE;

						row44_HashRow.EXPIRATION_DATE = row44.EXPIRATION_DATE;

						row44_HashRow.EXHIBITION_DATE = row44.EXHIBITION_DATE;

						row44_HashRow.EXHIBITION_NOTES = row44.EXHIBITION_NOTES;

						row44_HashRow.SIGN_TYPE = row44.SIGN_TYPE;

						row44_HashRow.MARK_NAME = row44.MARK_NAME;

						row44_HashRow.MARK_NAME_LANG2 = row44.MARK_NAME_LANG2;

						row44_HashRow.MARK_TRANSLATION = row44.MARK_TRANSLATION;

						row44_HashRow.MARK_TRANSLATION_LANG2 = row44.MARK_TRANSLATION_LANG2;

						row44_HashRow.MARK_TRANSLITERATION = row44.MARK_TRANSLITERATION;

						row44_HashRow.MARK_TRANSLITERATION_LANG2 = row44.MARK_TRANSLITERATION_LANG2;

						row44_HashRow.SERIES_DESCRIPTION = row44.SERIES_DESCRIPTION;

						row44_HashRow.COLOUR_DESCRIPTION = row44.COLOUR_DESCRIPTION;

						row44_HashRow.COLOUR_DESCR_LANG2 = row44.COLOUR_DESCR_LANG2;

						row44_HashRow.DISCLAIMER = row44.DISCLAIMER;

						row44_HashRow.DISCLAIMER_LANG2 = row44.DISCLAIMER_LANG2;

						row44_HashRow.BY_CONSENT = row44.BY_CONSENT;

						row44_HashRow.REGULATIONS = row44.REGULATIONS;

						row44_HashRow.NOTES = row44.NOTES;

						row44_HashRow.CAPTURE_USER_ID = row44.CAPTURE_USER_ID;

						row44_HashRow.CAPTURE_DATE = row44.CAPTURE_DATE;

						row44_HashRow.PUBLICATION_NBR = row44.PUBLICATION_NBR;

						row44_HashRow.PUBLICATION_SER = row44.PUBLICATION_SER;

						row44_HashRow.PUBLICATION_TYP = row44.PUBLICATION_TYP;

						tHash_Lookup_row44.put(row44_HashRow);

						tos_count_tAdvancedHash_row44++;

						/**
						 * [tAdvancedHash_row44 main ] stop
						 */

						/**
						 * [tAdvancedHash_row44 process_data_begin ] start
						 */

						currentComponent = "tAdvancedHash_row44";

						/**
						 * [tAdvancedHash_row44 process_data_begin ] stop
						 */

						/**
						 * [tAdvancedHash_row44 process_data_end ] start
						 */

						currentComponent = "tAdvancedHash_row44";

						/**
						 * [tAdvancedHash_row44 process_data_end ] stop
						 */

						/**
						 * [tDBInput_31 process_data_end ] start
						 */

						currentComponent = "tDBInput_31";

						/**
						 * [tDBInput_31 process_data_end ] stop
						 */

						/**
						 * [tDBInput_31 end ] start
						 */

						currentComponent = "tDBInput_31";

					}
				} finally {
					if (rs_tDBInput_31 != null) {
						rs_tDBInput_31.close();
					}
					if (stmt_tDBInput_31 != null) {
						stmt_tDBInput_31.close();
					}
				}
				globalMap.put("tDBInput_31_NB_LINE", nb_line_tDBInput_31);

				ok_Hash.put("tDBInput_31", true);
				end_Hash.put("tDBInput_31", System.currentTimeMillis());

				/**
				 * [tDBInput_31 end ] stop
				 */

				/**
				 * [tAdvancedHash_row44 end ] start
				 */

				currentComponent = "tAdvancedHash_row44";

				tHash_Lookup_row44.endPut();

				if (execStat) {
					runStat.updateStat(resourceMap, iterateId, 2, 0, "row44");
				}

				ok_Hash.put("tAdvancedHash_row44", true);
				end_Hash.put("tAdvancedHash_row44", System.currentTimeMillis());

				/**
				 * [tAdvancedHash_row44 end ] stop
				 */

			} // end the resume

		} catch (java.lang.Exception e) {

			TalendException te = new TalendException(e, currentComponent, globalMap);

			throw te;
		} catch (java.lang.Error error) {

			runStat.stopThreadStat();

			throw error;
		} finally {

			try {

				/**
				 * [tDBInput_31 finally ] start
				 */

				currentComponent = "tDBInput_31";

				/**
				 * [tDBInput_31 finally ] stop
				 */

				/**
				 * [tAdvancedHash_row44 finally ] start
				 */

				currentComponent = "tAdvancedHash_row44";

				/**
				 * [tAdvancedHash_row44 finally ] stop
				 */

			} catch (java.lang.Exception e) {
				// ignore
			} catch (java.lang.Error error) {
				// ignore
			}
			resourceMap = null;
		}

		globalMap.put("tDBInput_31_SUBPROCESS_STATE", 1);
	}

	public static class row1Struct implements routines.system.IPersistableRow<row1Struct> {
		final static byte[] commonByteArrayLock_WIPO_PROJECTS_E1a_Marc_a_interm_Copy = new byte[0];
		static byte[] commonByteArray_WIPO_PROJECTS_E1a_Marc_a_interm_Copy = new byte[0];

		public java.util.Date moment;

		public java.util.Date getMoment() {
			return this.moment;
		}

		public String pid;

		public String getPid() {
			return this.pid;
		}

		public String father_pid;

		public String getFather_pid() {
			return this.father_pid;
		}

		public String root_pid;

		public String getRoot_pid() {
			return this.root_pid;
		}

		public Long system_pid;

		public Long getSystem_pid() {
			return this.system_pid;
		}

		public String project;

		public String getProject() {
			return this.project;
		}

		public String job;

		public String getJob() {
			return this.job;
		}

		public String job_repository_id;

		public String getJob_repository_id() {
			return this.job_repository_id;
		}

		public String job_version;

		public String getJob_version() {
			return this.job_version;
		}

		public String context;

		public String getContext() {
			return this.context;
		}

		public String origin;

		public String getOrigin() {
			return this.origin;
		}

		public String message_type;

		public String getMessage_type() {
			return this.message_type;
		}

		public String message;

		public String getMessage() {
			return this.message;
		}

		public Long duration;

		public Long getDuration() {
			return this.duration;
		}

		private java.util.Date readDate(ObjectInputStream dis) throws IOException {
			java.util.Date dateReturn = null;
			int length = 0;
			length = dis.readByte();
			if (length == -1) {
				dateReturn = null;
			} else {
				dateReturn = new Date(dis.readLong());
			}
			return dateReturn;
		}

		private void writeDate(java.util.Date date1, ObjectOutputStream dos) throws IOException {
			if (date1 == null) {
				dos.writeByte(-1);
			} else {
				dos.writeByte(0);
				dos.writeLong(date1.getTime());
			}
		}

		private String readString(ObjectInputStream dis) throws IOException {
			String strReturn = null;
			int length = 0;
			length = dis.readInt();
			if (length == -1) {
				strReturn = null;
			} else {
				if (length > commonByteArray_WIPO_PROJECTS_E1a_Marc_a_interm_Copy.length) {
					if (length < 1024 && commonByteArray_WIPO_PROJECTS_E1a_Marc_a_interm_Copy.length == 0) {
						commonByteArray_WIPO_PROJECTS_E1a_Marc_a_interm_Copy = new byte[1024];
					} else {
						commonByteArray_WIPO_PROJECTS_E1a_Marc_a_interm_Copy = new byte[2 * length];
					}
				}
				dis.readFully(commonByteArray_WIPO_PROJECTS_E1a_Marc_a_interm_Copy, 0, length);
				strReturn = new String(commonByteArray_WIPO_PROJECTS_E1a_Marc_a_interm_Copy, 0, length, utf8Charset);
			}
			return strReturn;
		}

		private void writeString(String str, ObjectOutputStream dos) throws IOException {
			if (str == null) {
				dos.writeInt(-1);
			} else {
				byte[] byteArray = str.getBytes(utf8Charset);
				dos.writeInt(byteArray.length);
				dos.write(byteArray);
			}
		}

		public void readData(ObjectInputStream dis) {

			synchronized (commonByteArrayLock_WIPO_PROJECTS_E1a_Marc_a_interm_Copy) {

				try {

					int length = 0;

					this.moment = readDate(dis);

					this.pid = readString(dis);

					this.father_pid = readString(dis);

					this.root_pid = readString(dis);

					length = dis.readByte();
					if (length == -1) {
						this.system_pid = null;
					} else {
						this.system_pid = dis.readLong();
					}

					this.project = readString(dis);

					this.job = readString(dis);

					this.job_repository_id = readString(dis);

					this.job_version = readString(dis);

					this.context = readString(dis);

					this.origin = readString(dis);

					this.message_type = readString(dis);

					this.message = readString(dis);

					length = dis.readByte();
					if (length == -1) {
						this.duration = null;
					} else {
						this.duration = dis.readLong();
					}

				} catch (IOException e) {
					throw new RuntimeException(e);

				}

			}

		}

		public void writeData(ObjectOutputStream dos) {
			try {

				// java.util.Date

				writeDate(this.moment, dos);

				// String

				writeString(this.pid, dos);

				// String

				writeString(this.father_pid, dos);

				// String

				writeString(this.root_pid, dos);

				// Long

				if (this.system_pid == null) {
					dos.writeByte(-1);
				} else {
					dos.writeByte(0);
					dos.writeLong(this.system_pid);
				}

				// String

				writeString(this.project, dos);

				// String

				writeString(this.job, dos);

				// String

				writeString(this.job_repository_id, dos);

				// String

				writeString(this.job_version, dos);

				// String

				writeString(this.context, dos);

				// String

				writeString(this.origin, dos);

				// String

				writeString(this.message_type, dos);

				// String

				writeString(this.message, dos);

				// Long

				if (this.duration == null) {
					dos.writeByte(-1);
				} else {
					dos.writeByte(0);
					dos.writeLong(this.duration);
				}

			} catch (IOException e) {
				throw new RuntimeException(e);
			}

		}

		public String toString() {

			StringBuilder sb = new StringBuilder();
			sb.append(super.toString());
			sb.append("[");
			sb.append("moment=" + String.valueOf(moment));
			sb.append(",pid=" + pid);
			sb.append(",father_pid=" + father_pid);
			sb.append(",root_pid=" + root_pid);
			sb.append(",system_pid=" + String.valueOf(system_pid));
			sb.append(",project=" + project);
			sb.append(",job=" + job);
			sb.append(",job_repository_id=" + job_repository_id);
			sb.append(",job_version=" + job_version);
			sb.append(",context=" + context);
			sb.append(",origin=" + origin);
			sb.append(",message_type=" + message_type);
			sb.append(",message=" + message);
			sb.append(",duration=" + String.valueOf(duration));
			sb.append("]");

			return sb.toString();
		}

		/**
		 * Compare keys
		 */
		public int compareTo(row1Struct other) {

			int returnValue = -1;

			return returnValue;
		}

		private int checkNullsAndCompare(Object object1, Object object2) {
			int returnValue = 0;
			if (object1 instanceof Comparable && object2 instanceof Comparable) {
				returnValue = ((Comparable) object1).compareTo(object2);
			} else if (object1 != null && object2 != null) {
				returnValue = compareStrings(object1.toString(), object2.toString());
			} else if (object1 == null && object2 != null) {
				returnValue = 1;
			} else if (object1 != null && object2 == null) {
				returnValue = -1;
			} else {
				returnValue = 0;
			}

			return returnValue;
		}

		private int compareStrings(String string1, String string2) {
			return string1.compareTo(string2);
		}

	}

	public void tStatCatcher_1Process(final java.util.Map<String, Object> globalMap) throws TalendException {
		globalMap.put("tStatCatcher_1_SUBPROCESS_STATE", 0);

		final boolean execStat = this.execStat;

		String iterateId = "";

		String currentComponent = "";
		java.util.Map<String, Object> resourceMap = new java.util.HashMap<String, Object>();

		try {
			// TDI-39566 avoid throwing an useless Exception
			boolean resumeIt = true;
			if (globalResumeTicket == false && resumeEntryMethodName != null) {
				String currentMethodName = new java.lang.Exception().getStackTrace()[0].getMethodName();
				resumeIt = resumeEntryMethodName.equals(currentMethodName);
			}
			if (resumeIt || globalResumeTicket) { // start the resume
				globalResumeTicket = true;

				row1Struct row1 = new row1Struct();

				/**
				 * [tLogRow_13 begin ] start
				 */

				ok_Hash.put("tLogRow_13", false);
				start_Hash.put("tLogRow_13", System.currentTimeMillis());

				currentComponent = "tLogRow_13";

				if (execStat) {
					runStat.updateStatOnConnection(resourceMap, iterateId, 0, 0, "row1");
				}

				int tos_count_tLogRow_13 = 0;

				///////////////////////

				final String OUTPUT_FIELD_SEPARATOR_tLogRow_13 = "|";
				java.io.PrintStream consoleOut_tLogRow_13 = null;

				StringBuilder strBuffer_tLogRow_13 = null;
				int nb_line_tLogRow_13 = 0;
///////////////////////    			

				/**
				 * [tLogRow_13 begin ] stop
				 */

				/**
				 * [tStatCatcher_1 begin ] start
				 */

				ok_Hash.put("tStatCatcher_1", false);
				start_Hash.put("tStatCatcher_1", System.currentTimeMillis());

				currentComponent = "tStatCatcher_1";

				int tos_count_tStatCatcher_1 = 0;

				for (StatCatcherUtils.StatCatcherMessage scm : tStatCatcher_1.getMessages()) {
					row1.pid = pid;
					row1.root_pid = rootPid;
					row1.father_pid = fatherPid;
					row1.project = projectName;
					row1.job = jobName;
					row1.context = contextStr;
					row1.origin = (scm.getOrigin() == null || scm.getOrigin().length() < 1 ? null : scm.getOrigin());
					row1.message = scm.getMessage();
					row1.duration = scm.getDuration();
					row1.moment = scm.getMoment();
					row1.message_type = scm.getMessageType();
					row1.job_version = scm.getJobVersion();
					row1.job_repository_id = scm.getJobId();
					row1.system_pid = scm.getSystemPid();

					/**
					 * [tStatCatcher_1 begin ] stop
					 */

					/**
					 * [tStatCatcher_1 main ] start
					 */

					currentComponent = "tStatCatcher_1";

					tos_count_tStatCatcher_1++;

					/**
					 * [tStatCatcher_1 main ] stop
					 */

					/**
					 * [tStatCatcher_1 process_data_begin ] start
					 */

					currentComponent = "tStatCatcher_1";

					/**
					 * [tStatCatcher_1 process_data_begin ] stop
					 */

					/**
					 * [tLogRow_13 main ] start
					 */

					currentComponent = "tLogRow_13";

					if (execStat) {
						runStat.updateStatOnConnection(iterateId, 1, 1

								, "row1"

						);
					}

///////////////////////		

					strBuffer_tLogRow_13 = new StringBuilder();

					if (row1.moment != null) { //

						strBuffer_tLogRow_13.append(FormatterUtils.format_Date(row1.moment, "yyyy-MM-dd HH:mm:ss"));

					} //

					strBuffer_tLogRow_13.append("|");

					if (row1.job != null) { //

						strBuffer_tLogRow_13.append(String.valueOf(row1.job));

					} //

					strBuffer_tLogRow_13.append("|");

					if (row1.origin != null) { //

						strBuffer_tLogRow_13.append(String.valueOf(row1.origin));

					} //

					strBuffer_tLogRow_13.append("|");

					if (row1.message_type != null) { //

						strBuffer_tLogRow_13.append(String.valueOf(row1.message_type));

					} //

					strBuffer_tLogRow_13.append("|");

					if (row1.message != null) { //

						strBuffer_tLogRow_13.append(String.valueOf(row1.message));

					} //

					strBuffer_tLogRow_13.append("|");

					if (row1.duration != null) { //

						strBuffer_tLogRow_13.append(String.valueOf(row1.duration));

					} //

					if (globalMap.get("tLogRow_CONSOLE") != null) {
						consoleOut_tLogRow_13 = (java.io.PrintStream) globalMap.get("tLogRow_CONSOLE");
					} else {
						consoleOut_tLogRow_13 = new java.io.PrintStream(new java.io.BufferedOutputStream(System.out));
						globalMap.put("tLogRow_CONSOLE", consoleOut_tLogRow_13);
					}
					consoleOut_tLogRow_13.println(strBuffer_tLogRow_13.toString());
					consoleOut_tLogRow_13.flush();
					nb_line_tLogRow_13++;
//////

//////                    

///////////////////////    			

					tos_count_tLogRow_13++;

					/**
					 * [tLogRow_13 main ] stop
					 */

					/**
					 * [tLogRow_13 process_data_begin ] start
					 */

					currentComponent = "tLogRow_13";

					/**
					 * [tLogRow_13 process_data_begin ] stop
					 */

					/**
					 * [tLogRow_13 process_data_end ] start
					 */

					currentComponent = "tLogRow_13";

					/**
					 * [tLogRow_13 process_data_end ] stop
					 */

					/**
					 * [tStatCatcher_1 process_data_end ] start
					 */

					currentComponent = "tStatCatcher_1";

					/**
					 * [tStatCatcher_1 process_data_end ] stop
					 */

					/**
					 * [tStatCatcher_1 end ] start
					 */

					currentComponent = "tStatCatcher_1";

				}

				ok_Hash.put("tStatCatcher_1", true);
				end_Hash.put("tStatCatcher_1", System.currentTimeMillis());

				/**
				 * [tStatCatcher_1 end ] stop
				 */

				/**
				 * [tLogRow_13 end ] start
				 */

				currentComponent = "tLogRow_13";

//////
//////
				globalMap.put("tLogRow_13_NB_LINE", nb_line_tLogRow_13);

///////////////////////    			

				if (execStat) {
					runStat.updateStat(resourceMap, iterateId, 2, 0, "row1");
				}

				ok_Hash.put("tLogRow_13", true);
				end_Hash.put("tLogRow_13", System.currentTimeMillis());

				/**
				 * [tLogRow_13 end ] stop
				 */

			} // end the resume

		} catch (java.lang.Exception e) {

			TalendException te = new TalendException(e, currentComponent, globalMap);

			throw te;
		} catch (java.lang.Error error) {

			runStat.stopThreadStat();

			throw error;
		} finally {

			try {

				/**
				 * [tStatCatcher_1 finally ] start
				 */

				currentComponent = "tStatCatcher_1";

				/**
				 * [tStatCatcher_1 finally ] stop
				 */

				/**
				 * [tLogRow_13 finally ] start
				 */

				currentComponent = "tLogRow_13";

				/**
				 * [tLogRow_13 finally ] stop
				 */

			} catch (java.lang.Exception e) {
				// ignore
			} catch (java.lang.Error error) {
				// ignore
			}
			resourceMap = null;
		}

		globalMap.put("tStatCatcher_1_SUBPROCESS_STATE", 1);
	}

	public String resuming_logs_dir_path = null;
	public String resuming_checkpoint_path = null;
	public String parent_part_launcher = null;
	private String resumeEntryMethodName = null;
	private boolean globalResumeTicket = false;

	public boolean watch = false;
	// portStats is null, it means don't execute the statistics
	public Integer portStats = null;
	public int portTraces = 4334;
	public String clientHost;
	public String defaultClientHost = "localhost";
	public String contextStr = "Default";
	public boolean isDefaultContext = true;
	public String pid = "0";
	public String rootPid = null;
	public String fatherPid = null;
	public String fatherNode = null;
	public long startTime = 0;
	public boolean isChildJob = false;
	public String log4jLevel = "";

	private boolean enableLogStash;

	private boolean execStat = true;

	private ThreadLocal<java.util.Map<String, String>> threadLocal = new ThreadLocal<java.util.Map<String, String>>() {
		protected java.util.Map<String, String> initialValue() {
			java.util.Map<String, String> threadRunResultMap = new java.util.HashMap<String, String>();
			threadRunResultMap.put("errorCode", null);
			threadRunResultMap.put("status", "");
			return threadRunResultMap;
		};
	};

	private SyncInt runningThreadCount = new SyncInt();

	private class SyncInt {
		private int count = 0;

		public synchronized void add(int i) {
			count += i;
		}

		public synchronized int getCount() {
			return count;
		}
	}

	protected PropertiesWithType context_param = new PropertiesWithType();
	public java.util.Map<String, Object> parentContextMap = new java.util.HashMap<String, Object>();

	public String status = "";

	public static void main(String[] args) {
		final E1a_Marc_a_interm_Copy E1a_Marc_a_interm_CopyClass = new E1a_Marc_a_interm_Copy();

		int exitCode = E1a_Marc_a_interm_CopyClass.runJobInTOS(args);

		System.exit(exitCode);
	}

	public String[][] runJob(String[] args) {

		int exitCode = runJobInTOS(args);
		String[][] bufferValue = new String[][] { { Integer.toString(exitCode) } };

		return bufferValue;
	}

	public boolean hastBufferOutputComponent() {
		boolean hastBufferOutput = false;

		return hastBufferOutput;
	}

	public int runJobInTOS(String[] args) {
		// reset status
		status = "";

		String lastStr = "";
		for (String arg : args) {
			if (arg.equalsIgnoreCase("--context_param")) {
				lastStr = arg;
			} else if (lastStr.equals("")) {
				evalParam(arg);
			} else {
				evalParam(lastStr + " " + arg);
				lastStr = "";
			}
		}
		enableLogStash = "true".equalsIgnoreCase(System.getProperty("audit.enabled"));

		if (clientHost == null) {
			clientHost = defaultClientHost;
		}

		if (pid == null || "0".equals(pid)) {
			pid = TalendString.getAsciiRandomString(6);
		}

		if (rootPid == null) {
			rootPid = pid;
		}
		if (fatherPid == null) {
			fatherPid = pid;
		} else {
			isChildJob = true;
		}

		if (portStats != null) {
			// portStats = -1; //for testing
			if (portStats < 0 || portStats > 65535) {
				// issue:10869, the portStats is invalid, so this client socket can't open
				System.err.println("The statistics socket port " + portStats + " is invalid.");
				execStat = false;
			}
		} else {
			execStat = false;
		}

		try {
			// call job/subjob with an existing context, like: --context=production. if
			// without this parameter, there will use the default context instead.
			java.io.InputStream inContext = E1a_Marc_a_interm_Copy.class.getClassLoader().getResourceAsStream(
					"wipo_projects/e1a_marc_a_interm_copy_0_1/contexts/" + contextStr + ".properties");
			if (inContext == null) {
				inContext = E1a_Marc_a_interm_Copy.class.getClassLoader()
						.getResourceAsStream("config/contexts/" + contextStr + ".properties");
			}
			if (inContext != null) {
				// defaultProps is in order to keep the original context value
				if (context != null && context.isEmpty()) {
					defaultProps.load(inContext);
					context = new ContextProperties(defaultProps);
				}

				inContext.close();
			} else if (!isDefaultContext) {
				// print info and job continue to run, for case: context_param is not empty.
				System.err.println("Could not find the context " + contextStr);
			}

			if (!context_param.isEmpty()) {
				context.putAll(context_param);
				// set types for params from parentJobs
				for (Object key : context_param.keySet()) {
					String context_key = key.toString();
					String context_type = context_param.getContextType(context_key);
					context.setContextType(context_key, context_type);

				}
			}
			class ContextProcessing {
				private void processContext_0() {
					context.setContextType("hostInterMed", "id_String");
					if (context.getStringValue("hostInterMed") == null) {
						context.hostInterMed = null;
					} else {
						context.hostInterMed = (String) context.getProperty("hostInterMed");
					}
					context.setContextType("portInterMed", "id_String");
					if (context.getStringValue("portInterMed") == null) {
						context.portInterMed = null;
					} else {
						context.portInterMed = (String) context.getProperty("portInterMed");
					}
					context.setContextType("userInterMed", "id_String");
					if (context.getStringValue("userInterMed") == null) {
						context.userInterMed = null;
					} else {
						context.userInterMed = (String) context.getProperty("userInterMed");
					}
					context.setContextType("passwordInterMed", "id_String");
					if (context.getStringValue("passwordInterMed") == null) {
						context.passwordInterMed = null;
					} else {
						context.passwordInterMed = (String) context.getProperty("passwordInterMed");
					}
					context.setContextType("databaseInterMed", "id_String");
					if (context.getStringValue("databaseInterMed") == null) {
						context.databaseInterMed = null;
					} else {
						context.databaseInterMed = (String) context.getProperty("databaseInterMed");
					}
					context.setContextType("processAll", "id_String");
					if (context.getStringValue("processAll") == null) {
						context.processAll = null;
					} else {
						context.processAll = (String) context.getProperty("processAll");
					}
					context.setContextType("postgreUser", "id_String");
					if (context.getStringValue("postgreUser") == null) {
						context.postgreUser = null;
					} else {
						context.postgreUser = (String) context.getProperty("postgreUser");
					}
					context.setContextType("postgrePassword", "id_String");
					if (context.getStringValue("postgrePassword") == null) {
						context.postgrePassword = null;
					} else {
						context.postgrePassword = (String) context.getProperty("postgrePassword");
					}
					context.setContextType("postgreDb", "id_String");
					if (context.getStringValue("postgreDb") == null) {
						context.postgreDb = null;
					} else {
						context.postgreDb = (String) context.getProperty("postgreDb");
					}
				}

				public void processAllContext() {
					processContext_0();
				}
			}

			new ContextProcessing().processAllContext();
		} catch (java.io.IOException ie) {
			System.err.println("Could not load context " + contextStr);
			ie.printStackTrace();
		}

		// get context value from parent directly
		if (parentContextMap != null && !parentContextMap.isEmpty()) {
			if (parentContextMap.containsKey("hostInterMed")) {
				context.hostInterMed = (String) parentContextMap.get("hostInterMed");
			}
			if (parentContextMap.containsKey("portInterMed")) {
				context.portInterMed = (String) parentContextMap.get("portInterMed");
			}
			if (parentContextMap.containsKey("userInterMed")) {
				context.userInterMed = (String) parentContextMap.get("userInterMed");
			}
			if (parentContextMap.containsKey("passwordInterMed")) {
				context.passwordInterMed = (String) parentContextMap.get("passwordInterMed");
			}
			if (parentContextMap.containsKey("databaseInterMed")) {
				context.databaseInterMed = (String) parentContextMap.get("databaseInterMed");
			}
			if (parentContextMap.containsKey("processAll")) {
				context.processAll = (String) parentContextMap.get("processAll");
			}
			if (parentContextMap.containsKey("postgreUser")) {
				context.postgreUser = (String) parentContextMap.get("postgreUser");
			}
			if (parentContextMap.containsKey("postgrePassword")) {
				context.postgrePassword = (String) parentContextMap.get("postgrePassword");
			}
			if (parentContextMap.containsKey("postgreDb")) {
				context.postgreDb = (String) parentContextMap.get("postgreDb");
			}
		}

		// Resume: init the resumeUtil
		resumeEntryMethodName = ResumeUtil.getResumeEntryMethodName(resuming_checkpoint_path);
		resumeUtil = new ResumeUtil(resuming_logs_dir_path, isChildJob, rootPid);
		resumeUtil.initCommonInfo(pid, rootPid, fatherPid, projectName, jobName, contextStr, jobVersion);

		List<String> parametersToEncrypt = new java.util.ArrayList<String>();
		// Resume: jobStart
		resumeUtil.addLog("JOB_STARTED", "JOB:" + jobName, parent_part_launcher, Thread.currentThread().getId() + "",
				"", "", "", "", resumeUtil.convertToJsonText(context, parametersToEncrypt));

		if (execStat) {
			try {
				runStat.openSocket(!isChildJob);
				runStat.setAllPID(rootPid, fatherPid, pid, jobName);
				runStat.startThreadStat(clientHost, portStats);
				runStat.updateStatOnJob(RunStat.JOBSTART, fatherNode);
			} catch (java.io.IOException ioException) {
				ioException.printStackTrace();
			}
		}

		java.util.concurrent.ConcurrentHashMap<Object, Object> concurrentHashMap = new java.util.concurrent.ConcurrentHashMap<Object, Object>();
		globalMap.put("concurrentHashMap", concurrentHashMap);

		long startUsedMemory = Runtime.getRuntime().totalMemory() - Runtime.getRuntime().freeMemory();
		long endUsedMemory = 0;
		long end = 0;

		startTime = System.currentTimeMillis();
		tStatCatcher_1.addMessage("begin");

		this.globalResumeTicket = true;// to run tPreJob

		try {
			tStatCatcher_1Process(globalMap);
		} catch (java.lang.Exception e) {
			e.printStackTrace();
		}

		this.globalResumeTicket = false;// to run others jobs
		final Thread launchingThread = Thread.currentThread();
		runningThreadCount.add(1);
		new Thread() {
			public void run() {
				java.util.Map threadRunResultMap = new java.util.HashMap();
				threadRunResultMap.put("errorCode", null);
				threadRunResultMap.put("status", "");
				threadLocal.set(threadRunResultMap);

				try {
					((java.util.Map) threadLocal.get()).put("errorCode", null);
					tDBConnection_3Process(globalMap);
					if (!"failure".equals(((java.util.Map) threadLocal.get()).get("status"))) {
						((java.util.Map) threadLocal.get()).put("status", "end");
					}
				} catch (TalendException e_tDBConnection_3) {
					globalMap.put("tDBConnection_3_SUBPROCESS_STATE", -1);

					e_tDBConnection_3.printStackTrace();

				} catch (java.lang.Error e_tDBConnection_3) {
					globalMap.put("tDBConnection_3_SUBPROCESS_STATE", -1);
					((java.util.Map) threadLocal.get()).put("status", "failure");
					throw e_tDBConnection_3;

				} finally {
					Integer localErrorCode = (Integer) (((java.util.Map) threadLocal.get()).get("errorCode"));
					String localStatus = (String) (((java.util.Map) threadLocal.get()).get("status"));
					if (localErrorCode != null) {
						if (errorCode == null || localErrorCode.compareTo(errorCode) > 0) {
							errorCode = localErrorCode;
						}
					}
					if (!status.equals("failure")) {
						status = localStatus;
					}

					if ("true".equals(((java.util.Map) threadLocal.get()).get("JobInterrupted"))) {
						launchingThread.interrupt();
					}

					runningThreadCount.add(-1);
				}
			}
		}.start();

		boolean interrupted = false;
		while (runningThreadCount.getCount() > 0) {
			try {
				Thread.sleep(10);
			} catch (java.lang.InterruptedException e) {
				interrupted = true;
			} catch (java.lang.Exception e) {
				e.printStackTrace();
			}
		}

		if (interrupted) {
			Thread.currentThread().interrupt();
		}

		this.globalResumeTicket = true;// to run tPostJob

		end = System.currentTimeMillis();

		if (watch) {
			System.out.println((end - startTime) + " milliseconds");
		}

		endUsedMemory = Runtime.getRuntime().totalMemory() - Runtime.getRuntime().freeMemory();
		if (false) {
			System.out.println(
					(endUsedMemory - startUsedMemory) + " bytes memory increase when running : E1a_Marc_a_interm_Copy");
		}
		tStatCatcher_1.addMessage(status == "" ? "end" : status, (end - startTime));
		try {
			tStatCatcher_1Process(globalMap);
		} catch (java.lang.Exception e) {
			e.printStackTrace();
		}

		if (execStat) {
			runStat.updateStatOnJob(RunStat.JOBEND, fatherNode);
			runStat.stopThreadStat();
		}
		int returnCode = 0;

		Integer localErrorCode = (Integer) (((java.util.Map) threadLocal.get()).get("errorCode"));
		String localStatus = (String) (((java.util.Map) threadLocal.get()).get("status"));
		if (localErrorCode != null) {
			if (errorCode == null || localErrorCode.compareTo(errorCode) > 0) {
				errorCode = localErrorCode;
			}
		}
		if (localStatus != null && !status.equals("failure")) {
			status = localStatus;
		}

		if (errorCode == null) {
			returnCode = status != null && status.equals("failure") ? 1 : 0;
		} else {
			returnCode = errorCode.intValue();
		}
		resumeUtil.addLog("JOB_ENDED", "JOB:" + jobName, parent_part_launcher, Thread.currentThread().getId() + "", "",
				"" + returnCode, "", "", "");

		return returnCode;

	}

	// only for OSGi env
	public void destroy() {
		closeSqlDbConnections();

	}

	private void closeSqlDbConnections() {
		try {
			Object obj_conn;
			obj_conn = globalMap.remove("conn_tDBConnection_3");
			if (null != obj_conn) {
				((java.sql.Connection) obj_conn).close();
			}
			obj_conn = globalMap.remove("conn_tDBConnection_1");
			if (null != obj_conn) {
				((java.sql.Connection) obj_conn).close();
			}
			obj_conn = globalMap.remove("conn_tDBConnection_2");
			if (null != obj_conn) {
				((java.sql.Connection) obj_conn).close();
			}
		} catch (java.lang.Exception e) {
		}
	}

	private java.util.Map<String, Object> getSharedConnections4REST() {
		java.util.Map<String, Object> connections = new java.util.HashMap<String, Object>();
		connections.put("conn_tDBConnection_3", globalMap.get("conn_tDBConnection_3"));
		connections.put("conn_tDBConnection_1", globalMap.get("conn_tDBConnection_1"));
		connections.put("conn_tDBConnection_2", globalMap.get("conn_tDBConnection_2"));

		return connections;
	}

	private void evalParam(String arg) {
		if (arg.startsWith("--resuming_logs_dir_path")) {
			resuming_logs_dir_path = arg.substring(25);
		} else if (arg.startsWith("--resuming_checkpoint_path")) {
			resuming_checkpoint_path = arg.substring(27);
		} else if (arg.startsWith("--parent_part_launcher")) {
			parent_part_launcher = arg.substring(23);
		} else if (arg.startsWith("--watch")) {
			watch = true;
		} else if (arg.startsWith("--stat_port=")) {
			String portStatsStr = arg.substring(12);
			if (portStatsStr != null && !portStatsStr.equals("null")) {
				portStats = Integer.parseInt(portStatsStr);
			}
		} else if (arg.startsWith("--trace_port=")) {
			portTraces = Integer.parseInt(arg.substring(13));
		} else if (arg.startsWith("--client_host=")) {
			clientHost = arg.substring(14);
		} else if (arg.startsWith("--context=")) {
			contextStr = arg.substring(10);
			isDefaultContext = false;
		} else if (arg.startsWith("--father_pid=")) {
			fatherPid = arg.substring(13);
		} else if (arg.startsWith("--root_pid=")) {
			rootPid = arg.substring(11);
		} else if (arg.startsWith("--father_node=")) {
			fatherNode = arg.substring(14);
		} else if (arg.startsWith("--pid=")) {
			pid = arg.substring(6);
		} else if (arg.startsWith("--context_type")) {
			String keyValue = arg.substring(15);
			int index = -1;
			if (keyValue != null && (index = keyValue.indexOf('=')) > -1) {
				if (fatherPid == null) {
					context_param.setContextType(keyValue.substring(0, index),
							replaceEscapeChars(keyValue.substring(index + 1)));
				} else { // the subjob won't escape the especial chars
					context_param.setContextType(keyValue.substring(0, index), keyValue.substring(index + 1));
				}

			}

		} else if (arg.startsWith("--context_param")) {
			String keyValue = arg.substring(16);
			int index = -1;
			if (keyValue != null && (index = keyValue.indexOf('=')) > -1) {
				if (fatherPid == null) {
					context_param.put(keyValue.substring(0, index), replaceEscapeChars(keyValue.substring(index + 1)));
				} else { // the subjob won't escape the especial chars
					context_param.put(keyValue.substring(0, index), keyValue.substring(index + 1));
				}
			}
		} else if (arg.startsWith("--log4jLevel=")) {
			log4jLevel = arg.substring(13);
		} else if (arg.startsWith("--audit.enabled") && arg.contains("=")) {// for trunjob call
			final int equal = arg.indexOf('=');
			final String key = arg.substring("--".length(), equal);
			System.setProperty(key, arg.substring(equal + 1));
		}
	}

	private static final String NULL_VALUE_EXPRESSION_IN_COMMAND_STRING_FOR_CHILD_JOB_ONLY = "<TALEND_NULL>";

	private final String[][] escapeChars = { { "\\\\", "\\" }, { "\\n", "\n" }, { "\\'", "\'" }, { "\\r", "\r" },
			{ "\\f", "\f" }, { "\\b", "\b" }, { "\\t", "\t" } };

	private String replaceEscapeChars(String keyValue) {

		if (keyValue == null || ("").equals(keyValue.trim())) {
			return keyValue;
		}

		StringBuilder result = new StringBuilder();
		int currIndex = 0;
		while (currIndex < keyValue.length()) {
			int index = -1;
			// judege if the left string includes escape chars
			for (String[] strArray : escapeChars) {
				index = keyValue.indexOf(strArray[0], currIndex);
				if (index >= 0) {

					result.append(keyValue.substring(currIndex, index + strArray[0].length()).replace(strArray[0],
							strArray[1]));
					currIndex = index + strArray[0].length();
					break;
				}
			}
			// if the left string doesn't include escape chars, append the left into the
			// result
			if (index < 0) {
				result.append(keyValue.substring(currIndex));
				currIndex = currIndex + keyValue.length();
			}
		}

		return result.toString();
	}

	public Integer getErrorCode() {
		return errorCode;
	}

	public String getStatus() {
		return status;
	}

	ResumeUtil resumeUtil = null;
}
/************************************************************************************************
 * 438404 characters generated by Talend Open Studio for Data Integration on the
 * October 30, 2020 at 7:29:43 PM CET
 ************************************************************************************************/