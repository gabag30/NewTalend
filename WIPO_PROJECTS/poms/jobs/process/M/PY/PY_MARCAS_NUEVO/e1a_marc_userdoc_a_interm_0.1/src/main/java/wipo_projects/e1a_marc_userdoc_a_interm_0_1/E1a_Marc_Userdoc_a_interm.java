// ============================================================================
//
// Copyright (c) 2006-2015, Talend Inc.
//
// This source code has been automatically generated by_Talend Open Studio for Data Integration
// / Licensed under the Apache License, Version 2.0 (the "License");
// you may not use this file except in compliance with the License.
// You may obtain a copy of the License at
// http://www.apache.org/licenses/LICENSE-2.0
// 
// Unless required by applicable law or agreed to in writing, software
// distributed under the License is distributed on an "AS IS" BASIS,
// WITHOUT WARRANTIES OR CONDITIONS OF ANY KIND, either express or implied.
// See the License for the specific language governing permissions and
// limitations under the License.

package wipo_projects.e1a_marc_userdoc_a_interm_0_1;

import routines.Numeric;
import routines.DataOperation;
import routines.TalendDataGenerator;
import routines.TalendStringUtil;
import routines.TalendString;
import routines.StringHandling;
import routines.Relational;
import routines.TalendDate;
import routines.Mathematical;
import routines.IPAS;
import routines.system.*;
import routines.system.api.*;
import java.text.ParseException;
import java.text.SimpleDateFormat;
import java.util.Date;
import java.util.List;
import java.math.BigDecimal;
import java.io.ByteArrayOutputStream;
import java.io.ByteArrayInputStream;
import java.io.DataInputStream;
import java.io.DataOutputStream;
import java.io.ObjectOutputStream;
import java.io.ObjectInputStream;
import java.io.IOException;
import java.util.Comparator;

@SuppressWarnings("unused")

/**
 * Job: E1a_Marc_Userdoc_a_interm Purpose: migracion userdoc marcas<br>
 * Description: <br>
 * 
 * @author gabriel.berlicki@wipo.int
 * @version 7.4.1.20201015_1726-M3
 * @status
 */
public class E1a_Marc_Userdoc_a_interm implements TalendJob {

	protected static void logIgnoredError(String message, Throwable cause) {
		System.err.println(message);
		if (cause != null) {
			cause.printStackTrace();
		}

	}

	public final Object obj = new Object();

	// for transmiting parameters purpose
	private Object valueObject = null;

	public Object getValueObject() {
		return this.valueObject;
	}

	public void setValueObject(Object valueObject) {
		this.valueObject = valueObject;
	}

	private Object[] multiThreadLockWrite = new Object[0];

	private final static String defaultCharset = java.nio.charset.Charset.defaultCharset().name();

	private final static String utf8Charset = "UTF-8";

	// contains type for every context property
	public class PropertiesWithType extends java.util.Properties {
		private static final long serialVersionUID = 1L;
		private java.util.Map<String, String> propertyTypes = new java.util.HashMap<>();

		public PropertiesWithType(java.util.Properties properties) {
			super(properties);
		}

		public PropertiesWithType() {
			super();
		}

		public void setContextType(String key, String type) {
			propertyTypes.put(key, type);
		}

		public String getContextType(String key) {
			return propertyTypes.get(key);
		}
	}

	// create and load default properties
	private java.util.Properties defaultProps = new java.util.Properties();

	// create application properties with default
	public class ContextProperties extends PropertiesWithType {

		private static final long serialVersionUID = 1L;

		public ContextProperties(java.util.Properties properties) {
			super(properties);
		}

		public ContextProperties() {
			super();
		}

		public void synchronizeContext() {

			if (hostInterMed != null) {

				this.setProperty("hostInterMed", hostInterMed.toString());

			}

			if (portInterMed != null) {

				this.setProperty("portInterMed", portInterMed.toString());

			}

			if (userInterMed != null) {

				this.setProperty("userInterMed", userInterMed.toString());

			}

			if (passwordInterMed != null) {

				this.setProperty("passwordInterMed", passwordInterMed.toString());

			}

			if (databaseInterMed != null) {

				this.setProperty("databaseInterMed", databaseInterMed.toString());

			}

			if (processAll != null) {

				this.setProperty("processAll", processAll.toString());

			}

			if (postgreUser != null) {

				this.setProperty("postgreUser", postgreUser.toString());

			}

			if (postgrePassword != null) {

				this.setProperty("postgrePassword", postgrePassword.toString());

			}

			if (postgreDb != null) {

				this.setProperty("postgreDb", postgreDb.toString());

			}

		}

		// if the stored or passed value is "<TALEND_NULL>" string, it mean null
		public String getStringValue(String key) {
			String origin_value = this.getProperty(key);
			if (NULL_VALUE_EXPRESSION_IN_COMMAND_STRING_FOR_CHILD_JOB_ONLY.equals(origin_value)) {
				return null;
			}
			return origin_value;
		}

		public String hostInterMed;

		public String getHostInterMed() {
			return this.hostInterMed;
		}

		public String portInterMed;

		public String getPortInterMed() {
			return this.portInterMed;
		}

		public String userInterMed;

		public String getUserInterMed() {
			return this.userInterMed;
		}

		public String passwordInterMed;

		public String getPasswordInterMed() {
			return this.passwordInterMed;
		}

		public String databaseInterMed;

		public String getDatabaseInterMed() {
			return this.databaseInterMed;
		}

		public String processAll;

		public String getProcessAll() {
			return this.processAll;
		}

		public String postgreUser;

		public String getPostgreUser() {
			return this.postgreUser;
		}

		public String postgrePassword;

		public String getPostgrePassword() {
			return this.postgrePassword;
		}

		public String postgreDb;

		public String getPostgreDb() {
			return this.postgreDb;
		}
	}

	protected ContextProperties context = new ContextProperties(); // will be instanciated by MS.

	public ContextProperties getContext() {
		return this.context;
	}

	private final String jobVersion = "0.1";
	private final String jobName = "E1a_Marc_Userdoc_a_interm";
	private final String projectName = "WIPO_PROJECTS";
	public Integer errorCode = null;
	private String currentComponent = "";

	private final java.util.Map<String, Object> globalMap = java.util.Collections
			.synchronizedMap(new java.util.HashMap<String, Object>());

	private final java.util.Map<String, Long> start_Hash = java.util.Collections
			.synchronizedMap(new java.util.HashMap<String, Long>());
	private final java.util.Map<String, Long> end_Hash = java.util.Collections
			.synchronizedMap(new java.util.HashMap<String, Long>());
	private final java.util.Map<String, Boolean> ok_Hash = java.util.Collections
			.synchronizedMap(new java.util.HashMap<String, Boolean>());
	public final java.util.List<String[]> globalBuffer = java.util.Collections
			.synchronizedList(new java.util.ArrayList<String[]>());

	private RunStat runStat = new RunStat();

	// OSGi DataSource
	private final static String KEY_DB_DATASOURCES = "KEY_DB_DATASOURCES";

	private final static String KEY_DB_DATASOURCES_RAW = "KEY_DB_DATASOURCES_RAW";

	public void setDataSources(java.util.Map<String, javax.sql.DataSource> dataSources) {
		java.util.Map<String, routines.system.TalendDataSource> talendDataSources = new java.util.HashMap<String, routines.system.TalendDataSource>();
		for (java.util.Map.Entry<String, javax.sql.DataSource> dataSourceEntry : dataSources.entrySet()) {
			talendDataSources.put(dataSourceEntry.getKey(),
					new routines.system.TalendDataSource(dataSourceEntry.getValue()));
		}
		globalMap.put(KEY_DB_DATASOURCES, talendDataSources);
		globalMap.put(KEY_DB_DATASOURCES_RAW, new java.util.HashMap<String, javax.sql.DataSource>(dataSources));
	}

	StatCatcherUtils tStatCatcher_1 = new StatCatcherUtils("_7iUjsBq7EeuOueoz23vjqQ", "0.1");

	private final java.io.ByteArrayOutputStream baos = new java.io.ByteArrayOutputStream();
	private final java.io.PrintStream errorMessagePS = new java.io.PrintStream(new java.io.BufferedOutputStream(baos));

	public String getExceptionStackTrace() {
		if ("failure".equals(this.getStatus())) {
			errorMessagePS.flush();
			return baos.toString();
		}
		return null;
	}

	private Exception exception;

	public Exception getException() {
		if ("failure".equals(this.getStatus())) {
			return this.exception;
		}
		return null;
	}

	private class TalendException extends Exception {

		private static final long serialVersionUID = 1L;

		private java.util.Map<String, Object> globalMap = null;
		private Exception e = null;
		private String currentComponent = null;
		private String virtualComponentName = null;

		public void setVirtualComponentName(String virtualComponentName) {
			this.virtualComponentName = virtualComponentName;
		}

		private TalendException(Exception e, String errorComponent, final java.util.Map<String, Object> globalMap) {
			this.currentComponent = errorComponent;
			this.globalMap = globalMap;
			this.e = e;
		}

		public Exception getException() {
			return this.e;
		}

		public String getCurrentComponent() {
			return this.currentComponent;
		}

		public String getExceptionCauseMessage(Exception e) {
			Throwable cause = e;
			String message = null;
			int i = 10;
			while (null != cause && 0 < i--) {
				message = cause.getMessage();
				if (null == message) {
					cause = cause.getCause();
				} else {
					break;
				}
			}
			if (null == message) {
				message = e.getClass().getName();
			}
			return message;
		}

		@Override
		public void printStackTrace() {
			if (!(e instanceof TalendException || e instanceof TDieException)) {
				if (virtualComponentName != null && currentComponent.indexOf(virtualComponentName + "_") == 0) {
					globalMap.put(virtualComponentName + "_ERROR_MESSAGE", getExceptionCauseMessage(e));
				}
				globalMap.put(currentComponent + "_ERROR_MESSAGE", getExceptionCauseMessage(e));
				System.err.println("Exception in component " + currentComponent + " (" + jobName + ")");
			}
			if (!(e instanceof TDieException)) {
				if (e instanceof TalendException) {
					e.printStackTrace();
				} else {
					e.printStackTrace();
					e.printStackTrace(errorMessagePS);
					E1a_Marc_Userdoc_a_interm.this.exception = e;
				}
			}
			if (!(e instanceof TalendException)) {
				try {
					for (java.lang.reflect.Method m : this.getClass().getEnclosingClass().getMethods()) {
						if (m.getName().compareTo(currentComponent + "_error") == 0) {
							m.invoke(E1a_Marc_Userdoc_a_interm.this, new Object[] { e, currentComponent, globalMap });
							break;
						}
					}

					if (!(e instanceof TDieException)) {
					}
				} catch (Exception e) {
					this.e.printStackTrace();
				}
			}
		}
	}

	public void tDBConnection_1_error(Exception exception, String errorComponent,
			final java.util.Map<String, Object> globalMap) throws TalendException {

		end_Hash.put(errorComponent, System.currentTimeMillis());

		((java.util.Map) threadLocal.get()).put("status", "failure");

		tDBConnection_1_onSubJobError(exception, errorComponent, globalMap);
	}

	public void tDBInput_2_error(Exception exception, String errorComponent,
			final java.util.Map<String, Object> globalMap) throws TalendException {

		end_Hash.put(errorComponent, System.currentTimeMillis());

		((java.util.Map) threadLocal.get()).put("status", "failure");

		tDBInput_2_onSubJobError(exception, errorComponent, globalMap);
	}

	public void tMap_1_error(Exception exception, String errorComponent, final java.util.Map<String, Object> globalMap)
			throws TalendException {

		end_Hash.put(errorComponent, System.currentTimeMillis());

		((java.util.Map) threadLocal.get()).put("status", "failure");

		tDBInput_2_onSubJobError(exception, errorComponent, globalMap);
	}

	public void tDBOutput_1_error(Exception exception, String errorComponent,
			final java.util.Map<String, Object> globalMap) throws TalendException {

		end_Hash.put(errorComponent, System.currentTimeMillis());

		((java.util.Map) threadLocal.get()).put("status", "failure");

		tDBInput_2_onSubJobError(exception, errorComponent, globalMap);
	}

	public void tLogRow_1_error(Exception exception, String errorComponent,
			final java.util.Map<String, Object> globalMap) throws TalendException {

		end_Hash.put(errorComponent, System.currentTimeMillis());

		((java.util.Map) threadLocal.get()).put("status", "failure");

		tDBInput_2_onSubJobError(exception, errorComponent, globalMap);
	}

	public void tDBInput_7_error(Exception exception, String errorComponent,
			final java.util.Map<String, Object> globalMap) throws TalendException {

		end_Hash.put(errorComponent, System.currentTimeMillis());

		((java.util.Map) threadLocal.get()).put("status", "failure");

		tDBInput_7_onSubJobError(exception, errorComponent, globalMap);
	}

	public void tMap_2_error(Exception exception, String errorComponent, final java.util.Map<String, Object> globalMap)
			throws TalendException {

		end_Hash.put(errorComponent, System.currentTimeMillis());

		((java.util.Map) threadLocal.get()).put("status", "failure");

		tDBInput_7_onSubJobError(exception, errorComponent, globalMap);
	}

	public void tDBOutput_2_error(Exception exception, String errorComponent,
			final java.util.Map<String, Object> globalMap) throws TalendException {

		end_Hash.put(errorComponent, System.currentTimeMillis());

		((java.util.Map) threadLocal.get()).put("status", "failure");

		tDBInput_7_onSubJobError(exception, errorComponent, globalMap);
	}

	public void tLogRow_2_error(Exception exception, String errorComponent,
			final java.util.Map<String, Object> globalMap) throws TalendException {

		end_Hash.put(errorComponent, System.currentTimeMillis());

		((java.util.Map) threadLocal.get()).put("status", "failure");

		tDBInput_7_onSubJobError(exception, errorComponent, globalMap);
	}

	public void tDBInput_11_error(Exception exception, String errorComponent,
			final java.util.Map<String, Object> globalMap) throws TalendException {

		end_Hash.put(errorComponent, System.currentTimeMillis());

		((java.util.Map) threadLocal.get()).put("status", "failure");

		tDBInput_11_onSubJobError(exception, errorComponent, globalMap);
	}

	public void tMap_4_error(Exception exception, String errorComponent, final java.util.Map<String, Object> globalMap)
			throws TalendException {

		end_Hash.put(errorComponent, System.currentTimeMillis());

		((java.util.Map) threadLocal.get()).put("status", "failure");

		tDBInput_11_onSubJobError(exception, errorComponent, globalMap);
	}

	public void tDBOutput_3_error(Exception exception, String errorComponent,
			final java.util.Map<String, Object> globalMap) throws TalendException {

		end_Hash.put(errorComponent, System.currentTimeMillis());

		((java.util.Map) threadLocal.get()).put("status", "failure");

		tDBInput_11_onSubJobError(exception, errorComponent, globalMap);
	}

	public void tLogRow_3_error(Exception exception, String errorComponent,
			final java.util.Map<String, Object> globalMap) throws TalendException {

		end_Hash.put(errorComponent, System.currentTimeMillis());

		((java.util.Map) threadLocal.get()).put("status", "failure");

		tDBInput_11_onSubJobError(exception, errorComponent, globalMap);
	}

	public void tDBInput_1_error(Exception exception, String errorComponent,
			final java.util.Map<String, Object> globalMap) throws TalendException {

		end_Hash.put(errorComponent, System.currentTimeMillis());

		((java.util.Map) threadLocal.get()).put("status", "failure");

		tDBInput_1_onSubJobError(exception, errorComponent, globalMap);
	}

	public void tMap_6_error(Exception exception, String errorComponent, final java.util.Map<String, Object> globalMap)
			throws TalendException {

		end_Hash.put(errorComponent, System.currentTimeMillis());

		((java.util.Map) threadLocal.get()).put("status", "failure");

		tDBInput_1_onSubJobError(exception, errorComponent, globalMap);
	}

	public void tDBOutput_5_error(Exception exception, String errorComponent,
			final java.util.Map<String, Object> globalMap) throws TalendException {

		end_Hash.put(errorComponent, System.currentTimeMillis());

		((java.util.Map) threadLocal.get()).put("status", "failure");

		tDBInput_1_onSubJobError(exception, errorComponent, globalMap);
	}

	public void tLogRow_5_error(Exception exception, String errorComponent,
			final java.util.Map<String, Object> globalMap) throws TalendException {

		end_Hash.put(errorComponent, System.currentTimeMillis());

		((java.util.Map) threadLocal.get()).put("status", "failure");

		tDBInput_1_onSubJobError(exception, errorComponent, globalMap);
	}

	public void tDBInput_15_error(Exception exception, String errorComponent,
			final java.util.Map<String, Object> globalMap) throws TalendException {

		end_Hash.put(errorComponent, System.currentTimeMillis());

		((java.util.Map) threadLocal.get()).put("status", "failure");

		tDBInput_15_onSubJobError(exception, errorComponent, globalMap);
	}

	public void tMap_7_error(Exception exception, String errorComponent, final java.util.Map<String, Object> globalMap)
			throws TalendException {

		end_Hash.put(errorComponent, System.currentTimeMillis());

		((java.util.Map) threadLocal.get()).put("status", "failure");

		tDBInput_15_onSubJobError(exception, errorComponent, globalMap);
	}

	public void tDBOutput_7_error(Exception exception, String errorComponent,
			final java.util.Map<String, Object> globalMap) throws TalendException {

		end_Hash.put(errorComponent, System.currentTimeMillis());

		((java.util.Map) threadLocal.get()).put("status", "failure");

		tDBInput_15_onSubJobError(exception, errorComponent, globalMap);
	}

	public void tLogRow_7_error(Exception exception, String errorComponent,
			final java.util.Map<String, Object> globalMap) throws TalendException {

		end_Hash.put(errorComponent, System.currentTimeMillis());

		((java.util.Map) threadLocal.get()).put("status", "failure");

		tDBInput_15_onSubJobError(exception, errorComponent, globalMap);
	}

	public void tDBInput_3_error(Exception exception, String errorComponent,
			final java.util.Map<String, Object> globalMap) throws TalendException {

		end_Hash.put(errorComponent, System.currentTimeMillis());

		((java.util.Map) threadLocal.get()).put("status", "failure");

		tDBInput_3_onSubJobError(exception, errorComponent, globalMap);
	}

	public void tMap_8_error(Exception exception, String errorComponent, final java.util.Map<String, Object> globalMap)
			throws TalendException {

		end_Hash.put(errorComponent, System.currentTimeMillis());

		((java.util.Map) threadLocal.get()).put("status", "failure");

		tDBInput_3_onSubJobError(exception, errorComponent, globalMap);
	}

	public void tDBOutput_8_error(Exception exception, String errorComponent,
			final java.util.Map<String, Object> globalMap) throws TalendException {

		end_Hash.put(errorComponent, System.currentTimeMillis());

		((java.util.Map) threadLocal.get()).put("status", "failure");

		tDBInput_3_onSubJobError(exception, errorComponent, globalMap);
	}

	public void tLogRow_8_error(Exception exception, String errorComponent,
			final java.util.Map<String, Object> globalMap) throws TalendException {

		end_Hash.put(errorComponent, System.currentTimeMillis());

		((java.util.Map) threadLocal.get()).put("status", "failure");

		tDBInput_3_onSubJobError(exception, errorComponent, globalMap);
	}

	public void tDBConnection_2_error(Exception exception, String errorComponent,
			final java.util.Map<String, Object> globalMap) throws TalendException {

		end_Hash.put(errorComponent, System.currentTimeMillis());

		((java.util.Map) threadLocal.get()).put("status", "failure");

		tDBConnection_2_onSubJobError(exception, errorComponent, globalMap);
	}

	public void tDBConnection_3_error(Exception exception, String errorComponent,
			final java.util.Map<String, Object> globalMap) throws TalendException {

		end_Hash.put(errorComponent, System.currentTimeMillis());

		((java.util.Map) threadLocal.get()).put("status", "failure");

		tDBConnection_3_onSubJobError(exception, errorComponent, globalMap);
	}

	public void tDBInput_5_error(Exception exception, String errorComponent,
			final java.util.Map<String, Object> globalMap) throws TalendException {

		end_Hash.put(errorComponent, System.currentTimeMillis());

		((java.util.Map) threadLocal.get()).put("status", "failure");

		tDBInput_7_onSubJobError(exception, errorComponent, globalMap);
	}

	public void tDBInput_8_error(Exception exception, String errorComponent,
			final java.util.Map<String, Object> globalMap) throws TalendException {

		end_Hash.put(errorComponent, System.currentTimeMillis());

		((java.util.Map) threadLocal.get()).put("status", "failure");

		tDBInput_7_onSubJobError(exception, errorComponent, globalMap);
	}

	public void tDBInput_9_error(Exception exception, String errorComponent,
			final java.util.Map<String, Object> globalMap) throws TalendException {

		end_Hash.put(errorComponent, System.currentTimeMillis());

		((java.util.Map) threadLocal.get()).put("status", "failure");

		tDBInput_11_onSubJobError(exception, errorComponent, globalMap);
	}

	public void tDBInput_10_error(Exception exception, String errorComponent,
			final java.util.Map<String, Object> globalMap) throws TalendException {

		end_Hash.put(errorComponent, System.currentTimeMillis());

		((java.util.Map) threadLocal.get()).put("status", "failure");

		tDBInput_1_onSubJobError(exception, errorComponent, globalMap);
	}

	public void tDBInput_14_error(Exception exception, String errorComponent,
			final java.util.Map<String, Object> globalMap) throws TalendException {

		end_Hash.put(errorComponent, System.currentTimeMillis());

		((java.util.Map) threadLocal.get()).put("status", "failure");

		tDBInput_1_onSubJobError(exception, errorComponent, globalMap);
	}

	public void tDBInput_16_error(Exception exception, String errorComponent,
			final java.util.Map<String, Object> globalMap) throws TalendException {

		end_Hash.put(errorComponent, System.currentTimeMillis());

		((java.util.Map) threadLocal.get()).put("status", "failure");

		tDBInput_2_onSubJobError(exception, errorComponent, globalMap);
	}

	public void tDBInput_17_error(Exception exception, String errorComponent,
			final java.util.Map<String, Object> globalMap) throws TalendException {

		end_Hash.put(errorComponent, System.currentTimeMillis());

		((java.util.Map) threadLocal.get()).put("status", "failure");

		tDBInput_3_onSubJobError(exception, errorComponent, globalMap);
	}

	public void tDBInput_18_error(Exception exception, String errorComponent,
			final java.util.Map<String, Object> globalMap) throws TalendException {

		end_Hash.put(errorComponent, System.currentTimeMillis());

		((java.util.Map) threadLocal.get()).put("status", "failure");

		tDBInput_3_onSubJobError(exception, errorComponent, globalMap);
	}

	public void tStatCatcher_1_error(Exception exception, String errorComponent,
			final java.util.Map<String, Object> globalMap) throws TalendException {

		end_Hash.put(errorComponent, System.currentTimeMillis());

		((java.util.Map) threadLocal.get()).put("status", "failure");

		tStatCatcher_1_onSubJobError(exception, errorComponent, globalMap);
	}

	public void tLogRow_13_error(Exception exception, String errorComponent,
			final java.util.Map<String, Object> globalMap) throws TalendException {

		end_Hash.put(errorComponent, System.currentTimeMillis());

		((java.util.Map) threadLocal.get()).put("status", "failure");

		tStatCatcher_1_onSubJobError(exception, errorComponent, globalMap);
	}

	public void tAdvancedHash_row7_error(Exception exception, String errorComponent,
			final java.util.Map<String, Object> globalMap) throws TalendException {

		end_Hash.put(errorComponent, System.currentTimeMillis());

		((java.util.Map) threadLocal.get()).put("status", "failure");

		tDBInput_7_onSubJobError(exception, errorComponent, globalMap);
	}

	public void tAdvancedHash_row12_error(Exception exception, String errorComponent,
			final java.util.Map<String, Object> globalMap) throws TalendException {

		end_Hash.put(errorComponent, System.currentTimeMillis());

		((java.util.Map) threadLocal.get()).put("status", "failure");

		tDBInput_7_onSubJobError(exception, errorComponent, globalMap);
	}

	public void tAdvancedHash_row14_error(Exception exception, String errorComponent,
			final java.util.Map<String, Object> globalMap) throws TalendException {

		end_Hash.put(errorComponent, System.currentTimeMillis());

		((java.util.Map) threadLocal.get()).put("status", "failure");

		tDBInput_11_onSubJobError(exception, errorComponent, globalMap);
	}

	public void tAdvancedHash_row15_error(Exception exception, String errorComponent,
			final java.util.Map<String, Object> globalMap) throws TalendException {

		end_Hash.put(errorComponent, System.currentTimeMillis());

		((java.util.Map) threadLocal.get()).put("status", "failure");

		tDBInput_1_onSubJobError(exception, errorComponent, globalMap);
	}

	public void tAdvancedHash_row22_error(Exception exception, String errorComponent,
			final java.util.Map<String, Object> globalMap) throws TalendException {

		end_Hash.put(errorComponent, System.currentTimeMillis());

		((java.util.Map) threadLocal.get()).put("status", "failure");

		tDBInput_1_onSubJobError(exception, errorComponent, globalMap);
	}

	public void tAdvancedHash_row5_error(Exception exception, String errorComponent,
			final java.util.Map<String, Object> globalMap) throws TalendException {

		end_Hash.put(errorComponent, System.currentTimeMillis());

		((java.util.Map) threadLocal.get()).put("status", "failure");

		tDBInput_2_onSubJobError(exception, errorComponent, globalMap);
	}

	public void tAdvancedHash_row27_error(Exception exception, String errorComponent,
			final java.util.Map<String, Object> globalMap) throws TalendException {

		end_Hash.put(errorComponent, System.currentTimeMillis());

		((java.util.Map) threadLocal.get()).put("status", "failure");

		tDBInput_3_onSubJobError(exception, errorComponent, globalMap);
	}

	public void tAdvancedHash_row28_error(Exception exception, String errorComponent,
			final java.util.Map<String, Object> globalMap) throws TalendException {

		end_Hash.put(errorComponent, System.currentTimeMillis());

		((java.util.Map) threadLocal.get()).put("status", "failure");

		tDBInput_3_onSubJobError(exception, errorComponent, globalMap);
	}

	public void tDBConnection_1_onSubJobError(Exception exception, String errorComponent,
			final java.util.Map<String, Object> globalMap) throws TalendException {

		resumeUtil.addLog("SYSTEM_LOG", "NODE:" + errorComponent, "", Thread.currentThread().getId() + "", "FATAL", "",
				exception.getMessage(), ResumeUtil.getExceptionStackTrace(exception), "");

	}

	public void tDBInput_2_onSubJobError(Exception exception, String errorComponent,
			final java.util.Map<String, Object> globalMap) throws TalendException {

		resumeUtil.addLog("SYSTEM_LOG", "NODE:" + errorComponent, "", Thread.currentThread().getId() + "", "FATAL", "",
				exception.getMessage(), ResumeUtil.getExceptionStackTrace(exception), "");

	}

	public void tDBInput_7_onSubJobError(Exception exception, String errorComponent,
			final java.util.Map<String, Object> globalMap) throws TalendException {

		resumeUtil.addLog("SYSTEM_LOG", "NODE:" + errorComponent, "", Thread.currentThread().getId() + "", "FATAL", "",
				exception.getMessage(), ResumeUtil.getExceptionStackTrace(exception), "");

	}

	public void tDBInput_11_onSubJobError(Exception exception, String errorComponent,
			final java.util.Map<String, Object> globalMap) throws TalendException {

		resumeUtil.addLog("SYSTEM_LOG", "NODE:" + errorComponent, "", Thread.currentThread().getId() + "", "FATAL", "",
				exception.getMessage(), ResumeUtil.getExceptionStackTrace(exception), "");

	}

	public void tDBInput_1_onSubJobError(Exception exception, String errorComponent,
			final java.util.Map<String, Object> globalMap) throws TalendException {

		resumeUtil.addLog("SYSTEM_LOG", "NODE:" + errorComponent, "", Thread.currentThread().getId() + "", "FATAL", "",
				exception.getMessage(), ResumeUtil.getExceptionStackTrace(exception), "");

	}

	public void tDBInput_15_onSubJobError(Exception exception, String errorComponent,
			final java.util.Map<String, Object> globalMap) throws TalendException {

		resumeUtil.addLog("SYSTEM_LOG", "NODE:" + errorComponent, "", Thread.currentThread().getId() + "", "FATAL", "",
				exception.getMessage(), ResumeUtil.getExceptionStackTrace(exception), "");

	}

	public void tDBInput_3_onSubJobError(Exception exception, String errorComponent,
			final java.util.Map<String, Object> globalMap) throws TalendException {

		resumeUtil.addLog("SYSTEM_LOG", "NODE:" + errorComponent, "", Thread.currentThread().getId() + "", "FATAL", "",
				exception.getMessage(), ResumeUtil.getExceptionStackTrace(exception), "");

	}

	public void tDBConnection_2_onSubJobError(Exception exception, String errorComponent,
			final java.util.Map<String, Object> globalMap) throws TalendException {

		resumeUtil.addLog("SYSTEM_LOG", "NODE:" + errorComponent, "", Thread.currentThread().getId() + "", "FATAL", "",
				exception.getMessage(), ResumeUtil.getExceptionStackTrace(exception), "");

	}

	public void tDBConnection_3_onSubJobError(Exception exception, String errorComponent,
			final java.util.Map<String, Object> globalMap) throws TalendException {

		resumeUtil.addLog("SYSTEM_LOG", "NODE:" + errorComponent, "", Thread.currentThread().getId() + "", "FATAL", "",
				exception.getMessage(), ResumeUtil.getExceptionStackTrace(exception), "");

	}

	public void tStatCatcher_1_onSubJobError(Exception exception, String errorComponent,
			final java.util.Map<String, Object> globalMap) throws TalendException {

		resumeUtil.addLog("SYSTEM_LOG", "NODE:" + errorComponent, "", Thread.currentThread().getId() + "", "FATAL", "",
				exception.getMessage(), ResumeUtil.getExceptionStackTrace(exception), "");

	}

	public void tDBConnection_1Process(final java.util.Map<String, Object> globalMap) throws TalendException {
		globalMap.put("tDBConnection_1_SUBPROCESS_STATE", 0);

		final boolean execStat = this.execStat;

		String iterateId = "";

		String currentComponent = "";
		java.util.Map<String, Object> resourceMap = new java.util.HashMap<String, Object>();

		try {
			// TDI-39566 avoid throwing an useless Exception
			boolean resumeIt = true;
			if (globalResumeTicket == false && resumeEntryMethodName != null) {
				String currentMethodName = new java.lang.Exception().getStackTrace()[0].getMethodName();
				resumeIt = resumeEntryMethodName.equals(currentMethodName);
			}
			if (resumeIt || globalResumeTicket) { // start the resume
				globalResumeTicket = true;

				/**
				 * [tDBConnection_1 begin ] start
				 */

				ok_Hash.put("tDBConnection_1", false);
				start_Hash.put("tDBConnection_1", System.currentTimeMillis());

				currentComponent = "tDBConnection_1";

				int tos_count_tDBConnection_1 = 0;

				String url_tDBConnection_1 = "jdbc:jtds:sqlserver://" + "localhost";
				String port_tDBConnection_1 = "1433";
				String dbname_tDBConnection_1 = "PY_INTERMED";
				if (!"".equals(port_tDBConnection_1)) {
					url_tDBConnection_1 += ":" + "1433";
				}
				if (!"".equals(dbname_tDBConnection_1)) {

					url_tDBConnection_1 += "//" + "PY_INTERMED";
				}

				url_tDBConnection_1 += ";appName=" + projectName + ";" + "";
				String dbUser_tDBConnection_1 = "sa";

				final String decryptedPassword_tDBConnection_1 = routines.system.PasswordEncryptUtil.decryptPassword(
						"enc:routine.encryption.key.v1:F/moW6p397WSh3yR7CG9BsqY8RWnmW4cYQBtAQYmk8w40ogN");
				String dbPwd_tDBConnection_1 = decryptedPassword_tDBConnection_1;

				java.sql.Connection conn_tDBConnection_1 = null;

				String driverClass_tDBConnection_1 = "net.sourceforge.jtds.jdbc.Driver";
				java.lang.Class jdbcclazz_tDBConnection_1 = java.lang.Class.forName(driverClass_tDBConnection_1);
				globalMap.put("driverClass_tDBConnection_1", driverClass_tDBConnection_1);

				conn_tDBConnection_1 = java.sql.DriverManager.getConnection(url_tDBConnection_1, dbUser_tDBConnection_1,
						dbPwd_tDBConnection_1);

				globalMap.put("conn_tDBConnection_1", conn_tDBConnection_1);
				if (null != conn_tDBConnection_1) {

					conn_tDBConnection_1.setAutoCommit(true);
				}

				globalMap.put("dbschema_tDBConnection_1", "dbo");

				globalMap.put("db_tDBConnection_1", "PY_INTERMED");

				globalMap.put("shareIdentitySetting_tDBConnection_1", false);

				globalMap.put("driver_tDBConnection_1", "JTDS");

				/**
				 * [tDBConnection_1 begin ] stop
				 */

				/**
				 * [tDBConnection_1 main ] start
				 */

				currentComponent = "tDBConnection_1";

				tos_count_tDBConnection_1++;

				/**
				 * [tDBConnection_1 main ] stop
				 */

				/**
				 * [tDBConnection_1 process_data_begin ] start
				 */

				currentComponent = "tDBConnection_1";

				/**
				 * [tDBConnection_1 process_data_begin ] stop
				 */

				/**
				 * [tDBConnection_1 process_data_end ] start
				 */

				currentComponent = "tDBConnection_1";

				/**
				 * [tDBConnection_1 process_data_end ] stop
				 */

				/**
				 * [tDBConnection_1 end ] start
				 */

				currentComponent = "tDBConnection_1";

				ok_Hash.put("tDBConnection_1", true);
				end_Hash.put("tDBConnection_1", System.currentTimeMillis());

				/**
				 * [tDBConnection_1 end ] stop
				 */
			} // end the resume

			if (resumeEntryMethodName == null || globalResumeTicket) {
				resumeUtil.addLog("CHECKPOINT", "CONNECTION:SUBJOB_OK:tDBConnection_1:OnSubjobOk", "",
						Thread.currentThread().getId() + "", "", "", "", "", "");
			}

			if (execStat) {
				runStat.updateStatOnConnection("OnSubjobOk20", 0, "ok");
			}

			tDBInput_2Process(globalMap);

		} catch (java.lang.Exception e) {

			TalendException te = new TalendException(e, currentComponent, globalMap);

			throw te;
		} catch (java.lang.Error error) {

			runStat.stopThreadStat();

			throw error;
		} finally {

			try {

				/**
				 * [tDBConnection_1 finally ] start
				 */

				currentComponent = "tDBConnection_1";

				/**
				 * [tDBConnection_1 finally ] stop
				 */
			} catch (java.lang.Exception e) {
				// ignore
			} catch (java.lang.Error error) {
				// ignore
			}
			resourceMap = null;
		}

		globalMap.put("tDBConnection_1_SUBPROCESS_STATE", 1);
	}

	public static class row4Struct implements routines.system.IPersistableRow<row4Struct> {
		final static byte[] commonByteArrayLock_WIPO_PROJECTS_E1a_Marc_Userdoc_a_interm = new byte[0];
		static byte[] commonByteArray_WIPO_PROJECTS_E1a_Marc_Userdoc_a_interm = new byte[0];
		protected static final int DEFAULT_HASHCODE = 1;
		protected static final int PRIME = 31;
		protected int hashCode = DEFAULT_HASHCODE;
		public boolean hashCodeDirty = true;

		public String loopKey;

		public String USERDOC_SEQ;

		public String getUSERDOC_SEQ() {
			return this.USERDOC_SEQ;
		}

		public BigDecimal USERDOC_SERIES;

		public BigDecimal getUSERDOC_SERIES() {
			return this.USERDOC_SERIES;
		}

		public BigDecimal USERDOC_NBR;

		public BigDecimal getUSERDOC_NBR() {
			return this.USERDOC_NBR;
		}

		public String DOC_ORI;

		public String getDOC_ORI() {
			return this.DOC_ORI;
		}

		public BigDecimal DOC_SERIES;

		public BigDecimal getDOC_SERIES() {
			return this.DOC_SERIES;
		}

		public BigDecimal DOC_NBR;

		public BigDecimal getDOC_NBR() {
			return this.DOC_NBR;
		}

		public BigDecimal IND_IMPORT;

		public BigDecimal getIND_IMPORT() {
			return this.IND_IMPORT;
		}

		public String USERDOC_TYPE;

		public String getUSERDOC_TYPE() {
			return this.USERDOC_TYPE;
		}

		public BigDecimal LAW_CODE;

		public BigDecimal getLAW_CODE() {
			return this.LAW_CODE;
		}

		public java.util.Date FILING_DATE;

		public java.util.Date getFILING_DATE() {
			return this.FILING_DATE;
		}

		public java.util.Date RECEPTION_DATE;

		public java.util.Date getRECEPTION_DATE() {
			return this.RECEPTION_DATE;
		}

		public String NOTES;

		public String getNOTES() {
			return this.NOTES;
		}

		public String APPLICANT_NOTES;

		public String getAPPLICANT_NOTES() {
			return this.APPLICANT_NOTES;
		}

		public String PERSON_NAME;

		public String getPERSON_NAME() {
			return this.PERSON_NAME;
		}

		public String PERSON_NAME_LANG2;

		public String getPERSON_NAME_LANG2() {
			return this.PERSON_NAME_LANG2;
		}

		public String NATIONALITY_COUNTRY_CODE;

		public String getNATIONALITY_COUNTRY_CODE() {
			return this.NATIONALITY_COUNTRY_CODE;
		}

		public BigDecimal IND_COMPANY;

		public BigDecimal getIND_COMPANY() {
			return this.IND_COMPANY;
		}

		public String LEGAL_NATURE;

		public String getLEGAL_NATURE() {
			return this.LEGAL_NATURE;
		}

		public String LEGAL_NATURE_LANG2;

		public String getLEGAL_NATURE_LANG2() {
			return this.LEGAL_NATURE_LANG2;
		}

		public String LEGAL_ID_TYPE;

		public String getLEGAL_ID_TYPE() {
			return this.LEGAL_ID_TYPE;
		}

		public BigDecimal LEGAL_ID_NBR;

		public BigDecimal getLEGAL_ID_NBR() {
			return this.LEGAL_ID_NBR;
		}

		public String INDIVIDUAL_ID_TYPE;

		public String getINDIVIDUAL_ID_TYPE() {
			return this.INDIVIDUAL_ID_TYPE;
		}

		public BigDecimal INDIVIDUAL_ID_NBR;

		public BigDecimal getINDIVIDUAL_ID_NBR() {
			return this.INDIVIDUAL_ID_NBR;
		}

		public String RESIDENCE_COUNTRY_CODE;

		public String getRESIDENCE_COUNTRY_CODE() {
			return this.RESIDENCE_COUNTRY_CODE;
		}

		public String STATE_NAME;

		public String getSTATE_NAME() {
			return this.STATE_NAME;
		}

		public String STATE_CODE;

		public String getSTATE_CODE() {
			return this.STATE_CODE;
		}

		public String CITY_NAME;

		public String getCITY_NAME() {
			return this.CITY_NAME;
		}

		public String CITY_CODE;

		public String getCITY_CODE() {
			return this.CITY_CODE;
		}

		public String ADDRESS_ZONE;

		public String getADDRESS_ZONE() {
			return this.ADDRESS_ZONE;
		}

		public String ADDRESS_STREET;

		public String getADDRESS_STREET() {
			return this.ADDRESS_STREET;
		}

		public String ADDRESS_STREET_LANG2;

		public String getADDRESS_STREET_LANG2() {
			return this.ADDRESS_STREET_LANG2;
		}

		public String ZIP_CODE;

		public String getZIP_CODE() {
			return this.ZIP_CODE;
		}

		public String EMAIL;

		public String getEMAIL() {
			return this.EMAIL;
		}

		public String TELEPHONE;

		public String getTELEPHONE() {
			return this.TELEPHONE;
		}

		public String PERSON_GROUP_CODE;

		public String getPERSON_GROUP_CODE() {
			return this.PERSON_GROUP_CODE;
		}

		public BigDecimal CAPTURE_USER_ID;

		public BigDecimal getCAPTURE_USER_ID() {
			return this.CAPTURE_USER_ID;
		}

		public java.util.Date CAPTURE_DATE;

		public java.util.Date getCAPTURE_DATE() {
			return this.CAPTURE_DATE;
		}

		public String errorCode;

		public String getErrorCode() {
			return this.errorCode;
		}

		public String errorMessage;

		public String getErrorMessage() {
			return this.errorMessage;
		}

		@Override
		public int hashCode() {
			if (this.hashCodeDirty) {
				final int prime = PRIME;
				int result = DEFAULT_HASHCODE;

				result = prime * result + ((this.USERDOC_SEQ == null) ? 0 : this.USERDOC_SEQ.hashCode());

				result = prime * result + ((this.USERDOC_SERIES == null) ? 0 : this.USERDOC_SERIES.hashCode());

				result = prime * result + ((this.USERDOC_NBR == null) ? 0 : this.USERDOC_NBR.hashCode());

				this.hashCode = result;
				this.hashCodeDirty = false;
			}
			return this.hashCode;
		}

		@Override
		public boolean equals(Object obj) {
			if (this == obj)
				return true;
			if (obj == null)
				return false;
			if (getClass() != obj.getClass())
				return false;
			final row4Struct other = (row4Struct) obj;

			if (this.USERDOC_SEQ == null) {
				if (other.USERDOC_SEQ != null)
					return false;

			} else if (!this.USERDOC_SEQ.equals(other.USERDOC_SEQ))

				return false;

			if (this.USERDOC_SERIES == null) {
				if (other.USERDOC_SERIES != null)
					return false;

			} else if (!this.USERDOC_SERIES.equals(other.USERDOC_SERIES))

				return false;

			if (this.USERDOC_NBR == null) {
				if (other.USERDOC_NBR != null)
					return false;

			} else if (!this.USERDOC_NBR.equals(other.USERDOC_NBR))

				return false;

			return true;
		}

		public void copyDataTo(row4Struct other) {

			other.USERDOC_SEQ = this.USERDOC_SEQ;
			other.USERDOC_SERIES = this.USERDOC_SERIES;
			other.USERDOC_NBR = this.USERDOC_NBR;
			other.DOC_ORI = this.DOC_ORI;
			other.DOC_SERIES = this.DOC_SERIES;
			other.DOC_NBR = this.DOC_NBR;
			other.IND_IMPORT = this.IND_IMPORT;
			other.USERDOC_TYPE = this.USERDOC_TYPE;
			other.LAW_CODE = this.LAW_CODE;
			other.FILING_DATE = this.FILING_DATE;
			other.RECEPTION_DATE = this.RECEPTION_DATE;
			other.NOTES = this.NOTES;
			other.APPLICANT_NOTES = this.APPLICANT_NOTES;
			other.PERSON_NAME = this.PERSON_NAME;
			other.PERSON_NAME_LANG2 = this.PERSON_NAME_LANG2;
			other.NATIONALITY_COUNTRY_CODE = this.NATIONALITY_COUNTRY_CODE;
			other.IND_COMPANY = this.IND_COMPANY;
			other.LEGAL_NATURE = this.LEGAL_NATURE;
			other.LEGAL_NATURE_LANG2 = this.LEGAL_NATURE_LANG2;
			other.LEGAL_ID_TYPE = this.LEGAL_ID_TYPE;
			other.LEGAL_ID_NBR = this.LEGAL_ID_NBR;
			other.INDIVIDUAL_ID_TYPE = this.INDIVIDUAL_ID_TYPE;
			other.INDIVIDUAL_ID_NBR = this.INDIVIDUAL_ID_NBR;
			other.RESIDENCE_COUNTRY_CODE = this.RESIDENCE_COUNTRY_CODE;
			other.STATE_NAME = this.STATE_NAME;
			other.STATE_CODE = this.STATE_CODE;
			other.CITY_NAME = this.CITY_NAME;
			other.CITY_CODE = this.CITY_CODE;
			other.ADDRESS_ZONE = this.ADDRESS_ZONE;
			other.ADDRESS_STREET = this.ADDRESS_STREET;
			other.ADDRESS_STREET_LANG2 = this.ADDRESS_STREET_LANG2;
			other.ZIP_CODE = this.ZIP_CODE;
			other.EMAIL = this.EMAIL;
			other.TELEPHONE = this.TELEPHONE;
			other.PERSON_GROUP_CODE = this.PERSON_GROUP_CODE;
			other.CAPTURE_USER_ID = this.CAPTURE_USER_ID;
			other.CAPTURE_DATE = this.CAPTURE_DATE;
			other.errorCode = this.errorCode;
			other.errorMessage = this.errorMessage;

		}

		public void copyKeysDataTo(row4Struct other) {

			other.USERDOC_SEQ = this.USERDOC_SEQ;
			other.USERDOC_SERIES = this.USERDOC_SERIES;
			other.USERDOC_NBR = this.USERDOC_NBR;

		}

		private String readString(ObjectInputStream dis) throws IOException {
			String strReturn = null;
			int length = 0;
			length = dis.readInt();
			if (length == -1) {
				strReturn = null;
			} else {
				if (length > commonByteArray_WIPO_PROJECTS_E1a_Marc_Userdoc_a_interm.length) {
					if (length < 1024 && commonByteArray_WIPO_PROJECTS_E1a_Marc_Userdoc_a_interm.length == 0) {
						commonByteArray_WIPO_PROJECTS_E1a_Marc_Userdoc_a_interm = new byte[1024];
					} else {
						commonByteArray_WIPO_PROJECTS_E1a_Marc_Userdoc_a_interm = new byte[2 * length];
					}
				}
				dis.readFully(commonByteArray_WIPO_PROJECTS_E1a_Marc_Userdoc_a_interm, 0, length);
				strReturn = new String(commonByteArray_WIPO_PROJECTS_E1a_Marc_Userdoc_a_interm, 0, length, utf8Charset);
			}
			return strReturn;
		}

		private void writeString(String str, ObjectOutputStream dos) throws IOException {
			if (str == null) {
				dos.writeInt(-1);
			} else {
				byte[] byteArray = str.getBytes(utf8Charset);
				dos.writeInt(byteArray.length);
				dos.write(byteArray);
			}
		}

		private java.util.Date readDate(ObjectInputStream dis) throws IOException {
			java.util.Date dateReturn = null;
			int length = 0;
			length = dis.readByte();
			if (length == -1) {
				dateReturn = null;
			} else {
				dateReturn = new Date(dis.readLong());
			}
			return dateReturn;
		}

		private void writeDate(java.util.Date date1, ObjectOutputStream dos) throws IOException {
			if (date1 == null) {
				dos.writeByte(-1);
			} else {
				dos.writeByte(0);
				dos.writeLong(date1.getTime());
			}
		}

		public void readData(ObjectInputStream dis) {

			synchronized (commonByteArrayLock_WIPO_PROJECTS_E1a_Marc_Userdoc_a_interm) {

				try {

					int length = 0;

					this.USERDOC_SEQ = readString(dis);

					this.USERDOC_SERIES = (BigDecimal) dis.readObject();

					this.USERDOC_NBR = (BigDecimal) dis.readObject();

					this.DOC_ORI = readString(dis);

					this.DOC_SERIES = (BigDecimal) dis.readObject();

					this.DOC_NBR = (BigDecimal) dis.readObject();

					this.IND_IMPORT = (BigDecimal) dis.readObject();

					this.USERDOC_TYPE = readString(dis);

					this.LAW_CODE = (BigDecimal) dis.readObject();

					this.FILING_DATE = readDate(dis);

					this.RECEPTION_DATE = readDate(dis);

					this.NOTES = readString(dis);

					this.APPLICANT_NOTES = readString(dis);

					this.PERSON_NAME = readString(dis);

					this.PERSON_NAME_LANG2 = readString(dis);

					this.NATIONALITY_COUNTRY_CODE = readString(dis);

					this.IND_COMPANY = (BigDecimal) dis.readObject();

					this.LEGAL_NATURE = readString(dis);

					this.LEGAL_NATURE_LANG2 = readString(dis);

					this.LEGAL_ID_TYPE = readString(dis);

					this.LEGAL_ID_NBR = (BigDecimal) dis.readObject();

					this.INDIVIDUAL_ID_TYPE = readString(dis);

					this.INDIVIDUAL_ID_NBR = (BigDecimal) dis.readObject();

					this.RESIDENCE_COUNTRY_CODE = readString(dis);

					this.STATE_NAME = readString(dis);

					this.STATE_CODE = readString(dis);

					this.CITY_NAME = readString(dis);

					this.CITY_CODE = readString(dis);

					this.ADDRESS_ZONE = readString(dis);

					this.ADDRESS_STREET = readString(dis);

					this.ADDRESS_STREET_LANG2 = readString(dis);

					this.ZIP_CODE = readString(dis);

					this.EMAIL = readString(dis);

					this.TELEPHONE = readString(dis);

					this.PERSON_GROUP_CODE = readString(dis);

					this.CAPTURE_USER_ID = (BigDecimal) dis.readObject();

					this.CAPTURE_DATE = readDate(dis);

					this.errorCode = readString(dis);

					this.errorMessage = readString(dis);

				} catch (IOException e) {
					throw new RuntimeException(e);

				} catch (ClassNotFoundException eCNFE) {
					throw new RuntimeException(eCNFE);

				}

			}

		}

		public void writeData(ObjectOutputStream dos) {
			try {

				// String

				writeString(this.USERDOC_SEQ, dos);

				// BigDecimal

				dos.writeObject(this.USERDOC_SERIES);

				// BigDecimal

				dos.writeObject(this.USERDOC_NBR);

				// String

				writeString(this.DOC_ORI, dos);

				// BigDecimal

				dos.writeObject(this.DOC_SERIES);

				// BigDecimal

				dos.writeObject(this.DOC_NBR);

				// BigDecimal

				dos.writeObject(this.IND_IMPORT);

				// String

				writeString(this.USERDOC_TYPE, dos);

				// BigDecimal

				dos.writeObject(this.LAW_CODE);

				// java.util.Date

				writeDate(this.FILING_DATE, dos);

				// java.util.Date

				writeDate(this.RECEPTION_DATE, dos);

				// String

				writeString(this.NOTES, dos);

				// String

				writeString(this.APPLICANT_NOTES, dos);

				// String

				writeString(this.PERSON_NAME, dos);

				// String

				writeString(this.PERSON_NAME_LANG2, dos);

				// String

				writeString(this.NATIONALITY_COUNTRY_CODE, dos);

				// BigDecimal

				dos.writeObject(this.IND_COMPANY);

				// String

				writeString(this.LEGAL_NATURE, dos);

				// String

				writeString(this.LEGAL_NATURE_LANG2, dos);

				// String

				writeString(this.LEGAL_ID_TYPE, dos);

				// BigDecimal

				dos.writeObject(this.LEGAL_ID_NBR);

				// String

				writeString(this.INDIVIDUAL_ID_TYPE, dos);

				// BigDecimal

				dos.writeObject(this.INDIVIDUAL_ID_NBR);

				// String

				writeString(this.RESIDENCE_COUNTRY_CODE, dos);

				// String

				writeString(this.STATE_NAME, dos);

				// String

				writeString(this.STATE_CODE, dos);

				// String

				writeString(this.CITY_NAME, dos);

				// String

				writeString(this.CITY_CODE, dos);

				// String

				writeString(this.ADDRESS_ZONE, dos);

				// String

				writeString(this.ADDRESS_STREET, dos);

				// String

				writeString(this.ADDRESS_STREET_LANG2, dos);

				// String

				writeString(this.ZIP_CODE, dos);

				// String

				writeString(this.EMAIL, dos);

				// String

				writeString(this.TELEPHONE, dos);

				// String

				writeString(this.PERSON_GROUP_CODE, dos);

				// BigDecimal

				dos.writeObject(this.CAPTURE_USER_ID);

				// java.util.Date

				writeDate(this.CAPTURE_DATE, dos);

				// String

				writeString(this.errorCode, dos);

				// String

				writeString(this.errorMessage, dos);

			} catch (IOException e) {
				throw new RuntimeException(e);
			}

		}

		public String toString() {

			StringBuilder sb = new StringBuilder();
			sb.append(super.toString());
			sb.append("[");
			sb.append("USERDOC_SEQ=" + USERDOC_SEQ);
			sb.append(",USERDOC_SERIES=" + String.valueOf(USERDOC_SERIES));
			sb.append(",USERDOC_NBR=" + String.valueOf(USERDOC_NBR));
			sb.append(",DOC_ORI=" + DOC_ORI);
			sb.append(",DOC_SERIES=" + String.valueOf(DOC_SERIES));
			sb.append(",DOC_NBR=" + String.valueOf(DOC_NBR));
			sb.append(",IND_IMPORT=" + String.valueOf(IND_IMPORT));
			sb.append(",USERDOC_TYPE=" + USERDOC_TYPE);
			sb.append(",LAW_CODE=" + String.valueOf(LAW_CODE));
			sb.append(",FILING_DATE=" + String.valueOf(FILING_DATE));
			sb.append(",RECEPTION_DATE=" + String.valueOf(RECEPTION_DATE));
			sb.append(",NOTES=" + NOTES);
			sb.append(",APPLICANT_NOTES=" + APPLICANT_NOTES);
			sb.append(",PERSON_NAME=" + PERSON_NAME);
			sb.append(",PERSON_NAME_LANG2=" + PERSON_NAME_LANG2);
			sb.append(",NATIONALITY_COUNTRY_CODE=" + NATIONALITY_COUNTRY_CODE);
			sb.append(",IND_COMPANY=" + String.valueOf(IND_COMPANY));
			sb.append(",LEGAL_NATURE=" + LEGAL_NATURE);
			sb.append(",LEGAL_NATURE_LANG2=" + LEGAL_NATURE_LANG2);
			sb.append(",LEGAL_ID_TYPE=" + LEGAL_ID_TYPE);
			sb.append(",LEGAL_ID_NBR=" + String.valueOf(LEGAL_ID_NBR));
			sb.append(",INDIVIDUAL_ID_TYPE=" + INDIVIDUAL_ID_TYPE);
			sb.append(",INDIVIDUAL_ID_NBR=" + String.valueOf(INDIVIDUAL_ID_NBR));
			sb.append(",RESIDENCE_COUNTRY_CODE=" + RESIDENCE_COUNTRY_CODE);
			sb.append(",STATE_NAME=" + STATE_NAME);
			sb.append(",STATE_CODE=" + STATE_CODE);
			sb.append(",CITY_NAME=" + CITY_NAME);
			sb.append(",CITY_CODE=" + CITY_CODE);
			sb.append(",ADDRESS_ZONE=" + ADDRESS_ZONE);
			sb.append(",ADDRESS_STREET=" + ADDRESS_STREET);
			sb.append(",ADDRESS_STREET_LANG2=" + ADDRESS_STREET_LANG2);
			sb.append(",ZIP_CODE=" + ZIP_CODE);
			sb.append(",EMAIL=" + EMAIL);
			sb.append(",TELEPHONE=" + TELEPHONE);
			sb.append(",PERSON_GROUP_CODE=" + PERSON_GROUP_CODE);
			sb.append(",CAPTURE_USER_ID=" + String.valueOf(CAPTURE_USER_ID));
			sb.append(",CAPTURE_DATE=" + String.valueOf(CAPTURE_DATE));
			sb.append(",errorCode=" + errorCode);
			sb.append(",errorMessage=" + errorMessage);
			sb.append("]");

			return sb.toString();
		}

		/**
		 * Compare keys
		 */
		public int compareTo(row4Struct other) {

			int returnValue = -1;

			returnValue = checkNullsAndCompare(this.USERDOC_SEQ, other.USERDOC_SEQ);
			if (returnValue != 0) {
				return returnValue;
			}

			returnValue = checkNullsAndCompare(this.USERDOC_SERIES, other.USERDOC_SERIES);
			if (returnValue != 0) {
				return returnValue;
			}

			returnValue = checkNullsAndCompare(this.USERDOC_NBR, other.USERDOC_NBR);
			if (returnValue != 0) {
				return returnValue;
			}

			return returnValue;
		}

		private int checkNullsAndCompare(Object object1, Object object2) {
			int returnValue = 0;
			if (object1 instanceof Comparable && object2 instanceof Comparable) {
				returnValue = ((Comparable) object1).compareTo(object2);
			} else if (object1 != null && object2 != null) {
				returnValue = compareStrings(object1.toString(), object2.toString());
			} else if (object1 == null && object2 != null) {
				returnValue = 1;
			} else if (object1 != null && object2 == null) {
				returnValue = -1;
			} else {
				returnValue = 0;
			}

			return returnValue;
		}

		private int compareStrings(String string1, String string2) {
			return string1.compareTo(string2);
		}

	}

	public static class udStruct implements routines.system.IPersistableRow<udStruct> {
		final static byte[] commonByteArrayLock_WIPO_PROJECTS_E1a_Marc_Userdoc_a_interm = new byte[0];
		static byte[] commonByteArray_WIPO_PROJECTS_E1a_Marc_Userdoc_a_interm = new byte[0];
		protected static final int DEFAULT_HASHCODE = 1;
		protected static final int PRIME = 31;
		protected int hashCode = DEFAULT_HASHCODE;
		public boolean hashCodeDirty = true;

		public String loopKey;

		public String USERDOC_SEQ;

		public String getUSERDOC_SEQ() {
			return this.USERDOC_SEQ;
		}

		public BigDecimal USERDOC_SERIES;

		public BigDecimal getUSERDOC_SERIES() {
			return this.USERDOC_SERIES;
		}

		public BigDecimal USERDOC_NBR;

		public BigDecimal getUSERDOC_NBR() {
			return this.USERDOC_NBR;
		}

		public String DOC_ORI;

		public String getDOC_ORI() {
			return this.DOC_ORI;
		}

		public BigDecimal DOC_SERIES;

		public BigDecimal getDOC_SERIES() {
			return this.DOC_SERIES;
		}

		public BigDecimal DOC_NBR;

		public BigDecimal getDOC_NBR() {
			return this.DOC_NBR;
		}

		public BigDecimal IND_IMPORT;

		public BigDecimal getIND_IMPORT() {
			return this.IND_IMPORT;
		}

		public String USERDOC_TYPE;

		public String getUSERDOC_TYPE() {
			return this.USERDOC_TYPE;
		}

		public BigDecimal LAW_CODE;

		public BigDecimal getLAW_CODE() {
			return this.LAW_CODE;
		}

		public java.util.Date FILING_DATE;

		public java.util.Date getFILING_DATE() {
			return this.FILING_DATE;
		}

		public java.util.Date RECEPTION_DATE;

		public java.util.Date getRECEPTION_DATE() {
			return this.RECEPTION_DATE;
		}

		public String NOTES;

		public String getNOTES() {
			return this.NOTES;
		}

		public String APPLICANT_NOTES;

		public String getAPPLICANT_NOTES() {
			return this.APPLICANT_NOTES;
		}

		public String PERSON_NAME;

		public String getPERSON_NAME() {
			return this.PERSON_NAME;
		}

		public String PERSON_NAME_LANG2;

		public String getPERSON_NAME_LANG2() {
			return this.PERSON_NAME_LANG2;
		}

		public String NATIONALITY_COUNTRY_CODE;

		public String getNATIONALITY_COUNTRY_CODE() {
			return this.NATIONALITY_COUNTRY_CODE;
		}

		public BigDecimal IND_COMPANY;

		public BigDecimal getIND_COMPANY() {
			return this.IND_COMPANY;
		}

		public String LEGAL_NATURE;

		public String getLEGAL_NATURE() {
			return this.LEGAL_NATURE;
		}

		public String LEGAL_NATURE_LANG2;

		public String getLEGAL_NATURE_LANG2() {
			return this.LEGAL_NATURE_LANG2;
		}

		public String LEGAL_ID_TYPE;

		public String getLEGAL_ID_TYPE() {
			return this.LEGAL_ID_TYPE;
		}

		public BigDecimal LEGAL_ID_NBR;

		public BigDecimal getLEGAL_ID_NBR() {
			return this.LEGAL_ID_NBR;
		}

		public String INDIVIDUAL_ID_TYPE;

		public String getINDIVIDUAL_ID_TYPE() {
			return this.INDIVIDUAL_ID_TYPE;
		}

		public BigDecimal INDIVIDUAL_ID_NBR;

		public BigDecimal getINDIVIDUAL_ID_NBR() {
			return this.INDIVIDUAL_ID_NBR;
		}

		public String RESIDENCE_COUNTRY_CODE;

		public String getRESIDENCE_COUNTRY_CODE() {
			return this.RESIDENCE_COUNTRY_CODE;
		}

		public String STATE_NAME;

		public String getSTATE_NAME() {
			return this.STATE_NAME;
		}

		public String STATE_CODE;

		public String getSTATE_CODE() {
			return this.STATE_CODE;
		}

		public String CITY_NAME;

		public String getCITY_NAME() {
			return this.CITY_NAME;
		}

		public String CITY_CODE;

		public String getCITY_CODE() {
			return this.CITY_CODE;
		}

		public String ADDRESS_ZONE;

		public String getADDRESS_ZONE() {
			return this.ADDRESS_ZONE;
		}

		public String ADDRESS_STREET;

		public String getADDRESS_STREET() {
			return this.ADDRESS_STREET;
		}

		public String ADDRESS_STREET_LANG2;

		public String getADDRESS_STREET_LANG2() {
			return this.ADDRESS_STREET_LANG2;
		}

		public String ZIP_CODE;

		public String getZIP_CODE() {
			return this.ZIP_CODE;
		}

		public String EMAIL;

		public String getEMAIL() {
			return this.EMAIL;
		}

		public String TELEPHONE;

		public String getTELEPHONE() {
			return this.TELEPHONE;
		}

		public String PERSON_GROUP_CODE;

		public String getPERSON_GROUP_CODE() {
			return this.PERSON_GROUP_CODE;
		}

		public BigDecimal CAPTURE_USER_ID;

		public BigDecimal getCAPTURE_USER_ID() {
			return this.CAPTURE_USER_ID;
		}

		public java.util.Date CAPTURE_DATE;

		public java.util.Date getCAPTURE_DATE() {
			return this.CAPTURE_DATE;
		}

		@Override
		public int hashCode() {
			if (this.hashCodeDirty) {
				final int prime = PRIME;
				int result = DEFAULT_HASHCODE;

				result = prime * result + ((this.USERDOC_SEQ == null) ? 0 : this.USERDOC_SEQ.hashCode());

				result = prime * result + ((this.USERDOC_SERIES == null) ? 0 : this.USERDOC_SERIES.hashCode());

				result = prime * result + ((this.USERDOC_NBR == null) ? 0 : this.USERDOC_NBR.hashCode());

				this.hashCode = result;
				this.hashCodeDirty = false;
			}
			return this.hashCode;
		}

		@Override
		public boolean equals(Object obj) {
			if (this == obj)
				return true;
			if (obj == null)
				return false;
			if (getClass() != obj.getClass())
				return false;
			final udStruct other = (udStruct) obj;

			if (this.USERDOC_SEQ == null) {
				if (other.USERDOC_SEQ != null)
					return false;

			} else if (!this.USERDOC_SEQ.equals(other.USERDOC_SEQ))

				return false;

			if (this.USERDOC_SERIES == null) {
				if (other.USERDOC_SERIES != null)
					return false;

			} else if (!this.USERDOC_SERIES.equals(other.USERDOC_SERIES))

				return false;

			if (this.USERDOC_NBR == null) {
				if (other.USERDOC_NBR != null)
					return false;

			} else if (!this.USERDOC_NBR.equals(other.USERDOC_NBR))

				return false;

			return true;
		}

		public void copyDataTo(udStruct other) {

			other.USERDOC_SEQ = this.USERDOC_SEQ;
			other.USERDOC_SERIES = this.USERDOC_SERIES;
			other.USERDOC_NBR = this.USERDOC_NBR;
			other.DOC_ORI = this.DOC_ORI;
			other.DOC_SERIES = this.DOC_SERIES;
			other.DOC_NBR = this.DOC_NBR;
			other.IND_IMPORT = this.IND_IMPORT;
			other.USERDOC_TYPE = this.USERDOC_TYPE;
			other.LAW_CODE = this.LAW_CODE;
			other.FILING_DATE = this.FILING_DATE;
			other.RECEPTION_DATE = this.RECEPTION_DATE;
			other.NOTES = this.NOTES;
			other.APPLICANT_NOTES = this.APPLICANT_NOTES;
			other.PERSON_NAME = this.PERSON_NAME;
			other.PERSON_NAME_LANG2 = this.PERSON_NAME_LANG2;
			other.NATIONALITY_COUNTRY_CODE = this.NATIONALITY_COUNTRY_CODE;
			other.IND_COMPANY = this.IND_COMPANY;
			other.LEGAL_NATURE = this.LEGAL_NATURE;
			other.LEGAL_NATURE_LANG2 = this.LEGAL_NATURE_LANG2;
			other.LEGAL_ID_TYPE = this.LEGAL_ID_TYPE;
			other.LEGAL_ID_NBR = this.LEGAL_ID_NBR;
			other.INDIVIDUAL_ID_TYPE = this.INDIVIDUAL_ID_TYPE;
			other.INDIVIDUAL_ID_NBR = this.INDIVIDUAL_ID_NBR;
			other.RESIDENCE_COUNTRY_CODE = this.RESIDENCE_COUNTRY_CODE;
			other.STATE_NAME = this.STATE_NAME;
			other.STATE_CODE = this.STATE_CODE;
			other.CITY_NAME = this.CITY_NAME;
			other.CITY_CODE = this.CITY_CODE;
			other.ADDRESS_ZONE = this.ADDRESS_ZONE;
			other.ADDRESS_STREET = this.ADDRESS_STREET;
			other.ADDRESS_STREET_LANG2 = this.ADDRESS_STREET_LANG2;
			other.ZIP_CODE = this.ZIP_CODE;
			other.EMAIL = this.EMAIL;
			other.TELEPHONE = this.TELEPHONE;
			other.PERSON_GROUP_CODE = this.PERSON_GROUP_CODE;
			other.CAPTURE_USER_ID = this.CAPTURE_USER_ID;
			other.CAPTURE_DATE = this.CAPTURE_DATE;

		}

		public void copyKeysDataTo(udStruct other) {

			other.USERDOC_SEQ = this.USERDOC_SEQ;
			other.USERDOC_SERIES = this.USERDOC_SERIES;
			other.USERDOC_NBR = this.USERDOC_NBR;

		}

		private String readString(ObjectInputStream dis) throws IOException {
			String strReturn = null;
			int length = 0;
			length = dis.readInt();
			if (length == -1) {
				strReturn = null;
			} else {
				if (length > commonByteArray_WIPO_PROJECTS_E1a_Marc_Userdoc_a_interm.length) {
					if (length < 1024 && commonByteArray_WIPO_PROJECTS_E1a_Marc_Userdoc_a_interm.length == 0) {
						commonByteArray_WIPO_PROJECTS_E1a_Marc_Userdoc_a_interm = new byte[1024];
					} else {
						commonByteArray_WIPO_PROJECTS_E1a_Marc_Userdoc_a_interm = new byte[2 * length];
					}
				}
				dis.readFully(commonByteArray_WIPO_PROJECTS_E1a_Marc_Userdoc_a_interm, 0, length);
				strReturn = new String(commonByteArray_WIPO_PROJECTS_E1a_Marc_Userdoc_a_interm, 0, length, utf8Charset);
			}
			return strReturn;
		}

		private void writeString(String str, ObjectOutputStream dos) throws IOException {
			if (str == null) {
				dos.writeInt(-1);
			} else {
				byte[] byteArray = str.getBytes(utf8Charset);
				dos.writeInt(byteArray.length);
				dos.write(byteArray);
			}
		}

		private java.util.Date readDate(ObjectInputStream dis) throws IOException {
			java.util.Date dateReturn = null;
			int length = 0;
			length = dis.readByte();
			if (length == -1) {
				dateReturn = null;
			} else {
				dateReturn = new Date(dis.readLong());
			}
			return dateReturn;
		}

		private void writeDate(java.util.Date date1, ObjectOutputStream dos) throws IOException {
			if (date1 == null) {
				dos.writeByte(-1);
			} else {
				dos.writeByte(0);
				dos.writeLong(date1.getTime());
			}
		}

		public void readData(ObjectInputStream dis) {

			synchronized (commonByteArrayLock_WIPO_PROJECTS_E1a_Marc_Userdoc_a_interm) {

				try {

					int length = 0;

					this.USERDOC_SEQ = readString(dis);

					this.USERDOC_SERIES = (BigDecimal) dis.readObject();

					this.USERDOC_NBR = (BigDecimal) dis.readObject();

					this.DOC_ORI = readString(dis);

					this.DOC_SERIES = (BigDecimal) dis.readObject();

					this.DOC_NBR = (BigDecimal) dis.readObject();

					this.IND_IMPORT = (BigDecimal) dis.readObject();

					this.USERDOC_TYPE = readString(dis);

					this.LAW_CODE = (BigDecimal) dis.readObject();

					this.FILING_DATE = readDate(dis);

					this.RECEPTION_DATE = readDate(dis);

					this.NOTES = readString(dis);

					this.APPLICANT_NOTES = readString(dis);

					this.PERSON_NAME = readString(dis);

					this.PERSON_NAME_LANG2 = readString(dis);

					this.NATIONALITY_COUNTRY_CODE = readString(dis);

					this.IND_COMPANY = (BigDecimal) dis.readObject();

					this.LEGAL_NATURE = readString(dis);

					this.LEGAL_NATURE_LANG2 = readString(dis);

					this.LEGAL_ID_TYPE = readString(dis);

					this.LEGAL_ID_NBR = (BigDecimal) dis.readObject();

					this.INDIVIDUAL_ID_TYPE = readString(dis);

					this.INDIVIDUAL_ID_NBR = (BigDecimal) dis.readObject();

					this.RESIDENCE_COUNTRY_CODE = readString(dis);

					this.STATE_NAME = readString(dis);

					this.STATE_CODE = readString(dis);

					this.CITY_NAME = readString(dis);

					this.CITY_CODE = readString(dis);

					this.ADDRESS_ZONE = readString(dis);

					this.ADDRESS_STREET = readString(dis);

					this.ADDRESS_STREET_LANG2 = readString(dis);

					this.ZIP_CODE = readString(dis);

					this.EMAIL = readString(dis);

					this.TELEPHONE = readString(dis);

					this.PERSON_GROUP_CODE = readString(dis);

					this.CAPTURE_USER_ID = (BigDecimal) dis.readObject();

					this.CAPTURE_DATE = readDate(dis);

				} catch (IOException e) {
					throw new RuntimeException(e);

				} catch (ClassNotFoundException eCNFE) {
					throw new RuntimeException(eCNFE);

				}

			}

		}

		public void writeData(ObjectOutputStream dos) {
			try {

				// String

				writeString(this.USERDOC_SEQ, dos);

				// BigDecimal

				dos.writeObject(this.USERDOC_SERIES);

				// BigDecimal

				dos.writeObject(this.USERDOC_NBR);

				// String

				writeString(this.DOC_ORI, dos);

				// BigDecimal

				dos.writeObject(this.DOC_SERIES);

				// BigDecimal

				dos.writeObject(this.DOC_NBR);

				// BigDecimal

				dos.writeObject(this.IND_IMPORT);

				// String

				writeString(this.USERDOC_TYPE, dos);

				// BigDecimal

				dos.writeObject(this.LAW_CODE);

				// java.util.Date

				writeDate(this.FILING_DATE, dos);

				// java.util.Date

				writeDate(this.RECEPTION_DATE, dos);

				// String

				writeString(this.NOTES, dos);

				// String

				writeString(this.APPLICANT_NOTES, dos);

				// String

				writeString(this.PERSON_NAME, dos);

				// String

				writeString(this.PERSON_NAME_LANG2, dos);

				// String

				writeString(this.NATIONALITY_COUNTRY_CODE, dos);

				// BigDecimal

				dos.writeObject(this.IND_COMPANY);

				// String

				writeString(this.LEGAL_NATURE, dos);

				// String

				writeString(this.LEGAL_NATURE_LANG2, dos);

				// String

				writeString(this.LEGAL_ID_TYPE, dos);

				// BigDecimal

				dos.writeObject(this.LEGAL_ID_NBR);

				// String

				writeString(this.INDIVIDUAL_ID_TYPE, dos);

				// BigDecimal

				dos.writeObject(this.INDIVIDUAL_ID_NBR);

				// String

				writeString(this.RESIDENCE_COUNTRY_CODE, dos);

				// String

				writeString(this.STATE_NAME, dos);

				// String

				writeString(this.STATE_CODE, dos);

				// String

				writeString(this.CITY_NAME, dos);

				// String

				writeString(this.CITY_CODE, dos);

				// String

				writeString(this.ADDRESS_ZONE, dos);

				// String

				writeString(this.ADDRESS_STREET, dos);

				// String

				writeString(this.ADDRESS_STREET_LANG2, dos);

				// String

				writeString(this.ZIP_CODE, dos);

				// String

				writeString(this.EMAIL, dos);

				// String

				writeString(this.TELEPHONE, dos);

				// String

				writeString(this.PERSON_GROUP_CODE, dos);

				// BigDecimal

				dos.writeObject(this.CAPTURE_USER_ID);

				// java.util.Date

				writeDate(this.CAPTURE_DATE, dos);

			} catch (IOException e) {
				throw new RuntimeException(e);
			}

		}

		public String toString() {

			StringBuilder sb = new StringBuilder();
			sb.append(super.toString());
			sb.append("[");
			sb.append("USERDOC_SEQ=" + USERDOC_SEQ);
			sb.append(",USERDOC_SERIES=" + String.valueOf(USERDOC_SERIES));
			sb.append(",USERDOC_NBR=" + String.valueOf(USERDOC_NBR));
			sb.append(",DOC_ORI=" + DOC_ORI);
			sb.append(",DOC_SERIES=" + String.valueOf(DOC_SERIES));
			sb.append(",DOC_NBR=" + String.valueOf(DOC_NBR));
			sb.append(",IND_IMPORT=" + String.valueOf(IND_IMPORT));
			sb.append(",USERDOC_TYPE=" + USERDOC_TYPE);
			sb.append(",LAW_CODE=" + String.valueOf(LAW_CODE));
			sb.append(",FILING_DATE=" + String.valueOf(FILING_DATE));
			sb.append(",RECEPTION_DATE=" + String.valueOf(RECEPTION_DATE));
			sb.append(",NOTES=" + NOTES);
			sb.append(",APPLICANT_NOTES=" + APPLICANT_NOTES);
			sb.append(",PERSON_NAME=" + PERSON_NAME);
			sb.append(",PERSON_NAME_LANG2=" + PERSON_NAME_LANG2);
			sb.append(",NATIONALITY_COUNTRY_CODE=" + NATIONALITY_COUNTRY_CODE);
			sb.append(",IND_COMPANY=" + String.valueOf(IND_COMPANY));
			sb.append(",LEGAL_NATURE=" + LEGAL_NATURE);
			sb.append(",LEGAL_NATURE_LANG2=" + LEGAL_NATURE_LANG2);
			sb.append(",LEGAL_ID_TYPE=" + LEGAL_ID_TYPE);
			sb.append(",LEGAL_ID_NBR=" + String.valueOf(LEGAL_ID_NBR));
			sb.append(",INDIVIDUAL_ID_TYPE=" + INDIVIDUAL_ID_TYPE);
			sb.append(",INDIVIDUAL_ID_NBR=" + String.valueOf(INDIVIDUAL_ID_NBR));
			sb.append(",RESIDENCE_COUNTRY_CODE=" + RESIDENCE_COUNTRY_CODE);
			sb.append(",STATE_NAME=" + STATE_NAME);
			sb.append(",STATE_CODE=" + STATE_CODE);
			sb.append(",CITY_NAME=" + CITY_NAME);
			sb.append(",CITY_CODE=" + CITY_CODE);
			sb.append(",ADDRESS_ZONE=" + ADDRESS_ZONE);
			sb.append(",ADDRESS_STREET=" + ADDRESS_STREET);
			sb.append(",ADDRESS_STREET_LANG2=" + ADDRESS_STREET_LANG2);
			sb.append(",ZIP_CODE=" + ZIP_CODE);
			sb.append(",EMAIL=" + EMAIL);
			sb.append(",TELEPHONE=" + TELEPHONE);
			sb.append(",PERSON_GROUP_CODE=" + PERSON_GROUP_CODE);
			sb.append(",CAPTURE_USER_ID=" + String.valueOf(CAPTURE_USER_ID));
			sb.append(",CAPTURE_DATE=" + String.valueOf(CAPTURE_DATE));
			sb.append("]");

			return sb.toString();
		}

		/**
		 * Compare keys
		 */
		public int compareTo(udStruct other) {

			int returnValue = -1;

			returnValue = checkNullsAndCompare(this.USERDOC_SEQ, other.USERDOC_SEQ);
			if (returnValue != 0) {
				return returnValue;
			}

			returnValue = checkNullsAndCompare(this.USERDOC_SERIES, other.USERDOC_SERIES);
			if (returnValue != 0) {
				return returnValue;
			}

			returnValue = checkNullsAndCompare(this.USERDOC_NBR, other.USERDOC_NBR);
			if (returnValue != 0) {
				return returnValue;
			}

			return returnValue;
		}

		private int checkNullsAndCompare(Object object1, Object object2) {
			int returnValue = 0;
			if (object1 instanceof Comparable && object2 instanceof Comparable) {
				returnValue = ((Comparable) object1).compareTo(object2);
			} else if (object1 != null && object2 != null) {
				returnValue = compareStrings(object1.toString(), object2.toString());
			} else if (object1 == null && object2 != null) {
				returnValue = 1;
			} else if (object1 != null && object2 == null) {
				returnValue = -1;
			} else {
				returnValue = 0;
			}

			return returnValue;
		}

		private int compareStrings(String string1, String string2) {
			return string1.compareTo(string2);
		}

	}

	public static class row2Struct implements routines.system.IPersistableRow<row2Struct> {
		final static byte[] commonByteArrayLock_WIPO_PROJECTS_E1a_Marc_Userdoc_a_interm = new byte[0];
		static byte[] commonByteArray_WIPO_PROJECTS_E1a_Marc_Userdoc_a_interm = new byte[0];

		public int sec_documento;

		public int getSec_documento() {
			return this.sec_documento;
		}

		public String tip_documento;

		public String getTip_documento() {
			return this.tip_documento;
		}

		public Long num_acta_documento;

		public Long getNum_acta_documento() {
			return this.num_acta_documento;
		}

		public Long num_acta;

		public Long getNum_acta() {
			return this.num_acta;
		}

		public Long num_registro;

		public Long getNum_registro() {
			return this.num_registro;
		}

		public java.util.Date fec_documento;

		public java.util.Date getFec_documento() {
			return this.fec_documento;
		}

		public String obs_documento;

		public String getObs_documento() {
			return this.obs_documento;
		}

		public String nom_solicitante;

		public String getNom_solicitante() {
			return this.nom_solicitante;
		}

		public String cod_pais;

		public String getCod_pais() {
			return this.cod_pais;
		}

		public Short num_agente;

		public Short getNum_agente() {
			return this.num_agente;
		}

		public java.util.Date fec_ingreso;

		public java.util.Date getFec_ingreso() {
			return this.fec_ingreso;
		}

		public Short tip_tramite;

		public Short getTip_tramite() {
			return this.tip_tramite;
		}

		public String cod_status;

		public String getCod_status() {
			return this.cod_status;
		}

		public java.util.Date fec_status;

		public java.util.Date getFec_status() {
			return this.fec_status;
		}

		public Integer num_registro_poder;

		public Integer getNum_registro_poder() {
			return this.num_registro_poder;
		}

		public Short num_agente_old;

		public Short getNum_agente_old() {
			return this.num_agente_old;
		}

		public Long cobro_caja;

		public Long getCobro_caja() {
			return this.cobro_caja;
		}

		public String ref_pago;

		public String getRef_pago() {
			return this.ref_pago;
		}

		private String readString(ObjectInputStream dis) throws IOException {
			String strReturn = null;
			int length = 0;
			length = dis.readInt();
			if (length == -1) {
				strReturn = null;
			} else {
				if (length > commonByteArray_WIPO_PROJECTS_E1a_Marc_Userdoc_a_interm.length) {
					if (length < 1024 && commonByteArray_WIPO_PROJECTS_E1a_Marc_Userdoc_a_interm.length == 0) {
						commonByteArray_WIPO_PROJECTS_E1a_Marc_Userdoc_a_interm = new byte[1024];
					} else {
						commonByteArray_WIPO_PROJECTS_E1a_Marc_Userdoc_a_interm = new byte[2 * length];
					}
				}
				dis.readFully(commonByteArray_WIPO_PROJECTS_E1a_Marc_Userdoc_a_interm, 0, length);
				strReturn = new String(commonByteArray_WIPO_PROJECTS_E1a_Marc_Userdoc_a_interm, 0, length, utf8Charset);
			}
			return strReturn;
		}

		private void writeString(String str, ObjectOutputStream dos) throws IOException {
			if (str == null) {
				dos.writeInt(-1);
			} else {
				byte[] byteArray = str.getBytes(utf8Charset);
				dos.writeInt(byteArray.length);
				dos.write(byteArray);
			}
		}

		private java.util.Date readDate(ObjectInputStream dis) throws IOException {
			java.util.Date dateReturn = null;
			int length = 0;
			length = dis.readByte();
			if (length == -1) {
				dateReturn = null;
			} else {
				dateReturn = new Date(dis.readLong());
			}
			return dateReturn;
		}

		private void writeDate(java.util.Date date1, ObjectOutputStream dos) throws IOException {
			if (date1 == null) {
				dos.writeByte(-1);
			} else {
				dos.writeByte(0);
				dos.writeLong(date1.getTime());
			}
		}

		private Integer readInteger(ObjectInputStream dis) throws IOException {
			Integer intReturn;
			int length = 0;
			length = dis.readByte();
			if (length == -1) {
				intReturn = null;
			} else {
				intReturn = dis.readInt();
			}
			return intReturn;
		}

		private void writeInteger(Integer intNum, ObjectOutputStream dos) throws IOException {
			if (intNum == null) {
				dos.writeByte(-1);
			} else {
				dos.writeByte(0);
				dos.writeInt(intNum);
			}
		}

		public void readData(ObjectInputStream dis) {

			synchronized (commonByteArrayLock_WIPO_PROJECTS_E1a_Marc_Userdoc_a_interm) {

				try {

					int length = 0;

					this.sec_documento = dis.readInt();

					this.tip_documento = readString(dis);

					length = dis.readByte();
					if (length == -1) {
						this.num_acta_documento = null;
					} else {
						this.num_acta_documento = dis.readLong();
					}

					length = dis.readByte();
					if (length == -1) {
						this.num_acta = null;
					} else {
						this.num_acta = dis.readLong();
					}

					length = dis.readByte();
					if (length == -1) {
						this.num_registro = null;
					} else {
						this.num_registro = dis.readLong();
					}

					this.fec_documento = readDate(dis);

					this.obs_documento = readString(dis);

					this.nom_solicitante = readString(dis);

					this.cod_pais = readString(dis);

					length = dis.readByte();
					if (length == -1) {
						this.num_agente = null;
					} else {
						this.num_agente = dis.readShort();
					}

					this.fec_ingreso = readDate(dis);

					length = dis.readByte();
					if (length == -1) {
						this.tip_tramite = null;
					} else {
						this.tip_tramite = dis.readShort();
					}

					this.cod_status = readString(dis);

					this.fec_status = readDate(dis);

					this.num_registro_poder = readInteger(dis);

					length = dis.readByte();
					if (length == -1) {
						this.num_agente_old = null;
					} else {
						this.num_agente_old = dis.readShort();
					}

					length = dis.readByte();
					if (length == -1) {
						this.cobro_caja = null;
					} else {
						this.cobro_caja = dis.readLong();
					}

					this.ref_pago = readString(dis);

				} catch (IOException e) {
					throw new RuntimeException(e);

				}

			}

		}

		public void writeData(ObjectOutputStream dos) {
			try {

				// int

				dos.writeInt(this.sec_documento);

				// String

				writeString(this.tip_documento, dos);

				// Long

				if (this.num_acta_documento == null) {
					dos.writeByte(-1);
				} else {
					dos.writeByte(0);
					dos.writeLong(this.num_acta_documento);
				}

				// Long

				if (this.num_acta == null) {
					dos.writeByte(-1);
				} else {
					dos.writeByte(0);
					dos.writeLong(this.num_acta);
				}

				// Long

				if (this.num_registro == null) {
					dos.writeByte(-1);
				} else {
					dos.writeByte(0);
					dos.writeLong(this.num_registro);
				}

				// java.util.Date

				writeDate(this.fec_documento, dos);

				// String

				writeString(this.obs_documento, dos);

				// String

				writeString(this.nom_solicitante, dos);

				// String

				writeString(this.cod_pais, dos);

				// Short

				if (this.num_agente == null) {
					dos.writeByte(-1);
				} else {
					dos.writeByte(0);
					dos.writeShort(this.num_agente);
				}

				// java.util.Date

				writeDate(this.fec_ingreso, dos);

				// Short

				if (this.tip_tramite == null) {
					dos.writeByte(-1);
				} else {
					dos.writeByte(0);
					dos.writeShort(this.tip_tramite);
				}

				// String

				writeString(this.cod_status, dos);

				// java.util.Date

				writeDate(this.fec_status, dos);

				// Integer

				writeInteger(this.num_registro_poder, dos);

				// Short

				if (this.num_agente_old == null) {
					dos.writeByte(-1);
				} else {
					dos.writeByte(0);
					dos.writeShort(this.num_agente_old);
				}

				// Long

				if (this.cobro_caja == null) {
					dos.writeByte(-1);
				} else {
					dos.writeByte(0);
					dos.writeLong(this.cobro_caja);
				}

				// String

				writeString(this.ref_pago, dos);

			} catch (IOException e) {
				throw new RuntimeException(e);
			}

		}

		public String toString() {

			StringBuilder sb = new StringBuilder();
			sb.append(super.toString());
			sb.append("[");
			sb.append("sec_documento=" + String.valueOf(sec_documento));
			sb.append(",tip_documento=" + tip_documento);
			sb.append(",num_acta_documento=" + String.valueOf(num_acta_documento));
			sb.append(",num_acta=" + String.valueOf(num_acta));
			sb.append(",num_registro=" + String.valueOf(num_registro));
			sb.append(",fec_documento=" + String.valueOf(fec_documento));
			sb.append(",obs_documento=" + obs_documento);
			sb.append(",nom_solicitante=" + nom_solicitante);
			sb.append(",cod_pais=" + cod_pais);
			sb.append(",num_agente=" + String.valueOf(num_agente));
			sb.append(",fec_ingreso=" + String.valueOf(fec_ingreso));
			sb.append(",tip_tramite=" + String.valueOf(tip_tramite));
			sb.append(",cod_status=" + cod_status);
			sb.append(",fec_status=" + String.valueOf(fec_status));
			sb.append(",num_registro_poder=" + String.valueOf(num_registro_poder));
			sb.append(",num_agente_old=" + String.valueOf(num_agente_old));
			sb.append(",cobro_caja=" + String.valueOf(cobro_caja));
			sb.append(",ref_pago=" + ref_pago);
			sb.append("]");

			return sb.toString();
		}

		/**
		 * Compare keys
		 */
		public int compareTo(row2Struct other) {

			int returnValue = -1;

			return returnValue;
		}

		private int checkNullsAndCompare(Object object1, Object object2) {
			int returnValue = 0;
			if (object1 instanceof Comparable && object2 instanceof Comparable) {
				returnValue = ((Comparable) object1).compareTo(object2);
			} else if (object1 != null && object2 != null) {
				returnValue = compareStrings(object1.toString(), object2.toString());
			} else if (object1 == null && object2 != null) {
				returnValue = 1;
			} else if (object1 != null && object2 == null) {
				returnValue = -1;
			} else {
				returnValue = 0;
			}

			return returnValue;
		}

		private int compareStrings(String string1, String string2) {
			return string1.compareTo(string2);
		}

	}

	public static class after_tDBInput_2Struct implements routines.system.IPersistableRow<after_tDBInput_2Struct> {
		final static byte[] commonByteArrayLock_WIPO_PROJECTS_E1a_Marc_Userdoc_a_interm = new byte[0];
		static byte[] commonByteArray_WIPO_PROJECTS_E1a_Marc_Userdoc_a_interm = new byte[0];

		public int sec_documento;

		public int getSec_documento() {
			return this.sec_documento;
		}

		public String tip_documento;

		public String getTip_documento() {
			return this.tip_documento;
		}

		public Long num_acta_documento;

		public Long getNum_acta_documento() {
			return this.num_acta_documento;
		}

		public Long num_acta;

		public Long getNum_acta() {
			return this.num_acta;
		}

		public Long num_registro;

		public Long getNum_registro() {
			return this.num_registro;
		}

		public java.util.Date fec_documento;

		public java.util.Date getFec_documento() {
			return this.fec_documento;
		}

		public String obs_documento;

		public String getObs_documento() {
			return this.obs_documento;
		}

		public String nom_solicitante;

		public String getNom_solicitante() {
			return this.nom_solicitante;
		}

		public String cod_pais;

		public String getCod_pais() {
			return this.cod_pais;
		}

		public Short num_agente;

		public Short getNum_agente() {
			return this.num_agente;
		}

		public java.util.Date fec_ingreso;

		public java.util.Date getFec_ingreso() {
			return this.fec_ingreso;
		}

		public Short tip_tramite;

		public Short getTip_tramite() {
			return this.tip_tramite;
		}

		public String cod_status;

		public String getCod_status() {
			return this.cod_status;
		}

		public java.util.Date fec_status;

		public java.util.Date getFec_status() {
			return this.fec_status;
		}

		public Integer num_registro_poder;

		public Integer getNum_registro_poder() {
			return this.num_registro_poder;
		}

		public Short num_agente_old;

		public Short getNum_agente_old() {
			return this.num_agente_old;
		}

		public Long cobro_caja;

		public Long getCobro_caja() {
			return this.cobro_caja;
		}

		public String ref_pago;

		public String getRef_pago() {
			return this.ref_pago;
		}

		private String readString(ObjectInputStream dis) throws IOException {
			String strReturn = null;
			int length = 0;
			length = dis.readInt();
			if (length == -1) {
				strReturn = null;
			} else {
				if (length > commonByteArray_WIPO_PROJECTS_E1a_Marc_Userdoc_a_interm.length) {
					if (length < 1024 && commonByteArray_WIPO_PROJECTS_E1a_Marc_Userdoc_a_interm.length == 0) {
						commonByteArray_WIPO_PROJECTS_E1a_Marc_Userdoc_a_interm = new byte[1024];
					} else {
						commonByteArray_WIPO_PROJECTS_E1a_Marc_Userdoc_a_interm = new byte[2 * length];
					}
				}
				dis.readFully(commonByteArray_WIPO_PROJECTS_E1a_Marc_Userdoc_a_interm, 0, length);
				strReturn = new String(commonByteArray_WIPO_PROJECTS_E1a_Marc_Userdoc_a_interm, 0, length, utf8Charset);
			}
			return strReturn;
		}

		private void writeString(String str, ObjectOutputStream dos) throws IOException {
			if (str == null) {
				dos.writeInt(-1);
			} else {
				byte[] byteArray = str.getBytes(utf8Charset);
				dos.writeInt(byteArray.length);
				dos.write(byteArray);
			}
		}

		private java.util.Date readDate(ObjectInputStream dis) throws IOException {
			java.util.Date dateReturn = null;
			int length = 0;
			length = dis.readByte();
			if (length == -1) {
				dateReturn = null;
			} else {
				dateReturn = new Date(dis.readLong());
			}
			return dateReturn;
		}

		private void writeDate(java.util.Date date1, ObjectOutputStream dos) throws IOException {
			if (date1 == null) {
				dos.writeByte(-1);
			} else {
				dos.writeByte(0);
				dos.writeLong(date1.getTime());
			}
		}

		private Integer readInteger(ObjectInputStream dis) throws IOException {
			Integer intReturn;
			int length = 0;
			length = dis.readByte();
			if (length == -1) {
				intReturn = null;
			} else {
				intReturn = dis.readInt();
			}
			return intReturn;
		}

		private void writeInteger(Integer intNum, ObjectOutputStream dos) throws IOException {
			if (intNum == null) {
				dos.writeByte(-1);
			} else {
				dos.writeByte(0);
				dos.writeInt(intNum);
			}
		}

		public void readData(ObjectInputStream dis) {

			synchronized (commonByteArrayLock_WIPO_PROJECTS_E1a_Marc_Userdoc_a_interm) {

				try {

					int length = 0;

					this.sec_documento = dis.readInt();

					this.tip_documento = readString(dis);

					length = dis.readByte();
					if (length == -1) {
						this.num_acta_documento = null;
					} else {
						this.num_acta_documento = dis.readLong();
					}

					length = dis.readByte();
					if (length == -1) {
						this.num_acta = null;
					} else {
						this.num_acta = dis.readLong();
					}

					length = dis.readByte();
					if (length == -1) {
						this.num_registro = null;
					} else {
						this.num_registro = dis.readLong();
					}

					this.fec_documento = readDate(dis);

					this.obs_documento = readString(dis);

					this.nom_solicitante = readString(dis);

					this.cod_pais = readString(dis);

					length = dis.readByte();
					if (length == -1) {
						this.num_agente = null;
					} else {
						this.num_agente = dis.readShort();
					}

					this.fec_ingreso = readDate(dis);

					length = dis.readByte();
					if (length == -1) {
						this.tip_tramite = null;
					} else {
						this.tip_tramite = dis.readShort();
					}

					this.cod_status = readString(dis);

					this.fec_status = readDate(dis);

					this.num_registro_poder = readInteger(dis);

					length = dis.readByte();
					if (length == -1) {
						this.num_agente_old = null;
					} else {
						this.num_agente_old = dis.readShort();
					}

					length = dis.readByte();
					if (length == -1) {
						this.cobro_caja = null;
					} else {
						this.cobro_caja = dis.readLong();
					}

					this.ref_pago = readString(dis);

				} catch (IOException e) {
					throw new RuntimeException(e);

				}

			}

		}

		public void writeData(ObjectOutputStream dos) {
			try {

				// int

				dos.writeInt(this.sec_documento);

				// String

				writeString(this.tip_documento, dos);

				// Long

				if (this.num_acta_documento == null) {
					dos.writeByte(-1);
				} else {
					dos.writeByte(0);
					dos.writeLong(this.num_acta_documento);
				}

				// Long

				if (this.num_acta == null) {
					dos.writeByte(-1);
				} else {
					dos.writeByte(0);
					dos.writeLong(this.num_acta);
				}

				// Long

				if (this.num_registro == null) {
					dos.writeByte(-1);
				} else {
					dos.writeByte(0);
					dos.writeLong(this.num_registro);
				}

				// java.util.Date

				writeDate(this.fec_documento, dos);

				// String

				writeString(this.obs_documento, dos);

				// String

				writeString(this.nom_solicitante, dos);

				// String

				writeString(this.cod_pais, dos);

				// Short

				if (this.num_agente == null) {
					dos.writeByte(-1);
				} else {
					dos.writeByte(0);
					dos.writeShort(this.num_agente);
				}

				// java.util.Date

				writeDate(this.fec_ingreso, dos);

				// Short

				if (this.tip_tramite == null) {
					dos.writeByte(-1);
				} else {
					dos.writeByte(0);
					dos.writeShort(this.tip_tramite);
				}

				// String

				writeString(this.cod_status, dos);

				// java.util.Date

				writeDate(this.fec_status, dos);

				// Integer

				writeInteger(this.num_registro_poder, dos);

				// Short

				if (this.num_agente_old == null) {
					dos.writeByte(-1);
				} else {
					dos.writeByte(0);
					dos.writeShort(this.num_agente_old);
				}

				// Long

				if (this.cobro_caja == null) {
					dos.writeByte(-1);
				} else {
					dos.writeByte(0);
					dos.writeLong(this.cobro_caja);
				}

				// String

				writeString(this.ref_pago, dos);

			} catch (IOException e) {
				throw new RuntimeException(e);
			}

		}

		public String toString() {

			StringBuilder sb = new StringBuilder();
			sb.append(super.toString());
			sb.append("[");
			sb.append("sec_documento=" + String.valueOf(sec_documento));
			sb.append(",tip_documento=" + tip_documento);
			sb.append(",num_acta_documento=" + String.valueOf(num_acta_documento));
			sb.append(",num_acta=" + String.valueOf(num_acta));
			sb.append(",num_registro=" + String.valueOf(num_registro));
			sb.append(",fec_documento=" + String.valueOf(fec_documento));
			sb.append(",obs_documento=" + obs_documento);
			sb.append(",nom_solicitante=" + nom_solicitante);
			sb.append(",cod_pais=" + cod_pais);
			sb.append(",num_agente=" + String.valueOf(num_agente));
			sb.append(",fec_ingreso=" + String.valueOf(fec_ingreso));
			sb.append(",tip_tramite=" + String.valueOf(tip_tramite));
			sb.append(",cod_status=" + cod_status);
			sb.append(",fec_status=" + String.valueOf(fec_status));
			sb.append(",num_registro_poder=" + String.valueOf(num_registro_poder));
			sb.append(",num_agente_old=" + String.valueOf(num_agente_old));
			sb.append(",cobro_caja=" + String.valueOf(cobro_caja));
			sb.append(",ref_pago=" + ref_pago);
			sb.append("]");

			return sb.toString();
		}

		/**
		 * Compare keys
		 */
		public int compareTo(after_tDBInput_2Struct other) {

			int returnValue = -1;

			return returnValue;
		}

		private int checkNullsAndCompare(Object object1, Object object2) {
			int returnValue = 0;
			if (object1 instanceof Comparable && object2 instanceof Comparable) {
				returnValue = ((Comparable) object1).compareTo(object2);
			} else if (object1 != null && object2 != null) {
				returnValue = compareStrings(object1.toString(), object2.toString());
			} else if (object1 == null && object2 != null) {
				returnValue = 1;
			} else if (object1 != null && object2 == null) {
				returnValue = -1;
			} else {
				returnValue = 0;
			}

			return returnValue;
		}

		private int compareStrings(String string1, String string2) {
			return string1.compareTo(string2);
		}

	}

	public void tDBInput_2Process(final java.util.Map<String, Object> globalMap) throws TalendException {
		globalMap.put("tDBInput_2_SUBPROCESS_STATE", 0);

		final boolean execStat = this.execStat;

		String iterateId = "";

		String currentComponent = "";
		java.util.Map<String, Object> resourceMap = new java.util.HashMap<String, Object>();

		try {
			// TDI-39566 avoid throwing an useless Exception
			boolean resumeIt = true;
			if (globalResumeTicket == false && resumeEntryMethodName != null) {
				String currentMethodName = new java.lang.Exception().getStackTrace()[0].getMethodName();
				resumeIt = resumeEntryMethodName.equals(currentMethodName);
			}
			if (resumeIt || globalResumeTicket) { // start the resume
				globalResumeTicket = true;

				tDBInput_16Process(globalMap);

				row2Struct row2 = new row2Struct();
				udStruct ud = new udStruct();
				row4Struct row4 = new row4Struct();

				/**
				 * [tLogRow_1 begin ] start
				 */

				ok_Hash.put("tLogRow_1", false);
				start_Hash.put("tLogRow_1", System.currentTimeMillis());

				currentComponent = "tLogRow_1";

				if (execStat) {
					runStat.updateStatOnConnection(resourceMap, iterateId, 0, 0, "row4");
				}

				int tos_count_tLogRow_1 = 0;

				///////////////////////

				final String OUTPUT_FIELD_SEPARATOR_tLogRow_1 = "|";
				java.io.PrintStream consoleOut_tLogRow_1 = null;

				StringBuilder strBuffer_tLogRow_1 = null;
				int nb_line_tLogRow_1 = 0;
///////////////////////    			

				/**
				 * [tLogRow_1 begin ] stop
				 */

				/**
				 * [tDBOutput_1 begin ] start
				 */

				ok_Hash.put("tDBOutput_1", false);
				start_Hash.put("tDBOutput_1", System.currentTimeMillis());

				currentComponent = "tDBOutput_1";

				if (execStat) {
					runStat.updateStatOnConnection(resourceMap, iterateId, 0, 0, "ud");
				}

				int tos_count_tDBOutput_1 = 0;

				int nb_line_tDBOutput_1 = 0;
				int nb_line_update_tDBOutput_1 = 0;
				int nb_line_inserted_tDBOutput_1 = 0;
				int nb_line_deleted_tDBOutput_1 = 0;
				int nb_line_rejected_tDBOutput_1 = 0;

				int deletedCount_tDBOutput_1 = 0;
				int updatedCount_tDBOutput_1 = 0;
				int insertedCount_tDBOutput_1 = 0;
				int rejectedCount_tDBOutput_1 = 0;
				String dbschema_tDBOutput_1 = null;
				String tableName_tDBOutput_1 = null;
				boolean whetherReject_tDBOutput_1 = false;

				java.util.Calendar calendar_tDBOutput_1 = java.util.Calendar.getInstance();
				long year1_tDBOutput_1 = TalendDate.parseDate("yyyy-MM-dd", "0001-01-01").getTime();
				long year2_tDBOutput_1 = TalendDate.parseDate("yyyy-MM-dd", "1753-01-01").getTime();
				long year10000_tDBOutput_1 = TalendDate.parseDate("yyyy-MM-dd HH:mm:ss", "9999-12-31 24:00:00")
						.getTime();
				long date_tDBOutput_1;

				java.util.Calendar calendar_datetimeoffset_tDBOutput_1 = java.util.Calendar
						.getInstance(java.util.TimeZone.getTimeZone("UTC"));

				java.sql.Connection conn_tDBOutput_1 = null;
				String dbUser_tDBOutput_1 = null;
				dbschema_tDBOutput_1 = (String) globalMap.get("dbschema_tDBConnection_1");

				conn_tDBOutput_1 = (java.sql.Connection) globalMap.get("conn_tDBConnection_1");

				if (dbschema_tDBOutput_1 == null || dbschema_tDBOutput_1.trim().length() == 0) {
					tableName_tDBOutput_1 = "VW_IMPORT_USERDOC";
				} else {
					tableName_tDBOutput_1 = dbschema_tDBOutput_1 + "].[" + "VW_IMPORT_USERDOC";
				}
				int count_tDBOutput_1 = 0;

				try (java.sql.Statement stmtClear_tDBOutput_1 = conn_tDBOutput_1.createStatement()) {
					stmtClear_tDBOutput_1.executeUpdate("DELETE FROM [" + tableName_tDBOutput_1 + "]");
				}
				String insert_tDBOutput_1 = "INSERT INTO [" + tableName_tDBOutput_1
						+ "] ([USERDOC_SEQ],[USERDOC_SERIES],[USERDOC_NBR],[DOC_ORI],[DOC_SERIES],[DOC_NBR],[IND_IMPORT],[USERDOC_TYPE],[LAW_CODE],[FILING_DATE],[RECEPTION_DATE],[NOTES],[APPLICANT_NOTES],[PERSON_NAME],[PERSON_NAME_LANG2],[NATIONALITY_COUNTRY_CODE],[IND_COMPANY],[LEGAL_NATURE],[LEGAL_NATURE_LANG2],[LEGAL_ID_TYPE],[LEGAL_ID_NBR],[INDIVIDUAL_ID_TYPE],[INDIVIDUAL_ID_NBR],[RESIDENCE_COUNTRY_CODE],[STATE_NAME],[STATE_CODE],[CITY_NAME],[CITY_CODE],[ADDRESS_ZONE],[ADDRESS_STREET],[ADDRESS_STREET_LANG2],[ZIP_CODE],[EMAIL],[TELEPHONE],[PERSON_GROUP_CODE],[CAPTURE_USER_ID],[CAPTURE_DATE]) VALUES (?,?,?,?,?,?,?,?,?,?,?,?,?,?,?,?,?,?,?,?,?,?,?,?,?,?,?,?,?,?,?,?,?,?,?,?,?)";
				java.sql.PreparedStatement pstmt_tDBOutput_1 = conn_tDBOutput_1.prepareStatement(insert_tDBOutput_1);
				resourceMap.put("pstmt_tDBOutput_1", pstmt_tDBOutput_1);

				boolean isShareIdentity_tDBOutput_1 = globalMap.get("shareIdentitySetting_tDBConnection_1") != null
						&& (Boolean) globalMap.get("shareIdentitySetting_tDBConnection_1") == true;

				/**
				 * [tDBOutput_1 begin ] stop
				 */

				/**
				 * [tMap_1 begin ] start
				 */

				ok_Hash.put("tMap_1", false);
				start_Hash.put("tMap_1", System.currentTimeMillis());

				currentComponent = "tMap_1";

				if (execStat) {
					runStat.updateStatOnConnection(resourceMap, iterateId, 0, 0, "row2");
				}

				int tos_count_tMap_1 = 0;

// ###############################
// # Lookup's keys initialization

				org.talend.designer.components.lookup.memory.AdvancedMemoryLookup<row5Struct> tHash_Lookup_row5 = (org.talend.designer.components.lookup.memory.AdvancedMemoryLookup<row5Struct>) ((org.talend.designer.components.lookup.memory.AdvancedMemoryLookup<row5Struct>) globalMap
						.get("tHash_Lookup_row5"));

				row5Struct row5HashKey = new row5Struct();
				row5Struct row5Default = new row5Struct();
// ###############################        

// ###############################
// # Vars initialization
				class Var__tMap_1__Struct {
				}
				Var__tMap_1__Struct Var__tMap_1 = new Var__tMap_1__Struct();
// ###############################

// ###############################
// # Outputs initialization
				udStruct ud_tmp = new udStruct();
// ###############################

				/**
				 * [tMap_1 begin ] stop
				 */

				/**
				 * [tDBInput_2 begin ] start
				 */

				ok_Hash.put("tDBInput_2", false);
				start_Hash.put("tDBInput_2", System.currentTimeMillis());

				currentComponent = "tDBInput_2";

				int tos_count_tDBInput_2 = 0;

				int nb_line_tDBInput_2 = 0;
				java.sql.Connection conn_tDBInput_2 = null;
				conn_tDBInput_2 = (java.sql.Connection) globalMap.get("conn_tDBConnection_2");

				java.sql.Statement stmt_tDBInput_2 = conn_tDBInput_2.createStatement();

				String dbquery_tDBInput_2 = "SELECT \n  sec_documento, \n  tip_documento, \n  num_acta_documento, \n  num_acta, \n  num_registro, \n  fec_documento,"
						+ " \n  obs_documento, \n  nom_solicitante, \n  cod_pais, \n  num_agente, \n  fec_ingreso, \n  tip_tramite, \n  cod_status,"
						+ " \n  fec_status, \n  num_registro_poder, \n  num_agente_old, \n  cobro_caja, \n  ref_pago\nFROM documento \n\n\nwhere   "
						+ "num_acta \n\nin (select  num_acta \n\n FROM marca) and num_acta_documento is not null";

				globalMap.put("tDBInput_2_QUERY", dbquery_tDBInput_2);
				java.sql.ResultSet rs_tDBInput_2 = null;

				try {
					rs_tDBInput_2 = stmt_tDBInput_2.executeQuery(dbquery_tDBInput_2);
					java.sql.ResultSetMetaData rsmd_tDBInput_2 = rs_tDBInput_2.getMetaData();
					int colQtyInRs_tDBInput_2 = rsmd_tDBInput_2.getColumnCount();

					String tmpContent_tDBInput_2 = null;

					while (rs_tDBInput_2.next()) {
						nb_line_tDBInput_2++;

						if (colQtyInRs_tDBInput_2 < 1) {
							row2.sec_documento = 0;
						} else {

							row2.sec_documento = rs_tDBInput_2.getInt(1);
							if (rs_tDBInput_2.wasNull()) {
								throw new RuntimeException("Null value in non-Nullable column");
							}
						}
						if (colQtyInRs_tDBInput_2 < 2) {
							row2.tip_documento = null;
						} else {

							row2.tip_documento = routines.system.JDBCUtil.getString(rs_tDBInput_2, 2, false);
						}
						if (colQtyInRs_tDBInput_2 < 3) {
							row2.num_acta_documento = null;
						} else {

							row2.num_acta_documento = rs_tDBInput_2.getLong(3);
							if (rs_tDBInput_2.wasNull()) {
								row2.num_acta_documento = null;
							}
						}
						if (colQtyInRs_tDBInput_2 < 4) {
							row2.num_acta = null;
						} else {

							row2.num_acta = rs_tDBInput_2.getLong(4);
							if (rs_tDBInput_2.wasNull()) {
								row2.num_acta = null;
							}
						}
						if (colQtyInRs_tDBInput_2 < 5) {
							row2.num_registro = null;
						} else {

							row2.num_registro = rs_tDBInput_2.getLong(5);
							if (rs_tDBInput_2.wasNull()) {
								row2.num_registro = null;
							}
						}
						if (colQtyInRs_tDBInput_2 < 6) {
							row2.fec_documento = null;
						} else {

							row2.fec_documento = routines.system.JDBCUtil.getDate(rs_tDBInput_2, 6);
						}
						if (colQtyInRs_tDBInput_2 < 7) {
							row2.obs_documento = null;
						} else {

							row2.obs_documento = routines.system.JDBCUtil.getString(rs_tDBInput_2, 7, false);
						}
						if (colQtyInRs_tDBInput_2 < 8) {
							row2.nom_solicitante = null;
						} else {

							row2.nom_solicitante = routines.system.JDBCUtil.getString(rs_tDBInput_2, 8, false);
						}
						if (colQtyInRs_tDBInput_2 < 9) {
							row2.cod_pais = null;
						} else {

							row2.cod_pais = routines.system.JDBCUtil.getString(rs_tDBInput_2, 9, false);
						}
						if (colQtyInRs_tDBInput_2 < 10) {
							row2.num_agente = null;
						} else {

							row2.num_agente = rs_tDBInput_2.getShort(10);
							if (rs_tDBInput_2.wasNull()) {
								row2.num_agente = null;
							}
						}
						if (colQtyInRs_tDBInput_2 < 11) {
							row2.fec_ingreso = null;
						} else {

							row2.fec_ingreso = routines.system.JDBCUtil.getDate(rs_tDBInput_2, 11);
						}
						if (colQtyInRs_tDBInput_2 < 12) {
							row2.tip_tramite = null;
						} else {

							row2.tip_tramite = rs_tDBInput_2.getShort(12);
							if (rs_tDBInput_2.wasNull()) {
								row2.tip_tramite = null;
							}
						}
						if (colQtyInRs_tDBInput_2 < 13) {
							row2.cod_status = null;
						} else {

							row2.cod_status = routines.system.JDBCUtil.getString(rs_tDBInput_2, 13, false);
						}
						if (colQtyInRs_tDBInput_2 < 14) {
							row2.fec_status = null;
						} else {

							row2.fec_status = routines.system.JDBCUtil.getDate(rs_tDBInput_2, 14);
						}
						if (colQtyInRs_tDBInput_2 < 15) {
							row2.num_registro_poder = null;
						} else {

							row2.num_registro_poder = rs_tDBInput_2.getInt(15);
							if (rs_tDBInput_2.wasNull()) {
								row2.num_registro_poder = null;
							}
						}
						if (colQtyInRs_tDBInput_2 < 16) {
							row2.num_agente_old = null;
						} else {

							row2.num_agente_old = rs_tDBInput_2.getShort(16);
							if (rs_tDBInput_2.wasNull()) {
								row2.num_agente_old = null;
							}
						}
						if (colQtyInRs_tDBInput_2 < 17) {
							row2.cobro_caja = null;
						} else {

							row2.cobro_caja = rs_tDBInput_2.getLong(17);
							if (rs_tDBInput_2.wasNull()) {
								row2.cobro_caja = null;
							}
						}
						if (colQtyInRs_tDBInput_2 < 18) {
							row2.ref_pago = null;
						} else {

							row2.ref_pago = routines.system.JDBCUtil.getString(rs_tDBInput_2, 18, false);
						}

						/**
						 * [tDBInput_2 begin ] stop
						 */

						/**
						 * [tDBInput_2 main ] start
						 */

						currentComponent = "tDBInput_2";

						tos_count_tDBInput_2++;

						/**
						 * [tDBInput_2 main ] stop
						 */

						/**
						 * [tDBInput_2 process_data_begin ] start
						 */

						currentComponent = "tDBInput_2";

						/**
						 * [tDBInput_2 process_data_begin ] stop
						 */

						/**
						 * [tMap_1 main ] start
						 */

						currentComponent = "tMap_1";

						if (execStat) {
							runStat.updateStatOnConnection(iterateId, 1, 1

									, "row2"

							);
						}

						boolean hasCasePrimitiveKeyWithNull_tMap_1 = false;

						// ###############################
						// # Input tables (lookups)
						boolean rejectedInnerJoin_tMap_1 = false;
						boolean mainRowRejected_tMap_1 = false;

						///////////////////////////////////////////////
						// Starting Lookup Table "row5"
						///////////////////////////////////////////////

						boolean forceLooprow5 = false;

						row5Struct row5ObjectFromLookup = null;

						if (!rejectedInnerJoin_tMap_1) { // G_TM_M_020

							hasCasePrimitiveKeyWithNull_tMap_1 = false;

							row5HashKey.nom_titular = row2.nom_solicitante;

							row5HashKey.hashCodeDirty = true;

							tHash_Lookup_row5.lookup(row5HashKey);

						} // G_TM_M_020

						if (tHash_Lookup_row5 != null && tHash_Lookup_row5.getCount(row5HashKey) > 1) { // G 071

							// System.out.println("WARNING: UNIQUE MATCH is configured for the lookup 'row5'
							// and it contains more one result from keys : row5.nom_titular = '" +
							// row5HashKey.nom_titular + "'");
						} // G 071

						row5Struct row5 = null;

						row5Struct fromLookup_row5 = null;
						row5 = row5Default;

						if (tHash_Lookup_row5 != null && tHash_Lookup_row5.hasNext()) { // G 099

							fromLookup_row5 = tHash_Lookup_row5.next();

						} // G 099

						if (fromLookup_row5 != null) {
							row5 = fromLookup_row5;
						}

						// ###############################
						{ // start of Var scope

							// ###############################
							// # Vars tables

							Var__tMap_1__Struct Var = Var__tMap_1;// ###############################
							// ###############################
							// # Output tables

							ud = null;

// # Output table : 'ud'
							ud_tmp.USERDOC_SEQ = "M";
							ud_tmp.USERDOC_SERIES = new Integer(TalendDate.formatDate("yyyy", row2.fec_ingreso)) <= 1970
									? new BigDecimal("19" + row2.num_acta_documento.toString().substring(0, 2))

									: new BigDecimal(TalendDate.formatDate("yyyy", row2.fec_ingreso));
							ud_tmp.USERDOC_NBR = new BigDecimal(row2.num_acta_documento);
							ud_tmp.DOC_ORI = "PY";
							ud_tmp.DOC_SERIES = new BigDecimal("1");
							ud_tmp.DOC_NBR = new BigDecimal(row2.sec_documento);
							ud_tmp.IND_IMPORT = null;
							ud_tmp.USERDOC_TYPE = row2.tip_documento;
							ud_tmp.LAW_CODE = new BigDecimal("1");
							ud_tmp.FILING_DATE = row2.fec_ingreso;
							ud_tmp.RECEPTION_DATE = row2.fec_documento;
							ud_tmp.NOTES = row2.obs_documento;
							ud_tmp.APPLICANT_NOTES = null;
							ud_tmp.PERSON_NAME = row5.nom_titular != null ? row5.nom_titular :

									row2.nom_solicitante != null ? row2.nom_solicitante : "Falta capturar titular";
							ud_tmp.PERSON_NAME_LANG2 = null;
							ud_tmp.NATIONALITY_COUNTRY_CODE = row2.cod_pais != null ? row2.cod_pais : "XX";
							ud_tmp.IND_COMPANY = null;
							ud_tmp.LEGAL_NATURE = null;
							ud_tmp.LEGAL_NATURE_LANG2 = null;
							ud_tmp.LEGAL_ID_TYPE = null;
							ud_tmp.LEGAL_ID_NBR = null;
							ud_tmp.INDIVIDUAL_ID_TYPE = null;
							ud_tmp.INDIVIDUAL_ID_NBR = null;
							ud_tmp.RESIDENCE_COUNTRY_CODE = row2.cod_pais != null ? row2.cod_pais : "XX";
							ud_tmp.STATE_NAME = null;
							ud_tmp.STATE_CODE = null;
							ud_tmp.CITY_NAME = null;
							ud_tmp.CITY_CODE = null;
							ud_tmp.ADDRESS_ZONE = null;
							ud_tmp.ADDRESS_STREET = row5.dir_titular != null ? row5.dir_titular
									: "Se debe capturar direccion";
							ud_tmp.ADDRESS_STREET_LANG2 = null;
							ud_tmp.ZIP_CODE = null;
							ud_tmp.EMAIL = null;
							ud_tmp.TELEPHONE = null;
							ud_tmp.PERSON_GROUP_CODE = null;
							ud_tmp.CAPTURE_USER_ID = new BigDecimal("4");
							ud_tmp.CAPTURE_DATE = row2.fec_ingreso;
							ud = ud_tmp;
// ###############################

						} // end of Var scope

						rejectedInnerJoin_tMap_1 = false;

						tos_count_tMap_1++;

						/**
						 * [tMap_1 main ] stop
						 */

						/**
						 * [tMap_1 process_data_begin ] start
						 */

						currentComponent = "tMap_1";

						/**
						 * [tMap_1 process_data_begin ] stop
						 */
// Start of branch "ud"
						if (ud != null) {
							row4 = null;

							/**
							 * [tDBOutput_1 main ] start
							 */

							currentComponent = "tDBOutput_1";

							if (execStat) {
								runStat.updateStatOnConnection(iterateId, 1, 1

										, "ud"

								);
							}

							row4 = null;
							whetherReject_tDBOutput_1 = false;
							try {
								if (ud.USERDOC_SEQ == null) {
									pstmt_tDBOutput_1.setNull(1, java.sql.Types.VARCHAR);
								} else {
									pstmt_tDBOutput_1.setString(1, ud.USERDOC_SEQ);
								}

								pstmt_tDBOutput_1.setBigDecimal(2, ud.USERDOC_SERIES);

								pstmt_tDBOutput_1.setBigDecimal(3, ud.USERDOC_NBR);

								if (ud.DOC_ORI == null) {
									pstmt_tDBOutput_1.setNull(4, java.sql.Types.VARCHAR);
								} else {
									pstmt_tDBOutput_1.setString(4, ud.DOC_ORI);
								}

								pstmt_tDBOutput_1.setBigDecimal(5, ud.DOC_SERIES);

								pstmt_tDBOutput_1.setBigDecimal(6, ud.DOC_NBR);

								pstmt_tDBOutput_1.setBigDecimal(7, ud.IND_IMPORT);

								if (ud.USERDOC_TYPE == null) {
									pstmt_tDBOutput_1.setNull(8, java.sql.Types.VARCHAR);
								} else {
									pstmt_tDBOutput_1.setString(8, ud.USERDOC_TYPE);
								}

								pstmt_tDBOutput_1.setBigDecimal(9, ud.LAW_CODE);

								if (ud.FILING_DATE != null) {
									pstmt_tDBOutput_1.setTimestamp(10,
											new java.sql.Timestamp(ud.FILING_DATE.getTime()));
								} else {
									pstmt_tDBOutput_1.setNull(10, java.sql.Types.TIMESTAMP);
								}

								if (ud.RECEPTION_DATE != null) {
									pstmt_tDBOutput_1.setTimestamp(11,
											new java.sql.Timestamp(ud.RECEPTION_DATE.getTime()));
								} else {
									pstmt_tDBOutput_1.setNull(11, java.sql.Types.TIMESTAMP);
								}

								if (ud.NOTES == null) {
									pstmt_tDBOutput_1.setNull(12, java.sql.Types.VARCHAR);
								} else {
									pstmt_tDBOutput_1.setString(12, ud.NOTES);
								}

								if (ud.APPLICANT_NOTES == null) {
									pstmt_tDBOutput_1.setNull(13, java.sql.Types.VARCHAR);
								} else {
									pstmt_tDBOutput_1.setString(13, ud.APPLICANT_NOTES);
								}

								if (ud.PERSON_NAME == null) {
									pstmt_tDBOutput_1.setNull(14, java.sql.Types.VARCHAR);
								} else {
									pstmt_tDBOutput_1.setString(14, ud.PERSON_NAME);
								}

								if (ud.PERSON_NAME_LANG2 == null) {
									pstmt_tDBOutput_1.setNull(15, java.sql.Types.VARCHAR);
								} else {
									pstmt_tDBOutput_1.setString(15, ud.PERSON_NAME_LANG2);
								}

								if (ud.NATIONALITY_COUNTRY_CODE == null) {
									pstmt_tDBOutput_1.setNull(16, java.sql.Types.VARCHAR);
								} else {
									pstmt_tDBOutput_1.setString(16, ud.NATIONALITY_COUNTRY_CODE);
								}

								pstmt_tDBOutput_1.setBigDecimal(17, ud.IND_COMPANY);

								if (ud.LEGAL_NATURE == null) {
									pstmt_tDBOutput_1.setNull(18, java.sql.Types.VARCHAR);
								} else {
									pstmt_tDBOutput_1.setString(18, ud.LEGAL_NATURE);
								}

								if (ud.LEGAL_NATURE_LANG2 == null) {
									pstmt_tDBOutput_1.setNull(19, java.sql.Types.VARCHAR);
								} else {
									pstmt_tDBOutput_1.setString(19, ud.LEGAL_NATURE_LANG2);
								}

								if (ud.LEGAL_ID_TYPE == null) {
									pstmt_tDBOutput_1.setNull(20, java.sql.Types.VARCHAR);
								} else {
									pstmt_tDBOutput_1.setString(20, ud.LEGAL_ID_TYPE);
								}

								pstmt_tDBOutput_1.setBigDecimal(21, ud.LEGAL_ID_NBR);

								if (ud.INDIVIDUAL_ID_TYPE == null) {
									pstmt_tDBOutput_1.setNull(22, java.sql.Types.VARCHAR);
								} else {
									pstmt_tDBOutput_1.setString(22, ud.INDIVIDUAL_ID_TYPE);
								}

								pstmt_tDBOutput_1.setBigDecimal(23, ud.INDIVIDUAL_ID_NBR);

								if (ud.RESIDENCE_COUNTRY_CODE == null) {
									pstmt_tDBOutput_1.setNull(24, java.sql.Types.VARCHAR);
								} else {
									pstmt_tDBOutput_1.setString(24, ud.RESIDENCE_COUNTRY_CODE);
								}

								if (ud.STATE_NAME == null) {
									pstmt_tDBOutput_1.setNull(25, java.sql.Types.VARCHAR);
								} else {
									pstmt_tDBOutput_1.setString(25, ud.STATE_NAME);
								}

								if (ud.STATE_CODE == null) {
									pstmt_tDBOutput_1.setNull(26, java.sql.Types.VARCHAR);
								} else {
									pstmt_tDBOutput_1.setString(26, ud.STATE_CODE);
								}

								if (ud.CITY_NAME == null) {
									pstmt_tDBOutput_1.setNull(27, java.sql.Types.VARCHAR);
								} else {
									pstmt_tDBOutput_1.setString(27, ud.CITY_NAME);
								}

								if (ud.CITY_CODE == null) {
									pstmt_tDBOutput_1.setNull(28, java.sql.Types.VARCHAR);
								} else {
									pstmt_tDBOutput_1.setString(28, ud.CITY_CODE);
								}

								if (ud.ADDRESS_ZONE == null) {
									pstmt_tDBOutput_1.setNull(29, java.sql.Types.VARCHAR);
								} else {
									pstmt_tDBOutput_1.setString(29, ud.ADDRESS_ZONE);
								}

								if (ud.ADDRESS_STREET == null) {
									pstmt_tDBOutput_1.setNull(30, java.sql.Types.VARCHAR);
								} else {
									pstmt_tDBOutput_1.setString(30, ud.ADDRESS_STREET);
								}

								if (ud.ADDRESS_STREET_LANG2 == null) {
									pstmt_tDBOutput_1.setNull(31, java.sql.Types.VARCHAR);
								} else {
									pstmt_tDBOutput_1.setString(31, ud.ADDRESS_STREET_LANG2);
								}

								if (ud.ZIP_CODE == null) {
									pstmt_tDBOutput_1.setNull(32, java.sql.Types.VARCHAR);
								} else {
									pstmt_tDBOutput_1.setString(32, ud.ZIP_CODE);
								}

								if (ud.EMAIL == null) {
									pstmt_tDBOutput_1.setNull(33, java.sql.Types.VARCHAR);
								} else {
									pstmt_tDBOutput_1.setString(33, ud.EMAIL);
								}

								if (ud.TELEPHONE == null) {
									pstmt_tDBOutput_1.setNull(34, java.sql.Types.VARCHAR);
								} else {
									pstmt_tDBOutput_1.setString(34, ud.TELEPHONE);
								}

								if (ud.PERSON_GROUP_CODE == null) {
									pstmt_tDBOutput_1.setNull(35, java.sql.Types.VARCHAR);
								} else {
									pstmt_tDBOutput_1.setString(35, ud.PERSON_GROUP_CODE);
								}

								pstmt_tDBOutput_1.setBigDecimal(36, ud.CAPTURE_USER_ID);

								if (ud.CAPTURE_DATE != null) {
									pstmt_tDBOutput_1.setTimestamp(37,
											new java.sql.Timestamp(ud.CAPTURE_DATE.getTime()));
								} else {
									pstmt_tDBOutput_1.setNull(37, java.sql.Types.TIMESTAMP);
								}

								nb_line_tDBOutput_1++;
								insertedCount_tDBOutput_1 = insertedCount_tDBOutput_1
										+ pstmt_tDBOutput_1.executeUpdate();
							} catch (java.lang.Exception e) {
								whetherReject_tDBOutput_1 = true;
								row4 = new row4Struct();
								row4.USERDOC_SEQ = ud.USERDOC_SEQ;
								row4.USERDOC_SERIES = ud.USERDOC_SERIES;
								row4.USERDOC_NBR = ud.USERDOC_NBR;
								row4.DOC_ORI = ud.DOC_ORI;
								row4.DOC_SERIES = ud.DOC_SERIES;
								row4.DOC_NBR = ud.DOC_NBR;
								row4.IND_IMPORT = ud.IND_IMPORT;
								row4.USERDOC_TYPE = ud.USERDOC_TYPE;
								row4.LAW_CODE = ud.LAW_CODE;
								row4.FILING_DATE = ud.FILING_DATE;
								row4.RECEPTION_DATE = ud.RECEPTION_DATE;
								row4.NOTES = ud.NOTES;
								row4.APPLICANT_NOTES = ud.APPLICANT_NOTES;
								row4.PERSON_NAME = ud.PERSON_NAME;
								row4.PERSON_NAME_LANG2 = ud.PERSON_NAME_LANG2;
								row4.NATIONALITY_COUNTRY_CODE = ud.NATIONALITY_COUNTRY_CODE;
								row4.IND_COMPANY = ud.IND_COMPANY;
								row4.LEGAL_NATURE = ud.LEGAL_NATURE;
								row4.LEGAL_NATURE_LANG2 = ud.LEGAL_NATURE_LANG2;
								row4.LEGAL_ID_TYPE = ud.LEGAL_ID_TYPE;
								row4.LEGAL_ID_NBR = ud.LEGAL_ID_NBR;
								row4.INDIVIDUAL_ID_TYPE = ud.INDIVIDUAL_ID_TYPE;
								row4.INDIVIDUAL_ID_NBR = ud.INDIVIDUAL_ID_NBR;
								row4.RESIDENCE_COUNTRY_CODE = ud.RESIDENCE_COUNTRY_CODE;
								row4.STATE_NAME = ud.STATE_NAME;
								row4.STATE_CODE = ud.STATE_CODE;
								row4.CITY_NAME = ud.CITY_NAME;
								row4.CITY_CODE = ud.CITY_CODE;
								row4.ADDRESS_ZONE = ud.ADDRESS_ZONE;
								row4.ADDRESS_STREET = ud.ADDRESS_STREET;
								row4.ADDRESS_STREET_LANG2 = ud.ADDRESS_STREET_LANG2;
								row4.ZIP_CODE = ud.ZIP_CODE;
								row4.EMAIL = ud.EMAIL;
								row4.TELEPHONE = ud.TELEPHONE;
								row4.PERSON_GROUP_CODE = ud.PERSON_GROUP_CODE;
								row4.CAPTURE_USER_ID = ud.CAPTURE_USER_ID;
								row4.CAPTURE_DATE = ud.CAPTURE_DATE;
								rejectedCount_tDBOutput_1 = rejectedCount_tDBOutput_1 + 1;
								row4.errorCode = ((java.sql.SQLException) e).getSQLState();
								row4.errorMessage = e.getMessage() + " - Line: " + tos_count_tDBOutput_1;
							}
							if (!whetherReject_tDBOutput_1) {
							}
							////////// batch execute by batch size///////
							class LimitBytesHelper_tDBOutput_1 {
								public int limitBytePart1(int counter, java.sql.PreparedStatement pstmt_tDBOutput_1)
										throws Exception {
									try {

										for (int countEach_tDBOutput_1 : pstmt_tDBOutput_1.executeBatch()) {
											if (countEach_tDBOutput_1 == -2 || countEach_tDBOutput_1 == -3) {
												break;
											}
											counter += countEach_tDBOutput_1;
										}

									} catch (java.sql.BatchUpdateException e) {

										int countSum_tDBOutput_1 = 0;
										for (int countEach_tDBOutput_1 : e.getUpdateCounts()) {
											counter += (countEach_tDBOutput_1 < 0 ? 0 : countEach_tDBOutput_1);
										}

										System.err.println(e.getMessage());

									}
									return counter;
								}

								public int limitBytePart2(int counter, java.sql.PreparedStatement pstmt_tDBOutput_1)
										throws Exception {
									try {

										for (int countEach_tDBOutput_1 : pstmt_tDBOutput_1.executeBatch()) {
											if (countEach_tDBOutput_1 == -2 || countEach_tDBOutput_1 == -3) {
												break;
											}
											counter += countEach_tDBOutput_1;
										}

									} catch (java.sql.BatchUpdateException e) {

										for (int countEach_tDBOutput_1 : e.getUpdateCounts()) {
											counter += (countEach_tDBOutput_1 < 0 ? 0 : countEach_tDBOutput_1);
										}

										System.err.println(e.getMessage());

									}
									return counter;
								}
							}

							//////////// commit every////////////

							tos_count_tDBOutput_1++;

							/**
							 * [tDBOutput_1 main ] stop
							 */

							/**
							 * [tDBOutput_1 process_data_begin ] start
							 */

							currentComponent = "tDBOutput_1";

							/**
							 * [tDBOutput_1 process_data_begin ] stop
							 */
// Start of branch "row4"
							if (row4 != null) {

								/**
								 * [tLogRow_1 main ] start
								 */

								currentComponent = "tLogRow_1";

								if (execStat) {
									runStat.updateStatOnConnection(iterateId, 1, 1

											, "row4"

									);
								}

///////////////////////		

								strBuffer_tLogRow_1 = new StringBuilder();

								if (row4.USERDOC_SEQ != null) { //

									strBuffer_tLogRow_1.append(String.valueOf(row4.USERDOC_SEQ));

								} //

								strBuffer_tLogRow_1.append("|");

								if (row4.USERDOC_SERIES != null) { //

									strBuffer_tLogRow_1.append(row4.USERDOC_SERIES
											.setScale(0, java.math.RoundingMode.HALF_UP).toPlainString());

								} //

								strBuffer_tLogRow_1.append("|");

								if (row4.USERDOC_NBR != null) { //

									strBuffer_tLogRow_1.append(row4.USERDOC_NBR
											.setScale(0, java.math.RoundingMode.HALF_UP).toPlainString());

								} //

								strBuffer_tLogRow_1.append("|");

								if (row4.DOC_ORI != null) { //

									strBuffer_tLogRow_1.append(String.valueOf(row4.DOC_ORI));

								} //

								strBuffer_tLogRow_1.append("|");

								if (row4.DOC_SERIES != null) { //

									strBuffer_tLogRow_1.append(row4.DOC_SERIES
											.setScale(0, java.math.RoundingMode.HALF_UP).toPlainString());

								} //

								strBuffer_tLogRow_1.append("|");

								if (row4.DOC_NBR != null) { //

									strBuffer_tLogRow_1.append(
											row4.DOC_NBR.setScale(0, java.math.RoundingMode.HALF_UP).toPlainString());

								} //

								strBuffer_tLogRow_1.append("|");

								if (row4.IND_IMPORT != null) { //

									strBuffer_tLogRow_1.append(row4.IND_IMPORT
											.setScale(0, java.math.RoundingMode.HALF_UP).toPlainString());

								} //

								strBuffer_tLogRow_1.append("|");

								if (row4.USERDOC_TYPE != null) { //

									strBuffer_tLogRow_1.append(String.valueOf(row4.USERDOC_TYPE));

								} //

								strBuffer_tLogRow_1.append("|");

								if (row4.LAW_CODE != null) { //

									strBuffer_tLogRow_1.append(
											row4.LAW_CODE.setScale(0, java.math.RoundingMode.HALF_UP).toPlainString());

								} //

								strBuffer_tLogRow_1.append("|");

								if (row4.FILING_DATE != null) { //

									strBuffer_tLogRow_1
											.append(FormatterUtils.format_Date(row4.FILING_DATE, "dd-MM-yyyy"));

								} //

								strBuffer_tLogRow_1.append("|");

								if (row4.RECEPTION_DATE != null) { //

									strBuffer_tLogRow_1
											.append(FormatterUtils.format_Date(row4.RECEPTION_DATE, "dd-MM-yyyy"));

								} //

								strBuffer_tLogRow_1.append("|");

								if (row4.NOTES != null) { //

									strBuffer_tLogRow_1.append(String.valueOf(row4.NOTES));

								} //

								strBuffer_tLogRow_1.append("|");

								if (row4.APPLICANT_NOTES != null) { //

									strBuffer_tLogRow_1.append(String.valueOf(row4.APPLICANT_NOTES));

								} //

								strBuffer_tLogRow_1.append("|");

								if (row4.PERSON_NAME != null) { //

									strBuffer_tLogRow_1.append(String.valueOf(row4.PERSON_NAME));

								} //

								strBuffer_tLogRow_1.append("|");

								if (row4.PERSON_NAME_LANG2 != null) { //

									strBuffer_tLogRow_1.append(String.valueOf(row4.PERSON_NAME_LANG2));

								} //

								strBuffer_tLogRow_1.append("|");

								if (row4.NATIONALITY_COUNTRY_CODE != null) { //

									strBuffer_tLogRow_1.append(String.valueOf(row4.NATIONALITY_COUNTRY_CODE));

								} //

								strBuffer_tLogRow_1.append("|");

								if (row4.IND_COMPANY != null) { //

									strBuffer_tLogRow_1.append(row4.IND_COMPANY
											.setScale(0, java.math.RoundingMode.HALF_UP).toPlainString());

								} //

								strBuffer_tLogRow_1.append("|");

								if (row4.LEGAL_NATURE != null) { //

									strBuffer_tLogRow_1.append(String.valueOf(row4.LEGAL_NATURE));

								} //

								strBuffer_tLogRow_1.append("|");

								if (row4.LEGAL_NATURE_LANG2 != null) { //

									strBuffer_tLogRow_1.append(String.valueOf(row4.LEGAL_NATURE_LANG2));

								} //

								strBuffer_tLogRow_1.append("|");

								if (row4.LEGAL_ID_TYPE != null) { //

									strBuffer_tLogRow_1.append(String.valueOf(row4.LEGAL_ID_TYPE));

								} //

								strBuffer_tLogRow_1.append("|");

								if (row4.LEGAL_ID_NBR != null) { //

									strBuffer_tLogRow_1.append(row4.LEGAL_ID_NBR
											.setScale(0, java.math.RoundingMode.HALF_UP).toPlainString());

								} //

								strBuffer_tLogRow_1.append("|");

								if (row4.INDIVIDUAL_ID_TYPE != null) { //

									strBuffer_tLogRow_1.append(String.valueOf(row4.INDIVIDUAL_ID_TYPE));

								} //

								strBuffer_tLogRow_1.append("|");

								if (row4.INDIVIDUAL_ID_NBR != null) { //

									strBuffer_tLogRow_1.append(row4.INDIVIDUAL_ID_NBR
											.setScale(0, java.math.RoundingMode.HALF_UP).toPlainString());

								} //

								strBuffer_tLogRow_1.append("|");

								if (row4.RESIDENCE_COUNTRY_CODE != null) { //

									strBuffer_tLogRow_1.append(String.valueOf(row4.RESIDENCE_COUNTRY_CODE));

								} //

								strBuffer_tLogRow_1.append("|");

								if (row4.STATE_NAME != null) { //

									strBuffer_tLogRow_1.append(String.valueOf(row4.STATE_NAME));

								} //

								strBuffer_tLogRow_1.append("|");

								if (row4.STATE_CODE != null) { //

									strBuffer_tLogRow_1.append(String.valueOf(row4.STATE_CODE));

								} //

								strBuffer_tLogRow_1.append("|");

								if (row4.CITY_NAME != null) { //

									strBuffer_tLogRow_1.append(String.valueOf(row4.CITY_NAME));

								} //

								strBuffer_tLogRow_1.append("|");

								if (row4.CITY_CODE != null) { //

									strBuffer_tLogRow_1.append(String.valueOf(row4.CITY_CODE));

								} //

								strBuffer_tLogRow_1.append("|");

								if (row4.ADDRESS_ZONE != null) { //

									strBuffer_tLogRow_1.append(String.valueOf(row4.ADDRESS_ZONE));

								} //

								strBuffer_tLogRow_1.append("|");

								if (row4.ADDRESS_STREET != null) { //

									strBuffer_tLogRow_1.append(String.valueOf(row4.ADDRESS_STREET));

								} //

								strBuffer_tLogRow_1.append("|");

								if (row4.ADDRESS_STREET_LANG2 != null) { //

									strBuffer_tLogRow_1.append(String.valueOf(row4.ADDRESS_STREET_LANG2));

								} //

								strBuffer_tLogRow_1.append("|");

								if (row4.ZIP_CODE != null) { //

									strBuffer_tLogRow_1.append(String.valueOf(row4.ZIP_CODE));

								} //

								strBuffer_tLogRow_1.append("|");

								if (row4.EMAIL != null) { //

									strBuffer_tLogRow_1.append(String.valueOf(row4.EMAIL));

								} //

								strBuffer_tLogRow_1.append("|");

								if (row4.TELEPHONE != null) { //

									strBuffer_tLogRow_1.append(String.valueOf(row4.TELEPHONE));

								} //

								strBuffer_tLogRow_1.append("|");

								if (row4.PERSON_GROUP_CODE != null) { //

									strBuffer_tLogRow_1.append(String.valueOf(row4.PERSON_GROUP_CODE));

								} //

								strBuffer_tLogRow_1.append("|");

								if (row4.CAPTURE_USER_ID != null) { //

									strBuffer_tLogRow_1.append(row4.CAPTURE_USER_ID
											.setScale(0, java.math.RoundingMode.HALF_UP).toPlainString());

								} //

								strBuffer_tLogRow_1.append("|");

								if (row4.CAPTURE_DATE != null) { //

									strBuffer_tLogRow_1
											.append(FormatterUtils.format_Date(row4.CAPTURE_DATE, "dd-MM-yyyy"));

								} //

								strBuffer_tLogRow_1.append("|");

								if (row4.errorCode != null) { //

									strBuffer_tLogRow_1.append(String.valueOf(row4.errorCode));

								} //

								strBuffer_tLogRow_1.append("|");

								if (row4.errorMessage != null) { //

									strBuffer_tLogRow_1.append(String.valueOf(row4.errorMessage));

								} //

								if (globalMap.get("tLogRow_CONSOLE") != null) {
									consoleOut_tLogRow_1 = (java.io.PrintStream) globalMap.get("tLogRow_CONSOLE");
								} else {
									consoleOut_tLogRow_1 = new java.io.PrintStream(
											new java.io.BufferedOutputStream(System.out));
									globalMap.put("tLogRow_CONSOLE", consoleOut_tLogRow_1);
								}
								consoleOut_tLogRow_1.println(strBuffer_tLogRow_1.toString());
								consoleOut_tLogRow_1.flush();
								nb_line_tLogRow_1++;
//////

//////                    

///////////////////////    			

								tos_count_tLogRow_1++;

								/**
								 * [tLogRow_1 main ] stop
								 */

								/**
								 * [tLogRow_1 process_data_begin ] start
								 */

								currentComponent = "tLogRow_1";

								/**
								 * [tLogRow_1 process_data_begin ] stop
								 */

								/**
								 * [tLogRow_1 process_data_end ] start
								 */

								currentComponent = "tLogRow_1";

								/**
								 * [tLogRow_1 process_data_end ] stop
								 */

							} // End of branch "row4"

							/**
							 * [tDBOutput_1 process_data_end ] start
							 */

							currentComponent = "tDBOutput_1";

							/**
							 * [tDBOutput_1 process_data_end ] stop
							 */

						} // End of branch "ud"

						/**
						 * [tMap_1 process_data_end ] start
						 */

						currentComponent = "tMap_1";

						/**
						 * [tMap_1 process_data_end ] stop
						 */

						/**
						 * [tDBInput_2 process_data_end ] start
						 */

						currentComponent = "tDBInput_2";

						/**
						 * [tDBInput_2 process_data_end ] stop
						 */

						/**
						 * [tDBInput_2 end ] start
						 */

						currentComponent = "tDBInput_2";

					}
				} finally {
					if (rs_tDBInput_2 != null) {
						rs_tDBInput_2.close();
					}
					if (stmt_tDBInput_2 != null) {
						stmt_tDBInput_2.close();
					}
				}
				globalMap.put("tDBInput_2_NB_LINE", nb_line_tDBInput_2);

				ok_Hash.put("tDBInput_2", true);
				end_Hash.put("tDBInput_2", System.currentTimeMillis());

				/**
				 * [tDBInput_2 end ] stop
				 */

				/**
				 * [tMap_1 end ] start
				 */

				currentComponent = "tMap_1";

// ###############################
// # Lookup hashes releasing
				if (tHash_Lookup_row5 != null) {
					tHash_Lookup_row5.endGet();
				}
				globalMap.remove("tHash_Lookup_row5");

// ###############################      

				if (execStat) {
					runStat.updateStat(resourceMap, iterateId, 2, 0, "row2");
				}

				ok_Hash.put("tMap_1", true);
				end_Hash.put("tMap_1", System.currentTimeMillis());

				/**
				 * [tMap_1 end ] stop
				 */

				/**
				 * [tDBOutput_1 end ] start
				 */

				currentComponent = "tDBOutput_1";

				if (pstmt_tDBOutput_1 != null) {

					pstmt_tDBOutput_1.close();
					resourceMap.remove("pstmt_tDBOutput_1");

				}
				resourceMap.put("statementClosed_tDBOutput_1", true);

				nb_line_deleted_tDBOutput_1 = nb_line_deleted_tDBOutput_1 + deletedCount_tDBOutput_1;
				nb_line_update_tDBOutput_1 = nb_line_update_tDBOutput_1 + updatedCount_tDBOutput_1;
				nb_line_inserted_tDBOutput_1 = nb_line_inserted_tDBOutput_1 + insertedCount_tDBOutput_1;
				nb_line_rejected_tDBOutput_1 = nb_line_rejected_tDBOutput_1 + rejectedCount_tDBOutput_1;

				globalMap.put("tDBOutput_1_NB_LINE", nb_line_tDBOutput_1);
				globalMap.put("tDBOutput_1_NB_LINE_UPDATED", nb_line_update_tDBOutput_1);
				globalMap.put("tDBOutput_1_NB_LINE_INSERTED", nb_line_inserted_tDBOutput_1);
				globalMap.put("tDBOutput_1_NB_LINE_DELETED", nb_line_deleted_tDBOutput_1);
				globalMap.put("tDBOutput_1_NB_LINE_REJECTED", nb_line_rejected_tDBOutput_1);

				if (execStat) {
					runStat.updateStat(resourceMap, iterateId, 2, 0, "ud");
				}

				ok_Hash.put("tDBOutput_1", true);
				end_Hash.put("tDBOutput_1", System.currentTimeMillis());

				/**
				 * [tDBOutput_1 end ] stop
				 */

				/**
				 * [tLogRow_1 end ] start
				 */

				currentComponent = "tLogRow_1";

//////
//////
				globalMap.put("tLogRow_1_NB_LINE", nb_line_tLogRow_1);

///////////////////////    			

				if (execStat) {
					runStat.updateStat(resourceMap, iterateId, 2, 0, "row4");
				}

				ok_Hash.put("tLogRow_1", true);
				end_Hash.put("tLogRow_1", System.currentTimeMillis());

				/**
				 * [tLogRow_1 end ] stop
				 */

			} // end the resume

			if (resumeEntryMethodName == null || globalResumeTicket) {
				resumeUtil.addLog("CHECKPOINT", "CONNECTION:SUBJOB_OK:tDBInput_2:OnSubjobOk", "",
						Thread.currentThread().getId() + "", "", "", "", "", "");
			}

			if (execStat) {
				runStat.updateStatOnConnection("OnSubjobOk1", 0, "ok");
			}

			tDBInput_7Process(globalMap);

		} catch (java.lang.Exception e) {

			TalendException te = new TalendException(e, currentComponent, globalMap);

			throw te;
		} catch (java.lang.Error error) {

			runStat.stopThreadStat();

			throw error;
		} finally {

			// free memory for "tMap_1"
			globalMap.remove("tHash_Lookup_row5");

			try {

				/**
				 * [tDBInput_2 finally ] start
				 */

				currentComponent = "tDBInput_2";

				/**
				 * [tDBInput_2 finally ] stop
				 */

				/**
				 * [tMap_1 finally ] start
				 */

				currentComponent = "tMap_1";

				/**
				 * [tMap_1 finally ] stop
				 */

				/**
				 * [tDBOutput_1 finally ] start
				 */

				currentComponent = "tDBOutput_1";

				if (resourceMap.get("statementClosed_tDBOutput_1") == null) {
					java.sql.PreparedStatement pstmtToClose_tDBOutput_1 = null;
					if ((pstmtToClose_tDBOutput_1 = (java.sql.PreparedStatement) resourceMap
							.remove("pstmt_tDBOutput_1")) != null) {
						pstmtToClose_tDBOutput_1.close();
					}
				}

				/**
				 * [tDBOutput_1 finally ] stop
				 */

				/**
				 * [tLogRow_1 finally ] start
				 */

				currentComponent = "tLogRow_1";

				/**
				 * [tLogRow_1 finally ] stop
				 */

			} catch (java.lang.Exception e) {
				// ignore
			} catch (java.lang.Error error) {
				// ignore
			}
			resourceMap = null;
		}

		globalMap.put("tDBInput_2_SUBPROCESS_STATE", 1);
	}

	public static class row13Struct implements routines.system.IPersistableRow<row13Struct> {
		final static byte[] commonByteArrayLock_WIPO_PROJECTS_E1a_Marc_Userdoc_a_interm = new byte[0];
		static byte[] commonByteArray_WIPO_PROJECTS_E1a_Marc_Userdoc_a_interm = new byte[0];
		protected static final int DEFAULT_HASHCODE = 1;
		protected static final int PRIME = 31;
		protected int hashCode = DEFAULT_HASHCODE;
		public boolean hashCodeDirty = true;

		public String loopKey;

		public String USERDOC_SEQ;

		public String getUSERDOC_SEQ() {
			return this.USERDOC_SEQ;
		}

		public BigDecimal USERDOC_SERIES;

		public BigDecimal getUSERDOC_SERIES() {
			return this.USERDOC_SERIES;
		}

		public BigDecimal USERDOC_NBR;

		public BigDecimal getUSERDOC_NBR() {
			return this.USERDOC_NBR;
		}

		public String PROCESS_FILE_SEQ;

		public String getPROCESS_FILE_SEQ() {
			return this.PROCESS_FILE_SEQ;
		}

		public String PROCESS_FILE_TYPE;

		public String getPROCESS_FILE_TYPE() {
			return this.PROCESS_FILE_TYPE;
		}

		public BigDecimal PROCESS_FILE_SERIES;

		public BigDecimal getPROCESS_FILE_SERIES() {
			return this.PROCESS_FILE_SERIES;
		}

		public BigDecimal PROCESS_FILE_NBR;

		public BigDecimal getPROCESS_FILE_NBR() {
			return this.PROCESS_FILE_NBR;
		}

		public String ACTION_TYPE;

		public String getACTION_TYPE() {
			return this.ACTION_TYPE;
		}

		public java.util.Date ACTION_DATE;

		public java.util.Date getACTION_DATE() {
			return this.ACTION_DATE;
		}

		public java.util.Date MANUAL_DUE_DATE;

		public java.util.Date getMANUAL_DUE_DATE() {
			return this.MANUAL_DUE_DATE;
		}

		public BigDecimal RESPONSIBLE_USER;

		public BigDecimal getRESPONSIBLE_USER() {
			return this.RESPONSIBLE_USER;
		}

		public String ACTION_NOTES1;

		public String getACTION_NOTES1() {
			return this.ACTION_NOTES1;
		}

		public String ACTION_NOTES2;

		public String getACTION_NOTES2() {
			return this.ACTION_NOTES2;
		}

		public String ACTION_NOTES3;

		public String getACTION_NOTES3() {
			return this.ACTION_NOTES3;
		}

		public String ACTION_NOTES4;

		public String getACTION_NOTES4() {
			return this.ACTION_NOTES4;
		}

		public String ACTION_NOTES5;

		public String getACTION_NOTES5() {
			return this.ACTION_NOTES5;
		}

		public String GENERAL_NOTES;

		public String getGENERAL_NOTES() {
			return this.GENERAL_NOTES;
		}

		public String SELECTED_OPTIONS_TEXT;

		public String getSELECTED_OPTIONS_TEXT() {
			return this.SELECTED_OPTIONS_TEXT;
		}

		public BigDecimal ACTION_USER;

		public BigDecimal getACTION_USER() {
			return this.ACTION_USER;
		}

		public String ACTION_CATEGORY;

		public String getACTION_CATEGORY() {
			return this.ACTION_CATEGORY;
		}

		public String SPECIAL_FINAL_STATUS;

		public String getSPECIAL_FINAL_STATUS() {
			return this.SPECIAL_FINAL_STATUS;
		}

		public String JOURNAL_CODE;

		public String getJOURNAL_CODE() {
			return this.JOURNAL_CODE;
		}

		public java.util.Date PUBLICATION_DATE;

		public java.util.Date getPUBLICATION_DATE() {
			return this.PUBLICATION_DATE;
		}

		public String IPAS_PROC_TYP;

		public String getIPAS_PROC_TYP() {
			return this.IPAS_PROC_TYP;
		}

		public BigDecimal IPAS_PROC_NBR;

		public BigDecimal getIPAS_PROC_NBR() {
			return this.IPAS_PROC_NBR;
		}

		public BigDecimal IPAS_ACTION_NBR;

		public BigDecimal getIPAS_ACTION_NBR() {
			return this.IPAS_ACTION_NBR;
		}

		public String errorCode;

		public String getErrorCode() {
			return this.errorCode;
		}

		public String errorMessage;

		public String getErrorMessage() {
			return this.errorMessage;
		}

		@Override
		public int hashCode() {
			if (this.hashCodeDirty) {
				final int prime = PRIME;
				int result = DEFAULT_HASHCODE;

				result = prime * result + ((this.USERDOC_SEQ == null) ? 0 : this.USERDOC_SEQ.hashCode());

				result = prime * result + ((this.USERDOC_SERIES == null) ? 0 : this.USERDOC_SERIES.hashCode());

				result = prime * result + ((this.USERDOC_NBR == null) ? 0 : this.USERDOC_NBR.hashCode());

				result = prime * result + ((this.ACTION_TYPE == null) ? 0 : this.ACTION_TYPE.hashCode());

				result = prime * result + ((this.ACTION_DATE == null) ? 0 : this.ACTION_DATE.hashCode());

				this.hashCode = result;
				this.hashCodeDirty = false;
			}
			return this.hashCode;
		}

		@Override
		public boolean equals(Object obj) {
			if (this == obj)
				return true;
			if (obj == null)
				return false;
			if (getClass() != obj.getClass())
				return false;
			final row13Struct other = (row13Struct) obj;

			if (this.USERDOC_SEQ == null) {
				if (other.USERDOC_SEQ != null)
					return false;

			} else if (!this.USERDOC_SEQ.equals(other.USERDOC_SEQ))

				return false;

			if (this.USERDOC_SERIES == null) {
				if (other.USERDOC_SERIES != null)
					return false;

			} else if (!this.USERDOC_SERIES.equals(other.USERDOC_SERIES))

				return false;

			if (this.USERDOC_NBR == null) {
				if (other.USERDOC_NBR != null)
					return false;

			} else if (!this.USERDOC_NBR.equals(other.USERDOC_NBR))

				return false;

			if (this.ACTION_TYPE == null) {
				if (other.ACTION_TYPE != null)
					return false;

			} else if (!this.ACTION_TYPE.equals(other.ACTION_TYPE))

				return false;

			if (this.ACTION_DATE == null) {
				if (other.ACTION_DATE != null)
					return false;

			} else if (!this.ACTION_DATE.equals(other.ACTION_DATE))

				return false;

			return true;
		}

		public void copyDataTo(row13Struct other) {

			other.USERDOC_SEQ = this.USERDOC_SEQ;
			other.USERDOC_SERIES = this.USERDOC_SERIES;
			other.USERDOC_NBR = this.USERDOC_NBR;
			other.PROCESS_FILE_SEQ = this.PROCESS_FILE_SEQ;
			other.PROCESS_FILE_TYPE = this.PROCESS_FILE_TYPE;
			other.PROCESS_FILE_SERIES = this.PROCESS_FILE_SERIES;
			other.PROCESS_FILE_NBR = this.PROCESS_FILE_NBR;
			other.ACTION_TYPE = this.ACTION_TYPE;
			other.ACTION_DATE = this.ACTION_DATE;
			other.MANUAL_DUE_DATE = this.MANUAL_DUE_DATE;
			other.RESPONSIBLE_USER = this.RESPONSIBLE_USER;
			other.ACTION_NOTES1 = this.ACTION_NOTES1;
			other.ACTION_NOTES2 = this.ACTION_NOTES2;
			other.ACTION_NOTES3 = this.ACTION_NOTES3;
			other.ACTION_NOTES4 = this.ACTION_NOTES4;
			other.ACTION_NOTES5 = this.ACTION_NOTES5;
			other.GENERAL_NOTES = this.GENERAL_NOTES;
			other.SELECTED_OPTIONS_TEXT = this.SELECTED_OPTIONS_TEXT;
			other.ACTION_USER = this.ACTION_USER;
			other.ACTION_CATEGORY = this.ACTION_CATEGORY;
			other.SPECIAL_FINAL_STATUS = this.SPECIAL_FINAL_STATUS;
			other.JOURNAL_CODE = this.JOURNAL_CODE;
			other.PUBLICATION_DATE = this.PUBLICATION_DATE;
			other.IPAS_PROC_TYP = this.IPAS_PROC_TYP;
			other.IPAS_PROC_NBR = this.IPAS_PROC_NBR;
			other.IPAS_ACTION_NBR = this.IPAS_ACTION_NBR;
			other.errorCode = this.errorCode;
			other.errorMessage = this.errorMessage;

		}

		public void copyKeysDataTo(row13Struct other) {

			other.USERDOC_SEQ = this.USERDOC_SEQ;
			other.USERDOC_SERIES = this.USERDOC_SERIES;
			other.USERDOC_NBR = this.USERDOC_NBR;
			other.ACTION_TYPE = this.ACTION_TYPE;
			other.ACTION_DATE = this.ACTION_DATE;

		}

		private String readString(ObjectInputStream dis) throws IOException {
			String strReturn = null;
			int length = 0;
			length = dis.readInt();
			if (length == -1) {
				strReturn = null;
			} else {
				if (length > commonByteArray_WIPO_PROJECTS_E1a_Marc_Userdoc_a_interm.length) {
					if (length < 1024 && commonByteArray_WIPO_PROJECTS_E1a_Marc_Userdoc_a_interm.length == 0) {
						commonByteArray_WIPO_PROJECTS_E1a_Marc_Userdoc_a_interm = new byte[1024];
					} else {
						commonByteArray_WIPO_PROJECTS_E1a_Marc_Userdoc_a_interm = new byte[2 * length];
					}
				}
				dis.readFully(commonByteArray_WIPO_PROJECTS_E1a_Marc_Userdoc_a_interm, 0, length);
				strReturn = new String(commonByteArray_WIPO_PROJECTS_E1a_Marc_Userdoc_a_interm, 0, length, utf8Charset);
			}
			return strReturn;
		}

		private void writeString(String str, ObjectOutputStream dos) throws IOException {
			if (str == null) {
				dos.writeInt(-1);
			} else {
				byte[] byteArray = str.getBytes(utf8Charset);
				dos.writeInt(byteArray.length);
				dos.write(byteArray);
			}
		}

		private java.util.Date readDate(ObjectInputStream dis) throws IOException {
			java.util.Date dateReturn = null;
			int length = 0;
			length = dis.readByte();
			if (length == -1) {
				dateReturn = null;
			} else {
				dateReturn = new Date(dis.readLong());
			}
			return dateReturn;
		}

		private void writeDate(java.util.Date date1, ObjectOutputStream dos) throws IOException {
			if (date1 == null) {
				dos.writeByte(-1);
			} else {
				dos.writeByte(0);
				dos.writeLong(date1.getTime());
			}
		}

		public void readData(ObjectInputStream dis) {

			synchronized (commonByteArrayLock_WIPO_PROJECTS_E1a_Marc_Userdoc_a_interm) {

				try {

					int length = 0;

					this.USERDOC_SEQ = readString(dis);

					this.USERDOC_SERIES = (BigDecimal) dis.readObject();

					this.USERDOC_NBR = (BigDecimal) dis.readObject();

					this.PROCESS_FILE_SEQ = readString(dis);

					this.PROCESS_FILE_TYPE = readString(dis);

					this.PROCESS_FILE_SERIES = (BigDecimal) dis.readObject();

					this.PROCESS_FILE_NBR = (BigDecimal) dis.readObject();

					this.ACTION_TYPE = readString(dis);

					this.ACTION_DATE = readDate(dis);

					this.MANUAL_DUE_DATE = readDate(dis);

					this.RESPONSIBLE_USER = (BigDecimal) dis.readObject();

					this.ACTION_NOTES1 = readString(dis);

					this.ACTION_NOTES2 = readString(dis);

					this.ACTION_NOTES3 = readString(dis);

					this.ACTION_NOTES4 = readString(dis);

					this.ACTION_NOTES5 = readString(dis);

					this.GENERAL_NOTES = readString(dis);

					this.SELECTED_OPTIONS_TEXT = readString(dis);

					this.ACTION_USER = (BigDecimal) dis.readObject();

					this.ACTION_CATEGORY = readString(dis);

					this.SPECIAL_FINAL_STATUS = readString(dis);

					this.JOURNAL_CODE = readString(dis);

					this.PUBLICATION_DATE = readDate(dis);

					this.IPAS_PROC_TYP = readString(dis);

					this.IPAS_PROC_NBR = (BigDecimal) dis.readObject();

					this.IPAS_ACTION_NBR = (BigDecimal) dis.readObject();

					this.errorCode = readString(dis);

					this.errorMessage = readString(dis);

				} catch (IOException e) {
					throw new RuntimeException(e);

				} catch (ClassNotFoundException eCNFE) {
					throw new RuntimeException(eCNFE);

				}

			}

		}

		public void writeData(ObjectOutputStream dos) {
			try {

				// String

				writeString(this.USERDOC_SEQ, dos);

				// BigDecimal

				dos.writeObject(this.USERDOC_SERIES);

				// BigDecimal

				dos.writeObject(this.USERDOC_NBR);

				// String

				writeString(this.PROCESS_FILE_SEQ, dos);

				// String

				writeString(this.PROCESS_FILE_TYPE, dos);

				// BigDecimal

				dos.writeObject(this.PROCESS_FILE_SERIES);

				// BigDecimal

				dos.writeObject(this.PROCESS_FILE_NBR);

				// String

				writeString(this.ACTION_TYPE, dos);

				// java.util.Date

				writeDate(this.ACTION_DATE, dos);

				// java.util.Date

				writeDate(this.MANUAL_DUE_DATE, dos);

				// BigDecimal

				dos.writeObject(this.RESPONSIBLE_USER);

				// String

				writeString(this.ACTION_NOTES1, dos);

				// String

				writeString(this.ACTION_NOTES2, dos);

				// String

				writeString(this.ACTION_NOTES3, dos);

				// String

				writeString(this.ACTION_NOTES4, dos);

				// String

				writeString(this.ACTION_NOTES5, dos);

				// String

				writeString(this.GENERAL_NOTES, dos);

				// String

				writeString(this.SELECTED_OPTIONS_TEXT, dos);

				// BigDecimal

				dos.writeObject(this.ACTION_USER);

				// String

				writeString(this.ACTION_CATEGORY, dos);

				// String

				writeString(this.SPECIAL_FINAL_STATUS, dos);

				// String

				writeString(this.JOURNAL_CODE, dos);

				// java.util.Date

				writeDate(this.PUBLICATION_DATE, dos);

				// String

				writeString(this.IPAS_PROC_TYP, dos);

				// BigDecimal

				dos.writeObject(this.IPAS_PROC_NBR);

				// BigDecimal

				dos.writeObject(this.IPAS_ACTION_NBR);

				// String

				writeString(this.errorCode, dos);

				// String

				writeString(this.errorMessage, dos);

			} catch (IOException e) {
				throw new RuntimeException(e);
			}

		}

		public String toString() {

			StringBuilder sb = new StringBuilder();
			sb.append(super.toString());
			sb.append("[");
			sb.append("USERDOC_SEQ=" + USERDOC_SEQ);
			sb.append(",USERDOC_SERIES=" + String.valueOf(USERDOC_SERIES));
			sb.append(",USERDOC_NBR=" + String.valueOf(USERDOC_NBR));
			sb.append(",PROCESS_FILE_SEQ=" + PROCESS_FILE_SEQ);
			sb.append(",PROCESS_FILE_TYPE=" + PROCESS_FILE_TYPE);
			sb.append(",PROCESS_FILE_SERIES=" + String.valueOf(PROCESS_FILE_SERIES));
			sb.append(",PROCESS_FILE_NBR=" + String.valueOf(PROCESS_FILE_NBR));
			sb.append(",ACTION_TYPE=" + ACTION_TYPE);
			sb.append(",ACTION_DATE=" + String.valueOf(ACTION_DATE));
			sb.append(",MANUAL_DUE_DATE=" + String.valueOf(MANUAL_DUE_DATE));
			sb.append(",RESPONSIBLE_USER=" + String.valueOf(RESPONSIBLE_USER));
			sb.append(",ACTION_NOTES1=" + ACTION_NOTES1);
			sb.append(",ACTION_NOTES2=" + ACTION_NOTES2);
			sb.append(",ACTION_NOTES3=" + ACTION_NOTES3);
			sb.append(",ACTION_NOTES4=" + ACTION_NOTES4);
			sb.append(",ACTION_NOTES5=" + ACTION_NOTES5);
			sb.append(",GENERAL_NOTES=" + GENERAL_NOTES);
			sb.append(",SELECTED_OPTIONS_TEXT=" + SELECTED_OPTIONS_TEXT);
			sb.append(",ACTION_USER=" + String.valueOf(ACTION_USER));
			sb.append(",ACTION_CATEGORY=" + ACTION_CATEGORY);
			sb.append(",SPECIAL_FINAL_STATUS=" + SPECIAL_FINAL_STATUS);
			sb.append(",JOURNAL_CODE=" + JOURNAL_CODE);
			sb.append(",PUBLICATION_DATE=" + String.valueOf(PUBLICATION_DATE));
			sb.append(",IPAS_PROC_TYP=" + IPAS_PROC_TYP);
			sb.append(",IPAS_PROC_NBR=" + String.valueOf(IPAS_PROC_NBR));
			sb.append(",IPAS_ACTION_NBR=" + String.valueOf(IPAS_ACTION_NBR));
			sb.append(",errorCode=" + errorCode);
			sb.append(",errorMessage=" + errorMessage);
			sb.append("]");

			return sb.toString();
		}

		/**
		 * Compare keys
		 */
		public int compareTo(row13Struct other) {

			int returnValue = -1;

			returnValue = checkNullsAndCompare(this.USERDOC_SEQ, other.USERDOC_SEQ);
			if (returnValue != 0) {
				return returnValue;
			}

			returnValue = checkNullsAndCompare(this.USERDOC_SERIES, other.USERDOC_SERIES);
			if (returnValue != 0) {
				return returnValue;
			}

			returnValue = checkNullsAndCompare(this.USERDOC_NBR, other.USERDOC_NBR);
			if (returnValue != 0) {
				return returnValue;
			}

			returnValue = checkNullsAndCompare(this.ACTION_TYPE, other.ACTION_TYPE);
			if (returnValue != 0) {
				return returnValue;
			}

			returnValue = checkNullsAndCompare(this.ACTION_DATE, other.ACTION_DATE);
			if (returnValue != 0) {
				return returnValue;
			}

			return returnValue;
		}

		private int checkNullsAndCompare(Object object1, Object object2) {
			int returnValue = 0;
			if (object1 instanceof Comparable && object2 instanceof Comparable) {
				returnValue = ((Comparable) object1).compareTo(object2);
			} else if (object1 != null && object2 != null) {
				returnValue = compareStrings(object1.toString(), object2.toString());
			} else if (object1 == null && object2 != null) {
				returnValue = 1;
			} else if (object1 != null && object2 == null) {
				returnValue = -1;
			} else {
				returnValue = 0;
			}

			return returnValue;
		}

		private int compareStrings(String string1, String string2) {
			return string1.compareTo(string2);
		}

	}

	public static class action_udStruct implements routines.system.IPersistableRow<action_udStruct> {
		final static byte[] commonByteArrayLock_WIPO_PROJECTS_E1a_Marc_Userdoc_a_interm = new byte[0];
		static byte[] commonByteArray_WIPO_PROJECTS_E1a_Marc_Userdoc_a_interm = new byte[0];
		protected static final int DEFAULT_HASHCODE = 1;
		protected static final int PRIME = 31;
		protected int hashCode = DEFAULT_HASHCODE;
		public boolean hashCodeDirty = true;

		public String loopKey;

		public String USERDOC_SEQ;

		public String getUSERDOC_SEQ() {
			return this.USERDOC_SEQ;
		}

		public BigDecimal USERDOC_SERIES;

		public BigDecimal getUSERDOC_SERIES() {
			return this.USERDOC_SERIES;
		}

		public BigDecimal USERDOC_NBR;

		public BigDecimal getUSERDOC_NBR() {
			return this.USERDOC_NBR;
		}

		public String PROCESS_FILE_SEQ;

		public String getPROCESS_FILE_SEQ() {
			return this.PROCESS_FILE_SEQ;
		}

		public String PROCESS_FILE_TYPE;

		public String getPROCESS_FILE_TYPE() {
			return this.PROCESS_FILE_TYPE;
		}

		public BigDecimal PROCESS_FILE_SERIES;

		public BigDecimal getPROCESS_FILE_SERIES() {
			return this.PROCESS_FILE_SERIES;
		}

		public BigDecimal PROCESS_FILE_NBR;

		public BigDecimal getPROCESS_FILE_NBR() {
			return this.PROCESS_FILE_NBR;
		}

		public String ACTION_TYPE;

		public String getACTION_TYPE() {
			return this.ACTION_TYPE;
		}

		public java.util.Date ACTION_DATE;

		public java.util.Date getACTION_DATE() {
			return this.ACTION_DATE;
		}

		public java.util.Date MANUAL_DUE_DATE;

		public java.util.Date getMANUAL_DUE_DATE() {
			return this.MANUAL_DUE_DATE;
		}

		public BigDecimal RESPONSIBLE_USER;

		public BigDecimal getRESPONSIBLE_USER() {
			return this.RESPONSIBLE_USER;
		}

		public String ACTION_NOTES1;

		public String getACTION_NOTES1() {
			return this.ACTION_NOTES1;
		}

		public String ACTION_NOTES2;

		public String getACTION_NOTES2() {
			return this.ACTION_NOTES2;
		}

		public String ACTION_NOTES3;

		public String getACTION_NOTES3() {
			return this.ACTION_NOTES3;
		}

		public String ACTION_NOTES4;

		public String getACTION_NOTES4() {
			return this.ACTION_NOTES4;
		}

		public String ACTION_NOTES5;

		public String getACTION_NOTES5() {
			return this.ACTION_NOTES5;
		}

		public String GENERAL_NOTES;

		public String getGENERAL_NOTES() {
			return this.GENERAL_NOTES;
		}

		public String SELECTED_OPTIONS_TEXT;

		public String getSELECTED_OPTIONS_TEXT() {
			return this.SELECTED_OPTIONS_TEXT;
		}

		public BigDecimal ACTION_USER;

		public BigDecimal getACTION_USER() {
			return this.ACTION_USER;
		}

		public String ACTION_CATEGORY;

		public String getACTION_CATEGORY() {
			return this.ACTION_CATEGORY;
		}

		public String SPECIAL_FINAL_STATUS;

		public String getSPECIAL_FINAL_STATUS() {
			return this.SPECIAL_FINAL_STATUS;
		}

		public String JOURNAL_CODE;

		public String getJOURNAL_CODE() {
			return this.JOURNAL_CODE;
		}

		public java.util.Date PUBLICATION_DATE;

		public java.util.Date getPUBLICATION_DATE() {
			return this.PUBLICATION_DATE;
		}

		public String IPAS_PROC_TYP;

		public String getIPAS_PROC_TYP() {
			return this.IPAS_PROC_TYP;
		}

		public BigDecimal IPAS_PROC_NBR;

		public BigDecimal getIPAS_PROC_NBR() {
			return this.IPAS_PROC_NBR;
		}

		public BigDecimal IPAS_ACTION_NBR;

		public BigDecimal getIPAS_ACTION_NBR() {
			return this.IPAS_ACTION_NBR;
		}

		@Override
		public int hashCode() {
			if (this.hashCodeDirty) {
				final int prime = PRIME;
				int result = DEFAULT_HASHCODE;

				result = prime * result + ((this.USERDOC_SEQ == null) ? 0 : this.USERDOC_SEQ.hashCode());

				result = prime * result + ((this.USERDOC_SERIES == null) ? 0 : this.USERDOC_SERIES.hashCode());

				result = prime * result + ((this.USERDOC_NBR == null) ? 0 : this.USERDOC_NBR.hashCode());

				result = prime * result + ((this.ACTION_TYPE == null) ? 0 : this.ACTION_TYPE.hashCode());

				result = prime * result + ((this.ACTION_DATE == null) ? 0 : this.ACTION_DATE.hashCode());

				this.hashCode = result;
				this.hashCodeDirty = false;
			}
			return this.hashCode;
		}

		@Override
		public boolean equals(Object obj) {
			if (this == obj)
				return true;
			if (obj == null)
				return false;
			if (getClass() != obj.getClass())
				return false;
			final action_udStruct other = (action_udStruct) obj;

			if (this.USERDOC_SEQ == null) {
				if (other.USERDOC_SEQ != null)
					return false;

			} else if (!this.USERDOC_SEQ.equals(other.USERDOC_SEQ))

				return false;

			if (this.USERDOC_SERIES == null) {
				if (other.USERDOC_SERIES != null)
					return false;

			} else if (!this.USERDOC_SERIES.equals(other.USERDOC_SERIES))

				return false;

			if (this.USERDOC_NBR == null) {
				if (other.USERDOC_NBR != null)
					return false;

			} else if (!this.USERDOC_NBR.equals(other.USERDOC_NBR))

				return false;

			if (this.ACTION_TYPE == null) {
				if (other.ACTION_TYPE != null)
					return false;

			} else if (!this.ACTION_TYPE.equals(other.ACTION_TYPE))

				return false;

			if (this.ACTION_DATE == null) {
				if (other.ACTION_DATE != null)
					return false;

			} else if (!this.ACTION_DATE.equals(other.ACTION_DATE))

				return false;

			return true;
		}

		public void copyDataTo(action_udStruct other) {

			other.USERDOC_SEQ = this.USERDOC_SEQ;
			other.USERDOC_SERIES = this.USERDOC_SERIES;
			other.USERDOC_NBR = this.USERDOC_NBR;
			other.PROCESS_FILE_SEQ = this.PROCESS_FILE_SEQ;
			other.PROCESS_FILE_TYPE = this.PROCESS_FILE_TYPE;
			other.PROCESS_FILE_SERIES = this.PROCESS_FILE_SERIES;
			other.PROCESS_FILE_NBR = this.PROCESS_FILE_NBR;
			other.ACTION_TYPE = this.ACTION_TYPE;
			other.ACTION_DATE = this.ACTION_DATE;
			other.MANUAL_DUE_DATE = this.MANUAL_DUE_DATE;
			other.RESPONSIBLE_USER = this.RESPONSIBLE_USER;
			other.ACTION_NOTES1 = this.ACTION_NOTES1;
			other.ACTION_NOTES2 = this.ACTION_NOTES2;
			other.ACTION_NOTES3 = this.ACTION_NOTES3;
			other.ACTION_NOTES4 = this.ACTION_NOTES4;
			other.ACTION_NOTES5 = this.ACTION_NOTES5;
			other.GENERAL_NOTES = this.GENERAL_NOTES;
			other.SELECTED_OPTIONS_TEXT = this.SELECTED_OPTIONS_TEXT;
			other.ACTION_USER = this.ACTION_USER;
			other.ACTION_CATEGORY = this.ACTION_CATEGORY;
			other.SPECIAL_FINAL_STATUS = this.SPECIAL_FINAL_STATUS;
			other.JOURNAL_CODE = this.JOURNAL_CODE;
			other.PUBLICATION_DATE = this.PUBLICATION_DATE;
			other.IPAS_PROC_TYP = this.IPAS_PROC_TYP;
			other.IPAS_PROC_NBR = this.IPAS_PROC_NBR;
			other.IPAS_ACTION_NBR = this.IPAS_ACTION_NBR;

		}

		public void copyKeysDataTo(action_udStruct other) {

			other.USERDOC_SEQ = this.USERDOC_SEQ;
			other.USERDOC_SERIES = this.USERDOC_SERIES;
			other.USERDOC_NBR = this.USERDOC_NBR;
			other.ACTION_TYPE = this.ACTION_TYPE;
			other.ACTION_DATE = this.ACTION_DATE;

		}

		private String readString(ObjectInputStream dis) throws IOException {
			String strReturn = null;
			int length = 0;
			length = dis.readInt();
			if (length == -1) {
				strReturn = null;
			} else {
				if (length > commonByteArray_WIPO_PROJECTS_E1a_Marc_Userdoc_a_interm.length) {
					if (length < 1024 && commonByteArray_WIPO_PROJECTS_E1a_Marc_Userdoc_a_interm.length == 0) {
						commonByteArray_WIPO_PROJECTS_E1a_Marc_Userdoc_a_interm = new byte[1024];
					} else {
						commonByteArray_WIPO_PROJECTS_E1a_Marc_Userdoc_a_interm = new byte[2 * length];
					}
				}
				dis.readFully(commonByteArray_WIPO_PROJECTS_E1a_Marc_Userdoc_a_interm, 0, length);
				strReturn = new String(commonByteArray_WIPO_PROJECTS_E1a_Marc_Userdoc_a_interm, 0, length, utf8Charset);
			}
			return strReturn;
		}

		private void writeString(String str, ObjectOutputStream dos) throws IOException {
			if (str == null) {
				dos.writeInt(-1);
			} else {
				byte[] byteArray = str.getBytes(utf8Charset);
				dos.writeInt(byteArray.length);
				dos.write(byteArray);
			}
		}

		private java.util.Date readDate(ObjectInputStream dis) throws IOException {
			java.util.Date dateReturn = null;
			int length = 0;
			length = dis.readByte();
			if (length == -1) {
				dateReturn = null;
			} else {
				dateReturn = new Date(dis.readLong());
			}
			return dateReturn;
		}

		private void writeDate(java.util.Date date1, ObjectOutputStream dos) throws IOException {
			if (date1 == null) {
				dos.writeByte(-1);
			} else {
				dos.writeByte(0);
				dos.writeLong(date1.getTime());
			}
		}

		public void readData(ObjectInputStream dis) {

			synchronized (commonByteArrayLock_WIPO_PROJECTS_E1a_Marc_Userdoc_a_interm) {

				try {

					int length = 0;

					this.USERDOC_SEQ = readString(dis);

					this.USERDOC_SERIES = (BigDecimal) dis.readObject();

					this.USERDOC_NBR = (BigDecimal) dis.readObject();

					this.PROCESS_FILE_SEQ = readString(dis);

					this.PROCESS_FILE_TYPE = readString(dis);

					this.PROCESS_FILE_SERIES = (BigDecimal) dis.readObject();

					this.PROCESS_FILE_NBR = (BigDecimal) dis.readObject();

					this.ACTION_TYPE = readString(dis);

					this.ACTION_DATE = readDate(dis);

					this.MANUAL_DUE_DATE = readDate(dis);

					this.RESPONSIBLE_USER = (BigDecimal) dis.readObject();

					this.ACTION_NOTES1 = readString(dis);

					this.ACTION_NOTES2 = readString(dis);

					this.ACTION_NOTES3 = readString(dis);

					this.ACTION_NOTES4 = readString(dis);

					this.ACTION_NOTES5 = readString(dis);

					this.GENERAL_NOTES = readString(dis);

					this.SELECTED_OPTIONS_TEXT = readString(dis);

					this.ACTION_USER = (BigDecimal) dis.readObject();

					this.ACTION_CATEGORY = readString(dis);

					this.SPECIAL_FINAL_STATUS = readString(dis);

					this.JOURNAL_CODE = readString(dis);

					this.PUBLICATION_DATE = readDate(dis);

					this.IPAS_PROC_TYP = readString(dis);

					this.IPAS_PROC_NBR = (BigDecimal) dis.readObject();

					this.IPAS_ACTION_NBR = (BigDecimal) dis.readObject();

				} catch (IOException e) {
					throw new RuntimeException(e);

				} catch (ClassNotFoundException eCNFE) {
					throw new RuntimeException(eCNFE);

				}

			}

		}

		public void writeData(ObjectOutputStream dos) {
			try {

				// String

				writeString(this.USERDOC_SEQ, dos);

				// BigDecimal

				dos.writeObject(this.USERDOC_SERIES);

				// BigDecimal

				dos.writeObject(this.USERDOC_NBR);

				// String

				writeString(this.PROCESS_FILE_SEQ, dos);

				// String

				writeString(this.PROCESS_FILE_TYPE, dos);

				// BigDecimal

				dos.writeObject(this.PROCESS_FILE_SERIES);

				// BigDecimal

				dos.writeObject(this.PROCESS_FILE_NBR);

				// String

				writeString(this.ACTION_TYPE, dos);

				// java.util.Date

				writeDate(this.ACTION_DATE, dos);

				// java.util.Date

				writeDate(this.MANUAL_DUE_DATE, dos);

				// BigDecimal

				dos.writeObject(this.RESPONSIBLE_USER);

				// String

				writeString(this.ACTION_NOTES1, dos);

				// String

				writeString(this.ACTION_NOTES2, dos);

				// String

				writeString(this.ACTION_NOTES3, dos);

				// String

				writeString(this.ACTION_NOTES4, dos);

				// String

				writeString(this.ACTION_NOTES5, dos);

				// String

				writeString(this.GENERAL_NOTES, dos);

				// String

				writeString(this.SELECTED_OPTIONS_TEXT, dos);

				// BigDecimal

				dos.writeObject(this.ACTION_USER);

				// String

				writeString(this.ACTION_CATEGORY, dos);

				// String

				writeString(this.SPECIAL_FINAL_STATUS, dos);

				// String

				writeString(this.JOURNAL_CODE, dos);

				// java.util.Date

				writeDate(this.PUBLICATION_DATE, dos);

				// String

				writeString(this.IPAS_PROC_TYP, dos);

				// BigDecimal

				dos.writeObject(this.IPAS_PROC_NBR);

				// BigDecimal

				dos.writeObject(this.IPAS_ACTION_NBR);

			} catch (IOException e) {
				throw new RuntimeException(e);
			}

		}

		public String toString() {

			StringBuilder sb = new StringBuilder();
			sb.append(super.toString());
			sb.append("[");
			sb.append("USERDOC_SEQ=" + USERDOC_SEQ);
			sb.append(",USERDOC_SERIES=" + String.valueOf(USERDOC_SERIES));
			sb.append(",USERDOC_NBR=" + String.valueOf(USERDOC_NBR));
			sb.append(",PROCESS_FILE_SEQ=" + PROCESS_FILE_SEQ);
			sb.append(",PROCESS_FILE_TYPE=" + PROCESS_FILE_TYPE);
			sb.append(",PROCESS_FILE_SERIES=" + String.valueOf(PROCESS_FILE_SERIES));
			sb.append(",PROCESS_FILE_NBR=" + String.valueOf(PROCESS_FILE_NBR));
			sb.append(",ACTION_TYPE=" + ACTION_TYPE);
			sb.append(",ACTION_DATE=" + String.valueOf(ACTION_DATE));
			sb.append(",MANUAL_DUE_DATE=" + String.valueOf(MANUAL_DUE_DATE));
			sb.append(",RESPONSIBLE_USER=" + String.valueOf(RESPONSIBLE_USER));
			sb.append(",ACTION_NOTES1=" + ACTION_NOTES1);
			sb.append(",ACTION_NOTES2=" + ACTION_NOTES2);
			sb.append(",ACTION_NOTES3=" + ACTION_NOTES3);
			sb.append(",ACTION_NOTES4=" + ACTION_NOTES4);
			sb.append(",ACTION_NOTES5=" + ACTION_NOTES5);
			sb.append(",GENERAL_NOTES=" + GENERAL_NOTES);
			sb.append(",SELECTED_OPTIONS_TEXT=" + SELECTED_OPTIONS_TEXT);
			sb.append(",ACTION_USER=" + String.valueOf(ACTION_USER));
			sb.append(",ACTION_CATEGORY=" + ACTION_CATEGORY);
			sb.append(",SPECIAL_FINAL_STATUS=" + SPECIAL_FINAL_STATUS);
			sb.append(",JOURNAL_CODE=" + JOURNAL_CODE);
			sb.append(",PUBLICATION_DATE=" + String.valueOf(PUBLICATION_DATE));
			sb.append(",IPAS_PROC_TYP=" + IPAS_PROC_TYP);
			sb.append(",IPAS_PROC_NBR=" + String.valueOf(IPAS_PROC_NBR));
			sb.append(",IPAS_ACTION_NBR=" + String.valueOf(IPAS_ACTION_NBR));
			sb.append("]");

			return sb.toString();
		}

		/**
		 * Compare keys
		 */
		public int compareTo(action_udStruct other) {

			int returnValue = -1;

			returnValue = checkNullsAndCompare(this.USERDOC_SEQ, other.USERDOC_SEQ);
			if (returnValue != 0) {
				return returnValue;
			}

			returnValue = checkNullsAndCompare(this.USERDOC_SERIES, other.USERDOC_SERIES);
			if (returnValue != 0) {
				return returnValue;
			}

			returnValue = checkNullsAndCompare(this.USERDOC_NBR, other.USERDOC_NBR);
			if (returnValue != 0) {
				return returnValue;
			}

			returnValue = checkNullsAndCompare(this.ACTION_TYPE, other.ACTION_TYPE);
			if (returnValue != 0) {
				return returnValue;
			}

			returnValue = checkNullsAndCompare(this.ACTION_DATE, other.ACTION_DATE);
			if (returnValue != 0) {
				return returnValue;
			}

			return returnValue;
		}

		private int checkNullsAndCompare(Object object1, Object object2) {
			int returnValue = 0;
			if (object1 instanceof Comparable && object2 instanceof Comparable) {
				returnValue = ((Comparable) object1).compareTo(object2);
			} else if (object1 != null && object2 != null) {
				returnValue = compareStrings(object1.toString(), object2.toString());
			} else if (object1 == null && object2 != null) {
				returnValue = 1;
			} else if (object1 != null && object2 == null) {
				returnValue = -1;
			} else {
				returnValue = 0;
			}

			return returnValue;
		}

		private int compareStrings(String string1, String string2) {
			return string1.compareTo(string2);
		}

	}

	public static class row6Struct implements routines.system.IPersistableRow<row6Struct> {
		final static byte[] commonByteArrayLock_WIPO_PROJECTS_E1a_Marc_Userdoc_a_interm = new byte[0];
		static byte[] commonByteArray_WIPO_PROJECTS_E1a_Marc_Userdoc_a_interm = new byte[0];

		public Integer sec_documento;

		public Integer getSec_documento() {
			return this.sec_documento;
		}

		public Short sec_movimiento;

		public Short getSec_movimiento() {
			return this.sec_movimiento;
		}

		public String tip_movimiento;

		public String getTip_movimiento() {
			return this.tip_movimiento;
		}

		public java.util.Date fec_movimiento;

		public java.util.Date getFec_movimiento() {
			return this.fec_movimiento;
		}

		public String obs_movimiento;

		public String getObs_movimiento() {
			return this.obs_movimiento;
		}

		public String cod_usuario;

		public String getCod_usuario() {
			return this.cod_usuario;
		}

		public String ind_falta_aprob;

		public String getInd_falta_aprob() {
			return this.ind_falta_aprob;
		}

		public String obs1;

		public String getObs1() {
			return this.obs1;
		}

		public String obs2;

		public String getObs2() {
			return this.obs2;
		}

		public String obs3;

		public String getObs3() {
			return this.obs3;
		}

		public String obs4;

		public String getObs4() {
			return this.obs4;
		}

		public String obs5;

		public String getObs5() {
			return this.obs5;
		}

		public String secs_opciones;

		public String getSecs_opciones() {
			return this.secs_opciones;
		}

		public String ind_impresion;

		public String getInd_impresion() {
			return this.ind_impresion;
		}

		public String cod_status_ant;

		public String getCod_status_ant() {
			return this.cod_status_ant;
		}

		public java.util.Date fec_movimiento_ant;

		public java.util.Date getFec_movimiento_ant() {
			return this.fec_movimiento_ant;
		}

		public String cod_status;

		public String getCod_status() {
			return this.cod_status;
		}

		private Integer readInteger(ObjectInputStream dis) throws IOException {
			Integer intReturn;
			int length = 0;
			length = dis.readByte();
			if (length == -1) {
				intReturn = null;
			} else {
				intReturn = dis.readInt();
			}
			return intReturn;
		}

		private void writeInteger(Integer intNum, ObjectOutputStream dos) throws IOException {
			if (intNum == null) {
				dos.writeByte(-1);
			} else {
				dos.writeByte(0);
				dos.writeInt(intNum);
			}
		}

		private String readString(ObjectInputStream dis) throws IOException {
			String strReturn = null;
			int length = 0;
			length = dis.readInt();
			if (length == -1) {
				strReturn = null;
			} else {
				if (length > commonByteArray_WIPO_PROJECTS_E1a_Marc_Userdoc_a_interm.length) {
					if (length < 1024 && commonByteArray_WIPO_PROJECTS_E1a_Marc_Userdoc_a_interm.length == 0) {
						commonByteArray_WIPO_PROJECTS_E1a_Marc_Userdoc_a_interm = new byte[1024];
					} else {
						commonByteArray_WIPO_PROJECTS_E1a_Marc_Userdoc_a_interm = new byte[2 * length];
					}
				}
				dis.readFully(commonByteArray_WIPO_PROJECTS_E1a_Marc_Userdoc_a_interm, 0, length);
				strReturn = new String(commonByteArray_WIPO_PROJECTS_E1a_Marc_Userdoc_a_interm, 0, length, utf8Charset);
			}
			return strReturn;
		}

		private void writeString(String str, ObjectOutputStream dos) throws IOException {
			if (str == null) {
				dos.writeInt(-1);
			} else {
				byte[] byteArray = str.getBytes(utf8Charset);
				dos.writeInt(byteArray.length);
				dos.write(byteArray);
			}
		}

		private java.util.Date readDate(ObjectInputStream dis) throws IOException {
			java.util.Date dateReturn = null;
			int length = 0;
			length = dis.readByte();
			if (length == -1) {
				dateReturn = null;
			} else {
				dateReturn = new Date(dis.readLong());
			}
			return dateReturn;
		}

		private void writeDate(java.util.Date date1, ObjectOutputStream dos) throws IOException {
			if (date1 == null) {
				dos.writeByte(-1);
			} else {
				dos.writeByte(0);
				dos.writeLong(date1.getTime());
			}
		}

		public void readData(ObjectInputStream dis) {

			synchronized (commonByteArrayLock_WIPO_PROJECTS_E1a_Marc_Userdoc_a_interm) {

				try {

					int length = 0;

					this.sec_documento = readInteger(dis);

					length = dis.readByte();
					if (length == -1) {
						this.sec_movimiento = null;
					} else {
						this.sec_movimiento = dis.readShort();
					}

					this.tip_movimiento = readString(dis);

					this.fec_movimiento = readDate(dis);

					this.obs_movimiento = readString(dis);

					this.cod_usuario = readString(dis);

					this.ind_falta_aprob = readString(dis);

					this.obs1 = readString(dis);

					this.obs2 = readString(dis);

					this.obs3 = readString(dis);

					this.obs4 = readString(dis);

					this.obs5 = readString(dis);

					this.secs_opciones = readString(dis);

					this.ind_impresion = readString(dis);

					this.cod_status_ant = readString(dis);

					this.fec_movimiento_ant = readDate(dis);

					this.cod_status = readString(dis);

				} catch (IOException e) {
					throw new RuntimeException(e);

				}

			}

		}

		public void writeData(ObjectOutputStream dos) {
			try {

				// Integer

				writeInteger(this.sec_documento, dos);

				// Short

				if (this.sec_movimiento == null) {
					dos.writeByte(-1);
				} else {
					dos.writeByte(0);
					dos.writeShort(this.sec_movimiento);
				}

				// String

				writeString(this.tip_movimiento, dos);

				// java.util.Date

				writeDate(this.fec_movimiento, dos);

				// String

				writeString(this.obs_movimiento, dos);

				// String

				writeString(this.cod_usuario, dos);

				// String

				writeString(this.ind_falta_aprob, dos);

				// String

				writeString(this.obs1, dos);

				// String

				writeString(this.obs2, dos);

				// String

				writeString(this.obs3, dos);

				// String

				writeString(this.obs4, dos);

				// String

				writeString(this.obs5, dos);

				// String

				writeString(this.secs_opciones, dos);

				// String

				writeString(this.ind_impresion, dos);

				// String

				writeString(this.cod_status_ant, dos);

				// java.util.Date

				writeDate(this.fec_movimiento_ant, dos);

				// String

				writeString(this.cod_status, dos);

			} catch (IOException e) {
				throw new RuntimeException(e);
			}

		}

		public String toString() {

			StringBuilder sb = new StringBuilder();
			sb.append(super.toString());
			sb.append("[");
			sb.append("sec_documento=" + String.valueOf(sec_documento));
			sb.append(",sec_movimiento=" + String.valueOf(sec_movimiento));
			sb.append(",tip_movimiento=" + tip_movimiento);
			sb.append(",fec_movimiento=" + String.valueOf(fec_movimiento));
			sb.append(",obs_movimiento=" + obs_movimiento);
			sb.append(",cod_usuario=" + cod_usuario);
			sb.append(",ind_falta_aprob=" + ind_falta_aprob);
			sb.append(",obs1=" + obs1);
			sb.append(",obs2=" + obs2);
			sb.append(",obs3=" + obs3);
			sb.append(",obs4=" + obs4);
			sb.append(",obs5=" + obs5);
			sb.append(",secs_opciones=" + secs_opciones);
			sb.append(",ind_impresion=" + ind_impresion);
			sb.append(",cod_status_ant=" + cod_status_ant);
			sb.append(",fec_movimiento_ant=" + String.valueOf(fec_movimiento_ant));
			sb.append(",cod_status=" + cod_status);
			sb.append("]");

			return sb.toString();
		}

		/**
		 * Compare keys
		 */
		public int compareTo(row6Struct other) {

			int returnValue = -1;

			return returnValue;
		}

		private int checkNullsAndCompare(Object object1, Object object2) {
			int returnValue = 0;
			if (object1 instanceof Comparable && object2 instanceof Comparable) {
				returnValue = ((Comparable) object1).compareTo(object2);
			} else if (object1 != null && object2 != null) {
				returnValue = compareStrings(object1.toString(), object2.toString());
			} else if (object1 == null && object2 != null) {
				returnValue = 1;
			} else if (object1 != null && object2 == null) {
				returnValue = -1;
			} else {
				returnValue = 0;
			}

			return returnValue;
		}

		private int compareStrings(String string1, String string2) {
			return string1.compareTo(string2);
		}

	}

	public static class after_tDBInput_7Struct implements routines.system.IPersistableRow<after_tDBInput_7Struct> {
		final static byte[] commonByteArrayLock_WIPO_PROJECTS_E1a_Marc_Userdoc_a_interm = new byte[0];
		static byte[] commonByteArray_WIPO_PROJECTS_E1a_Marc_Userdoc_a_interm = new byte[0];

		public Integer sec_documento;

		public Integer getSec_documento() {
			return this.sec_documento;
		}

		public Short sec_movimiento;

		public Short getSec_movimiento() {
			return this.sec_movimiento;
		}

		public String tip_movimiento;

		public String getTip_movimiento() {
			return this.tip_movimiento;
		}

		public java.util.Date fec_movimiento;

		public java.util.Date getFec_movimiento() {
			return this.fec_movimiento;
		}

		public String obs_movimiento;

		public String getObs_movimiento() {
			return this.obs_movimiento;
		}

		public String cod_usuario;

		public String getCod_usuario() {
			return this.cod_usuario;
		}

		public String ind_falta_aprob;

		public String getInd_falta_aprob() {
			return this.ind_falta_aprob;
		}

		public String obs1;

		public String getObs1() {
			return this.obs1;
		}

		public String obs2;

		public String getObs2() {
			return this.obs2;
		}

		public String obs3;

		public String getObs3() {
			return this.obs3;
		}

		public String obs4;

		public String getObs4() {
			return this.obs4;
		}

		public String obs5;

		public String getObs5() {
			return this.obs5;
		}

		public String secs_opciones;

		public String getSecs_opciones() {
			return this.secs_opciones;
		}

		public String ind_impresion;

		public String getInd_impresion() {
			return this.ind_impresion;
		}

		public String cod_status_ant;

		public String getCod_status_ant() {
			return this.cod_status_ant;
		}

		public java.util.Date fec_movimiento_ant;

		public java.util.Date getFec_movimiento_ant() {
			return this.fec_movimiento_ant;
		}

		public String cod_status;

		public String getCod_status() {
			return this.cod_status;
		}

		private Integer readInteger(ObjectInputStream dis) throws IOException {
			Integer intReturn;
			int length = 0;
			length = dis.readByte();
			if (length == -1) {
				intReturn = null;
			} else {
				intReturn = dis.readInt();
			}
			return intReturn;
		}

		private void writeInteger(Integer intNum, ObjectOutputStream dos) throws IOException {
			if (intNum == null) {
				dos.writeByte(-1);
			} else {
				dos.writeByte(0);
				dos.writeInt(intNum);
			}
		}

		private String readString(ObjectInputStream dis) throws IOException {
			String strReturn = null;
			int length = 0;
			length = dis.readInt();
			if (length == -1) {
				strReturn = null;
			} else {
				if (length > commonByteArray_WIPO_PROJECTS_E1a_Marc_Userdoc_a_interm.length) {
					if (length < 1024 && commonByteArray_WIPO_PROJECTS_E1a_Marc_Userdoc_a_interm.length == 0) {
						commonByteArray_WIPO_PROJECTS_E1a_Marc_Userdoc_a_interm = new byte[1024];
					} else {
						commonByteArray_WIPO_PROJECTS_E1a_Marc_Userdoc_a_interm = new byte[2 * length];
					}
				}
				dis.readFully(commonByteArray_WIPO_PROJECTS_E1a_Marc_Userdoc_a_interm, 0, length);
				strReturn = new String(commonByteArray_WIPO_PROJECTS_E1a_Marc_Userdoc_a_interm, 0, length, utf8Charset);
			}
			return strReturn;
		}

		private void writeString(String str, ObjectOutputStream dos) throws IOException {
			if (str == null) {
				dos.writeInt(-1);
			} else {
				byte[] byteArray = str.getBytes(utf8Charset);
				dos.writeInt(byteArray.length);
				dos.write(byteArray);
			}
		}

		private java.util.Date readDate(ObjectInputStream dis) throws IOException {
			java.util.Date dateReturn = null;
			int length = 0;
			length = dis.readByte();
			if (length == -1) {
				dateReturn = null;
			} else {
				dateReturn = new Date(dis.readLong());
			}
			return dateReturn;
		}

		private void writeDate(java.util.Date date1, ObjectOutputStream dos) throws IOException {
			if (date1 == null) {
				dos.writeByte(-1);
			} else {
				dos.writeByte(0);
				dos.writeLong(date1.getTime());
			}
		}

		public void readData(ObjectInputStream dis) {

			synchronized (commonByteArrayLock_WIPO_PROJECTS_E1a_Marc_Userdoc_a_interm) {

				try {

					int length = 0;

					this.sec_documento = readInteger(dis);

					length = dis.readByte();
					if (length == -1) {
						this.sec_movimiento = null;
					} else {
						this.sec_movimiento = dis.readShort();
					}

					this.tip_movimiento = readString(dis);

					this.fec_movimiento = readDate(dis);

					this.obs_movimiento = readString(dis);

					this.cod_usuario = readString(dis);

					this.ind_falta_aprob = readString(dis);

					this.obs1 = readString(dis);

					this.obs2 = readString(dis);

					this.obs3 = readString(dis);

					this.obs4 = readString(dis);

					this.obs5 = readString(dis);

					this.secs_opciones = readString(dis);

					this.ind_impresion = readString(dis);

					this.cod_status_ant = readString(dis);

					this.fec_movimiento_ant = readDate(dis);

					this.cod_status = readString(dis);

				} catch (IOException e) {
					throw new RuntimeException(e);

				}

			}

		}

		public void writeData(ObjectOutputStream dos) {
			try {

				// Integer

				writeInteger(this.sec_documento, dos);

				// Short

				if (this.sec_movimiento == null) {
					dos.writeByte(-1);
				} else {
					dos.writeByte(0);
					dos.writeShort(this.sec_movimiento);
				}

				// String

				writeString(this.tip_movimiento, dos);

				// java.util.Date

				writeDate(this.fec_movimiento, dos);

				// String

				writeString(this.obs_movimiento, dos);

				// String

				writeString(this.cod_usuario, dos);

				// String

				writeString(this.ind_falta_aprob, dos);

				// String

				writeString(this.obs1, dos);

				// String

				writeString(this.obs2, dos);

				// String

				writeString(this.obs3, dos);

				// String

				writeString(this.obs4, dos);

				// String

				writeString(this.obs5, dos);

				// String

				writeString(this.secs_opciones, dos);

				// String

				writeString(this.ind_impresion, dos);

				// String

				writeString(this.cod_status_ant, dos);

				// java.util.Date

				writeDate(this.fec_movimiento_ant, dos);

				// String

				writeString(this.cod_status, dos);

			} catch (IOException e) {
				throw new RuntimeException(e);
			}

		}

		public String toString() {

			StringBuilder sb = new StringBuilder();
			sb.append(super.toString());
			sb.append("[");
			sb.append("sec_documento=" + String.valueOf(sec_documento));
			sb.append(",sec_movimiento=" + String.valueOf(sec_movimiento));
			sb.append(",tip_movimiento=" + tip_movimiento);
			sb.append(",fec_movimiento=" + String.valueOf(fec_movimiento));
			sb.append(",obs_movimiento=" + obs_movimiento);
			sb.append(",cod_usuario=" + cod_usuario);
			sb.append(",ind_falta_aprob=" + ind_falta_aprob);
			sb.append(",obs1=" + obs1);
			sb.append(",obs2=" + obs2);
			sb.append(",obs3=" + obs3);
			sb.append(",obs4=" + obs4);
			sb.append(",obs5=" + obs5);
			sb.append(",secs_opciones=" + secs_opciones);
			sb.append(",ind_impresion=" + ind_impresion);
			sb.append(",cod_status_ant=" + cod_status_ant);
			sb.append(",fec_movimiento_ant=" + String.valueOf(fec_movimiento_ant));
			sb.append(",cod_status=" + cod_status);
			sb.append("]");

			return sb.toString();
		}

		/**
		 * Compare keys
		 */
		public int compareTo(after_tDBInput_7Struct other) {

			int returnValue = -1;

			return returnValue;
		}

		private int checkNullsAndCompare(Object object1, Object object2) {
			int returnValue = 0;
			if (object1 instanceof Comparable && object2 instanceof Comparable) {
				returnValue = ((Comparable) object1).compareTo(object2);
			} else if (object1 != null && object2 != null) {
				returnValue = compareStrings(object1.toString(), object2.toString());
			} else if (object1 == null && object2 != null) {
				returnValue = 1;
			} else if (object1 != null && object2 == null) {
				returnValue = -1;
			} else {
				returnValue = 0;
			}

			return returnValue;
		}

		private int compareStrings(String string1, String string2) {
			return string1.compareTo(string2);
		}

	}

	public void tDBInput_7Process(final java.util.Map<String, Object> globalMap) throws TalendException {
		globalMap.put("tDBInput_7_SUBPROCESS_STATE", 0);

		final boolean execStat = this.execStat;

		String iterateId = "";

		String currentComponent = "";
		java.util.Map<String, Object> resourceMap = new java.util.HashMap<String, Object>();

		try {
			// TDI-39566 avoid throwing an useless Exception
			boolean resumeIt = true;
			if (globalResumeTicket == false && resumeEntryMethodName != null) {
				String currentMethodName = new java.lang.Exception().getStackTrace()[0].getMethodName();
				resumeIt = resumeEntryMethodName.equals(currentMethodName);
			}
			if (resumeIt || globalResumeTicket) { // start the resume
				globalResumeTicket = true;

				tDBInput_5Process(globalMap);
				tDBInput_8Process(globalMap);

				row6Struct row6 = new row6Struct();
				action_udStruct action_ud = new action_udStruct();
				row13Struct row13 = new row13Struct();

				/**
				 * [tLogRow_2 begin ] start
				 */

				ok_Hash.put("tLogRow_2", false);
				start_Hash.put("tLogRow_2", System.currentTimeMillis());

				currentComponent = "tLogRow_2";

				if (execStat) {
					runStat.updateStatOnConnection(resourceMap, iterateId, 0, 0, "row13");
				}

				int tos_count_tLogRow_2 = 0;

				///////////////////////

				final String OUTPUT_FIELD_SEPARATOR_tLogRow_2 = "|";
				java.io.PrintStream consoleOut_tLogRow_2 = null;

				StringBuilder strBuffer_tLogRow_2 = null;
				int nb_line_tLogRow_2 = 0;
///////////////////////    			

				/**
				 * [tLogRow_2 begin ] stop
				 */

				/**
				 * [tDBOutput_2 begin ] start
				 */

				ok_Hash.put("tDBOutput_2", false);
				start_Hash.put("tDBOutput_2", System.currentTimeMillis());

				currentComponent = "tDBOutput_2";

				if (execStat) {
					runStat.updateStatOnConnection(resourceMap, iterateId, 0, 0, "action_ud");
				}

				int tos_count_tDBOutput_2 = 0;

				int nb_line_tDBOutput_2 = 0;
				int nb_line_update_tDBOutput_2 = 0;
				int nb_line_inserted_tDBOutput_2 = 0;
				int nb_line_deleted_tDBOutput_2 = 0;
				int nb_line_rejected_tDBOutput_2 = 0;

				int deletedCount_tDBOutput_2 = 0;
				int updatedCount_tDBOutput_2 = 0;
				int insertedCount_tDBOutput_2 = 0;
				int rejectedCount_tDBOutput_2 = 0;
				String dbschema_tDBOutput_2 = null;
				String tableName_tDBOutput_2 = null;
				boolean whetherReject_tDBOutput_2 = false;

				java.util.Calendar calendar_tDBOutput_2 = java.util.Calendar.getInstance();
				long year1_tDBOutput_2 = TalendDate.parseDate("yyyy-MM-dd", "0001-01-01").getTime();
				long year2_tDBOutput_2 = TalendDate.parseDate("yyyy-MM-dd", "1753-01-01").getTime();
				long year10000_tDBOutput_2 = TalendDate.parseDate("yyyy-MM-dd HH:mm:ss", "9999-12-31 24:00:00")
						.getTime();
				long date_tDBOutput_2;

				java.util.Calendar calendar_datetimeoffset_tDBOutput_2 = java.util.Calendar
						.getInstance(java.util.TimeZone.getTimeZone("UTC"));

				int updateKeyCount_tDBOutput_2 = 5;
				if (updateKeyCount_tDBOutput_2 < 1) {
					throw new RuntimeException("For update, Schema must have a key");
				}

				java.sql.Connection conn_tDBOutput_2 = null;
				String dbUser_tDBOutput_2 = null;
				dbschema_tDBOutput_2 = (String) globalMap.get("dbschema_tDBConnection_1");

				conn_tDBOutput_2 = (java.sql.Connection) globalMap.get("conn_tDBConnection_1");

				if (dbschema_tDBOutput_2 == null || dbschema_tDBOutput_2.trim().length() == 0) {
					tableName_tDBOutput_2 = "VW_IMPORT_USERDOC_ACTIONS";
				} else {
					tableName_tDBOutput_2 = dbschema_tDBOutput_2 + "].[" + "VW_IMPORT_USERDOC_ACTIONS";
				}
				int count_tDBOutput_2 = 0;

				try (java.sql.Statement stmtClear_tDBOutput_2 = conn_tDBOutput_2.createStatement()) {
					stmtClear_tDBOutput_2.executeUpdate("DELETE FROM [" + tableName_tDBOutput_2 + "]");
				}
				java.sql.PreparedStatement pstmt_tDBOutput_2 = conn_tDBOutput_2
						.prepareStatement("SELECT COUNT(1) FROM [" + tableName_tDBOutput_2
								+ "] WHERE [USERDOC_SEQ] = ? AND [USERDOC_SERIES] = ? AND [USERDOC_NBR] = ? AND [ACTION_TYPE] = ? AND [ACTION_DATE] = ?");
				resourceMap.put("pstmt_tDBOutput_2", pstmt_tDBOutput_2);
				String insert_tDBOutput_2 = "INSERT INTO [" + tableName_tDBOutput_2
						+ "] ([USERDOC_SEQ],[USERDOC_SERIES],[USERDOC_NBR],[PROCESS_FILE_SEQ],[PROCESS_FILE_TYPE],[PROCESS_FILE_SERIES],[PROCESS_FILE_NBR],[ACTION_TYPE],[ACTION_DATE],[MANUAL_DUE_DATE],[RESPONSIBLE_USER],[ACTION_NOTES1],[ACTION_NOTES2],[ACTION_NOTES3],[ACTION_NOTES4],[ACTION_NOTES5],[GENERAL_NOTES],[SELECTED_OPTIONS_TEXT],[ACTION_USER],[ACTION_CATEGORY],[SPECIAL_FINAL_STATUS],[JOURNAL_CODE],[PUBLICATION_DATE],[IPAS_PROC_TYP],[IPAS_PROC_NBR],[IPAS_ACTION_NBR]) VALUES (?,?,?,?,?,?,?,?,?,?,?,?,?,?,?,?,?,?,?,?,?,?,?,?,?,?)";
				java.sql.PreparedStatement pstmtInsert_tDBOutput_2 = conn_tDBOutput_2
						.prepareStatement(insert_tDBOutput_2);
				resourceMap.put("pstmtInsert_tDBOutput_2", pstmtInsert_tDBOutput_2);
				String update_tDBOutput_2 = "UPDATE [" + tableName_tDBOutput_2
						+ "] SET [PROCESS_FILE_SEQ] = ?,[PROCESS_FILE_TYPE] = ?,[PROCESS_FILE_SERIES] = ?,[PROCESS_FILE_NBR] = ?,[MANUAL_DUE_DATE] = ?,[RESPONSIBLE_USER] = ?,[ACTION_NOTES1] = ?,[ACTION_NOTES2] = ?,[ACTION_NOTES3] = ?,[ACTION_NOTES4] = ?,[ACTION_NOTES5] = ?,[GENERAL_NOTES] = ?,[SELECTED_OPTIONS_TEXT] = ?,[ACTION_USER] = ?,[ACTION_CATEGORY] = ?,[SPECIAL_FINAL_STATUS] = ?,[JOURNAL_CODE] = ?,[PUBLICATION_DATE] = ?,[IPAS_PROC_TYP] = ?,[IPAS_PROC_NBR] = ?,[IPAS_ACTION_NBR] = ? WHERE [USERDOC_SEQ] = ? AND [USERDOC_SERIES] = ? AND [USERDOC_NBR] = ? AND [ACTION_TYPE] = ? AND [ACTION_DATE] = ?";
				java.sql.PreparedStatement pstmtUpdate_tDBOutput_2 = conn_tDBOutput_2
						.prepareStatement(update_tDBOutput_2);
				resourceMap.put("pstmtUpdate_tDBOutput_2", pstmtUpdate_tDBOutput_2);
				boolean isShareIdentity_tDBOutput_2 = globalMap.get("shareIdentitySetting_tDBConnection_1") != null
						&& (Boolean) globalMap.get("shareIdentitySetting_tDBConnection_1") == true;

				/**
				 * [tDBOutput_2 begin ] stop
				 */

				/**
				 * [tMap_2 begin ] start
				 */

				ok_Hash.put("tMap_2", false);
				start_Hash.put("tMap_2", System.currentTimeMillis());

				currentComponent = "tMap_2";

				if (execStat) {
					runStat.updateStatOnConnection(resourceMap, iterateId, 0, 0, "row6");
				}

				int tos_count_tMap_2 = 0;

// ###############################
// # Lookup's keys initialization

				org.talend.designer.components.lookup.memory.AdvancedMemoryLookup<row12Struct> tHash_Lookup_row12 = (org.talend.designer.components.lookup.memory.AdvancedMemoryLookup<row12Struct>) ((org.talend.designer.components.lookup.memory.AdvancedMemoryLookup<row12Struct>) globalMap
						.get("tHash_Lookup_row12"));

				row12Struct row12HashKey = new row12Struct();
				row12Struct row12Default = new row12Struct();

				org.talend.designer.components.lookup.memory.AdvancedMemoryLookup<row7Struct> tHash_Lookup_row7 = (org.talend.designer.components.lookup.memory.AdvancedMemoryLookup<row7Struct>) ((org.talend.designer.components.lookup.memory.AdvancedMemoryLookup<row7Struct>) globalMap
						.get("tHash_Lookup_row7"));

				row7Struct row7HashKey = new row7Struct();
				row7Struct row7Default = new row7Struct();
// ###############################        

// ###############################
// # Vars initialization
				class Var__tMap_2__Struct {
				}
				Var__tMap_2__Struct Var__tMap_2 = new Var__tMap_2__Struct();
// ###############################

// ###############################
// # Outputs initialization
				action_udStruct action_ud_tmp = new action_udStruct();
// ###############################

				/**
				 * [tMap_2 begin ] stop
				 */

				/**
				 * [tDBInput_7 begin ] start
				 */

				ok_Hash.put("tDBInput_7", false);
				start_Hash.put("tDBInput_7", System.currentTimeMillis());

				currentComponent = "tDBInput_7";

				int tos_count_tDBInput_7 = 0;

				int nb_line_tDBInput_7 = 0;
				java.sql.Connection conn_tDBInput_7 = null;
				conn_tDBInput_7 = (java.sql.Connection) globalMap.get("conn_tDBConnection_2");

				java.sql.Statement stmt_tDBInput_7 = conn_tDBInput_7.createStatement();

				String dbquery_tDBInput_7 = "SELECT \n  \"Paraguay\".\"public\".\"movimiento_docum\".\"sec_documento\", \n  \"Paraguay\".\"public\".\"movimiento_docum"
						+ "\".\"sec_movimiento\", \n  \"Paraguay\".\"public\".\"movimiento_docum\".\"tip_movimiento\", \n  \"Paraguay\".\"public\".\""
						+ "movimiento_docum\".\"fec_movimiento\", \n  \"Paraguay\".\"public\".\"movimiento_docum\".\"obs_movimiento\", \n  \"Paraguay"
						+ "\".\"public\".\"movimiento_docum\".\"cod_usuario\", \n  \"Paraguay\".\"public\".\"movimiento_docum\".\"ind_falta_aprob\","
						+ " \n  \"Paraguay\".\"public\".\"movimiento_docum\".\"obs1\", \n  \"Paraguay\".\"public\".\"movimiento_docum\".\"obs2\", \n  "
						+ "\"Paraguay\".\"public\".\"movimiento_docum\".\"obs3\", \n  \"Paraguay\".\"public\".\"movimiento_docum\".\"obs4\", \n  \"Pa"
						+ "raguay\".\"public\".\"movimiento_docum\".\"obs5\", \n  \"Paraguay\".\"public\".\"movimiento_docum\".\"secs_opciones\", \n "
						+ " \"Paraguay\".\"public\".\"movimiento_docum\".\"ind_impresion\", \n  \"Paraguay\".\"public\".\"movimiento_docum\".\"cod_s"
						+ "tatus_ant\", \n  \"Paraguay\".\"public\".\"movimiento_docum\".\"fec_movimiento_ant\", \n  \"Paraguay\".\"public\".\"movimi"
						+ "ento_docum\".\"cod_status\"\nFROM \"Paraguay\".\"public\".\"movimiento_docum\" where   \"Paraguay\".\"public\".\"movimien"
						+ "to_docum\".\"sec_documento\" is not null";

				globalMap.put("tDBInput_7_QUERY", dbquery_tDBInput_7);
				java.sql.ResultSet rs_tDBInput_7 = null;

				try {
					rs_tDBInput_7 = stmt_tDBInput_7.executeQuery(dbquery_tDBInput_7);
					java.sql.ResultSetMetaData rsmd_tDBInput_7 = rs_tDBInput_7.getMetaData();
					int colQtyInRs_tDBInput_7 = rsmd_tDBInput_7.getColumnCount();

					String tmpContent_tDBInput_7 = null;

					while (rs_tDBInput_7.next()) {
						nb_line_tDBInput_7++;

						if (colQtyInRs_tDBInput_7 < 1) {
							row6.sec_documento = null;
						} else {

							row6.sec_documento = rs_tDBInput_7.getInt(1);
							if (rs_tDBInput_7.wasNull()) {
								row6.sec_documento = null;
							}
						}
						if (colQtyInRs_tDBInput_7 < 2) {
							row6.sec_movimiento = null;
						} else {

							row6.sec_movimiento = rs_tDBInput_7.getShort(2);
							if (rs_tDBInput_7.wasNull()) {
								row6.sec_movimiento = null;
							}
						}
						if (colQtyInRs_tDBInput_7 < 3) {
							row6.tip_movimiento = null;
						} else {

							row6.tip_movimiento = routines.system.JDBCUtil.getString(rs_tDBInput_7, 3, false);
						}
						if (colQtyInRs_tDBInput_7 < 4) {
							row6.fec_movimiento = null;
						} else {

							row6.fec_movimiento = routines.system.JDBCUtil.getDate(rs_tDBInput_7, 4);
						}
						if (colQtyInRs_tDBInput_7 < 5) {
							row6.obs_movimiento = null;
						} else {

							row6.obs_movimiento = routines.system.JDBCUtil.getString(rs_tDBInput_7, 5, false);
						}
						if (colQtyInRs_tDBInput_7 < 6) {
							row6.cod_usuario = null;
						} else {

							row6.cod_usuario = routines.system.JDBCUtil.getString(rs_tDBInput_7, 6, false);
						}
						if (colQtyInRs_tDBInput_7 < 7) {
							row6.ind_falta_aprob = null;
						} else {

							row6.ind_falta_aprob = routines.system.JDBCUtil.getString(rs_tDBInput_7, 7, false);
						}
						if (colQtyInRs_tDBInput_7 < 8) {
							row6.obs1 = null;
						} else {

							row6.obs1 = routines.system.JDBCUtil.getString(rs_tDBInput_7, 8, false);
						}
						if (colQtyInRs_tDBInput_7 < 9) {
							row6.obs2 = null;
						} else {

							row6.obs2 = routines.system.JDBCUtil.getString(rs_tDBInput_7, 9, false);
						}
						if (colQtyInRs_tDBInput_7 < 10) {
							row6.obs3 = null;
						} else {

							row6.obs3 = routines.system.JDBCUtil.getString(rs_tDBInput_7, 10, false);
						}
						if (colQtyInRs_tDBInput_7 < 11) {
							row6.obs4 = null;
						} else {

							row6.obs4 = routines.system.JDBCUtil.getString(rs_tDBInput_7, 11, false);
						}
						if (colQtyInRs_tDBInput_7 < 12) {
							row6.obs5 = null;
						} else {

							row6.obs5 = routines.system.JDBCUtil.getString(rs_tDBInput_7, 12, false);
						}
						if (colQtyInRs_tDBInput_7 < 13) {
							row6.secs_opciones = null;
						} else {

							row6.secs_opciones = routines.system.JDBCUtil.getString(rs_tDBInput_7, 13, false);
						}
						if (colQtyInRs_tDBInput_7 < 14) {
							row6.ind_impresion = null;
						} else {

							row6.ind_impresion = routines.system.JDBCUtil.getString(rs_tDBInput_7, 14, false);
						}
						if (colQtyInRs_tDBInput_7 < 15) {
							row6.cod_status_ant = null;
						} else {

							row6.cod_status_ant = routines.system.JDBCUtil.getString(rs_tDBInput_7, 15, false);
						}
						if (colQtyInRs_tDBInput_7 < 16) {
							row6.fec_movimiento_ant = null;
						} else {

							row6.fec_movimiento_ant = routines.system.JDBCUtil.getDate(rs_tDBInput_7, 16);
						}
						if (colQtyInRs_tDBInput_7 < 17) {
							row6.cod_status = null;
						} else {

							row6.cod_status = routines.system.JDBCUtil.getString(rs_tDBInput_7, 17, false);
						}

						/**
						 * [tDBInput_7 begin ] stop
						 */

						/**
						 * [tDBInput_7 main ] start
						 */

						currentComponent = "tDBInput_7";

						tos_count_tDBInput_7++;

						/**
						 * [tDBInput_7 main ] stop
						 */

						/**
						 * [tDBInput_7 process_data_begin ] start
						 */

						currentComponent = "tDBInput_7";

						/**
						 * [tDBInput_7 process_data_begin ] stop
						 */

						/**
						 * [tMap_2 main ] start
						 */

						currentComponent = "tMap_2";

						if (execStat) {
							runStat.updateStatOnConnection(iterateId, 1, 1

									, "row6"

							);
						}

						boolean hasCasePrimitiveKeyWithNull_tMap_2 = false;

						// ###############################
						// # Input tables (lookups)
						boolean rejectedInnerJoin_tMap_2 = false;
						boolean mainRowRejected_tMap_2 = false;

						///////////////////////////////////////////////
						// Starting Lookup Table "row12"
						///////////////////////////////////////////////

						boolean forceLooprow12 = false;

						row12Struct row12ObjectFromLookup = null;

						if (!rejectedInnerJoin_tMap_2) { // G_TM_M_020

							hasCasePrimitiveKeyWithNull_tMap_2 = false;

							row12HashKey.LOGIN = row6.cod_usuario;

							row12HashKey.hashCodeDirty = true;

							tHash_Lookup_row12.lookup(row12HashKey);

						} // G_TM_M_020

						if (tHash_Lookup_row12 != null && tHash_Lookup_row12.getCount(row12HashKey) > 1) { // G 071

							// System.out.println("WARNING: UNIQUE MATCH is configured for the lookup
							// 'row12' and it contains more one result from keys : row12.LOGIN = '" +
							// row12HashKey.LOGIN + "'");
						} // G 071

						row12Struct row12 = null;

						row12Struct fromLookup_row12 = null;
						row12 = row12Default;

						if (tHash_Lookup_row12 != null && tHash_Lookup_row12.hasNext()) { // G 099

							fromLookup_row12 = tHash_Lookup_row12.next();

						} // G 099

						if (fromLookup_row12 != null) {
							row12 = fromLookup_row12;
						}

						///////////////////////////////////////////////
						// Starting Lookup Table "row7"
						///////////////////////////////////////////////

						boolean forceLooprow7 = false;

						row7Struct row7ObjectFromLookup = null;

						if (!rejectedInnerJoin_tMap_2) { // G_TM_M_020

							hasCasePrimitiveKeyWithNull_tMap_2 = false;

							row7HashKey.DOC_NBR = new BigDecimal(row6.sec_documento);

							row7HashKey.hashCodeDirty = true;

							tHash_Lookup_row7.lookup(row7HashKey);

							if (!tHash_Lookup_row7.hasNext()) { // G_TM_M_090

								rejectedInnerJoin_tMap_2 = true;

								forceLooprow7 = true;

							} // G_TM_M_090

						} // G_TM_M_020

						else { // G 20 - G 21
							forceLooprow7 = true;
						} // G 21

						row7Struct row7 = null;

						while ((tHash_Lookup_row7 != null && tHash_Lookup_row7.hasNext()) || forceLooprow7) { // G_TM_M_043

							// CALL close loop of lookup 'row7'

							row7Struct fromLookup_row7 = null;
							row7 = row7Default;

							if (!forceLooprow7) { // G 46

								fromLookup_row7 = tHash_Lookup_row7.next();

								if (fromLookup_row7 != null) {
									row7 = fromLookup_row7;
								}

							} // G 46

							forceLooprow7 = false;

							// ###############################
							{ // start of Var scope

								// ###############################
								// # Vars tables

								Var__tMap_2__Struct Var = Var__tMap_2;// ###############################
								// ###############################
								// # Output tables

								action_ud = null;

								if (!rejectedInnerJoin_tMap_2) {

// # Output table : 'action_ud'
									action_ud_tmp.USERDOC_SEQ = row7.USERDOC_SEQ;
									action_ud_tmp.USERDOC_SERIES = row7.USERDOC_SERIES;
									action_ud_tmp.USERDOC_NBR = row7.USERDOC_NBR;
									action_ud_tmp.PROCESS_FILE_SEQ = null;
									action_ud_tmp.PROCESS_FILE_TYPE = null;
									action_ud_tmp.PROCESS_FILE_SERIES = null;
									action_ud_tmp.PROCESS_FILE_NBR = null;
									action_ud_tmp.ACTION_TYPE = row6.tip_movimiento;
									action_ud_tmp.ACTION_DATE = TalendDate.compareDate(row6.fec_movimiento,
											TalendDate.parseDateInUTC("yyyy-MM-dd HH:mm:ss", "1800-01-01 00:00:00"),
											"yyyy-MM-dd") == 1 ? row6.fec_movimiento
													: row6.fec_movimiento_ant != null ? row6.fec_movimiento_ant
															: TalendDate.getCurrentDate();
									action_ud_tmp.MANUAL_DUE_DATE = null;
									action_ud_tmp.RESPONSIBLE_USER = row12.USER_ID != null ? row12.USER_ID
											: new BigDecimal("4");
									action_ud_tmp.ACTION_NOTES1 = row6.obs1;
									action_ud_tmp.ACTION_NOTES2 = row6.obs2;
									action_ud_tmp.ACTION_NOTES3 = row6.obs3;
									action_ud_tmp.ACTION_NOTES4 = row6.obs4;
									action_ud_tmp.ACTION_NOTES5 = row6.obs5;
									action_ud_tmp.GENERAL_NOTES = row6.obs_movimiento;
									action_ud_tmp.SELECTED_OPTIONS_TEXT = row6.secs_opciones;
									action_ud_tmp.ACTION_USER = row12.USER_ID != null ? row12.USER_ID
											: new BigDecimal("4");
									action_ud_tmp.ACTION_CATEGORY = "N";
									action_ud_tmp.SPECIAL_FINAL_STATUS = null;
									action_ud_tmp.JOURNAL_CODE = null;
									action_ud_tmp.PUBLICATION_DATE = null;
									action_ud_tmp.IPAS_PROC_TYP = null;
									action_ud_tmp.IPAS_PROC_NBR = null;
									action_ud_tmp.IPAS_ACTION_NBR = null;
									action_ud = action_ud_tmp;
								} // closing inner join bracket (2)
// ###############################

							} // end of Var scope

							rejectedInnerJoin_tMap_2 = false;

							tos_count_tMap_2++;

							/**
							 * [tMap_2 main ] stop
							 */

							/**
							 * [tMap_2 process_data_begin ] start
							 */

							currentComponent = "tMap_2";

							/**
							 * [tMap_2 process_data_begin ] stop
							 */
// Start of branch "action_ud"
							if (action_ud != null) {
								row13 = null;

								/**
								 * [tDBOutput_2 main ] start
								 */

								currentComponent = "tDBOutput_2";

								if (execStat) {
									runStat.updateStatOnConnection(iterateId, 1, 1

											, "action_ud"

									);
								}

								row13 = null;
								whetherReject_tDBOutput_2 = false;

								if (action_ud.USERDOC_SEQ == null) {
									pstmt_tDBOutput_2.setNull(1, java.sql.Types.VARCHAR);
								} else {
									pstmt_tDBOutput_2.setString(1, action_ud.USERDOC_SEQ);
								}

								pstmt_tDBOutput_2.setBigDecimal(2, action_ud.USERDOC_SERIES);

								pstmt_tDBOutput_2.setBigDecimal(3, action_ud.USERDOC_NBR);

								if (action_ud.ACTION_TYPE == null) {
									pstmt_tDBOutput_2.setNull(4, java.sql.Types.VARCHAR);
								} else {
									pstmt_tDBOutput_2.setString(4, action_ud.ACTION_TYPE);
								}

								if (action_ud.ACTION_DATE != null) {
									pstmt_tDBOutput_2.setTimestamp(5,
											new java.sql.Timestamp(action_ud.ACTION_DATE.getTime()));
								} else {
									pstmt_tDBOutput_2.setNull(5, java.sql.Types.TIMESTAMP);
								}

								int checkCount_tDBOutput_2 = -1;
								try (java.sql.ResultSet rs_tDBOutput_2 = pstmt_tDBOutput_2.executeQuery()) {
									while (rs_tDBOutput_2.next()) {
										checkCount_tDBOutput_2 = rs_tDBOutput_2.getInt(1);
									}
								}
								if (checkCount_tDBOutput_2 > 0) {
									try {
										if (action_ud.PROCESS_FILE_SEQ == null) {
											pstmtUpdate_tDBOutput_2.setNull(1, java.sql.Types.VARCHAR);
										} else {
											pstmtUpdate_tDBOutput_2.setString(1, action_ud.PROCESS_FILE_SEQ);
										}

										if (action_ud.PROCESS_FILE_TYPE == null) {
											pstmtUpdate_tDBOutput_2.setNull(2, java.sql.Types.VARCHAR);
										} else {
											pstmtUpdate_tDBOutput_2.setString(2, action_ud.PROCESS_FILE_TYPE);
										}

										pstmtUpdate_tDBOutput_2.setBigDecimal(3, action_ud.PROCESS_FILE_SERIES);

										pstmtUpdate_tDBOutput_2.setBigDecimal(4, action_ud.PROCESS_FILE_NBR);

										if (action_ud.MANUAL_DUE_DATE != null) {
											pstmtUpdate_tDBOutput_2.setTimestamp(5,
													new java.sql.Timestamp(action_ud.MANUAL_DUE_DATE.getTime()));
										} else {
											pstmtUpdate_tDBOutput_2.setNull(5, java.sql.Types.TIMESTAMP);
										}

										pstmtUpdate_tDBOutput_2.setBigDecimal(6, action_ud.RESPONSIBLE_USER);

										if (action_ud.ACTION_NOTES1 == null) {
											pstmtUpdate_tDBOutput_2.setNull(7, java.sql.Types.VARCHAR);
										} else {
											pstmtUpdate_tDBOutput_2.setString(7, action_ud.ACTION_NOTES1);
										}

										if (action_ud.ACTION_NOTES2 == null) {
											pstmtUpdate_tDBOutput_2.setNull(8, java.sql.Types.VARCHAR);
										} else {
											pstmtUpdate_tDBOutput_2.setString(8, action_ud.ACTION_NOTES2);
										}

										if (action_ud.ACTION_NOTES3 == null) {
											pstmtUpdate_tDBOutput_2.setNull(9, java.sql.Types.VARCHAR);
										} else {
											pstmtUpdate_tDBOutput_2.setString(9, action_ud.ACTION_NOTES3);
										}

										if (action_ud.ACTION_NOTES4 == null) {
											pstmtUpdate_tDBOutput_2.setNull(10, java.sql.Types.VARCHAR);
										} else {
											pstmtUpdate_tDBOutput_2.setString(10, action_ud.ACTION_NOTES4);
										}

										if (action_ud.ACTION_NOTES5 == null) {
											pstmtUpdate_tDBOutput_2.setNull(11, java.sql.Types.VARCHAR);
										} else {
											pstmtUpdate_tDBOutput_2.setString(11, action_ud.ACTION_NOTES5);
										}

										if (action_ud.GENERAL_NOTES == null) {
											pstmtUpdate_tDBOutput_2.setNull(12, java.sql.Types.VARCHAR);
										} else {
											pstmtUpdate_tDBOutput_2.setString(12, action_ud.GENERAL_NOTES);
										}

										if (action_ud.SELECTED_OPTIONS_TEXT == null) {
											pstmtUpdate_tDBOutput_2.setNull(13, java.sql.Types.VARCHAR);
										} else {
											pstmtUpdate_tDBOutput_2.setString(13, action_ud.SELECTED_OPTIONS_TEXT);
										}

										pstmtUpdate_tDBOutput_2.setBigDecimal(14, action_ud.ACTION_USER);

										if (action_ud.ACTION_CATEGORY == null) {
											pstmtUpdate_tDBOutput_2.setNull(15, java.sql.Types.VARCHAR);
										} else {
											pstmtUpdate_tDBOutput_2.setString(15, action_ud.ACTION_CATEGORY);
										}

										if (action_ud.SPECIAL_FINAL_STATUS == null) {
											pstmtUpdate_tDBOutput_2.setNull(16, java.sql.Types.VARCHAR);
										} else {
											pstmtUpdate_tDBOutput_2.setString(16, action_ud.SPECIAL_FINAL_STATUS);
										}

										if (action_ud.JOURNAL_CODE == null) {
											pstmtUpdate_tDBOutput_2.setNull(17, java.sql.Types.VARCHAR);
										} else {
											pstmtUpdate_tDBOutput_2.setString(17, action_ud.JOURNAL_CODE);
										}

										if (action_ud.PUBLICATION_DATE != null) {
											pstmtUpdate_tDBOutput_2.setTimestamp(18,
													new java.sql.Timestamp(action_ud.PUBLICATION_DATE.getTime()));
										} else {
											pstmtUpdate_tDBOutput_2.setNull(18, java.sql.Types.TIMESTAMP);
										}

										if (action_ud.IPAS_PROC_TYP == null) {
											pstmtUpdate_tDBOutput_2.setNull(19, java.sql.Types.VARCHAR);
										} else {
											pstmtUpdate_tDBOutput_2.setString(19, action_ud.IPAS_PROC_TYP);
										}

										pstmtUpdate_tDBOutput_2.setBigDecimal(20, action_ud.IPAS_PROC_NBR);

										pstmtUpdate_tDBOutput_2.setBigDecimal(21, action_ud.IPAS_ACTION_NBR);

										if (action_ud.USERDOC_SEQ == null) {
											pstmtUpdate_tDBOutput_2.setNull(22 + count_tDBOutput_2,
													java.sql.Types.VARCHAR);
										} else {
											pstmtUpdate_tDBOutput_2.setString(22 + count_tDBOutput_2,
													action_ud.USERDOC_SEQ);
										}

										pstmtUpdate_tDBOutput_2.setBigDecimal(23 + count_tDBOutput_2,
												action_ud.USERDOC_SERIES);

										pstmtUpdate_tDBOutput_2.setBigDecimal(24 + count_tDBOutput_2,
												action_ud.USERDOC_NBR);

										if (action_ud.ACTION_TYPE == null) {
											pstmtUpdate_tDBOutput_2.setNull(25 + count_tDBOutput_2,
													java.sql.Types.VARCHAR);
										} else {
											pstmtUpdate_tDBOutput_2.setString(25 + count_tDBOutput_2,
													action_ud.ACTION_TYPE);
										}

										if (action_ud.ACTION_DATE != null) {
											pstmtUpdate_tDBOutput_2.setTimestamp(26 + count_tDBOutput_2,
													new java.sql.Timestamp(action_ud.ACTION_DATE.getTime()));
										} else {
											pstmtUpdate_tDBOutput_2.setNull(26 + count_tDBOutput_2,
													java.sql.Types.TIMESTAMP);
										}

										updatedCount_tDBOutput_2 = updatedCount_tDBOutput_2
												+ pstmtUpdate_tDBOutput_2.executeUpdate();
										nb_line_tDBOutput_2++;

									} catch (java.lang.Exception e) {
										whetherReject_tDBOutput_2 = true;
										nb_line_tDBOutput_2++;

										row13 = new row13Struct();
										row13.USERDOC_SEQ = action_ud.USERDOC_SEQ;
										row13.USERDOC_SERIES = action_ud.USERDOC_SERIES;
										row13.USERDOC_NBR = action_ud.USERDOC_NBR;
										row13.PROCESS_FILE_SEQ = action_ud.PROCESS_FILE_SEQ;
										row13.PROCESS_FILE_TYPE = action_ud.PROCESS_FILE_TYPE;
										row13.PROCESS_FILE_SERIES = action_ud.PROCESS_FILE_SERIES;
										row13.PROCESS_FILE_NBR = action_ud.PROCESS_FILE_NBR;
										row13.ACTION_TYPE = action_ud.ACTION_TYPE;
										row13.ACTION_DATE = action_ud.ACTION_DATE;
										row13.MANUAL_DUE_DATE = action_ud.MANUAL_DUE_DATE;
										row13.RESPONSIBLE_USER = action_ud.RESPONSIBLE_USER;
										row13.ACTION_NOTES1 = action_ud.ACTION_NOTES1;
										row13.ACTION_NOTES2 = action_ud.ACTION_NOTES2;
										row13.ACTION_NOTES3 = action_ud.ACTION_NOTES3;
										row13.ACTION_NOTES4 = action_ud.ACTION_NOTES4;
										row13.ACTION_NOTES5 = action_ud.ACTION_NOTES5;
										row13.GENERAL_NOTES = action_ud.GENERAL_NOTES;
										row13.SELECTED_OPTIONS_TEXT = action_ud.SELECTED_OPTIONS_TEXT;
										row13.ACTION_USER = action_ud.ACTION_USER;
										row13.ACTION_CATEGORY = action_ud.ACTION_CATEGORY;
										row13.SPECIAL_FINAL_STATUS = action_ud.SPECIAL_FINAL_STATUS;
										row13.JOURNAL_CODE = action_ud.JOURNAL_CODE;
										row13.PUBLICATION_DATE = action_ud.PUBLICATION_DATE;
										row13.IPAS_PROC_TYP = action_ud.IPAS_PROC_TYP;
										row13.IPAS_PROC_NBR = action_ud.IPAS_PROC_NBR;
										row13.IPAS_ACTION_NBR = action_ud.IPAS_ACTION_NBR;
										rejectedCount_tDBOutput_2 = rejectedCount_tDBOutput_2 + 1;
										row13.errorCode = ((java.sql.SQLException) e).getSQLState();
										row13.errorMessage = e.getMessage() + " - Line: " + tos_count_tDBOutput_2;
									}
								} else {
									try {
										if (action_ud.USERDOC_SEQ == null) {
											pstmtInsert_tDBOutput_2.setNull(1, java.sql.Types.VARCHAR);
										} else {
											pstmtInsert_tDBOutput_2.setString(1, action_ud.USERDOC_SEQ);
										}

										pstmtInsert_tDBOutput_2.setBigDecimal(2, action_ud.USERDOC_SERIES);

										pstmtInsert_tDBOutput_2.setBigDecimal(3, action_ud.USERDOC_NBR);

										if (action_ud.PROCESS_FILE_SEQ == null) {
											pstmtInsert_tDBOutput_2.setNull(4, java.sql.Types.VARCHAR);
										} else {
											pstmtInsert_tDBOutput_2.setString(4, action_ud.PROCESS_FILE_SEQ);
										}

										if (action_ud.PROCESS_FILE_TYPE == null) {
											pstmtInsert_tDBOutput_2.setNull(5, java.sql.Types.VARCHAR);
										} else {
											pstmtInsert_tDBOutput_2.setString(5, action_ud.PROCESS_FILE_TYPE);
										}

										pstmtInsert_tDBOutput_2.setBigDecimal(6, action_ud.PROCESS_FILE_SERIES);

										pstmtInsert_tDBOutput_2.setBigDecimal(7, action_ud.PROCESS_FILE_NBR);

										if (action_ud.ACTION_TYPE == null) {
											pstmtInsert_tDBOutput_2.setNull(8, java.sql.Types.VARCHAR);
										} else {
											pstmtInsert_tDBOutput_2.setString(8, action_ud.ACTION_TYPE);
										}

										if (action_ud.ACTION_DATE != null) {
											pstmtInsert_tDBOutput_2.setTimestamp(9,
													new java.sql.Timestamp(action_ud.ACTION_DATE.getTime()));
										} else {
											pstmtInsert_tDBOutput_2.setNull(9, java.sql.Types.TIMESTAMP);
										}

										if (action_ud.MANUAL_DUE_DATE != null) {
											pstmtInsert_tDBOutput_2.setTimestamp(10,
													new java.sql.Timestamp(action_ud.MANUAL_DUE_DATE.getTime()));
										} else {
											pstmtInsert_tDBOutput_2.setNull(10, java.sql.Types.TIMESTAMP);
										}

										pstmtInsert_tDBOutput_2.setBigDecimal(11, action_ud.RESPONSIBLE_USER);

										if (action_ud.ACTION_NOTES1 == null) {
											pstmtInsert_tDBOutput_2.setNull(12, java.sql.Types.VARCHAR);
										} else {
											pstmtInsert_tDBOutput_2.setString(12, action_ud.ACTION_NOTES1);
										}

										if (action_ud.ACTION_NOTES2 == null) {
											pstmtInsert_tDBOutput_2.setNull(13, java.sql.Types.VARCHAR);
										} else {
											pstmtInsert_tDBOutput_2.setString(13, action_ud.ACTION_NOTES2);
										}

										if (action_ud.ACTION_NOTES3 == null) {
											pstmtInsert_tDBOutput_2.setNull(14, java.sql.Types.VARCHAR);
										} else {
											pstmtInsert_tDBOutput_2.setString(14, action_ud.ACTION_NOTES3);
										}

										if (action_ud.ACTION_NOTES4 == null) {
											pstmtInsert_tDBOutput_2.setNull(15, java.sql.Types.VARCHAR);
										} else {
											pstmtInsert_tDBOutput_2.setString(15, action_ud.ACTION_NOTES4);
										}

										if (action_ud.ACTION_NOTES5 == null) {
											pstmtInsert_tDBOutput_2.setNull(16, java.sql.Types.VARCHAR);
										} else {
											pstmtInsert_tDBOutput_2.setString(16, action_ud.ACTION_NOTES5);
										}

										if (action_ud.GENERAL_NOTES == null) {
											pstmtInsert_tDBOutput_2.setNull(17, java.sql.Types.VARCHAR);
										} else {
											pstmtInsert_tDBOutput_2.setString(17, action_ud.GENERAL_NOTES);
										}

										if (action_ud.SELECTED_OPTIONS_TEXT == null) {
											pstmtInsert_tDBOutput_2.setNull(18, java.sql.Types.VARCHAR);
										} else {
											pstmtInsert_tDBOutput_2.setString(18, action_ud.SELECTED_OPTIONS_TEXT);
										}

										pstmtInsert_tDBOutput_2.setBigDecimal(19, action_ud.ACTION_USER);

										if (action_ud.ACTION_CATEGORY == null) {
											pstmtInsert_tDBOutput_2.setNull(20, java.sql.Types.VARCHAR);
										} else {
											pstmtInsert_tDBOutput_2.setString(20, action_ud.ACTION_CATEGORY);
										}

										if (action_ud.SPECIAL_FINAL_STATUS == null) {
											pstmtInsert_tDBOutput_2.setNull(21, java.sql.Types.VARCHAR);
										} else {
											pstmtInsert_tDBOutput_2.setString(21, action_ud.SPECIAL_FINAL_STATUS);
										}

										if (action_ud.JOURNAL_CODE == null) {
											pstmtInsert_tDBOutput_2.setNull(22, java.sql.Types.VARCHAR);
										} else {
											pstmtInsert_tDBOutput_2.setString(22, action_ud.JOURNAL_CODE);
										}

										if (action_ud.PUBLICATION_DATE != null) {
											pstmtInsert_tDBOutput_2.setTimestamp(23,
													new java.sql.Timestamp(action_ud.PUBLICATION_DATE.getTime()));
										} else {
											pstmtInsert_tDBOutput_2.setNull(23, java.sql.Types.TIMESTAMP);
										}

										if (action_ud.IPAS_PROC_TYP == null) {
											pstmtInsert_tDBOutput_2.setNull(24, java.sql.Types.VARCHAR);
										} else {
											pstmtInsert_tDBOutput_2.setString(24, action_ud.IPAS_PROC_TYP);
										}

										pstmtInsert_tDBOutput_2.setBigDecimal(25, action_ud.IPAS_PROC_NBR);

										pstmtInsert_tDBOutput_2.setBigDecimal(26, action_ud.IPAS_ACTION_NBR);

										insertedCount_tDBOutput_2 = insertedCount_tDBOutput_2
												+ pstmtInsert_tDBOutput_2.executeUpdate();
										nb_line_tDBOutput_2++;
									} catch (java.lang.Exception e) {
										whetherReject_tDBOutput_2 = true;
										nb_line_tDBOutput_2++;

										row13 = new row13Struct();
										row13.USERDOC_SEQ = action_ud.USERDOC_SEQ;
										row13.USERDOC_SERIES = action_ud.USERDOC_SERIES;
										row13.USERDOC_NBR = action_ud.USERDOC_NBR;
										row13.PROCESS_FILE_SEQ = action_ud.PROCESS_FILE_SEQ;
										row13.PROCESS_FILE_TYPE = action_ud.PROCESS_FILE_TYPE;
										row13.PROCESS_FILE_SERIES = action_ud.PROCESS_FILE_SERIES;
										row13.PROCESS_FILE_NBR = action_ud.PROCESS_FILE_NBR;
										row13.ACTION_TYPE = action_ud.ACTION_TYPE;
										row13.ACTION_DATE = action_ud.ACTION_DATE;
										row13.MANUAL_DUE_DATE = action_ud.MANUAL_DUE_DATE;
										row13.RESPONSIBLE_USER = action_ud.RESPONSIBLE_USER;
										row13.ACTION_NOTES1 = action_ud.ACTION_NOTES1;
										row13.ACTION_NOTES2 = action_ud.ACTION_NOTES2;
										row13.ACTION_NOTES3 = action_ud.ACTION_NOTES3;
										row13.ACTION_NOTES4 = action_ud.ACTION_NOTES4;
										row13.ACTION_NOTES5 = action_ud.ACTION_NOTES5;
										row13.GENERAL_NOTES = action_ud.GENERAL_NOTES;
										row13.SELECTED_OPTIONS_TEXT = action_ud.SELECTED_OPTIONS_TEXT;
										row13.ACTION_USER = action_ud.ACTION_USER;
										row13.ACTION_CATEGORY = action_ud.ACTION_CATEGORY;
										row13.SPECIAL_FINAL_STATUS = action_ud.SPECIAL_FINAL_STATUS;
										row13.JOURNAL_CODE = action_ud.JOURNAL_CODE;
										row13.PUBLICATION_DATE = action_ud.PUBLICATION_DATE;
										row13.IPAS_PROC_TYP = action_ud.IPAS_PROC_TYP;
										row13.IPAS_PROC_NBR = action_ud.IPAS_PROC_NBR;
										row13.IPAS_ACTION_NBR = action_ud.IPAS_ACTION_NBR;
										rejectedCount_tDBOutput_2 = rejectedCount_tDBOutput_2 + 1;
										row13.errorCode = ((java.sql.SQLException) e).getSQLState();
										row13.errorMessage = e.getMessage() + " - Line: " + tos_count_tDBOutput_2;
									}
								}
								if (!whetherReject_tDBOutput_2) {
								}
								////////// batch execute by batch size///////
								class LimitBytesHelper_tDBOutput_2 {
									public int limitBytePart1(int counter, java.sql.PreparedStatement pstmt_tDBOutput_2)
											throws Exception {
										try {

											for (int countEach_tDBOutput_2 : pstmt_tDBOutput_2.executeBatch()) {
												if (countEach_tDBOutput_2 == -2 || countEach_tDBOutput_2 == -3) {
													break;
												}
												counter += countEach_tDBOutput_2;
											}

										} catch (java.sql.BatchUpdateException e) {

											int countSum_tDBOutput_2 = 0;
											for (int countEach_tDBOutput_2 : e.getUpdateCounts()) {
												counter += (countEach_tDBOutput_2 < 0 ? 0 : countEach_tDBOutput_2);
											}

											System.err.println(e.getMessage());

										}
										return counter;
									}

									public int limitBytePart2(int counter, java.sql.PreparedStatement pstmt_tDBOutput_2)
											throws Exception {
										try {

											for (int countEach_tDBOutput_2 : pstmt_tDBOutput_2.executeBatch()) {
												if (countEach_tDBOutput_2 == -2 || countEach_tDBOutput_2 == -3) {
													break;
												}
												counter += countEach_tDBOutput_2;
											}

										} catch (java.sql.BatchUpdateException e) {

											for (int countEach_tDBOutput_2 : e.getUpdateCounts()) {
												counter += (countEach_tDBOutput_2 < 0 ? 0 : countEach_tDBOutput_2);
											}

											System.err.println(e.getMessage());

										}
										return counter;
									}
								}

								//////////// commit every////////////

								tos_count_tDBOutput_2++;

								/**
								 * [tDBOutput_2 main ] stop
								 */

								/**
								 * [tDBOutput_2 process_data_begin ] start
								 */

								currentComponent = "tDBOutput_2";

								/**
								 * [tDBOutput_2 process_data_begin ] stop
								 */
// Start of branch "row13"
								if (row13 != null) {

									/**
									 * [tLogRow_2 main ] start
									 */

									currentComponent = "tLogRow_2";

									if (execStat) {
										runStat.updateStatOnConnection(iterateId, 1, 1

												, "row13"

										);
									}

///////////////////////		

									strBuffer_tLogRow_2 = new StringBuilder();

									if (row13.USERDOC_SEQ != null) { //

										strBuffer_tLogRow_2.append(String.valueOf(row13.USERDOC_SEQ));

									} //

									strBuffer_tLogRow_2.append("|");

									if (row13.USERDOC_SERIES != null) { //

										strBuffer_tLogRow_2.append(row13.USERDOC_SERIES
												.setScale(0, java.math.RoundingMode.HALF_UP).toPlainString());

									} //

									strBuffer_tLogRow_2.append("|");

									if (row13.USERDOC_NBR != null) { //

										strBuffer_tLogRow_2.append(row13.USERDOC_NBR
												.setScale(0, java.math.RoundingMode.HALF_UP).toPlainString());

									} //

									strBuffer_tLogRow_2.append("|");

									if (row13.PROCESS_FILE_SEQ != null) { //

										strBuffer_tLogRow_2.append(String.valueOf(row13.PROCESS_FILE_SEQ));

									} //

									strBuffer_tLogRow_2.append("|");

									if (row13.PROCESS_FILE_TYPE != null) { //

										strBuffer_tLogRow_2.append(String.valueOf(row13.PROCESS_FILE_TYPE));

									} //

									strBuffer_tLogRow_2.append("|");

									if (row13.PROCESS_FILE_SERIES != null) { //

										strBuffer_tLogRow_2.append(row13.PROCESS_FILE_SERIES
												.setScale(0, java.math.RoundingMode.HALF_UP).toPlainString());

									} //

									strBuffer_tLogRow_2.append("|");

									if (row13.PROCESS_FILE_NBR != null) { //

										strBuffer_tLogRow_2.append(row13.PROCESS_FILE_NBR
												.setScale(0, java.math.RoundingMode.HALF_UP).toPlainString());

									} //

									strBuffer_tLogRow_2.append("|");

									if (row13.ACTION_TYPE != null) { //

										strBuffer_tLogRow_2.append(String.valueOf(row13.ACTION_TYPE));

									} //

									strBuffer_tLogRow_2.append("|");

									if (row13.ACTION_DATE != null) { //

										strBuffer_tLogRow_2
												.append(FormatterUtils.format_Date(row13.ACTION_DATE, "dd-MM-yyyy"));

									} //

									strBuffer_tLogRow_2.append("|");

									if (row13.MANUAL_DUE_DATE != null) { //

										strBuffer_tLogRow_2.append(
												FormatterUtils.format_Date(row13.MANUAL_DUE_DATE, "dd-MM-yyyy"));

									} //

									strBuffer_tLogRow_2.append("|");

									if (row13.RESPONSIBLE_USER != null) { //

										strBuffer_tLogRow_2.append(row13.RESPONSIBLE_USER
												.setScale(0, java.math.RoundingMode.HALF_UP).toPlainString());

									} //

									strBuffer_tLogRow_2.append("|");

									if (row13.ACTION_NOTES1 != null) { //

										strBuffer_tLogRow_2.append(String.valueOf(row13.ACTION_NOTES1));

									} //

									strBuffer_tLogRow_2.append("|");

									if (row13.ACTION_NOTES2 != null) { //

										strBuffer_tLogRow_2.append(String.valueOf(row13.ACTION_NOTES2));

									} //

									strBuffer_tLogRow_2.append("|");

									if (row13.ACTION_NOTES3 != null) { //

										strBuffer_tLogRow_2.append(String.valueOf(row13.ACTION_NOTES3));

									} //

									strBuffer_tLogRow_2.append("|");

									if (row13.ACTION_NOTES4 != null) { //

										strBuffer_tLogRow_2.append(String.valueOf(row13.ACTION_NOTES4));

									} //

									strBuffer_tLogRow_2.append("|");

									if (row13.ACTION_NOTES5 != null) { //

										strBuffer_tLogRow_2.append(String.valueOf(row13.ACTION_NOTES5));

									} //

									strBuffer_tLogRow_2.append("|");

									if (row13.GENERAL_NOTES != null) { //

										strBuffer_tLogRow_2.append(String.valueOf(row13.GENERAL_NOTES));

									} //

									strBuffer_tLogRow_2.append("|");

									if (row13.SELECTED_OPTIONS_TEXT != null) { //

										strBuffer_tLogRow_2.append(String.valueOf(row13.SELECTED_OPTIONS_TEXT));

									} //

									strBuffer_tLogRow_2.append("|");

									if (row13.ACTION_USER != null) { //

										strBuffer_tLogRow_2.append(row13.ACTION_USER
												.setScale(0, java.math.RoundingMode.HALF_UP).toPlainString());

									} //

									strBuffer_tLogRow_2.append("|");

									if (row13.ACTION_CATEGORY != null) { //

										strBuffer_tLogRow_2.append(String.valueOf(row13.ACTION_CATEGORY));

									} //

									strBuffer_tLogRow_2.append("|");

									if (row13.SPECIAL_FINAL_STATUS != null) { //

										strBuffer_tLogRow_2.append(String.valueOf(row13.SPECIAL_FINAL_STATUS));

									} //

									strBuffer_tLogRow_2.append("|");

									if (row13.JOURNAL_CODE != null) { //

										strBuffer_tLogRow_2.append(String.valueOf(row13.JOURNAL_CODE));

									} //

									strBuffer_tLogRow_2.append("|");

									if (row13.PUBLICATION_DATE != null) { //

										strBuffer_tLogRow_2.append(
												FormatterUtils.format_Date(row13.PUBLICATION_DATE, "dd-MM-yyyy"));

									} //

									strBuffer_tLogRow_2.append("|");

									if (row13.IPAS_PROC_TYP != null) { //

										strBuffer_tLogRow_2.append(String.valueOf(row13.IPAS_PROC_TYP));

									} //

									strBuffer_tLogRow_2.append("|");

									if (row13.IPAS_PROC_NBR != null) { //

										strBuffer_tLogRow_2.append(row13.IPAS_PROC_NBR
												.setScale(0, java.math.RoundingMode.HALF_UP).toPlainString());

									} //

									strBuffer_tLogRow_2.append("|");

									if (row13.IPAS_ACTION_NBR != null) { //

										strBuffer_tLogRow_2.append(row13.IPAS_ACTION_NBR
												.setScale(0, java.math.RoundingMode.HALF_UP).toPlainString());

									} //

									strBuffer_tLogRow_2.append("|");

									if (row13.errorCode != null) { //

										strBuffer_tLogRow_2.append(String.valueOf(row13.errorCode));

									} //

									strBuffer_tLogRow_2.append("|");

									if (row13.errorMessage != null) { //

										strBuffer_tLogRow_2.append(String.valueOf(row13.errorMessage));

									} //

									if (globalMap.get("tLogRow_CONSOLE") != null) {
										consoleOut_tLogRow_2 = (java.io.PrintStream) globalMap.get("tLogRow_CONSOLE");
									} else {
										consoleOut_tLogRow_2 = new java.io.PrintStream(
												new java.io.BufferedOutputStream(System.out));
										globalMap.put("tLogRow_CONSOLE", consoleOut_tLogRow_2);
									}
									consoleOut_tLogRow_2.println(strBuffer_tLogRow_2.toString());
									consoleOut_tLogRow_2.flush();
									nb_line_tLogRow_2++;
//////

//////                    

///////////////////////    			

									tos_count_tLogRow_2++;

									/**
									 * [tLogRow_2 main ] stop
									 */

									/**
									 * [tLogRow_2 process_data_begin ] start
									 */

									currentComponent = "tLogRow_2";

									/**
									 * [tLogRow_2 process_data_begin ] stop
									 */

									/**
									 * [tLogRow_2 process_data_end ] start
									 */

									currentComponent = "tLogRow_2";

									/**
									 * [tLogRow_2 process_data_end ] stop
									 */

								} // End of branch "row13"

								/**
								 * [tDBOutput_2 process_data_end ] start
								 */

								currentComponent = "tDBOutput_2";

								/**
								 * [tDBOutput_2 process_data_end ] stop
								 */

							} // End of branch "action_ud"

						} // close loop of lookup 'row7' // G_TM_M_043

						/**
						 * [tMap_2 process_data_end ] start
						 */

						currentComponent = "tMap_2";

						/**
						 * [tMap_2 process_data_end ] stop
						 */

						/**
						 * [tDBInput_7 process_data_end ] start
						 */

						currentComponent = "tDBInput_7";

						/**
						 * [tDBInput_7 process_data_end ] stop
						 */

						/**
						 * [tDBInput_7 end ] start
						 */

						currentComponent = "tDBInput_7";

					}
				} finally {
					if (rs_tDBInput_7 != null) {
						rs_tDBInput_7.close();
					}
					if (stmt_tDBInput_7 != null) {
						stmt_tDBInput_7.close();
					}
				}
				globalMap.put("tDBInput_7_NB_LINE", nb_line_tDBInput_7);

				ok_Hash.put("tDBInput_7", true);
				end_Hash.put("tDBInput_7", System.currentTimeMillis());

				/**
				 * [tDBInput_7 end ] stop
				 */

				/**
				 * [tMap_2 end ] start
				 */

				currentComponent = "tMap_2";

// ###############################
// # Lookup hashes releasing
				if (tHash_Lookup_row12 != null) {
					tHash_Lookup_row12.endGet();
				}
				globalMap.remove("tHash_Lookup_row12");

				if (tHash_Lookup_row7 != null) {
					tHash_Lookup_row7.endGet();
				}
				globalMap.remove("tHash_Lookup_row7");

// ###############################      

				if (execStat) {
					runStat.updateStat(resourceMap, iterateId, 2, 0, "row6");
				}

				ok_Hash.put("tMap_2", true);
				end_Hash.put("tMap_2", System.currentTimeMillis());

				/**
				 * [tMap_2 end ] stop
				 */

				/**
				 * [tDBOutput_2 end ] start
				 */

				currentComponent = "tDBOutput_2";

				if (pstmtUpdate_tDBOutput_2 != null) {
					pstmtUpdate_tDBOutput_2.close();
					resourceMap.remove("pstmtUpdate_tDBOutput_2");
				}
				if (pstmtInsert_tDBOutput_2 != null) {
					pstmtInsert_tDBOutput_2.close();
					resourceMap.remove("pstmtInsert_tDBOutput_2");
				}
				if (pstmt_tDBOutput_2 != null) {
					pstmt_tDBOutput_2.close();
					resourceMap.remove("pstmt_tDBOutput_2");
				}
				resourceMap.put("statementClosed_tDBOutput_2", true);

				nb_line_deleted_tDBOutput_2 = nb_line_deleted_tDBOutput_2 + deletedCount_tDBOutput_2;
				nb_line_update_tDBOutput_2 = nb_line_update_tDBOutput_2 + updatedCount_tDBOutput_2;
				nb_line_inserted_tDBOutput_2 = nb_line_inserted_tDBOutput_2 + insertedCount_tDBOutput_2;
				nb_line_rejected_tDBOutput_2 = nb_line_rejected_tDBOutput_2 + rejectedCount_tDBOutput_2;

				globalMap.put("tDBOutput_2_NB_LINE", nb_line_tDBOutput_2);
				globalMap.put("tDBOutput_2_NB_LINE_UPDATED", nb_line_update_tDBOutput_2);
				globalMap.put("tDBOutput_2_NB_LINE_INSERTED", nb_line_inserted_tDBOutput_2);
				globalMap.put("tDBOutput_2_NB_LINE_DELETED", nb_line_deleted_tDBOutput_2);
				globalMap.put("tDBOutput_2_NB_LINE_REJECTED", nb_line_rejected_tDBOutput_2);

				if (execStat) {
					runStat.updateStat(resourceMap, iterateId, 2, 0, "action_ud");
				}

				ok_Hash.put("tDBOutput_2", true);
				end_Hash.put("tDBOutput_2", System.currentTimeMillis());

				/**
				 * [tDBOutput_2 end ] stop
				 */

				/**
				 * [tLogRow_2 end ] start
				 */

				currentComponent = "tLogRow_2";

//////
//////
				globalMap.put("tLogRow_2_NB_LINE", nb_line_tLogRow_2);

///////////////////////    			

				if (execStat) {
					runStat.updateStat(resourceMap, iterateId, 2, 0, "row13");
				}

				ok_Hash.put("tLogRow_2", true);
				end_Hash.put("tLogRow_2", System.currentTimeMillis());

				/**
				 * [tLogRow_2 end ] stop
				 */

			} // end the resume

			if (resumeEntryMethodName == null || globalResumeTicket) {
				resumeUtil.addLog("CHECKPOINT", "CONNECTION:SUBJOB_OK:tDBInput_7:OnSubjobOk", "",
						Thread.currentThread().getId() + "", "", "", "", "", "");
			}

			if (execStat) {
				runStat.updateStatOnConnection("OnSubjobOk6", 0, "ok");
			}

			tDBInput_11Process(globalMap);

		} catch (java.lang.Exception e) {

			TalendException te = new TalendException(e, currentComponent, globalMap);

			throw te;
		} catch (java.lang.Error error) {

			runStat.stopThreadStat();

			throw error;
		} finally {

			// free memory for "tMap_2"
			globalMap.remove("tHash_Lookup_row7");

			// free memory for "tMap_2"
			globalMap.remove("tHash_Lookup_row12");

			try {

				/**
				 * [tDBInput_7 finally ] start
				 */

				currentComponent = "tDBInput_7";

				/**
				 * [tDBInput_7 finally ] stop
				 */

				/**
				 * [tMap_2 finally ] start
				 */

				currentComponent = "tMap_2";

				/**
				 * [tMap_2 finally ] stop
				 */

				/**
				 * [tDBOutput_2 finally ] start
				 */

				currentComponent = "tDBOutput_2";

				if (resourceMap.get("statementClosed_tDBOutput_2") == null) {
					java.sql.PreparedStatement pstmtUpdateToClose_tDBOutput_2 = null;
					if ((pstmtUpdateToClose_tDBOutput_2 = (java.sql.PreparedStatement) resourceMap
							.remove("pstmtUpdate_tDBOutput_2")) != null) {
						pstmtUpdateToClose_tDBOutput_2.close();
					}
					java.sql.PreparedStatement pstmtInsertToClose_tDBOutput_2 = null;
					if ((pstmtInsertToClose_tDBOutput_2 = (java.sql.PreparedStatement) resourceMap
							.remove("pstmtInsert_tDBOutput_2")) != null) {
						pstmtInsertToClose_tDBOutput_2.close();
					}
					java.sql.PreparedStatement pstmtToClose_tDBOutput_2 = null;
					if ((pstmtToClose_tDBOutput_2 = (java.sql.PreparedStatement) resourceMap
							.remove("pstmt_tDBOutput_2")) != null) {
						pstmtToClose_tDBOutput_2.close();
					}
				}

				/**
				 * [tDBOutput_2 finally ] stop
				 */

				/**
				 * [tLogRow_2 finally ] start
				 */

				currentComponent = "tLogRow_2";

				/**
				 * [tLogRow_2 finally ] stop
				 */

			} catch (java.lang.Exception e) {
				// ignore
			} catch (java.lang.Error error) {
				// ignore
			}
			resourceMap = null;
		}

		globalMap.put("tDBInput_7_SUBPROCESS_STATE", 1);
	}

	public static class row16Struct implements routines.system.IPersistableRow<row16Struct> {
		final static byte[] commonByteArrayLock_WIPO_PROJECTS_E1a_Marc_Userdoc_a_interm = new byte[0];
		static byte[] commonByteArray_WIPO_PROJECTS_E1a_Marc_Userdoc_a_interm = new byte[0];
		protected static final int DEFAULT_HASHCODE = 1;
		protected static final int PRIME = 31;
		protected int hashCode = DEFAULT_HASHCODE;
		public boolean hashCodeDirty = true;

		public String loopKey;

		public String USERDOC_SEQ;

		public String getUSERDOC_SEQ() {
			return this.USERDOC_SEQ;
		}

		public BigDecimal USERDOC_SERIES;

		public BigDecimal getUSERDOC_SERIES() {
			return this.USERDOC_SERIES;
		}

		public BigDecimal USERDOC_NBR;

		public BigDecimal getUSERDOC_NBR() {
			return this.USERDOC_NBR;
		}

		public String PROCESS_FILE_SEQ;

		public String getPROCESS_FILE_SEQ() {
			return this.PROCESS_FILE_SEQ;
		}

		public String PROCESS_FILE_TYPE;

		public String getPROCESS_FILE_TYPE() {
			return this.PROCESS_FILE_TYPE;
		}

		public BigDecimal PROCESS_FILE_SERIES;

		public BigDecimal getPROCESS_FILE_SERIES() {
			return this.PROCESS_FILE_SERIES;
		}

		public BigDecimal PROCESS_FILE_NBR;

		public BigDecimal getPROCESS_FILE_NBR() {
			return this.PROCESS_FILE_NBR;
		}

		public String ACTION_TYPE;

		public String getACTION_TYPE() {
			return this.ACTION_TYPE;
		}

		public java.util.Date ACTION_DATE;

		public java.util.Date getACTION_DATE() {
			return this.ACTION_DATE;
		}

		public java.util.Date MANUAL_DUE_DATE;

		public java.util.Date getMANUAL_DUE_DATE() {
			return this.MANUAL_DUE_DATE;
		}

		public BigDecimal RESPONSIBLE_USER;

		public BigDecimal getRESPONSIBLE_USER() {
			return this.RESPONSIBLE_USER;
		}

		public String ACTION_NOTES1;

		public String getACTION_NOTES1() {
			return this.ACTION_NOTES1;
		}

		public String ACTION_NOTES2;

		public String getACTION_NOTES2() {
			return this.ACTION_NOTES2;
		}

		public String ACTION_NOTES3;

		public String getACTION_NOTES3() {
			return this.ACTION_NOTES3;
		}

		public String ACTION_NOTES4;

		public String getACTION_NOTES4() {
			return this.ACTION_NOTES4;
		}

		public String ACTION_NOTES5;

		public String getACTION_NOTES5() {
			return this.ACTION_NOTES5;
		}

		public String GENERAL_NOTES;

		public String getGENERAL_NOTES() {
			return this.GENERAL_NOTES;
		}

		public String SELECTED_OPTIONS_TEXT;

		public String getSELECTED_OPTIONS_TEXT() {
			return this.SELECTED_OPTIONS_TEXT;
		}

		public BigDecimal ACTION_USER;

		public BigDecimal getACTION_USER() {
			return this.ACTION_USER;
		}

		public String ACTION_CATEGORY;

		public String getACTION_CATEGORY() {
			return this.ACTION_CATEGORY;
		}

		public String SPECIAL_FINAL_STATUS;

		public String getSPECIAL_FINAL_STATUS() {
			return this.SPECIAL_FINAL_STATUS;
		}

		public String JOURNAL_CODE;

		public String getJOURNAL_CODE() {
			return this.JOURNAL_CODE;
		}

		public java.util.Date PUBLICATION_DATE;

		public java.util.Date getPUBLICATION_DATE() {
			return this.PUBLICATION_DATE;
		}

		public String IPAS_PROC_TYP;

		public String getIPAS_PROC_TYP() {
			return this.IPAS_PROC_TYP;
		}

		public BigDecimal IPAS_PROC_NBR;

		public BigDecimal getIPAS_PROC_NBR() {
			return this.IPAS_PROC_NBR;
		}

		public BigDecimal IPAS_ACTION_NBR;

		public BigDecimal getIPAS_ACTION_NBR() {
			return this.IPAS_ACTION_NBR;
		}

		public String errorCode;

		public String getErrorCode() {
			return this.errorCode;
		}

		public String errorMessage;

		public String getErrorMessage() {
			return this.errorMessage;
		}

		@Override
		public int hashCode() {
			if (this.hashCodeDirty) {
				final int prime = PRIME;
				int result = DEFAULT_HASHCODE;

				result = prime * result + ((this.USERDOC_SEQ == null) ? 0 : this.USERDOC_SEQ.hashCode());

				result = prime * result + ((this.USERDOC_SERIES == null) ? 0 : this.USERDOC_SERIES.hashCode());

				result = prime * result + ((this.USERDOC_NBR == null) ? 0 : this.USERDOC_NBR.hashCode());

				result = prime * result + ((this.ACTION_TYPE == null) ? 0 : this.ACTION_TYPE.hashCode());

				result = prime * result + ((this.ACTION_DATE == null) ? 0 : this.ACTION_DATE.hashCode());

				this.hashCode = result;
				this.hashCodeDirty = false;
			}
			return this.hashCode;
		}

		@Override
		public boolean equals(Object obj) {
			if (this == obj)
				return true;
			if (obj == null)
				return false;
			if (getClass() != obj.getClass())
				return false;
			final row16Struct other = (row16Struct) obj;

			if (this.USERDOC_SEQ == null) {
				if (other.USERDOC_SEQ != null)
					return false;

			} else if (!this.USERDOC_SEQ.equals(other.USERDOC_SEQ))

				return false;

			if (this.USERDOC_SERIES == null) {
				if (other.USERDOC_SERIES != null)
					return false;

			} else if (!this.USERDOC_SERIES.equals(other.USERDOC_SERIES))

				return false;

			if (this.USERDOC_NBR == null) {
				if (other.USERDOC_NBR != null)
					return false;

			} else if (!this.USERDOC_NBR.equals(other.USERDOC_NBR))

				return false;

			if (this.ACTION_TYPE == null) {
				if (other.ACTION_TYPE != null)
					return false;

			} else if (!this.ACTION_TYPE.equals(other.ACTION_TYPE))

				return false;

			if (this.ACTION_DATE == null) {
				if (other.ACTION_DATE != null)
					return false;

			} else if (!this.ACTION_DATE.equals(other.ACTION_DATE))

				return false;

			return true;
		}

		public void copyDataTo(row16Struct other) {

			other.USERDOC_SEQ = this.USERDOC_SEQ;
			other.USERDOC_SERIES = this.USERDOC_SERIES;
			other.USERDOC_NBR = this.USERDOC_NBR;
			other.PROCESS_FILE_SEQ = this.PROCESS_FILE_SEQ;
			other.PROCESS_FILE_TYPE = this.PROCESS_FILE_TYPE;
			other.PROCESS_FILE_SERIES = this.PROCESS_FILE_SERIES;
			other.PROCESS_FILE_NBR = this.PROCESS_FILE_NBR;
			other.ACTION_TYPE = this.ACTION_TYPE;
			other.ACTION_DATE = this.ACTION_DATE;
			other.MANUAL_DUE_DATE = this.MANUAL_DUE_DATE;
			other.RESPONSIBLE_USER = this.RESPONSIBLE_USER;
			other.ACTION_NOTES1 = this.ACTION_NOTES1;
			other.ACTION_NOTES2 = this.ACTION_NOTES2;
			other.ACTION_NOTES3 = this.ACTION_NOTES3;
			other.ACTION_NOTES4 = this.ACTION_NOTES4;
			other.ACTION_NOTES5 = this.ACTION_NOTES5;
			other.GENERAL_NOTES = this.GENERAL_NOTES;
			other.SELECTED_OPTIONS_TEXT = this.SELECTED_OPTIONS_TEXT;
			other.ACTION_USER = this.ACTION_USER;
			other.ACTION_CATEGORY = this.ACTION_CATEGORY;
			other.SPECIAL_FINAL_STATUS = this.SPECIAL_FINAL_STATUS;
			other.JOURNAL_CODE = this.JOURNAL_CODE;
			other.PUBLICATION_DATE = this.PUBLICATION_DATE;
			other.IPAS_PROC_TYP = this.IPAS_PROC_TYP;
			other.IPAS_PROC_NBR = this.IPAS_PROC_NBR;
			other.IPAS_ACTION_NBR = this.IPAS_ACTION_NBR;
			other.errorCode = this.errorCode;
			other.errorMessage = this.errorMessage;

		}

		public void copyKeysDataTo(row16Struct other) {

			other.USERDOC_SEQ = this.USERDOC_SEQ;
			other.USERDOC_SERIES = this.USERDOC_SERIES;
			other.USERDOC_NBR = this.USERDOC_NBR;
			other.ACTION_TYPE = this.ACTION_TYPE;
			other.ACTION_DATE = this.ACTION_DATE;

		}

		private String readString(ObjectInputStream dis) throws IOException {
			String strReturn = null;
			int length = 0;
			length = dis.readInt();
			if (length == -1) {
				strReturn = null;
			} else {
				if (length > commonByteArray_WIPO_PROJECTS_E1a_Marc_Userdoc_a_interm.length) {
					if (length < 1024 && commonByteArray_WIPO_PROJECTS_E1a_Marc_Userdoc_a_interm.length == 0) {
						commonByteArray_WIPO_PROJECTS_E1a_Marc_Userdoc_a_interm = new byte[1024];
					} else {
						commonByteArray_WIPO_PROJECTS_E1a_Marc_Userdoc_a_interm = new byte[2 * length];
					}
				}
				dis.readFully(commonByteArray_WIPO_PROJECTS_E1a_Marc_Userdoc_a_interm, 0, length);
				strReturn = new String(commonByteArray_WIPO_PROJECTS_E1a_Marc_Userdoc_a_interm, 0, length, utf8Charset);
			}
			return strReturn;
		}

		private void writeString(String str, ObjectOutputStream dos) throws IOException {
			if (str == null) {
				dos.writeInt(-1);
			} else {
				byte[] byteArray = str.getBytes(utf8Charset);
				dos.writeInt(byteArray.length);
				dos.write(byteArray);
			}
		}

		private java.util.Date readDate(ObjectInputStream dis) throws IOException {
			java.util.Date dateReturn = null;
			int length = 0;
			length = dis.readByte();
			if (length == -1) {
				dateReturn = null;
			} else {
				dateReturn = new Date(dis.readLong());
			}
			return dateReturn;
		}

		private void writeDate(java.util.Date date1, ObjectOutputStream dos) throws IOException {
			if (date1 == null) {
				dos.writeByte(-1);
			} else {
				dos.writeByte(0);
				dos.writeLong(date1.getTime());
			}
		}

		public void readData(ObjectInputStream dis) {

			synchronized (commonByteArrayLock_WIPO_PROJECTS_E1a_Marc_Userdoc_a_interm) {

				try {

					int length = 0;

					this.USERDOC_SEQ = readString(dis);

					this.USERDOC_SERIES = (BigDecimal) dis.readObject();

					this.USERDOC_NBR = (BigDecimal) dis.readObject();

					this.PROCESS_FILE_SEQ = readString(dis);

					this.PROCESS_FILE_TYPE = readString(dis);

					this.PROCESS_FILE_SERIES = (BigDecimal) dis.readObject();

					this.PROCESS_FILE_NBR = (BigDecimal) dis.readObject();

					this.ACTION_TYPE = readString(dis);

					this.ACTION_DATE = readDate(dis);

					this.MANUAL_DUE_DATE = readDate(dis);

					this.RESPONSIBLE_USER = (BigDecimal) dis.readObject();

					this.ACTION_NOTES1 = readString(dis);

					this.ACTION_NOTES2 = readString(dis);

					this.ACTION_NOTES3 = readString(dis);

					this.ACTION_NOTES4 = readString(dis);

					this.ACTION_NOTES5 = readString(dis);

					this.GENERAL_NOTES = readString(dis);

					this.SELECTED_OPTIONS_TEXT = readString(dis);

					this.ACTION_USER = (BigDecimal) dis.readObject();

					this.ACTION_CATEGORY = readString(dis);

					this.SPECIAL_FINAL_STATUS = readString(dis);

					this.JOURNAL_CODE = readString(dis);

					this.PUBLICATION_DATE = readDate(dis);

					this.IPAS_PROC_TYP = readString(dis);

					this.IPAS_PROC_NBR = (BigDecimal) dis.readObject();

					this.IPAS_ACTION_NBR = (BigDecimal) dis.readObject();

					this.errorCode = readString(dis);

					this.errorMessage = readString(dis);

				} catch (IOException e) {
					throw new RuntimeException(e);

				} catch (ClassNotFoundException eCNFE) {
					throw new RuntimeException(eCNFE);

				}

			}

		}

		public void writeData(ObjectOutputStream dos) {
			try {

				// String

				writeString(this.USERDOC_SEQ, dos);

				// BigDecimal

				dos.writeObject(this.USERDOC_SERIES);

				// BigDecimal

				dos.writeObject(this.USERDOC_NBR);

				// String

				writeString(this.PROCESS_FILE_SEQ, dos);

				// String

				writeString(this.PROCESS_FILE_TYPE, dos);

				// BigDecimal

				dos.writeObject(this.PROCESS_FILE_SERIES);

				// BigDecimal

				dos.writeObject(this.PROCESS_FILE_NBR);

				// String

				writeString(this.ACTION_TYPE, dos);

				// java.util.Date

				writeDate(this.ACTION_DATE, dos);

				// java.util.Date

				writeDate(this.MANUAL_DUE_DATE, dos);

				// BigDecimal

				dos.writeObject(this.RESPONSIBLE_USER);

				// String

				writeString(this.ACTION_NOTES1, dos);

				// String

				writeString(this.ACTION_NOTES2, dos);

				// String

				writeString(this.ACTION_NOTES3, dos);

				// String

				writeString(this.ACTION_NOTES4, dos);

				// String

				writeString(this.ACTION_NOTES5, dos);

				// String

				writeString(this.GENERAL_NOTES, dos);

				// String

				writeString(this.SELECTED_OPTIONS_TEXT, dos);

				// BigDecimal

				dos.writeObject(this.ACTION_USER);

				// String

				writeString(this.ACTION_CATEGORY, dos);

				// String

				writeString(this.SPECIAL_FINAL_STATUS, dos);

				// String

				writeString(this.JOURNAL_CODE, dos);

				// java.util.Date

				writeDate(this.PUBLICATION_DATE, dos);

				// String

				writeString(this.IPAS_PROC_TYP, dos);

				// BigDecimal

				dos.writeObject(this.IPAS_PROC_NBR);

				// BigDecimal

				dos.writeObject(this.IPAS_ACTION_NBR);

				// String

				writeString(this.errorCode, dos);

				// String

				writeString(this.errorMessage, dos);

			} catch (IOException e) {
				throw new RuntimeException(e);
			}

		}

		public String toString() {

			StringBuilder sb = new StringBuilder();
			sb.append(super.toString());
			sb.append("[");
			sb.append("USERDOC_SEQ=" + USERDOC_SEQ);
			sb.append(",USERDOC_SERIES=" + String.valueOf(USERDOC_SERIES));
			sb.append(",USERDOC_NBR=" + String.valueOf(USERDOC_NBR));
			sb.append(",PROCESS_FILE_SEQ=" + PROCESS_FILE_SEQ);
			sb.append(",PROCESS_FILE_TYPE=" + PROCESS_FILE_TYPE);
			sb.append(",PROCESS_FILE_SERIES=" + String.valueOf(PROCESS_FILE_SERIES));
			sb.append(",PROCESS_FILE_NBR=" + String.valueOf(PROCESS_FILE_NBR));
			sb.append(",ACTION_TYPE=" + ACTION_TYPE);
			sb.append(",ACTION_DATE=" + String.valueOf(ACTION_DATE));
			sb.append(",MANUAL_DUE_DATE=" + String.valueOf(MANUAL_DUE_DATE));
			sb.append(",RESPONSIBLE_USER=" + String.valueOf(RESPONSIBLE_USER));
			sb.append(",ACTION_NOTES1=" + ACTION_NOTES1);
			sb.append(",ACTION_NOTES2=" + ACTION_NOTES2);
			sb.append(",ACTION_NOTES3=" + ACTION_NOTES3);
			sb.append(",ACTION_NOTES4=" + ACTION_NOTES4);
			sb.append(",ACTION_NOTES5=" + ACTION_NOTES5);
			sb.append(",GENERAL_NOTES=" + GENERAL_NOTES);
			sb.append(",SELECTED_OPTIONS_TEXT=" + SELECTED_OPTIONS_TEXT);
			sb.append(",ACTION_USER=" + String.valueOf(ACTION_USER));
			sb.append(",ACTION_CATEGORY=" + ACTION_CATEGORY);
			sb.append(",SPECIAL_FINAL_STATUS=" + SPECIAL_FINAL_STATUS);
			sb.append(",JOURNAL_CODE=" + JOURNAL_CODE);
			sb.append(",PUBLICATION_DATE=" + String.valueOf(PUBLICATION_DATE));
			sb.append(",IPAS_PROC_TYP=" + IPAS_PROC_TYP);
			sb.append(",IPAS_PROC_NBR=" + String.valueOf(IPAS_PROC_NBR));
			sb.append(",IPAS_ACTION_NBR=" + String.valueOf(IPAS_ACTION_NBR));
			sb.append(",errorCode=" + errorCode);
			sb.append(",errorMessage=" + errorMessage);
			sb.append("]");

			return sb.toString();
		}

		/**
		 * Compare keys
		 */
		public int compareTo(row16Struct other) {

			int returnValue = -1;

			returnValue = checkNullsAndCompare(this.USERDOC_SEQ, other.USERDOC_SEQ);
			if (returnValue != 0) {
				return returnValue;
			}

			returnValue = checkNullsAndCompare(this.USERDOC_SERIES, other.USERDOC_SERIES);
			if (returnValue != 0) {
				return returnValue;
			}

			returnValue = checkNullsAndCompare(this.USERDOC_NBR, other.USERDOC_NBR);
			if (returnValue != 0) {
				return returnValue;
			}

			returnValue = checkNullsAndCompare(this.ACTION_TYPE, other.ACTION_TYPE);
			if (returnValue != 0) {
				return returnValue;
			}

			returnValue = checkNullsAndCompare(this.ACTION_DATE, other.ACTION_DATE);
			if (returnValue != 0) {
				return returnValue;
			}

			return returnValue;
		}

		private int checkNullsAndCompare(Object object1, Object object2) {
			int returnValue = 0;
			if (object1 instanceof Comparable && object2 instanceof Comparable) {
				returnValue = ((Comparable) object1).compareTo(object2);
			} else if (object1 != null && object2 != null) {
				returnValue = compareStrings(object1.toString(), object2.toString());
			} else if (object1 == null && object2 != null) {
				returnValue = 1;
			} else if (object1 != null && object2 == null) {
				returnValue = -1;
			} else {
				returnValue = 0;
			}

			return returnValue;
		}

		private int compareStrings(String string1, String string2) {
			return string1.compareTo(string2);
		}

	}

	public static class copyOfaction_udStruct implements routines.system.IPersistableRow<copyOfaction_udStruct> {
		final static byte[] commonByteArrayLock_WIPO_PROJECTS_E1a_Marc_Userdoc_a_interm = new byte[0];
		static byte[] commonByteArray_WIPO_PROJECTS_E1a_Marc_Userdoc_a_interm = new byte[0];
		protected static final int DEFAULT_HASHCODE = 1;
		protected static final int PRIME = 31;
		protected int hashCode = DEFAULT_HASHCODE;
		public boolean hashCodeDirty = true;

		public String loopKey;

		public String USERDOC_SEQ;

		public String getUSERDOC_SEQ() {
			return this.USERDOC_SEQ;
		}

		public BigDecimal USERDOC_SERIES;

		public BigDecimal getUSERDOC_SERIES() {
			return this.USERDOC_SERIES;
		}

		public BigDecimal USERDOC_NBR;

		public BigDecimal getUSERDOC_NBR() {
			return this.USERDOC_NBR;
		}

		public String PROCESS_FILE_SEQ;

		public String getPROCESS_FILE_SEQ() {
			return this.PROCESS_FILE_SEQ;
		}

		public String PROCESS_FILE_TYPE;

		public String getPROCESS_FILE_TYPE() {
			return this.PROCESS_FILE_TYPE;
		}

		public BigDecimal PROCESS_FILE_SERIES;

		public BigDecimal getPROCESS_FILE_SERIES() {
			return this.PROCESS_FILE_SERIES;
		}

		public BigDecimal PROCESS_FILE_NBR;

		public BigDecimal getPROCESS_FILE_NBR() {
			return this.PROCESS_FILE_NBR;
		}

		public String ACTION_TYPE;

		public String getACTION_TYPE() {
			return this.ACTION_TYPE;
		}

		public java.util.Date ACTION_DATE;

		public java.util.Date getACTION_DATE() {
			return this.ACTION_DATE;
		}

		public java.util.Date MANUAL_DUE_DATE;

		public java.util.Date getMANUAL_DUE_DATE() {
			return this.MANUAL_DUE_DATE;
		}

		public BigDecimal RESPONSIBLE_USER;

		public BigDecimal getRESPONSIBLE_USER() {
			return this.RESPONSIBLE_USER;
		}

		public String ACTION_NOTES1;

		public String getACTION_NOTES1() {
			return this.ACTION_NOTES1;
		}

		public String ACTION_NOTES2;

		public String getACTION_NOTES2() {
			return this.ACTION_NOTES2;
		}

		public String ACTION_NOTES3;

		public String getACTION_NOTES3() {
			return this.ACTION_NOTES3;
		}

		public String ACTION_NOTES4;

		public String getACTION_NOTES4() {
			return this.ACTION_NOTES4;
		}

		public String ACTION_NOTES5;

		public String getACTION_NOTES5() {
			return this.ACTION_NOTES5;
		}

		public String GENERAL_NOTES;

		public String getGENERAL_NOTES() {
			return this.GENERAL_NOTES;
		}

		public String SELECTED_OPTIONS_TEXT;

		public String getSELECTED_OPTIONS_TEXT() {
			return this.SELECTED_OPTIONS_TEXT;
		}

		public BigDecimal ACTION_USER;

		public BigDecimal getACTION_USER() {
			return this.ACTION_USER;
		}

		public String ACTION_CATEGORY;

		public String getACTION_CATEGORY() {
			return this.ACTION_CATEGORY;
		}

		public String SPECIAL_FINAL_STATUS;

		public String getSPECIAL_FINAL_STATUS() {
			return this.SPECIAL_FINAL_STATUS;
		}

		public String JOURNAL_CODE;

		public String getJOURNAL_CODE() {
			return this.JOURNAL_CODE;
		}

		public java.util.Date PUBLICATION_DATE;

		public java.util.Date getPUBLICATION_DATE() {
			return this.PUBLICATION_DATE;
		}

		public String IPAS_PROC_TYP;

		public String getIPAS_PROC_TYP() {
			return this.IPAS_PROC_TYP;
		}

		public BigDecimal IPAS_PROC_NBR;

		public BigDecimal getIPAS_PROC_NBR() {
			return this.IPAS_PROC_NBR;
		}

		public BigDecimal IPAS_ACTION_NBR;

		public BigDecimal getIPAS_ACTION_NBR() {
			return this.IPAS_ACTION_NBR;
		}

		@Override
		public int hashCode() {
			if (this.hashCodeDirty) {
				final int prime = PRIME;
				int result = DEFAULT_HASHCODE;

				result = prime * result + ((this.USERDOC_SEQ == null) ? 0 : this.USERDOC_SEQ.hashCode());

				result = prime * result + ((this.USERDOC_SERIES == null) ? 0 : this.USERDOC_SERIES.hashCode());

				result = prime * result + ((this.USERDOC_NBR == null) ? 0 : this.USERDOC_NBR.hashCode());

				result = prime * result + ((this.ACTION_TYPE == null) ? 0 : this.ACTION_TYPE.hashCode());

				result = prime * result + ((this.ACTION_DATE == null) ? 0 : this.ACTION_DATE.hashCode());

				this.hashCode = result;
				this.hashCodeDirty = false;
			}
			return this.hashCode;
		}

		@Override
		public boolean equals(Object obj) {
			if (this == obj)
				return true;
			if (obj == null)
				return false;
			if (getClass() != obj.getClass())
				return false;
			final copyOfaction_udStruct other = (copyOfaction_udStruct) obj;

			if (this.USERDOC_SEQ == null) {
				if (other.USERDOC_SEQ != null)
					return false;

			} else if (!this.USERDOC_SEQ.equals(other.USERDOC_SEQ))

				return false;

			if (this.USERDOC_SERIES == null) {
				if (other.USERDOC_SERIES != null)
					return false;

			} else if (!this.USERDOC_SERIES.equals(other.USERDOC_SERIES))

				return false;

			if (this.USERDOC_NBR == null) {
				if (other.USERDOC_NBR != null)
					return false;

			} else if (!this.USERDOC_NBR.equals(other.USERDOC_NBR))

				return false;

			if (this.ACTION_TYPE == null) {
				if (other.ACTION_TYPE != null)
					return false;

			} else if (!this.ACTION_TYPE.equals(other.ACTION_TYPE))

				return false;

			if (this.ACTION_DATE == null) {
				if (other.ACTION_DATE != null)
					return false;

			} else if (!this.ACTION_DATE.equals(other.ACTION_DATE))

				return false;

			return true;
		}

		public void copyDataTo(copyOfaction_udStruct other) {

			other.USERDOC_SEQ = this.USERDOC_SEQ;
			other.USERDOC_SERIES = this.USERDOC_SERIES;
			other.USERDOC_NBR = this.USERDOC_NBR;
			other.PROCESS_FILE_SEQ = this.PROCESS_FILE_SEQ;
			other.PROCESS_FILE_TYPE = this.PROCESS_FILE_TYPE;
			other.PROCESS_FILE_SERIES = this.PROCESS_FILE_SERIES;
			other.PROCESS_FILE_NBR = this.PROCESS_FILE_NBR;
			other.ACTION_TYPE = this.ACTION_TYPE;
			other.ACTION_DATE = this.ACTION_DATE;
			other.MANUAL_DUE_DATE = this.MANUAL_DUE_DATE;
			other.RESPONSIBLE_USER = this.RESPONSIBLE_USER;
			other.ACTION_NOTES1 = this.ACTION_NOTES1;
			other.ACTION_NOTES2 = this.ACTION_NOTES2;
			other.ACTION_NOTES3 = this.ACTION_NOTES3;
			other.ACTION_NOTES4 = this.ACTION_NOTES4;
			other.ACTION_NOTES5 = this.ACTION_NOTES5;
			other.GENERAL_NOTES = this.GENERAL_NOTES;
			other.SELECTED_OPTIONS_TEXT = this.SELECTED_OPTIONS_TEXT;
			other.ACTION_USER = this.ACTION_USER;
			other.ACTION_CATEGORY = this.ACTION_CATEGORY;
			other.SPECIAL_FINAL_STATUS = this.SPECIAL_FINAL_STATUS;
			other.JOURNAL_CODE = this.JOURNAL_CODE;
			other.PUBLICATION_DATE = this.PUBLICATION_DATE;
			other.IPAS_PROC_TYP = this.IPAS_PROC_TYP;
			other.IPAS_PROC_NBR = this.IPAS_PROC_NBR;
			other.IPAS_ACTION_NBR = this.IPAS_ACTION_NBR;

		}

		public void copyKeysDataTo(copyOfaction_udStruct other) {

			other.USERDOC_SEQ = this.USERDOC_SEQ;
			other.USERDOC_SERIES = this.USERDOC_SERIES;
			other.USERDOC_NBR = this.USERDOC_NBR;
			other.ACTION_TYPE = this.ACTION_TYPE;
			other.ACTION_DATE = this.ACTION_DATE;

		}

		private String readString(ObjectInputStream dis) throws IOException {
			String strReturn = null;
			int length = 0;
			length = dis.readInt();
			if (length == -1) {
				strReturn = null;
			} else {
				if (length > commonByteArray_WIPO_PROJECTS_E1a_Marc_Userdoc_a_interm.length) {
					if (length < 1024 && commonByteArray_WIPO_PROJECTS_E1a_Marc_Userdoc_a_interm.length == 0) {
						commonByteArray_WIPO_PROJECTS_E1a_Marc_Userdoc_a_interm = new byte[1024];
					} else {
						commonByteArray_WIPO_PROJECTS_E1a_Marc_Userdoc_a_interm = new byte[2 * length];
					}
				}
				dis.readFully(commonByteArray_WIPO_PROJECTS_E1a_Marc_Userdoc_a_interm, 0, length);
				strReturn = new String(commonByteArray_WIPO_PROJECTS_E1a_Marc_Userdoc_a_interm, 0, length, utf8Charset);
			}
			return strReturn;
		}

		private void writeString(String str, ObjectOutputStream dos) throws IOException {
			if (str == null) {
				dos.writeInt(-1);
			} else {
				byte[] byteArray = str.getBytes(utf8Charset);
				dos.writeInt(byteArray.length);
				dos.write(byteArray);
			}
		}

		private java.util.Date readDate(ObjectInputStream dis) throws IOException {
			java.util.Date dateReturn = null;
			int length = 0;
			length = dis.readByte();
			if (length == -1) {
				dateReturn = null;
			} else {
				dateReturn = new Date(dis.readLong());
			}
			return dateReturn;
		}

		private void writeDate(java.util.Date date1, ObjectOutputStream dos) throws IOException {
			if (date1 == null) {
				dos.writeByte(-1);
			} else {
				dos.writeByte(0);
				dos.writeLong(date1.getTime());
			}
		}

		public void readData(ObjectInputStream dis) {

			synchronized (commonByteArrayLock_WIPO_PROJECTS_E1a_Marc_Userdoc_a_interm) {

				try {

					int length = 0;

					this.USERDOC_SEQ = readString(dis);

					this.USERDOC_SERIES = (BigDecimal) dis.readObject();

					this.USERDOC_NBR = (BigDecimal) dis.readObject();

					this.PROCESS_FILE_SEQ = readString(dis);

					this.PROCESS_FILE_TYPE = readString(dis);

					this.PROCESS_FILE_SERIES = (BigDecimal) dis.readObject();

					this.PROCESS_FILE_NBR = (BigDecimal) dis.readObject();

					this.ACTION_TYPE = readString(dis);

					this.ACTION_DATE = readDate(dis);

					this.MANUAL_DUE_DATE = readDate(dis);

					this.RESPONSIBLE_USER = (BigDecimal) dis.readObject();

					this.ACTION_NOTES1 = readString(dis);

					this.ACTION_NOTES2 = readString(dis);

					this.ACTION_NOTES3 = readString(dis);

					this.ACTION_NOTES4 = readString(dis);

					this.ACTION_NOTES5 = readString(dis);

					this.GENERAL_NOTES = readString(dis);

					this.SELECTED_OPTIONS_TEXT = readString(dis);

					this.ACTION_USER = (BigDecimal) dis.readObject();

					this.ACTION_CATEGORY = readString(dis);

					this.SPECIAL_FINAL_STATUS = readString(dis);

					this.JOURNAL_CODE = readString(dis);

					this.PUBLICATION_DATE = readDate(dis);

					this.IPAS_PROC_TYP = readString(dis);

					this.IPAS_PROC_NBR = (BigDecimal) dis.readObject();

					this.IPAS_ACTION_NBR = (BigDecimal) dis.readObject();

				} catch (IOException e) {
					throw new RuntimeException(e);

				} catch (ClassNotFoundException eCNFE) {
					throw new RuntimeException(eCNFE);

				}

			}

		}

		public void writeData(ObjectOutputStream dos) {
			try {

				// String

				writeString(this.USERDOC_SEQ, dos);

				// BigDecimal

				dos.writeObject(this.USERDOC_SERIES);

				// BigDecimal

				dos.writeObject(this.USERDOC_NBR);

				// String

				writeString(this.PROCESS_FILE_SEQ, dos);

				// String

				writeString(this.PROCESS_FILE_TYPE, dos);

				// BigDecimal

				dos.writeObject(this.PROCESS_FILE_SERIES);

				// BigDecimal

				dos.writeObject(this.PROCESS_FILE_NBR);

				// String

				writeString(this.ACTION_TYPE, dos);

				// java.util.Date

				writeDate(this.ACTION_DATE, dos);

				// java.util.Date

				writeDate(this.MANUAL_DUE_DATE, dos);

				// BigDecimal

				dos.writeObject(this.RESPONSIBLE_USER);

				// String

				writeString(this.ACTION_NOTES1, dos);

				// String

				writeString(this.ACTION_NOTES2, dos);

				// String

				writeString(this.ACTION_NOTES3, dos);

				// String

				writeString(this.ACTION_NOTES4, dos);

				// String

				writeString(this.ACTION_NOTES5, dos);

				// String

				writeString(this.GENERAL_NOTES, dos);

				// String

				writeString(this.SELECTED_OPTIONS_TEXT, dos);

				// BigDecimal

				dos.writeObject(this.ACTION_USER);

				// String

				writeString(this.ACTION_CATEGORY, dos);

				// String

				writeString(this.SPECIAL_FINAL_STATUS, dos);

				// String

				writeString(this.JOURNAL_CODE, dos);

				// java.util.Date

				writeDate(this.PUBLICATION_DATE, dos);

				// String

				writeString(this.IPAS_PROC_TYP, dos);

				// BigDecimal

				dos.writeObject(this.IPAS_PROC_NBR);

				// BigDecimal

				dos.writeObject(this.IPAS_ACTION_NBR);

			} catch (IOException e) {
				throw new RuntimeException(e);
			}

		}

		public String toString() {

			StringBuilder sb = new StringBuilder();
			sb.append(super.toString());
			sb.append("[");
			sb.append("USERDOC_SEQ=" + USERDOC_SEQ);
			sb.append(",USERDOC_SERIES=" + String.valueOf(USERDOC_SERIES));
			sb.append(",USERDOC_NBR=" + String.valueOf(USERDOC_NBR));
			sb.append(",PROCESS_FILE_SEQ=" + PROCESS_FILE_SEQ);
			sb.append(",PROCESS_FILE_TYPE=" + PROCESS_FILE_TYPE);
			sb.append(",PROCESS_FILE_SERIES=" + String.valueOf(PROCESS_FILE_SERIES));
			sb.append(",PROCESS_FILE_NBR=" + String.valueOf(PROCESS_FILE_NBR));
			sb.append(",ACTION_TYPE=" + ACTION_TYPE);
			sb.append(",ACTION_DATE=" + String.valueOf(ACTION_DATE));
			sb.append(",MANUAL_DUE_DATE=" + String.valueOf(MANUAL_DUE_DATE));
			sb.append(",RESPONSIBLE_USER=" + String.valueOf(RESPONSIBLE_USER));
			sb.append(",ACTION_NOTES1=" + ACTION_NOTES1);
			sb.append(",ACTION_NOTES2=" + ACTION_NOTES2);
			sb.append(",ACTION_NOTES3=" + ACTION_NOTES3);
			sb.append(",ACTION_NOTES4=" + ACTION_NOTES4);
			sb.append(",ACTION_NOTES5=" + ACTION_NOTES5);
			sb.append(",GENERAL_NOTES=" + GENERAL_NOTES);
			sb.append(",SELECTED_OPTIONS_TEXT=" + SELECTED_OPTIONS_TEXT);
			sb.append(",ACTION_USER=" + String.valueOf(ACTION_USER));
			sb.append(",ACTION_CATEGORY=" + ACTION_CATEGORY);
			sb.append(",SPECIAL_FINAL_STATUS=" + SPECIAL_FINAL_STATUS);
			sb.append(",JOURNAL_CODE=" + JOURNAL_CODE);
			sb.append(",PUBLICATION_DATE=" + String.valueOf(PUBLICATION_DATE));
			sb.append(",IPAS_PROC_TYP=" + IPAS_PROC_TYP);
			sb.append(",IPAS_PROC_NBR=" + String.valueOf(IPAS_PROC_NBR));
			sb.append(",IPAS_ACTION_NBR=" + String.valueOf(IPAS_ACTION_NBR));
			sb.append("]");

			return sb.toString();
		}

		/**
		 * Compare keys
		 */
		public int compareTo(copyOfaction_udStruct other) {

			int returnValue = -1;

			returnValue = checkNullsAndCompare(this.USERDOC_SEQ, other.USERDOC_SEQ);
			if (returnValue != 0) {
				return returnValue;
			}

			returnValue = checkNullsAndCompare(this.USERDOC_SERIES, other.USERDOC_SERIES);
			if (returnValue != 0) {
				return returnValue;
			}

			returnValue = checkNullsAndCompare(this.USERDOC_NBR, other.USERDOC_NBR);
			if (returnValue != 0) {
				return returnValue;
			}

			returnValue = checkNullsAndCompare(this.ACTION_TYPE, other.ACTION_TYPE);
			if (returnValue != 0) {
				return returnValue;
			}

			returnValue = checkNullsAndCompare(this.ACTION_DATE, other.ACTION_DATE);
			if (returnValue != 0) {
				return returnValue;
			}

			return returnValue;
		}

		private int checkNullsAndCompare(Object object1, Object object2) {
			int returnValue = 0;
			if (object1 instanceof Comparable && object2 instanceof Comparable) {
				returnValue = ((Comparable) object1).compareTo(object2);
			} else if (object1 != null && object2 != null) {
				returnValue = compareStrings(object1.toString(), object2.toString());
			} else if (object1 == null && object2 != null) {
				returnValue = 1;
			} else if (object1 != null && object2 == null) {
				returnValue = -1;
			} else {
				returnValue = 0;
			}

			return returnValue;
		}

		private int compareStrings(String string1, String string2) {
			return string1.compareTo(string2);
		}

	}

	public static class row3Struct implements routines.system.IPersistableRow<row3Struct> {
		final static byte[] commonByteArrayLock_WIPO_PROJECTS_E1a_Marc_Userdoc_a_interm = new byte[0];
		static byte[] commonByteArray_WIPO_PROJECTS_E1a_Marc_Userdoc_a_interm = new byte[0];

		public int sec_documento;

		public int getSec_documento() {
			return this.sec_documento;
		}

		public String tip_documento;

		public String getTip_documento() {
			return this.tip_documento;
		}

		public Long num_acta_documento;

		public Long getNum_acta_documento() {
			return this.num_acta_documento;
		}

		public Long num_acta;

		public Long getNum_acta() {
			return this.num_acta;
		}

		public Long num_registro;

		public Long getNum_registro() {
			return this.num_registro;
		}

		public java.util.Date fec_documento;

		public java.util.Date getFec_documento() {
			return this.fec_documento;
		}

		public String obs_documento;

		public String getObs_documento() {
			return this.obs_documento;
		}

		public String nom_solicitante;

		public String getNom_solicitante() {
			return this.nom_solicitante;
		}

		public String cod_pais;

		public String getCod_pais() {
			return this.cod_pais;
		}

		public Short num_agente;

		public Short getNum_agente() {
			return this.num_agente;
		}

		public java.util.Date fec_ingreso;

		public java.util.Date getFec_ingreso() {
			return this.fec_ingreso;
		}

		public Short tip_tramite;

		public Short getTip_tramite() {
			return this.tip_tramite;
		}

		public String cod_status;

		public String getCod_status() {
			return this.cod_status;
		}

		public java.util.Date fec_status;

		public java.util.Date getFec_status() {
			return this.fec_status;
		}

		public Integer num_registro_poder;

		public Integer getNum_registro_poder() {
			return this.num_registro_poder;
		}

		public Short num_agente_old;

		public Short getNum_agente_old() {
			return this.num_agente_old;
		}

		public Long cobro_caja;

		public Long getCobro_caja() {
			return this.cobro_caja;
		}

		public String ref_pago;

		public String getRef_pago() {
			return this.ref_pago;
		}

		private String readString(ObjectInputStream dis) throws IOException {
			String strReturn = null;
			int length = 0;
			length = dis.readInt();
			if (length == -1) {
				strReturn = null;
			} else {
				if (length > commonByteArray_WIPO_PROJECTS_E1a_Marc_Userdoc_a_interm.length) {
					if (length < 1024 && commonByteArray_WIPO_PROJECTS_E1a_Marc_Userdoc_a_interm.length == 0) {
						commonByteArray_WIPO_PROJECTS_E1a_Marc_Userdoc_a_interm = new byte[1024];
					} else {
						commonByteArray_WIPO_PROJECTS_E1a_Marc_Userdoc_a_interm = new byte[2 * length];
					}
				}
				dis.readFully(commonByteArray_WIPO_PROJECTS_E1a_Marc_Userdoc_a_interm, 0, length);
				strReturn = new String(commonByteArray_WIPO_PROJECTS_E1a_Marc_Userdoc_a_interm, 0, length, utf8Charset);
			}
			return strReturn;
		}

		private void writeString(String str, ObjectOutputStream dos) throws IOException {
			if (str == null) {
				dos.writeInt(-1);
			} else {
				byte[] byteArray = str.getBytes(utf8Charset);
				dos.writeInt(byteArray.length);
				dos.write(byteArray);
			}
		}

		private java.util.Date readDate(ObjectInputStream dis) throws IOException {
			java.util.Date dateReturn = null;
			int length = 0;
			length = dis.readByte();
			if (length == -1) {
				dateReturn = null;
			} else {
				dateReturn = new Date(dis.readLong());
			}
			return dateReturn;
		}

		private void writeDate(java.util.Date date1, ObjectOutputStream dos) throws IOException {
			if (date1 == null) {
				dos.writeByte(-1);
			} else {
				dos.writeByte(0);
				dos.writeLong(date1.getTime());
			}
		}

		private Integer readInteger(ObjectInputStream dis) throws IOException {
			Integer intReturn;
			int length = 0;
			length = dis.readByte();
			if (length == -1) {
				intReturn = null;
			} else {
				intReturn = dis.readInt();
			}
			return intReturn;
		}

		private void writeInteger(Integer intNum, ObjectOutputStream dos) throws IOException {
			if (intNum == null) {
				dos.writeByte(-1);
			} else {
				dos.writeByte(0);
				dos.writeInt(intNum);
			}
		}

		public void readData(ObjectInputStream dis) {

			synchronized (commonByteArrayLock_WIPO_PROJECTS_E1a_Marc_Userdoc_a_interm) {

				try {

					int length = 0;

					this.sec_documento = dis.readInt();

					this.tip_documento = readString(dis);

					length = dis.readByte();
					if (length == -1) {
						this.num_acta_documento = null;
					} else {
						this.num_acta_documento = dis.readLong();
					}

					length = dis.readByte();
					if (length == -1) {
						this.num_acta = null;
					} else {
						this.num_acta = dis.readLong();
					}

					length = dis.readByte();
					if (length == -1) {
						this.num_registro = null;
					} else {
						this.num_registro = dis.readLong();
					}

					this.fec_documento = readDate(dis);

					this.obs_documento = readString(dis);

					this.nom_solicitante = readString(dis);

					this.cod_pais = readString(dis);

					length = dis.readByte();
					if (length == -1) {
						this.num_agente = null;
					} else {
						this.num_agente = dis.readShort();
					}

					this.fec_ingreso = readDate(dis);

					length = dis.readByte();
					if (length == -1) {
						this.tip_tramite = null;
					} else {
						this.tip_tramite = dis.readShort();
					}

					this.cod_status = readString(dis);

					this.fec_status = readDate(dis);

					this.num_registro_poder = readInteger(dis);

					length = dis.readByte();
					if (length == -1) {
						this.num_agente_old = null;
					} else {
						this.num_agente_old = dis.readShort();
					}

					length = dis.readByte();
					if (length == -1) {
						this.cobro_caja = null;
					} else {
						this.cobro_caja = dis.readLong();
					}

					this.ref_pago = readString(dis);

				} catch (IOException e) {
					throw new RuntimeException(e);

				}

			}

		}

		public void writeData(ObjectOutputStream dos) {
			try {

				// int

				dos.writeInt(this.sec_documento);

				// String

				writeString(this.tip_documento, dos);

				// Long

				if (this.num_acta_documento == null) {
					dos.writeByte(-1);
				} else {
					dos.writeByte(0);
					dos.writeLong(this.num_acta_documento);
				}

				// Long

				if (this.num_acta == null) {
					dos.writeByte(-1);
				} else {
					dos.writeByte(0);
					dos.writeLong(this.num_acta);
				}

				// Long

				if (this.num_registro == null) {
					dos.writeByte(-1);
				} else {
					dos.writeByte(0);
					dos.writeLong(this.num_registro);
				}

				// java.util.Date

				writeDate(this.fec_documento, dos);

				// String

				writeString(this.obs_documento, dos);

				// String

				writeString(this.nom_solicitante, dos);

				// String

				writeString(this.cod_pais, dos);

				// Short

				if (this.num_agente == null) {
					dos.writeByte(-1);
				} else {
					dos.writeByte(0);
					dos.writeShort(this.num_agente);
				}

				// java.util.Date

				writeDate(this.fec_ingreso, dos);

				// Short

				if (this.tip_tramite == null) {
					dos.writeByte(-1);
				} else {
					dos.writeByte(0);
					dos.writeShort(this.tip_tramite);
				}

				// String

				writeString(this.cod_status, dos);

				// java.util.Date

				writeDate(this.fec_status, dos);

				// Integer

				writeInteger(this.num_registro_poder, dos);

				// Short

				if (this.num_agente_old == null) {
					dos.writeByte(-1);
				} else {
					dos.writeByte(0);
					dos.writeShort(this.num_agente_old);
				}

				// Long

				if (this.cobro_caja == null) {
					dos.writeByte(-1);
				} else {
					dos.writeByte(0);
					dos.writeLong(this.cobro_caja);
				}

				// String

				writeString(this.ref_pago, dos);

			} catch (IOException e) {
				throw new RuntimeException(e);
			}

		}

		public String toString() {

			StringBuilder sb = new StringBuilder();
			sb.append(super.toString());
			sb.append("[");
			sb.append("sec_documento=" + String.valueOf(sec_documento));
			sb.append(",tip_documento=" + tip_documento);
			sb.append(",num_acta_documento=" + String.valueOf(num_acta_documento));
			sb.append(",num_acta=" + String.valueOf(num_acta));
			sb.append(",num_registro=" + String.valueOf(num_registro));
			sb.append(",fec_documento=" + String.valueOf(fec_documento));
			sb.append(",obs_documento=" + obs_documento);
			sb.append(",nom_solicitante=" + nom_solicitante);
			sb.append(",cod_pais=" + cod_pais);
			sb.append(",num_agente=" + String.valueOf(num_agente));
			sb.append(",fec_ingreso=" + String.valueOf(fec_ingreso));
			sb.append(",tip_tramite=" + String.valueOf(tip_tramite));
			sb.append(",cod_status=" + cod_status);
			sb.append(",fec_status=" + String.valueOf(fec_status));
			sb.append(",num_registro_poder=" + String.valueOf(num_registro_poder));
			sb.append(",num_agente_old=" + String.valueOf(num_agente_old));
			sb.append(",cobro_caja=" + String.valueOf(cobro_caja));
			sb.append(",ref_pago=" + ref_pago);
			sb.append("]");

			return sb.toString();
		}

		/**
		 * Compare keys
		 */
		public int compareTo(row3Struct other) {

			int returnValue = -1;

			return returnValue;
		}

		private int checkNullsAndCompare(Object object1, Object object2) {
			int returnValue = 0;
			if (object1 instanceof Comparable && object2 instanceof Comparable) {
				returnValue = ((Comparable) object1).compareTo(object2);
			} else if (object1 != null && object2 != null) {
				returnValue = compareStrings(object1.toString(), object2.toString());
			} else if (object1 == null && object2 != null) {
				returnValue = 1;
			} else if (object1 != null && object2 == null) {
				returnValue = -1;
			} else {
				returnValue = 0;
			}

			return returnValue;
		}

		private int compareStrings(String string1, String string2) {
			return string1.compareTo(string2);
		}

	}

	public static class after_tDBInput_11Struct implements routines.system.IPersistableRow<after_tDBInput_11Struct> {
		final static byte[] commonByteArrayLock_WIPO_PROJECTS_E1a_Marc_Userdoc_a_interm = new byte[0];
		static byte[] commonByteArray_WIPO_PROJECTS_E1a_Marc_Userdoc_a_interm = new byte[0];

		public int sec_documento;

		public int getSec_documento() {
			return this.sec_documento;
		}

		public String tip_documento;

		public String getTip_documento() {
			return this.tip_documento;
		}

		public Long num_acta_documento;

		public Long getNum_acta_documento() {
			return this.num_acta_documento;
		}

		public Long num_acta;

		public Long getNum_acta() {
			return this.num_acta;
		}

		public Long num_registro;

		public Long getNum_registro() {
			return this.num_registro;
		}

		public java.util.Date fec_documento;

		public java.util.Date getFec_documento() {
			return this.fec_documento;
		}

		public String obs_documento;

		public String getObs_documento() {
			return this.obs_documento;
		}

		public String nom_solicitante;

		public String getNom_solicitante() {
			return this.nom_solicitante;
		}

		public String cod_pais;

		public String getCod_pais() {
			return this.cod_pais;
		}

		public Short num_agente;

		public Short getNum_agente() {
			return this.num_agente;
		}

		public java.util.Date fec_ingreso;

		public java.util.Date getFec_ingreso() {
			return this.fec_ingreso;
		}

		public Short tip_tramite;

		public Short getTip_tramite() {
			return this.tip_tramite;
		}

		public String cod_status;

		public String getCod_status() {
			return this.cod_status;
		}

		public java.util.Date fec_status;

		public java.util.Date getFec_status() {
			return this.fec_status;
		}

		public Integer num_registro_poder;

		public Integer getNum_registro_poder() {
			return this.num_registro_poder;
		}

		public Short num_agente_old;

		public Short getNum_agente_old() {
			return this.num_agente_old;
		}

		public Long cobro_caja;

		public Long getCobro_caja() {
			return this.cobro_caja;
		}

		public String ref_pago;

		public String getRef_pago() {
			return this.ref_pago;
		}

		private String readString(ObjectInputStream dis) throws IOException {
			String strReturn = null;
			int length = 0;
			length = dis.readInt();
			if (length == -1) {
				strReturn = null;
			} else {
				if (length > commonByteArray_WIPO_PROJECTS_E1a_Marc_Userdoc_a_interm.length) {
					if (length < 1024 && commonByteArray_WIPO_PROJECTS_E1a_Marc_Userdoc_a_interm.length == 0) {
						commonByteArray_WIPO_PROJECTS_E1a_Marc_Userdoc_a_interm = new byte[1024];
					} else {
						commonByteArray_WIPO_PROJECTS_E1a_Marc_Userdoc_a_interm = new byte[2 * length];
					}
				}
				dis.readFully(commonByteArray_WIPO_PROJECTS_E1a_Marc_Userdoc_a_interm, 0, length);
				strReturn = new String(commonByteArray_WIPO_PROJECTS_E1a_Marc_Userdoc_a_interm, 0, length, utf8Charset);
			}
			return strReturn;
		}

		private void writeString(String str, ObjectOutputStream dos) throws IOException {
			if (str == null) {
				dos.writeInt(-1);
			} else {
				byte[] byteArray = str.getBytes(utf8Charset);
				dos.writeInt(byteArray.length);
				dos.write(byteArray);
			}
		}

		private java.util.Date readDate(ObjectInputStream dis) throws IOException {
			java.util.Date dateReturn = null;
			int length = 0;
			length = dis.readByte();
			if (length == -1) {
				dateReturn = null;
			} else {
				dateReturn = new Date(dis.readLong());
			}
			return dateReturn;
		}

		private void writeDate(java.util.Date date1, ObjectOutputStream dos) throws IOException {
			if (date1 == null) {
				dos.writeByte(-1);
			} else {
				dos.writeByte(0);
				dos.writeLong(date1.getTime());
			}
		}

		private Integer readInteger(ObjectInputStream dis) throws IOException {
			Integer intReturn;
			int length = 0;
			length = dis.readByte();
			if (length == -1) {
				intReturn = null;
			} else {
				intReturn = dis.readInt();
			}
			return intReturn;
		}

		private void writeInteger(Integer intNum, ObjectOutputStream dos) throws IOException {
			if (intNum == null) {
				dos.writeByte(-1);
			} else {
				dos.writeByte(0);
				dos.writeInt(intNum);
			}
		}

		public void readData(ObjectInputStream dis) {

			synchronized (commonByteArrayLock_WIPO_PROJECTS_E1a_Marc_Userdoc_a_interm) {

				try {

					int length = 0;

					this.sec_documento = dis.readInt();

					this.tip_documento = readString(dis);

					length = dis.readByte();
					if (length == -1) {
						this.num_acta_documento = null;
					} else {
						this.num_acta_documento = dis.readLong();
					}

					length = dis.readByte();
					if (length == -1) {
						this.num_acta = null;
					} else {
						this.num_acta = dis.readLong();
					}

					length = dis.readByte();
					if (length == -1) {
						this.num_registro = null;
					} else {
						this.num_registro = dis.readLong();
					}

					this.fec_documento = readDate(dis);

					this.obs_documento = readString(dis);

					this.nom_solicitante = readString(dis);

					this.cod_pais = readString(dis);

					length = dis.readByte();
					if (length == -1) {
						this.num_agente = null;
					} else {
						this.num_agente = dis.readShort();
					}

					this.fec_ingreso = readDate(dis);

					length = dis.readByte();
					if (length == -1) {
						this.tip_tramite = null;
					} else {
						this.tip_tramite = dis.readShort();
					}

					this.cod_status = readString(dis);

					this.fec_status = readDate(dis);

					this.num_registro_poder = readInteger(dis);

					length = dis.readByte();
					if (length == -1) {
						this.num_agente_old = null;
					} else {
						this.num_agente_old = dis.readShort();
					}

					length = dis.readByte();
					if (length == -1) {
						this.cobro_caja = null;
					} else {
						this.cobro_caja = dis.readLong();
					}

					this.ref_pago = readString(dis);

				} catch (IOException e) {
					throw new RuntimeException(e);

				}

			}

		}

		public void writeData(ObjectOutputStream dos) {
			try {

				// int

				dos.writeInt(this.sec_documento);

				// String

				writeString(this.tip_documento, dos);

				// Long

				if (this.num_acta_documento == null) {
					dos.writeByte(-1);
				} else {
					dos.writeByte(0);
					dos.writeLong(this.num_acta_documento);
				}

				// Long

				if (this.num_acta == null) {
					dos.writeByte(-1);
				} else {
					dos.writeByte(0);
					dos.writeLong(this.num_acta);
				}

				// Long

				if (this.num_registro == null) {
					dos.writeByte(-1);
				} else {
					dos.writeByte(0);
					dos.writeLong(this.num_registro);
				}

				// java.util.Date

				writeDate(this.fec_documento, dos);

				// String

				writeString(this.obs_documento, dos);

				// String

				writeString(this.nom_solicitante, dos);

				// String

				writeString(this.cod_pais, dos);

				// Short

				if (this.num_agente == null) {
					dos.writeByte(-1);
				} else {
					dos.writeByte(0);
					dos.writeShort(this.num_agente);
				}

				// java.util.Date

				writeDate(this.fec_ingreso, dos);

				// Short

				if (this.tip_tramite == null) {
					dos.writeByte(-1);
				} else {
					dos.writeByte(0);
					dos.writeShort(this.tip_tramite);
				}

				// String

				writeString(this.cod_status, dos);

				// java.util.Date

				writeDate(this.fec_status, dos);

				// Integer

				writeInteger(this.num_registro_poder, dos);

				// Short

				if (this.num_agente_old == null) {
					dos.writeByte(-1);
				} else {
					dos.writeByte(0);
					dos.writeShort(this.num_agente_old);
				}

				// Long

				if (this.cobro_caja == null) {
					dos.writeByte(-1);
				} else {
					dos.writeByte(0);
					dos.writeLong(this.cobro_caja);
				}

				// String

				writeString(this.ref_pago, dos);

			} catch (IOException e) {
				throw new RuntimeException(e);
			}

		}

		public String toString() {

			StringBuilder sb = new StringBuilder();
			sb.append(super.toString());
			sb.append("[");
			sb.append("sec_documento=" + String.valueOf(sec_documento));
			sb.append(",tip_documento=" + tip_documento);
			sb.append(",num_acta_documento=" + String.valueOf(num_acta_documento));
			sb.append(",num_acta=" + String.valueOf(num_acta));
			sb.append(",num_registro=" + String.valueOf(num_registro));
			sb.append(",fec_documento=" + String.valueOf(fec_documento));
			sb.append(",obs_documento=" + obs_documento);
			sb.append(",nom_solicitante=" + nom_solicitante);
			sb.append(",cod_pais=" + cod_pais);
			sb.append(",num_agente=" + String.valueOf(num_agente));
			sb.append(",fec_ingreso=" + String.valueOf(fec_ingreso));
			sb.append(",tip_tramite=" + String.valueOf(tip_tramite));
			sb.append(",cod_status=" + cod_status);
			sb.append(",fec_status=" + String.valueOf(fec_status));
			sb.append(",num_registro_poder=" + String.valueOf(num_registro_poder));
			sb.append(",num_agente_old=" + String.valueOf(num_agente_old));
			sb.append(",cobro_caja=" + String.valueOf(cobro_caja));
			sb.append(",ref_pago=" + ref_pago);
			sb.append("]");

			return sb.toString();
		}

		/**
		 * Compare keys
		 */
		public int compareTo(after_tDBInput_11Struct other) {

			int returnValue = -1;

			return returnValue;
		}

		private int checkNullsAndCompare(Object object1, Object object2) {
			int returnValue = 0;
			if (object1 instanceof Comparable && object2 instanceof Comparable) {
				returnValue = ((Comparable) object1).compareTo(object2);
			} else if (object1 != null && object2 != null) {
				returnValue = compareStrings(object1.toString(), object2.toString());
			} else if (object1 == null && object2 != null) {
				returnValue = 1;
			} else if (object1 != null && object2 == null) {
				returnValue = -1;
			} else {
				returnValue = 0;
			}

			return returnValue;
		}

		private int compareStrings(String string1, String string2) {
			return string1.compareTo(string2);
		}

	}

	public void tDBInput_11Process(final java.util.Map<String, Object> globalMap) throws TalendException {
		globalMap.put("tDBInput_11_SUBPROCESS_STATE", 0);

		final boolean execStat = this.execStat;

		String iterateId = "";

		String currentComponent = "";
		java.util.Map<String, Object> resourceMap = new java.util.HashMap<String, Object>();

		try {
			// TDI-39566 avoid throwing an useless Exception
			boolean resumeIt = true;
			if (globalResumeTicket == false && resumeEntryMethodName != null) {
				String currentMethodName = new java.lang.Exception().getStackTrace()[0].getMethodName();
				resumeIt = resumeEntryMethodName.equals(currentMethodName);
			}
			if (resumeIt || globalResumeTicket) { // start the resume
				globalResumeTicket = true;

				tDBInput_9Process(globalMap);

				row3Struct row3 = new row3Struct();
				copyOfaction_udStruct copyOfaction_ud = new copyOfaction_udStruct();
				row16Struct row16 = new row16Struct();

				/**
				 * [tLogRow_3 begin ] start
				 */

				ok_Hash.put("tLogRow_3", false);
				start_Hash.put("tLogRow_3", System.currentTimeMillis());

				currentComponent = "tLogRow_3";

				if (execStat) {
					runStat.updateStatOnConnection(resourceMap, iterateId, 0, 0, "row16");
				}

				int tos_count_tLogRow_3 = 0;

				///////////////////////

				final String OUTPUT_FIELD_SEPARATOR_tLogRow_3 = "|";
				java.io.PrintStream consoleOut_tLogRow_3 = null;

				StringBuilder strBuffer_tLogRow_3 = null;
				int nb_line_tLogRow_3 = 0;
///////////////////////    			

				/**
				 * [tLogRow_3 begin ] stop
				 */

				/**
				 * [tDBOutput_3 begin ] start
				 */

				ok_Hash.put("tDBOutput_3", false);
				start_Hash.put("tDBOutput_3", System.currentTimeMillis());

				currentComponent = "tDBOutput_3";

				if (execStat) {
					runStat.updateStatOnConnection(resourceMap, iterateId, 0, 0, "copyOfaction_ud");
				}

				int tos_count_tDBOutput_3 = 0;

				int nb_line_tDBOutput_3 = 0;
				int nb_line_update_tDBOutput_3 = 0;
				int nb_line_inserted_tDBOutput_3 = 0;
				int nb_line_deleted_tDBOutput_3 = 0;
				int nb_line_rejected_tDBOutput_3 = 0;

				int deletedCount_tDBOutput_3 = 0;
				int updatedCount_tDBOutput_3 = 0;
				int insertedCount_tDBOutput_3 = 0;
				int rejectedCount_tDBOutput_3 = 0;
				String dbschema_tDBOutput_3 = null;
				String tableName_tDBOutput_3 = null;
				boolean whetherReject_tDBOutput_3 = false;

				java.util.Calendar calendar_tDBOutput_3 = java.util.Calendar.getInstance();
				long year1_tDBOutput_3 = TalendDate.parseDate("yyyy-MM-dd", "0001-01-01").getTime();
				long year2_tDBOutput_3 = TalendDate.parseDate("yyyy-MM-dd", "1753-01-01").getTime();
				long year10000_tDBOutput_3 = TalendDate.parseDate("yyyy-MM-dd HH:mm:ss", "9999-12-31 24:00:00")
						.getTime();
				long date_tDBOutput_3;

				java.util.Calendar calendar_datetimeoffset_tDBOutput_3 = java.util.Calendar
						.getInstance(java.util.TimeZone.getTimeZone("UTC"));

				java.sql.Connection conn_tDBOutput_3 = null;
				String dbUser_tDBOutput_3 = null;
				dbschema_tDBOutput_3 = (String) globalMap.get("dbschema_tDBConnection_1");

				conn_tDBOutput_3 = (java.sql.Connection) globalMap.get("conn_tDBConnection_1");

				if (dbschema_tDBOutput_3 == null || dbschema_tDBOutput_3.trim().length() == 0) {
					tableName_tDBOutput_3 = "VW_IMPORT_USERDOC_ACTIONS";
				} else {
					tableName_tDBOutput_3 = dbschema_tDBOutput_3 + "].[" + "VW_IMPORT_USERDOC_ACTIONS";
				}
				int count_tDBOutput_3 = 0;

				String insert_tDBOutput_3 = "INSERT INTO [" + tableName_tDBOutput_3
						+ "] ([USERDOC_SEQ],[USERDOC_SERIES],[USERDOC_NBR],[PROCESS_FILE_SEQ],[PROCESS_FILE_TYPE],[PROCESS_FILE_SERIES],[PROCESS_FILE_NBR],[ACTION_TYPE],[ACTION_DATE],[MANUAL_DUE_DATE],[RESPONSIBLE_USER],[ACTION_NOTES1],[ACTION_NOTES2],[ACTION_NOTES3],[ACTION_NOTES4],[ACTION_NOTES5],[GENERAL_NOTES],[SELECTED_OPTIONS_TEXT],[ACTION_USER],[ACTION_CATEGORY],[SPECIAL_FINAL_STATUS],[JOURNAL_CODE],[PUBLICATION_DATE],[IPAS_PROC_TYP],[IPAS_PROC_NBR],[IPAS_ACTION_NBR]) VALUES (?,?,?,?,?,?,?,?,?,?,?,?,?,?,?,?,?,?,?,?,?,?,?,?,?,?)";
				java.sql.PreparedStatement pstmt_tDBOutput_3 = conn_tDBOutput_3.prepareStatement(insert_tDBOutput_3);
				resourceMap.put("pstmt_tDBOutput_3", pstmt_tDBOutput_3);

				boolean isShareIdentity_tDBOutput_3 = globalMap.get("shareIdentitySetting_tDBConnection_1") != null
						&& (Boolean) globalMap.get("shareIdentitySetting_tDBConnection_1") == true;

				/**
				 * [tDBOutput_3 begin ] stop
				 */

				/**
				 * [tMap_4 begin ] start
				 */

				ok_Hash.put("tMap_4", false);
				start_Hash.put("tMap_4", System.currentTimeMillis());

				currentComponent = "tMap_4";

				if (execStat) {
					runStat.updateStatOnConnection(resourceMap, iterateId, 0, 0, "row3");
				}

				int tos_count_tMap_4 = 0;

// ###############################
// # Lookup's keys initialization

				org.talend.designer.components.lookup.memory.AdvancedMemoryLookup<row14Struct> tHash_Lookup_row14 = (org.talend.designer.components.lookup.memory.AdvancedMemoryLookup<row14Struct>) ((org.talend.designer.components.lookup.memory.AdvancedMemoryLookup<row14Struct>) globalMap
						.get("tHash_Lookup_row14"));

				row14Struct row14HashKey = new row14Struct();
				row14Struct row14Default = new row14Struct();
// ###############################        

// ###############################
// # Vars initialization
				class Var__tMap_4__Struct {
				}
				Var__tMap_4__Struct Var__tMap_4 = new Var__tMap_4__Struct();
// ###############################

// ###############################
// # Outputs initialization
				copyOfaction_udStruct copyOfaction_ud_tmp = new copyOfaction_udStruct();
// ###############################

				/**
				 * [tMap_4 begin ] stop
				 */

				/**
				 * [tDBInput_11 begin ] start
				 */

				ok_Hash.put("tDBInput_11", false);
				start_Hash.put("tDBInput_11", System.currentTimeMillis());

				currentComponent = "tDBInput_11";

				int tos_count_tDBInput_11 = 0;

				int nb_line_tDBInput_11 = 0;
				java.sql.Connection conn_tDBInput_11 = null;
				conn_tDBInput_11 = (java.sql.Connection) globalMap.get("conn_tDBConnection_2");

				java.sql.Statement stmt_tDBInput_11 = conn_tDBInput_11.createStatement();

				String dbquery_tDBInput_11 = "SELECT \n  sec_documento, \n  tip_documento, \n  num_acta_documento, \n  num_acta, \n  num_registro, \n  fec_documento,"
						+ " \n  obs_documento, \n  nom_solicitante, \n  cod_pais, \n  num_agente, \n  fec_ingreso, \n  tip_tramite, \n  cod_status,"
						+ " \n  fec_status, \n  num_registro_poder, \n  num_agente_old, \n  cobro_caja, \n  ref_pago\nFROM documento \n\n\nwhere   "
						+ "num_acta \n\nin (select  num_acta \n\n FROM marca) and num_acta_documento is not null";

				globalMap.put("tDBInput_11_QUERY", dbquery_tDBInput_11);
				java.sql.ResultSet rs_tDBInput_11 = null;

				try {
					rs_tDBInput_11 = stmt_tDBInput_11.executeQuery(dbquery_tDBInput_11);
					java.sql.ResultSetMetaData rsmd_tDBInput_11 = rs_tDBInput_11.getMetaData();
					int colQtyInRs_tDBInput_11 = rsmd_tDBInput_11.getColumnCount();

					String tmpContent_tDBInput_11 = null;

					while (rs_tDBInput_11.next()) {
						nb_line_tDBInput_11++;

						if (colQtyInRs_tDBInput_11 < 1) {
							row3.sec_documento = 0;
						} else {

							row3.sec_documento = rs_tDBInput_11.getInt(1);
							if (rs_tDBInput_11.wasNull()) {
								throw new RuntimeException("Null value in non-Nullable column");
							}
						}
						if (colQtyInRs_tDBInput_11 < 2) {
							row3.tip_documento = null;
						} else {

							row3.tip_documento = routines.system.JDBCUtil.getString(rs_tDBInput_11, 2, false);
						}
						if (colQtyInRs_tDBInput_11 < 3) {
							row3.num_acta_documento = null;
						} else {

							row3.num_acta_documento = rs_tDBInput_11.getLong(3);
							if (rs_tDBInput_11.wasNull()) {
								row3.num_acta_documento = null;
							}
						}
						if (colQtyInRs_tDBInput_11 < 4) {
							row3.num_acta = null;
						} else {

							row3.num_acta = rs_tDBInput_11.getLong(4);
							if (rs_tDBInput_11.wasNull()) {
								row3.num_acta = null;
							}
						}
						if (colQtyInRs_tDBInput_11 < 5) {
							row3.num_registro = null;
						} else {

							row3.num_registro = rs_tDBInput_11.getLong(5);
							if (rs_tDBInput_11.wasNull()) {
								row3.num_registro = null;
							}
						}
						if (colQtyInRs_tDBInput_11 < 6) {
							row3.fec_documento = null;
						} else {

							row3.fec_documento = routines.system.JDBCUtil.getDate(rs_tDBInput_11, 6);
						}
						if (colQtyInRs_tDBInput_11 < 7) {
							row3.obs_documento = null;
						} else {

							row3.obs_documento = routines.system.JDBCUtil.getString(rs_tDBInput_11, 7, false);
						}
						if (colQtyInRs_tDBInput_11 < 8) {
							row3.nom_solicitante = null;
						} else {

							row3.nom_solicitante = routines.system.JDBCUtil.getString(rs_tDBInput_11, 8, false);
						}
						if (colQtyInRs_tDBInput_11 < 9) {
							row3.cod_pais = null;
						} else {

							row3.cod_pais = routines.system.JDBCUtil.getString(rs_tDBInput_11, 9, false);
						}
						if (colQtyInRs_tDBInput_11 < 10) {
							row3.num_agente = null;
						} else {

							row3.num_agente = rs_tDBInput_11.getShort(10);
							if (rs_tDBInput_11.wasNull()) {
								row3.num_agente = null;
							}
						}
						if (colQtyInRs_tDBInput_11 < 11) {
							row3.fec_ingreso = null;
						} else {

							row3.fec_ingreso = routines.system.JDBCUtil.getDate(rs_tDBInput_11, 11);
						}
						if (colQtyInRs_tDBInput_11 < 12) {
							row3.tip_tramite = null;
						} else {

							row3.tip_tramite = rs_tDBInput_11.getShort(12);
							if (rs_tDBInput_11.wasNull()) {
								row3.tip_tramite = null;
							}
						}
						if (colQtyInRs_tDBInput_11 < 13) {
							row3.cod_status = null;
						} else {

							row3.cod_status = routines.system.JDBCUtil.getString(rs_tDBInput_11, 13, false);
						}
						if (colQtyInRs_tDBInput_11 < 14) {
							row3.fec_status = null;
						} else {

							row3.fec_status = routines.system.JDBCUtil.getDate(rs_tDBInput_11, 14);
						}
						if (colQtyInRs_tDBInput_11 < 15) {
							row3.num_registro_poder = null;
						} else {

							row3.num_registro_poder = rs_tDBInput_11.getInt(15);
							if (rs_tDBInput_11.wasNull()) {
								row3.num_registro_poder = null;
							}
						}
						if (colQtyInRs_tDBInput_11 < 16) {
							row3.num_agente_old = null;
						} else {

							row3.num_agente_old = rs_tDBInput_11.getShort(16);
							if (rs_tDBInput_11.wasNull()) {
								row3.num_agente_old = null;
							}
						}
						if (colQtyInRs_tDBInput_11 < 17) {
							row3.cobro_caja = null;
						} else {

							row3.cobro_caja = rs_tDBInput_11.getLong(17);
							if (rs_tDBInput_11.wasNull()) {
								row3.cobro_caja = null;
							}
						}
						if (colQtyInRs_tDBInput_11 < 18) {
							row3.ref_pago = null;
						} else {

							row3.ref_pago = routines.system.JDBCUtil.getString(rs_tDBInput_11, 18, false);
						}

						/**
						 * [tDBInput_11 begin ] stop
						 */

						/**
						 * [tDBInput_11 main ] start
						 */

						currentComponent = "tDBInput_11";

						tos_count_tDBInput_11++;

						/**
						 * [tDBInput_11 main ] stop
						 */

						/**
						 * [tDBInput_11 process_data_begin ] start
						 */

						currentComponent = "tDBInput_11";

						/**
						 * [tDBInput_11 process_data_begin ] stop
						 */

						/**
						 * [tMap_4 main ] start
						 */

						currentComponent = "tMap_4";

						if (execStat) {
							runStat.updateStatOnConnection(iterateId, 1, 1

									, "row3"

							);
						}

						boolean hasCasePrimitiveKeyWithNull_tMap_4 = false;

						// ###############################
						// # Input tables (lookups)
						boolean rejectedInnerJoin_tMap_4 = false;
						boolean mainRowRejected_tMap_4 = false;

						///////////////////////////////////////////////
						// Starting Lookup Table "row14"
						///////////////////////////////////////////////

						boolean forceLooprow14 = false;

						row14Struct row14ObjectFromLookup = null;

						if (!rejectedInnerJoin_tMap_4) { // G_TM_M_020

							hasCasePrimitiveKeyWithNull_tMap_4 = false;

							row14HashKey.DOC_NBR = new BigDecimal(row3.sec_documento);

							row14HashKey.hashCodeDirty = true;

							tHash_Lookup_row14.lookup(row14HashKey);

							if (!tHash_Lookup_row14.hasNext()) { // G_TM_M_090

								rejectedInnerJoin_tMap_4 = true;

								forceLooprow14 = true;

							} // G_TM_M_090

						} // G_TM_M_020

						else { // G 20 - G 21
							forceLooprow14 = true;
						} // G 21

						row14Struct row14 = null;

						while ((tHash_Lookup_row14 != null && tHash_Lookup_row14.hasNext()) || forceLooprow14) { // G_TM_M_043

							// CALL close loop of lookup 'row14'

							row14Struct fromLookup_row14 = null;
							row14 = row14Default;

							if (!forceLooprow14) { // G 46

								fromLookup_row14 = tHash_Lookup_row14.next();

								if (fromLookup_row14 != null) {
									row14 = fromLookup_row14;
								}

							} // G 46

							forceLooprow14 = false;

							// ###############################
							{ // start of Var scope

								// ###############################
								// # Vars tables

								Var__tMap_4__Struct Var = Var__tMap_4;// ###############################
								// ###############################
								// # Output tables

								copyOfaction_ud = null;

								if (!rejectedInnerJoin_tMap_4) {

// # Output table : 'copyOfaction_ud'
									copyOfaction_ud_tmp.USERDOC_SEQ = row14.USERDOC_SEQ;
									copyOfaction_ud_tmp.USERDOC_SERIES = row14.USERDOC_SERIES;
									copyOfaction_ud_tmp.USERDOC_NBR = row14.USERDOC_NBR;
									copyOfaction_ud_tmp.PROCESS_FILE_SEQ = null;
									copyOfaction_ud_tmp.PROCESS_FILE_TYPE = null;
									copyOfaction_ud_tmp.PROCESS_FILE_SERIES = null;
									copyOfaction_ud_tmp.PROCESS_FILE_NBR = null;
									copyOfaction_ud_tmp.ACTION_TYPE = "WIPO";
									copyOfaction_ud_tmp.ACTION_DATE = row3.fec_status;
									copyOfaction_ud_tmp.MANUAL_DUE_DATE = null;
									copyOfaction_ud_tmp.RESPONSIBLE_USER = new BigDecimal("4");
									copyOfaction_ud_tmp.ACTION_NOTES1 = null;
									copyOfaction_ud_tmp.ACTION_NOTES2 = null;
									copyOfaction_ud_tmp.ACTION_NOTES3 = null;
									copyOfaction_ud_tmp.ACTION_NOTES4 = null;
									copyOfaction_ud_tmp.ACTION_NOTES5 = null;
									copyOfaction_ud_tmp.GENERAL_NOTES = "correccion estado";
									copyOfaction_ud_tmp.SELECTED_OPTIONS_TEXT = null;
									copyOfaction_ud_tmp.ACTION_USER = new BigDecimal("4");
									copyOfaction_ud_tmp.ACTION_CATEGORY = "S";
									copyOfaction_ud_tmp.SPECIAL_FINAL_STATUS = row3.cod_status;
									copyOfaction_ud_tmp.JOURNAL_CODE = null;
									copyOfaction_ud_tmp.PUBLICATION_DATE = null;
									copyOfaction_ud_tmp.IPAS_PROC_TYP = null;
									copyOfaction_ud_tmp.IPAS_PROC_NBR = null;
									copyOfaction_ud_tmp.IPAS_ACTION_NBR = null;
									copyOfaction_ud = copyOfaction_ud_tmp;
								} // closing inner join bracket (2)
// ###############################

							} // end of Var scope

							rejectedInnerJoin_tMap_4 = false;

							tos_count_tMap_4++;

							/**
							 * [tMap_4 main ] stop
							 */

							/**
							 * [tMap_4 process_data_begin ] start
							 */

							currentComponent = "tMap_4";

							/**
							 * [tMap_4 process_data_begin ] stop
							 */
// Start of branch "copyOfaction_ud"
							if (copyOfaction_ud != null) {
								row16 = null;

								/**
								 * [tDBOutput_3 main ] start
								 */

								currentComponent = "tDBOutput_3";

								if (execStat) {
									runStat.updateStatOnConnection(iterateId, 1, 1

											, "copyOfaction_ud"

									);
								}

								row16 = null;
								whetherReject_tDBOutput_3 = false;
								try {
									if (copyOfaction_ud.USERDOC_SEQ == null) {
										pstmt_tDBOutput_3.setNull(1, java.sql.Types.VARCHAR);
									} else {
										pstmt_tDBOutput_3.setString(1, copyOfaction_ud.USERDOC_SEQ);
									}

									pstmt_tDBOutput_3.setBigDecimal(2, copyOfaction_ud.USERDOC_SERIES);

									pstmt_tDBOutput_3.setBigDecimal(3, copyOfaction_ud.USERDOC_NBR);

									if (copyOfaction_ud.PROCESS_FILE_SEQ == null) {
										pstmt_tDBOutput_3.setNull(4, java.sql.Types.VARCHAR);
									} else {
										pstmt_tDBOutput_3.setString(4, copyOfaction_ud.PROCESS_FILE_SEQ);
									}

									if (copyOfaction_ud.PROCESS_FILE_TYPE == null) {
										pstmt_tDBOutput_3.setNull(5, java.sql.Types.VARCHAR);
									} else {
										pstmt_tDBOutput_3.setString(5, copyOfaction_ud.PROCESS_FILE_TYPE);
									}

									pstmt_tDBOutput_3.setBigDecimal(6, copyOfaction_ud.PROCESS_FILE_SERIES);

									pstmt_tDBOutput_3.setBigDecimal(7, copyOfaction_ud.PROCESS_FILE_NBR);

									if (copyOfaction_ud.ACTION_TYPE == null) {
										pstmt_tDBOutput_3.setNull(8, java.sql.Types.VARCHAR);
									} else {
										pstmt_tDBOutput_3.setString(8, copyOfaction_ud.ACTION_TYPE);
									}

									if (copyOfaction_ud.ACTION_DATE != null) {
										pstmt_tDBOutput_3.setTimestamp(9,
												new java.sql.Timestamp(copyOfaction_ud.ACTION_DATE.getTime()));
									} else {
										pstmt_tDBOutput_3.setNull(9, java.sql.Types.TIMESTAMP);
									}

									if (copyOfaction_ud.MANUAL_DUE_DATE != null) {
										pstmt_tDBOutput_3.setTimestamp(10,
												new java.sql.Timestamp(copyOfaction_ud.MANUAL_DUE_DATE.getTime()));
									} else {
										pstmt_tDBOutput_3.setNull(10, java.sql.Types.TIMESTAMP);
									}

									pstmt_tDBOutput_3.setBigDecimal(11, copyOfaction_ud.RESPONSIBLE_USER);

									if (copyOfaction_ud.ACTION_NOTES1 == null) {
										pstmt_tDBOutput_3.setNull(12, java.sql.Types.VARCHAR);
									} else {
										pstmt_tDBOutput_3.setString(12, copyOfaction_ud.ACTION_NOTES1);
									}

									if (copyOfaction_ud.ACTION_NOTES2 == null) {
										pstmt_tDBOutput_3.setNull(13, java.sql.Types.VARCHAR);
									} else {
										pstmt_tDBOutput_3.setString(13, copyOfaction_ud.ACTION_NOTES2);
									}

									if (copyOfaction_ud.ACTION_NOTES3 == null) {
										pstmt_tDBOutput_3.setNull(14, java.sql.Types.VARCHAR);
									} else {
										pstmt_tDBOutput_3.setString(14, copyOfaction_ud.ACTION_NOTES3);
									}

									if (copyOfaction_ud.ACTION_NOTES4 == null) {
										pstmt_tDBOutput_3.setNull(15, java.sql.Types.VARCHAR);
									} else {
										pstmt_tDBOutput_3.setString(15, copyOfaction_ud.ACTION_NOTES4);
									}

									if (copyOfaction_ud.ACTION_NOTES5 == null) {
										pstmt_tDBOutput_3.setNull(16, java.sql.Types.VARCHAR);
									} else {
										pstmt_tDBOutput_3.setString(16, copyOfaction_ud.ACTION_NOTES5);
									}

									if (copyOfaction_ud.GENERAL_NOTES == null) {
										pstmt_tDBOutput_3.setNull(17, java.sql.Types.VARCHAR);
									} else {
										pstmt_tDBOutput_3.setString(17, copyOfaction_ud.GENERAL_NOTES);
									}

									if (copyOfaction_ud.SELECTED_OPTIONS_TEXT == null) {
										pstmt_tDBOutput_3.setNull(18, java.sql.Types.VARCHAR);
									} else {
										pstmt_tDBOutput_3.setString(18, copyOfaction_ud.SELECTED_OPTIONS_TEXT);
									}

									pstmt_tDBOutput_3.setBigDecimal(19, copyOfaction_ud.ACTION_USER);

									if (copyOfaction_ud.ACTION_CATEGORY == null) {
										pstmt_tDBOutput_3.setNull(20, java.sql.Types.VARCHAR);
									} else {
										pstmt_tDBOutput_3.setString(20, copyOfaction_ud.ACTION_CATEGORY);
									}

									if (copyOfaction_ud.SPECIAL_FINAL_STATUS == null) {
										pstmt_tDBOutput_3.setNull(21, java.sql.Types.VARCHAR);
									} else {
										pstmt_tDBOutput_3.setString(21, copyOfaction_ud.SPECIAL_FINAL_STATUS);
									}

									if (copyOfaction_ud.JOURNAL_CODE == null) {
										pstmt_tDBOutput_3.setNull(22, java.sql.Types.VARCHAR);
									} else {
										pstmt_tDBOutput_3.setString(22, copyOfaction_ud.JOURNAL_CODE);
									}

									if (copyOfaction_ud.PUBLICATION_DATE != null) {
										pstmt_tDBOutput_3.setTimestamp(23,
												new java.sql.Timestamp(copyOfaction_ud.PUBLICATION_DATE.getTime()));
									} else {
										pstmt_tDBOutput_3.setNull(23, java.sql.Types.TIMESTAMP);
									}

									if (copyOfaction_ud.IPAS_PROC_TYP == null) {
										pstmt_tDBOutput_3.setNull(24, java.sql.Types.VARCHAR);
									} else {
										pstmt_tDBOutput_3.setString(24, copyOfaction_ud.IPAS_PROC_TYP);
									}

									pstmt_tDBOutput_3.setBigDecimal(25, copyOfaction_ud.IPAS_PROC_NBR);

									pstmt_tDBOutput_3.setBigDecimal(26, copyOfaction_ud.IPAS_ACTION_NBR);

									nb_line_tDBOutput_3++;
									insertedCount_tDBOutput_3 = insertedCount_tDBOutput_3
											+ pstmt_tDBOutput_3.executeUpdate();
								} catch (java.lang.Exception e) {
									whetherReject_tDBOutput_3 = true;
									row16 = new row16Struct();
									row16.USERDOC_SEQ = copyOfaction_ud.USERDOC_SEQ;
									row16.USERDOC_SERIES = copyOfaction_ud.USERDOC_SERIES;
									row16.USERDOC_NBR = copyOfaction_ud.USERDOC_NBR;
									row16.PROCESS_FILE_SEQ = copyOfaction_ud.PROCESS_FILE_SEQ;
									row16.PROCESS_FILE_TYPE = copyOfaction_ud.PROCESS_FILE_TYPE;
									row16.PROCESS_FILE_SERIES = copyOfaction_ud.PROCESS_FILE_SERIES;
									row16.PROCESS_FILE_NBR = copyOfaction_ud.PROCESS_FILE_NBR;
									row16.ACTION_TYPE = copyOfaction_ud.ACTION_TYPE;
									row16.ACTION_DATE = copyOfaction_ud.ACTION_DATE;
									row16.MANUAL_DUE_DATE = copyOfaction_ud.MANUAL_DUE_DATE;
									row16.RESPONSIBLE_USER = copyOfaction_ud.RESPONSIBLE_USER;
									row16.ACTION_NOTES1 = copyOfaction_ud.ACTION_NOTES1;
									row16.ACTION_NOTES2 = copyOfaction_ud.ACTION_NOTES2;
									row16.ACTION_NOTES3 = copyOfaction_ud.ACTION_NOTES3;
									row16.ACTION_NOTES4 = copyOfaction_ud.ACTION_NOTES4;
									row16.ACTION_NOTES5 = copyOfaction_ud.ACTION_NOTES5;
									row16.GENERAL_NOTES = copyOfaction_ud.GENERAL_NOTES;
									row16.SELECTED_OPTIONS_TEXT = copyOfaction_ud.SELECTED_OPTIONS_TEXT;
									row16.ACTION_USER = copyOfaction_ud.ACTION_USER;
									row16.ACTION_CATEGORY = copyOfaction_ud.ACTION_CATEGORY;
									row16.SPECIAL_FINAL_STATUS = copyOfaction_ud.SPECIAL_FINAL_STATUS;
									row16.JOURNAL_CODE = copyOfaction_ud.JOURNAL_CODE;
									row16.PUBLICATION_DATE = copyOfaction_ud.PUBLICATION_DATE;
									row16.IPAS_PROC_TYP = copyOfaction_ud.IPAS_PROC_TYP;
									row16.IPAS_PROC_NBR = copyOfaction_ud.IPAS_PROC_NBR;
									row16.IPAS_ACTION_NBR = copyOfaction_ud.IPAS_ACTION_NBR;
									rejectedCount_tDBOutput_3 = rejectedCount_tDBOutput_3 + 1;
									row16.errorCode = ((java.sql.SQLException) e).getSQLState();
									row16.errorMessage = e.getMessage() + " - Line: " + tos_count_tDBOutput_3;
								}
								if (!whetherReject_tDBOutput_3) {
								}
								////////// batch execute by batch size///////
								class LimitBytesHelper_tDBOutput_3 {
									public int limitBytePart1(int counter, java.sql.PreparedStatement pstmt_tDBOutput_3)
											throws Exception {
										try {

											for (int countEach_tDBOutput_3 : pstmt_tDBOutput_3.executeBatch()) {
												if (countEach_tDBOutput_3 == -2 || countEach_tDBOutput_3 == -3) {
													break;
												}
												counter += countEach_tDBOutput_3;
											}

										} catch (java.sql.BatchUpdateException e) {

											int countSum_tDBOutput_3 = 0;
											for (int countEach_tDBOutput_3 : e.getUpdateCounts()) {
												counter += (countEach_tDBOutput_3 < 0 ? 0 : countEach_tDBOutput_3);
											}

											System.err.println(e.getMessage());

										}
										return counter;
									}

									public int limitBytePart2(int counter, java.sql.PreparedStatement pstmt_tDBOutput_3)
											throws Exception {
										try {

											for (int countEach_tDBOutput_3 : pstmt_tDBOutput_3.executeBatch()) {
												if (countEach_tDBOutput_3 == -2 || countEach_tDBOutput_3 == -3) {
													break;
												}
												counter += countEach_tDBOutput_3;
											}

										} catch (java.sql.BatchUpdateException e) {

											for (int countEach_tDBOutput_3 : e.getUpdateCounts()) {
												counter += (countEach_tDBOutput_3 < 0 ? 0 : countEach_tDBOutput_3);
											}

											System.err.println(e.getMessage());

										}
										return counter;
									}
								}

								//////////// commit every////////////

								tos_count_tDBOutput_3++;

								/**
								 * [tDBOutput_3 main ] stop
								 */

								/**
								 * [tDBOutput_3 process_data_begin ] start
								 */

								currentComponent = "tDBOutput_3";

								/**
								 * [tDBOutput_3 process_data_begin ] stop
								 */
// Start of branch "row16"
								if (row16 != null) {

									/**
									 * [tLogRow_3 main ] start
									 */

									currentComponent = "tLogRow_3";

									if (execStat) {
										runStat.updateStatOnConnection(iterateId, 1, 1

												, "row16"

										);
									}

///////////////////////		

									strBuffer_tLogRow_3 = new StringBuilder();

									if (row16.USERDOC_SEQ != null) { //

										strBuffer_tLogRow_3.append(String.valueOf(row16.USERDOC_SEQ));

									} //

									strBuffer_tLogRow_3.append("|");

									if (row16.USERDOC_SERIES != null) { //

										strBuffer_tLogRow_3.append(row16.USERDOC_SERIES
												.setScale(0, java.math.RoundingMode.HALF_UP).toPlainString());

									} //

									strBuffer_tLogRow_3.append("|");

									if (row16.USERDOC_NBR != null) { //

										strBuffer_tLogRow_3.append(row16.USERDOC_NBR
												.setScale(0, java.math.RoundingMode.HALF_UP).toPlainString());

									} //

									strBuffer_tLogRow_3.append("|");

									if (row16.PROCESS_FILE_SEQ != null) { //

										strBuffer_tLogRow_3.append(String.valueOf(row16.PROCESS_FILE_SEQ));

									} //

									strBuffer_tLogRow_3.append("|");

									if (row16.PROCESS_FILE_TYPE != null) { //

										strBuffer_tLogRow_3.append(String.valueOf(row16.PROCESS_FILE_TYPE));

									} //

									strBuffer_tLogRow_3.append("|");

									if (row16.PROCESS_FILE_SERIES != null) { //

										strBuffer_tLogRow_3.append(row16.PROCESS_FILE_SERIES
												.setScale(0, java.math.RoundingMode.HALF_UP).toPlainString());

									} //

									strBuffer_tLogRow_3.append("|");

									if (row16.PROCESS_FILE_NBR != null) { //

										strBuffer_tLogRow_3.append(row16.PROCESS_FILE_NBR
												.setScale(0, java.math.RoundingMode.HALF_UP).toPlainString());

									} //

									strBuffer_tLogRow_3.append("|");

									if (row16.ACTION_TYPE != null) { //

										strBuffer_tLogRow_3.append(String.valueOf(row16.ACTION_TYPE));

									} //

									strBuffer_tLogRow_3.append("|");

									if (row16.ACTION_DATE != null) { //

										strBuffer_tLogRow_3
												.append(FormatterUtils.format_Date(row16.ACTION_DATE, "dd-MM-yyyy"));

									} //

									strBuffer_tLogRow_3.append("|");

									if (row16.MANUAL_DUE_DATE != null) { //

										strBuffer_tLogRow_3.append(
												FormatterUtils.format_Date(row16.MANUAL_DUE_DATE, "dd-MM-yyyy"));

									} //

									strBuffer_tLogRow_3.append("|");

									if (row16.RESPONSIBLE_USER != null) { //

										strBuffer_tLogRow_3.append(row16.RESPONSIBLE_USER
												.setScale(0, java.math.RoundingMode.HALF_UP).toPlainString());

									} //

									strBuffer_tLogRow_3.append("|");

									if (row16.ACTION_NOTES1 != null) { //

										strBuffer_tLogRow_3.append(String.valueOf(row16.ACTION_NOTES1));

									} //

									strBuffer_tLogRow_3.append("|");

									if (row16.ACTION_NOTES2 != null) { //

										strBuffer_tLogRow_3.append(String.valueOf(row16.ACTION_NOTES2));

									} //

									strBuffer_tLogRow_3.append("|");

									if (row16.ACTION_NOTES3 != null) { //

										strBuffer_tLogRow_3.append(String.valueOf(row16.ACTION_NOTES3));

									} //

									strBuffer_tLogRow_3.append("|");

									if (row16.ACTION_NOTES4 != null) { //

										strBuffer_tLogRow_3.append(String.valueOf(row16.ACTION_NOTES4));

									} //

									strBuffer_tLogRow_3.append("|");

									if (row16.ACTION_NOTES5 != null) { //

										strBuffer_tLogRow_3.append(String.valueOf(row16.ACTION_NOTES5));

									} //

									strBuffer_tLogRow_3.append("|");

									if (row16.GENERAL_NOTES != null) { //

										strBuffer_tLogRow_3.append(String.valueOf(row16.GENERAL_NOTES));

									} //

									strBuffer_tLogRow_3.append("|");

									if (row16.SELECTED_OPTIONS_TEXT != null) { //

										strBuffer_tLogRow_3.append(String.valueOf(row16.SELECTED_OPTIONS_TEXT));

									} //

									strBuffer_tLogRow_3.append("|");

									if (row16.ACTION_USER != null) { //

										strBuffer_tLogRow_3.append(row16.ACTION_USER
												.setScale(0, java.math.RoundingMode.HALF_UP).toPlainString());

									} //

									strBuffer_tLogRow_3.append("|");

									if (row16.ACTION_CATEGORY != null) { //

										strBuffer_tLogRow_3.append(String.valueOf(row16.ACTION_CATEGORY));

									} //

									strBuffer_tLogRow_3.append("|");

									if (row16.SPECIAL_FINAL_STATUS != null) { //

										strBuffer_tLogRow_3.append(String.valueOf(row16.SPECIAL_FINAL_STATUS));

									} //

									strBuffer_tLogRow_3.append("|");

									if (row16.JOURNAL_CODE != null) { //

										strBuffer_tLogRow_3.append(String.valueOf(row16.JOURNAL_CODE));

									} //

									strBuffer_tLogRow_3.append("|");

									if (row16.PUBLICATION_DATE != null) { //

										strBuffer_tLogRow_3.append(
												FormatterUtils.format_Date(row16.PUBLICATION_DATE, "dd-MM-yyyy"));

									} //

									strBuffer_tLogRow_3.append("|");

									if (row16.IPAS_PROC_TYP != null) { //

										strBuffer_tLogRow_3.append(String.valueOf(row16.IPAS_PROC_TYP));

									} //

									strBuffer_tLogRow_3.append("|");

									if (row16.IPAS_PROC_NBR != null) { //

										strBuffer_tLogRow_3.append(row16.IPAS_PROC_NBR
												.setScale(0, java.math.RoundingMode.HALF_UP).toPlainString());

									} //

									strBuffer_tLogRow_3.append("|");

									if (row16.IPAS_ACTION_NBR != null) { //

										strBuffer_tLogRow_3.append(row16.IPAS_ACTION_NBR
												.setScale(0, java.math.RoundingMode.HALF_UP).toPlainString());

									} //

									strBuffer_tLogRow_3.append("|");

									if (row16.errorCode != null) { //

										strBuffer_tLogRow_3.append(String.valueOf(row16.errorCode));

									} //

									strBuffer_tLogRow_3.append("|");

									if (row16.errorMessage != null) { //

										strBuffer_tLogRow_3.append(String.valueOf(row16.errorMessage));

									} //

									if (globalMap.get("tLogRow_CONSOLE") != null) {
										consoleOut_tLogRow_3 = (java.io.PrintStream) globalMap.get("tLogRow_CONSOLE");
									} else {
										consoleOut_tLogRow_3 = new java.io.PrintStream(
												new java.io.BufferedOutputStream(System.out));
										globalMap.put("tLogRow_CONSOLE", consoleOut_tLogRow_3);
									}
									consoleOut_tLogRow_3.println(strBuffer_tLogRow_3.toString());
									consoleOut_tLogRow_3.flush();
									nb_line_tLogRow_3++;
//////

//////                    

///////////////////////    			

									tos_count_tLogRow_3++;

									/**
									 * [tLogRow_3 main ] stop
									 */

									/**
									 * [tLogRow_3 process_data_begin ] start
									 */

									currentComponent = "tLogRow_3";

									/**
									 * [tLogRow_3 process_data_begin ] stop
									 */

									/**
									 * [tLogRow_3 process_data_end ] start
									 */

									currentComponent = "tLogRow_3";

									/**
									 * [tLogRow_3 process_data_end ] stop
									 */

								} // End of branch "row16"

								/**
								 * [tDBOutput_3 process_data_end ] start
								 */

								currentComponent = "tDBOutput_3";

								/**
								 * [tDBOutput_3 process_data_end ] stop
								 */

							} // End of branch "copyOfaction_ud"

						} // close loop of lookup 'row14' // G_TM_M_043

						/**
						 * [tMap_4 process_data_end ] start
						 */

						currentComponent = "tMap_4";

						/**
						 * [tMap_4 process_data_end ] stop
						 */

						/**
						 * [tDBInput_11 process_data_end ] start
						 */

						currentComponent = "tDBInput_11";

						/**
						 * [tDBInput_11 process_data_end ] stop
						 */

						/**
						 * [tDBInput_11 end ] start
						 */

						currentComponent = "tDBInput_11";

					}
				} finally {
					if (rs_tDBInput_11 != null) {
						rs_tDBInput_11.close();
					}
					if (stmt_tDBInput_11 != null) {
						stmt_tDBInput_11.close();
					}
				}
				globalMap.put("tDBInput_11_NB_LINE", nb_line_tDBInput_11);

				ok_Hash.put("tDBInput_11", true);
				end_Hash.put("tDBInput_11", System.currentTimeMillis());

				/**
				 * [tDBInput_11 end ] stop
				 */

				/**
				 * [tMap_4 end ] start
				 */

				currentComponent = "tMap_4";

// ###############################
// # Lookup hashes releasing
				if (tHash_Lookup_row14 != null) {
					tHash_Lookup_row14.endGet();
				}
				globalMap.remove("tHash_Lookup_row14");

// ###############################      

				if (execStat) {
					runStat.updateStat(resourceMap, iterateId, 2, 0, "row3");
				}

				ok_Hash.put("tMap_4", true);
				end_Hash.put("tMap_4", System.currentTimeMillis());

				/**
				 * [tMap_4 end ] stop
				 */

				/**
				 * [tDBOutput_3 end ] start
				 */

				currentComponent = "tDBOutput_3";

				if (pstmt_tDBOutput_3 != null) {

					pstmt_tDBOutput_3.close();
					resourceMap.remove("pstmt_tDBOutput_3");

				}
				resourceMap.put("statementClosed_tDBOutput_3", true);

				nb_line_deleted_tDBOutput_3 = nb_line_deleted_tDBOutput_3 + deletedCount_tDBOutput_3;
				nb_line_update_tDBOutput_3 = nb_line_update_tDBOutput_3 + updatedCount_tDBOutput_3;
				nb_line_inserted_tDBOutput_3 = nb_line_inserted_tDBOutput_3 + insertedCount_tDBOutput_3;
				nb_line_rejected_tDBOutput_3 = nb_line_rejected_tDBOutput_3 + rejectedCount_tDBOutput_3;

				globalMap.put("tDBOutput_3_NB_LINE", nb_line_tDBOutput_3);
				globalMap.put("tDBOutput_3_NB_LINE_UPDATED", nb_line_update_tDBOutput_3);
				globalMap.put("tDBOutput_3_NB_LINE_INSERTED", nb_line_inserted_tDBOutput_3);
				globalMap.put("tDBOutput_3_NB_LINE_DELETED", nb_line_deleted_tDBOutput_3);
				globalMap.put("tDBOutput_3_NB_LINE_REJECTED", nb_line_rejected_tDBOutput_3);

				if (execStat) {
					runStat.updateStat(resourceMap, iterateId, 2, 0, "copyOfaction_ud");
				}

				ok_Hash.put("tDBOutput_3", true);
				end_Hash.put("tDBOutput_3", System.currentTimeMillis());

				/**
				 * [tDBOutput_3 end ] stop
				 */

				/**
				 * [tLogRow_3 end ] start
				 */

				currentComponent = "tLogRow_3";

//////
//////
				globalMap.put("tLogRow_3_NB_LINE", nb_line_tLogRow_3);

///////////////////////    			

				if (execStat) {
					runStat.updateStat(resourceMap, iterateId, 2, 0, "row16");
				}

				ok_Hash.put("tLogRow_3", true);
				end_Hash.put("tLogRow_3", System.currentTimeMillis());

				/**
				 * [tLogRow_3 end ] stop
				 */

			} // end the resume

			if (resumeEntryMethodName == null || globalResumeTicket) {
				resumeUtil.addLog("CHECKPOINT", "CONNECTION:SUBJOB_OK:tDBInput_11:OnSubjobOk", "",
						Thread.currentThread().getId() + "", "", "", "", "", "");
			}

			if (execStat) {
				runStat.updateStatOnConnection("OnSubjobOk10", 0, "ok");
			}

			tDBInput_1Process(globalMap);

		} catch (java.lang.Exception e) {

			TalendException te = new TalendException(e, currentComponent, globalMap);

			throw te;
		} catch (java.lang.Error error) {

			runStat.stopThreadStat();

			throw error;
		} finally {

			// free memory for "tMap_4"
			globalMap.remove("tHash_Lookup_row14");

			try {

				/**
				 * [tDBInput_11 finally ] start
				 */

				currentComponent = "tDBInput_11";

				/**
				 * [tDBInput_11 finally ] stop
				 */

				/**
				 * [tMap_4 finally ] start
				 */

				currentComponent = "tMap_4";

				/**
				 * [tMap_4 finally ] stop
				 */

				/**
				 * [tDBOutput_3 finally ] start
				 */

				currentComponent = "tDBOutput_3";

				if (resourceMap.get("statementClosed_tDBOutput_3") == null) {
					java.sql.PreparedStatement pstmtToClose_tDBOutput_3 = null;
					if ((pstmtToClose_tDBOutput_3 = (java.sql.PreparedStatement) resourceMap
							.remove("pstmt_tDBOutput_3")) != null) {
						pstmtToClose_tDBOutput_3.close();
					}
				}

				/**
				 * [tDBOutput_3 finally ] stop
				 */

				/**
				 * [tLogRow_3 finally ] start
				 */

				currentComponent = "tLogRow_3";

				/**
				 * [tLogRow_3 finally ] stop
				 */

			} catch (java.lang.Exception e) {
				// ignore
			} catch (java.lang.Error error) {
				// ignore
			}
			resourceMap = null;
		}

		globalMap.put("tDBInput_11_SUBPROCESS_STATE", 1);
	}

	public static class row23Struct implements routines.system.IPersistableRow<row23Struct> {
		final static byte[] commonByteArrayLock_WIPO_PROJECTS_E1a_Marc_Userdoc_a_interm = new byte[0];
		static byte[] commonByteArray_WIPO_PROJECTS_E1a_Marc_Userdoc_a_interm = new byte[0];

		public String USERDOC_SEQ;

		public String getUSERDOC_SEQ() {
			return this.USERDOC_SEQ;
		}

		public BigDecimal USERDOC_SERIES;

		public BigDecimal getUSERDOC_SERIES() {
			return this.USERDOC_SERIES;
		}

		public BigDecimal USERDOC_NBR;

		public BigDecimal getUSERDOC_NBR() {
			return this.USERDOC_NBR;
		}

		public String FILE_SEQ;

		public String getFILE_SEQ() {
			return this.FILE_SEQ;
		}

		public String FILE_TYPE;

		public String getFILE_TYPE() {
			return this.FILE_TYPE;
		}

		public BigDecimal FILE_SERIES;

		public BigDecimal getFILE_SERIES() {
			return this.FILE_SERIES;
		}

		public BigDecimal FILE_NBR;

		public BigDecimal getFILE_NBR() {
			return this.FILE_NBR;
		}

		public String errorCode;

		public String getErrorCode() {
			return this.errorCode;
		}

		public String errorMessage;

		public String getErrorMessage() {
			return this.errorMessage;
		}

		private String readString(ObjectInputStream dis) throws IOException {
			String strReturn = null;
			int length = 0;
			length = dis.readInt();
			if (length == -1) {
				strReturn = null;
			} else {
				if (length > commonByteArray_WIPO_PROJECTS_E1a_Marc_Userdoc_a_interm.length) {
					if (length < 1024 && commonByteArray_WIPO_PROJECTS_E1a_Marc_Userdoc_a_interm.length == 0) {
						commonByteArray_WIPO_PROJECTS_E1a_Marc_Userdoc_a_interm = new byte[1024];
					} else {
						commonByteArray_WIPO_PROJECTS_E1a_Marc_Userdoc_a_interm = new byte[2 * length];
					}
				}
				dis.readFully(commonByteArray_WIPO_PROJECTS_E1a_Marc_Userdoc_a_interm, 0, length);
				strReturn = new String(commonByteArray_WIPO_PROJECTS_E1a_Marc_Userdoc_a_interm, 0, length, utf8Charset);
			}
			return strReturn;
		}

		private void writeString(String str, ObjectOutputStream dos) throws IOException {
			if (str == null) {
				dos.writeInt(-1);
			} else {
				byte[] byteArray = str.getBytes(utf8Charset);
				dos.writeInt(byteArray.length);
				dos.write(byteArray);
			}
		}

		public void readData(ObjectInputStream dis) {

			synchronized (commonByteArrayLock_WIPO_PROJECTS_E1a_Marc_Userdoc_a_interm) {

				try {

					int length = 0;

					this.USERDOC_SEQ = readString(dis);

					this.USERDOC_SERIES = (BigDecimal) dis.readObject();

					this.USERDOC_NBR = (BigDecimal) dis.readObject();

					this.FILE_SEQ = readString(dis);

					this.FILE_TYPE = readString(dis);

					this.FILE_SERIES = (BigDecimal) dis.readObject();

					this.FILE_NBR = (BigDecimal) dis.readObject();

					this.errorCode = readString(dis);

					this.errorMessage = readString(dis);

				} catch (IOException e) {
					throw new RuntimeException(e);

				} catch (ClassNotFoundException eCNFE) {
					throw new RuntimeException(eCNFE);

				}

			}

		}

		public void writeData(ObjectOutputStream dos) {
			try {

				// String

				writeString(this.USERDOC_SEQ, dos);

				// BigDecimal

				dos.writeObject(this.USERDOC_SERIES);

				// BigDecimal

				dos.writeObject(this.USERDOC_NBR);

				// String

				writeString(this.FILE_SEQ, dos);

				// String

				writeString(this.FILE_TYPE, dos);

				// BigDecimal

				dos.writeObject(this.FILE_SERIES);

				// BigDecimal

				dos.writeObject(this.FILE_NBR);

				// String

				writeString(this.errorCode, dos);

				// String

				writeString(this.errorMessage, dos);

			} catch (IOException e) {
				throw new RuntimeException(e);
			}

		}

		public String toString() {

			StringBuilder sb = new StringBuilder();
			sb.append(super.toString());
			sb.append("[");
			sb.append("USERDOC_SEQ=" + USERDOC_SEQ);
			sb.append(",USERDOC_SERIES=" + String.valueOf(USERDOC_SERIES));
			sb.append(",USERDOC_NBR=" + String.valueOf(USERDOC_NBR));
			sb.append(",FILE_SEQ=" + FILE_SEQ);
			sb.append(",FILE_TYPE=" + FILE_TYPE);
			sb.append(",FILE_SERIES=" + String.valueOf(FILE_SERIES));
			sb.append(",FILE_NBR=" + String.valueOf(FILE_NBR));
			sb.append(",errorCode=" + errorCode);
			sb.append(",errorMessage=" + errorMessage);
			sb.append("]");

			return sb.toString();
		}

		/**
		 * Compare keys
		 */
		public int compareTo(row23Struct other) {

			int returnValue = -1;

			return returnValue;
		}

		private int checkNullsAndCompare(Object object1, Object object2) {
			int returnValue = 0;
			if (object1 instanceof Comparable && object2 instanceof Comparable) {
				returnValue = ((Comparable) object1).compareTo(object2);
			} else if (object1 != null && object2 != null) {
				returnValue = compareStrings(object1.toString(), object2.toString());
			} else if (object1 == null && object2 != null) {
				returnValue = 1;
			} else if (object1 != null && object2 == null) {
				returnValue = -1;
			} else {
				returnValue = 0;
			}

			return returnValue;
		}

		private int compareStrings(String string1, String string2) {
			return string1.compareTo(string2);
		}

	}

	public static class ud_filesStruct implements routines.system.IPersistableRow<ud_filesStruct> {
		final static byte[] commonByteArrayLock_WIPO_PROJECTS_E1a_Marc_Userdoc_a_interm = new byte[0];
		static byte[] commonByteArray_WIPO_PROJECTS_E1a_Marc_Userdoc_a_interm = new byte[0];

		public String USERDOC_SEQ;

		public String getUSERDOC_SEQ() {
			return this.USERDOC_SEQ;
		}

		public BigDecimal USERDOC_SERIES;

		public BigDecimal getUSERDOC_SERIES() {
			return this.USERDOC_SERIES;
		}

		public BigDecimal USERDOC_NBR;

		public BigDecimal getUSERDOC_NBR() {
			return this.USERDOC_NBR;
		}

		public String FILE_SEQ;

		public String getFILE_SEQ() {
			return this.FILE_SEQ;
		}

		public String FILE_TYPE;

		public String getFILE_TYPE() {
			return this.FILE_TYPE;
		}

		public BigDecimal FILE_SERIES;

		public BigDecimal getFILE_SERIES() {
			return this.FILE_SERIES;
		}

		public BigDecimal FILE_NBR;

		public BigDecimal getFILE_NBR() {
			return this.FILE_NBR;
		}

		private String readString(ObjectInputStream dis) throws IOException {
			String strReturn = null;
			int length = 0;
			length = dis.readInt();
			if (length == -1) {
				strReturn = null;
			} else {
				if (length > commonByteArray_WIPO_PROJECTS_E1a_Marc_Userdoc_a_interm.length) {
					if (length < 1024 && commonByteArray_WIPO_PROJECTS_E1a_Marc_Userdoc_a_interm.length == 0) {
						commonByteArray_WIPO_PROJECTS_E1a_Marc_Userdoc_a_interm = new byte[1024];
					} else {
						commonByteArray_WIPO_PROJECTS_E1a_Marc_Userdoc_a_interm = new byte[2 * length];
					}
				}
				dis.readFully(commonByteArray_WIPO_PROJECTS_E1a_Marc_Userdoc_a_interm, 0, length);
				strReturn = new String(commonByteArray_WIPO_PROJECTS_E1a_Marc_Userdoc_a_interm, 0, length, utf8Charset);
			}
			return strReturn;
		}

		private void writeString(String str, ObjectOutputStream dos) throws IOException {
			if (str == null) {
				dos.writeInt(-1);
			} else {
				byte[] byteArray = str.getBytes(utf8Charset);
				dos.writeInt(byteArray.length);
				dos.write(byteArray);
			}
		}

		public void readData(ObjectInputStream dis) {

			synchronized (commonByteArrayLock_WIPO_PROJECTS_E1a_Marc_Userdoc_a_interm) {

				try {

					int length = 0;

					this.USERDOC_SEQ = readString(dis);

					this.USERDOC_SERIES = (BigDecimal) dis.readObject();

					this.USERDOC_NBR = (BigDecimal) dis.readObject();

					this.FILE_SEQ = readString(dis);

					this.FILE_TYPE = readString(dis);

					this.FILE_SERIES = (BigDecimal) dis.readObject();

					this.FILE_NBR = (BigDecimal) dis.readObject();

				} catch (IOException e) {
					throw new RuntimeException(e);

				} catch (ClassNotFoundException eCNFE) {
					throw new RuntimeException(eCNFE);

				}

			}

		}

		public void writeData(ObjectOutputStream dos) {
			try {

				// String

				writeString(this.USERDOC_SEQ, dos);

				// BigDecimal

				dos.writeObject(this.USERDOC_SERIES);

				// BigDecimal

				dos.writeObject(this.USERDOC_NBR);

				// String

				writeString(this.FILE_SEQ, dos);

				// String

				writeString(this.FILE_TYPE, dos);

				// BigDecimal

				dos.writeObject(this.FILE_SERIES);

				// BigDecimal

				dos.writeObject(this.FILE_NBR);

			} catch (IOException e) {
				throw new RuntimeException(e);
			}

		}

		public String toString() {

			StringBuilder sb = new StringBuilder();
			sb.append(super.toString());
			sb.append("[");
			sb.append("USERDOC_SEQ=" + USERDOC_SEQ);
			sb.append(",USERDOC_SERIES=" + String.valueOf(USERDOC_SERIES));
			sb.append(",USERDOC_NBR=" + String.valueOf(USERDOC_NBR));
			sb.append(",FILE_SEQ=" + FILE_SEQ);
			sb.append(",FILE_TYPE=" + FILE_TYPE);
			sb.append(",FILE_SERIES=" + String.valueOf(FILE_SERIES));
			sb.append(",FILE_NBR=" + String.valueOf(FILE_NBR));
			sb.append("]");

			return sb.toString();
		}

		/**
		 * Compare keys
		 */
		public int compareTo(ud_filesStruct other) {

			int returnValue = -1;

			return returnValue;
		}

		private int checkNullsAndCompare(Object object1, Object object2) {
			int returnValue = 0;
			if (object1 instanceof Comparable && object2 instanceof Comparable) {
				returnValue = ((Comparable) object1).compareTo(object2);
			} else if (object1 != null && object2 != null) {
				returnValue = compareStrings(object1.toString(), object2.toString());
			} else if (object1 == null && object2 != null) {
				returnValue = 1;
			} else if (object1 != null && object2 == null) {
				returnValue = -1;
			} else {
				returnValue = 0;
			}

			return returnValue;
		}

		private int compareStrings(String string1, String string2) {
			return string1.compareTo(string2);
		}

	}

	public static class row21Struct implements routines.system.IPersistableRow<row21Struct> {
		final static byte[] commonByteArrayLock_WIPO_PROJECTS_E1a_Marc_Userdoc_a_interm = new byte[0];
		static byte[] commonByteArray_WIPO_PROJECTS_E1a_Marc_Userdoc_a_interm = new byte[0];

		public int sec_documento;

		public int getSec_documento() {
			return this.sec_documento;
		}

		public String tip_documento;

		public String getTip_documento() {
			return this.tip_documento;
		}

		public Long num_acta_documento;

		public Long getNum_acta_documento() {
			return this.num_acta_documento;
		}

		public Long num_acta;

		public Long getNum_acta() {
			return this.num_acta;
		}

		public Long num_registro;

		public Long getNum_registro() {
			return this.num_registro;
		}

		public java.util.Date fec_documento;

		public java.util.Date getFec_documento() {
			return this.fec_documento;
		}

		public String obs_documento;

		public String getObs_documento() {
			return this.obs_documento;
		}

		public String nom_solicitante;

		public String getNom_solicitante() {
			return this.nom_solicitante;
		}

		public String cod_pais;

		public String getCod_pais() {
			return this.cod_pais;
		}

		public Short num_agente;

		public Short getNum_agente() {
			return this.num_agente;
		}

		public java.util.Date fec_ingreso;

		public java.util.Date getFec_ingreso() {
			return this.fec_ingreso;
		}

		public Short tip_tramite;

		public Short getTip_tramite() {
			return this.tip_tramite;
		}

		public String cod_status;

		public String getCod_status() {
			return this.cod_status;
		}

		public java.util.Date fec_status;

		public java.util.Date getFec_status() {
			return this.fec_status;
		}

		public Integer num_registro_poder;

		public Integer getNum_registro_poder() {
			return this.num_registro_poder;
		}

		public Short num_agente_old;

		public Short getNum_agente_old() {
			return this.num_agente_old;
		}

		public Long cobro_caja;

		public Long getCobro_caja() {
			return this.cobro_caja;
		}

		public String ref_pago;

		public String getRef_pago() {
			return this.ref_pago;
		}

		private String readString(ObjectInputStream dis) throws IOException {
			String strReturn = null;
			int length = 0;
			length = dis.readInt();
			if (length == -1) {
				strReturn = null;
			} else {
				if (length > commonByteArray_WIPO_PROJECTS_E1a_Marc_Userdoc_a_interm.length) {
					if (length < 1024 && commonByteArray_WIPO_PROJECTS_E1a_Marc_Userdoc_a_interm.length == 0) {
						commonByteArray_WIPO_PROJECTS_E1a_Marc_Userdoc_a_interm = new byte[1024];
					} else {
						commonByteArray_WIPO_PROJECTS_E1a_Marc_Userdoc_a_interm = new byte[2 * length];
					}
				}
				dis.readFully(commonByteArray_WIPO_PROJECTS_E1a_Marc_Userdoc_a_interm, 0, length);
				strReturn = new String(commonByteArray_WIPO_PROJECTS_E1a_Marc_Userdoc_a_interm, 0, length, utf8Charset);
			}
			return strReturn;
		}

		private void writeString(String str, ObjectOutputStream dos) throws IOException {
			if (str == null) {
				dos.writeInt(-1);
			} else {
				byte[] byteArray = str.getBytes(utf8Charset);
				dos.writeInt(byteArray.length);
				dos.write(byteArray);
			}
		}

		private java.util.Date readDate(ObjectInputStream dis) throws IOException {
			java.util.Date dateReturn = null;
			int length = 0;
			length = dis.readByte();
			if (length == -1) {
				dateReturn = null;
			} else {
				dateReturn = new Date(dis.readLong());
			}
			return dateReturn;
		}

		private void writeDate(java.util.Date date1, ObjectOutputStream dos) throws IOException {
			if (date1 == null) {
				dos.writeByte(-1);
			} else {
				dos.writeByte(0);
				dos.writeLong(date1.getTime());
			}
		}

		private Integer readInteger(ObjectInputStream dis) throws IOException {
			Integer intReturn;
			int length = 0;
			length = dis.readByte();
			if (length == -1) {
				intReturn = null;
			} else {
				intReturn = dis.readInt();
			}
			return intReturn;
		}

		private void writeInteger(Integer intNum, ObjectOutputStream dos) throws IOException {
			if (intNum == null) {
				dos.writeByte(-1);
			} else {
				dos.writeByte(0);
				dos.writeInt(intNum);
			}
		}

		public void readData(ObjectInputStream dis) {

			synchronized (commonByteArrayLock_WIPO_PROJECTS_E1a_Marc_Userdoc_a_interm) {

				try {

					int length = 0;

					this.sec_documento = dis.readInt();

					this.tip_documento = readString(dis);

					length = dis.readByte();
					if (length == -1) {
						this.num_acta_documento = null;
					} else {
						this.num_acta_documento = dis.readLong();
					}

					length = dis.readByte();
					if (length == -1) {
						this.num_acta = null;
					} else {
						this.num_acta = dis.readLong();
					}

					length = dis.readByte();
					if (length == -1) {
						this.num_registro = null;
					} else {
						this.num_registro = dis.readLong();
					}

					this.fec_documento = readDate(dis);

					this.obs_documento = readString(dis);

					this.nom_solicitante = readString(dis);

					this.cod_pais = readString(dis);

					length = dis.readByte();
					if (length == -1) {
						this.num_agente = null;
					} else {
						this.num_agente = dis.readShort();
					}

					this.fec_ingreso = readDate(dis);

					length = dis.readByte();
					if (length == -1) {
						this.tip_tramite = null;
					} else {
						this.tip_tramite = dis.readShort();
					}

					this.cod_status = readString(dis);

					this.fec_status = readDate(dis);

					this.num_registro_poder = readInteger(dis);

					length = dis.readByte();
					if (length == -1) {
						this.num_agente_old = null;
					} else {
						this.num_agente_old = dis.readShort();
					}

					length = dis.readByte();
					if (length == -1) {
						this.cobro_caja = null;
					} else {
						this.cobro_caja = dis.readLong();
					}

					this.ref_pago = readString(dis);

				} catch (IOException e) {
					throw new RuntimeException(e);

				}

			}

		}

		public void writeData(ObjectOutputStream dos) {
			try {

				// int

				dos.writeInt(this.sec_documento);

				// String

				writeString(this.tip_documento, dos);

				// Long

				if (this.num_acta_documento == null) {
					dos.writeByte(-1);
				} else {
					dos.writeByte(0);
					dos.writeLong(this.num_acta_documento);
				}

				// Long

				if (this.num_acta == null) {
					dos.writeByte(-1);
				} else {
					dos.writeByte(0);
					dos.writeLong(this.num_acta);
				}

				// Long

				if (this.num_registro == null) {
					dos.writeByte(-1);
				} else {
					dos.writeByte(0);
					dos.writeLong(this.num_registro);
				}

				// java.util.Date

				writeDate(this.fec_documento, dos);

				// String

				writeString(this.obs_documento, dos);

				// String

				writeString(this.nom_solicitante, dos);

				// String

				writeString(this.cod_pais, dos);

				// Short

				if (this.num_agente == null) {
					dos.writeByte(-1);
				} else {
					dos.writeByte(0);
					dos.writeShort(this.num_agente);
				}

				// java.util.Date

				writeDate(this.fec_ingreso, dos);

				// Short

				if (this.tip_tramite == null) {
					dos.writeByte(-1);
				} else {
					dos.writeByte(0);
					dos.writeShort(this.tip_tramite);
				}

				// String

				writeString(this.cod_status, dos);

				// java.util.Date

				writeDate(this.fec_status, dos);

				// Integer

				writeInteger(this.num_registro_poder, dos);

				// Short

				if (this.num_agente_old == null) {
					dos.writeByte(-1);
				} else {
					dos.writeByte(0);
					dos.writeShort(this.num_agente_old);
				}

				// Long

				if (this.cobro_caja == null) {
					dos.writeByte(-1);
				} else {
					dos.writeByte(0);
					dos.writeLong(this.cobro_caja);
				}

				// String

				writeString(this.ref_pago, dos);

			} catch (IOException e) {
				throw new RuntimeException(e);
			}

		}

		public String toString() {

			StringBuilder sb = new StringBuilder();
			sb.append(super.toString());
			sb.append("[");
			sb.append("sec_documento=" + String.valueOf(sec_documento));
			sb.append(",tip_documento=" + tip_documento);
			sb.append(",num_acta_documento=" + String.valueOf(num_acta_documento));
			sb.append(",num_acta=" + String.valueOf(num_acta));
			sb.append(",num_registro=" + String.valueOf(num_registro));
			sb.append(",fec_documento=" + String.valueOf(fec_documento));
			sb.append(",obs_documento=" + obs_documento);
			sb.append(",nom_solicitante=" + nom_solicitante);
			sb.append(",cod_pais=" + cod_pais);
			sb.append(",num_agente=" + String.valueOf(num_agente));
			sb.append(",fec_ingreso=" + String.valueOf(fec_ingreso));
			sb.append(",tip_tramite=" + String.valueOf(tip_tramite));
			sb.append(",cod_status=" + cod_status);
			sb.append(",fec_status=" + String.valueOf(fec_status));
			sb.append(",num_registro_poder=" + String.valueOf(num_registro_poder));
			sb.append(",num_agente_old=" + String.valueOf(num_agente_old));
			sb.append(",cobro_caja=" + String.valueOf(cobro_caja));
			sb.append(",ref_pago=" + ref_pago);
			sb.append("]");

			return sb.toString();
		}

		/**
		 * Compare keys
		 */
		public int compareTo(row21Struct other) {

			int returnValue = -1;

			return returnValue;
		}

		private int checkNullsAndCompare(Object object1, Object object2) {
			int returnValue = 0;
			if (object1 instanceof Comparable && object2 instanceof Comparable) {
				returnValue = ((Comparable) object1).compareTo(object2);
			} else if (object1 != null && object2 != null) {
				returnValue = compareStrings(object1.toString(), object2.toString());
			} else if (object1 == null && object2 != null) {
				returnValue = 1;
			} else if (object1 != null && object2 == null) {
				returnValue = -1;
			} else {
				returnValue = 0;
			}

			return returnValue;
		}

		private int compareStrings(String string1, String string2) {
			return string1.compareTo(string2);
		}

	}

	public static class after_tDBInput_1Struct implements routines.system.IPersistableRow<after_tDBInput_1Struct> {
		final static byte[] commonByteArrayLock_WIPO_PROJECTS_E1a_Marc_Userdoc_a_interm = new byte[0];
		static byte[] commonByteArray_WIPO_PROJECTS_E1a_Marc_Userdoc_a_interm = new byte[0];

		public int sec_documento;

		public int getSec_documento() {
			return this.sec_documento;
		}

		public String tip_documento;

		public String getTip_documento() {
			return this.tip_documento;
		}

		public Long num_acta_documento;

		public Long getNum_acta_documento() {
			return this.num_acta_documento;
		}

		public Long num_acta;

		public Long getNum_acta() {
			return this.num_acta;
		}

		public Long num_registro;

		public Long getNum_registro() {
			return this.num_registro;
		}

		public java.util.Date fec_documento;

		public java.util.Date getFec_documento() {
			return this.fec_documento;
		}

		public String obs_documento;

		public String getObs_documento() {
			return this.obs_documento;
		}

		public String nom_solicitante;

		public String getNom_solicitante() {
			return this.nom_solicitante;
		}

		public String cod_pais;

		public String getCod_pais() {
			return this.cod_pais;
		}

		public Short num_agente;

		public Short getNum_agente() {
			return this.num_agente;
		}

		public java.util.Date fec_ingreso;

		public java.util.Date getFec_ingreso() {
			return this.fec_ingreso;
		}

		public Short tip_tramite;

		public Short getTip_tramite() {
			return this.tip_tramite;
		}

		public String cod_status;

		public String getCod_status() {
			return this.cod_status;
		}

		public java.util.Date fec_status;

		public java.util.Date getFec_status() {
			return this.fec_status;
		}

		public Integer num_registro_poder;

		public Integer getNum_registro_poder() {
			return this.num_registro_poder;
		}

		public Short num_agente_old;

		public Short getNum_agente_old() {
			return this.num_agente_old;
		}

		public Long cobro_caja;

		public Long getCobro_caja() {
			return this.cobro_caja;
		}

		public String ref_pago;

		public String getRef_pago() {
			return this.ref_pago;
		}

		private String readString(ObjectInputStream dis) throws IOException {
			String strReturn = null;
			int length = 0;
			length = dis.readInt();
			if (length == -1) {
				strReturn = null;
			} else {
				if (length > commonByteArray_WIPO_PROJECTS_E1a_Marc_Userdoc_a_interm.length) {
					if (length < 1024 && commonByteArray_WIPO_PROJECTS_E1a_Marc_Userdoc_a_interm.length == 0) {
						commonByteArray_WIPO_PROJECTS_E1a_Marc_Userdoc_a_interm = new byte[1024];
					} else {
						commonByteArray_WIPO_PROJECTS_E1a_Marc_Userdoc_a_interm = new byte[2 * length];
					}
				}
				dis.readFully(commonByteArray_WIPO_PROJECTS_E1a_Marc_Userdoc_a_interm, 0, length);
				strReturn = new String(commonByteArray_WIPO_PROJECTS_E1a_Marc_Userdoc_a_interm, 0, length, utf8Charset);
			}
			return strReturn;
		}

		private void writeString(String str, ObjectOutputStream dos) throws IOException {
			if (str == null) {
				dos.writeInt(-1);
			} else {
				byte[] byteArray = str.getBytes(utf8Charset);
				dos.writeInt(byteArray.length);
				dos.write(byteArray);
			}
		}

		private java.util.Date readDate(ObjectInputStream dis) throws IOException {
			java.util.Date dateReturn = null;
			int length = 0;
			length = dis.readByte();
			if (length == -1) {
				dateReturn = null;
			} else {
				dateReturn = new Date(dis.readLong());
			}
			return dateReturn;
		}

		private void writeDate(java.util.Date date1, ObjectOutputStream dos) throws IOException {
			if (date1 == null) {
				dos.writeByte(-1);
			} else {
				dos.writeByte(0);
				dos.writeLong(date1.getTime());
			}
		}

		private Integer readInteger(ObjectInputStream dis) throws IOException {
			Integer intReturn;
			int length = 0;
			length = dis.readByte();
			if (length == -1) {
				intReturn = null;
			} else {
				intReturn = dis.readInt();
			}
			return intReturn;
		}

		private void writeInteger(Integer intNum, ObjectOutputStream dos) throws IOException {
			if (intNum == null) {
				dos.writeByte(-1);
			} else {
				dos.writeByte(0);
				dos.writeInt(intNum);
			}
		}

		public void readData(ObjectInputStream dis) {

			synchronized (commonByteArrayLock_WIPO_PROJECTS_E1a_Marc_Userdoc_a_interm) {

				try {

					int length = 0;

					this.sec_documento = dis.readInt();

					this.tip_documento = readString(dis);

					length = dis.readByte();
					if (length == -1) {
						this.num_acta_documento = null;
					} else {
						this.num_acta_documento = dis.readLong();
					}

					length = dis.readByte();
					if (length == -1) {
						this.num_acta = null;
					} else {
						this.num_acta = dis.readLong();
					}

					length = dis.readByte();
					if (length == -1) {
						this.num_registro = null;
					} else {
						this.num_registro = dis.readLong();
					}

					this.fec_documento = readDate(dis);

					this.obs_documento = readString(dis);

					this.nom_solicitante = readString(dis);

					this.cod_pais = readString(dis);

					length = dis.readByte();
					if (length == -1) {
						this.num_agente = null;
					} else {
						this.num_agente = dis.readShort();
					}

					this.fec_ingreso = readDate(dis);

					length = dis.readByte();
					if (length == -1) {
						this.tip_tramite = null;
					} else {
						this.tip_tramite = dis.readShort();
					}

					this.cod_status = readString(dis);

					this.fec_status = readDate(dis);

					this.num_registro_poder = readInteger(dis);

					length = dis.readByte();
					if (length == -1) {
						this.num_agente_old = null;
					} else {
						this.num_agente_old = dis.readShort();
					}

					length = dis.readByte();
					if (length == -1) {
						this.cobro_caja = null;
					} else {
						this.cobro_caja = dis.readLong();
					}

					this.ref_pago = readString(dis);

				} catch (IOException e) {
					throw new RuntimeException(e);

				}

			}

		}

		public void writeData(ObjectOutputStream dos) {
			try {

				// int

				dos.writeInt(this.sec_documento);

				// String

				writeString(this.tip_documento, dos);

				// Long

				if (this.num_acta_documento == null) {
					dos.writeByte(-1);
				} else {
					dos.writeByte(0);
					dos.writeLong(this.num_acta_documento);
				}

				// Long

				if (this.num_acta == null) {
					dos.writeByte(-1);
				} else {
					dos.writeByte(0);
					dos.writeLong(this.num_acta);
				}

				// Long

				if (this.num_registro == null) {
					dos.writeByte(-1);
				} else {
					dos.writeByte(0);
					dos.writeLong(this.num_registro);
				}

				// java.util.Date

				writeDate(this.fec_documento, dos);

				// String

				writeString(this.obs_documento, dos);

				// String

				writeString(this.nom_solicitante, dos);

				// String

				writeString(this.cod_pais, dos);

				// Short

				if (this.num_agente == null) {
					dos.writeByte(-1);
				} else {
					dos.writeByte(0);
					dos.writeShort(this.num_agente);
				}

				// java.util.Date

				writeDate(this.fec_ingreso, dos);

				// Short

				if (this.tip_tramite == null) {
					dos.writeByte(-1);
				} else {
					dos.writeByte(0);
					dos.writeShort(this.tip_tramite);
				}

				// String

				writeString(this.cod_status, dos);

				// java.util.Date

				writeDate(this.fec_status, dos);

				// Integer

				writeInteger(this.num_registro_poder, dos);

				// Short

				if (this.num_agente_old == null) {
					dos.writeByte(-1);
				} else {
					dos.writeByte(0);
					dos.writeShort(this.num_agente_old);
				}

				// Long

				if (this.cobro_caja == null) {
					dos.writeByte(-1);
				} else {
					dos.writeByte(0);
					dos.writeLong(this.cobro_caja);
				}

				// String

				writeString(this.ref_pago, dos);

			} catch (IOException e) {
				throw new RuntimeException(e);
			}

		}

		public String toString() {

			StringBuilder sb = new StringBuilder();
			sb.append(super.toString());
			sb.append("[");
			sb.append("sec_documento=" + String.valueOf(sec_documento));
			sb.append(",tip_documento=" + tip_documento);
			sb.append(",num_acta_documento=" + String.valueOf(num_acta_documento));
			sb.append(",num_acta=" + String.valueOf(num_acta));
			sb.append(",num_registro=" + String.valueOf(num_registro));
			sb.append(",fec_documento=" + String.valueOf(fec_documento));
			sb.append(",obs_documento=" + obs_documento);
			sb.append(",nom_solicitante=" + nom_solicitante);
			sb.append(",cod_pais=" + cod_pais);
			sb.append(",num_agente=" + String.valueOf(num_agente));
			sb.append(",fec_ingreso=" + String.valueOf(fec_ingreso));
			sb.append(",tip_tramite=" + String.valueOf(tip_tramite));
			sb.append(",cod_status=" + cod_status);
			sb.append(",fec_status=" + String.valueOf(fec_status));
			sb.append(",num_registro_poder=" + String.valueOf(num_registro_poder));
			sb.append(",num_agente_old=" + String.valueOf(num_agente_old));
			sb.append(",cobro_caja=" + String.valueOf(cobro_caja));
			sb.append(",ref_pago=" + ref_pago);
			sb.append("]");

			return sb.toString();
		}

		/**
		 * Compare keys
		 */
		public int compareTo(after_tDBInput_1Struct other) {

			int returnValue = -1;

			return returnValue;
		}

		private int checkNullsAndCompare(Object object1, Object object2) {
			int returnValue = 0;
			if (object1 instanceof Comparable && object2 instanceof Comparable) {
				returnValue = ((Comparable) object1).compareTo(object2);
			} else if (object1 != null && object2 != null) {
				returnValue = compareStrings(object1.toString(), object2.toString());
			} else if (object1 == null && object2 != null) {
				returnValue = 1;
			} else if (object1 != null && object2 == null) {
				returnValue = -1;
			} else {
				returnValue = 0;
			}

			return returnValue;
		}

		private int compareStrings(String string1, String string2) {
			return string1.compareTo(string2);
		}

	}

	public void tDBInput_1Process(final java.util.Map<String, Object> globalMap) throws TalendException {
		globalMap.put("tDBInput_1_SUBPROCESS_STATE", 0);

		final boolean execStat = this.execStat;

		String iterateId = "";

		String currentComponent = "";
		java.util.Map<String, Object> resourceMap = new java.util.HashMap<String, Object>();

		try {
			// TDI-39566 avoid throwing an useless Exception
			boolean resumeIt = true;
			if (globalResumeTicket == false && resumeEntryMethodName != null) {
				String currentMethodName = new java.lang.Exception().getStackTrace()[0].getMethodName();
				resumeIt = resumeEntryMethodName.equals(currentMethodName);
			}
			if (resumeIt || globalResumeTicket) { // start the resume
				globalResumeTicket = true;

				tDBInput_10Process(globalMap);
				tDBInput_14Process(globalMap);

				row21Struct row21 = new row21Struct();
				ud_filesStruct ud_files = new ud_filesStruct();
				row23Struct row23 = new row23Struct();

				/**
				 * [tLogRow_5 begin ] start
				 */

				ok_Hash.put("tLogRow_5", false);
				start_Hash.put("tLogRow_5", System.currentTimeMillis());

				currentComponent = "tLogRow_5";

				if (execStat) {
					runStat.updateStatOnConnection(resourceMap, iterateId, 0, 0, "row23");
				}

				int tos_count_tLogRow_5 = 0;

				///////////////////////

				final String OUTPUT_FIELD_SEPARATOR_tLogRow_5 = "|";
				java.io.PrintStream consoleOut_tLogRow_5 = null;

				StringBuilder strBuffer_tLogRow_5 = null;
				int nb_line_tLogRow_5 = 0;
///////////////////////    			

				/**
				 * [tLogRow_5 begin ] stop
				 */

				/**
				 * [tDBOutput_5 begin ] start
				 */

				ok_Hash.put("tDBOutput_5", false);
				start_Hash.put("tDBOutput_5", System.currentTimeMillis());

				currentComponent = "tDBOutput_5";

				if (execStat) {
					runStat.updateStatOnConnection(resourceMap, iterateId, 0, 0, "ud_files");
				}

				int tos_count_tDBOutput_5 = 0;

				int nb_line_tDBOutput_5 = 0;
				int nb_line_update_tDBOutput_5 = 0;
				int nb_line_inserted_tDBOutput_5 = 0;
				int nb_line_deleted_tDBOutput_5 = 0;
				int nb_line_rejected_tDBOutput_5 = 0;

				int deletedCount_tDBOutput_5 = 0;
				int updatedCount_tDBOutput_5 = 0;
				int insertedCount_tDBOutput_5 = 0;
				int rejectedCount_tDBOutput_5 = 0;
				String dbschema_tDBOutput_5 = null;
				String tableName_tDBOutput_5 = null;
				boolean whetherReject_tDBOutput_5 = false;

				java.util.Calendar calendar_tDBOutput_5 = java.util.Calendar.getInstance();
				long year1_tDBOutput_5 = TalendDate.parseDate("yyyy-MM-dd", "0001-01-01").getTime();
				long year2_tDBOutput_5 = TalendDate.parseDate("yyyy-MM-dd", "1753-01-01").getTime();
				long year10000_tDBOutput_5 = TalendDate.parseDate("yyyy-MM-dd HH:mm:ss", "9999-12-31 24:00:00")
						.getTime();
				long date_tDBOutput_5;

				java.util.Calendar calendar_datetimeoffset_tDBOutput_5 = java.util.Calendar
						.getInstance(java.util.TimeZone.getTimeZone("UTC"));

				java.sql.Connection conn_tDBOutput_5 = null;
				String dbUser_tDBOutput_5 = null;
				dbschema_tDBOutput_5 = (String) globalMap.get("dbschema_tDBConnection_1");

				conn_tDBOutput_5 = (java.sql.Connection) globalMap.get("conn_tDBConnection_1");

				if (dbschema_tDBOutput_5 == null || dbschema_tDBOutput_5.trim().length() == 0) {
					tableName_tDBOutput_5 = "VW_IMPORT_USERDOC_FILES";
				} else {
					tableName_tDBOutput_5 = dbschema_tDBOutput_5 + "].[" + "VW_IMPORT_USERDOC_FILES";
				}
				int count_tDBOutput_5 = 0;

				String insert_tDBOutput_5 = "INSERT INTO [" + tableName_tDBOutput_5
						+ "] ([USERDOC_SEQ],[USERDOC_SERIES],[USERDOC_NBR],[FILE_SEQ],[FILE_TYPE],[FILE_SERIES],[FILE_NBR]) VALUES (?,?,?,?,?,?,?)";
				java.sql.PreparedStatement pstmt_tDBOutput_5 = conn_tDBOutput_5.prepareStatement(insert_tDBOutput_5);
				resourceMap.put("pstmt_tDBOutput_5", pstmt_tDBOutput_5);

				boolean isShareIdentity_tDBOutput_5 = globalMap.get("shareIdentitySetting_tDBConnection_1") != null
						&& (Boolean) globalMap.get("shareIdentitySetting_tDBConnection_1") == true;

				/**
				 * [tDBOutput_5 begin ] stop
				 */

				/**
				 * [tMap_6 begin ] start
				 */

				ok_Hash.put("tMap_6", false);
				start_Hash.put("tMap_6", System.currentTimeMillis());

				currentComponent = "tMap_6";

				if (execStat) {
					runStat.updateStatOnConnection(resourceMap, iterateId, 0, 0, "row21");
				}

				int tos_count_tMap_6 = 0;

// ###############################
// # Lookup's keys initialization

				org.talend.designer.components.lookup.memory.AdvancedMemoryLookup<row15Struct> tHash_Lookup_row15 = (org.talend.designer.components.lookup.memory.AdvancedMemoryLookup<row15Struct>) ((org.talend.designer.components.lookup.memory.AdvancedMemoryLookup<row15Struct>) globalMap
						.get("tHash_Lookup_row15"));

				row15Struct row15HashKey = new row15Struct();
				row15Struct row15Default = new row15Struct();

				org.talend.designer.components.lookup.memory.AdvancedMemoryLookup<row22Struct> tHash_Lookup_row22 = (org.talend.designer.components.lookup.memory.AdvancedMemoryLookup<row22Struct>) ((org.talend.designer.components.lookup.memory.AdvancedMemoryLookup<row22Struct>) globalMap
						.get("tHash_Lookup_row22"));

				row22Struct row22HashKey = new row22Struct();
				row22Struct row22Default = new row22Struct();
// ###############################        

// ###############################
// # Vars initialization
				class Var__tMap_6__Struct {
				}
				Var__tMap_6__Struct Var__tMap_6 = new Var__tMap_6__Struct();
// ###############################

// ###############################
// # Outputs initialization
				ud_filesStruct ud_files_tmp = new ud_filesStruct();
// ###############################

				/**
				 * [tMap_6 begin ] stop
				 */

				/**
				 * [tDBInput_1 begin ] start
				 */

				ok_Hash.put("tDBInput_1", false);
				start_Hash.put("tDBInput_1", System.currentTimeMillis());

				currentComponent = "tDBInput_1";

				int tos_count_tDBInput_1 = 0;

				int nb_line_tDBInput_1 = 0;
				java.sql.Connection conn_tDBInput_1 = null;
				conn_tDBInput_1 = (java.sql.Connection) globalMap.get("conn_tDBConnection_2");

				java.sql.Statement stmt_tDBInput_1 = conn_tDBInput_1.createStatement();

				String dbquery_tDBInput_1 = "SELECT \n  sec_documento, \n  tip_documento, \n  num_acta_documento, \n  num_acta, \n  num_registro, \n  fec_documento,"
						+ " \n  obs_documento, \n  nom_solicitante, \n  cod_pais, \n  num_agente, \n  fec_ingreso, \n  tip_tramite, \n  cod_status,"
						+ " \n  fec_status, \n  num_registro_poder, \n  num_agente_old, \n  cobro_caja, \n  ref_pago\nFROM documento \n\n\nwhere   "
						+ "num_acta \n\nin (select  num_acta \n\n FROM marca) and num_acta_documento is not null";

				globalMap.put("tDBInput_1_QUERY", dbquery_tDBInput_1);
				java.sql.ResultSet rs_tDBInput_1 = null;

				try {
					rs_tDBInput_1 = stmt_tDBInput_1.executeQuery(dbquery_tDBInput_1);
					java.sql.ResultSetMetaData rsmd_tDBInput_1 = rs_tDBInput_1.getMetaData();
					int colQtyInRs_tDBInput_1 = rsmd_tDBInput_1.getColumnCount();

					String tmpContent_tDBInput_1 = null;

					while (rs_tDBInput_1.next()) {
						nb_line_tDBInput_1++;

						if (colQtyInRs_tDBInput_1 < 1) {
							row21.sec_documento = 0;
						} else {

							row21.sec_documento = rs_tDBInput_1.getInt(1);
							if (rs_tDBInput_1.wasNull()) {
								throw new RuntimeException("Null value in non-Nullable column");
							}
						}
						if (colQtyInRs_tDBInput_1 < 2) {
							row21.tip_documento = null;
						} else {

							row21.tip_documento = routines.system.JDBCUtil.getString(rs_tDBInput_1, 2, false);
						}
						if (colQtyInRs_tDBInput_1 < 3) {
							row21.num_acta_documento = null;
						} else {

							row21.num_acta_documento = rs_tDBInput_1.getLong(3);
							if (rs_tDBInput_1.wasNull()) {
								row21.num_acta_documento = null;
							}
						}
						if (colQtyInRs_tDBInput_1 < 4) {
							row21.num_acta = null;
						} else {

							row21.num_acta = rs_tDBInput_1.getLong(4);
							if (rs_tDBInput_1.wasNull()) {
								row21.num_acta = null;
							}
						}
						if (colQtyInRs_tDBInput_1 < 5) {
							row21.num_registro = null;
						} else {

							row21.num_registro = rs_tDBInput_1.getLong(5);
							if (rs_tDBInput_1.wasNull()) {
								row21.num_registro = null;
							}
						}
						if (colQtyInRs_tDBInput_1 < 6) {
							row21.fec_documento = null;
						} else {

							row21.fec_documento = routines.system.JDBCUtil.getDate(rs_tDBInput_1, 6);
						}
						if (colQtyInRs_tDBInput_1 < 7) {
							row21.obs_documento = null;
						} else {

							row21.obs_documento = routines.system.JDBCUtil.getString(rs_tDBInput_1, 7, false);
						}
						if (colQtyInRs_tDBInput_1 < 8) {
							row21.nom_solicitante = null;
						} else {

							row21.nom_solicitante = routines.system.JDBCUtil.getString(rs_tDBInput_1, 8, false);
						}
						if (colQtyInRs_tDBInput_1 < 9) {
							row21.cod_pais = null;
						} else {

							row21.cod_pais = routines.system.JDBCUtil.getString(rs_tDBInput_1, 9, false);
						}
						if (colQtyInRs_tDBInput_1 < 10) {
							row21.num_agente = null;
						} else {

							row21.num_agente = rs_tDBInput_1.getShort(10);
							if (rs_tDBInput_1.wasNull()) {
								row21.num_agente = null;
							}
						}
						if (colQtyInRs_tDBInput_1 < 11) {
							row21.fec_ingreso = null;
						} else {

							row21.fec_ingreso = routines.system.JDBCUtil.getDate(rs_tDBInput_1, 11);
						}
						if (colQtyInRs_tDBInput_1 < 12) {
							row21.tip_tramite = null;
						} else {

							row21.tip_tramite = rs_tDBInput_1.getShort(12);
							if (rs_tDBInput_1.wasNull()) {
								row21.tip_tramite = null;
							}
						}
						if (colQtyInRs_tDBInput_1 < 13) {
							row21.cod_status = null;
						} else {

							row21.cod_status = routines.system.JDBCUtil.getString(rs_tDBInput_1, 13, false);
						}
						if (colQtyInRs_tDBInput_1 < 14) {
							row21.fec_status = null;
						} else {

							row21.fec_status = routines.system.JDBCUtil.getDate(rs_tDBInput_1, 14);
						}
						if (colQtyInRs_tDBInput_1 < 15) {
							row21.num_registro_poder = null;
						} else {

							row21.num_registro_poder = rs_tDBInput_1.getInt(15);
							if (rs_tDBInput_1.wasNull()) {
								row21.num_registro_poder = null;
							}
						}
						if (colQtyInRs_tDBInput_1 < 16) {
							row21.num_agente_old = null;
						} else {

							row21.num_agente_old = rs_tDBInput_1.getShort(16);
							if (rs_tDBInput_1.wasNull()) {
								row21.num_agente_old = null;
							}
						}
						if (colQtyInRs_tDBInput_1 < 17) {
							row21.cobro_caja = null;
						} else {

							row21.cobro_caja = rs_tDBInput_1.getLong(17);
							if (rs_tDBInput_1.wasNull()) {
								row21.cobro_caja = null;
							}
						}
						if (colQtyInRs_tDBInput_1 < 18) {
							row21.ref_pago = null;
						} else {

							row21.ref_pago = routines.system.JDBCUtil.getString(rs_tDBInput_1, 18, false);
						}

						/**
						 * [tDBInput_1 begin ] stop
						 */

						/**
						 * [tDBInput_1 main ] start
						 */

						currentComponent = "tDBInput_1";

						tos_count_tDBInput_1++;

						/**
						 * [tDBInput_1 main ] stop
						 */

						/**
						 * [tDBInput_1 process_data_begin ] start
						 */

						currentComponent = "tDBInput_1";

						/**
						 * [tDBInput_1 process_data_begin ] stop
						 */

						/**
						 * [tMap_6 main ] start
						 */

						currentComponent = "tMap_6";

						if (execStat) {
							runStat.updateStatOnConnection(iterateId, 1, 1

									, "row21"

							);
						}

						boolean hasCasePrimitiveKeyWithNull_tMap_6 = false;

						// ###############################
						// # Input tables (lookups)
						boolean rejectedInnerJoin_tMap_6 = false;
						boolean mainRowRejected_tMap_6 = false;

						///////////////////////////////////////////////
						// Starting Lookup Table "row15"
						///////////////////////////////////////////////

						boolean forceLooprow15 = false;

						row15Struct row15ObjectFromLookup = null;

						if (!rejectedInnerJoin_tMap_6) { // G_TM_M_020

							hasCasePrimitiveKeyWithNull_tMap_6 = false;

							row15HashKey.DOC_NBR = new BigDecimal(row21.sec_documento);

							row15HashKey.hashCodeDirty = true;

							tHash_Lookup_row15.lookup(row15HashKey);

							if (!tHash_Lookup_row15.hasNext()) { // G_TM_M_090

								rejectedInnerJoin_tMap_6 = true;

								forceLooprow15 = true;

							} // G_TM_M_090

						} // G_TM_M_020

						else { // G 20 - G 21
							forceLooprow15 = true;
						} // G 21

						row15Struct row15 = null;

						while ((tHash_Lookup_row15 != null && tHash_Lookup_row15.hasNext()) || forceLooprow15) { // G_TM_M_043

							// CALL close loop of lookup 'row15'

							row15Struct fromLookup_row15 = null;
							row15 = row15Default;

							if (!forceLooprow15) { // G 46

								fromLookup_row15 = tHash_Lookup_row15.next();

								if (fromLookup_row15 != null) {
									row15 = fromLookup_row15;
								}

							} // G 46

							forceLooprow15 = false;

							///////////////////////////////////////////////
							// Starting Lookup Table "row22"
							///////////////////////////////////////////////

							boolean forceLooprow22 = false;

							row22Struct row22ObjectFromLookup = null;

							if (!rejectedInnerJoin_tMap_6) { // G_TM_M_020

								hasCasePrimitiveKeyWithNull_tMap_6 = false;

								row22HashKey.FILE_NBR = new BigDecimal(row21.num_acta);

								row22HashKey.hashCodeDirty = true;

								tHash_Lookup_row22.lookup(row22HashKey);

								if (!tHash_Lookup_row22.hasNext()) { // G_TM_M_090

									rejectedInnerJoin_tMap_6 = true;

									forceLooprow22 = true;

								} // G_TM_M_090

							} // G_TM_M_020

							else { // G 20 - G 21
								forceLooprow22 = true;
							} // G 21

							row22Struct row22 = null;

							while ((tHash_Lookup_row22 != null && tHash_Lookup_row22.hasNext()) || forceLooprow22) { // G_TM_M_043

								// CALL close loop of lookup 'row22'

								row22Struct fromLookup_row22 = null;
								row22 = row22Default;

								if (!forceLooprow22) { // G 46

									fromLookup_row22 = tHash_Lookup_row22.next();

									if (fromLookup_row22 != null) {
										row22 = fromLookup_row22;
									}

								} // G 46

								forceLooprow22 = false;

								// ###############################
								{ // start of Var scope

									// ###############################
									// # Vars tables

									Var__tMap_6__Struct Var = Var__tMap_6;// ###############################
									// ###############################
									// # Output tables

									ud_files = null;

									if (!rejectedInnerJoin_tMap_6) {

// # Output table : 'ud_files'
										ud_files_tmp.USERDOC_SEQ = row15.USERDOC_SEQ;
										ud_files_tmp.USERDOC_SERIES = row15.USERDOC_SERIES;
										ud_files_tmp.USERDOC_NBR = row15.USERDOC_NBR;
										ud_files_tmp.FILE_SEQ = row22.FILE_SEQ;
										ud_files_tmp.FILE_TYPE = row22.FILE_TYPE;
										ud_files_tmp.FILE_SERIES = row22.FILE_SERIES;
										ud_files_tmp.FILE_NBR = row22.FILE_NBR;
										ud_files = ud_files_tmp;
									} // closing inner join bracket (2)
// ###############################

								} // end of Var scope

								rejectedInnerJoin_tMap_6 = false;

								tos_count_tMap_6++;

								/**
								 * [tMap_6 main ] stop
								 */

								/**
								 * [tMap_6 process_data_begin ] start
								 */

								currentComponent = "tMap_6";

								/**
								 * [tMap_6 process_data_begin ] stop
								 */
// Start of branch "ud_files"
								if (ud_files != null) {
									row23 = null;

									/**
									 * [tDBOutput_5 main ] start
									 */

									currentComponent = "tDBOutput_5";

									if (execStat) {
										runStat.updateStatOnConnection(iterateId, 1, 1

												, "ud_files"

										);
									}

									row23 = null;
									whetherReject_tDBOutput_5 = false;
									try {
										if (ud_files.USERDOC_SEQ == null) {
											pstmt_tDBOutput_5.setNull(1, java.sql.Types.VARCHAR);
										} else {
											pstmt_tDBOutput_5.setString(1, ud_files.USERDOC_SEQ);
										}

										pstmt_tDBOutput_5.setBigDecimal(2, ud_files.USERDOC_SERIES);

										pstmt_tDBOutput_5.setBigDecimal(3, ud_files.USERDOC_NBR);

										if (ud_files.FILE_SEQ == null) {
											pstmt_tDBOutput_5.setNull(4, java.sql.Types.VARCHAR);
										} else {
											pstmt_tDBOutput_5.setString(4, ud_files.FILE_SEQ);
										}

										if (ud_files.FILE_TYPE == null) {
											pstmt_tDBOutput_5.setNull(5, java.sql.Types.VARCHAR);
										} else {
											pstmt_tDBOutput_5.setString(5, ud_files.FILE_TYPE);
										}

										pstmt_tDBOutput_5.setBigDecimal(6, ud_files.FILE_SERIES);

										pstmt_tDBOutput_5.setBigDecimal(7, ud_files.FILE_NBR);

										nb_line_tDBOutput_5++;
										insertedCount_tDBOutput_5 = insertedCount_tDBOutput_5
												+ pstmt_tDBOutput_5.executeUpdate();
									} catch (java.lang.Exception e) {
										whetherReject_tDBOutput_5 = true;
										row23 = new row23Struct();
										row23.USERDOC_SEQ = ud_files.USERDOC_SEQ;
										row23.USERDOC_SERIES = ud_files.USERDOC_SERIES;
										row23.USERDOC_NBR = ud_files.USERDOC_NBR;
										row23.FILE_SEQ = ud_files.FILE_SEQ;
										row23.FILE_TYPE = ud_files.FILE_TYPE;
										row23.FILE_SERIES = ud_files.FILE_SERIES;
										row23.FILE_NBR = ud_files.FILE_NBR;
										rejectedCount_tDBOutput_5 = rejectedCount_tDBOutput_5 + 1;
										row23.errorCode = ((java.sql.SQLException) e).getSQLState();
										row23.errorMessage = e.getMessage() + " - Line: " + tos_count_tDBOutput_5;
									}
									if (!whetherReject_tDBOutput_5) {
									}
									////////// batch execute by batch size///////
									class LimitBytesHelper_tDBOutput_5 {
										public int limitBytePart1(int counter,
												java.sql.PreparedStatement pstmt_tDBOutput_5) throws Exception {
											try {

												for (int countEach_tDBOutput_5 : pstmt_tDBOutput_5.executeBatch()) {
													if (countEach_tDBOutput_5 == -2 || countEach_tDBOutput_5 == -3) {
														break;
													}
													counter += countEach_tDBOutput_5;
												}

											} catch (java.sql.BatchUpdateException e) {

												int countSum_tDBOutput_5 = 0;
												for (int countEach_tDBOutput_5 : e.getUpdateCounts()) {
													counter += (countEach_tDBOutput_5 < 0 ? 0 : countEach_tDBOutput_5);
												}

												System.err.println(e.getMessage());

											}
											return counter;
										}

										public int limitBytePart2(int counter,
												java.sql.PreparedStatement pstmt_tDBOutput_5) throws Exception {
											try {

												for (int countEach_tDBOutput_5 : pstmt_tDBOutput_5.executeBatch()) {
													if (countEach_tDBOutput_5 == -2 || countEach_tDBOutput_5 == -3) {
														break;
													}
													counter += countEach_tDBOutput_5;
												}

											} catch (java.sql.BatchUpdateException e) {

												for (int countEach_tDBOutput_5 : e.getUpdateCounts()) {
													counter += (countEach_tDBOutput_5 < 0 ? 0 : countEach_tDBOutput_5);
												}

												System.err.println(e.getMessage());

											}
											return counter;
										}
									}

									//////////// commit every////////////

									tos_count_tDBOutput_5++;

									/**
									 * [tDBOutput_5 main ] stop
									 */

									/**
									 * [tDBOutput_5 process_data_begin ] start
									 */

									currentComponent = "tDBOutput_5";

									/**
									 * [tDBOutput_5 process_data_begin ] stop
									 */
// Start of branch "row23"
									if (row23 != null) {

										/**
										 * [tLogRow_5 main ] start
										 */

										currentComponent = "tLogRow_5";

										if (execStat) {
											runStat.updateStatOnConnection(iterateId, 1, 1

													, "row23"

											);
										}

///////////////////////		

										strBuffer_tLogRow_5 = new StringBuilder();

										if (row23.USERDOC_SEQ != null) { //

											strBuffer_tLogRow_5.append(String.valueOf(row23.USERDOC_SEQ));

										} //

										strBuffer_tLogRow_5.append("|");

										if (row23.USERDOC_SERIES != null) { //

											strBuffer_tLogRow_5.append(row23.USERDOC_SERIES
													.setScale(0, java.math.RoundingMode.HALF_UP).toPlainString());

										} //

										strBuffer_tLogRow_5.append("|");

										if (row23.USERDOC_NBR != null) { //

											strBuffer_tLogRow_5.append(row23.USERDOC_NBR
													.setScale(0, java.math.RoundingMode.HALF_UP).toPlainString());

										} //

										strBuffer_tLogRow_5.append("|");

										if (row23.FILE_SEQ != null) { //

											strBuffer_tLogRow_5.append(String.valueOf(row23.FILE_SEQ));

										} //

										strBuffer_tLogRow_5.append("|");

										if (row23.FILE_TYPE != null) { //

											strBuffer_tLogRow_5.append(String.valueOf(row23.FILE_TYPE));

										} //

										strBuffer_tLogRow_5.append("|");

										if (row23.FILE_SERIES != null) { //

											strBuffer_tLogRow_5.append(row23.FILE_SERIES
													.setScale(0, java.math.RoundingMode.HALF_UP).toPlainString());

										} //

										strBuffer_tLogRow_5.append("|");

										if (row23.FILE_NBR != null) { //

											strBuffer_tLogRow_5.append(row23.FILE_NBR
													.setScale(0, java.math.RoundingMode.HALF_UP).toPlainString());

										} //

										strBuffer_tLogRow_5.append("|");

										if (row23.errorCode != null) { //

											strBuffer_tLogRow_5.append(String.valueOf(row23.errorCode));

										} //

										strBuffer_tLogRow_5.append("|");

										if (row23.errorMessage != null) { //

											strBuffer_tLogRow_5.append(String.valueOf(row23.errorMessage));

										} //

										if (globalMap.get("tLogRow_CONSOLE") != null) {
											consoleOut_tLogRow_5 = (java.io.PrintStream) globalMap
													.get("tLogRow_CONSOLE");
										} else {
											consoleOut_tLogRow_5 = new java.io.PrintStream(
													new java.io.BufferedOutputStream(System.out));
											globalMap.put("tLogRow_CONSOLE", consoleOut_tLogRow_5);
										}
										consoleOut_tLogRow_5.println(strBuffer_tLogRow_5.toString());
										consoleOut_tLogRow_5.flush();
										nb_line_tLogRow_5++;
//////

//////                    

///////////////////////    			

										tos_count_tLogRow_5++;

										/**
										 * [tLogRow_5 main ] stop
										 */

										/**
										 * [tLogRow_5 process_data_begin ] start
										 */

										currentComponent = "tLogRow_5";

										/**
										 * [tLogRow_5 process_data_begin ] stop
										 */

										/**
										 * [tLogRow_5 process_data_end ] start
										 */

										currentComponent = "tLogRow_5";

										/**
										 * [tLogRow_5 process_data_end ] stop
										 */

									} // End of branch "row23"

									/**
									 * [tDBOutput_5 process_data_end ] start
									 */

									currentComponent = "tDBOutput_5";

									/**
									 * [tDBOutput_5 process_data_end ] stop
									 */

								} // End of branch "ud_files"

							} // close loop of lookup 'row22' // G_TM_M_043

						} // close loop of lookup 'row15' // G_TM_M_043

						/**
						 * [tMap_6 process_data_end ] start
						 */

						currentComponent = "tMap_6";

						/**
						 * [tMap_6 process_data_end ] stop
						 */

						/**
						 * [tDBInput_1 process_data_end ] start
						 */

						currentComponent = "tDBInput_1";

						/**
						 * [tDBInput_1 process_data_end ] stop
						 */

						/**
						 * [tDBInput_1 end ] start
						 */

						currentComponent = "tDBInput_1";

					}
				} finally {
					if (rs_tDBInput_1 != null) {
						rs_tDBInput_1.close();
					}
					if (stmt_tDBInput_1 != null) {
						stmt_tDBInput_1.close();
					}
				}
				globalMap.put("tDBInput_1_NB_LINE", nb_line_tDBInput_1);

				ok_Hash.put("tDBInput_1", true);
				end_Hash.put("tDBInput_1", System.currentTimeMillis());

				/**
				 * [tDBInput_1 end ] stop
				 */

				/**
				 * [tMap_6 end ] start
				 */

				currentComponent = "tMap_6";

// ###############################
// # Lookup hashes releasing
				if (tHash_Lookup_row15 != null) {
					tHash_Lookup_row15.endGet();
				}
				globalMap.remove("tHash_Lookup_row15");

				if (tHash_Lookup_row22 != null) {
					tHash_Lookup_row22.endGet();
				}
				globalMap.remove("tHash_Lookup_row22");

// ###############################      

				if (execStat) {
					runStat.updateStat(resourceMap, iterateId, 2, 0, "row21");
				}

				ok_Hash.put("tMap_6", true);
				end_Hash.put("tMap_6", System.currentTimeMillis());

				/**
				 * [tMap_6 end ] stop
				 */

				/**
				 * [tDBOutput_5 end ] start
				 */

				currentComponent = "tDBOutput_5";

				if (pstmt_tDBOutput_5 != null) {

					pstmt_tDBOutput_5.close();
					resourceMap.remove("pstmt_tDBOutput_5");

				}
				resourceMap.put("statementClosed_tDBOutput_5", true);

				nb_line_deleted_tDBOutput_5 = nb_line_deleted_tDBOutput_5 + deletedCount_tDBOutput_5;
				nb_line_update_tDBOutput_5 = nb_line_update_tDBOutput_5 + updatedCount_tDBOutput_5;
				nb_line_inserted_tDBOutput_5 = nb_line_inserted_tDBOutput_5 + insertedCount_tDBOutput_5;
				nb_line_rejected_tDBOutput_5 = nb_line_rejected_tDBOutput_5 + rejectedCount_tDBOutput_5;

				globalMap.put("tDBOutput_5_NB_LINE", nb_line_tDBOutput_5);
				globalMap.put("tDBOutput_5_NB_LINE_UPDATED", nb_line_update_tDBOutput_5);
				globalMap.put("tDBOutput_5_NB_LINE_INSERTED", nb_line_inserted_tDBOutput_5);
				globalMap.put("tDBOutput_5_NB_LINE_DELETED", nb_line_deleted_tDBOutput_5);
				globalMap.put("tDBOutput_5_NB_LINE_REJECTED", nb_line_rejected_tDBOutput_5);

				if (execStat) {
					runStat.updateStat(resourceMap, iterateId, 2, 0, "ud_files");
				}

				ok_Hash.put("tDBOutput_5", true);
				end_Hash.put("tDBOutput_5", System.currentTimeMillis());

				/**
				 * [tDBOutput_5 end ] stop
				 */

				/**
				 * [tLogRow_5 end ] start
				 */

				currentComponent = "tLogRow_5";

//////
//////
				globalMap.put("tLogRow_5_NB_LINE", nb_line_tLogRow_5);

///////////////////////    			

				if (execStat) {
					runStat.updateStat(resourceMap, iterateId, 2, 0, "row23");
				}

				ok_Hash.put("tLogRow_5", true);
				end_Hash.put("tLogRow_5", System.currentTimeMillis());

				/**
				 * [tLogRow_5 end ] stop
				 */

			} // end the resume

			if (resumeEntryMethodName == null || globalResumeTicket) {
				resumeUtil.addLog("CHECKPOINT", "CONNECTION:SUBJOB_OK:tDBInput_1:OnSubjobOk", "",
						Thread.currentThread().getId() + "", "", "", "", "", "");
			}

			if (execStat) {
				runStat.updateStatOnConnection("OnSubjobOk18", 0, "ok");
			}

			tDBInput_15Process(globalMap);

		} catch (java.lang.Exception e) {

			TalendException te = new TalendException(e, currentComponent, globalMap);

			throw te;
		} catch (java.lang.Error error) {

			runStat.stopThreadStat();

			throw error;
		} finally {

			// free memory for "tMap_6"
			globalMap.remove("tHash_Lookup_row15");

			// free memory for "tMap_6"
			globalMap.remove("tHash_Lookup_row22");

			try {

				/**
				 * [tDBInput_1 finally ] start
				 */

				currentComponent = "tDBInput_1";

				/**
				 * [tDBInput_1 finally ] stop
				 */

				/**
				 * [tMap_6 finally ] start
				 */

				currentComponent = "tMap_6";

				/**
				 * [tMap_6 finally ] stop
				 */

				/**
				 * [tDBOutput_5 finally ] start
				 */

				currentComponent = "tDBOutput_5";

				if (resourceMap.get("statementClosed_tDBOutput_5") == null) {
					java.sql.PreparedStatement pstmtToClose_tDBOutput_5 = null;
					if ((pstmtToClose_tDBOutput_5 = (java.sql.PreparedStatement) resourceMap
							.remove("pstmt_tDBOutput_5")) != null) {
						pstmtToClose_tDBOutput_5.close();
					}
				}

				/**
				 * [tDBOutput_5 finally ] stop
				 */

				/**
				 * [tLogRow_5 finally ] start
				 */

				currentComponent = "tLogRow_5";

				/**
				 * [tLogRow_5 finally ] stop
				 */

			} catch (java.lang.Exception e) {
				// ignore
			} catch (java.lang.Error error) {
				// ignore
			}
			resourceMap = null;
		}

		globalMap.put("tDBInput_1_SUBPROCESS_STATE", 1);
	}

	public static class row25Struct implements routines.system.IPersistableRow<row25Struct> {
		final static byte[] commonByteArrayLock_WIPO_PROJECTS_E1a_Marc_Userdoc_a_interm = new byte[0];
		static byte[] commonByteArray_WIPO_PROJECTS_E1a_Marc_Userdoc_a_interm = new byte[0];

		public String USERDOC_SEQ;

		public String getUSERDOC_SEQ() {
			return this.USERDOC_SEQ;
		}

		public BigDecimal USERDOC_SERIES;

		public BigDecimal getUSERDOC_SERIES() {
			return this.USERDOC_SERIES;
		}

		public BigDecimal USERDOC_NBR;

		public BigDecimal getUSERDOC_NBR() {
			return this.USERDOC_NBR;
		}

		public BigDecimal IND_SERVICE;

		public BigDecimal getIND_SERVICE() {
			return this.IND_SERVICE;
		}

		public String OWNERSHIP_NOTES;

		public String getOWNERSHIP_NOTES() {
			return this.OWNERSHIP_NOTES;
		}

		public String PERSON_NAME;

		public String getPERSON_NAME() {
			return this.PERSON_NAME;
		}

		public String PERSON_NAME_LANG2;

		public String getPERSON_NAME_LANG2() {
			return this.PERSON_NAME_LANG2;
		}

		public String NATIONALITY_COUNTRY_CODE;

		public String getNATIONALITY_COUNTRY_CODE() {
			return this.NATIONALITY_COUNTRY_CODE;
		}

		public BigDecimal IND_COMPANY;

		public BigDecimal getIND_COMPANY() {
			return this.IND_COMPANY;
		}

		public String LEGAL_NATURE;

		public String getLEGAL_NATURE() {
			return this.LEGAL_NATURE;
		}

		public String LEGAL_NATURE_LANG2;

		public String getLEGAL_NATURE_LANG2() {
			return this.LEGAL_NATURE_LANG2;
		}

		public String LEGAL_ID_TYPE;

		public String getLEGAL_ID_TYPE() {
			return this.LEGAL_ID_TYPE;
		}

		public BigDecimal LEGAL_ID_NBR;

		public BigDecimal getLEGAL_ID_NBR() {
			return this.LEGAL_ID_NBR;
		}

		public String INDIVIDUAL_ID_TYPE;

		public String getINDIVIDUAL_ID_TYPE() {
			return this.INDIVIDUAL_ID_TYPE;
		}

		public BigDecimal INDIVIDUAL_ID_NBR;

		public BigDecimal getINDIVIDUAL_ID_NBR() {
			return this.INDIVIDUAL_ID_NBR;
		}

		public String RESIDENCE_COUNTRY_CODE;

		public String getRESIDENCE_COUNTRY_CODE() {
			return this.RESIDENCE_COUNTRY_CODE;
		}

		public String STATE_NAME;

		public String getSTATE_NAME() {
			return this.STATE_NAME;
		}

		public String STATE_CODE;

		public String getSTATE_CODE() {
			return this.STATE_CODE;
		}

		public String CITY_NAME;

		public String getCITY_NAME() {
			return this.CITY_NAME;
		}

		public String CITY_CODE;

		public String getCITY_CODE() {
			return this.CITY_CODE;
		}

		public String ADDRESS_ZONE;

		public String getADDRESS_ZONE() {
			return this.ADDRESS_ZONE;
		}

		public String ADDRESS_STREET;

		public String getADDRESS_STREET() {
			return this.ADDRESS_STREET;
		}

		public String ADDRESS_STREET_LANG2;

		public String getADDRESS_STREET_LANG2() {
			return this.ADDRESS_STREET_LANG2;
		}

		public String ZIP_CODE;

		public String getZIP_CODE() {
			return this.ZIP_CODE;
		}

		public String EMAIL;

		public String getEMAIL() {
			return this.EMAIL;
		}

		public String TELEPHONE;

		public String getTELEPHONE() {
			return this.TELEPHONE;
		}

		public String PERSON_GROUP_CODE;

		public String getPERSON_GROUP_CODE() {
			return this.PERSON_GROUP_CODE;
		}

		public String errorCode;

		public String getErrorCode() {
			return this.errorCode;
		}

		public String errorMessage;

		public String getErrorMessage() {
			return this.errorMessage;
		}

		private String readString(ObjectInputStream dis) throws IOException {
			String strReturn = null;
			int length = 0;
			length = dis.readInt();
			if (length == -1) {
				strReturn = null;
			} else {
				if (length > commonByteArray_WIPO_PROJECTS_E1a_Marc_Userdoc_a_interm.length) {
					if (length < 1024 && commonByteArray_WIPO_PROJECTS_E1a_Marc_Userdoc_a_interm.length == 0) {
						commonByteArray_WIPO_PROJECTS_E1a_Marc_Userdoc_a_interm = new byte[1024];
					} else {
						commonByteArray_WIPO_PROJECTS_E1a_Marc_Userdoc_a_interm = new byte[2 * length];
					}
				}
				dis.readFully(commonByteArray_WIPO_PROJECTS_E1a_Marc_Userdoc_a_interm, 0, length);
				strReturn = new String(commonByteArray_WIPO_PROJECTS_E1a_Marc_Userdoc_a_interm, 0, length, utf8Charset);
			}
			return strReturn;
		}

		private void writeString(String str, ObjectOutputStream dos) throws IOException {
			if (str == null) {
				dos.writeInt(-1);
			} else {
				byte[] byteArray = str.getBytes(utf8Charset);
				dos.writeInt(byteArray.length);
				dos.write(byteArray);
			}
		}

		public void readData(ObjectInputStream dis) {

			synchronized (commonByteArrayLock_WIPO_PROJECTS_E1a_Marc_Userdoc_a_interm) {

				try {

					int length = 0;

					this.USERDOC_SEQ = readString(dis);

					this.USERDOC_SERIES = (BigDecimal) dis.readObject();

					this.USERDOC_NBR = (BigDecimal) dis.readObject();

					this.IND_SERVICE = (BigDecimal) dis.readObject();

					this.OWNERSHIP_NOTES = readString(dis);

					this.PERSON_NAME = readString(dis);

					this.PERSON_NAME_LANG2 = readString(dis);

					this.NATIONALITY_COUNTRY_CODE = readString(dis);

					this.IND_COMPANY = (BigDecimal) dis.readObject();

					this.LEGAL_NATURE = readString(dis);

					this.LEGAL_NATURE_LANG2 = readString(dis);

					this.LEGAL_ID_TYPE = readString(dis);

					this.LEGAL_ID_NBR = (BigDecimal) dis.readObject();

					this.INDIVIDUAL_ID_TYPE = readString(dis);

					this.INDIVIDUAL_ID_NBR = (BigDecimal) dis.readObject();

					this.RESIDENCE_COUNTRY_CODE = readString(dis);

					this.STATE_NAME = readString(dis);

					this.STATE_CODE = readString(dis);

					this.CITY_NAME = readString(dis);

					this.CITY_CODE = readString(dis);

					this.ADDRESS_ZONE = readString(dis);

					this.ADDRESS_STREET = readString(dis);

					this.ADDRESS_STREET_LANG2 = readString(dis);

					this.ZIP_CODE = readString(dis);

					this.EMAIL = readString(dis);

					this.TELEPHONE = readString(dis);

					this.PERSON_GROUP_CODE = readString(dis);

					this.errorCode = readString(dis);

					this.errorMessage = readString(dis);

				} catch (IOException e) {
					throw new RuntimeException(e);

				} catch (ClassNotFoundException eCNFE) {
					throw new RuntimeException(eCNFE);

				}

			}

		}

		public void writeData(ObjectOutputStream dos) {
			try {

				// String

				writeString(this.USERDOC_SEQ, dos);

				// BigDecimal

				dos.writeObject(this.USERDOC_SERIES);

				// BigDecimal

				dos.writeObject(this.USERDOC_NBR);

				// BigDecimal

				dos.writeObject(this.IND_SERVICE);

				// String

				writeString(this.OWNERSHIP_NOTES, dos);

				// String

				writeString(this.PERSON_NAME, dos);

				// String

				writeString(this.PERSON_NAME_LANG2, dos);

				// String

				writeString(this.NATIONALITY_COUNTRY_CODE, dos);

				// BigDecimal

				dos.writeObject(this.IND_COMPANY);

				// String

				writeString(this.LEGAL_NATURE, dos);

				// String

				writeString(this.LEGAL_NATURE_LANG2, dos);

				// String

				writeString(this.LEGAL_ID_TYPE, dos);

				// BigDecimal

				dos.writeObject(this.LEGAL_ID_NBR);

				// String

				writeString(this.INDIVIDUAL_ID_TYPE, dos);

				// BigDecimal

				dos.writeObject(this.INDIVIDUAL_ID_NBR);

				// String

				writeString(this.RESIDENCE_COUNTRY_CODE, dos);

				// String

				writeString(this.STATE_NAME, dos);

				// String

				writeString(this.STATE_CODE, dos);

				// String

				writeString(this.CITY_NAME, dos);

				// String

				writeString(this.CITY_CODE, dos);

				// String

				writeString(this.ADDRESS_ZONE, dos);

				// String

				writeString(this.ADDRESS_STREET, dos);

				// String

				writeString(this.ADDRESS_STREET_LANG2, dos);

				// String

				writeString(this.ZIP_CODE, dos);

				// String

				writeString(this.EMAIL, dos);

				// String

				writeString(this.TELEPHONE, dos);

				// String

				writeString(this.PERSON_GROUP_CODE, dos);

				// String

				writeString(this.errorCode, dos);

				// String

				writeString(this.errorMessage, dos);

			} catch (IOException e) {
				throw new RuntimeException(e);
			}

		}

		public String toString() {

			StringBuilder sb = new StringBuilder();
			sb.append(super.toString());
			sb.append("[");
			sb.append("USERDOC_SEQ=" + USERDOC_SEQ);
			sb.append(",USERDOC_SERIES=" + String.valueOf(USERDOC_SERIES));
			sb.append(",USERDOC_NBR=" + String.valueOf(USERDOC_NBR));
			sb.append(",IND_SERVICE=" + String.valueOf(IND_SERVICE));
			sb.append(",OWNERSHIP_NOTES=" + OWNERSHIP_NOTES);
			sb.append(",PERSON_NAME=" + PERSON_NAME);
			sb.append(",PERSON_NAME_LANG2=" + PERSON_NAME_LANG2);
			sb.append(",NATIONALITY_COUNTRY_CODE=" + NATIONALITY_COUNTRY_CODE);
			sb.append(",IND_COMPANY=" + String.valueOf(IND_COMPANY));
			sb.append(",LEGAL_NATURE=" + LEGAL_NATURE);
			sb.append(",LEGAL_NATURE_LANG2=" + LEGAL_NATURE_LANG2);
			sb.append(",LEGAL_ID_TYPE=" + LEGAL_ID_TYPE);
			sb.append(",LEGAL_ID_NBR=" + String.valueOf(LEGAL_ID_NBR));
			sb.append(",INDIVIDUAL_ID_TYPE=" + INDIVIDUAL_ID_TYPE);
			sb.append(",INDIVIDUAL_ID_NBR=" + String.valueOf(INDIVIDUAL_ID_NBR));
			sb.append(",RESIDENCE_COUNTRY_CODE=" + RESIDENCE_COUNTRY_CODE);
			sb.append(",STATE_NAME=" + STATE_NAME);
			sb.append(",STATE_CODE=" + STATE_CODE);
			sb.append(",CITY_NAME=" + CITY_NAME);
			sb.append(",CITY_CODE=" + CITY_CODE);
			sb.append(",ADDRESS_ZONE=" + ADDRESS_ZONE);
			sb.append(",ADDRESS_STREET=" + ADDRESS_STREET);
			sb.append(",ADDRESS_STREET_LANG2=" + ADDRESS_STREET_LANG2);
			sb.append(",ZIP_CODE=" + ZIP_CODE);
			sb.append(",EMAIL=" + EMAIL);
			sb.append(",TELEPHONE=" + TELEPHONE);
			sb.append(",PERSON_GROUP_CODE=" + PERSON_GROUP_CODE);
			sb.append(",errorCode=" + errorCode);
			sb.append(",errorMessage=" + errorMessage);
			sb.append("]");

			return sb.toString();
		}

		/**
		 * Compare keys
		 */
		public int compareTo(row25Struct other) {

			int returnValue = -1;

			return returnValue;
		}

		private int checkNullsAndCompare(Object object1, Object object2) {
			int returnValue = 0;
			if (object1 instanceof Comparable && object2 instanceof Comparable) {
				returnValue = ((Comparable) object1).compareTo(object2);
			} else if (object1 != null && object2 != null) {
				returnValue = compareStrings(object1.toString(), object2.toString());
			} else if (object1 == null && object2 != null) {
				returnValue = 1;
			} else if (object1 != null && object2 == null) {
				returnValue = -1;
			} else {
				returnValue = 0;
			}

			return returnValue;
		}

		private int compareStrings(String string1, String string2) {
			return string1.compareTo(string2);
		}

	}

	public static class ownersStruct implements routines.system.IPersistableRow<ownersStruct> {
		final static byte[] commonByteArrayLock_WIPO_PROJECTS_E1a_Marc_Userdoc_a_interm = new byte[0];
		static byte[] commonByteArray_WIPO_PROJECTS_E1a_Marc_Userdoc_a_interm = new byte[0];

		public String USERDOC_SEQ;

		public String getUSERDOC_SEQ() {
			return this.USERDOC_SEQ;
		}

		public BigDecimal USERDOC_SERIES;

		public BigDecimal getUSERDOC_SERIES() {
			return this.USERDOC_SERIES;
		}

		public BigDecimal USERDOC_NBR;

		public BigDecimal getUSERDOC_NBR() {
			return this.USERDOC_NBR;
		}

		public BigDecimal IND_SERVICE;

		public BigDecimal getIND_SERVICE() {
			return this.IND_SERVICE;
		}

		public String OWNERSHIP_NOTES;

		public String getOWNERSHIP_NOTES() {
			return this.OWNERSHIP_NOTES;
		}

		public String PERSON_NAME;

		public String getPERSON_NAME() {
			return this.PERSON_NAME;
		}

		public String PERSON_NAME_LANG2;

		public String getPERSON_NAME_LANG2() {
			return this.PERSON_NAME_LANG2;
		}

		public String NATIONALITY_COUNTRY_CODE;

		public String getNATIONALITY_COUNTRY_CODE() {
			return this.NATIONALITY_COUNTRY_CODE;
		}

		public BigDecimal IND_COMPANY;

		public BigDecimal getIND_COMPANY() {
			return this.IND_COMPANY;
		}

		public String LEGAL_NATURE;

		public String getLEGAL_NATURE() {
			return this.LEGAL_NATURE;
		}

		public String LEGAL_NATURE_LANG2;

		public String getLEGAL_NATURE_LANG2() {
			return this.LEGAL_NATURE_LANG2;
		}

		public String LEGAL_ID_TYPE;

		public String getLEGAL_ID_TYPE() {
			return this.LEGAL_ID_TYPE;
		}

		public BigDecimal LEGAL_ID_NBR;

		public BigDecimal getLEGAL_ID_NBR() {
			return this.LEGAL_ID_NBR;
		}

		public String INDIVIDUAL_ID_TYPE;

		public String getINDIVIDUAL_ID_TYPE() {
			return this.INDIVIDUAL_ID_TYPE;
		}

		public BigDecimal INDIVIDUAL_ID_NBR;

		public BigDecimal getINDIVIDUAL_ID_NBR() {
			return this.INDIVIDUAL_ID_NBR;
		}

		public String RESIDENCE_COUNTRY_CODE;

		public String getRESIDENCE_COUNTRY_CODE() {
			return this.RESIDENCE_COUNTRY_CODE;
		}

		public String STATE_NAME;

		public String getSTATE_NAME() {
			return this.STATE_NAME;
		}

		public String STATE_CODE;

		public String getSTATE_CODE() {
			return this.STATE_CODE;
		}

		public String CITY_NAME;

		public String getCITY_NAME() {
			return this.CITY_NAME;
		}

		public String CITY_CODE;

		public String getCITY_CODE() {
			return this.CITY_CODE;
		}

		public String ADDRESS_ZONE;

		public String getADDRESS_ZONE() {
			return this.ADDRESS_ZONE;
		}

		public String ADDRESS_STREET;

		public String getADDRESS_STREET() {
			return this.ADDRESS_STREET;
		}

		public String ADDRESS_STREET_LANG2;

		public String getADDRESS_STREET_LANG2() {
			return this.ADDRESS_STREET_LANG2;
		}

		public String ZIP_CODE;

		public String getZIP_CODE() {
			return this.ZIP_CODE;
		}

		public String EMAIL;

		public String getEMAIL() {
			return this.EMAIL;
		}

		public String TELEPHONE;

		public String getTELEPHONE() {
			return this.TELEPHONE;
		}

		public String PERSON_GROUP_CODE;

		public String getPERSON_GROUP_CODE() {
			return this.PERSON_GROUP_CODE;
		}

		private String readString(ObjectInputStream dis) throws IOException {
			String strReturn = null;
			int length = 0;
			length = dis.readInt();
			if (length == -1) {
				strReturn = null;
			} else {
				if (length > commonByteArray_WIPO_PROJECTS_E1a_Marc_Userdoc_a_interm.length) {
					if (length < 1024 && commonByteArray_WIPO_PROJECTS_E1a_Marc_Userdoc_a_interm.length == 0) {
						commonByteArray_WIPO_PROJECTS_E1a_Marc_Userdoc_a_interm = new byte[1024];
					} else {
						commonByteArray_WIPO_PROJECTS_E1a_Marc_Userdoc_a_interm = new byte[2 * length];
					}
				}
				dis.readFully(commonByteArray_WIPO_PROJECTS_E1a_Marc_Userdoc_a_interm, 0, length);
				strReturn = new String(commonByteArray_WIPO_PROJECTS_E1a_Marc_Userdoc_a_interm, 0, length, utf8Charset);
			}
			return strReturn;
		}

		private void writeString(String str, ObjectOutputStream dos) throws IOException {
			if (str == null) {
				dos.writeInt(-1);
			} else {
				byte[] byteArray = str.getBytes(utf8Charset);
				dos.writeInt(byteArray.length);
				dos.write(byteArray);
			}
		}

		public void readData(ObjectInputStream dis) {

			synchronized (commonByteArrayLock_WIPO_PROJECTS_E1a_Marc_Userdoc_a_interm) {

				try {

					int length = 0;

					this.USERDOC_SEQ = readString(dis);

					this.USERDOC_SERIES = (BigDecimal) dis.readObject();

					this.USERDOC_NBR = (BigDecimal) dis.readObject();

					this.IND_SERVICE = (BigDecimal) dis.readObject();

					this.OWNERSHIP_NOTES = readString(dis);

					this.PERSON_NAME = readString(dis);

					this.PERSON_NAME_LANG2 = readString(dis);

					this.NATIONALITY_COUNTRY_CODE = readString(dis);

					this.IND_COMPANY = (BigDecimal) dis.readObject();

					this.LEGAL_NATURE = readString(dis);

					this.LEGAL_NATURE_LANG2 = readString(dis);

					this.LEGAL_ID_TYPE = readString(dis);

					this.LEGAL_ID_NBR = (BigDecimal) dis.readObject();

					this.INDIVIDUAL_ID_TYPE = readString(dis);

					this.INDIVIDUAL_ID_NBR = (BigDecimal) dis.readObject();

					this.RESIDENCE_COUNTRY_CODE = readString(dis);

					this.STATE_NAME = readString(dis);

					this.STATE_CODE = readString(dis);

					this.CITY_NAME = readString(dis);

					this.CITY_CODE = readString(dis);

					this.ADDRESS_ZONE = readString(dis);

					this.ADDRESS_STREET = readString(dis);

					this.ADDRESS_STREET_LANG2 = readString(dis);

					this.ZIP_CODE = readString(dis);

					this.EMAIL = readString(dis);

					this.TELEPHONE = readString(dis);

					this.PERSON_GROUP_CODE = readString(dis);

				} catch (IOException e) {
					throw new RuntimeException(e);

				} catch (ClassNotFoundException eCNFE) {
					throw new RuntimeException(eCNFE);

				}

			}

		}

		public void writeData(ObjectOutputStream dos) {
			try {

				// String

				writeString(this.USERDOC_SEQ, dos);

				// BigDecimal

				dos.writeObject(this.USERDOC_SERIES);

				// BigDecimal

				dos.writeObject(this.USERDOC_NBR);

				// BigDecimal

				dos.writeObject(this.IND_SERVICE);

				// String

				writeString(this.OWNERSHIP_NOTES, dos);

				// String

				writeString(this.PERSON_NAME, dos);

				// String

				writeString(this.PERSON_NAME_LANG2, dos);

				// String

				writeString(this.NATIONALITY_COUNTRY_CODE, dos);

				// BigDecimal

				dos.writeObject(this.IND_COMPANY);

				// String

				writeString(this.LEGAL_NATURE, dos);

				// String

				writeString(this.LEGAL_NATURE_LANG2, dos);

				// String

				writeString(this.LEGAL_ID_TYPE, dos);

				// BigDecimal

				dos.writeObject(this.LEGAL_ID_NBR);

				// String

				writeString(this.INDIVIDUAL_ID_TYPE, dos);

				// BigDecimal

				dos.writeObject(this.INDIVIDUAL_ID_NBR);

				// String

				writeString(this.RESIDENCE_COUNTRY_CODE, dos);

				// String

				writeString(this.STATE_NAME, dos);

				// String

				writeString(this.STATE_CODE, dos);

				// String

				writeString(this.CITY_NAME, dos);

				// String

				writeString(this.CITY_CODE, dos);

				// String

				writeString(this.ADDRESS_ZONE, dos);

				// String

				writeString(this.ADDRESS_STREET, dos);

				// String

				writeString(this.ADDRESS_STREET_LANG2, dos);

				// String

				writeString(this.ZIP_CODE, dos);

				// String

				writeString(this.EMAIL, dos);

				// String

				writeString(this.TELEPHONE, dos);

				// String

				writeString(this.PERSON_GROUP_CODE, dos);

			} catch (IOException e) {
				throw new RuntimeException(e);
			}

		}

		public String toString() {

			StringBuilder sb = new StringBuilder();
			sb.append(super.toString());
			sb.append("[");
			sb.append("USERDOC_SEQ=" + USERDOC_SEQ);
			sb.append(",USERDOC_SERIES=" + String.valueOf(USERDOC_SERIES));
			sb.append(",USERDOC_NBR=" + String.valueOf(USERDOC_NBR));
			sb.append(",IND_SERVICE=" + String.valueOf(IND_SERVICE));
			sb.append(",OWNERSHIP_NOTES=" + OWNERSHIP_NOTES);
			sb.append(",PERSON_NAME=" + PERSON_NAME);
			sb.append(",PERSON_NAME_LANG2=" + PERSON_NAME_LANG2);
			sb.append(",NATIONALITY_COUNTRY_CODE=" + NATIONALITY_COUNTRY_CODE);
			sb.append(",IND_COMPANY=" + String.valueOf(IND_COMPANY));
			sb.append(",LEGAL_NATURE=" + LEGAL_NATURE);
			sb.append(",LEGAL_NATURE_LANG2=" + LEGAL_NATURE_LANG2);
			sb.append(",LEGAL_ID_TYPE=" + LEGAL_ID_TYPE);
			sb.append(",LEGAL_ID_NBR=" + String.valueOf(LEGAL_ID_NBR));
			sb.append(",INDIVIDUAL_ID_TYPE=" + INDIVIDUAL_ID_TYPE);
			sb.append(",INDIVIDUAL_ID_NBR=" + String.valueOf(INDIVIDUAL_ID_NBR));
			sb.append(",RESIDENCE_COUNTRY_CODE=" + RESIDENCE_COUNTRY_CODE);
			sb.append(",STATE_NAME=" + STATE_NAME);
			sb.append(",STATE_CODE=" + STATE_CODE);
			sb.append(",CITY_NAME=" + CITY_NAME);
			sb.append(",CITY_CODE=" + CITY_CODE);
			sb.append(",ADDRESS_ZONE=" + ADDRESS_ZONE);
			sb.append(",ADDRESS_STREET=" + ADDRESS_STREET);
			sb.append(",ADDRESS_STREET_LANG2=" + ADDRESS_STREET_LANG2);
			sb.append(",ZIP_CODE=" + ZIP_CODE);
			sb.append(",EMAIL=" + EMAIL);
			sb.append(",TELEPHONE=" + TELEPHONE);
			sb.append(",PERSON_GROUP_CODE=" + PERSON_GROUP_CODE);
			sb.append("]");

			return sb.toString();
		}

		/**
		 * Compare keys
		 */
		public int compareTo(ownersStruct other) {

			int returnValue = -1;

			return returnValue;
		}

		private int checkNullsAndCompare(Object object1, Object object2) {
			int returnValue = 0;
			if (object1 instanceof Comparable && object2 instanceof Comparable) {
				returnValue = ((Comparable) object1).compareTo(object2);
			} else if (object1 != null && object2 != null) {
				returnValue = compareStrings(object1.toString(), object2.toString());
			} else if (object1 == null && object2 != null) {
				returnValue = 1;
			} else if (object1 != null && object2 == null) {
				returnValue = -1;
			} else {
				returnValue = 0;
			}

			return returnValue;
		}

		private int compareStrings(String string1, String string2) {
			return string1.compareTo(string2);
		}

	}

	public static class row24Struct implements routines.system.IPersistableRow<row24Struct> {
		final static byte[] commonByteArrayLock_WIPO_PROJECTS_E1a_Marc_Userdoc_a_interm = new byte[0];
		static byte[] commonByteArray_WIPO_PROJECTS_E1a_Marc_Userdoc_a_interm = new byte[0];

		public String USERDOC_SEQ;

		public String getUSERDOC_SEQ() {
			return this.USERDOC_SEQ;
		}

		public BigDecimal USERDOC_SERIES;

		public BigDecimal getUSERDOC_SERIES() {
			return this.USERDOC_SERIES;
		}

		public BigDecimal USERDOC_NBR;

		public BigDecimal getUSERDOC_NBR() {
			return this.USERDOC_NBR;
		}

		public String DOC_ORI;

		public String getDOC_ORI() {
			return this.DOC_ORI;
		}

		public BigDecimal DOC_SERIES;

		public BigDecimal getDOC_SERIES() {
			return this.DOC_SERIES;
		}

		public BigDecimal DOC_NBR;

		public BigDecimal getDOC_NBR() {
			return this.DOC_NBR;
		}

		public BigDecimal IND_IMPORT;

		public BigDecimal getIND_IMPORT() {
			return this.IND_IMPORT;
		}

		public String USERDOC_TYPE;

		public String getUSERDOC_TYPE() {
			return this.USERDOC_TYPE;
		}

		public BigDecimal LAW_CODE;

		public BigDecimal getLAW_CODE() {
			return this.LAW_CODE;
		}

		public java.util.Date FILING_DATE;

		public java.util.Date getFILING_DATE() {
			return this.FILING_DATE;
		}

		public java.util.Date RECEPTION_DATE;

		public java.util.Date getRECEPTION_DATE() {
			return this.RECEPTION_DATE;
		}

		public String NOTES;

		public String getNOTES() {
			return this.NOTES;
		}

		public String APPLICANT_NOTES;

		public String getAPPLICANT_NOTES() {
			return this.APPLICANT_NOTES;
		}

		public String PERSON_NAME;

		public String getPERSON_NAME() {
			return this.PERSON_NAME;
		}

		public String PERSON_NAME_LANG2;

		public String getPERSON_NAME_LANG2() {
			return this.PERSON_NAME_LANG2;
		}

		public String NATIONALITY_COUNTRY_CODE;

		public String getNATIONALITY_COUNTRY_CODE() {
			return this.NATIONALITY_COUNTRY_CODE;
		}

		public BigDecimal IND_COMPANY;

		public BigDecimal getIND_COMPANY() {
			return this.IND_COMPANY;
		}

		public String LEGAL_NATURE;

		public String getLEGAL_NATURE() {
			return this.LEGAL_NATURE;
		}

		public String LEGAL_NATURE_LANG2;

		public String getLEGAL_NATURE_LANG2() {
			return this.LEGAL_NATURE_LANG2;
		}

		public String LEGAL_ID_TYPE;

		public String getLEGAL_ID_TYPE() {
			return this.LEGAL_ID_TYPE;
		}

		public BigDecimal LEGAL_ID_NBR;

		public BigDecimal getLEGAL_ID_NBR() {
			return this.LEGAL_ID_NBR;
		}

		public String INDIVIDUAL_ID_TYPE;

		public String getINDIVIDUAL_ID_TYPE() {
			return this.INDIVIDUAL_ID_TYPE;
		}

		public BigDecimal INDIVIDUAL_ID_NBR;

		public BigDecimal getINDIVIDUAL_ID_NBR() {
			return this.INDIVIDUAL_ID_NBR;
		}

		public String RESIDENCE_COUNTRY_CODE;

		public String getRESIDENCE_COUNTRY_CODE() {
			return this.RESIDENCE_COUNTRY_CODE;
		}

		public String STATE_NAME;

		public String getSTATE_NAME() {
			return this.STATE_NAME;
		}

		public String STATE_CODE;

		public String getSTATE_CODE() {
			return this.STATE_CODE;
		}

		public String CITY_NAME;

		public String getCITY_NAME() {
			return this.CITY_NAME;
		}

		public String CITY_CODE;

		public String getCITY_CODE() {
			return this.CITY_CODE;
		}

		public String ADDRESS_ZONE;

		public String getADDRESS_ZONE() {
			return this.ADDRESS_ZONE;
		}

		public String ADDRESS_STREET;

		public String getADDRESS_STREET() {
			return this.ADDRESS_STREET;
		}

		public String ADDRESS_STREET_LANG2;

		public String getADDRESS_STREET_LANG2() {
			return this.ADDRESS_STREET_LANG2;
		}

		public String ZIP_CODE;

		public String getZIP_CODE() {
			return this.ZIP_CODE;
		}

		public String EMAIL;

		public String getEMAIL() {
			return this.EMAIL;
		}

		public String TELEPHONE;

		public String getTELEPHONE() {
			return this.TELEPHONE;
		}

		public String PERSON_GROUP_CODE;

		public String getPERSON_GROUP_CODE() {
			return this.PERSON_GROUP_CODE;
		}

		public BigDecimal CAPTURE_USER_ID;

		public BigDecimal getCAPTURE_USER_ID() {
			return this.CAPTURE_USER_ID;
		}

		public java.util.Date CAPTURE_DATE;

		public java.util.Date getCAPTURE_DATE() {
			return this.CAPTURE_DATE;
		}

		private String readString(ObjectInputStream dis) throws IOException {
			String strReturn = null;
			int length = 0;
			length = dis.readInt();
			if (length == -1) {
				strReturn = null;
			} else {
				if (length > commonByteArray_WIPO_PROJECTS_E1a_Marc_Userdoc_a_interm.length) {
					if (length < 1024 && commonByteArray_WIPO_PROJECTS_E1a_Marc_Userdoc_a_interm.length == 0) {
						commonByteArray_WIPO_PROJECTS_E1a_Marc_Userdoc_a_interm = new byte[1024];
					} else {
						commonByteArray_WIPO_PROJECTS_E1a_Marc_Userdoc_a_interm = new byte[2 * length];
					}
				}
				dis.readFully(commonByteArray_WIPO_PROJECTS_E1a_Marc_Userdoc_a_interm, 0, length);
				strReturn = new String(commonByteArray_WIPO_PROJECTS_E1a_Marc_Userdoc_a_interm, 0, length, utf8Charset);
			}
			return strReturn;
		}

		private void writeString(String str, ObjectOutputStream dos) throws IOException {
			if (str == null) {
				dos.writeInt(-1);
			} else {
				byte[] byteArray = str.getBytes(utf8Charset);
				dos.writeInt(byteArray.length);
				dos.write(byteArray);
			}
		}

		private java.util.Date readDate(ObjectInputStream dis) throws IOException {
			java.util.Date dateReturn = null;
			int length = 0;
			length = dis.readByte();
			if (length == -1) {
				dateReturn = null;
			} else {
				dateReturn = new Date(dis.readLong());
			}
			return dateReturn;
		}

		private void writeDate(java.util.Date date1, ObjectOutputStream dos) throws IOException {
			if (date1 == null) {
				dos.writeByte(-1);
			} else {
				dos.writeByte(0);
				dos.writeLong(date1.getTime());
			}
		}

		public void readData(ObjectInputStream dis) {

			synchronized (commonByteArrayLock_WIPO_PROJECTS_E1a_Marc_Userdoc_a_interm) {

				try {

					int length = 0;

					this.USERDOC_SEQ = readString(dis);

					this.USERDOC_SERIES = (BigDecimal) dis.readObject();

					this.USERDOC_NBR = (BigDecimal) dis.readObject();

					this.DOC_ORI = readString(dis);

					this.DOC_SERIES = (BigDecimal) dis.readObject();

					this.DOC_NBR = (BigDecimal) dis.readObject();

					this.IND_IMPORT = (BigDecimal) dis.readObject();

					this.USERDOC_TYPE = readString(dis);

					this.LAW_CODE = (BigDecimal) dis.readObject();

					this.FILING_DATE = readDate(dis);

					this.RECEPTION_DATE = readDate(dis);

					this.NOTES = readString(dis);

					this.APPLICANT_NOTES = readString(dis);

					this.PERSON_NAME = readString(dis);

					this.PERSON_NAME_LANG2 = readString(dis);

					this.NATIONALITY_COUNTRY_CODE = readString(dis);

					this.IND_COMPANY = (BigDecimal) dis.readObject();

					this.LEGAL_NATURE = readString(dis);

					this.LEGAL_NATURE_LANG2 = readString(dis);

					this.LEGAL_ID_TYPE = readString(dis);

					this.LEGAL_ID_NBR = (BigDecimal) dis.readObject();

					this.INDIVIDUAL_ID_TYPE = readString(dis);

					this.INDIVIDUAL_ID_NBR = (BigDecimal) dis.readObject();

					this.RESIDENCE_COUNTRY_CODE = readString(dis);

					this.STATE_NAME = readString(dis);

					this.STATE_CODE = readString(dis);

					this.CITY_NAME = readString(dis);

					this.CITY_CODE = readString(dis);

					this.ADDRESS_ZONE = readString(dis);

					this.ADDRESS_STREET = readString(dis);

					this.ADDRESS_STREET_LANG2 = readString(dis);

					this.ZIP_CODE = readString(dis);

					this.EMAIL = readString(dis);

					this.TELEPHONE = readString(dis);

					this.PERSON_GROUP_CODE = readString(dis);

					this.CAPTURE_USER_ID = (BigDecimal) dis.readObject();

					this.CAPTURE_DATE = readDate(dis);

				} catch (IOException e) {
					throw new RuntimeException(e);

				} catch (ClassNotFoundException eCNFE) {
					throw new RuntimeException(eCNFE);

				}

			}

		}

		public void writeData(ObjectOutputStream dos) {
			try {

				// String

				writeString(this.USERDOC_SEQ, dos);

				// BigDecimal

				dos.writeObject(this.USERDOC_SERIES);

				// BigDecimal

				dos.writeObject(this.USERDOC_NBR);

				// String

				writeString(this.DOC_ORI, dos);

				// BigDecimal

				dos.writeObject(this.DOC_SERIES);

				// BigDecimal

				dos.writeObject(this.DOC_NBR);

				// BigDecimal

				dos.writeObject(this.IND_IMPORT);

				// String

				writeString(this.USERDOC_TYPE, dos);

				// BigDecimal

				dos.writeObject(this.LAW_CODE);

				// java.util.Date

				writeDate(this.FILING_DATE, dos);

				// java.util.Date

				writeDate(this.RECEPTION_DATE, dos);

				// String

				writeString(this.NOTES, dos);

				// String

				writeString(this.APPLICANT_NOTES, dos);

				// String

				writeString(this.PERSON_NAME, dos);

				// String

				writeString(this.PERSON_NAME_LANG2, dos);

				// String

				writeString(this.NATIONALITY_COUNTRY_CODE, dos);

				// BigDecimal

				dos.writeObject(this.IND_COMPANY);

				// String

				writeString(this.LEGAL_NATURE, dos);

				// String

				writeString(this.LEGAL_NATURE_LANG2, dos);

				// String

				writeString(this.LEGAL_ID_TYPE, dos);

				// BigDecimal

				dos.writeObject(this.LEGAL_ID_NBR);

				// String

				writeString(this.INDIVIDUAL_ID_TYPE, dos);

				// BigDecimal

				dos.writeObject(this.INDIVIDUAL_ID_NBR);

				// String

				writeString(this.RESIDENCE_COUNTRY_CODE, dos);

				// String

				writeString(this.STATE_NAME, dos);

				// String

				writeString(this.STATE_CODE, dos);

				// String

				writeString(this.CITY_NAME, dos);

				// String

				writeString(this.CITY_CODE, dos);

				// String

				writeString(this.ADDRESS_ZONE, dos);

				// String

				writeString(this.ADDRESS_STREET, dos);

				// String

				writeString(this.ADDRESS_STREET_LANG2, dos);

				// String

				writeString(this.ZIP_CODE, dos);

				// String

				writeString(this.EMAIL, dos);

				// String

				writeString(this.TELEPHONE, dos);

				// String

				writeString(this.PERSON_GROUP_CODE, dos);

				// BigDecimal

				dos.writeObject(this.CAPTURE_USER_ID);

				// java.util.Date

				writeDate(this.CAPTURE_DATE, dos);

			} catch (IOException e) {
				throw new RuntimeException(e);
			}

		}

		public String toString() {

			StringBuilder sb = new StringBuilder();
			sb.append(super.toString());
			sb.append("[");
			sb.append("USERDOC_SEQ=" + USERDOC_SEQ);
			sb.append(",USERDOC_SERIES=" + String.valueOf(USERDOC_SERIES));
			sb.append(",USERDOC_NBR=" + String.valueOf(USERDOC_NBR));
			sb.append(",DOC_ORI=" + DOC_ORI);
			sb.append(",DOC_SERIES=" + String.valueOf(DOC_SERIES));
			sb.append(",DOC_NBR=" + String.valueOf(DOC_NBR));
			sb.append(",IND_IMPORT=" + String.valueOf(IND_IMPORT));
			sb.append(",USERDOC_TYPE=" + USERDOC_TYPE);
			sb.append(",LAW_CODE=" + String.valueOf(LAW_CODE));
			sb.append(",FILING_DATE=" + String.valueOf(FILING_DATE));
			sb.append(",RECEPTION_DATE=" + String.valueOf(RECEPTION_DATE));
			sb.append(",NOTES=" + NOTES);
			sb.append(",APPLICANT_NOTES=" + APPLICANT_NOTES);
			sb.append(",PERSON_NAME=" + PERSON_NAME);
			sb.append(",PERSON_NAME_LANG2=" + PERSON_NAME_LANG2);
			sb.append(",NATIONALITY_COUNTRY_CODE=" + NATIONALITY_COUNTRY_CODE);
			sb.append(",IND_COMPANY=" + String.valueOf(IND_COMPANY));
			sb.append(",LEGAL_NATURE=" + LEGAL_NATURE);
			sb.append(",LEGAL_NATURE_LANG2=" + LEGAL_NATURE_LANG2);
			sb.append(",LEGAL_ID_TYPE=" + LEGAL_ID_TYPE);
			sb.append(",LEGAL_ID_NBR=" + String.valueOf(LEGAL_ID_NBR));
			sb.append(",INDIVIDUAL_ID_TYPE=" + INDIVIDUAL_ID_TYPE);
			sb.append(",INDIVIDUAL_ID_NBR=" + String.valueOf(INDIVIDUAL_ID_NBR));
			sb.append(",RESIDENCE_COUNTRY_CODE=" + RESIDENCE_COUNTRY_CODE);
			sb.append(",STATE_NAME=" + STATE_NAME);
			sb.append(",STATE_CODE=" + STATE_CODE);
			sb.append(",CITY_NAME=" + CITY_NAME);
			sb.append(",CITY_CODE=" + CITY_CODE);
			sb.append(",ADDRESS_ZONE=" + ADDRESS_ZONE);
			sb.append(",ADDRESS_STREET=" + ADDRESS_STREET);
			sb.append(",ADDRESS_STREET_LANG2=" + ADDRESS_STREET_LANG2);
			sb.append(",ZIP_CODE=" + ZIP_CODE);
			sb.append(",EMAIL=" + EMAIL);
			sb.append(",TELEPHONE=" + TELEPHONE);
			sb.append(",PERSON_GROUP_CODE=" + PERSON_GROUP_CODE);
			sb.append(",CAPTURE_USER_ID=" + String.valueOf(CAPTURE_USER_ID));
			sb.append(",CAPTURE_DATE=" + String.valueOf(CAPTURE_DATE));
			sb.append("]");

			return sb.toString();
		}

		/**
		 * Compare keys
		 */
		public int compareTo(row24Struct other) {

			int returnValue = -1;

			return returnValue;
		}

		private int checkNullsAndCompare(Object object1, Object object2) {
			int returnValue = 0;
			if (object1 instanceof Comparable && object2 instanceof Comparable) {
				returnValue = ((Comparable) object1).compareTo(object2);
			} else if (object1 != null && object2 != null) {
				returnValue = compareStrings(object1.toString(), object2.toString());
			} else if (object1 == null && object2 != null) {
				returnValue = 1;
			} else if (object1 != null && object2 == null) {
				returnValue = -1;
			} else {
				returnValue = 0;
			}

			return returnValue;
		}

		private int compareStrings(String string1, String string2) {
			return string1.compareTo(string2);
		}

	}

	public void tDBInput_15Process(final java.util.Map<String, Object> globalMap) throws TalendException {
		globalMap.put("tDBInput_15_SUBPROCESS_STATE", 0);

		final boolean execStat = this.execStat;

		String iterateId = "";

		String currentComponent = "";
		java.util.Map<String, Object> resourceMap = new java.util.HashMap<String, Object>();

		try {
			// TDI-39566 avoid throwing an useless Exception
			boolean resumeIt = true;
			if (globalResumeTicket == false && resumeEntryMethodName != null) {
				String currentMethodName = new java.lang.Exception().getStackTrace()[0].getMethodName();
				resumeIt = resumeEntryMethodName.equals(currentMethodName);
			}
			if (resumeIt || globalResumeTicket) { // start the resume
				globalResumeTicket = true;

				row24Struct row24 = new row24Struct();
				ownersStruct owners = new ownersStruct();
				row25Struct row25 = new row25Struct();

				/**
				 * [tLogRow_7 begin ] start
				 */

				ok_Hash.put("tLogRow_7", false);
				start_Hash.put("tLogRow_7", System.currentTimeMillis());

				currentComponent = "tLogRow_7";

				if (execStat) {
					runStat.updateStatOnConnection(resourceMap, iterateId, 0, 0, "row25");
				}

				int tos_count_tLogRow_7 = 0;

				///////////////////////

				final String OUTPUT_FIELD_SEPARATOR_tLogRow_7 = "|";
				java.io.PrintStream consoleOut_tLogRow_7 = null;

				StringBuilder strBuffer_tLogRow_7 = null;
				int nb_line_tLogRow_7 = 0;
///////////////////////    			

				/**
				 * [tLogRow_7 begin ] stop
				 */

				/**
				 * [tDBOutput_7 begin ] start
				 */

				ok_Hash.put("tDBOutput_7", false);
				start_Hash.put("tDBOutput_7", System.currentTimeMillis());

				currentComponent = "tDBOutput_7";

				if (execStat) {
					runStat.updateStatOnConnection(resourceMap, iterateId, 0, 0, "owners");
				}

				int tos_count_tDBOutput_7 = 0;

				int nb_line_tDBOutput_7 = 0;
				int nb_line_update_tDBOutput_7 = 0;
				int nb_line_inserted_tDBOutput_7 = 0;
				int nb_line_deleted_tDBOutput_7 = 0;
				int nb_line_rejected_tDBOutput_7 = 0;

				int deletedCount_tDBOutput_7 = 0;
				int updatedCount_tDBOutput_7 = 0;
				int insertedCount_tDBOutput_7 = 0;
				int rejectedCount_tDBOutput_7 = 0;
				String dbschema_tDBOutput_7 = null;
				String tableName_tDBOutput_7 = null;
				boolean whetherReject_tDBOutput_7 = false;

				java.util.Calendar calendar_tDBOutput_7 = java.util.Calendar.getInstance();
				long year1_tDBOutput_7 = TalendDate.parseDate("yyyy-MM-dd", "0001-01-01").getTime();
				long year2_tDBOutput_7 = TalendDate.parseDate("yyyy-MM-dd", "1753-01-01").getTime();
				long year10000_tDBOutput_7 = TalendDate.parseDate("yyyy-MM-dd HH:mm:ss", "9999-12-31 24:00:00")
						.getTime();
				long date_tDBOutput_7;

				java.util.Calendar calendar_datetimeoffset_tDBOutput_7 = java.util.Calendar
						.getInstance(java.util.TimeZone.getTimeZone("UTC"));

				java.sql.Connection conn_tDBOutput_7 = null;
				String dbUser_tDBOutput_7 = null;
				dbschema_tDBOutput_7 = (String) globalMap.get("dbschema_tDBConnection_1");

				conn_tDBOutput_7 = (java.sql.Connection) globalMap.get("conn_tDBConnection_1");

				if (dbschema_tDBOutput_7 == null || dbschema_tDBOutput_7.trim().length() == 0) {
					tableName_tDBOutput_7 = "VW_IMPORT_USERDOC_OWNERS";
				} else {
					tableName_tDBOutput_7 = dbschema_tDBOutput_7 + "].[" + "VW_IMPORT_USERDOC_OWNERS";
				}
				int count_tDBOutput_7 = 0;

				String insert_tDBOutput_7 = "INSERT INTO [" + tableName_tDBOutput_7
						+ "] ([USERDOC_SEQ],[USERDOC_SERIES],[USERDOC_NBR],[IND_SERVICE],[OWNERSHIP_NOTES],[PERSON_NAME],[PERSON_NAME_LANG2],[NATIONALITY_COUNTRY_CODE],[IND_COMPANY],[LEGAL_NATURE],[LEGAL_NATURE_LANG2],[LEGAL_ID_TYPE],[LEGAL_ID_NBR],[INDIVIDUAL_ID_TYPE],[INDIVIDUAL_ID_NBR],[RESIDENCE_COUNTRY_CODE],[STATE_NAME],[STATE_CODE],[CITY_NAME],[CITY_CODE],[ADDRESS_ZONE],[ADDRESS_STREET],[ADDRESS_STREET_LANG2],[ZIP_CODE],[EMAIL],[TELEPHONE],[PERSON_GROUP_CODE]) VALUES (?,?,?,?,?,?,?,?,?,?,?,?,?,?,?,?,?,?,?,?,?,?,?,?,?,?,?)";
				java.sql.PreparedStatement pstmt_tDBOutput_7 = conn_tDBOutput_7.prepareStatement(insert_tDBOutput_7);
				resourceMap.put("pstmt_tDBOutput_7", pstmt_tDBOutput_7);

				boolean isShareIdentity_tDBOutput_7 = globalMap.get("shareIdentitySetting_tDBConnection_1") != null
						&& (Boolean) globalMap.get("shareIdentitySetting_tDBConnection_1") == true;

				/**
				 * [tDBOutput_7 begin ] stop
				 */

				/**
				 * [tMap_7 begin ] start
				 */

				ok_Hash.put("tMap_7", false);
				start_Hash.put("tMap_7", System.currentTimeMillis());

				currentComponent = "tMap_7";

				if (execStat) {
					runStat.updateStatOnConnection(resourceMap, iterateId, 0, 0, "row24");
				}

				int tos_count_tMap_7 = 0;

// ###############################
// # Lookup's keys initialization
// ###############################        

// ###############################
// # Vars initialization
				class Var__tMap_7__Struct {
				}
				Var__tMap_7__Struct Var__tMap_7 = new Var__tMap_7__Struct();
// ###############################

// ###############################
// # Outputs initialization
				ownersStruct owners_tmp = new ownersStruct();
// ###############################

				/**
				 * [tMap_7 begin ] stop
				 */

				/**
				 * [tDBInput_15 begin ] start
				 */

				ok_Hash.put("tDBInput_15", false);
				start_Hash.put("tDBInput_15", System.currentTimeMillis());

				currentComponent = "tDBInput_15";

				int tos_count_tDBInput_15 = 0;

				org.talend.designer.components.util.mssql.MSSqlGenerateTimestampUtil mssqlGTU_tDBInput_15 = org.talend.designer.components.util.mssql.MSSqlUtilFactory
						.getMSSqlGenerateTimestampUtil();

				java.util.List<String> talendToDBList_tDBInput_15 = new java.util.ArrayList();
				String[] talendToDBArray_tDBInput_15 = new String[] { "FLOAT", "NUMERIC", "NUMERIC IDENTITY", "DECIMAL",
						"DECIMAL IDENTITY", "REAL" };
				java.util.Collections.addAll(talendToDBList_tDBInput_15, talendToDBArray_tDBInput_15);
				int nb_line_tDBInput_15 = 0;
				java.sql.Connection conn_tDBInput_15 = null;
				conn_tDBInput_15 = (java.sql.Connection) globalMap.get("conn_tDBConnection_1");

				String dbschema_tDBInput_15 = (String) globalMap.get("dbschema_tDBConnection_1");

				java.sql.Statement stmt_tDBInput_15 = conn_tDBInput_15.createStatement();

				String dbquery_tDBInput_15 = "SELECT dbo.VW_IMPORT_USERDOC.USERDOC_SEQ,\n		dbo.VW_IMPORT_USERDOC.USERDOC_SERIES,\n		dbo.VW_IMPORT_USERDOC.USERDOC_NBR,\n"
						+ "		dbo.VW_IMPORT_USERDOC.DOC_ORI,\n		dbo.VW_IMPORT_USERDOC.DOC_SERIES,\n		dbo.VW_IMPORT_USERDOC.DOC_NBR,\n		dbo.VW_IMPORT_US"
						+ "ERDOC.IND_IMPORT,\n		dbo.VW_IMPORT_USERDOC.USERDOC_TYPE,\n		dbo.VW_IMPORT_USERDOC.LAW_CODE,\n		dbo.VW_IMPORT_USERDOC.FILING"
						+ "_DATE,\n		dbo.VW_IMPORT_USERDOC.RECEPTION_DATE,\n		dbo.VW_IMPORT_USERDOC.NOTES,\n		dbo.VW_IMPORT_USERDOC.APPLICANT_NOTES,\n	"
						+ "	dbo.VW_IMPORT_USERDOC.PERSON_NAME,\n		dbo.VW_IMPORT_USERDOC.PERSON_NAME_LANG2,\n		dbo.VW_IMPORT_USERDOC.NATIONALITY_COUNT"
						+ "RY_CODE,\n		dbo.VW_IMPORT_USERDOC.IND_COMPANY,\n		dbo.VW_IMPORT_USERDOC.LEGAL_NATURE,\n		dbo.VW_IMPORT_USERDOC.LEGAL_NATURE"
						+ "_LANG2,\n		dbo.VW_IMPORT_USERDOC.LEGAL_ID_TYPE,\n		dbo.VW_IMPORT_USERDOC.LEGAL_ID_NBR,\n		dbo.VW_IMPORT_USERDOC.INDIVIDUAL_"
						+ "ID_TYPE,\n		dbo.VW_IMPORT_USERDOC.INDIVIDUAL_ID_NBR,\n		dbo.VW_IMPORT_USERDOC.RESIDENCE_COUNTRY_CODE,\n		dbo.VW_IMPORT_USER"
						+ "DOC.STATE_NAME,\n		dbo.VW_IMPORT_USERDOC.STATE_CODE,\n		dbo.VW_IMPORT_USERDOC.CITY_NAME,\n		dbo.VW_IMPORT_USERDOC.CITY_CODE"
						+ ",\n		dbo.VW_IMPORT_USERDOC.ADDRESS_ZONE,\n		dbo.VW_IMPORT_USERDOC.ADDRESS_STREET,\n		dbo.VW_IMPORT_USERDOC.ADDRESS_STREET_L"
						+ "ANG2,\n		dbo.VW_IMPORT_USERDOC.ZIP_CODE,\n		dbo.VW_IMPORT_USERDOC.EMAIL,\n		dbo.VW_IMPORT_USERDOC.TELEPHONE,\n		dbo.VW_IMPOR"
						+ "T_USERDOC.PERSON_GROUP_CODE,\n		dbo.VW_IMPORT_USERDOC.CAPTURE_USER_ID,\n		dbo.VW_IMPORT_USERDOC.CAPTURE_DATE\nFROM	dbo.VW_I"
						+ "MPORT_USERDOC";

				globalMap.put("tDBInput_15_QUERY", dbquery_tDBInput_15);
				java.sql.ResultSet rs_tDBInput_15 = null;

				try {
					rs_tDBInput_15 = stmt_tDBInput_15.executeQuery(dbquery_tDBInput_15);
					java.sql.ResultSetMetaData rsmd_tDBInput_15 = rs_tDBInput_15.getMetaData();
					int colQtyInRs_tDBInput_15 = rsmd_tDBInput_15.getColumnCount();

					String tmpContent_tDBInput_15 = null;

					while (rs_tDBInput_15.next()) {
						nb_line_tDBInput_15++;

						if (colQtyInRs_tDBInput_15 < 1) {
							row24.USERDOC_SEQ = null;
						} else {

							tmpContent_tDBInput_15 = rs_tDBInput_15.getString(1);
							if (tmpContent_tDBInput_15 != null) {
								if (talendToDBList_tDBInput_15.contains(
										rsmd_tDBInput_15.getColumnTypeName(1).toUpperCase(java.util.Locale.ENGLISH))) {
									row24.USERDOC_SEQ = FormatterUtils.formatUnwithE(tmpContent_tDBInput_15);
								} else {
									row24.USERDOC_SEQ = tmpContent_tDBInput_15;
								}
							} else {
								row24.USERDOC_SEQ = null;
							}
						}
						if (colQtyInRs_tDBInput_15 < 2) {
							row24.USERDOC_SERIES = null;
						} else {

							row24.USERDOC_SERIES = rs_tDBInput_15.getBigDecimal(2);
							if (rs_tDBInput_15.wasNull()) {
								throw new RuntimeException("Null value in non-Nullable column");
							}
						}
						if (colQtyInRs_tDBInput_15 < 3) {
							row24.USERDOC_NBR = null;
						} else {

							row24.USERDOC_NBR = rs_tDBInput_15.getBigDecimal(3);
							if (rs_tDBInput_15.wasNull()) {
								throw new RuntimeException("Null value in non-Nullable column");
							}
						}
						if (colQtyInRs_tDBInput_15 < 4) {
							row24.DOC_ORI = null;
						} else {

							tmpContent_tDBInput_15 = rs_tDBInput_15.getString(4);
							if (tmpContent_tDBInput_15 != null) {
								if (talendToDBList_tDBInput_15.contains(
										rsmd_tDBInput_15.getColumnTypeName(4).toUpperCase(java.util.Locale.ENGLISH))) {
									row24.DOC_ORI = FormatterUtils.formatUnwithE(tmpContent_tDBInput_15);
								} else {
									row24.DOC_ORI = tmpContent_tDBInput_15;
								}
							} else {
								row24.DOC_ORI = null;
							}
						}
						if (colQtyInRs_tDBInput_15 < 5) {
							row24.DOC_SERIES = null;
						} else {

							row24.DOC_SERIES = rs_tDBInput_15.getBigDecimal(5);
							if (rs_tDBInput_15.wasNull()) {
								row24.DOC_SERIES = null;
							}
						}
						if (colQtyInRs_tDBInput_15 < 6) {
							row24.DOC_NBR = null;
						} else {

							row24.DOC_NBR = rs_tDBInput_15.getBigDecimal(6);
							if (rs_tDBInput_15.wasNull()) {
								row24.DOC_NBR = null;
							}
						}
						if (colQtyInRs_tDBInput_15 < 7) {
							row24.IND_IMPORT = null;
						} else {

							row24.IND_IMPORT = rs_tDBInput_15.getBigDecimal(7);
							if (rs_tDBInput_15.wasNull()) {
								row24.IND_IMPORT = null;
							}
						}
						if (colQtyInRs_tDBInput_15 < 8) {
							row24.USERDOC_TYPE = null;
						} else {

							tmpContent_tDBInput_15 = rs_tDBInput_15.getString(8);
							if (tmpContent_tDBInput_15 != null) {
								if (talendToDBList_tDBInput_15.contains(
										rsmd_tDBInput_15.getColumnTypeName(8).toUpperCase(java.util.Locale.ENGLISH))) {
									row24.USERDOC_TYPE = FormatterUtils.formatUnwithE(tmpContent_tDBInput_15);
								} else {
									row24.USERDOC_TYPE = tmpContent_tDBInput_15;
								}
							} else {
								row24.USERDOC_TYPE = null;
							}
						}
						if (colQtyInRs_tDBInput_15 < 9) {
							row24.LAW_CODE = null;
						} else {

							row24.LAW_CODE = rs_tDBInput_15.getBigDecimal(9);
							if (rs_tDBInput_15.wasNull()) {
								throw new RuntimeException("Null value in non-Nullable column");
							}
						}
						if (colQtyInRs_tDBInput_15 < 10) {
							row24.FILING_DATE = null;
						} else {

							row24.FILING_DATE = mssqlGTU_tDBInput_15.getDate(rsmd_tDBInput_15, rs_tDBInput_15, 10);

						}
						if (colQtyInRs_tDBInput_15 < 11) {
							row24.RECEPTION_DATE = null;
						} else {

							row24.RECEPTION_DATE = mssqlGTU_tDBInput_15.getDate(rsmd_tDBInput_15, rs_tDBInput_15, 11);

						}
						if (colQtyInRs_tDBInput_15 < 12) {
							row24.NOTES = null;
						} else {

							tmpContent_tDBInput_15 = rs_tDBInput_15.getString(12);
							if (tmpContent_tDBInput_15 != null) {
								if (talendToDBList_tDBInput_15.contains(
										rsmd_tDBInput_15.getColumnTypeName(12).toUpperCase(java.util.Locale.ENGLISH))) {
									row24.NOTES = FormatterUtils.formatUnwithE(tmpContent_tDBInput_15);
								} else {
									row24.NOTES = tmpContent_tDBInput_15;
								}
							} else {
								row24.NOTES = null;
							}
						}
						if (colQtyInRs_tDBInput_15 < 13) {
							row24.APPLICANT_NOTES = null;
						} else {

							tmpContent_tDBInput_15 = rs_tDBInput_15.getString(13);
							if (tmpContent_tDBInput_15 != null) {
								if (talendToDBList_tDBInput_15.contains(
										rsmd_tDBInput_15.getColumnTypeName(13).toUpperCase(java.util.Locale.ENGLISH))) {
									row24.APPLICANT_NOTES = FormatterUtils.formatUnwithE(tmpContent_tDBInput_15);
								} else {
									row24.APPLICANT_NOTES = tmpContent_tDBInput_15;
								}
							} else {
								row24.APPLICANT_NOTES = null;
							}
						}
						if (colQtyInRs_tDBInput_15 < 14) {
							row24.PERSON_NAME = null;
						} else {

							tmpContent_tDBInput_15 = rs_tDBInput_15.getString(14);
							if (tmpContent_tDBInput_15 != null) {
								if (talendToDBList_tDBInput_15.contains(
										rsmd_tDBInput_15.getColumnTypeName(14).toUpperCase(java.util.Locale.ENGLISH))) {
									row24.PERSON_NAME = FormatterUtils.formatUnwithE(tmpContent_tDBInput_15);
								} else {
									row24.PERSON_NAME = tmpContent_tDBInput_15;
								}
							} else {
								row24.PERSON_NAME = null;
							}
						}
						if (colQtyInRs_tDBInput_15 < 15) {
							row24.PERSON_NAME_LANG2 = null;
						} else {

							tmpContent_tDBInput_15 = rs_tDBInput_15.getString(15);
							if (tmpContent_tDBInput_15 != null) {
								if (talendToDBList_tDBInput_15.contains(
										rsmd_tDBInput_15.getColumnTypeName(15).toUpperCase(java.util.Locale.ENGLISH))) {
									row24.PERSON_NAME_LANG2 = FormatterUtils.formatUnwithE(tmpContent_tDBInput_15);
								} else {
									row24.PERSON_NAME_LANG2 = tmpContent_tDBInput_15;
								}
							} else {
								row24.PERSON_NAME_LANG2 = null;
							}
						}
						if (colQtyInRs_tDBInput_15 < 16) {
							row24.NATIONALITY_COUNTRY_CODE = null;
						} else {

							tmpContent_tDBInput_15 = rs_tDBInput_15.getString(16);
							if (tmpContent_tDBInput_15 != null) {
								if (talendToDBList_tDBInput_15.contains(
										rsmd_tDBInput_15.getColumnTypeName(16).toUpperCase(java.util.Locale.ENGLISH))) {
									row24.NATIONALITY_COUNTRY_CODE = FormatterUtils
											.formatUnwithE(tmpContent_tDBInput_15);
								} else {
									row24.NATIONALITY_COUNTRY_CODE = tmpContent_tDBInput_15;
								}
							} else {
								row24.NATIONALITY_COUNTRY_CODE = null;
							}
						}
						if (colQtyInRs_tDBInput_15 < 17) {
							row24.IND_COMPANY = null;
						} else {

							row24.IND_COMPANY = rs_tDBInput_15.getBigDecimal(17);
							if (rs_tDBInput_15.wasNull()) {
								row24.IND_COMPANY = null;
							}
						}
						if (colQtyInRs_tDBInput_15 < 18) {
							row24.LEGAL_NATURE = null;
						} else {

							tmpContent_tDBInput_15 = rs_tDBInput_15.getString(18);
							if (tmpContent_tDBInput_15 != null) {
								if (talendToDBList_tDBInput_15.contains(
										rsmd_tDBInput_15.getColumnTypeName(18).toUpperCase(java.util.Locale.ENGLISH))) {
									row24.LEGAL_NATURE = FormatterUtils.formatUnwithE(tmpContent_tDBInput_15);
								} else {
									row24.LEGAL_NATURE = tmpContent_tDBInput_15;
								}
							} else {
								row24.LEGAL_NATURE = null;
							}
						}
						if (colQtyInRs_tDBInput_15 < 19) {
							row24.LEGAL_NATURE_LANG2 = null;
						} else {

							tmpContent_tDBInput_15 = rs_tDBInput_15.getString(19);
							if (tmpContent_tDBInput_15 != null) {
								if (talendToDBList_tDBInput_15.contains(
										rsmd_tDBInput_15.getColumnTypeName(19).toUpperCase(java.util.Locale.ENGLISH))) {
									row24.LEGAL_NATURE_LANG2 = FormatterUtils.formatUnwithE(tmpContent_tDBInput_15);
								} else {
									row24.LEGAL_NATURE_LANG2 = tmpContent_tDBInput_15;
								}
							} else {
								row24.LEGAL_NATURE_LANG2 = null;
							}
						}
						if (colQtyInRs_tDBInput_15 < 20) {
							row24.LEGAL_ID_TYPE = null;
						} else {

							tmpContent_tDBInput_15 = rs_tDBInput_15.getString(20);
							if (tmpContent_tDBInput_15 != null) {
								if (talendToDBList_tDBInput_15.contains(
										rsmd_tDBInput_15.getColumnTypeName(20).toUpperCase(java.util.Locale.ENGLISH))) {
									row24.LEGAL_ID_TYPE = FormatterUtils.formatUnwithE(tmpContent_tDBInput_15);
								} else {
									row24.LEGAL_ID_TYPE = tmpContent_tDBInput_15;
								}
							} else {
								row24.LEGAL_ID_TYPE = null;
							}
						}
						if (colQtyInRs_tDBInput_15 < 21) {
							row24.LEGAL_ID_NBR = null;
						} else {

							row24.LEGAL_ID_NBR = rs_tDBInput_15.getBigDecimal(21);
							if (rs_tDBInput_15.wasNull()) {
								row24.LEGAL_ID_NBR = null;
							}
						}
						if (colQtyInRs_tDBInput_15 < 22) {
							row24.INDIVIDUAL_ID_TYPE = null;
						} else {

							tmpContent_tDBInput_15 = rs_tDBInput_15.getString(22);
							if (tmpContent_tDBInput_15 != null) {
								if (talendToDBList_tDBInput_15.contains(
										rsmd_tDBInput_15.getColumnTypeName(22).toUpperCase(java.util.Locale.ENGLISH))) {
									row24.INDIVIDUAL_ID_TYPE = FormatterUtils.formatUnwithE(tmpContent_tDBInput_15);
								} else {
									row24.INDIVIDUAL_ID_TYPE = tmpContent_tDBInput_15;
								}
							} else {
								row24.INDIVIDUAL_ID_TYPE = null;
							}
						}
						if (colQtyInRs_tDBInput_15 < 23) {
							row24.INDIVIDUAL_ID_NBR = null;
						} else {

							row24.INDIVIDUAL_ID_NBR = rs_tDBInput_15.getBigDecimal(23);
							if (rs_tDBInput_15.wasNull()) {
								row24.INDIVIDUAL_ID_NBR = null;
							}
						}
						if (colQtyInRs_tDBInput_15 < 24) {
							row24.RESIDENCE_COUNTRY_CODE = null;
						} else {

							tmpContent_tDBInput_15 = rs_tDBInput_15.getString(24);
							if (tmpContent_tDBInput_15 != null) {
								if (talendToDBList_tDBInput_15.contains(
										rsmd_tDBInput_15.getColumnTypeName(24).toUpperCase(java.util.Locale.ENGLISH))) {
									row24.RESIDENCE_COUNTRY_CODE = FormatterUtils.formatUnwithE(tmpContent_tDBInput_15);
								} else {
									row24.RESIDENCE_COUNTRY_CODE = tmpContent_tDBInput_15;
								}
							} else {
								row24.RESIDENCE_COUNTRY_CODE = null;
							}
						}
						if (colQtyInRs_tDBInput_15 < 25) {
							row24.STATE_NAME = null;
						} else {

							tmpContent_tDBInput_15 = rs_tDBInput_15.getString(25);
							if (tmpContent_tDBInput_15 != null) {
								if (talendToDBList_tDBInput_15.contains(
										rsmd_tDBInput_15.getColumnTypeName(25).toUpperCase(java.util.Locale.ENGLISH))) {
									row24.STATE_NAME = FormatterUtils.formatUnwithE(tmpContent_tDBInput_15);
								} else {
									row24.STATE_NAME = tmpContent_tDBInput_15;
								}
							} else {
								row24.STATE_NAME = null;
							}
						}
						if (colQtyInRs_tDBInput_15 < 26) {
							row24.STATE_CODE = null;
						} else {

							tmpContent_tDBInput_15 = rs_tDBInput_15.getString(26);
							if (tmpContent_tDBInput_15 != null) {
								if (talendToDBList_tDBInput_15.contains(
										rsmd_tDBInput_15.getColumnTypeName(26).toUpperCase(java.util.Locale.ENGLISH))) {
									row24.STATE_CODE = FormatterUtils.formatUnwithE(tmpContent_tDBInput_15);
								} else {
									row24.STATE_CODE = tmpContent_tDBInput_15;
								}
							} else {
								row24.STATE_CODE = null;
							}
						}
						if (colQtyInRs_tDBInput_15 < 27) {
							row24.CITY_NAME = null;
						} else {

							tmpContent_tDBInput_15 = rs_tDBInput_15.getString(27);
							if (tmpContent_tDBInput_15 != null) {
								if (talendToDBList_tDBInput_15.contains(
										rsmd_tDBInput_15.getColumnTypeName(27).toUpperCase(java.util.Locale.ENGLISH))) {
									row24.CITY_NAME = FormatterUtils.formatUnwithE(tmpContent_tDBInput_15);
								} else {
									row24.CITY_NAME = tmpContent_tDBInput_15;
								}
							} else {
								row24.CITY_NAME = null;
							}
						}
						if (colQtyInRs_tDBInput_15 < 28) {
							row24.CITY_CODE = null;
						} else {

							tmpContent_tDBInput_15 = rs_tDBInput_15.getString(28);
							if (tmpContent_tDBInput_15 != null) {
								if (talendToDBList_tDBInput_15.contains(
										rsmd_tDBInput_15.getColumnTypeName(28).toUpperCase(java.util.Locale.ENGLISH))) {
									row24.CITY_CODE = FormatterUtils.formatUnwithE(tmpContent_tDBInput_15);
								} else {
									row24.CITY_CODE = tmpContent_tDBInput_15;
								}
							} else {
								row24.CITY_CODE = null;
							}
						}
						if (colQtyInRs_tDBInput_15 < 29) {
							row24.ADDRESS_ZONE = null;
						} else {

							tmpContent_tDBInput_15 = rs_tDBInput_15.getString(29);
							if (tmpContent_tDBInput_15 != null) {
								if (talendToDBList_tDBInput_15.contains(
										rsmd_tDBInput_15.getColumnTypeName(29).toUpperCase(java.util.Locale.ENGLISH))) {
									row24.ADDRESS_ZONE = FormatterUtils.formatUnwithE(tmpContent_tDBInput_15);
								} else {
									row24.ADDRESS_ZONE = tmpContent_tDBInput_15;
								}
							} else {
								row24.ADDRESS_ZONE = null;
							}
						}
						if (colQtyInRs_tDBInput_15 < 30) {
							row24.ADDRESS_STREET = null;
						} else {

							tmpContent_tDBInput_15 = rs_tDBInput_15.getString(30);
							if (tmpContent_tDBInput_15 != null) {
								if (talendToDBList_tDBInput_15.contains(
										rsmd_tDBInput_15.getColumnTypeName(30).toUpperCase(java.util.Locale.ENGLISH))) {
									row24.ADDRESS_STREET = FormatterUtils.formatUnwithE(tmpContent_tDBInput_15);
								} else {
									row24.ADDRESS_STREET = tmpContent_tDBInput_15;
								}
							} else {
								row24.ADDRESS_STREET = null;
							}
						}
						if (colQtyInRs_tDBInput_15 < 31) {
							row24.ADDRESS_STREET_LANG2 = null;
						} else {

							tmpContent_tDBInput_15 = rs_tDBInput_15.getString(31);
							if (tmpContent_tDBInput_15 != null) {
								if (talendToDBList_tDBInput_15.contains(
										rsmd_tDBInput_15.getColumnTypeName(31).toUpperCase(java.util.Locale.ENGLISH))) {
									row24.ADDRESS_STREET_LANG2 = FormatterUtils.formatUnwithE(tmpContent_tDBInput_15);
								} else {
									row24.ADDRESS_STREET_LANG2 = tmpContent_tDBInput_15;
								}
							} else {
								row24.ADDRESS_STREET_LANG2 = null;
							}
						}
						if (colQtyInRs_tDBInput_15 < 32) {
							row24.ZIP_CODE = null;
						} else {

							tmpContent_tDBInput_15 = rs_tDBInput_15.getString(32);
							if (tmpContent_tDBInput_15 != null) {
								if (talendToDBList_tDBInput_15.contains(
										rsmd_tDBInput_15.getColumnTypeName(32).toUpperCase(java.util.Locale.ENGLISH))) {
									row24.ZIP_CODE = FormatterUtils.formatUnwithE(tmpContent_tDBInput_15);
								} else {
									row24.ZIP_CODE = tmpContent_tDBInput_15;
								}
							} else {
								row24.ZIP_CODE = null;
							}
						}
						if (colQtyInRs_tDBInput_15 < 33) {
							row24.EMAIL = null;
						} else {

							tmpContent_tDBInput_15 = rs_tDBInput_15.getString(33);
							if (tmpContent_tDBInput_15 != null) {
								if (talendToDBList_tDBInput_15.contains(
										rsmd_tDBInput_15.getColumnTypeName(33).toUpperCase(java.util.Locale.ENGLISH))) {
									row24.EMAIL = FormatterUtils.formatUnwithE(tmpContent_tDBInput_15);
								} else {
									row24.EMAIL = tmpContent_tDBInput_15;
								}
							} else {
								row24.EMAIL = null;
							}
						}
						if (colQtyInRs_tDBInput_15 < 34) {
							row24.TELEPHONE = null;
						} else {

							tmpContent_tDBInput_15 = rs_tDBInput_15.getString(34);
							if (tmpContent_tDBInput_15 != null) {
								if (talendToDBList_tDBInput_15.contains(
										rsmd_tDBInput_15.getColumnTypeName(34).toUpperCase(java.util.Locale.ENGLISH))) {
									row24.TELEPHONE = FormatterUtils.formatUnwithE(tmpContent_tDBInput_15);
								} else {
									row24.TELEPHONE = tmpContent_tDBInput_15;
								}
							} else {
								row24.TELEPHONE = null;
							}
						}
						if (colQtyInRs_tDBInput_15 < 35) {
							row24.PERSON_GROUP_CODE = null;
						} else {

							tmpContent_tDBInput_15 = rs_tDBInput_15.getString(35);
							if (tmpContent_tDBInput_15 != null) {
								if (talendToDBList_tDBInput_15.contains(
										rsmd_tDBInput_15.getColumnTypeName(35).toUpperCase(java.util.Locale.ENGLISH))) {
									row24.PERSON_GROUP_CODE = FormatterUtils.formatUnwithE(tmpContent_tDBInput_15);
								} else {
									row24.PERSON_GROUP_CODE = tmpContent_tDBInput_15;
								}
							} else {
								row24.PERSON_GROUP_CODE = null;
							}
						}
						if (colQtyInRs_tDBInput_15 < 36) {
							row24.CAPTURE_USER_ID = null;
						} else {

							row24.CAPTURE_USER_ID = rs_tDBInput_15.getBigDecimal(36);
							if (rs_tDBInput_15.wasNull()) {
								row24.CAPTURE_USER_ID = null;
							}
						}
						if (colQtyInRs_tDBInput_15 < 37) {
							row24.CAPTURE_DATE = null;
						} else {

							row24.CAPTURE_DATE = mssqlGTU_tDBInput_15.getDate(rsmd_tDBInput_15, rs_tDBInput_15, 37);

						}

						/**
						 * [tDBInput_15 begin ] stop
						 */

						/**
						 * [tDBInput_15 main ] start
						 */

						currentComponent = "tDBInput_15";

						tos_count_tDBInput_15++;

						/**
						 * [tDBInput_15 main ] stop
						 */

						/**
						 * [tDBInput_15 process_data_begin ] start
						 */

						currentComponent = "tDBInput_15";

						/**
						 * [tDBInput_15 process_data_begin ] stop
						 */

						/**
						 * [tMap_7 main ] start
						 */

						currentComponent = "tMap_7";

						if (execStat) {
							runStat.updateStatOnConnection(iterateId, 1, 1

									, "row24"

							);
						}

						boolean hasCasePrimitiveKeyWithNull_tMap_7 = false;

						// ###############################
						// # Input tables (lookups)
						boolean rejectedInnerJoin_tMap_7 = false;
						boolean mainRowRejected_tMap_7 = false;

						// ###############################
						{ // start of Var scope

							// ###############################
							// # Vars tables

							Var__tMap_7__Struct Var = Var__tMap_7;// ###############################
							// ###############################
							// # Output tables

							owners = null;

// # Output table : 'owners'
							owners_tmp.USERDOC_SEQ = row24.USERDOC_SEQ;
							owners_tmp.USERDOC_SERIES = row24.USERDOC_SERIES;
							owners_tmp.USERDOC_NBR = row24.USERDOC_NBR;
							owners_tmp.IND_SERVICE = new BigDecimal("1");
							owners_tmp.OWNERSHIP_NOTES = null;
							owners_tmp.PERSON_NAME = row24.PERSON_NAME;
							owners_tmp.PERSON_NAME_LANG2 = row24.PERSON_NAME_LANG2;
							owners_tmp.NATIONALITY_COUNTRY_CODE = row24.NATIONALITY_COUNTRY_CODE;
							owners_tmp.IND_COMPANY = row24.IND_COMPANY;
							owners_tmp.LEGAL_NATURE = row24.LEGAL_NATURE;
							owners_tmp.LEGAL_NATURE_LANG2 = row24.LEGAL_NATURE_LANG2;
							owners_tmp.LEGAL_ID_TYPE = row24.LEGAL_ID_TYPE;
							owners_tmp.LEGAL_ID_NBR = row24.LEGAL_ID_NBR;
							owners_tmp.INDIVIDUAL_ID_TYPE = row24.INDIVIDUAL_ID_TYPE;
							owners_tmp.INDIVIDUAL_ID_NBR = row24.INDIVIDUAL_ID_NBR;
							owners_tmp.RESIDENCE_COUNTRY_CODE = row24.RESIDENCE_COUNTRY_CODE;
							owners_tmp.STATE_NAME = row24.STATE_NAME;
							owners_tmp.STATE_CODE = row24.STATE_CODE;
							owners_tmp.CITY_NAME = row24.CITY_NAME;
							owners_tmp.CITY_CODE = row24.CITY_CODE;
							owners_tmp.ADDRESS_ZONE = row24.ADDRESS_ZONE;
							owners_tmp.ADDRESS_STREET = row24.ADDRESS_STREET;
							owners_tmp.ADDRESS_STREET_LANG2 = row24.ADDRESS_STREET_LANG2;
							owners_tmp.ZIP_CODE = row24.ZIP_CODE;
							owners_tmp.EMAIL = row24.EMAIL;
							owners_tmp.TELEPHONE = row24.TELEPHONE;
							owners_tmp.PERSON_GROUP_CODE = null;
							owners = owners_tmp;
// ###############################

						} // end of Var scope

						rejectedInnerJoin_tMap_7 = false;

						tos_count_tMap_7++;

						/**
						 * [tMap_7 main ] stop
						 */

						/**
						 * [tMap_7 process_data_begin ] start
						 */

						currentComponent = "tMap_7";

						/**
						 * [tMap_7 process_data_begin ] stop
						 */
// Start of branch "owners"
						if (owners != null) {
							row25 = null;

							/**
							 * [tDBOutput_7 main ] start
							 */

							currentComponent = "tDBOutput_7";

							if (execStat) {
								runStat.updateStatOnConnection(iterateId, 1, 1

										, "owners"

								);
							}

							row25 = null;
							whetherReject_tDBOutput_7 = false;
							try {
								if (owners.USERDOC_SEQ == null) {
									pstmt_tDBOutput_7.setNull(1, java.sql.Types.VARCHAR);
								} else {
									pstmt_tDBOutput_7.setString(1, owners.USERDOC_SEQ);
								}

								pstmt_tDBOutput_7.setBigDecimal(2, owners.USERDOC_SERIES);

								pstmt_tDBOutput_7.setBigDecimal(3, owners.USERDOC_NBR);

								pstmt_tDBOutput_7.setBigDecimal(4, owners.IND_SERVICE);

								if (owners.OWNERSHIP_NOTES == null) {
									pstmt_tDBOutput_7.setNull(5, java.sql.Types.VARCHAR);
								} else {
									pstmt_tDBOutput_7.setString(5, owners.OWNERSHIP_NOTES);
								}

								if (owners.PERSON_NAME == null) {
									pstmt_tDBOutput_7.setNull(6, java.sql.Types.VARCHAR);
								} else {
									pstmt_tDBOutput_7.setString(6, owners.PERSON_NAME);
								}

								if (owners.PERSON_NAME_LANG2 == null) {
									pstmt_tDBOutput_7.setNull(7, java.sql.Types.VARCHAR);
								} else {
									pstmt_tDBOutput_7.setString(7, owners.PERSON_NAME_LANG2);
								}

								if (owners.NATIONALITY_COUNTRY_CODE == null) {
									pstmt_tDBOutput_7.setNull(8, java.sql.Types.VARCHAR);
								} else {
									pstmt_tDBOutput_7.setString(8, owners.NATIONALITY_COUNTRY_CODE);
								}

								pstmt_tDBOutput_7.setBigDecimal(9, owners.IND_COMPANY);

								if (owners.LEGAL_NATURE == null) {
									pstmt_tDBOutput_7.setNull(10, java.sql.Types.VARCHAR);
								} else {
									pstmt_tDBOutput_7.setString(10, owners.LEGAL_NATURE);
								}

								if (owners.LEGAL_NATURE_LANG2 == null) {
									pstmt_tDBOutput_7.setNull(11, java.sql.Types.VARCHAR);
								} else {
									pstmt_tDBOutput_7.setString(11, owners.LEGAL_NATURE_LANG2);
								}

								if (owners.LEGAL_ID_TYPE == null) {
									pstmt_tDBOutput_7.setNull(12, java.sql.Types.VARCHAR);
								} else {
									pstmt_tDBOutput_7.setString(12, owners.LEGAL_ID_TYPE);
								}

								pstmt_tDBOutput_7.setBigDecimal(13, owners.LEGAL_ID_NBR);

								if (owners.INDIVIDUAL_ID_TYPE == null) {
									pstmt_tDBOutput_7.setNull(14, java.sql.Types.VARCHAR);
								} else {
									pstmt_tDBOutput_7.setString(14, owners.INDIVIDUAL_ID_TYPE);
								}

								pstmt_tDBOutput_7.setBigDecimal(15, owners.INDIVIDUAL_ID_NBR);

								if (owners.RESIDENCE_COUNTRY_CODE == null) {
									pstmt_tDBOutput_7.setNull(16, java.sql.Types.VARCHAR);
								} else {
									pstmt_tDBOutput_7.setString(16, owners.RESIDENCE_COUNTRY_CODE);
								}

								if (owners.STATE_NAME == null) {
									pstmt_tDBOutput_7.setNull(17, java.sql.Types.VARCHAR);
								} else {
									pstmt_tDBOutput_7.setString(17, owners.STATE_NAME);
								}

								if (owners.STATE_CODE == null) {
									pstmt_tDBOutput_7.setNull(18, java.sql.Types.VARCHAR);
								} else {
									pstmt_tDBOutput_7.setString(18, owners.STATE_CODE);
								}

								if (owners.CITY_NAME == null) {
									pstmt_tDBOutput_7.setNull(19, java.sql.Types.VARCHAR);
								} else {
									pstmt_tDBOutput_7.setString(19, owners.CITY_NAME);
								}

								if (owners.CITY_CODE == null) {
									pstmt_tDBOutput_7.setNull(20, java.sql.Types.VARCHAR);
								} else {
									pstmt_tDBOutput_7.setString(20, owners.CITY_CODE);
								}

								if (owners.ADDRESS_ZONE == null) {
									pstmt_tDBOutput_7.setNull(21, java.sql.Types.VARCHAR);
								} else {
									pstmt_tDBOutput_7.setString(21, owners.ADDRESS_ZONE);
								}

								if (owners.ADDRESS_STREET == null) {
									pstmt_tDBOutput_7.setNull(22, java.sql.Types.VARCHAR);
								} else {
									pstmt_tDBOutput_7.setString(22, owners.ADDRESS_STREET);
								}

								if (owners.ADDRESS_STREET_LANG2 == null) {
									pstmt_tDBOutput_7.setNull(23, java.sql.Types.VARCHAR);
								} else {
									pstmt_tDBOutput_7.setString(23, owners.ADDRESS_STREET_LANG2);
								}

								if (owners.ZIP_CODE == null) {
									pstmt_tDBOutput_7.setNull(24, java.sql.Types.VARCHAR);
								} else {
									pstmt_tDBOutput_7.setString(24, owners.ZIP_CODE);
								}

								if (owners.EMAIL == null) {
									pstmt_tDBOutput_7.setNull(25, java.sql.Types.VARCHAR);
								} else {
									pstmt_tDBOutput_7.setString(25, owners.EMAIL);
								}

								if (owners.TELEPHONE == null) {
									pstmt_tDBOutput_7.setNull(26, java.sql.Types.VARCHAR);
								} else {
									pstmt_tDBOutput_7.setString(26, owners.TELEPHONE);
								}

								if (owners.PERSON_GROUP_CODE == null) {
									pstmt_tDBOutput_7.setNull(27, java.sql.Types.VARCHAR);
								} else {
									pstmt_tDBOutput_7.setString(27, owners.PERSON_GROUP_CODE);
								}

								nb_line_tDBOutput_7++;
								insertedCount_tDBOutput_7 = insertedCount_tDBOutput_7
										+ pstmt_tDBOutput_7.executeUpdate();
							} catch (java.lang.Exception e) {
								whetherReject_tDBOutput_7 = true;
								row25 = new row25Struct();
								row25.USERDOC_SEQ = owners.USERDOC_SEQ;
								row25.USERDOC_SERIES = owners.USERDOC_SERIES;
								row25.USERDOC_NBR = owners.USERDOC_NBR;
								row25.IND_SERVICE = owners.IND_SERVICE;
								row25.OWNERSHIP_NOTES = owners.OWNERSHIP_NOTES;
								row25.PERSON_NAME = owners.PERSON_NAME;
								row25.PERSON_NAME_LANG2 = owners.PERSON_NAME_LANG2;
								row25.NATIONALITY_COUNTRY_CODE = owners.NATIONALITY_COUNTRY_CODE;
								row25.IND_COMPANY = owners.IND_COMPANY;
								row25.LEGAL_NATURE = owners.LEGAL_NATURE;
								row25.LEGAL_NATURE_LANG2 = owners.LEGAL_NATURE_LANG2;
								row25.LEGAL_ID_TYPE = owners.LEGAL_ID_TYPE;
								row25.LEGAL_ID_NBR = owners.LEGAL_ID_NBR;
								row25.INDIVIDUAL_ID_TYPE = owners.INDIVIDUAL_ID_TYPE;
								row25.INDIVIDUAL_ID_NBR = owners.INDIVIDUAL_ID_NBR;
								row25.RESIDENCE_COUNTRY_CODE = owners.RESIDENCE_COUNTRY_CODE;
								row25.STATE_NAME = owners.STATE_NAME;
								row25.STATE_CODE = owners.STATE_CODE;
								row25.CITY_NAME = owners.CITY_NAME;
								row25.CITY_CODE = owners.CITY_CODE;
								row25.ADDRESS_ZONE = owners.ADDRESS_ZONE;
								row25.ADDRESS_STREET = owners.ADDRESS_STREET;
								row25.ADDRESS_STREET_LANG2 = owners.ADDRESS_STREET_LANG2;
								row25.ZIP_CODE = owners.ZIP_CODE;
								row25.EMAIL = owners.EMAIL;
								row25.TELEPHONE = owners.TELEPHONE;
								row25.PERSON_GROUP_CODE = owners.PERSON_GROUP_CODE;
								rejectedCount_tDBOutput_7 = rejectedCount_tDBOutput_7 + 1;
								row25.errorCode = ((java.sql.SQLException) e).getSQLState();
								row25.errorMessage = e.getMessage() + " - Line: " + tos_count_tDBOutput_7;
							}
							if (!whetherReject_tDBOutput_7) {
							}
							////////// batch execute by batch size///////
							class LimitBytesHelper_tDBOutput_7 {
								public int limitBytePart1(int counter, java.sql.PreparedStatement pstmt_tDBOutput_7)
										throws Exception {
									try {

										for (int countEach_tDBOutput_7 : pstmt_tDBOutput_7.executeBatch()) {
											if (countEach_tDBOutput_7 == -2 || countEach_tDBOutput_7 == -3) {
												break;
											}
											counter += countEach_tDBOutput_7;
										}

									} catch (java.sql.BatchUpdateException e) {

										int countSum_tDBOutput_7 = 0;
										for (int countEach_tDBOutput_7 : e.getUpdateCounts()) {
											counter += (countEach_tDBOutput_7 < 0 ? 0 : countEach_tDBOutput_7);
										}

										System.err.println(e.getMessage());

									}
									return counter;
								}

								public int limitBytePart2(int counter, java.sql.PreparedStatement pstmt_tDBOutput_7)
										throws Exception {
									try {

										for (int countEach_tDBOutput_7 : pstmt_tDBOutput_7.executeBatch()) {
											if (countEach_tDBOutput_7 == -2 || countEach_tDBOutput_7 == -3) {
												break;
											}
											counter += countEach_tDBOutput_7;
										}

									} catch (java.sql.BatchUpdateException e) {

										for (int countEach_tDBOutput_7 : e.getUpdateCounts()) {
											counter += (countEach_tDBOutput_7 < 0 ? 0 : countEach_tDBOutput_7);
										}

										System.err.println(e.getMessage());

									}
									return counter;
								}
							}

							//////////// commit every////////////

							tos_count_tDBOutput_7++;

							/**
							 * [tDBOutput_7 main ] stop
							 */

							/**
							 * [tDBOutput_7 process_data_begin ] start
							 */

							currentComponent = "tDBOutput_7";

							/**
							 * [tDBOutput_7 process_data_begin ] stop
							 */
// Start of branch "row25"
							if (row25 != null) {

								/**
								 * [tLogRow_7 main ] start
								 */

								currentComponent = "tLogRow_7";

								if (execStat) {
									runStat.updateStatOnConnection(iterateId, 1, 1

											, "row25"

									);
								}

///////////////////////		

								strBuffer_tLogRow_7 = new StringBuilder();

								if (row25.USERDOC_SEQ != null) { //

									strBuffer_tLogRow_7.append(String.valueOf(row25.USERDOC_SEQ));

								} //

								strBuffer_tLogRow_7.append("|");

								if (row25.USERDOC_SERIES != null) { //

									strBuffer_tLogRow_7.append(row25.USERDOC_SERIES
											.setScale(0, java.math.RoundingMode.HALF_UP).toPlainString());

								} //

								strBuffer_tLogRow_7.append("|");

								if (row25.USERDOC_NBR != null) { //

									strBuffer_tLogRow_7.append(row25.USERDOC_NBR
											.setScale(0, java.math.RoundingMode.HALF_UP).toPlainString());

								} //

								strBuffer_tLogRow_7.append("|");

								if (row25.IND_SERVICE != null) { //

									strBuffer_tLogRow_7.append(row25.IND_SERVICE
											.setScale(0, java.math.RoundingMode.HALF_UP).toPlainString());

								} //

								strBuffer_tLogRow_7.append("|");

								if (row25.OWNERSHIP_NOTES != null) { //

									strBuffer_tLogRow_7.append(String.valueOf(row25.OWNERSHIP_NOTES));

								} //

								strBuffer_tLogRow_7.append("|");

								if (row25.PERSON_NAME != null) { //

									strBuffer_tLogRow_7.append(String.valueOf(row25.PERSON_NAME));

								} //

								strBuffer_tLogRow_7.append("|");

								if (row25.PERSON_NAME_LANG2 != null) { //

									strBuffer_tLogRow_7.append(String.valueOf(row25.PERSON_NAME_LANG2));

								} //

								strBuffer_tLogRow_7.append("|");

								if (row25.NATIONALITY_COUNTRY_CODE != null) { //

									strBuffer_tLogRow_7.append(String.valueOf(row25.NATIONALITY_COUNTRY_CODE));

								} //

								strBuffer_tLogRow_7.append("|");

								if (row25.IND_COMPANY != null) { //

									strBuffer_tLogRow_7.append(row25.IND_COMPANY
											.setScale(0, java.math.RoundingMode.HALF_UP).toPlainString());

								} //

								strBuffer_tLogRow_7.append("|");

								if (row25.LEGAL_NATURE != null) { //

									strBuffer_tLogRow_7.append(String.valueOf(row25.LEGAL_NATURE));

								} //

								strBuffer_tLogRow_7.append("|");

								if (row25.LEGAL_NATURE_LANG2 != null) { //

									strBuffer_tLogRow_7.append(String.valueOf(row25.LEGAL_NATURE_LANG2));

								} //

								strBuffer_tLogRow_7.append("|");

								if (row25.LEGAL_ID_TYPE != null) { //

									strBuffer_tLogRow_7.append(String.valueOf(row25.LEGAL_ID_TYPE));

								} //

								strBuffer_tLogRow_7.append("|");

								if (row25.LEGAL_ID_NBR != null) { //

									strBuffer_tLogRow_7.append(row25.LEGAL_ID_NBR
											.setScale(0, java.math.RoundingMode.HALF_UP).toPlainString());

								} //

								strBuffer_tLogRow_7.append("|");

								if (row25.INDIVIDUAL_ID_TYPE != null) { //

									strBuffer_tLogRow_7.append(String.valueOf(row25.INDIVIDUAL_ID_TYPE));

								} //

								strBuffer_tLogRow_7.append("|");

								if (row25.INDIVIDUAL_ID_NBR != null) { //

									strBuffer_tLogRow_7.append(row25.INDIVIDUAL_ID_NBR
											.setScale(0, java.math.RoundingMode.HALF_UP).toPlainString());

								} //

								strBuffer_tLogRow_7.append("|");

								if (row25.RESIDENCE_COUNTRY_CODE != null) { //

									strBuffer_tLogRow_7.append(String.valueOf(row25.RESIDENCE_COUNTRY_CODE));

								} //

								strBuffer_tLogRow_7.append("|");

								if (row25.STATE_NAME != null) { //

									strBuffer_tLogRow_7.append(String.valueOf(row25.STATE_NAME));

								} //

								strBuffer_tLogRow_7.append("|");

								if (row25.STATE_CODE != null) { //

									strBuffer_tLogRow_7.append(String.valueOf(row25.STATE_CODE));

								} //

								strBuffer_tLogRow_7.append("|");

								if (row25.CITY_NAME != null) { //

									strBuffer_tLogRow_7.append(String.valueOf(row25.CITY_NAME));

								} //

								strBuffer_tLogRow_7.append("|");

								if (row25.CITY_CODE != null) { //

									strBuffer_tLogRow_7.append(String.valueOf(row25.CITY_CODE));

								} //

								strBuffer_tLogRow_7.append("|");

								if (row25.ADDRESS_ZONE != null) { //

									strBuffer_tLogRow_7.append(String.valueOf(row25.ADDRESS_ZONE));

								} //

								strBuffer_tLogRow_7.append("|");

								if (row25.ADDRESS_STREET != null) { //

									strBuffer_tLogRow_7.append(String.valueOf(row25.ADDRESS_STREET));

								} //

								strBuffer_tLogRow_7.append("|");

								if (row25.ADDRESS_STREET_LANG2 != null) { //

									strBuffer_tLogRow_7.append(String.valueOf(row25.ADDRESS_STREET_LANG2));

								} //

								strBuffer_tLogRow_7.append("|");

								if (row25.ZIP_CODE != null) { //

									strBuffer_tLogRow_7.append(String.valueOf(row25.ZIP_CODE));

								} //

								strBuffer_tLogRow_7.append("|");

								if (row25.EMAIL != null) { //

									strBuffer_tLogRow_7.append(String.valueOf(row25.EMAIL));

								} //

								strBuffer_tLogRow_7.append("|");

								if (row25.TELEPHONE != null) { //

									strBuffer_tLogRow_7.append(String.valueOf(row25.TELEPHONE));

								} //

								strBuffer_tLogRow_7.append("|");

								if (row25.PERSON_GROUP_CODE != null) { //

									strBuffer_tLogRow_7.append(String.valueOf(row25.PERSON_GROUP_CODE));

								} //

								strBuffer_tLogRow_7.append("|");

								if (row25.errorCode != null) { //

									strBuffer_tLogRow_7.append(String.valueOf(row25.errorCode));

								} //

								strBuffer_tLogRow_7.append("|");

								if (row25.errorMessage != null) { //

									strBuffer_tLogRow_7.append(String.valueOf(row25.errorMessage));

								} //

								if (globalMap.get("tLogRow_CONSOLE") != null) {
									consoleOut_tLogRow_7 = (java.io.PrintStream) globalMap.get("tLogRow_CONSOLE");
								} else {
									consoleOut_tLogRow_7 = new java.io.PrintStream(
											new java.io.BufferedOutputStream(System.out));
									globalMap.put("tLogRow_CONSOLE", consoleOut_tLogRow_7);
								}
								consoleOut_tLogRow_7.println(strBuffer_tLogRow_7.toString());
								consoleOut_tLogRow_7.flush();
								nb_line_tLogRow_7++;
//////

//////                    

///////////////////////    			

								tos_count_tLogRow_7++;

								/**
								 * [tLogRow_7 main ] stop
								 */

								/**
								 * [tLogRow_7 process_data_begin ] start
								 */

								currentComponent = "tLogRow_7";

								/**
								 * [tLogRow_7 process_data_begin ] stop
								 */

								/**
								 * [tLogRow_7 process_data_end ] start
								 */

								currentComponent = "tLogRow_7";

								/**
								 * [tLogRow_7 process_data_end ] stop
								 */

							} // End of branch "row25"

							/**
							 * [tDBOutput_7 process_data_end ] start
							 */

							currentComponent = "tDBOutput_7";

							/**
							 * [tDBOutput_7 process_data_end ] stop
							 */

						} // End of branch "owners"

						/**
						 * [tMap_7 process_data_end ] start
						 */

						currentComponent = "tMap_7";

						/**
						 * [tMap_7 process_data_end ] stop
						 */

						/**
						 * [tDBInput_15 process_data_end ] start
						 */

						currentComponent = "tDBInput_15";

						/**
						 * [tDBInput_15 process_data_end ] stop
						 */

						/**
						 * [tDBInput_15 end ] start
						 */

						currentComponent = "tDBInput_15";

					}
				} finally {
					if (rs_tDBInput_15 != null) {
						rs_tDBInput_15.close();
					}
					if (stmt_tDBInput_15 != null) {
						stmt_tDBInput_15.close();
					}
				}
				globalMap.put("tDBInput_15_NB_LINE", nb_line_tDBInput_15);

				ok_Hash.put("tDBInput_15", true);
				end_Hash.put("tDBInput_15", System.currentTimeMillis());

				/**
				 * [tDBInput_15 end ] stop
				 */

				/**
				 * [tMap_7 end ] start
				 */

				currentComponent = "tMap_7";

// ###############################
// # Lookup hashes releasing
// ###############################      

				if (execStat) {
					runStat.updateStat(resourceMap, iterateId, 2, 0, "row24");
				}

				ok_Hash.put("tMap_7", true);
				end_Hash.put("tMap_7", System.currentTimeMillis());

				/**
				 * [tMap_7 end ] stop
				 */

				/**
				 * [tDBOutput_7 end ] start
				 */

				currentComponent = "tDBOutput_7";

				if (pstmt_tDBOutput_7 != null) {

					pstmt_tDBOutput_7.close();
					resourceMap.remove("pstmt_tDBOutput_7");

				}
				resourceMap.put("statementClosed_tDBOutput_7", true);

				nb_line_deleted_tDBOutput_7 = nb_line_deleted_tDBOutput_7 + deletedCount_tDBOutput_7;
				nb_line_update_tDBOutput_7 = nb_line_update_tDBOutput_7 + updatedCount_tDBOutput_7;
				nb_line_inserted_tDBOutput_7 = nb_line_inserted_tDBOutput_7 + insertedCount_tDBOutput_7;
				nb_line_rejected_tDBOutput_7 = nb_line_rejected_tDBOutput_7 + rejectedCount_tDBOutput_7;

				globalMap.put("tDBOutput_7_NB_LINE", nb_line_tDBOutput_7);
				globalMap.put("tDBOutput_7_NB_LINE_UPDATED", nb_line_update_tDBOutput_7);
				globalMap.put("tDBOutput_7_NB_LINE_INSERTED", nb_line_inserted_tDBOutput_7);
				globalMap.put("tDBOutput_7_NB_LINE_DELETED", nb_line_deleted_tDBOutput_7);
				globalMap.put("tDBOutput_7_NB_LINE_REJECTED", nb_line_rejected_tDBOutput_7);

				if (execStat) {
					runStat.updateStat(resourceMap, iterateId, 2, 0, "owners");
				}

				ok_Hash.put("tDBOutput_7", true);
				end_Hash.put("tDBOutput_7", System.currentTimeMillis());

				/**
				 * [tDBOutput_7 end ] stop
				 */

				/**
				 * [tLogRow_7 end ] start
				 */

				currentComponent = "tLogRow_7";

//////
//////
				globalMap.put("tLogRow_7_NB_LINE", nb_line_tLogRow_7);

///////////////////////    			

				if (execStat) {
					runStat.updateStat(resourceMap, iterateId, 2, 0, "row25");
				}

				ok_Hash.put("tLogRow_7", true);
				end_Hash.put("tLogRow_7", System.currentTimeMillis());

				/**
				 * [tLogRow_7 end ] stop
				 */

			} // end the resume

			if (resumeEntryMethodName == null || globalResumeTicket) {
				resumeUtil.addLog("CHECKPOINT", "CONNECTION:SUBJOB_OK:tDBInput_15:OnSubjobOk", "",
						Thread.currentThread().getId() + "", "", "", "", "", "");
			}

			if (execStat) {
				runStat.updateStatOnConnection("OnSubjobOk21", 0, "ok");
			}

			tDBInput_3Process(globalMap);

		} catch (java.lang.Exception e) {

			TalendException te = new TalendException(e, currentComponent, globalMap);

			throw te;
		} catch (java.lang.Error error) {

			runStat.stopThreadStat();

			throw error;
		} finally {

			try {

				/**
				 * [tDBInput_15 finally ] start
				 */

				currentComponent = "tDBInput_15";

				/**
				 * [tDBInput_15 finally ] stop
				 */

				/**
				 * [tMap_7 finally ] start
				 */

				currentComponent = "tMap_7";

				/**
				 * [tMap_7 finally ] stop
				 */

				/**
				 * [tDBOutput_7 finally ] start
				 */

				currentComponent = "tDBOutput_7";

				if (resourceMap.get("statementClosed_tDBOutput_7") == null) {
					java.sql.PreparedStatement pstmtToClose_tDBOutput_7 = null;
					if ((pstmtToClose_tDBOutput_7 = (java.sql.PreparedStatement) resourceMap
							.remove("pstmt_tDBOutput_7")) != null) {
						pstmtToClose_tDBOutput_7.close();
					}
				}

				/**
				 * [tDBOutput_7 finally ] stop
				 */

				/**
				 * [tLogRow_7 finally ] start
				 */

				currentComponent = "tLogRow_7";

				/**
				 * [tLogRow_7 finally ] stop
				 */

			} catch (java.lang.Exception e) {
				// ignore
			} catch (java.lang.Error error) {
				// ignore
			}
			resourceMap = null;
		}

		globalMap.put("tDBInput_15_SUBPROCESS_STATE", 1);
	}

	public static class row29Struct implements routines.system.IPersistableRow<row29Struct> {
		final static byte[] commonByteArrayLock_WIPO_PROJECTS_E1a_Marc_Userdoc_a_interm = new byte[0];
		static byte[] commonByteArray_WIPO_PROJECTS_E1a_Marc_Userdoc_a_interm = new byte[0];

		public String USERDOC_SEQ;

		public String getUSERDOC_SEQ() {
			return this.USERDOC_SEQ;
		}

		public BigDecimal USERDOC_SERIES;

		public BigDecimal getUSERDOC_SERIES() {
			return this.USERDOC_SERIES;
		}

		public BigDecimal USERDOC_NBR;

		public BigDecimal getUSERDOC_NBR() {
			return this.USERDOC_NBR;
		}

		public BigDecimal IND_SERVICE;

		public BigDecimal getIND_SERVICE() {
			return this.IND_SERVICE;
		}

		public String REPRESENTATIVE_TYPE;

		public String getREPRESENTATIVE_TYPE() {
			return this.REPRESENTATIVE_TYPE;
		}

		public BigDecimal AGENT_CODE;

		public BigDecimal getAGENT_CODE() {
			return this.AGENT_CODE;
		}

		public String PERSON_NAME;

		public String getPERSON_NAME() {
			return this.PERSON_NAME;
		}

		public String PERSON_NAME_LANG2;

		public String getPERSON_NAME_LANG2() {
			return this.PERSON_NAME_LANG2;
		}

		public String NATIONALITY_COUNTRY_CODE;

		public String getNATIONALITY_COUNTRY_CODE() {
			return this.NATIONALITY_COUNTRY_CODE;
		}

		public BigDecimal IND_COMPANY;

		public BigDecimal getIND_COMPANY() {
			return this.IND_COMPANY;
		}

		public String LEGAL_NATURE;

		public String getLEGAL_NATURE() {
			return this.LEGAL_NATURE;
		}

		public String LEGAL_NATURE_LANG2;

		public String getLEGAL_NATURE_LANG2() {
			return this.LEGAL_NATURE_LANG2;
		}

		public String LEGAL_ID_TYPE;

		public String getLEGAL_ID_TYPE() {
			return this.LEGAL_ID_TYPE;
		}

		public BigDecimal LEGAL_ID_NBR;

		public BigDecimal getLEGAL_ID_NBR() {
			return this.LEGAL_ID_NBR;
		}

		public String INDIVIDUAL_ID_TYPE;

		public String getINDIVIDUAL_ID_TYPE() {
			return this.INDIVIDUAL_ID_TYPE;
		}

		public BigDecimal INDIVIDUAL_ID_NBR;

		public BigDecimal getINDIVIDUAL_ID_NBR() {
			return this.INDIVIDUAL_ID_NBR;
		}

		public String RESIDENCE_COUNTRY_CODE;

		public String getRESIDENCE_COUNTRY_CODE() {
			return this.RESIDENCE_COUNTRY_CODE;
		}

		public String STATE_NAME;

		public String getSTATE_NAME() {
			return this.STATE_NAME;
		}

		public String STATE_CODE;

		public String getSTATE_CODE() {
			return this.STATE_CODE;
		}

		public String CITY_NAME;

		public String getCITY_NAME() {
			return this.CITY_NAME;
		}

		public String CITY_CODE;

		public String getCITY_CODE() {
			return this.CITY_CODE;
		}

		public String ADDRESS_ZONE;

		public String getADDRESS_ZONE() {
			return this.ADDRESS_ZONE;
		}

		public String ADDRESS_STREET;

		public String getADDRESS_STREET() {
			return this.ADDRESS_STREET;
		}

		public String ADDRESS_STREET_LANG2;

		public String getADDRESS_STREET_LANG2() {
			return this.ADDRESS_STREET_LANG2;
		}

		public String ZIP_CODE;

		public String getZIP_CODE() {
			return this.ZIP_CODE;
		}

		public String EMAIL;

		public String getEMAIL() {
			return this.EMAIL;
		}

		public String TELEPHONE;

		public String getTELEPHONE() {
			return this.TELEPHONE;
		}

		public String PERSON_GROUP_CODE;

		public String getPERSON_GROUP_CODE() {
			return this.PERSON_GROUP_CODE;
		}

		public String errorCode;

		public String getErrorCode() {
			return this.errorCode;
		}

		public String errorMessage;

		public String getErrorMessage() {
			return this.errorMessage;
		}

		private String readString(ObjectInputStream dis) throws IOException {
			String strReturn = null;
			int length = 0;
			length = dis.readInt();
			if (length == -1) {
				strReturn = null;
			} else {
				if (length > commonByteArray_WIPO_PROJECTS_E1a_Marc_Userdoc_a_interm.length) {
					if (length < 1024 && commonByteArray_WIPO_PROJECTS_E1a_Marc_Userdoc_a_interm.length == 0) {
						commonByteArray_WIPO_PROJECTS_E1a_Marc_Userdoc_a_interm = new byte[1024];
					} else {
						commonByteArray_WIPO_PROJECTS_E1a_Marc_Userdoc_a_interm = new byte[2 * length];
					}
				}
				dis.readFully(commonByteArray_WIPO_PROJECTS_E1a_Marc_Userdoc_a_interm, 0, length);
				strReturn = new String(commonByteArray_WIPO_PROJECTS_E1a_Marc_Userdoc_a_interm, 0, length, utf8Charset);
			}
			return strReturn;
		}

		private void writeString(String str, ObjectOutputStream dos) throws IOException {
			if (str == null) {
				dos.writeInt(-1);
			} else {
				byte[] byteArray = str.getBytes(utf8Charset);
				dos.writeInt(byteArray.length);
				dos.write(byteArray);
			}
		}

		public void readData(ObjectInputStream dis) {

			synchronized (commonByteArrayLock_WIPO_PROJECTS_E1a_Marc_Userdoc_a_interm) {

				try {

					int length = 0;

					this.USERDOC_SEQ = readString(dis);

					this.USERDOC_SERIES = (BigDecimal) dis.readObject();

					this.USERDOC_NBR = (BigDecimal) dis.readObject();

					this.IND_SERVICE = (BigDecimal) dis.readObject();

					this.REPRESENTATIVE_TYPE = readString(dis);

					this.AGENT_CODE = (BigDecimal) dis.readObject();

					this.PERSON_NAME = readString(dis);

					this.PERSON_NAME_LANG2 = readString(dis);

					this.NATIONALITY_COUNTRY_CODE = readString(dis);

					this.IND_COMPANY = (BigDecimal) dis.readObject();

					this.LEGAL_NATURE = readString(dis);

					this.LEGAL_NATURE_LANG2 = readString(dis);

					this.LEGAL_ID_TYPE = readString(dis);

					this.LEGAL_ID_NBR = (BigDecimal) dis.readObject();

					this.INDIVIDUAL_ID_TYPE = readString(dis);

					this.INDIVIDUAL_ID_NBR = (BigDecimal) dis.readObject();

					this.RESIDENCE_COUNTRY_CODE = readString(dis);

					this.STATE_NAME = readString(dis);

					this.STATE_CODE = readString(dis);

					this.CITY_NAME = readString(dis);

					this.CITY_CODE = readString(dis);

					this.ADDRESS_ZONE = readString(dis);

					this.ADDRESS_STREET = readString(dis);

					this.ADDRESS_STREET_LANG2 = readString(dis);

					this.ZIP_CODE = readString(dis);

					this.EMAIL = readString(dis);

					this.TELEPHONE = readString(dis);

					this.PERSON_GROUP_CODE = readString(dis);

					this.errorCode = readString(dis);

					this.errorMessage = readString(dis);

				} catch (IOException e) {
					throw new RuntimeException(e);

				} catch (ClassNotFoundException eCNFE) {
					throw new RuntimeException(eCNFE);

				}

			}

		}

		public void writeData(ObjectOutputStream dos) {
			try {

				// String

				writeString(this.USERDOC_SEQ, dos);

				// BigDecimal

				dos.writeObject(this.USERDOC_SERIES);

				// BigDecimal

				dos.writeObject(this.USERDOC_NBR);

				// BigDecimal

				dos.writeObject(this.IND_SERVICE);

				// String

				writeString(this.REPRESENTATIVE_TYPE, dos);

				// BigDecimal

				dos.writeObject(this.AGENT_CODE);

				// String

				writeString(this.PERSON_NAME, dos);

				// String

				writeString(this.PERSON_NAME_LANG2, dos);

				// String

				writeString(this.NATIONALITY_COUNTRY_CODE, dos);

				// BigDecimal

				dos.writeObject(this.IND_COMPANY);

				// String

				writeString(this.LEGAL_NATURE, dos);

				// String

				writeString(this.LEGAL_NATURE_LANG2, dos);

				// String

				writeString(this.LEGAL_ID_TYPE, dos);

				// BigDecimal

				dos.writeObject(this.LEGAL_ID_NBR);

				// String

				writeString(this.INDIVIDUAL_ID_TYPE, dos);

				// BigDecimal

				dos.writeObject(this.INDIVIDUAL_ID_NBR);

				// String

				writeString(this.RESIDENCE_COUNTRY_CODE, dos);

				// String

				writeString(this.STATE_NAME, dos);

				// String

				writeString(this.STATE_CODE, dos);

				// String

				writeString(this.CITY_NAME, dos);

				// String

				writeString(this.CITY_CODE, dos);

				// String

				writeString(this.ADDRESS_ZONE, dos);

				// String

				writeString(this.ADDRESS_STREET, dos);

				// String

				writeString(this.ADDRESS_STREET_LANG2, dos);

				// String

				writeString(this.ZIP_CODE, dos);

				// String

				writeString(this.EMAIL, dos);

				// String

				writeString(this.TELEPHONE, dos);

				// String

				writeString(this.PERSON_GROUP_CODE, dos);

				// String

				writeString(this.errorCode, dos);

				// String

				writeString(this.errorMessage, dos);

			} catch (IOException e) {
				throw new RuntimeException(e);
			}

		}

		public String toString() {

			StringBuilder sb = new StringBuilder();
			sb.append(super.toString());
			sb.append("[");
			sb.append("USERDOC_SEQ=" + USERDOC_SEQ);
			sb.append(",USERDOC_SERIES=" + String.valueOf(USERDOC_SERIES));
			sb.append(",USERDOC_NBR=" + String.valueOf(USERDOC_NBR));
			sb.append(",IND_SERVICE=" + String.valueOf(IND_SERVICE));
			sb.append(",REPRESENTATIVE_TYPE=" + REPRESENTATIVE_TYPE);
			sb.append(",AGENT_CODE=" + String.valueOf(AGENT_CODE));
			sb.append(",PERSON_NAME=" + PERSON_NAME);
			sb.append(",PERSON_NAME_LANG2=" + PERSON_NAME_LANG2);
			sb.append(",NATIONALITY_COUNTRY_CODE=" + NATIONALITY_COUNTRY_CODE);
			sb.append(",IND_COMPANY=" + String.valueOf(IND_COMPANY));
			sb.append(",LEGAL_NATURE=" + LEGAL_NATURE);
			sb.append(",LEGAL_NATURE_LANG2=" + LEGAL_NATURE_LANG2);
			sb.append(",LEGAL_ID_TYPE=" + LEGAL_ID_TYPE);
			sb.append(",LEGAL_ID_NBR=" + String.valueOf(LEGAL_ID_NBR));
			sb.append(",INDIVIDUAL_ID_TYPE=" + INDIVIDUAL_ID_TYPE);
			sb.append(",INDIVIDUAL_ID_NBR=" + String.valueOf(INDIVIDUAL_ID_NBR));
			sb.append(",RESIDENCE_COUNTRY_CODE=" + RESIDENCE_COUNTRY_CODE);
			sb.append(",STATE_NAME=" + STATE_NAME);
			sb.append(",STATE_CODE=" + STATE_CODE);
			sb.append(",CITY_NAME=" + CITY_NAME);
			sb.append(",CITY_CODE=" + CITY_CODE);
			sb.append(",ADDRESS_ZONE=" + ADDRESS_ZONE);
			sb.append(",ADDRESS_STREET=" + ADDRESS_STREET);
			sb.append(",ADDRESS_STREET_LANG2=" + ADDRESS_STREET_LANG2);
			sb.append(",ZIP_CODE=" + ZIP_CODE);
			sb.append(",EMAIL=" + EMAIL);
			sb.append(",TELEPHONE=" + TELEPHONE);
			sb.append(",PERSON_GROUP_CODE=" + PERSON_GROUP_CODE);
			sb.append(",errorCode=" + errorCode);
			sb.append(",errorMessage=" + errorMessage);
			sb.append("]");

			return sb.toString();
		}

		/**
		 * Compare keys
		 */
		public int compareTo(row29Struct other) {

			int returnValue = -1;

			return returnValue;
		}

		private int checkNullsAndCompare(Object object1, Object object2) {
			int returnValue = 0;
			if (object1 instanceof Comparable && object2 instanceof Comparable) {
				returnValue = ((Comparable) object1).compareTo(object2);
			} else if (object1 != null && object2 != null) {
				returnValue = compareStrings(object1.toString(), object2.toString());
			} else if (object1 == null && object2 != null) {
				returnValue = 1;
			} else if (object1 != null && object2 == null) {
				returnValue = -1;
			} else {
				returnValue = 0;
			}

			return returnValue;
		}

		private int compareStrings(String string1, String string2) {
			return string1.compareTo(string2);
		}

	}

	public static class reprsStruct implements routines.system.IPersistableRow<reprsStruct> {
		final static byte[] commonByteArrayLock_WIPO_PROJECTS_E1a_Marc_Userdoc_a_interm = new byte[0];
		static byte[] commonByteArray_WIPO_PROJECTS_E1a_Marc_Userdoc_a_interm = new byte[0];

		public String USERDOC_SEQ;

		public String getUSERDOC_SEQ() {
			return this.USERDOC_SEQ;
		}

		public BigDecimal USERDOC_SERIES;

		public BigDecimal getUSERDOC_SERIES() {
			return this.USERDOC_SERIES;
		}

		public BigDecimal USERDOC_NBR;

		public BigDecimal getUSERDOC_NBR() {
			return this.USERDOC_NBR;
		}

		public BigDecimal IND_SERVICE;

		public BigDecimal getIND_SERVICE() {
			return this.IND_SERVICE;
		}

		public String REPRESENTATIVE_TYPE;

		public String getREPRESENTATIVE_TYPE() {
			return this.REPRESENTATIVE_TYPE;
		}

		public BigDecimal AGENT_CODE;

		public BigDecimal getAGENT_CODE() {
			return this.AGENT_CODE;
		}

		public String PERSON_NAME;

		public String getPERSON_NAME() {
			return this.PERSON_NAME;
		}

		public String PERSON_NAME_LANG2;

		public String getPERSON_NAME_LANG2() {
			return this.PERSON_NAME_LANG2;
		}

		public String NATIONALITY_COUNTRY_CODE;

		public String getNATIONALITY_COUNTRY_CODE() {
			return this.NATIONALITY_COUNTRY_CODE;
		}

		public BigDecimal IND_COMPANY;

		public BigDecimal getIND_COMPANY() {
			return this.IND_COMPANY;
		}

		public String LEGAL_NATURE;

		public String getLEGAL_NATURE() {
			return this.LEGAL_NATURE;
		}

		public String LEGAL_NATURE_LANG2;

		public String getLEGAL_NATURE_LANG2() {
			return this.LEGAL_NATURE_LANG2;
		}

		public String LEGAL_ID_TYPE;

		public String getLEGAL_ID_TYPE() {
			return this.LEGAL_ID_TYPE;
		}

		public BigDecimal LEGAL_ID_NBR;

		public BigDecimal getLEGAL_ID_NBR() {
			return this.LEGAL_ID_NBR;
		}

		public String INDIVIDUAL_ID_TYPE;

		public String getINDIVIDUAL_ID_TYPE() {
			return this.INDIVIDUAL_ID_TYPE;
		}

		public BigDecimal INDIVIDUAL_ID_NBR;

		public BigDecimal getINDIVIDUAL_ID_NBR() {
			return this.INDIVIDUAL_ID_NBR;
		}

		public String RESIDENCE_COUNTRY_CODE;

		public String getRESIDENCE_COUNTRY_CODE() {
			return this.RESIDENCE_COUNTRY_CODE;
		}

		public String STATE_NAME;

		public String getSTATE_NAME() {
			return this.STATE_NAME;
		}

		public String STATE_CODE;

		public String getSTATE_CODE() {
			return this.STATE_CODE;
		}

		public String CITY_NAME;

		public String getCITY_NAME() {
			return this.CITY_NAME;
		}

		public String CITY_CODE;

		public String getCITY_CODE() {
			return this.CITY_CODE;
		}

		public String ADDRESS_ZONE;

		public String getADDRESS_ZONE() {
			return this.ADDRESS_ZONE;
		}

		public String ADDRESS_STREET;

		public String getADDRESS_STREET() {
			return this.ADDRESS_STREET;
		}

		public String ADDRESS_STREET_LANG2;

		public String getADDRESS_STREET_LANG2() {
			return this.ADDRESS_STREET_LANG2;
		}

		public String ZIP_CODE;

		public String getZIP_CODE() {
			return this.ZIP_CODE;
		}

		public String EMAIL;

		public String getEMAIL() {
			return this.EMAIL;
		}

		public String TELEPHONE;

		public String getTELEPHONE() {
			return this.TELEPHONE;
		}

		public String PERSON_GROUP_CODE;

		public String getPERSON_GROUP_CODE() {
			return this.PERSON_GROUP_CODE;
		}

		private String readString(ObjectInputStream dis) throws IOException {
			String strReturn = null;
			int length = 0;
			length = dis.readInt();
			if (length == -1) {
				strReturn = null;
			} else {
				if (length > commonByteArray_WIPO_PROJECTS_E1a_Marc_Userdoc_a_interm.length) {
					if (length < 1024 && commonByteArray_WIPO_PROJECTS_E1a_Marc_Userdoc_a_interm.length == 0) {
						commonByteArray_WIPO_PROJECTS_E1a_Marc_Userdoc_a_interm = new byte[1024];
					} else {
						commonByteArray_WIPO_PROJECTS_E1a_Marc_Userdoc_a_interm = new byte[2 * length];
					}
				}
				dis.readFully(commonByteArray_WIPO_PROJECTS_E1a_Marc_Userdoc_a_interm, 0, length);
				strReturn = new String(commonByteArray_WIPO_PROJECTS_E1a_Marc_Userdoc_a_interm, 0, length, utf8Charset);
			}
			return strReturn;
		}

		private void writeString(String str, ObjectOutputStream dos) throws IOException {
			if (str == null) {
				dos.writeInt(-1);
			} else {
				byte[] byteArray = str.getBytes(utf8Charset);
				dos.writeInt(byteArray.length);
				dos.write(byteArray);
			}
		}

		public void readData(ObjectInputStream dis) {

			synchronized (commonByteArrayLock_WIPO_PROJECTS_E1a_Marc_Userdoc_a_interm) {

				try {

					int length = 0;

					this.USERDOC_SEQ = readString(dis);

					this.USERDOC_SERIES = (BigDecimal) dis.readObject();

					this.USERDOC_NBR = (BigDecimal) dis.readObject();

					this.IND_SERVICE = (BigDecimal) dis.readObject();

					this.REPRESENTATIVE_TYPE = readString(dis);

					this.AGENT_CODE = (BigDecimal) dis.readObject();

					this.PERSON_NAME = readString(dis);

					this.PERSON_NAME_LANG2 = readString(dis);

					this.NATIONALITY_COUNTRY_CODE = readString(dis);

					this.IND_COMPANY = (BigDecimal) dis.readObject();

					this.LEGAL_NATURE = readString(dis);

					this.LEGAL_NATURE_LANG2 = readString(dis);

					this.LEGAL_ID_TYPE = readString(dis);

					this.LEGAL_ID_NBR = (BigDecimal) dis.readObject();

					this.INDIVIDUAL_ID_TYPE = readString(dis);

					this.INDIVIDUAL_ID_NBR = (BigDecimal) dis.readObject();

					this.RESIDENCE_COUNTRY_CODE = readString(dis);

					this.STATE_NAME = readString(dis);

					this.STATE_CODE = readString(dis);

					this.CITY_NAME = readString(dis);

					this.CITY_CODE = readString(dis);

					this.ADDRESS_ZONE = readString(dis);

					this.ADDRESS_STREET = readString(dis);

					this.ADDRESS_STREET_LANG2 = readString(dis);

					this.ZIP_CODE = readString(dis);

					this.EMAIL = readString(dis);

					this.TELEPHONE = readString(dis);

					this.PERSON_GROUP_CODE = readString(dis);

				} catch (IOException e) {
					throw new RuntimeException(e);

				} catch (ClassNotFoundException eCNFE) {
					throw new RuntimeException(eCNFE);

				}

			}

		}

		public void writeData(ObjectOutputStream dos) {
			try {

				// String

				writeString(this.USERDOC_SEQ, dos);

				// BigDecimal

				dos.writeObject(this.USERDOC_SERIES);

				// BigDecimal

				dos.writeObject(this.USERDOC_NBR);

				// BigDecimal

				dos.writeObject(this.IND_SERVICE);

				// String

				writeString(this.REPRESENTATIVE_TYPE, dos);

				// BigDecimal

				dos.writeObject(this.AGENT_CODE);

				// String

				writeString(this.PERSON_NAME, dos);

				// String

				writeString(this.PERSON_NAME_LANG2, dos);

				// String

				writeString(this.NATIONALITY_COUNTRY_CODE, dos);

				// BigDecimal

				dos.writeObject(this.IND_COMPANY);

				// String

				writeString(this.LEGAL_NATURE, dos);

				// String

				writeString(this.LEGAL_NATURE_LANG2, dos);

				// String

				writeString(this.LEGAL_ID_TYPE, dos);

				// BigDecimal

				dos.writeObject(this.LEGAL_ID_NBR);

				// String

				writeString(this.INDIVIDUAL_ID_TYPE, dos);

				// BigDecimal

				dos.writeObject(this.INDIVIDUAL_ID_NBR);

				// String

				writeString(this.RESIDENCE_COUNTRY_CODE, dos);

				// String

				writeString(this.STATE_NAME, dos);

				// String

				writeString(this.STATE_CODE, dos);

				// String

				writeString(this.CITY_NAME, dos);

				// String

				writeString(this.CITY_CODE, dos);

				// String

				writeString(this.ADDRESS_ZONE, dos);

				// String

				writeString(this.ADDRESS_STREET, dos);

				// String

				writeString(this.ADDRESS_STREET_LANG2, dos);

				// String

				writeString(this.ZIP_CODE, dos);

				// String

				writeString(this.EMAIL, dos);

				// String

				writeString(this.TELEPHONE, dos);

				// String

				writeString(this.PERSON_GROUP_CODE, dos);

			} catch (IOException e) {
				throw new RuntimeException(e);
			}

		}

		public String toString() {

			StringBuilder sb = new StringBuilder();
			sb.append(super.toString());
			sb.append("[");
			sb.append("USERDOC_SEQ=" + USERDOC_SEQ);
			sb.append(",USERDOC_SERIES=" + String.valueOf(USERDOC_SERIES));
			sb.append(",USERDOC_NBR=" + String.valueOf(USERDOC_NBR));
			sb.append(",IND_SERVICE=" + String.valueOf(IND_SERVICE));
			sb.append(",REPRESENTATIVE_TYPE=" + REPRESENTATIVE_TYPE);
			sb.append(",AGENT_CODE=" + String.valueOf(AGENT_CODE));
			sb.append(",PERSON_NAME=" + PERSON_NAME);
			sb.append(",PERSON_NAME_LANG2=" + PERSON_NAME_LANG2);
			sb.append(",NATIONALITY_COUNTRY_CODE=" + NATIONALITY_COUNTRY_CODE);
			sb.append(",IND_COMPANY=" + String.valueOf(IND_COMPANY));
			sb.append(",LEGAL_NATURE=" + LEGAL_NATURE);
			sb.append(",LEGAL_NATURE_LANG2=" + LEGAL_NATURE_LANG2);
			sb.append(",LEGAL_ID_TYPE=" + LEGAL_ID_TYPE);
			sb.append(",LEGAL_ID_NBR=" + String.valueOf(LEGAL_ID_NBR));
			sb.append(",INDIVIDUAL_ID_TYPE=" + INDIVIDUAL_ID_TYPE);
			sb.append(",INDIVIDUAL_ID_NBR=" + String.valueOf(INDIVIDUAL_ID_NBR));
			sb.append(",RESIDENCE_COUNTRY_CODE=" + RESIDENCE_COUNTRY_CODE);
			sb.append(",STATE_NAME=" + STATE_NAME);
			sb.append(",STATE_CODE=" + STATE_CODE);
			sb.append(",CITY_NAME=" + CITY_NAME);
			sb.append(",CITY_CODE=" + CITY_CODE);
			sb.append(",ADDRESS_ZONE=" + ADDRESS_ZONE);
			sb.append(",ADDRESS_STREET=" + ADDRESS_STREET);
			sb.append(",ADDRESS_STREET_LANG2=" + ADDRESS_STREET_LANG2);
			sb.append(",ZIP_CODE=" + ZIP_CODE);
			sb.append(",EMAIL=" + EMAIL);
			sb.append(",TELEPHONE=" + TELEPHONE);
			sb.append(",PERSON_GROUP_CODE=" + PERSON_GROUP_CODE);
			sb.append("]");

			return sb.toString();
		}

		/**
		 * Compare keys
		 */
		public int compareTo(reprsStruct other) {

			int returnValue = -1;

			return returnValue;
		}

		private int checkNullsAndCompare(Object object1, Object object2) {
			int returnValue = 0;
			if (object1 instanceof Comparable && object2 instanceof Comparable) {
				returnValue = ((Comparable) object1).compareTo(object2);
			} else if (object1 != null && object2 != null) {
				returnValue = compareStrings(object1.toString(), object2.toString());
			} else if (object1 == null && object2 != null) {
				returnValue = 1;
			} else if (object1 != null && object2 == null) {
				returnValue = -1;
			} else {
				returnValue = 0;
			}

			return returnValue;
		}

		private int compareStrings(String string1, String string2) {
			return string1.compareTo(string2);
		}

	}

	public static class row26Struct implements routines.system.IPersistableRow<row26Struct> {
		final static byte[] commonByteArrayLock_WIPO_PROJECTS_E1a_Marc_Userdoc_a_interm = new byte[0];
		static byte[] commonByteArray_WIPO_PROJECTS_E1a_Marc_Userdoc_a_interm = new byte[0];

		public int sec_documento;

		public int getSec_documento() {
			return this.sec_documento;
		}

		public String tip_documento;

		public String getTip_documento() {
			return this.tip_documento;
		}

		public Long num_acta_documento;

		public Long getNum_acta_documento() {
			return this.num_acta_documento;
		}

		public Long num_acta;

		public Long getNum_acta() {
			return this.num_acta;
		}

		public Long num_registro;

		public Long getNum_registro() {
			return this.num_registro;
		}

		public java.util.Date fec_documento;

		public java.util.Date getFec_documento() {
			return this.fec_documento;
		}

		public String obs_documento;

		public String getObs_documento() {
			return this.obs_documento;
		}

		public String nom_solicitante;

		public String getNom_solicitante() {
			return this.nom_solicitante;
		}

		public String cod_pais;

		public String getCod_pais() {
			return this.cod_pais;
		}

		public Short num_agente;

		public Short getNum_agente() {
			return this.num_agente;
		}

		public java.util.Date fec_ingreso;

		public java.util.Date getFec_ingreso() {
			return this.fec_ingreso;
		}

		public Short tip_tramite;

		public Short getTip_tramite() {
			return this.tip_tramite;
		}

		public String cod_status;

		public String getCod_status() {
			return this.cod_status;
		}

		public java.util.Date fec_status;

		public java.util.Date getFec_status() {
			return this.fec_status;
		}

		public Integer num_registro_poder;

		public Integer getNum_registro_poder() {
			return this.num_registro_poder;
		}

		public Short num_agente_old;

		public Short getNum_agente_old() {
			return this.num_agente_old;
		}

		public Long cobro_caja;

		public Long getCobro_caja() {
			return this.cobro_caja;
		}

		public String ref_pago;

		public String getRef_pago() {
			return this.ref_pago;
		}

		private String readString(ObjectInputStream dis) throws IOException {
			String strReturn = null;
			int length = 0;
			length = dis.readInt();
			if (length == -1) {
				strReturn = null;
			} else {
				if (length > commonByteArray_WIPO_PROJECTS_E1a_Marc_Userdoc_a_interm.length) {
					if (length < 1024 && commonByteArray_WIPO_PROJECTS_E1a_Marc_Userdoc_a_interm.length == 0) {
						commonByteArray_WIPO_PROJECTS_E1a_Marc_Userdoc_a_interm = new byte[1024];
					} else {
						commonByteArray_WIPO_PROJECTS_E1a_Marc_Userdoc_a_interm = new byte[2 * length];
					}
				}
				dis.readFully(commonByteArray_WIPO_PROJECTS_E1a_Marc_Userdoc_a_interm, 0, length);
				strReturn = new String(commonByteArray_WIPO_PROJECTS_E1a_Marc_Userdoc_a_interm, 0, length, utf8Charset);
			}
			return strReturn;
		}

		private void writeString(String str, ObjectOutputStream dos) throws IOException {
			if (str == null) {
				dos.writeInt(-1);
			} else {
				byte[] byteArray = str.getBytes(utf8Charset);
				dos.writeInt(byteArray.length);
				dos.write(byteArray);
			}
		}

		private java.util.Date readDate(ObjectInputStream dis) throws IOException {
			java.util.Date dateReturn = null;
			int length = 0;
			length = dis.readByte();
			if (length == -1) {
				dateReturn = null;
			} else {
				dateReturn = new Date(dis.readLong());
			}
			return dateReturn;
		}

		private void writeDate(java.util.Date date1, ObjectOutputStream dos) throws IOException {
			if (date1 == null) {
				dos.writeByte(-1);
			} else {
				dos.writeByte(0);
				dos.writeLong(date1.getTime());
			}
		}

		private Integer readInteger(ObjectInputStream dis) throws IOException {
			Integer intReturn;
			int length = 0;
			length = dis.readByte();
			if (length == -1) {
				intReturn = null;
			} else {
				intReturn = dis.readInt();
			}
			return intReturn;
		}

		private void writeInteger(Integer intNum, ObjectOutputStream dos) throws IOException {
			if (intNum == null) {
				dos.writeByte(-1);
			} else {
				dos.writeByte(0);
				dos.writeInt(intNum);
			}
		}

		public void readData(ObjectInputStream dis) {

			synchronized (commonByteArrayLock_WIPO_PROJECTS_E1a_Marc_Userdoc_a_interm) {

				try {

					int length = 0;

					this.sec_documento = dis.readInt();

					this.tip_documento = readString(dis);

					length = dis.readByte();
					if (length == -1) {
						this.num_acta_documento = null;
					} else {
						this.num_acta_documento = dis.readLong();
					}

					length = dis.readByte();
					if (length == -1) {
						this.num_acta = null;
					} else {
						this.num_acta = dis.readLong();
					}

					length = dis.readByte();
					if (length == -1) {
						this.num_registro = null;
					} else {
						this.num_registro = dis.readLong();
					}

					this.fec_documento = readDate(dis);

					this.obs_documento = readString(dis);

					this.nom_solicitante = readString(dis);

					this.cod_pais = readString(dis);

					length = dis.readByte();
					if (length == -1) {
						this.num_agente = null;
					} else {
						this.num_agente = dis.readShort();
					}

					this.fec_ingreso = readDate(dis);

					length = dis.readByte();
					if (length == -1) {
						this.tip_tramite = null;
					} else {
						this.tip_tramite = dis.readShort();
					}

					this.cod_status = readString(dis);

					this.fec_status = readDate(dis);

					this.num_registro_poder = readInteger(dis);

					length = dis.readByte();
					if (length == -1) {
						this.num_agente_old = null;
					} else {
						this.num_agente_old = dis.readShort();
					}

					length = dis.readByte();
					if (length == -1) {
						this.cobro_caja = null;
					} else {
						this.cobro_caja = dis.readLong();
					}

					this.ref_pago = readString(dis);

				} catch (IOException e) {
					throw new RuntimeException(e);

				}

			}

		}

		public void writeData(ObjectOutputStream dos) {
			try {

				// int

				dos.writeInt(this.sec_documento);

				// String

				writeString(this.tip_documento, dos);

				// Long

				if (this.num_acta_documento == null) {
					dos.writeByte(-1);
				} else {
					dos.writeByte(0);
					dos.writeLong(this.num_acta_documento);
				}

				// Long

				if (this.num_acta == null) {
					dos.writeByte(-1);
				} else {
					dos.writeByte(0);
					dos.writeLong(this.num_acta);
				}

				// Long

				if (this.num_registro == null) {
					dos.writeByte(-1);
				} else {
					dos.writeByte(0);
					dos.writeLong(this.num_registro);
				}

				// java.util.Date

				writeDate(this.fec_documento, dos);

				// String

				writeString(this.obs_documento, dos);

				// String

				writeString(this.nom_solicitante, dos);

				// String

				writeString(this.cod_pais, dos);

				// Short

				if (this.num_agente == null) {
					dos.writeByte(-1);
				} else {
					dos.writeByte(0);
					dos.writeShort(this.num_agente);
				}

				// java.util.Date

				writeDate(this.fec_ingreso, dos);

				// Short

				if (this.tip_tramite == null) {
					dos.writeByte(-1);
				} else {
					dos.writeByte(0);
					dos.writeShort(this.tip_tramite);
				}

				// String

				writeString(this.cod_status, dos);

				// java.util.Date

				writeDate(this.fec_status, dos);

				// Integer

				writeInteger(this.num_registro_poder, dos);

				// Short

				if (this.num_agente_old == null) {
					dos.writeByte(-1);
				} else {
					dos.writeByte(0);
					dos.writeShort(this.num_agente_old);
				}

				// Long

				if (this.cobro_caja == null) {
					dos.writeByte(-1);
				} else {
					dos.writeByte(0);
					dos.writeLong(this.cobro_caja);
				}

				// String

				writeString(this.ref_pago, dos);

			} catch (IOException e) {
				throw new RuntimeException(e);
			}

		}

		public String toString() {

			StringBuilder sb = new StringBuilder();
			sb.append(super.toString());
			sb.append("[");
			sb.append("sec_documento=" + String.valueOf(sec_documento));
			sb.append(",tip_documento=" + tip_documento);
			sb.append(",num_acta_documento=" + String.valueOf(num_acta_documento));
			sb.append(",num_acta=" + String.valueOf(num_acta));
			sb.append(",num_registro=" + String.valueOf(num_registro));
			sb.append(",fec_documento=" + String.valueOf(fec_documento));
			sb.append(",obs_documento=" + obs_documento);
			sb.append(",nom_solicitante=" + nom_solicitante);
			sb.append(",cod_pais=" + cod_pais);
			sb.append(",num_agente=" + String.valueOf(num_agente));
			sb.append(",fec_ingreso=" + String.valueOf(fec_ingreso));
			sb.append(",tip_tramite=" + String.valueOf(tip_tramite));
			sb.append(",cod_status=" + cod_status);
			sb.append(",fec_status=" + String.valueOf(fec_status));
			sb.append(",num_registro_poder=" + String.valueOf(num_registro_poder));
			sb.append(",num_agente_old=" + String.valueOf(num_agente_old));
			sb.append(",cobro_caja=" + String.valueOf(cobro_caja));
			sb.append(",ref_pago=" + ref_pago);
			sb.append("]");

			return sb.toString();
		}

		/**
		 * Compare keys
		 */
		public int compareTo(row26Struct other) {

			int returnValue = -1;

			return returnValue;
		}

		private int checkNullsAndCompare(Object object1, Object object2) {
			int returnValue = 0;
			if (object1 instanceof Comparable && object2 instanceof Comparable) {
				returnValue = ((Comparable) object1).compareTo(object2);
			} else if (object1 != null && object2 != null) {
				returnValue = compareStrings(object1.toString(), object2.toString());
			} else if (object1 == null && object2 != null) {
				returnValue = 1;
			} else if (object1 != null && object2 == null) {
				returnValue = -1;
			} else {
				returnValue = 0;
			}

			return returnValue;
		}

		private int compareStrings(String string1, String string2) {
			return string1.compareTo(string2);
		}

	}

	public static class after_tDBInput_3Struct implements routines.system.IPersistableRow<after_tDBInput_3Struct> {
		final static byte[] commonByteArrayLock_WIPO_PROJECTS_E1a_Marc_Userdoc_a_interm = new byte[0];
		static byte[] commonByteArray_WIPO_PROJECTS_E1a_Marc_Userdoc_a_interm = new byte[0];

		public int sec_documento;

		public int getSec_documento() {
			return this.sec_documento;
		}

		public String tip_documento;

		public String getTip_documento() {
			return this.tip_documento;
		}

		public Long num_acta_documento;

		public Long getNum_acta_documento() {
			return this.num_acta_documento;
		}

		public Long num_acta;

		public Long getNum_acta() {
			return this.num_acta;
		}

		public Long num_registro;

		public Long getNum_registro() {
			return this.num_registro;
		}

		public java.util.Date fec_documento;

		public java.util.Date getFec_documento() {
			return this.fec_documento;
		}

		public String obs_documento;

		public String getObs_documento() {
			return this.obs_documento;
		}

		public String nom_solicitante;

		public String getNom_solicitante() {
			return this.nom_solicitante;
		}

		public String cod_pais;

		public String getCod_pais() {
			return this.cod_pais;
		}

		public Short num_agente;

		public Short getNum_agente() {
			return this.num_agente;
		}

		public java.util.Date fec_ingreso;

		public java.util.Date getFec_ingreso() {
			return this.fec_ingreso;
		}

		public Short tip_tramite;

		public Short getTip_tramite() {
			return this.tip_tramite;
		}

		public String cod_status;

		public String getCod_status() {
			return this.cod_status;
		}

		public java.util.Date fec_status;

		public java.util.Date getFec_status() {
			return this.fec_status;
		}

		public Integer num_registro_poder;

		public Integer getNum_registro_poder() {
			return this.num_registro_poder;
		}

		public Short num_agente_old;

		public Short getNum_agente_old() {
			return this.num_agente_old;
		}

		public Long cobro_caja;

		public Long getCobro_caja() {
			return this.cobro_caja;
		}

		public String ref_pago;

		public String getRef_pago() {
			return this.ref_pago;
		}

		private String readString(ObjectInputStream dis) throws IOException {
			String strReturn = null;
			int length = 0;
			length = dis.readInt();
			if (length == -1) {
				strReturn = null;
			} else {
				if (length > commonByteArray_WIPO_PROJECTS_E1a_Marc_Userdoc_a_interm.length) {
					if (length < 1024 && commonByteArray_WIPO_PROJECTS_E1a_Marc_Userdoc_a_interm.length == 0) {
						commonByteArray_WIPO_PROJECTS_E1a_Marc_Userdoc_a_interm = new byte[1024];
					} else {
						commonByteArray_WIPO_PROJECTS_E1a_Marc_Userdoc_a_interm = new byte[2 * length];
					}
				}
				dis.readFully(commonByteArray_WIPO_PROJECTS_E1a_Marc_Userdoc_a_interm, 0, length);
				strReturn = new String(commonByteArray_WIPO_PROJECTS_E1a_Marc_Userdoc_a_interm, 0, length, utf8Charset);
			}
			return strReturn;
		}

		private void writeString(String str, ObjectOutputStream dos) throws IOException {
			if (str == null) {
				dos.writeInt(-1);
			} else {
				byte[] byteArray = str.getBytes(utf8Charset);
				dos.writeInt(byteArray.length);
				dos.write(byteArray);
			}
		}

		private java.util.Date readDate(ObjectInputStream dis) throws IOException {
			java.util.Date dateReturn = null;
			int length = 0;
			length = dis.readByte();
			if (length == -1) {
				dateReturn = null;
			} else {
				dateReturn = new Date(dis.readLong());
			}
			return dateReturn;
		}

		private void writeDate(java.util.Date date1, ObjectOutputStream dos) throws IOException {
			if (date1 == null) {
				dos.writeByte(-1);
			} else {
				dos.writeByte(0);
				dos.writeLong(date1.getTime());
			}
		}

		private Integer readInteger(ObjectInputStream dis) throws IOException {
			Integer intReturn;
			int length = 0;
			length = dis.readByte();
			if (length == -1) {
				intReturn = null;
			} else {
				intReturn = dis.readInt();
			}
			return intReturn;
		}

		private void writeInteger(Integer intNum, ObjectOutputStream dos) throws IOException {
			if (intNum == null) {
				dos.writeByte(-1);
			} else {
				dos.writeByte(0);
				dos.writeInt(intNum);
			}
		}

		public void readData(ObjectInputStream dis) {

			synchronized (commonByteArrayLock_WIPO_PROJECTS_E1a_Marc_Userdoc_a_interm) {

				try {

					int length = 0;

					this.sec_documento = dis.readInt();

					this.tip_documento = readString(dis);

					length = dis.readByte();
					if (length == -1) {
						this.num_acta_documento = null;
					} else {
						this.num_acta_documento = dis.readLong();
					}

					length = dis.readByte();
					if (length == -1) {
						this.num_acta = null;
					} else {
						this.num_acta = dis.readLong();
					}

					length = dis.readByte();
					if (length == -1) {
						this.num_registro = null;
					} else {
						this.num_registro = dis.readLong();
					}

					this.fec_documento = readDate(dis);

					this.obs_documento = readString(dis);

					this.nom_solicitante = readString(dis);

					this.cod_pais = readString(dis);

					length = dis.readByte();
					if (length == -1) {
						this.num_agente = null;
					} else {
						this.num_agente = dis.readShort();
					}

					this.fec_ingreso = readDate(dis);

					length = dis.readByte();
					if (length == -1) {
						this.tip_tramite = null;
					} else {
						this.tip_tramite = dis.readShort();
					}

					this.cod_status = readString(dis);

					this.fec_status = readDate(dis);

					this.num_registro_poder = readInteger(dis);

					length = dis.readByte();
					if (length == -1) {
						this.num_agente_old = null;
					} else {
						this.num_agente_old = dis.readShort();
					}

					length = dis.readByte();
					if (length == -1) {
						this.cobro_caja = null;
					} else {
						this.cobro_caja = dis.readLong();
					}

					this.ref_pago = readString(dis);

				} catch (IOException e) {
					throw new RuntimeException(e);

				}

			}

		}

		public void writeData(ObjectOutputStream dos) {
			try {

				// int

				dos.writeInt(this.sec_documento);

				// String

				writeString(this.tip_documento, dos);

				// Long

				if (this.num_acta_documento == null) {
					dos.writeByte(-1);
				} else {
					dos.writeByte(0);
					dos.writeLong(this.num_acta_documento);
				}

				// Long

				if (this.num_acta == null) {
					dos.writeByte(-1);
				} else {
					dos.writeByte(0);
					dos.writeLong(this.num_acta);
				}

				// Long

				if (this.num_registro == null) {
					dos.writeByte(-1);
				} else {
					dos.writeByte(0);
					dos.writeLong(this.num_registro);
				}

				// java.util.Date

				writeDate(this.fec_documento, dos);

				// String

				writeString(this.obs_documento, dos);

				// String

				writeString(this.nom_solicitante, dos);

				// String

				writeString(this.cod_pais, dos);

				// Short

				if (this.num_agente == null) {
					dos.writeByte(-1);
				} else {
					dos.writeByte(0);
					dos.writeShort(this.num_agente);
				}

				// java.util.Date

				writeDate(this.fec_ingreso, dos);

				// Short

				if (this.tip_tramite == null) {
					dos.writeByte(-1);
				} else {
					dos.writeByte(0);
					dos.writeShort(this.tip_tramite);
				}

				// String

				writeString(this.cod_status, dos);

				// java.util.Date

				writeDate(this.fec_status, dos);

				// Integer

				writeInteger(this.num_registro_poder, dos);

				// Short

				if (this.num_agente_old == null) {
					dos.writeByte(-1);
				} else {
					dos.writeByte(0);
					dos.writeShort(this.num_agente_old);
				}

				// Long

				if (this.cobro_caja == null) {
					dos.writeByte(-1);
				} else {
					dos.writeByte(0);
					dos.writeLong(this.cobro_caja);
				}

				// String

				writeString(this.ref_pago, dos);

			} catch (IOException e) {
				throw new RuntimeException(e);
			}

		}

		public String toString() {

			StringBuilder sb = new StringBuilder();
			sb.append(super.toString());
			sb.append("[");
			sb.append("sec_documento=" + String.valueOf(sec_documento));
			sb.append(",tip_documento=" + tip_documento);
			sb.append(",num_acta_documento=" + String.valueOf(num_acta_documento));
			sb.append(",num_acta=" + String.valueOf(num_acta));
			sb.append(",num_registro=" + String.valueOf(num_registro));
			sb.append(",fec_documento=" + String.valueOf(fec_documento));
			sb.append(",obs_documento=" + obs_documento);
			sb.append(",nom_solicitante=" + nom_solicitante);
			sb.append(",cod_pais=" + cod_pais);
			sb.append(",num_agente=" + String.valueOf(num_agente));
			sb.append(",fec_ingreso=" + String.valueOf(fec_ingreso));
			sb.append(",tip_tramite=" + String.valueOf(tip_tramite));
			sb.append(",cod_status=" + cod_status);
			sb.append(",fec_status=" + String.valueOf(fec_status));
			sb.append(",num_registro_poder=" + String.valueOf(num_registro_poder));
			sb.append(",num_agente_old=" + String.valueOf(num_agente_old));
			sb.append(",cobro_caja=" + String.valueOf(cobro_caja));
			sb.append(",ref_pago=" + ref_pago);
			sb.append("]");

			return sb.toString();
		}

		/**
		 * Compare keys
		 */
		public int compareTo(after_tDBInput_3Struct other) {

			int returnValue = -1;

			return returnValue;
		}

		private int checkNullsAndCompare(Object object1, Object object2) {
			int returnValue = 0;
			if (object1 instanceof Comparable && object2 instanceof Comparable) {
				returnValue = ((Comparable) object1).compareTo(object2);
			} else if (object1 != null && object2 != null) {
				returnValue = compareStrings(object1.toString(), object2.toString());
			} else if (object1 == null && object2 != null) {
				returnValue = 1;
			} else if (object1 != null && object2 == null) {
				returnValue = -1;
			} else {
				returnValue = 0;
			}

			return returnValue;
		}

		private int compareStrings(String string1, String string2) {
			return string1.compareTo(string2);
		}

	}

	public void tDBInput_3Process(final java.util.Map<String, Object> globalMap) throws TalendException {
		globalMap.put("tDBInput_3_SUBPROCESS_STATE", 0);

		final boolean execStat = this.execStat;

		String iterateId = "";

		String currentComponent = "";
		java.util.Map<String, Object> resourceMap = new java.util.HashMap<String, Object>();

		try {
			// TDI-39566 avoid throwing an useless Exception
			boolean resumeIt = true;
			if (globalResumeTicket == false && resumeEntryMethodName != null) {
				String currentMethodName = new java.lang.Exception().getStackTrace()[0].getMethodName();
				resumeIt = resumeEntryMethodName.equals(currentMethodName);
			}
			if (resumeIt || globalResumeTicket) { // start the resume
				globalResumeTicket = true;

				tDBInput_17Process(globalMap);
				tDBInput_18Process(globalMap);

				row26Struct row26 = new row26Struct();
				reprsStruct reprs = new reprsStruct();
				row29Struct row29 = new row29Struct();

				/**
				 * [tLogRow_8 begin ] start
				 */

				ok_Hash.put("tLogRow_8", false);
				start_Hash.put("tLogRow_8", System.currentTimeMillis());

				currentComponent = "tLogRow_8";

				if (execStat) {
					runStat.updateStatOnConnection(resourceMap, iterateId, 0, 0, "row29");
				}

				int tos_count_tLogRow_8 = 0;

				///////////////////////

				final String OUTPUT_FIELD_SEPARATOR_tLogRow_8 = "|";
				java.io.PrintStream consoleOut_tLogRow_8 = null;

				StringBuilder strBuffer_tLogRow_8 = null;
				int nb_line_tLogRow_8 = 0;
///////////////////////    			

				/**
				 * [tLogRow_8 begin ] stop
				 */

				/**
				 * [tDBOutput_8 begin ] start
				 */

				ok_Hash.put("tDBOutput_8", false);
				start_Hash.put("tDBOutput_8", System.currentTimeMillis());

				currentComponent = "tDBOutput_8";

				if (execStat) {
					runStat.updateStatOnConnection(resourceMap, iterateId, 0, 0, "reprs");
				}

				int tos_count_tDBOutput_8 = 0;

				int nb_line_tDBOutput_8 = 0;
				int nb_line_update_tDBOutput_8 = 0;
				int nb_line_inserted_tDBOutput_8 = 0;
				int nb_line_deleted_tDBOutput_8 = 0;
				int nb_line_rejected_tDBOutput_8 = 0;

				int deletedCount_tDBOutput_8 = 0;
				int updatedCount_tDBOutput_8 = 0;
				int insertedCount_tDBOutput_8 = 0;
				int rejectedCount_tDBOutput_8 = 0;
				String dbschema_tDBOutput_8 = null;
				String tableName_tDBOutput_8 = null;
				boolean whetherReject_tDBOutput_8 = false;

				java.util.Calendar calendar_tDBOutput_8 = java.util.Calendar.getInstance();
				long year1_tDBOutput_8 = TalendDate.parseDate("yyyy-MM-dd", "0001-01-01").getTime();
				long year2_tDBOutput_8 = TalendDate.parseDate("yyyy-MM-dd", "1753-01-01").getTime();
				long year10000_tDBOutput_8 = TalendDate.parseDate("yyyy-MM-dd HH:mm:ss", "9999-12-31 24:00:00")
						.getTime();
				long date_tDBOutput_8;

				java.util.Calendar calendar_datetimeoffset_tDBOutput_8 = java.util.Calendar
						.getInstance(java.util.TimeZone.getTimeZone("UTC"));

				java.sql.Connection conn_tDBOutput_8 = null;
				String dbUser_tDBOutput_8 = null;
				dbschema_tDBOutput_8 = (String) globalMap.get("dbschema_tDBConnection_1");

				conn_tDBOutput_8 = (java.sql.Connection) globalMap.get("conn_tDBConnection_1");

				if (dbschema_tDBOutput_8 == null || dbschema_tDBOutput_8.trim().length() == 0) {
					tableName_tDBOutput_8 = "VW_IMPORT_USERDOC_REPRS";
				} else {
					tableName_tDBOutput_8 = dbschema_tDBOutput_8 + "].[" + "VW_IMPORT_USERDOC_REPRS";
				}
				int count_tDBOutput_8 = 0;

				String insert_tDBOutput_8 = "INSERT INTO [" + tableName_tDBOutput_8
						+ "] ([USERDOC_SEQ],[USERDOC_SERIES],[USERDOC_NBR],[IND_SERVICE],[REPRESENTATIVE_TYPE],[AGENT_CODE],[PERSON_NAME],[PERSON_NAME_LANG2],[NATIONALITY_COUNTRY_CODE],[IND_COMPANY],[LEGAL_NATURE],[LEGAL_NATURE_LANG2],[LEGAL_ID_TYPE],[LEGAL_ID_NBR],[INDIVIDUAL_ID_TYPE],[INDIVIDUAL_ID_NBR],[RESIDENCE_COUNTRY_CODE],[STATE_NAME],[STATE_CODE],[CITY_NAME],[CITY_CODE],[ADDRESS_ZONE],[ADDRESS_STREET],[ADDRESS_STREET_LANG2],[ZIP_CODE],[EMAIL],[TELEPHONE],[PERSON_GROUP_CODE]) VALUES (?,?,?,?,?,?,?,?,?,?,?,?,?,?,?,?,?,?,?,?,?,?,?,?,?,?,?,?)";
				java.sql.PreparedStatement pstmt_tDBOutput_8 = conn_tDBOutput_8.prepareStatement(insert_tDBOutput_8);
				resourceMap.put("pstmt_tDBOutput_8", pstmt_tDBOutput_8);

				boolean isShareIdentity_tDBOutput_8 = globalMap.get("shareIdentitySetting_tDBConnection_1") != null
						&& (Boolean) globalMap.get("shareIdentitySetting_tDBConnection_1") == true;

				/**
				 * [tDBOutput_8 begin ] stop
				 */

				/**
				 * [tMap_8 begin ] start
				 */

				ok_Hash.put("tMap_8", false);
				start_Hash.put("tMap_8", System.currentTimeMillis());

				currentComponent = "tMap_8";

				if (execStat) {
					runStat.updateStatOnConnection(resourceMap, iterateId, 0, 0, "row26");
				}

				int tos_count_tMap_8 = 0;

// ###############################
// # Lookup's keys initialization

				org.talend.designer.components.lookup.memory.AdvancedMemoryLookup<row27Struct> tHash_Lookup_row27 = (org.talend.designer.components.lookup.memory.AdvancedMemoryLookup<row27Struct>) ((org.talend.designer.components.lookup.memory.AdvancedMemoryLookup<row27Struct>) globalMap
						.get("tHash_Lookup_row27"));

				row27Struct row27HashKey = new row27Struct();
				row27Struct row27Default = new row27Struct();

				org.talend.designer.components.lookup.memory.AdvancedMemoryLookup<row28Struct> tHash_Lookup_row28 = (org.talend.designer.components.lookup.memory.AdvancedMemoryLookup<row28Struct>) ((org.talend.designer.components.lookup.memory.AdvancedMemoryLookup<row28Struct>) globalMap
						.get("tHash_Lookup_row28"));

				row28Struct row28HashKey = new row28Struct();
				row28Struct row28Default = new row28Struct();
// ###############################        

// ###############################
// # Vars initialization
				class Var__tMap_8__Struct {
				}
				Var__tMap_8__Struct Var__tMap_8 = new Var__tMap_8__Struct();
// ###############################

// ###############################
// # Outputs initialization
				reprsStruct reprs_tmp = new reprsStruct();
// ###############################

				/**
				 * [tMap_8 begin ] stop
				 */

				/**
				 * [tDBInput_3 begin ] start
				 */

				ok_Hash.put("tDBInput_3", false);
				start_Hash.put("tDBInput_3", System.currentTimeMillis());

				currentComponent = "tDBInput_3";

				int tos_count_tDBInput_3 = 0;

				int nb_line_tDBInput_3 = 0;
				java.sql.Connection conn_tDBInput_3 = null;
				conn_tDBInput_3 = (java.sql.Connection) globalMap.get("conn_tDBConnection_2");

				java.sql.Statement stmt_tDBInput_3 = conn_tDBInput_3.createStatement();

				String dbquery_tDBInput_3 = "SELECT \n  sec_documento, \n  tip_documento, \n  num_acta_documento, \n  num_acta, \n  num_registro, \n  fec_documento,"
						+ " \n  obs_documento, \n  nom_solicitante, \n  cod_pais, \n  num_agente, \n  fec_ingreso, \n  tip_tramite, \n  cod_status,"
						+ " \n  fec_status, \n  num_registro_poder, \n  num_agente_old, \n  cobro_caja, \n  ref_pago\nFROM documento \n\n\nwhere   "
						+ "num_acta \n\nin (select  num_acta \n\n FROM marca) and num_acta_documento is not null";

				globalMap.put("tDBInput_3_QUERY", dbquery_tDBInput_3);
				java.sql.ResultSet rs_tDBInput_3 = null;

				try {
					rs_tDBInput_3 = stmt_tDBInput_3.executeQuery(dbquery_tDBInput_3);
					java.sql.ResultSetMetaData rsmd_tDBInput_3 = rs_tDBInput_3.getMetaData();
					int colQtyInRs_tDBInput_3 = rsmd_tDBInput_3.getColumnCount();

					String tmpContent_tDBInput_3 = null;

					while (rs_tDBInput_3.next()) {
						nb_line_tDBInput_3++;

						if (colQtyInRs_tDBInput_3 < 1) {
							row26.sec_documento = 0;
						} else {

							row26.sec_documento = rs_tDBInput_3.getInt(1);
							if (rs_tDBInput_3.wasNull()) {
								throw new RuntimeException("Null value in non-Nullable column");
							}
						}
						if (colQtyInRs_tDBInput_3 < 2) {
							row26.tip_documento = null;
						} else {

							row26.tip_documento = routines.system.JDBCUtil.getString(rs_tDBInput_3, 2, false);
						}
						if (colQtyInRs_tDBInput_3 < 3) {
							row26.num_acta_documento = null;
						} else {

							row26.num_acta_documento = rs_tDBInput_3.getLong(3);
							if (rs_tDBInput_3.wasNull()) {
								row26.num_acta_documento = null;
							}
						}
						if (colQtyInRs_tDBInput_3 < 4) {
							row26.num_acta = null;
						} else {

							row26.num_acta = rs_tDBInput_3.getLong(4);
							if (rs_tDBInput_3.wasNull()) {
								row26.num_acta = null;
							}
						}
						if (colQtyInRs_tDBInput_3 < 5) {
							row26.num_registro = null;
						} else {

							row26.num_registro = rs_tDBInput_3.getLong(5);
							if (rs_tDBInput_3.wasNull()) {
								row26.num_registro = null;
							}
						}
						if (colQtyInRs_tDBInput_3 < 6) {
							row26.fec_documento = null;
						} else {

							row26.fec_documento = routines.system.JDBCUtil.getDate(rs_tDBInput_3, 6);
						}
						if (colQtyInRs_tDBInput_3 < 7) {
							row26.obs_documento = null;
						} else {

							row26.obs_documento = routines.system.JDBCUtil.getString(rs_tDBInput_3, 7, false);
						}
						if (colQtyInRs_tDBInput_3 < 8) {
							row26.nom_solicitante = null;
						} else {

							row26.nom_solicitante = routines.system.JDBCUtil.getString(rs_tDBInput_3, 8, false);
						}
						if (colQtyInRs_tDBInput_3 < 9) {
							row26.cod_pais = null;
						} else {

							row26.cod_pais = routines.system.JDBCUtil.getString(rs_tDBInput_3, 9, false);
						}
						if (colQtyInRs_tDBInput_3 < 10) {
							row26.num_agente = null;
						} else {

							row26.num_agente = rs_tDBInput_3.getShort(10);
							if (rs_tDBInput_3.wasNull()) {
								row26.num_agente = null;
							}
						}
						if (colQtyInRs_tDBInput_3 < 11) {
							row26.fec_ingreso = null;
						} else {

							row26.fec_ingreso = routines.system.JDBCUtil.getDate(rs_tDBInput_3, 11);
						}
						if (colQtyInRs_tDBInput_3 < 12) {
							row26.tip_tramite = null;
						} else {

							row26.tip_tramite = rs_tDBInput_3.getShort(12);
							if (rs_tDBInput_3.wasNull()) {
								row26.tip_tramite = null;
							}
						}
						if (colQtyInRs_tDBInput_3 < 13) {
							row26.cod_status = null;
						} else {

							row26.cod_status = routines.system.JDBCUtil.getString(rs_tDBInput_3, 13, false);
						}
						if (colQtyInRs_tDBInput_3 < 14) {
							row26.fec_status = null;
						} else {

							row26.fec_status = routines.system.JDBCUtil.getDate(rs_tDBInput_3, 14);
						}
						if (colQtyInRs_tDBInput_3 < 15) {
							row26.num_registro_poder = null;
						} else {

							row26.num_registro_poder = rs_tDBInput_3.getInt(15);
							if (rs_tDBInput_3.wasNull()) {
								row26.num_registro_poder = null;
							}
						}
						if (colQtyInRs_tDBInput_3 < 16) {
							row26.num_agente_old = null;
						} else {

							row26.num_agente_old = rs_tDBInput_3.getShort(16);
							if (rs_tDBInput_3.wasNull()) {
								row26.num_agente_old = null;
							}
						}
						if (colQtyInRs_tDBInput_3 < 17) {
							row26.cobro_caja = null;
						} else {

							row26.cobro_caja = rs_tDBInput_3.getLong(17);
							if (rs_tDBInput_3.wasNull()) {
								row26.cobro_caja = null;
							}
						}
						if (colQtyInRs_tDBInput_3 < 18) {
							row26.ref_pago = null;
						} else {

							row26.ref_pago = routines.system.JDBCUtil.getString(rs_tDBInput_3, 18, false);
						}

						/**
						 * [tDBInput_3 begin ] stop
						 */

						/**
						 * [tDBInput_3 main ] start
						 */

						currentComponent = "tDBInput_3";

						tos_count_tDBInput_3++;

						/**
						 * [tDBInput_3 main ] stop
						 */

						/**
						 * [tDBInput_3 process_data_begin ] start
						 */

						currentComponent = "tDBInput_3";

						/**
						 * [tDBInput_3 process_data_begin ] stop
						 */

						/**
						 * [tMap_8 main ] start
						 */

						currentComponent = "tMap_8";

						if (execStat) {
							runStat.updateStatOnConnection(iterateId, 1, 1

									, "row26"

							);
						}

						boolean hasCasePrimitiveKeyWithNull_tMap_8 = false;

						// ###############################
						// # Input tables (lookups)
						boolean rejectedInnerJoin_tMap_8 = false;
						boolean mainRowRejected_tMap_8 = false;

						///////////////////////////////////////////////
						// Starting Lookup Table "row27"
						///////////////////////////////////////////////

						boolean forceLooprow27 = false;

						row27Struct row27ObjectFromLookup = null;

						if (!rejectedInnerJoin_tMap_8) { // G_TM_M_020

							hasCasePrimitiveKeyWithNull_tMap_8 = false;

							row27HashKey.DOC_NBR = new BigDecimal(row26.sec_documento);

							row27HashKey.hashCodeDirty = true;

							tHash_Lookup_row27.lookup(row27HashKey);

							if (!tHash_Lookup_row27.hasNext()) { // G_TM_M_090

								rejectedInnerJoin_tMap_8 = true;

								forceLooprow27 = true;

							} // G_TM_M_090

						} // G_TM_M_020

						else { // G 20 - G 21
							forceLooprow27 = true;
						} // G 21

						row27Struct row27 = null;

						while ((tHash_Lookup_row27 != null && tHash_Lookup_row27.hasNext()) || forceLooprow27) { // G_TM_M_043

							// CALL close loop of lookup 'row27'

							row27Struct fromLookup_row27 = null;
							row27 = row27Default;

							if (!forceLooprow27) { // G 46

								fromLookup_row27 = tHash_Lookup_row27.next();

								if (fromLookup_row27 != null) {
									row27 = fromLookup_row27;
								}

							} // G 46

							forceLooprow27 = false;

							///////////////////////////////////////////////
							// Starting Lookup Table "row28"
							///////////////////////////////////////////////

							boolean forceLooprow28 = false;

							row28Struct row28ObjectFromLookup = null;

							if (!rejectedInnerJoin_tMap_8) { // G_TM_M_020

								hasCasePrimitiveKeyWithNull_tMap_8 = false;

								row28HashKey.AGENT_CODE = new BigDecimal(row26.num_agente);

								row28HashKey.hashCodeDirty = true;

								tHash_Lookup_row28.lookup(row28HashKey);

								if (!tHash_Lookup_row28.hasNext()) { // G_TM_M_090

									rejectedInnerJoin_tMap_8 = true;

								} // G_TM_M_090

							} // G_TM_M_020

							if (tHash_Lookup_row28 != null && tHash_Lookup_row28.getCount(row28HashKey) > 1) { // G 071

								// System.out.println("WARNING: UNIQUE MATCH is configured for the lookup
								// 'row28' and it contains more one result from keys : row28.AGENT_CODE = '" +
								// row28HashKey.AGENT_CODE + "'");
							} // G 071

							row28Struct row28 = null;

							row28Struct fromLookup_row28 = null;
							row28 = row28Default;

							if (tHash_Lookup_row28 != null && tHash_Lookup_row28.hasNext()) { // G 099

								fromLookup_row28 = tHash_Lookup_row28.next();

							} // G 099

							if (fromLookup_row28 != null) {
								row28 = fromLookup_row28;
							}

							// ###############################
							{ // start of Var scope

								// ###############################
								// # Vars tables

								Var__tMap_8__Struct Var = Var__tMap_8;// ###############################
								// ###############################
								// # Output tables

								reprs = null;

								if (!rejectedInnerJoin_tMap_8) {

// # Output table : 'reprs'
									reprs_tmp.USERDOC_SEQ = row27.USERDOC_SEQ;
									reprs_tmp.USERDOC_SERIES = row27.USERDOC_SERIES;
									reprs_tmp.USERDOC_NBR = row27.USERDOC_NBR;
									reprs_tmp.IND_SERVICE = new BigDecimal("1");
									reprs_tmp.REPRESENTATIVE_TYPE = "AG";
									reprs_tmp.AGENT_CODE = row28.AGENT_CODE;
									reprs_tmp.PERSON_NAME = row27.PERSON_NAME;
									reprs_tmp.PERSON_NAME_LANG2 = null;
									reprs_tmp.NATIONALITY_COUNTRY_CODE = row27.NATIONALITY_COUNTRY_CODE;
									reprs_tmp.IND_COMPANY = row27.IND_COMPANY;
									reprs_tmp.LEGAL_NATURE = row27.LEGAL_NATURE;
									reprs_tmp.LEGAL_NATURE_LANG2 = row27.LEGAL_NATURE_LANG2;
									reprs_tmp.LEGAL_ID_TYPE = row27.LEGAL_ID_TYPE;
									reprs_tmp.LEGAL_ID_NBR = row27.LEGAL_ID_NBR;
									reprs_tmp.INDIVIDUAL_ID_TYPE = row27.INDIVIDUAL_ID_TYPE;
									reprs_tmp.INDIVIDUAL_ID_NBR = row27.INDIVIDUAL_ID_NBR;
									reprs_tmp.RESIDENCE_COUNTRY_CODE = row27.RESIDENCE_COUNTRY_CODE;
									reprs_tmp.STATE_NAME = row27.STATE_NAME;
									reprs_tmp.STATE_CODE = row27.STATE_CODE;
									reprs_tmp.CITY_NAME = row27.CITY_NAME;
									reprs_tmp.CITY_CODE = row27.CITY_CODE;
									reprs_tmp.ADDRESS_ZONE = row27.ADDRESS_ZONE;
									reprs_tmp.ADDRESS_STREET = row27.ADDRESS_STREET;
									reprs_tmp.ADDRESS_STREET_LANG2 = row27.ADDRESS_STREET_LANG2;
									reprs_tmp.ZIP_CODE = row27.ZIP_CODE;
									reprs_tmp.EMAIL = row27.EMAIL;
									reprs_tmp.TELEPHONE = row27.TELEPHONE;
									reprs_tmp.PERSON_GROUP_CODE = row27.PERSON_GROUP_CODE;
									reprs = reprs_tmp;
								} // closing inner join bracket (2)
// ###############################

							} // end of Var scope

							rejectedInnerJoin_tMap_8 = false;

							tos_count_tMap_8++;

							/**
							 * [tMap_8 main ] stop
							 */

							/**
							 * [tMap_8 process_data_begin ] start
							 */

							currentComponent = "tMap_8";

							/**
							 * [tMap_8 process_data_begin ] stop
							 */
// Start of branch "reprs"
							if (reprs != null) {
								row29 = null;

								/**
								 * [tDBOutput_8 main ] start
								 */

								currentComponent = "tDBOutput_8";

								if (execStat) {
									runStat.updateStatOnConnection(iterateId, 1, 1

											, "reprs"

									);
								}

								row29 = null;
								whetherReject_tDBOutput_8 = false;
								try {
									if (reprs.USERDOC_SEQ == null) {
										pstmt_tDBOutput_8.setNull(1, java.sql.Types.VARCHAR);
									} else {
										pstmt_tDBOutput_8.setString(1, reprs.USERDOC_SEQ);
									}

									pstmt_tDBOutput_8.setBigDecimal(2, reprs.USERDOC_SERIES);

									pstmt_tDBOutput_8.setBigDecimal(3, reprs.USERDOC_NBR);

									pstmt_tDBOutput_8.setBigDecimal(4, reprs.IND_SERVICE);

									if (reprs.REPRESENTATIVE_TYPE == null) {
										pstmt_tDBOutput_8.setNull(5, java.sql.Types.VARCHAR);
									} else {
										pstmt_tDBOutput_8.setString(5, reprs.REPRESENTATIVE_TYPE);
									}

									pstmt_tDBOutput_8.setBigDecimal(6, reprs.AGENT_CODE);

									if (reprs.PERSON_NAME == null) {
										pstmt_tDBOutput_8.setNull(7, java.sql.Types.VARCHAR);
									} else {
										pstmt_tDBOutput_8.setString(7, reprs.PERSON_NAME);
									}

									if (reprs.PERSON_NAME_LANG2 == null) {
										pstmt_tDBOutput_8.setNull(8, java.sql.Types.VARCHAR);
									} else {
										pstmt_tDBOutput_8.setString(8, reprs.PERSON_NAME_LANG2);
									}

									if (reprs.NATIONALITY_COUNTRY_CODE == null) {
										pstmt_tDBOutput_8.setNull(9, java.sql.Types.VARCHAR);
									} else {
										pstmt_tDBOutput_8.setString(9, reprs.NATIONALITY_COUNTRY_CODE);
									}

									pstmt_tDBOutput_8.setBigDecimal(10, reprs.IND_COMPANY);

									if (reprs.LEGAL_NATURE == null) {
										pstmt_tDBOutput_8.setNull(11, java.sql.Types.VARCHAR);
									} else {
										pstmt_tDBOutput_8.setString(11, reprs.LEGAL_NATURE);
									}

									if (reprs.LEGAL_NATURE_LANG2 == null) {
										pstmt_tDBOutput_8.setNull(12, java.sql.Types.VARCHAR);
									} else {
										pstmt_tDBOutput_8.setString(12, reprs.LEGAL_NATURE_LANG2);
									}

									if (reprs.LEGAL_ID_TYPE == null) {
										pstmt_tDBOutput_8.setNull(13, java.sql.Types.VARCHAR);
									} else {
										pstmt_tDBOutput_8.setString(13, reprs.LEGAL_ID_TYPE);
									}

									pstmt_tDBOutput_8.setBigDecimal(14, reprs.LEGAL_ID_NBR);

									if (reprs.INDIVIDUAL_ID_TYPE == null) {
										pstmt_tDBOutput_8.setNull(15, java.sql.Types.VARCHAR);
									} else {
										pstmt_tDBOutput_8.setString(15, reprs.INDIVIDUAL_ID_TYPE);
									}

									pstmt_tDBOutput_8.setBigDecimal(16, reprs.INDIVIDUAL_ID_NBR);

									if (reprs.RESIDENCE_COUNTRY_CODE == null) {
										pstmt_tDBOutput_8.setNull(17, java.sql.Types.VARCHAR);
									} else {
										pstmt_tDBOutput_8.setString(17, reprs.RESIDENCE_COUNTRY_CODE);
									}

									if (reprs.STATE_NAME == null) {
										pstmt_tDBOutput_8.setNull(18, java.sql.Types.VARCHAR);
									} else {
										pstmt_tDBOutput_8.setString(18, reprs.STATE_NAME);
									}

									if (reprs.STATE_CODE == null) {
										pstmt_tDBOutput_8.setNull(19, java.sql.Types.VARCHAR);
									} else {
										pstmt_tDBOutput_8.setString(19, reprs.STATE_CODE);
									}

									if (reprs.CITY_NAME == null) {
										pstmt_tDBOutput_8.setNull(20, java.sql.Types.VARCHAR);
									} else {
										pstmt_tDBOutput_8.setString(20, reprs.CITY_NAME);
									}

									if (reprs.CITY_CODE == null) {
										pstmt_tDBOutput_8.setNull(21, java.sql.Types.VARCHAR);
									} else {
										pstmt_tDBOutput_8.setString(21, reprs.CITY_CODE);
									}

									if (reprs.ADDRESS_ZONE == null) {
										pstmt_tDBOutput_8.setNull(22, java.sql.Types.VARCHAR);
									} else {
										pstmt_tDBOutput_8.setString(22, reprs.ADDRESS_ZONE);
									}

									if (reprs.ADDRESS_STREET == null) {
										pstmt_tDBOutput_8.setNull(23, java.sql.Types.VARCHAR);
									} else {
										pstmt_tDBOutput_8.setString(23, reprs.ADDRESS_STREET);
									}

									if (reprs.ADDRESS_STREET_LANG2 == null) {
										pstmt_tDBOutput_8.setNull(24, java.sql.Types.VARCHAR);
									} else {
										pstmt_tDBOutput_8.setString(24, reprs.ADDRESS_STREET_LANG2);
									}

									if (reprs.ZIP_CODE == null) {
										pstmt_tDBOutput_8.setNull(25, java.sql.Types.VARCHAR);
									} else {
										pstmt_tDBOutput_8.setString(25, reprs.ZIP_CODE);
									}

									if (reprs.EMAIL == null) {
										pstmt_tDBOutput_8.setNull(26, java.sql.Types.VARCHAR);
									} else {
										pstmt_tDBOutput_8.setString(26, reprs.EMAIL);
									}

									if (reprs.TELEPHONE == null) {
										pstmt_tDBOutput_8.setNull(27, java.sql.Types.VARCHAR);
									} else {
										pstmt_tDBOutput_8.setString(27, reprs.TELEPHONE);
									}

									if (reprs.PERSON_GROUP_CODE == null) {
										pstmt_tDBOutput_8.setNull(28, java.sql.Types.VARCHAR);
									} else {
										pstmt_tDBOutput_8.setString(28, reprs.PERSON_GROUP_CODE);
									}

									nb_line_tDBOutput_8++;
									insertedCount_tDBOutput_8 = insertedCount_tDBOutput_8
											+ pstmt_tDBOutput_8.executeUpdate();
								} catch (java.lang.Exception e) {
									whetherReject_tDBOutput_8 = true;
									row29 = new row29Struct();
									row29.USERDOC_SEQ = reprs.USERDOC_SEQ;
									row29.USERDOC_SERIES = reprs.USERDOC_SERIES;
									row29.USERDOC_NBR = reprs.USERDOC_NBR;
									row29.IND_SERVICE = reprs.IND_SERVICE;
									row29.REPRESENTATIVE_TYPE = reprs.REPRESENTATIVE_TYPE;
									row29.AGENT_CODE = reprs.AGENT_CODE;
									row29.PERSON_NAME = reprs.PERSON_NAME;
									row29.PERSON_NAME_LANG2 = reprs.PERSON_NAME_LANG2;
									row29.NATIONALITY_COUNTRY_CODE = reprs.NATIONALITY_COUNTRY_CODE;
									row29.IND_COMPANY = reprs.IND_COMPANY;
									row29.LEGAL_NATURE = reprs.LEGAL_NATURE;
									row29.LEGAL_NATURE_LANG2 = reprs.LEGAL_NATURE_LANG2;
									row29.LEGAL_ID_TYPE = reprs.LEGAL_ID_TYPE;
									row29.LEGAL_ID_NBR = reprs.LEGAL_ID_NBR;
									row29.INDIVIDUAL_ID_TYPE = reprs.INDIVIDUAL_ID_TYPE;
									row29.INDIVIDUAL_ID_NBR = reprs.INDIVIDUAL_ID_NBR;
									row29.RESIDENCE_COUNTRY_CODE = reprs.RESIDENCE_COUNTRY_CODE;
									row29.STATE_NAME = reprs.STATE_NAME;
									row29.STATE_CODE = reprs.STATE_CODE;
									row29.CITY_NAME = reprs.CITY_NAME;
									row29.CITY_CODE = reprs.CITY_CODE;
									row29.ADDRESS_ZONE = reprs.ADDRESS_ZONE;
									row29.ADDRESS_STREET = reprs.ADDRESS_STREET;
									row29.ADDRESS_STREET_LANG2 = reprs.ADDRESS_STREET_LANG2;
									row29.ZIP_CODE = reprs.ZIP_CODE;
									row29.EMAIL = reprs.EMAIL;
									row29.TELEPHONE = reprs.TELEPHONE;
									row29.PERSON_GROUP_CODE = reprs.PERSON_GROUP_CODE;
									rejectedCount_tDBOutput_8 = rejectedCount_tDBOutput_8 + 1;
									row29.errorCode = ((java.sql.SQLException) e).getSQLState();
									row29.errorMessage = e.getMessage() + " - Line: " + tos_count_tDBOutput_8;
								}
								if (!whetherReject_tDBOutput_8) {
								}
								////////// batch execute by batch size///////
								class LimitBytesHelper_tDBOutput_8 {
									public int limitBytePart1(int counter, java.sql.PreparedStatement pstmt_tDBOutput_8)
											throws Exception {
										try {

											for (int countEach_tDBOutput_8 : pstmt_tDBOutput_8.executeBatch()) {
												if (countEach_tDBOutput_8 == -2 || countEach_tDBOutput_8 == -3) {
													break;
												}
												counter += countEach_tDBOutput_8;
											}

										} catch (java.sql.BatchUpdateException e) {

											int countSum_tDBOutput_8 = 0;
											for (int countEach_tDBOutput_8 : e.getUpdateCounts()) {
												counter += (countEach_tDBOutput_8 < 0 ? 0 : countEach_tDBOutput_8);
											}

											System.err.println(e.getMessage());

										}
										return counter;
									}

									public int limitBytePart2(int counter, java.sql.PreparedStatement pstmt_tDBOutput_8)
											throws Exception {
										try {

											for (int countEach_tDBOutput_8 : pstmt_tDBOutput_8.executeBatch()) {
												if (countEach_tDBOutput_8 == -2 || countEach_tDBOutput_8 == -3) {
													break;
												}
												counter += countEach_tDBOutput_8;
											}

										} catch (java.sql.BatchUpdateException e) {

											for (int countEach_tDBOutput_8 : e.getUpdateCounts()) {
												counter += (countEach_tDBOutput_8 < 0 ? 0 : countEach_tDBOutput_8);
											}

											System.err.println(e.getMessage());

										}
										return counter;
									}
								}

								//////////// commit every////////////

								tos_count_tDBOutput_8++;

								/**
								 * [tDBOutput_8 main ] stop
								 */

								/**
								 * [tDBOutput_8 process_data_begin ] start
								 */

								currentComponent = "tDBOutput_8";

								/**
								 * [tDBOutput_8 process_data_begin ] stop
								 */
// Start of branch "row29"
								if (row29 != null) {

									/**
									 * [tLogRow_8 main ] start
									 */

									currentComponent = "tLogRow_8";

									if (execStat) {
										runStat.updateStatOnConnection(iterateId, 1, 1

												, "row29"

										);
									}

///////////////////////		

									strBuffer_tLogRow_8 = new StringBuilder();

									if (row29.USERDOC_SEQ != null) { //

										strBuffer_tLogRow_8.append(String.valueOf(row29.USERDOC_SEQ));

									} //

									strBuffer_tLogRow_8.append("|");

									if (row29.USERDOC_SERIES != null) { //

										strBuffer_tLogRow_8.append(row29.USERDOC_SERIES
												.setScale(0, java.math.RoundingMode.HALF_UP).toPlainString());

									} //

									strBuffer_tLogRow_8.append("|");

									if (row29.USERDOC_NBR != null) { //

										strBuffer_tLogRow_8.append(row29.USERDOC_NBR
												.setScale(0, java.math.RoundingMode.HALF_UP).toPlainString());

									} //

									strBuffer_tLogRow_8.append("|");

									if (row29.IND_SERVICE != null) { //

										strBuffer_tLogRow_8.append(row29.IND_SERVICE
												.setScale(0, java.math.RoundingMode.HALF_UP).toPlainString());

									} //

									strBuffer_tLogRow_8.append("|");

									if (row29.REPRESENTATIVE_TYPE != null) { //

										strBuffer_tLogRow_8.append(String.valueOf(row29.REPRESENTATIVE_TYPE));

									} //

									strBuffer_tLogRow_8.append("|");

									if (row29.AGENT_CODE != null) { //

										strBuffer_tLogRow_8.append(row29.AGENT_CODE
												.setScale(0, java.math.RoundingMode.HALF_UP).toPlainString());

									} //

									strBuffer_tLogRow_8.append("|");

									if (row29.PERSON_NAME != null) { //

										strBuffer_tLogRow_8.append(String.valueOf(row29.PERSON_NAME));

									} //

									strBuffer_tLogRow_8.append("|");

									if (row29.PERSON_NAME_LANG2 != null) { //

										strBuffer_tLogRow_8.append(String.valueOf(row29.PERSON_NAME_LANG2));

									} //

									strBuffer_tLogRow_8.append("|");

									if (row29.NATIONALITY_COUNTRY_CODE != null) { //

										strBuffer_tLogRow_8.append(String.valueOf(row29.NATIONALITY_COUNTRY_CODE));

									} //

									strBuffer_tLogRow_8.append("|");

									if (row29.IND_COMPANY != null) { //

										strBuffer_tLogRow_8.append(row29.IND_COMPANY
												.setScale(0, java.math.RoundingMode.HALF_UP).toPlainString());

									} //

									strBuffer_tLogRow_8.append("|");

									if (row29.LEGAL_NATURE != null) { //

										strBuffer_tLogRow_8.append(String.valueOf(row29.LEGAL_NATURE));

									} //

									strBuffer_tLogRow_8.append("|");

									if (row29.LEGAL_NATURE_LANG2 != null) { //

										strBuffer_tLogRow_8.append(String.valueOf(row29.LEGAL_NATURE_LANG2));

									} //

									strBuffer_tLogRow_8.append("|");

									if (row29.LEGAL_ID_TYPE != null) { //

										strBuffer_tLogRow_8.append(String.valueOf(row29.LEGAL_ID_TYPE));

									} //

									strBuffer_tLogRow_8.append("|");

									if (row29.LEGAL_ID_NBR != null) { //

										strBuffer_tLogRow_8.append(row29.LEGAL_ID_NBR
												.setScale(0, java.math.RoundingMode.HALF_UP).toPlainString());

									} //

									strBuffer_tLogRow_8.append("|");

									if (row29.INDIVIDUAL_ID_TYPE != null) { //

										strBuffer_tLogRow_8.append(String.valueOf(row29.INDIVIDUAL_ID_TYPE));

									} //

									strBuffer_tLogRow_8.append("|");

									if (row29.INDIVIDUAL_ID_NBR != null) { //

										strBuffer_tLogRow_8.append(row29.INDIVIDUAL_ID_NBR
												.setScale(0, java.math.RoundingMode.HALF_UP).toPlainString());

									} //

									strBuffer_tLogRow_8.append("|");

									if (row29.RESIDENCE_COUNTRY_CODE != null) { //

										strBuffer_tLogRow_8.append(String.valueOf(row29.RESIDENCE_COUNTRY_CODE));

									} //

									strBuffer_tLogRow_8.append("|");

									if (row29.STATE_NAME != null) { //

										strBuffer_tLogRow_8.append(String.valueOf(row29.STATE_NAME));

									} //

									strBuffer_tLogRow_8.append("|");

									if (row29.STATE_CODE != null) { //

										strBuffer_tLogRow_8.append(String.valueOf(row29.STATE_CODE));

									} //

									strBuffer_tLogRow_8.append("|");

									if (row29.CITY_NAME != null) { //

										strBuffer_tLogRow_8.append(String.valueOf(row29.CITY_NAME));

									} //

									strBuffer_tLogRow_8.append("|");

									if (row29.CITY_CODE != null) { //

										strBuffer_tLogRow_8.append(String.valueOf(row29.CITY_CODE));

									} //

									strBuffer_tLogRow_8.append("|");

									if (row29.ADDRESS_ZONE != null) { //

										strBuffer_tLogRow_8.append(String.valueOf(row29.ADDRESS_ZONE));

									} //

									strBuffer_tLogRow_8.append("|");

									if (row29.ADDRESS_STREET != null) { //

										strBuffer_tLogRow_8.append(String.valueOf(row29.ADDRESS_STREET));

									} //

									strBuffer_tLogRow_8.append("|");

									if (row29.ADDRESS_STREET_LANG2 != null) { //

										strBuffer_tLogRow_8.append(String.valueOf(row29.ADDRESS_STREET_LANG2));

									} //

									strBuffer_tLogRow_8.append("|");

									if (row29.ZIP_CODE != null) { //

										strBuffer_tLogRow_8.append(String.valueOf(row29.ZIP_CODE));

									} //

									strBuffer_tLogRow_8.append("|");

									if (row29.EMAIL != null) { //

										strBuffer_tLogRow_8.append(String.valueOf(row29.EMAIL));

									} //

									strBuffer_tLogRow_8.append("|");

									if (row29.TELEPHONE != null) { //

										strBuffer_tLogRow_8.append(String.valueOf(row29.TELEPHONE));

									} //

									strBuffer_tLogRow_8.append("|");

									if (row29.PERSON_GROUP_CODE != null) { //

										strBuffer_tLogRow_8.append(String.valueOf(row29.PERSON_GROUP_CODE));

									} //

									strBuffer_tLogRow_8.append("|");

									if (row29.errorCode != null) { //

										strBuffer_tLogRow_8.append(String.valueOf(row29.errorCode));

									} //

									strBuffer_tLogRow_8.append("|");

									if (row29.errorMessage != null) { //

										strBuffer_tLogRow_8.append(String.valueOf(row29.errorMessage));

									} //

									if (globalMap.get("tLogRow_CONSOLE") != null) {
										consoleOut_tLogRow_8 = (java.io.PrintStream) globalMap.get("tLogRow_CONSOLE");
									} else {
										consoleOut_tLogRow_8 = new java.io.PrintStream(
												new java.io.BufferedOutputStream(System.out));
										globalMap.put("tLogRow_CONSOLE", consoleOut_tLogRow_8);
									}
									consoleOut_tLogRow_8.println(strBuffer_tLogRow_8.toString());
									consoleOut_tLogRow_8.flush();
									nb_line_tLogRow_8++;
//////

//////                    

///////////////////////    			

									tos_count_tLogRow_8++;

									/**
									 * [tLogRow_8 main ] stop
									 */

									/**
									 * [tLogRow_8 process_data_begin ] start
									 */

									currentComponent = "tLogRow_8";

									/**
									 * [tLogRow_8 process_data_begin ] stop
									 */

									/**
									 * [tLogRow_8 process_data_end ] start
									 */

									currentComponent = "tLogRow_8";

									/**
									 * [tLogRow_8 process_data_end ] stop
									 */

								} // End of branch "row29"

								/**
								 * [tDBOutput_8 process_data_end ] start
								 */

								currentComponent = "tDBOutput_8";

								/**
								 * [tDBOutput_8 process_data_end ] stop
								 */

							} // End of branch "reprs"

						} // close loop of lookup 'row27' // G_TM_M_043

						/**
						 * [tMap_8 process_data_end ] start
						 */

						currentComponent = "tMap_8";

						/**
						 * [tMap_8 process_data_end ] stop
						 */

						/**
						 * [tDBInput_3 process_data_end ] start
						 */

						currentComponent = "tDBInput_3";

						/**
						 * [tDBInput_3 process_data_end ] stop
						 */

						/**
						 * [tDBInput_3 end ] start
						 */

						currentComponent = "tDBInput_3";

					}
				} finally {
					if (rs_tDBInput_3 != null) {
						rs_tDBInput_3.close();
					}
					if (stmt_tDBInput_3 != null) {
						stmt_tDBInput_3.close();
					}
				}
				globalMap.put("tDBInput_3_NB_LINE", nb_line_tDBInput_3);

				ok_Hash.put("tDBInput_3", true);
				end_Hash.put("tDBInput_3", System.currentTimeMillis());

				/**
				 * [tDBInput_3 end ] stop
				 */

				/**
				 * [tMap_8 end ] start
				 */

				currentComponent = "tMap_8";

// ###############################
// # Lookup hashes releasing
				if (tHash_Lookup_row27 != null) {
					tHash_Lookup_row27.endGet();
				}
				globalMap.remove("tHash_Lookup_row27");

				if (tHash_Lookup_row28 != null) {
					tHash_Lookup_row28.endGet();
				}
				globalMap.remove("tHash_Lookup_row28");

// ###############################      

				if (execStat) {
					runStat.updateStat(resourceMap, iterateId, 2, 0, "row26");
				}

				ok_Hash.put("tMap_8", true);
				end_Hash.put("tMap_8", System.currentTimeMillis());

				/**
				 * [tMap_8 end ] stop
				 */

				/**
				 * [tDBOutput_8 end ] start
				 */

				currentComponent = "tDBOutput_8";

				if (pstmt_tDBOutput_8 != null) {

					pstmt_tDBOutput_8.close();
					resourceMap.remove("pstmt_tDBOutput_8");

				}
				resourceMap.put("statementClosed_tDBOutput_8", true);

				nb_line_deleted_tDBOutput_8 = nb_line_deleted_tDBOutput_8 + deletedCount_tDBOutput_8;
				nb_line_update_tDBOutput_8 = nb_line_update_tDBOutput_8 + updatedCount_tDBOutput_8;
				nb_line_inserted_tDBOutput_8 = nb_line_inserted_tDBOutput_8 + insertedCount_tDBOutput_8;
				nb_line_rejected_tDBOutput_8 = nb_line_rejected_tDBOutput_8 + rejectedCount_tDBOutput_8;

				globalMap.put("tDBOutput_8_NB_LINE", nb_line_tDBOutput_8);
				globalMap.put("tDBOutput_8_NB_LINE_UPDATED", nb_line_update_tDBOutput_8);
				globalMap.put("tDBOutput_8_NB_LINE_INSERTED", nb_line_inserted_tDBOutput_8);
				globalMap.put("tDBOutput_8_NB_LINE_DELETED", nb_line_deleted_tDBOutput_8);
				globalMap.put("tDBOutput_8_NB_LINE_REJECTED", nb_line_rejected_tDBOutput_8);

				if (execStat) {
					runStat.updateStat(resourceMap, iterateId, 2, 0, "reprs");
				}

				ok_Hash.put("tDBOutput_8", true);
				end_Hash.put("tDBOutput_8", System.currentTimeMillis());

				/**
				 * [tDBOutput_8 end ] stop
				 */

				/**
				 * [tLogRow_8 end ] start
				 */

				currentComponent = "tLogRow_8";

//////
//////
				globalMap.put("tLogRow_8_NB_LINE", nb_line_tLogRow_8);

///////////////////////    			

				if (execStat) {
					runStat.updateStat(resourceMap, iterateId, 2, 0, "row29");
				}

				ok_Hash.put("tLogRow_8", true);
				end_Hash.put("tLogRow_8", System.currentTimeMillis());

				/**
				 * [tLogRow_8 end ] stop
				 */

			} // end the resume

		} catch (java.lang.Exception e) {

			TalendException te = new TalendException(e, currentComponent, globalMap);

			throw te;
		} catch (java.lang.Error error) {

			runStat.stopThreadStat();

			throw error;
		} finally {

			// free memory for "tMap_8"
			globalMap.remove("tHash_Lookup_row27");

			// free memory for "tMap_8"
			globalMap.remove("tHash_Lookup_row28");

			try {

				/**
				 * [tDBInput_3 finally ] start
				 */

				currentComponent = "tDBInput_3";

				/**
				 * [tDBInput_3 finally ] stop
				 */

				/**
				 * [tMap_8 finally ] start
				 */

				currentComponent = "tMap_8";

				/**
				 * [tMap_8 finally ] stop
				 */

				/**
				 * [tDBOutput_8 finally ] start
				 */

				currentComponent = "tDBOutput_8";

				if (resourceMap.get("statementClosed_tDBOutput_8") == null) {
					java.sql.PreparedStatement pstmtToClose_tDBOutput_8 = null;
					if ((pstmtToClose_tDBOutput_8 = (java.sql.PreparedStatement) resourceMap
							.remove("pstmt_tDBOutput_8")) != null) {
						pstmtToClose_tDBOutput_8.close();
					}
				}

				/**
				 * [tDBOutput_8 finally ] stop
				 */

				/**
				 * [tLogRow_8 finally ] start
				 */

				currentComponent = "tLogRow_8";

				/**
				 * [tLogRow_8 finally ] stop
				 */

			} catch (java.lang.Exception e) {
				// ignore
			} catch (java.lang.Error error) {
				// ignore
			}
			resourceMap = null;
		}

		globalMap.put("tDBInput_3_SUBPROCESS_STATE", 1);
	}

	public void tDBConnection_2Process(final java.util.Map<String, Object> globalMap) throws TalendException {
		globalMap.put("tDBConnection_2_SUBPROCESS_STATE", 0);

		final boolean execStat = this.execStat;

		String iterateId = "";

		String currentComponent = "";
		java.util.Map<String, Object> resourceMap = new java.util.HashMap<String, Object>();

		try {
			// TDI-39566 avoid throwing an useless Exception
			boolean resumeIt = true;
			if (globalResumeTicket == false && resumeEntryMethodName != null) {
				String currentMethodName = new java.lang.Exception().getStackTrace()[0].getMethodName();
				resumeIt = resumeEntryMethodName.equals(currentMethodName);
			}
			if (resumeIt || globalResumeTicket) { // start the resume
				globalResumeTicket = true;

				/**
				 * [tDBConnection_2 begin ] start
				 */

				ok_Hash.put("tDBConnection_2", false);
				start_Hash.put("tDBConnection_2", System.currentTimeMillis());

				currentComponent = "tDBConnection_2";

				int tos_count_tDBConnection_2 = 0;

				String dbProperties_tDBConnection_2 = "";
				String url_tDBConnection_2 = "jdbc:postgresql://" + "localhost" + ":" + "5432" + "/" + "Paraguay";

				if (dbProperties_tDBConnection_2 != null && !"".equals(dbProperties_tDBConnection_2.trim())) {
					url_tDBConnection_2 = url_tDBConnection_2 + "?" + dbProperties_tDBConnection_2;
				}
				String dbUser_tDBConnection_2 = "postgres";

				final String decryptedPassword_tDBConnection_2 = routines.system.PasswordEncryptUtil.decryptPassword(
						"enc:routine.encryption.key.v1:YUkndBkPxEnyVBIS6tRAySrl0KiPBIWB8zt6RdAE5V8mPjRj");
				String dbPwd_tDBConnection_2 = decryptedPassword_tDBConnection_2;

				java.sql.Connection conn_tDBConnection_2 = null;

				java.util.Enumeration<java.sql.Driver> drivers_tDBConnection_2 = java.sql.DriverManager.getDrivers();
				java.util.Set<String> redShiftDriverNames_tDBConnection_2 = new java.util.HashSet<String>(
						java.util.Arrays.asList("com.amazon.redshift.jdbc.Driver", "com.amazon.redshift.jdbc41.Driver",
								"com.amazon.redshift.jdbc42.Driver"));
				while (drivers_tDBConnection_2.hasMoreElements()) {
					java.sql.Driver d_tDBConnection_2 = drivers_tDBConnection_2.nextElement();
					if (redShiftDriverNames_tDBConnection_2.contains(d_tDBConnection_2.getClass().getName())) {
						try {
							java.sql.DriverManager.deregisterDriver(d_tDBConnection_2);
							java.sql.DriverManager.registerDriver(d_tDBConnection_2);
						} catch (java.lang.Exception e_tDBConnection_2) {
							// do nothing
						}
					}
				}
				String driverClass_tDBConnection_2 = "org.postgresql.Driver";
				java.lang.Class jdbcclazz_tDBConnection_2 = java.lang.Class.forName(driverClass_tDBConnection_2);
				globalMap.put("driverClass_tDBConnection_2", driverClass_tDBConnection_2);

				conn_tDBConnection_2 = java.sql.DriverManager.getConnection(url_tDBConnection_2, dbUser_tDBConnection_2,
						dbPwd_tDBConnection_2);

				globalMap.put("conn_tDBConnection_2", conn_tDBConnection_2);
				if (null != conn_tDBConnection_2) {

					conn_tDBConnection_2.setAutoCommit(false);
				}

				globalMap.put("schema_" + "tDBConnection_2", "public");

				/**
				 * [tDBConnection_2 begin ] stop
				 */

				/**
				 * [tDBConnection_2 main ] start
				 */

				currentComponent = "tDBConnection_2";

				tos_count_tDBConnection_2++;

				/**
				 * [tDBConnection_2 main ] stop
				 */

				/**
				 * [tDBConnection_2 process_data_begin ] start
				 */

				currentComponent = "tDBConnection_2";

				/**
				 * [tDBConnection_2 process_data_begin ] stop
				 */

				/**
				 * [tDBConnection_2 process_data_end ] start
				 */

				currentComponent = "tDBConnection_2";

				/**
				 * [tDBConnection_2 process_data_end ] stop
				 */

				/**
				 * [tDBConnection_2 end ] start
				 */

				currentComponent = "tDBConnection_2";

				ok_Hash.put("tDBConnection_2", true);
				end_Hash.put("tDBConnection_2", System.currentTimeMillis());

				/**
				 * [tDBConnection_2 end ] stop
				 */
			} // end the resume

			if (resumeEntryMethodName == null || globalResumeTicket) {
				resumeUtil.addLog("CHECKPOINT", "CONNECTION:SUBJOB_OK:tDBConnection_2:OnSubjobOk", "",
						Thread.currentThread().getId() + "", "", "", "", "", "");
			}

			if (execStat) {
				runStat.updateStatOnConnection("OnSubjobOk16", 0, "ok");
			}

			tDBConnection_1Process(globalMap);

		} catch (java.lang.Exception e) {

			TalendException te = new TalendException(e, currentComponent, globalMap);

			throw te;
		} catch (java.lang.Error error) {

			runStat.stopThreadStat();

			throw error;
		} finally {

			try {

				/**
				 * [tDBConnection_2 finally ] start
				 */

				currentComponent = "tDBConnection_2";

				/**
				 * [tDBConnection_2 finally ] stop
				 */
			} catch (java.lang.Exception e) {
				// ignore
			} catch (java.lang.Error error) {
				// ignore
			}
			resourceMap = null;
		}

		globalMap.put("tDBConnection_2_SUBPROCESS_STATE", 1);
	}

	public void tDBConnection_3Process(final java.util.Map<String, Object> globalMap) throws TalendException {
		globalMap.put("tDBConnection_3_SUBPROCESS_STATE", 0);

		final boolean execStat = this.execStat;

		String iterateId = "";

		String currentComponent = "";
		java.util.Map<String, Object> resourceMap = new java.util.HashMap<String, Object>();

		try {
			// TDI-39566 avoid throwing an useless Exception
			boolean resumeIt = true;
			if (globalResumeTicket == false && resumeEntryMethodName != null) {
				String currentMethodName = new java.lang.Exception().getStackTrace()[0].getMethodName();
				resumeIt = resumeEntryMethodName.equals(currentMethodName);
			}
			if (resumeIt || globalResumeTicket) { // start the resume
				globalResumeTicket = true;

				/**
				 * [tDBConnection_3 begin ] start
				 */

				ok_Hash.put("tDBConnection_3", false);
				start_Hash.put("tDBConnection_3", System.currentTimeMillis());

				currentComponent = "tDBConnection_3";

				int tos_count_tDBConnection_3 = 0;

				String url_tDBConnection_3 = "jdbc:jtds:sqlserver://" + "localhost";
				String port_tDBConnection_3 = "1433";
				String dbname_tDBConnection_3 = "MARCAS_PY";
				if (!"".equals(port_tDBConnection_3)) {
					url_tDBConnection_3 += ":" + "1433";
				}
				if (!"".equals(dbname_tDBConnection_3)) {

					url_tDBConnection_3 += "//" + "MARCAS_PY";
				}

				url_tDBConnection_3 += ";appName=" + projectName + ";" + "";
				String dbUser_tDBConnection_3 = "ADMIN";

				final String decryptedPassword_tDBConnection_3 = routines.system.PasswordEncryptUtil
						.decryptPassword("enc:routine.encryption.key.v1:gDnO/oDvMvD6lnpql1s/U/2fd0ghhBa+OO/+Wdma+Nqa");
				String dbPwd_tDBConnection_3 = decryptedPassword_tDBConnection_3;

				java.sql.Connection conn_tDBConnection_3 = null;

				String driverClass_tDBConnection_3 = "net.sourceforge.jtds.jdbc.Driver";
				java.lang.Class jdbcclazz_tDBConnection_3 = java.lang.Class.forName(driverClass_tDBConnection_3);
				globalMap.put("driverClass_tDBConnection_3", driverClass_tDBConnection_3);

				conn_tDBConnection_3 = java.sql.DriverManager.getConnection(url_tDBConnection_3, dbUser_tDBConnection_3,
						dbPwd_tDBConnection_3);

				globalMap.put("conn_tDBConnection_3", conn_tDBConnection_3);
				if (null != conn_tDBConnection_3) {

					conn_tDBConnection_3.setAutoCommit(false);
				}

				globalMap.put("dbschema_tDBConnection_3", "ADMIN");

				globalMap.put("db_tDBConnection_3", "MARCAS_PY");

				globalMap.put("shareIdentitySetting_tDBConnection_3", false);

				globalMap.put("driver_tDBConnection_3", "JTDS");

				/**
				 * [tDBConnection_3 begin ] stop
				 */

				/**
				 * [tDBConnection_3 main ] start
				 */

				currentComponent = "tDBConnection_3";

				tos_count_tDBConnection_3++;

				/**
				 * [tDBConnection_3 main ] stop
				 */

				/**
				 * [tDBConnection_3 process_data_begin ] start
				 */

				currentComponent = "tDBConnection_3";

				/**
				 * [tDBConnection_3 process_data_begin ] stop
				 */

				/**
				 * [tDBConnection_3 process_data_end ] start
				 */

				currentComponent = "tDBConnection_3";

				/**
				 * [tDBConnection_3 process_data_end ] stop
				 */

				/**
				 * [tDBConnection_3 end ] start
				 */

				currentComponent = "tDBConnection_3";

				ok_Hash.put("tDBConnection_3", true);
				end_Hash.put("tDBConnection_3", System.currentTimeMillis());

				/**
				 * [tDBConnection_3 end ] stop
				 */
			} // end the resume

			if (resumeEntryMethodName == null || globalResumeTicket) {
				resumeUtil.addLog("CHECKPOINT", "CONNECTION:SUBJOB_OK:tDBConnection_3:OnSubjobOk", "",
						Thread.currentThread().getId() + "", "", "", "", "", "");
			}

			if (execStat) {
				runStat.updateStatOnConnection("OnSubjobOk11", 0, "ok");
			}

			tDBConnection_2Process(globalMap);

		} catch (java.lang.Exception e) {

			TalendException te = new TalendException(e, currentComponent, globalMap);

			throw te;
		} catch (java.lang.Error error) {

			runStat.stopThreadStat();

			throw error;
		} finally {

			try {

				/**
				 * [tDBConnection_3 finally ] start
				 */

				currentComponent = "tDBConnection_3";

				/**
				 * [tDBConnection_3 finally ] stop
				 */
			} catch (java.lang.Exception e) {
				// ignore
			} catch (java.lang.Error error) {
				// ignore
			}
			resourceMap = null;
		}

		globalMap.put("tDBConnection_3_SUBPROCESS_STATE", 1);
	}

	public static class row7Struct implements routines.system.IPersistableComparableLookupRow<row7Struct> {
		final static byte[] commonByteArrayLock_WIPO_PROJECTS_E1a_Marc_Userdoc_a_interm = new byte[0];
		static byte[] commonByteArray_WIPO_PROJECTS_E1a_Marc_Userdoc_a_interm = new byte[0];
		protected static final int DEFAULT_HASHCODE = 1;
		protected static final int PRIME = 31;
		protected int hashCode = DEFAULT_HASHCODE;
		public boolean hashCodeDirty = true;

		public String loopKey;

		public String USERDOC_SEQ;

		public String getUSERDOC_SEQ() {
			return this.USERDOC_SEQ;
		}

		public BigDecimal USERDOC_SERIES;

		public BigDecimal getUSERDOC_SERIES() {
			return this.USERDOC_SERIES;
		}

		public BigDecimal USERDOC_NBR;

		public BigDecimal getUSERDOC_NBR() {
			return this.USERDOC_NBR;
		}

		public String DOC_ORI;

		public String getDOC_ORI() {
			return this.DOC_ORI;
		}

		public BigDecimal DOC_SERIES;

		public BigDecimal getDOC_SERIES() {
			return this.DOC_SERIES;
		}

		public BigDecimal DOC_NBR;

		public BigDecimal getDOC_NBR() {
			return this.DOC_NBR;
		}

		public BigDecimal IND_IMPORT;

		public BigDecimal getIND_IMPORT() {
			return this.IND_IMPORT;
		}

		public String USERDOC_TYPE;

		public String getUSERDOC_TYPE() {
			return this.USERDOC_TYPE;
		}

		public BigDecimal LAW_CODE;

		public BigDecimal getLAW_CODE() {
			return this.LAW_CODE;
		}

		public java.util.Date FILING_DATE;

		public java.util.Date getFILING_DATE() {
			return this.FILING_DATE;
		}

		public java.util.Date RECEPTION_DATE;

		public java.util.Date getRECEPTION_DATE() {
			return this.RECEPTION_DATE;
		}

		public String NOTES;

		public String getNOTES() {
			return this.NOTES;
		}

		public String APPLICANT_NOTES;

		public String getAPPLICANT_NOTES() {
			return this.APPLICANT_NOTES;
		}

		public String PERSON_NAME;

		public String getPERSON_NAME() {
			return this.PERSON_NAME;
		}

		public String PERSON_NAME_LANG2;

		public String getPERSON_NAME_LANG2() {
			return this.PERSON_NAME_LANG2;
		}

		public String NATIONALITY_COUNTRY_CODE;

		public String getNATIONALITY_COUNTRY_CODE() {
			return this.NATIONALITY_COUNTRY_CODE;
		}

		public BigDecimal IND_COMPANY;

		public BigDecimal getIND_COMPANY() {
			return this.IND_COMPANY;
		}

		public String LEGAL_NATURE;

		public String getLEGAL_NATURE() {
			return this.LEGAL_NATURE;
		}

		public String LEGAL_NATURE_LANG2;

		public String getLEGAL_NATURE_LANG2() {
			return this.LEGAL_NATURE_LANG2;
		}

		public String LEGAL_ID_TYPE;

		public String getLEGAL_ID_TYPE() {
			return this.LEGAL_ID_TYPE;
		}

		public BigDecimal LEGAL_ID_NBR;

		public BigDecimal getLEGAL_ID_NBR() {
			return this.LEGAL_ID_NBR;
		}

		public String INDIVIDUAL_ID_TYPE;

		public String getINDIVIDUAL_ID_TYPE() {
			return this.INDIVIDUAL_ID_TYPE;
		}

		public BigDecimal INDIVIDUAL_ID_NBR;

		public BigDecimal getINDIVIDUAL_ID_NBR() {
			return this.INDIVIDUAL_ID_NBR;
		}

		public String RESIDENCE_COUNTRY_CODE;

		public String getRESIDENCE_COUNTRY_CODE() {
			return this.RESIDENCE_COUNTRY_CODE;
		}

		public String STATE_NAME;

		public String getSTATE_NAME() {
			return this.STATE_NAME;
		}

		public String STATE_CODE;

		public String getSTATE_CODE() {
			return this.STATE_CODE;
		}

		public String CITY_NAME;

		public String getCITY_NAME() {
			return this.CITY_NAME;
		}

		public String CITY_CODE;

		public String getCITY_CODE() {
			return this.CITY_CODE;
		}

		public String ADDRESS_ZONE;

		public String getADDRESS_ZONE() {
			return this.ADDRESS_ZONE;
		}

		public String ADDRESS_STREET;

		public String getADDRESS_STREET() {
			return this.ADDRESS_STREET;
		}

		public String ADDRESS_STREET_LANG2;

		public String getADDRESS_STREET_LANG2() {
			return this.ADDRESS_STREET_LANG2;
		}

		public String ZIP_CODE;

		public String getZIP_CODE() {
			return this.ZIP_CODE;
		}

		public String EMAIL;

		public String getEMAIL() {
			return this.EMAIL;
		}

		public String TELEPHONE;

		public String getTELEPHONE() {
			return this.TELEPHONE;
		}

		public String PERSON_GROUP_CODE;

		public String getPERSON_GROUP_CODE() {
			return this.PERSON_GROUP_CODE;
		}

		public BigDecimal CAPTURE_USER_ID;

		public BigDecimal getCAPTURE_USER_ID() {
			return this.CAPTURE_USER_ID;
		}

		public java.util.Date CAPTURE_DATE;

		public java.util.Date getCAPTURE_DATE() {
			return this.CAPTURE_DATE;
		}

		@Override
		public int hashCode() {
			if (this.hashCodeDirty) {
				final int prime = PRIME;
				int result = DEFAULT_HASHCODE;

				result = prime * result
						+ ((this.DOC_NBR == null) ? 0 : new Double(this.DOC_NBR.doubleValue()).hashCode());

				this.hashCode = result;
				this.hashCodeDirty = false;
			}
			return this.hashCode;
		}

		@Override
		public boolean equals(Object obj) {
			if (this == obj)
				return true;
			if (obj == null)
				return false;
			if (getClass() != obj.getClass())
				return false;
			final row7Struct other = (row7Struct) obj;

			if (this.DOC_NBR == null) {
				if (other.DOC_NBR != null)
					return false;

			} else if ((other.DOC_NBR == null) || (this.DOC_NBR.compareTo(other.DOC_NBR) != 0))

				return false;

			return true;
		}

		public void copyDataTo(row7Struct other) {

			other.USERDOC_SEQ = this.USERDOC_SEQ;
			other.USERDOC_SERIES = this.USERDOC_SERIES;
			other.USERDOC_NBR = this.USERDOC_NBR;
			other.DOC_ORI = this.DOC_ORI;
			other.DOC_SERIES = this.DOC_SERIES;
			other.DOC_NBR = this.DOC_NBR;
			other.IND_IMPORT = this.IND_IMPORT;
			other.USERDOC_TYPE = this.USERDOC_TYPE;
			other.LAW_CODE = this.LAW_CODE;
			other.FILING_DATE = this.FILING_DATE;
			other.RECEPTION_DATE = this.RECEPTION_DATE;
			other.NOTES = this.NOTES;
			other.APPLICANT_NOTES = this.APPLICANT_NOTES;
			other.PERSON_NAME = this.PERSON_NAME;
			other.PERSON_NAME_LANG2 = this.PERSON_NAME_LANG2;
			other.NATIONALITY_COUNTRY_CODE = this.NATIONALITY_COUNTRY_CODE;
			other.IND_COMPANY = this.IND_COMPANY;
			other.LEGAL_NATURE = this.LEGAL_NATURE;
			other.LEGAL_NATURE_LANG2 = this.LEGAL_NATURE_LANG2;
			other.LEGAL_ID_TYPE = this.LEGAL_ID_TYPE;
			other.LEGAL_ID_NBR = this.LEGAL_ID_NBR;
			other.INDIVIDUAL_ID_TYPE = this.INDIVIDUAL_ID_TYPE;
			other.INDIVIDUAL_ID_NBR = this.INDIVIDUAL_ID_NBR;
			other.RESIDENCE_COUNTRY_CODE = this.RESIDENCE_COUNTRY_CODE;
			other.STATE_NAME = this.STATE_NAME;
			other.STATE_CODE = this.STATE_CODE;
			other.CITY_NAME = this.CITY_NAME;
			other.CITY_CODE = this.CITY_CODE;
			other.ADDRESS_ZONE = this.ADDRESS_ZONE;
			other.ADDRESS_STREET = this.ADDRESS_STREET;
			other.ADDRESS_STREET_LANG2 = this.ADDRESS_STREET_LANG2;
			other.ZIP_CODE = this.ZIP_CODE;
			other.EMAIL = this.EMAIL;
			other.TELEPHONE = this.TELEPHONE;
			other.PERSON_GROUP_CODE = this.PERSON_GROUP_CODE;
			other.CAPTURE_USER_ID = this.CAPTURE_USER_ID;
			other.CAPTURE_DATE = this.CAPTURE_DATE;

		}

		public void copyKeysDataTo(row7Struct other) {

			other.DOC_NBR = this.DOC_NBR;

		}

		private String readString(DataInputStream dis, ObjectInputStream ois) throws IOException {
			String strReturn = null;
			int length = 0;
			length = dis.readInt();
			if (length == -1) {
				strReturn = null;
			} else {
				byte[] byteArray = new byte[length];
				dis.read(byteArray);
				strReturn = new String(byteArray, utf8Charset);
			}
			return strReturn;
		}

		private void writeString(String str, DataOutputStream dos, ObjectOutputStream oos) throws IOException {
			if (str == null) {
				dos.writeInt(-1);
			} else {
				byte[] byteArray = str.getBytes(utf8Charset);
				dos.writeInt(byteArray.length);
				dos.write(byteArray);
			}
		}

		private java.util.Date readDate(DataInputStream dis, ObjectInputStream ois) throws IOException {
			java.util.Date dateReturn = null;
			int length = 0;
			length = dis.readByte();
			if (length == -1) {
				dateReturn = null;
			} else {
				dateReturn = new Date(dis.readLong());
			}
			return dateReturn;
		}

		private void writeDate(java.util.Date date1, DataOutputStream dos, ObjectOutputStream oos) throws IOException {
			if (date1 == null) {
				dos.writeByte(-1);
			} else {
				dos.writeByte(0);
				dos.writeLong(date1.getTime());
			}
		}

		public void readKeysData(ObjectInputStream dis) {

			synchronized (commonByteArrayLock_WIPO_PROJECTS_E1a_Marc_Userdoc_a_interm) {

				try {

					int length = 0;

					this.DOC_NBR = (BigDecimal) dis.readObject();

				} catch (IOException e) {
					throw new RuntimeException(e);

				} catch (ClassNotFoundException eCNFE) {
					throw new RuntimeException(eCNFE);

				}

			}

		}

		public void writeKeysData(ObjectOutputStream dos) {
			try {

				// BigDecimal

				dos.writeObject(this.DOC_NBR);

			} catch (IOException e) {
				throw new RuntimeException(e);
			}

		}

		/**
		 * Fill Values data by reading ObjectInputStream.
		 */
		public void readValuesData(DataInputStream dis, ObjectInputStream ois) {
			try {

				int length = 0;

				this.USERDOC_SEQ = readString(dis, ois);

				this.USERDOC_SERIES = (BigDecimal) ois.readObject();

				this.USERDOC_NBR = (BigDecimal) ois.readObject();

				this.DOC_ORI = readString(dis, ois);

				this.DOC_SERIES = (BigDecimal) ois.readObject();

				this.IND_IMPORT = (BigDecimal) ois.readObject();

				this.USERDOC_TYPE = readString(dis, ois);

				this.LAW_CODE = (BigDecimal) ois.readObject();

				this.FILING_DATE = readDate(dis, ois);

				this.RECEPTION_DATE = readDate(dis, ois);

				this.NOTES = readString(dis, ois);

				this.APPLICANT_NOTES = readString(dis, ois);

				this.PERSON_NAME = readString(dis, ois);

				this.PERSON_NAME_LANG2 = readString(dis, ois);

				this.NATIONALITY_COUNTRY_CODE = readString(dis, ois);

				this.IND_COMPANY = (BigDecimal) ois.readObject();

				this.LEGAL_NATURE = readString(dis, ois);

				this.LEGAL_NATURE_LANG2 = readString(dis, ois);

				this.LEGAL_ID_TYPE = readString(dis, ois);

				this.LEGAL_ID_NBR = (BigDecimal) ois.readObject();

				this.INDIVIDUAL_ID_TYPE = readString(dis, ois);

				this.INDIVIDUAL_ID_NBR = (BigDecimal) ois.readObject();

				this.RESIDENCE_COUNTRY_CODE = readString(dis, ois);

				this.STATE_NAME = readString(dis, ois);

				this.STATE_CODE = readString(dis, ois);

				this.CITY_NAME = readString(dis, ois);

				this.CITY_CODE = readString(dis, ois);

				this.ADDRESS_ZONE = readString(dis, ois);

				this.ADDRESS_STREET = readString(dis, ois);

				this.ADDRESS_STREET_LANG2 = readString(dis, ois);

				this.ZIP_CODE = readString(dis, ois);

				this.EMAIL = readString(dis, ois);

				this.TELEPHONE = readString(dis, ois);

				this.PERSON_GROUP_CODE = readString(dis, ois);

				this.CAPTURE_USER_ID = (BigDecimal) ois.readObject();

				this.CAPTURE_DATE = readDate(dis, ois);

			} catch (IOException e) {
				throw new RuntimeException(e);

			} catch (ClassNotFoundException eCNFE) {
				throw new RuntimeException(eCNFE);

			}

		}

		/**
		 * Return a byte array which represents Values data.
		 */
		public void writeValuesData(DataOutputStream dos, ObjectOutputStream oos) {
			try {

				writeString(this.USERDOC_SEQ, dos, oos);

				oos.writeObject(this.USERDOC_SERIES);

				oos.writeObject(this.USERDOC_NBR);

				writeString(this.DOC_ORI, dos, oos);

				oos.writeObject(this.DOC_SERIES);

				oos.writeObject(this.IND_IMPORT);

				writeString(this.USERDOC_TYPE, dos, oos);

				oos.writeObject(this.LAW_CODE);

				writeDate(this.FILING_DATE, dos, oos);

				writeDate(this.RECEPTION_DATE, dos, oos);

				writeString(this.NOTES, dos, oos);

				writeString(this.APPLICANT_NOTES, dos, oos);

				writeString(this.PERSON_NAME, dos, oos);

				writeString(this.PERSON_NAME_LANG2, dos, oos);

				writeString(this.NATIONALITY_COUNTRY_CODE, dos, oos);

				oos.writeObject(this.IND_COMPANY);

				writeString(this.LEGAL_NATURE, dos, oos);

				writeString(this.LEGAL_NATURE_LANG2, dos, oos);

				writeString(this.LEGAL_ID_TYPE, dos, oos);

				oos.writeObject(this.LEGAL_ID_NBR);

				writeString(this.INDIVIDUAL_ID_TYPE, dos, oos);

				oos.writeObject(this.INDIVIDUAL_ID_NBR);

				writeString(this.RESIDENCE_COUNTRY_CODE, dos, oos);

				writeString(this.STATE_NAME, dos, oos);

				writeString(this.STATE_CODE, dos, oos);

				writeString(this.CITY_NAME, dos, oos);

				writeString(this.CITY_CODE, dos, oos);

				writeString(this.ADDRESS_ZONE, dos, oos);

				writeString(this.ADDRESS_STREET, dos, oos);

				writeString(this.ADDRESS_STREET_LANG2, dos, oos);

				writeString(this.ZIP_CODE, dos, oos);

				writeString(this.EMAIL, dos, oos);

				writeString(this.TELEPHONE, dos, oos);

				writeString(this.PERSON_GROUP_CODE, dos, oos);

				oos.writeObject(this.CAPTURE_USER_ID);

				writeDate(this.CAPTURE_DATE, dos, oos);

			} catch (IOException e) {
				throw new RuntimeException(e);
			}

		}

		public String toString() {

			StringBuilder sb = new StringBuilder();
			sb.append(super.toString());
			sb.append("[");
			sb.append("USERDOC_SEQ=" + USERDOC_SEQ);
			sb.append(",USERDOC_SERIES=" + String.valueOf(USERDOC_SERIES));
			sb.append(",USERDOC_NBR=" + String.valueOf(USERDOC_NBR));
			sb.append(",DOC_ORI=" + DOC_ORI);
			sb.append(",DOC_SERIES=" + String.valueOf(DOC_SERIES));
			sb.append(",DOC_NBR=" + String.valueOf(DOC_NBR));
			sb.append(",IND_IMPORT=" + String.valueOf(IND_IMPORT));
			sb.append(",USERDOC_TYPE=" + USERDOC_TYPE);
			sb.append(",LAW_CODE=" + String.valueOf(LAW_CODE));
			sb.append(",FILING_DATE=" + String.valueOf(FILING_DATE));
			sb.append(",RECEPTION_DATE=" + String.valueOf(RECEPTION_DATE));
			sb.append(",NOTES=" + NOTES);
			sb.append(",APPLICANT_NOTES=" + APPLICANT_NOTES);
			sb.append(",PERSON_NAME=" + PERSON_NAME);
			sb.append(",PERSON_NAME_LANG2=" + PERSON_NAME_LANG2);
			sb.append(",NATIONALITY_COUNTRY_CODE=" + NATIONALITY_COUNTRY_CODE);
			sb.append(",IND_COMPANY=" + String.valueOf(IND_COMPANY));
			sb.append(",LEGAL_NATURE=" + LEGAL_NATURE);
			sb.append(",LEGAL_NATURE_LANG2=" + LEGAL_NATURE_LANG2);
			sb.append(",LEGAL_ID_TYPE=" + LEGAL_ID_TYPE);
			sb.append(",LEGAL_ID_NBR=" + String.valueOf(LEGAL_ID_NBR));
			sb.append(",INDIVIDUAL_ID_TYPE=" + INDIVIDUAL_ID_TYPE);
			sb.append(",INDIVIDUAL_ID_NBR=" + String.valueOf(INDIVIDUAL_ID_NBR));
			sb.append(",RESIDENCE_COUNTRY_CODE=" + RESIDENCE_COUNTRY_CODE);
			sb.append(",STATE_NAME=" + STATE_NAME);
			sb.append(",STATE_CODE=" + STATE_CODE);
			sb.append(",CITY_NAME=" + CITY_NAME);
			sb.append(",CITY_CODE=" + CITY_CODE);
			sb.append(",ADDRESS_ZONE=" + ADDRESS_ZONE);
			sb.append(",ADDRESS_STREET=" + ADDRESS_STREET);
			sb.append(",ADDRESS_STREET_LANG2=" + ADDRESS_STREET_LANG2);
			sb.append(",ZIP_CODE=" + ZIP_CODE);
			sb.append(",EMAIL=" + EMAIL);
			sb.append(",TELEPHONE=" + TELEPHONE);
			sb.append(",PERSON_GROUP_CODE=" + PERSON_GROUP_CODE);
			sb.append(",CAPTURE_USER_ID=" + String.valueOf(CAPTURE_USER_ID));
			sb.append(",CAPTURE_DATE=" + String.valueOf(CAPTURE_DATE));
			sb.append("]");

			return sb.toString();
		}

		/**
		 * Compare keys
		 */
		public int compareTo(row7Struct other) {

			int returnValue = -1;

			returnValue = checkNullsAndCompare(this.DOC_NBR, other.DOC_NBR);
			if (returnValue != 0) {
				return returnValue;
			}

			return returnValue;
		}

		private int checkNullsAndCompare(Object object1, Object object2) {
			int returnValue = 0;
			if (object1 instanceof Comparable && object2 instanceof Comparable) {
				returnValue = ((Comparable) object1).compareTo(object2);
			} else if (object1 != null && object2 != null) {
				returnValue = compareStrings(object1.toString(), object2.toString());
			} else if (object1 == null && object2 != null) {
				returnValue = 1;
			} else if (object1 != null && object2 == null) {
				returnValue = -1;
			} else {
				returnValue = 0;
			}

			return returnValue;
		}

		private int compareStrings(String string1, String string2) {
			return string1.compareTo(string2);
		}

	}

	public void tDBInput_5Process(final java.util.Map<String, Object> globalMap) throws TalendException {
		globalMap.put("tDBInput_5_SUBPROCESS_STATE", 0);

		final boolean execStat = this.execStat;

		String iterateId = "";

		String currentComponent = "";
		java.util.Map<String, Object> resourceMap = new java.util.HashMap<String, Object>();

		try {
			// TDI-39566 avoid throwing an useless Exception
			boolean resumeIt = true;
			if (globalResumeTicket == false && resumeEntryMethodName != null) {
				String currentMethodName = new java.lang.Exception().getStackTrace()[0].getMethodName();
				resumeIt = resumeEntryMethodName.equals(currentMethodName);
			}
			if (resumeIt || globalResumeTicket) { // start the resume
				globalResumeTicket = true;

				row7Struct row7 = new row7Struct();

				/**
				 * [tAdvancedHash_row7 begin ] start
				 */

				ok_Hash.put("tAdvancedHash_row7", false);
				start_Hash.put("tAdvancedHash_row7", System.currentTimeMillis());

				currentComponent = "tAdvancedHash_row7";

				if (execStat) {
					runStat.updateStatOnConnection(resourceMap, iterateId, 0, 0, "row7");
				}

				int tos_count_tAdvancedHash_row7 = 0;

				// connection name:row7
				// source node:tDBInput_5 - inputs:(after_tDBInput_7) outputs:(row7,row7) |
				// target node:tAdvancedHash_row7 - inputs:(row7) outputs:()
				// linked node: tMap_2 - inputs:(row6,row7,row12) outputs:(action_ud)

				org.talend.designer.components.lookup.common.ICommonLookup.MATCHING_MODE matchingModeEnum_row7 = org.talend.designer.components.lookup.common.ICommonLookup.MATCHING_MODE.ALL_MATCHES;

				org.talend.designer.components.lookup.memory.AdvancedMemoryLookup<row7Struct> tHash_Lookup_row7 = org.talend.designer.components.lookup.memory.AdvancedMemoryLookup
						.<row7Struct>getLookup(matchingModeEnum_row7);

				globalMap.put("tHash_Lookup_row7", tHash_Lookup_row7);

				/**
				 * [tAdvancedHash_row7 begin ] stop
				 */

				/**
				 * [tDBInput_5 begin ] start
				 */

				ok_Hash.put("tDBInput_5", false);
				start_Hash.put("tDBInput_5", System.currentTimeMillis());

				currentComponent = "tDBInput_5";

				int tos_count_tDBInput_5 = 0;

				org.talend.designer.components.util.mssql.MSSqlGenerateTimestampUtil mssqlGTU_tDBInput_5 = org.talend.designer.components.util.mssql.MSSqlUtilFactory
						.getMSSqlGenerateTimestampUtil();

				java.util.List<String> talendToDBList_tDBInput_5 = new java.util.ArrayList();
				String[] talendToDBArray_tDBInput_5 = new String[] { "FLOAT", "NUMERIC", "NUMERIC IDENTITY", "DECIMAL",
						"DECIMAL IDENTITY", "REAL" };
				java.util.Collections.addAll(talendToDBList_tDBInput_5, talendToDBArray_tDBInput_5);
				int nb_line_tDBInput_5 = 0;
				java.sql.Connection conn_tDBInput_5 = null;
				conn_tDBInput_5 = (java.sql.Connection) globalMap.get("conn_tDBConnection_1");

				String dbschema_tDBInput_5 = (String) globalMap.get("dbschema_tDBConnection_1");

				java.sql.Statement stmt_tDBInput_5 = conn_tDBInput_5.createStatement();

				String dbquery_tDBInput_5 = "SELECT dbo.VW_IMPORT_USERDOC.USERDOC_SEQ,\n		dbo.VW_IMPORT_USERDOC.USERDOC_SERIES,\n		dbo.VW_IMPORT_USERDOC.USERDOC_NBR,\n"
						+ "		dbo.VW_IMPORT_USERDOC.DOC_ORI,\n		dbo.VW_IMPORT_USERDOC.DOC_SERIES,\n		dbo.VW_IMPORT_USERDOC.DOC_NBR,\n		dbo.VW_IMPORT_US"
						+ "ERDOC.IND_IMPORT,\n		dbo.VW_IMPORT_USERDOC.USERDOC_TYPE,\n		dbo.VW_IMPORT_USERDOC.LAW_CODE,\n		dbo.VW_IMPORT_USERDOC.FILING"
						+ "_DATE,\n		dbo.VW_IMPORT_USERDOC.RECEPTION_DATE,\n		dbo.VW_IMPORT_USERDOC.NOTES,\n		dbo.VW_IMPORT_USERDOC.APPLICANT_NOTES,\n	"
						+ "	dbo.VW_IMPORT_USERDOC.PERSON_NAME,\n		dbo.VW_IMPORT_USERDOC.PERSON_NAME_LANG2,\n		dbo.VW_IMPORT_USERDOC.NATIONALITY_COUNT"
						+ "RY_CODE,\n		dbo.VW_IMPORT_USERDOC.IND_COMPANY,\n		dbo.VW_IMPORT_USERDOC.LEGAL_NATURE,\n		dbo.VW_IMPORT_USERDOC.LEGAL_NATURE"
						+ "_LANG2,\n		dbo.VW_IMPORT_USERDOC.LEGAL_ID_TYPE,\n		dbo.VW_IMPORT_USERDOC.LEGAL_ID_NBR,\n		dbo.VW_IMPORT_USERDOC.INDIVIDUAL_"
						+ "ID_TYPE,\n		dbo.VW_IMPORT_USERDOC.INDIVIDUAL_ID_NBR,\n		dbo.VW_IMPORT_USERDOC.RESIDENCE_COUNTRY_CODE,\n		dbo.VW_IMPORT_USER"
						+ "DOC.STATE_NAME,\n		dbo.VW_IMPORT_USERDOC.STATE_CODE,\n		dbo.VW_IMPORT_USERDOC.CITY_NAME,\n		dbo.VW_IMPORT_USERDOC.CITY_CODE"
						+ ",\n		dbo.VW_IMPORT_USERDOC.ADDRESS_ZONE,\n		dbo.VW_IMPORT_USERDOC.ADDRESS_STREET,\n		dbo.VW_IMPORT_USERDOC.ADDRESS_STREET_L"
						+ "ANG2,\n		dbo.VW_IMPORT_USERDOC.ZIP_CODE,\n		dbo.VW_IMPORT_USERDOC.EMAIL,\n		dbo.VW_IMPORT_USERDOC.TELEPHONE,\n		dbo.VW_IMPOR"
						+ "T_USERDOC.PERSON_GROUP_CODE,\n		dbo.VW_IMPORT_USERDOC.CAPTURE_USER_ID,\n		dbo.VW_IMPORT_USERDOC.CAPTURE_DATE\nFROM	dbo.VW_I"
						+ "MPORT_USERDOC";

				globalMap.put("tDBInput_5_QUERY", dbquery_tDBInput_5);
				java.sql.ResultSet rs_tDBInput_5 = null;

				try {
					rs_tDBInput_5 = stmt_tDBInput_5.executeQuery(dbquery_tDBInput_5);
					java.sql.ResultSetMetaData rsmd_tDBInput_5 = rs_tDBInput_5.getMetaData();
					int colQtyInRs_tDBInput_5 = rsmd_tDBInput_5.getColumnCount();

					String tmpContent_tDBInput_5 = null;

					while (rs_tDBInput_5.next()) {
						nb_line_tDBInput_5++;

						if (colQtyInRs_tDBInput_5 < 1) {
							row7.USERDOC_SEQ = null;
						} else {

							tmpContent_tDBInput_5 = rs_tDBInput_5.getString(1);
							if (tmpContent_tDBInput_5 != null) {
								if (talendToDBList_tDBInput_5.contains(
										rsmd_tDBInput_5.getColumnTypeName(1).toUpperCase(java.util.Locale.ENGLISH))) {
									row7.USERDOC_SEQ = FormatterUtils.formatUnwithE(tmpContent_tDBInput_5);
								} else {
									row7.USERDOC_SEQ = tmpContent_tDBInput_5;
								}
							} else {
								row7.USERDOC_SEQ = null;
							}
						}
						if (colQtyInRs_tDBInput_5 < 2) {
							row7.USERDOC_SERIES = null;
						} else {

							row7.USERDOC_SERIES = rs_tDBInput_5.getBigDecimal(2);
							if (rs_tDBInput_5.wasNull()) {
								throw new RuntimeException("Null value in non-Nullable column");
							}
						}
						if (colQtyInRs_tDBInput_5 < 3) {
							row7.USERDOC_NBR = null;
						} else {

							row7.USERDOC_NBR = rs_tDBInput_5.getBigDecimal(3);
							if (rs_tDBInput_5.wasNull()) {
								throw new RuntimeException("Null value in non-Nullable column");
							}
						}
						if (colQtyInRs_tDBInput_5 < 4) {
							row7.DOC_ORI = null;
						} else {

							tmpContent_tDBInput_5 = rs_tDBInput_5.getString(4);
							if (tmpContent_tDBInput_5 != null) {
								if (talendToDBList_tDBInput_5.contains(
										rsmd_tDBInput_5.getColumnTypeName(4).toUpperCase(java.util.Locale.ENGLISH))) {
									row7.DOC_ORI = FormatterUtils.formatUnwithE(tmpContent_tDBInput_5);
								} else {
									row7.DOC_ORI = tmpContent_tDBInput_5;
								}
							} else {
								row7.DOC_ORI = null;
							}
						}
						if (colQtyInRs_tDBInput_5 < 5) {
							row7.DOC_SERIES = null;
						} else {

							row7.DOC_SERIES = rs_tDBInput_5.getBigDecimal(5);
							if (rs_tDBInput_5.wasNull()) {
								row7.DOC_SERIES = null;
							}
						}
						if (colQtyInRs_tDBInput_5 < 6) {
							row7.DOC_NBR = null;
						} else {

							row7.DOC_NBR = rs_tDBInput_5.getBigDecimal(6);
							if (rs_tDBInput_5.wasNull()) {
								row7.DOC_NBR = null;
							}
						}
						if (colQtyInRs_tDBInput_5 < 7) {
							row7.IND_IMPORT = null;
						} else {

							row7.IND_IMPORT = rs_tDBInput_5.getBigDecimal(7);
							if (rs_tDBInput_5.wasNull()) {
								row7.IND_IMPORT = null;
							}
						}
						if (colQtyInRs_tDBInput_5 < 8) {
							row7.USERDOC_TYPE = null;
						} else {

							tmpContent_tDBInput_5 = rs_tDBInput_5.getString(8);
							if (tmpContent_tDBInput_5 != null) {
								if (talendToDBList_tDBInput_5.contains(
										rsmd_tDBInput_5.getColumnTypeName(8).toUpperCase(java.util.Locale.ENGLISH))) {
									row7.USERDOC_TYPE = FormatterUtils.formatUnwithE(tmpContent_tDBInput_5);
								} else {
									row7.USERDOC_TYPE = tmpContent_tDBInput_5;
								}
							} else {
								row7.USERDOC_TYPE = null;
							}
						}
						if (colQtyInRs_tDBInput_5 < 9) {
							row7.LAW_CODE = null;
						} else {

							row7.LAW_CODE = rs_tDBInput_5.getBigDecimal(9);
							if (rs_tDBInput_5.wasNull()) {
								throw new RuntimeException("Null value in non-Nullable column");
							}
						}
						if (colQtyInRs_tDBInput_5 < 10) {
							row7.FILING_DATE = null;
						} else {

							row7.FILING_DATE = mssqlGTU_tDBInput_5.getDate(rsmd_tDBInput_5, rs_tDBInput_5, 10);

						}
						if (colQtyInRs_tDBInput_5 < 11) {
							row7.RECEPTION_DATE = null;
						} else {

							row7.RECEPTION_DATE = mssqlGTU_tDBInput_5.getDate(rsmd_tDBInput_5, rs_tDBInput_5, 11);

						}
						if (colQtyInRs_tDBInput_5 < 12) {
							row7.NOTES = null;
						} else {

							tmpContent_tDBInput_5 = rs_tDBInput_5.getString(12);
							if (tmpContent_tDBInput_5 != null) {
								if (talendToDBList_tDBInput_5.contains(
										rsmd_tDBInput_5.getColumnTypeName(12).toUpperCase(java.util.Locale.ENGLISH))) {
									row7.NOTES = FormatterUtils.formatUnwithE(tmpContent_tDBInput_5);
								} else {
									row7.NOTES = tmpContent_tDBInput_5;
								}
							} else {
								row7.NOTES = null;
							}
						}
						if (colQtyInRs_tDBInput_5 < 13) {
							row7.APPLICANT_NOTES = null;
						} else {

							tmpContent_tDBInput_5 = rs_tDBInput_5.getString(13);
							if (tmpContent_tDBInput_5 != null) {
								if (talendToDBList_tDBInput_5.contains(
										rsmd_tDBInput_5.getColumnTypeName(13).toUpperCase(java.util.Locale.ENGLISH))) {
									row7.APPLICANT_NOTES = FormatterUtils.formatUnwithE(tmpContent_tDBInput_5);
								} else {
									row7.APPLICANT_NOTES = tmpContent_tDBInput_5;
								}
							} else {
								row7.APPLICANT_NOTES = null;
							}
						}
						if (colQtyInRs_tDBInput_5 < 14) {
							row7.PERSON_NAME = null;
						} else {

							tmpContent_tDBInput_5 = rs_tDBInput_5.getString(14);
							if (tmpContent_tDBInput_5 != null) {
								if (talendToDBList_tDBInput_5.contains(
										rsmd_tDBInput_5.getColumnTypeName(14).toUpperCase(java.util.Locale.ENGLISH))) {
									row7.PERSON_NAME = FormatterUtils.formatUnwithE(tmpContent_tDBInput_5);
								} else {
									row7.PERSON_NAME = tmpContent_tDBInput_5;
								}
							} else {
								row7.PERSON_NAME = null;
							}
						}
						if (colQtyInRs_tDBInput_5 < 15) {
							row7.PERSON_NAME_LANG2 = null;
						} else {

							tmpContent_tDBInput_5 = rs_tDBInput_5.getString(15);
							if (tmpContent_tDBInput_5 != null) {
								if (talendToDBList_tDBInput_5.contains(
										rsmd_tDBInput_5.getColumnTypeName(15).toUpperCase(java.util.Locale.ENGLISH))) {
									row7.PERSON_NAME_LANG2 = FormatterUtils.formatUnwithE(tmpContent_tDBInput_5);
								} else {
									row7.PERSON_NAME_LANG2 = tmpContent_tDBInput_5;
								}
							} else {
								row7.PERSON_NAME_LANG2 = null;
							}
						}
						if (colQtyInRs_tDBInput_5 < 16) {
							row7.NATIONALITY_COUNTRY_CODE = null;
						} else {

							tmpContent_tDBInput_5 = rs_tDBInput_5.getString(16);
							if (tmpContent_tDBInput_5 != null) {
								if (talendToDBList_tDBInput_5.contains(
										rsmd_tDBInput_5.getColumnTypeName(16).toUpperCase(java.util.Locale.ENGLISH))) {
									row7.NATIONALITY_COUNTRY_CODE = FormatterUtils.formatUnwithE(tmpContent_tDBInput_5);
								} else {
									row7.NATIONALITY_COUNTRY_CODE = tmpContent_tDBInput_5;
								}
							} else {
								row7.NATIONALITY_COUNTRY_CODE = null;
							}
						}
						if (colQtyInRs_tDBInput_5 < 17) {
							row7.IND_COMPANY = null;
						} else {

							row7.IND_COMPANY = rs_tDBInput_5.getBigDecimal(17);
							if (rs_tDBInput_5.wasNull()) {
								row7.IND_COMPANY = null;
							}
						}
						if (colQtyInRs_tDBInput_5 < 18) {
							row7.LEGAL_NATURE = null;
						} else {

							tmpContent_tDBInput_5 = rs_tDBInput_5.getString(18);
							if (tmpContent_tDBInput_5 != null) {
								if (talendToDBList_tDBInput_5.contains(
										rsmd_tDBInput_5.getColumnTypeName(18).toUpperCase(java.util.Locale.ENGLISH))) {
									row7.LEGAL_NATURE = FormatterUtils.formatUnwithE(tmpContent_tDBInput_5);
								} else {
									row7.LEGAL_NATURE = tmpContent_tDBInput_5;
								}
							} else {
								row7.LEGAL_NATURE = null;
							}
						}
						if (colQtyInRs_tDBInput_5 < 19) {
							row7.LEGAL_NATURE_LANG2 = null;
						} else {

							tmpContent_tDBInput_5 = rs_tDBInput_5.getString(19);
							if (tmpContent_tDBInput_5 != null) {
								if (talendToDBList_tDBInput_5.contains(
										rsmd_tDBInput_5.getColumnTypeName(19).toUpperCase(java.util.Locale.ENGLISH))) {
									row7.LEGAL_NATURE_LANG2 = FormatterUtils.formatUnwithE(tmpContent_tDBInput_5);
								} else {
									row7.LEGAL_NATURE_LANG2 = tmpContent_tDBInput_5;
								}
							} else {
								row7.LEGAL_NATURE_LANG2 = null;
							}
						}
						if (colQtyInRs_tDBInput_5 < 20) {
							row7.LEGAL_ID_TYPE = null;
						} else {

							tmpContent_tDBInput_5 = rs_tDBInput_5.getString(20);
							if (tmpContent_tDBInput_5 != null) {
								if (talendToDBList_tDBInput_5.contains(
										rsmd_tDBInput_5.getColumnTypeName(20).toUpperCase(java.util.Locale.ENGLISH))) {
									row7.LEGAL_ID_TYPE = FormatterUtils.formatUnwithE(tmpContent_tDBInput_5);
								} else {
									row7.LEGAL_ID_TYPE = tmpContent_tDBInput_5;
								}
							} else {
								row7.LEGAL_ID_TYPE = null;
							}
						}
						if (colQtyInRs_tDBInput_5 < 21) {
							row7.LEGAL_ID_NBR = null;
						} else {

							row7.LEGAL_ID_NBR = rs_tDBInput_5.getBigDecimal(21);
							if (rs_tDBInput_5.wasNull()) {
								row7.LEGAL_ID_NBR = null;
							}
						}
						if (colQtyInRs_tDBInput_5 < 22) {
							row7.INDIVIDUAL_ID_TYPE = null;
						} else {

							tmpContent_tDBInput_5 = rs_tDBInput_5.getString(22);
							if (tmpContent_tDBInput_5 != null) {
								if (talendToDBList_tDBInput_5.contains(
										rsmd_tDBInput_5.getColumnTypeName(22).toUpperCase(java.util.Locale.ENGLISH))) {
									row7.INDIVIDUAL_ID_TYPE = FormatterUtils.formatUnwithE(tmpContent_tDBInput_5);
								} else {
									row7.INDIVIDUAL_ID_TYPE = tmpContent_tDBInput_5;
								}
							} else {
								row7.INDIVIDUAL_ID_TYPE = null;
							}
						}
						if (colQtyInRs_tDBInput_5 < 23) {
							row7.INDIVIDUAL_ID_NBR = null;
						} else {

							row7.INDIVIDUAL_ID_NBR = rs_tDBInput_5.getBigDecimal(23);
							if (rs_tDBInput_5.wasNull()) {
								row7.INDIVIDUAL_ID_NBR = null;
							}
						}
						if (colQtyInRs_tDBInput_5 < 24) {
							row7.RESIDENCE_COUNTRY_CODE = null;
						} else {

							tmpContent_tDBInput_5 = rs_tDBInput_5.getString(24);
							if (tmpContent_tDBInput_5 != null) {
								if (talendToDBList_tDBInput_5.contains(
										rsmd_tDBInput_5.getColumnTypeName(24).toUpperCase(java.util.Locale.ENGLISH))) {
									row7.RESIDENCE_COUNTRY_CODE = FormatterUtils.formatUnwithE(tmpContent_tDBInput_5);
								} else {
									row7.RESIDENCE_COUNTRY_CODE = tmpContent_tDBInput_5;
								}
							} else {
								row7.RESIDENCE_COUNTRY_CODE = null;
							}
						}
						if (colQtyInRs_tDBInput_5 < 25) {
							row7.STATE_NAME = null;
						} else {

							tmpContent_tDBInput_5 = rs_tDBInput_5.getString(25);
							if (tmpContent_tDBInput_5 != null) {
								if (talendToDBList_tDBInput_5.contains(
										rsmd_tDBInput_5.getColumnTypeName(25).toUpperCase(java.util.Locale.ENGLISH))) {
									row7.STATE_NAME = FormatterUtils.formatUnwithE(tmpContent_tDBInput_5);
								} else {
									row7.STATE_NAME = tmpContent_tDBInput_5;
								}
							} else {
								row7.STATE_NAME = null;
							}
						}
						if (colQtyInRs_tDBInput_5 < 26) {
							row7.STATE_CODE = null;
						} else {

							tmpContent_tDBInput_5 = rs_tDBInput_5.getString(26);
							if (tmpContent_tDBInput_5 != null) {
								if (talendToDBList_tDBInput_5.contains(
										rsmd_tDBInput_5.getColumnTypeName(26).toUpperCase(java.util.Locale.ENGLISH))) {
									row7.STATE_CODE = FormatterUtils.formatUnwithE(tmpContent_tDBInput_5);
								} else {
									row7.STATE_CODE = tmpContent_tDBInput_5;
								}
							} else {
								row7.STATE_CODE = null;
							}
						}
						if (colQtyInRs_tDBInput_5 < 27) {
							row7.CITY_NAME = null;
						} else {

							tmpContent_tDBInput_5 = rs_tDBInput_5.getString(27);
							if (tmpContent_tDBInput_5 != null) {
								if (talendToDBList_tDBInput_5.contains(
										rsmd_tDBInput_5.getColumnTypeName(27).toUpperCase(java.util.Locale.ENGLISH))) {
									row7.CITY_NAME = FormatterUtils.formatUnwithE(tmpContent_tDBInput_5);
								} else {
									row7.CITY_NAME = tmpContent_tDBInput_5;
								}
							} else {
								row7.CITY_NAME = null;
							}
						}
						if (colQtyInRs_tDBInput_5 < 28) {
							row7.CITY_CODE = null;
						} else {

							tmpContent_tDBInput_5 = rs_tDBInput_5.getString(28);
							if (tmpContent_tDBInput_5 != null) {
								if (talendToDBList_tDBInput_5.contains(
										rsmd_tDBInput_5.getColumnTypeName(28).toUpperCase(java.util.Locale.ENGLISH))) {
									row7.CITY_CODE = FormatterUtils.formatUnwithE(tmpContent_tDBInput_5);
								} else {
									row7.CITY_CODE = tmpContent_tDBInput_5;
								}
							} else {
								row7.CITY_CODE = null;
							}
						}
						if (colQtyInRs_tDBInput_5 < 29) {
							row7.ADDRESS_ZONE = null;
						} else {

							tmpContent_tDBInput_5 = rs_tDBInput_5.getString(29);
							if (tmpContent_tDBInput_5 != null) {
								if (talendToDBList_tDBInput_5.contains(
										rsmd_tDBInput_5.getColumnTypeName(29).toUpperCase(java.util.Locale.ENGLISH))) {
									row7.ADDRESS_ZONE = FormatterUtils.formatUnwithE(tmpContent_tDBInput_5);
								} else {
									row7.ADDRESS_ZONE = tmpContent_tDBInput_5;
								}
							} else {
								row7.ADDRESS_ZONE = null;
							}
						}
						if (colQtyInRs_tDBInput_5 < 30) {
							row7.ADDRESS_STREET = null;
						} else {

							tmpContent_tDBInput_5 = rs_tDBInput_5.getString(30);
							if (tmpContent_tDBInput_5 != null) {
								if (talendToDBList_tDBInput_5.contains(
										rsmd_tDBInput_5.getColumnTypeName(30).toUpperCase(java.util.Locale.ENGLISH))) {
									row7.ADDRESS_STREET = FormatterUtils.formatUnwithE(tmpContent_tDBInput_5);
								} else {
									row7.ADDRESS_STREET = tmpContent_tDBInput_5;
								}
							} else {
								row7.ADDRESS_STREET = null;
							}
						}
						if (colQtyInRs_tDBInput_5 < 31) {
							row7.ADDRESS_STREET_LANG2 = null;
						} else {

							tmpContent_tDBInput_5 = rs_tDBInput_5.getString(31);
							if (tmpContent_tDBInput_5 != null) {
								if (talendToDBList_tDBInput_5.contains(
										rsmd_tDBInput_5.getColumnTypeName(31).toUpperCase(java.util.Locale.ENGLISH))) {
									row7.ADDRESS_STREET_LANG2 = FormatterUtils.formatUnwithE(tmpContent_tDBInput_5);
								} else {
									row7.ADDRESS_STREET_LANG2 = tmpContent_tDBInput_5;
								}
							} else {
								row7.ADDRESS_STREET_LANG2 = null;
							}
						}
						if (colQtyInRs_tDBInput_5 < 32) {
							row7.ZIP_CODE = null;
						} else {

							tmpContent_tDBInput_5 = rs_tDBInput_5.getString(32);
							if (tmpContent_tDBInput_5 != null) {
								if (talendToDBList_tDBInput_5.contains(
										rsmd_tDBInput_5.getColumnTypeName(32).toUpperCase(java.util.Locale.ENGLISH))) {
									row7.ZIP_CODE = FormatterUtils.formatUnwithE(tmpContent_tDBInput_5);
								} else {
									row7.ZIP_CODE = tmpContent_tDBInput_5;
								}
							} else {
								row7.ZIP_CODE = null;
							}
						}
						if (colQtyInRs_tDBInput_5 < 33) {
							row7.EMAIL = null;
						} else {

							tmpContent_tDBInput_5 = rs_tDBInput_5.getString(33);
							if (tmpContent_tDBInput_5 != null) {
								if (talendToDBList_tDBInput_5.contains(
										rsmd_tDBInput_5.getColumnTypeName(33).toUpperCase(java.util.Locale.ENGLISH))) {
									row7.EMAIL = FormatterUtils.formatUnwithE(tmpContent_tDBInput_5);
								} else {
									row7.EMAIL = tmpContent_tDBInput_5;
								}
							} else {
								row7.EMAIL = null;
							}
						}
						if (colQtyInRs_tDBInput_5 < 34) {
							row7.TELEPHONE = null;
						} else {

							tmpContent_tDBInput_5 = rs_tDBInput_5.getString(34);
							if (tmpContent_tDBInput_5 != null) {
								if (talendToDBList_tDBInput_5.contains(
										rsmd_tDBInput_5.getColumnTypeName(34).toUpperCase(java.util.Locale.ENGLISH))) {
									row7.TELEPHONE = FormatterUtils.formatUnwithE(tmpContent_tDBInput_5);
								} else {
									row7.TELEPHONE = tmpContent_tDBInput_5;
								}
							} else {
								row7.TELEPHONE = null;
							}
						}
						if (colQtyInRs_tDBInput_5 < 35) {
							row7.PERSON_GROUP_CODE = null;
						} else {

							tmpContent_tDBInput_5 = rs_tDBInput_5.getString(35);
							if (tmpContent_tDBInput_5 != null) {
								if (talendToDBList_tDBInput_5.contains(
										rsmd_tDBInput_5.getColumnTypeName(35).toUpperCase(java.util.Locale.ENGLISH))) {
									row7.PERSON_GROUP_CODE = FormatterUtils.formatUnwithE(tmpContent_tDBInput_5);
								} else {
									row7.PERSON_GROUP_CODE = tmpContent_tDBInput_5;
								}
							} else {
								row7.PERSON_GROUP_CODE = null;
							}
						}
						if (colQtyInRs_tDBInput_5 < 36) {
							row7.CAPTURE_USER_ID = null;
						} else {

							row7.CAPTURE_USER_ID = rs_tDBInput_5.getBigDecimal(36);
							if (rs_tDBInput_5.wasNull()) {
								row7.CAPTURE_USER_ID = null;
							}
						}
						if (colQtyInRs_tDBInput_5 < 37) {
							row7.CAPTURE_DATE = null;
						} else {

							row7.CAPTURE_DATE = mssqlGTU_tDBInput_5.getDate(rsmd_tDBInput_5, rs_tDBInput_5, 37);

						}

						/**
						 * [tDBInput_5 begin ] stop
						 */

						/**
						 * [tDBInput_5 main ] start
						 */

						currentComponent = "tDBInput_5";

						tos_count_tDBInput_5++;

						/**
						 * [tDBInput_5 main ] stop
						 */

						/**
						 * [tDBInput_5 process_data_begin ] start
						 */

						currentComponent = "tDBInput_5";

						/**
						 * [tDBInput_5 process_data_begin ] stop
						 */

						/**
						 * [tAdvancedHash_row7 main ] start
						 */

						currentComponent = "tAdvancedHash_row7";

						if (execStat) {
							runStat.updateStatOnConnection(iterateId, 1, 1

									, "row7"

							);
						}

						row7Struct row7_HashRow = new row7Struct();

						row7_HashRow.USERDOC_SEQ = row7.USERDOC_SEQ;

						row7_HashRow.USERDOC_SERIES = row7.USERDOC_SERIES;

						row7_HashRow.USERDOC_NBR = row7.USERDOC_NBR;

						row7_HashRow.DOC_ORI = row7.DOC_ORI;

						row7_HashRow.DOC_SERIES = row7.DOC_SERIES;

						row7_HashRow.DOC_NBR = row7.DOC_NBR;

						row7_HashRow.IND_IMPORT = row7.IND_IMPORT;

						row7_HashRow.USERDOC_TYPE = row7.USERDOC_TYPE;

						row7_HashRow.LAW_CODE = row7.LAW_CODE;

						row7_HashRow.FILING_DATE = row7.FILING_DATE;

						row7_HashRow.RECEPTION_DATE = row7.RECEPTION_DATE;

						row7_HashRow.NOTES = row7.NOTES;

						row7_HashRow.APPLICANT_NOTES = row7.APPLICANT_NOTES;

						row7_HashRow.PERSON_NAME = row7.PERSON_NAME;

						row7_HashRow.PERSON_NAME_LANG2 = row7.PERSON_NAME_LANG2;

						row7_HashRow.NATIONALITY_COUNTRY_CODE = row7.NATIONALITY_COUNTRY_CODE;

						row7_HashRow.IND_COMPANY = row7.IND_COMPANY;

						row7_HashRow.LEGAL_NATURE = row7.LEGAL_NATURE;

						row7_HashRow.LEGAL_NATURE_LANG2 = row7.LEGAL_NATURE_LANG2;

						row7_HashRow.LEGAL_ID_TYPE = row7.LEGAL_ID_TYPE;

						row7_HashRow.LEGAL_ID_NBR = row7.LEGAL_ID_NBR;

						row7_HashRow.INDIVIDUAL_ID_TYPE = row7.INDIVIDUAL_ID_TYPE;

						row7_HashRow.INDIVIDUAL_ID_NBR = row7.INDIVIDUAL_ID_NBR;

						row7_HashRow.RESIDENCE_COUNTRY_CODE = row7.RESIDENCE_COUNTRY_CODE;

						row7_HashRow.STATE_NAME = row7.STATE_NAME;

						row7_HashRow.STATE_CODE = row7.STATE_CODE;

						row7_HashRow.CITY_NAME = row7.CITY_NAME;

						row7_HashRow.CITY_CODE = row7.CITY_CODE;

						row7_HashRow.ADDRESS_ZONE = row7.ADDRESS_ZONE;

						row7_HashRow.ADDRESS_STREET = row7.ADDRESS_STREET;

						row7_HashRow.ADDRESS_STREET_LANG2 = row7.ADDRESS_STREET_LANG2;

						row7_HashRow.ZIP_CODE = row7.ZIP_CODE;

						row7_HashRow.EMAIL = row7.EMAIL;

						row7_HashRow.TELEPHONE = row7.TELEPHONE;

						row7_HashRow.PERSON_GROUP_CODE = row7.PERSON_GROUP_CODE;

						row7_HashRow.CAPTURE_USER_ID = row7.CAPTURE_USER_ID;

						row7_HashRow.CAPTURE_DATE = row7.CAPTURE_DATE;

						tHash_Lookup_row7.put(row7_HashRow);

						tos_count_tAdvancedHash_row7++;

						/**
						 * [tAdvancedHash_row7 main ] stop
						 */

						/**
						 * [tAdvancedHash_row7 process_data_begin ] start
						 */

						currentComponent = "tAdvancedHash_row7";

						/**
						 * [tAdvancedHash_row7 process_data_begin ] stop
						 */

						/**
						 * [tAdvancedHash_row7 process_data_end ] start
						 */

						currentComponent = "tAdvancedHash_row7";

						/**
						 * [tAdvancedHash_row7 process_data_end ] stop
						 */

						/**
						 * [tDBInput_5 process_data_end ] start
						 */

						currentComponent = "tDBInput_5";

						/**
						 * [tDBInput_5 process_data_end ] stop
						 */

						/**
						 * [tDBInput_5 end ] start
						 */

						currentComponent = "tDBInput_5";

					}
				} finally {
					if (rs_tDBInput_5 != null) {
						rs_tDBInput_5.close();
					}
					if (stmt_tDBInput_5 != null) {
						stmt_tDBInput_5.close();
					}
				}
				globalMap.put("tDBInput_5_NB_LINE", nb_line_tDBInput_5);

				ok_Hash.put("tDBInput_5", true);
				end_Hash.put("tDBInput_5", System.currentTimeMillis());

				/**
				 * [tDBInput_5 end ] stop
				 */

				/**
				 * [tAdvancedHash_row7 end ] start
				 */

				currentComponent = "tAdvancedHash_row7";

				tHash_Lookup_row7.endPut();

				if (execStat) {
					runStat.updateStat(resourceMap, iterateId, 2, 0, "row7");
				}

				ok_Hash.put("tAdvancedHash_row7", true);
				end_Hash.put("tAdvancedHash_row7", System.currentTimeMillis());

				/**
				 * [tAdvancedHash_row7 end ] stop
				 */

			} // end the resume

		} catch (java.lang.Exception e) {

			TalendException te = new TalendException(e, currentComponent, globalMap);

			throw te;
		} catch (java.lang.Error error) {

			runStat.stopThreadStat();

			throw error;
		} finally {

			try {

				/**
				 * [tDBInput_5 finally ] start
				 */

				currentComponent = "tDBInput_5";

				/**
				 * [tDBInput_5 finally ] stop
				 */

				/**
				 * [tAdvancedHash_row7 finally ] start
				 */

				currentComponent = "tAdvancedHash_row7";

				/**
				 * [tAdvancedHash_row7 finally ] stop
				 */

			} catch (java.lang.Exception e) {
				// ignore
			} catch (java.lang.Error error) {
				// ignore
			}
			resourceMap = null;
		}

		globalMap.put("tDBInput_5_SUBPROCESS_STATE", 1);
	}

	public static class row12Struct implements routines.system.IPersistableComparableLookupRow<row12Struct> {
		final static byte[] commonByteArrayLock_WIPO_PROJECTS_E1a_Marc_Userdoc_a_interm = new byte[0];
		static byte[] commonByteArray_WIPO_PROJECTS_E1a_Marc_Userdoc_a_interm = new byte[0];
		protected static final int DEFAULT_HASHCODE = 1;
		protected static final int PRIME = 31;
		protected int hashCode = DEFAULT_HASHCODE;
		public boolean hashCodeDirty = true;

		public String loopKey;

		public BigDecimal ROW_VERSION;

		public BigDecimal getROW_VERSION() {
			return this.ROW_VERSION;
		}

		public BigDecimal USER_ID;

		public BigDecimal getUSER_ID() {
			return this.USER_ID;
		}

		public String USER_NAME;

		public String getUSER_NAME() {
			return this.USER_NAME;
		}

		public String LOGIN;

		public String getLOGIN() {
			return this.LOGIN;
		}

		public String IND_ADMINISTRATOR;

		public String getIND_ADMINISTRATOR() {
			return this.IND_ADMINISTRATOR;
		}

		public String IND_EXAMINER;

		public String getIND_EXAMINER() {
			return this.IND_EXAMINER;
		}

		public String IND_INACTIVE;

		public String getIND_INACTIVE() {
			return this.IND_INACTIVE;
		}

		public String IND_EXTERNAL;

		public String getIND_EXTERNAL() {
			return this.IND_EXTERNAL;
		}

		public String OFFICE_DIVISION_CODE;

		public String getOFFICE_DIVISION_CODE() {
			return this.OFFICE_DIVISION_CODE;
		}

		public String OFFICE_DEPARTMENT_CODE;

		public String getOFFICE_DEPARTMENT_CODE() {
			return this.OFFICE_DEPARTMENT_CODE;
		}

		public String OFFICE_SECTION_CODE;

		public String getOFFICE_SECTION_CODE() {
			return this.OFFICE_SECTION_CODE;
		}

		public String INITIALS;

		public String getINITIALS() {
			return this.INITIALS;
		}

		public String FOOTER_DESCRIPTION;

		public String getFOOTER_DESCRIPTION() {
			return this.FOOTER_DESCRIPTION;
		}

		public BigDecimal QTY_WORK;

		public BigDecimal getQTY_WORK() {
			return this.QTY_WORK;
		}

		public String IND_TEST_USER;

		public String getIND_TEST_USER() {
			return this.IND_TEST_USER;
		}

		public String FORCE_DOC_ORI;

		public String getFORCE_DOC_ORI() {
			return this.FORCE_DOC_ORI;
		}

		public String LOGIN_PASSWORD;

		public String getLOGIN_PASSWORD() {
			return this.LOGIN_PASSWORD;
		}

		public java.util.Date LAST_LOGIN_DATE;

		public java.util.Date getLAST_LOGIN_DATE() {
			return this.LAST_LOGIN_DATE;
		}

		public String EMAIL;

		public String getEMAIL() {
			return this.EMAIL;
		}

		public String TELEPHONE;

		public String getTELEPHONE() {
			return this.TELEPHONE;
		}

		public String FULL_NAME;

		public String getFULL_NAME() {
			return this.FULL_NAME;
		}

		public String PERSONAL_ID;

		public String getPERSONAL_ID() {
			return this.PERSONAL_ID;
		}

		public java.util.Date CREATION_DATE;

		public java.util.Date getCREATION_DATE() {
			return this.CREATION_DATE;
		}

		public BigDecimal CREATION_USER_ID;

		public BigDecimal getCREATION_USER_ID() {
			return this.CREATION_USER_ID;
		}

		public java.util.Date LAST_UPDATE_DATE;

		public java.util.Date getLAST_UPDATE_DATE() {
			return this.LAST_UPDATE_DATE;
		}

		public BigDecimal LAST_UPDATE_USER_ID;

		public BigDecimal getLAST_UPDATE_USER_ID() {
			return this.LAST_UPDATE_USER_ID;
		}

		public String SIGNATURE_TYP;

		public String getSIGNATURE_TYP() {
			return this.SIGNATURE_TYP;
		}

		public Object SIGNATURE_DATA;

		public Object getSIGNATURE_DATA() {
			return this.SIGNATURE_DATA;
		}

		@Override
		public int hashCode() {
			if (this.hashCodeDirty) {
				final int prime = PRIME;
				int result = DEFAULT_HASHCODE;

				result = prime * result + ((this.LOGIN == null) ? 0 : this.LOGIN.hashCode());

				this.hashCode = result;
				this.hashCodeDirty = false;
			}
			return this.hashCode;
		}

		@Override
		public boolean equals(Object obj) {
			if (this == obj)
				return true;
			if (obj == null)
				return false;
			if (getClass() != obj.getClass())
				return false;
			final row12Struct other = (row12Struct) obj;

			if (this.LOGIN == null) {
				if (other.LOGIN != null)
					return false;

			} else if (!this.LOGIN.equals(other.LOGIN))

				return false;

			return true;
		}

		public void copyDataTo(row12Struct other) {

			other.ROW_VERSION = this.ROW_VERSION;
			other.USER_ID = this.USER_ID;
			other.USER_NAME = this.USER_NAME;
			other.LOGIN = this.LOGIN;
			other.IND_ADMINISTRATOR = this.IND_ADMINISTRATOR;
			other.IND_EXAMINER = this.IND_EXAMINER;
			other.IND_INACTIVE = this.IND_INACTIVE;
			other.IND_EXTERNAL = this.IND_EXTERNAL;
			other.OFFICE_DIVISION_CODE = this.OFFICE_DIVISION_CODE;
			other.OFFICE_DEPARTMENT_CODE = this.OFFICE_DEPARTMENT_CODE;
			other.OFFICE_SECTION_CODE = this.OFFICE_SECTION_CODE;
			other.INITIALS = this.INITIALS;
			other.FOOTER_DESCRIPTION = this.FOOTER_DESCRIPTION;
			other.QTY_WORK = this.QTY_WORK;
			other.IND_TEST_USER = this.IND_TEST_USER;
			other.FORCE_DOC_ORI = this.FORCE_DOC_ORI;
			other.LOGIN_PASSWORD = this.LOGIN_PASSWORD;
			other.LAST_LOGIN_DATE = this.LAST_LOGIN_DATE;
			other.EMAIL = this.EMAIL;
			other.TELEPHONE = this.TELEPHONE;
			other.FULL_NAME = this.FULL_NAME;
			other.PERSONAL_ID = this.PERSONAL_ID;
			other.CREATION_DATE = this.CREATION_DATE;
			other.CREATION_USER_ID = this.CREATION_USER_ID;
			other.LAST_UPDATE_DATE = this.LAST_UPDATE_DATE;
			other.LAST_UPDATE_USER_ID = this.LAST_UPDATE_USER_ID;
			other.SIGNATURE_TYP = this.SIGNATURE_TYP;
			other.SIGNATURE_DATA = this.SIGNATURE_DATA;

		}

		public void copyKeysDataTo(row12Struct other) {

			other.LOGIN = this.LOGIN;

		}

		private String readString(DataInputStream dis, ObjectInputStream ois) throws IOException {
			String strReturn = null;
			int length = 0;
			length = dis.readInt();
			if (length == -1) {
				strReturn = null;
			} else {
				byte[] byteArray = new byte[length];
				dis.read(byteArray);
				strReturn = new String(byteArray, utf8Charset);
			}
			return strReturn;
		}

		private void writeString(String str, DataOutputStream dos, ObjectOutputStream oos) throws IOException {
			if (str == null) {
				dos.writeInt(-1);
			} else {
				byte[] byteArray = str.getBytes(utf8Charset);
				dos.writeInt(byteArray.length);
				dos.write(byteArray);
			}
		}

		private String readString(ObjectInputStream dis) throws IOException {
			String strReturn = null;
			int length = 0;
			length = dis.readInt();
			if (length == -1) {
				strReturn = null;
			} else {
				if (length > commonByteArray_WIPO_PROJECTS_E1a_Marc_Userdoc_a_interm.length) {
					if (length < 1024 && commonByteArray_WIPO_PROJECTS_E1a_Marc_Userdoc_a_interm.length == 0) {
						commonByteArray_WIPO_PROJECTS_E1a_Marc_Userdoc_a_interm = new byte[1024];
					} else {
						commonByteArray_WIPO_PROJECTS_E1a_Marc_Userdoc_a_interm = new byte[2 * length];
					}
				}
				dis.readFully(commonByteArray_WIPO_PROJECTS_E1a_Marc_Userdoc_a_interm, 0, length);
				strReturn = new String(commonByteArray_WIPO_PROJECTS_E1a_Marc_Userdoc_a_interm, 0, length, utf8Charset);
			}
			return strReturn;
		}

		private void writeString(String str, ObjectOutputStream dos) throws IOException {
			if (str == null) {
				dos.writeInt(-1);
			} else {
				byte[] byteArray = str.getBytes(utf8Charset);
				dos.writeInt(byteArray.length);
				dos.write(byteArray);
			}
		}

		private java.util.Date readDate(DataInputStream dis, ObjectInputStream ois) throws IOException {
			java.util.Date dateReturn = null;
			int length = 0;
			length = dis.readByte();
			if (length == -1) {
				dateReturn = null;
			} else {
				dateReturn = new Date(dis.readLong());
			}
			return dateReturn;
		}

		private void writeDate(java.util.Date date1, DataOutputStream dos, ObjectOutputStream oos) throws IOException {
			if (date1 == null) {
				dos.writeByte(-1);
			} else {
				dos.writeByte(0);
				dos.writeLong(date1.getTime());
			}
		}

		public void readKeysData(ObjectInputStream dis) {

			synchronized (commonByteArrayLock_WIPO_PROJECTS_E1a_Marc_Userdoc_a_interm) {

				try {

					int length = 0;

					this.LOGIN = readString(dis);

				} catch (IOException e) {
					throw new RuntimeException(e);

				}

			}

		}

		public void writeKeysData(ObjectOutputStream dos) {
			try {

				// String

				writeString(this.LOGIN, dos);

			} catch (IOException e) {
				throw new RuntimeException(e);
			}

		}

		/**
		 * Fill Values data by reading ObjectInputStream.
		 */
		public void readValuesData(DataInputStream dis, ObjectInputStream ois) {
			try {

				int length = 0;

				this.ROW_VERSION = (BigDecimal) ois.readObject();

				this.USER_ID = (BigDecimal) ois.readObject();

				this.USER_NAME = readString(dis, ois);

				this.IND_ADMINISTRATOR = readString(dis, ois);

				this.IND_EXAMINER = readString(dis, ois);

				this.IND_INACTIVE = readString(dis, ois);

				this.IND_EXTERNAL = readString(dis, ois);

				this.OFFICE_DIVISION_CODE = readString(dis, ois);

				this.OFFICE_DEPARTMENT_CODE = readString(dis, ois);

				this.OFFICE_SECTION_CODE = readString(dis, ois);

				this.INITIALS = readString(dis, ois);

				this.FOOTER_DESCRIPTION = readString(dis, ois);

				this.QTY_WORK = (BigDecimal) ois.readObject();

				this.IND_TEST_USER = readString(dis, ois);

				this.FORCE_DOC_ORI = readString(dis, ois);

				this.LOGIN_PASSWORD = readString(dis, ois);

				this.LAST_LOGIN_DATE = readDate(dis, ois);

				this.EMAIL = readString(dis, ois);

				this.TELEPHONE = readString(dis, ois);

				this.FULL_NAME = readString(dis, ois);

				this.PERSONAL_ID = readString(dis, ois);

				this.CREATION_DATE = readDate(dis, ois);

				this.CREATION_USER_ID = (BigDecimal) ois.readObject();

				this.LAST_UPDATE_DATE = readDate(dis, ois);

				this.LAST_UPDATE_USER_ID = (BigDecimal) ois.readObject();

				this.SIGNATURE_TYP = readString(dis, ois);

				this.SIGNATURE_DATA = (Object) ois.readObject();

			} catch (IOException e) {
				throw new RuntimeException(e);

			} catch (ClassNotFoundException eCNFE) {
				throw new RuntimeException(eCNFE);

			}

		}

		/**
		 * Return a byte array which represents Values data.
		 */
		public void writeValuesData(DataOutputStream dos, ObjectOutputStream oos) {
			try {

				oos.writeObject(this.ROW_VERSION);

				oos.writeObject(this.USER_ID);

				writeString(this.USER_NAME, dos, oos);

				writeString(this.IND_ADMINISTRATOR, dos, oos);

				writeString(this.IND_EXAMINER, dos, oos);

				writeString(this.IND_INACTIVE, dos, oos);

				writeString(this.IND_EXTERNAL, dos, oos);

				writeString(this.OFFICE_DIVISION_CODE, dos, oos);

				writeString(this.OFFICE_DEPARTMENT_CODE, dos, oos);

				writeString(this.OFFICE_SECTION_CODE, dos, oos);

				writeString(this.INITIALS, dos, oos);

				writeString(this.FOOTER_DESCRIPTION, dos, oos);

				oos.writeObject(this.QTY_WORK);

				writeString(this.IND_TEST_USER, dos, oos);

				writeString(this.FORCE_DOC_ORI, dos, oos);

				writeString(this.LOGIN_PASSWORD, dos, oos);

				writeDate(this.LAST_LOGIN_DATE, dos, oos);

				writeString(this.EMAIL, dos, oos);

				writeString(this.TELEPHONE, dos, oos);

				writeString(this.FULL_NAME, dos, oos);

				writeString(this.PERSONAL_ID, dos, oos);

				writeDate(this.CREATION_DATE, dos, oos);

				oos.writeObject(this.CREATION_USER_ID);

				writeDate(this.LAST_UPDATE_DATE, dos, oos);

				oos.writeObject(this.LAST_UPDATE_USER_ID);

				writeString(this.SIGNATURE_TYP, dos, oos);

				oos.writeObject(this.SIGNATURE_DATA);

			} catch (IOException e) {
				throw new RuntimeException(e);
			}

		}

		public String toString() {

			StringBuilder sb = new StringBuilder();
			sb.append(super.toString());
			sb.append("[");
			sb.append("ROW_VERSION=" + String.valueOf(ROW_VERSION));
			sb.append(",USER_ID=" + String.valueOf(USER_ID));
			sb.append(",USER_NAME=" + USER_NAME);
			sb.append(",LOGIN=" + LOGIN);
			sb.append(",IND_ADMINISTRATOR=" + IND_ADMINISTRATOR);
			sb.append(",IND_EXAMINER=" + IND_EXAMINER);
			sb.append(",IND_INACTIVE=" + IND_INACTIVE);
			sb.append(",IND_EXTERNAL=" + IND_EXTERNAL);
			sb.append(",OFFICE_DIVISION_CODE=" + OFFICE_DIVISION_CODE);
			sb.append(",OFFICE_DEPARTMENT_CODE=" + OFFICE_DEPARTMENT_CODE);
			sb.append(",OFFICE_SECTION_CODE=" + OFFICE_SECTION_CODE);
			sb.append(",INITIALS=" + INITIALS);
			sb.append(",FOOTER_DESCRIPTION=" + FOOTER_DESCRIPTION);
			sb.append(",QTY_WORK=" + String.valueOf(QTY_WORK));
			sb.append(",IND_TEST_USER=" + IND_TEST_USER);
			sb.append(",FORCE_DOC_ORI=" + FORCE_DOC_ORI);
			sb.append(",LOGIN_PASSWORD=" + LOGIN_PASSWORD);
			sb.append(",LAST_LOGIN_DATE=" + String.valueOf(LAST_LOGIN_DATE));
			sb.append(",EMAIL=" + EMAIL);
			sb.append(",TELEPHONE=" + TELEPHONE);
			sb.append(",FULL_NAME=" + FULL_NAME);
			sb.append(",PERSONAL_ID=" + PERSONAL_ID);
			sb.append(",CREATION_DATE=" + String.valueOf(CREATION_DATE));
			sb.append(",CREATION_USER_ID=" + String.valueOf(CREATION_USER_ID));
			sb.append(",LAST_UPDATE_DATE=" + String.valueOf(LAST_UPDATE_DATE));
			sb.append(",LAST_UPDATE_USER_ID=" + String.valueOf(LAST_UPDATE_USER_ID));
			sb.append(",SIGNATURE_TYP=" + SIGNATURE_TYP);
			sb.append(",SIGNATURE_DATA=" + String.valueOf(SIGNATURE_DATA));
			sb.append("]");

			return sb.toString();
		}

		/**
		 * Compare keys
		 */
		public int compareTo(row12Struct other) {

			int returnValue = -1;

			returnValue = checkNullsAndCompare(this.LOGIN, other.LOGIN);
			if (returnValue != 0) {
				return returnValue;
			}

			return returnValue;
		}

		private int checkNullsAndCompare(Object object1, Object object2) {
			int returnValue = 0;
			if (object1 instanceof Comparable && object2 instanceof Comparable) {
				returnValue = ((Comparable) object1).compareTo(object2);
			} else if (object1 != null && object2 != null) {
				returnValue = compareStrings(object1.toString(), object2.toString());
			} else if (object1 == null && object2 != null) {
				returnValue = 1;
			} else if (object1 != null && object2 == null) {
				returnValue = -1;
			} else {
				returnValue = 0;
			}

			return returnValue;
		}

		private int compareStrings(String string1, String string2) {
			return string1.compareTo(string2);
		}

	}

	public void tDBInput_8Process(final java.util.Map<String, Object> globalMap) throws TalendException {
		globalMap.put("tDBInput_8_SUBPROCESS_STATE", 0);

		final boolean execStat = this.execStat;

		String iterateId = "";

		String currentComponent = "";
		java.util.Map<String, Object> resourceMap = new java.util.HashMap<String, Object>();

		try {
			// TDI-39566 avoid throwing an useless Exception
			boolean resumeIt = true;
			if (globalResumeTicket == false && resumeEntryMethodName != null) {
				String currentMethodName = new java.lang.Exception().getStackTrace()[0].getMethodName();
				resumeIt = resumeEntryMethodName.equals(currentMethodName);
			}
			if (resumeIt || globalResumeTicket) { // start the resume
				globalResumeTicket = true;

				row12Struct row12 = new row12Struct();

				/**
				 * [tAdvancedHash_row12 begin ] start
				 */

				ok_Hash.put("tAdvancedHash_row12", false);
				start_Hash.put("tAdvancedHash_row12", System.currentTimeMillis());

				currentComponent = "tAdvancedHash_row12";

				if (execStat) {
					runStat.updateStatOnConnection(resourceMap, iterateId, 0, 0, "row12");
				}

				int tos_count_tAdvancedHash_row12 = 0;

				// connection name:row12
				// source node:tDBInput_8 - inputs:(after_tDBInput_7) outputs:(row12,row12) |
				// target node:tAdvancedHash_row12 - inputs:(row12) outputs:()
				// linked node: tMap_2 - inputs:(row6,row7,row12) outputs:(action_ud)

				org.talend.designer.components.lookup.common.ICommonLookup.MATCHING_MODE matchingModeEnum_row12 = org.talend.designer.components.lookup.common.ICommonLookup.MATCHING_MODE.UNIQUE_MATCH;

				org.talend.designer.components.lookup.memory.AdvancedMemoryLookup<row12Struct> tHash_Lookup_row12 = org.talend.designer.components.lookup.memory.AdvancedMemoryLookup
						.<row12Struct>getLookup(matchingModeEnum_row12);

				globalMap.put("tHash_Lookup_row12", tHash_Lookup_row12);

				/**
				 * [tAdvancedHash_row12 begin ] stop
				 */

				/**
				 * [tDBInput_8 begin ] start
				 */

				ok_Hash.put("tDBInput_8", false);
				start_Hash.put("tDBInput_8", System.currentTimeMillis());

				currentComponent = "tDBInput_8";

				int tos_count_tDBInput_8 = 0;

				org.talend.designer.components.util.mssql.MSSqlGenerateTimestampUtil mssqlGTU_tDBInput_8 = org.talend.designer.components.util.mssql.MSSqlUtilFactory
						.getMSSqlGenerateTimestampUtil();

				java.util.List<String> talendToDBList_tDBInput_8 = new java.util.ArrayList();
				String[] talendToDBArray_tDBInput_8 = new String[] { "FLOAT", "NUMERIC", "NUMERIC IDENTITY", "DECIMAL",
						"DECIMAL IDENTITY", "REAL" };
				java.util.Collections.addAll(talendToDBList_tDBInput_8, talendToDBArray_tDBInput_8);
				int nb_line_tDBInput_8 = 0;
				java.sql.Connection conn_tDBInput_8 = null;
				conn_tDBInput_8 = (java.sql.Connection) globalMap.get("conn_tDBConnection_3");

				String dbschema_tDBInput_8 = (String) globalMap.get("dbschema_tDBConnection_3");

				java.sql.Statement stmt_tDBInput_8 = conn_tDBInput_8.createStatement();

				String dbquery_tDBInput_8 = "SELECT ADMIN.IP_USER.ROW_VERSION,\n		ADMIN.IP_USER.\"USER_ID\",\n		ADMIN.IP_USER.\"USER_NAME\",\n		ADMIN.IP_USER.LOGIN,\n		"
						+ "ADMIN.IP_USER.IND_ADMINISTRATOR,\n		ADMIN.IP_USER.IND_EXAMINER,\n		ADMIN.IP_USER.IND_INACTIVE,\n		ADMIN.IP_USER.IND_EXTERNA"
						+ "L,\n		ADMIN.IP_USER.OFFICE_DIVISION_CODE,\n		ADMIN.IP_USER.OFFICE_DEPARTMENT_CODE,\n		ADMIN.IP_USER.OFFICE_SECTION_CODE,\n		"
						+ "ADMIN.IP_USER.INITIALS,\n		ADMIN.IP_USER.FOOTER_DESCRIPTION,\n		ADMIN.IP_USER.QTY_WORK,\n		ADMIN.IP_USER.IND_TEST_USER,\n		A"
						+ "DMIN.IP_USER.FORCE_DOC_ORI,\n		ADMIN.IP_USER.LOGIN_PASSWORD,\n		ADMIN.IP_USER.LAST_LOGIN_DATE,\n		ADMIN.IP_USER.EMAIL,\n		AD"
						+ "MIN.IP_USER.TELEPHONE,\n		ADMIN.IP_USER.FULL_NAME,\n		ADMIN.IP_USER.PERSONAL_ID,\n		ADMIN.IP_USER.CREATION_DATE,\n		ADMIN.IP"
						+ "_USER.CREATION_USER_ID,\n		ADMIN.IP_USER.LAST_UPDATE_DATE,\n		ADMIN.IP_USER.LAST_UPDATE_USER_ID,\n		ADMIN.IP_USER.SIGNATURE"
						+ "_TYP,\n		ADMIN.IP_USER.SIGNATURE_DATA\nFROM	ADMIN.IP_USER";

				globalMap.put("tDBInput_8_QUERY", dbquery_tDBInput_8);
				java.sql.ResultSet rs_tDBInput_8 = null;

				try {
					rs_tDBInput_8 = stmt_tDBInput_8.executeQuery(dbquery_tDBInput_8);
					java.sql.ResultSetMetaData rsmd_tDBInput_8 = rs_tDBInput_8.getMetaData();
					int colQtyInRs_tDBInput_8 = rsmd_tDBInput_8.getColumnCount();

					String tmpContent_tDBInput_8 = null;

					while (rs_tDBInput_8.next()) {
						nb_line_tDBInput_8++;

						if (colQtyInRs_tDBInput_8 < 1) {
							row12.ROW_VERSION = null;
						} else {

							row12.ROW_VERSION = rs_tDBInput_8.getBigDecimal(1);
							if (rs_tDBInput_8.wasNull()) {
								throw new RuntimeException("Null value in non-Nullable column");
							}
						}
						if (colQtyInRs_tDBInput_8 < 2) {
							row12.USER_ID = null;
						} else {

							row12.USER_ID = rs_tDBInput_8.getBigDecimal(2);
							if (rs_tDBInput_8.wasNull()) {
								throw new RuntimeException("Null value in non-Nullable column");
							}
						}
						if (colQtyInRs_tDBInput_8 < 3) {
							row12.USER_NAME = null;
						} else {

							tmpContent_tDBInput_8 = rs_tDBInput_8.getString(3);
							if (tmpContent_tDBInput_8 != null) {
								if (talendToDBList_tDBInput_8.contains(
										rsmd_tDBInput_8.getColumnTypeName(3).toUpperCase(java.util.Locale.ENGLISH))) {
									row12.USER_NAME = FormatterUtils.formatUnwithE(tmpContent_tDBInput_8);
								} else {
									row12.USER_NAME = tmpContent_tDBInput_8;
								}
							} else {
								row12.USER_NAME = null;
							}
						}
						if (colQtyInRs_tDBInput_8 < 4) {
							row12.LOGIN = null;
						} else {

							tmpContent_tDBInput_8 = rs_tDBInput_8.getString(4);
							if (tmpContent_tDBInput_8 != null) {
								if (talendToDBList_tDBInput_8.contains(
										rsmd_tDBInput_8.getColumnTypeName(4).toUpperCase(java.util.Locale.ENGLISH))) {
									row12.LOGIN = FormatterUtils.formatUnwithE(tmpContent_tDBInput_8);
								} else {
									row12.LOGIN = tmpContent_tDBInput_8;
								}
							} else {
								row12.LOGIN = null;
							}
						}
						if (colQtyInRs_tDBInput_8 < 5) {
							row12.IND_ADMINISTRATOR = null;
						} else {

							tmpContent_tDBInput_8 = rs_tDBInput_8.getString(5);
							if (tmpContent_tDBInput_8 != null) {
								if (talendToDBList_tDBInput_8.contains(
										rsmd_tDBInput_8.getColumnTypeName(5).toUpperCase(java.util.Locale.ENGLISH))) {
									row12.IND_ADMINISTRATOR = FormatterUtils.formatUnwithE(tmpContent_tDBInput_8);
								} else {
									row12.IND_ADMINISTRATOR = tmpContent_tDBInput_8;
								}
							} else {
								row12.IND_ADMINISTRATOR = null;
							}
						}
						if (colQtyInRs_tDBInput_8 < 6) {
							row12.IND_EXAMINER = null;
						} else {

							tmpContent_tDBInput_8 = rs_tDBInput_8.getString(6);
							if (tmpContent_tDBInput_8 != null) {
								if (talendToDBList_tDBInput_8.contains(
										rsmd_tDBInput_8.getColumnTypeName(6).toUpperCase(java.util.Locale.ENGLISH))) {
									row12.IND_EXAMINER = FormatterUtils.formatUnwithE(tmpContent_tDBInput_8);
								} else {
									row12.IND_EXAMINER = tmpContent_tDBInput_8;
								}
							} else {
								row12.IND_EXAMINER = null;
							}
						}
						if (colQtyInRs_tDBInput_8 < 7) {
							row12.IND_INACTIVE = null;
						} else {

							tmpContent_tDBInput_8 = rs_tDBInput_8.getString(7);
							if (tmpContent_tDBInput_8 != null) {
								if (talendToDBList_tDBInput_8.contains(
										rsmd_tDBInput_8.getColumnTypeName(7).toUpperCase(java.util.Locale.ENGLISH))) {
									row12.IND_INACTIVE = FormatterUtils.formatUnwithE(tmpContent_tDBInput_8);
								} else {
									row12.IND_INACTIVE = tmpContent_tDBInput_8;
								}
							} else {
								row12.IND_INACTIVE = null;
							}
						}
						if (colQtyInRs_tDBInput_8 < 8) {
							row12.IND_EXTERNAL = null;
						} else {

							tmpContent_tDBInput_8 = rs_tDBInput_8.getString(8);
							if (tmpContent_tDBInput_8 != null) {
								if (talendToDBList_tDBInput_8.contains(
										rsmd_tDBInput_8.getColumnTypeName(8).toUpperCase(java.util.Locale.ENGLISH))) {
									row12.IND_EXTERNAL = FormatterUtils.formatUnwithE(tmpContent_tDBInput_8);
								} else {
									row12.IND_EXTERNAL = tmpContent_tDBInput_8;
								}
							} else {
								row12.IND_EXTERNAL = null;
							}
						}
						if (colQtyInRs_tDBInput_8 < 9) {
							row12.OFFICE_DIVISION_CODE = null;
						} else {

							tmpContent_tDBInput_8 = rs_tDBInput_8.getString(9);
							if (tmpContent_tDBInput_8 != null) {
								if (talendToDBList_tDBInput_8.contains(
										rsmd_tDBInput_8.getColumnTypeName(9).toUpperCase(java.util.Locale.ENGLISH))) {
									row12.OFFICE_DIVISION_CODE = FormatterUtils.formatUnwithE(tmpContent_tDBInput_8);
								} else {
									row12.OFFICE_DIVISION_CODE = tmpContent_tDBInput_8;
								}
							} else {
								row12.OFFICE_DIVISION_CODE = null;
							}
						}
						if (colQtyInRs_tDBInput_8 < 10) {
							row12.OFFICE_DEPARTMENT_CODE = null;
						} else {

							tmpContent_tDBInput_8 = rs_tDBInput_8.getString(10);
							if (tmpContent_tDBInput_8 != null) {
								if (talendToDBList_tDBInput_8.contains(
										rsmd_tDBInput_8.getColumnTypeName(10).toUpperCase(java.util.Locale.ENGLISH))) {
									row12.OFFICE_DEPARTMENT_CODE = FormatterUtils.formatUnwithE(tmpContent_tDBInput_8);
								} else {
									row12.OFFICE_DEPARTMENT_CODE = tmpContent_tDBInput_8;
								}
							} else {
								row12.OFFICE_DEPARTMENT_CODE = null;
							}
						}
						if (colQtyInRs_tDBInput_8 < 11) {
							row12.OFFICE_SECTION_CODE = null;
						} else {

							tmpContent_tDBInput_8 = rs_tDBInput_8.getString(11);
							if (tmpContent_tDBInput_8 != null) {
								if (talendToDBList_tDBInput_8.contains(
										rsmd_tDBInput_8.getColumnTypeName(11).toUpperCase(java.util.Locale.ENGLISH))) {
									row12.OFFICE_SECTION_CODE = FormatterUtils.formatUnwithE(tmpContent_tDBInput_8);
								} else {
									row12.OFFICE_SECTION_CODE = tmpContent_tDBInput_8;
								}
							} else {
								row12.OFFICE_SECTION_CODE = null;
							}
						}
						if (colQtyInRs_tDBInput_8 < 12) {
							row12.INITIALS = null;
						} else {

							tmpContent_tDBInput_8 = rs_tDBInput_8.getString(12);
							if (tmpContent_tDBInput_8 != null) {
								if (talendToDBList_tDBInput_8.contains(
										rsmd_tDBInput_8.getColumnTypeName(12).toUpperCase(java.util.Locale.ENGLISH))) {
									row12.INITIALS = FormatterUtils.formatUnwithE(tmpContent_tDBInput_8);
								} else {
									row12.INITIALS = tmpContent_tDBInput_8;
								}
							} else {
								row12.INITIALS = null;
							}
						}
						if (colQtyInRs_tDBInput_8 < 13) {
							row12.FOOTER_DESCRIPTION = null;
						} else {

							tmpContent_tDBInput_8 = rs_tDBInput_8.getString(13);
							if (tmpContent_tDBInput_8 != null) {
								if (talendToDBList_tDBInput_8.contains(
										rsmd_tDBInput_8.getColumnTypeName(13).toUpperCase(java.util.Locale.ENGLISH))) {
									row12.FOOTER_DESCRIPTION = FormatterUtils.formatUnwithE(tmpContent_tDBInput_8);
								} else {
									row12.FOOTER_DESCRIPTION = tmpContent_tDBInput_8;
								}
							} else {
								row12.FOOTER_DESCRIPTION = null;
							}
						}
						if (colQtyInRs_tDBInput_8 < 14) {
							row12.QTY_WORK = null;
						} else {

							row12.QTY_WORK = rs_tDBInput_8.getBigDecimal(14);
							if (rs_tDBInput_8.wasNull()) {
								row12.QTY_WORK = null;
							}
						}
						if (colQtyInRs_tDBInput_8 < 15) {
							row12.IND_TEST_USER = null;
						} else {

							tmpContent_tDBInput_8 = rs_tDBInput_8.getString(15);
							if (tmpContent_tDBInput_8 != null) {
								if (talendToDBList_tDBInput_8.contains(
										rsmd_tDBInput_8.getColumnTypeName(15).toUpperCase(java.util.Locale.ENGLISH))) {
									row12.IND_TEST_USER = FormatterUtils.formatUnwithE(tmpContent_tDBInput_8);
								} else {
									row12.IND_TEST_USER = tmpContent_tDBInput_8;
								}
							} else {
								row12.IND_TEST_USER = null;
							}
						}
						if (colQtyInRs_tDBInput_8 < 16) {
							row12.FORCE_DOC_ORI = null;
						} else {

							tmpContent_tDBInput_8 = rs_tDBInput_8.getString(16);
							if (tmpContent_tDBInput_8 != null) {
								if (talendToDBList_tDBInput_8.contains(
										rsmd_tDBInput_8.getColumnTypeName(16).toUpperCase(java.util.Locale.ENGLISH))) {
									row12.FORCE_DOC_ORI = FormatterUtils.formatUnwithE(tmpContent_tDBInput_8);
								} else {
									row12.FORCE_DOC_ORI = tmpContent_tDBInput_8;
								}
							} else {
								row12.FORCE_DOC_ORI = null;
							}
						}
						if (colQtyInRs_tDBInput_8 < 17) {
							row12.LOGIN_PASSWORD = null;
						} else {

							tmpContent_tDBInput_8 = rs_tDBInput_8.getString(17);
							if (tmpContent_tDBInput_8 != null) {
								if (talendToDBList_tDBInput_8.contains(
										rsmd_tDBInput_8.getColumnTypeName(17).toUpperCase(java.util.Locale.ENGLISH))) {
									row12.LOGIN_PASSWORD = FormatterUtils.formatUnwithE(tmpContent_tDBInput_8);
								} else {
									row12.LOGIN_PASSWORD = tmpContent_tDBInput_8;
								}
							} else {
								row12.LOGIN_PASSWORD = null;
							}
						}
						if (colQtyInRs_tDBInput_8 < 18) {
							row12.LAST_LOGIN_DATE = null;
						} else {

							row12.LAST_LOGIN_DATE = mssqlGTU_tDBInput_8.getDate(rsmd_tDBInput_8, rs_tDBInput_8, 18);

						}
						if (colQtyInRs_tDBInput_8 < 19) {
							row12.EMAIL = null;
						} else {

							tmpContent_tDBInput_8 = rs_tDBInput_8.getString(19);
							if (tmpContent_tDBInput_8 != null) {
								if (talendToDBList_tDBInput_8.contains(
										rsmd_tDBInput_8.getColumnTypeName(19).toUpperCase(java.util.Locale.ENGLISH))) {
									row12.EMAIL = FormatterUtils.formatUnwithE(tmpContent_tDBInput_8);
								} else {
									row12.EMAIL = tmpContent_tDBInput_8;
								}
							} else {
								row12.EMAIL = null;
							}
						}
						if (colQtyInRs_tDBInput_8 < 20) {
							row12.TELEPHONE = null;
						} else {

							tmpContent_tDBInput_8 = rs_tDBInput_8.getString(20);
							if (tmpContent_tDBInput_8 != null) {
								if (talendToDBList_tDBInput_8.contains(
										rsmd_tDBInput_8.getColumnTypeName(20).toUpperCase(java.util.Locale.ENGLISH))) {
									row12.TELEPHONE = FormatterUtils.formatUnwithE(tmpContent_tDBInput_8);
								} else {
									row12.TELEPHONE = tmpContent_tDBInput_8;
								}
							} else {
								row12.TELEPHONE = null;
							}
						}
						if (colQtyInRs_tDBInput_8 < 21) {
							row12.FULL_NAME = null;
						} else {

							tmpContent_tDBInput_8 = rs_tDBInput_8.getString(21);
							if (tmpContent_tDBInput_8 != null) {
								if (talendToDBList_tDBInput_8.contains(
										rsmd_tDBInput_8.getColumnTypeName(21).toUpperCase(java.util.Locale.ENGLISH))) {
									row12.FULL_NAME = FormatterUtils.formatUnwithE(tmpContent_tDBInput_8);
								} else {
									row12.FULL_NAME = tmpContent_tDBInput_8;
								}
							} else {
								row12.FULL_NAME = null;
							}
						}
						if (colQtyInRs_tDBInput_8 < 22) {
							row12.PERSONAL_ID = null;
						} else {

							tmpContent_tDBInput_8 = rs_tDBInput_8.getString(22);
							if (tmpContent_tDBInput_8 != null) {
								if (talendToDBList_tDBInput_8.contains(
										rsmd_tDBInput_8.getColumnTypeName(22).toUpperCase(java.util.Locale.ENGLISH))) {
									row12.PERSONAL_ID = FormatterUtils.formatUnwithE(tmpContent_tDBInput_8);
								} else {
									row12.PERSONAL_ID = tmpContent_tDBInput_8;
								}
							} else {
								row12.PERSONAL_ID = null;
							}
						}
						if (colQtyInRs_tDBInput_8 < 23) {
							row12.CREATION_DATE = null;
						} else {

							row12.CREATION_DATE = mssqlGTU_tDBInput_8.getDate(rsmd_tDBInput_8, rs_tDBInput_8, 23);

						}
						if (colQtyInRs_tDBInput_8 < 24) {
							row12.CREATION_USER_ID = null;
						} else {

							row12.CREATION_USER_ID = rs_tDBInput_8.getBigDecimal(24);
							if (rs_tDBInput_8.wasNull()) {
								row12.CREATION_USER_ID = null;
							}
						}
						if (colQtyInRs_tDBInput_8 < 25) {
							row12.LAST_UPDATE_DATE = null;
						} else {

							row12.LAST_UPDATE_DATE = mssqlGTU_tDBInput_8.getDate(rsmd_tDBInput_8, rs_tDBInput_8, 25);

						}
						if (colQtyInRs_tDBInput_8 < 26) {
							row12.LAST_UPDATE_USER_ID = null;
						} else {

							row12.LAST_UPDATE_USER_ID = rs_tDBInput_8.getBigDecimal(26);
							if (rs_tDBInput_8.wasNull()) {
								row12.LAST_UPDATE_USER_ID = null;
							}
						}
						if (colQtyInRs_tDBInput_8 < 27) {
							row12.SIGNATURE_TYP = null;
						} else {

							tmpContent_tDBInput_8 = rs_tDBInput_8.getString(27);
							if (tmpContent_tDBInput_8 != null) {
								if (talendToDBList_tDBInput_8.contains(
										rsmd_tDBInput_8.getColumnTypeName(27).toUpperCase(java.util.Locale.ENGLISH))) {
									row12.SIGNATURE_TYP = FormatterUtils.formatUnwithE(tmpContent_tDBInput_8);
								} else {
									row12.SIGNATURE_TYP = tmpContent_tDBInput_8;
								}
							} else {
								row12.SIGNATURE_TYP = null;
							}
						}
						if (colQtyInRs_tDBInput_8 < 28) {
							row12.SIGNATURE_DATA = null;
						} else {

							row12.SIGNATURE_DATA = rs_tDBInput_8.getObject(28);
							if (rs_tDBInput_8.wasNull()) {
								row12.SIGNATURE_DATA = null;
							}
						}

						/**
						 * [tDBInput_8 begin ] stop
						 */

						/**
						 * [tDBInput_8 main ] start
						 */

						currentComponent = "tDBInput_8";

						tos_count_tDBInput_8++;

						/**
						 * [tDBInput_8 main ] stop
						 */

						/**
						 * [tDBInput_8 process_data_begin ] start
						 */

						currentComponent = "tDBInput_8";

						/**
						 * [tDBInput_8 process_data_begin ] stop
						 */

						/**
						 * [tAdvancedHash_row12 main ] start
						 */

						currentComponent = "tAdvancedHash_row12";

						if (execStat) {
							runStat.updateStatOnConnection(iterateId, 1, 1

									, "row12"

							);
						}

						row12Struct row12_HashRow = new row12Struct();

						row12_HashRow.ROW_VERSION = row12.ROW_VERSION;

						row12_HashRow.USER_ID = row12.USER_ID;

						row12_HashRow.USER_NAME = row12.USER_NAME;

						row12_HashRow.LOGIN = row12.LOGIN;

						row12_HashRow.IND_ADMINISTRATOR = row12.IND_ADMINISTRATOR;

						row12_HashRow.IND_EXAMINER = row12.IND_EXAMINER;

						row12_HashRow.IND_INACTIVE = row12.IND_INACTIVE;

						row12_HashRow.IND_EXTERNAL = row12.IND_EXTERNAL;

						row12_HashRow.OFFICE_DIVISION_CODE = row12.OFFICE_DIVISION_CODE;

						row12_HashRow.OFFICE_DEPARTMENT_CODE = row12.OFFICE_DEPARTMENT_CODE;

						row12_HashRow.OFFICE_SECTION_CODE = row12.OFFICE_SECTION_CODE;

						row12_HashRow.INITIALS = row12.INITIALS;

						row12_HashRow.FOOTER_DESCRIPTION = row12.FOOTER_DESCRIPTION;

						row12_HashRow.QTY_WORK = row12.QTY_WORK;

						row12_HashRow.IND_TEST_USER = row12.IND_TEST_USER;

						row12_HashRow.FORCE_DOC_ORI = row12.FORCE_DOC_ORI;

						row12_HashRow.LOGIN_PASSWORD = row12.LOGIN_PASSWORD;

						row12_HashRow.LAST_LOGIN_DATE = row12.LAST_LOGIN_DATE;

						row12_HashRow.EMAIL = row12.EMAIL;

						row12_HashRow.TELEPHONE = row12.TELEPHONE;

						row12_HashRow.FULL_NAME = row12.FULL_NAME;

						row12_HashRow.PERSONAL_ID = row12.PERSONAL_ID;

						row12_HashRow.CREATION_DATE = row12.CREATION_DATE;

						row12_HashRow.CREATION_USER_ID = row12.CREATION_USER_ID;

						row12_HashRow.LAST_UPDATE_DATE = row12.LAST_UPDATE_DATE;

						row12_HashRow.LAST_UPDATE_USER_ID = row12.LAST_UPDATE_USER_ID;

						row12_HashRow.SIGNATURE_TYP = row12.SIGNATURE_TYP;

						row12_HashRow.SIGNATURE_DATA = row12.SIGNATURE_DATA;

						tHash_Lookup_row12.put(row12_HashRow);

						tos_count_tAdvancedHash_row12++;

						/**
						 * [tAdvancedHash_row12 main ] stop
						 */

						/**
						 * [tAdvancedHash_row12 process_data_begin ] start
						 */

						currentComponent = "tAdvancedHash_row12";

						/**
						 * [tAdvancedHash_row12 process_data_begin ] stop
						 */

						/**
						 * [tAdvancedHash_row12 process_data_end ] start
						 */

						currentComponent = "tAdvancedHash_row12";

						/**
						 * [tAdvancedHash_row12 process_data_end ] stop
						 */

						/**
						 * [tDBInput_8 process_data_end ] start
						 */

						currentComponent = "tDBInput_8";

						/**
						 * [tDBInput_8 process_data_end ] stop
						 */

						/**
						 * [tDBInput_8 end ] start
						 */

						currentComponent = "tDBInput_8";

					}
				} finally {
					if (rs_tDBInput_8 != null) {
						rs_tDBInput_8.close();
					}
					if (stmt_tDBInput_8 != null) {
						stmt_tDBInput_8.close();
					}
				}
				globalMap.put("tDBInput_8_NB_LINE", nb_line_tDBInput_8);

				ok_Hash.put("tDBInput_8", true);
				end_Hash.put("tDBInput_8", System.currentTimeMillis());

				/**
				 * [tDBInput_8 end ] stop
				 */

				/**
				 * [tAdvancedHash_row12 end ] start
				 */

				currentComponent = "tAdvancedHash_row12";

				tHash_Lookup_row12.endPut();

				if (execStat) {
					runStat.updateStat(resourceMap, iterateId, 2, 0, "row12");
				}

				ok_Hash.put("tAdvancedHash_row12", true);
				end_Hash.put("tAdvancedHash_row12", System.currentTimeMillis());

				/**
				 * [tAdvancedHash_row12 end ] stop
				 */

			} // end the resume

		} catch (java.lang.Exception e) {

			TalendException te = new TalendException(e, currentComponent, globalMap);

			throw te;
		} catch (java.lang.Error error) {

			runStat.stopThreadStat();

			throw error;
		} finally {

			try {

				/**
				 * [tDBInput_8 finally ] start
				 */

				currentComponent = "tDBInput_8";

				/**
				 * [tDBInput_8 finally ] stop
				 */

				/**
				 * [tAdvancedHash_row12 finally ] start
				 */

				currentComponent = "tAdvancedHash_row12";

				/**
				 * [tAdvancedHash_row12 finally ] stop
				 */

			} catch (java.lang.Exception e) {
				// ignore
			} catch (java.lang.Error error) {
				// ignore
			}
			resourceMap = null;
		}

		globalMap.put("tDBInput_8_SUBPROCESS_STATE", 1);
	}

	public static class row14Struct implements routines.system.IPersistableComparableLookupRow<row14Struct> {
		final static byte[] commonByteArrayLock_WIPO_PROJECTS_E1a_Marc_Userdoc_a_interm = new byte[0];
		static byte[] commonByteArray_WIPO_PROJECTS_E1a_Marc_Userdoc_a_interm = new byte[0];
		protected static final int DEFAULT_HASHCODE = 1;
		protected static final int PRIME = 31;
		protected int hashCode = DEFAULT_HASHCODE;
		public boolean hashCodeDirty = true;

		public String loopKey;

		public String USERDOC_SEQ;

		public String getUSERDOC_SEQ() {
			return this.USERDOC_SEQ;
		}

		public BigDecimal USERDOC_SERIES;

		public BigDecimal getUSERDOC_SERIES() {
			return this.USERDOC_SERIES;
		}

		public BigDecimal USERDOC_NBR;

		public BigDecimal getUSERDOC_NBR() {
			return this.USERDOC_NBR;
		}

		public String DOC_ORI;

		public String getDOC_ORI() {
			return this.DOC_ORI;
		}

		public BigDecimal DOC_SERIES;

		public BigDecimal getDOC_SERIES() {
			return this.DOC_SERIES;
		}

		public BigDecimal DOC_NBR;

		public BigDecimal getDOC_NBR() {
			return this.DOC_NBR;
		}

		public BigDecimal IND_IMPORT;

		public BigDecimal getIND_IMPORT() {
			return this.IND_IMPORT;
		}

		public String USERDOC_TYPE;

		public String getUSERDOC_TYPE() {
			return this.USERDOC_TYPE;
		}

		public BigDecimal LAW_CODE;

		public BigDecimal getLAW_CODE() {
			return this.LAW_CODE;
		}

		public java.util.Date FILING_DATE;

		public java.util.Date getFILING_DATE() {
			return this.FILING_DATE;
		}

		public java.util.Date RECEPTION_DATE;

		public java.util.Date getRECEPTION_DATE() {
			return this.RECEPTION_DATE;
		}

		public String NOTES;

		public String getNOTES() {
			return this.NOTES;
		}

		public String APPLICANT_NOTES;

		public String getAPPLICANT_NOTES() {
			return this.APPLICANT_NOTES;
		}

		public String PERSON_NAME;

		public String getPERSON_NAME() {
			return this.PERSON_NAME;
		}

		public String PERSON_NAME_LANG2;

		public String getPERSON_NAME_LANG2() {
			return this.PERSON_NAME_LANG2;
		}

		public String NATIONALITY_COUNTRY_CODE;

		public String getNATIONALITY_COUNTRY_CODE() {
			return this.NATIONALITY_COUNTRY_CODE;
		}

		public BigDecimal IND_COMPANY;

		public BigDecimal getIND_COMPANY() {
			return this.IND_COMPANY;
		}

		public String LEGAL_NATURE;

		public String getLEGAL_NATURE() {
			return this.LEGAL_NATURE;
		}

		public String LEGAL_NATURE_LANG2;

		public String getLEGAL_NATURE_LANG2() {
			return this.LEGAL_NATURE_LANG2;
		}

		public String LEGAL_ID_TYPE;

		public String getLEGAL_ID_TYPE() {
			return this.LEGAL_ID_TYPE;
		}

		public BigDecimal LEGAL_ID_NBR;

		public BigDecimal getLEGAL_ID_NBR() {
			return this.LEGAL_ID_NBR;
		}

		public String INDIVIDUAL_ID_TYPE;

		public String getINDIVIDUAL_ID_TYPE() {
			return this.INDIVIDUAL_ID_TYPE;
		}

		public BigDecimal INDIVIDUAL_ID_NBR;

		public BigDecimal getINDIVIDUAL_ID_NBR() {
			return this.INDIVIDUAL_ID_NBR;
		}

		public String RESIDENCE_COUNTRY_CODE;

		public String getRESIDENCE_COUNTRY_CODE() {
			return this.RESIDENCE_COUNTRY_CODE;
		}

		public String STATE_NAME;

		public String getSTATE_NAME() {
			return this.STATE_NAME;
		}

		public String STATE_CODE;

		public String getSTATE_CODE() {
			return this.STATE_CODE;
		}

		public String CITY_NAME;

		public String getCITY_NAME() {
			return this.CITY_NAME;
		}

		public String CITY_CODE;

		public String getCITY_CODE() {
			return this.CITY_CODE;
		}

		public String ADDRESS_ZONE;

		public String getADDRESS_ZONE() {
			return this.ADDRESS_ZONE;
		}

		public String ADDRESS_STREET;

		public String getADDRESS_STREET() {
			return this.ADDRESS_STREET;
		}

		public String ADDRESS_STREET_LANG2;

		public String getADDRESS_STREET_LANG2() {
			return this.ADDRESS_STREET_LANG2;
		}

		public String ZIP_CODE;

		public String getZIP_CODE() {
			return this.ZIP_CODE;
		}

		public String EMAIL;

		public String getEMAIL() {
			return this.EMAIL;
		}

		public String TELEPHONE;

		public String getTELEPHONE() {
			return this.TELEPHONE;
		}

		public String PERSON_GROUP_CODE;

		public String getPERSON_GROUP_CODE() {
			return this.PERSON_GROUP_CODE;
		}

		public BigDecimal CAPTURE_USER_ID;

		public BigDecimal getCAPTURE_USER_ID() {
			return this.CAPTURE_USER_ID;
		}

		public java.util.Date CAPTURE_DATE;

		public java.util.Date getCAPTURE_DATE() {
			return this.CAPTURE_DATE;
		}

		@Override
		public int hashCode() {
			if (this.hashCodeDirty) {
				final int prime = PRIME;
				int result = DEFAULT_HASHCODE;

				result = prime * result
						+ ((this.DOC_NBR == null) ? 0 : new Double(this.DOC_NBR.doubleValue()).hashCode());

				this.hashCode = result;
				this.hashCodeDirty = false;
			}
			return this.hashCode;
		}

		@Override
		public boolean equals(Object obj) {
			if (this == obj)
				return true;
			if (obj == null)
				return false;
			if (getClass() != obj.getClass())
				return false;
			final row14Struct other = (row14Struct) obj;

			if (this.DOC_NBR == null) {
				if (other.DOC_NBR != null)
					return false;

			} else if ((other.DOC_NBR == null) || (this.DOC_NBR.compareTo(other.DOC_NBR) != 0))

				return false;

			return true;
		}

		public void copyDataTo(row14Struct other) {

			other.USERDOC_SEQ = this.USERDOC_SEQ;
			other.USERDOC_SERIES = this.USERDOC_SERIES;
			other.USERDOC_NBR = this.USERDOC_NBR;
			other.DOC_ORI = this.DOC_ORI;
			other.DOC_SERIES = this.DOC_SERIES;
			other.DOC_NBR = this.DOC_NBR;
			other.IND_IMPORT = this.IND_IMPORT;
			other.USERDOC_TYPE = this.USERDOC_TYPE;
			other.LAW_CODE = this.LAW_CODE;
			other.FILING_DATE = this.FILING_DATE;
			other.RECEPTION_DATE = this.RECEPTION_DATE;
			other.NOTES = this.NOTES;
			other.APPLICANT_NOTES = this.APPLICANT_NOTES;
			other.PERSON_NAME = this.PERSON_NAME;
			other.PERSON_NAME_LANG2 = this.PERSON_NAME_LANG2;
			other.NATIONALITY_COUNTRY_CODE = this.NATIONALITY_COUNTRY_CODE;
			other.IND_COMPANY = this.IND_COMPANY;
			other.LEGAL_NATURE = this.LEGAL_NATURE;
			other.LEGAL_NATURE_LANG2 = this.LEGAL_NATURE_LANG2;
			other.LEGAL_ID_TYPE = this.LEGAL_ID_TYPE;
			other.LEGAL_ID_NBR = this.LEGAL_ID_NBR;
			other.INDIVIDUAL_ID_TYPE = this.INDIVIDUAL_ID_TYPE;
			other.INDIVIDUAL_ID_NBR = this.INDIVIDUAL_ID_NBR;
			other.RESIDENCE_COUNTRY_CODE = this.RESIDENCE_COUNTRY_CODE;
			other.STATE_NAME = this.STATE_NAME;
			other.STATE_CODE = this.STATE_CODE;
			other.CITY_NAME = this.CITY_NAME;
			other.CITY_CODE = this.CITY_CODE;
			other.ADDRESS_ZONE = this.ADDRESS_ZONE;
			other.ADDRESS_STREET = this.ADDRESS_STREET;
			other.ADDRESS_STREET_LANG2 = this.ADDRESS_STREET_LANG2;
			other.ZIP_CODE = this.ZIP_CODE;
			other.EMAIL = this.EMAIL;
			other.TELEPHONE = this.TELEPHONE;
			other.PERSON_GROUP_CODE = this.PERSON_GROUP_CODE;
			other.CAPTURE_USER_ID = this.CAPTURE_USER_ID;
			other.CAPTURE_DATE = this.CAPTURE_DATE;

		}

		public void copyKeysDataTo(row14Struct other) {

			other.DOC_NBR = this.DOC_NBR;

		}

		private String readString(DataInputStream dis, ObjectInputStream ois) throws IOException {
			String strReturn = null;
			int length = 0;
			length = dis.readInt();
			if (length == -1) {
				strReturn = null;
			} else {
				byte[] byteArray = new byte[length];
				dis.read(byteArray);
				strReturn = new String(byteArray, utf8Charset);
			}
			return strReturn;
		}

		private void writeString(String str, DataOutputStream dos, ObjectOutputStream oos) throws IOException {
			if (str == null) {
				dos.writeInt(-1);
			} else {
				byte[] byteArray = str.getBytes(utf8Charset);
				dos.writeInt(byteArray.length);
				dos.write(byteArray);
			}
		}

		private java.util.Date readDate(DataInputStream dis, ObjectInputStream ois) throws IOException {
			java.util.Date dateReturn = null;
			int length = 0;
			length = dis.readByte();
			if (length == -1) {
				dateReturn = null;
			} else {
				dateReturn = new Date(dis.readLong());
			}
			return dateReturn;
		}

		private void writeDate(java.util.Date date1, DataOutputStream dos, ObjectOutputStream oos) throws IOException {
			if (date1 == null) {
				dos.writeByte(-1);
			} else {
				dos.writeByte(0);
				dos.writeLong(date1.getTime());
			}
		}

		public void readKeysData(ObjectInputStream dis) {

			synchronized (commonByteArrayLock_WIPO_PROJECTS_E1a_Marc_Userdoc_a_interm) {

				try {

					int length = 0;

					this.DOC_NBR = (BigDecimal) dis.readObject();

				} catch (IOException e) {
					throw new RuntimeException(e);

				} catch (ClassNotFoundException eCNFE) {
					throw new RuntimeException(eCNFE);

				}

			}

		}

		public void writeKeysData(ObjectOutputStream dos) {
			try {

				// BigDecimal

				dos.writeObject(this.DOC_NBR);

			} catch (IOException e) {
				throw new RuntimeException(e);
			}

		}

		/**
		 * Fill Values data by reading ObjectInputStream.
		 */
		public void readValuesData(DataInputStream dis, ObjectInputStream ois) {
			try {

				int length = 0;

				this.USERDOC_SEQ = readString(dis, ois);

				this.USERDOC_SERIES = (BigDecimal) ois.readObject();

				this.USERDOC_NBR = (BigDecimal) ois.readObject();

				this.DOC_ORI = readString(dis, ois);

				this.DOC_SERIES = (BigDecimal) ois.readObject();

				this.IND_IMPORT = (BigDecimal) ois.readObject();

				this.USERDOC_TYPE = readString(dis, ois);

				this.LAW_CODE = (BigDecimal) ois.readObject();

				this.FILING_DATE = readDate(dis, ois);

				this.RECEPTION_DATE = readDate(dis, ois);

				this.NOTES = readString(dis, ois);

				this.APPLICANT_NOTES = readString(dis, ois);

				this.PERSON_NAME = readString(dis, ois);

				this.PERSON_NAME_LANG2 = readString(dis, ois);

				this.NATIONALITY_COUNTRY_CODE = readString(dis, ois);

				this.IND_COMPANY = (BigDecimal) ois.readObject();

				this.LEGAL_NATURE = readString(dis, ois);

				this.LEGAL_NATURE_LANG2 = readString(dis, ois);

				this.LEGAL_ID_TYPE = readString(dis, ois);

				this.LEGAL_ID_NBR = (BigDecimal) ois.readObject();

				this.INDIVIDUAL_ID_TYPE = readString(dis, ois);

				this.INDIVIDUAL_ID_NBR = (BigDecimal) ois.readObject();

				this.RESIDENCE_COUNTRY_CODE = readString(dis, ois);

				this.STATE_NAME = readString(dis, ois);

				this.STATE_CODE = readString(dis, ois);

				this.CITY_NAME = readString(dis, ois);

				this.CITY_CODE = readString(dis, ois);

				this.ADDRESS_ZONE = readString(dis, ois);

				this.ADDRESS_STREET = readString(dis, ois);

				this.ADDRESS_STREET_LANG2 = readString(dis, ois);

				this.ZIP_CODE = readString(dis, ois);

				this.EMAIL = readString(dis, ois);

				this.TELEPHONE = readString(dis, ois);

				this.PERSON_GROUP_CODE = readString(dis, ois);

				this.CAPTURE_USER_ID = (BigDecimal) ois.readObject();

				this.CAPTURE_DATE = readDate(dis, ois);

			} catch (IOException e) {
				throw new RuntimeException(e);

			} catch (ClassNotFoundException eCNFE) {
				throw new RuntimeException(eCNFE);

			}

		}

		/**
		 * Return a byte array which represents Values data.
		 */
		public void writeValuesData(DataOutputStream dos, ObjectOutputStream oos) {
			try {

				writeString(this.USERDOC_SEQ, dos, oos);

				oos.writeObject(this.USERDOC_SERIES);

				oos.writeObject(this.USERDOC_NBR);

				writeString(this.DOC_ORI, dos, oos);

				oos.writeObject(this.DOC_SERIES);

				oos.writeObject(this.IND_IMPORT);

				writeString(this.USERDOC_TYPE, dos, oos);

				oos.writeObject(this.LAW_CODE);

				writeDate(this.FILING_DATE, dos, oos);

				writeDate(this.RECEPTION_DATE, dos, oos);

				writeString(this.NOTES, dos, oos);

				writeString(this.APPLICANT_NOTES, dos, oos);

				writeString(this.PERSON_NAME, dos, oos);

				writeString(this.PERSON_NAME_LANG2, dos, oos);

				writeString(this.NATIONALITY_COUNTRY_CODE, dos, oos);

				oos.writeObject(this.IND_COMPANY);

				writeString(this.LEGAL_NATURE, dos, oos);

				writeString(this.LEGAL_NATURE_LANG2, dos, oos);

				writeString(this.LEGAL_ID_TYPE, dos, oos);

				oos.writeObject(this.LEGAL_ID_NBR);

				writeString(this.INDIVIDUAL_ID_TYPE, dos, oos);

				oos.writeObject(this.INDIVIDUAL_ID_NBR);

				writeString(this.RESIDENCE_COUNTRY_CODE, dos, oos);

				writeString(this.STATE_NAME, dos, oos);

				writeString(this.STATE_CODE, dos, oos);

				writeString(this.CITY_NAME, dos, oos);

				writeString(this.CITY_CODE, dos, oos);

				writeString(this.ADDRESS_ZONE, dos, oos);

				writeString(this.ADDRESS_STREET, dos, oos);

				writeString(this.ADDRESS_STREET_LANG2, dos, oos);

				writeString(this.ZIP_CODE, dos, oos);

				writeString(this.EMAIL, dos, oos);

				writeString(this.TELEPHONE, dos, oos);

				writeString(this.PERSON_GROUP_CODE, dos, oos);

				oos.writeObject(this.CAPTURE_USER_ID);

				writeDate(this.CAPTURE_DATE, dos, oos);

			} catch (IOException e) {
				throw new RuntimeException(e);
			}

		}

		public String toString() {

			StringBuilder sb = new StringBuilder();
			sb.append(super.toString());
			sb.append("[");
			sb.append("USERDOC_SEQ=" + USERDOC_SEQ);
			sb.append(",USERDOC_SERIES=" + String.valueOf(USERDOC_SERIES));
			sb.append(",USERDOC_NBR=" + String.valueOf(USERDOC_NBR));
			sb.append(",DOC_ORI=" + DOC_ORI);
			sb.append(",DOC_SERIES=" + String.valueOf(DOC_SERIES));
			sb.append(",DOC_NBR=" + String.valueOf(DOC_NBR));
			sb.append(",IND_IMPORT=" + String.valueOf(IND_IMPORT));
			sb.append(",USERDOC_TYPE=" + USERDOC_TYPE);
			sb.append(",LAW_CODE=" + String.valueOf(LAW_CODE));
			sb.append(",FILING_DATE=" + String.valueOf(FILING_DATE));
			sb.append(",RECEPTION_DATE=" + String.valueOf(RECEPTION_DATE));
			sb.append(",NOTES=" + NOTES);
			sb.append(",APPLICANT_NOTES=" + APPLICANT_NOTES);
			sb.append(",PERSON_NAME=" + PERSON_NAME);
			sb.append(",PERSON_NAME_LANG2=" + PERSON_NAME_LANG2);
			sb.append(",NATIONALITY_COUNTRY_CODE=" + NATIONALITY_COUNTRY_CODE);
			sb.append(",IND_COMPANY=" + String.valueOf(IND_COMPANY));
			sb.append(",LEGAL_NATURE=" + LEGAL_NATURE);
			sb.append(",LEGAL_NATURE_LANG2=" + LEGAL_NATURE_LANG2);
			sb.append(",LEGAL_ID_TYPE=" + LEGAL_ID_TYPE);
			sb.append(",LEGAL_ID_NBR=" + String.valueOf(LEGAL_ID_NBR));
			sb.append(",INDIVIDUAL_ID_TYPE=" + INDIVIDUAL_ID_TYPE);
			sb.append(",INDIVIDUAL_ID_NBR=" + String.valueOf(INDIVIDUAL_ID_NBR));
			sb.append(",RESIDENCE_COUNTRY_CODE=" + RESIDENCE_COUNTRY_CODE);
			sb.append(",STATE_NAME=" + STATE_NAME);
			sb.append(",STATE_CODE=" + STATE_CODE);
			sb.append(",CITY_NAME=" + CITY_NAME);
			sb.append(",CITY_CODE=" + CITY_CODE);
			sb.append(",ADDRESS_ZONE=" + ADDRESS_ZONE);
			sb.append(",ADDRESS_STREET=" + ADDRESS_STREET);
			sb.append(",ADDRESS_STREET_LANG2=" + ADDRESS_STREET_LANG2);
			sb.append(",ZIP_CODE=" + ZIP_CODE);
			sb.append(",EMAIL=" + EMAIL);
			sb.append(",TELEPHONE=" + TELEPHONE);
			sb.append(",PERSON_GROUP_CODE=" + PERSON_GROUP_CODE);
			sb.append(",CAPTURE_USER_ID=" + String.valueOf(CAPTURE_USER_ID));
			sb.append(",CAPTURE_DATE=" + String.valueOf(CAPTURE_DATE));
			sb.append("]");

			return sb.toString();
		}

		/**
		 * Compare keys
		 */
		public int compareTo(row14Struct other) {

			int returnValue = -1;

			returnValue = checkNullsAndCompare(this.DOC_NBR, other.DOC_NBR);
			if (returnValue != 0) {
				return returnValue;
			}

			return returnValue;
		}

		private int checkNullsAndCompare(Object object1, Object object2) {
			int returnValue = 0;
			if (object1 instanceof Comparable && object2 instanceof Comparable) {
				returnValue = ((Comparable) object1).compareTo(object2);
			} else if (object1 != null && object2 != null) {
				returnValue = compareStrings(object1.toString(), object2.toString());
			} else if (object1 == null && object2 != null) {
				returnValue = 1;
			} else if (object1 != null && object2 == null) {
				returnValue = -1;
			} else {
				returnValue = 0;
			}

			return returnValue;
		}

		private int compareStrings(String string1, String string2) {
			return string1.compareTo(string2);
		}

	}

	public void tDBInput_9Process(final java.util.Map<String, Object> globalMap) throws TalendException {
		globalMap.put("tDBInput_9_SUBPROCESS_STATE", 0);

		final boolean execStat = this.execStat;

		String iterateId = "";

		String currentComponent = "";
		java.util.Map<String, Object> resourceMap = new java.util.HashMap<String, Object>();

		try {
			// TDI-39566 avoid throwing an useless Exception
			boolean resumeIt = true;
			if (globalResumeTicket == false && resumeEntryMethodName != null) {
				String currentMethodName = new java.lang.Exception().getStackTrace()[0].getMethodName();
				resumeIt = resumeEntryMethodName.equals(currentMethodName);
			}
			if (resumeIt || globalResumeTicket) { // start the resume
				globalResumeTicket = true;

				row14Struct row14 = new row14Struct();

				/**
				 * [tAdvancedHash_row14 begin ] start
				 */

				ok_Hash.put("tAdvancedHash_row14", false);
				start_Hash.put("tAdvancedHash_row14", System.currentTimeMillis());

				currentComponent = "tAdvancedHash_row14";

				if (execStat) {
					runStat.updateStatOnConnection(resourceMap, iterateId, 0, 0, "row14");
				}

				int tos_count_tAdvancedHash_row14 = 0;

				// connection name:row14
				// source node:tDBInput_9 - inputs:(after_tDBInput_11) outputs:(row14,row14) |
				// target node:tAdvancedHash_row14 - inputs:(row14) outputs:()
				// linked node: tMap_4 - inputs:(row3,row14) outputs:(copyOfaction_ud)

				org.talend.designer.components.lookup.common.ICommonLookup.MATCHING_MODE matchingModeEnum_row14 = org.talend.designer.components.lookup.common.ICommonLookup.MATCHING_MODE.ALL_MATCHES;

				org.talend.designer.components.lookup.memory.AdvancedMemoryLookup<row14Struct> tHash_Lookup_row14 = org.talend.designer.components.lookup.memory.AdvancedMemoryLookup
						.<row14Struct>getLookup(matchingModeEnum_row14);

				globalMap.put("tHash_Lookup_row14", tHash_Lookup_row14);

				/**
				 * [tAdvancedHash_row14 begin ] stop
				 */

				/**
				 * [tDBInput_9 begin ] start
				 */

				ok_Hash.put("tDBInput_9", false);
				start_Hash.put("tDBInput_9", System.currentTimeMillis());

				currentComponent = "tDBInput_9";

				int tos_count_tDBInput_9 = 0;

				org.talend.designer.components.util.mssql.MSSqlGenerateTimestampUtil mssqlGTU_tDBInput_9 = org.talend.designer.components.util.mssql.MSSqlUtilFactory
						.getMSSqlGenerateTimestampUtil();

				java.util.List<String> talendToDBList_tDBInput_9 = new java.util.ArrayList();
				String[] talendToDBArray_tDBInput_9 = new String[] { "FLOAT", "NUMERIC", "NUMERIC IDENTITY", "DECIMAL",
						"DECIMAL IDENTITY", "REAL" };
				java.util.Collections.addAll(talendToDBList_tDBInput_9, talendToDBArray_tDBInput_9);
				int nb_line_tDBInput_9 = 0;
				java.sql.Connection conn_tDBInput_9 = null;
				conn_tDBInput_9 = (java.sql.Connection) globalMap.get("conn_tDBConnection_1");

				String dbschema_tDBInput_9 = (String) globalMap.get("dbschema_tDBConnection_1");

				java.sql.Statement stmt_tDBInput_9 = conn_tDBInput_9.createStatement();

				String dbquery_tDBInput_9 = "SELECT dbo.VW_IMPORT_USERDOC.USERDOC_SEQ,\n		dbo.VW_IMPORT_USERDOC.USERDOC_SERIES,\n		dbo.VW_IMPORT_USERDOC.USERDOC_NBR,\n"
						+ "		dbo.VW_IMPORT_USERDOC.DOC_ORI,\n		dbo.VW_IMPORT_USERDOC.DOC_SERIES,\n		dbo.VW_IMPORT_USERDOC.DOC_NBR,\n		dbo.VW_IMPORT_US"
						+ "ERDOC.IND_IMPORT,\n		dbo.VW_IMPORT_USERDOC.USERDOC_TYPE,\n		dbo.VW_IMPORT_USERDOC.LAW_CODE,\n		dbo.VW_IMPORT_USERDOC.FILING"
						+ "_DATE,\n		dbo.VW_IMPORT_USERDOC.RECEPTION_DATE,\n		dbo.VW_IMPORT_USERDOC.NOTES,\n		dbo.VW_IMPORT_USERDOC.APPLICANT_NOTES,\n	"
						+ "	dbo.VW_IMPORT_USERDOC.PERSON_NAME,\n		dbo.VW_IMPORT_USERDOC.PERSON_NAME_LANG2,\n		dbo.VW_IMPORT_USERDOC.NATIONALITY_COUNT"
						+ "RY_CODE,\n		dbo.VW_IMPORT_USERDOC.IND_COMPANY,\n		dbo.VW_IMPORT_USERDOC.LEGAL_NATURE,\n		dbo.VW_IMPORT_USERDOC.LEGAL_NATURE"
						+ "_LANG2,\n		dbo.VW_IMPORT_USERDOC.LEGAL_ID_TYPE,\n		dbo.VW_IMPORT_USERDOC.LEGAL_ID_NBR,\n		dbo.VW_IMPORT_USERDOC.INDIVIDUAL_"
						+ "ID_TYPE,\n		dbo.VW_IMPORT_USERDOC.INDIVIDUAL_ID_NBR,\n		dbo.VW_IMPORT_USERDOC.RESIDENCE_COUNTRY_CODE,\n		dbo.VW_IMPORT_USER"
						+ "DOC.STATE_NAME,\n		dbo.VW_IMPORT_USERDOC.STATE_CODE,\n		dbo.VW_IMPORT_USERDOC.CITY_NAME,\n		dbo.VW_IMPORT_USERDOC.CITY_CODE"
						+ ",\n		dbo.VW_IMPORT_USERDOC.ADDRESS_ZONE,\n		dbo.VW_IMPORT_USERDOC.ADDRESS_STREET,\n		dbo.VW_IMPORT_USERDOC.ADDRESS_STREET_L"
						+ "ANG2,\n		dbo.VW_IMPORT_USERDOC.ZIP_CODE,\n		dbo.VW_IMPORT_USERDOC.EMAIL,\n		dbo.VW_IMPORT_USERDOC.TELEPHONE,\n		dbo.VW_IMPOR"
						+ "T_USERDOC.PERSON_GROUP_CODE,\n		dbo.VW_IMPORT_USERDOC.CAPTURE_USER_ID,\n		dbo.VW_IMPORT_USERDOC.CAPTURE_DATE\nFROM	dbo.VW_I"
						+ "MPORT_USERDOC";

				globalMap.put("tDBInput_9_QUERY", dbquery_tDBInput_9);
				java.sql.ResultSet rs_tDBInput_9 = null;

				try {
					rs_tDBInput_9 = stmt_tDBInput_9.executeQuery(dbquery_tDBInput_9);
					java.sql.ResultSetMetaData rsmd_tDBInput_9 = rs_tDBInput_9.getMetaData();
					int colQtyInRs_tDBInput_9 = rsmd_tDBInput_9.getColumnCount();

					String tmpContent_tDBInput_9 = null;

					while (rs_tDBInput_9.next()) {
						nb_line_tDBInput_9++;

						if (colQtyInRs_tDBInput_9 < 1) {
							row14.USERDOC_SEQ = null;
						} else {

							tmpContent_tDBInput_9 = rs_tDBInput_9.getString(1);
							if (tmpContent_tDBInput_9 != null) {
								if (talendToDBList_tDBInput_9.contains(
										rsmd_tDBInput_9.getColumnTypeName(1).toUpperCase(java.util.Locale.ENGLISH))) {
									row14.USERDOC_SEQ = FormatterUtils.formatUnwithE(tmpContent_tDBInput_9);
								} else {
									row14.USERDOC_SEQ = tmpContent_tDBInput_9;
								}
							} else {
								row14.USERDOC_SEQ = null;
							}
						}
						if (colQtyInRs_tDBInput_9 < 2) {
							row14.USERDOC_SERIES = null;
						} else {

							row14.USERDOC_SERIES = rs_tDBInput_9.getBigDecimal(2);
							if (rs_tDBInput_9.wasNull()) {
								throw new RuntimeException("Null value in non-Nullable column");
							}
						}
						if (colQtyInRs_tDBInput_9 < 3) {
							row14.USERDOC_NBR = null;
						} else {

							row14.USERDOC_NBR = rs_tDBInput_9.getBigDecimal(3);
							if (rs_tDBInput_9.wasNull()) {
								throw new RuntimeException("Null value in non-Nullable column");
							}
						}
						if (colQtyInRs_tDBInput_9 < 4) {
							row14.DOC_ORI = null;
						} else {

							tmpContent_tDBInput_9 = rs_tDBInput_9.getString(4);
							if (tmpContent_tDBInput_9 != null) {
								if (talendToDBList_tDBInput_9.contains(
										rsmd_tDBInput_9.getColumnTypeName(4).toUpperCase(java.util.Locale.ENGLISH))) {
									row14.DOC_ORI = FormatterUtils.formatUnwithE(tmpContent_tDBInput_9);
								} else {
									row14.DOC_ORI = tmpContent_tDBInput_9;
								}
							} else {
								row14.DOC_ORI = null;
							}
						}
						if (colQtyInRs_tDBInput_9 < 5) {
							row14.DOC_SERIES = null;
						} else {

							row14.DOC_SERIES = rs_tDBInput_9.getBigDecimal(5);
							if (rs_tDBInput_9.wasNull()) {
								row14.DOC_SERIES = null;
							}
						}
						if (colQtyInRs_tDBInput_9 < 6) {
							row14.DOC_NBR = null;
						} else {

							row14.DOC_NBR = rs_tDBInput_9.getBigDecimal(6);
							if (rs_tDBInput_9.wasNull()) {
								row14.DOC_NBR = null;
							}
						}
						if (colQtyInRs_tDBInput_9 < 7) {
							row14.IND_IMPORT = null;
						} else {

							row14.IND_IMPORT = rs_tDBInput_9.getBigDecimal(7);
							if (rs_tDBInput_9.wasNull()) {
								row14.IND_IMPORT = null;
							}
						}
						if (colQtyInRs_tDBInput_9 < 8) {
							row14.USERDOC_TYPE = null;
						} else {

							tmpContent_tDBInput_9 = rs_tDBInput_9.getString(8);
							if (tmpContent_tDBInput_9 != null) {
								if (talendToDBList_tDBInput_9.contains(
										rsmd_tDBInput_9.getColumnTypeName(8).toUpperCase(java.util.Locale.ENGLISH))) {
									row14.USERDOC_TYPE = FormatterUtils.formatUnwithE(tmpContent_tDBInput_9);
								} else {
									row14.USERDOC_TYPE = tmpContent_tDBInput_9;
								}
							} else {
								row14.USERDOC_TYPE = null;
							}
						}
						if (colQtyInRs_tDBInput_9 < 9) {
							row14.LAW_CODE = null;
						} else {

							row14.LAW_CODE = rs_tDBInput_9.getBigDecimal(9);
							if (rs_tDBInput_9.wasNull()) {
								throw new RuntimeException("Null value in non-Nullable column");
							}
						}
						if (colQtyInRs_tDBInput_9 < 10) {
							row14.FILING_DATE = null;
						} else {

							row14.FILING_DATE = mssqlGTU_tDBInput_9.getDate(rsmd_tDBInput_9, rs_tDBInput_9, 10);

						}
						if (colQtyInRs_tDBInput_9 < 11) {
							row14.RECEPTION_DATE = null;
						} else {

							row14.RECEPTION_DATE = mssqlGTU_tDBInput_9.getDate(rsmd_tDBInput_9, rs_tDBInput_9, 11);

						}
						if (colQtyInRs_tDBInput_9 < 12) {
							row14.NOTES = null;
						} else {

							tmpContent_tDBInput_9 = rs_tDBInput_9.getString(12);
							if (tmpContent_tDBInput_9 != null) {
								if (talendToDBList_tDBInput_9.contains(
										rsmd_tDBInput_9.getColumnTypeName(12).toUpperCase(java.util.Locale.ENGLISH))) {
									row14.NOTES = FormatterUtils.formatUnwithE(tmpContent_tDBInput_9);
								} else {
									row14.NOTES = tmpContent_tDBInput_9;
								}
							} else {
								row14.NOTES = null;
							}
						}
						if (colQtyInRs_tDBInput_9 < 13) {
							row14.APPLICANT_NOTES = null;
						} else {

							tmpContent_tDBInput_9 = rs_tDBInput_9.getString(13);
							if (tmpContent_tDBInput_9 != null) {
								if (talendToDBList_tDBInput_9.contains(
										rsmd_tDBInput_9.getColumnTypeName(13).toUpperCase(java.util.Locale.ENGLISH))) {
									row14.APPLICANT_NOTES = FormatterUtils.formatUnwithE(tmpContent_tDBInput_9);
								} else {
									row14.APPLICANT_NOTES = tmpContent_tDBInput_9;
								}
							} else {
								row14.APPLICANT_NOTES = null;
							}
						}
						if (colQtyInRs_tDBInput_9 < 14) {
							row14.PERSON_NAME = null;
						} else {

							tmpContent_tDBInput_9 = rs_tDBInput_9.getString(14);
							if (tmpContent_tDBInput_9 != null) {
								if (talendToDBList_tDBInput_9.contains(
										rsmd_tDBInput_9.getColumnTypeName(14).toUpperCase(java.util.Locale.ENGLISH))) {
									row14.PERSON_NAME = FormatterUtils.formatUnwithE(tmpContent_tDBInput_9);
								} else {
									row14.PERSON_NAME = tmpContent_tDBInput_9;
								}
							} else {
								row14.PERSON_NAME = null;
							}
						}
						if (colQtyInRs_tDBInput_9 < 15) {
							row14.PERSON_NAME_LANG2 = null;
						} else {

							tmpContent_tDBInput_9 = rs_tDBInput_9.getString(15);
							if (tmpContent_tDBInput_9 != null) {
								if (talendToDBList_tDBInput_9.contains(
										rsmd_tDBInput_9.getColumnTypeName(15).toUpperCase(java.util.Locale.ENGLISH))) {
									row14.PERSON_NAME_LANG2 = FormatterUtils.formatUnwithE(tmpContent_tDBInput_9);
								} else {
									row14.PERSON_NAME_LANG2 = tmpContent_tDBInput_9;
								}
							} else {
								row14.PERSON_NAME_LANG2 = null;
							}
						}
						if (colQtyInRs_tDBInput_9 < 16) {
							row14.NATIONALITY_COUNTRY_CODE = null;
						} else {

							tmpContent_tDBInput_9 = rs_tDBInput_9.getString(16);
							if (tmpContent_tDBInput_9 != null) {
								if (talendToDBList_tDBInput_9.contains(
										rsmd_tDBInput_9.getColumnTypeName(16).toUpperCase(java.util.Locale.ENGLISH))) {
									row14.NATIONALITY_COUNTRY_CODE = FormatterUtils
											.formatUnwithE(tmpContent_tDBInput_9);
								} else {
									row14.NATIONALITY_COUNTRY_CODE = tmpContent_tDBInput_9;
								}
							} else {
								row14.NATIONALITY_COUNTRY_CODE = null;
							}
						}
						if (colQtyInRs_tDBInput_9 < 17) {
							row14.IND_COMPANY = null;
						} else {

							row14.IND_COMPANY = rs_tDBInput_9.getBigDecimal(17);
							if (rs_tDBInput_9.wasNull()) {
								row14.IND_COMPANY = null;
							}
						}
						if (colQtyInRs_tDBInput_9 < 18) {
							row14.LEGAL_NATURE = null;
						} else {

							tmpContent_tDBInput_9 = rs_tDBInput_9.getString(18);
							if (tmpContent_tDBInput_9 != null) {
								if (talendToDBList_tDBInput_9.contains(
										rsmd_tDBInput_9.getColumnTypeName(18).toUpperCase(java.util.Locale.ENGLISH))) {
									row14.LEGAL_NATURE = FormatterUtils.formatUnwithE(tmpContent_tDBInput_9);
								} else {
									row14.LEGAL_NATURE = tmpContent_tDBInput_9;
								}
							} else {
								row14.LEGAL_NATURE = null;
							}
						}
						if (colQtyInRs_tDBInput_9 < 19) {
							row14.LEGAL_NATURE_LANG2 = null;
						} else {

							tmpContent_tDBInput_9 = rs_tDBInput_9.getString(19);
							if (tmpContent_tDBInput_9 != null) {
								if (talendToDBList_tDBInput_9.contains(
										rsmd_tDBInput_9.getColumnTypeName(19).toUpperCase(java.util.Locale.ENGLISH))) {
									row14.LEGAL_NATURE_LANG2 = FormatterUtils.formatUnwithE(tmpContent_tDBInput_9);
								} else {
									row14.LEGAL_NATURE_LANG2 = tmpContent_tDBInput_9;
								}
							} else {
								row14.LEGAL_NATURE_LANG2 = null;
							}
						}
						if (colQtyInRs_tDBInput_9 < 20) {
							row14.LEGAL_ID_TYPE = null;
						} else {

							tmpContent_tDBInput_9 = rs_tDBInput_9.getString(20);
							if (tmpContent_tDBInput_9 != null) {
								if (talendToDBList_tDBInput_9.contains(
										rsmd_tDBInput_9.getColumnTypeName(20).toUpperCase(java.util.Locale.ENGLISH))) {
									row14.LEGAL_ID_TYPE = FormatterUtils.formatUnwithE(tmpContent_tDBInput_9);
								} else {
									row14.LEGAL_ID_TYPE = tmpContent_tDBInput_9;
								}
							} else {
								row14.LEGAL_ID_TYPE = null;
							}
						}
						if (colQtyInRs_tDBInput_9 < 21) {
							row14.LEGAL_ID_NBR = null;
						} else {

							row14.LEGAL_ID_NBR = rs_tDBInput_9.getBigDecimal(21);
							if (rs_tDBInput_9.wasNull()) {
								row14.LEGAL_ID_NBR = null;
							}
						}
						if (colQtyInRs_tDBInput_9 < 22) {
							row14.INDIVIDUAL_ID_TYPE = null;
						} else {

							tmpContent_tDBInput_9 = rs_tDBInput_9.getString(22);
							if (tmpContent_tDBInput_9 != null) {
								if (talendToDBList_tDBInput_9.contains(
										rsmd_tDBInput_9.getColumnTypeName(22).toUpperCase(java.util.Locale.ENGLISH))) {
									row14.INDIVIDUAL_ID_TYPE = FormatterUtils.formatUnwithE(tmpContent_tDBInput_9);
								} else {
									row14.INDIVIDUAL_ID_TYPE = tmpContent_tDBInput_9;
								}
							} else {
								row14.INDIVIDUAL_ID_TYPE = null;
							}
						}
						if (colQtyInRs_tDBInput_9 < 23) {
							row14.INDIVIDUAL_ID_NBR = null;
						} else {

							row14.INDIVIDUAL_ID_NBR = rs_tDBInput_9.getBigDecimal(23);
							if (rs_tDBInput_9.wasNull()) {
								row14.INDIVIDUAL_ID_NBR = null;
							}
						}
						if (colQtyInRs_tDBInput_9 < 24) {
							row14.RESIDENCE_COUNTRY_CODE = null;
						} else {

							tmpContent_tDBInput_9 = rs_tDBInput_9.getString(24);
							if (tmpContent_tDBInput_9 != null) {
								if (talendToDBList_tDBInput_9.contains(
										rsmd_tDBInput_9.getColumnTypeName(24).toUpperCase(java.util.Locale.ENGLISH))) {
									row14.RESIDENCE_COUNTRY_CODE = FormatterUtils.formatUnwithE(tmpContent_tDBInput_9);
								} else {
									row14.RESIDENCE_COUNTRY_CODE = tmpContent_tDBInput_9;
								}
							} else {
								row14.RESIDENCE_COUNTRY_CODE = null;
							}
						}
						if (colQtyInRs_tDBInput_9 < 25) {
							row14.STATE_NAME = null;
						} else {

							tmpContent_tDBInput_9 = rs_tDBInput_9.getString(25);
							if (tmpContent_tDBInput_9 != null) {
								if (talendToDBList_tDBInput_9.contains(
										rsmd_tDBInput_9.getColumnTypeName(25).toUpperCase(java.util.Locale.ENGLISH))) {
									row14.STATE_NAME = FormatterUtils.formatUnwithE(tmpContent_tDBInput_9);
								} else {
									row14.STATE_NAME = tmpContent_tDBInput_9;
								}
							} else {
								row14.STATE_NAME = null;
							}
						}
						if (colQtyInRs_tDBInput_9 < 26) {
							row14.STATE_CODE = null;
						} else {

							tmpContent_tDBInput_9 = rs_tDBInput_9.getString(26);
							if (tmpContent_tDBInput_9 != null) {
								if (talendToDBList_tDBInput_9.contains(
										rsmd_tDBInput_9.getColumnTypeName(26).toUpperCase(java.util.Locale.ENGLISH))) {
									row14.STATE_CODE = FormatterUtils.formatUnwithE(tmpContent_tDBInput_9);
								} else {
									row14.STATE_CODE = tmpContent_tDBInput_9;
								}
							} else {
								row14.STATE_CODE = null;
							}
						}
						if (colQtyInRs_tDBInput_9 < 27) {
							row14.CITY_NAME = null;
						} else {

							tmpContent_tDBInput_9 = rs_tDBInput_9.getString(27);
							if (tmpContent_tDBInput_9 != null) {
								if (talendToDBList_tDBInput_9.contains(
										rsmd_tDBInput_9.getColumnTypeName(27).toUpperCase(java.util.Locale.ENGLISH))) {
									row14.CITY_NAME = FormatterUtils.formatUnwithE(tmpContent_tDBInput_9);
								} else {
									row14.CITY_NAME = tmpContent_tDBInput_9;
								}
							} else {
								row14.CITY_NAME = null;
							}
						}
						if (colQtyInRs_tDBInput_9 < 28) {
							row14.CITY_CODE = null;
						} else {

							tmpContent_tDBInput_9 = rs_tDBInput_9.getString(28);
							if (tmpContent_tDBInput_9 != null) {
								if (talendToDBList_tDBInput_9.contains(
										rsmd_tDBInput_9.getColumnTypeName(28).toUpperCase(java.util.Locale.ENGLISH))) {
									row14.CITY_CODE = FormatterUtils.formatUnwithE(tmpContent_tDBInput_9);
								} else {
									row14.CITY_CODE = tmpContent_tDBInput_9;
								}
							} else {
								row14.CITY_CODE = null;
							}
						}
						if (colQtyInRs_tDBInput_9 < 29) {
							row14.ADDRESS_ZONE = null;
						} else {

							tmpContent_tDBInput_9 = rs_tDBInput_9.getString(29);
							if (tmpContent_tDBInput_9 != null) {
								if (talendToDBList_tDBInput_9.contains(
										rsmd_tDBInput_9.getColumnTypeName(29).toUpperCase(java.util.Locale.ENGLISH))) {
									row14.ADDRESS_ZONE = FormatterUtils.formatUnwithE(tmpContent_tDBInput_9);
								} else {
									row14.ADDRESS_ZONE = tmpContent_tDBInput_9;
								}
							} else {
								row14.ADDRESS_ZONE = null;
							}
						}
						if (colQtyInRs_tDBInput_9 < 30) {
							row14.ADDRESS_STREET = null;
						} else {

							tmpContent_tDBInput_9 = rs_tDBInput_9.getString(30);
							if (tmpContent_tDBInput_9 != null) {
								if (talendToDBList_tDBInput_9.contains(
										rsmd_tDBInput_9.getColumnTypeName(30).toUpperCase(java.util.Locale.ENGLISH))) {
									row14.ADDRESS_STREET = FormatterUtils.formatUnwithE(tmpContent_tDBInput_9);
								} else {
									row14.ADDRESS_STREET = tmpContent_tDBInput_9;
								}
							} else {
								row14.ADDRESS_STREET = null;
							}
						}
						if (colQtyInRs_tDBInput_9 < 31) {
							row14.ADDRESS_STREET_LANG2 = null;
						} else {

							tmpContent_tDBInput_9 = rs_tDBInput_9.getString(31);
							if (tmpContent_tDBInput_9 != null) {
								if (talendToDBList_tDBInput_9.contains(
										rsmd_tDBInput_9.getColumnTypeName(31).toUpperCase(java.util.Locale.ENGLISH))) {
									row14.ADDRESS_STREET_LANG2 = FormatterUtils.formatUnwithE(tmpContent_tDBInput_9);
								} else {
									row14.ADDRESS_STREET_LANG2 = tmpContent_tDBInput_9;
								}
							} else {
								row14.ADDRESS_STREET_LANG2 = null;
							}
						}
						if (colQtyInRs_tDBInput_9 < 32) {
							row14.ZIP_CODE = null;
						} else {

							tmpContent_tDBInput_9 = rs_tDBInput_9.getString(32);
							if (tmpContent_tDBInput_9 != null) {
								if (talendToDBList_tDBInput_9.contains(
										rsmd_tDBInput_9.getColumnTypeName(32).toUpperCase(java.util.Locale.ENGLISH))) {
									row14.ZIP_CODE = FormatterUtils.formatUnwithE(tmpContent_tDBInput_9);
								} else {
									row14.ZIP_CODE = tmpContent_tDBInput_9;
								}
							} else {
								row14.ZIP_CODE = null;
							}
						}
						if (colQtyInRs_tDBInput_9 < 33) {
							row14.EMAIL = null;
						} else {

							tmpContent_tDBInput_9 = rs_tDBInput_9.getString(33);
							if (tmpContent_tDBInput_9 != null) {
								if (talendToDBList_tDBInput_9.contains(
										rsmd_tDBInput_9.getColumnTypeName(33).toUpperCase(java.util.Locale.ENGLISH))) {
									row14.EMAIL = FormatterUtils.formatUnwithE(tmpContent_tDBInput_9);
								} else {
									row14.EMAIL = tmpContent_tDBInput_9;
								}
							} else {
								row14.EMAIL = null;
							}
						}
						if (colQtyInRs_tDBInput_9 < 34) {
							row14.TELEPHONE = null;
						} else {

							tmpContent_tDBInput_9 = rs_tDBInput_9.getString(34);
							if (tmpContent_tDBInput_9 != null) {
								if (talendToDBList_tDBInput_9.contains(
										rsmd_tDBInput_9.getColumnTypeName(34).toUpperCase(java.util.Locale.ENGLISH))) {
									row14.TELEPHONE = FormatterUtils.formatUnwithE(tmpContent_tDBInput_9);
								} else {
									row14.TELEPHONE = tmpContent_tDBInput_9;
								}
							} else {
								row14.TELEPHONE = null;
							}
						}
						if (colQtyInRs_tDBInput_9 < 35) {
							row14.PERSON_GROUP_CODE = null;
						} else {

							tmpContent_tDBInput_9 = rs_tDBInput_9.getString(35);
							if (tmpContent_tDBInput_9 != null) {
								if (talendToDBList_tDBInput_9.contains(
										rsmd_tDBInput_9.getColumnTypeName(35).toUpperCase(java.util.Locale.ENGLISH))) {
									row14.PERSON_GROUP_CODE = FormatterUtils.formatUnwithE(tmpContent_tDBInput_9);
								} else {
									row14.PERSON_GROUP_CODE = tmpContent_tDBInput_9;
								}
							} else {
								row14.PERSON_GROUP_CODE = null;
							}
						}
						if (colQtyInRs_tDBInput_9 < 36) {
							row14.CAPTURE_USER_ID = null;
						} else {

							row14.CAPTURE_USER_ID = rs_tDBInput_9.getBigDecimal(36);
							if (rs_tDBInput_9.wasNull()) {
								row14.CAPTURE_USER_ID = null;
							}
						}
						if (colQtyInRs_tDBInput_9 < 37) {
							row14.CAPTURE_DATE = null;
						} else {

							row14.CAPTURE_DATE = mssqlGTU_tDBInput_9.getDate(rsmd_tDBInput_9, rs_tDBInput_9, 37);

						}

						/**
						 * [tDBInput_9 begin ] stop
						 */

						/**
						 * [tDBInput_9 main ] start
						 */

						currentComponent = "tDBInput_9";

						tos_count_tDBInput_9++;

						/**
						 * [tDBInput_9 main ] stop
						 */

						/**
						 * [tDBInput_9 process_data_begin ] start
						 */

						currentComponent = "tDBInput_9";

						/**
						 * [tDBInput_9 process_data_begin ] stop
						 */

						/**
						 * [tAdvancedHash_row14 main ] start
						 */

						currentComponent = "tAdvancedHash_row14";

						if (execStat) {
							runStat.updateStatOnConnection(iterateId, 1, 1

									, "row14"

							);
						}

						row14Struct row14_HashRow = new row14Struct();

						row14_HashRow.USERDOC_SEQ = row14.USERDOC_SEQ;

						row14_HashRow.USERDOC_SERIES = row14.USERDOC_SERIES;

						row14_HashRow.USERDOC_NBR = row14.USERDOC_NBR;

						row14_HashRow.DOC_ORI = row14.DOC_ORI;

						row14_HashRow.DOC_SERIES = row14.DOC_SERIES;

						row14_HashRow.DOC_NBR = row14.DOC_NBR;

						row14_HashRow.IND_IMPORT = row14.IND_IMPORT;

						row14_HashRow.USERDOC_TYPE = row14.USERDOC_TYPE;

						row14_HashRow.LAW_CODE = row14.LAW_CODE;

						row14_HashRow.FILING_DATE = row14.FILING_DATE;

						row14_HashRow.RECEPTION_DATE = row14.RECEPTION_DATE;

						row14_HashRow.NOTES = row14.NOTES;

						row14_HashRow.APPLICANT_NOTES = row14.APPLICANT_NOTES;

						row14_HashRow.PERSON_NAME = row14.PERSON_NAME;

						row14_HashRow.PERSON_NAME_LANG2 = row14.PERSON_NAME_LANG2;

						row14_HashRow.NATIONALITY_COUNTRY_CODE = row14.NATIONALITY_COUNTRY_CODE;

						row14_HashRow.IND_COMPANY = row14.IND_COMPANY;

						row14_HashRow.LEGAL_NATURE = row14.LEGAL_NATURE;

						row14_HashRow.LEGAL_NATURE_LANG2 = row14.LEGAL_NATURE_LANG2;

						row14_HashRow.LEGAL_ID_TYPE = row14.LEGAL_ID_TYPE;

						row14_HashRow.LEGAL_ID_NBR = row14.LEGAL_ID_NBR;

						row14_HashRow.INDIVIDUAL_ID_TYPE = row14.INDIVIDUAL_ID_TYPE;

						row14_HashRow.INDIVIDUAL_ID_NBR = row14.INDIVIDUAL_ID_NBR;

						row14_HashRow.RESIDENCE_COUNTRY_CODE = row14.RESIDENCE_COUNTRY_CODE;

						row14_HashRow.STATE_NAME = row14.STATE_NAME;

						row14_HashRow.STATE_CODE = row14.STATE_CODE;

						row14_HashRow.CITY_NAME = row14.CITY_NAME;

						row14_HashRow.CITY_CODE = row14.CITY_CODE;

						row14_HashRow.ADDRESS_ZONE = row14.ADDRESS_ZONE;

						row14_HashRow.ADDRESS_STREET = row14.ADDRESS_STREET;

						row14_HashRow.ADDRESS_STREET_LANG2 = row14.ADDRESS_STREET_LANG2;

						row14_HashRow.ZIP_CODE = row14.ZIP_CODE;

						row14_HashRow.EMAIL = row14.EMAIL;

						row14_HashRow.TELEPHONE = row14.TELEPHONE;

						row14_HashRow.PERSON_GROUP_CODE = row14.PERSON_GROUP_CODE;

						row14_HashRow.CAPTURE_USER_ID = row14.CAPTURE_USER_ID;

						row14_HashRow.CAPTURE_DATE = row14.CAPTURE_DATE;

						tHash_Lookup_row14.put(row14_HashRow);

						tos_count_tAdvancedHash_row14++;

						/**
						 * [tAdvancedHash_row14 main ] stop
						 */

						/**
						 * [tAdvancedHash_row14 process_data_begin ] start
						 */

						currentComponent = "tAdvancedHash_row14";

						/**
						 * [tAdvancedHash_row14 process_data_begin ] stop
						 */

						/**
						 * [tAdvancedHash_row14 process_data_end ] start
						 */

						currentComponent = "tAdvancedHash_row14";

						/**
						 * [tAdvancedHash_row14 process_data_end ] stop
						 */

						/**
						 * [tDBInput_9 process_data_end ] start
						 */

						currentComponent = "tDBInput_9";

						/**
						 * [tDBInput_9 process_data_end ] stop
						 */

						/**
						 * [tDBInput_9 end ] start
						 */

						currentComponent = "tDBInput_9";

					}
				} finally {
					if (rs_tDBInput_9 != null) {
						rs_tDBInput_9.close();
					}
					if (stmt_tDBInput_9 != null) {
						stmt_tDBInput_9.close();
					}
				}
				globalMap.put("tDBInput_9_NB_LINE", nb_line_tDBInput_9);

				ok_Hash.put("tDBInput_9", true);
				end_Hash.put("tDBInput_9", System.currentTimeMillis());

				/**
				 * [tDBInput_9 end ] stop
				 */

				/**
				 * [tAdvancedHash_row14 end ] start
				 */

				currentComponent = "tAdvancedHash_row14";

				tHash_Lookup_row14.endPut();

				if (execStat) {
					runStat.updateStat(resourceMap, iterateId, 2, 0, "row14");
				}

				ok_Hash.put("tAdvancedHash_row14", true);
				end_Hash.put("tAdvancedHash_row14", System.currentTimeMillis());

				/**
				 * [tAdvancedHash_row14 end ] stop
				 */

			} // end the resume

		} catch (java.lang.Exception e) {

			TalendException te = new TalendException(e, currentComponent, globalMap);

			throw te;
		} catch (java.lang.Error error) {

			runStat.stopThreadStat();

			throw error;
		} finally {

			try {

				/**
				 * [tDBInput_9 finally ] start
				 */

				currentComponent = "tDBInput_9";

				/**
				 * [tDBInput_9 finally ] stop
				 */

				/**
				 * [tAdvancedHash_row14 finally ] start
				 */

				currentComponent = "tAdvancedHash_row14";

				/**
				 * [tAdvancedHash_row14 finally ] stop
				 */

			} catch (java.lang.Exception e) {
				// ignore
			} catch (java.lang.Error error) {
				// ignore
			}
			resourceMap = null;
		}

		globalMap.put("tDBInput_9_SUBPROCESS_STATE", 1);
	}

	public static class row15Struct implements routines.system.IPersistableComparableLookupRow<row15Struct> {
		final static byte[] commonByteArrayLock_WIPO_PROJECTS_E1a_Marc_Userdoc_a_interm = new byte[0];
		static byte[] commonByteArray_WIPO_PROJECTS_E1a_Marc_Userdoc_a_interm = new byte[0];
		protected static final int DEFAULT_HASHCODE = 1;
		protected static final int PRIME = 31;
		protected int hashCode = DEFAULT_HASHCODE;
		public boolean hashCodeDirty = true;

		public String loopKey;

		public String USERDOC_SEQ;

		public String getUSERDOC_SEQ() {
			return this.USERDOC_SEQ;
		}

		public BigDecimal USERDOC_SERIES;

		public BigDecimal getUSERDOC_SERIES() {
			return this.USERDOC_SERIES;
		}

		public BigDecimal USERDOC_NBR;

		public BigDecimal getUSERDOC_NBR() {
			return this.USERDOC_NBR;
		}

		public String DOC_ORI;

		public String getDOC_ORI() {
			return this.DOC_ORI;
		}

		public BigDecimal DOC_SERIES;

		public BigDecimal getDOC_SERIES() {
			return this.DOC_SERIES;
		}

		public BigDecimal DOC_NBR;

		public BigDecimal getDOC_NBR() {
			return this.DOC_NBR;
		}

		public BigDecimal IND_IMPORT;

		public BigDecimal getIND_IMPORT() {
			return this.IND_IMPORT;
		}

		public String USERDOC_TYPE;

		public String getUSERDOC_TYPE() {
			return this.USERDOC_TYPE;
		}

		public BigDecimal LAW_CODE;

		public BigDecimal getLAW_CODE() {
			return this.LAW_CODE;
		}

		public java.util.Date FILING_DATE;

		public java.util.Date getFILING_DATE() {
			return this.FILING_DATE;
		}

		public java.util.Date RECEPTION_DATE;

		public java.util.Date getRECEPTION_DATE() {
			return this.RECEPTION_DATE;
		}

		public String NOTES;

		public String getNOTES() {
			return this.NOTES;
		}

		public String APPLICANT_NOTES;

		public String getAPPLICANT_NOTES() {
			return this.APPLICANT_NOTES;
		}

		public String PERSON_NAME;

		public String getPERSON_NAME() {
			return this.PERSON_NAME;
		}

		public String PERSON_NAME_LANG2;

		public String getPERSON_NAME_LANG2() {
			return this.PERSON_NAME_LANG2;
		}

		public String NATIONALITY_COUNTRY_CODE;

		public String getNATIONALITY_COUNTRY_CODE() {
			return this.NATIONALITY_COUNTRY_CODE;
		}

		public BigDecimal IND_COMPANY;

		public BigDecimal getIND_COMPANY() {
			return this.IND_COMPANY;
		}

		public String LEGAL_NATURE;

		public String getLEGAL_NATURE() {
			return this.LEGAL_NATURE;
		}

		public String LEGAL_NATURE_LANG2;

		public String getLEGAL_NATURE_LANG2() {
			return this.LEGAL_NATURE_LANG2;
		}

		public String LEGAL_ID_TYPE;

		public String getLEGAL_ID_TYPE() {
			return this.LEGAL_ID_TYPE;
		}

		public BigDecimal LEGAL_ID_NBR;

		public BigDecimal getLEGAL_ID_NBR() {
			return this.LEGAL_ID_NBR;
		}

		public String INDIVIDUAL_ID_TYPE;

		public String getINDIVIDUAL_ID_TYPE() {
			return this.INDIVIDUAL_ID_TYPE;
		}

		public BigDecimal INDIVIDUAL_ID_NBR;

		public BigDecimal getINDIVIDUAL_ID_NBR() {
			return this.INDIVIDUAL_ID_NBR;
		}

		public String RESIDENCE_COUNTRY_CODE;

		public String getRESIDENCE_COUNTRY_CODE() {
			return this.RESIDENCE_COUNTRY_CODE;
		}

		public String STATE_NAME;

		public String getSTATE_NAME() {
			return this.STATE_NAME;
		}

		public String STATE_CODE;

		public String getSTATE_CODE() {
			return this.STATE_CODE;
		}

		public String CITY_NAME;

		public String getCITY_NAME() {
			return this.CITY_NAME;
		}

		public String CITY_CODE;

		public String getCITY_CODE() {
			return this.CITY_CODE;
		}

		public String ADDRESS_ZONE;

		public String getADDRESS_ZONE() {
			return this.ADDRESS_ZONE;
		}

		public String ADDRESS_STREET;

		public String getADDRESS_STREET() {
			return this.ADDRESS_STREET;
		}

		public String ADDRESS_STREET_LANG2;

		public String getADDRESS_STREET_LANG2() {
			return this.ADDRESS_STREET_LANG2;
		}

		public String ZIP_CODE;

		public String getZIP_CODE() {
			return this.ZIP_CODE;
		}

		public String EMAIL;

		public String getEMAIL() {
			return this.EMAIL;
		}

		public String TELEPHONE;

		public String getTELEPHONE() {
			return this.TELEPHONE;
		}

		public String PERSON_GROUP_CODE;

		public String getPERSON_GROUP_CODE() {
			return this.PERSON_GROUP_CODE;
		}

		public BigDecimal CAPTURE_USER_ID;

		public BigDecimal getCAPTURE_USER_ID() {
			return this.CAPTURE_USER_ID;
		}

		public java.util.Date CAPTURE_DATE;

		public java.util.Date getCAPTURE_DATE() {
			return this.CAPTURE_DATE;
		}

		@Override
		public int hashCode() {
			if (this.hashCodeDirty) {
				final int prime = PRIME;
				int result = DEFAULT_HASHCODE;

				result = prime * result
						+ ((this.DOC_NBR == null) ? 0 : new Double(this.DOC_NBR.doubleValue()).hashCode());

				this.hashCode = result;
				this.hashCodeDirty = false;
			}
			return this.hashCode;
		}

		@Override
		public boolean equals(Object obj) {
			if (this == obj)
				return true;
			if (obj == null)
				return false;
			if (getClass() != obj.getClass())
				return false;
			final row15Struct other = (row15Struct) obj;

			if (this.DOC_NBR == null) {
				if (other.DOC_NBR != null)
					return false;

			} else if ((other.DOC_NBR == null) || (this.DOC_NBR.compareTo(other.DOC_NBR) != 0))

				return false;

			return true;
		}

		public void copyDataTo(row15Struct other) {

			other.USERDOC_SEQ = this.USERDOC_SEQ;
			other.USERDOC_SERIES = this.USERDOC_SERIES;
			other.USERDOC_NBR = this.USERDOC_NBR;
			other.DOC_ORI = this.DOC_ORI;
			other.DOC_SERIES = this.DOC_SERIES;
			other.DOC_NBR = this.DOC_NBR;
			other.IND_IMPORT = this.IND_IMPORT;
			other.USERDOC_TYPE = this.USERDOC_TYPE;
			other.LAW_CODE = this.LAW_CODE;
			other.FILING_DATE = this.FILING_DATE;
			other.RECEPTION_DATE = this.RECEPTION_DATE;
			other.NOTES = this.NOTES;
			other.APPLICANT_NOTES = this.APPLICANT_NOTES;
			other.PERSON_NAME = this.PERSON_NAME;
			other.PERSON_NAME_LANG2 = this.PERSON_NAME_LANG2;
			other.NATIONALITY_COUNTRY_CODE = this.NATIONALITY_COUNTRY_CODE;
			other.IND_COMPANY = this.IND_COMPANY;
			other.LEGAL_NATURE = this.LEGAL_NATURE;
			other.LEGAL_NATURE_LANG2 = this.LEGAL_NATURE_LANG2;
			other.LEGAL_ID_TYPE = this.LEGAL_ID_TYPE;
			other.LEGAL_ID_NBR = this.LEGAL_ID_NBR;
			other.INDIVIDUAL_ID_TYPE = this.INDIVIDUAL_ID_TYPE;
			other.INDIVIDUAL_ID_NBR = this.INDIVIDUAL_ID_NBR;
			other.RESIDENCE_COUNTRY_CODE = this.RESIDENCE_COUNTRY_CODE;
			other.STATE_NAME = this.STATE_NAME;
			other.STATE_CODE = this.STATE_CODE;
			other.CITY_NAME = this.CITY_NAME;
			other.CITY_CODE = this.CITY_CODE;
			other.ADDRESS_ZONE = this.ADDRESS_ZONE;
			other.ADDRESS_STREET = this.ADDRESS_STREET;
			other.ADDRESS_STREET_LANG2 = this.ADDRESS_STREET_LANG2;
			other.ZIP_CODE = this.ZIP_CODE;
			other.EMAIL = this.EMAIL;
			other.TELEPHONE = this.TELEPHONE;
			other.PERSON_GROUP_CODE = this.PERSON_GROUP_CODE;
			other.CAPTURE_USER_ID = this.CAPTURE_USER_ID;
			other.CAPTURE_DATE = this.CAPTURE_DATE;

		}

		public void copyKeysDataTo(row15Struct other) {

			other.DOC_NBR = this.DOC_NBR;

		}

		private String readString(DataInputStream dis, ObjectInputStream ois) throws IOException {
			String strReturn = null;
			int length = 0;
			length = dis.readInt();
			if (length == -1) {
				strReturn = null;
			} else {
				byte[] byteArray = new byte[length];
				dis.read(byteArray);
				strReturn = new String(byteArray, utf8Charset);
			}
			return strReturn;
		}

		private void writeString(String str, DataOutputStream dos, ObjectOutputStream oos) throws IOException {
			if (str == null) {
				dos.writeInt(-1);
			} else {
				byte[] byteArray = str.getBytes(utf8Charset);
				dos.writeInt(byteArray.length);
				dos.write(byteArray);
			}
		}

		private java.util.Date readDate(DataInputStream dis, ObjectInputStream ois) throws IOException {
			java.util.Date dateReturn = null;
			int length = 0;
			length = dis.readByte();
			if (length == -1) {
				dateReturn = null;
			} else {
				dateReturn = new Date(dis.readLong());
			}
			return dateReturn;
		}

		private void writeDate(java.util.Date date1, DataOutputStream dos, ObjectOutputStream oos) throws IOException {
			if (date1 == null) {
				dos.writeByte(-1);
			} else {
				dos.writeByte(0);
				dos.writeLong(date1.getTime());
			}
		}

		public void readKeysData(ObjectInputStream dis) {

			synchronized (commonByteArrayLock_WIPO_PROJECTS_E1a_Marc_Userdoc_a_interm) {

				try {

					int length = 0;

					this.DOC_NBR = (BigDecimal) dis.readObject();

				} catch (IOException e) {
					throw new RuntimeException(e);

				} catch (ClassNotFoundException eCNFE) {
					throw new RuntimeException(eCNFE);

				}

			}

		}

		public void writeKeysData(ObjectOutputStream dos) {
			try {

				// BigDecimal

				dos.writeObject(this.DOC_NBR);

			} catch (IOException e) {
				throw new RuntimeException(e);
			}

		}

		/**
		 * Fill Values data by reading ObjectInputStream.
		 */
		public void readValuesData(DataInputStream dis, ObjectInputStream ois) {
			try {

				int length = 0;

				this.USERDOC_SEQ = readString(dis, ois);

				this.USERDOC_SERIES = (BigDecimal) ois.readObject();

				this.USERDOC_NBR = (BigDecimal) ois.readObject();

				this.DOC_ORI = readString(dis, ois);

				this.DOC_SERIES = (BigDecimal) ois.readObject();

				this.IND_IMPORT = (BigDecimal) ois.readObject();

				this.USERDOC_TYPE = readString(dis, ois);

				this.LAW_CODE = (BigDecimal) ois.readObject();

				this.FILING_DATE = readDate(dis, ois);

				this.RECEPTION_DATE = readDate(dis, ois);

				this.NOTES = readString(dis, ois);

				this.APPLICANT_NOTES = readString(dis, ois);

				this.PERSON_NAME = readString(dis, ois);

				this.PERSON_NAME_LANG2 = readString(dis, ois);

				this.NATIONALITY_COUNTRY_CODE = readString(dis, ois);

				this.IND_COMPANY = (BigDecimal) ois.readObject();

				this.LEGAL_NATURE = readString(dis, ois);

				this.LEGAL_NATURE_LANG2 = readString(dis, ois);

				this.LEGAL_ID_TYPE = readString(dis, ois);

				this.LEGAL_ID_NBR = (BigDecimal) ois.readObject();

				this.INDIVIDUAL_ID_TYPE = readString(dis, ois);

				this.INDIVIDUAL_ID_NBR = (BigDecimal) ois.readObject();

				this.RESIDENCE_COUNTRY_CODE = readString(dis, ois);

				this.STATE_NAME = readString(dis, ois);

				this.STATE_CODE = readString(dis, ois);

				this.CITY_NAME = readString(dis, ois);

				this.CITY_CODE = readString(dis, ois);

				this.ADDRESS_ZONE = readString(dis, ois);

				this.ADDRESS_STREET = readString(dis, ois);

				this.ADDRESS_STREET_LANG2 = readString(dis, ois);

				this.ZIP_CODE = readString(dis, ois);

				this.EMAIL = readString(dis, ois);

				this.TELEPHONE = readString(dis, ois);

				this.PERSON_GROUP_CODE = readString(dis, ois);

				this.CAPTURE_USER_ID = (BigDecimal) ois.readObject();

				this.CAPTURE_DATE = readDate(dis, ois);

			} catch (IOException e) {
				throw new RuntimeException(e);

			} catch (ClassNotFoundException eCNFE) {
				throw new RuntimeException(eCNFE);

			}

		}

		/**
		 * Return a byte array which represents Values data.
		 */
		public void writeValuesData(DataOutputStream dos, ObjectOutputStream oos) {
			try {

				writeString(this.USERDOC_SEQ, dos, oos);

				oos.writeObject(this.USERDOC_SERIES);

				oos.writeObject(this.USERDOC_NBR);

				writeString(this.DOC_ORI, dos, oos);

				oos.writeObject(this.DOC_SERIES);

				oos.writeObject(this.IND_IMPORT);

				writeString(this.USERDOC_TYPE, dos, oos);

				oos.writeObject(this.LAW_CODE);

				writeDate(this.FILING_DATE, dos, oos);

				writeDate(this.RECEPTION_DATE, dos, oos);

				writeString(this.NOTES, dos, oos);

				writeString(this.APPLICANT_NOTES, dos, oos);

				writeString(this.PERSON_NAME, dos, oos);

				writeString(this.PERSON_NAME_LANG2, dos, oos);

				writeString(this.NATIONALITY_COUNTRY_CODE, dos, oos);

				oos.writeObject(this.IND_COMPANY);

				writeString(this.LEGAL_NATURE, dos, oos);

				writeString(this.LEGAL_NATURE_LANG2, dos, oos);

				writeString(this.LEGAL_ID_TYPE, dos, oos);

				oos.writeObject(this.LEGAL_ID_NBR);

				writeString(this.INDIVIDUAL_ID_TYPE, dos, oos);

				oos.writeObject(this.INDIVIDUAL_ID_NBR);

				writeString(this.RESIDENCE_COUNTRY_CODE, dos, oos);

				writeString(this.STATE_NAME, dos, oos);

				writeString(this.STATE_CODE, dos, oos);

				writeString(this.CITY_NAME, dos, oos);

				writeString(this.CITY_CODE, dos, oos);

				writeString(this.ADDRESS_ZONE, dos, oos);

				writeString(this.ADDRESS_STREET, dos, oos);

				writeString(this.ADDRESS_STREET_LANG2, dos, oos);

				writeString(this.ZIP_CODE, dos, oos);

				writeString(this.EMAIL, dos, oos);

				writeString(this.TELEPHONE, dos, oos);

				writeString(this.PERSON_GROUP_CODE, dos, oos);

				oos.writeObject(this.CAPTURE_USER_ID);

				writeDate(this.CAPTURE_DATE, dos, oos);

			} catch (IOException e) {
				throw new RuntimeException(e);
			}

		}

		public String toString() {

			StringBuilder sb = new StringBuilder();
			sb.append(super.toString());
			sb.append("[");
			sb.append("USERDOC_SEQ=" + USERDOC_SEQ);
			sb.append(",USERDOC_SERIES=" + String.valueOf(USERDOC_SERIES));
			sb.append(",USERDOC_NBR=" + String.valueOf(USERDOC_NBR));
			sb.append(",DOC_ORI=" + DOC_ORI);
			sb.append(",DOC_SERIES=" + String.valueOf(DOC_SERIES));
			sb.append(",DOC_NBR=" + String.valueOf(DOC_NBR));
			sb.append(",IND_IMPORT=" + String.valueOf(IND_IMPORT));
			sb.append(",USERDOC_TYPE=" + USERDOC_TYPE);
			sb.append(",LAW_CODE=" + String.valueOf(LAW_CODE));
			sb.append(",FILING_DATE=" + String.valueOf(FILING_DATE));
			sb.append(",RECEPTION_DATE=" + String.valueOf(RECEPTION_DATE));
			sb.append(",NOTES=" + NOTES);
			sb.append(",APPLICANT_NOTES=" + APPLICANT_NOTES);
			sb.append(",PERSON_NAME=" + PERSON_NAME);
			sb.append(",PERSON_NAME_LANG2=" + PERSON_NAME_LANG2);
			sb.append(",NATIONALITY_COUNTRY_CODE=" + NATIONALITY_COUNTRY_CODE);
			sb.append(",IND_COMPANY=" + String.valueOf(IND_COMPANY));
			sb.append(",LEGAL_NATURE=" + LEGAL_NATURE);
			sb.append(",LEGAL_NATURE_LANG2=" + LEGAL_NATURE_LANG2);
			sb.append(",LEGAL_ID_TYPE=" + LEGAL_ID_TYPE);
			sb.append(",LEGAL_ID_NBR=" + String.valueOf(LEGAL_ID_NBR));
			sb.append(",INDIVIDUAL_ID_TYPE=" + INDIVIDUAL_ID_TYPE);
			sb.append(",INDIVIDUAL_ID_NBR=" + String.valueOf(INDIVIDUAL_ID_NBR));
			sb.append(",RESIDENCE_COUNTRY_CODE=" + RESIDENCE_COUNTRY_CODE);
			sb.append(",STATE_NAME=" + STATE_NAME);
			sb.append(",STATE_CODE=" + STATE_CODE);
			sb.append(",CITY_NAME=" + CITY_NAME);
			sb.append(",CITY_CODE=" + CITY_CODE);
			sb.append(",ADDRESS_ZONE=" + ADDRESS_ZONE);
			sb.append(",ADDRESS_STREET=" + ADDRESS_STREET);
			sb.append(",ADDRESS_STREET_LANG2=" + ADDRESS_STREET_LANG2);
			sb.append(",ZIP_CODE=" + ZIP_CODE);
			sb.append(",EMAIL=" + EMAIL);
			sb.append(",TELEPHONE=" + TELEPHONE);
			sb.append(",PERSON_GROUP_CODE=" + PERSON_GROUP_CODE);
			sb.append(",CAPTURE_USER_ID=" + String.valueOf(CAPTURE_USER_ID));
			sb.append(",CAPTURE_DATE=" + String.valueOf(CAPTURE_DATE));
			sb.append("]");

			return sb.toString();
		}

		/**
		 * Compare keys
		 */
		public int compareTo(row15Struct other) {

			int returnValue = -1;

			returnValue = checkNullsAndCompare(this.DOC_NBR, other.DOC_NBR);
			if (returnValue != 0) {
				return returnValue;
			}

			return returnValue;
		}

		private int checkNullsAndCompare(Object object1, Object object2) {
			int returnValue = 0;
			if (object1 instanceof Comparable && object2 instanceof Comparable) {
				returnValue = ((Comparable) object1).compareTo(object2);
			} else if (object1 != null && object2 != null) {
				returnValue = compareStrings(object1.toString(), object2.toString());
			} else if (object1 == null && object2 != null) {
				returnValue = 1;
			} else if (object1 != null && object2 == null) {
				returnValue = -1;
			} else {
				returnValue = 0;
			}

			return returnValue;
		}

		private int compareStrings(String string1, String string2) {
			return string1.compareTo(string2);
		}

	}

	public void tDBInput_10Process(final java.util.Map<String, Object> globalMap) throws TalendException {
		globalMap.put("tDBInput_10_SUBPROCESS_STATE", 0);

		final boolean execStat = this.execStat;

		String iterateId = "";

		String currentComponent = "";
		java.util.Map<String, Object> resourceMap = new java.util.HashMap<String, Object>();

		try {
			// TDI-39566 avoid throwing an useless Exception
			boolean resumeIt = true;
			if (globalResumeTicket == false && resumeEntryMethodName != null) {
				String currentMethodName = new java.lang.Exception().getStackTrace()[0].getMethodName();
				resumeIt = resumeEntryMethodName.equals(currentMethodName);
			}
			if (resumeIt || globalResumeTicket) { // start the resume
				globalResumeTicket = true;

				row15Struct row15 = new row15Struct();

				/**
				 * [tAdvancedHash_row15 begin ] start
				 */

				ok_Hash.put("tAdvancedHash_row15", false);
				start_Hash.put("tAdvancedHash_row15", System.currentTimeMillis());

				currentComponent = "tAdvancedHash_row15";

				if (execStat) {
					runStat.updateStatOnConnection(resourceMap, iterateId, 0, 0, "row15");
				}

				int tos_count_tAdvancedHash_row15 = 0;

				// connection name:row15
				// source node:tDBInput_10 - inputs:(after_tDBInput_1) outputs:(row15,row15) |
				// target node:tAdvancedHash_row15 - inputs:(row15) outputs:()
				// linked node: tMap_6 - inputs:(row21,row15,row22) outputs:(ud_files)

				org.talend.designer.components.lookup.common.ICommonLookup.MATCHING_MODE matchingModeEnum_row15 = org.talend.designer.components.lookup.common.ICommonLookup.MATCHING_MODE.ALL_MATCHES;

				org.talend.designer.components.lookup.memory.AdvancedMemoryLookup<row15Struct> tHash_Lookup_row15 = org.talend.designer.components.lookup.memory.AdvancedMemoryLookup
						.<row15Struct>getLookup(matchingModeEnum_row15);

				globalMap.put("tHash_Lookup_row15", tHash_Lookup_row15);

				/**
				 * [tAdvancedHash_row15 begin ] stop
				 */

				/**
				 * [tDBInput_10 begin ] start
				 */

				ok_Hash.put("tDBInput_10", false);
				start_Hash.put("tDBInput_10", System.currentTimeMillis());

				currentComponent = "tDBInput_10";

				int tos_count_tDBInput_10 = 0;

				org.talend.designer.components.util.mssql.MSSqlGenerateTimestampUtil mssqlGTU_tDBInput_10 = org.talend.designer.components.util.mssql.MSSqlUtilFactory
						.getMSSqlGenerateTimestampUtil();

				java.util.List<String> talendToDBList_tDBInput_10 = new java.util.ArrayList();
				String[] talendToDBArray_tDBInput_10 = new String[] { "FLOAT", "NUMERIC", "NUMERIC IDENTITY", "DECIMAL",
						"DECIMAL IDENTITY", "REAL" };
				java.util.Collections.addAll(talendToDBList_tDBInput_10, talendToDBArray_tDBInput_10);
				int nb_line_tDBInput_10 = 0;
				java.sql.Connection conn_tDBInput_10 = null;
				conn_tDBInput_10 = (java.sql.Connection) globalMap.get("conn_tDBConnection_1");

				String dbschema_tDBInput_10 = (String) globalMap.get("dbschema_tDBConnection_1");

				java.sql.Statement stmt_tDBInput_10 = conn_tDBInput_10.createStatement();

				String dbquery_tDBInput_10 = "SELECT dbo.VW_IMPORT_USERDOC.USERDOC_SEQ,\n		dbo.VW_IMPORT_USERDOC.USERDOC_SERIES,\n		dbo.VW_IMPORT_USERDOC.USERDOC_NBR,\n"
						+ "		dbo.VW_IMPORT_USERDOC.DOC_ORI,\n		dbo.VW_IMPORT_USERDOC.DOC_SERIES,\n		dbo.VW_IMPORT_USERDOC.DOC_NBR,\n		dbo.VW_IMPORT_US"
						+ "ERDOC.IND_IMPORT,\n		dbo.VW_IMPORT_USERDOC.USERDOC_TYPE,\n		dbo.VW_IMPORT_USERDOC.LAW_CODE,\n		dbo.VW_IMPORT_USERDOC.FILING"
						+ "_DATE,\n		dbo.VW_IMPORT_USERDOC.RECEPTION_DATE,\n		dbo.VW_IMPORT_USERDOC.NOTES,\n		dbo.VW_IMPORT_USERDOC.APPLICANT_NOTES,\n	"
						+ "	dbo.VW_IMPORT_USERDOC.PERSON_NAME,\n		dbo.VW_IMPORT_USERDOC.PERSON_NAME_LANG2,\n		dbo.VW_IMPORT_USERDOC.NATIONALITY_COUNT"
						+ "RY_CODE,\n		dbo.VW_IMPORT_USERDOC.IND_COMPANY,\n		dbo.VW_IMPORT_USERDOC.LEGAL_NATURE,\n		dbo.VW_IMPORT_USERDOC.LEGAL_NATURE"
						+ "_LANG2,\n		dbo.VW_IMPORT_USERDOC.LEGAL_ID_TYPE,\n		dbo.VW_IMPORT_USERDOC.LEGAL_ID_NBR,\n		dbo.VW_IMPORT_USERDOC.INDIVIDUAL_"
						+ "ID_TYPE,\n		dbo.VW_IMPORT_USERDOC.INDIVIDUAL_ID_NBR,\n		dbo.VW_IMPORT_USERDOC.RESIDENCE_COUNTRY_CODE,\n		dbo.VW_IMPORT_USER"
						+ "DOC.STATE_NAME,\n		dbo.VW_IMPORT_USERDOC.STATE_CODE,\n		dbo.VW_IMPORT_USERDOC.CITY_NAME,\n		dbo.VW_IMPORT_USERDOC.CITY_CODE"
						+ ",\n		dbo.VW_IMPORT_USERDOC.ADDRESS_ZONE,\n		dbo.VW_IMPORT_USERDOC.ADDRESS_STREET,\n		dbo.VW_IMPORT_USERDOC.ADDRESS_STREET_L"
						+ "ANG2,\n		dbo.VW_IMPORT_USERDOC.ZIP_CODE,\n		dbo.VW_IMPORT_USERDOC.EMAIL,\n		dbo.VW_IMPORT_USERDOC.TELEPHONE,\n		dbo.VW_IMPOR"
						+ "T_USERDOC.PERSON_GROUP_CODE,\n		dbo.VW_IMPORT_USERDOC.CAPTURE_USER_ID,\n		dbo.VW_IMPORT_USERDOC.CAPTURE_DATE\nFROM	dbo.VW_I"
						+ "MPORT_USERDOC";

				globalMap.put("tDBInput_10_QUERY", dbquery_tDBInput_10);
				java.sql.ResultSet rs_tDBInput_10 = null;

				try {
					rs_tDBInput_10 = stmt_tDBInput_10.executeQuery(dbquery_tDBInput_10);
					java.sql.ResultSetMetaData rsmd_tDBInput_10 = rs_tDBInput_10.getMetaData();
					int colQtyInRs_tDBInput_10 = rsmd_tDBInput_10.getColumnCount();

					String tmpContent_tDBInput_10 = null;

					while (rs_tDBInput_10.next()) {
						nb_line_tDBInput_10++;

						if (colQtyInRs_tDBInput_10 < 1) {
							row15.USERDOC_SEQ = null;
						} else {

							tmpContent_tDBInput_10 = rs_tDBInput_10.getString(1);
							if (tmpContent_tDBInput_10 != null) {
								if (talendToDBList_tDBInput_10.contains(
										rsmd_tDBInput_10.getColumnTypeName(1).toUpperCase(java.util.Locale.ENGLISH))) {
									row15.USERDOC_SEQ = FormatterUtils.formatUnwithE(tmpContent_tDBInput_10);
								} else {
									row15.USERDOC_SEQ = tmpContent_tDBInput_10;
								}
							} else {
								row15.USERDOC_SEQ = null;
							}
						}
						if (colQtyInRs_tDBInput_10 < 2) {
							row15.USERDOC_SERIES = null;
						} else {

							row15.USERDOC_SERIES = rs_tDBInput_10.getBigDecimal(2);
							if (rs_tDBInput_10.wasNull()) {
								throw new RuntimeException("Null value in non-Nullable column");
							}
						}
						if (colQtyInRs_tDBInput_10 < 3) {
							row15.USERDOC_NBR = null;
						} else {

							row15.USERDOC_NBR = rs_tDBInput_10.getBigDecimal(3);
							if (rs_tDBInput_10.wasNull()) {
								throw new RuntimeException("Null value in non-Nullable column");
							}
						}
						if (colQtyInRs_tDBInput_10 < 4) {
							row15.DOC_ORI = null;
						} else {

							tmpContent_tDBInput_10 = rs_tDBInput_10.getString(4);
							if (tmpContent_tDBInput_10 != null) {
								if (talendToDBList_tDBInput_10.contains(
										rsmd_tDBInput_10.getColumnTypeName(4).toUpperCase(java.util.Locale.ENGLISH))) {
									row15.DOC_ORI = FormatterUtils.formatUnwithE(tmpContent_tDBInput_10);
								} else {
									row15.DOC_ORI = tmpContent_tDBInput_10;
								}
							} else {
								row15.DOC_ORI = null;
							}
						}
						if (colQtyInRs_tDBInput_10 < 5) {
							row15.DOC_SERIES = null;
						} else {

							row15.DOC_SERIES = rs_tDBInput_10.getBigDecimal(5);
							if (rs_tDBInput_10.wasNull()) {
								row15.DOC_SERIES = null;
							}
						}
						if (colQtyInRs_tDBInput_10 < 6) {
							row15.DOC_NBR = null;
						} else {

							row15.DOC_NBR = rs_tDBInput_10.getBigDecimal(6);
							if (rs_tDBInput_10.wasNull()) {
								row15.DOC_NBR = null;
							}
						}
						if (colQtyInRs_tDBInput_10 < 7) {
							row15.IND_IMPORT = null;
						} else {

							row15.IND_IMPORT = rs_tDBInput_10.getBigDecimal(7);
							if (rs_tDBInput_10.wasNull()) {
								row15.IND_IMPORT = null;
							}
						}
						if (colQtyInRs_tDBInput_10 < 8) {
							row15.USERDOC_TYPE = null;
						} else {

							tmpContent_tDBInput_10 = rs_tDBInput_10.getString(8);
							if (tmpContent_tDBInput_10 != null) {
								if (talendToDBList_tDBInput_10.contains(
										rsmd_tDBInput_10.getColumnTypeName(8).toUpperCase(java.util.Locale.ENGLISH))) {
									row15.USERDOC_TYPE = FormatterUtils.formatUnwithE(tmpContent_tDBInput_10);
								} else {
									row15.USERDOC_TYPE = tmpContent_tDBInput_10;
								}
							} else {
								row15.USERDOC_TYPE = null;
							}
						}
						if (colQtyInRs_tDBInput_10 < 9) {
							row15.LAW_CODE = null;
						} else {

							row15.LAW_CODE = rs_tDBInput_10.getBigDecimal(9);
							if (rs_tDBInput_10.wasNull()) {
								throw new RuntimeException("Null value in non-Nullable column");
							}
						}
						if (colQtyInRs_tDBInput_10 < 10) {
							row15.FILING_DATE = null;
						} else {

							row15.FILING_DATE = mssqlGTU_tDBInput_10.getDate(rsmd_tDBInput_10, rs_tDBInput_10, 10);

						}
						if (colQtyInRs_tDBInput_10 < 11) {
							row15.RECEPTION_DATE = null;
						} else {

							row15.RECEPTION_DATE = mssqlGTU_tDBInput_10.getDate(rsmd_tDBInput_10, rs_tDBInput_10, 11);

						}
						if (colQtyInRs_tDBInput_10 < 12) {
							row15.NOTES = null;
						} else {

							tmpContent_tDBInput_10 = rs_tDBInput_10.getString(12);
							if (tmpContent_tDBInput_10 != null) {
								if (talendToDBList_tDBInput_10.contains(
										rsmd_tDBInput_10.getColumnTypeName(12).toUpperCase(java.util.Locale.ENGLISH))) {
									row15.NOTES = FormatterUtils.formatUnwithE(tmpContent_tDBInput_10);
								} else {
									row15.NOTES = tmpContent_tDBInput_10;
								}
							} else {
								row15.NOTES = null;
							}
						}
						if (colQtyInRs_tDBInput_10 < 13) {
							row15.APPLICANT_NOTES = null;
						} else {

							tmpContent_tDBInput_10 = rs_tDBInput_10.getString(13);
							if (tmpContent_tDBInput_10 != null) {
								if (talendToDBList_tDBInput_10.contains(
										rsmd_tDBInput_10.getColumnTypeName(13).toUpperCase(java.util.Locale.ENGLISH))) {
									row15.APPLICANT_NOTES = FormatterUtils.formatUnwithE(tmpContent_tDBInput_10);
								} else {
									row15.APPLICANT_NOTES = tmpContent_tDBInput_10;
								}
							} else {
								row15.APPLICANT_NOTES = null;
							}
						}
						if (colQtyInRs_tDBInput_10 < 14) {
							row15.PERSON_NAME = null;
						} else {

							tmpContent_tDBInput_10 = rs_tDBInput_10.getString(14);
							if (tmpContent_tDBInput_10 != null) {
								if (talendToDBList_tDBInput_10.contains(
										rsmd_tDBInput_10.getColumnTypeName(14).toUpperCase(java.util.Locale.ENGLISH))) {
									row15.PERSON_NAME = FormatterUtils.formatUnwithE(tmpContent_tDBInput_10);
								} else {
									row15.PERSON_NAME = tmpContent_tDBInput_10;
								}
							} else {
								row15.PERSON_NAME = null;
							}
						}
						if (colQtyInRs_tDBInput_10 < 15) {
							row15.PERSON_NAME_LANG2 = null;
						} else {

							tmpContent_tDBInput_10 = rs_tDBInput_10.getString(15);
							if (tmpContent_tDBInput_10 != null) {
								if (talendToDBList_tDBInput_10.contains(
										rsmd_tDBInput_10.getColumnTypeName(15).toUpperCase(java.util.Locale.ENGLISH))) {
									row15.PERSON_NAME_LANG2 = FormatterUtils.formatUnwithE(tmpContent_tDBInput_10);
								} else {
									row15.PERSON_NAME_LANG2 = tmpContent_tDBInput_10;
								}
							} else {
								row15.PERSON_NAME_LANG2 = null;
							}
						}
						if (colQtyInRs_tDBInput_10 < 16) {
							row15.NATIONALITY_COUNTRY_CODE = null;
						} else {

							tmpContent_tDBInput_10 = rs_tDBInput_10.getString(16);
							if (tmpContent_tDBInput_10 != null) {
								if (talendToDBList_tDBInput_10.contains(
										rsmd_tDBInput_10.getColumnTypeName(16).toUpperCase(java.util.Locale.ENGLISH))) {
									row15.NATIONALITY_COUNTRY_CODE = FormatterUtils
											.formatUnwithE(tmpContent_tDBInput_10);
								} else {
									row15.NATIONALITY_COUNTRY_CODE = tmpContent_tDBInput_10;
								}
							} else {
								row15.NATIONALITY_COUNTRY_CODE = null;
							}
						}
						if (colQtyInRs_tDBInput_10 < 17) {
							row15.IND_COMPANY = null;
						} else {

							row15.IND_COMPANY = rs_tDBInput_10.getBigDecimal(17);
							if (rs_tDBInput_10.wasNull()) {
								row15.IND_COMPANY = null;
							}
						}
						if (colQtyInRs_tDBInput_10 < 18) {
							row15.LEGAL_NATURE = null;
						} else {

							tmpContent_tDBInput_10 = rs_tDBInput_10.getString(18);
							if (tmpContent_tDBInput_10 != null) {
								if (talendToDBList_tDBInput_10.contains(
										rsmd_tDBInput_10.getColumnTypeName(18).toUpperCase(java.util.Locale.ENGLISH))) {
									row15.LEGAL_NATURE = FormatterUtils.formatUnwithE(tmpContent_tDBInput_10);
								} else {
									row15.LEGAL_NATURE = tmpContent_tDBInput_10;
								}
							} else {
								row15.LEGAL_NATURE = null;
							}
						}
						if (colQtyInRs_tDBInput_10 < 19) {
							row15.LEGAL_NATURE_LANG2 = null;
						} else {

							tmpContent_tDBInput_10 = rs_tDBInput_10.getString(19);
							if (tmpContent_tDBInput_10 != null) {
								if (talendToDBList_tDBInput_10.contains(
										rsmd_tDBInput_10.getColumnTypeName(19).toUpperCase(java.util.Locale.ENGLISH))) {
									row15.LEGAL_NATURE_LANG2 = FormatterUtils.formatUnwithE(tmpContent_tDBInput_10);
								} else {
									row15.LEGAL_NATURE_LANG2 = tmpContent_tDBInput_10;
								}
							} else {
								row15.LEGAL_NATURE_LANG2 = null;
							}
						}
						if (colQtyInRs_tDBInput_10 < 20) {
							row15.LEGAL_ID_TYPE = null;
						} else {

							tmpContent_tDBInput_10 = rs_tDBInput_10.getString(20);
							if (tmpContent_tDBInput_10 != null) {
								if (talendToDBList_tDBInput_10.contains(
										rsmd_tDBInput_10.getColumnTypeName(20).toUpperCase(java.util.Locale.ENGLISH))) {
									row15.LEGAL_ID_TYPE = FormatterUtils.formatUnwithE(tmpContent_tDBInput_10);
								} else {
									row15.LEGAL_ID_TYPE = tmpContent_tDBInput_10;
								}
							} else {
								row15.LEGAL_ID_TYPE = null;
							}
						}
						if (colQtyInRs_tDBInput_10 < 21) {
							row15.LEGAL_ID_NBR = null;
						} else {

							row15.LEGAL_ID_NBR = rs_tDBInput_10.getBigDecimal(21);
							if (rs_tDBInput_10.wasNull()) {
								row15.LEGAL_ID_NBR = null;
							}
						}
						if (colQtyInRs_tDBInput_10 < 22) {
							row15.INDIVIDUAL_ID_TYPE = null;
						} else {

							tmpContent_tDBInput_10 = rs_tDBInput_10.getString(22);
							if (tmpContent_tDBInput_10 != null) {
								if (talendToDBList_tDBInput_10.contains(
										rsmd_tDBInput_10.getColumnTypeName(22).toUpperCase(java.util.Locale.ENGLISH))) {
									row15.INDIVIDUAL_ID_TYPE = FormatterUtils.formatUnwithE(tmpContent_tDBInput_10);
								} else {
									row15.INDIVIDUAL_ID_TYPE = tmpContent_tDBInput_10;
								}
							} else {
								row15.INDIVIDUAL_ID_TYPE = null;
							}
						}
						if (colQtyInRs_tDBInput_10 < 23) {
							row15.INDIVIDUAL_ID_NBR = null;
						} else {

							row15.INDIVIDUAL_ID_NBR = rs_tDBInput_10.getBigDecimal(23);
							if (rs_tDBInput_10.wasNull()) {
								row15.INDIVIDUAL_ID_NBR = null;
							}
						}
						if (colQtyInRs_tDBInput_10 < 24) {
							row15.RESIDENCE_COUNTRY_CODE = null;
						} else {

							tmpContent_tDBInput_10 = rs_tDBInput_10.getString(24);
							if (tmpContent_tDBInput_10 != null) {
								if (talendToDBList_tDBInput_10.contains(
										rsmd_tDBInput_10.getColumnTypeName(24).toUpperCase(java.util.Locale.ENGLISH))) {
									row15.RESIDENCE_COUNTRY_CODE = FormatterUtils.formatUnwithE(tmpContent_tDBInput_10);
								} else {
									row15.RESIDENCE_COUNTRY_CODE = tmpContent_tDBInput_10;
								}
							} else {
								row15.RESIDENCE_COUNTRY_CODE = null;
							}
						}
						if (colQtyInRs_tDBInput_10 < 25) {
							row15.STATE_NAME = null;
						} else {

							tmpContent_tDBInput_10 = rs_tDBInput_10.getString(25);
							if (tmpContent_tDBInput_10 != null) {
								if (talendToDBList_tDBInput_10.contains(
										rsmd_tDBInput_10.getColumnTypeName(25).toUpperCase(java.util.Locale.ENGLISH))) {
									row15.STATE_NAME = FormatterUtils.formatUnwithE(tmpContent_tDBInput_10);
								} else {
									row15.STATE_NAME = tmpContent_tDBInput_10;
								}
							} else {
								row15.STATE_NAME = null;
							}
						}
						if (colQtyInRs_tDBInput_10 < 26) {
							row15.STATE_CODE = null;
						} else {

							tmpContent_tDBInput_10 = rs_tDBInput_10.getString(26);
							if (tmpContent_tDBInput_10 != null) {
								if (talendToDBList_tDBInput_10.contains(
										rsmd_tDBInput_10.getColumnTypeName(26).toUpperCase(java.util.Locale.ENGLISH))) {
									row15.STATE_CODE = FormatterUtils.formatUnwithE(tmpContent_tDBInput_10);
								} else {
									row15.STATE_CODE = tmpContent_tDBInput_10;
								}
							} else {
								row15.STATE_CODE = null;
							}
						}
						if (colQtyInRs_tDBInput_10 < 27) {
							row15.CITY_NAME = null;
						} else {

							tmpContent_tDBInput_10 = rs_tDBInput_10.getString(27);
							if (tmpContent_tDBInput_10 != null) {
								if (talendToDBList_tDBInput_10.contains(
										rsmd_tDBInput_10.getColumnTypeName(27).toUpperCase(java.util.Locale.ENGLISH))) {
									row15.CITY_NAME = FormatterUtils.formatUnwithE(tmpContent_tDBInput_10);
								} else {
									row15.CITY_NAME = tmpContent_tDBInput_10;
								}
							} else {
								row15.CITY_NAME = null;
							}
						}
						if (colQtyInRs_tDBInput_10 < 28) {
							row15.CITY_CODE = null;
						} else {

							tmpContent_tDBInput_10 = rs_tDBInput_10.getString(28);
							if (tmpContent_tDBInput_10 != null) {
								if (talendToDBList_tDBInput_10.contains(
										rsmd_tDBInput_10.getColumnTypeName(28).toUpperCase(java.util.Locale.ENGLISH))) {
									row15.CITY_CODE = FormatterUtils.formatUnwithE(tmpContent_tDBInput_10);
								} else {
									row15.CITY_CODE = tmpContent_tDBInput_10;
								}
							} else {
								row15.CITY_CODE = null;
							}
						}
						if (colQtyInRs_tDBInput_10 < 29) {
							row15.ADDRESS_ZONE = null;
						} else {

							tmpContent_tDBInput_10 = rs_tDBInput_10.getString(29);
							if (tmpContent_tDBInput_10 != null) {
								if (talendToDBList_tDBInput_10.contains(
										rsmd_tDBInput_10.getColumnTypeName(29).toUpperCase(java.util.Locale.ENGLISH))) {
									row15.ADDRESS_ZONE = FormatterUtils.formatUnwithE(tmpContent_tDBInput_10);
								} else {
									row15.ADDRESS_ZONE = tmpContent_tDBInput_10;
								}
							} else {
								row15.ADDRESS_ZONE = null;
							}
						}
						if (colQtyInRs_tDBInput_10 < 30) {
							row15.ADDRESS_STREET = null;
						} else {

							tmpContent_tDBInput_10 = rs_tDBInput_10.getString(30);
							if (tmpContent_tDBInput_10 != null) {
								if (talendToDBList_tDBInput_10.contains(
										rsmd_tDBInput_10.getColumnTypeName(30).toUpperCase(java.util.Locale.ENGLISH))) {
									row15.ADDRESS_STREET = FormatterUtils.formatUnwithE(tmpContent_tDBInput_10);
								} else {
									row15.ADDRESS_STREET = tmpContent_tDBInput_10;
								}
							} else {
								row15.ADDRESS_STREET = null;
							}
						}
						if (colQtyInRs_tDBInput_10 < 31) {
							row15.ADDRESS_STREET_LANG2 = null;
						} else {

							tmpContent_tDBInput_10 = rs_tDBInput_10.getString(31);
							if (tmpContent_tDBInput_10 != null) {
								if (talendToDBList_tDBInput_10.contains(
										rsmd_tDBInput_10.getColumnTypeName(31).toUpperCase(java.util.Locale.ENGLISH))) {
									row15.ADDRESS_STREET_LANG2 = FormatterUtils.formatUnwithE(tmpContent_tDBInput_10);
								} else {
									row15.ADDRESS_STREET_LANG2 = tmpContent_tDBInput_10;
								}
							} else {
								row15.ADDRESS_STREET_LANG2 = null;
							}
						}
						if (colQtyInRs_tDBInput_10 < 32) {
							row15.ZIP_CODE = null;
						} else {

							tmpContent_tDBInput_10 = rs_tDBInput_10.getString(32);
							if (tmpContent_tDBInput_10 != null) {
								if (talendToDBList_tDBInput_10.contains(
										rsmd_tDBInput_10.getColumnTypeName(32).toUpperCase(java.util.Locale.ENGLISH))) {
									row15.ZIP_CODE = FormatterUtils.formatUnwithE(tmpContent_tDBInput_10);
								} else {
									row15.ZIP_CODE = tmpContent_tDBInput_10;
								}
							} else {
								row15.ZIP_CODE = null;
							}
						}
						if (colQtyInRs_tDBInput_10 < 33) {
							row15.EMAIL = null;
						} else {

							tmpContent_tDBInput_10 = rs_tDBInput_10.getString(33);
							if (tmpContent_tDBInput_10 != null) {
								if (talendToDBList_tDBInput_10.contains(
										rsmd_tDBInput_10.getColumnTypeName(33).toUpperCase(java.util.Locale.ENGLISH))) {
									row15.EMAIL = FormatterUtils.formatUnwithE(tmpContent_tDBInput_10);
								} else {
									row15.EMAIL = tmpContent_tDBInput_10;
								}
							} else {
								row15.EMAIL = null;
							}
						}
						if (colQtyInRs_tDBInput_10 < 34) {
							row15.TELEPHONE = null;
						} else {

							tmpContent_tDBInput_10 = rs_tDBInput_10.getString(34);
							if (tmpContent_tDBInput_10 != null) {
								if (talendToDBList_tDBInput_10.contains(
										rsmd_tDBInput_10.getColumnTypeName(34).toUpperCase(java.util.Locale.ENGLISH))) {
									row15.TELEPHONE = FormatterUtils.formatUnwithE(tmpContent_tDBInput_10);
								} else {
									row15.TELEPHONE = tmpContent_tDBInput_10;
								}
							} else {
								row15.TELEPHONE = null;
							}
						}
						if (colQtyInRs_tDBInput_10 < 35) {
							row15.PERSON_GROUP_CODE = null;
						} else {

							tmpContent_tDBInput_10 = rs_tDBInput_10.getString(35);
							if (tmpContent_tDBInput_10 != null) {
								if (talendToDBList_tDBInput_10.contains(
										rsmd_tDBInput_10.getColumnTypeName(35).toUpperCase(java.util.Locale.ENGLISH))) {
									row15.PERSON_GROUP_CODE = FormatterUtils.formatUnwithE(tmpContent_tDBInput_10);
								} else {
									row15.PERSON_GROUP_CODE = tmpContent_tDBInput_10;
								}
							} else {
								row15.PERSON_GROUP_CODE = null;
							}
						}
						if (colQtyInRs_tDBInput_10 < 36) {
							row15.CAPTURE_USER_ID = null;
						} else {

							row15.CAPTURE_USER_ID = rs_tDBInput_10.getBigDecimal(36);
							if (rs_tDBInput_10.wasNull()) {
								row15.CAPTURE_USER_ID = null;
							}
						}
						if (colQtyInRs_tDBInput_10 < 37) {
							row15.CAPTURE_DATE = null;
						} else {

							row15.CAPTURE_DATE = mssqlGTU_tDBInput_10.getDate(rsmd_tDBInput_10, rs_tDBInput_10, 37);

						}

						/**
						 * [tDBInput_10 begin ] stop
						 */

						/**
						 * [tDBInput_10 main ] start
						 */

						currentComponent = "tDBInput_10";

						tos_count_tDBInput_10++;

						/**
						 * [tDBInput_10 main ] stop
						 */

						/**
						 * [tDBInput_10 process_data_begin ] start
						 */

						currentComponent = "tDBInput_10";

						/**
						 * [tDBInput_10 process_data_begin ] stop
						 */

						/**
						 * [tAdvancedHash_row15 main ] start
						 */

						currentComponent = "tAdvancedHash_row15";

						if (execStat) {
							runStat.updateStatOnConnection(iterateId, 1, 1

									, "row15"

							);
						}

						row15Struct row15_HashRow = new row15Struct();

						row15_HashRow.USERDOC_SEQ = row15.USERDOC_SEQ;

						row15_HashRow.USERDOC_SERIES = row15.USERDOC_SERIES;

						row15_HashRow.USERDOC_NBR = row15.USERDOC_NBR;

						row15_HashRow.DOC_ORI = row15.DOC_ORI;

						row15_HashRow.DOC_SERIES = row15.DOC_SERIES;

						row15_HashRow.DOC_NBR = row15.DOC_NBR;

						row15_HashRow.IND_IMPORT = row15.IND_IMPORT;

						row15_HashRow.USERDOC_TYPE = row15.USERDOC_TYPE;

						row15_HashRow.LAW_CODE = row15.LAW_CODE;

						row15_HashRow.FILING_DATE = row15.FILING_DATE;

						row15_HashRow.RECEPTION_DATE = row15.RECEPTION_DATE;

						row15_HashRow.NOTES = row15.NOTES;

						row15_HashRow.APPLICANT_NOTES = row15.APPLICANT_NOTES;

						row15_HashRow.PERSON_NAME = row15.PERSON_NAME;

						row15_HashRow.PERSON_NAME_LANG2 = row15.PERSON_NAME_LANG2;

						row15_HashRow.NATIONALITY_COUNTRY_CODE = row15.NATIONALITY_COUNTRY_CODE;

						row15_HashRow.IND_COMPANY = row15.IND_COMPANY;

						row15_HashRow.LEGAL_NATURE = row15.LEGAL_NATURE;

						row15_HashRow.LEGAL_NATURE_LANG2 = row15.LEGAL_NATURE_LANG2;

						row15_HashRow.LEGAL_ID_TYPE = row15.LEGAL_ID_TYPE;

						row15_HashRow.LEGAL_ID_NBR = row15.LEGAL_ID_NBR;

						row15_HashRow.INDIVIDUAL_ID_TYPE = row15.INDIVIDUAL_ID_TYPE;

						row15_HashRow.INDIVIDUAL_ID_NBR = row15.INDIVIDUAL_ID_NBR;

						row15_HashRow.RESIDENCE_COUNTRY_CODE = row15.RESIDENCE_COUNTRY_CODE;

						row15_HashRow.STATE_NAME = row15.STATE_NAME;

						row15_HashRow.STATE_CODE = row15.STATE_CODE;

						row15_HashRow.CITY_NAME = row15.CITY_NAME;

						row15_HashRow.CITY_CODE = row15.CITY_CODE;

						row15_HashRow.ADDRESS_ZONE = row15.ADDRESS_ZONE;

						row15_HashRow.ADDRESS_STREET = row15.ADDRESS_STREET;

						row15_HashRow.ADDRESS_STREET_LANG2 = row15.ADDRESS_STREET_LANG2;

						row15_HashRow.ZIP_CODE = row15.ZIP_CODE;

						row15_HashRow.EMAIL = row15.EMAIL;

						row15_HashRow.TELEPHONE = row15.TELEPHONE;

						row15_HashRow.PERSON_GROUP_CODE = row15.PERSON_GROUP_CODE;

						row15_HashRow.CAPTURE_USER_ID = row15.CAPTURE_USER_ID;

						row15_HashRow.CAPTURE_DATE = row15.CAPTURE_DATE;

						tHash_Lookup_row15.put(row15_HashRow);

						tos_count_tAdvancedHash_row15++;

						/**
						 * [tAdvancedHash_row15 main ] stop
						 */

						/**
						 * [tAdvancedHash_row15 process_data_begin ] start
						 */

						currentComponent = "tAdvancedHash_row15";

						/**
						 * [tAdvancedHash_row15 process_data_begin ] stop
						 */

						/**
						 * [tAdvancedHash_row15 process_data_end ] start
						 */

						currentComponent = "tAdvancedHash_row15";

						/**
						 * [tAdvancedHash_row15 process_data_end ] stop
						 */

						/**
						 * [tDBInput_10 process_data_end ] start
						 */

						currentComponent = "tDBInput_10";

						/**
						 * [tDBInput_10 process_data_end ] stop
						 */

						/**
						 * [tDBInput_10 end ] start
						 */

						currentComponent = "tDBInput_10";

					}
				} finally {
					if (rs_tDBInput_10 != null) {
						rs_tDBInput_10.close();
					}
					if (stmt_tDBInput_10 != null) {
						stmt_tDBInput_10.close();
					}
				}
				globalMap.put("tDBInput_10_NB_LINE", nb_line_tDBInput_10);

				ok_Hash.put("tDBInput_10", true);
				end_Hash.put("tDBInput_10", System.currentTimeMillis());

				/**
				 * [tDBInput_10 end ] stop
				 */

				/**
				 * [tAdvancedHash_row15 end ] start
				 */

				currentComponent = "tAdvancedHash_row15";

				tHash_Lookup_row15.endPut();

				if (execStat) {
					runStat.updateStat(resourceMap, iterateId, 2, 0, "row15");
				}

				ok_Hash.put("tAdvancedHash_row15", true);
				end_Hash.put("tAdvancedHash_row15", System.currentTimeMillis());

				/**
				 * [tAdvancedHash_row15 end ] stop
				 */

			} // end the resume

		} catch (java.lang.Exception e) {

			TalendException te = new TalendException(e, currentComponent, globalMap);

			throw te;
		} catch (java.lang.Error error) {

			runStat.stopThreadStat();

			throw error;
		} finally {

			try {

				/**
				 * [tDBInput_10 finally ] start
				 */

				currentComponent = "tDBInput_10";

				/**
				 * [tDBInput_10 finally ] stop
				 */

				/**
				 * [tAdvancedHash_row15 finally ] start
				 */

				currentComponent = "tAdvancedHash_row15";

				/**
				 * [tAdvancedHash_row15 finally ] stop
				 */

			} catch (java.lang.Exception e) {
				// ignore
			} catch (java.lang.Error error) {
				// ignore
			}
			resourceMap = null;
		}

		globalMap.put("tDBInput_10_SUBPROCESS_STATE", 1);
	}

	public static class row22Struct implements routines.system.IPersistableComparableLookupRow<row22Struct> {
		final static byte[] commonByteArrayLock_WIPO_PROJECTS_E1a_Marc_Userdoc_a_interm = new byte[0];
		static byte[] commonByteArray_WIPO_PROJECTS_E1a_Marc_Userdoc_a_interm = new byte[0];
		protected static final int DEFAULT_HASHCODE = 1;
		protected static final int PRIME = 31;
		protected int hashCode = DEFAULT_HASHCODE;
		public boolean hashCodeDirty = true;

		public String loopKey;

		public String FILE_SEQ;

		public String getFILE_SEQ() {
			return this.FILE_SEQ;
		}

		public String FILE_TYPE;

		public String getFILE_TYPE() {
			return this.FILE_TYPE;
		}

		public BigDecimal FILE_SERIES;

		public BigDecimal getFILE_SERIES() {
			return this.FILE_SERIES;
		}

		public BigDecimal FILE_NBR;

		public BigDecimal getFILE_NBR() {
			return this.FILE_NBR;
		}

		public String DOC_ORI;

		public String getDOC_ORI() {
			return this.DOC_ORI;
		}

		public BigDecimal DOC_SERIES;

		public BigDecimal getDOC_SERIES() {
			return this.DOC_SERIES;
		}

		public BigDecimal DOC_NBR;

		public BigDecimal getDOC_NBR() {
			return this.DOC_NBR;
		}

		public BigDecimal IND_IMPORT;

		public BigDecimal getIND_IMPORT() {
			return this.IND_IMPORT;
		}

		public String APPLICATION_TYPE;

		public String getAPPLICATION_TYPE() {
			return this.APPLICATION_TYPE;
		}

		public String APPLICATION_SUBTYPE;

		public String getAPPLICATION_SUBTYPE() {
			return this.APPLICATION_SUBTYPE;
		}

		public BigDecimal LAW_CODE;

		public BigDecimal getLAW_CODE() {
			return this.LAW_CODE;
		}

		public java.util.Date FILING_DATE;

		public java.util.Date getFILING_DATE() {
			return this.FILING_DATE;
		}

		public java.util.Date RECEPTION_DATE;

		public java.util.Date getRECEPTION_DATE() {
			return this.RECEPTION_DATE;
		}

		public java.util.Date PUBLICATION_DATE;

		public java.util.Date getPUBLICATION_DATE() {
			return this.PUBLICATION_DATE;
		}

		public String PUBLICATION_NOTES;

		public String getPUBLICATION_NOTES() {
			return this.PUBLICATION_NOTES;
		}

		public BigDecimal IND_REGISTERED;

		public BigDecimal getIND_REGISTERED() {
			return this.IND_REGISTERED;
		}

		public String REGISTRATION_TYPE;

		public String getREGISTRATION_TYPE() {
			return this.REGISTRATION_TYPE;
		}

		public BigDecimal REGISTRATION_SERIES;

		public BigDecimal getREGISTRATION_SERIES() {
			return this.REGISTRATION_SERIES;
		}

		public BigDecimal REGISTRATION_NBR;

		public BigDecimal getREGISTRATION_NBR() {
			return this.REGISTRATION_NBR;
		}

		public String REGISTRATION_DUP;

		public String getREGISTRATION_DUP() {
			return this.REGISTRATION_DUP;
		}

		public java.util.Date REGISTRATION_DATE;

		public java.util.Date getREGISTRATION_DATE() {
			return this.REGISTRATION_DATE;
		}

		public java.util.Date ENTITLEMENT_DATE;

		public java.util.Date getENTITLEMENT_DATE() {
			return this.ENTITLEMENT_DATE;
		}

		public java.util.Date EXPIRATION_DATE;

		public java.util.Date getEXPIRATION_DATE() {
			return this.EXPIRATION_DATE;
		}

		public java.util.Date EXHIBITION_DATE;

		public java.util.Date getEXHIBITION_DATE() {
			return this.EXHIBITION_DATE;
		}

		public String EXHIBITION_NOTES;

		public String getEXHIBITION_NOTES() {
			return this.EXHIBITION_NOTES;
		}

		public String SIGN_TYPE;

		public String getSIGN_TYPE() {
			return this.SIGN_TYPE;
		}

		public String MARK_NAME;

		public String getMARK_NAME() {
			return this.MARK_NAME;
		}

		public String MARK_NAME_LANG2;

		public String getMARK_NAME_LANG2() {
			return this.MARK_NAME_LANG2;
		}

		public String MARK_TRANSLATION;

		public String getMARK_TRANSLATION() {
			return this.MARK_TRANSLATION;
		}

		public String MARK_TRANSLATION_LANG2;

		public String getMARK_TRANSLATION_LANG2() {
			return this.MARK_TRANSLATION_LANG2;
		}

		public String MARK_TRANSLITERATION;

		public String getMARK_TRANSLITERATION() {
			return this.MARK_TRANSLITERATION;
		}

		public String MARK_TRANSLITERATION_LANG2;

		public String getMARK_TRANSLITERATION_LANG2() {
			return this.MARK_TRANSLITERATION_LANG2;
		}

		public String SERIES_DESCRIPTION;

		public String getSERIES_DESCRIPTION() {
			return this.SERIES_DESCRIPTION;
		}

		public String COLOUR_DESCRIPTION;

		public String getCOLOUR_DESCRIPTION() {
			return this.COLOUR_DESCRIPTION;
		}

		public String COLOUR_DESCR_LANG2;

		public String getCOLOUR_DESCR_LANG2() {
			return this.COLOUR_DESCR_LANG2;
		}

		public String DISCLAIMER;

		public String getDISCLAIMER() {
			return this.DISCLAIMER;
		}

		public String DISCLAIMER_LANG2;

		public String getDISCLAIMER_LANG2() {
			return this.DISCLAIMER_LANG2;
		}

		public String BY_CONSENT;

		public String getBY_CONSENT() {
			return this.BY_CONSENT;
		}

		public String REGULATIONS;

		public String getREGULATIONS() {
			return this.REGULATIONS;
		}

		public String NOTES;

		public String getNOTES() {
			return this.NOTES;
		}

		public BigDecimal CAPTURE_USER_ID;

		public BigDecimal getCAPTURE_USER_ID() {
			return this.CAPTURE_USER_ID;
		}

		public java.util.Date CAPTURE_DATE;

		public java.util.Date getCAPTURE_DATE() {
			return this.CAPTURE_DATE;
		}

		public BigDecimal PUBLICATION_NBR;

		public BigDecimal getPUBLICATION_NBR() {
			return this.PUBLICATION_NBR;
		}

		public String PUBLICATION_SER;

		public String getPUBLICATION_SER() {
			return this.PUBLICATION_SER;
		}

		public String PUBLICATION_TYP;

		public String getPUBLICATION_TYP() {
			return this.PUBLICATION_TYP;
		}

		@Override
		public int hashCode() {
			if (this.hashCodeDirty) {
				final int prime = PRIME;
				int result = DEFAULT_HASHCODE;

				result = prime * result
						+ ((this.FILE_NBR == null) ? 0 : new Double(this.FILE_NBR.doubleValue()).hashCode());

				this.hashCode = result;
				this.hashCodeDirty = false;
			}
			return this.hashCode;
		}

		@Override
		public boolean equals(Object obj) {
			if (this == obj)
				return true;
			if (obj == null)
				return false;
			if (getClass() != obj.getClass())
				return false;
			final row22Struct other = (row22Struct) obj;

			if (this.FILE_NBR == null) {
				if (other.FILE_NBR != null)
					return false;

			} else if ((other.FILE_NBR == null) || (this.FILE_NBR.compareTo(other.FILE_NBR) != 0))

				return false;

			return true;
		}

		public void copyDataTo(row22Struct other) {

			other.FILE_SEQ = this.FILE_SEQ;
			other.FILE_TYPE = this.FILE_TYPE;
			other.FILE_SERIES = this.FILE_SERIES;
			other.FILE_NBR = this.FILE_NBR;
			other.DOC_ORI = this.DOC_ORI;
			other.DOC_SERIES = this.DOC_SERIES;
			other.DOC_NBR = this.DOC_NBR;
			other.IND_IMPORT = this.IND_IMPORT;
			other.APPLICATION_TYPE = this.APPLICATION_TYPE;
			other.APPLICATION_SUBTYPE = this.APPLICATION_SUBTYPE;
			other.LAW_CODE = this.LAW_CODE;
			other.FILING_DATE = this.FILING_DATE;
			other.RECEPTION_DATE = this.RECEPTION_DATE;
			other.PUBLICATION_DATE = this.PUBLICATION_DATE;
			other.PUBLICATION_NOTES = this.PUBLICATION_NOTES;
			other.IND_REGISTERED = this.IND_REGISTERED;
			other.REGISTRATION_TYPE = this.REGISTRATION_TYPE;
			other.REGISTRATION_SERIES = this.REGISTRATION_SERIES;
			other.REGISTRATION_NBR = this.REGISTRATION_NBR;
			other.REGISTRATION_DUP = this.REGISTRATION_DUP;
			other.REGISTRATION_DATE = this.REGISTRATION_DATE;
			other.ENTITLEMENT_DATE = this.ENTITLEMENT_DATE;
			other.EXPIRATION_DATE = this.EXPIRATION_DATE;
			other.EXHIBITION_DATE = this.EXHIBITION_DATE;
			other.EXHIBITION_NOTES = this.EXHIBITION_NOTES;
			other.SIGN_TYPE = this.SIGN_TYPE;
			other.MARK_NAME = this.MARK_NAME;
			other.MARK_NAME_LANG2 = this.MARK_NAME_LANG2;
			other.MARK_TRANSLATION = this.MARK_TRANSLATION;
			other.MARK_TRANSLATION_LANG2 = this.MARK_TRANSLATION_LANG2;
			other.MARK_TRANSLITERATION = this.MARK_TRANSLITERATION;
			other.MARK_TRANSLITERATION_LANG2 = this.MARK_TRANSLITERATION_LANG2;
			other.SERIES_DESCRIPTION = this.SERIES_DESCRIPTION;
			other.COLOUR_DESCRIPTION = this.COLOUR_DESCRIPTION;
			other.COLOUR_DESCR_LANG2 = this.COLOUR_DESCR_LANG2;
			other.DISCLAIMER = this.DISCLAIMER;
			other.DISCLAIMER_LANG2 = this.DISCLAIMER_LANG2;
			other.BY_CONSENT = this.BY_CONSENT;
			other.REGULATIONS = this.REGULATIONS;
			other.NOTES = this.NOTES;
			other.CAPTURE_USER_ID = this.CAPTURE_USER_ID;
			other.CAPTURE_DATE = this.CAPTURE_DATE;
			other.PUBLICATION_NBR = this.PUBLICATION_NBR;
			other.PUBLICATION_SER = this.PUBLICATION_SER;
			other.PUBLICATION_TYP = this.PUBLICATION_TYP;

		}

		public void copyKeysDataTo(row22Struct other) {

			other.FILE_NBR = this.FILE_NBR;

		}

		private String readString(DataInputStream dis, ObjectInputStream ois) throws IOException {
			String strReturn = null;
			int length = 0;
			length = dis.readInt();
			if (length == -1) {
				strReturn = null;
			} else {
				byte[] byteArray = new byte[length];
				dis.read(byteArray);
				strReturn = new String(byteArray, utf8Charset);
			}
			return strReturn;
		}

		private void writeString(String str, DataOutputStream dos, ObjectOutputStream oos) throws IOException {
			if (str == null) {
				dos.writeInt(-1);
			} else {
				byte[] byteArray = str.getBytes(utf8Charset);
				dos.writeInt(byteArray.length);
				dos.write(byteArray);
			}
		}

		private java.util.Date readDate(DataInputStream dis, ObjectInputStream ois) throws IOException {
			java.util.Date dateReturn = null;
			int length = 0;
			length = dis.readByte();
			if (length == -1) {
				dateReturn = null;
			} else {
				dateReturn = new Date(dis.readLong());
			}
			return dateReturn;
		}

		private void writeDate(java.util.Date date1, DataOutputStream dos, ObjectOutputStream oos) throws IOException {
			if (date1 == null) {
				dos.writeByte(-1);
			} else {
				dos.writeByte(0);
				dos.writeLong(date1.getTime());
			}
		}

		public void readKeysData(ObjectInputStream dis) {

			synchronized (commonByteArrayLock_WIPO_PROJECTS_E1a_Marc_Userdoc_a_interm) {

				try {

					int length = 0;

					this.FILE_NBR = (BigDecimal) dis.readObject();

				} catch (IOException e) {
					throw new RuntimeException(e);

				} catch (ClassNotFoundException eCNFE) {
					throw new RuntimeException(eCNFE);

				}

			}

		}

		public void writeKeysData(ObjectOutputStream dos) {
			try {

				// BigDecimal

				dos.writeObject(this.FILE_NBR);

			} catch (IOException e) {
				throw new RuntimeException(e);
			}

		}

		/**
		 * Fill Values data by reading ObjectInputStream.
		 */
		public void readValuesData(DataInputStream dis, ObjectInputStream ois) {
			try {

				int length = 0;

				this.FILE_SEQ = readString(dis, ois);

				this.FILE_TYPE = readString(dis, ois);

				this.FILE_SERIES = (BigDecimal) ois.readObject();

				this.DOC_ORI = readString(dis, ois);

				this.DOC_SERIES = (BigDecimal) ois.readObject();

				this.DOC_NBR = (BigDecimal) ois.readObject();

				this.IND_IMPORT = (BigDecimal) ois.readObject();

				this.APPLICATION_TYPE = readString(dis, ois);

				this.APPLICATION_SUBTYPE = readString(dis, ois);

				this.LAW_CODE = (BigDecimal) ois.readObject();

				this.FILING_DATE = readDate(dis, ois);

				this.RECEPTION_DATE = readDate(dis, ois);

				this.PUBLICATION_DATE = readDate(dis, ois);

				this.PUBLICATION_NOTES = readString(dis, ois);

				this.IND_REGISTERED = (BigDecimal) ois.readObject();

				this.REGISTRATION_TYPE = readString(dis, ois);

				this.REGISTRATION_SERIES = (BigDecimal) ois.readObject();

				this.REGISTRATION_NBR = (BigDecimal) ois.readObject();

				this.REGISTRATION_DUP = readString(dis, ois);

				this.REGISTRATION_DATE = readDate(dis, ois);

				this.ENTITLEMENT_DATE = readDate(dis, ois);

				this.EXPIRATION_DATE = readDate(dis, ois);

				this.EXHIBITION_DATE = readDate(dis, ois);

				this.EXHIBITION_NOTES = readString(dis, ois);

				this.SIGN_TYPE = readString(dis, ois);

				this.MARK_NAME = readString(dis, ois);

				this.MARK_NAME_LANG2 = readString(dis, ois);

				this.MARK_TRANSLATION = readString(dis, ois);

				this.MARK_TRANSLATION_LANG2 = readString(dis, ois);

				this.MARK_TRANSLITERATION = readString(dis, ois);

				this.MARK_TRANSLITERATION_LANG2 = readString(dis, ois);

				this.SERIES_DESCRIPTION = readString(dis, ois);

				this.COLOUR_DESCRIPTION = readString(dis, ois);

				this.COLOUR_DESCR_LANG2 = readString(dis, ois);

				this.DISCLAIMER = readString(dis, ois);

				this.DISCLAIMER_LANG2 = readString(dis, ois);

				this.BY_CONSENT = readString(dis, ois);

				this.REGULATIONS = readString(dis, ois);

				this.NOTES = readString(dis, ois);

				this.CAPTURE_USER_ID = (BigDecimal) ois.readObject();

				this.CAPTURE_DATE = readDate(dis, ois);

				this.PUBLICATION_NBR = (BigDecimal) ois.readObject();

				this.PUBLICATION_SER = readString(dis, ois);

				this.PUBLICATION_TYP = readString(dis, ois);

			} catch (IOException e) {
				throw new RuntimeException(e);

			} catch (ClassNotFoundException eCNFE) {
				throw new RuntimeException(eCNFE);

			}

		}

		/**
		 * Return a byte array which represents Values data.
		 */
		public void writeValuesData(DataOutputStream dos, ObjectOutputStream oos) {
			try {

				writeString(this.FILE_SEQ, dos, oos);

				writeString(this.FILE_TYPE, dos, oos);

				oos.writeObject(this.FILE_SERIES);

				writeString(this.DOC_ORI, dos, oos);

				oos.writeObject(this.DOC_SERIES);

				oos.writeObject(this.DOC_NBR);

				oos.writeObject(this.IND_IMPORT);

				writeString(this.APPLICATION_TYPE, dos, oos);

				writeString(this.APPLICATION_SUBTYPE, dos, oos);

				oos.writeObject(this.LAW_CODE);

				writeDate(this.FILING_DATE, dos, oos);

				writeDate(this.RECEPTION_DATE, dos, oos);

				writeDate(this.PUBLICATION_DATE, dos, oos);

				writeString(this.PUBLICATION_NOTES, dos, oos);

				oos.writeObject(this.IND_REGISTERED);

				writeString(this.REGISTRATION_TYPE, dos, oos);

				oos.writeObject(this.REGISTRATION_SERIES);

				oos.writeObject(this.REGISTRATION_NBR);

				writeString(this.REGISTRATION_DUP, dos, oos);

				writeDate(this.REGISTRATION_DATE, dos, oos);

				writeDate(this.ENTITLEMENT_DATE, dos, oos);

				writeDate(this.EXPIRATION_DATE, dos, oos);

				writeDate(this.EXHIBITION_DATE, dos, oos);

				writeString(this.EXHIBITION_NOTES, dos, oos);

				writeString(this.SIGN_TYPE, dos, oos);

				writeString(this.MARK_NAME, dos, oos);

				writeString(this.MARK_NAME_LANG2, dos, oos);

				writeString(this.MARK_TRANSLATION, dos, oos);

				writeString(this.MARK_TRANSLATION_LANG2, dos, oos);

				writeString(this.MARK_TRANSLITERATION, dos, oos);

				writeString(this.MARK_TRANSLITERATION_LANG2, dos, oos);

				writeString(this.SERIES_DESCRIPTION, dos, oos);

				writeString(this.COLOUR_DESCRIPTION, dos, oos);

				writeString(this.COLOUR_DESCR_LANG2, dos, oos);

				writeString(this.DISCLAIMER, dos, oos);

				writeString(this.DISCLAIMER_LANG2, dos, oos);

				writeString(this.BY_CONSENT, dos, oos);

				writeString(this.REGULATIONS, dos, oos);

				writeString(this.NOTES, dos, oos);

				oos.writeObject(this.CAPTURE_USER_ID);

				writeDate(this.CAPTURE_DATE, dos, oos);

				oos.writeObject(this.PUBLICATION_NBR);

				writeString(this.PUBLICATION_SER, dos, oos);

				writeString(this.PUBLICATION_TYP, dos, oos);

			} catch (IOException e) {
				throw new RuntimeException(e);
			}

		}

		public String toString() {

			StringBuilder sb = new StringBuilder();
			sb.append(super.toString());
			sb.append("[");
			sb.append("FILE_SEQ=" + FILE_SEQ);
			sb.append(",FILE_TYPE=" + FILE_TYPE);
			sb.append(",FILE_SERIES=" + String.valueOf(FILE_SERIES));
			sb.append(",FILE_NBR=" + String.valueOf(FILE_NBR));
			sb.append(",DOC_ORI=" + DOC_ORI);
			sb.append(",DOC_SERIES=" + String.valueOf(DOC_SERIES));
			sb.append(",DOC_NBR=" + String.valueOf(DOC_NBR));
			sb.append(",IND_IMPORT=" + String.valueOf(IND_IMPORT));
			sb.append(",APPLICATION_TYPE=" + APPLICATION_TYPE);
			sb.append(",APPLICATION_SUBTYPE=" + APPLICATION_SUBTYPE);
			sb.append(",LAW_CODE=" + String.valueOf(LAW_CODE));
			sb.append(",FILING_DATE=" + String.valueOf(FILING_DATE));
			sb.append(",RECEPTION_DATE=" + String.valueOf(RECEPTION_DATE));
			sb.append(",PUBLICATION_DATE=" + String.valueOf(PUBLICATION_DATE));
			sb.append(",PUBLICATION_NOTES=" + PUBLICATION_NOTES);
			sb.append(",IND_REGISTERED=" + String.valueOf(IND_REGISTERED));
			sb.append(",REGISTRATION_TYPE=" + REGISTRATION_TYPE);
			sb.append(",REGISTRATION_SERIES=" + String.valueOf(REGISTRATION_SERIES));
			sb.append(",REGISTRATION_NBR=" + String.valueOf(REGISTRATION_NBR));
			sb.append(",REGISTRATION_DUP=" + REGISTRATION_DUP);
			sb.append(",REGISTRATION_DATE=" + String.valueOf(REGISTRATION_DATE));
			sb.append(",ENTITLEMENT_DATE=" + String.valueOf(ENTITLEMENT_DATE));
			sb.append(",EXPIRATION_DATE=" + String.valueOf(EXPIRATION_DATE));
			sb.append(",EXHIBITION_DATE=" + String.valueOf(EXHIBITION_DATE));
			sb.append(",EXHIBITION_NOTES=" + EXHIBITION_NOTES);
			sb.append(",SIGN_TYPE=" + SIGN_TYPE);
			sb.append(",MARK_NAME=" + MARK_NAME);
			sb.append(",MARK_NAME_LANG2=" + MARK_NAME_LANG2);
			sb.append(",MARK_TRANSLATION=" + MARK_TRANSLATION);
			sb.append(",MARK_TRANSLATION_LANG2=" + MARK_TRANSLATION_LANG2);
			sb.append(",MARK_TRANSLITERATION=" + MARK_TRANSLITERATION);
			sb.append(",MARK_TRANSLITERATION_LANG2=" + MARK_TRANSLITERATION_LANG2);
			sb.append(",SERIES_DESCRIPTION=" + SERIES_DESCRIPTION);
			sb.append(",COLOUR_DESCRIPTION=" + COLOUR_DESCRIPTION);
			sb.append(",COLOUR_DESCR_LANG2=" + COLOUR_DESCR_LANG2);
			sb.append(",DISCLAIMER=" + DISCLAIMER);
			sb.append(",DISCLAIMER_LANG2=" + DISCLAIMER_LANG2);
			sb.append(",BY_CONSENT=" + BY_CONSENT);
			sb.append(",REGULATIONS=" + REGULATIONS);
			sb.append(",NOTES=" + NOTES);
			sb.append(",CAPTURE_USER_ID=" + String.valueOf(CAPTURE_USER_ID));
			sb.append(",CAPTURE_DATE=" + String.valueOf(CAPTURE_DATE));
			sb.append(",PUBLICATION_NBR=" + String.valueOf(PUBLICATION_NBR));
			sb.append(",PUBLICATION_SER=" + PUBLICATION_SER);
			sb.append(",PUBLICATION_TYP=" + PUBLICATION_TYP);
			sb.append("]");

			return sb.toString();
		}

		/**
		 * Compare keys
		 */
		public int compareTo(row22Struct other) {

			int returnValue = -1;

			returnValue = checkNullsAndCompare(this.FILE_NBR, other.FILE_NBR);
			if (returnValue != 0) {
				return returnValue;
			}

			return returnValue;
		}

		private int checkNullsAndCompare(Object object1, Object object2) {
			int returnValue = 0;
			if (object1 instanceof Comparable && object2 instanceof Comparable) {
				returnValue = ((Comparable) object1).compareTo(object2);
			} else if (object1 != null && object2 != null) {
				returnValue = compareStrings(object1.toString(), object2.toString());
			} else if (object1 == null && object2 != null) {
				returnValue = 1;
			} else if (object1 != null && object2 == null) {
				returnValue = -1;
			} else {
				returnValue = 0;
			}

			return returnValue;
		}

		private int compareStrings(String string1, String string2) {
			return string1.compareTo(string2);
		}

	}

	public void tDBInput_14Process(final java.util.Map<String, Object> globalMap) throws TalendException {
		globalMap.put("tDBInput_14_SUBPROCESS_STATE", 0);

		final boolean execStat = this.execStat;

		String iterateId = "";

		String currentComponent = "";
		java.util.Map<String, Object> resourceMap = new java.util.HashMap<String, Object>();

		try {
			// TDI-39566 avoid throwing an useless Exception
			boolean resumeIt = true;
			if (globalResumeTicket == false && resumeEntryMethodName != null) {
				String currentMethodName = new java.lang.Exception().getStackTrace()[0].getMethodName();
				resumeIt = resumeEntryMethodName.equals(currentMethodName);
			}
			if (resumeIt || globalResumeTicket) { // start the resume
				globalResumeTicket = true;

				row22Struct row22 = new row22Struct();

				/**
				 * [tAdvancedHash_row22 begin ] start
				 */

				ok_Hash.put("tAdvancedHash_row22", false);
				start_Hash.put("tAdvancedHash_row22", System.currentTimeMillis());

				currentComponent = "tAdvancedHash_row22";

				if (execStat) {
					runStat.updateStatOnConnection(resourceMap, iterateId, 0, 0, "row22");
				}

				int tos_count_tAdvancedHash_row22 = 0;

				// connection name:row22
				// source node:tDBInput_14 - inputs:(after_tDBInput_1) outputs:(row22,row22) |
				// target node:tAdvancedHash_row22 - inputs:(row22) outputs:()
				// linked node: tMap_6 - inputs:(row21,row15,row22) outputs:(ud_files)

				org.talend.designer.components.lookup.common.ICommonLookup.MATCHING_MODE matchingModeEnum_row22 = org.talend.designer.components.lookup.common.ICommonLookup.MATCHING_MODE.ALL_MATCHES;

				org.talend.designer.components.lookup.memory.AdvancedMemoryLookup<row22Struct> tHash_Lookup_row22 = org.talend.designer.components.lookup.memory.AdvancedMemoryLookup
						.<row22Struct>getLookup(matchingModeEnum_row22);

				globalMap.put("tHash_Lookup_row22", tHash_Lookup_row22);

				/**
				 * [tAdvancedHash_row22 begin ] stop
				 */

				/**
				 * [tDBInput_14 begin ] start
				 */

				ok_Hash.put("tDBInput_14", false);
				start_Hash.put("tDBInput_14", System.currentTimeMillis());

				currentComponent = "tDBInput_14";

				int tos_count_tDBInput_14 = 0;

				org.talend.designer.components.util.mssql.MSSqlGenerateTimestampUtil mssqlGTU_tDBInput_14 = org.talend.designer.components.util.mssql.MSSqlUtilFactory
						.getMSSqlGenerateTimestampUtil();

				java.util.List<String> talendToDBList_tDBInput_14 = new java.util.ArrayList();
				String[] talendToDBArray_tDBInput_14 = new String[] { "FLOAT", "NUMERIC", "NUMERIC IDENTITY", "DECIMAL",
						"DECIMAL IDENTITY", "REAL" };
				java.util.Collections.addAll(talendToDBList_tDBInput_14, talendToDBArray_tDBInput_14);
				int nb_line_tDBInput_14 = 0;
				java.sql.Connection conn_tDBInput_14 = null;
				conn_tDBInput_14 = (java.sql.Connection) globalMap.get("conn_tDBConnection_1");

				String dbschema_tDBInput_14 = (String) globalMap.get("dbschema_tDBConnection_1");

				java.sql.Statement stmt_tDBInput_14 = conn_tDBInput_14.createStatement();

				String dbquery_tDBInput_14 = "SELECT dbo.VW_IMPORT_MARK.FILE_SEQ,\n		dbo.VW_IMPORT_MARK.FILE_TYPE,\n		dbo.VW_IMPORT_MARK.FILE_SERIES,\n		dbo.VW_IMPORT_M"
						+ "ARK.FILE_NBR,\n		dbo.VW_IMPORT_MARK.DOC_ORI,\n		dbo.VW_IMPORT_MARK.DOC_SERIES,\n		dbo.VW_IMPORT_MARK.DOC_NBR,\n		dbo.VW_IMPO"
						+ "RT_MARK.IND_IMPORT,\n		dbo.VW_IMPORT_MARK.APPLICATION_TYPE,\n		dbo.VW_IMPORT_MARK.APPLICATION_SUBTYPE,\n		dbo.VW_IMPORT_MAR"
						+ "K.LAW_CODE,\n		dbo.VW_IMPORT_MARK.FILING_DATE,\n		dbo.VW_IMPORT_MARK.RECEPTION_DATE,\n		dbo.VW_IMPORT_MARK.PUBLICATION_DATE"
						+ ",\n		dbo.VW_IMPORT_MARK.PUBLICATION_NOTES,\n		dbo.VW_IMPORT_MARK.IND_REGISTERED,\n		dbo.VW_IMPORT_MARK.REGISTRATION_TYPE,\n	"
						+ "	dbo.VW_IMPORT_MARK.REGISTRATION_SERIES,\n		dbo.VW_IMPORT_MARK.REGISTRATION_NBR,\n		dbo.VW_IMPORT_MARK.REGISTRATION_DUP,\n	"
						+ "	dbo.VW_IMPORT_MARK.REGISTRATION_DATE,\n		dbo.VW_IMPORT_MARK.ENTITLEMENT_DATE,\n		dbo.VW_IMPORT_MARK.EXPIRATION_DATE,\n		db"
						+ "o.VW_IMPORT_MARK.EXHIBITION_DATE,\n		dbo.VW_IMPORT_MARK.EXHIBITION_NOTES,\n		dbo.VW_IMPORT_MARK.SIGN_TYPE,\n		dbo.VW_IMPORT"
						+ "_MARK.MARK_NAME,\n		dbo.VW_IMPORT_MARK.MARK_NAME_LANG2,\n		dbo.VW_IMPORT_MARK.MARK_TRANSLATION,\n		dbo.VW_IMPORT_MARK.MARK_"
						+ "TRANSLATION_LANG2,\n		dbo.VW_IMPORT_MARK.MARK_TRANSLITERATION,\n		dbo.VW_IMPORT_MARK.MARK_TRANSLITERATION_LANG2,\n		dbo.VW_"
						+ "IMPORT_MARK.SERIES_DESCRIPTION,\n		dbo.VW_IMPORT_MARK.COLOUR_DESCRIPTION,\n		dbo.VW_IMPORT_MARK.COLOUR_DESCR_LANG2,\n		dbo."
						+ "VW_IMPORT_MARK.DISCLAIMER,\n		dbo.VW_IMPORT_MARK.DISCLAIMER_LANG2,\n		dbo.VW_IMPORT_MARK.BY_CONSENT,\n		dbo.VW_IMPORT_MARK."
						+ "REGULATIONS,\n		dbo.VW_IMPORT_MARK.NOTES,\n		dbo.VW_IMPORT_MARK.CAPTURE_USER_ID,\n		dbo.VW_IMPORT_MARK.CAPTURE_DATE,\n		dbo."
						+ "VW_IMPORT_MARK.PUBLICATION_NBR,\n		dbo.VW_IMPORT_MARK.PUBLICATION_SER,\n		dbo.VW_IMPORT_MARK.PUBLICATION_TYP\nFROM	dbo.VW_I"
						+ "MPORT_MARK";

				globalMap.put("tDBInput_14_QUERY", dbquery_tDBInput_14);
				java.sql.ResultSet rs_tDBInput_14 = null;

				try {
					rs_tDBInput_14 = stmt_tDBInput_14.executeQuery(dbquery_tDBInput_14);
					java.sql.ResultSetMetaData rsmd_tDBInput_14 = rs_tDBInput_14.getMetaData();
					int colQtyInRs_tDBInput_14 = rsmd_tDBInput_14.getColumnCount();

					String tmpContent_tDBInput_14 = null;

					while (rs_tDBInput_14.next()) {
						nb_line_tDBInput_14++;

						if (colQtyInRs_tDBInput_14 < 1) {
							row22.FILE_SEQ = null;
						} else {

							tmpContent_tDBInput_14 = rs_tDBInput_14.getString(1);
							if (tmpContent_tDBInput_14 != null) {
								if (talendToDBList_tDBInput_14.contains(
										rsmd_tDBInput_14.getColumnTypeName(1).toUpperCase(java.util.Locale.ENGLISH))) {
									row22.FILE_SEQ = FormatterUtils.formatUnwithE(tmpContent_tDBInput_14);
								} else {
									row22.FILE_SEQ = tmpContent_tDBInput_14;
								}
							} else {
								row22.FILE_SEQ = null;
							}
						}
						if (colQtyInRs_tDBInput_14 < 2) {
							row22.FILE_TYPE = null;
						} else {

							tmpContent_tDBInput_14 = rs_tDBInput_14.getString(2);
							if (tmpContent_tDBInput_14 != null) {
								if (talendToDBList_tDBInput_14.contains(
										rsmd_tDBInput_14.getColumnTypeName(2).toUpperCase(java.util.Locale.ENGLISH))) {
									row22.FILE_TYPE = FormatterUtils.formatUnwithE(tmpContent_tDBInput_14);
								} else {
									row22.FILE_TYPE = tmpContent_tDBInput_14;
								}
							} else {
								row22.FILE_TYPE = null;
							}
						}
						if (colQtyInRs_tDBInput_14 < 3) {
							row22.FILE_SERIES = null;
						} else {

							row22.FILE_SERIES = rs_tDBInput_14.getBigDecimal(3);
							if (rs_tDBInput_14.wasNull()) {
								throw new RuntimeException("Null value in non-Nullable column");
							}
						}
						if (colQtyInRs_tDBInput_14 < 4) {
							row22.FILE_NBR = null;
						} else {

							row22.FILE_NBR = rs_tDBInput_14.getBigDecimal(4);
							if (rs_tDBInput_14.wasNull()) {
								throw new RuntimeException("Null value in non-Nullable column");
							}
						}
						if (colQtyInRs_tDBInput_14 < 5) {
							row22.DOC_ORI = null;
						} else {

							tmpContent_tDBInput_14 = rs_tDBInput_14.getString(5);
							if (tmpContent_tDBInput_14 != null) {
								if (talendToDBList_tDBInput_14.contains(
										rsmd_tDBInput_14.getColumnTypeName(5).toUpperCase(java.util.Locale.ENGLISH))) {
									row22.DOC_ORI = FormatterUtils.formatUnwithE(tmpContent_tDBInput_14);
								} else {
									row22.DOC_ORI = tmpContent_tDBInput_14;
								}
							} else {
								row22.DOC_ORI = null;
							}
						}
						if (colQtyInRs_tDBInput_14 < 6) {
							row22.DOC_SERIES = null;
						} else {

							row22.DOC_SERIES = rs_tDBInput_14.getBigDecimal(6);
							if (rs_tDBInput_14.wasNull()) {
								row22.DOC_SERIES = null;
							}
						}
						if (colQtyInRs_tDBInput_14 < 7) {
							row22.DOC_NBR = null;
						} else {

							row22.DOC_NBR = rs_tDBInput_14.getBigDecimal(7);
							if (rs_tDBInput_14.wasNull()) {
								row22.DOC_NBR = null;
							}
						}
						if (colQtyInRs_tDBInput_14 < 8) {
							row22.IND_IMPORT = null;
						} else {

							row22.IND_IMPORT = rs_tDBInput_14.getBigDecimal(8);
							if (rs_tDBInput_14.wasNull()) {
								row22.IND_IMPORT = null;
							}
						}
						if (colQtyInRs_tDBInput_14 < 9) {
							row22.APPLICATION_TYPE = null;
						} else {

							tmpContent_tDBInput_14 = rs_tDBInput_14.getString(9);
							if (tmpContent_tDBInput_14 != null) {
								if (talendToDBList_tDBInput_14.contains(
										rsmd_tDBInput_14.getColumnTypeName(9).toUpperCase(java.util.Locale.ENGLISH))) {
									row22.APPLICATION_TYPE = FormatterUtils.formatUnwithE(tmpContent_tDBInput_14);
								} else {
									row22.APPLICATION_TYPE = tmpContent_tDBInput_14;
								}
							} else {
								row22.APPLICATION_TYPE = null;
							}
						}
						if (colQtyInRs_tDBInput_14 < 10) {
							row22.APPLICATION_SUBTYPE = null;
						} else {

							tmpContent_tDBInput_14 = rs_tDBInput_14.getString(10);
							if (tmpContent_tDBInput_14 != null) {
								if (talendToDBList_tDBInput_14.contains(
										rsmd_tDBInput_14.getColumnTypeName(10).toUpperCase(java.util.Locale.ENGLISH))) {
									row22.APPLICATION_SUBTYPE = FormatterUtils.formatUnwithE(tmpContent_tDBInput_14);
								} else {
									row22.APPLICATION_SUBTYPE = tmpContent_tDBInput_14;
								}
							} else {
								row22.APPLICATION_SUBTYPE = null;
							}
						}
						if (colQtyInRs_tDBInput_14 < 11) {
							row22.LAW_CODE = null;
						} else {

							row22.LAW_CODE = rs_tDBInput_14.getBigDecimal(11);
							if (rs_tDBInput_14.wasNull()) {
								throw new RuntimeException("Null value in non-Nullable column");
							}
						}
						if (colQtyInRs_tDBInput_14 < 12) {
							row22.FILING_DATE = null;
						} else {

							row22.FILING_DATE = mssqlGTU_tDBInput_14.getDate(rsmd_tDBInput_14, rs_tDBInput_14, 12);

						}
						if (colQtyInRs_tDBInput_14 < 13) {
							row22.RECEPTION_DATE = null;
						} else {

							row22.RECEPTION_DATE = mssqlGTU_tDBInput_14.getDate(rsmd_tDBInput_14, rs_tDBInput_14, 13);

						}
						if (colQtyInRs_tDBInput_14 < 14) {
							row22.PUBLICATION_DATE = null;
						} else {

							row22.PUBLICATION_DATE = mssqlGTU_tDBInput_14.getDate(rsmd_tDBInput_14, rs_tDBInput_14, 14);

						}
						if (colQtyInRs_tDBInput_14 < 15) {
							row22.PUBLICATION_NOTES = null;
						} else {

							tmpContent_tDBInput_14 = rs_tDBInput_14.getString(15);
							if (tmpContent_tDBInput_14 != null) {
								if (talendToDBList_tDBInput_14.contains(
										rsmd_tDBInput_14.getColumnTypeName(15).toUpperCase(java.util.Locale.ENGLISH))) {
									row22.PUBLICATION_NOTES = FormatterUtils.formatUnwithE(tmpContent_tDBInput_14);
								} else {
									row22.PUBLICATION_NOTES = tmpContent_tDBInput_14;
								}
							} else {
								row22.PUBLICATION_NOTES = null;
							}
						}
						if (colQtyInRs_tDBInput_14 < 16) {
							row22.IND_REGISTERED = null;
						} else {

							row22.IND_REGISTERED = rs_tDBInput_14.getBigDecimal(16);
							if (rs_tDBInput_14.wasNull()) {
								row22.IND_REGISTERED = null;
							}
						}
						if (colQtyInRs_tDBInput_14 < 17) {
							row22.REGISTRATION_TYPE = null;
						} else {

							tmpContent_tDBInput_14 = rs_tDBInput_14.getString(17);
							if (tmpContent_tDBInput_14 != null) {
								if (talendToDBList_tDBInput_14.contains(
										rsmd_tDBInput_14.getColumnTypeName(17).toUpperCase(java.util.Locale.ENGLISH))) {
									row22.REGISTRATION_TYPE = FormatterUtils.formatUnwithE(tmpContent_tDBInput_14);
								} else {
									row22.REGISTRATION_TYPE = tmpContent_tDBInput_14;
								}
							} else {
								row22.REGISTRATION_TYPE = null;
							}
						}
						if (colQtyInRs_tDBInput_14 < 18) {
							row22.REGISTRATION_SERIES = null;
						} else {

							row22.REGISTRATION_SERIES = rs_tDBInput_14.getBigDecimal(18);
							if (rs_tDBInput_14.wasNull()) {
								row22.REGISTRATION_SERIES = null;
							}
						}
						if (colQtyInRs_tDBInput_14 < 19) {
							row22.REGISTRATION_NBR = null;
						} else {

							row22.REGISTRATION_NBR = rs_tDBInput_14.getBigDecimal(19);
							if (rs_tDBInput_14.wasNull()) {
								row22.REGISTRATION_NBR = null;
							}
						}
						if (colQtyInRs_tDBInput_14 < 20) {
							row22.REGISTRATION_DUP = null;
						} else {

							tmpContent_tDBInput_14 = rs_tDBInput_14.getString(20);
							if (tmpContent_tDBInput_14 != null) {
								if (talendToDBList_tDBInput_14.contains(
										rsmd_tDBInput_14.getColumnTypeName(20).toUpperCase(java.util.Locale.ENGLISH))) {
									row22.REGISTRATION_DUP = FormatterUtils.formatUnwithE(tmpContent_tDBInput_14);
								} else {
									row22.REGISTRATION_DUP = tmpContent_tDBInput_14;
								}
							} else {
								row22.REGISTRATION_DUP = null;
							}
						}
						if (colQtyInRs_tDBInput_14 < 21) {
							row22.REGISTRATION_DATE = null;
						} else {

							row22.REGISTRATION_DATE = mssqlGTU_tDBInput_14.getDate(rsmd_tDBInput_14, rs_tDBInput_14,
									21);

						}
						if (colQtyInRs_tDBInput_14 < 22) {
							row22.ENTITLEMENT_DATE = null;
						} else {

							row22.ENTITLEMENT_DATE = mssqlGTU_tDBInput_14.getDate(rsmd_tDBInput_14, rs_tDBInput_14, 22);

						}
						if (colQtyInRs_tDBInput_14 < 23) {
							row22.EXPIRATION_DATE = null;
						} else {

							row22.EXPIRATION_DATE = mssqlGTU_tDBInput_14.getDate(rsmd_tDBInput_14, rs_tDBInput_14, 23);

						}
						if (colQtyInRs_tDBInput_14 < 24) {
							row22.EXHIBITION_DATE = null;
						} else {

							row22.EXHIBITION_DATE = mssqlGTU_tDBInput_14.getDate(rsmd_tDBInput_14, rs_tDBInput_14, 24);

						}
						if (colQtyInRs_tDBInput_14 < 25) {
							row22.EXHIBITION_NOTES = null;
						} else {

							tmpContent_tDBInput_14 = rs_tDBInput_14.getString(25);
							if (tmpContent_tDBInput_14 != null) {
								if (talendToDBList_tDBInput_14.contains(
										rsmd_tDBInput_14.getColumnTypeName(25).toUpperCase(java.util.Locale.ENGLISH))) {
									row22.EXHIBITION_NOTES = FormatterUtils.formatUnwithE(tmpContent_tDBInput_14);
								} else {
									row22.EXHIBITION_NOTES = tmpContent_tDBInput_14;
								}
							} else {
								row22.EXHIBITION_NOTES = null;
							}
						}
						if (colQtyInRs_tDBInput_14 < 26) {
							row22.SIGN_TYPE = null;
						} else {

							tmpContent_tDBInput_14 = rs_tDBInput_14.getString(26);
							if (tmpContent_tDBInput_14 != null) {
								if (talendToDBList_tDBInput_14.contains(
										rsmd_tDBInput_14.getColumnTypeName(26).toUpperCase(java.util.Locale.ENGLISH))) {
									row22.SIGN_TYPE = FormatterUtils.formatUnwithE(tmpContent_tDBInput_14);
								} else {
									row22.SIGN_TYPE = tmpContent_tDBInput_14;
								}
							} else {
								row22.SIGN_TYPE = null;
							}
						}
						if (colQtyInRs_tDBInput_14 < 27) {
							row22.MARK_NAME = null;
						} else {

							tmpContent_tDBInput_14 = rs_tDBInput_14.getString(27);
							if (tmpContent_tDBInput_14 != null) {
								if (talendToDBList_tDBInput_14.contains(
										rsmd_tDBInput_14.getColumnTypeName(27).toUpperCase(java.util.Locale.ENGLISH))) {
									row22.MARK_NAME = FormatterUtils.formatUnwithE(tmpContent_tDBInput_14);
								} else {
									row22.MARK_NAME = tmpContent_tDBInput_14;
								}
							} else {
								row22.MARK_NAME = null;
							}
						}
						if (colQtyInRs_tDBInput_14 < 28) {
							row22.MARK_NAME_LANG2 = null;
						} else {

							tmpContent_tDBInput_14 = rs_tDBInput_14.getString(28);
							if (tmpContent_tDBInput_14 != null) {
								if (talendToDBList_tDBInput_14.contains(
										rsmd_tDBInput_14.getColumnTypeName(28).toUpperCase(java.util.Locale.ENGLISH))) {
									row22.MARK_NAME_LANG2 = FormatterUtils.formatUnwithE(tmpContent_tDBInput_14);
								} else {
									row22.MARK_NAME_LANG2 = tmpContent_tDBInput_14;
								}
							} else {
								row22.MARK_NAME_LANG2 = null;
							}
						}
						if (colQtyInRs_tDBInput_14 < 29) {
							row22.MARK_TRANSLATION = null;
						} else {

							tmpContent_tDBInput_14 = rs_tDBInput_14.getString(29);
							if (tmpContent_tDBInput_14 != null) {
								if (talendToDBList_tDBInput_14.contains(
										rsmd_tDBInput_14.getColumnTypeName(29).toUpperCase(java.util.Locale.ENGLISH))) {
									row22.MARK_TRANSLATION = FormatterUtils.formatUnwithE(tmpContent_tDBInput_14);
								} else {
									row22.MARK_TRANSLATION = tmpContent_tDBInput_14;
								}
							} else {
								row22.MARK_TRANSLATION = null;
							}
						}
						if (colQtyInRs_tDBInput_14 < 30) {
							row22.MARK_TRANSLATION_LANG2 = null;
						} else {

							tmpContent_tDBInput_14 = rs_tDBInput_14.getString(30);
							if (tmpContent_tDBInput_14 != null) {
								if (talendToDBList_tDBInput_14.contains(
										rsmd_tDBInput_14.getColumnTypeName(30).toUpperCase(java.util.Locale.ENGLISH))) {
									row22.MARK_TRANSLATION_LANG2 = FormatterUtils.formatUnwithE(tmpContent_tDBInput_14);
								} else {
									row22.MARK_TRANSLATION_LANG2 = tmpContent_tDBInput_14;
								}
							} else {
								row22.MARK_TRANSLATION_LANG2 = null;
							}
						}
						if (colQtyInRs_tDBInput_14 < 31) {
							row22.MARK_TRANSLITERATION = null;
						} else {

							tmpContent_tDBInput_14 = rs_tDBInput_14.getString(31);
							if (tmpContent_tDBInput_14 != null) {
								if (talendToDBList_tDBInput_14.contains(
										rsmd_tDBInput_14.getColumnTypeName(31).toUpperCase(java.util.Locale.ENGLISH))) {
									row22.MARK_TRANSLITERATION = FormatterUtils.formatUnwithE(tmpContent_tDBInput_14);
								} else {
									row22.MARK_TRANSLITERATION = tmpContent_tDBInput_14;
								}
							} else {
								row22.MARK_TRANSLITERATION = null;
							}
						}
						if (colQtyInRs_tDBInput_14 < 32) {
							row22.MARK_TRANSLITERATION_LANG2 = null;
						} else {

							tmpContent_tDBInput_14 = rs_tDBInput_14.getString(32);
							if (tmpContent_tDBInput_14 != null) {
								if (talendToDBList_tDBInput_14.contains(
										rsmd_tDBInput_14.getColumnTypeName(32).toUpperCase(java.util.Locale.ENGLISH))) {
									row22.MARK_TRANSLITERATION_LANG2 = FormatterUtils
											.formatUnwithE(tmpContent_tDBInput_14);
								} else {
									row22.MARK_TRANSLITERATION_LANG2 = tmpContent_tDBInput_14;
								}
							} else {
								row22.MARK_TRANSLITERATION_LANG2 = null;
							}
						}
						if (colQtyInRs_tDBInput_14 < 33) {
							row22.SERIES_DESCRIPTION = null;
						} else {

							tmpContent_tDBInput_14 = rs_tDBInput_14.getString(33);
							if (tmpContent_tDBInput_14 != null) {
								if (talendToDBList_tDBInput_14.contains(
										rsmd_tDBInput_14.getColumnTypeName(33).toUpperCase(java.util.Locale.ENGLISH))) {
									row22.SERIES_DESCRIPTION = FormatterUtils.formatUnwithE(tmpContent_tDBInput_14);
								} else {
									row22.SERIES_DESCRIPTION = tmpContent_tDBInput_14;
								}
							} else {
								row22.SERIES_DESCRIPTION = null;
							}
						}
						if (colQtyInRs_tDBInput_14 < 34) {
							row22.COLOUR_DESCRIPTION = null;
						} else {

							tmpContent_tDBInput_14 = rs_tDBInput_14.getString(34);
							if (tmpContent_tDBInput_14 != null) {
								if (talendToDBList_tDBInput_14.contains(
										rsmd_tDBInput_14.getColumnTypeName(34).toUpperCase(java.util.Locale.ENGLISH))) {
									row22.COLOUR_DESCRIPTION = FormatterUtils.formatUnwithE(tmpContent_tDBInput_14);
								} else {
									row22.COLOUR_DESCRIPTION = tmpContent_tDBInput_14;
								}
							} else {
								row22.COLOUR_DESCRIPTION = null;
							}
						}
						if (colQtyInRs_tDBInput_14 < 35) {
							row22.COLOUR_DESCR_LANG2 = null;
						} else {

							tmpContent_tDBInput_14 = rs_tDBInput_14.getString(35);
							if (tmpContent_tDBInput_14 != null) {
								if (talendToDBList_tDBInput_14.contains(
										rsmd_tDBInput_14.getColumnTypeName(35).toUpperCase(java.util.Locale.ENGLISH))) {
									row22.COLOUR_DESCR_LANG2 = FormatterUtils.formatUnwithE(tmpContent_tDBInput_14);
								} else {
									row22.COLOUR_DESCR_LANG2 = tmpContent_tDBInput_14;
								}
							} else {
								row22.COLOUR_DESCR_LANG2 = null;
							}
						}
						if (colQtyInRs_tDBInput_14 < 36) {
							row22.DISCLAIMER = null;
						} else {

							tmpContent_tDBInput_14 = rs_tDBInput_14.getString(36);
							if (tmpContent_tDBInput_14 != null) {
								if (talendToDBList_tDBInput_14.contains(
										rsmd_tDBInput_14.getColumnTypeName(36).toUpperCase(java.util.Locale.ENGLISH))) {
									row22.DISCLAIMER = FormatterUtils.formatUnwithE(tmpContent_tDBInput_14);
								} else {
									row22.DISCLAIMER = tmpContent_tDBInput_14;
								}
							} else {
								row22.DISCLAIMER = null;
							}
						}
						if (colQtyInRs_tDBInput_14 < 37) {
							row22.DISCLAIMER_LANG2 = null;
						} else {

							tmpContent_tDBInput_14 = rs_tDBInput_14.getString(37);
							if (tmpContent_tDBInput_14 != null) {
								if (talendToDBList_tDBInput_14.contains(
										rsmd_tDBInput_14.getColumnTypeName(37).toUpperCase(java.util.Locale.ENGLISH))) {
									row22.DISCLAIMER_LANG2 = FormatterUtils.formatUnwithE(tmpContent_tDBInput_14);
								} else {
									row22.DISCLAIMER_LANG2 = tmpContent_tDBInput_14;
								}
							} else {
								row22.DISCLAIMER_LANG2 = null;
							}
						}
						if (colQtyInRs_tDBInput_14 < 38) {
							row22.BY_CONSENT = null;
						} else {

							tmpContent_tDBInput_14 = rs_tDBInput_14.getString(38);
							if (tmpContent_tDBInput_14 != null) {
								if (talendToDBList_tDBInput_14.contains(
										rsmd_tDBInput_14.getColumnTypeName(38).toUpperCase(java.util.Locale.ENGLISH))) {
									row22.BY_CONSENT = FormatterUtils.formatUnwithE(tmpContent_tDBInput_14);
								} else {
									row22.BY_CONSENT = tmpContent_tDBInput_14;
								}
							} else {
								row22.BY_CONSENT = null;
							}
						}
						if (colQtyInRs_tDBInput_14 < 39) {
							row22.REGULATIONS = null;
						} else {

							tmpContent_tDBInput_14 = rs_tDBInput_14.getString(39);
							if (tmpContent_tDBInput_14 != null) {
								if (talendToDBList_tDBInput_14.contains(
										rsmd_tDBInput_14.getColumnTypeName(39).toUpperCase(java.util.Locale.ENGLISH))) {
									row22.REGULATIONS = FormatterUtils.formatUnwithE(tmpContent_tDBInput_14);
								} else {
									row22.REGULATIONS = tmpContent_tDBInput_14;
								}
							} else {
								row22.REGULATIONS = null;
							}
						}
						if (colQtyInRs_tDBInput_14 < 40) {
							row22.NOTES = null;
						} else {

							tmpContent_tDBInput_14 = rs_tDBInput_14.getString(40);
							if (tmpContent_tDBInput_14 != null) {
								if (talendToDBList_tDBInput_14.contains(
										rsmd_tDBInput_14.getColumnTypeName(40).toUpperCase(java.util.Locale.ENGLISH))) {
									row22.NOTES = FormatterUtils.formatUnwithE(tmpContent_tDBInput_14);
								} else {
									row22.NOTES = tmpContent_tDBInput_14;
								}
							} else {
								row22.NOTES = null;
							}
						}
						if (colQtyInRs_tDBInput_14 < 41) {
							row22.CAPTURE_USER_ID = null;
						} else {

							row22.CAPTURE_USER_ID = rs_tDBInput_14.getBigDecimal(41);
							if (rs_tDBInput_14.wasNull()) {
								row22.CAPTURE_USER_ID = null;
							}
						}
						if (colQtyInRs_tDBInput_14 < 42) {
							row22.CAPTURE_DATE = null;
						} else {

							row22.CAPTURE_DATE = mssqlGTU_tDBInput_14.getDate(rsmd_tDBInput_14, rs_tDBInput_14, 42);

						}
						if (colQtyInRs_tDBInput_14 < 43) {
							row22.PUBLICATION_NBR = null;
						} else {

							row22.PUBLICATION_NBR = rs_tDBInput_14.getBigDecimal(43);
							if (rs_tDBInput_14.wasNull()) {
								row22.PUBLICATION_NBR = null;
							}
						}
						if (colQtyInRs_tDBInput_14 < 44) {
							row22.PUBLICATION_SER = null;
						} else {

							tmpContent_tDBInput_14 = rs_tDBInput_14.getString(44);
							if (tmpContent_tDBInput_14 != null) {
								if (talendToDBList_tDBInput_14.contains(
										rsmd_tDBInput_14.getColumnTypeName(44).toUpperCase(java.util.Locale.ENGLISH))) {
									row22.PUBLICATION_SER = FormatterUtils.formatUnwithE(tmpContent_tDBInput_14);
								} else {
									row22.PUBLICATION_SER = tmpContent_tDBInput_14;
								}
							} else {
								row22.PUBLICATION_SER = null;
							}
						}
						if (colQtyInRs_tDBInput_14 < 45) {
							row22.PUBLICATION_TYP = null;
						} else {

							tmpContent_tDBInput_14 = rs_tDBInput_14.getString(45);
							if (tmpContent_tDBInput_14 != null) {
								if (talendToDBList_tDBInput_14.contains(
										rsmd_tDBInput_14.getColumnTypeName(45).toUpperCase(java.util.Locale.ENGLISH))) {
									row22.PUBLICATION_TYP = FormatterUtils.formatUnwithE(tmpContent_tDBInput_14);
								} else {
									row22.PUBLICATION_TYP = tmpContent_tDBInput_14;
								}
							} else {
								row22.PUBLICATION_TYP = null;
							}
						}

						/**
						 * [tDBInput_14 begin ] stop
						 */

						/**
						 * [tDBInput_14 main ] start
						 */

						currentComponent = "tDBInput_14";

						tos_count_tDBInput_14++;

						/**
						 * [tDBInput_14 main ] stop
						 */

						/**
						 * [tDBInput_14 process_data_begin ] start
						 */

						currentComponent = "tDBInput_14";

						/**
						 * [tDBInput_14 process_data_begin ] stop
						 */

						/**
						 * [tAdvancedHash_row22 main ] start
						 */

						currentComponent = "tAdvancedHash_row22";

						if (execStat) {
							runStat.updateStatOnConnection(iterateId, 1, 1

									, "row22"

							);
						}

						row22Struct row22_HashRow = new row22Struct();

						row22_HashRow.FILE_SEQ = row22.FILE_SEQ;

						row22_HashRow.FILE_TYPE = row22.FILE_TYPE;

						row22_HashRow.FILE_SERIES = row22.FILE_SERIES;

						row22_HashRow.FILE_NBR = row22.FILE_NBR;

						row22_HashRow.DOC_ORI = row22.DOC_ORI;

						row22_HashRow.DOC_SERIES = row22.DOC_SERIES;

						row22_HashRow.DOC_NBR = row22.DOC_NBR;

						row22_HashRow.IND_IMPORT = row22.IND_IMPORT;

						row22_HashRow.APPLICATION_TYPE = row22.APPLICATION_TYPE;

						row22_HashRow.APPLICATION_SUBTYPE = row22.APPLICATION_SUBTYPE;

						row22_HashRow.LAW_CODE = row22.LAW_CODE;

						row22_HashRow.FILING_DATE = row22.FILING_DATE;

						row22_HashRow.RECEPTION_DATE = row22.RECEPTION_DATE;

						row22_HashRow.PUBLICATION_DATE = row22.PUBLICATION_DATE;

						row22_HashRow.PUBLICATION_NOTES = row22.PUBLICATION_NOTES;

						row22_HashRow.IND_REGISTERED = row22.IND_REGISTERED;

						row22_HashRow.REGISTRATION_TYPE = row22.REGISTRATION_TYPE;

						row22_HashRow.REGISTRATION_SERIES = row22.REGISTRATION_SERIES;

						row22_HashRow.REGISTRATION_NBR = row22.REGISTRATION_NBR;

						row22_HashRow.REGISTRATION_DUP = row22.REGISTRATION_DUP;

						row22_HashRow.REGISTRATION_DATE = row22.REGISTRATION_DATE;

						row22_HashRow.ENTITLEMENT_DATE = row22.ENTITLEMENT_DATE;

						row22_HashRow.EXPIRATION_DATE = row22.EXPIRATION_DATE;

						row22_HashRow.EXHIBITION_DATE = row22.EXHIBITION_DATE;

						row22_HashRow.EXHIBITION_NOTES = row22.EXHIBITION_NOTES;

						row22_HashRow.SIGN_TYPE = row22.SIGN_TYPE;

						row22_HashRow.MARK_NAME = row22.MARK_NAME;

						row22_HashRow.MARK_NAME_LANG2 = row22.MARK_NAME_LANG2;

						row22_HashRow.MARK_TRANSLATION = row22.MARK_TRANSLATION;

						row22_HashRow.MARK_TRANSLATION_LANG2 = row22.MARK_TRANSLATION_LANG2;

						row22_HashRow.MARK_TRANSLITERATION = row22.MARK_TRANSLITERATION;

						row22_HashRow.MARK_TRANSLITERATION_LANG2 = row22.MARK_TRANSLITERATION_LANG2;

						row22_HashRow.SERIES_DESCRIPTION = row22.SERIES_DESCRIPTION;

						row22_HashRow.COLOUR_DESCRIPTION = row22.COLOUR_DESCRIPTION;

						row22_HashRow.COLOUR_DESCR_LANG2 = row22.COLOUR_DESCR_LANG2;

						row22_HashRow.DISCLAIMER = row22.DISCLAIMER;

						row22_HashRow.DISCLAIMER_LANG2 = row22.DISCLAIMER_LANG2;

						row22_HashRow.BY_CONSENT = row22.BY_CONSENT;

						row22_HashRow.REGULATIONS = row22.REGULATIONS;

						row22_HashRow.NOTES = row22.NOTES;

						row22_HashRow.CAPTURE_USER_ID = row22.CAPTURE_USER_ID;

						row22_HashRow.CAPTURE_DATE = row22.CAPTURE_DATE;

						row22_HashRow.PUBLICATION_NBR = row22.PUBLICATION_NBR;

						row22_HashRow.PUBLICATION_SER = row22.PUBLICATION_SER;

						row22_HashRow.PUBLICATION_TYP = row22.PUBLICATION_TYP;

						tHash_Lookup_row22.put(row22_HashRow);

						tos_count_tAdvancedHash_row22++;

						/**
						 * [tAdvancedHash_row22 main ] stop
						 */

						/**
						 * [tAdvancedHash_row22 process_data_begin ] start
						 */

						currentComponent = "tAdvancedHash_row22";

						/**
						 * [tAdvancedHash_row22 process_data_begin ] stop
						 */

						/**
						 * [tAdvancedHash_row22 process_data_end ] start
						 */

						currentComponent = "tAdvancedHash_row22";

						/**
						 * [tAdvancedHash_row22 process_data_end ] stop
						 */

						/**
						 * [tDBInput_14 process_data_end ] start
						 */

						currentComponent = "tDBInput_14";

						/**
						 * [tDBInput_14 process_data_end ] stop
						 */

						/**
						 * [tDBInput_14 end ] start
						 */

						currentComponent = "tDBInput_14";

					}
				} finally {
					if (rs_tDBInput_14 != null) {
						rs_tDBInput_14.close();
					}
					if (stmt_tDBInput_14 != null) {
						stmt_tDBInput_14.close();
					}
				}
				globalMap.put("tDBInput_14_NB_LINE", nb_line_tDBInput_14);

				ok_Hash.put("tDBInput_14", true);
				end_Hash.put("tDBInput_14", System.currentTimeMillis());

				/**
				 * [tDBInput_14 end ] stop
				 */

				/**
				 * [tAdvancedHash_row22 end ] start
				 */

				currentComponent = "tAdvancedHash_row22";

				tHash_Lookup_row22.endPut();

				if (execStat) {
					runStat.updateStat(resourceMap, iterateId, 2, 0, "row22");
				}

				ok_Hash.put("tAdvancedHash_row22", true);
				end_Hash.put("tAdvancedHash_row22", System.currentTimeMillis());

				/**
				 * [tAdvancedHash_row22 end ] stop
				 */

			} // end the resume

		} catch (java.lang.Exception e) {

			TalendException te = new TalendException(e, currentComponent, globalMap);

			throw te;
		} catch (java.lang.Error error) {

			runStat.stopThreadStat();

			throw error;
		} finally {

			try {

				/**
				 * [tDBInput_14 finally ] start
				 */

				currentComponent = "tDBInput_14";

				/**
				 * [tDBInput_14 finally ] stop
				 */

				/**
				 * [tAdvancedHash_row22 finally ] start
				 */

				currentComponent = "tAdvancedHash_row22";

				/**
				 * [tAdvancedHash_row22 finally ] stop
				 */

			} catch (java.lang.Exception e) {
				// ignore
			} catch (java.lang.Error error) {
				// ignore
			}
			resourceMap = null;
		}

		globalMap.put("tDBInput_14_SUBPROCESS_STATE", 1);
	}

	public static class row5Struct implements routines.system.IPersistableComparableLookupRow<row5Struct> {
		final static byte[] commonByteArrayLock_WIPO_PROJECTS_E1a_Marc_Userdoc_a_interm = new byte[0];
		static byte[] commonByteArray_WIPO_PROJECTS_E1a_Marc_Userdoc_a_interm = new byte[0];
		protected static final int DEFAULT_HASHCODE = 1;
		protected static final int PRIME = 31;
		protected int hashCode = DEFAULT_HASHCODE;
		public boolean hashCodeDirty = true;

		public String loopKey;

		public BigDecimal cod_titular;

		public BigDecimal getCod_titular() {
			return this.cod_titular;
		}

		public String nom_titular;

		public String getNom_titular() {
			return this.nom_titular;
		}

		public String dir_titular;

		public String getDir_titular() {
			return this.dir_titular;
		}

		public String cod_pais;

		public String getCod_pais() {
			return this.cod_pais;
		}

		public String dir_titular_old;

		public String getDir_titular_old() {
			return this.dir_titular_old;
		}

		public String cod_pais_old;

		public String getCod_pais_old() {
			return this.cod_pais_old;
		}

		@Override
		public int hashCode() {
			if (this.hashCodeDirty) {
				final int prime = PRIME;
				int result = DEFAULT_HASHCODE;

				result = prime * result + ((this.nom_titular == null) ? 0 : this.nom_titular.hashCode());

				this.hashCode = result;
				this.hashCodeDirty = false;
			}
			return this.hashCode;
		}

		@Override
		public boolean equals(Object obj) {
			if (this == obj)
				return true;
			if (obj == null)
				return false;
			if (getClass() != obj.getClass())
				return false;
			final row5Struct other = (row5Struct) obj;

			if (this.nom_titular == null) {
				if (other.nom_titular != null)
					return false;

			} else if (!this.nom_titular.equals(other.nom_titular))

				return false;

			return true;
		}

		public void copyDataTo(row5Struct other) {

			other.cod_titular = this.cod_titular;
			other.nom_titular = this.nom_titular;
			other.dir_titular = this.dir_titular;
			other.cod_pais = this.cod_pais;
			other.dir_titular_old = this.dir_titular_old;
			other.cod_pais_old = this.cod_pais_old;

		}

		public void copyKeysDataTo(row5Struct other) {

			other.nom_titular = this.nom_titular;

		}

		private String readString(ObjectInputStream dis) throws IOException {
			String strReturn = null;
			int length = 0;
			length = dis.readInt();
			if (length == -1) {
				strReturn = null;
			} else {
				if (length > commonByteArray_WIPO_PROJECTS_E1a_Marc_Userdoc_a_interm.length) {
					if (length < 1024 && commonByteArray_WIPO_PROJECTS_E1a_Marc_Userdoc_a_interm.length == 0) {
						commonByteArray_WIPO_PROJECTS_E1a_Marc_Userdoc_a_interm = new byte[1024];
					} else {
						commonByteArray_WIPO_PROJECTS_E1a_Marc_Userdoc_a_interm = new byte[2 * length];
					}
				}
				dis.readFully(commonByteArray_WIPO_PROJECTS_E1a_Marc_Userdoc_a_interm, 0, length);
				strReturn = new String(commonByteArray_WIPO_PROJECTS_E1a_Marc_Userdoc_a_interm, 0, length, utf8Charset);
			}
			return strReturn;
		}

		private void writeString(String str, ObjectOutputStream dos) throws IOException {
			if (str == null) {
				dos.writeInt(-1);
			} else {
				byte[] byteArray = str.getBytes(utf8Charset);
				dos.writeInt(byteArray.length);
				dos.write(byteArray);
			}
		}

		private String readString(DataInputStream dis, ObjectInputStream ois) throws IOException {
			String strReturn = null;
			int length = 0;
			length = dis.readInt();
			if (length == -1) {
				strReturn = null;
			} else {
				byte[] byteArray = new byte[length];
				dis.read(byteArray);
				strReturn = new String(byteArray, utf8Charset);
			}
			return strReturn;
		}

		private void writeString(String str, DataOutputStream dos, ObjectOutputStream oos) throws IOException {
			if (str == null) {
				dos.writeInt(-1);
			} else {
				byte[] byteArray = str.getBytes(utf8Charset);
				dos.writeInt(byteArray.length);
				dos.write(byteArray);
			}
		}

		public void readKeysData(ObjectInputStream dis) {

			synchronized (commonByteArrayLock_WIPO_PROJECTS_E1a_Marc_Userdoc_a_interm) {

				try {

					int length = 0;

					this.nom_titular = readString(dis);

				} catch (IOException e) {
					throw new RuntimeException(e);

				}

			}

		}

		public void writeKeysData(ObjectOutputStream dos) {
			try {

				// String

				writeString(this.nom_titular, dos);

			} catch (IOException e) {
				throw new RuntimeException(e);
			}

		}

		/**
		 * Fill Values data by reading ObjectInputStream.
		 */
		public void readValuesData(DataInputStream dis, ObjectInputStream ois) {
			try {

				int length = 0;

				this.cod_titular = (BigDecimal) ois.readObject();

				this.dir_titular = readString(dis, ois);

				this.cod_pais = readString(dis, ois);

				this.dir_titular_old = readString(dis, ois);

				this.cod_pais_old = readString(dis, ois);

			} catch (IOException e) {
				throw new RuntimeException(e);

			} catch (ClassNotFoundException eCNFE) {
				throw new RuntimeException(eCNFE);

			}

		}

		/**
		 * Return a byte array which represents Values data.
		 */
		public void writeValuesData(DataOutputStream dos, ObjectOutputStream oos) {
			try {

				oos.writeObject(this.cod_titular);

				writeString(this.dir_titular, dos, oos);

				writeString(this.cod_pais, dos, oos);

				writeString(this.dir_titular_old, dos, oos);

				writeString(this.cod_pais_old, dos, oos);

			} catch (IOException e) {
				throw new RuntimeException(e);
			}

		}

		public String toString() {

			StringBuilder sb = new StringBuilder();
			sb.append(super.toString());
			sb.append("[");
			sb.append("cod_titular=" + String.valueOf(cod_titular));
			sb.append(",nom_titular=" + nom_titular);
			sb.append(",dir_titular=" + dir_titular);
			sb.append(",cod_pais=" + cod_pais);
			sb.append(",dir_titular_old=" + dir_titular_old);
			sb.append(",cod_pais_old=" + cod_pais_old);
			sb.append("]");

			return sb.toString();
		}

		/**
		 * Compare keys
		 */
		public int compareTo(row5Struct other) {

			int returnValue = -1;

			returnValue = checkNullsAndCompare(this.nom_titular, other.nom_titular);
			if (returnValue != 0) {
				return returnValue;
			}

			return returnValue;
		}

		private int checkNullsAndCompare(Object object1, Object object2) {
			int returnValue = 0;
			if (object1 instanceof Comparable && object2 instanceof Comparable) {
				returnValue = ((Comparable) object1).compareTo(object2);
			} else if (object1 != null && object2 != null) {
				returnValue = compareStrings(object1.toString(), object2.toString());
			} else if (object1 == null && object2 != null) {
				returnValue = 1;
			} else if (object1 != null && object2 == null) {
				returnValue = -1;
			} else {
				returnValue = 0;
			}

			return returnValue;
		}

		private int compareStrings(String string1, String string2) {
			return string1.compareTo(string2);
		}

	}

	public void tDBInput_16Process(final java.util.Map<String, Object> globalMap) throws TalendException {
		globalMap.put("tDBInput_16_SUBPROCESS_STATE", 0);

		final boolean execStat = this.execStat;

		String iterateId = "";

		String currentComponent = "";
		java.util.Map<String, Object> resourceMap = new java.util.HashMap<String, Object>();

		try {
			// TDI-39566 avoid throwing an useless Exception
			boolean resumeIt = true;
			if (globalResumeTicket == false && resumeEntryMethodName != null) {
				String currentMethodName = new java.lang.Exception().getStackTrace()[0].getMethodName();
				resumeIt = resumeEntryMethodName.equals(currentMethodName);
			}
			if (resumeIt || globalResumeTicket) { // start the resume
				globalResumeTicket = true;

				row5Struct row5 = new row5Struct();

				/**
				 * [tAdvancedHash_row5 begin ] start
				 */

				ok_Hash.put("tAdvancedHash_row5", false);
				start_Hash.put("tAdvancedHash_row5", System.currentTimeMillis());

				currentComponent = "tAdvancedHash_row5";

				if (execStat) {
					runStat.updateStatOnConnection(resourceMap, iterateId, 0, 0, "row5");
				}

				int tos_count_tAdvancedHash_row5 = 0;

				// connection name:row5
				// source node:tDBInput_16 - inputs:(after_tDBInput_2) outputs:(row5,row5) |
				// target node:tAdvancedHash_row5 - inputs:(row5) outputs:()
				// linked node: tMap_1 - inputs:(row2,row5) outputs:(ud)

				org.talend.designer.components.lookup.common.ICommonLookup.MATCHING_MODE matchingModeEnum_row5 = org.talend.designer.components.lookup.common.ICommonLookup.MATCHING_MODE.UNIQUE_MATCH;

				org.talend.designer.components.lookup.memory.AdvancedMemoryLookup<row5Struct> tHash_Lookup_row5 = org.talend.designer.components.lookup.memory.AdvancedMemoryLookup
						.<row5Struct>getLookup(matchingModeEnum_row5);

				globalMap.put("tHash_Lookup_row5", tHash_Lookup_row5);

				/**
				 * [tAdvancedHash_row5 begin ] stop
				 */

				/**
				 * [tDBInput_16 begin ] start
				 */

				ok_Hash.put("tDBInput_16", false);
				start_Hash.put("tDBInput_16", System.currentTimeMillis());

				currentComponent = "tDBInput_16";

				int tos_count_tDBInput_16 = 0;

				int nb_line_tDBInput_16 = 0;
				java.sql.Connection conn_tDBInput_16 = null;
				conn_tDBInput_16 = (java.sql.Connection) globalMap.get("conn_tDBConnection_2");

				java.sql.Statement stmt_tDBInput_16 = conn_tDBInput_16.createStatement();

				String dbquery_tDBInput_16 = "SELECT \n  \"Paraguay\".\"public\".\"titular\".\"cod_titular\", \n  \"Paraguay\".\"public\".\"titular\".\"nom_titular\", "
						+ "\n  \"Paraguay\".\"public\".\"titular\".\"dir_titular\", \n  \"Paraguay\".\"public\".\"titular\".\"cod_pais\", \n  \"Paragu"
						+ "ay\".\"public\".\"titular\".\"dir_titular_old\", \n  \"Paraguay\".\"public\".\"titular\".\"cod_pais_old\"\nFROM \"Paraguay"
						+ "\".\"public\".\"titular\"";

				globalMap.put("tDBInput_16_QUERY", dbquery_tDBInput_16);
				java.sql.ResultSet rs_tDBInput_16 = null;

				try {
					rs_tDBInput_16 = stmt_tDBInput_16.executeQuery(dbquery_tDBInput_16);
					java.sql.ResultSetMetaData rsmd_tDBInput_16 = rs_tDBInput_16.getMetaData();
					int colQtyInRs_tDBInput_16 = rsmd_tDBInput_16.getColumnCount();

					String tmpContent_tDBInput_16 = null;

					while (rs_tDBInput_16.next()) {
						nb_line_tDBInput_16++;

						if (colQtyInRs_tDBInput_16 < 1) {
							row5.cod_titular = null;
						} else {

							row5.cod_titular = rs_tDBInput_16.getBigDecimal(1);
							if (rs_tDBInput_16.wasNull()) {
								throw new RuntimeException("Null value in non-Nullable column");
							}
						}
						if (colQtyInRs_tDBInput_16 < 2) {
							row5.nom_titular = null;
						} else {

							row5.nom_titular = routines.system.JDBCUtil.getString(rs_tDBInput_16, 2, false);
						}
						if (colQtyInRs_tDBInput_16 < 3) {
							row5.dir_titular = null;
						} else {

							row5.dir_titular = routines.system.JDBCUtil.getString(rs_tDBInput_16, 3, false);
						}
						if (colQtyInRs_tDBInput_16 < 4) {
							row5.cod_pais = null;
						} else {

							row5.cod_pais = routines.system.JDBCUtil.getString(rs_tDBInput_16, 4, false);
						}
						if (colQtyInRs_tDBInput_16 < 5) {
							row5.dir_titular_old = null;
						} else {

							row5.dir_titular_old = routines.system.JDBCUtil.getString(rs_tDBInput_16, 5, false);
						}
						if (colQtyInRs_tDBInput_16 < 6) {
							row5.cod_pais_old = null;
						} else {

							row5.cod_pais_old = routines.system.JDBCUtil.getString(rs_tDBInput_16, 6, false);
						}

						/**
						 * [tDBInput_16 begin ] stop
						 */

						/**
						 * [tDBInput_16 main ] start
						 */

						currentComponent = "tDBInput_16";

						tos_count_tDBInput_16++;

						/**
						 * [tDBInput_16 main ] stop
						 */

						/**
						 * [tDBInput_16 process_data_begin ] start
						 */

						currentComponent = "tDBInput_16";

						/**
						 * [tDBInput_16 process_data_begin ] stop
						 */

						/**
						 * [tAdvancedHash_row5 main ] start
						 */

						currentComponent = "tAdvancedHash_row5";

						if (execStat) {
							runStat.updateStatOnConnection(iterateId, 1, 1

									, "row5"

							);
						}

						row5Struct row5_HashRow = new row5Struct();

						row5_HashRow.cod_titular = row5.cod_titular;

						row5_HashRow.nom_titular = row5.nom_titular;

						row5_HashRow.dir_titular = row5.dir_titular;

						row5_HashRow.cod_pais = row5.cod_pais;

						row5_HashRow.dir_titular_old = row5.dir_titular_old;

						row5_HashRow.cod_pais_old = row5.cod_pais_old;

						tHash_Lookup_row5.put(row5_HashRow);

						tos_count_tAdvancedHash_row5++;

						/**
						 * [tAdvancedHash_row5 main ] stop
						 */

						/**
						 * [tAdvancedHash_row5 process_data_begin ] start
						 */

						currentComponent = "tAdvancedHash_row5";

						/**
						 * [tAdvancedHash_row5 process_data_begin ] stop
						 */

						/**
						 * [tAdvancedHash_row5 process_data_end ] start
						 */

						currentComponent = "tAdvancedHash_row5";

						/**
						 * [tAdvancedHash_row5 process_data_end ] stop
						 */

						/**
						 * [tDBInput_16 process_data_end ] start
						 */

						currentComponent = "tDBInput_16";

						/**
						 * [tDBInput_16 process_data_end ] stop
						 */

						/**
						 * [tDBInput_16 end ] start
						 */

						currentComponent = "tDBInput_16";

					}
				} finally {
					if (rs_tDBInput_16 != null) {
						rs_tDBInput_16.close();
					}
					if (stmt_tDBInput_16 != null) {
						stmt_tDBInput_16.close();
					}
				}
				globalMap.put("tDBInput_16_NB_LINE", nb_line_tDBInput_16);

				ok_Hash.put("tDBInput_16", true);
				end_Hash.put("tDBInput_16", System.currentTimeMillis());

				/**
				 * [tDBInput_16 end ] stop
				 */

				/**
				 * [tAdvancedHash_row5 end ] start
				 */

				currentComponent = "tAdvancedHash_row5";

				tHash_Lookup_row5.endPut();

				if (execStat) {
					runStat.updateStat(resourceMap, iterateId, 2, 0, "row5");
				}

				ok_Hash.put("tAdvancedHash_row5", true);
				end_Hash.put("tAdvancedHash_row5", System.currentTimeMillis());

				/**
				 * [tAdvancedHash_row5 end ] stop
				 */

			} // end the resume

		} catch (java.lang.Exception e) {

			TalendException te = new TalendException(e, currentComponent, globalMap);

			throw te;
		} catch (java.lang.Error error) {

			runStat.stopThreadStat();

			throw error;
		} finally {

			try {

				/**
				 * [tDBInput_16 finally ] start
				 */

				currentComponent = "tDBInput_16";

				/**
				 * [tDBInput_16 finally ] stop
				 */

				/**
				 * [tAdvancedHash_row5 finally ] start
				 */

				currentComponent = "tAdvancedHash_row5";

				/**
				 * [tAdvancedHash_row5 finally ] stop
				 */

			} catch (java.lang.Exception e) {
				// ignore
			} catch (java.lang.Error error) {
				// ignore
			}
			resourceMap = null;
		}

		globalMap.put("tDBInput_16_SUBPROCESS_STATE", 1);
	}

	public static class row27Struct implements routines.system.IPersistableComparableLookupRow<row27Struct> {
		final static byte[] commonByteArrayLock_WIPO_PROJECTS_E1a_Marc_Userdoc_a_interm = new byte[0];
		static byte[] commonByteArray_WIPO_PROJECTS_E1a_Marc_Userdoc_a_interm = new byte[0];
		protected static final int DEFAULT_HASHCODE = 1;
		protected static final int PRIME = 31;
		protected int hashCode = DEFAULT_HASHCODE;
		public boolean hashCodeDirty = true;

		public String loopKey;

		public String USERDOC_SEQ;

		public String getUSERDOC_SEQ() {
			return this.USERDOC_SEQ;
		}

		public BigDecimal USERDOC_SERIES;

		public BigDecimal getUSERDOC_SERIES() {
			return this.USERDOC_SERIES;
		}

		public BigDecimal USERDOC_NBR;

		public BigDecimal getUSERDOC_NBR() {
			return this.USERDOC_NBR;
		}

		public String DOC_ORI;

		public String getDOC_ORI() {
			return this.DOC_ORI;
		}

		public BigDecimal DOC_SERIES;

		public BigDecimal getDOC_SERIES() {
			return this.DOC_SERIES;
		}

		public BigDecimal DOC_NBR;

		public BigDecimal getDOC_NBR() {
			return this.DOC_NBR;
		}

		public BigDecimal IND_IMPORT;

		public BigDecimal getIND_IMPORT() {
			return this.IND_IMPORT;
		}

		public String USERDOC_TYPE;

		public String getUSERDOC_TYPE() {
			return this.USERDOC_TYPE;
		}

		public BigDecimal LAW_CODE;

		public BigDecimal getLAW_CODE() {
			return this.LAW_CODE;
		}

		public java.util.Date FILING_DATE;

		public java.util.Date getFILING_DATE() {
			return this.FILING_DATE;
		}

		public java.util.Date RECEPTION_DATE;

		public java.util.Date getRECEPTION_DATE() {
			return this.RECEPTION_DATE;
		}

		public String NOTES;

		public String getNOTES() {
			return this.NOTES;
		}

		public String APPLICANT_NOTES;

		public String getAPPLICANT_NOTES() {
			return this.APPLICANT_NOTES;
		}

		public String PERSON_NAME;

		public String getPERSON_NAME() {
			return this.PERSON_NAME;
		}

		public String PERSON_NAME_LANG2;

		public String getPERSON_NAME_LANG2() {
			return this.PERSON_NAME_LANG2;
		}

		public String NATIONALITY_COUNTRY_CODE;

		public String getNATIONALITY_COUNTRY_CODE() {
			return this.NATIONALITY_COUNTRY_CODE;
		}

		public BigDecimal IND_COMPANY;

		public BigDecimal getIND_COMPANY() {
			return this.IND_COMPANY;
		}

		public String LEGAL_NATURE;

		public String getLEGAL_NATURE() {
			return this.LEGAL_NATURE;
		}

		public String LEGAL_NATURE_LANG2;

		public String getLEGAL_NATURE_LANG2() {
			return this.LEGAL_NATURE_LANG2;
		}

		public String LEGAL_ID_TYPE;

		public String getLEGAL_ID_TYPE() {
			return this.LEGAL_ID_TYPE;
		}

		public BigDecimal LEGAL_ID_NBR;

		public BigDecimal getLEGAL_ID_NBR() {
			return this.LEGAL_ID_NBR;
		}

		public String INDIVIDUAL_ID_TYPE;

		public String getINDIVIDUAL_ID_TYPE() {
			return this.INDIVIDUAL_ID_TYPE;
		}

		public BigDecimal INDIVIDUAL_ID_NBR;

		public BigDecimal getINDIVIDUAL_ID_NBR() {
			return this.INDIVIDUAL_ID_NBR;
		}

		public String RESIDENCE_COUNTRY_CODE;

		public String getRESIDENCE_COUNTRY_CODE() {
			return this.RESIDENCE_COUNTRY_CODE;
		}

		public String STATE_NAME;

		public String getSTATE_NAME() {
			return this.STATE_NAME;
		}

		public String STATE_CODE;

		public String getSTATE_CODE() {
			return this.STATE_CODE;
		}

		public String CITY_NAME;

		public String getCITY_NAME() {
			return this.CITY_NAME;
		}

		public String CITY_CODE;

		public String getCITY_CODE() {
			return this.CITY_CODE;
		}

		public String ADDRESS_ZONE;

		public String getADDRESS_ZONE() {
			return this.ADDRESS_ZONE;
		}

		public String ADDRESS_STREET;

		public String getADDRESS_STREET() {
			return this.ADDRESS_STREET;
		}

		public String ADDRESS_STREET_LANG2;

		public String getADDRESS_STREET_LANG2() {
			return this.ADDRESS_STREET_LANG2;
		}

		public String ZIP_CODE;

		public String getZIP_CODE() {
			return this.ZIP_CODE;
		}

		public String EMAIL;

		public String getEMAIL() {
			return this.EMAIL;
		}

		public String TELEPHONE;

		public String getTELEPHONE() {
			return this.TELEPHONE;
		}

		public String PERSON_GROUP_CODE;

		public String getPERSON_GROUP_CODE() {
			return this.PERSON_GROUP_CODE;
		}

		public BigDecimal CAPTURE_USER_ID;

		public BigDecimal getCAPTURE_USER_ID() {
			return this.CAPTURE_USER_ID;
		}

		public java.util.Date CAPTURE_DATE;

		public java.util.Date getCAPTURE_DATE() {
			return this.CAPTURE_DATE;
		}

		@Override
		public int hashCode() {
			if (this.hashCodeDirty) {
				final int prime = PRIME;
				int result = DEFAULT_HASHCODE;

				result = prime * result
						+ ((this.DOC_NBR == null) ? 0 : new Double(this.DOC_NBR.doubleValue()).hashCode());

				this.hashCode = result;
				this.hashCodeDirty = false;
			}
			return this.hashCode;
		}

		@Override
		public boolean equals(Object obj) {
			if (this == obj)
				return true;
			if (obj == null)
				return false;
			if (getClass() != obj.getClass())
				return false;
			final row27Struct other = (row27Struct) obj;

			if (this.DOC_NBR == null) {
				if (other.DOC_NBR != null)
					return false;

			} else if ((other.DOC_NBR == null) || (this.DOC_NBR.compareTo(other.DOC_NBR) != 0))

				return false;

			return true;
		}

		public void copyDataTo(row27Struct other) {

			other.USERDOC_SEQ = this.USERDOC_SEQ;
			other.USERDOC_SERIES = this.USERDOC_SERIES;
			other.USERDOC_NBR = this.USERDOC_NBR;
			other.DOC_ORI = this.DOC_ORI;
			other.DOC_SERIES = this.DOC_SERIES;
			other.DOC_NBR = this.DOC_NBR;
			other.IND_IMPORT = this.IND_IMPORT;
			other.USERDOC_TYPE = this.USERDOC_TYPE;
			other.LAW_CODE = this.LAW_CODE;
			other.FILING_DATE = this.FILING_DATE;
			other.RECEPTION_DATE = this.RECEPTION_DATE;
			other.NOTES = this.NOTES;
			other.APPLICANT_NOTES = this.APPLICANT_NOTES;
			other.PERSON_NAME = this.PERSON_NAME;
			other.PERSON_NAME_LANG2 = this.PERSON_NAME_LANG2;
			other.NATIONALITY_COUNTRY_CODE = this.NATIONALITY_COUNTRY_CODE;
			other.IND_COMPANY = this.IND_COMPANY;
			other.LEGAL_NATURE = this.LEGAL_NATURE;
			other.LEGAL_NATURE_LANG2 = this.LEGAL_NATURE_LANG2;
			other.LEGAL_ID_TYPE = this.LEGAL_ID_TYPE;
			other.LEGAL_ID_NBR = this.LEGAL_ID_NBR;
			other.INDIVIDUAL_ID_TYPE = this.INDIVIDUAL_ID_TYPE;
			other.INDIVIDUAL_ID_NBR = this.INDIVIDUAL_ID_NBR;
			other.RESIDENCE_COUNTRY_CODE = this.RESIDENCE_COUNTRY_CODE;
			other.STATE_NAME = this.STATE_NAME;
			other.STATE_CODE = this.STATE_CODE;
			other.CITY_NAME = this.CITY_NAME;
			other.CITY_CODE = this.CITY_CODE;
			other.ADDRESS_ZONE = this.ADDRESS_ZONE;
			other.ADDRESS_STREET = this.ADDRESS_STREET;
			other.ADDRESS_STREET_LANG2 = this.ADDRESS_STREET_LANG2;
			other.ZIP_CODE = this.ZIP_CODE;
			other.EMAIL = this.EMAIL;
			other.TELEPHONE = this.TELEPHONE;
			other.PERSON_GROUP_CODE = this.PERSON_GROUP_CODE;
			other.CAPTURE_USER_ID = this.CAPTURE_USER_ID;
			other.CAPTURE_DATE = this.CAPTURE_DATE;

		}

		public void copyKeysDataTo(row27Struct other) {

			other.DOC_NBR = this.DOC_NBR;

		}

		private String readString(DataInputStream dis, ObjectInputStream ois) throws IOException {
			String strReturn = null;
			int length = 0;
			length = dis.readInt();
			if (length == -1) {
				strReturn = null;
			} else {
				byte[] byteArray = new byte[length];
				dis.read(byteArray);
				strReturn = new String(byteArray, utf8Charset);
			}
			return strReturn;
		}

		private void writeString(String str, DataOutputStream dos, ObjectOutputStream oos) throws IOException {
			if (str == null) {
				dos.writeInt(-1);
			} else {
				byte[] byteArray = str.getBytes(utf8Charset);
				dos.writeInt(byteArray.length);
				dos.write(byteArray);
			}
		}

		private java.util.Date readDate(DataInputStream dis, ObjectInputStream ois) throws IOException {
			java.util.Date dateReturn = null;
			int length = 0;
			length = dis.readByte();
			if (length == -1) {
				dateReturn = null;
			} else {
				dateReturn = new Date(dis.readLong());
			}
			return dateReturn;
		}

		private void writeDate(java.util.Date date1, DataOutputStream dos, ObjectOutputStream oos) throws IOException {
			if (date1 == null) {
				dos.writeByte(-1);
			} else {
				dos.writeByte(0);
				dos.writeLong(date1.getTime());
			}
		}

		public void readKeysData(ObjectInputStream dis) {

			synchronized (commonByteArrayLock_WIPO_PROJECTS_E1a_Marc_Userdoc_a_interm) {

				try {

					int length = 0;

					this.DOC_NBR = (BigDecimal) dis.readObject();

				} catch (IOException e) {
					throw new RuntimeException(e);

				} catch (ClassNotFoundException eCNFE) {
					throw new RuntimeException(eCNFE);

				}

			}

		}

		public void writeKeysData(ObjectOutputStream dos) {
			try {

				// BigDecimal

				dos.writeObject(this.DOC_NBR);

			} catch (IOException e) {
				throw new RuntimeException(e);
			}

		}

		/**
		 * Fill Values data by reading ObjectInputStream.
		 */
		public void readValuesData(DataInputStream dis, ObjectInputStream ois) {
			try {

				int length = 0;

				this.USERDOC_SEQ = readString(dis, ois);

				this.USERDOC_SERIES = (BigDecimal) ois.readObject();

				this.USERDOC_NBR = (BigDecimal) ois.readObject();

				this.DOC_ORI = readString(dis, ois);

				this.DOC_SERIES = (BigDecimal) ois.readObject();

				this.IND_IMPORT = (BigDecimal) ois.readObject();

				this.USERDOC_TYPE = readString(dis, ois);

				this.LAW_CODE = (BigDecimal) ois.readObject();

				this.FILING_DATE = readDate(dis, ois);

				this.RECEPTION_DATE = readDate(dis, ois);

				this.NOTES = readString(dis, ois);

				this.APPLICANT_NOTES = readString(dis, ois);

				this.PERSON_NAME = readString(dis, ois);

				this.PERSON_NAME_LANG2 = readString(dis, ois);

				this.NATIONALITY_COUNTRY_CODE = readString(dis, ois);

				this.IND_COMPANY = (BigDecimal) ois.readObject();

				this.LEGAL_NATURE = readString(dis, ois);

				this.LEGAL_NATURE_LANG2 = readString(dis, ois);

				this.LEGAL_ID_TYPE = readString(dis, ois);

				this.LEGAL_ID_NBR = (BigDecimal) ois.readObject();

				this.INDIVIDUAL_ID_TYPE = readString(dis, ois);

				this.INDIVIDUAL_ID_NBR = (BigDecimal) ois.readObject();

				this.RESIDENCE_COUNTRY_CODE = readString(dis, ois);

				this.STATE_NAME = readString(dis, ois);

				this.STATE_CODE = readString(dis, ois);

				this.CITY_NAME = readString(dis, ois);

				this.CITY_CODE = readString(dis, ois);

				this.ADDRESS_ZONE = readString(dis, ois);

				this.ADDRESS_STREET = readString(dis, ois);

				this.ADDRESS_STREET_LANG2 = readString(dis, ois);

				this.ZIP_CODE = readString(dis, ois);

				this.EMAIL = readString(dis, ois);

				this.TELEPHONE = readString(dis, ois);

				this.PERSON_GROUP_CODE = readString(dis, ois);

				this.CAPTURE_USER_ID = (BigDecimal) ois.readObject();

				this.CAPTURE_DATE = readDate(dis, ois);

			} catch (IOException e) {
				throw new RuntimeException(e);

			} catch (ClassNotFoundException eCNFE) {
				throw new RuntimeException(eCNFE);

			}

		}

		/**
		 * Return a byte array which represents Values data.
		 */
		public void writeValuesData(DataOutputStream dos, ObjectOutputStream oos) {
			try {

				writeString(this.USERDOC_SEQ, dos, oos);

				oos.writeObject(this.USERDOC_SERIES);

				oos.writeObject(this.USERDOC_NBR);

				writeString(this.DOC_ORI, dos, oos);

				oos.writeObject(this.DOC_SERIES);

				oos.writeObject(this.IND_IMPORT);

				writeString(this.USERDOC_TYPE, dos, oos);

				oos.writeObject(this.LAW_CODE);

				writeDate(this.FILING_DATE, dos, oos);

				writeDate(this.RECEPTION_DATE, dos, oos);

				writeString(this.NOTES, dos, oos);

				writeString(this.APPLICANT_NOTES, dos, oos);

				writeString(this.PERSON_NAME, dos, oos);

				writeString(this.PERSON_NAME_LANG2, dos, oos);

				writeString(this.NATIONALITY_COUNTRY_CODE, dos, oos);

				oos.writeObject(this.IND_COMPANY);

				writeString(this.LEGAL_NATURE, dos, oos);

				writeString(this.LEGAL_NATURE_LANG2, dos, oos);

				writeString(this.LEGAL_ID_TYPE, dos, oos);

				oos.writeObject(this.LEGAL_ID_NBR);

				writeString(this.INDIVIDUAL_ID_TYPE, dos, oos);

				oos.writeObject(this.INDIVIDUAL_ID_NBR);

				writeString(this.RESIDENCE_COUNTRY_CODE, dos, oos);

				writeString(this.STATE_NAME, dos, oos);

				writeString(this.STATE_CODE, dos, oos);

				writeString(this.CITY_NAME, dos, oos);

				writeString(this.CITY_CODE, dos, oos);

				writeString(this.ADDRESS_ZONE, dos, oos);

				writeString(this.ADDRESS_STREET, dos, oos);

				writeString(this.ADDRESS_STREET_LANG2, dos, oos);

				writeString(this.ZIP_CODE, dos, oos);

				writeString(this.EMAIL, dos, oos);

				writeString(this.TELEPHONE, dos, oos);

				writeString(this.PERSON_GROUP_CODE, dos, oos);

				oos.writeObject(this.CAPTURE_USER_ID);

				writeDate(this.CAPTURE_DATE, dos, oos);

			} catch (IOException e) {
				throw new RuntimeException(e);
			}

		}

		public String toString() {

			StringBuilder sb = new StringBuilder();
			sb.append(super.toString());
			sb.append("[");
			sb.append("USERDOC_SEQ=" + USERDOC_SEQ);
			sb.append(",USERDOC_SERIES=" + String.valueOf(USERDOC_SERIES));
			sb.append(",USERDOC_NBR=" + String.valueOf(USERDOC_NBR));
			sb.append(",DOC_ORI=" + DOC_ORI);
			sb.append(",DOC_SERIES=" + String.valueOf(DOC_SERIES));
			sb.append(",DOC_NBR=" + String.valueOf(DOC_NBR));
			sb.append(",IND_IMPORT=" + String.valueOf(IND_IMPORT));
			sb.append(",USERDOC_TYPE=" + USERDOC_TYPE);
			sb.append(",LAW_CODE=" + String.valueOf(LAW_CODE));
			sb.append(",FILING_DATE=" + String.valueOf(FILING_DATE));
			sb.append(",RECEPTION_DATE=" + String.valueOf(RECEPTION_DATE));
			sb.append(",NOTES=" + NOTES);
			sb.append(",APPLICANT_NOTES=" + APPLICANT_NOTES);
			sb.append(",PERSON_NAME=" + PERSON_NAME);
			sb.append(",PERSON_NAME_LANG2=" + PERSON_NAME_LANG2);
			sb.append(",NATIONALITY_COUNTRY_CODE=" + NATIONALITY_COUNTRY_CODE);
			sb.append(",IND_COMPANY=" + String.valueOf(IND_COMPANY));
			sb.append(",LEGAL_NATURE=" + LEGAL_NATURE);
			sb.append(",LEGAL_NATURE_LANG2=" + LEGAL_NATURE_LANG2);
			sb.append(",LEGAL_ID_TYPE=" + LEGAL_ID_TYPE);
			sb.append(",LEGAL_ID_NBR=" + String.valueOf(LEGAL_ID_NBR));
			sb.append(",INDIVIDUAL_ID_TYPE=" + INDIVIDUAL_ID_TYPE);
			sb.append(",INDIVIDUAL_ID_NBR=" + String.valueOf(INDIVIDUAL_ID_NBR));
			sb.append(",RESIDENCE_COUNTRY_CODE=" + RESIDENCE_COUNTRY_CODE);
			sb.append(",STATE_NAME=" + STATE_NAME);
			sb.append(",STATE_CODE=" + STATE_CODE);
			sb.append(",CITY_NAME=" + CITY_NAME);
			sb.append(",CITY_CODE=" + CITY_CODE);
			sb.append(",ADDRESS_ZONE=" + ADDRESS_ZONE);
			sb.append(",ADDRESS_STREET=" + ADDRESS_STREET);
			sb.append(",ADDRESS_STREET_LANG2=" + ADDRESS_STREET_LANG2);
			sb.append(",ZIP_CODE=" + ZIP_CODE);
			sb.append(",EMAIL=" + EMAIL);
			sb.append(",TELEPHONE=" + TELEPHONE);
			sb.append(",PERSON_GROUP_CODE=" + PERSON_GROUP_CODE);
			sb.append(",CAPTURE_USER_ID=" + String.valueOf(CAPTURE_USER_ID));
			sb.append(",CAPTURE_DATE=" + String.valueOf(CAPTURE_DATE));
			sb.append("]");

			return sb.toString();
		}

		/**
		 * Compare keys
		 */
		public int compareTo(row27Struct other) {

			int returnValue = -1;

			returnValue = checkNullsAndCompare(this.DOC_NBR, other.DOC_NBR);
			if (returnValue != 0) {
				return returnValue;
			}

			return returnValue;
		}

		private int checkNullsAndCompare(Object object1, Object object2) {
			int returnValue = 0;
			if (object1 instanceof Comparable && object2 instanceof Comparable) {
				returnValue = ((Comparable) object1).compareTo(object2);
			} else if (object1 != null && object2 != null) {
				returnValue = compareStrings(object1.toString(), object2.toString());
			} else if (object1 == null && object2 != null) {
				returnValue = 1;
			} else if (object1 != null && object2 == null) {
				returnValue = -1;
			} else {
				returnValue = 0;
			}

			return returnValue;
		}

		private int compareStrings(String string1, String string2) {
			return string1.compareTo(string2);
		}

	}

	public void tDBInput_17Process(final java.util.Map<String, Object> globalMap) throws TalendException {
		globalMap.put("tDBInput_17_SUBPROCESS_STATE", 0);

		final boolean execStat = this.execStat;

		String iterateId = "";

		String currentComponent = "";
		java.util.Map<String, Object> resourceMap = new java.util.HashMap<String, Object>();

		try {
			// TDI-39566 avoid throwing an useless Exception
			boolean resumeIt = true;
			if (globalResumeTicket == false && resumeEntryMethodName != null) {
				String currentMethodName = new java.lang.Exception().getStackTrace()[0].getMethodName();
				resumeIt = resumeEntryMethodName.equals(currentMethodName);
			}
			if (resumeIt || globalResumeTicket) { // start the resume
				globalResumeTicket = true;

				row27Struct row27 = new row27Struct();

				/**
				 * [tAdvancedHash_row27 begin ] start
				 */

				ok_Hash.put("tAdvancedHash_row27", false);
				start_Hash.put("tAdvancedHash_row27", System.currentTimeMillis());

				currentComponent = "tAdvancedHash_row27";

				if (execStat) {
					runStat.updateStatOnConnection(resourceMap, iterateId, 0, 0, "row27");
				}

				int tos_count_tAdvancedHash_row27 = 0;

				// connection name:row27
				// source node:tDBInput_17 - inputs:(after_tDBInput_3) outputs:(row27,row27) |
				// target node:tAdvancedHash_row27 - inputs:(row27) outputs:()
				// linked node: tMap_8 - inputs:(row26,row27,row28) outputs:(reprs)

				org.talend.designer.components.lookup.common.ICommonLookup.MATCHING_MODE matchingModeEnum_row27 = org.talend.designer.components.lookup.common.ICommonLookup.MATCHING_MODE.ALL_MATCHES;

				org.talend.designer.components.lookup.memory.AdvancedMemoryLookup<row27Struct> tHash_Lookup_row27 = org.talend.designer.components.lookup.memory.AdvancedMemoryLookup
						.<row27Struct>getLookup(matchingModeEnum_row27);

				globalMap.put("tHash_Lookup_row27", tHash_Lookup_row27);

				/**
				 * [tAdvancedHash_row27 begin ] stop
				 */

				/**
				 * [tDBInput_17 begin ] start
				 */

				ok_Hash.put("tDBInput_17", false);
				start_Hash.put("tDBInput_17", System.currentTimeMillis());

				currentComponent = "tDBInput_17";

				int tos_count_tDBInput_17 = 0;

				org.talend.designer.components.util.mssql.MSSqlGenerateTimestampUtil mssqlGTU_tDBInput_17 = org.talend.designer.components.util.mssql.MSSqlUtilFactory
						.getMSSqlGenerateTimestampUtil();

				java.util.List<String> talendToDBList_tDBInput_17 = new java.util.ArrayList();
				String[] talendToDBArray_tDBInput_17 = new String[] { "FLOAT", "NUMERIC", "NUMERIC IDENTITY", "DECIMAL",
						"DECIMAL IDENTITY", "REAL" };
				java.util.Collections.addAll(talendToDBList_tDBInput_17, talendToDBArray_tDBInput_17);
				int nb_line_tDBInput_17 = 0;
				java.sql.Connection conn_tDBInput_17 = null;
				conn_tDBInput_17 = (java.sql.Connection) globalMap.get("conn_tDBConnection_1");

				String dbschema_tDBInput_17 = (String) globalMap.get("dbschema_tDBConnection_1");

				java.sql.Statement stmt_tDBInput_17 = conn_tDBInput_17.createStatement();

				String dbquery_tDBInput_17 = "SELECT dbo.VW_IMPORT_USERDOC.USERDOC_SEQ,\n		dbo.VW_IMPORT_USERDOC.USERDOC_SERIES,\n		dbo.VW_IMPORT_USERDOC.USERDOC_NBR,\n"
						+ "		dbo.VW_IMPORT_USERDOC.DOC_ORI,\n		dbo.VW_IMPORT_USERDOC.DOC_SERIES,\n		dbo.VW_IMPORT_USERDOC.DOC_NBR,\n		dbo.VW_IMPORT_US"
						+ "ERDOC.IND_IMPORT,\n		dbo.VW_IMPORT_USERDOC.USERDOC_TYPE,\n		dbo.VW_IMPORT_USERDOC.LAW_CODE,\n		dbo.VW_IMPORT_USERDOC.FILING"
						+ "_DATE,\n		dbo.VW_IMPORT_USERDOC.RECEPTION_DATE,\n		dbo.VW_IMPORT_USERDOC.NOTES,\n		dbo.VW_IMPORT_USERDOC.APPLICANT_NOTES,\n	"
						+ "	dbo.VW_IMPORT_USERDOC.PERSON_NAME,\n		dbo.VW_IMPORT_USERDOC.PERSON_NAME_LANG2,\n		dbo.VW_IMPORT_USERDOC.NATIONALITY_COUNT"
						+ "RY_CODE,\n		dbo.VW_IMPORT_USERDOC.IND_COMPANY,\n		dbo.VW_IMPORT_USERDOC.LEGAL_NATURE,\n		dbo.VW_IMPORT_USERDOC.LEGAL_NATURE"
						+ "_LANG2,\n		dbo.VW_IMPORT_USERDOC.LEGAL_ID_TYPE,\n		dbo.VW_IMPORT_USERDOC.LEGAL_ID_NBR,\n		dbo.VW_IMPORT_USERDOC.INDIVIDUAL_"
						+ "ID_TYPE,\n		dbo.VW_IMPORT_USERDOC.INDIVIDUAL_ID_NBR,\n		dbo.VW_IMPORT_USERDOC.RESIDENCE_COUNTRY_CODE,\n		dbo.VW_IMPORT_USER"
						+ "DOC.STATE_NAME,\n		dbo.VW_IMPORT_USERDOC.STATE_CODE,\n		dbo.VW_IMPORT_USERDOC.CITY_NAME,\n		dbo.VW_IMPORT_USERDOC.CITY_CODE"
						+ ",\n		dbo.VW_IMPORT_USERDOC.ADDRESS_ZONE,\n		dbo.VW_IMPORT_USERDOC.ADDRESS_STREET,\n		dbo.VW_IMPORT_USERDOC.ADDRESS_STREET_L"
						+ "ANG2,\n		dbo.VW_IMPORT_USERDOC.ZIP_CODE,\n		dbo.VW_IMPORT_USERDOC.EMAIL,\n		dbo.VW_IMPORT_USERDOC.TELEPHONE,\n		dbo.VW_IMPOR"
						+ "T_USERDOC.PERSON_GROUP_CODE,\n		dbo.VW_IMPORT_USERDOC.CAPTURE_USER_ID,\n		dbo.VW_IMPORT_USERDOC.CAPTURE_DATE\nFROM	dbo.VW_I"
						+ "MPORT_USERDOC";

				globalMap.put("tDBInput_17_QUERY", dbquery_tDBInput_17);
				java.sql.ResultSet rs_tDBInput_17 = null;

				try {
					rs_tDBInput_17 = stmt_tDBInput_17.executeQuery(dbquery_tDBInput_17);
					java.sql.ResultSetMetaData rsmd_tDBInput_17 = rs_tDBInput_17.getMetaData();
					int colQtyInRs_tDBInput_17 = rsmd_tDBInput_17.getColumnCount();

					String tmpContent_tDBInput_17 = null;

					while (rs_tDBInput_17.next()) {
						nb_line_tDBInput_17++;

						if (colQtyInRs_tDBInput_17 < 1) {
							row27.USERDOC_SEQ = null;
						} else {

							tmpContent_tDBInput_17 = rs_tDBInput_17.getString(1);
							if (tmpContent_tDBInput_17 != null) {
								if (talendToDBList_tDBInput_17.contains(
										rsmd_tDBInput_17.getColumnTypeName(1).toUpperCase(java.util.Locale.ENGLISH))) {
									row27.USERDOC_SEQ = FormatterUtils.formatUnwithE(tmpContent_tDBInput_17);
								} else {
									row27.USERDOC_SEQ = tmpContent_tDBInput_17;
								}
							} else {
								row27.USERDOC_SEQ = null;
							}
						}
						if (colQtyInRs_tDBInput_17 < 2) {
							row27.USERDOC_SERIES = null;
						} else {

							row27.USERDOC_SERIES = rs_tDBInput_17.getBigDecimal(2);
							if (rs_tDBInput_17.wasNull()) {
								throw new RuntimeException("Null value in non-Nullable column");
							}
						}
						if (colQtyInRs_tDBInput_17 < 3) {
							row27.USERDOC_NBR = null;
						} else {

							row27.USERDOC_NBR = rs_tDBInput_17.getBigDecimal(3);
							if (rs_tDBInput_17.wasNull()) {
								throw new RuntimeException("Null value in non-Nullable column");
							}
						}
						if (colQtyInRs_tDBInput_17 < 4) {
							row27.DOC_ORI = null;
						} else {

							tmpContent_tDBInput_17 = rs_tDBInput_17.getString(4);
							if (tmpContent_tDBInput_17 != null) {
								if (talendToDBList_tDBInput_17.contains(
										rsmd_tDBInput_17.getColumnTypeName(4).toUpperCase(java.util.Locale.ENGLISH))) {
									row27.DOC_ORI = FormatterUtils.formatUnwithE(tmpContent_tDBInput_17);
								} else {
									row27.DOC_ORI = tmpContent_tDBInput_17;
								}
							} else {
								row27.DOC_ORI = null;
							}
						}
						if (colQtyInRs_tDBInput_17 < 5) {
							row27.DOC_SERIES = null;
						} else {

							row27.DOC_SERIES = rs_tDBInput_17.getBigDecimal(5);
							if (rs_tDBInput_17.wasNull()) {
								row27.DOC_SERIES = null;
							}
						}
						if (colQtyInRs_tDBInput_17 < 6) {
							row27.DOC_NBR = null;
						} else {

							row27.DOC_NBR = rs_tDBInput_17.getBigDecimal(6);
							if (rs_tDBInput_17.wasNull()) {
								row27.DOC_NBR = null;
							}
						}
						if (colQtyInRs_tDBInput_17 < 7) {
							row27.IND_IMPORT = null;
						} else {

							row27.IND_IMPORT = rs_tDBInput_17.getBigDecimal(7);
							if (rs_tDBInput_17.wasNull()) {
								row27.IND_IMPORT = null;
							}
						}
						if (colQtyInRs_tDBInput_17 < 8) {
							row27.USERDOC_TYPE = null;
						} else {

							tmpContent_tDBInput_17 = rs_tDBInput_17.getString(8);
							if (tmpContent_tDBInput_17 != null) {
								if (talendToDBList_tDBInput_17.contains(
										rsmd_tDBInput_17.getColumnTypeName(8).toUpperCase(java.util.Locale.ENGLISH))) {
									row27.USERDOC_TYPE = FormatterUtils.formatUnwithE(tmpContent_tDBInput_17);
								} else {
									row27.USERDOC_TYPE = tmpContent_tDBInput_17;
								}
							} else {
								row27.USERDOC_TYPE = null;
							}
						}
						if (colQtyInRs_tDBInput_17 < 9) {
							row27.LAW_CODE = null;
						} else {

							row27.LAW_CODE = rs_tDBInput_17.getBigDecimal(9);
							if (rs_tDBInput_17.wasNull()) {
								throw new RuntimeException("Null value in non-Nullable column");
							}
						}
						if (colQtyInRs_tDBInput_17 < 10) {
							row27.FILING_DATE = null;
						} else {

							row27.FILING_DATE = mssqlGTU_tDBInput_17.getDate(rsmd_tDBInput_17, rs_tDBInput_17, 10);

						}
						if (colQtyInRs_tDBInput_17 < 11) {
							row27.RECEPTION_DATE = null;
						} else {

							row27.RECEPTION_DATE = mssqlGTU_tDBInput_17.getDate(rsmd_tDBInput_17, rs_tDBInput_17, 11);

						}
						if (colQtyInRs_tDBInput_17 < 12) {
							row27.NOTES = null;
						} else {

							tmpContent_tDBInput_17 = rs_tDBInput_17.getString(12);
							if (tmpContent_tDBInput_17 != null) {
								if (talendToDBList_tDBInput_17.contains(
										rsmd_tDBInput_17.getColumnTypeName(12).toUpperCase(java.util.Locale.ENGLISH))) {
									row27.NOTES = FormatterUtils.formatUnwithE(tmpContent_tDBInput_17);
								} else {
									row27.NOTES = tmpContent_tDBInput_17;
								}
							} else {
								row27.NOTES = null;
							}
						}
						if (colQtyInRs_tDBInput_17 < 13) {
							row27.APPLICANT_NOTES = null;
						} else {

							tmpContent_tDBInput_17 = rs_tDBInput_17.getString(13);
							if (tmpContent_tDBInput_17 != null) {
								if (talendToDBList_tDBInput_17.contains(
										rsmd_tDBInput_17.getColumnTypeName(13).toUpperCase(java.util.Locale.ENGLISH))) {
									row27.APPLICANT_NOTES = FormatterUtils.formatUnwithE(tmpContent_tDBInput_17);
								} else {
									row27.APPLICANT_NOTES = tmpContent_tDBInput_17;
								}
							} else {
								row27.APPLICANT_NOTES = null;
							}
						}
						if (colQtyInRs_tDBInput_17 < 14) {
							row27.PERSON_NAME = null;
						} else {

							tmpContent_tDBInput_17 = rs_tDBInput_17.getString(14);
							if (tmpContent_tDBInput_17 != null) {
								if (talendToDBList_tDBInput_17.contains(
										rsmd_tDBInput_17.getColumnTypeName(14).toUpperCase(java.util.Locale.ENGLISH))) {
									row27.PERSON_NAME = FormatterUtils.formatUnwithE(tmpContent_tDBInput_17);
								} else {
									row27.PERSON_NAME = tmpContent_tDBInput_17;
								}
							} else {
								row27.PERSON_NAME = null;
							}
						}
						if (colQtyInRs_tDBInput_17 < 15) {
							row27.PERSON_NAME_LANG2 = null;
						} else {

							tmpContent_tDBInput_17 = rs_tDBInput_17.getString(15);
							if (tmpContent_tDBInput_17 != null) {
								if (talendToDBList_tDBInput_17.contains(
										rsmd_tDBInput_17.getColumnTypeName(15).toUpperCase(java.util.Locale.ENGLISH))) {
									row27.PERSON_NAME_LANG2 = FormatterUtils.formatUnwithE(tmpContent_tDBInput_17);
								} else {
									row27.PERSON_NAME_LANG2 = tmpContent_tDBInput_17;
								}
							} else {
								row27.PERSON_NAME_LANG2 = null;
							}
						}
						if (colQtyInRs_tDBInput_17 < 16) {
							row27.NATIONALITY_COUNTRY_CODE = null;
						} else {

							tmpContent_tDBInput_17 = rs_tDBInput_17.getString(16);
							if (tmpContent_tDBInput_17 != null) {
								if (talendToDBList_tDBInput_17.contains(
										rsmd_tDBInput_17.getColumnTypeName(16).toUpperCase(java.util.Locale.ENGLISH))) {
									row27.NATIONALITY_COUNTRY_CODE = FormatterUtils
											.formatUnwithE(tmpContent_tDBInput_17);
								} else {
									row27.NATIONALITY_COUNTRY_CODE = tmpContent_tDBInput_17;
								}
							} else {
								row27.NATIONALITY_COUNTRY_CODE = null;
							}
						}
						if (colQtyInRs_tDBInput_17 < 17) {
							row27.IND_COMPANY = null;
						} else {

							row27.IND_COMPANY = rs_tDBInput_17.getBigDecimal(17);
							if (rs_tDBInput_17.wasNull()) {
								row27.IND_COMPANY = null;
							}
						}
						if (colQtyInRs_tDBInput_17 < 18) {
							row27.LEGAL_NATURE = null;
						} else {

							tmpContent_tDBInput_17 = rs_tDBInput_17.getString(18);
							if (tmpContent_tDBInput_17 != null) {
								if (talendToDBList_tDBInput_17.contains(
										rsmd_tDBInput_17.getColumnTypeName(18).toUpperCase(java.util.Locale.ENGLISH))) {
									row27.LEGAL_NATURE = FormatterUtils.formatUnwithE(tmpContent_tDBInput_17);
								} else {
									row27.LEGAL_NATURE = tmpContent_tDBInput_17;
								}
							} else {
								row27.LEGAL_NATURE = null;
							}
						}
						if (colQtyInRs_tDBInput_17 < 19) {
							row27.LEGAL_NATURE_LANG2 = null;
						} else {

							tmpContent_tDBInput_17 = rs_tDBInput_17.getString(19);
							if (tmpContent_tDBInput_17 != null) {
								if (talendToDBList_tDBInput_17.contains(
										rsmd_tDBInput_17.getColumnTypeName(19).toUpperCase(java.util.Locale.ENGLISH))) {
									row27.LEGAL_NATURE_LANG2 = FormatterUtils.formatUnwithE(tmpContent_tDBInput_17);
								} else {
									row27.LEGAL_NATURE_LANG2 = tmpContent_tDBInput_17;
								}
							} else {
								row27.LEGAL_NATURE_LANG2 = null;
							}
						}
						if (colQtyInRs_tDBInput_17 < 20) {
							row27.LEGAL_ID_TYPE = null;
						} else {

							tmpContent_tDBInput_17 = rs_tDBInput_17.getString(20);
							if (tmpContent_tDBInput_17 != null) {
								if (talendToDBList_tDBInput_17.contains(
										rsmd_tDBInput_17.getColumnTypeName(20).toUpperCase(java.util.Locale.ENGLISH))) {
									row27.LEGAL_ID_TYPE = FormatterUtils.formatUnwithE(tmpContent_tDBInput_17);
								} else {
									row27.LEGAL_ID_TYPE = tmpContent_tDBInput_17;
								}
							} else {
								row27.LEGAL_ID_TYPE = null;
							}
						}
						if (colQtyInRs_tDBInput_17 < 21) {
							row27.LEGAL_ID_NBR = null;
						} else {

							row27.LEGAL_ID_NBR = rs_tDBInput_17.getBigDecimal(21);
							if (rs_tDBInput_17.wasNull()) {
								row27.LEGAL_ID_NBR = null;
							}
						}
						if (colQtyInRs_tDBInput_17 < 22) {
							row27.INDIVIDUAL_ID_TYPE = null;
						} else {

							tmpContent_tDBInput_17 = rs_tDBInput_17.getString(22);
							if (tmpContent_tDBInput_17 != null) {
								if (talendToDBList_tDBInput_17.contains(
										rsmd_tDBInput_17.getColumnTypeName(22).toUpperCase(java.util.Locale.ENGLISH))) {
									row27.INDIVIDUAL_ID_TYPE = FormatterUtils.formatUnwithE(tmpContent_tDBInput_17);
								} else {
									row27.INDIVIDUAL_ID_TYPE = tmpContent_tDBInput_17;
								}
							} else {
								row27.INDIVIDUAL_ID_TYPE = null;
							}
						}
						if (colQtyInRs_tDBInput_17 < 23) {
							row27.INDIVIDUAL_ID_NBR = null;
						} else {

							row27.INDIVIDUAL_ID_NBR = rs_tDBInput_17.getBigDecimal(23);
							if (rs_tDBInput_17.wasNull()) {
								row27.INDIVIDUAL_ID_NBR = null;
							}
						}
						if (colQtyInRs_tDBInput_17 < 24) {
							row27.RESIDENCE_COUNTRY_CODE = null;
						} else {

							tmpContent_tDBInput_17 = rs_tDBInput_17.getString(24);
							if (tmpContent_tDBInput_17 != null) {
								if (talendToDBList_tDBInput_17.contains(
										rsmd_tDBInput_17.getColumnTypeName(24).toUpperCase(java.util.Locale.ENGLISH))) {
									row27.RESIDENCE_COUNTRY_CODE = FormatterUtils.formatUnwithE(tmpContent_tDBInput_17);
								} else {
									row27.RESIDENCE_COUNTRY_CODE = tmpContent_tDBInput_17;
								}
							} else {
								row27.RESIDENCE_COUNTRY_CODE = null;
							}
						}
						if (colQtyInRs_tDBInput_17 < 25) {
							row27.STATE_NAME = null;
						} else {

							tmpContent_tDBInput_17 = rs_tDBInput_17.getString(25);
							if (tmpContent_tDBInput_17 != null) {
								if (talendToDBList_tDBInput_17.contains(
										rsmd_tDBInput_17.getColumnTypeName(25).toUpperCase(java.util.Locale.ENGLISH))) {
									row27.STATE_NAME = FormatterUtils.formatUnwithE(tmpContent_tDBInput_17);
								} else {
									row27.STATE_NAME = tmpContent_tDBInput_17;
								}
							} else {
								row27.STATE_NAME = null;
							}
						}
						if (colQtyInRs_tDBInput_17 < 26) {
							row27.STATE_CODE = null;
						} else {

							tmpContent_tDBInput_17 = rs_tDBInput_17.getString(26);
							if (tmpContent_tDBInput_17 != null) {
								if (talendToDBList_tDBInput_17.contains(
										rsmd_tDBInput_17.getColumnTypeName(26).toUpperCase(java.util.Locale.ENGLISH))) {
									row27.STATE_CODE = FormatterUtils.formatUnwithE(tmpContent_tDBInput_17);
								} else {
									row27.STATE_CODE = tmpContent_tDBInput_17;
								}
							} else {
								row27.STATE_CODE = null;
							}
						}
						if (colQtyInRs_tDBInput_17 < 27) {
							row27.CITY_NAME = null;
						} else {

							tmpContent_tDBInput_17 = rs_tDBInput_17.getString(27);
							if (tmpContent_tDBInput_17 != null) {
								if (talendToDBList_tDBInput_17.contains(
										rsmd_tDBInput_17.getColumnTypeName(27).toUpperCase(java.util.Locale.ENGLISH))) {
									row27.CITY_NAME = FormatterUtils.formatUnwithE(tmpContent_tDBInput_17);
								} else {
									row27.CITY_NAME = tmpContent_tDBInput_17;
								}
							} else {
								row27.CITY_NAME = null;
							}
						}
						if (colQtyInRs_tDBInput_17 < 28) {
							row27.CITY_CODE = null;
						} else {

							tmpContent_tDBInput_17 = rs_tDBInput_17.getString(28);
							if (tmpContent_tDBInput_17 != null) {
								if (talendToDBList_tDBInput_17.contains(
										rsmd_tDBInput_17.getColumnTypeName(28).toUpperCase(java.util.Locale.ENGLISH))) {
									row27.CITY_CODE = FormatterUtils.formatUnwithE(tmpContent_tDBInput_17);
								} else {
									row27.CITY_CODE = tmpContent_tDBInput_17;
								}
							} else {
								row27.CITY_CODE = null;
							}
						}
						if (colQtyInRs_tDBInput_17 < 29) {
							row27.ADDRESS_ZONE = null;
						} else {

							tmpContent_tDBInput_17 = rs_tDBInput_17.getString(29);
							if (tmpContent_tDBInput_17 != null) {
								if (talendToDBList_tDBInput_17.contains(
										rsmd_tDBInput_17.getColumnTypeName(29).toUpperCase(java.util.Locale.ENGLISH))) {
									row27.ADDRESS_ZONE = FormatterUtils.formatUnwithE(tmpContent_tDBInput_17);
								} else {
									row27.ADDRESS_ZONE = tmpContent_tDBInput_17;
								}
							} else {
								row27.ADDRESS_ZONE = null;
							}
						}
						if (colQtyInRs_tDBInput_17 < 30) {
							row27.ADDRESS_STREET = null;
						} else {

							tmpContent_tDBInput_17 = rs_tDBInput_17.getString(30);
							if (tmpContent_tDBInput_17 != null) {
								if (talendToDBList_tDBInput_17.contains(
										rsmd_tDBInput_17.getColumnTypeName(30).toUpperCase(java.util.Locale.ENGLISH))) {
									row27.ADDRESS_STREET = FormatterUtils.formatUnwithE(tmpContent_tDBInput_17);
								} else {
									row27.ADDRESS_STREET = tmpContent_tDBInput_17;
								}
							} else {
								row27.ADDRESS_STREET = null;
							}
						}
						if (colQtyInRs_tDBInput_17 < 31) {
							row27.ADDRESS_STREET_LANG2 = null;
						} else {

							tmpContent_tDBInput_17 = rs_tDBInput_17.getString(31);
							if (tmpContent_tDBInput_17 != null) {
								if (talendToDBList_tDBInput_17.contains(
										rsmd_tDBInput_17.getColumnTypeName(31).toUpperCase(java.util.Locale.ENGLISH))) {
									row27.ADDRESS_STREET_LANG2 = FormatterUtils.formatUnwithE(tmpContent_tDBInput_17);
								} else {
									row27.ADDRESS_STREET_LANG2 = tmpContent_tDBInput_17;
								}
							} else {
								row27.ADDRESS_STREET_LANG2 = null;
							}
						}
						if (colQtyInRs_tDBInput_17 < 32) {
							row27.ZIP_CODE = null;
						} else {

							tmpContent_tDBInput_17 = rs_tDBInput_17.getString(32);
							if (tmpContent_tDBInput_17 != null) {
								if (talendToDBList_tDBInput_17.contains(
										rsmd_tDBInput_17.getColumnTypeName(32).toUpperCase(java.util.Locale.ENGLISH))) {
									row27.ZIP_CODE = FormatterUtils.formatUnwithE(tmpContent_tDBInput_17);
								} else {
									row27.ZIP_CODE = tmpContent_tDBInput_17;
								}
							} else {
								row27.ZIP_CODE = null;
							}
						}
						if (colQtyInRs_tDBInput_17 < 33) {
							row27.EMAIL = null;
						} else {

							tmpContent_tDBInput_17 = rs_tDBInput_17.getString(33);
							if (tmpContent_tDBInput_17 != null) {
								if (talendToDBList_tDBInput_17.contains(
										rsmd_tDBInput_17.getColumnTypeName(33).toUpperCase(java.util.Locale.ENGLISH))) {
									row27.EMAIL = FormatterUtils.formatUnwithE(tmpContent_tDBInput_17);
								} else {
									row27.EMAIL = tmpContent_tDBInput_17;
								}
							} else {
								row27.EMAIL = null;
							}
						}
						if (colQtyInRs_tDBInput_17 < 34) {
							row27.TELEPHONE = null;
						} else {

							tmpContent_tDBInput_17 = rs_tDBInput_17.getString(34);
							if (tmpContent_tDBInput_17 != null) {
								if (talendToDBList_tDBInput_17.contains(
										rsmd_tDBInput_17.getColumnTypeName(34).toUpperCase(java.util.Locale.ENGLISH))) {
									row27.TELEPHONE = FormatterUtils.formatUnwithE(tmpContent_tDBInput_17);
								} else {
									row27.TELEPHONE = tmpContent_tDBInput_17;
								}
							} else {
								row27.TELEPHONE = null;
							}
						}
						if (colQtyInRs_tDBInput_17 < 35) {
							row27.PERSON_GROUP_CODE = null;
						} else {

							tmpContent_tDBInput_17 = rs_tDBInput_17.getString(35);
							if (tmpContent_tDBInput_17 != null) {
								if (talendToDBList_tDBInput_17.contains(
										rsmd_tDBInput_17.getColumnTypeName(35).toUpperCase(java.util.Locale.ENGLISH))) {
									row27.PERSON_GROUP_CODE = FormatterUtils.formatUnwithE(tmpContent_tDBInput_17);
								} else {
									row27.PERSON_GROUP_CODE = tmpContent_tDBInput_17;
								}
							} else {
								row27.PERSON_GROUP_CODE = null;
							}
						}
						if (colQtyInRs_tDBInput_17 < 36) {
							row27.CAPTURE_USER_ID = null;
						} else {

							row27.CAPTURE_USER_ID = rs_tDBInput_17.getBigDecimal(36);
							if (rs_tDBInput_17.wasNull()) {
								row27.CAPTURE_USER_ID = null;
							}
						}
						if (colQtyInRs_tDBInput_17 < 37) {
							row27.CAPTURE_DATE = null;
						} else {

							row27.CAPTURE_DATE = mssqlGTU_tDBInput_17.getDate(rsmd_tDBInput_17, rs_tDBInput_17, 37);

						}

						/**
						 * [tDBInput_17 begin ] stop
						 */

						/**
						 * [tDBInput_17 main ] start
						 */

						currentComponent = "tDBInput_17";

						tos_count_tDBInput_17++;

						/**
						 * [tDBInput_17 main ] stop
						 */

						/**
						 * [tDBInput_17 process_data_begin ] start
						 */

						currentComponent = "tDBInput_17";

						/**
						 * [tDBInput_17 process_data_begin ] stop
						 */

						/**
						 * [tAdvancedHash_row27 main ] start
						 */

						currentComponent = "tAdvancedHash_row27";

						if (execStat) {
							runStat.updateStatOnConnection(iterateId, 1, 1

									, "row27"

							);
						}

						row27Struct row27_HashRow = new row27Struct();

						row27_HashRow.USERDOC_SEQ = row27.USERDOC_SEQ;

						row27_HashRow.USERDOC_SERIES = row27.USERDOC_SERIES;

						row27_HashRow.USERDOC_NBR = row27.USERDOC_NBR;

						row27_HashRow.DOC_ORI = row27.DOC_ORI;

						row27_HashRow.DOC_SERIES = row27.DOC_SERIES;

						row27_HashRow.DOC_NBR = row27.DOC_NBR;

						row27_HashRow.IND_IMPORT = row27.IND_IMPORT;

						row27_HashRow.USERDOC_TYPE = row27.USERDOC_TYPE;

						row27_HashRow.LAW_CODE = row27.LAW_CODE;

						row27_HashRow.FILING_DATE = row27.FILING_DATE;

						row27_HashRow.RECEPTION_DATE = row27.RECEPTION_DATE;

						row27_HashRow.NOTES = row27.NOTES;

						row27_HashRow.APPLICANT_NOTES = row27.APPLICANT_NOTES;

						row27_HashRow.PERSON_NAME = row27.PERSON_NAME;

						row27_HashRow.PERSON_NAME_LANG2 = row27.PERSON_NAME_LANG2;

						row27_HashRow.NATIONALITY_COUNTRY_CODE = row27.NATIONALITY_COUNTRY_CODE;

						row27_HashRow.IND_COMPANY = row27.IND_COMPANY;

						row27_HashRow.LEGAL_NATURE = row27.LEGAL_NATURE;

						row27_HashRow.LEGAL_NATURE_LANG2 = row27.LEGAL_NATURE_LANG2;

						row27_HashRow.LEGAL_ID_TYPE = row27.LEGAL_ID_TYPE;

						row27_HashRow.LEGAL_ID_NBR = row27.LEGAL_ID_NBR;

						row27_HashRow.INDIVIDUAL_ID_TYPE = row27.INDIVIDUAL_ID_TYPE;

						row27_HashRow.INDIVIDUAL_ID_NBR = row27.INDIVIDUAL_ID_NBR;

						row27_HashRow.RESIDENCE_COUNTRY_CODE = row27.RESIDENCE_COUNTRY_CODE;

						row27_HashRow.STATE_NAME = row27.STATE_NAME;

						row27_HashRow.STATE_CODE = row27.STATE_CODE;

						row27_HashRow.CITY_NAME = row27.CITY_NAME;

						row27_HashRow.CITY_CODE = row27.CITY_CODE;

						row27_HashRow.ADDRESS_ZONE = row27.ADDRESS_ZONE;

						row27_HashRow.ADDRESS_STREET = row27.ADDRESS_STREET;

						row27_HashRow.ADDRESS_STREET_LANG2 = row27.ADDRESS_STREET_LANG2;

						row27_HashRow.ZIP_CODE = row27.ZIP_CODE;

						row27_HashRow.EMAIL = row27.EMAIL;

						row27_HashRow.TELEPHONE = row27.TELEPHONE;

						row27_HashRow.PERSON_GROUP_CODE = row27.PERSON_GROUP_CODE;

						row27_HashRow.CAPTURE_USER_ID = row27.CAPTURE_USER_ID;

						row27_HashRow.CAPTURE_DATE = row27.CAPTURE_DATE;

						tHash_Lookup_row27.put(row27_HashRow);

						tos_count_tAdvancedHash_row27++;

						/**
						 * [tAdvancedHash_row27 main ] stop
						 */

						/**
						 * [tAdvancedHash_row27 process_data_begin ] start
						 */

						currentComponent = "tAdvancedHash_row27";

						/**
						 * [tAdvancedHash_row27 process_data_begin ] stop
						 */

						/**
						 * [tAdvancedHash_row27 process_data_end ] start
						 */

						currentComponent = "tAdvancedHash_row27";

						/**
						 * [tAdvancedHash_row27 process_data_end ] stop
						 */

						/**
						 * [tDBInput_17 process_data_end ] start
						 */

						currentComponent = "tDBInput_17";

						/**
						 * [tDBInput_17 process_data_end ] stop
						 */

						/**
						 * [tDBInput_17 end ] start
						 */

						currentComponent = "tDBInput_17";

					}
				} finally {
					if (rs_tDBInput_17 != null) {
						rs_tDBInput_17.close();
					}
					if (stmt_tDBInput_17 != null) {
						stmt_tDBInput_17.close();
					}
				}
				globalMap.put("tDBInput_17_NB_LINE", nb_line_tDBInput_17);

				ok_Hash.put("tDBInput_17", true);
				end_Hash.put("tDBInput_17", System.currentTimeMillis());

				/**
				 * [tDBInput_17 end ] stop
				 */

				/**
				 * [tAdvancedHash_row27 end ] start
				 */

				currentComponent = "tAdvancedHash_row27";

				tHash_Lookup_row27.endPut();

				if (execStat) {
					runStat.updateStat(resourceMap, iterateId, 2, 0, "row27");
				}

				ok_Hash.put("tAdvancedHash_row27", true);
				end_Hash.put("tAdvancedHash_row27", System.currentTimeMillis());

				/**
				 * [tAdvancedHash_row27 end ] stop
				 */

			} // end the resume

		} catch (java.lang.Exception e) {

			TalendException te = new TalendException(e, currentComponent, globalMap);

			throw te;
		} catch (java.lang.Error error) {

			runStat.stopThreadStat();

			throw error;
		} finally {

			try {

				/**
				 * [tDBInput_17 finally ] start
				 */

				currentComponent = "tDBInput_17";

				/**
				 * [tDBInput_17 finally ] stop
				 */

				/**
				 * [tAdvancedHash_row27 finally ] start
				 */

				currentComponent = "tAdvancedHash_row27";

				/**
				 * [tAdvancedHash_row27 finally ] stop
				 */

			} catch (java.lang.Exception e) {
				// ignore
			} catch (java.lang.Error error) {
				// ignore
			}
			resourceMap = null;
		}

		globalMap.put("tDBInput_17_SUBPROCESS_STATE", 1);
	}

	public static class row28Struct implements routines.system.IPersistableComparableLookupRow<row28Struct> {
		final static byte[] commonByteArrayLock_WIPO_PROJECTS_E1a_Marc_Userdoc_a_interm = new byte[0];
		static byte[] commonByteArray_WIPO_PROJECTS_E1a_Marc_Userdoc_a_interm = new byte[0];
		protected static final int DEFAULT_HASHCODE = 1;
		protected static final int PRIME = 31;
		protected int hashCode = DEFAULT_HASHCODE;
		public boolean hashCodeDirty = true;

		public String loopKey;

		public BigDecimal AGENT_CODE;

		public BigDecimal getAGENT_CODE() {
			return this.AGENT_CODE;
		}

		public String PERSON_NAME;

		public String getPERSON_NAME() {
			return this.PERSON_NAME;
		}

		public String PERSON_NAME_LANG2;

		public String getPERSON_NAME_LANG2() {
			return this.PERSON_NAME_LANG2;
		}

		public String NATIONALITY_COUNTRY_CODE;

		public String getNATIONALITY_COUNTRY_CODE() {
			return this.NATIONALITY_COUNTRY_CODE;
		}

		public BigDecimal IND_COMPANY;

		public BigDecimal getIND_COMPANY() {
			return this.IND_COMPANY;
		}

		public String LEGAL_NATURE;

		public String getLEGAL_NATURE() {
			return this.LEGAL_NATURE;
		}

		public String LEGAL_NATURE_LANG2;

		public String getLEGAL_NATURE_LANG2() {
			return this.LEGAL_NATURE_LANG2;
		}

		public String LEGAL_ID_TYPE;

		public String getLEGAL_ID_TYPE() {
			return this.LEGAL_ID_TYPE;
		}

		public BigDecimal LEGAL_ID_NBR;

		public BigDecimal getLEGAL_ID_NBR() {
			return this.LEGAL_ID_NBR;
		}

		public String INDIVIDUAL_ID_TYPE;

		public String getINDIVIDUAL_ID_TYPE() {
			return this.INDIVIDUAL_ID_TYPE;
		}

		public BigDecimal INDIVIDUAL_ID_NBR;

		public BigDecimal getINDIVIDUAL_ID_NBR() {
			return this.INDIVIDUAL_ID_NBR;
		}

		public String RESIDENCE_COUNTRY_CODE;

		public String getRESIDENCE_COUNTRY_CODE() {
			return this.RESIDENCE_COUNTRY_CODE;
		}

		public String STATE_NAME;

		public String getSTATE_NAME() {
			return this.STATE_NAME;
		}

		public String CITY_NAME;

		public String getCITY_NAME() {
			return this.CITY_NAME;
		}

		public String CITY_CODE;

		public String getCITY_CODE() {
			return this.CITY_CODE;
		}

		public String STATE_CODE;

		public String getSTATE_CODE() {
			return this.STATE_CODE;
		}

		public String ADDRESS_ZONE;

		public String getADDRESS_ZONE() {
			return this.ADDRESS_ZONE;
		}

		public String ADDRESS_STREET;

		public String getADDRESS_STREET() {
			return this.ADDRESS_STREET;
		}

		public String ADDRESS_STREET_LANG2;

		public String getADDRESS_STREET_LANG2() {
			return this.ADDRESS_STREET_LANG2;
		}

		public String ZIP_CODE;

		public String getZIP_CODE() {
			return this.ZIP_CODE;
		}

		public String EMAIL;

		public String getEMAIL() {
			return this.EMAIL;
		}

		public String TELEPHONE;

		public String getTELEPHONE() {
			return this.TELEPHONE;
		}

		public String PERSON_GROUP_CODE;

		public String getPERSON_GROUP_CODE() {
			return this.PERSON_GROUP_CODE;
		}

		@Override
		public int hashCode() {
			if (this.hashCodeDirty) {
				final int prime = PRIME;
				int result = DEFAULT_HASHCODE;

				result = prime * result
						+ ((this.AGENT_CODE == null) ? 0 : new Double(this.AGENT_CODE.doubleValue()).hashCode());

				this.hashCode = result;
				this.hashCodeDirty = false;
			}
			return this.hashCode;
		}

		@Override
		public boolean equals(Object obj) {
			if (this == obj)
				return true;
			if (obj == null)
				return false;
			if (getClass() != obj.getClass())
				return false;
			final row28Struct other = (row28Struct) obj;

			if (this.AGENT_CODE == null) {
				if (other.AGENT_CODE != null)
					return false;

			} else if ((other.AGENT_CODE == null) || (this.AGENT_CODE.compareTo(other.AGENT_CODE) != 0))

				return false;

			return true;
		}

		public void copyDataTo(row28Struct other) {

			other.AGENT_CODE = this.AGENT_CODE;
			other.PERSON_NAME = this.PERSON_NAME;
			other.PERSON_NAME_LANG2 = this.PERSON_NAME_LANG2;
			other.NATIONALITY_COUNTRY_CODE = this.NATIONALITY_COUNTRY_CODE;
			other.IND_COMPANY = this.IND_COMPANY;
			other.LEGAL_NATURE = this.LEGAL_NATURE;
			other.LEGAL_NATURE_LANG2 = this.LEGAL_NATURE_LANG2;
			other.LEGAL_ID_TYPE = this.LEGAL_ID_TYPE;
			other.LEGAL_ID_NBR = this.LEGAL_ID_NBR;
			other.INDIVIDUAL_ID_TYPE = this.INDIVIDUAL_ID_TYPE;
			other.INDIVIDUAL_ID_NBR = this.INDIVIDUAL_ID_NBR;
			other.RESIDENCE_COUNTRY_CODE = this.RESIDENCE_COUNTRY_CODE;
			other.STATE_NAME = this.STATE_NAME;
			other.CITY_NAME = this.CITY_NAME;
			other.CITY_CODE = this.CITY_CODE;
			other.STATE_CODE = this.STATE_CODE;
			other.ADDRESS_ZONE = this.ADDRESS_ZONE;
			other.ADDRESS_STREET = this.ADDRESS_STREET;
			other.ADDRESS_STREET_LANG2 = this.ADDRESS_STREET_LANG2;
			other.ZIP_CODE = this.ZIP_CODE;
			other.EMAIL = this.EMAIL;
			other.TELEPHONE = this.TELEPHONE;
			other.PERSON_GROUP_CODE = this.PERSON_GROUP_CODE;

		}

		public void copyKeysDataTo(row28Struct other) {

			other.AGENT_CODE = this.AGENT_CODE;

		}

		private String readString(DataInputStream dis, ObjectInputStream ois) throws IOException {
			String strReturn = null;
			int length = 0;
			length = dis.readInt();
			if (length == -1) {
				strReturn = null;
			} else {
				byte[] byteArray = new byte[length];
				dis.read(byteArray);
				strReturn = new String(byteArray, utf8Charset);
			}
			return strReturn;
		}

		private void writeString(String str, DataOutputStream dos, ObjectOutputStream oos) throws IOException {
			if (str == null) {
				dos.writeInt(-1);
			} else {
				byte[] byteArray = str.getBytes(utf8Charset);
				dos.writeInt(byteArray.length);
				dos.write(byteArray);
			}
		}

		public void readKeysData(ObjectInputStream dis) {

			synchronized (commonByteArrayLock_WIPO_PROJECTS_E1a_Marc_Userdoc_a_interm) {

				try {

					int length = 0;

					this.AGENT_CODE = (BigDecimal) dis.readObject();

				} catch (IOException e) {
					throw new RuntimeException(e);

				} catch (ClassNotFoundException eCNFE) {
					throw new RuntimeException(eCNFE);

				}

			}

		}

		public void writeKeysData(ObjectOutputStream dos) {
			try {

				// BigDecimal

				dos.writeObject(this.AGENT_CODE);

			} catch (IOException e) {
				throw new RuntimeException(e);
			}

		}

		/**
		 * Fill Values data by reading ObjectInputStream.
		 */
		public void readValuesData(DataInputStream dis, ObjectInputStream ois) {
			try {

				int length = 0;

				this.PERSON_NAME = readString(dis, ois);

				this.PERSON_NAME_LANG2 = readString(dis, ois);

				this.NATIONALITY_COUNTRY_CODE = readString(dis, ois);

				this.IND_COMPANY = (BigDecimal) ois.readObject();

				this.LEGAL_NATURE = readString(dis, ois);

				this.LEGAL_NATURE_LANG2 = readString(dis, ois);

				this.LEGAL_ID_TYPE = readString(dis, ois);

				this.LEGAL_ID_NBR = (BigDecimal) ois.readObject();

				this.INDIVIDUAL_ID_TYPE = readString(dis, ois);

				this.INDIVIDUAL_ID_NBR = (BigDecimal) ois.readObject();

				this.RESIDENCE_COUNTRY_CODE = readString(dis, ois);

				this.STATE_NAME = readString(dis, ois);

				this.CITY_NAME = readString(dis, ois);

				this.CITY_CODE = readString(dis, ois);

				this.STATE_CODE = readString(dis, ois);

				this.ADDRESS_ZONE = readString(dis, ois);

				this.ADDRESS_STREET = readString(dis, ois);

				this.ADDRESS_STREET_LANG2 = readString(dis, ois);

				this.ZIP_CODE = readString(dis, ois);

				this.EMAIL = readString(dis, ois);

				this.TELEPHONE = readString(dis, ois);

				this.PERSON_GROUP_CODE = readString(dis, ois);

			} catch (IOException e) {
				throw new RuntimeException(e);

			} catch (ClassNotFoundException eCNFE) {
				throw new RuntimeException(eCNFE);

			}

		}

		/**
		 * Return a byte array which represents Values data.
		 */
		public void writeValuesData(DataOutputStream dos, ObjectOutputStream oos) {
			try {

				writeString(this.PERSON_NAME, dos, oos);

				writeString(this.PERSON_NAME_LANG2, dos, oos);

				writeString(this.NATIONALITY_COUNTRY_CODE, dos, oos);

				oos.writeObject(this.IND_COMPANY);

				writeString(this.LEGAL_NATURE, dos, oos);

				writeString(this.LEGAL_NATURE_LANG2, dos, oos);

				writeString(this.LEGAL_ID_TYPE, dos, oos);

				oos.writeObject(this.LEGAL_ID_NBR);

				writeString(this.INDIVIDUAL_ID_TYPE, dos, oos);

				oos.writeObject(this.INDIVIDUAL_ID_NBR);

				writeString(this.RESIDENCE_COUNTRY_CODE, dos, oos);

				writeString(this.STATE_NAME, dos, oos);

				writeString(this.CITY_NAME, dos, oos);

				writeString(this.CITY_CODE, dos, oos);

				writeString(this.STATE_CODE, dos, oos);

				writeString(this.ADDRESS_ZONE, dos, oos);

				writeString(this.ADDRESS_STREET, dos, oos);

				writeString(this.ADDRESS_STREET_LANG2, dos, oos);

				writeString(this.ZIP_CODE, dos, oos);

				writeString(this.EMAIL, dos, oos);

				writeString(this.TELEPHONE, dos, oos);

				writeString(this.PERSON_GROUP_CODE, dos, oos);

			} catch (IOException e) {
				throw new RuntimeException(e);
			}

		}

		public String toString() {

			StringBuilder sb = new StringBuilder();
			sb.append(super.toString());
			sb.append("[");
			sb.append("AGENT_CODE=" + String.valueOf(AGENT_CODE));
			sb.append(",PERSON_NAME=" + PERSON_NAME);
			sb.append(",PERSON_NAME_LANG2=" + PERSON_NAME_LANG2);
			sb.append(",NATIONALITY_COUNTRY_CODE=" + NATIONALITY_COUNTRY_CODE);
			sb.append(",IND_COMPANY=" + String.valueOf(IND_COMPANY));
			sb.append(",LEGAL_NATURE=" + LEGAL_NATURE);
			sb.append(",LEGAL_NATURE_LANG2=" + LEGAL_NATURE_LANG2);
			sb.append(",LEGAL_ID_TYPE=" + LEGAL_ID_TYPE);
			sb.append(",LEGAL_ID_NBR=" + String.valueOf(LEGAL_ID_NBR));
			sb.append(",INDIVIDUAL_ID_TYPE=" + INDIVIDUAL_ID_TYPE);
			sb.append(",INDIVIDUAL_ID_NBR=" + String.valueOf(INDIVIDUAL_ID_NBR));
			sb.append(",RESIDENCE_COUNTRY_CODE=" + RESIDENCE_COUNTRY_CODE);
			sb.append(",STATE_NAME=" + STATE_NAME);
			sb.append(",CITY_NAME=" + CITY_NAME);
			sb.append(",CITY_CODE=" + CITY_CODE);
			sb.append(",STATE_CODE=" + STATE_CODE);
			sb.append(",ADDRESS_ZONE=" + ADDRESS_ZONE);
			sb.append(",ADDRESS_STREET=" + ADDRESS_STREET);
			sb.append(",ADDRESS_STREET_LANG2=" + ADDRESS_STREET_LANG2);
			sb.append(",ZIP_CODE=" + ZIP_CODE);
			sb.append(",EMAIL=" + EMAIL);
			sb.append(",TELEPHONE=" + TELEPHONE);
			sb.append(",PERSON_GROUP_CODE=" + PERSON_GROUP_CODE);
			sb.append("]");

			return sb.toString();
		}

		/**
		 * Compare keys
		 */
		public int compareTo(row28Struct other) {

			int returnValue = -1;

			returnValue = checkNullsAndCompare(this.AGENT_CODE, other.AGENT_CODE);
			if (returnValue != 0) {
				return returnValue;
			}

			return returnValue;
		}

		private int checkNullsAndCompare(Object object1, Object object2) {
			int returnValue = 0;
			if (object1 instanceof Comparable && object2 instanceof Comparable) {
				returnValue = ((Comparable) object1).compareTo(object2);
			} else if (object1 != null && object2 != null) {
				returnValue = compareStrings(object1.toString(), object2.toString());
			} else if (object1 == null && object2 != null) {
				returnValue = 1;
			} else if (object1 != null && object2 == null) {
				returnValue = -1;
			} else {
				returnValue = 0;
			}

			return returnValue;
		}

		private int compareStrings(String string1, String string2) {
			return string1.compareTo(string2);
		}

	}

	public void tDBInput_18Process(final java.util.Map<String, Object> globalMap) throws TalendException {
		globalMap.put("tDBInput_18_SUBPROCESS_STATE", 0);

		final boolean execStat = this.execStat;

		String iterateId = "";

		String currentComponent = "";
		java.util.Map<String, Object> resourceMap = new java.util.HashMap<String, Object>();

		try {
			// TDI-39566 avoid throwing an useless Exception
			boolean resumeIt = true;
			if (globalResumeTicket == false && resumeEntryMethodName != null) {
				String currentMethodName = new java.lang.Exception().getStackTrace()[0].getMethodName();
				resumeIt = resumeEntryMethodName.equals(currentMethodName);
			}
			if (resumeIt || globalResumeTicket) { // start the resume
				globalResumeTicket = true;

				row28Struct row28 = new row28Struct();

				/**
				 * [tAdvancedHash_row28 begin ] start
				 */

				ok_Hash.put("tAdvancedHash_row28", false);
				start_Hash.put("tAdvancedHash_row28", System.currentTimeMillis());

				currentComponent = "tAdvancedHash_row28";

				if (execStat) {
					runStat.updateStatOnConnection(resourceMap, iterateId, 0, 0, "row28");
				}

				int tos_count_tAdvancedHash_row28 = 0;

				// connection name:row28
				// source node:tDBInput_18 - inputs:(after_tDBInput_3) outputs:(row28,row28) |
				// target node:tAdvancedHash_row28 - inputs:(row28) outputs:()
				// linked node: tMap_8 - inputs:(row26,row27,row28) outputs:(reprs)

				org.talend.designer.components.lookup.common.ICommonLookup.MATCHING_MODE matchingModeEnum_row28 = org.talend.designer.components.lookup.common.ICommonLookup.MATCHING_MODE.UNIQUE_MATCH;

				org.talend.designer.components.lookup.memory.AdvancedMemoryLookup<row28Struct> tHash_Lookup_row28 = org.talend.designer.components.lookup.memory.AdvancedMemoryLookup
						.<row28Struct>getLookup(matchingModeEnum_row28);

				globalMap.put("tHash_Lookup_row28", tHash_Lookup_row28);

				/**
				 * [tAdvancedHash_row28 begin ] stop
				 */

				/**
				 * [tDBInput_18 begin ] start
				 */

				ok_Hash.put("tDBInput_18", false);
				start_Hash.put("tDBInput_18", System.currentTimeMillis());

				currentComponent = "tDBInput_18";

				int tos_count_tDBInput_18 = 0;

				org.talend.designer.components.util.mssql.MSSqlGenerateTimestampUtil mssqlGTU_tDBInput_18 = org.talend.designer.components.util.mssql.MSSqlUtilFactory
						.getMSSqlGenerateTimestampUtil();

				java.util.List<String> talendToDBList_tDBInput_18 = new java.util.ArrayList();
				String[] talendToDBArray_tDBInput_18 = new String[] { "FLOAT", "NUMERIC", "NUMERIC IDENTITY", "DECIMAL",
						"DECIMAL IDENTITY", "REAL" };
				java.util.Collections.addAll(talendToDBList_tDBInput_18, talendToDBArray_tDBInput_18);
				int nb_line_tDBInput_18 = 0;
				java.sql.Connection conn_tDBInput_18 = null;
				conn_tDBInput_18 = (java.sql.Connection) globalMap.get("conn_tDBConnection_1");

				String dbschema_tDBInput_18 = (String) globalMap.get("dbschema_tDBConnection_1");

				java.sql.Statement stmt_tDBInput_18 = conn_tDBInput_18.createStatement();

				String dbquery_tDBInput_18 = "SELECT dbo.VW_IMPORT_AGENT_PERSONS.AGENT_CODE,\n		dbo.VW_IMPORT_AGENT_PERSONS.PERSON_NAME,\n		dbo.VW_IMPORT_AGENT_PERSONS"
						+ ".PERSON_NAME_LANG2,\n		dbo.VW_IMPORT_AGENT_PERSONS.NATIONALITY_COUNTRY_CODE,\n		dbo.VW_IMPORT_AGENT_PERSONS.IND_COMPANY,\n	"
						+ "	dbo.VW_IMPORT_AGENT_PERSONS.LEGAL_NATURE,\n		dbo.VW_IMPORT_AGENT_PERSONS.LEGAL_NATURE_LANG2,\n		dbo.VW_IMPORT_AGENT_PERSO"
						+ "NS.LEGAL_ID_TYPE,\n		dbo.VW_IMPORT_AGENT_PERSONS.LEGAL_ID_NBR,\n		dbo.VW_IMPORT_AGENT_PERSONS.INDIVIDUAL_ID_TYPE,\n		dbo.VW"
						+ "_IMPORT_AGENT_PERSONS.INDIVIDUAL_ID_NBR,\n		dbo.VW_IMPORT_AGENT_PERSONS.RESIDENCE_COUNTRY_CODE,\n		dbo.VW_IMPORT_AGENT_PER"
						+ "SONS.STATE_NAME,\n		dbo.VW_IMPORT_AGENT_PERSONS.CITY_NAME,\n		dbo.VW_IMPORT_AGENT_PERSONS.CITY_CODE,\n		dbo.VW_IMPORT_AGENT"
						+ "_PERSONS.STATE_CODE,\n		dbo.VW_IMPORT_AGENT_PERSONS.ADDRESS_ZONE,\n		dbo.VW_IMPORT_AGENT_PERSONS.ADDRESS_STREET,\n		dbo.VW_"
						+ "IMPORT_AGENT_PERSONS.ADDRESS_STREET_LANG2,\n		dbo.VW_IMPORT_AGENT_PERSONS.ZIP_CODE,\n		dbo.VW_IMPORT_AGENT_PERSONS.EMAIL,\n"
						+ "		dbo.VW_IMPORT_AGENT_PERSONS.TELEPHONE,\n		dbo.VW_IMPORT_AGENT_PERSONS.PERSON_GROUP_CODE\nFROM	dbo.VW_IMPORT_AGENT_PERSON"
						+ "S";

				globalMap.put("tDBInput_18_QUERY", dbquery_tDBInput_18);
				java.sql.ResultSet rs_tDBInput_18 = null;

				try {
					rs_tDBInput_18 = stmt_tDBInput_18.executeQuery(dbquery_tDBInput_18);
					java.sql.ResultSetMetaData rsmd_tDBInput_18 = rs_tDBInput_18.getMetaData();
					int colQtyInRs_tDBInput_18 = rsmd_tDBInput_18.getColumnCount();

					String tmpContent_tDBInput_18 = null;

					while (rs_tDBInput_18.next()) {
						nb_line_tDBInput_18++;

						if (colQtyInRs_tDBInput_18 < 1) {
							row28.AGENT_CODE = null;
						} else {

							row28.AGENT_CODE = rs_tDBInput_18.getBigDecimal(1);
							if (rs_tDBInput_18.wasNull()) {
								throw new RuntimeException("Null value in non-Nullable column");
							}
						}
						if (colQtyInRs_tDBInput_18 < 2) {
							row28.PERSON_NAME = null;
						} else {

							tmpContent_tDBInput_18 = rs_tDBInput_18.getString(2);
							if (tmpContent_tDBInput_18 != null) {
								if (talendToDBList_tDBInput_18.contains(
										rsmd_tDBInput_18.getColumnTypeName(2).toUpperCase(java.util.Locale.ENGLISH))) {
									row28.PERSON_NAME = FormatterUtils.formatUnwithE(tmpContent_tDBInput_18);
								} else {
									row28.PERSON_NAME = tmpContent_tDBInput_18;
								}
							} else {
								row28.PERSON_NAME = null;
							}
						}
						if (colQtyInRs_tDBInput_18 < 3) {
							row28.PERSON_NAME_LANG2 = null;
						} else {

							tmpContent_tDBInput_18 = rs_tDBInput_18.getString(3);
							if (tmpContent_tDBInput_18 != null) {
								if (talendToDBList_tDBInput_18.contains(
										rsmd_tDBInput_18.getColumnTypeName(3).toUpperCase(java.util.Locale.ENGLISH))) {
									row28.PERSON_NAME_LANG2 = FormatterUtils.formatUnwithE(tmpContent_tDBInput_18);
								} else {
									row28.PERSON_NAME_LANG2 = tmpContent_tDBInput_18;
								}
							} else {
								row28.PERSON_NAME_LANG2 = null;
							}
						}
						if (colQtyInRs_tDBInput_18 < 4) {
							row28.NATIONALITY_COUNTRY_CODE = null;
						} else {

							tmpContent_tDBInput_18 = rs_tDBInput_18.getString(4);
							if (tmpContent_tDBInput_18 != null) {
								if (talendToDBList_tDBInput_18.contains(
										rsmd_tDBInput_18.getColumnTypeName(4).toUpperCase(java.util.Locale.ENGLISH))) {
									row28.NATIONALITY_COUNTRY_CODE = FormatterUtils
											.formatUnwithE(tmpContent_tDBInput_18);
								} else {
									row28.NATIONALITY_COUNTRY_CODE = tmpContent_tDBInput_18;
								}
							} else {
								row28.NATIONALITY_COUNTRY_CODE = null;
							}
						}
						if (colQtyInRs_tDBInput_18 < 5) {
							row28.IND_COMPANY = null;
						} else {

							row28.IND_COMPANY = rs_tDBInput_18.getBigDecimal(5);
							if (rs_tDBInput_18.wasNull()) {
								row28.IND_COMPANY = null;
							}
						}
						if (colQtyInRs_tDBInput_18 < 6) {
							row28.LEGAL_NATURE = null;
						} else {

							tmpContent_tDBInput_18 = rs_tDBInput_18.getString(6);
							if (tmpContent_tDBInput_18 != null) {
								if (talendToDBList_tDBInput_18.contains(
										rsmd_tDBInput_18.getColumnTypeName(6).toUpperCase(java.util.Locale.ENGLISH))) {
									row28.LEGAL_NATURE = FormatterUtils.formatUnwithE(tmpContent_tDBInput_18);
								} else {
									row28.LEGAL_NATURE = tmpContent_tDBInput_18;
								}
							} else {
								row28.LEGAL_NATURE = null;
							}
						}
						if (colQtyInRs_tDBInput_18 < 7) {
							row28.LEGAL_NATURE_LANG2 = null;
						} else {

							tmpContent_tDBInput_18 = rs_tDBInput_18.getString(7);
							if (tmpContent_tDBInput_18 != null) {
								if (talendToDBList_tDBInput_18.contains(
										rsmd_tDBInput_18.getColumnTypeName(7).toUpperCase(java.util.Locale.ENGLISH))) {
									row28.LEGAL_NATURE_LANG2 = FormatterUtils.formatUnwithE(tmpContent_tDBInput_18);
								} else {
									row28.LEGAL_NATURE_LANG2 = tmpContent_tDBInput_18;
								}
							} else {
								row28.LEGAL_NATURE_LANG2 = null;
							}
						}
						if (colQtyInRs_tDBInput_18 < 8) {
							row28.LEGAL_ID_TYPE = null;
						} else {

							tmpContent_tDBInput_18 = rs_tDBInput_18.getString(8);
							if (tmpContent_tDBInput_18 != null) {
								if (talendToDBList_tDBInput_18.contains(
										rsmd_tDBInput_18.getColumnTypeName(8).toUpperCase(java.util.Locale.ENGLISH))) {
									row28.LEGAL_ID_TYPE = FormatterUtils.formatUnwithE(tmpContent_tDBInput_18);
								} else {
									row28.LEGAL_ID_TYPE = tmpContent_tDBInput_18;
								}
							} else {
								row28.LEGAL_ID_TYPE = null;
							}
						}
						if (colQtyInRs_tDBInput_18 < 9) {
							row28.LEGAL_ID_NBR = null;
						} else {

							row28.LEGAL_ID_NBR = rs_tDBInput_18.getBigDecimal(9);
							if (rs_tDBInput_18.wasNull()) {
								row28.LEGAL_ID_NBR = null;
							}
						}
						if (colQtyInRs_tDBInput_18 < 10) {
							row28.INDIVIDUAL_ID_TYPE = null;
						} else {

							tmpContent_tDBInput_18 = rs_tDBInput_18.getString(10);
							if (tmpContent_tDBInput_18 != null) {
								if (talendToDBList_tDBInput_18.contains(
										rsmd_tDBInput_18.getColumnTypeName(10).toUpperCase(java.util.Locale.ENGLISH))) {
									row28.INDIVIDUAL_ID_TYPE = FormatterUtils.formatUnwithE(tmpContent_tDBInput_18);
								} else {
									row28.INDIVIDUAL_ID_TYPE = tmpContent_tDBInput_18;
								}
							} else {
								row28.INDIVIDUAL_ID_TYPE = null;
							}
						}
						if (colQtyInRs_tDBInput_18 < 11) {
							row28.INDIVIDUAL_ID_NBR = null;
						} else {

							row28.INDIVIDUAL_ID_NBR = rs_tDBInput_18.getBigDecimal(11);
							if (rs_tDBInput_18.wasNull()) {
								row28.INDIVIDUAL_ID_NBR = null;
							}
						}
						if (colQtyInRs_tDBInput_18 < 12) {
							row28.RESIDENCE_COUNTRY_CODE = null;
						} else {

							tmpContent_tDBInput_18 = rs_tDBInput_18.getString(12);
							if (tmpContent_tDBInput_18 != null) {
								if (talendToDBList_tDBInput_18.contains(
										rsmd_tDBInput_18.getColumnTypeName(12).toUpperCase(java.util.Locale.ENGLISH))) {
									row28.RESIDENCE_COUNTRY_CODE = FormatterUtils.formatUnwithE(tmpContent_tDBInput_18);
								} else {
									row28.RESIDENCE_COUNTRY_CODE = tmpContent_tDBInput_18;
								}
							} else {
								row28.RESIDENCE_COUNTRY_CODE = null;
							}
						}
						if (colQtyInRs_tDBInput_18 < 13) {
							row28.STATE_NAME = null;
						} else {

							tmpContent_tDBInput_18 = rs_tDBInput_18.getString(13);
							if (tmpContent_tDBInput_18 != null) {
								if (talendToDBList_tDBInput_18.contains(
										rsmd_tDBInput_18.getColumnTypeName(13).toUpperCase(java.util.Locale.ENGLISH))) {
									row28.STATE_NAME = FormatterUtils.formatUnwithE(tmpContent_tDBInput_18);
								} else {
									row28.STATE_NAME = tmpContent_tDBInput_18;
								}
							} else {
								row28.STATE_NAME = null;
							}
						}
						if (colQtyInRs_tDBInput_18 < 14) {
							row28.CITY_NAME = null;
						} else {

							tmpContent_tDBInput_18 = rs_tDBInput_18.getString(14);
							if (tmpContent_tDBInput_18 != null) {
								if (talendToDBList_tDBInput_18.contains(
										rsmd_tDBInput_18.getColumnTypeName(14).toUpperCase(java.util.Locale.ENGLISH))) {
									row28.CITY_NAME = FormatterUtils.formatUnwithE(tmpContent_tDBInput_18);
								} else {
									row28.CITY_NAME = tmpContent_tDBInput_18;
								}
							} else {
								row28.CITY_NAME = null;
							}
						}
						if (colQtyInRs_tDBInput_18 < 15) {
							row28.CITY_CODE = null;
						} else {

							tmpContent_tDBInput_18 = rs_tDBInput_18.getString(15);
							if (tmpContent_tDBInput_18 != null) {
								if (talendToDBList_tDBInput_18.contains(
										rsmd_tDBInput_18.getColumnTypeName(15).toUpperCase(java.util.Locale.ENGLISH))) {
									row28.CITY_CODE = FormatterUtils.formatUnwithE(tmpContent_tDBInput_18);
								} else {
									row28.CITY_CODE = tmpContent_tDBInput_18;
								}
							} else {
								row28.CITY_CODE = null;
							}
						}
						if (colQtyInRs_tDBInput_18 < 16) {
							row28.STATE_CODE = null;
						} else {

							tmpContent_tDBInput_18 = rs_tDBInput_18.getString(16);
							if (tmpContent_tDBInput_18 != null) {
								if (talendToDBList_tDBInput_18.contains(
										rsmd_tDBInput_18.getColumnTypeName(16).toUpperCase(java.util.Locale.ENGLISH))) {
									row28.STATE_CODE = FormatterUtils.formatUnwithE(tmpContent_tDBInput_18);
								} else {
									row28.STATE_CODE = tmpContent_tDBInput_18;
								}
							} else {
								row28.STATE_CODE = null;
							}
						}
						if (colQtyInRs_tDBInput_18 < 17) {
							row28.ADDRESS_ZONE = null;
						} else {

							tmpContent_tDBInput_18 = rs_tDBInput_18.getString(17);
							if (tmpContent_tDBInput_18 != null) {
								if (talendToDBList_tDBInput_18.contains(
										rsmd_tDBInput_18.getColumnTypeName(17).toUpperCase(java.util.Locale.ENGLISH))) {
									row28.ADDRESS_ZONE = FormatterUtils.formatUnwithE(tmpContent_tDBInput_18);
								} else {
									row28.ADDRESS_ZONE = tmpContent_tDBInput_18;
								}
							} else {
								row28.ADDRESS_ZONE = null;
							}
						}
						if (colQtyInRs_tDBInput_18 < 18) {
							row28.ADDRESS_STREET = null;
						} else {

							tmpContent_tDBInput_18 = rs_tDBInput_18.getString(18);
							if (tmpContent_tDBInput_18 != null) {
								if (talendToDBList_tDBInput_18.contains(
										rsmd_tDBInput_18.getColumnTypeName(18).toUpperCase(java.util.Locale.ENGLISH))) {
									row28.ADDRESS_STREET = FormatterUtils.formatUnwithE(tmpContent_tDBInput_18);
								} else {
									row28.ADDRESS_STREET = tmpContent_tDBInput_18;
								}
							} else {
								row28.ADDRESS_STREET = null;
							}
						}
						if (colQtyInRs_tDBInput_18 < 19) {
							row28.ADDRESS_STREET_LANG2 = null;
						} else {

							tmpContent_tDBInput_18 = rs_tDBInput_18.getString(19);
							if (tmpContent_tDBInput_18 != null) {
								if (talendToDBList_tDBInput_18.contains(
										rsmd_tDBInput_18.getColumnTypeName(19).toUpperCase(java.util.Locale.ENGLISH))) {
									row28.ADDRESS_STREET_LANG2 = FormatterUtils.formatUnwithE(tmpContent_tDBInput_18);
								} else {
									row28.ADDRESS_STREET_LANG2 = tmpContent_tDBInput_18;
								}
							} else {
								row28.ADDRESS_STREET_LANG2 = null;
							}
						}
						if (colQtyInRs_tDBInput_18 < 20) {
							row28.ZIP_CODE = null;
						} else {

							tmpContent_tDBInput_18 = rs_tDBInput_18.getString(20);
							if (tmpContent_tDBInput_18 != null) {
								if (talendToDBList_tDBInput_18.contains(
										rsmd_tDBInput_18.getColumnTypeName(20).toUpperCase(java.util.Locale.ENGLISH))) {
									row28.ZIP_CODE = FormatterUtils.formatUnwithE(tmpContent_tDBInput_18);
								} else {
									row28.ZIP_CODE = tmpContent_tDBInput_18;
								}
							} else {
								row28.ZIP_CODE = null;
							}
						}
						if (colQtyInRs_tDBInput_18 < 21) {
							row28.EMAIL = null;
						} else {

							tmpContent_tDBInput_18 = rs_tDBInput_18.getString(21);
							if (tmpContent_tDBInput_18 != null) {
								if (talendToDBList_tDBInput_18.contains(
										rsmd_tDBInput_18.getColumnTypeName(21).toUpperCase(java.util.Locale.ENGLISH))) {
									row28.EMAIL = FormatterUtils.formatUnwithE(tmpContent_tDBInput_18);
								} else {
									row28.EMAIL = tmpContent_tDBInput_18;
								}
							} else {
								row28.EMAIL = null;
							}
						}
						if (colQtyInRs_tDBInput_18 < 22) {
							row28.TELEPHONE = null;
						} else {

							tmpContent_tDBInput_18 = rs_tDBInput_18.getString(22);
							if (tmpContent_tDBInput_18 != null) {
								if (talendToDBList_tDBInput_18.contains(
										rsmd_tDBInput_18.getColumnTypeName(22).toUpperCase(java.util.Locale.ENGLISH))) {
									row28.TELEPHONE = FormatterUtils.formatUnwithE(tmpContent_tDBInput_18);
								} else {
									row28.TELEPHONE = tmpContent_tDBInput_18;
								}
							} else {
								row28.TELEPHONE = null;
							}
						}
						if (colQtyInRs_tDBInput_18 < 23) {
							row28.PERSON_GROUP_CODE = null;
						} else {

							tmpContent_tDBInput_18 = rs_tDBInput_18.getString(23);
							if (tmpContent_tDBInput_18 != null) {
								if (talendToDBList_tDBInput_18.contains(
										rsmd_tDBInput_18.getColumnTypeName(23).toUpperCase(java.util.Locale.ENGLISH))) {
									row28.PERSON_GROUP_CODE = FormatterUtils.formatUnwithE(tmpContent_tDBInput_18);
								} else {
									row28.PERSON_GROUP_CODE = tmpContent_tDBInput_18;
								}
							} else {
								row28.PERSON_GROUP_CODE = null;
							}
						}

						/**
						 * [tDBInput_18 begin ] stop
						 */

						/**
						 * [tDBInput_18 main ] start
						 */

						currentComponent = "tDBInput_18";

						tos_count_tDBInput_18++;

						/**
						 * [tDBInput_18 main ] stop
						 */

						/**
						 * [tDBInput_18 process_data_begin ] start
						 */

						currentComponent = "tDBInput_18";

						/**
						 * [tDBInput_18 process_data_begin ] stop
						 */

						/**
						 * [tAdvancedHash_row28 main ] start
						 */

						currentComponent = "tAdvancedHash_row28";

						if (execStat) {
							runStat.updateStatOnConnection(iterateId, 1, 1

									, "row28"

							);
						}

						row28Struct row28_HashRow = new row28Struct();

						row28_HashRow.AGENT_CODE = row28.AGENT_CODE;

						row28_HashRow.PERSON_NAME = row28.PERSON_NAME;

						row28_HashRow.PERSON_NAME_LANG2 = row28.PERSON_NAME_LANG2;

						row28_HashRow.NATIONALITY_COUNTRY_CODE = row28.NATIONALITY_COUNTRY_CODE;

						row28_HashRow.IND_COMPANY = row28.IND_COMPANY;

						row28_HashRow.LEGAL_NATURE = row28.LEGAL_NATURE;

						row28_HashRow.LEGAL_NATURE_LANG2 = row28.LEGAL_NATURE_LANG2;

						row28_HashRow.LEGAL_ID_TYPE = row28.LEGAL_ID_TYPE;

						row28_HashRow.LEGAL_ID_NBR = row28.LEGAL_ID_NBR;

						row28_HashRow.INDIVIDUAL_ID_TYPE = row28.INDIVIDUAL_ID_TYPE;

						row28_HashRow.INDIVIDUAL_ID_NBR = row28.INDIVIDUAL_ID_NBR;

						row28_HashRow.RESIDENCE_COUNTRY_CODE = row28.RESIDENCE_COUNTRY_CODE;

						row28_HashRow.STATE_NAME = row28.STATE_NAME;

						row28_HashRow.CITY_NAME = row28.CITY_NAME;

						row28_HashRow.CITY_CODE = row28.CITY_CODE;

						row28_HashRow.STATE_CODE = row28.STATE_CODE;

						row28_HashRow.ADDRESS_ZONE = row28.ADDRESS_ZONE;

						row28_HashRow.ADDRESS_STREET = row28.ADDRESS_STREET;

						row28_HashRow.ADDRESS_STREET_LANG2 = row28.ADDRESS_STREET_LANG2;

						row28_HashRow.ZIP_CODE = row28.ZIP_CODE;

						row28_HashRow.EMAIL = row28.EMAIL;

						row28_HashRow.TELEPHONE = row28.TELEPHONE;

						row28_HashRow.PERSON_GROUP_CODE = row28.PERSON_GROUP_CODE;

						tHash_Lookup_row28.put(row28_HashRow);

						tos_count_tAdvancedHash_row28++;

						/**
						 * [tAdvancedHash_row28 main ] stop
						 */

						/**
						 * [tAdvancedHash_row28 process_data_begin ] start
						 */

						currentComponent = "tAdvancedHash_row28";

						/**
						 * [tAdvancedHash_row28 process_data_begin ] stop
						 */

						/**
						 * [tAdvancedHash_row28 process_data_end ] start
						 */

						currentComponent = "tAdvancedHash_row28";

						/**
						 * [tAdvancedHash_row28 process_data_end ] stop
						 */

						/**
						 * [tDBInput_18 process_data_end ] start
						 */

						currentComponent = "tDBInput_18";

						/**
						 * [tDBInput_18 process_data_end ] stop
						 */

						/**
						 * [tDBInput_18 end ] start
						 */

						currentComponent = "tDBInput_18";

					}
				} finally {
					if (rs_tDBInput_18 != null) {
						rs_tDBInput_18.close();
					}
					if (stmt_tDBInput_18 != null) {
						stmt_tDBInput_18.close();
					}
				}
				globalMap.put("tDBInput_18_NB_LINE", nb_line_tDBInput_18);

				ok_Hash.put("tDBInput_18", true);
				end_Hash.put("tDBInput_18", System.currentTimeMillis());

				/**
				 * [tDBInput_18 end ] stop
				 */

				/**
				 * [tAdvancedHash_row28 end ] start
				 */

				currentComponent = "tAdvancedHash_row28";

				tHash_Lookup_row28.endPut();

				if (execStat) {
					runStat.updateStat(resourceMap, iterateId, 2, 0, "row28");
				}

				ok_Hash.put("tAdvancedHash_row28", true);
				end_Hash.put("tAdvancedHash_row28", System.currentTimeMillis());

				/**
				 * [tAdvancedHash_row28 end ] stop
				 */

			} // end the resume

		} catch (java.lang.Exception e) {

			TalendException te = new TalendException(e, currentComponent, globalMap);

			throw te;
		} catch (java.lang.Error error) {

			runStat.stopThreadStat();

			throw error;
		} finally {

			try {

				/**
				 * [tDBInput_18 finally ] start
				 */

				currentComponent = "tDBInput_18";

				/**
				 * [tDBInput_18 finally ] stop
				 */

				/**
				 * [tAdvancedHash_row28 finally ] start
				 */

				currentComponent = "tAdvancedHash_row28";

				/**
				 * [tAdvancedHash_row28 finally ] stop
				 */

			} catch (java.lang.Exception e) {
				// ignore
			} catch (java.lang.Error error) {
				// ignore
			}
			resourceMap = null;
		}

		globalMap.put("tDBInput_18_SUBPROCESS_STATE", 1);
	}

	public static class row1Struct implements routines.system.IPersistableRow<row1Struct> {
		final static byte[] commonByteArrayLock_WIPO_PROJECTS_E1a_Marc_Userdoc_a_interm = new byte[0];
		static byte[] commonByteArray_WIPO_PROJECTS_E1a_Marc_Userdoc_a_interm = new byte[0];

		public java.util.Date moment;

		public java.util.Date getMoment() {
			return this.moment;
		}

		public String pid;

		public String getPid() {
			return this.pid;
		}

		public String father_pid;

		public String getFather_pid() {
			return this.father_pid;
		}

		public String root_pid;

		public String getRoot_pid() {
			return this.root_pid;
		}

		public Long system_pid;

		public Long getSystem_pid() {
			return this.system_pid;
		}

		public String project;

		public String getProject() {
			return this.project;
		}

		public String job;

		public String getJob() {
			return this.job;
		}

		public String job_repository_id;

		public String getJob_repository_id() {
			return this.job_repository_id;
		}

		public String job_version;

		public String getJob_version() {
			return this.job_version;
		}

		public String context;

		public String getContext() {
			return this.context;
		}

		public String origin;

		public String getOrigin() {
			return this.origin;
		}

		public String message_type;

		public String getMessage_type() {
			return this.message_type;
		}

		public String message;

		public String getMessage() {
			return this.message;
		}

		public Long duration;

		public Long getDuration() {
			return this.duration;
		}

		private java.util.Date readDate(ObjectInputStream dis) throws IOException {
			java.util.Date dateReturn = null;
			int length = 0;
			length = dis.readByte();
			if (length == -1) {
				dateReturn = null;
			} else {
				dateReturn = new Date(dis.readLong());
			}
			return dateReturn;
		}

		private void writeDate(java.util.Date date1, ObjectOutputStream dos) throws IOException {
			if (date1 == null) {
				dos.writeByte(-1);
			} else {
				dos.writeByte(0);
				dos.writeLong(date1.getTime());
			}
		}

		private String readString(ObjectInputStream dis) throws IOException {
			String strReturn = null;
			int length = 0;
			length = dis.readInt();
			if (length == -1) {
				strReturn = null;
			} else {
				if (length > commonByteArray_WIPO_PROJECTS_E1a_Marc_Userdoc_a_interm.length) {
					if (length < 1024 && commonByteArray_WIPO_PROJECTS_E1a_Marc_Userdoc_a_interm.length == 0) {
						commonByteArray_WIPO_PROJECTS_E1a_Marc_Userdoc_a_interm = new byte[1024];
					} else {
						commonByteArray_WIPO_PROJECTS_E1a_Marc_Userdoc_a_interm = new byte[2 * length];
					}
				}
				dis.readFully(commonByteArray_WIPO_PROJECTS_E1a_Marc_Userdoc_a_interm, 0, length);
				strReturn = new String(commonByteArray_WIPO_PROJECTS_E1a_Marc_Userdoc_a_interm, 0, length, utf8Charset);
			}
			return strReturn;
		}

		private void writeString(String str, ObjectOutputStream dos) throws IOException {
			if (str == null) {
				dos.writeInt(-1);
			} else {
				byte[] byteArray = str.getBytes(utf8Charset);
				dos.writeInt(byteArray.length);
				dos.write(byteArray);
			}
		}

		public void readData(ObjectInputStream dis) {

			synchronized (commonByteArrayLock_WIPO_PROJECTS_E1a_Marc_Userdoc_a_interm) {

				try {

					int length = 0;

					this.moment = readDate(dis);

					this.pid = readString(dis);

					this.father_pid = readString(dis);

					this.root_pid = readString(dis);

					length = dis.readByte();
					if (length == -1) {
						this.system_pid = null;
					} else {
						this.system_pid = dis.readLong();
					}

					this.project = readString(dis);

					this.job = readString(dis);

					this.job_repository_id = readString(dis);

					this.job_version = readString(dis);

					this.context = readString(dis);

					this.origin = readString(dis);

					this.message_type = readString(dis);

					this.message = readString(dis);

					length = dis.readByte();
					if (length == -1) {
						this.duration = null;
					} else {
						this.duration = dis.readLong();
					}

				} catch (IOException e) {
					throw new RuntimeException(e);

				}

			}

		}

		public void writeData(ObjectOutputStream dos) {
			try {

				// java.util.Date

				writeDate(this.moment, dos);

				// String

				writeString(this.pid, dos);

				// String

				writeString(this.father_pid, dos);

				// String

				writeString(this.root_pid, dos);

				// Long

				if (this.system_pid == null) {
					dos.writeByte(-1);
				} else {
					dos.writeByte(0);
					dos.writeLong(this.system_pid);
				}

				// String

				writeString(this.project, dos);

				// String

				writeString(this.job, dos);

				// String

				writeString(this.job_repository_id, dos);

				// String

				writeString(this.job_version, dos);

				// String

				writeString(this.context, dos);

				// String

				writeString(this.origin, dos);

				// String

				writeString(this.message_type, dos);

				// String

				writeString(this.message, dos);

				// Long

				if (this.duration == null) {
					dos.writeByte(-1);
				} else {
					dos.writeByte(0);
					dos.writeLong(this.duration);
				}

			} catch (IOException e) {
				throw new RuntimeException(e);
			}

		}

		public String toString() {

			StringBuilder sb = new StringBuilder();
			sb.append(super.toString());
			sb.append("[");
			sb.append("moment=" + String.valueOf(moment));
			sb.append(",pid=" + pid);
			sb.append(",father_pid=" + father_pid);
			sb.append(",root_pid=" + root_pid);
			sb.append(",system_pid=" + String.valueOf(system_pid));
			sb.append(",project=" + project);
			sb.append(",job=" + job);
			sb.append(",job_repository_id=" + job_repository_id);
			sb.append(",job_version=" + job_version);
			sb.append(",context=" + context);
			sb.append(",origin=" + origin);
			sb.append(",message_type=" + message_type);
			sb.append(",message=" + message);
			sb.append(",duration=" + String.valueOf(duration));
			sb.append("]");

			return sb.toString();
		}

		/**
		 * Compare keys
		 */
		public int compareTo(row1Struct other) {

			int returnValue = -1;

			return returnValue;
		}

		private int checkNullsAndCompare(Object object1, Object object2) {
			int returnValue = 0;
			if (object1 instanceof Comparable && object2 instanceof Comparable) {
				returnValue = ((Comparable) object1).compareTo(object2);
			} else if (object1 != null && object2 != null) {
				returnValue = compareStrings(object1.toString(), object2.toString());
			} else if (object1 == null && object2 != null) {
				returnValue = 1;
			} else if (object1 != null && object2 == null) {
				returnValue = -1;
			} else {
				returnValue = 0;
			}

			return returnValue;
		}

		private int compareStrings(String string1, String string2) {
			return string1.compareTo(string2);
		}

	}

	public void tStatCatcher_1Process(final java.util.Map<String, Object> globalMap) throws TalendException {
		globalMap.put("tStatCatcher_1_SUBPROCESS_STATE", 0);

		final boolean execStat = this.execStat;

		String iterateId = "";

		String currentComponent = "";
		java.util.Map<String, Object> resourceMap = new java.util.HashMap<String, Object>();

		try {
			// TDI-39566 avoid throwing an useless Exception
			boolean resumeIt = true;
			if (globalResumeTicket == false && resumeEntryMethodName != null) {
				String currentMethodName = new java.lang.Exception().getStackTrace()[0].getMethodName();
				resumeIt = resumeEntryMethodName.equals(currentMethodName);
			}
			if (resumeIt || globalResumeTicket) { // start the resume
				globalResumeTicket = true;

				row1Struct row1 = new row1Struct();

				/**
				 * [tLogRow_13 begin ] start
				 */

				ok_Hash.put("tLogRow_13", false);
				start_Hash.put("tLogRow_13", System.currentTimeMillis());

				currentComponent = "tLogRow_13";

				if (execStat) {
					runStat.updateStatOnConnection(resourceMap, iterateId, 0, 0, "row1");
				}

				int tos_count_tLogRow_13 = 0;

				///////////////////////

				final String OUTPUT_FIELD_SEPARATOR_tLogRow_13 = "|";
				java.io.PrintStream consoleOut_tLogRow_13 = null;

				StringBuilder strBuffer_tLogRow_13 = null;
				int nb_line_tLogRow_13 = 0;
///////////////////////    			

				/**
				 * [tLogRow_13 begin ] stop
				 */

				/**
				 * [tStatCatcher_1 begin ] start
				 */

				ok_Hash.put("tStatCatcher_1", false);
				start_Hash.put("tStatCatcher_1", System.currentTimeMillis());

				currentComponent = "tStatCatcher_1";

				int tos_count_tStatCatcher_1 = 0;

				for (StatCatcherUtils.StatCatcherMessage scm : tStatCatcher_1.getMessages()) {
					row1.pid = pid;
					row1.root_pid = rootPid;
					row1.father_pid = fatherPid;
					row1.project = projectName;
					row1.job = jobName;
					row1.context = contextStr;
					row1.origin = (scm.getOrigin() == null || scm.getOrigin().length() < 1 ? null : scm.getOrigin());
					row1.message = scm.getMessage();
					row1.duration = scm.getDuration();
					row1.moment = scm.getMoment();
					row1.message_type = scm.getMessageType();
					row1.job_version = scm.getJobVersion();
					row1.job_repository_id = scm.getJobId();
					row1.system_pid = scm.getSystemPid();

					/**
					 * [tStatCatcher_1 begin ] stop
					 */

					/**
					 * [tStatCatcher_1 main ] start
					 */

					currentComponent = "tStatCatcher_1";

					tos_count_tStatCatcher_1++;

					/**
					 * [tStatCatcher_1 main ] stop
					 */

					/**
					 * [tStatCatcher_1 process_data_begin ] start
					 */

					currentComponent = "tStatCatcher_1";

					/**
					 * [tStatCatcher_1 process_data_begin ] stop
					 */

					/**
					 * [tLogRow_13 main ] start
					 */

					currentComponent = "tLogRow_13";

					if (execStat) {
						runStat.updateStatOnConnection(iterateId, 1, 1

								, "row1"

						);
					}

///////////////////////		

					strBuffer_tLogRow_13 = new StringBuilder();

					if (row1.moment != null) { //

						strBuffer_tLogRow_13.append(FormatterUtils.format_Date(row1.moment, "yyyy-MM-dd HH:mm:ss"));

					} //

					strBuffer_tLogRow_13.append("|");

					if (row1.job != null) { //

						strBuffer_tLogRow_13.append(String.valueOf(row1.job));

					} //

					strBuffer_tLogRow_13.append("|");

					if (row1.origin != null) { //

						strBuffer_tLogRow_13.append(String.valueOf(row1.origin));

					} //

					strBuffer_tLogRow_13.append("|");

					if (row1.message_type != null) { //

						strBuffer_tLogRow_13.append(String.valueOf(row1.message_type));

					} //

					strBuffer_tLogRow_13.append("|");

					if (row1.message != null) { //

						strBuffer_tLogRow_13.append(String.valueOf(row1.message));

					} //

					strBuffer_tLogRow_13.append("|");

					if (row1.duration != null) { //

						strBuffer_tLogRow_13.append(String.valueOf(row1.duration));

					} //

					if (globalMap.get("tLogRow_CONSOLE") != null) {
						consoleOut_tLogRow_13 = (java.io.PrintStream) globalMap.get("tLogRow_CONSOLE");
					} else {
						consoleOut_tLogRow_13 = new java.io.PrintStream(new java.io.BufferedOutputStream(System.out));
						globalMap.put("tLogRow_CONSOLE", consoleOut_tLogRow_13);
					}
					consoleOut_tLogRow_13.println(strBuffer_tLogRow_13.toString());
					consoleOut_tLogRow_13.flush();
					nb_line_tLogRow_13++;
//////

//////                    

///////////////////////    			

					tos_count_tLogRow_13++;

					/**
					 * [tLogRow_13 main ] stop
					 */

					/**
					 * [tLogRow_13 process_data_begin ] start
					 */

					currentComponent = "tLogRow_13";

					/**
					 * [tLogRow_13 process_data_begin ] stop
					 */

					/**
					 * [tLogRow_13 process_data_end ] start
					 */

					currentComponent = "tLogRow_13";

					/**
					 * [tLogRow_13 process_data_end ] stop
					 */

					/**
					 * [tStatCatcher_1 process_data_end ] start
					 */

					currentComponent = "tStatCatcher_1";

					/**
					 * [tStatCatcher_1 process_data_end ] stop
					 */

					/**
					 * [tStatCatcher_1 end ] start
					 */

					currentComponent = "tStatCatcher_1";

				}

				ok_Hash.put("tStatCatcher_1", true);
				end_Hash.put("tStatCatcher_1", System.currentTimeMillis());

				/**
				 * [tStatCatcher_1 end ] stop
				 */

				/**
				 * [tLogRow_13 end ] start
				 */

				currentComponent = "tLogRow_13";

//////
//////
				globalMap.put("tLogRow_13_NB_LINE", nb_line_tLogRow_13);

///////////////////////    			

				if (execStat) {
					runStat.updateStat(resourceMap, iterateId, 2, 0, "row1");
				}

				ok_Hash.put("tLogRow_13", true);
				end_Hash.put("tLogRow_13", System.currentTimeMillis());

				/**
				 * [tLogRow_13 end ] stop
				 */

			} // end the resume

		} catch (java.lang.Exception e) {

			TalendException te = new TalendException(e, currentComponent, globalMap);

			throw te;
		} catch (java.lang.Error error) {

			runStat.stopThreadStat();

			throw error;
		} finally {

			try {

				/**
				 * [tStatCatcher_1 finally ] start
				 */

				currentComponent = "tStatCatcher_1";

				/**
				 * [tStatCatcher_1 finally ] stop
				 */

				/**
				 * [tLogRow_13 finally ] start
				 */

				currentComponent = "tLogRow_13";

				/**
				 * [tLogRow_13 finally ] stop
				 */

			} catch (java.lang.Exception e) {
				// ignore
			} catch (java.lang.Error error) {
				// ignore
			}
			resourceMap = null;
		}

		globalMap.put("tStatCatcher_1_SUBPROCESS_STATE", 1);
	}

	public String resuming_logs_dir_path = null;
	public String resuming_checkpoint_path = null;
	public String parent_part_launcher = null;
	private String resumeEntryMethodName = null;
	private boolean globalResumeTicket = false;

	public boolean watch = false;
	// portStats is null, it means don't execute the statistics
	public Integer portStats = null;
	public int portTraces = 4334;
	public String clientHost;
	public String defaultClientHost = "localhost";
	public String contextStr = "Default";
	public boolean isDefaultContext = true;
	public String pid = "0";
	public String rootPid = null;
	public String fatherPid = null;
	public String fatherNode = null;
	public long startTime = 0;
	public boolean isChildJob = false;
	public String log4jLevel = "";

	private boolean enableLogStash;

	private boolean execStat = true;

	private ThreadLocal<java.util.Map<String, String>> threadLocal = new ThreadLocal<java.util.Map<String, String>>() {
		protected java.util.Map<String, String> initialValue() {
			java.util.Map<String, String> threadRunResultMap = new java.util.HashMap<String, String>();
			threadRunResultMap.put("errorCode", null);
			threadRunResultMap.put("status", "");
			return threadRunResultMap;
		};
	};

	private SyncInt runningThreadCount = new SyncInt();

	private class SyncInt {
		private int count = 0;

		public synchronized void add(int i) {
			count += i;
		}

		public synchronized int getCount() {
			return count;
		}
	}

	protected PropertiesWithType context_param = new PropertiesWithType();
	public java.util.Map<String, Object> parentContextMap = new java.util.HashMap<String, Object>();

	public String status = "";

	public static void main(String[] args) {
		final E1a_Marc_Userdoc_a_interm E1a_Marc_Userdoc_a_intermClass = new E1a_Marc_Userdoc_a_interm();

		int exitCode = E1a_Marc_Userdoc_a_intermClass.runJobInTOS(args);

		System.exit(exitCode);
	}

	public String[][] runJob(String[] args) {

		int exitCode = runJobInTOS(args);
		String[][] bufferValue = new String[][] { { Integer.toString(exitCode) } };

		return bufferValue;
	}

	public boolean hastBufferOutputComponent() {
		boolean hastBufferOutput = false;

		return hastBufferOutput;
	}

	public int runJobInTOS(String[] args) {
		// reset status
		status = "";

		String lastStr = "";
		for (String arg : args) {
			if (arg.equalsIgnoreCase("--context_param")) {
				lastStr = arg;
			} else if (lastStr.equals("")) {
				evalParam(arg);
			} else {
				evalParam(lastStr + " " + arg);
				lastStr = "";
			}
		}
		enableLogStash = "true".equalsIgnoreCase(System.getProperty("audit.enabled"));

		if (clientHost == null) {
			clientHost = defaultClientHost;
		}

		if (pid == null || "0".equals(pid)) {
			pid = TalendString.getAsciiRandomString(6);
		}

		if (rootPid == null) {
			rootPid = pid;
		}
		if (fatherPid == null) {
			fatherPid = pid;
		} else {
			isChildJob = true;
		}

		if (portStats != null) {
			// portStats = -1; //for testing
			if (portStats < 0 || portStats > 65535) {
				// issue:10869, the portStats is invalid, so this client socket can't open
				System.err.println("The statistics socket port " + portStats + " is invalid.");
				execStat = false;
			}
		} else {
			execStat = false;
		}

		try {
			// call job/subjob with an existing context, like: --context=production. if
			// without this parameter, there will use the default context instead.
			java.io.InputStream inContext = E1a_Marc_Userdoc_a_interm.class.getClassLoader().getResourceAsStream(
					"wipo_projects/e1a_marc_userdoc_a_interm_0_1/contexts/" + contextStr + ".properties");
			if (inContext == null) {
				inContext = E1a_Marc_Userdoc_a_interm.class.getClassLoader()
						.getResourceAsStream("config/contexts/" + contextStr + ".properties");
			}
			if (inContext != null) {
				// defaultProps is in order to keep the original context value
				if (context != null && context.isEmpty()) {
					defaultProps.load(inContext);
					context = new ContextProperties(defaultProps);
				}

				inContext.close();
			} else if (!isDefaultContext) {
				// print info and job continue to run, for case: context_param is not empty.
				System.err.println("Could not find the context " + contextStr);
			}

			if (!context_param.isEmpty()) {
				context.putAll(context_param);
				// set types for params from parentJobs
				for (Object key : context_param.keySet()) {
					String context_key = key.toString();
					String context_type = context_param.getContextType(context_key);
					context.setContextType(context_key, context_type);

				}
			}
			class ContextProcessing {
				private void processContext_0() {
					context.setContextType("hostInterMed", "id_String");
					if (context.getStringValue("hostInterMed") == null) {
						context.hostInterMed = null;
					} else {
						context.hostInterMed = (String) context.getProperty("hostInterMed");
					}
					context.setContextType("portInterMed", "id_String");
					if (context.getStringValue("portInterMed") == null) {
						context.portInterMed = null;
					} else {
						context.portInterMed = (String) context.getProperty("portInterMed");
					}
					context.setContextType("userInterMed", "id_String");
					if (context.getStringValue("userInterMed") == null) {
						context.userInterMed = null;
					} else {
						context.userInterMed = (String) context.getProperty("userInterMed");
					}
					context.setContextType("passwordInterMed", "id_String");
					if (context.getStringValue("passwordInterMed") == null) {
						context.passwordInterMed = null;
					} else {
						context.passwordInterMed = (String) context.getProperty("passwordInterMed");
					}
					context.setContextType("databaseInterMed", "id_String");
					if (context.getStringValue("databaseInterMed") == null) {
						context.databaseInterMed = null;
					} else {
						context.databaseInterMed = (String) context.getProperty("databaseInterMed");
					}
					context.setContextType("processAll", "id_String");
					if (context.getStringValue("processAll") == null) {
						context.processAll = null;
					} else {
						context.processAll = (String) context.getProperty("processAll");
					}
					context.setContextType("postgreUser", "id_String");
					if (context.getStringValue("postgreUser") == null) {
						context.postgreUser = null;
					} else {
						context.postgreUser = (String) context.getProperty("postgreUser");
					}
					context.setContextType("postgrePassword", "id_String");
					if (context.getStringValue("postgrePassword") == null) {
						context.postgrePassword = null;
					} else {
						context.postgrePassword = (String) context.getProperty("postgrePassword");
					}
					context.setContextType("postgreDb", "id_String");
					if (context.getStringValue("postgreDb") == null) {
						context.postgreDb = null;
					} else {
						context.postgreDb = (String) context.getProperty("postgreDb");
					}
				}

				public void processAllContext() {
					processContext_0();
				}
			}

			new ContextProcessing().processAllContext();
		} catch (java.io.IOException ie) {
			System.err.println("Could not load context " + contextStr);
			ie.printStackTrace();
		}

		// get context value from parent directly
		if (parentContextMap != null && !parentContextMap.isEmpty()) {
			if (parentContextMap.containsKey("hostInterMed")) {
				context.hostInterMed = (String) parentContextMap.get("hostInterMed");
			}
			if (parentContextMap.containsKey("portInterMed")) {
				context.portInterMed = (String) parentContextMap.get("portInterMed");
			}
			if (parentContextMap.containsKey("userInterMed")) {
				context.userInterMed = (String) parentContextMap.get("userInterMed");
			}
			if (parentContextMap.containsKey("passwordInterMed")) {
				context.passwordInterMed = (String) parentContextMap.get("passwordInterMed");
			}
			if (parentContextMap.containsKey("databaseInterMed")) {
				context.databaseInterMed = (String) parentContextMap.get("databaseInterMed");
			}
			if (parentContextMap.containsKey("processAll")) {
				context.processAll = (String) parentContextMap.get("processAll");
			}
			if (parentContextMap.containsKey("postgreUser")) {
				context.postgreUser = (String) parentContextMap.get("postgreUser");
			}
			if (parentContextMap.containsKey("postgrePassword")) {
				context.postgrePassword = (String) parentContextMap.get("postgrePassword");
			}
			if (parentContextMap.containsKey("postgreDb")) {
				context.postgreDb = (String) parentContextMap.get("postgreDb");
			}
		}

		// Resume: init the resumeUtil
		resumeEntryMethodName = ResumeUtil.getResumeEntryMethodName(resuming_checkpoint_path);
		resumeUtil = new ResumeUtil(resuming_logs_dir_path, isChildJob, rootPid);
		resumeUtil.initCommonInfo(pid, rootPid, fatherPid, projectName, jobName, contextStr, jobVersion);

		List<String> parametersToEncrypt = new java.util.ArrayList<String>();
		// Resume: jobStart
		resumeUtil.addLog("JOB_STARTED", "JOB:" + jobName, parent_part_launcher, Thread.currentThread().getId() + "",
				"", "", "", "", resumeUtil.convertToJsonText(context, parametersToEncrypt));

		if (execStat) {
			try {
				runStat.openSocket(!isChildJob);
				runStat.setAllPID(rootPid, fatherPid, pid, jobName);
				runStat.startThreadStat(clientHost, portStats);
				runStat.updateStatOnJob(RunStat.JOBSTART, fatherNode);
			} catch (java.io.IOException ioException) {
				ioException.printStackTrace();
			}
		}

		java.util.concurrent.ConcurrentHashMap<Object, Object> concurrentHashMap = new java.util.concurrent.ConcurrentHashMap<Object, Object>();
		globalMap.put("concurrentHashMap", concurrentHashMap);

		long startUsedMemory = Runtime.getRuntime().totalMemory() - Runtime.getRuntime().freeMemory();
		long endUsedMemory = 0;
		long end = 0;

		startTime = System.currentTimeMillis();
		tStatCatcher_1.addMessage("begin");

		this.globalResumeTicket = true;// to run tPreJob

		try {
			tStatCatcher_1Process(globalMap);
		} catch (java.lang.Exception e) {
			e.printStackTrace();
		}

		this.globalResumeTicket = false;// to run others jobs
		final Thread launchingThread = Thread.currentThread();
		runningThreadCount.add(1);
		new Thread() {
			public void run() {
				java.util.Map threadRunResultMap = new java.util.HashMap();
				threadRunResultMap.put("errorCode", null);
				threadRunResultMap.put("status", "");
				threadLocal.set(threadRunResultMap);

				try {
					((java.util.Map) threadLocal.get()).put("errorCode", null);
					tDBConnection_3Process(globalMap);
					if (!"failure".equals(((java.util.Map) threadLocal.get()).get("status"))) {
						((java.util.Map) threadLocal.get()).put("status", "end");
					}
				} catch (TalendException e_tDBConnection_3) {
					globalMap.put("tDBConnection_3_SUBPROCESS_STATE", -1);

					e_tDBConnection_3.printStackTrace();

				} catch (java.lang.Error e_tDBConnection_3) {
					globalMap.put("tDBConnection_3_SUBPROCESS_STATE", -1);
					((java.util.Map) threadLocal.get()).put("status", "failure");
					throw e_tDBConnection_3;

				} finally {
					Integer localErrorCode = (Integer) (((java.util.Map) threadLocal.get()).get("errorCode"));
					String localStatus = (String) (((java.util.Map) threadLocal.get()).get("status"));
					if (localErrorCode != null) {
						if (errorCode == null || localErrorCode.compareTo(errorCode) > 0) {
							errorCode = localErrorCode;
						}
					}
					if (!status.equals("failure")) {
						status = localStatus;
					}

					if ("true".equals(((java.util.Map) threadLocal.get()).get("JobInterrupted"))) {
						launchingThread.interrupt();
					}

					runningThreadCount.add(-1);
				}
			}
		}.start();

		boolean interrupted = false;
		while (runningThreadCount.getCount() > 0) {
			try {
				Thread.sleep(10);
			} catch (java.lang.InterruptedException e) {
				interrupted = true;
			} catch (java.lang.Exception e) {
				e.printStackTrace();
			}
		}

		if (interrupted) {
			Thread.currentThread().interrupt();
		}

		this.globalResumeTicket = true;// to run tPostJob

		end = System.currentTimeMillis();

		if (watch) {
			System.out.println((end - startTime) + " milliseconds");
		}

		endUsedMemory = Runtime.getRuntime().totalMemory() - Runtime.getRuntime().freeMemory();
		if (false) {
			System.out.println((endUsedMemory - startUsedMemory)
					+ " bytes memory increase when running : E1a_Marc_Userdoc_a_interm");
		}
		tStatCatcher_1.addMessage(status == "" ? "end" : status, (end - startTime));
		try {
			tStatCatcher_1Process(globalMap);
		} catch (java.lang.Exception e) {
			e.printStackTrace();
		}

		if (execStat) {
			runStat.updateStatOnJob(RunStat.JOBEND, fatherNode);
			runStat.stopThreadStat();
		}
		int returnCode = 0;

		Integer localErrorCode = (Integer) (((java.util.Map) threadLocal.get()).get("errorCode"));
		String localStatus = (String) (((java.util.Map) threadLocal.get()).get("status"));
		if (localErrorCode != null) {
			if (errorCode == null || localErrorCode.compareTo(errorCode) > 0) {
				errorCode = localErrorCode;
			}
		}
		if (localStatus != null && !status.equals("failure")) {
			status = localStatus;
		}

		if (errorCode == null) {
			returnCode = status != null && status.equals("failure") ? 1 : 0;
		} else {
			returnCode = errorCode.intValue();
		}
		resumeUtil.addLog("JOB_ENDED", "JOB:" + jobName, parent_part_launcher, Thread.currentThread().getId() + "", "",
				"" + returnCode, "", "", "");

		return returnCode;

	}

	// only for OSGi env
	public void destroy() {
		closeSqlDbConnections();

	}

	private void closeSqlDbConnections() {
		try {
			Object obj_conn;
			obj_conn = globalMap.remove("conn_tDBConnection_1");
			if (null != obj_conn) {
				((java.sql.Connection) obj_conn).close();
			}
			obj_conn = globalMap.remove("conn_tDBConnection_3");
			if (null != obj_conn) {
				((java.sql.Connection) obj_conn).close();
			}
			obj_conn = globalMap.remove("conn_tDBConnection_2");
			if (null != obj_conn) {
				((java.sql.Connection) obj_conn).close();
			}
		} catch (java.lang.Exception e) {
		}
	}

	private java.util.Map<String, Object> getSharedConnections4REST() {
		java.util.Map<String, Object> connections = new java.util.HashMap<String, Object>();
		connections.put("conn_tDBConnection_1", globalMap.get("conn_tDBConnection_1"));
		connections.put("conn_tDBConnection_3", globalMap.get("conn_tDBConnection_3"));
		connections.put("conn_tDBConnection_2", globalMap.get("conn_tDBConnection_2"));

		return connections;
	}

	private void evalParam(String arg) {
		if (arg.startsWith("--resuming_logs_dir_path")) {
			resuming_logs_dir_path = arg.substring(25);
		} else if (arg.startsWith("--resuming_checkpoint_path")) {
			resuming_checkpoint_path = arg.substring(27);
		} else if (arg.startsWith("--parent_part_launcher")) {
			parent_part_launcher = arg.substring(23);
		} else if (arg.startsWith("--watch")) {
			watch = true;
		} else if (arg.startsWith("--stat_port=")) {
			String portStatsStr = arg.substring(12);
			if (portStatsStr != null && !portStatsStr.equals("null")) {
				portStats = Integer.parseInt(portStatsStr);
			}
		} else if (arg.startsWith("--trace_port=")) {
			portTraces = Integer.parseInt(arg.substring(13));
		} else if (arg.startsWith("--client_host=")) {
			clientHost = arg.substring(14);
		} else if (arg.startsWith("--context=")) {
			contextStr = arg.substring(10);
			isDefaultContext = false;
		} else if (arg.startsWith("--father_pid=")) {
			fatherPid = arg.substring(13);
		} else if (arg.startsWith("--root_pid=")) {
			rootPid = arg.substring(11);
		} else if (arg.startsWith("--father_node=")) {
			fatherNode = arg.substring(14);
		} else if (arg.startsWith("--pid=")) {
			pid = arg.substring(6);
		} else if (arg.startsWith("--context_type")) {
			String keyValue = arg.substring(15);
			int index = -1;
			if (keyValue != null && (index = keyValue.indexOf('=')) > -1) {
				if (fatherPid == null) {
					context_param.setContextType(keyValue.substring(0, index),
							replaceEscapeChars(keyValue.substring(index + 1)));
				} else { // the subjob won't escape the especial chars
					context_param.setContextType(keyValue.substring(0, index), keyValue.substring(index + 1));
				}

			}

		} else if (arg.startsWith("--context_param")) {
			String keyValue = arg.substring(16);
			int index = -1;
			if (keyValue != null && (index = keyValue.indexOf('=')) > -1) {
				if (fatherPid == null) {
					context_param.put(keyValue.substring(0, index), replaceEscapeChars(keyValue.substring(index + 1)));
				} else { // the subjob won't escape the especial chars
					context_param.put(keyValue.substring(0, index), keyValue.substring(index + 1));
				}
			}
		} else if (arg.startsWith("--log4jLevel=")) {
			log4jLevel = arg.substring(13);
		} else if (arg.startsWith("--audit.enabled") && arg.contains("=")) {// for trunjob call
			final int equal = arg.indexOf('=');
			final String key = arg.substring("--".length(), equal);
			System.setProperty(key, arg.substring(equal + 1));
		}
	}

	private static final String NULL_VALUE_EXPRESSION_IN_COMMAND_STRING_FOR_CHILD_JOB_ONLY = "<TALEND_NULL>";

	private final String[][] escapeChars = { { "\\\\", "\\" }, { "\\n", "\n" }, { "\\'", "\'" }, { "\\r", "\r" },
			{ "\\f", "\f" }, { "\\b", "\b" }, { "\\t", "\t" } };

	private String replaceEscapeChars(String keyValue) {

		if (keyValue == null || ("").equals(keyValue.trim())) {
			return keyValue;
		}

		StringBuilder result = new StringBuilder();
		int currIndex = 0;
		while (currIndex < keyValue.length()) {
			int index = -1;
			// judege if the left string includes escape chars
			for (String[] strArray : escapeChars) {
				index = keyValue.indexOf(strArray[0], currIndex);
				if (index >= 0) {

					result.append(keyValue.substring(currIndex, index + strArray[0].length()).replace(strArray[0],
							strArray[1]));
					currIndex = index + strArray[0].length();
					break;
				}
			}
			// if the left string doesn't include escape chars, append the left into the
			// result
			if (index < 0) {
				result.append(keyValue.substring(currIndex));
				currIndex = currIndex + keyValue.length();
			}
		}

		return result.toString();
	}

	public Integer getErrorCode() {
		return errorCode;
	}

	public String getStatus() {
		return status;
	}

	ResumeUtil resumeUtil = null;
}
/************************************************************************************************
 * 1016130 characters generated by Talend Open Studio for Data Integration on
 * the October 30, 2020 at 7:57:57 PM CET
 ************************************************************************************************/