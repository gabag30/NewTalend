// ============================================================================
//
// Copyright (c) 2006-2015, Talend Inc.
//
// This source code has been automatically generated by_Talend Open Studio for Data Integration
// / Licensed under the Apache License, Version 2.0 (the "License");
// you may not use this file except in compliance with the License.
// You may obtain a copy of the License at
// http://www.apache.org/licenses/LICENSE-2.0
// 
// Unless required by applicable law or agreed to in writing, software
// distributed under the License is distributed on an "AS IS" BASIS,
// WITHOUT WARRANTIES OR CONDITIONS OF ANY KIND, either express or implied.
// See the License for the specific language governing permissions and
// limitations under the License.


package wipo_projects.g1_val_mig_agents_0_1;

import routines.Numeric;
import routines.DataOperation;
import routines.TalendDataGenerator;
import routines.TalendStringUtil;
import routines.test;
import routines.TalendString;
import routines.StringHandling;
import routines.Relational;
import routines.TalendDate;
import routines.Mathematical;
import routines.IPAS;
import routines.system.*;
import routines.system.api.*;
import java.text.ParseException;
import java.text.SimpleDateFormat;
import java.util.Date;
import java.util.List;
import java.math.BigDecimal;
import java.io.ByteArrayOutputStream;
import java.io.ByteArrayInputStream;
import java.io.DataInputStream;
import java.io.DataOutputStream;
import java.io.ObjectOutputStream;
import java.io.ObjectInputStream;
import java.io.IOException;
import java.util.Comparator;
 





@SuppressWarnings("unused")

/**
 * Job: G1_Val_mig_AGENTS Purpose: Validation and migration of agents from intermediate to final tables<br>
 * Description:  <br>
 * @author user@talend.com
 * @version 7.4.1.20201015_1726-M3
 * @status 
 */
public class G1_Val_mig_AGENTS implements TalendJob {

protected static void logIgnoredError(String message, Throwable cause) {
       System.err.println(message);
       if (cause != null) {
               cause.printStackTrace();
       }

}


	public final Object obj = new Object();

	// for transmiting parameters purpose
	private Object valueObject = null;

	public Object getValueObject() {
		return this.valueObject;
	}

	public void setValueObject(Object valueObject) {
		this.valueObject = valueObject;
	}
	
	private final static String defaultCharset = java.nio.charset.Charset.defaultCharset().name();

	
	private final static String utf8Charset = "UTF-8";
	//contains type for every context property
	public class PropertiesWithType extends java.util.Properties {
		private static final long serialVersionUID = 1L;
		private java.util.Map<String,String> propertyTypes = new java.util.HashMap<>();
		
		public PropertiesWithType(java.util.Properties properties){
			super(properties);
		}
		public PropertiesWithType(){
			super();
		}
		
		public void setContextType(String key, String type) {
			propertyTypes.put(key,type);
		}
	
		public String getContextType(String key) {
			return propertyTypes.get(key);
		}
	}
	
	// create and load default properties
	private java.util.Properties defaultProps = new java.util.Properties();
	// create application properties with default
	public class ContextProperties extends PropertiesWithType {

		private static final long serialVersionUID = 1L;

		public ContextProperties(java.util.Properties properties){
			super(properties);
		}
		public ContextProperties(){
			super();
		}

		public void synchronizeContext(){
			
			if(utilityFolder != null){
				
					this.setProperty("utilityFolder", utilityFolder.toString());
				
			}
			
			if(processAll != null){
				
					this.setProperty("processAll", processAll.toString());
				
			}
			
			if(ipasSaPassword != null){
				
					this.setProperty("ipasSaPassword", ipasSaPassword.toString());
				
			}
			
			if(ipasPassword != null){
				
					this.setProperty("ipasPassword", ipasPassword.toString());
				
			}
			
			if(ipasUser != null){
				
					this.setProperty("ipasUser", ipasUser.toString());
				
			}
			
			if(ipasDB != null){
				
					this.setProperty("ipasDB", ipasDB.toString());
				
			}
			
			if(ipasPort != null){
				
					this.setProperty("ipasPort", ipasPort.toString());
				
			}
			
			if(ipasHost != null){
				
					this.setProperty("ipasHost", ipasHost.toString());
				
			}
			
			if(intermediatePassword != null){
				
					this.setProperty("intermediatePassword", intermediatePassword.toString());
				
			}
			
			if(intermediateUser != null){
				
					this.setProperty("intermediateUser", intermediateUser.toString());
				
			}
			
			if(intermediateDB != null){
				
					this.setProperty("intermediateDB", intermediateDB.toString());
				
			}
			
			if(intermediatePort != null){
				
					this.setProperty("intermediatePort", intermediatePort.toString());
				
			}
			
			if(intermediateHost != null){
				
					this.setProperty("intermediateHost", intermediateHost.toString());
				
			}
			
		}
		
		//if the stored or passed value is "<TALEND_NULL>" string, it mean null
		public String getStringValue(String key) {
			String origin_value = this.getProperty(key);
			if(NULL_VALUE_EXPRESSION_IN_COMMAND_STRING_FOR_CHILD_JOB_ONLY.equals(origin_value)) {
				return null;
			}
			return origin_value;
		}

public String utilityFolder;
public String getUtilityFolder(){
	return this.utilityFolder;
}
public String processAll;
public String getProcessAll(){
	return this.processAll;
}
public String ipasSaPassword;
public String getIpasSaPassword(){
	return this.ipasSaPassword;
}
public String ipasPassword;
public String getIpasPassword(){
	return this.ipasPassword;
}
public String ipasUser;
public String getIpasUser(){
	return this.ipasUser;
}
public String ipasDB;
public String getIpasDB(){
	return this.ipasDB;
}
public String ipasPort;
public String getIpasPort(){
	return this.ipasPort;
}
public String ipasHost;
public String getIpasHost(){
	return this.ipasHost;
}
public String intermediatePassword;
public String getIntermediatePassword(){
	return this.intermediatePassword;
}
public String intermediateUser;
public String getIntermediateUser(){
	return this.intermediateUser;
}
public String intermediateDB;
public String getIntermediateDB(){
	return this.intermediateDB;
}
public String intermediatePort;
public String getIntermediatePort(){
	return this.intermediatePort;
}
public String intermediateHost;
public String getIntermediateHost(){
	return this.intermediateHost;
}
	}
	protected ContextProperties context = new ContextProperties(); // will be instanciated by MS.
	public ContextProperties getContext() {
		return this.context;
	}
	private final String jobVersion = "0.1";
	private final String jobName = "G1_Val_mig_AGENTS";
	private final String projectName = "WIPO_PROJECTS";
	public Integer errorCode = null;
	private String currentComponent = "";
	
		private final java.util.Map<String, Object> globalMap = new java.util.HashMap<String, Object>();
        private final static java.util.Map<String, Object> junitGlobalMap = new java.util.HashMap<String, Object>();
	
		private final java.util.Map<String, Long> start_Hash = new java.util.HashMap<String, Long>();
		private final java.util.Map<String, Long> end_Hash = new java.util.HashMap<String, Long>();
		private final java.util.Map<String, Boolean> ok_Hash = new java.util.HashMap<String, Boolean>();
		public  final java.util.List<String[]> globalBuffer = new java.util.ArrayList<String[]>();
	

private RunStat runStat = new RunStat();

	// OSGi DataSource
	private final static String KEY_DB_DATASOURCES = "KEY_DB_DATASOURCES";
	
	private final static String KEY_DB_DATASOURCES_RAW = "KEY_DB_DATASOURCES_RAW";

	public void setDataSources(java.util.Map<String, javax.sql.DataSource> dataSources) {
		java.util.Map<String, routines.system.TalendDataSource> talendDataSources = new java.util.HashMap<String, routines.system.TalendDataSource>();
		for (java.util.Map.Entry<String, javax.sql.DataSource> dataSourceEntry : dataSources.entrySet()) {
			talendDataSources.put(dataSourceEntry.getKey(), new routines.system.TalendDataSource(dataSourceEntry.getValue()));
		}
		globalMap.put(KEY_DB_DATASOURCES, talendDataSources);
		globalMap.put(KEY_DB_DATASOURCES_RAW, new java.util.HashMap<String, javax.sql.DataSource>(dataSources));
	}

	StatCatcherUtils tStatCatcher_1 = new StatCatcherUtils("_EV8vUEGEEemvw7tH_ArB6w", "0.1");

private final java.io.ByteArrayOutputStream baos = new java.io.ByteArrayOutputStream();
private final java.io.PrintStream errorMessagePS = new java.io.PrintStream(new java.io.BufferedOutputStream(baos));

public String getExceptionStackTrace() {
	if ("failure".equals(this.getStatus())) {
		errorMessagePS.flush();
		return baos.toString();
	}
	return null;
}

private Exception exception;

public Exception getException() {
	if ("failure".equals(this.getStatus())) {
		return this.exception;
	}
	return null;
}

private class TalendException extends Exception {

	private static final long serialVersionUID = 1L;

	private java.util.Map<String, Object> globalMap = null;
	private Exception e = null;
	private String currentComponent = null;
	private String virtualComponentName = null;
	
	public void setVirtualComponentName (String virtualComponentName){
		this.virtualComponentName = virtualComponentName;
	}

	private TalendException(Exception e, String errorComponent, final java.util.Map<String, Object> globalMap) {
		this.currentComponent= errorComponent;
		this.globalMap = globalMap;
		this.e = e;
	}

	public Exception getException() {
		return this.e;
	}

	public String getCurrentComponent() {
		return this.currentComponent;
	}

	
    public String getExceptionCauseMessage(Exception e){
        Throwable cause = e;
        String message = null;
        int i = 10;
        while (null != cause && 0 < i--) {
            message = cause.getMessage();
            if (null == message) {
                cause = cause.getCause();
            } else {
                break;          
            }
        }
        if (null == message) {
            message = e.getClass().getName();
        }   
        return message;
    }

	@Override
	public void printStackTrace() {
		if (!(e instanceof TalendException || e instanceof TDieException)) {
			if(virtualComponentName!=null && currentComponent.indexOf(virtualComponentName+"_")==0){
				globalMap.put(virtualComponentName+"_ERROR_MESSAGE",getExceptionCauseMessage(e));
			}
			globalMap.put(currentComponent+"_ERROR_MESSAGE",getExceptionCauseMessage(e));
			System.err.println("Exception in component " + currentComponent + " (" + jobName + ")");
		}
		if (!(e instanceof TDieException)) {
			if(e instanceof TalendException){
				e.printStackTrace();
			} else {
				e.printStackTrace();
				e.printStackTrace(errorMessagePS);
				G1_Val_mig_AGENTS.this.exception = e;
			}
		}
		if (!(e instanceof TalendException)) {
		try {
			for (java.lang.reflect.Method m : this.getClass().getEnclosingClass().getMethods()) {
				if (m.getName().compareTo(currentComponent + "_error") == 0) {
					m.invoke(G1_Val_mig_AGENTS.this, new Object[] { e , currentComponent, globalMap});
					break;
				}
			}

			if(!(e instanceof TDieException)){
			}
		} catch (Exception e) {
			this.e.printStackTrace();
		}
		}
	}
}

			public void tMSSqlConnection_3_error(Exception exception, String errorComponent, final java.util.Map<String, Object> globalMap) throws TalendException {
				
				end_Hash.put(errorComponent, System.currentTimeMillis());
				
							tStatCatcher_1.addMessage("failure",errorComponent, end_Hash.get(errorComponent)-start_Hash.get(errorComponent));
							tStatCatcher_1Process(globalMap);
							
				status = "failure";
				
					tMSSqlConnection_3_onSubJobError(exception, errorComponent, globalMap);
			}
			
			public void tMSSqlSP_7_error(Exception exception, String errorComponent, final java.util.Map<String, Object> globalMap) throws TalendException {
				
				end_Hash.put(errorComponent, System.currentTimeMillis());
				
							tStatCatcher_1.addMessage("failure",errorComponent, end_Hash.get(errorComponent)-start_Hash.get(errorComponent));
							tStatCatcher_1Process(globalMap);
							
				status = "failure";
				
					tMSSqlSP_7_onSubJobError(exception, errorComponent, globalMap);
			}
			
			public void tMSSqlSP_8_error(Exception exception, String errorComponent, final java.util.Map<String, Object> globalMap) throws TalendException {
				
				end_Hash.put(errorComponent, System.currentTimeMillis());
				
							tStatCatcher_1.addMessage("failure",errorComponent, end_Hash.get(errorComponent)-start_Hash.get(errorComponent));
							tStatCatcher_1Process(globalMap);
							
				status = "failure";
				
					tMSSqlSP_8_onSubJobError(exception, errorComponent, globalMap);
			}
			
			public void tDBClose_1_error(Exception exception, String errorComponent, final java.util.Map<String, Object> globalMap) throws TalendException {
				
				end_Hash.put(errorComponent, System.currentTimeMillis());
				
							tStatCatcher_1.addMessage("failure",errorComponent, end_Hash.get(errorComponent)-start_Hash.get(errorComponent));
							tStatCatcher_1Process(globalMap);
							
				status = "failure";
				
					tDBClose_1_onSubJobError(exception, errorComponent, globalMap);
			}
			
			public void tStatCatcher_1_error(Exception exception, String errorComponent, final java.util.Map<String, Object> globalMap) throws TalendException {
				
				end_Hash.put(errorComponent, System.currentTimeMillis());
				
				status = "failure";
				
					tStatCatcher_1_onSubJobError(exception, errorComponent, globalMap);
			}
			
			public void tLogRow_1_error(Exception exception, String errorComponent, final java.util.Map<String, Object> globalMap) throws TalendException {
				
				end_Hash.put(errorComponent, System.currentTimeMillis());
				
				status = "failure";
				
					tStatCatcher_1_onSubJobError(exception, errorComponent, globalMap);
			}
			
			public void tMSSqlConnection_3_onSubJobError(Exception exception, String errorComponent, final java.util.Map<String, Object> globalMap) throws TalendException {

resumeUtil.addLog("SYSTEM_LOG", "NODE:"+ errorComponent, "", Thread.currentThread().getId()+ "", "FATAL", "", exception.getMessage(), ResumeUtil.getExceptionStackTrace(exception),"");

			}
			public void tMSSqlSP_7_onSubJobError(Exception exception, String errorComponent, final java.util.Map<String, Object> globalMap) throws TalendException {

resumeUtil.addLog("SYSTEM_LOG", "NODE:"+ errorComponent, "", Thread.currentThread().getId()+ "", "FATAL", "", exception.getMessage(), ResumeUtil.getExceptionStackTrace(exception),"");

			}
			public void tMSSqlSP_8_onSubJobError(Exception exception, String errorComponent, final java.util.Map<String, Object> globalMap) throws TalendException {

resumeUtil.addLog("SYSTEM_LOG", "NODE:"+ errorComponent, "", Thread.currentThread().getId()+ "", "FATAL", "", exception.getMessage(), ResumeUtil.getExceptionStackTrace(exception),"");

			}
			public void tDBClose_1_onSubJobError(Exception exception, String errorComponent, final java.util.Map<String, Object> globalMap) throws TalendException {

resumeUtil.addLog("SYSTEM_LOG", "NODE:"+ errorComponent, "", Thread.currentThread().getId()+ "", "FATAL", "", exception.getMessage(), ResumeUtil.getExceptionStackTrace(exception),"");

			}
			public void tStatCatcher_1_onSubJobError(Exception exception, String errorComponent, final java.util.Map<String, Object> globalMap) throws TalendException {

resumeUtil.addLog("SYSTEM_LOG", "NODE:"+ errorComponent, "", Thread.currentThread().getId()+ "", "FATAL", "", exception.getMessage(), ResumeUtil.getExceptionStackTrace(exception),"");

			}
	





public void tMSSqlConnection_3Process(final java.util.Map<String, Object> globalMap) throws TalendException {
	globalMap.put("tMSSqlConnection_3_SUBPROCESS_STATE", 0);

 final boolean execStat = this.execStat;
	
		String iterateId = "";
	
	
	String currentComponent = "";
	java.util.Map<String, Object> resourceMap = new java.util.HashMap<String, Object>();

	try {
			// TDI-39566 avoid throwing an useless Exception
			boolean resumeIt = true;
			if (globalResumeTicket == false && resumeEntryMethodName != null) {
				String currentMethodName = new java.lang.Exception().getStackTrace()[0].getMethodName();
				resumeIt = resumeEntryMethodName.equals(currentMethodName);
			}
			if (resumeIt || globalResumeTicket) { //start the resume
				globalResumeTicket = true;



		


	
	/**
	 * [tMSSqlConnection_3 begin ] start
	 */

	

	
		
		ok_Hash.put("tMSSqlConnection_3", false);
		start_Hash.put("tMSSqlConnection_3", System.currentTimeMillis());
		
				tStatCatcher_1.addMessage("begin","tMSSqlConnection_3");
				tStatCatcher_1Process(globalMap);
			
	
	currentComponent="tMSSqlConnection_3";

	
		int tos_count_tMSSqlConnection_3 = 0;
		
	

	
			String url_tMSSqlConnection_3 = "jdbc:jtds:sqlserver://" + context.ipasHost ;
		String port_tMSSqlConnection_3 = context.ipasPort;
		String dbname_tMSSqlConnection_3 = context.ipasDB ;
    	if (!"".equals(port_tMSSqlConnection_3)) {
    		url_tMSSqlConnection_3 += ":" + context.ipasPort;
    	}
    	if (!"".equals(dbname_tMSSqlConnection_3)) {
    		
				url_tMSSqlConnection_3 += "//" + context.ipasDB; 
    	}

		url_tMSSqlConnection_3 += ";appName=" + projectName + ";" +  "allowMultiQueries=true";  
	String dbUser_tMSSqlConnection_3 = context.ipasUser;
	
	
		
	final String decryptedPassword_tMSSqlConnection_3 = context.ipasPassword; 
		String dbPwd_tMSSqlConnection_3 = decryptedPassword_tMSSqlConnection_3;
	
	
	java.sql.Connection conn_tMSSqlConnection_3 = null;
	
		
			String driverClass_tMSSqlConnection_3 = "net.sourceforge.jtds.jdbc.Driver";
			java.lang.Class jdbcclazz_tMSSqlConnection_3 = java.lang.Class.forName(driverClass_tMSSqlConnection_3);
			globalMap.put("driverClass_tMSSqlConnection_3", driverClass_tMSSqlConnection_3);
		
			conn_tMSSqlConnection_3 = java.sql.DriverManager.getConnection(url_tMSSqlConnection_3,dbUser_tMSSqlConnection_3,dbPwd_tMSSqlConnection_3);

		globalMap.put("conn_tMSSqlConnection_3", conn_tMSSqlConnection_3);
	if (null != conn_tMSSqlConnection_3) {
		
			conn_tMSSqlConnection_3.setAutoCommit(true);
	}

	globalMap.put("dbschema_tMSSqlConnection_3", "");

	globalMap.put("db_tMSSqlConnection_3",  context.ipasDB);
	
	globalMap.put("shareIdentitySetting_tMSSqlConnection_3",  false);

	globalMap.put("driver_tMSSqlConnection_3", "JTDS");

 



/**
 * [tMSSqlConnection_3 begin ] stop
 */
	
	/**
	 * [tMSSqlConnection_3 main ] start
	 */

	

	
	
	currentComponent="tMSSqlConnection_3";

	

 


	tos_count_tMSSqlConnection_3++;

/**
 * [tMSSqlConnection_3 main ] stop
 */
	
	/**
	 * [tMSSqlConnection_3 process_data_begin ] start
	 */

	

	
	
	currentComponent="tMSSqlConnection_3";

	

 



/**
 * [tMSSqlConnection_3 process_data_begin ] stop
 */
	
	/**
	 * [tMSSqlConnection_3 process_data_end ] start
	 */

	

	
	
	currentComponent="tMSSqlConnection_3";

	

 



/**
 * [tMSSqlConnection_3 process_data_end ] stop
 */
	
	/**
	 * [tMSSqlConnection_3 end ] start
	 */

	

	
	
	currentComponent="tMSSqlConnection_3";

	

 

ok_Hash.put("tMSSqlConnection_3", true);
end_Hash.put("tMSSqlConnection_3", System.currentTimeMillis());

tStatCatcher_1.addMessage("end","tMSSqlConnection_3", end_Hash.get("tMSSqlConnection_3")-start_Hash.get("tMSSqlConnection_3"));
tStatCatcher_1Process(globalMap);



/**
 * [tMSSqlConnection_3 end ] stop
 */
				}//end the resume

				
				    			if(resumeEntryMethodName == null || globalResumeTicket){
				    				resumeUtil.addLog("CHECKPOINT", "CONNECTION:SUBJOB_OK:tMSSqlConnection_3:OnSubjobOk", "", Thread.currentThread().getId() + "", "", "", "", "", "");
								}	    				    			
					    	
								if(execStat){    	
									runStat.updateStatOnConnection("OnSubjobOk12", 0, "ok");
								} 
							
							tMSSqlSP_7Process(globalMap); 
						



	
			}catch(java.lang.Exception e){	
				
				TalendException te = new TalendException(e, currentComponent, globalMap);
				
				throw te;
			}catch(java.lang.Error error){	
				
					runStat.stopThreadStat();
				
				throw error;
			}finally{
				
				try{
					
	
	/**
	 * [tMSSqlConnection_3 finally ] start
	 */

	

	
	
	currentComponent="tMSSqlConnection_3";

	

 



/**
 * [tMSSqlConnection_3 finally ] stop
 */
				}catch(java.lang.Exception e){	
					//ignore
				}catch(java.lang.Error error){
					//ignore
				}
				resourceMap = null;
			}
		

		globalMap.put("tMSSqlConnection_3_SUBPROCESS_STATE", 1);
	}
	

public void tMSSqlSP_7Process(final java.util.Map<String, Object> globalMap) throws TalendException {
	globalMap.put("tMSSqlSP_7_SUBPROCESS_STATE", 0);

 final boolean execStat = this.execStat;
	
		String iterateId = "";
	
	
	String currentComponent = "";
	java.util.Map<String, Object> resourceMap = new java.util.HashMap<String, Object>();

	try {
			// TDI-39566 avoid throwing an useless Exception
			boolean resumeIt = true;
			if (globalResumeTicket == false && resumeEntryMethodName != null) {
				String currentMethodName = new java.lang.Exception().getStackTrace()[0].getMethodName();
				resumeIt = resumeEntryMethodName.equals(currentMethodName);
			}
			if (resumeIt || globalResumeTicket) { //start the resume
				globalResumeTicket = true;



		


	
	/**
	 * [tMSSqlSP_7 begin ] start
	 */

	

	
		
		ok_Hash.put("tMSSqlSP_7", false);
		start_Hash.put("tMSSqlSP_7", System.currentTimeMillis());
		
				tStatCatcher_1.addMessage("begin","tMSSqlSP_7");
				tStatCatcher_1Process(globalMap);
			
	
	currentComponent="tMSSqlSP_7";

	
		int tos_count_tMSSqlSP_7 = 0;
		



String dbschema_tMSSqlSP_7 ="";
java.sql.Connection conn_tMSSqlSP_7 = null;
String dbUser_tMSSqlSP_7 = null;
	dbschema_tMSSqlSP_7 = (String)globalMap.get("dbschema_tMSSqlConnection_3");
	
	conn_tMSSqlSP_7 = (java.sql.Connection)globalMap.get("conn_tMSSqlConnection_3");
	
//java.sql.Statement stmt_tMSSqlSP_7 = conn_tMSSqlSP_7.createStatement();

//stmt_tMSSqlSP_7.execute("SET NOCOUNT ON");
String spSchema_tMSSqlSP_7 = "";
if(dbschema_tMSSqlSP_7 != null && !dbschema_tMSSqlSP_7.trim().isEmpty()) {
    spSchema_tMSSqlSP_7 = "["+dbschema_tMSSqlSP_7+"].";
}
java.sql.CallableStatement statement_tMSSqlSP_7 = conn_tMSSqlSP_7.prepareCall("{call " + spSchema_tMSSqlSP_7 + "ImportAgentValidate" + "()}"
);

java.sql.Timestamp tmpDate_tMSSqlSP_7;
String tmpString_tMSSqlSP_7;

 



/**
 * [tMSSqlSP_7 begin ] stop
 */
	
	/**
	 * [tMSSqlSP_7 main ] start
	 */

	

	
	
	currentComponent="tMSSqlSP_7";

	

			statement_tMSSqlSP_7.execute();
			while(statement_tMSSqlSP_7.getMoreResults() || (statement_tMSSqlSP_7.getUpdateCount() != -1)){
				//Do nothing. "getMoreResults()" would call method do error check.
			}
		

 


	tos_count_tMSSqlSP_7++;

/**
 * [tMSSqlSP_7 main ] stop
 */
	
	/**
	 * [tMSSqlSP_7 process_data_begin ] start
	 */

	

	
	
	currentComponent="tMSSqlSP_7";

	

 



/**
 * [tMSSqlSP_7 process_data_begin ] stop
 */
	
	/**
	 * [tMSSqlSP_7 process_data_end ] start
	 */

	

	
	
	currentComponent="tMSSqlSP_7";

	

 



/**
 * [tMSSqlSP_7 process_data_end ] stop
 */
	
	/**
	 * [tMSSqlSP_7 end ] start
	 */

	

	
	
	currentComponent="tMSSqlSP_7";

	

//stmt_tMSSqlSP_7.execute("SET NOCOUNT OFF");

//stmt_tMSSqlSP_7.close();

statement_tMSSqlSP_7.close();

 

ok_Hash.put("tMSSqlSP_7", true);
end_Hash.put("tMSSqlSP_7", System.currentTimeMillis());

tStatCatcher_1.addMessage("end","tMSSqlSP_7", end_Hash.get("tMSSqlSP_7")-start_Hash.get("tMSSqlSP_7"));
tStatCatcher_1Process(globalMap);



/**
 * [tMSSqlSP_7 end ] stop
 */
				}//end the resume

				
				    			if(resumeEntryMethodName == null || globalResumeTicket){
				    				resumeUtil.addLog("CHECKPOINT", "CONNECTION:SUBJOB_OK:tMSSqlSP_7:OnSubjobOk", "", Thread.currentThread().getId() + "", "", "", "", "", "");
								}	    				    			
					    	
								if(execStat){    	
									runStat.updateStatOnConnection("OnSubjobOk10", 0, "ok");
								} 
							
							tMSSqlSP_8Process(globalMap); 
						



	
			}catch(java.lang.Exception e){	
				
				TalendException te = new TalendException(e, currentComponent, globalMap);
				
				throw te;
			}catch(java.lang.Error error){	
				
					runStat.stopThreadStat();
				
				throw error;
			}finally{
				
				try{
					
	
	/**
	 * [tMSSqlSP_7 finally ] start
	 */

	

	
	
	currentComponent="tMSSqlSP_7";

	

 



/**
 * [tMSSqlSP_7 finally ] stop
 */
				}catch(java.lang.Exception e){	
					//ignore
				}catch(java.lang.Error error){
					//ignore
				}
				resourceMap = null;
			}
		

		globalMap.put("tMSSqlSP_7_SUBPROCESS_STATE", 1);
	}
	

public void tMSSqlSP_8Process(final java.util.Map<String, Object> globalMap) throws TalendException {
	globalMap.put("tMSSqlSP_8_SUBPROCESS_STATE", 0);

 final boolean execStat = this.execStat;
	
		String iterateId = "";
	
	
	String currentComponent = "";
	java.util.Map<String, Object> resourceMap = new java.util.HashMap<String, Object>();

	try {
			// TDI-39566 avoid throwing an useless Exception
			boolean resumeIt = true;
			if (globalResumeTicket == false && resumeEntryMethodName != null) {
				String currentMethodName = new java.lang.Exception().getStackTrace()[0].getMethodName();
				resumeIt = resumeEntryMethodName.equals(currentMethodName);
			}
			if (resumeIt || globalResumeTicket) { //start the resume
				globalResumeTicket = true;



		


	
	/**
	 * [tMSSqlSP_8 begin ] start
	 */

	

	
		
		ok_Hash.put("tMSSqlSP_8", false);
		start_Hash.put("tMSSqlSP_8", System.currentTimeMillis());
		
				tStatCatcher_1.addMessage("begin","tMSSqlSP_8");
				tStatCatcher_1Process(globalMap);
			
	
	currentComponent="tMSSqlSP_8";

	
		int tos_count_tMSSqlSP_8 = 0;
		



String dbschema_tMSSqlSP_8 ="";
java.sql.Connection conn_tMSSqlSP_8 = null;
String dbUser_tMSSqlSP_8 = null;
	dbschema_tMSSqlSP_8 = (String)globalMap.get("dbschema_tMSSqlConnection_3");
	
	conn_tMSSqlSP_8 = (java.sql.Connection)globalMap.get("conn_tMSSqlConnection_3");
	
//java.sql.Statement stmt_tMSSqlSP_8 = conn_tMSSqlSP_8.createStatement();

//stmt_tMSSqlSP_8.execute("SET NOCOUNT ON");
String spSchema_tMSSqlSP_8 = "";
if(dbschema_tMSSqlSP_8 != null && !dbschema_tMSSqlSP_8.trim().isEmpty()) {
    spSchema_tMSSqlSP_8 = "["+dbschema_tMSSqlSP_8+"].";
}
java.sql.CallableStatement statement_tMSSqlSP_8 = conn_tMSSqlSP_8.prepareCall("{call " + spSchema_tMSSqlSP_8 + "ImportAgentProcessAll" + "()}"
);

java.sql.Timestamp tmpDate_tMSSqlSP_8;
String tmpString_tMSSqlSP_8;

 



/**
 * [tMSSqlSP_8 begin ] stop
 */
	
	/**
	 * [tMSSqlSP_8 main ] start
	 */

	

	
	
	currentComponent="tMSSqlSP_8";

	

			statement_tMSSqlSP_8.execute();
			while(statement_tMSSqlSP_8.getMoreResults() || (statement_tMSSqlSP_8.getUpdateCount() != -1)){
				//Do nothing. "getMoreResults()" would call method do error check.
			}
		

 


	tos_count_tMSSqlSP_8++;

/**
 * [tMSSqlSP_8 main ] stop
 */
	
	/**
	 * [tMSSqlSP_8 process_data_begin ] start
	 */

	

	
	
	currentComponent="tMSSqlSP_8";

	

 



/**
 * [tMSSqlSP_8 process_data_begin ] stop
 */
	
	/**
	 * [tMSSqlSP_8 process_data_end ] start
	 */

	

	
	
	currentComponent="tMSSqlSP_8";

	

 



/**
 * [tMSSqlSP_8 process_data_end ] stop
 */
	
	/**
	 * [tMSSqlSP_8 end ] start
	 */

	

	
	
	currentComponent="tMSSqlSP_8";

	

//stmt_tMSSqlSP_8.execute("SET NOCOUNT OFF");

//stmt_tMSSqlSP_8.close();

statement_tMSSqlSP_8.close();

 

ok_Hash.put("tMSSqlSP_8", true);
end_Hash.put("tMSSqlSP_8", System.currentTimeMillis());

tStatCatcher_1.addMessage("end","tMSSqlSP_8", end_Hash.get("tMSSqlSP_8")-start_Hash.get("tMSSqlSP_8"));
tStatCatcher_1Process(globalMap);



/**
 * [tMSSqlSP_8 end ] stop
 */
				}//end the resume

				
				    			if(resumeEntryMethodName == null || globalResumeTicket){
				    				resumeUtil.addLog("CHECKPOINT", "CONNECTION:SUBJOB_OK:tMSSqlSP_8:OnSubjobOk", "", Thread.currentThread().getId() + "", "", "", "", "", "");
								}	    				    			
					    	
								if(execStat){    	
									runStat.updateStatOnConnection("OnSubjobOk2", 0, "ok");
								} 
							
							tDBClose_1Process(globalMap); 
						



	
			}catch(java.lang.Exception e){	
				
				TalendException te = new TalendException(e, currentComponent, globalMap);
				
				throw te;
			}catch(java.lang.Error error){	
				
					runStat.stopThreadStat();
				
				throw error;
			}finally{
				
				try{
					
	
	/**
	 * [tMSSqlSP_8 finally ] start
	 */

	

	
	
	currentComponent="tMSSqlSP_8";

	

 



/**
 * [tMSSqlSP_8 finally ] stop
 */
				}catch(java.lang.Exception e){	
					//ignore
				}catch(java.lang.Error error){
					//ignore
				}
				resourceMap = null;
			}
		

		globalMap.put("tMSSqlSP_8_SUBPROCESS_STATE", 1);
	}
	

public void tDBClose_1Process(final java.util.Map<String, Object> globalMap) throws TalendException {
	globalMap.put("tDBClose_1_SUBPROCESS_STATE", 0);

 final boolean execStat = this.execStat;
	
		String iterateId = "";
	
	
	String currentComponent = "";
	java.util.Map<String, Object> resourceMap = new java.util.HashMap<String, Object>();

	try {
			// TDI-39566 avoid throwing an useless Exception
			boolean resumeIt = true;
			if (globalResumeTicket == false && resumeEntryMethodName != null) {
				String currentMethodName = new java.lang.Exception().getStackTrace()[0].getMethodName();
				resumeIt = resumeEntryMethodName.equals(currentMethodName);
			}
			if (resumeIt || globalResumeTicket) { //start the resume
				globalResumeTicket = true;





	
	/**
	 * [tDBClose_1 begin ] start
	 */

	

	
		
		ok_Hash.put("tDBClose_1", false);
		start_Hash.put("tDBClose_1", System.currentTimeMillis());
		
				tStatCatcher_1.addMessage("begin","tDBClose_1");
				tStatCatcher_1Process(globalMap);
			
	
	currentComponent="tDBClose_1";

	
		int tos_count_tDBClose_1 = 0;
		

 



/**
 * [tDBClose_1 begin ] stop
 */
	
	/**
	 * [tDBClose_1 main ] start
	 */

	

	
	
	currentComponent="tDBClose_1";

	



	java.sql.Connection conn_tDBClose_1 = (java.sql.Connection)globalMap.get("conn_tMSSqlConnection_3");
	if(conn_tDBClose_1 != null && !conn_tDBClose_1.isClosed())
	{
        conn_tDBClose_1.close();
	}

 


	tos_count_tDBClose_1++;

/**
 * [tDBClose_1 main ] stop
 */
	
	/**
	 * [tDBClose_1 process_data_begin ] start
	 */

	

	
	
	currentComponent="tDBClose_1";

	

 



/**
 * [tDBClose_1 process_data_begin ] stop
 */
	
	/**
	 * [tDBClose_1 process_data_end ] start
	 */

	

	
	
	currentComponent="tDBClose_1";

	

 



/**
 * [tDBClose_1 process_data_end ] stop
 */
	
	/**
	 * [tDBClose_1 end ] start
	 */

	

	
	
	currentComponent="tDBClose_1";

	

 

ok_Hash.put("tDBClose_1", true);
end_Hash.put("tDBClose_1", System.currentTimeMillis());

tStatCatcher_1.addMessage("end","tDBClose_1", end_Hash.get("tDBClose_1")-start_Hash.get("tDBClose_1"));
tStatCatcher_1Process(globalMap);



/**
 * [tDBClose_1 end ] stop
 */
				}//end the resume

				



	
			}catch(java.lang.Exception e){	
				
				TalendException te = new TalendException(e, currentComponent, globalMap);
				
				throw te;
			}catch(java.lang.Error error){	
				
					runStat.stopThreadStat();
				
				throw error;
			}finally{
				
				try{
					
	
	/**
	 * [tDBClose_1 finally ] start
	 */

	

	
	
	currentComponent="tDBClose_1";

	

 



/**
 * [tDBClose_1 finally ] stop
 */
				}catch(java.lang.Exception e){	
					//ignore
				}catch(java.lang.Error error){
					//ignore
				}
				resourceMap = null;
			}
		

		globalMap.put("tDBClose_1_SUBPROCESS_STATE", 1);
	}
	


public static class row30Struct implements routines.system.IPersistableRow<row30Struct> {
    final static byte[] commonByteArrayLock_WIPO_PROJECTS_G1_Val_mig_AGENTS = new byte[0];
    static byte[] commonByteArray_WIPO_PROJECTS_G1_Val_mig_AGENTS = new byte[0];

	
			    public java.util.Date moment;

				public java.util.Date getMoment () {
					return this.moment;
				}
				
			    public String pid;

				public String getPid () {
					return this.pid;
				}
				
			    public String father_pid;

				public String getFather_pid () {
					return this.father_pid;
				}
				
			    public String root_pid;

				public String getRoot_pid () {
					return this.root_pid;
				}
				
			    public Long system_pid;

				public Long getSystem_pid () {
					return this.system_pid;
				}
				
			    public String project;

				public String getProject () {
					return this.project;
				}
				
			    public String job;

				public String getJob () {
					return this.job;
				}
				
			    public String job_repository_id;

				public String getJob_repository_id () {
					return this.job_repository_id;
				}
				
			    public String job_version;

				public String getJob_version () {
					return this.job_version;
				}
				
			    public String context;

				public String getContext () {
					return this.context;
				}
				
			    public String origin;

				public String getOrigin () {
					return this.origin;
				}
				
			    public String message_type;

				public String getMessage_type () {
					return this.message_type;
				}
				
			    public String message;

				public String getMessage () {
					return this.message;
				}
				
			    public Long duration;

				public Long getDuration () {
					return this.duration;
				}
				



	private java.util.Date readDate(ObjectInputStream dis) throws IOException{
		java.util.Date dateReturn = null;
        int length = 0;
        length = dis.readByte();
		if (length == -1) {
			dateReturn = null;
		} else {
	    	dateReturn = new Date(dis.readLong());
		}
		return dateReturn;
	}

    private void writeDate(java.util.Date date1, ObjectOutputStream dos) throws IOException{
		if(date1 == null) {
            dos.writeByte(-1);
		} else {
			dos.writeByte(0);
	    	dos.writeLong(date1.getTime());
    	}
    }

	private String readString(ObjectInputStream dis) throws IOException{
		String strReturn = null;
		int length = 0;
        length = dis.readInt();
		if (length == -1) {
			strReturn = null;
		} else {
			if(length > commonByteArray_WIPO_PROJECTS_G1_Val_mig_AGENTS.length) {
				if(length < 1024 && commonByteArray_WIPO_PROJECTS_G1_Val_mig_AGENTS.length == 0) {
   					commonByteArray_WIPO_PROJECTS_G1_Val_mig_AGENTS = new byte[1024];
				} else {
   					commonByteArray_WIPO_PROJECTS_G1_Val_mig_AGENTS = new byte[2 * length];
   				}
			}
			dis.readFully(commonByteArray_WIPO_PROJECTS_G1_Val_mig_AGENTS, 0, length);
			strReturn = new String(commonByteArray_WIPO_PROJECTS_G1_Val_mig_AGENTS, 0, length, utf8Charset);
		}
		return strReturn;
	}

    private void writeString(String str, ObjectOutputStream dos) throws IOException{
		if(str == null) {
            dos.writeInt(-1);
		} else {
            byte[] byteArray = str.getBytes(utf8Charset);
	    	dos.writeInt(byteArray.length);
			dos.write(byteArray);
    	}
    }

    public void readData(ObjectInputStream dis) {

		synchronized(commonByteArrayLock_WIPO_PROJECTS_G1_Val_mig_AGENTS) {

        	try {

        		int length = 0;
		
					this.moment = readDate(dis);
					
					this.pid = readString(dis);
					
					this.father_pid = readString(dis);
					
					this.root_pid = readString(dis);
					
			            length = dis.readByte();
           				if (length == -1) {
           	    			this.system_pid = null;
           				} else {
           			    	this.system_pid = dis.readLong();
           				}
					
					this.project = readString(dis);
					
					this.job = readString(dis);
					
					this.job_repository_id = readString(dis);
					
					this.job_version = readString(dis);
					
					this.context = readString(dis);
					
					this.origin = readString(dis);
					
					this.message_type = readString(dis);
					
					this.message = readString(dis);
					
			            length = dis.readByte();
           				if (length == -1) {
           	    			this.duration = null;
           				} else {
           			    	this.duration = dis.readLong();
           				}
					
        	} catch (IOException e) {
	            throw new RuntimeException(e);

		

        }

		

      }


    }

    public void writeData(ObjectOutputStream dos) {
        try {

		
					// java.util.Date
				
						writeDate(this.moment,dos);
					
					// String
				
						writeString(this.pid,dos);
					
					// String
				
						writeString(this.father_pid,dos);
					
					// String
				
						writeString(this.root_pid,dos);
					
					// Long
				
						if(this.system_pid == null) {
			                dos.writeByte(-1);
						} else {
               				dos.writeByte(0);
           			    	dos.writeLong(this.system_pid);
		            	}
					
					// String
				
						writeString(this.project,dos);
					
					// String
				
						writeString(this.job,dos);
					
					// String
				
						writeString(this.job_repository_id,dos);
					
					// String
				
						writeString(this.job_version,dos);
					
					// String
				
						writeString(this.context,dos);
					
					// String
				
						writeString(this.origin,dos);
					
					// String
				
						writeString(this.message_type,dos);
					
					// String
				
						writeString(this.message,dos);
					
					// Long
				
						if(this.duration == null) {
			                dos.writeByte(-1);
						} else {
               				dos.writeByte(0);
           			    	dos.writeLong(this.duration);
		            	}
					
        	} catch (IOException e) {
	            throw new RuntimeException(e);
        }


    }


    public String toString() {

		StringBuilder sb = new StringBuilder();
		sb.append(super.toString());
		sb.append("[");
		sb.append("moment="+String.valueOf(moment));
		sb.append(",pid="+pid);
		sb.append(",father_pid="+father_pid);
		sb.append(",root_pid="+root_pid);
		sb.append(",system_pid="+String.valueOf(system_pid));
		sb.append(",project="+project);
		sb.append(",job="+job);
		sb.append(",job_repository_id="+job_repository_id);
		sb.append(",job_version="+job_version);
		sb.append(",context="+context);
		sb.append(",origin="+origin);
		sb.append(",message_type="+message_type);
		sb.append(",message="+message);
		sb.append(",duration="+String.valueOf(duration));
	    sb.append("]");

	    return sb.toString();
    }

    /**
     * Compare keys
     */
    public int compareTo(row30Struct other) {

		int returnValue = -1;
		
	    return returnValue;
    }


    private int checkNullsAndCompare(Object object1, Object object2) {
        int returnValue = 0;
		if (object1 instanceof Comparable && object2 instanceof Comparable) {
            returnValue = ((Comparable) object1).compareTo(object2);
        } else if (object1 != null && object2 != null) {
            returnValue = compareStrings(object1.toString(), object2.toString());
        } else if (object1 == null && object2 != null) {
            returnValue = 1;
        } else if (object1 != null && object2 == null) {
            returnValue = -1;
        } else {
            returnValue = 0;
        }

        return returnValue;
    }

    private int compareStrings(String string1, String string2) {
        return string1.compareTo(string2);
    }


}
public void tStatCatcher_1Process(final java.util.Map<String, Object> globalMap) throws TalendException {
	globalMap.put("tStatCatcher_1_SUBPROCESS_STATE", 0);

 final boolean execStat = this.execStat;
	
		String iterateId = "";
	
	
	String currentComponent = "";
	java.util.Map<String, Object> resourceMap = new java.util.HashMap<String, Object>();

	try {
			// TDI-39566 avoid throwing an useless Exception
			boolean resumeIt = true;
			if (globalResumeTicket == false && resumeEntryMethodName != null) {
				String currentMethodName = new java.lang.Exception().getStackTrace()[0].getMethodName();
				resumeIt = resumeEntryMethodName.equals(currentMethodName);
			}
			if (resumeIt || globalResumeTicket) { //start the resume
				globalResumeTicket = true;



		row30Struct row30 = new row30Struct();




	
	/**
	 * [tLogRow_1 begin ] start
	 */

	

	
		
		ok_Hash.put("tLogRow_1", false);
		start_Hash.put("tLogRow_1", System.currentTimeMillis());
		
	
	currentComponent="tLogRow_1";

	
					if(execStat) {
						runStat.updateStatOnConnection(resourceMap,iterateId,0,0,"row30");
					}
				
		int tos_count_tLogRow_1 = 0;
		

	///////////////////////
	
		final String OUTPUT_FIELD_SEPARATOR_tLogRow_1 = "|";
		java.io.PrintStream consoleOut_tLogRow_1 = null;	

 		StringBuilder strBuffer_tLogRow_1 = null;
		int nb_line_tLogRow_1 = 0;
///////////////////////    			



 



/**
 * [tLogRow_1 begin ] stop
 */



	
	/**
	 * [tStatCatcher_1 begin ] start
	 */

	

	
		
		ok_Hash.put("tStatCatcher_1", false);
		start_Hash.put("tStatCatcher_1", System.currentTimeMillis());
		
	
	currentComponent="tStatCatcher_1";

	
		int tos_count_tStatCatcher_1 = 0;
		

	for (StatCatcherUtils.StatCatcherMessage scm : tStatCatcher_1.getMessages()) {
		row30.pid = pid;
		row30.root_pid = rootPid;
		row30.father_pid = fatherPid;	
    	row30.project = projectName;
    	row30.job = jobName;
    	row30.context = contextStr;
		row30.origin = (scm.getOrigin()==null || scm.getOrigin().length()<1 ? null : scm.getOrigin());
		row30.message = scm.getMessage();
		row30.duration = scm.getDuration();
		row30.moment = scm.getMoment();
		row30.message_type = scm.getMessageType();
		row30.job_version = scm.getJobVersion();
		row30.job_repository_id = scm.getJobId();
		row30.system_pid = scm.getSystemPid();

 



/**
 * [tStatCatcher_1 begin ] stop
 */
	
	/**
	 * [tStatCatcher_1 main ] start
	 */

	

	
	
	currentComponent="tStatCatcher_1";

	

 


	tos_count_tStatCatcher_1++;

/**
 * [tStatCatcher_1 main ] stop
 */
	
	/**
	 * [tStatCatcher_1 process_data_begin ] start
	 */

	

	
	
	currentComponent="tStatCatcher_1";

	

 



/**
 * [tStatCatcher_1 process_data_begin ] stop
 */

	
	/**
	 * [tLogRow_1 main ] start
	 */

	

	
	
	currentComponent="tLogRow_1";

	
					if(execStat){
						runStat.updateStatOnConnection(iterateId,1,1
						
							,"row30"
						
						);
					}
					
///////////////////////		
						



				strBuffer_tLogRow_1 = new StringBuilder();




   				
	    		if(row30.moment != null) { //              
                    							
       
				strBuffer_tLogRow_1.append(
								FormatterUtils.format_Date(row30.moment, "yyyy-MM-dd HH:mm:ss")				
				);


							
	    		} //  			

    			strBuffer_tLogRow_1.append("|");
    			


   				
	    		if(row30.job != null) { //              
                    							
       
				strBuffer_tLogRow_1.append(
				                String.valueOf(row30.job)							
				);


							
	    		} //  			

    			strBuffer_tLogRow_1.append("|");
    			


   				
	    		if(row30.context != null) { //              
                    							
       
				strBuffer_tLogRow_1.append(
				                String.valueOf(row30.context)							
				);


							
	    		} //  			

    			strBuffer_tLogRow_1.append("|");
    			


   				
	    		if(row30.origin != null) { //              
                    							
       
				strBuffer_tLogRow_1.append(
				                String.valueOf(row30.origin)							
				);


							
	    		} //  			

    			strBuffer_tLogRow_1.append("|");
    			


   				
	    		if(row30.message_type != null) { //              
                    							
       
				strBuffer_tLogRow_1.append(
				                String.valueOf(row30.message_type)							
				);


							
	    		} //  			

    			strBuffer_tLogRow_1.append("|");
    			


   				
	    		if(row30.message != null) { //              
                    							
       
				strBuffer_tLogRow_1.append(
				                String.valueOf(row30.message)							
				);


							
	    		} //  			

    			strBuffer_tLogRow_1.append("|");
    			


   				
	    		if(row30.duration != null) { //              
                    							
       
				strBuffer_tLogRow_1.append(
				                String.valueOf(row30.duration)							
				);


							
	    		} //  			
 

                    if (globalMap.get("tLogRow_CONSOLE")!=null)
                    {
                    	consoleOut_tLogRow_1 = (java.io.PrintStream) globalMap.get("tLogRow_CONSOLE");
                    }
                    else
                    {
                    	consoleOut_tLogRow_1 = new java.io.PrintStream(new java.io.BufferedOutputStream(System.out));
                    	globalMap.put("tLogRow_CONSOLE",consoleOut_tLogRow_1);
                    }
                    consoleOut_tLogRow_1.println(strBuffer_tLogRow_1.toString());
                    consoleOut_tLogRow_1.flush();
                    nb_line_tLogRow_1++;
//////

//////                    
                    
///////////////////////    			

 


	tos_count_tLogRow_1++;

/**
 * [tLogRow_1 main ] stop
 */
	
	/**
	 * [tLogRow_1 process_data_begin ] start
	 */

	

	
	
	currentComponent="tLogRow_1";

	

 



/**
 * [tLogRow_1 process_data_begin ] stop
 */
	
	/**
	 * [tLogRow_1 process_data_end ] start
	 */

	

	
	
	currentComponent="tLogRow_1";

	

 



/**
 * [tLogRow_1 process_data_end ] stop
 */



	
	/**
	 * [tStatCatcher_1 process_data_end ] start
	 */

	

	
	
	currentComponent="tStatCatcher_1";

	

 



/**
 * [tStatCatcher_1 process_data_end ] stop
 */
	
	/**
	 * [tStatCatcher_1 end ] start
	 */

	

	
	
	currentComponent="tStatCatcher_1";

	

	}


 

ok_Hash.put("tStatCatcher_1", true);
end_Hash.put("tStatCatcher_1", System.currentTimeMillis());




/**
 * [tStatCatcher_1 end ] stop
 */

	
	/**
	 * [tLogRow_1 end ] start
	 */

	

	
	
	currentComponent="tLogRow_1";

	


//////
//////
globalMap.put("tLogRow_1_NB_LINE",nb_line_tLogRow_1);

///////////////////////    			

				if(execStat){
			  		runStat.updateStat(resourceMap,iterateId,2,0,"row30");
			  	}
			  	
 

ok_Hash.put("tLogRow_1", true);
end_Hash.put("tLogRow_1", System.currentTimeMillis());




/**
 * [tLogRow_1 end ] stop
 */



				}//end the resume

				



	
			}catch(java.lang.Exception e){	
				
				TalendException te = new TalendException(e, currentComponent, globalMap);
				
				throw te;
			}catch(java.lang.Error error){	
				
					runStat.stopThreadStat();
				
				throw error;
			}finally{
				
				try{
					
	
	/**
	 * [tStatCatcher_1 finally ] start
	 */

	

	
	
	currentComponent="tStatCatcher_1";

	

 



/**
 * [tStatCatcher_1 finally ] stop
 */

	
	/**
	 * [tLogRow_1 finally ] start
	 */

	

	
	
	currentComponent="tLogRow_1";

	

 



/**
 * [tLogRow_1 finally ] stop
 */



				}catch(java.lang.Exception e){	
					//ignore
				}catch(java.lang.Error error){
					//ignore
				}
				resourceMap = null;
			}
		

		globalMap.put("tStatCatcher_1_SUBPROCESS_STATE", 1);
	}
	
    public String resuming_logs_dir_path = null;
    public String resuming_checkpoint_path = null;
    public String parent_part_launcher = null;
    private String resumeEntryMethodName = null;
    private boolean globalResumeTicket = false;

    public boolean watch = false;
    // portStats is null, it means don't execute the statistics
    public Integer portStats = null;
    public int portTraces = 4334;
    public String clientHost;
    public String defaultClientHost = "localhost";
    public String contextStr = "Default";
    public boolean isDefaultContext = true;
    public String pid = "0";
    public String rootPid = null;
    public String fatherPid = null;
    public String fatherNode = null;
    public long startTime = 0;
    public boolean isChildJob = false;
    public String log4jLevel = "";
    
    private boolean enableLogStash;

    private boolean execStat = true;

    private ThreadLocal<java.util.Map<String, String>> threadLocal = new ThreadLocal<java.util.Map<String, String>>() {
        protected java.util.Map<String, String> initialValue() {
            java.util.Map<String,String> threadRunResultMap = new java.util.HashMap<String, String>();
            threadRunResultMap.put("errorCode", null);
            threadRunResultMap.put("status", "");
            return threadRunResultMap;
        };
    };


    protected PropertiesWithType context_param = new PropertiesWithType();
    public java.util.Map<String, Object> parentContextMap = new java.util.HashMap<String, Object>();

    public String status= "";
    

    public static void main(String[] args){
        final G1_Val_mig_AGENTS G1_Val_mig_AGENTSClass = new G1_Val_mig_AGENTS();

        int exitCode = G1_Val_mig_AGENTSClass.runJobInTOS(args);

        System.exit(exitCode);
    }


    public String[][] runJob(String[] args) {

        int exitCode = runJobInTOS(args);
        String[][] bufferValue = new String[][] { { Integer.toString(exitCode) } };

        return bufferValue;
    }

    public boolean hastBufferOutputComponent() {
		boolean hastBufferOutput = false;
    	
        return hastBufferOutput;
    }

    public int runJobInTOS(String[] args) {
	   	// reset status
	   	status = "";
	   	
        String lastStr = "";
        for (String arg : args) {
            if (arg.equalsIgnoreCase("--context_param")) {
                lastStr = arg;
            } else if (lastStr.equals("")) {
                evalParam(arg);
            } else {
                evalParam(lastStr + " " + arg);
                lastStr = "";
            }
        }
        enableLogStash = "true".equalsIgnoreCase(System.getProperty("audit.enabled"));

    	
    	

        if(clientHost == null) {
            clientHost = defaultClientHost;
        }

        if(pid == null || "0".equals(pid)) {
            pid = TalendString.getAsciiRandomString(6);
        }

        if (rootPid==null) {
            rootPid = pid;
        }
        if (fatherPid==null) {
            fatherPid = pid;
        }else{
            isChildJob = true;
        }

        if (portStats != null) {
            // portStats = -1; //for testing
            if (portStats < 0 || portStats > 65535) {
                // issue:10869, the portStats is invalid, so this client socket can't open
                System.err.println("The statistics socket port " + portStats + " is invalid.");
                execStat = false;
            }
        } else {
            execStat = false;
        }

        try {
            //call job/subjob with an existing context, like: --context=production. if without this parameter, there will use the default context instead.
            java.io.InputStream inContext = G1_Val_mig_AGENTS.class.getClassLoader().getResourceAsStream("wipo_projects/g1_val_mig_agents_0_1/contexts/" + contextStr + ".properties");
            if (inContext == null) {
                inContext = G1_Val_mig_AGENTS.class.getClassLoader().getResourceAsStream("config/contexts/" + contextStr + ".properties");
            }
            if (inContext != null) {
                //defaultProps is in order to keep the original context value
                if(context != null && context.isEmpty()) {
	                defaultProps.load(inContext);
	                context = new ContextProperties(defaultProps);
                }
                
                inContext.close();
            } else if (!isDefaultContext) {
                //print info and job continue to run, for case: context_param is not empty.
                System.err.println("Could not find the context " + contextStr);
            }

            if(!context_param.isEmpty()) {
                context.putAll(context_param);
				//set types for params from parentJobs
				for (Object key: context_param.keySet()){
					String context_key = key.toString();
					String context_type = context_param.getContextType(context_key);
					context.setContextType(context_key, context_type);

				}
            }
            class ContextProcessing {
                private void processContext_0() {
                        context.setContextType("utilityFolder", "id_String");
                        if(context.getStringValue("utilityFolder") == null) {
                            context.utilityFolder = null;
                        } else {
                            context.utilityFolder=(String) context.getProperty("utilityFolder");
                        }
                        context.setContextType("processAll", "id_String");
                        if(context.getStringValue("processAll") == null) {
                            context.processAll = null;
                        } else {
                            context.processAll=(String) context.getProperty("processAll");
                        }
                        context.setContextType("ipasSaPassword", "id_String");
                        if(context.getStringValue("ipasSaPassword") == null) {
                            context.ipasSaPassword = null;
                        } else {
                            context.ipasSaPassword=(String) context.getProperty("ipasSaPassword");
                        }
                        context.setContextType("ipasPassword", "id_String");
                        if(context.getStringValue("ipasPassword") == null) {
                            context.ipasPassword = null;
                        } else {
                            context.ipasPassword=(String) context.getProperty("ipasPassword");
                        }
                        context.setContextType("ipasUser", "id_String");
                        if(context.getStringValue("ipasUser") == null) {
                            context.ipasUser = null;
                        } else {
                            context.ipasUser=(String) context.getProperty("ipasUser");
                        }
                        context.setContextType("ipasDB", "id_String");
                        if(context.getStringValue("ipasDB") == null) {
                            context.ipasDB = null;
                        } else {
                            context.ipasDB=(String) context.getProperty("ipasDB");
                        }
                        context.setContextType("ipasPort", "id_String");
                        if(context.getStringValue("ipasPort") == null) {
                            context.ipasPort = null;
                        } else {
                            context.ipasPort=(String) context.getProperty("ipasPort");
                        }
                        context.setContextType("ipasHost", "id_String");
                        if(context.getStringValue("ipasHost") == null) {
                            context.ipasHost = null;
                        } else {
                            context.ipasHost=(String) context.getProperty("ipasHost");
                        }
                        context.setContextType("intermediatePassword", "id_String");
                        if(context.getStringValue("intermediatePassword") == null) {
                            context.intermediatePassword = null;
                        } else {
                            context.intermediatePassword=(String) context.getProperty("intermediatePassword");
                        }
                        context.setContextType("intermediateUser", "id_String");
                        if(context.getStringValue("intermediateUser") == null) {
                            context.intermediateUser = null;
                        } else {
                            context.intermediateUser=(String) context.getProperty("intermediateUser");
                        }
                        context.setContextType("intermediateDB", "id_String");
                        if(context.getStringValue("intermediateDB") == null) {
                            context.intermediateDB = null;
                        } else {
                            context.intermediateDB=(String) context.getProperty("intermediateDB");
                        }
                        context.setContextType("intermediatePort", "id_String");
                        if(context.getStringValue("intermediatePort") == null) {
                            context.intermediatePort = null;
                        } else {
                            context.intermediatePort=(String) context.getProperty("intermediatePort");
                        }
                        context.setContextType("intermediateHost", "id_String");
                        if(context.getStringValue("intermediateHost") == null) {
                            context.intermediateHost = null;
                        } else {
                            context.intermediateHost=(String) context.getProperty("intermediateHost");
                        }
                } 
                public void processAllContext() {
                        processContext_0();
                }
            }

            new ContextProcessing().processAllContext();
        } catch (java.io.IOException ie) {
            System.err.println("Could not load context "+contextStr);
            ie.printStackTrace();
        }

        // get context value from parent directly
        if (parentContextMap != null && !parentContextMap.isEmpty()) {if (parentContextMap.containsKey("utilityFolder")) {
                context.utilityFolder = (String) parentContextMap.get("utilityFolder");
            }if (parentContextMap.containsKey("processAll")) {
                context.processAll = (String) parentContextMap.get("processAll");
            }if (parentContextMap.containsKey("ipasSaPassword")) {
                context.ipasSaPassword = (String) parentContextMap.get("ipasSaPassword");
            }if (parentContextMap.containsKey("ipasPassword")) {
                context.ipasPassword = (String) parentContextMap.get("ipasPassword");
            }if (parentContextMap.containsKey("ipasUser")) {
                context.ipasUser = (String) parentContextMap.get("ipasUser");
            }if (parentContextMap.containsKey("ipasDB")) {
                context.ipasDB = (String) parentContextMap.get("ipasDB");
            }if (parentContextMap.containsKey("ipasPort")) {
                context.ipasPort = (String) parentContextMap.get("ipasPort");
            }if (parentContextMap.containsKey("ipasHost")) {
                context.ipasHost = (String) parentContextMap.get("ipasHost");
            }if (parentContextMap.containsKey("intermediatePassword")) {
                context.intermediatePassword = (String) parentContextMap.get("intermediatePassword");
            }if (parentContextMap.containsKey("intermediateUser")) {
                context.intermediateUser = (String) parentContextMap.get("intermediateUser");
            }if (parentContextMap.containsKey("intermediateDB")) {
                context.intermediateDB = (String) parentContextMap.get("intermediateDB");
            }if (parentContextMap.containsKey("intermediatePort")) {
                context.intermediatePort = (String) parentContextMap.get("intermediatePort");
            }if (parentContextMap.containsKey("intermediateHost")) {
                context.intermediateHost = (String) parentContextMap.get("intermediateHost");
            }
        }

        //Resume: init the resumeUtil
        resumeEntryMethodName = ResumeUtil.getResumeEntryMethodName(resuming_checkpoint_path);
        resumeUtil = new ResumeUtil(resuming_logs_dir_path, isChildJob, rootPid);
        resumeUtil.initCommonInfo(pid, rootPid, fatherPid, projectName, jobName, contextStr, jobVersion);

		List<String> parametersToEncrypt = new java.util.ArrayList<String>();
        //Resume: jobStart
        resumeUtil.addLog("JOB_STARTED", "JOB:" + jobName, parent_part_launcher, Thread.currentThread().getId() + "", "","","","",resumeUtil.convertToJsonText(context,parametersToEncrypt));

if(execStat) {
    try {
        runStat.openSocket(!isChildJob);
        runStat.setAllPID(rootPid, fatherPid, pid, jobName);
        runStat.startThreadStat(clientHost, portStats);
        runStat.updateStatOnJob(RunStat.JOBSTART, fatherNode);
    } catch (java.io.IOException ioException) {
        ioException.printStackTrace();
    }
}



	
	    java.util.concurrent.ConcurrentHashMap<Object, Object> concurrentHashMap = new java.util.concurrent.ConcurrentHashMap<Object, Object>();
	    globalMap.put("concurrentHashMap", concurrentHashMap);
	

    long startUsedMemory = Runtime.getRuntime().totalMemory() - Runtime.getRuntime().freeMemory();
    long endUsedMemory = 0;
    long end = 0;

    startTime = System.currentTimeMillis();
        tStatCatcher_1.addMessage("begin");


this.globalResumeTicket = true;//to run tPreJob




        try {
            tStatCatcher_1Process(globalMap);
        } catch (java.lang.Exception e) {
            e.printStackTrace();
        }

this.globalResumeTicket = false;//to run others jobs

try {
errorCode = null;tMSSqlConnection_3Process(globalMap);
if(!"failure".equals(status)) { status = "end"; }
}catch (TalendException e_tMSSqlConnection_3) {
globalMap.put("tMSSqlConnection_3_SUBPROCESS_STATE", -1);

e_tMSSqlConnection_3.printStackTrace();

}

this.globalResumeTicket = true;//to run tPostJob




        end = System.currentTimeMillis();

        if (watch) {
            System.out.println((end-startTime)+" milliseconds");
        }

        endUsedMemory = Runtime.getRuntime().totalMemory() - Runtime.getRuntime().freeMemory();
        if (false) {
            System.out.println((endUsedMemory - startUsedMemory) + " bytes memory increase when running : G1_Val_mig_AGENTS");
        }
        tStatCatcher_1.addMessage(status==""?"end":status, (end-startTime));
        try {
            tStatCatcher_1Process(globalMap);
        } catch (java.lang.Exception e) {
            e.printStackTrace();
        }



if (execStat) {
    runStat.updateStatOnJob(RunStat.JOBEND, fatherNode);
    runStat.stopThreadStat();
}
    int returnCode = 0;


    if(errorCode == null) {
         returnCode = status != null && status.equals("failure") ? 1 : 0;
    } else {
         returnCode = errorCode.intValue();
    }
    resumeUtil.addLog("JOB_ENDED", "JOB:" + jobName, parent_part_launcher, Thread.currentThread().getId() + "", "","" + returnCode,"","","");

    return returnCode;

  }

    // only for OSGi env
    public void destroy() {
    closeSqlDbConnections();


    }



    private void closeSqlDbConnections() {
        try {
            Object obj_conn;
            obj_conn = globalMap.remove("conn_tMSSqlConnection_3");
            if (null != obj_conn) {
                ((java.sql.Connection) obj_conn).close();
            }
        } catch (java.lang.Exception e) {
        }
    }











    private java.util.Map<String, Object> getSharedConnections4REST() {
        java.util.Map<String, Object> connections = new java.util.HashMap<String, Object>();
            connections.put("conn_tMSSqlConnection_3", globalMap.get("conn_tMSSqlConnection_3"));






        return connections;
    }

    private void evalParam(String arg) {
        if (arg.startsWith("--resuming_logs_dir_path")) {
            resuming_logs_dir_path = arg.substring(25);
        } else if (arg.startsWith("--resuming_checkpoint_path")) {
            resuming_checkpoint_path = arg.substring(27);
        } else if (arg.startsWith("--parent_part_launcher")) {
            parent_part_launcher = arg.substring(23);
        } else if (arg.startsWith("--watch")) {
            watch = true;
        } else if (arg.startsWith("--stat_port=")) {
            String portStatsStr = arg.substring(12);
            if (portStatsStr != null && !portStatsStr.equals("null")) {
                portStats = Integer.parseInt(portStatsStr);
            }
        } else if (arg.startsWith("--trace_port=")) {
            portTraces = Integer.parseInt(arg.substring(13));
        } else if (arg.startsWith("--client_host=")) {
            clientHost = arg.substring(14);
        } else if (arg.startsWith("--context=")) {
            contextStr = arg.substring(10);
            isDefaultContext = false;
        } else if (arg.startsWith("--father_pid=")) {
            fatherPid = arg.substring(13);
        } else if (arg.startsWith("--root_pid=")) {
            rootPid = arg.substring(11);
        } else if (arg.startsWith("--father_node=")) {
            fatherNode = arg.substring(14);
        } else if (arg.startsWith("--pid=")) {
            pid = arg.substring(6);
        } else if (arg.startsWith("--context_type")) {
            String keyValue = arg.substring(15);
			int index = -1;
            if (keyValue != null && (index = keyValue.indexOf('=')) > -1) {
                if (fatherPid==null) {
                    context_param.setContextType(keyValue.substring(0, index), replaceEscapeChars(keyValue.substring(index + 1)));
                } else { // the subjob won't escape the especial chars
                    context_param.setContextType(keyValue.substring(0, index), keyValue.substring(index + 1) );
                }

            }

		} else if (arg.startsWith("--context_param")) {
            String keyValue = arg.substring(16);
            int index = -1;
            if (keyValue != null && (index = keyValue.indexOf('=')) > -1) {
                if (fatherPid==null) {
                    context_param.put(keyValue.substring(0, index), replaceEscapeChars(keyValue.substring(index + 1)));
                } else { // the subjob won't escape the especial chars
                    context_param.put(keyValue.substring(0, index), keyValue.substring(index + 1) );
                }
            }
        } else if (arg.startsWith("--log4jLevel=")) {
            log4jLevel = arg.substring(13);
		} else if (arg.startsWith("--audit.enabled") && arg.contains("=")) {//for trunjob call
		    final int equal = arg.indexOf('=');
			final String key = arg.substring("--".length(), equal);
			System.setProperty(key, arg.substring(equal + 1));
		}
    }
    
    private static final String NULL_VALUE_EXPRESSION_IN_COMMAND_STRING_FOR_CHILD_JOB_ONLY = "<TALEND_NULL>";

    private final String[][] escapeChars = {
        {"\\\\","\\"},{"\\n","\n"},{"\\'","\'"},{"\\r","\r"},
        {"\\f","\f"},{"\\b","\b"},{"\\t","\t"}
        };
    private String replaceEscapeChars (String keyValue) {

		if (keyValue == null || ("").equals(keyValue.trim())) {
			return keyValue;
		}

		StringBuilder result = new StringBuilder();
		int currIndex = 0;
		while (currIndex < keyValue.length()) {
			int index = -1;
			// judege if the left string includes escape chars
			for (String[] strArray : escapeChars) {
				index = keyValue.indexOf(strArray[0],currIndex);
				if (index>=0) {

					result.append(keyValue.substring(currIndex, index + strArray[0].length()).replace(strArray[0], strArray[1]));
					currIndex = index + strArray[0].length();
					break;
				}
			}
			// if the left string doesn't include escape chars, append the left into the result
			if (index < 0) {
				result.append(keyValue.substring(currIndex));
				currIndex = currIndex + keyValue.length();
			}
		}

		return result.toString();
    }

    public Integer getErrorCode() {
        return errorCode;
    }


    public String getStatus() {
        return status;
    }

    ResumeUtil resumeUtil = null;
}
/************************************************************************************************
 *     69624 characters generated by Talend Open Studio for Data Integration 
 *     on the November 5, 2020 at 4:40:04 PM CET
 ************************************************************************************************/