// ============================================================================
//
// Copyright (c) 2006-2015, Talend Inc.
//
// This source code has been automatically generated by_Talend Open Studio for Data Integration
// / Licensed under the Apache License, Version 2.0 (the "License");
// you may not use this file except in compliance with the License.
// You may obtain a copy of the License at
// http://www.apache.org/licenses/LICENSE-2.0
// 
// Unless required by applicable law or agreed to in writing, software
// distributed under the License is distributed on an "AS IS" BASIS,
// WITHOUT WARRANTIES OR CONDITIONS OF ANY KIND, either express or implied.
// See the License for the specific language governing permissions and
// limitations under the License.

package wipo_projects.g2b_mig_tm_0_1;

import routines.Numeric;
import routines.DataOperation;
import routines.TalendDataGenerator;
import routines.TalendStringUtil;
import routines.test;
import routines.TalendString;
import routines.StringHandling;
import routines.Relational;
import routines.TalendDate;
import routines.Mathematical;
import routines.IPAS;
import routines.system.*;
import routines.system.api.*;
import java.text.ParseException;
import java.text.SimpleDateFormat;
import java.util.Date;
import java.util.List;
import java.math.BigDecimal;
import java.io.ByteArrayOutputStream;
import java.io.ByteArrayInputStream;
import java.io.DataInputStream;
import java.io.DataOutputStream;
import java.io.ObjectOutputStream;
import java.io.ObjectInputStream;
import java.io.IOException;
import java.util.Comparator;

@SuppressWarnings("unused")

/**
 * Job: G2b_Mig_TM Purpose: alternative to store procedure using talend<br>
 * Description: <br>
 * 
 * @author user@talend.com
 * @version 7.4.1.20201015_1726-M3
 * @status
 */
public class G2b_Mig_TM implements TalendJob {

	protected static void logIgnoredError(String message, Throwable cause) {
		System.err.println(message);
		if (cause != null) {
			cause.printStackTrace();
		}

	}

	public final Object obj = new Object();

	// for transmiting parameters purpose
	private Object valueObject = null;

	public Object getValueObject() {
		return this.valueObject;
	}

	public void setValueObject(Object valueObject) {
		this.valueObject = valueObject;
	}

	private final static String defaultCharset = java.nio.charset.Charset.defaultCharset().name();

	private final static String utf8Charset = "UTF-8";

	// contains type for every context property
	public class PropertiesWithType extends java.util.Properties {
		private static final long serialVersionUID = 1L;
		private java.util.Map<String, String> propertyTypes = new java.util.HashMap<>();

		public PropertiesWithType(java.util.Properties properties) {
			super(properties);
		}

		public PropertiesWithType() {
			super();
		}

		public void setContextType(String key, String type) {
			propertyTypes.put(key, type);
		}

		public String getContextType(String key) {
			return propertyTypes.get(key);
		}
	}

	// create and load default properties
	private java.util.Properties defaultProps = new java.util.Properties();

	// create application properties with default
	public class ContextProperties extends PropertiesWithType {

		private static final long serialVersionUID = 1L;

		public ContextProperties(java.util.Properties properties) {
			super(properties);
		}

		public ContextProperties() {
			super();
		}

		public void synchronizeContext() {

			if (intermediateHost != null) {

				this.setProperty("intermediateHost", intermediateHost.toString());

			}

			if (intermediatePort != null) {

				this.setProperty("intermediatePort", intermediatePort.toString());

			}

			if (intermediateDB != null) {

				this.setProperty("intermediateDB", intermediateDB.toString());

			}

			if (intermediateUser != null) {

				this.setProperty("intermediateUser", intermediateUser.toString());

			}

			if (intermediatePassword != null) {

				this.setProperty("intermediatePassword", intermediatePassword.toString());

			}

			if (ipasHost != null) {

				this.setProperty("ipasHost", ipasHost.toString());

			}

			if (ipasPort != null) {

				this.setProperty("ipasPort", ipasPort.toString());

			}

			if (ipasDB != null) {

				this.setProperty("ipasDB", ipasDB.toString());

			}

			if (ipasUser != null) {

				this.setProperty("ipasUser", ipasUser.toString());

			}

			if (ipasPassword != null) {

				this.setProperty("ipasPassword", ipasPassword.toString());

			}

			if (ipasSaPassword != null) {

				this.setProperty("ipasSaPassword", ipasSaPassword.toString());

			}

			if (processAll != null) {

				this.setProperty("processAll", processAll.toString());

			}

		}

		// if the stored or passed value is "<TALEND_NULL>" string, it mean null
		public String getStringValue(String key) {
			String origin_value = this.getProperty(key);
			if (NULL_VALUE_EXPRESSION_IN_COMMAND_STRING_FOR_CHILD_JOB_ONLY.equals(origin_value)) {
				return null;
			}
			return origin_value;
		}

		public String intermediateHost;

		public String getIntermediateHost() {
			return this.intermediateHost;
		}

		public String intermediatePort;

		public String getIntermediatePort() {
			return this.intermediatePort;
		}

		public String intermediateDB;

		public String getIntermediateDB() {
			return this.intermediateDB;
		}

		public String intermediateUser;

		public String getIntermediateUser() {
			return this.intermediateUser;
		}

		public String intermediatePassword;

		public String getIntermediatePassword() {
			return this.intermediatePassword;
		}

		public String ipasHost;

		public String getIpasHost() {
			return this.ipasHost;
		}

		public String ipasPort;

		public String getIpasPort() {
			return this.ipasPort;
		}

		public String ipasDB;

		public String getIpasDB() {
			return this.ipasDB;
		}

		public String ipasUser;

		public String getIpasUser() {
			return this.ipasUser;
		}

		public String ipasPassword;

		public String getIpasPassword() {
			return this.ipasPassword;
		}

		public String ipasSaPassword;

		public String getIpasSaPassword() {
			return this.ipasSaPassword;
		}

		public String processAll;

		public String getProcessAll() {
			return this.processAll;
		}
	}

	protected ContextProperties context = new ContextProperties(); // will be instanciated by MS.

	public ContextProperties getContext() {
		return this.context;
	}

	private final String jobVersion = "0.1";
	private final String jobName = "G2b_Mig_TM";
	private final String projectName = "WIPO_PROJECTS";
	public Integer errorCode = null;
	private String currentComponent = "";

	private final java.util.Map<String, Object> globalMap = new java.util.HashMap<String, Object>();
	private final static java.util.Map<String, Object> junitGlobalMap = new java.util.HashMap<String, Object>();

	private final java.util.Map<String, Long> start_Hash = new java.util.HashMap<String, Long>();
	private final java.util.Map<String, Long> end_Hash = new java.util.HashMap<String, Long>();
	private final java.util.Map<String, Boolean> ok_Hash = new java.util.HashMap<String, Boolean>();
	public final java.util.List<String[]> globalBuffer = new java.util.ArrayList<String[]>();

	private RunStat runStat = new RunStat();

	// OSGi DataSource
	private final static String KEY_DB_DATASOURCES = "KEY_DB_DATASOURCES";

	private final static String KEY_DB_DATASOURCES_RAW = "KEY_DB_DATASOURCES_RAW";

	public void setDataSources(java.util.Map<String, javax.sql.DataSource> dataSources) {
		java.util.Map<String, routines.system.TalendDataSource> talendDataSources = new java.util.HashMap<String, routines.system.TalendDataSource>();
		for (java.util.Map.Entry<String, javax.sql.DataSource> dataSourceEntry : dataSources.entrySet()) {
			talendDataSources.put(dataSourceEntry.getKey(),
					new routines.system.TalendDataSource(dataSourceEntry.getValue()));
		}
		globalMap.put(KEY_DB_DATASOURCES, talendDataSources);
		globalMap.put(KEY_DB_DATASOURCES_RAW, new java.util.HashMap<String, javax.sql.DataSource>(dataSources));
	}

	StatCatcherUtils tStatCatcher_1 = new StatCatcherUtils("_hyH8cHcZEems4uT2DBR07Q", "0.1");

	private final java.io.ByteArrayOutputStream baos = new java.io.ByteArrayOutputStream();
	private final java.io.PrintStream errorMessagePS = new java.io.PrintStream(new java.io.BufferedOutputStream(baos));

	public String getExceptionStackTrace() {
		if ("failure".equals(this.getStatus())) {
			errorMessagePS.flush();
			return baos.toString();
		}
		return null;
	}

	private Exception exception;

	public Exception getException() {
		if ("failure".equals(this.getStatus())) {
			return this.exception;
		}
		return null;
	}

	private class TalendException extends Exception {

		private static final long serialVersionUID = 1L;

		private java.util.Map<String, Object> globalMap = null;
		private Exception e = null;
		private String currentComponent = null;
		private String virtualComponentName = null;

		public void setVirtualComponentName(String virtualComponentName) {
			this.virtualComponentName = virtualComponentName;
		}

		private TalendException(Exception e, String errorComponent, final java.util.Map<String, Object> globalMap) {
			this.currentComponent = errorComponent;
			this.globalMap = globalMap;
			this.e = e;
		}

		public Exception getException() {
			return this.e;
		}

		public String getCurrentComponent() {
			return this.currentComponent;
		}

		public String getExceptionCauseMessage(Exception e) {
			Throwable cause = e;
			String message = null;
			int i = 10;
			while (null != cause && 0 < i--) {
				message = cause.getMessage();
				if (null == message) {
					cause = cause.getCause();
				} else {
					break;
				}
			}
			if (null == message) {
				message = e.getClass().getName();
			}
			return message;
		}

		@Override
		public void printStackTrace() {
			if (!(e instanceof TalendException || e instanceof TDieException)) {
				if (virtualComponentName != null && currentComponent.indexOf(virtualComponentName + "_") == 0) {
					globalMap.put(virtualComponentName + "_ERROR_MESSAGE", getExceptionCauseMessage(e));
				}
				globalMap.put(currentComponent + "_ERROR_MESSAGE", getExceptionCauseMessage(e));
				System.err.println("Exception in component " + currentComponent + " (" + jobName + ")");
			}
			if (!(e instanceof TDieException)) {
				if (e instanceof TalendException) {
					e.printStackTrace();
				} else {
					e.printStackTrace();
					e.printStackTrace(errorMessagePS);
					G2b_Mig_TM.this.exception = e;
				}
			}
			if (!(e instanceof TalendException)) {
				try {
					for (java.lang.reflect.Method m : this.getClass().getEnclosingClass().getMethods()) {
						if (m.getName().compareTo(currentComponent + "_error") == 0) {
							m.invoke(G2b_Mig_TM.this, new Object[] { e, currentComponent, globalMap });
							break;
						}
					}

					if (!(e instanceof TDieException)) {
					}
				} catch (Exception e) {
					this.e.printStackTrace();
				}
			}
		}
	}

	public void tDBConnection_1_error(Exception exception, String errorComponent,
			final java.util.Map<String, Object> globalMap) throws TalendException {

		end_Hash.put(errorComponent, System.currentTimeMillis());

		tStatCatcher_1.addMessage("failure", errorComponent,
				end_Hash.get(errorComponent) - start_Hash.get(errorComponent));
		tStatCatcher_1Process(globalMap);

		status = "failure";

		tDBConnection_1_onSubJobError(exception, errorComponent, globalMap);
	}

	public void tDBConnection_2_error(Exception exception, String errorComponent,
			final java.util.Map<String, Object> globalMap) throws TalendException {

		end_Hash.put(errorComponent, System.currentTimeMillis());

		tStatCatcher_1.addMessage("failure", errorComponent,
				end_Hash.get(errorComponent) - start_Hash.get(errorComponent));
		tStatCatcher_1Process(globalMap);

		status = "failure";

		tDBConnection_2_onSubJobError(exception, errorComponent, globalMap);
	}

	public void tDBInput_45_error(Exception exception, String errorComponent,
			final java.util.Map<String, Object> globalMap) throws TalendException {

		end_Hash.put(errorComponent, System.currentTimeMillis());

		status = "failure";

		tDBInput_45_onSubJobError(exception, errorComponent, globalMap);
	}

	public void tMap_3_error(Exception exception, String errorComponent, final java.util.Map<String, Object> globalMap)
			throws TalendException {

		end_Hash.put(errorComponent, System.currentTimeMillis());

		status = "failure";

		tDBInput_45_onSubJobError(exception, errorComponent, globalMap);
	}

	public void tDBOutput_3_error(Exception exception, String errorComponent,
			final java.util.Map<String, Object> globalMap) throws TalendException {

		end_Hash.put(errorComponent, System.currentTimeMillis());

		tStatCatcher_1.addMessage("failure", errorComponent,
				end_Hash.get(errorComponent) - start_Hash.get(errorComponent));
		tStatCatcher_1Process(globalMap);

		status = "failure";

		tDBInput_45_onSubJobError(exception, errorComponent, globalMap);
	}

	public void tLogRow_46_error(Exception exception, String errorComponent,
			final java.util.Map<String, Object> globalMap) throws TalendException {

		end_Hash.put(errorComponent, System.currentTimeMillis());

		tStatCatcher_1.addMessage("failure", errorComponent,
				end_Hash.get(errorComponent) - start_Hash.get(errorComponent));
		tStatCatcher_1Process(globalMap);

		status = "failure";

		tDBInput_45_onSubJobError(exception, errorComponent, globalMap);
	}

	public void tDBRow_39_error(Exception exception, String errorComponent,
			final java.util.Map<String, Object> globalMap) throws TalendException {

		end_Hash.put(errorComponent, System.currentTimeMillis());

		status = "failure";

		tDBRow_39_onSubJobError(exception, errorComponent, globalMap);
	}

	public void tDBInput_47_error(Exception exception, String errorComponent,
			final java.util.Map<String, Object> globalMap) throws TalendException {

		end_Hash.put(errorComponent, System.currentTimeMillis());

		status = "failure";

		tDBInput_47_onSubJobError(exception, errorComponent, globalMap);
	}

	public void tMap_15_error(Exception exception, String errorComponent, final java.util.Map<String, Object> globalMap)
			throws TalendException {

		end_Hash.put(errorComponent, System.currentTimeMillis());

		status = "failure";

		tDBInput_47_onSubJobError(exception, errorComponent, globalMap);
	}

	public void tDBOutput_15_error(Exception exception, String errorComponent,
			final java.util.Map<String, Object> globalMap) throws TalendException {

		end_Hash.put(errorComponent, System.currentTimeMillis());

		tStatCatcher_1.addMessage("failure", errorComponent,
				end_Hash.get(errorComponent) - start_Hash.get(errorComponent));
		tStatCatcher_1Process(globalMap);

		status = "failure";

		tDBInput_47_onSubJobError(exception, errorComponent, globalMap);
	}

	public void tLogRow_1_error(Exception exception, String errorComponent,
			final java.util.Map<String, Object> globalMap) throws TalendException {

		end_Hash.put(errorComponent, System.currentTimeMillis());

		status = "failure";

		tDBInput_47_onSubJobError(exception, errorComponent, globalMap);
	}

	public void tDBInput_1_error(Exception exception, String errorComponent,
			final java.util.Map<String, Object> globalMap) throws TalendException {

		end_Hash.put(errorComponent, System.currentTimeMillis());

		status = "failure";

		tDBInput_1_onSubJobError(exception, errorComponent, globalMap);
	}

	public void tMap_1_error(Exception exception, String errorComponent, final java.util.Map<String, Object> globalMap)
			throws TalendException {

		end_Hash.put(errorComponent, System.currentTimeMillis());

		status = "failure";

		tDBInput_1_onSubJobError(exception, errorComponent, globalMap);
	}

	public void tDBOutput_1_error(Exception exception, String errorComponent,
			final java.util.Map<String, Object> globalMap) throws TalendException {

		end_Hash.put(errorComponent, System.currentTimeMillis());

		status = "failure";

		tDBInput_1_onSubJobError(exception, errorComponent, globalMap);
	}

	public void tLogRow_3_error(Exception exception, String errorComponent,
			final java.util.Map<String, Object> globalMap) throws TalendException {

		end_Hash.put(errorComponent, System.currentTimeMillis());

		status = "failure";

		tDBInput_1_onSubJobError(exception, errorComponent, globalMap);
	}

	public void tDBInput_5_error(Exception exception, String errorComponent,
			final java.util.Map<String, Object> globalMap) throws TalendException {

		end_Hash.put(errorComponent, System.currentTimeMillis());

		status = "failure";

		tDBInput_5_onSubJobError(exception, errorComponent, globalMap);
	}

	public void tMap_4_error(Exception exception, String errorComponent, final java.util.Map<String, Object> globalMap)
			throws TalendException {

		end_Hash.put(errorComponent, System.currentTimeMillis());

		status = "failure";

		tDBInput_5_onSubJobError(exception, errorComponent, globalMap);
	}

	public void tDBOutput_4_error(Exception exception, String errorComponent,
			final java.util.Map<String, Object> globalMap) throws TalendException {

		end_Hash.put(errorComponent, System.currentTimeMillis());

		status = "failure";

		tDBInput_5_onSubJobError(exception, errorComponent, globalMap);
	}

	public void tLogRow_4_error(Exception exception, String errorComponent,
			final java.util.Map<String, Object> globalMap) throws TalendException {

		end_Hash.put(errorComponent, System.currentTimeMillis());

		status = "failure";

		tDBInput_5_onSubJobError(exception, errorComponent, globalMap);
	}

	public void tDBInput_15_error(Exception exception, String errorComponent,
			final java.util.Map<String, Object> globalMap) throws TalendException {

		end_Hash.put(errorComponent, System.currentTimeMillis());

		status = "failure";

		tDBInput_15_onSubJobError(exception, errorComponent, globalMap);
	}

	public void tMap_5_error(Exception exception, String errorComponent, final java.util.Map<String, Object> globalMap)
			throws TalendException {

		end_Hash.put(errorComponent, System.currentTimeMillis());

		status = "failure";

		tDBInput_15_onSubJobError(exception, errorComponent, globalMap);
	}

	public void tDBOutput_5_error(Exception exception, String errorComponent,
			final java.util.Map<String, Object> globalMap) throws TalendException {

		end_Hash.put(errorComponent, System.currentTimeMillis());

		status = "failure";

		tDBInput_15_onSubJobError(exception, errorComponent, globalMap);
	}

	public void tLogRow_5_error(Exception exception, String errorComponent,
			final java.util.Map<String, Object> globalMap) throws TalendException {

		end_Hash.put(errorComponent, System.currentTimeMillis());

		status = "failure";

		tDBInput_15_onSubJobError(exception, errorComponent, globalMap);
	}

	public void tDBInput_17_error(Exception exception, String errorComponent,
			final java.util.Map<String, Object> globalMap) throws TalendException {

		end_Hash.put(errorComponent, System.currentTimeMillis());

		status = "failure";

		tDBInput_17_onSubJobError(exception, errorComponent, globalMap);
	}

	public void tMap_6_error(Exception exception, String errorComponent, final java.util.Map<String, Object> globalMap)
			throws TalendException {

		end_Hash.put(errorComponent, System.currentTimeMillis());

		status = "failure";

		tDBInput_17_onSubJobError(exception, errorComponent, globalMap);
	}

	public void tDBOutput_6_error(Exception exception, String errorComponent,
			final java.util.Map<String, Object> globalMap) throws TalendException {

		end_Hash.put(errorComponent, System.currentTimeMillis());

		status = "failure";

		tDBInput_17_onSubJobError(exception, errorComponent, globalMap);
	}

	public void tLogRow_6_error(Exception exception, String errorComponent,
			final java.util.Map<String, Object> globalMap) throws TalendException {

		end_Hash.put(errorComponent, System.currentTimeMillis());

		status = "failure";

		tDBInput_17_onSubJobError(exception, errorComponent, globalMap);
	}

	public void tDBRow_1_error(Exception exception, String errorComponent,
			final java.util.Map<String, Object> globalMap) throws TalendException {

		end_Hash.put(errorComponent, System.currentTimeMillis());

		status = "failure";

		tDBRow_1_onSubJobError(exception, errorComponent, globalMap);
	}

	public void tMsgBox_1_error(Exception exception, String errorComponent,
			final java.util.Map<String, Object> globalMap) throws TalendException {

		end_Hash.put(errorComponent, System.currentTimeMillis());

		status = "failure";

		tMsgBox_1_onSubJobError(exception, errorComponent, globalMap);
	}

	public void tDBInput_3_error(Exception exception, String errorComponent,
			final java.util.Map<String, Object> globalMap) throws TalendException {

		end_Hash.put(errorComponent, System.currentTimeMillis());

		status = "failure";

		tDBInput_1_onSubJobError(exception, errorComponent, globalMap);
	}

	public void tDBInput_4_error(Exception exception, String errorComponent,
			final java.util.Map<String, Object> globalMap) throws TalendException {

		end_Hash.put(errorComponent, System.currentTimeMillis());

		status = "failure";

		tDBInput_5_onSubJobError(exception, errorComponent, globalMap);
	}

	public void tDBInput_7_error(Exception exception, String errorComponent,
			final java.util.Map<String, Object> globalMap) throws TalendException {

		end_Hash.put(errorComponent, System.currentTimeMillis());

		status = "failure";

		tDBInput_15_onSubJobError(exception, errorComponent, globalMap);
	}

	public void tDBInput_16_error(Exception exception, String errorComponent,
			final java.util.Map<String, Object> globalMap) throws TalendException {

		end_Hash.put(errorComponent, System.currentTimeMillis());

		status = "failure";

		tDBInput_17_onSubJobError(exception, errorComponent, globalMap);
	}

	public void tDBInput_48_error(Exception exception, String errorComponent,
			final java.util.Map<String, Object> globalMap) throws TalendException {

		end_Hash.put(errorComponent, System.currentTimeMillis());

		status = "failure";

		tDBInput_47_onSubJobError(exception, errorComponent, globalMap);
	}

	public void tStatCatcher_1_error(Exception exception, String errorComponent,
			final java.util.Map<String, Object> globalMap) throws TalendException {

		end_Hash.put(errorComponent, System.currentTimeMillis());

		status = "failure";

		tStatCatcher_1_onSubJobError(exception, errorComponent, globalMap);
	}

	public void tLogRow_22_error(Exception exception, String errorComponent,
			final java.util.Map<String, Object> globalMap) throws TalendException {

		end_Hash.put(errorComponent, System.currentTimeMillis());

		status = "failure";

		tStatCatcher_1_onSubJobError(exception, errorComponent, globalMap);
	}

	public void tAdvancedHash_row7_error(Exception exception, String errorComponent,
			final java.util.Map<String, Object> globalMap) throws TalendException {

		end_Hash.put(errorComponent, System.currentTimeMillis());

		status = "failure";

		tDBInput_1_onSubJobError(exception, errorComponent, globalMap);
	}

	public void tAdvancedHash_row10_error(Exception exception, String errorComponent,
			final java.util.Map<String, Object> globalMap) throws TalendException {

		end_Hash.put(errorComponent, System.currentTimeMillis());

		status = "failure";

		tDBInput_5_onSubJobError(exception, errorComponent, globalMap);
	}

	public void tAdvancedHash_row13_error(Exception exception, String errorComponent,
			final java.util.Map<String, Object> globalMap) throws TalendException {

		end_Hash.put(errorComponent, System.currentTimeMillis());

		status = "failure";

		tDBInput_15_onSubJobError(exception, errorComponent, globalMap);
	}

	public void tAdvancedHash_row16_error(Exception exception, String errorComponent,
			final java.util.Map<String, Object> globalMap) throws TalendException {

		end_Hash.put(errorComponent, System.currentTimeMillis());

		status = "failure";

		tDBInput_17_onSubJobError(exception, errorComponent, globalMap);
	}

	public void tAdvancedHash_row6_error(Exception exception, String errorComponent,
			final java.util.Map<String, Object> globalMap) throws TalendException {

		end_Hash.put(errorComponent, System.currentTimeMillis());

		status = "failure";

		tDBInput_47_onSubJobError(exception, errorComponent, globalMap);
	}

	public void tDBConnection_1_onSubJobError(Exception exception, String errorComponent,
			final java.util.Map<String, Object> globalMap) throws TalendException {

		resumeUtil.addLog("SYSTEM_LOG", "NODE:" + errorComponent, "", Thread.currentThread().getId() + "", "FATAL", "",
				exception.getMessage(), ResumeUtil.getExceptionStackTrace(exception), "");

	}

	public void tDBConnection_2_onSubJobError(Exception exception, String errorComponent,
			final java.util.Map<String, Object> globalMap) throws TalendException {

		resumeUtil.addLog("SYSTEM_LOG", "NODE:" + errorComponent, "", Thread.currentThread().getId() + "", "FATAL", "",
				exception.getMessage(), ResumeUtil.getExceptionStackTrace(exception), "");

	}

	public void tDBInput_45_onSubJobError(Exception exception, String errorComponent,
			final java.util.Map<String, Object> globalMap) throws TalendException {

		resumeUtil.addLog("SYSTEM_LOG", "NODE:" + errorComponent, "", Thread.currentThread().getId() + "", "FATAL", "",
				exception.getMessage(), ResumeUtil.getExceptionStackTrace(exception), "");

	}

	public void tDBRow_39_onSubJobError(Exception exception, String errorComponent,
			final java.util.Map<String, Object> globalMap) throws TalendException {

		resumeUtil.addLog("SYSTEM_LOG", "NODE:" + errorComponent, "", Thread.currentThread().getId() + "", "FATAL", "",
				exception.getMessage(), ResumeUtil.getExceptionStackTrace(exception), "");

	}

	public void tDBInput_47_onSubJobError(Exception exception, String errorComponent,
			final java.util.Map<String, Object> globalMap) throws TalendException {

		resumeUtil.addLog("SYSTEM_LOG", "NODE:" + errorComponent, "", Thread.currentThread().getId() + "", "FATAL", "",
				exception.getMessage(), ResumeUtil.getExceptionStackTrace(exception), "");

	}

	public void tDBInput_1_onSubJobError(Exception exception, String errorComponent,
			final java.util.Map<String, Object> globalMap) throws TalendException {

		resumeUtil.addLog("SYSTEM_LOG", "NODE:" + errorComponent, "", Thread.currentThread().getId() + "", "FATAL", "",
				exception.getMessage(), ResumeUtil.getExceptionStackTrace(exception), "");

	}

	public void tDBInput_5_onSubJobError(Exception exception, String errorComponent,
			final java.util.Map<String, Object> globalMap) throws TalendException {

		resumeUtil.addLog("SYSTEM_LOG", "NODE:" + errorComponent, "", Thread.currentThread().getId() + "", "FATAL", "",
				exception.getMessage(), ResumeUtil.getExceptionStackTrace(exception), "");

	}

	public void tDBInput_15_onSubJobError(Exception exception, String errorComponent,
			final java.util.Map<String, Object> globalMap) throws TalendException {

		resumeUtil.addLog("SYSTEM_LOG", "NODE:" + errorComponent, "", Thread.currentThread().getId() + "", "FATAL", "",
				exception.getMessage(), ResumeUtil.getExceptionStackTrace(exception), "");

	}

	public void tDBInput_17_onSubJobError(Exception exception, String errorComponent,
			final java.util.Map<String, Object> globalMap) throws TalendException {

		resumeUtil.addLog("SYSTEM_LOG", "NODE:" + errorComponent, "", Thread.currentThread().getId() + "", "FATAL", "",
				exception.getMessage(), ResumeUtil.getExceptionStackTrace(exception), "");

	}

	public void tDBRow_1_onSubJobError(Exception exception, String errorComponent,
			final java.util.Map<String, Object> globalMap) throws TalendException {

		resumeUtil.addLog("SYSTEM_LOG", "NODE:" + errorComponent, "", Thread.currentThread().getId() + "", "FATAL", "",
				exception.getMessage(), ResumeUtil.getExceptionStackTrace(exception), "");

	}

	public void tMsgBox_1_onSubJobError(Exception exception, String errorComponent,
			final java.util.Map<String, Object> globalMap) throws TalendException {

		resumeUtil.addLog("SYSTEM_LOG", "NODE:" + errorComponent, "", Thread.currentThread().getId() + "", "FATAL", "",
				exception.getMessage(), ResumeUtil.getExceptionStackTrace(exception), "");

	}

	public void tStatCatcher_1_onSubJobError(Exception exception, String errorComponent,
			final java.util.Map<String, Object> globalMap) throws TalendException {

		resumeUtil.addLog("SYSTEM_LOG", "NODE:" + errorComponent, "", Thread.currentThread().getId() + "", "FATAL", "",
				exception.getMessage(), ResumeUtil.getExceptionStackTrace(exception), "");

	}

	public void tDBConnection_1Process(final java.util.Map<String, Object> globalMap) throws TalendException {
		globalMap.put("tDBConnection_1_SUBPROCESS_STATE", 0);

		final boolean execStat = this.execStat;

		String iterateId = "";

		String currentComponent = "";
		java.util.Map<String, Object> resourceMap = new java.util.HashMap<String, Object>();

		try {
			// TDI-39566 avoid throwing an useless Exception
			boolean resumeIt = true;
			if (globalResumeTicket == false && resumeEntryMethodName != null) {
				String currentMethodName = new java.lang.Exception().getStackTrace()[0].getMethodName();
				resumeIt = resumeEntryMethodName.equals(currentMethodName);
			}
			if (resumeIt || globalResumeTicket) { // start the resume
				globalResumeTicket = true;

				/**
				 * [tDBConnection_1 begin ] start
				 */

				ok_Hash.put("tDBConnection_1", false);
				start_Hash.put("tDBConnection_1", System.currentTimeMillis());

				tStatCatcher_1.addMessage("begin", "tDBConnection_1");
				tStatCatcher_1Process(globalMap);

				currentComponent = "tDBConnection_1";

				int tos_count_tDBConnection_1 = 0;

				String url_tDBConnection_1 = "jdbc:jtds:sqlserver://" + "localhost";
				String port_tDBConnection_1 = "1433";
				String dbname_tDBConnection_1 = "MARCAS_PY";
				if (!"".equals(port_tDBConnection_1)) {
					url_tDBConnection_1 += ":" + "1433";
				}
				if (!"".equals(dbname_tDBConnection_1)) {

					url_tDBConnection_1 += "//" + "MARCAS_PY";
				}

				url_tDBConnection_1 += ";appName=" + projectName + ";" + "";
				String dbUser_tDBConnection_1 = "ADMIN";

				final String decryptedPassword_tDBConnection_1 = routines.system.PasswordEncryptUtil
						.decryptPassword("enc:routine.encryption.key.v1:F5zWB9jpuAvrrAFtmwIsIAgvycXrGHFR8oBmvv9P9JqS");
				String dbPwd_tDBConnection_1 = decryptedPassword_tDBConnection_1;

				java.sql.Connection conn_tDBConnection_1 = null;

				String driverClass_tDBConnection_1 = "net.sourceforge.jtds.jdbc.Driver";
				java.lang.Class jdbcclazz_tDBConnection_1 = java.lang.Class.forName(driverClass_tDBConnection_1);
				globalMap.put("driverClass_tDBConnection_1", driverClass_tDBConnection_1);

				conn_tDBConnection_1 = java.sql.DriverManager.getConnection(url_tDBConnection_1, dbUser_tDBConnection_1,
						dbPwd_tDBConnection_1);

				globalMap.put("conn_tDBConnection_1", conn_tDBConnection_1);
				if (null != conn_tDBConnection_1) {

					conn_tDBConnection_1.setAutoCommit(true);
				}

				globalMap.put("dbschema_tDBConnection_1", "ADMIN");

				globalMap.put("db_tDBConnection_1", "MARCAS_PY");

				globalMap.put("shareIdentitySetting_tDBConnection_1", false);

				globalMap.put("driver_tDBConnection_1", "JTDS");

				/**
				 * [tDBConnection_1 begin ] stop
				 */

				/**
				 * [tDBConnection_1 main ] start
				 */

				currentComponent = "tDBConnection_1";

				tos_count_tDBConnection_1++;

				/**
				 * [tDBConnection_1 main ] stop
				 */

				/**
				 * [tDBConnection_1 process_data_begin ] start
				 */

				currentComponent = "tDBConnection_1";

				/**
				 * [tDBConnection_1 process_data_begin ] stop
				 */

				/**
				 * [tDBConnection_1 process_data_end ] start
				 */

				currentComponent = "tDBConnection_1";

				/**
				 * [tDBConnection_1 process_data_end ] stop
				 */

				/**
				 * [tDBConnection_1 end ] start
				 */

				currentComponent = "tDBConnection_1";

				ok_Hash.put("tDBConnection_1", true);
				end_Hash.put("tDBConnection_1", System.currentTimeMillis());

				tStatCatcher_1.addMessage("end", "tDBConnection_1",
						end_Hash.get("tDBConnection_1") - start_Hash.get("tDBConnection_1"));
				tStatCatcher_1Process(globalMap);

				/**
				 * [tDBConnection_1 end ] stop
				 */
			} // end the resume

			if (resumeEntryMethodName == null || globalResumeTicket) {
				resumeUtil.addLog("CHECKPOINT", "CONNECTION:SUBJOB_OK:tDBConnection_1:OnSubjobOk", "",
						Thread.currentThread().getId() + "", "", "", "", "", "");
			}

			if (execStat) {
				runStat.updateStatOnConnection("OnSubjobOk1", 0, "ok");
			}

			tDBConnection_2Process(globalMap);

		} catch (java.lang.Exception e) {

			TalendException te = new TalendException(e, currentComponent, globalMap);

			throw te;
		} catch (java.lang.Error error) {

			runStat.stopThreadStat();

			throw error;
		} finally {

			try {

				/**
				 * [tDBConnection_1 finally ] start
				 */

				currentComponent = "tDBConnection_1";

				/**
				 * [tDBConnection_1 finally ] stop
				 */
			} catch (java.lang.Exception e) {
				// ignore
			} catch (java.lang.Error error) {
				// ignore
			}
			resourceMap = null;
		}

		globalMap.put("tDBConnection_1_SUBPROCESS_STATE", 1);
	}

	public void tDBConnection_2Process(final java.util.Map<String, Object> globalMap) throws TalendException {
		globalMap.put("tDBConnection_2_SUBPROCESS_STATE", 0);

		final boolean execStat = this.execStat;

		String iterateId = "";

		String currentComponent = "";
		java.util.Map<String, Object> resourceMap = new java.util.HashMap<String, Object>();

		try {
			// TDI-39566 avoid throwing an useless Exception
			boolean resumeIt = true;
			if (globalResumeTicket == false && resumeEntryMethodName != null) {
				String currentMethodName = new java.lang.Exception().getStackTrace()[0].getMethodName();
				resumeIt = resumeEntryMethodName.equals(currentMethodName);
			}
			if (resumeIt || globalResumeTicket) { // start the resume
				globalResumeTicket = true;

				/**
				 * [tDBConnection_2 begin ] start
				 */

				ok_Hash.put("tDBConnection_2", false);
				start_Hash.put("tDBConnection_2", System.currentTimeMillis());

				tStatCatcher_1.addMessage("begin", "tDBConnection_2");
				tStatCatcher_1Process(globalMap);

				currentComponent = "tDBConnection_2";

				int tos_count_tDBConnection_2 = 0;

				String url_tDBConnection_2 = "jdbc:jtds:sqlserver://" + "localhost";
				String port_tDBConnection_2 = "1433";
				String dbname_tDBConnection_2 = "PY_INTERMED";
				if (!"".equals(port_tDBConnection_2)) {
					url_tDBConnection_2 += ":" + "1433";
				}
				if (!"".equals(dbname_tDBConnection_2)) {

					url_tDBConnection_2 += "//" + "PY_INTERMED";
				}

				url_tDBConnection_2 += ";appName=" + projectName + ";" + "";
				String dbUser_tDBConnection_2 = "sa";

				final String decryptedPassword_tDBConnection_2 = routines.system.PasswordEncryptUtil.decryptPassword(
						"enc:routine.encryption.key.v1:AkQA679cNHhkobH9GTolyg9oKC3MMKsOKh406AusV9vRtnmE");
				String dbPwd_tDBConnection_2 = decryptedPassword_tDBConnection_2;

				java.sql.Connection conn_tDBConnection_2 = null;

				String driverClass_tDBConnection_2 = "net.sourceforge.jtds.jdbc.Driver";
				java.lang.Class jdbcclazz_tDBConnection_2 = java.lang.Class.forName(driverClass_tDBConnection_2);
				globalMap.put("driverClass_tDBConnection_2", driverClass_tDBConnection_2);

				conn_tDBConnection_2 = java.sql.DriverManager.getConnection(url_tDBConnection_2, dbUser_tDBConnection_2,
						dbPwd_tDBConnection_2);

				globalMap.put("conn_tDBConnection_2", conn_tDBConnection_2);
				if (null != conn_tDBConnection_2) {

					conn_tDBConnection_2.setAutoCommit(true);
				}

				globalMap.put("dbschema_tDBConnection_2", "dbo");

				globalMap.put("db_tDBConnection_2", "PY_INTERMED");

				globalMap.put("shareIdentitySetting_tDBConnection_2", false);

				globalMap.put("driver_tDBConnection_2", "JTDS");

				/**
				 * [tDBConnection_2 begin ] stop
				 */

				/**
				 * [tDBConnection_2 main ] start
				 */

				currentComponent = "tDBConnection_2";

				tos_count_tDBConnection_2++;

				/**
				 * [tDBConnection_2 main ] stop
				 */

				/**
				 * [tDBConnection_2 process_data_begin ] start
				 */

				currentComponent = "tDBConnection_2";

				/**
				 * [tDBConnection_2 process_data_begin ] stop
				 */

				/**
				 * [tDBConnection_2 process_data_end ] start
				 */

				currentComponent = "tDBConnection_2";

				/**
				 * [tDBConnection_2 process_data_end ] stop
				 */

				/**
				 * [tDBConnection_2 end ] start
				 */

				currentComponent = "tDBConnection_2";

				ok_Hash.put("tDBConnection_2", true);
				end_Hash.put("tDBConnection_2", System.currentTimeMillis());

				tStatCatcher_1.addMessage("end", "tDBConnection_2",
						end_Hash.get("tDBConnection_2") - start_Hash.get("tDBConnection_2"));
				tStatCatcher_1Process(globalMap);

				/**
				 * [tDBConnection_2 end ] stop
				 */
			} // end the resume

			if (resumeEntryMethodName == null || globalResumeTicket) {
				resumeUtil.addLog("CHECKPOINT", "CONNECTION:SUBJOB_OK:tDBConnection_2:OnSubjobOk", "",
						Thread.currentThread().getId() + "", "", "", "", "", "");
			}

			if (execStat) {
				runStat.updateStatOnConnection("OnSubjobOk2", 0, "ok");
			}

			tDBInput_45Process(globalMap);

		} catch (java.lang.Exception e) {

			TalendException te = new TalendException(e, currentComponent, globalMap);

			throw te;
		} catch (java.lang.Error error) {

			runStat.stopThreadStat();

			throw error;
		} finally {

			try {

				/**
				 * [tDBConnection_2 finally ] start
				 */

				currentComponent = "tDBConnection_2";

				/**
				 * [tDBConnection_2 finally ] stop
				 */
			} catch (java.lang.Exception e) {
				// ignore
			} catch (java.lang.Error error) {
				// ignore
			}
			resourceMap = null;
		}

		globalMap.put("tDBConnection_2_SUBPROCESS_STATE", 1);
	}

	public static class row4Struct implements routines.system.IPersistableRow<row4Struct> {
		final static byte[] commonByteArrayLock_WIPO_PROJECTS_G2b_Mig_TM = new byte[0];
		static byte[] commonByteArray_WIPO_PROJECTS_G2b_Mig_TM = new byte[0];

		public String FILE_SEQ;

		public String getFILE_SEQ() {
			return this.FILE_SEQ;
		}

		public String FILE_TYPE;

		public String getFILE_TYPE() {
			return this.FILE_TYPE;
		}

		public BigDecimal FILE_SERIES;

		public BigDecimal getFILE_SERIES() {
			return this.FILE_SERIES;
		}

		public BigDecimal FILE_NBR;

		public BigDecimal getFILE_NBR() {
			return this.FILE_NBR;
		}

		public String DOC_ORI;

		public String getDOC_ORI() {
			return this.DOC_ORI;
		}

		public BigDecimal DOC_SERIES;

		public BigDecimal getDOC_SERIES() {
			return this.DOC_SERIES;
		}

		public BigDecimal DOC_NBR;

		public BigDecimal getDOC_NBR() {
			return this.DOC_NBR;
		}

		public BigDecimal IND_IMPORT;

		public BigDecimal getIND_IMPORT() {
			return this.IND_IMPORT;
		}

		public String APPLICATION_TYPE;

		public String getAPPLICATION_TYPE() {
			return this.APPLICATION_TYPE;
		}

		public String APPLICATION_SUBTYPE;

		public String getAPPLICATION_SUBTYPE() {
			return this.APPLICATION_SUBTYPE;
		}

		public BigDecimal LAW_CODE;

		public BigDecimal getLAW_CODE() {
			return this.LAW_CODE;
		}

		public java.util.Date FILING_DATE;

		public java.util.Date getFILING_DATE() {
			return this.FILING_DATE;
		}

		public java.util.Date RECEPTION_DATE;

		public java.util.Date getRECEPTION_DATE() {
			return this.RECEPTION_DATE;
		}

		public java.util.Date PUBLICATION_DATE;

		public java.util.Date getPUBLICATION_DATE() {
			return this.PUBLICATION_DATE;
		}

		public String PUBLICATION_NOTES;

		public String getPUBLICATION_NOTES() {
			return this.PUBLICATION_NOTES;
		}

		public BigDecimal IND_REGISTERED;

		public BigDecimal getIND_REGISTERED() {
			return this.IND_REGISTERED;
		}

		public String REGISTRATION_TYPE;

		public String getREGISTRATION_TYPE() {
			return this.REGISTRATION_TYPE;
		}

		public BigDecimal REGISTRATION_SERIES;

		public BigDecimal getREGISTRATION_SERIES() {
			return this.REGISTRATION_SERIES;
		}

		public BigDecimal REGISTRATION_NBR;

		public BigDecimal getREGISTRATION_NBR() {
			return this.REGISTRATION_NBR;
		}

		public String REGISTRATION_DUP;

		public String getREGISTRATION_DUP() {
			return this.REGISTRATION_DUP;
		}

		public java.util.Date REGISTRATION_DATE;

		public java.util.Date getREGISTRATION_DATE() {
			return this.REGISTRATION_DATE;
		}

		public java.util.Date ENTITLEMENT_DATE;

		public java.util.Date getENTITLEMENT_DATE() {
			return this.ENTITLEMENT_DATE;
		}

		public java.util.Date EXPIRATION_DATE;

		public java.util.Date getEXPIRATION_DATE() {
			return this.EXPIRATION_DATE;
		}

		public java.util.Date EXHIBITION_DATE;

		public java.util.Date getEXHIBITION_DATE() {
			return this.EXHIBITION_DATE;
		}

		public String EXHIBITION_NOTES;

		public String getEXHIBITION_NOTES() {
			return this.EXHIBITION_NOTES;
		}

		public String SIGN_TYPE;

		public String getSIGN_TYPE() {
			return this.SIGN_TYPE;
		}

		public String MARK_NAME;

		public String getMARK_NAME() {
			return this.MARK_NAME;
		}

		public String MARK_NAME_LANG2;

		public String getMARK_NAME_LANG2() {
			return this.MARK_NAME_LANG2;
		}

		public String MARK_TRANSLATION;

		public String getMARK_TRANSLATION() {
			return this.MARK_TRANSLATION;
		}

		public String MARK_TRANSLATION_LANG2;

		public String getMARK_TRANSLATION_LANG2() {
			return this.MARK_TRANSLATION_LANG2;
		}

		public String MARK_TRANSLITERATION;

		public String getMARK_TRANSLITERATION() {
			return this.MARK_TRANSLITERATION;
		}

		public String MARK_TRANSLITERATION_LANG2;

		public String getMARK_TRANSLITERATION_LANG2() {
			return this.MARK_TRANSLITERATION_LANG2;
		}

		public String SERIES_DESCRIPTION;

		public String getSERIES_DESCRIPTION() {
			return this.SERIES_DESCRIPTION;
		}

		public String COLOUR_DESCRIPTION;

		public String getCOLOUR_DESCRIPTION() {
			return this.COLOUR_DESCRIPTION;
		}

		public String COLOUR_DESCR_LANG2;

		public String getCOLOUR_DESCR_LANG2() {
			return this.COLOUR_DESCR_LANG2;
		}

		public String DISCLAIMER;

		public String getDISCLAIMER() {
			return this.DISCLAIMER;
		}

		public String DISCLAIMER_LANG2;

		public String getDISCLAIMER_LANG2() {
			return this.DISCLAIMER_LANG2;
		}

		public String BY_CONSENT;

		public String getBY_CONSENT() {
			return this.BY_CONSENT;
		}

		public String REGULATIONS;

		public String getREGULATIONS() {
			return this.REGULATIONS;
		}

		public String NOTES;

		public String getNOTES() {
			return this.NOTES;
		}

		public BigDecimal CAPTURE_USER_ID;

		public BigDecimal getCAPTURE_USER_ID() {
			return this.CAPTURE_USER_ID;
		}

		public java.util.Date CAPTURE_DATE;

		public java.util.Date getCAPTURE_DATE() {
			return this.CAPTURE_DATE;
		}

		public BigDecimal PUBLICATION_NBR;

		public BigDecimal getPUBLICATION_NBR() {
			return this.PUBLICATION_NBR;
		}

		public String PUBLICATION_SER;

		public String getPUBLICATION_SER() {
			return this.PUBLICATION_SER;
		}

		public String PUBLICATION_TYP;

		public String getPUBLICATION_TYP() {
			return this.PUBLICATION_TYP;
		}

		public java.util.Date FIRST_PRIORITY_DATE;

		public java.util.Date getFIRST_PRIORITY_DATE() {
			return this.FIRST_PRIORITY_DATE;
		}

		public BigDecimal MAIN_OWNER_ADDR_NBR;

		public BigDecimal getMAIN_OWNER_ADDR_NBR() {
			return this.MAIN_OWNER_ADDR_NBR;
		}

		public BigDecimal MAIN_OWNER_PERSON_NBR;

		public BigDecimal getMAIN_OWNER_PERSON_NBR() {
			return this.MAIN_OWNER_PERSON_NBR;
		}

		public BigDecimal SERVICE_ADDR_NBR;

		public BigDecimal getSERVICE_ADDR_NBR() {
			return this.SERVICE_ADDR_NBR;
		}

		public BigDecimal SERVICE_PERSON_NBR;

		public BigDecimal getSERVICE_PERSON_NBR() {
			return this.SERVICE_PERSON_NBR;
		}

		public String NICE_CLASS_TXT;

		public String getNICE_CLASS_TXT() {
			return this.NICE_CLASS_TXT;
		}

		public BigDecimal MARK_CODE;

		public BigDecimal getMARK_CODE() {
			return this.MARK_CODE;
		}

		public String PROC_TYP;

		public String getPROC_TYP() {
			return this.PROC_TYP;
		}

		public BigDecimal PROC_NBR;

		public BigDecimal getPROC_NBR() {
			return this.PROC_NBR;
		}

		public String STATUS_CODE;

		public String getSTATUS_CODE() {
			return this.STATUS_CODE;
		}

		public String errorCode;

		public String getErrorCode() {
			return this.errorCode;
		}

		public String errorMessage;

		public String getErrorMessage() {
			return this.errorMessage;
		}

		private String readString(ObjectInputStream dis) throws IOException {
			String strReturn = null;
			int length = 0;
			length = dis.readInt();
			if (length == -1) {
				strReturn = null;
			} else {
				if (length > commonByteArray_WIPO_PROJECTS_G2b_Mig_TM.length) {
					if (length < 1024 && commonByteArray_WIPO_PROJECTS_G2b_Mig_TM.length == 0) {
						commonByteArray_WIPO_PROJECTS_G2b_Mig_TM = new byte[1024];
					} else {
						commonByteArray_WIPO_PROJECTS_G2b_Mig_TM = new byte[2 * length];
					}
				}
				dis.readFully(commonByteArray_WIPO_PROJECTS_G2b_Mig_TM, 0, length);
				strReturn = new String(commonByteArray_WIPO_PROJECTS_G2b_Mig_TM, 0, length, utf8Charset);
			}
			return strReturn;
		}

		private void writeString(String str, ObjectOutputStream dos) throws IOException {
			if (str == null) {
				dos.writeInt(-1);
			} else {
				byte[] byteArray = str.getBytes(utf8Charset);
				dos.writeInt(byteArray.length);
				dos.write(byteArray);
			}
		}

		private java.util.Date readDate(ObjectInputStream dis) throws IOException {
			java.util.Date dateReturn = null;
			int length = 0;
			length = dis.readByte();
			if (length == -1) {
				dateReturn = null;
			} else {
				dateReturn = new Date(dis.readLong());
			}
			return dateReturn;
		}

		private void writeDate(java.util.Date date1, ObjectOutputStream dos) throws IOException {
			if (date1 == null) {
				dos.writeByte(-1);
			} else {
				dos.writeByte(0);
				dos.writeLong(date1.getTime());
			}
		}

		public void readData(ObjectInputStream dis) {

			synchronized (commonByteArrayLock_WIPO_PROJECTS_G2b_Mig_TM) {

				try {

					int length = 0;

					this.FILE_SEQ = readString(dis);

					this.FILE_TYPE = readString(dis);

					this.FILE_SERIES = (BigDecimal) dis.readObject();

					this.FILE_NBR = (BigDecimal) dis.readObject();

					this.DOC_ORI = readString(dis);

					this.DOC_SERIES = (BigDecimal) dis.readObject();

					this.DOC_NBR = (BigDecimal) dis.readObject();

					this.IND_IMPORT = (BigDecimal) dis.readObject();

					this.APPLICATION_TYPE = readString(dis);

					this.APPLICATION_SUBTYPE = readString(dis);

					this.LAW_CODE = (BigDecimal) dis.readObject();

					this.FILING_DATE = readDate(dis);

					this.RECEPTION_DATE = readDate(dis);

					this.PUBLICATION_DATE = readDate(dis);

					this.PUBLICATION_NOTES = readString(dis);

					this.IND_REGISTERED = (BigDecimal) dis.readObject();

					this.REGISTRATION_TYPE = readString(dis);

					this.REGISTRATION_SERIES = (BigDecimal) dis.readObject();

					this.REGISTRATION_NBR = (BigDecimal) dis.readObject();

					this.REGISTRATION_DUP = readString(dis);

					this.REGISTRATION_DATE = readDate(dis);

					this.ENTITLEMENT_DATE = readDate(dis);

					this.EXPIRATION_DATE = readDate(dis);

					this.EXHIBITION_DATE = readDate(dis);

					this.EXHIBITION_NOTES = readString(dis);

					this.SIGN_TYPE = readString(dis);

					this.MARK_NAME = readString(dis);

					this.MARK_NAME_LANG2 = readString(dis);

					this.MARK_TRANSLATION = readString(dis);

					this.MARK_TRANSLATION_LANG2 = readString(dis);

					this.MARK_TRANSLITERATION = readString(dis);

					this.MARK_TRANSLITERATION_LANG2 = readString(dis);

					this.SERIES_DESCRIPTION = readString(dis);

					this.COLOUR_DESCRIPTION = readString(dis);

					this.COLOUR_DESCR_LANG2 = readString(dis);

					this.DISCLAIMER = readString(dis);

					this.DISCLAIMER_LANG2 = readString(dis);

					this.BY_CONSENT = readString(dis);

					this.REGULATIONS = readString(dis);

					this.NOTES = readString(dis);

					this.CAPTURE_USER_ID = (BigDecimal) dis.readObject();

					this.CAPTURE_DATE = readDate(dis);

					this.PUBLICATION_NBR = (BigDecimal) dis.readObject();

					this.PUBLICATION_SER = readString(dis);

					this.PUBLICATION_TYP = readString(dis);

					this.FIRST_PRIORITY_DATE = readDate(dis);

					this.MAIN_OWNER_ADDR_NBR = (BigDecimal) dis.readObject();

					this.MAIN_OWNER_PERSON_NBR = (BigDecimal) dis.readObject();

					this.SERVICE_ADDR_NBR = (BigDecimal) dis.readObject();

					this.SERVICE_PERSON_NBR = (BigDecimal) dis.readObject();

					this.NICE_CLASS_TXT = readString(dis);

					this.MARK_CODE = (BigDecimal) dis.readObject();

					this.PROC_TYP = readString(dis);

					this.PROC_NBR = (BigDecimal) dis.readObject();

					this.STATUS_CODE = readString(dis);

					this.errorCode = readString(dis);

					this.errorMessage = readString(dis);

				} catch (IOException e) {
					throw new RuntimeException(e);

				} catch (ClassNotFoundException eCNFE) {
					throw new RuntimeException(eCNFE);

				}

			}

		}

		public void writeData(ObjectOutputStream dos) {
			try {

				// String

				writeString(this.FILE_SEQ, dos);

				// String

				writeString(this.FILE_TYPE, dos);

				// BigDecimal

				dos.writeObject(this.FILE_SERIES);

				// BigDecimal

				dos.writeObject(this.FILE_NBR);

				// String

				writeString(this.DOC_ORI, dos);

				// BigDecimal

				dos.writeObject(this.DOC_SERIES);

				// BigDecimal

				dos.writeObject(this.DOC_NBR);

				// BigDecimal

				dos.writeObject(this.IND_IMPORT);

				// String

				writeString(this.APPLICATION_TYPE, dos);

				// String

				writeString(this.APPLICATION_SUBTYPE, dos);

				// BigDecimal

				dos.writeObject(this.LAW_CODE);

				// java.util.Date

				writeDate(this.FILING_DATE, dos);

				// java.util.Date

				writeDate(this.RECEPTION_DATE, dos);

				// java.util.Date

				writeDate(this.PUBLICATION_DATE, dos);

				// String

				writeString(this.PUBLICATION_NOTES, dos);

				// BigDecimal

				dos.writeObject(this.IND_REGISTERED);

				// String

				writeString(this.REGISTRATION_TYPE, dos);

				// BigDecimal

				dos.writeObject(this.REGISTRATION_SERIES);

				// BigDecimal

				dos.writeObject(this.REGISTRATION_NBR);

				// String

				writeString(this.REGISTRATION_DUP, dos);

				// java.util.Date

				writeDate(this.REGISTRATION_DATE, dos);

				// java.util.Date

				writeDate(this.ENTITLEMENT_DATE, dos);

				// java.util.Date

				writeDate(this.EXPIRATION_DATE, dos);

				// java.util.Date

				writeDate(this.EXHIBITION_DATE, dos);

				// String

				writeString(this.EXHIBITION_NOTES, dos);

				// String

				writeString(this.SIGN_TYPE, dos);

				// String

				writeString(this.MARK_NAME, dos);

				// String

				writeString(this.MARK_NAME_LANG2, dos);

				// String

				writeString(this.MARK_TRANSLATION, dos);

				// String

				writeString(this.MARK_TRANSLATION_LANG2, dos);

				// String

				writeString(this.MARK_TRANSLITERATION, dos);

				// String

				writeString(this.MARK_TRANSLITERATION_LANG2, dos);

				// String

				writeString(this.SERIES_DESCRIPTION, dos);

				// String

				writeString(this.COLOUR_DESCRIPTION, dos);

				// String

				writeString(this.COLOUR_DESCR_LANG2, dos);

				// String

				writeString(this.DISCLAIMER, dos);

				// String

				writeString(this.DISCLAIMER_LANG2, dos);

				// String

				writeString(this.BY_CONSENT, dos);

				// String

				writeString(this.REGULATIONS, dos);

				// String

				writeString(this.NOTES, dos);

				// BigDecimal

				dos.writeObject(this.CAPTURE_USER_ID);

				// java.util.Date

				writeDate(this.CAPTURE_DATE, dos);

				// BigDecimal

				dos.writeObject(this.PUBLICATION_NBR);

				// String

				writeString(this.PUBLICATION_SER, dos);

				// String

				writeString(this.PUBLICATION_TYP, dos);

				// java.util.Date

				writeDate(this.FIRST_PRIORITY_DATE, dos);

				// BigDecimal

				dos.writeObject(this.MAIN_OWNER_ADDR_NBR);

				// BigDecimal

				dos.writeObject(this.MAIN_OWNER_PERSON_NBR);

				// BigDecimal

				dos.writeObject(this.SERVICE_ADDR_NBR);

				// BigDecimal

				dos.writeObject(this.SERVICE_PERSON_NBR);

				// String

				writeString(this.NICE_CLASS_TXT, dos);

				// BigDecimal

				dos.writeObject(this.MARK_CODE);

				// String

				writeString(this.PROC_TYP, dos);

				// BigDecimal

				dos.writeObject(this.PROC_NBR);

				// String

				writeString(this.STATUS_CODE, dos);

				// String

				writeString(this.errorCode, dos);

				// String

				writeString(this.errorMessage, dos);

			} catch (IOException e) {
				throw new RuntimeException(e);
			}

		}

		public String toString() {

			StringBuilder sb = new StringBuilder();
			sb.append(super.toString());
			sb.append("[");
			sb.append("FILE_SEQ=" + FILE_SEQ);
			sb.append(",FILE_TYPE=" + FILE_TYPE);
			sb.append(",FILE_SERIES=" + String.valueOf(FILE_SERIES));
			sb.append(",FILE_NBR=" + String.valueOf(FILE_NBR));
			sb.append(",DOC_ORI=" + DOC_ORI);
			sb.append(",DOC_SERIES=" + String.valueOf(DOC_SERIES));
			sb.append(",DOC_NBR=" + String.valueOf(DOC_NBR));
			sb.append(",IND_IMPORT=" + String.valueOf(IND_IMPORT));
			sb.append(",APPLICATION_TYPE=" + APPLICATION_TYPE);
			sb.append(",APPLICATION_SUBTYPE=" + APPLICATION_SUBTYPE);
			sb.append(",LAW_CODE=" + String.valueOf(LAW_CODE));
			sb.append(",FILING_DATE=" + String.valueOf(FILING_DATE));
			sb.append(",RECEPTION_DATE=" + String.valueOf(RECEPTION_DATE));
			sb.append(",PUBLICATION_DATE=" + String.valueOf(PUBLICATION_DATE));
			sb.append(",PUBLICATION_NOTES=" + PUBLICATION_NOTES);
			sb.append(",IND_REGISTERED=" + String.valueOf(IND_REGISTERED));
			sb.append(",REGISTRATION_TYPE=" + REGISTRATION_TYPE);
			sb.append(",REGISTRATION_SERIES=" + String.valueOf(REGISTRATION_SERIES));
			sb.append(",REGISTRATION_NBR=" + String.valueOf(REGISTRATION_NBR));
			sb.append(",REGISTRATION_DUP=" + REGISTRATION_DUP);
			sb.append(",REGISTRATION_DATE=" + String.valueOf(REGISTRATION_DATE));
			sb.append(",ENTITLEMENT_DATE=" + String.valueOf(ENTITLEMENT_DATE));
			sb.append(",EXPIRATION_DATE=" + String.valueOf(EXPIRATION_DATE));
			sb.append(",EXHIBITION_DATE=" + String.valueOf(EXHIBITION_DATE));
			sb.append(",EXHIBITION_NOTES=" + EXHIBITION_NOTES);
			sb.append(",SIGN_TYPE=" + SIGN_TYPE);
			sb.append(",MARK_NAME=" + MARK_NAME);
			sb.append(",MARK_NAME_LANG2=" + MARK_NAME_LANG2);
			sb.append(",MARK_TRANSLATION=" + MARK_TRANSLATION);
			sb.append(",MARK_TRANSLATION_LANG2=" + MARK_TRANSLATION_LANG2);
			sb.append(",MARK_TRANSLITERATION=" + MARK_TRANSLITERATION);
			sb.append(",MARK_TRANSLITERATION_LANG2=" + MARK_TRANSLITERATION_LANG2);
			sb.append(",SERIES_DESCRIPTION=" + SERIES_DESCRIPTION);
			sb.append(",COLOUR_DESCRIPTION=" + COLOUR_DESCRIPTION);
			sb.append(",COLOUR_DESCR_LANG2=" + COLOUR_DESCR_LANG2);
			sb.append(",DISCLAIMER=" + DISCLAIMER);
			sb.append(",DISCLAIMER_LANG2=" + DISCLAIMER_LANG2);
			sb.append(",BY_CONSENT=" + BY_CONSENT);
			sb.append(",REGULATIONS=" + REGULATIONS);
			sb.append(",NOTES=" + NOTES);
			sb.append(",CAPTURE_USER_ID=" + String.valueOf(CAPTURE_USER_ID));
			sb.append(",CAPTURE_DATE=" + String.valueOf(CAPTURE_DATE));
			sb.append(",PUBLICATION_NBR=" + String.valueOf(PUBLICATION_NBR));
			sb.append(",PUBLICATION_SER=" + PUBLICATION_SER);
			sb.append(",PUBLICATION_TYP=" + PUBLICATION_TYP);
			sb.append(",FIRST_PRIORITY_DATE=" + String.valueOf(FIRST_PRIORITY_DATE));
			sb.append(",MAIN_OWNER_ADDR_NBR=" + String.valueOf(MAIN_OWNER_ADDR_NBR));
			sb.append(",MAIN_OWNER_PERSON_NBR=" + String.valueOf(MAIN_OWNER_PERSON_NBR));
			sb.append(",SERVICE_ADDR_NBR=" + String.valueOf(SERVICE_ADDR_NBR));
			sb.append(",SERVICE_PERSON_NBR=" + String.valueOf(SERVICE_PERSON_NBR));
			sb.append(",NICE_CLASS_TXT=" + NICE_CLASS_TXT);
			sb.append(",MARK_CODE=" + String.valueOf(MARK_CODE));
			sb.append(",PROC_TYP=" + PROC_TYP);
			sb.append(",PROC_NBR=" + String.valueOf(PROC_NBR));
			sb.append(",STATUS_CODE=" + STATUS_CODE);
			sb.append(",errorCode=" + errorCode);
			sb.append(",errorMessage=" + errorMessage);
			sb.append("]");

			return sb.toString();
		}

		/**
		 * Compare keys
		 */
		public int compareTo(row4Struct other) {

			int returnValue = -1;

			return returnValue;
		}

		private int checkNullsAndCompare(Object object1, Object object2) {
			int returnValue = 0;
			if (object1 instanceof Comparable && object2 instanceof Comparable) {
				returnValue = ((Comparable) object1).compareTo(object2);
			} else if (object1 != null && object2 != null) {
				returnValue = compareStrings(object1.toString(), object2.toString());
			} else if (object1 == null && object2 != null) {
				returnValue = 1;
			} else if (object1 != null && object2 == null) {
				returnValue = -1;
			} else {
				returnValue = 0;
			}

			return returnValue;
		}

		private int compareStrings(String string1, String string2) {
			return string1.compareTo(string2);
		}

	}

	public static class to_wrk_mStruct implements routines.system.IPersistableRow<to_wrk_mStruct> {
		final static byte[] commonByteArrayLock_WIPO_PROJECTS_G2b_Mig_TM = new byte[0];
		static byte[] commonByteArray_WIPO_PROJECTS_G2b_Mig_TM = new byte[0];

		public String FILE_SEQ;

		public String getFILE_SEQ() {
			return this.FILE_SEQ;
		}

		public String FILE_TYPE;

		public String getFILE_TYPE() {
			return this.FILE_TYPE;
		}

		public BigDecimal FILE_SERIES;

		public BigDecimal getFILE_SERIES() {
			return this.FILE_SERIES;
		}

		public BigDecimal FILE_NBR;

		public BigDecimal getFILE_NBR() {
			return this.FILE_NBR;
		}

		public String DOC_ORI;

		public String getDOC_ORI() {
			return this.DOC_ORI;
		}

		public BigDecimal DOC_SERIES;

		public BigDecimal getDOC_SERIES() {
			return this.DOC_SERIES;
		}

		public BigDecimal DOC_NBR;

		public BigDecimal getDOC_NBR() {
			return this.DOC_NBR;
		}

		public BigDecimal IND_IMPORT;

		public BigDecimal getIND_IMPORT() {
			return this.IND_IMPORT;
		}

		public String APPLICATION_TYPE;

		public String getAPPLICATION_TYPE() {
			return this.APPLICATION_TYPE;
		}

		public String APPLICATION_SUBTYPE;

		public String getAPPLICATION_SUBTYPE() {
			return this.APPLICATION_SUBTYPE;
		}

		public BigDecimal LAW_CODE;

		public BigDecimal getLAW_CODE() {
			return this.LAW_CODE;
		}

		public java.util.Date FILING_DATE;

		public java.util.Date getFILING_DATE() {
			return this.FILING_DATE;
		}

		public java.util.Date RECEPTION_DATE;

		public java.util.Date getRECEPTION_DATE() {
			return this.RECEPTION_DATE;
		}

		public java.util.Date PUBLICATION_DATE;

		public java.util.Date getPUBLICATION_DATE() {
			return this.PUBLICATION_DATE;
		}

		public String PUBLICATION_NOTES;

		public String getPUBLICATION_NOTES() {
			return this.PUBLICATION_NOTES;
		}

		public BigDecimal IND_REGISTERED;

		public BigDecimal getIND_REGISTERED() {
			return this.IND_REGISTERED;
		}

		public String REGISTRATION_TYPE;

		public String getREGISTRATION_TYPE() {
			return this.REGISTRATION_TYPE;
		}

		public BigDecimal REGISTRATION_SERIES;

		public BigDecimal getREGISTRATION_SERIES() {
			return this.REGISTRATION_SERIES;
		}

		public BigDecimal REGISTRATION_NBR;

		public BigDecimal getREGISTRATION_NBR() {
			return this.REGISTRATION_NBR;
		}

		public String REGISTRATION_DUP;

		public String getREGISTRATION_DUP() {
			return this.REGISTRATION_DUP;
		}

		public java.util.Date REGISTRATION_DATE;

		public java.util.Date getREGISTRATION_DATE() {
			return this.REGISTRATION_DATE;
		}

		public java.util.Date ENTITLEMENT_DATE;

		public java.util.Date getENTITLEMENT_DATE() {
			return this.ENTITLEMENT_DATE;
		}

		public java.util.Date EXPIRATION_DATE;

		public java.util.Date getEXPIRATION_DATE() {
			return this.EXPIRATION_DATE;
		}

		public java.util.Date EXHIBITION_DATE;

		public java.util.Date getEXHIBITION_DATE() {
			return this.EXHIBITION_DATE;
		}

		public String EXHIBITION_NOTES;

		public String getEXHIBITION_NOTES() {
			return this.EXHIBITION_NOTES;
		}

		public String SIGN_TYPE;

		public String getSIGN_TYPE() {
			return this.SIGN_TYPE;
		}

		public String MARK_NAME;

		public String getMARK_NAME() {
			return this.MARK_NAME;
		}

		public String MARK_NAME_LANG2;

		public String getMARK_NAME_LANG2() {
			return this.MARK_NAME_LANG2;
		}

		public String MARK_TRANSLATION;

		public String getMARK_TRANSLATION() {
			return this.MARK_TRANSLATION;
		}

		public String MARK_TRANSLATION_LANG2;

		public String getMARK_TRANSLATION_LANG2() {
			return this.MARK_TRANSLATION_LANG2;
		}

		public String MARK_TRANSLITERATION;

		public String getMARK_TRANSLITERATION() {
			return this.MARK_TRANSLITERATION;
		}

		public String MARK_TRANSLITERATION_LANG2;

		public String getMARK_TRANSLITERATION_LANG2() {
			return this.MARK_TRANSLITERATION_LANG2;
		}

		public String SERIES_DESCRIPTION;

		public String getSERIES_DESCRIPTION() {
			return this.SERIES_DESCRIPTION;
		}

		public String COLOUR_DESCRIPTION;

		public String getCOLOUR_DESCRIPTION() {
			return this.COLOUR_DESCRIPTION;
		}

		public String COLOUR_DESCR_LANG2;

		public String getCOLOUR_DESCR_LANG2() {
			return this.COLOUR_DESCR_LANG2;
		}

		public String DISCLAIMER;

		public String getDISCLAIMER() {
			return this.DISCLAIMER;
		}

		public String DISCLAIMER_LANG2;

		public String getDISCLAIMER_LANG2() {
			return this.DISCLAIMER_LANG2;
		}

		public String BY_CONSENT;

		public String getBY_CONSENT() {
			return this.BY_CONSENT;
		}

		public String REGULATIONS;

		public String getREGULATIONS() {
			return this.REGULATIONS;
		}

		public String NOTES;

		public String getNOTES() {
			return this.NOTES;
		}

		public BigDecimal CAPTURE_USER_ID;

		public BigDecimal getCAPTURE_USER_ID() {
			return this.CAPTURE_USER_ID;
		}

		public java.util.Date CAPTURE_DATE;

		public java.util.Date getCAPTURE_DATE() {
			return this.CAPTURE_DATE;
		}

		public BigDecimal PUBLICATION_NBR;

		public BigDecimal getPUBLICATION_NBR() {
			return this.PUBLICATION_NBR;
		}

		public String PUBLICATION_SER;

		public String getPUBLICATION_SER() {
			return this.PUBLICATION_SER;
		}

		public String PUBLICATION_TYP;

		public String getPUBLICATION_TYP() {
			return this.PUBLICATION_TYP;
		}

		public java.util.Date FIRST_PRIORITY_DATE;

		public java.util.Date getFIRST_PRIORITY_DATE() {
			return this.FIRST_PRIORITY_DATE;
		}

		public BigDecimal MAIN_OWNER_ADDR_NBR;

		public BigDecimal getMAIN_OWNER_ADDR_NBR() {
			return this.MAIN_OWNER_ADDR_NBR;
		}

		public BigDecimal MAIN_OWNER_PERSON_NBR;

		public BigDecimal getMAIN_OWNER_PERSON_NBR() {
			return this.MAIN_OWNER_PERSON_NBR;
		}

		public BigDecimal SERVICE_ADDR_NBR;

		public BigDecimal getSERVICE_ADDR_NBR() {
			return this.SERVICE_ADDR_NBR;
		}

		public BigDecimal SERVICE_PERSON_NBR;

		public BigDecimal getSERVICE_PERSON_NBR() {
			return this.SERVICE_PERSON_NBR;
		}

		public String NICE_CLASS_TXT;

		public String getNICE_CLASS_TXT() {
			return this.NICE_CLASS_TXT;
		}

		public BigDecimal MARK_CODE;

		public BigDecimal getMARK_CODE() {
			return this.MARK_CODE;
		}

		public String PROC_TYP;

		public String getPROC_TYP() {
			return this.PROC_TYP;
		}

		public BigDecimal PROC_NBR;

		public BigDecimal getPROC_NBR() {
			return this.PROC_NBR;
		}

		public String STATUS_CODE;

		public String getSTATUS_CODE() {
			return this.STATUS_CODE;
		}

		private String readString(ObjectInputStream dis) throws IOException {
			String strReturn = null;
			int length = 0;
			length = dis.readInt();
			if (length == -1) {
				strReturn = null;
			} else {
				if (length > commonByteArray_WIPO_PROJECTS_G2b_Mig_TM.length) {
					if (length < 1024 && commonByteArray_WIPO_PROJECTS_G2b_Mig_TM.length == 0) {
						commonByteArray_WIPO_PROJECTS_G2b_Mig_TM = new byte[1024];
					} else {
						commonByteArray_WIPO_PROJECTS_G2b_Mig_TM = new byte[2 * length];
					}
				}
				dis.readFully(commonByteArray_WIPO_PROJECTS_G2b_Mig_TM, 0, length);
				strReturn = new String(commonByteArray_WIPO_PROJECTS_G2b_Mig_TM, 0, length, utf8Charset);
			}
			return strReturn;
		}

		private void writeString(String str, ObjectOutputStream dos) throws IOException {
			if (str == null) {
				dos.writeInt(-1);
			} else {
				byte[] byteArray = str.getBytes(utf8Charset);
				dos.writeInt(byteArray.length);
				dos.write(byteArray);
			}
		}

		private java.util.Date readDate(ObjectInputStream dis) throws IOException {
			java.util.Date dateReturn = null;
			int length = 0;
			length = dis.readByte();
			if (length == -1) {
				dateReturn = null;
			} else {
				dateReturn = new Date(dis.readLong());
			}
			return dateReturn;
		}

		private void writeDate(java.util.Date date1, ObjectOutputStream dos) throws IOException {
			if (date1 == null) {
				dos.writeByte(-1);
			} else {
				dos.writeByte(0);
				dos.writeLong(date1.getTime());
			}
		}

		public void readData(ObjectInputStream dis) {

			synchronized (commonByteArrayLock_WIPO_PROJECTS_G2b_Mig_TM) {

				try {

					int length = 0;

					this.FILE_SEQ = readString(dis);

					this.FILE_TYPE = readString(dis);

					this.FILE_SERIES = (BigDecimal) dis.readObject();

					this.FILE_NBR = (BigDecimal) dis.readObject();

					this.DOC_ORI = readString(dis);

					this.DOC_SERIES = (BigDecimal) dis.readObject();

					this.DOC_NBR = (BigDecimal) dis.readObject();

					this.IND_IMPORT = (BigDecimal) dis.readObject();

					this.APPLICATION_TYPE = readString(dis);

					this.APPLICATION_SUBTYPE = readString(dis);

					this.LAW_CODE = (BigDecimal) dis.readObject();

					this.FILING_DATE = readDate(dis);

					this.RECEPTION_DATE = readDate(dis);

					this.PUBLICATION_DATE = readDate(dis);

					this.PUBLICATION_NOTES = readString(dis);

					this.IND_REGISTERED = (BigDecimal) dis.readObject();

					this.REGISTRATION_TYPE = readString(dis);

					this.REGISTRATION_SERIES = (BigDecimal) dis.readObject();

					this.REGISTRATION_NBR = (BigDecimal) dis.readObject();

					this.REGISTRATION_DUP = readString(dis);

					this.REGISTRATION_DATE = readDate(dis);

					this.ENTITLEMENT_DATE = readDate(dis);

					this.EXPIRATION_DATE = readDate(dis);

					this.EXHIBITION_DATE = readDate(dis);

					this.EXHIBITION_NOTES = readString(dis);

					this.SIGN_TYPE = readString(dis);

					this.MARK_NAME = readString(dis);

					this.MARK_NAME_LANG2 = readString(dis);

					this.MARK_TRANSLATION = readString(dis);

					this.MARK_TRANSLATION_LANG2 = readString(dis);

					this.MARK_TRANSLITERATION = readString(dis);

					this.MARK_TRANSLITERATION_LANG2 = readString(dis);

					this.SERIES_DESCRIPTION = readString(dis);

					this.COLOUR_DESCRIPTION = readString(dis);

					this.COLOUR_DESCR_LANG2 = readString(dis);

					this.DISCLAIMER = readString(dis);

					this.DISCLAIMER_LANG2 = readString(dis);

					this.BY_CONSENT = readString(dis);

					this.REGULATIONS = readString(dis);

					this.NOTES = readString(dis);

					this.CAPTURE_USER_ID = (BigDecimal) dis.readObject();

					this.CAPTURE_DATE = readDate(dis);

					this.PUBLICATION_NBR = (BigDecimal) dis.readObject();

					this.PUBLICATION_SER = readString(dis);

					this.PUBLICATION_TYP = readString(dis);

					this.FIRST_PRIORITY_DATE = readDate(dis);

					this.MAIN_OWNER_ADDR_NBR = (BigDecimal) dis.readObject();

					this.MAIN_OWNER_PERSON_NBR = (BigDecimal) dis.readObject();

					this.SERVICE_ADDR_NBR = (BigDecimal) dis.readObject();

					this.SERVICE_PERSON_NBR = (BigDecimal) dis.readObject();

					this.NICE_CLASS_TXT = readString(dis);

					this.MARK_CODE = (BigDecimal) dis.readObject();

					this.PROC_TYP = readString(dis);

					this.PROC_NBR = (BigDecimal) dis.readObject();

					this.STATUS_CODE = readString(dis);

				} catch (IOException e) {
					throw new RuntimeException(e);

				} catch (ClassNotFoundException eCNFE) {
					throw new RuntimeException(eCNFE);

				}

			}

		}

		public void writeData(ObjectOutputStream dos) {
			try {

				// String

				writeString(this.FILE_SEQ, dos);

				// String

				writeString(this.FILE_TYPE, dos);

				// BigDecimal

				dos.writeObject(this.FILE_SERIES);

				// BigDecimal

				dos.writeObject(this.FILE_NBR);

				// String

				writeString(this.DOC_ORI, dos);

				// BigDecimal

				dos.writeObject(this.DOC_SERIES);

				// BigDecimal

				dos.writeObject(this.DOC_NBR);

				// BigDecimal

				dos.writeObject(this.IND_IMPORT);

				// String

				writeString(this.APPLICATION_TYPE, dos);

				// String

				writeString(this.APPLICATION_SUBTYPE, dos);

				// BigDecimal

				dos.writeObject(this.LAW_CODE);

				// java.util.Date

				writeDate(this.FILING_DATE, dos);

				// java.util.Date

				writeDate(this.RECEPTION_DATE, dos);

				// java.util.Date

				writeDate(this.PUBLICATION_DATE, dos);

				// String

				writeString(this.PUBLICATION_NOTES, dos);

				// BigDecimal

				dos.writeObject(this.IND_REGISTERED);

				// String

				writeString(this.REGISTRATION_TYPE, dos);

				// BigDecimal

				dos.writeObject(this.REGISTRATION_SERIES);

				// BigDecimal

				dos.writeObject(this.REGISTRATION_NBR);

				// String

				writeString(this.REGISTRATION_DUP, dos);

				// java.util.Date

				writeDate(this.REGISTRATION_DATE, dos);

				// java.util.Date

				writeDate(this.ENTITLEMENT_DATE, dos);

				// java.util.Date

				writeDate(this.EXPIRATION_DATE, dos);

				// java.util.Date

				writeDate(this.EXHIBITION_DATE, dos);

				// String

				writeString(this.EXHIBITION_NOTES, dos);

				// String

				writeString(this.SIGN_TYPE, dos);

				// String

				writeString(this.MARK_NAME, dos);

				// String

				writeString(this.MARK_NAME_LANG2, dos);

				// String

				writeString(this.MARK_TRANSLATION, dos);

				// String

				writeString(this.MARK_TRANSLATION_LANG2, dos);

				// String

				writeString(this.MARK_TRANSLITERATION, dos);

				// String

				writeString(this.MARK_TRANSLITERATION_LANG2, dos);

				// String

				writeString(this.SERIES_DESCRIPTION, dos);

				// String

				writeString(this.COLOUR_DESCRIPTION, dos);

				// String

				writeString(this.COLOUR_DESCR_LANG2, dos);

				// String

				writeString(this.DISCLAIMER, dos);

				// String

				writeString(this.DISCLAIMER_LANG2, dos);

				// String

				writeString(this.BY_CONSENT, dos);

				// String

				writeString(this.REGULATIONS, dos);

				// String

				writeString(this.NOTES, dos);

				// BigDecimal

				dos.writeObject(this.CAPTURE_USER_ID);

				// java.util.Date

				writeDate(this.CAPTURE_DATE, dos);

				// BigDecimal

				dos.writeObject(this.PUBLICATION_NBR);

				// String

				writeString(this.PUBLICATION_SER, dos);

				// String

				writeString(this.PUBLICATION_TYP, dos);

				// java.util.Date

				writeDate(this.FIRST_PRIORITY_DATE, dos);

				// BigDecimal

				dos.writeObject(this.MAIN_OWNER_ADDR_NBR);

				// BigDecimal

				dos.writeObject(this.MAIN_OWNER_PERSON_NBR);

				// BigDecimal

				dos.writeObject(this.SERVICE_ADDR_NBR);

				// BigDecimal

				dos.writeObject(this.SERVICE_PERSON_NBR);

				// String

				writeString(this.NICE_CLASS_TXT, dos);

				// BigDecimal

				dos.writeObject(this.MARK_CODE);

				// String

				writeString(this.PROC_TYP, dos);

				// BigDecimal

				dos.writeObject(this.PROC_NBR);

				// String

				writeString(this.STATUS_CODE, dos);

			} catch (IOException e) {
				throw new RuntimeException(e);
			}

		}

		public String toString() {

			StringBuilder sb = new StringBuilder();
			sb.append(super.toString());
			sb.append("[");
			sb.append("FILE_SEQ=" + FILE_SEQ);
			sb.append(",FILE_TYPE=" + FILE_TYPE);
			sb.append(",FILE_SERIES=" + String.valueOf(FILE_SERIES));
			sb.append(",FILE_NBR=" + String.valueOf(FILE_NBR));
			sb.append(",DOC_ORI=" + DOC_ORI);
			sb.append(",DOC_SERIES=" + String.valueOf(DOC_SERIES));
			sb.append(",DOC_NBR=" + String.valueOf(DOC_NBR));
			sb.append(",IND_IMPORT=" + String.valueOf(IND_IMPORT));
			sb.append(",APPLICATION_TYPE=" + APPLICATION_TYPE);
			sb.append(",APPLICATION_SUBTYPE=" + APPLICATION_SUBTYPE);
			sb.append(",LAW_CODE=" + String.valueOf(LAW_CODE));
			sb.append(",FILING_DATE=" + String.valueOf(FILING_DATE));
			sb.append(",RECEPTION_DATE=" + String.valueOf(RECEPTION_DATE));
			sb.append(",PUBLICATION_DATE=" + String.valueOf(PUBLICATION_DATE));
			sb.append(",PUBLICATION_NOTES=" + PUBLICATION_NOTES);
			sb.append(",IND_REGISTERED=" + String.valueOf(IND_REGISTERED));
			sb.append(",REGISTRATION_TYPE=" + REGISTRATION_TYPE);
			sb.append(",REGISTRATION_SERIES=" + String.valueOf(REGISTRATION_SERIES));
			sb.append(",REGISTRATION_NBR=" + String.valueOf(REGISTRATION_NBR));
			sb.append(",REGISTRATION_DUP=" + REGISTRATION_DUP);
			sb.append(",REGISTRATION_DATE=" + String.valueOf(REGISTRATION_DATE));
			sb.append(",ENTITLEMENT_DATE=" + String.valueOf(ENTITLEMENT_DATE));
			sb.append(",EXPIRATION_DATE=" + String.valueOf(EXPIRATION_DATE));
			sb.append(",EXHIBITION_DATE=" + String.valueOf(EXHIBITION_DATE));
			sb.append(",EXHIBITION_NOTES=" + EXHIBITION_NOTES);
			sb.append(",SIGN_TYPE=" + SIGN_TYPE);
			sb.append(",MARK_NAME=" + MARK_NAME);
			sb.append(",MARK_NAME_LANG2=" + MARK_NAME_LANG2);
			sb.append(",MARK_TRANSLATION=" + MARK_TRANSLATION);
			sb.append(",MARK_TRANSLATION_LANG2=" + MARK_TRANSLATION_LANG2);
			sb.append(",MARK_TRANSLITERATION=" + MARK_TRANSLITERATION);
			sb.append(",MARK_TRANSLITERATION_LANG2=" + MARK_TRANSLITERATION_LANG2);
			sb.append(",SERIES_DESCRIPTION=" + SERIES_DESCRIPTION);
			sb.append(",COLOUR_DESCRIPTION=" + COLOUR_DESCRIPTION);
			sb.append(",COLOUR_DESCR_LANG2=" + COLOUR_DESCR_LANG2);
			sb.append(",DISCLAIMER=" + DISCLAIMER);
			sb.append(",DISCLAIMER_LANG2=" + DISCLAIMER_LANG2);
			sb.append(",BY_CONSENT=" + BY_CONSENT);
			sb.append(",REGULATIONS=" + REGULATIONS);
			sb.append(",NOTES=" + NOTES);
			sb.append(",CAPTURE_USER_ID=" + String.valueOf(CAPTURE_USER_ID));
			sb.append(",CAPTURE_DATE=" + String.valueOf(CAPTURE_DATE));
			sb.append(",PUBLICATION_NBR=" + String.valueOf(PUBLICATION_NBR));
			sb.append(",PUBLICATION_SER=" + PUBLICATION_SER);
			sb.append(",PUBLICATION_TYP=" + PUBLICATION_TYP);
			sb.append(",FIRST_PRIORITY_DATE=" + String.valueOf(FIRST_PRIORITY_DATE));
			sb.append(",MAIN_OWNER_ADDR_NBR=" + String.valueOf(MAIN_OWNER_ADDR_NBR));
			sb.append(",MAIN_OWNER_PERSON_NBR=" + String.valueOf(MAIN_OWNER_PERSON_NBR));
			sb.append(",SERVICE_ADDR_NBR=" + String.valueOf(SERVICE_ADDR_NBR));
			sb.append(",SERVICE_PERSON_NBR=" + String.valueOf(SERVICE_PERSON_NBR));
			sb.append(",NICE_CLASS_TXT=" + NICE_CLASS_TXT);
			sb.append(",MARK_CODE=" + String.valueOf(MARK_CODE));
			sb.append(",PROC_TYP=" + PROC_TYP);
			sb.append(",PROC_NBR=" + String.valueOf(PROC_NBR));
			sb.append(",STATUS_CODE=" + STATUS_CODE);
			sb.append("]");

			return sb.toString();
		}

		/**
		 * Compare keys
		 */
		public int compareTo(to_wrk_mStruct other) {

			int returnValue = -1;

			return returnValue;
		}

		private int checkNullsAndCompare(Object object1, Object object2) {
			int returnValue = 0;
			if (object1 instanceof Comparable && object2 instanceof Comparable) {
				returnValue = ((Comparable) object1).compareTo(object2);
			} else if (object1 != null && object2 != null) {
				returnValue = compareStrings(object1.toString(), object2.toString());
			} else if (object1 == null && object2 != null) {
				returnValue = 1;
			} else if (object1 != null && object2 == null) {
				returnValue = -1;
			} else {
				returnValue = 0;
			}

			return returnValue;
		}

		private int compareStrings(String string1, String string2) {
			return string1.compareTo(string2);
		}

	}

	public static class row3Struct implements routines.system.IPersistableRow<row3Struct> {
		final static byte[] commonByteArrayLock_WIPO_PROJECTS_G2b_Mig_TM = new byte[0];
		static byte[] commonByteArray_WIPO_PROJECTS_G2b_Mig_TM = new byte[0];

		public String FILE_SEQ;

		public String getFILE_SEQ() {
			return this.FILE_SEQ;
		}

		public String FILE_TYPE;

		public String getFILE_TYPE() {
			return this.FILE_TYPE;
		}

		public BigDecimal FILE_SERIES;

		public BigDecimal getFILE_SERIES() {
			return this.FILE_SERIES;
		}

		public BigDecimal FILE_NBR;

		public BigDecimal getFILE_NBR() {
			return this.FILE_NBR;
		}

		public String DOC_ORI;

		public String getDOC_ORI() {
			return this.DOC_ORI;
		}

		public BigDecimal DOC_SERIES;

		public BigDecimal getDOC_SERIES() {
			return this.DOC_SERIES;
		}

		public BigDecimal DOC_NBR;

		public BigDecimal getDOC_NBR() {
			return this.DOC_NBR;
		}

		public BigDecimal IND_IMPORT;

		public BigDecimal getIND_IMPORT() {
			return this.IND_IMPORT;
		}

		public String APPLICATION_TYPE;

		public String getAPPLICATION_TYPE() {
			return this.APPLICATION_TYPE;
		}

		public String APPLICATION_SUBTYPE;

		public String getAPPLICATION_SUBTYPE() {
			return this.APPLICATION_SUBTYPE;
		}

		public BigDecimal LAW_CODE;

		public BigDecimal getLAW_CODE() {
			return this.LAW_CODE;
		}

		public java.util.Date FILING_DATE;

		public java.util.Date getFILING_DATE() {
			return this.FILING_DATE;
		}

		public java.util.Date RECEPTION_DATE;

		public java.util.Date getRECEPTION_DATE() {
			return this.RECEPTION_DATE;
		}

		public java.util.Date PUBLICATION_DATE;

		public java.util.Date getPUBLICATION_DATE() {
			return this.PUBLICATION_DATE;
		}

		public String PUBLICATION_NOTES;

		public String getPUBLICATION_NOTES() {
			return this.PUBLICATION_NOTES;
		}

		public BigDecimal IND_REGISTERED;

		public BigDecimal getIND_REGISTERED() {
			return this.IND_REGISTERED;
		}

		public String REGISTRATION_TYPE;

		public String getREGISTRATION_TYPE() {
			return this.REGISTRATION_TYPE;
		}

		public BigDecimal REGISTRATION_SERIES;

		public BigDecimal getREGISTRATION_SERIES() {
			return this.REGISTRATION_SERIES;
		}

		public BigDecimal REGISTRATION_NBR;

		public BigDecimal getREGISTRATION_NBR() {
			return this.REGISTRATION_NBR;
		}

		public String REGISTRATION_DUP;

		public String getREGISTRATION_DUP() {
			return this.REGISTRATION_DUP;
		}

		public java.util.Date REGISTRATION_DATE;

		public java.util.Date getREGISTRATION_DATE() {
			return this.REGISTRATION_DATE;
		}

		public java.util.Date ENTITLEMENT_DATE;

		public java.util.Date getENTITLEMENT_DATE() {
			return this.ENTITLEMENT_DATE;
		}

		public java.util.Date EXPIRATION_DATE;

		public java.util.Date getEXPIRATION_DATE() {
			return this.EXPIRATION_DATE;
		}

		public java.util.Date EXHIBITION_DATE;

		public java.util.Date getEXHIBITION_DATE() {
			return this.EXHIBITION_DATE;
		}

		public String EXHIBITION_NOTES;

		public String getEXHIBITION_NOTES() {
			return this.EXHIBITION_NOTES;
		}

		public String SIGN_TYPE;

		public String getSIGN_TYPE() {
			return this.SIGN_TYPE;
		}

		public String MARK_NAME;

		public String getMARK_NAME() {
			return this.MARK_NAME;
		}

		public String MARK_NAME_LANG2;

		public String getMARK_NAME_LANG2() {
			return this.MARK_NAME_LANG2;
		}

		public String MARK_TRANSLATION;

		public String getMARK_TRANSLATION() {
			return this.MARK_TRANSLATION;
		}

		public String MARK_TRANSLATION_LANG2;

		public String getMARK_TRANSLATION_LANG2() {
			return this.MARK_TRANSLATION_LANG2;
		}

		public String MARK_TRANSLITERATION;

		public String getMARK_TRANSLITERATION() {
			return this.MARK_TRANSLITERATION;
		}

		public String MARK_TRANSLITERATION_LANG2;

		public String getMARK_TRANSLITERATION_LANG2() {
			return this.MARK_TRANSLITERATION_LANG2;
		}

		public String SERIES_DESCRIPTION;

		public String getSERIES_DESCRIPTION() {
			return this.SERIES_DESCRIPTION;
		}

		public String COLOUR_DESCRIPTION;

		public String getCOLOUR_DESCRIPTION() {
			return this.COLOUR_DESCRIPTION;
		}

		public String COLOUR_DESCR_LANG2;

		public String getCOLOUR_DESCR_LANG2() {
			return this.COLOUR_DESCR_LANG2;
		}

		public String DISCLAIMER;

		public String getDISCLAIMER() {
			return this.DISCLAIMER;
		}

		public String DISCLAIMER_LANG2;

		public String getDISCLAIMER_LANG2() {
			return this.DISCLAIMER_LANG2;
		}

		public String BY_CONSENT;

		public String getBY_CONSENT() {
			return this.BY_CONSENT;
		}

		public String REGULATIONS;

		public String getREGULATIONS() {
			return this.REGULATIONS;
		}

		public String NOTES;

		public String getNOTES() {
			return this.NOTES;
		}

		public BigDecimal CAPTURE_USER_ID;

		public BigDecimal getCAPTURE_USER_ID() {
			return this.CAPTURE_USER_ID;
		}

		public java.util.Date CAPTURE_DATE;

		public java.util.Date getCAPTURE_DATE() {
			return this.CAPTURE_DATE;
		}

		public BigDecimal PUBLICATION_NBR;

		public BigDecimal getPUBLICATION_NBR() {
			return this.PUBLICATION_NBR;
		}

		public String PUBLICATION_SER;

		public String getPUBLICATION_SER() {
			return this.PUBLICATION_SER;
		}

		public String PUBLICATION_TYP;

		public String getPUBLICATION_TYP() {
			return this.PUBLICATION_TYP;
		}

		private String readString(ObjectInputStream dis) throws IOException {
			String strReturn = null;
			int length = 0;
			length = dis.readInt();
			if (length == -1) {
				strReturn = null;
			} else {
				if (length > commonByteArray_WIPO_PROJECTS_G2b_Mig_TM.length) {
					if (length < 1024 && commonByteArray_WIPO_PROJECTS_G2b_Mig_TM.length == 0) {
						commonByteArray_WIPO_PROJECTS_G2b_Mig_TM = new byte[1024];
					} else {
						commonByteArray_WIPO_PROJECTS_G2b_Mig_TM = new byte[2 * length];
					}
				}
				dis.readFully(commonByteArray_WIPO_PROJECTS_G2b_Mig_TM, 0, length);
				strReturn = new String(commonByteArray_WIPO_PROJECTS_G2b_Mig_TM, 0, length, utf8Charset);
			}
			return strReturn;
		}

		private void writeString(String str, ObjectOutputStream dos) throws IOException {
			if (str == null) {
				dos.writeInt(-1);
			} else {
				byte[] byteArray = str.getBytes(utf8Charset);
				dos.writeInt(byteArray.length);
				dos.write(byteArray);
			}
		}

		private java.util.Date readDate(ObjectInputStream dis) throws IOException {
			java.util.Date dateReturn = null;
			int length = 0;
			length = dis.readByte();
			if (length == -1) {
				dateReturn = null;
			} else {
				dateReturn = new Date(dis.readLong());
			}
			return dateReturn;
		}

		private void writeDate(java.util.Date date1, ObjectOutputStream dos) throws IOException {
			if (date1 == null) {
				dos.writeByte(-1);
			} else {
				dos.writeByte(0);
				dos.writeLong(date1.getTime());
			}
		}

		public void readData(ObjectInputStream dis) {

			synchronized (commonByteArrayLock_WIPO_PROJECTS_G2b_Mig_TM) {

				try {

					int length = 0;

					this.FILE_SEQ = readString(dis);

					this.FILE_TYPE = readString(dis);

					this.FILE_SERIES = (BigDecimal) dis.readObject();

					this.FILE_NBR = (BigDecimal) dis.readObject();

					this.DOC_ORI = readString(dis);

					this.DOC_SERIES = (BigDecimal) dis.readObject();

					this.DOC_NBR = (BigDecimal) dis.readObject();

					this.IND_IMPORT = (BigDecimal) dis.readObject();

					this.APPLICATION_TYPE = readString(dis);

					this.APPLICATION_SUBTYPE = readString(dis);

					this.LAW_CODE = (BigDecimal) dis.readObject();

					this.FILING_DATE = readDate(dis);

					this.RECEPTION_DATE = readDate(dis);

					this.PUBLICATION_DATE = readDate(dis);

					this.PUBLICATION_NOTES = readString(dis);

					this.IND_REGISTERED = (BigDecimal) dis.readObject();

					this.REGISTRATION_TYPE = readString(dis);

					this.REGISTRATION_SERIES = (BigDecimal) dis.readObject();

					this.REGISTRATION_NBR = (BigDecimal) dis.readObject();

					this.REGISTRATION_DUP = readString(dis);

					this.REGISTRATION_DATE = readDate(dis);

					this.ENTITLEMENT_DATE = readDate(dis);

					this.EXPIRATION_DATE = readDate(dis);

					this.EXHIBITION_DATE = readDate(dis);

					this.EXHIBITION_NOTES = readString(dis);

					this.SIGN_TYPE = readString(dis);

					this.MARK_NAME = readString(dis);

					this.MARK_NAME_LANG2 = readString(dis);

					this.MARK_TRANSLATION = readString(dis);

					this.MARK_TRANSLATION_LANG2 = readString(dis);

					this.MARK_TRANSLITERATION = readString(dis);

					this.MARK_TRANSLITERATION_LANG2 = readString(dis);

					this.SERIES_DESCRIPTION = readString(dis);

					this.COLOUR_DESCRIPTION = readString(dis);

					this.COLOUR_DESCR_LANG2 = readString(dis);

					this.DISCLAIMER = readString(dis);

					this.DISCLAIMER_LANG2 = readString(dis);

					this.BY_CONSENT = readString(dis);

					this.REGULATIONS = readString(dis);

					this.NOTES = readString(dis);

					this.CAPTURE_USER_ID = (BigDecimal) dis.readObject();

					this.CAPTURE_DATE = readDate(dis);

					this.PUBLICATION_NBR = (BigDecimal) dis.readObject();

					this.PUBLICATION_SER = readString(dis);

					this.PUBLICATION_TYP = readString(dis);

				} catch (IOException e) {
					throw new RuntimeException(e);

				} catch (ClassNotFoundException eCNFE) {
					throw new RuntimeException(eCNFE);

				}

			}

		}

		public void writeData(ObjectOutputStream dos) {
			try {

				// String

				writeString(this.FILE_SEQ, dos);

				// String

				writeString(this.FILE_TYPE, dos);

				// BigDecimal

				dos.writeObject(this.FILE_SERIES);

				// BigDecimal

				dos.writeObject(this.FILE_NBR);

				// String

				writeString(this.DOC_ORI, dos);

				// BigDecimal

				dos.writeObject(this.DOC_SERIES);

				// BigDecimal

				dos.writeObject(this.DOC_NBR);

				// BigDecimal

				dos.writeObject(this.IND_IMPORT);

				// String

				writeString(this.APPLICATION_TYPE, dos);

				// String

				writeString(this.APPLICATION_SUBTYPE, dos);

				// BigDecimal

				dos.writeObject(this.LAW_CODE);

				// java.util.Date

				writeDate(this.FILING_DATE, dos);

				// java.util.Date

				writeDate(this.RECEPTION_DATE, dos);

				// java.util.Date

				writeDate(this.PUBLICATION_DATE, dos);

				// String

				writeString(this.PUBLICATION_NOTES, dos);

				// BigDecimal

				dos.writeObject(this.IND_REGISTERED);

				// String

				writeString(this.REGISTRATION_TYPE, dos);

				// BigDecimal

				dos.writeObject(this.REGISTRATION_SERIES);

				// BigDecimal

				dos.writeObject(this.REGISTRATION_NBR);

				// String

				writeString(this.REGISTRATION_DUP, dos);

				// java.util.Date

				writeDate(this.REGISTRATION_DATE, dos);

				// java.util.Date

				writeDate(this.ENTITLEMENT_DATE, dos);

				// java.util.Date

				writeDate(this.EXPIRATION_DATE, dos);

				// java.util.Date

				writeDate(this.EXHIBITION_DATE, dos);

				// String

				writeString(this.EXHIBITION_NOTES, dos);

				// String

				writeString(this.SIGN_TYPE, dos);

				// String

				writeString(this.MARK_NAME, dos);

				// String

				writeString(this.MARK_NAME_LANG2, dos);

				// String

				writeString(this.MARK_TRANSLATION, dos);

				// String

				writeString(this.MARK_TRANSLATION_LANG2, dos);

				// String

				writeString(this.MARK_TRANSLITERATION, dos);

				// String

				writeString(this.MARK_TRANSLITERATION_LANG2, dos);

				// String

				writeString(this.SERIES_DESCRIPTION, dos);

				// String

				writeString(this.COLOUR_DESCRIPTION, dos);

				// String

				writeString(this.COLOUR_DESCR_LANG2, dos);

				// String

				writeString(this.DISCLAIMER, dos);

				// String

				writeString(this.DISCLAIMER_LANG2, dos);

				// String

				writeString(this.BY_CONSENT, dos);

				// String

				writeString(this.REGULATIONS, dos);

				// String

				writeString(this.NOTES, dos);

				// BigDecimal

				dos.writeObject(this.CAPTURE_USER_ID);

				// java.util.Date

				writeDate(this.CAPTURE_DATE, dos);

				// BigDecimal

				dos.writeObject(this.PUBLICATION_NBR);

				// String

				writeString(this.PUBLICATION_SER, dos);

				// String

				writeString(this.PUBLICATION_TYP, dos);

			} catch (IOException e) {
				throw new RuntimeException(e);
			}

		}

		public String toString() {

			StringBuilder sb = new StringBuilder();
			sb.append(super.toString());
			sb.append("[");
			sb.append("FILE_SEQ=" + FILE_SEQ);
			sb.append(",FILE_TYPE=" + FILE_TYPE);
			sb.append(",FILE_SERIES=" + String.valueOf(FILE_SERIES));
			sb.append(",FILE_NBR=" + String.valueOf(FILE_NBR));
			sb.append(",DOC_ORI=" + DOC_ORI);
			sb.append(",DOC_SERIES=" + String.valueOf(DOC_SERIES));
			sb.append(",DOC_NBR=" + String.valueOf(DOC_NBR));
			sb.append(",IND_IMPORT=" + String.valueOf(IND_IMPORT));
			sb.append(",APPLICATION_TYPE=" + APPLICATION_TYPE);
			sb.append(",APPLICATION_SUBTYPE=" + APPLICATION_SUBTYPE);
			sb.append(",LAW_CODE=" + String.valueOf(LAW_CODE));
			sb.append(",FILING_DATE=" + String.valueOf(FILING_DATE));
			sb.append(",RECEPTION_DATE=" + String.valueOf(RECEPTION_DATE));
			sb.append(",PUBLICATION_DATE=" + String.valueOf(PUBLICATION_DATE));
			sb.append(",PUBLICATION_NOTES=" + PUBLICATION_NOTES);
			sb.append(",IND_REGISTERED=" + String.valueOf(IND_REGISTERED));
			sb.append(",REGISTRATION_TYPE=" + REGISTRATION_TYPE);
			sb.append(",REGISTRATION_SERIES=" + String.valueOf(REGISTRATION_SERIES));
			sb.append(",REGISTRATION_NBR=" + String.valueOf(REGISTRATION_NBR));
			sb.append(",REGISTRATION_DUP=" + REGISTRATION_DUP);
			sb.append(",REGISTRATION_DATE=" + String.valueOf(REGISTRATION_DATE));
			sb.append(",ENTITLEMENT_DATE=" + String.valueOf(ENTITLEMENT_DATE));
			sb.append(",EXPIRATION_DATE=" + String.valueOf(EXPIRATION_DATE));
			sb.append(",EXHIBITION_DATE=" + String.valueOf(EXHIBITION_DATE));
			sb.append(",EXHIBITION_NOTES=" + EXHIBITION_NOTES);
			sb.append(",SIGN_TYPE=" + SIGN_TYPE);
			sb.append(",MARK_NAME=" + MARK_NAME);
			sb.append(",MARK_NAME_LANG2=" + MARK_NAME_LANG2);
			sb.append(",MARK_TRANSLATION=" + MARK_TRANSLATION);
			sb.append(",MARK_TRANSLATION_LANG2=" + MARK_TRANSLATION_LANG2);
			sb.append(",MARK_TRANSLITERATION=" + MARK_TRANSLITERATION);
			sb.append(",MARK_TRANSLITERATION_LANG2=" + MARK_TRANSLITERATION_LANG2);
			sb.append(",SERIES_DESCRIPTION=" + SERIES_DESCRIPTION);
			sb.append(",COLOUR_DESCRIPTION=" + COLOUR_DESCRIPTION);
			sb.append(",COLOUR_DESCR_LANG2=" + COLOUR_DESCR_LANG2);
			sb.append(",DISCLAIMER=" + DISCLAIMER);
			sb.append(",DISCLAIMER_LANG2=" + DISCLAIMER_LANG2);
			sb.append(",BY_CONSENT=" + BY_CONSENT);
			sb.append(",REGULATIONS=" + REGULATIONS);
			sb.append(",NOTES=" + NOTES);
			sb.append(",CAPTURE_USER_ID=" + String.valueOf(CAPTURE_USER_ID));
			sb.append(",CAPTURE_DATE=" + String.valueOf(CAPTURE_DATE));
			sb.append(",PUBLICATION_NBR=" + String.valueOf(PUBLICATION_NBR));
			sb.append(",PUBLICATION_SER=" + PUBLICATION_SER);
			sb.append(",PUBLICATION_TYP=" + PUBLICATION_TYP);
			sb.append("]");

			return sb.toString();
		}

		/**
		 * Compare keys
		 */
		public int compareTo(row3Struct other) {

			int returnValue = -1;

			return returnValue;
		}

		private int checkNullsAndCompare(Object object1, Object object2) {
			int returnValue = 0;
			if (object1 instanceof Comparable && object2 instanceof Comparable) {
				returnValue = ((Comparable) object1).compareTo(object2);
			} else if (object1 != null && object2 != null) {
				returnValue = compareStrings(object1.toString(), object2.toString());
			} else if (object1 == null && object2 != null) {
				returnValue = 1;
			} else if (object1 != null && object2 == null) {
				returnValue = -1;
			} else {
				returnValue = 0;
			}

			return returnValue;
		}

		private int compareStrings(String string1, String string2) {
			return string1.compareTo(string2);
		}

	}

	public void tDBInput_45Process(final java.util.Map<String, Object> globalMap) throws TalendException {
		globalMap.put("tDBInput_45_SUBPROCESS_STATE", 0);

		final boolean execStat = this.execStat;

		String iterateId = "";

		String currentComponent = "";
		java.util.Map<String, Object> resourceMap = new java.util.HashMap<String, Object>();

		try {
			// TDI-39566 avoid throwing an useless Exception
			boolean resumeIt = true;
			if (globalResumeTicket == false && resumeEntryMethodName != null) {
				String currentMethodName = new java.lang.Exception().getStackTrace()[0].getMethodName();
				resumeIt = resumeEntryMethodName.equals(currentMethodName);
			}
			if (resumeIt || globalResumeTicket) { // start the resume
				globalResumeTicket = true;

				row3Struct row3 = new row3Struct();
				to_wrk_mStruct to_wrk_m = new to_wrk_mStruct();
				row4Struct row4 = new row4Struct();

				/**
				 * [tLogRow_46 begin ] start
				 */

				ok_Hash.put("tLogRow_46", false);
				start_Hash.put("tLogRow_46", System.currentTimeMillis());

				tStatCatcher_1.addMessage("begin", "tLogRow_46");
				tStatCatcher_1Process(globalMap);

				currentComponent = "tLogRow_46";

				if (execStat) {
					runStat.updateStatOnConnection(resourceMap, iterateId, 0, 0, "row4");
				}

				int tos_count_tLogRow_46 = 0;

				///////////////////////

				final String OUTPUT_FIELD_SEPARATOR_tLogRow_46 = "|";
				java.io.PrintStream consoleOut_tLogRow_46 = null;

				StringBuilder strBuffer_tLogRow_46 = null;
				int nb_line_tLogRow_46 = 0;
///////////////////////    			

				/**
				 * [tLogRow_46 begin ] stop
				 */

				/**
				 * [tDBOutput_3 begin ] start
				 */

				ok_Hash.put("tDBOutput_3", false);
				start_Hash.put("tDBOutput_3", System.currentTimeMillis());

				tStatCatcher_1.addMessage("begin", "tDBOutput_3");
				tStatCatcher_1Process(globalMap);

				currentComponent = "tDBOutput_3";

				if (execStat) {
					runStat.updateStatOnConnection(resourceMap, iterateId, 0, 0, "to_wrk_m");
				}

				int tos_count_tDBOutput_3 = 0;

				int nb_line_tDBOutput_3 = 0;
				int nb_line_update_tDBOutput_3 = 0;
				int nb_line_inserted_tDBOutput_3 = 0;
				int nb_line_deleted_tDBOutput_3 = 0;
				int nb_line_rejected_tDBOutput_3 = 0;

				int deletedCount_tDBOutput_3 = 0;
				int updatedCount_tDBOutput_3 = 0;
				int insertedCount_tDBOutput_3 = 0;
				int rejectedCount_tDBOutput_3 = 0;
				String dbschema_tDBOutput_3 = null;
				String tableName_tDBOutput_3 = null;
				boolean whetherReject_tDBOutput_3 = false;

				java.util.Calendar calendar_tDBOutput_3 = java.util.Calendar.getInstance();
				long year1_tDBOutput_3 = TalendDate.parseDate("yyyy-MM-dd", "0001-01-01").getTime();
				long year2_tDBOutput_3 = TalendDate.parseDate("yyyy-MM-dd", "1753-01-01").getTime();
				long year10000_tDBOutput_3 = TalendDate.parseDate("yyyy-MM-dd HH:mm:ss", "9999-12-31 24:00:00")
						.getTime();
				long date_tDBOutput_3;

				java.util.Calendar calendar_datetimeoffset_tDBOutput_3 = java.util.Calendar
						.getInstance(java.util.TimeZone.getTimeZone("UTC"));

				java.sql.Connection conn_tDBOutput_3 = null;
				String dbUser_tDBOutput_3 = null;
				dbschema_tDBOutput_3 = "ADMIN";
				String driverClass_tDBOutput_3 = "net.sourceforge.jtds.jdbc.Driver";

				java.lang.Class.forName(driverClass_tDBOutput_3);
				String port_tDBOutput_3 = "1433";
				String dbname_tDBOutput_3 = "MARCAS_PY";
				String url_tDBOutput_3 = "jdbc:jtds:sqlserver://" + "localhost";
				if (!"".equals(port_tDBOutput_3)) {
					url_tDBOutput_3 += ":" + "1433";
				}
				if (!"".equals(dbname_tDBOutput_3)) {
					url_tDBOutput_3 += "//" + "MARCAS_PY";

				}
				url_tDBOutput_3 += ";appName=" + projectName + ";" + "";
				dbUser_tDBOutput_3 = "ADMIN";

				final String decryptedPassword_tDBOutput_3 = routines.system.PasswordEncryptUtil
						.decryptPassword("enc:routine.encryption.key.v1:+fw9nkkCf6lwUBaa1K8ku9jyTmzXwg8rp/vCzgKhgByg");

				String dbPwd_tDBOutput_3 = decryptedPassword_tDBOutput_3;
				conn_tDBOutput_3 = java.sql.DriverManager.getConnection(url_tDBOutput_3, dbUser_tDBOutput_3,
						dbPwd_tDBOutput_3);

				resourceMap.put("conn_tDBOutput_3", conn_tDBOutput_3);

				conn_tDBOutput_3.setAutoCommit(false);
				int commitEvery_tDBOutput_3 = 10000;
				int commitCounter_tDBOutput_3 = 0;

				if (dbschema_tDBOutput_3 == null || dbschema_tDBOutput_3.trim().length() == 0) {
					tableName_tDBOutput_3 = "WRK_MARK";
				} else {
					tableName_tDBOutput_3 = dbschema_tDBOutput_3 + "].[" + "WRK_MARK";
				}
				int count_tDBOutput_3 = 0;

				int rsTruncCountNumber_tDBOutput_3 = 0;
				try (java.sql.Statement stmtTruncCount_tDBOutput_3 = conn_tDBOutput_3.createStatement()) {
					try (java.sql.ResultSet rsTruncCount_tDBOutput_3 = stmtTruncCount_tDBOutput_3
							.executeQuery("SELECT COUNT(1) FROM [" + tableName_tDBOutput_3 + "]")) {
						if (rsTruncCount_tDBOutput_3.next()) {
							rsTruncCountNumber_tDBOutput_3 = rsTruncCount_tDBOutput_3.getInt(1);
						}
					}
				}
				try (java.sql.Statement stmtTrunc_tDBOutput_3 = conn_tDBOutput_3.createStatement()) {
					stmtTrunc_tDBOutput_3.executeUpdate("TRUNCATE TABLE [" + tableName_tDBOutput_3 + "]");
					deletedCount_tDBOutput_3 += rsTruncCountNumber_tDBOutput_3;
				}
				String insert_tDBOutput_3 = "INSERT INTO [" + tableName_tDBOutput_3
						+ "] ([FILE_SEQ],[FILE_TYPE],[FILE_SERIES],[FILE_NBR],[DOC_ORI],[DOC_SERIES],[DOC_NBR],[IND_IMPORT],[APPLICATION_TYPE],[APPLICATION_SUBTYPE],[LAW_CODE],[FILING_DATE],[RECEPTION_DATE],[PUBLICATION_DATE],[PUBLICATION_NOTES],[IND_REGISTERED],[REGISTRATION_TYPE],[REGISTRATION_SERIES],[REGISTRATION_NBR],[REGISTRATION_DUP],[REGISTRATION_DATE],[ENTITLEMENT_DATE],[EXPIRATION_DATE],[EXHIBITION_DATE],[EXHIBITION_NOTES],[SIGN_TYPE],[MARK_NAME],[MARK_NAME_LANG2],[MARK_TRANSLATION],[MARK_TRANSLATION_LANG2],[MARK_TRANSLITERATION],[MARK_TRANSLITERATION_LANG2],[SERIES_DESCRIPTION],[COLOUR_DESCRIPTION],[COLOUR_DESCR_LANG2],[DISCLAIMER],[DISCLAIMER_LANG2],[BY_CONSENT],[REGULATIONS],[NOTES],[CAPTURE_USER_ID],[CAPTURE_DATE],[PUBLICATION_NBR],[PUBLICATION_SER],[PUBLICATION_TYP],[FIRST_PRIORITY_DATE],[MAIN_OWNER_ADDR_NBR],[MAIN_OWNER_PERSON_NBR],[SERVICE_ADDR_NBR],[SERVICE_PERSON_NBR],[NICE_CLASS_TXT],[MARK_CODE],[PROC_TYP],[PROC_NBR],[STATUS_CODE]) VALUES (?,?,?,?,?,?,?,?,?,?,?,?,?,?,?,?,?,?,?,?,?,?,?,?,?,?,?,?,?,?,?,?,?,?,?,?,?,?,?,?,?,?,?,?,?,?,?,?,?,?,?,?,?,?,?)";
				java.sql.PreparedStatement pstmt_tDBOutput_3 = conn_tDBOutput_3.prepareStatement(insert_tDBOutput_3);
				resourceMap.put("pstmt_tDBOutput_3", pstmt_tDBOutput_3);

				/**
				 * [tDBOutput_3 begin ] stop
				 */

				/**
				 * [tMap_3 begin ] start
				 */

				ok_Hash.put("tMap_3", false);
				start_Hash.put("tMap_3", System.currentTimeMillis());

				currentComponent = "tMap_3";

				if (execStat) {
					runStat.updateStatOnConnection(resourceMap, iterateId, 0, 0, "row3");
				}

				int tos_count_tMap_3 = 0;

// ###############################
// # Lookup's keys initialization
// ###############################        

// ###############################
// # Vars initialization
				class Var__tMap_3__Struct {
				}
				Var__tMap_3__Struct Var__tMap_3 = new Var__tMap_3__Struct();
// ###############################

// ###############################
// # Outputs initialization
				to_wrk_mStruct to_wrk_m_tmp = new to_wrk_mStruct();
// ###############################

				/**
				 * [tMap_3 begin ] stop
				 */

				/**
				 * [tDBInput_45 begin ] start
				 */

				ok_Hash.put("tDBInput_45", false);
				start_Hash.put("tDBInput_45", System.currentTimeMillis());

				currentComponent = "tDBInput_45";

				int tos_count_tDBInput_45 = 0;

				org.talend.designer.components.util.mssql.MSSqlGenerateTimestampUtil mssqlGTU_tDBInput_45 = org.talend.designer.components.util.mssql.MSSqlUtilFactory
						.getMSSqlGenerateTimestampUtil();

				java.util.List<String> talendToDBList_tDBInput_45 = new java.util.ArrayList();
				String[] talendToDBArray_tDBInput_45 = new String[] { "FLOAT", "NUMERIC", "NUMERIC IDENTITY", "DECIMAL",
						"DECIMAL IDENTITY", "REAL" };
				java.util.Collections.addAll(talendToDBList_tDBInput_45, talendToDBArray_tDBInput_45);
				int nb_line_tDBInput_45 = 0;
				java.sql.Connection conn_tDBInput_45 = null;
				String driverClass_tDBInput_45 = "net.sourceforge.jtds.jdbc.Driver";
				java.lang.Class jdbcclazz_tDBInput_45 = java.lang.Class.forName(driverClass_tDBInput_45);
				String dbUser_tDBInput_45 = "sa";

				final String decryptedPassword_tDBInput_45 = routines.system.PasswordEncryptUtil.decryptPassword(
						"enc:routine.encryption.key.v1:K9Vv5JZODpRISes8jaGIqEUACQ+4H9KlucBlsO0JII7EOeIh");

				String dbPwd_tDBInput_45 = decryptedPassword_tDBInput_45;

				String port_tDBInput_45 = "1433";
				String dbname_tDBInput_45 = "PY_INTERMED";
				String url_tDBInput_45 = "jdbc:jtds:sqlserver://" + "localhost";
				if (!"".equals(port_tDBInput_45)) {
					url_tDBInput_45 += ":" + "1433";
				}
				if (!"".equals(dbname_tDBInput_45)) {
					url_tDBInput_45 += "//" + "PY_INTERMED";
				}
				url_tDBInput_45 += ";appName=" + projectName + ";" + "";
				String dbschema_tDBInput_45 = "dbo";

				conn_tDBInput_45 = java.sql.DriverManager.getConnection(url_tDBInput_45, dbUser_tDBInput_45,
						dbPwd_tDBInput_45);

				java.sql.Statement stmt_tDBInput_45 = conn_tDBInput_45.createStatement();

				String dbquery_tDBInput_45 = "SELECT dbo.VW_IMPORT_MARK.FILE_SEQ,\n		dbo.VW_IMPORT_MARK.FILE_TYPE,\n		dbo.VW_IMPORT_MARK.FILE_SERIES,\n		dbo.VW_IMPORT_M"
						+ "ARK.FILE_NBR,\n		dbo.VW_IMPORT_MARK.DOC_ORI,\n		dbo.VW_IMPORT_MARK.DOC_SERIES,\n		dbo.VW_IMPORT_MARK.DOC_NBR,\n		dbo.VW_IMPO"
						+ "RT_MARK.IND_IMPORT,\n		dbo.VW_IMPORT_MARK.APPLICATION_TYPE,\n		dbo.VW_IMPORT_MARK.APPLICATION_SUBTYPE,\n		dbo.VW_IMPORT_MAR"
						+ "K.LAW_CODE,\n		dbo.VW_IMPORT_MARK.FILING_DATE,\n		dbo.VW_IMPORT_MARK.RECEPTION_DATE,\n		dbo.VW_IMPORT_MARK.PUBLICATION_DATE"
						+ ",\n		dbo.VW_IMPORT_MARK.PUBLICATION_NOTES,\n		dbo.VW_IMPORT_MARK.IND_REGISTERED,\n		dbo.VW_IMPORT_MARK.REGISTRATION_TYPE,\n	"
						+ "	dbo.VW_IMPORT_MARK.REGISTRATION_SERIES,\n		dbo.VW_IMPORT_MARK.REGISTRATION_NBR,\n		dbo.VW_IMPORT_MARK.REGISTRATION_DUP,\n	"
						+ "	dbo.VW_IMPORT_MARK.REGISTRATION_DATE,\n		dbo.VW_IMPORT_MARK.ENTITLEMENT_DATE,\n		dbo.VW_IMPORT_MARK.EXPIRATION_DATE,\n		db"
						+ "o.VW_IMPORT_MARK.EXHIBITION_DATE,\n		dbo.VW_IMPORT_MARK.EXHIBITION_NOTES,\n		dbo.VW_IMPORT_MARK.SIGN_TYPE,\n		dbo.VW_IMPORT"
						+ "_MARK.MARK_NAME,\n		dbo.VW_IMPORT_MARK.MARK_NAME_LANG2,\n		dbo.VW_IMPORT_MARK.MARK_TRANSLATION,\n		dbo.VW_IMPORT_MARK.MARK_"
						+ "TRANSLATION_LANG2,\n		dbo.VW_IMPORT_MARK.MARK_TRANSLITERATION,\n		dbo.VW_IMPORT_MARK.MARK_TRANSLITERATION_LANG2,\n		dbo.VW_"
						+ "IMPORT_MARK.SERIES_DESCRIPTION,\n		dbo.VW_IMPORT_MARK.COLOUR_DESCRIPTION,\n		dbo.VW_IMPORT_MARK.COLOUR_DESCR_LANG2,\n		dbo."
						+ "VW_IMPORT_MARK.DISCLAIMER,\n		dbo.VW_IMPORT_MARK.DISCLAIMER_LANG2,\n		dbo.VW_IMPORT_MARK.BY_CONSENT,\n		dbo.VW_IMPORT_MARK."
						+ "REGULATIONS,\n		dbo.VW_IMPORT_MARK.NOTES,\n		dbo.VW_IMPORT_MARK.CAPTURE_USER_ID,\n		dbo.VW_IMPORT_MARK.CAPTURE_DATE,\n		dbo."
						+ "VW_IMPORT_MARK.PUBLICATION_NBR,\n		dbo.VW_IMPORT_MARK.PUBLICATION_SER,\n		dbo.VW_IMPORT_MARK.PUBLICATION_TYP\nFROM	dbo.VW_I"
						+ "MPORT_MARK";

				globalMap.put("tDBInput_45_QUERY", dbquery_tDBInput_45);
				java.sql.ResultSet rs_tDBInput_45 = null;

				try {
					rs_tDBInput_45 = stmt_tDBInput_45.executeQuery(dbquery_tDBInput_45);
					java.sql.ResultSetMetaData rsmd_tDBInput_45 = rs_tDBInput_45.getMetaData();
					int colQtyInRs_tDBInput_45 = rsmd_tDBInput_45.getColumnCount();

					String tmpContent_tDBInput_45 = null;

					while (rs_tDBInput_45.next()) {
						nb_line_tDBInput_45++;

						if (colQtyInRs_tDBInput_45 < 1) {
							row3.FILE_SEQ = null;
						} else {

							tmpContent_tDBInput_45 = rs_tDBInput_45.getString(1);
							if (tmpContent_tDBInput_45 != null) {
								if (talendToDBList_tDBInput_45.contains(
										rsmd_tDBInput_45.getColumnTypeName(1).toUpperCase(java.util.Locale.ENGLISH))) {
									row3.FILE_SEQ = FormatterUtils.formatUnwithE(tmpContent_tDBInput_45);
								} else {
									row3.FILE_SEQ = tmpContent_tDBInput_45;
								}
							} else {
								row3.FILE_SEQ = null;
							}
						}
						if (colQtyInRs_tDBInput_45 < 2) {
							row3.FILE_TYPE = null;
						} else {

							tmpContent_tDBInput_45 = rs_tDBInput_45.getString(2);
							if (tmpContent_tDBInput_45 != null) {
								if (talendToDBList_tDBInput_45.contains(
										rsmd_tDBInput_45.getColumnTypeName(2).toUpperCase(java.util.Locale.ENGLISH))) {
									row3.FILE_TYPE = FormatterUtils.formatUnwithE(tmpContent_tDBInput_45);
								} else {
									row3.FILE_TYPE = tmpContent_tDBInput_45;
								}
							} else {
								row3.FILE_TYPE = null;
							}
						}
						if (colQtyInRs_tDBInput_45 < 3) {
							row3.FILE_SERIES = null;
						} else {

							row3.FILE_SERIES = rs_tDBInput_45.getBigDecimal(3);
							if (rs_tDBInput_45.wasNull()) {
								throw new RuntimeException("Null value in non-Nullable column");
							}
						}
						if (colQtyInRs_tDBInput_45 < 4) {
							row3.FILE_NBR = null;
						} else {

							row3.FILE_NBR = rs_tDBInput_45.getBigDecimal(4);
							if (rs_tDBInput_45.wasNull()) {
								throw new RuntimeException("Null value in non-Nullable column");
							}
						}
						if (colQtyInRs_tDBInput_45 < 5) {
							row3.DOC_ORI = null;
						} else {

							tmpContent_tDBInput_45 = rs_tDBInput_45.getString(5);
							if (tmpContent_tDBInput_45 != null) {
								if (talendToDBList_tDBInput_45.contains(
										rsmd_tDBInput_45.getColumnTypeName(5).toUpperCase(java.util.Locale.ENGLISH))) {
									row3.DOC_ORI = FormatterUtils.formatUnwithE(tmpContent_tDBInput_45);
								} else {
									row3.DOC_ORI = tmpContent_tDBInput_45;
								}
							} else {
								row3.DOC_ORI = null;
							}
						}
						if (colQtyInRs_tDBInput_45 < 6) {
							row3.DOC_SERIES = null;
						} else {

							row3.DOC_SERIES = rs_tDBInput_45.getBigDecimal(6);
							if (rs_tDBInput_45.wasNull()) {
								row3.DOC_SERIES = null;
							}
						}
						if (colQtyInRs_tDBInput_45 < 7) {
							row3.DOC_NBR = null;
						} else {

							row3.DOC_NBR = rs_tDBInput_45.getBigDecimal(7);
							if (rs_tDBInput_45.wasNull()) {
								row3.DOC_NBR = null;
							}
						}
						if (colQtyInRs_tDBInput_45 < 8) {
							row3.IND_IMPORT = null;
						} else {

							row3.IND_IMPORT = rs_tDBInput_45.getBigDecimal(8);
							if (rs_tDBInput_45.wasNull()) {
								row3.IND_IMPORT = null;
							}
						}
						if (colQtyInRs_tDBInput_45 < 9) {
							row3.APPLICATION_TYPE = null;
						} else {

							tmpContent_tDBInput_45 = rs_tDBInput_45.getString(9);
							if (tmpContent_tDBInput_45 != null) {
								if (talendToDBList_tDBInput_45.contains(
										rsmd_tDBInput_45.getColumnTypeName(9).toUpperCase(java.util.Locale.ENGLISH))) {
									row3.APPLICATION_TYPE = FormatterUtils.formatUnwithE(tmpContent_tDBInput_45);
								} else {
									row3.APPLICATION_TYPE = tmpContent_tDBInput_45;
								}
							} else {
								row3.APPLICATION_TYPE = null;
							}
						}
						if (colQtyInRs_tDBInput_45 < 10) {
							row3.APPLICATION_SUBTYPE = null;
						} else {

							tmpContent_tDBInput_45 = rs_tDBInput_45.getString(10);
							if (tmpContent_tDBInput_45 != null) {
								if (talendToDBList_tDBInput_45.contains(
										rsmd_tDBInput_45.getColumnTypeName(10).toUpperCase(java.util.Locale.ENGLISH))) {
									row3.APPLICATION_SUBTYPE = FormatterUtils.formatUnwithE(tmpContent_tDBInput_45);
								} else {
									row3.APPLICATION_SUBTYPE = tmpContent_tDBInput_45;
								}
							} else {
								row3.APPLICATION_SUBTYPE = null;
							}
						}
						if (colQtyInRs_tDBInput_45 < 11) {
							row3.LAW_CODE = null;
						} else {

							row3.LAW_CODE = rs_tDBInput_45.getBigDecimal(11);
							if (rs_tDBInput_45.wasNull()) {
								throw new RuntimeException("Null value in non-Nullable column");
							}
						}
						if (colQtyInRs_tDBInput_45 < 12) {
							row3.FILING_DATE = null;
						} else {

							row3.FILING_DATE = mssqlGTU_tDBInput_45.getDate(rsmd_tDBInput_45, rs_tDBInput_45, 12);

						}
						if (colQtyInRs_tDBInput_45 < 13) {
							row3.RECEPTION_DATE = null;
						} else {

							row3.RECEPTION_DATE = mssqlGTU_tDBInput_45.getDate(rsmd_tDBInput_45, rs_tDBInput_45, 13);

						}
						if (colQtyInRs_tDBInput_45 < 14) {
							row3.PUBLICATION_DATE = null;
						} else {

							row3.PUBLICATION_DATE = mssqlGTU_tDBInput_45.getDate(rsmd_tDBInput_45, rs_tDBInput_45, 14);

						}
						if (colQtyInRs_tDBInput_45 < 15) {
							row3.PUBLICATION_NOTES = null;
						} else {

							tmpContent_tDBInput_45 = rs_tDBInput_45.getString(15);
							if (tmpContent_tDBInput_45 != null) {
								if (talendToDBList_tDBInput_45.contains(
										rsmd_tDBInput_45.getColumnTypeName(15).toUpperCase(java.util.Locale.ENGLISH))) {
									row3.PUBLICATION_NOTES = FormatterUtils.formatUnwithE(tmpContent_tDBInput_45);
								} else {
									row3.PUBLICATION_NOTES = tmpContent_tDBInput_45;
								}
							} else {
								row3.PUBLICATION_NOTES = null;
							}
						}
						if (colQtyInRs_tDBInput_45 < 16) {
							row3.IND_REGISTERED = null;
						} else {

							row3.IND_REGISTERED = rs_tDBInput_45.getBigDecimal(16);
							if (rs_tDBInput_45.wasNull()) {
								row3.IND_REGISTERED = null;
							}
						}
						if (colQtyInRs_tDBInput_45 < 17) {
							row3.REGISTRATION_TYPE = null;
						} else {

							tmpContent_tDBInput_45 = rs_tDBInput_45.getString(17);
							if (tmpContent_tDBInput_45 != null) {
								if (talendToDBList_tDBInput_45.contains(
										rsmd_tDBInput_45.getColumnTypeName(17).toUpperCase(java.util.Locale.ENGLISH))) {
									row3.REGISTRATION_TYPE = FormatterUtils.formatUnwithE(tmpContent_tDBInput_45);
								} else {
									row3.REGISTRATION_TYPE = tmpContent_tDBInput_45;
								}
							} else {
								row3.REGISTRATION_TYPE = null;
							}
						}
						if (colQtyInRs_tDBInput_45 < 18) {
							row3.REGISTRATION_SERIES = null;
						} else {

							row3.REGISTRATION_SERIES = rs_tDBInput_45.getBigDecimal(18);
							if (rs_tDBInput_45.wasNull()) {
								row3.REGISTRATION_SERIES = null;
							}
						}
						if (colQtyInRs_tDBInput_45 < 19) {
							row3.REGISTRATION_NBR = null;
						} else {

							row3.REGISTRATION_NBR = rs_tDBInput_45.getBigDecimal(19);
							if (rs_tDBInput_45.wasNull()) {
								row3.REGISTRATION_NBR = null;
							}
						}
						if (colQtyInRs_tDBInput_45 < 20) {
							row3.REGISTRATION_DUP = null;
						} else {

							tmpContent_tDBInput_45 = rs_tDBInput_45.getString(20);
							if (tmpContent_tDBInput_45 != null) {
								if (talendToDBList_tDBInput_45.contains(
										rsmd_tDBInput_45.getColumnTypeName(20).toUpperCase(java.util.Locale.ENGLISH))) {
									row3.REGISTRATION_DUP = FormatterUtils.formatUnwithE(tmpContent_tDBInput_45);
								} else {
									row3.REGISTRATION_DUP = tmpContent_tDBInput_45;
								}
							} else {
								row3.REGISTRATION_DUP = null;
							}
						}
						if (colQtyInRs_tDBInput_45 < 21) {
							row3.REGISTRATION_DATE = null;
						} else {

							row3.REGISTRATION_DATE = mssqlGTU_tDBInput_45.getDate(rsmd_tDBInput_45, rs_tDBInput_45, 21);

						}
						if (colQtyInRs_tDBInput_45 < 22) {
							row3.ENTITLEMENT_DATE = null;
						} else {

							row3.ENTITLEMENT_DATE = mssqlGTU_tDBInput_45.getDate(rsmd_tDBInput_45, rs_tDBInput_45, 22);

						}
						if (colQtyInRs_tDBInput_45 < 23) {
							row3.EXPIRATION_DATE = null;
						} else {

							row3.EXPIRATION_DATE = mssqlGTU_tDBInput_45.getDate(rsmd_tDBInput_45, rs_tDBInput_45, 23);

						}
						if (colQtyInRs_tDBInput_45 < 24) {
							row3.EXHIBITION_DATE = null;
						} else {

							row3.EXHIBITION_DATE = mssqlGTU_tDBInput_45.getDate(rsmd_tDBInput_45, rs_tDBInput_45, 24);

						}
						if (colQtyInRs_tDBInput_45 < 25) {
							row3.EXHIBITION_NOTES = null;
						} else {

							tmpContent_tDBInput_45 = rs_tDBInput_45.getString(25);
							if (tmpContent_tDBInput_45 != null) {
								if (talendToDBList_tDBInput_45.contains(
										rsmd_tDBInput_45.getColumnTypeName(25).toUpperCase(java.util.Locale.ENGLISH))) {
									row3.EXHIBITION_NOTES = FormatterUtils.formatUnwithE(tmpContent_tDBInput_45);
								} else {
									row3.EXHIBITION_NOTES = tmpContent_tDBInput_45;
								}
							} else {
								row3.EXHIBITION_NOTES = null;
							}
						}
						if (colQtyInRs_tDBInput_45 < 26) {
							row3.SIGN_TYPE = null;
						} else {

							tmpContent_tDBInput_45 = rs_tDBInput_45.getString(26);
							if (tmpContent_tDBInput_45 != null) {
								if (talendToDBList_tDBInput_45.contains(
										rsmd_tDBInput_45.getColumnTypeName(26).toUpperCase(java.util.Locale.ENGLISH))) {
									row3.SIGN_TYPE = FormatterUtils.formatUnwithE(tmpContent_tDBInput_45);
								} else {
									row3.SIGN_TYPE = tmpContent_tDBInput_45;
								}
							} else {
								row3.SIGN_TYPE = null;
							}
						}
						if (colQtyInRs_tDBInput_45 < 27) {
							row3.MARK_NAME = null;
						} else {

							tmpContent_tDBInput_45 = rs_tDBInput_45.getString(27);
							if (tmpContent_tDBInput_45 != null) {
								if (talendToDBList_tDBInput_45.contains(
										rsmd_tDBInput_45.getColumnTypeName(27).toUpperCase(java.util.Locale.ENGLISH))) {
									row3.MARK_NAME = FormatterUtils.formatUnwithE(tmpContent_tDBInput_45);
								} else {
									row3.MARK_NAME = tmpContent_tDBInput_45;
								}
							} else {
								row3.MARK_NAME = null;
							}
						}
						if (colQtyInRs_tDBInput_45 < 28) {
							row3.MARK_NAME_LANG2 = null;
						} else {

							tmpContent_tDBInput_45 = rs_tDBInput_45.getString(28);
							if (tmpContent_tDBInput_45 != null) {
								if (talendToDBList_tDBInput_45.contains(
										rsmd_tDBInput_45.getColumnTypeName(28).toUpperCase(java.util.Locale.ENGLISH))) {
									row3.MARK_NAME_LANG2 = FormatterUtils.formatUnwithE(tmpContent_tDBInput_45);
								} else {
									row3.MARK_NAME_LANG2 = tmpContent_tDBInput_45;
								}
							} else {
								row3.MARK_NAME_LANG2 = null;
							}
						}
						if (colQtyInRs_tDBInput_45 < 29) {
							row3.MARK_TRANSLATION = null;
						} else {

							tmpContent_tDBInput_45 = rs_tDBInput_45.getString(29);
							if (tmpContent_tDBInput_45 != null) {
								if (talendToDBList_tDBInput_45.contains(
										rsmd_tDBInput_45.getColumnTypeName(29).toUpperCase(java.util.Locale.ENGLISH))) {
									row3.MARK_TRANSLATION = FormatterUtils.formatUnwithE(tmpContent_tDBInput_45);
								} else {
									row3.MARK_TRANSLATION = tmpContent_tDBInput_45;
								}
							} else {
								row3.MARK_TRANSLATION = null;
							}
						}
						if (colQtyInRs_tDBInput_45 < 30) {
							row3.MARK_TRANSLATION_LANG2 = null;
						} else {

							tmpContent_tDBInput_45 = rs_tDBInput_45.getString(30);
							if (tmpContent_tDBInput_45 != null) {
								if (talendToDBList_tDBInput_45.contains(
										rsmd_tDBInput_45.getColumnTypeName(30).toUpperCase(java.util.Locale.ENGLISH))) {
									row3.MARK_TRANSLATION_LANG2 = FormatterUtils.formatUnwithE(tmpContent_tDBInput_45);
								} else {
									row3.MARK_TRANSLATION_LANG2 = tmpContent_tDBInput_45;
								}
							} else {
								row3.MARK_TRANSLATION_LANG2 = null;
							}
						}
						if (colQtyInRs_tDBInput_45 < 31) {
							row3.MARK_TRANSLITERATION = null;
						} else {

							tmpContent_tDBInput_45 = rs_tDBInput_45.getString(31);
							if (tmpContent_tDBInput_45 != null) {
								if (talendToDBList_tDBInput_45.contains(
										rsmd_tDBInput_45.getColumnTypeName(31).toUpperCase(java.util.Locale.ENGLISH))) {
									row3.MARK_TRANSLITERATION = FormatterUtils.formatUnwithE(tmpContent_tDBInput_45);
								} else {
									row3.MARK_TRANSLITERATION = tmpContent_tDBInput_45;
								}
							} else {
								row3.MARK_TRANSLITERATION = null;
							}
						}
						if (colQtyInRs_tDBInput_45 < 32) {
							row3.MARK_TRANSLITERATION_LANG2 = null;
						} else {

							tmpContent_tDBInput_45 = rs_tDBInput_45.getString(32);
							if (tmpContent_tDBInput_45 != null) {
								if (talendToDBList_tDBInput_45.contains(
										rsmd_tDBInput_45.getColumnTypeName(32).toUpperCase(java.util.Locale.ENGLISH))) {
									row3.MARK_TRANSLITERATION_LANG2 = FormatterUtils
											.formatUnwithE(tmpContent_tDBInput_45);
								} else {
									row3.MARK_TRANSLITERATION_LANG2 = tmpContent_tDBInput_45;
								}
							} else {
								row3.MARK_TRANSLITERATION_LANG2 = null;
							}
						}
						if (colQtyInRs_tDBInput_45 < 33) {
							row3.SERIES_DESCRIPTION = null;
						} else {

							tmpContent_tDBInput_45 = rs_tDBInput_45.getString(33);
							if (tmpContent_tDBInput_45 != null) {
								if (talendToDBList_tDBInput_45.contains(
										rsmd_tDBInput_45.getColumnTypeName(33).toUpperCase(java.util.Locale.ENGLISH))) {
									row3.SERIES_DESCRIPTION = FormatterUtils.formatUnwithE(tmpContent_tDBInput_45);
								} else {
									row3.SERIES_DESCRIPTION = tmpContent_tDBInput_45;
								}
							} else {
								row3.SERIES_DESCRIPTION = null;
							}
						}
						if (colQtyInRs_tDBInput_45 < 34) {
							row3.COLOUR_DESCRIPTION = null;
						} else {

							tmpContent_tDBInput_45 = rs_tDBInput_45.getString(34);
							if (tmpContent_tDBInput_45 != null) {
								if (talendToDBList_tDBInput_45.contains(
										rsmd_tDBInput_45.getColumnTypeName(34).toUpperCase(java.util.Locale.ENGLISH))) {
									row3.COLOUR_DESCRIPTION = FormatterUtils.formatUnwithE(tmpContent_tDBInput_45);
								} else {
									row3.COLOUR_DESCRIPTION = tmpContent_tDBInput_45;
								}
							} else {
								row3.COLOUR_DESCRIPTION = null;
							}
						}
						if (colQtyInRs_tDBInput_45 < 35) {
							row3.COLOUR_DESCR_LANG2 = null;
						} else {

							tmpContent_tDBInput_45 = rs_tDBInput_45.getString(35);
							if (tmpContent_tDBInput_45 != null) {
								if (talendToDBList_tDBInput_45.contains(
										rsmd_tDBInput_45.getColumnTypeName(35).toUpperCase(java.util.Locale.ENGLISH))) {
									row3.COLOUR_DESCR_LANG2 = FormatterUtils.formatUnwithE(tmpContent_tDBInput_45);
								} else {
									row3.COLOUR_DESCR_LANG2 = tmpContent_tDBInput_45;
								}
							} else {
								row3.COLOUR_DESCR_LANG2 = null;
							}
						}
						if (colQtyInRs_tDBInput_45 < 36) {
							row3.DISCLAIMER = null;
						} else {

							tmpContent_tDBInput_45 = rs_tDBInput_45.getString(36);
							if (tmpContent_tDBInput_45 != null) {
								if (talendToDBList_tDBInput_45.contains(
										rsmd_tDBInput_45.getColumnTypeName(36).toUpperCase(java.util.Locale.ENGLISH))) {
									row3.DISCLAIMER = FormatterUtils.formatUnwithE(tmpContent_tDBInput_45);
								} else {
									row3.DISCLAIMER = tmpContent_tDBInput_45;
								}
							} else {
								row3.DISCLAIMER = null;
							}
						}
						if (colQtyInRs_tDBInput_45 < 37) {
							row3.DISCLAIMER_LANG2 = null;
						} else {

							tmpContent_tDBInput_45 = rs_tDBInput_45.getString(37);
							if (tmpContent_tDBInput_45 != null) {
								if (talendToDBList_tDBInput_45.contains(
										rsmd_tDBInput_45.getColumnTypeName(37).toUpperCase(java.util.Locale.ENGLISH))) {
									row3.DISCLAIMER_LANG2 = FormatterUtils.formatUnwithE(tmpContent_tDBInput_45);
								} else {
									row3.DISCLAIMER_LANG2 = tmpContent_tDBInput_45;
								}
							} else {
								row3.DISCLAIMER_LANG2 = null;
							}
						}
						if (colQtyInRs_tDBInput_45 < 38) {
							row3.BY_CONSENT = null;
						} else {

							tmpContent_tDBInput_45 = rs_tDBInput_45.getString(38);
							if (tmpContent_tDBInput_45 != null) {
								if (talendToDBList_tDBInput_45.contains(
										rsmd_tDBInput_45.getColumnTypeName(38).toUpperCase(java.util.Locale.ENGLISH))) {
									row3.BY_CONSENT = FormatterUtils.formatUnwithE(tmpContent_tDBInput_45);
								} else {
									row3.BY_CONSENT = tmpContent_tDBInput_45;
								}
							} else {
								row3.BY_CONSENT = null;
							}
						}
						if (colQtyInRs_tDBInput_45 < 39) {
							row3.REGULATIONS = null;
						} else {

							tmpContent_tDBInput_45 = rs_tDBInput_45.getString(39);
							if (tmpContent_tDBInput_45 != null) {
								if (talendToDBList_tDBInput_45.contains(
										rsmd_tDBInput_45.getColumnTypeName(39).toUpperCase(java.util.Locale.ENGLISH))) {
									row3.REGULATIONS = FormatterUtils.formatUnwithE(tmpContent_tDBInput_45);
								} else {
									row3.REGULATIONS = tmpContent_tDBInput_45;
								}
							} else {
								row3.REGULATIONS = null;
							}
						}
						if (colQtyInRs_tDBInput_45 < 40) {
							row3.NOTES = null;
						} else {

							tmpContent_tDBInput_45 = rs_tDBInput_45.getString(40);
							if (tmpContent_tDBInput_45 != null) {
								if (talendToDBList_tDBInput_45.contains(
										rsmd_tDBInput_45.getColumnTypeName(40).toUpperCase(java.util.Locale.ENGLISH))) {
									row3.NOTES = FormatterUtils.formatUnwithE(tmpContent_tDBInput_45);
								} else {
									row3.NOTES = tmpContent_tDBInput_45;
								}
							} else {
								row3.NOTES = null;
							}
						}
						if (colQtyInRs_tDBInput_45 < 41) {
							row3.CAPTURE_USER_ID = null;
						} else {

							row3.CAPTURE_USER_ID = rs_tDBInput_45.getBigDecimal(41);
							if (rs_tDBInput_45.wasNull()) {
								row3.CAPTURE_USER_ID = null;
							}
						}
						if (colQtyInRs_tDBInput_45 < 42) {
							row3.CAPTURE_DATE = null;
						} else {

							row3.CAPTURE_DATE = mssqlGTU_tDBInput_45.getDate(rsmd_tDBInput_45, rs_tDBInput_45, 42);

						}
						if (colQtyInRs_tDBInput_45 < 43) {
							row3.PUBLICATION_NBR = null;
						} else {

							row3.PUBLICATION_NBR = rs_tDBInput_45.getBigDecimal(43);
							if (rs_tDBInput_45.wasNull()) {
								row3.PUBLICATION_NBR = null;
							}
						}
						if (colQtyInRs_tDBInput_45 < 44) {
							row3.PUBLICATION_SER = null;
						} else {

							tmpContent_tDBInput_45 = rs_tDBInput_45.getString(44);
							if (tmpContent_tDBInput_45 != null) {
								if (talendToDBList_tDBInput_45.contains(
										rsmd_tDBInput_45.getColumnTypeName(44).toUpperCase(java.util.Locale.ENGLISH))) {
									row3.PUBLICATION_SER = FormatterUtils.formatUnwithE(tmpContent_tDBInput_45);
								} else {
									row3.PUBLICATION_SER = tmpContent_tDBInput_45;
								}
							} else {
								row3.PUBLICATION_SER = null;
							}
						}
						if (colQtyInRs_tDBInput_45 < 45) {
							row3.PUBLICATION_TYP = null;
						} else {

							tmpContent_tDBInput_45 = rs_tDBInput_45.getString(45);
							if (tmpContent_tDBInput_45 != null) {
								if (talendToDBList_tDBInput_45.contains(
										rsmd_tDBInput_45.getColumnTypeName(45).toUpperCase(java.util.Locale.ENGLISH))) {
									row3.PUBLICATION_TYP = FormatterUtils.formatUnwithE(tmpContent_tDBInput_45);
								} else {
									row3.PUBLICATION_TYP = tmpContent_tDBInput_45;
								}
							} else {
								row3.PUBLICATION_TYP = null;
							}
						}

						/**
						 * [tDBInput_45 begin ] stop
						 */

						/**
						 * [tDBInput_45 main ] start
						 */

						currentComponent = "tDBInput_45";

						tos_count_tDBInput_45++;

						/**
						 * [tDBInput_45 main ] stop
						 */

						/**
						 * [tDBInput_45 process_data_begin ] start
						 */

						currentComponent = "tDBInput_45";

						/**
						 * [tDBInput_45 process_data_begin ] stop
						 */

						/**
						 * [tMap_3 main ] start
						 */

						currentComponent = "tMap_3";

						if (execStat) {
							runStat.updateStatOnConnection(iterateId, 1, 1

									, "row3"

							);
						}

						boolean hasCasePrimitiveKeyWithNull_tMap_3 = false;

						// ###############################
						// # Input tables (lookups)
						boolean rejectedInnerJoin_tMap_3 = false;
						boolean mainRowRejected_tMap_3 = false;

						// ###############################
						{ // start of Var scope

							// ###############################
							// # Vars tables

							Var__tMap_3__Struct Var = Var__tMap_3;// ###############################
							// ###############################
							// # Output tables

							to_wrk_m = null;

// # Output table : 'to_wrk_m'
							to_wrk_m_tmp.FILE_SEQ = row3.FILE_SEQ;
							to_wrk_m_tmp.FILE_TYPE = row3.FILE_TYPE;
							to_wrk_m_tmp.FILE_SERIES = row3.FILE_SERIES;
							to_wrk_m_tmp.FILE_NBR = row3.FILE_NBR;
							to_wrk_m_tmp.DOC_ORI = row3.DOC_ORI;
							to_wrk_m_tmp.DOC_SERIES = row3.DOC_SERIES;
							to_wrk_m_tmp.DOC_NBR = row3.DOC_NBR;
							to_wrk_m_tmp.IND_IMPORT = row3.IND_IMPORT;
							to_wrk_m_tmp.APPLICATION_TYPE = row3.APPLICATION_TYPE;
							to_wrk_m_tmp.APPLICATION_SUBTYPE = row3.APPLICATION_SUBTYPE;
							to_wrk_m_tmp.LAW_CODE = row3.LAW_CODE;
							to_wrk_m_tmp.FILING_DATE = row3.FILING_DATE;
							to_wrk_m_tmp.RECEPTION_DATE = row3.RECEPTION_DATE;
							to_wrk_m_tmp.PUBLICATION_DATE = row3.PUBLICATION_DATE;
							to_wrk_m_tmp.PUBLICATION_NOTES = row3.PUBLICATION_NOTES;
							to_wrk_m_tmp.IND_REGISTERED = row3.IND_REGISTERED;
							to_wrk_m_tmp.REGISTRATION_TYPE = row3.REGISTRATION_TYPE;
							to_wrk_m_tmp.REGISTRATION_SERIES = row3.REGISTRATION_SERIES;
							to_wrk_m_tmp.REGISTRATION_NBR = row3.REGISTRATION_NBR;
							to_wrk_m_tmp.REGISTRATION_DUP = row3.REGISTRATION_DUP;
							to_wrk_m_tmp.REGISTRATION_DATE = row3.REGISTRATION_DATE;
							to_wrk_m_tmp.ENTITLEMENT_DATE = row3.ENTITLEMENT_DATE;
							to_wrk_m_tmp.EXPIRATION_DATE = row3.EXPIRATION_DATE;
							to_wrk_m_tmp.EXHIBITION_DATE = row3.EXHIBITION_DATE;
							to_wrk_m_tmp.EXHIBITION_NOTES = row3.EXHIBITION_NOTES;
							to_wrk_m_tmp.SIGN_TYPE = row3.SIGN_TYPE;
							to_wrk_m_tmp.MARK_NAME = row3.MARK_NAME;
							to_wrk_m_tmp.MARK_NAME_LANG2 = row3.MARK_NAME_LANG2;
							to_wrk_m_tmp.MARK_TRANSLATION = row3.MARK_TRANSLATION;
							to_wrk_m_tmp.MARK_TRANSLATION_LANG2 = row3.MARK_TRANSLATION_LANG2;
							to_wrk_m_tmp.MARK_TRANSLITERATION = row3.MARK_TRANSLITERATION;
							to_wrk_m_tmp.MARK_TRANSLITERATION_LANG2 = row3.MARK_TRANSLITERATION_LANG2;
							to_wrk_m_tmp.SERIES_DESCRIPTION = row3.SERIES_DESCRIPTION;
							to_wrk_m_tmp.COLOUR_DESCRIPTION = row3.COLOUR_DESCRIPTION;
							to_wrk_m_tmp.COLOUR_DESCR_LANG2 = row3.COLOUR_DESCR_LANG2;
							to_wrk_m_tmp.DISCLAIMER = row3.DISCLAIMER;
							to_wrk_m_tmp.DISCLAIMER_LANG2 = row3.DISCLAIMER_LANG2;
							to_wrk_m_tmp.BY_CONSENT = row3.BY_CONSENT;
							to_wrk_m_tmp.REGULATIONS = row3.REGULATIONS;
							to_wrk_m_tmp.NOTES = row3.NOTES;
							to_wrk_m_tmp.CAPTURE_USER_ID = row3.CAPTURE_USER_ID;
							to_wrk_m_tmp.CAPTURE_DATE = row3.CAPTURE_DATE;
							to_wrk_m_tmp.PUBLICATION_NBR = row3.PUBLICATION_NBR;
							to_wrk_m_tmp.PUBLICATION_SER = row3.PUBLICATION_SER;
							to_wrk_m_tmp.PUBLICATION_TYP = row3.PUBLICATION_TYP;
							to_wrk_m_tmp.FIRST_PRIORITY_DATE = null;
							to_wrk_m_tmp.MAIN_OWNER_ADDR_NBR = null;
							to_wrk_m_tmp.MAIN_OWNER_PERSON_NBR = null;
							to_wrk_m_tmp.SERVICE_ADDR_NBR = null;
							to_wrk_m_tmp.SERVICE_PERSON_NBR = null;
							to_wrk_m_tmp.NICE_CLASS_TXT = null;
							to_wrk_m_tmp.MARK_CODE = null;
							to_wrk_m_tmp.PROC_TYP = null;
							to_wrk_m_tmp.PROC_NBR = null;
							to_wrk_m_tmp.STATUS_CODE = null;
							to_wrk_m = to_wrk_m_tmp;
// ###############################

						} // end of Var scope

						rejectedInnerJoin_tMap_3 = false;

						tos_count_tMap_3++;

						/**
						 * [tMap_3 main ] stop
						 */

						/**
						 * [tMap_3 process_data_begin ] start
						 */

						currentComponent = "tMap_3";

						/**
						 * [tMap_3 process_data_begin ] stop
						 */
// Start of branch "to_wrk_m"
						if (to_wrk_m != null) {
							row4 = null;

							/**
							 * [tDBOutput_3 main ] start
							 */

							currentComponent = "tDBOutput_3";

							if (execStat) {
								runStat.updateStatOnConnection(iterateId, 1, 1

										, "to_wrk_m"

								);
							}

							row4 = null;
							whetherReject_tDBOutput_3 = false;
							try {
								if (to_wrk_m.FILE_SEQ == null) {
									pstmt_tDBOutput_3.setNull(1, java.sql.Types.VARCHAR);
								} else {
									pstmt_tDBOutput_3.setString(1, to_wrk_m.FILE_SEQ);
								}

								if (to_wrk_m.FILE_TYPE == null) {
									pstmt_tDBOutput_3.setNull(2, java.sql.Types.VARCHAR);
								} else {
									pstmt_tDBOutput_3.setString(2, to_wrk_m.FILE_TYPE);
								}

								pstmt_tDBOutput_3.setBigDecimal(3, to_wrk_m.FILE_SERIES);

								pstmt_tDBOutput_3.setBigDecimal(4, to_wrk_m.FILE_NBR);

								if (to_wrk_m.DOC_ORI == null) {
									pstmt_tDBOutput_3.setNull(5, java.sql.Types.VARCHAR);
								} else {
									pstmt_tDBOutput_3.setString(5, to_wrk_m.DOC_ORI);
								}

								pstmt_tDBOutput_3.setBigDecimal(6, to_wrk_m.DOC_SERIES);

								pstmt_tDBOutput_3.setBigDecimal(7, to_wrk_m.DOC_NBR);

								pstmt_tDBOutput_3.setBigDecimal(8, to_wrk_m.IND_IMPORT);

								if (to_wrk_m.APPLICATION_TYPE == null) {
									pstmt_tDBOutput_3.setNull(9, java.sql.Types.VARCHAR);
								} else {
									pstmt_tDBOutput_3.setString(9, to_wrk_m.APPLICATION_TYPE);
								}

								if (to_wrk_m.APPLICATION_SUBTYPE == null) {
									pstmt_tDBOutput_3.setNull(10, java.sql.Types.VARCHAR);
								} else {
									pstmt_tDBOutput_3.setString(10, to_wrk_m.APPLICATION_SUBTYPE);
								}

								pstmt_tDBOutput_3.setBigDecimal(11, to_wrk_m.LAW_CODE);

								if (to_wrk_m.FILING_DATE != null) {
									pstmt_tDBOutput_3.setTimestamp(12,
											new java.sql.Timestamp(to_wrk_m.FILING_DATE.getTime()));
								} else {
									pstmt_tDBOutput_3.setNull(12, java.sql.Types.TIMESTAMP);
								}

								if (to_wrk_m.RECEPTION_DATE != null) {
									pstmt_tDBOutput_3.setTimestamp(13,
											new java.sql.Timestamp(to_wrk_m.RECEPTION_DATE.getTime()));
								} else {
									pstmt_tDBOutput_3.setNull(13, java.sql.Types.TIMESTAMP);
								}

								if (to_wrk_m.PUBLICATION_DATE != null) {
									pstmt_tDBOutput_3.setTimestamp(14,
											new java.sql.Timestamp(to_wrk_m.PUBLICATION_DATE.getTime()));
								} else {
									pstmt_tDBOutput_3.setNull(14, java.sql.Types.TIMESTAMP);
								}

								if (to_wrk_m.PUBLICATION_NOTES == null) {
									pstmt_tDBOutput_3.setNull(15, java.sql.Types.VARCHAR);
								} else {
									pstmt_tDBOutput_3.setString(15, to_wrk_m.PUBLICATION_NOTES);
								}

								pstmt_tDBOutput_3.setBigDecimal(16, to_wrk_m.IND_REGISTERED);

								if (to_wrk_m.REGISTRATION_TYPE == null) {
									pstmt_tDBOutput_3.setNull(17, java.sql.Types.VARCHAR);
								} else {
									pstmt_tDBOutput_3.setString(17, to_wrk_m.REGISTRATION_TYPE);
								}

								pstmt_tDBOutput_3.setBigDecimal(18, to_wrk_m.REGISTRATION_SERIES);

								pstmt_tDBOutput_3.setBigDecimal(19, to_wrk_m.REGISTRATION_NBR);

								if (to_wrk_m.REGISTRATION_DUP == null) {
									pstmt_tDBOutput_3.setNull(20, java.sql.Types.VARCHAR);
								} else {
									pstmt_tDBOutput_3.setString(20, to_wrk_m.REGISTRATION_DUP);
								}

								if (to_wrk_m.REGISTRATION_DATE != null) {
									pstmt_tDBOutput_3.setTimestamp(21,
											new java.sql.Timestamp(to_wrk_m.REGISTRATION_DATE.getTime()));
								} else {
									pstmt_tDBOutput_3.setNull(21, java.sql.Types.TIMESTAMP);
								}

								if (to_wrk_m.ENTITLEMENT_DATE != null) {
									pstmt_tDBOutput_3.setTimestamp(22,
											new java.sql.Timestamp(to_wrk_m.ENTITLEMENT_DATE.getTime()));
								} else {
									pstmt_tDBOutput_3.setNull(22, java.sql.Types.TIMESTAMP);
								}

								if (to_wrk_m.EXPIRATION_DATE != null) {
									pstmt_tDBOutput_3.setTimestamp(23,
											new java.sql.Timestamp(to_wrk_m.EXPIRATION_DATE.getTime()));
								} else {
									pstmt_tDBOutput_3.setNull(23, java.sql.Types.TIMESTAMP);
								}

								if (to_wrk_m.EXHIBITION_DATE != null) {
									pstmt_tDBOutput_3.setTimestamp(24,
											new java.sql.Timestamp(to_wrk_m.EXHIBITION_DATE.getTime()));
								} else {
									pstmt_tDBOutput_3.setNull(24, java.sql.Types.TIMESTAMP);
								}

								if (to_wrk_m.EXHIBITION_NOTES == null) {
									pstmt_tDBOutput_3.setNull(25, java.sql.Types.VARCHAR);
								} else {
									pstmt_tDBOutput_3.setString(25, to_wrk_m.EXHIBITION_NOTES);
								}

								if (to_wrk_m.SIGN_TYPE == null) {
									pstmt_tDBOutput_3.setNull(26, java.sql.Types.VARCHAR);
								} else {
									pstmt_tDBOutput_3.setString(26, to_wrk_m.SIGN_TYPE);
								}

								if (to_wrk_m.MARK_NAME == null) {
									pstmt_tDBOutput_3.setNull(27, java.sql.Types.VARCHAR);
								} else {
									pstmt_tDBOutput_3.setString(27, to_wrk_m.MARK_NAME);
								}

								if (to_wrk_m.MARK_NAME_LANG2 == null) {
									pstmt_tDBOutput_3.setNull(28, java.sql.Types.VARCHAR);
								} else {
									pstmt_tDBOutput_3.setString(28, to_wrk_m.MARK_NAME_LANG2);
								}

								if (to_wrk_m.MARK_TRANSLATION == null) {
									pstmt_tDBOutput_3.setNull(29, java.sql.Types.VARCHAR);
								} else {
									pstmt_tDBOutput_3.setString(29, to_wrk_m.MARK_TRANSLATION);
								}

								if (to_wrk_m.MARK_TRANSLATION_LANG2 == null) {
									pstmt_tDBOutput_3.setNull(30, java.sql.Types.VARCHAR);
								} else {
									pstmt_tDBOutput_3.setString(30, to_wrk_m.MARK_TRANSLATION_LANG2);
								}

								if (to_wrk_m.MARK_TRANSLITERATION == null) {
									pstmt_tDBOutput_3.setNull(31, java.sql.Types.VARCHAR);
								} else {
									pstmt_tDBOutput_3.setString(31, to_wrk_m.MARK_TRANSLITERATION);
								}

								if (to_wrk_m.MARK_TRANSLITERATION_LANG2 == null) {
									pstmt_tDBOutput_3.setNull(32, java.sql.Types.VARCHAR);
								} else {
									pstmt_tDBOutput_3.setString(32, to_wrk_m.MARK_TRANSLITERATION_LANG2);
								}

								if (to_wrk_m.SERIES_DESCRIPTION == null) {
									pstmt_tDBOutput_3.setNull(33, java.sql.Types.VARCHAR);
								} else {
									pstmt_tDBOutput_3.setString(33, to_wrk_m.SERIES_DESCRIPTION);
								}

								if (to_wrk_m.COLOUR_DESCRIPTION == null) {
									pstmt_tDBOutput_3.setNull(34, java.sql.Types.VARCHAR);
								} else {
									pstmt_tDBOutput_3.setString(34, to_wrk_m.COLOUR_DESCRIPTION);
								}

								if (to_wrk_m.COLOUR_DESCR_LANG2 == null) {
									pstmt_tDBOutput_3.setNull(35, java.sql.Types.VARCHAR);
								} else {
									pstmt_tDBOutput_3.setString(35, to_wrk_m.COLOUR_DESCR_LANG2);
								}

								if (to_wrk_m.DISCLAIMER == null) {
									pstmt_tDBOutput_3.setNull(36, java.sql.Types.VARCHAR);
								} else {
									pstmt_tDBOutput_3.setString(36, to_wrk_m.DISCLAIMER);
								}

								if (to_wrk_m.DISCLAIMER_LANG2 == null) {
									pstmt_tDBOutput_3.setNull(37, java.sql.Types.VARCHAR);
								} else {
									pstmt_tDBOutput_3.setString(37, to_wrk_m.DISCLAIMER_LANG2);
								}

								if (to_wrk_m.BY_CONSENT == null) {
									pstmt_tDBOutput_3.setNull(38, java.sql.Types.VARCHAR);
								} else {
									pstmt_tDBOutput_3.setString(38, to_wrk_m.BY_CONSENT);
								}

								if (to_wrk_m.REGULATIONS == null) {
									pstmt_tDBOutput_3.setNull(39, java.sql.Types.VARCHAR);
								} else {
									pstmt_tDBOutput_3.setString(39, to_wrk_m.REGULATIONS);
								}

								if (to_wrk_m.NOTES == null) {
									pstmt_tDBOutput_3.setNull(40, java.sql.Types.VARCHAR);
								} else {
									pstmt_tDBOutput_3.setString(40, to_wrk_m.NOTES);
								}

								pstmt_tDBOutput_3.setBigDecimal(41, to_wrk_m.CAPTURE_USER_ID);

								if (to_wrk_m.CAPTURE_DATE != null) {
									pstmt_tDBOutput_3.setTimestamp(42,
											new java.sql.Timestamp(to_wrk_m.CAPTURE_DATE.getTime()));
								} else {
									pstmt_tDBOutput_3.setNull(42, java.sql.Types.TIMESTAMP);
								}

								pstmt_tDBOutput_3.setBigDecimal(43, to_wrk_m.PUBLICATION_NBR);

								if (to_wrk_m.PUBLICATION_SER == null) {
									pstmt_tDBOutput_3.setNull(44, java.sql.Types.VARCHAR);
								} else {
									pstmt_tDBOutput_3.setString(44, to_wrk_m.PUBLICATION_SER);
								}

								if (to_wrk_m.PUBLICATION_TYP == null) {
									pstmt_tDBOutput_3.setNull(45, java.sql.Types.VARCHAR);
								} else {
									pstmt_tDBOutput_3.setString(45, to_wrk_m.PUBLICATION_TYP);
								}

								if (to_wrk_m.FIRST_PRIORITY_DATE != null) {
									pstmt_tDBOutput_3.setTimestamp(46,
											new java.sql.Timestamp(to_wrk_m.FIRST_PRIORITY_DATE.getTime()));
								} else {
									pstmt_tDBOutput_3.setNull(46, java.sql.Types.TIMESTAMP);
								}

								pstmt_tDBOutput_3.setBigDecimal(47, to_wrk_m.MAIN_OWNER_ADDR_NBR);

								pstmt_tDBOutput_3.setBigDecimal(48, to_wrk_m.MAIN_OWNER_PERSON_NBR);

								pstmt_tDBOutput_3.setBigDecimal(49, to_wrk_m.SERVICE_ADDR_NBR);

								pstmt_tDBOutput_3.setBigDecimal(50, to_wrk_m.SERVICE_PERSON_NBR);

								if (to_wrk_m.NICE_CLASS_TXT == null) {
									pstmt_tDBOutput_3.setNull(51, java.sql.Types.VARCHAR);
								} else {
									pstmt_tDBOutput_3.setString(51, to_wrk_m.NICE_CLASS_TXT);
								}

								pstmt_tDBOutput_3.setBigDecimal(52, to_wrk_m.MARK_CODE);

								if (to_wrk_m.PROC_TYP == null) {
									pstmt_tDBOutput_3.setNull(53, java.sql.Types.VARCHAR);
								} else {
									pstmt_tDBOutput_3.setString(53, to_wrk_m.PROC_TYP);
								}

								pstmt_tDBOutput_3.setBigDecimal(54, to_wrk_m.PROC_NBR);

								if (to_wrk_m.STATUS_CODE == null) {
									pstmt_tDBOutput_3.setNull(55, java.sql.Types.VARCHAR);
								} else {
									pstmt_tDBOutput_3.setString(55, to_wrk_m.STATUS_CODE);
								}

								nb_line_tDBOutput_3++;
								insertedCount_tDBOutput_3 = insertedCount_tDBOutput_3
										+ pstmt_tDBOutput_3.executeUpdate();
							} catch (java.lang.Exception e) {
								whetherReject_tDBOutput_3 = true;
								row4 = new row4Struct();
								row4.FILE_SEQ = to_wrk_m.FILE_SEQ;
								row4.FILE_TYPE = to_wrk_m.FILE_TYPE;
								row4.FILE_SERIES = to_wrk_m.FILE_SERIES;
								row4.FILE_NBR = to_wrk_m.FILE_NBR;
								row4.DOC_ORI = to_wrk_m.DOC_ORI;
								row4.DOC_SERIES = to_wrk_m.DOC_SERIES;
								row4.DOC_NBR = to_wrk_m.DOC_NBR;
								row4.IND_IMPORT = to_wrk_m.IND_IMPORT;
								row4.APPLICATION_TYPE = to_wrk_m.APPLICATION_TYPE;
								row4.APPLICATION_SUBTYPE = to_wrk_m.APPLICATION_SUBTYPE;
								row4.LAW_CODE = to_wrk_m.LAW_CODE;
								row4.FILING_DATE = to_wrk_m.FILING_DATE;
								row4.RECEPTION_DATE = to_wrk_m.RECEPTION_DATE;
								row4.PUBLICATION_DATE = to_wrk_m.PUBLICATION_DATE;
								row4.PUBLICATION_NOTES = to_wrk_m.PUBLICATION_NOTES;
								row4.IND_REGISTERED = to_wrk_m.IND_REGISTERED;
								row4.REGISTRATION_TYPE = to_wrk_m.REGISTRATION_TYPE;
								row4.REGISTRATION_SERIES = to_wrk_m.REGISTRATION_SERIES;
								row4.REGISTRATION_NBR = to_wrk_m.REGISTRATION_NBR;
								row4.REGISTRATION_DUP = to_wrk_m.REGISTRATION_DUP;
								row4.REGISTRATION_DATE = to_wrk_m.REGISTRATION_DATE;
								row4.ENTITLEMENT_DATE = to_wrk_m.ENTITLEMENT_DATE;
								row4.EXPIRATION_DATE = to_wrk_m.EXPIRATION_DATE;
								row4.EXHIBITION_DATE = to_wrk_m.EXHIBITION_DATE;
								row4.EXHIBITION_NOTES = to_wrk_m.EXHIBITION_NOTES;
								row4.SIGN_TYPE = to_wrk_m.SIGN_TYPE;
								row4.MARK_NAME = to_wrk_m.MARK_NAME;
								row4.MARK_NAME_LANG2 = to_wrk_m.MARK_NAME_LANG2;
								row4.MARK_TRANSLATION = to_wrk_m.MARK_TRANSLATION;
								row4.MARK_TRANSLATION_LANG2 = to_wrk_m.MARK_TRANSLATION_LANG2;
								row4.MARK_TRANSLITERATION = to_wrk_m.MARK_TRANSLITERATION;
								row4.MARK_TRANSLITERATION_LANG2 = to_wrk_m.MARK_TRANSLITERATION_LANG2;
								row4.SERIES_DESCRIPTION = to_wrk_m.SERIES_DESCRIPTION;
								row4.COLOUR_DESCRIPTION = to_wrk_m.COLOUR_DESCRIPTION;
								row4.COLOUR_DESCR_LANG2 = to_wrk_m.COLOUR_DESCR_LANG2;
								row4.DISCLAIMER = to_wrk_m.DISCLAIMER;
								row4.DISCLAIMER_LANG2 = to_wrk_m.DISCLAIMER_LANG2;
								row4.BY_CONSENT = to_wrk_m.BY_CONSENT;
								row4.REGULATIONS = to_wrk_m.REGULATIONS;
								row4.NOTES = to_wrk_m.NOTES;
								row4.CAPTURE_USER_ID = to_wrk_m.CAPTURE_USER_ID;
								row4.CAPTURE_DATE = to_wrk_m.CAPTURE_DATE;
								row4.PUBLICATION_NBR = to_wrk_m.PUBLICATION_NBR;
								row4.PUBLICATION_SER = to_wrk_m.PUBLICATION_SER;
								row4.PUBLICATION_TYP = to_wrk_m.PUBLICATION_TYP;
								row4.FIRST_PRIORITY_DATE = to_wrk_m.FIRST_PRIORITY_DATE;
								row4.MAIN_OWNER_ADDR_NBR = to_wrk_m.MAIN_OWNER_ADDR_NBR;
								row4.MAIN_OWNER_PERSON_NBR = to_wrk_m.MAIN_OWNER_PERSON_NBR;
								row4.SERVICE_ADDR_NBR = to_wrk_m.SERVICE_ADDR_NBR;
								row4.SERVICE_PERSON_NBR = to_wrk_m.SERVICE_PERSON_NBR;
								row4.NICE_CLASS_TXT = to_wrk_m.NICE_CLASS_TXT;
								row4.MARK_CODE = to_wrk_m.MARK_CODE;
								row4.PROC_TYP = to_wrk_m.PROC_TYP;
								row4.PROC_NBR = to_wrk_m.PROC_NBR;
								row4.STATUS_CODE = to_wrk_m.STATUS_CODE;
								rejectedCount_tDBOutput_3 = rejectedCount_tDBOutput_3 + 1;
								row4.errorCode = ((java.sql.SQLException) e).getSQLState();
								row4.errorMessage = e.getMessage() + " - Line: " + tos_count_tDBOutput_3;
							}
							if (!whetherReject_tDBOutput_3) {
							}
							////////// batch execute by batch size///////
							class LimitBytesHelper_tDBOutput_3 {
								public int limitBytePart1(int counter, java.sql.PreparedStatement pstmt_tDBOutput_3)
										throws Exception {
									try {

										for (int countEach_tDBOutput_3 : pstmt_tDBOutput_3.executeBatch()) {
											if (countEach_tDBOutput_3 == -2 || countEach_tDBOutput_3 == -3) {
												break;
											}
											counter += countEach_tDBOutput_3;
										}

									} catch (java.sql.BatchUpdateException e) {

										int countSum_tDBOutput_3 = 0;
										for (int countEach_tDBOutput_3 : e.getUpdateCounts()) {
											counter += (countEach_tDBOutput_3 < 0 ? 0 : countEach_tDBOutput_3);
										}

										System.err.println(e.getMessage());

									}
									return counter;
								}

								public int limitBytePart2(int counter, java.sql.PreparedStatement pstmt_tDBOutput_3)
										throws Exception {
									try {

										for (int countEach_tDBOutput_3 : pstmt_tDBOutput_3.executeBatch()) {
											if (countEach_tDBOutput_3 == -2 || countEach_tDBOutput_3 == -3) {
												break;
											}
											counter += countEach_tDBOutput_3;
										}

									} catch (java.sql.BatchUpdateException e) {

										for (int countEach_tDBOutput_3 : e.getUpdateCounts()) {
											counter += (countEach_tDBOutput_3 < 0 ? 0 : countEach_tDBOutput_3);
										}

										System.err.println(e.getMessage());

									}
									return counter;
								}
							}

							//////////// commit every////////////

							commitCounter_tDBOutput_3++;
							if (commitEvery_tDBOutput_3 <= commitCounter_tDBOutput_3) {

								conn_tDBOutput_3.commit();

								commitCounter_tDBOutput_3 = 0;
							}

							tos_count_tDBOutput_3++;

							/**
							 * [tDBOutput_3 main ] stop
							 */

							/**
							 * [tDBOutput_3 process_data_begin ] start
							 */

							currentComponent = "tDBOutput_3";

							/**
							 * [tDBOutput_3 process_data_begin ] stop
							 */
// Start of branch "row4"
							if (row4 != null) {

								/**
								 * [tLogRow_46 main ] start
								 */

								currentComponent = "tLogRow_46";

								if (execStat) {
									runStat.updateStatOnConnection(iterateId, 1, 1

											, "row4"

									);
								}

///////////////////////		

								strBuffer_tLogRow_46 = new StringBuilder();

								if (row4.FILE_SEQ != null) { //

									strBuffer_tLogRow_46.append(String.valueOf(row4.FILE_SEQ));

								} //

								strBuffer_tLogRow_46.append("|");

								if (row4.FILE_TYPE != null) { //

									strBuffer_tLogRow_46.append(String.valueOf(row4.FILE_TYPE));

								} //

								strBuffer_tLogRow_46.append("|");

								if (row4.FILE_SERIES != null) { //

									strBuffer_tLogRow_46.append(row4.FILE_SERIES
											.setScale(0, java.math.RoundingMode.HALF_UP).toPlainString());

								} //

								strBuffer_tLogRow_46.append("|");

								if (row4.FILE_NBR != null) { //

									strBuffer_tLogRow_46.append(
											row4.FILE_NBR.setScale(0, java.math.RoundingMode.HALF_UP).toPlainString());

								} //

								strBuffer_tLogRow_46.append("|");

								if (row4.DOC_ORI != null) { //

									strBuffer_tLogRow_46.append(String.valueOf(row4.DOC_ORI));

								} //

								strBuffer_tLogRow_46.append("|");

								if (row4.DOC_SERIES != null) { //

									strBuffer_tLogRow_46.append(row4.DOC_SERIES
											.setScale(0, java.math.RoundingMode.HALF_UP).toPlainString());

								} //

								strBuffer_tLogRow_46.append("|");

								if (row4.DOC_NBR != null) { //

									strBuffer_tLogRow_46.append(
											row4.DOC_NBR.setScale(0, java.math.RoundingMode.HALF_UP).toPlainString());

								} //

								strBuffer_tLogRow_46.append("|");

								if (row4.IND_IMPORT != null) { //

									strBuffer_tLogRow_46.append(row4.IND_IMPORT
											.setScale(0, java.math.RoundingMode.HALF_UP).toPlainString());

								} //

								strBuffer_tLogRow_46.append("|");

								if (row4.APPLICATION_TYPE != null) { //

									strBuffer_tLogRow_46.append(String.valueOf(row4.APPLICATION_TYPE));

								} //

								strBuffer_tLogRow_46.append("|");

								if (row4.APPLICATION_SUBTYPE != null) { //

									strBuffer_tLogRow_46.append(String.valueOf(row4.APPLICATION_SUBTYPE));

								} //

								strBuffer_tLogRow_46.append("|");

								if (row4.LAW_CODE != null) { //

									strBuffer_tLogRow_46.append(
											row4.LAW_CODE.setScale(0, java.math.RoundingMode.HALF_UP).toPlainString());

								} //

								strBuffer_tLogRow_46.append("|");

								if (row4.FILING_DATE != null) { //

									strBuffer_tLogRow_46
											.append(FormatterUtils.format_Date(row4.FILING_DATE, "dd-MM-yyyy"));

								} //

								strBuffer_tLogRow_46.append("|");

								if (row4.RECEPTION_DATE != null) { //

									strBuffer_tLogRow_46
											.append(FormatterUtils.format_Date(row4.RECEPTION_DATE, "dd-MM-yyyy"));

								} //

								strBuffer_tLogRow_46.append("|");

								if (row4.PUBLICATION_DATE != null) { //

									strBuffer_tLogRow_46
											.append(FormatterUtils.format_Date(row4.PUBLICATION_DATE, "dd-MM-yyyy"));

								} //

								strBuffer_tLogRow_46.append("|");

								if (row4.PUBLICATION_NOTES != null) { //

									strBuffer_tLogRow_46.append(String.valueOf(row4.PUBLICATION_NOTES));

								} //

								strBuffer_tLogRow_46.append("|");

								if (row4.IND_REGISTERED != null) { //

									strBuffer_tLogRow_46.append(row4.IND_REGISTERED
											.setScale(0, java.math.RoundingMode.HALF_UP).toPlainString());

								} //

								strBuffer_tLogRow_46.append("|");

								if (row4.REGISTRATION_TYPE != null) { //

									strBuffer_tLogRow_46.append(String.valueOf(row4.REGISTRATION_TYPE));

								} //

								strBuffer_tLogRow_46.append("|");

								if (row4.REGISTRATION_SERIES != null) { //

									strBuffer_tLogRow_46.append(row4.REGISTRATION_SERIES
											.setScale(0, java.math.RoundingMode.HALF_UP).toPlainString());

								} //

								strBuffer_tLogRow_46.append("|");

								if (row4.REGISTRATION_NBR != null) { //

									strBuffer_tLogRow_46.append(row4.REGISTRATION_NBR
											.setScale(0, java.math.RoundingMode.HALF_UP).toPlainString());

								} //

								strBuffer_tLogRow_46.append("|");

								if (row4.REGISTRATION_DUP != null) { //

									strBuffer_tLogRow_46.append(String.valueOf(row4.REGISTRATION_DUP));

								} //

								strBuffer_tLogRow_46.append("|");

								if (row4.REGISTRATION_DATE != null) { //

									strBuffer_tLogRow_46
											.append(FormatterUtils.format_Date(row4.REGISTRATION_DATE, "dd-MM-yyyy"));

								} //

								strBuffer_tLogRow_46.append("|");

								if (row4.ENTITLEMENT_DATE != null) { //

									strBuffer_tLogRow_46
											.append(FormatterUtils.format_Date(row4.ENTITLEMENT_DATE, "dd-MM-yyyy"));

								} //

								strBuffer_tLogRow_46.append("|");

								if (row4.EXPIRATION_DATE != null) { //

									strBuffer_tLogRow_46
											.append(FormatterUtils.format_Date(row4.EXPIRATION_DATE, "dd-MM-yyyy"));

								} //

								strBuffer_tLogRow_46.append("|");

								if (row4.EXHIBITION_DATE != null) { //

									strBuffer_tLogRow_46
											.append(FormatterUtils.format_Date(row4.EXHIBITION_DATE, "dd-MM-yyyy"));

								} //

								strBuffer_tLogRow_46.append("|");

								if (row4.EXHIBITION_NOTES != null) { //

									strBuffer_tLogRow_46.append(String.valueOf(row4.EXHIBITION_NOTES));

								} //

								strBuffer_tLogRow_46.append("|");

								if (row4.SIGN_TYPE != null) { //

									strBuffer_tLogRow_46.append(String.valueOf(row4.SIGN_TYPE));

								} //

								strBuffer_tLogRow_46.append("|");

								if (row4.MARK_NAME != null) { //

									strBuffer_tLogRow_46.append(String.valueOf(row4.MARK_NAME));

								} //

								strBuffer_tLogRow_46.append("|");

								if (row4.MARK_NAME_LANG2 != null) { //

									strBuffer_tLogRow_46.append(String.valueOf(row4.MARK_NAME_LANG2));

								} //

								strBuffer_tLogRow_46.append("|");

								if (row4.MARK_TRANSLATION != null) { //

									strBuffer_tLogRow_46.append(String.valueOf(row4.MARK_TRANSLATION));

								} //

								strBuffer_tLogRow_46.append("|");

								if (row4.MARK_TRANSLATION_LANG2 != null) { //

									strBuffer_tLogRow_46.append(String.valueOf(row4.MARK_TRANSLATION_LANG2));

								} //

								strBuffer_tLogRow_46.append("|");

								if (row4.MARK_TRANSLITERATION != null) { //

									strBuffer_tLogRow_46.append(String.valueOf(row4.MARK_TRANSLITERATION));

								} //

								strBuffer_tLogRow_46.append("|");

								if (row4.MARK_TRANSLITERATION_LANG2 != null) { //

									strBuffer_tLogRow_46.append(String.valueOf(row4.MARK_TRANSLITERATION_LANG2));

								} //

								strBuffer_tLogRow_46.append("|");

								if (row4.SERIES_DESCRIPTION != null) { //

									strBuffer_tLogRow_46.append(String.valueOf(row4.SERIES_DESCRIPTION));

								} //

								strBuffer_tLogRow_46.append("|");

								if (row4.COLOUR_DESCRIPTION != null) { //

									strBuffer_tLogRow_46.append(String.valueOf(row4.COLOUR_DESCRIPTION));

								} //

								strBuffer_tLogRow_46.append("|");

								if (row4.COLOUR_DESCR_LANG2 != null) { //

									strBuffer_tLogRow_46.append(String.valueOf(row4.COLOUR_DESCR_LANG2));

								} //

								strBuffer_tLogRow_46.append("|");

								if (row4.DISCLAIMER != null) { //

									strBuffer_tLogRow_46.append(String.valueOf(row4.DISCLAIMER));

								} //

								strBuffer_tLogRow_46.append("|");

								if (row4.DISCLAIMER_LANG2 != null) { //

									strBuffer_tLogRow_46.append(String.valueOf(row4.DISCLAIMER_LANG2));

								} //

								strBuffer_tLogRow_46.append("|");

								if (row4.BY_CONSENT != null) { //

									strBuffer_tLogRow_46.append(String.valueOf(row4.BY_CONSENT));

								} //

								strBuffer_tLogRow_46.append("|");

								if (row4.REGULATIONS != null) { //

									strBuffer_tLogRow_46.append(String.valueOf(row4.REGULATIONS));

								} //

								strBuffer_tLogRow_46.append("|");

								if (row4.NOTES != null) { //

									strBuffer_tLogRow_46.append(String.valueOf(row4.NOTES));

								} //

								strBuffer_tLogRow_46.append("|");

								if (row4.CAPTURE_USER_ID != null) { //

									strBuffer_tLogRow_46.append(row4.CAPTURE_USER_ID
											.setScale(0, java.math.RoundingMode.HALF_UP).toPlainString());

								} //

								strBuffer_tLogRow_46.append("|");

								if (row4.CAPTURE_DATE != null) { //

									strBuffer_tLogRow_46
											.append(FormatterUtils.format_Date(row4.CAPTURE_DATE, "dd-MM-yyyy"));

								} //

								strBuffer_tLogRow_46.append("|");

								if (row4.PUBLICATION_NBR != null) { //

									strBuffer_tLogRow_46.append(row4.PUBLICATION_NBR
											.setScale(0, java.math.RoundingMode.HALF_UP).toPlainString());

								} //

								strBuffer_tLogRow_46.append("|");

								if (row4.PUBLICATION_SER != null) { //

									strBuffer_tLogRow_46.append(String.valueOf(row4.PUBLICATION_SER));

								} //

								strBuffer_tLogRow_46.append("|");

								if (row4.PUBLICATION_TYP != null) { //

									strBuffer_tLogRow_46.append(String.valueOf(row4.PUBLICATION_TYP));

								} //

								strBuffer_tLogRow_46.append("|");

								if (row4.FIRST_PRIORITY_DATE != null) { //

									strBuffer_tLogRow_46
											.append(FormatterUtils.format_Date(row4.FIRST_PRIORITY_DATE, "dd-MM-yyyy"));

								} //

								strBuffer_tLogRow_46.append("|");

								if (row4.MAIN_OWNER_ADDR_NBR != null) { //

									strBuffer_tLogRow_46.append(row4.MAIN_OWNER_ADDR_NBR
											.setScale(0, java.math.RoundingMode.HALF_UP).toPlainString());

								} //

								strBuffer_tLogRow_46.append("|");

								if (row4.MAIN_OWNER_PERSON_NBR != null) { //

									strBuffer_tLogRow_46.append(row4.MAIN_OWNER_PERSON_NBR
											.setScale(0, java.math.RoundingMode.HALF_UP).toPlainString());

								} //

								strBuffer_tLogRow_46.append("|");

								if (row4.SERVICE_ADDR_NBR != null) { //

									strBuffer_tLogRow_46.append(row4.SERVICE_ADDR_NBR
											.setScale(0, java.math.RoundingMode.HALF_UP).toPlainString());

								} //

								strBuffer_tLogRow_46.append("|");

								if (row4.SERVICE_PERSON_NBR != null) { //

									strBuffer_tLogRow_46.append(row4.SERVICE_PERSON_NBR
											.setScale(0, java.math.RoundingMode.HALF_UP).toPlainString());

								} //

								strBuffer_tLogRow_46.append("|");

								if (row4.NICE_CLASS_TXT != null) { //

									strBuffer_tLogRow_46.append(String.valueOf(row4.NICE_CLASS_TXT));

								} //

								strBuffer_tLogRow_46.append("|");

								if (row4.MARK_CODE != null) { //

									strBuffer_tLogRow_46.append(
											row4.MARK_CODE.setScale(0, java.math.RoundingMode.HALF_UP).toPlainString());

								} //

								strBuffer_tLogRow_46.append("|");

								if (row4.PROC_TYP != null) { //

									strBuffer_tLogRow_46.append(String.valueOf(row4.PROC_TYP));

								} //

								strBuffer_tLogRow_46.append("|");

								if (row4.PROC_NBR != null) { //

									strBuffer_tLogRow_46.append(
											row4.PROC_NBR.setScale(0, java.math.RoundingMode.HALF_UP).toPlainString());

								} //

								strBuffer_tLogRow_46.append("|");

								if (row4.STATUS_CODE != null) { //

									strBuffer_tLogRow_46.append(String.valueOf(row4.STATUS_CODE));

								} //

								strBuffer_tLogRow_46.append("|");

								if (row4.errorCode != null) { //

									strBuffer_tLogRow_46.append(String.valueOf(row4.errorCode));

								} //

								strBuffer_tLogRow_46.append("|");

								if (row4.errorMessage != null) { //

									strBuffer_tLogRow_46.append(String.valueOf(row4.errorMessage));

								} //

								if (globalMap.get("tLogRow_CONSOLE") != null) {
									consoleOut_tLogRow_46 = (java.io.PrintStream) globalMap.get("tLogRow_CONSOLE");
								} else {
									consoleOut_tLogRow_46 = new java.io.PrintStream(
											new java.io.BufferedOutputStream(System.out));
									globalMap.put("tLogRow_CONSOLE", consoleOut_tLogRow_46);
								}
								consoleOut_tLogRow_46.println(strBuffer_tLogRow_46.toString());
								consoleOut_tLogRow_46.flush();
								nb_line_tLogRow_46++;
//////

//////                    

///////////////////////    			

								tos_count_tLogRow_46++;

								/**
								 * [tLogRow_46 main ] stop
								 */

								/**
								 * [tLogRow_46 process_data_begin ] start
								 */

								currentComponent = "tLogRow_46";

								/**
								 * [tLogRow_46 process_data_begin ] stop
								 */

								/**
								 * [tLogRow_46 process_data_end ] start
								 */

								currentComponent = "tLogRow_46";

								/**
								 * [tLogRow_46 process_data_end ] stop
								 */

							} // End of branch "row4"

							/**
							 * [tDBOutput_3 process_data_end ] start
							 */

							currentComponent = "tDBOutput_3";

							/**
							 * [tDBOutput_3 process_data_end ] stop
							 */

						} // End of branch "to_wrk_m"

						/**
						 * [tMap_3 process_data_end ] start
						 */

						currentComponent = "tMap_3";

						/**
						 * [tMap_3 process_data_end ] stop
						 */

						/**
						 * [tDBInput_45 process_data_end ] start
						 */

						currentComponent = "tDBInput_45";

						/**
						 * [tDBInput_45 process_data_end ] stop
						 */

						/**
						 * [tDBInput_45 end ] start
						 */

						currentComponent = "tDBInput_45";

					}
				} finally {
					if (rs_tDBInput_45 != null) {
						rs_tDBInput_45.close();
					}
					if (stmt_tDBInput_45 != null) {
						stmt_tDBInput_45.close();
					}
					if (conn_tDBInput_45 != null && !conn_tDBInput_45.isClosed()) {

						conn_tDBInput_45.close();

						if ("com.mysql.cj.jdbc.Driver".equals((String) globalMap.get("driverClass_"))
								&& routines.system.BundleUtils.inOSGi()) {
							Class.forName("com.mysql.cj.jdbc.AbandonedConnectionCleanupThread")
									.getMethod("checkedShutdown").invoke(null, (Object[]) null);
						}

					}
				}
				globalMap.put("tDBInput_45_NB_LINE", nb_line_tDBInput_45);

				ok_Hash.put("tDBInput_45", true);
				end_Hash.put("tDBInput_45", System.currentTimeMillis());

				/**
				 * [tDBInput_45 end ] stop
				 */

				/**
				 * [tMap_3 end ] start
				 */

				currentComponent = "tMap_3";

// ###############################
// # Lookup hashes releasing
// ###############################      

				if (execStat) {
					runStat.updateStat(resourceMap, iterateId, 2, 0, "row3");
				}

				ok_Hash.put("tMap_3", true);
				end_Hash.put("tMap_3", System.currentTimeMillis());

				/**
				 * [tMap_3 end ] stop
				 */

				/**
				 * [tDBOutput_3 end ] start
				 */

				currentComponent = "tDBOutput_3";

				if (pstmt_tDBOutput_3 != null) {

					pstmt_tDBOutput_3.close();
					resourceMap.remove("pstmt_tDBOutput_3");

				}
				resourceMap.put("statementClosed_tDBOutput_3", true);
				conn_tDBOutput_3.commit();

				conn_tDBOutput_3.close();
				resourceMap.put("finish_tDBOutput_3", true);

				nb_line_deleted_tDBOutput_3 = nb_line_deleted_tDBOutput_3 + deletedCount_tDBOutput_3;
				nb_line_update_tDBOutput_3 = nb_line_update_tDBOutput_3 + updatedCount_tDBOutput_3;
				nb_line_inserted_tDBOutput_3 = nb_line_inserted_tDBOutput_3 + insertedCount_tDBOutput_3;
				nb_line_rejected_tDBOutput_3 = nb_line_rejected_tDBOutput_3 + rejectedCount_tDBOutput_3;

				globalMap.put("tDBOutput_3_NB_LINE", nb_line_tDBOutput_3);
				globalMap.put("tDBOutput_3_NB_LINE_UPDATED", nb_line_update_tDBOutput_3);
				globalMap.put("tDBOutput_3_NB_LINE_INSERTED", nb_line_inserted_tDBOutput_3);
				globalMap.put("tDBOutput_3_NB_LINE_DELETED", nb_line_deleted_tDBOutput_3);
				globalMap.put("tDBOutput_3_NB_LINE_REJECTED", nb_line_rejected_tDBOutput_3);

				if (execStat) {
					runStat.updateStat(resourceMap, iterateId, 2, 0, "to_wrk_m");
				}

				ok_Hash.put("tDBOutput_3", true);
				end_Hash.put("tDBOutput_3", System.currentTimeMillis());

				tStatCatcher_1.addMessage("end", "tDBOutput_3",
						end_Hash.get("tDBOutput_3") - start_Hash.get("tDBOutput_3"));
				tStatCatcher_1Process(globalMap);

				/**
				 * [tDBOutput_3 end ] stop
				 */

				/**
				 * [tLogRow_46 end ] start
				 */

				currentComponent = "tLogRow_46";

//////
//////
				globalMap.put("tLogRow_46_NB_LINE", nb_line_tLogRow_46);

///////////////////////    			

				if (execStat) {
					runStat.updateStat(resourceMap, iterateId, 2, 0, "row4");
				}

				ok_Hash.put("tLogRow_46", true);
				end_Hash.put("tLogRow_46", System.currentTimeMillis());

				tStatCatcher_1.addMessage("end", "tLogRow_46",
						end_Hash.get("tLogRow_46") - start_Hash.get("tLogRow_46"));
				tStatCatcher_1Process(globalMap);

				/**
				 * [tLogRow_46 end ] stop
				 */

			} // end the resume

			if (resumeEntryMethodName == null || globalResumeTicket) {
				resumeUtil.addLog("CHECKPOINT", "CONNECTION:SUBJOB_OK:tDBInput_45:OnSubjobOk", "",
						Thread.currentThread().getId() + "", "", "", "", "", "");
			}

			if (execStat) {
				runStat.updateStatOnConnection("OnSubjobOk3", 0, "ok");
			}

			tDBRow_39Process(globalMap);

		} catch (java.lang.Exception e) {

			TalendException te = new TalendException(e, currentComponent, globalMap);

			throw te;
		} catch (java.lang.Error error) {

			runStat.stopThreadStat();

			throw error;
		} finally {

			try {

				/**
				 * [tDBInput_45 finally ] start
				 */

				currentComponent = "tDBInput_45";

				/**
				 * [tDBInput_45 finally ] stop
				 */

				/**
				 * [tMap_3 finally ] start
				 */

				currentComponent = "tMap_3";

				/**
				 * [tMap_3 finally ] stop
				 */

				/**
				 * [tDBOutput_3 finally ] start
				 */

				currentComponent = "tDBOutput_3";

				try {
					if (resourceMap.get("statementClosed_tDBOutput_3") == null) {
						java.sql.PreparedStatement pstmtToClose_tDBOutput_3 = null;
						if ((pstmtToClose_tDBOutput_3 = (java.sql.PreparedStatement) resourceMap
								.remove("pstmt_tDBOutput_3")) != null) {
							pstmtToClose_tDBOutput_3.close();
						}
					}
				} finally {
					if (resourceMap.get("finish_tDBOutput_3") == null) {
						java.sql.Connection ctn_tDBOutput_3 = null;
						if ((ctn_tDBOutput_3 = (java.sql.Connection) resourceMap.get("conn_tDBOutput_3")) != null) {
							try {
								ctn_tDBOutput_3.close();
							} catch (java.sql.SQLException sqlEx_tDBOutput_3) {
								String errorMessage_tDBOutput_3 = "failed to close the connection in tDBOutput_3 :"
										+ sqlEx_tDBOutput_3.getMessage();
								System.err.println(errorMessage_tDBOutput_3);
							}
						}
					}
				}

				/**
				 * [tDBOutput_3 finally ] stop
				 */

				/**
				 * [tLogRow_46 finally ] start
				 */

				currentComponent = "tLogRow_46";

				/**
				 * [tLogRow_46 finally ] stop
				 */

			} catch (java.lang.Exception e) {
				// ignore
			} catch (java.lang.Error error) {
				// ignore
			}
			resourceMap = null;
		}

		globalMap.put("tDBInput_45_SUBPROCESS_STATE", 1);
	}

	public void tDBRow_39Process(final java.util.Map<String, Object> globalMap) throws TalendException {
		globalMap.put("tDBRow_39_SUBPROCESS_STATE", 0);

		final boolean execStat = this.execStat;

		String iterateId = "";

		String currentComponent = "";
		java.util.Map<String, Object> resourceMap = new java.util.HashMap<String, Object>();

		try {
			// TDI-39566 avoid throwing an useless Exception
			boolean resumeIt = true;
			if (globalResumeTicket == false && resumeEntryMethodName != null) {
				String currentMethodName = new java.lang.Exception().getStackTrace()[0].getMethodName();
				resumeIt = resumeEntryMethodName.equals(currentMethodName);
			}
			if (resumeIt || globalResumeTicket) { // start the resume
				globalResumeTicket = true;

				/**
				 * [tDBRow_39 begin ] start
				 */

				ok_Hash.put("tDBRow_39", false);
				start_Hash.put("tDBRow_39", System.currentTimeMillis());

				currentComponent = "tDBRow_39";

				int tos_count_tDBRow_39 = 0;

				java.sql.Connection conn_tDBRow_39 = null;
				String query_tDBRow_39 = "";
				boolean whetherReject_tDBRow_39 = false;
				String driverClass_tDBRow_39 = "net.sourceforge.jtds.jdbc.Driver";
				java.lang.Class jdbcclazz_tDBRow_39 = java.lang.Class.forName(driverClass_tDBRow_39);

				String port_tDBRow_39 = "1433";
				String dbname_tDBRow_39 = "MARCAS_PY";

				String url_tDBRow_39 = "jdbc:jtds:sqlserver://" + "localhost";

				if (!"".equals(port_tDBRow_39)) {
					url_tDBRow_39 += ":" + "1433";
				}
				if (!"".equals(dbname_tDBRow_39)) {

					url_tDBRow_39 += "//" + "MARCAS_PY";

				}
				url_tDBRow_39 += ";appName=" + projectName + ";" + "";

				String dbUser_tDBRow_39 = "ADMIN";

				final String decryptedPassword_tDBRow_39 = routines.system.PasswordEncryptUtil
						.decryptPassword("enc:routine.encryption.key.v1:GHUhC4k/EzFiEdKpOjLtdyEO0TRHgjwQGhMgmEpmWn8M");

				String dbPwd_tDBRow_39 = decryptedPassword_tDBRow_39;

				conn_tDBRow_39 = java.sql.DriverManager.getConnection(url_tDBRow_39, dbUser_tDBRow_39, dbPwd_tDBRow_39);

				resourceMap.put("conn_tDBRow_39", conn_tDBRow_39);
				if (conn_tDBRow_39.getAutoCommit()) {

					conn_tDBRow_39.setAutoCommit(false);

				}
				int commitEvery_tDBRow_39 = 10000;
				int commitCounter_tDBRow_39 = 0;

				java.sql.Statement stmt_tDBRow_39 = conn_tDBRow_39.createStatement();
				resourceMap.put("stmt_tDBRow_39", stmt_tDBRow_39);

				/**
				 * [tDBRow_39 begin ] stop
				 */

				/**
				 * [tDBRow_39 main ] start
				 */

				currentComponent = "tDBRow_39";

				query_tDBRow_39 = "TRUNCATE TABLE WRK_MARK_OWNERS;\n		TRUNCATE TABLE WRK_MARK_REPRS; \n		TRUNCATE TABLE WRK_MARK_PRIORITIES;\n		TRUNCATE T"
						+ "ABLE WRK_MARK_NICE_CLASSES;\n		TRUNCATE TABLE WRK_MARK_ACTIONS;\n		TRUNCATE TABLE WRK_MARK_ACTIONS;";
				whetherReject_tDBRow_39 = false;
				globalMap.put("tDBRow_39_QUERY", query_tDBRow_39);
				try {
					stmt_tDBRow_39.execute(query_tDBRow_39);

				} catch (java.lang.Exception e) {
					whetherReject_tDBRow_39 = true;

					System.err.print(e.getMessage());

				}

				if (!whetherReject_tDBRow_39) {

				}

				commitCounter_tDBRow_39++;
				if (commitEvery_tDBRow_39 <= commitCounter_tDBRow_39) {

					conn_tDBRow_39.commit();

					commitCounter_tDBRow_39 = 0;
				}

				tos_count_tDBRow_39++;

				/**
				 * [tDBRow_39 main ] stop
				 */

				/**
				 * [tDBRow_39 process_data_begin ] start
				 */

				currentComponent = "tDBRow_39";

				/**
				 * [tDBRow_39 process_data_begin ] stop
				 */

				/**
				 * [tDBRow_39 process_data_end ] start
				 */

				currentComponent = "tDBRow_39";

				/**
				 * [tDBRow_39 process_data_end ] stop
				 */

				/**
				 * [tDBRow_39 end ] start
				 */

				currentComponent = "tDBRow_39";

				stmt_tDBRow_39.close();
				resourceMap.remove("stmt_tDBRow_39");
				resourceMap.put("statementClosed_tDBRow_39", true);
				if (commitEvery_tDBRow_39 > commitCounter_tDBRow_39) {

					conn_tDBRow_39.commit();

					commitCounter_tDBRow_39 = 0;

				}
				conn_tDBRow_39.close();

				if ("com.mysql.cj.jdbc.Driver".equals((String) globalMap.get("driverClass_"))
						&& routines.system.BundleUtils.inOSGi()) {
					Class.forName("com.mysql.cj.jdbc.AbandonedConnectionCleanupThread").getMethod("checkedShutdown")
							.invoke(null, (Object[]) null);
				}

				resourceMap.put("finish_tDBRow_39", true);

				ok_Hash.put("tDBRow_39", true);
				end_Hash.put("tDBRow_39", System.currentTimeMillis());

				/**
				 * [tDBRow_39 end ] stop
				 */
			} // end the resume

			if (resumeEntryMethodName == null || globalResumeTicket) {
				resumeUtil.addLog("CHECKPOINT", "CONNECTION:SUBJOB_OK:tDBRow_39:OnSubjobOk", "",
						Thread.currentThread().getId() + "", "", "", "", "", "");
			}

			if (execStat) {
				runStat.updateStatOnConnection("OnSubjobOk6", 0, "ok");
			}

			tDBInput_47Process(globalMap);

		} catch (java.lang.Exception e) {

			TalendException te = new TalendException(e, currentComponent, globalMap);

			throw te;
		} catch (java.lang.Error error) {

			runStat.stopThreadStat();

			throw error;
		} finally {

			try {

				/**
				 * [tDBRow_39 finally ] start
				 */

				currentComponent = "tDBRow_39";

				try {
					if (resourceMap.get("statementClosed_tDBRow_39") == null) {
						java.sql.Statement stmtToClose_tDBRow_39 = null;
						if ((stmtToClose_tDBRow_39 = (java.sql.Statement) resourceMap
								.remove("stmt_tDBRow_39")) != null) {
							stmtToClose_tDBRow_39.close();
						}
					}
				} finally {
					if (resourceMap.get("finish_tDBRow_39") == null) {
						java.sql.Connection ctn_tDBRow_39 = null;
						if ((ctn_tDBRow_39 = (java.sql.Connection) resourceMap.get("conn_tDBRow_39")) != null) {
							try {
								ctn_tDBRow_39.close();
							} catch (java.sql.SQLException sqlEx_tDBRow_39) {
								String errorMessage_tDBRow_39 = "failed to close the connection in tDBRow_39 :"
										+ sqlEx_tDBRow_39.getMessage();
								System.err.println(errorMessage_tDBRow_39);
							}
						}
					}
				}

				/**
				 * [tDBRow_39 finally ] stop
				 */
			} catch (java.lang.Exception e) {
				// ignore
			} catch (java.lang.Error error) {
				// ignore
			}
			resourceMap = null;
		}

		globalMap.put("tDBRow_39_SUBPROCESS_STATE", 1);
	}

	public static class row1Struct implements routines.system.IPersistableRow<row1Struct> {
		final static byte[] commonByteArrayLock_WIPO_PROJECTS_G2b_Mig_TM = new byte[0];
		static byte[] commonByteArray_WIPO_PROJECTS_G2b_Mig_TM = new byte[0];

		public String FILE_SEQ;

		public String getFILE_SEQ() {
			return this.FILE_SEQ;
		}

		public String FILE_TYPE;

		public String getFILE_TYPE() {
			return this.FILE_TYPE;
		}

		public BigDecimal FILE_SERIES;

		public BigDecimal getFILE_SERIES() {
			return this.FILE_SERIES;
		}

		public BigDecimal FILE_NBR;

		public BigDecimal getFILE_NBR() {
			return this.FILE_NBR;
		}

		public BigDecimal IND_SERVICE;

		public BigDecimal getIND_SERVICE() {
			return this.IND_SERVICE;
		}

		public String OWNERSHIP_NOTES;

		public String getOWNERSHIP_NOTES() {
			return this.OWNERSHIP_NOTES;
		}

		public String PERSON_NAME;

		public String getPERSON_NAME() {
			return this.PERSON_NAME;
		}

		public String PERSON_NAME_LANG2;

		public String getPERSON_NAME_LANG2() {
			return this.PERSON_NAME_LANG2;
		}

		public String NATIONALITY_COUNTRY_CODE;

		public String getNATIONALITY_COUNTRY_CODE() {
			return this.NATIONALITY_COUNTRY_CODE;
		}

		public BigDecimal IND_COMPANY;

		public BigDecimal getIND_COMPANY() {
			return this.IND_COMPANY;
		}

		public String LEGAL_NATURE;

		public String getLEGAL_NATURE() {
			return this.LEGAL_NATURE;
		}

		public String LEGAL_NATURE_LANG2;

		public String getLEGAL_NATURE_LANG2() {
			return this.LEGAL_NATURE_LANG2;
		}

		public String LEGAL_ID_TYPE;

		public String getLEGAL_ID_TYPE() {
			return this.LEGAL_ID_TYPE;
		}

		public BigDecimal LEGAL_ID_NBR;

		public BigDecimal getLEGAL_ID_NBR() {
			return this.LEGAL_ID_NBR;
		}

		public String INDIVIDUAL_ID_TYPE;

		public String getINDIVIDUAL_ID_TYPE() {
			return this.INDIVIDUAL_ID_TYPE;
		}

		public BigDecimal INDIVIDUAL_ID_NBR;

		public BigDecimal getINDIVIDUAL_ID_NBR() {
			return this.INDIVIDUAL_ID_NBR;
		}

		public String RESIDENCE_COUNTRY_CODE;

		public String getRESIDENCE_COUNTRY_CODE() {
			return this.RESIDENCE_COUNTRY_CODE;
		}

		public String STATE_NAME;

		public String getSTATE_NAME() {
			return this.STATE_NAME;
		}

		public String STATE_CODE;

		public String getSTATE_CODE() {
			return this.STATE_CODE;
		}

		public String CITY_NAME;

		public String getCITY_NAME() {
			return this.CITY_NAME;
		}

		public String CITY_CODE;

		public String getCITY_CODE() {
			return this.CITY_CODE;
		}

		public String ADDRESS_ZONE;

		public String getADDRESS_ZONE() {
			return this.ADDRESS_ZONE;
		}

		public String ADDRESS_STREET;

		public String getADDRESS_STREET() {
			return this.ADDRESS_STREET;
		}

		public String ADDRESS_STREET_LANG2;

		public String getADDRESS_STREET_LANG2() {
			return this.ADDRESS_STREET_LANG2;
		}

		public String ZIP_CODE;

		public String getZIP_CODE() {
			return this.ZIP_CODE;
		}

		public String EMAIL;

		public String getEMAIL() {
			return this.EMAIL;
		}

		public String TELEPHONE;

		public String getTELEPHONE() {
			return this.TELEPHONE;
		}

		public String PERSON_GROUP_CODE;

		public String getPERSON_GROUP_CODE() {
			return this.PERSON_GROUP_CODE;
		}

		public BigDecimal PERSON_NBR;

		public BigDecimal getPERSON_NBR() {
			return this.PERSON_NBR;
		}

		public BigDecimal ADDR_NBR;

		public BigDecimal getADDR_NBR() {
			return this.ADDR_NBR;
		}

		public String errorCode;

		public String getErrorCode() {
			return this.errorCode;
		}

		public String errorMessage;

		public String getErrorMessage() {
			return this.errorMessage;
		}

		private String readString(ObjectInputStream dis) throws IOException {
			String strReturn = null;
			int length = 0;
			length = dis.readInt();
			if (length == -1) {
				strReturn = null;
			} else {
				if (length > commonByteArray_WIPO_PROJECTS_G2b_Mig_TM.length) {
					if (length < 1024 && commonByteArray_WIPO_PROJECTS_G2b_Mig_TM.length == 0) {
						commonByteArray_WIPO_PROJECTS_G2b_Mig_TM = new byte[1024];
					} else {
						commonByteArray_WIPO_PROJECTS_G2b_Mig_TM = new byte[2 * length];
					}
				}
				dis.readFully(commonByteArray_WIPO_PROJECTS_G2b_Mig_TM, 0, length);
				strReturn = new String(commonByteArray_WIPO_PROJECTS_G2b_Mig_TM, 0, length, utf8Charset);
			}
			return strReturn;
		}

		private void writeString(String str, ObjectOutputStream dos) throws IOException {
			if (str == null) {
				dos.writeInt(-1);
			} else {
				byte[] byteArray = str.getBytes(utf8Charset);
				dos.writeInt(byteArray.length);
				dos.write(byteArray);
			}
		}

		public void readData(ObjectInputStream dis) {

			synchronized (commonByteArrayLock_WIPO_PROJECTS_G2b_Mig_TM) {

				try {

					int length = 0;

					this.FILE_SEQ = readString(dis);

					this.FILE_TYPE = readString(dis);

					this.FILE_SERIES = (BigDecimal) dis.readObject();

					this.FILE_NBR = (BigDecimal) dis.readObject();

					this.IND_SERVICE = (BigDecimal) dis.readObject();

					this.OWNERSHIP_NOTES = readString(dis);

					this.PERSON_NAME = readString(dis);

					this.PERSON_NAME_LANG2 = readString(dis);

					this.NATIONALITY_COUNTRY_CODE = readString(dis);

					this.IND_COMPANY = (BigDecimal) dis.readObject();

					this.LEGAL_NATURE = readString(dis);

					this.LEGAL_NATURE_LANG2 = readString(dis);

					this.LEGAL_ID_TYPE = readString(dis);

					this.LEGAL_ID_NBR = (BigDecimal) dis.readObject();

					this.INDIVIDUAL_ID_TYPE = readString(dis);

					this.INDIVIDUAL_ID_NBR = (BigDecimal) dis.readObject();

					this.RESIDENCE_COUNTRY_CODE = readString(dis);

					this.STATE_NAME = readString(dis);

					this.STATE_CODE = readString(dis);

					this.CITY_NAME = readString(dis);

					this.CITY_CODE = readString(dis);

					this.ADDRESS_ZONE = readString(dis);

					this.ADDRESS_STREET = readString(dis);

					this.ADDRESS_STREET_LANG2 = readString(dis);

					this.ZIP_CODE = readString(dis);

					this.EMAIL = readString(dis);

					this.TELEPHONE = readString(dis);

					this.PERSON_GROUP_CODE = readString(dis);

					this.PERSON_NBR = (BigDecimal) dis.readObject();

					this.ADDR_NBR = (BigDecimal) dis.readObject();

					this.errorCode = readString(dis);

					this.errorMessage = readString(dis);

				} catch (IOException e) {
					throw new RuntimeException(e);

				} catch (ClassNotFoundException eCNFE) {
					throw new RuntimeException(eCNFE);

				}

			}

		}

		public void writeData(ObjectOutputStream dos) {
			try {

				// String

				writeString(this.FILE_SEQ, dos);

				// String

				writeString(this.FILE_TYPE, dos);

				// BigDecimal

				dos.writeObject(this.FILE_SERIES);

				// BigDecimal

				dos.writeObject(this.FILE_NBR);

				// BigDecimal

				dos.writeObject(this.IND_SERVICE);

				// String

				writeString(this.OWNERSHIP_NOTES, dos);

				// String

				writeString(this.PERSON_NAME, dos);

				// String

				writeString(this.PERSON_NAME_LANG2, dos);

				// String

				writeString(this.NATIONALITY_COUNTRY_CODE, dos);

				// BigDecimal

				dos.writeObject(this.IND_COMPANY);

				// String

				writeString(this.LEGAL_NATURE, dos);

				// String

				writeString(this.LEGAL_NATURE_LANG2, dos);

				// String

				writeString(this.LEGAL_ID_TYPE, dos);

				// BigDecimal

				dos.writeObject(this.LEGAL_ID_NBR);

				// String

				writeString(this.INDIVIDUAL_ID_TYPE, dos);

				// BigDecimal

				dos.writeObject(this.INDIVIDUAL_ID_NBR);

				// String

				writeString(this.RESIDENCE_COUNTRY_CODE, dos);

				// String

				writeString(this.STATE_NAME, dos);

				// String

				writeString(this.STATE_CODE, dos);

				// String

				writeString(this.CITY_NAME, dos);

				// String

				writeString(this.CITY_CODE, dos);

				// String

				writeString(this.ADDRESS_ZONE, dos);

				// String

				writeString(this.ADDRESS_STREET, dos);

				// String

				writeString(this.ADDRESS_STREET_LANG2, dos);

				// String

				writeString(this.ZIP_CODE, dos);

				// String

				writeString(this.EMAIL, dos);

				// String

				writeString(this.TELEPHONE, dos);

				// String

				writeString(this.PERSON_GROUP_CODE, dos);

				// BigDecimal

				dos.writeObject(this.PERSON_NBR);

				// BigDecimal

				dos.writeObject(this.ADDR_NBR);

				// String

				writeString(this.errorCode, dos);

				// String

				writeString(this.errorMessage, dos);

			} catch (IOException e) {
				throw new RuntimeException(e);
			}

		}

		public String toString() {

			StringBuilder sb = new StringBuilder();
			sb.append(super.toString());
			sb.append("[");
			sb.append("FILE_SEQ=" + FILE_SEQ);
			sb.append(",FILE_TYPE=" + FILE_TYPE);
			sb.append(",FILE_SERIES=" + String.valueOf(FILE_SERIES));
			sb.append(",FILE_NBR=" + String.valueOf(FILE_NBR));
			sb.append(",IND_SERVICE=" + String.valueOf(IND_SERVICE));
			sb.append(",OWNERSHIP_NOTES=" + OWNERSHIP_NOTES);
			sb.append(",PERSON_NAME=" + PERSON_NAME);
			sb.append(",PERSON_NAME_LANG2=" + PERSON_NAME_LANG2);
			sb.append(",NATIONALITY_COUNTRY_CODE=" + NATIONALITY_COUNTRY_CODE);
			sb.append(",IND_COMPANY=" + String.valueOf(IND_COMPANY));
			sb.append(",LEGAL_NATURE=" + LEGAL_NATURE);
			sb.append(",LEGAL_NATURE_LANG2=" + LEGAL_NATURE_LANG2);
			sb.append(",LEGAL_ID_TYPE=" + LEGAL_ID_TYPE);
			sb.append(",LEGAL_ID_NBR=" + String.valueOf(LEGAL_ID_NBR));
			sb.append(",INDIVIDUAL_ID_TYPE=" + INDIVIDUAL_ID_TYPE);
			sb.append(",INDIVIDUAL_ID_NBR=" + String.valueOf(INDIVIDUAL_ID_NBR));
			sb.append(",RESIDENCE_COUNTRY_CODE=" + RESIDENCE_COUNTRY_CODE);
			sb.append(",STATE_NAME=" + STATE_NAME);
			sb.append(",STATE_CODE=" + STATE_CODE);
			sb.append(",CITY_NAME=" + CITY_NAME);
			sb.append(",CITY_CODE=" + CITY_CODE);
			sb.append(",ADDRESS_ZONE=" + ADDRESS_ZONE);
			sb.append(",ADDRESS_STREET=" + ADDRESS_STREET);
			sb.append(",ADDRESS_STREET_LANG2=" + ADDRESS_STREET_LANG2);
			sb.append(",ZIP_CODE=" + ZIP_CODE);
			sb.append(",EMAIL=" + EMAIL);
			sb.append(",TELEPHONE=" + TELEPHONE);
			sb.append(",PERSON_GROUP_CODE=" + PERSON_GROUP_CODE);
			sb.append(",PERSON_NBR=" + String.valueOf(PERSON_NBR));
			sb.append(",ADDR_NBR=" + String.valueOf(ADDR_NBR));
			sb.append(",errorCode=" + errorCode);
			sb.append(",errorMessage=" + errorMessage);
			sb.append("]");

			return sb.toString();
		}

		/**
		 * Compare keys
		 */
		public int compareTo(row1Struct other) {

			int returnValue = -1;

			return returnValue;
		}

		private int checkNullsAndCompare(Object object1, Object object2) {
			int returnValue = 0;
			if (object1 instanceof Comparable && object2 instanceof Comparable) {
				returnValue = ((Comparable) object1).compareTo(object2);
			} else if (object1 != null && object2 != null) {
				returnValue = compareStrings(object1.toString(), object2.toString());
			} else if (object1 == null && object2 != null) {
				returnValue = 1;
			} else if (object1 != null && object2 == null) {
				returnValue = -1;
			} else {
				returnValue = 0;
			}

			return returnValue;
		}

		private int compareStrings(String string1, String string2) {
			return string1.compareTo(string2);
		}

	}

	public static class copyOfrwk_ownersStruct implements routines.system.IPersistableRow<copyOfrwk_ownersStruct> {
		final static byte[] commonByteArrayLock_WIPO_PROJECTS_G2b_Mig_TM = new byte[0];
		static byte[] commonByteArray_WIPO_PROJECTS_G2b_Mig_TM = new byte[0];

		public String FILE_SEQ;

		public String getFILE_SEQ() {
			return this.FILE_SEQ;
		}

		public String FILE_TYPE;

		public String getFILE_TYPE() {
			return this.FILE_TYPE;
		}

		public BigDecimal FILE_SERIES;

		public BigDecimal getFILE_SERIES() {
			return this.FILE_SERIES;
		}

		public BigDecimal FILE_NBR;

		public BigDecimal getFILE_NBR() {
			return this.FILE_NBR;
		}

		public BigDecimal IND_SERVICE;

		public BigDecimal getIND_SERVICE() {
			return this.IND_SERVICE;
		}

		public String OWNERSHIP_NOTES;

		public String getOWNERSHIP_NOTES() {
			return this.OWNERSHIP_NOTES;
		}

		public String PERSON_NAME;

		public String getPERSON_NAME() {
			return this.PERSON_NAME;
		}

		public String PERSON_NAME_LANG2;

		public String getPERSON_NAME_LANG2() {
			return this.PERSON_NAME_LANG2;
		}

		public String NATIONALITY_COUNTRY_CODE;

		public String getNATIONALITY_COUNTRY_CODE() {
			return this.NATIONALITY_COUNTRY_CODE;
		}

		public BigDecimal IND_COMPANY;

		public BigDecimal getIND_COMPANY() {
			return this.IND_COMPANY;
		}

		public String LEGAL_NATURE;

		public String getLEGAL_NATURE() {
			return this.LEGAL_NATURE;
		}

		public String LEGAL_NATURE_LANG2;

		public String getLEGAL_NATURE_LANG2() {
			return this.LEGAL_NATURE_LANG2;
		}

		public String LEGAL_ID_TYPE;

		public String getLEGAL_ID_TYPE() {
			return this.LEGAL_ID_TYPE;
		}

		public BigDecimal LEGAL_ID_NBR;

		public BigDecimal getLEGAL_ID_NBR() {
			return this.LEGAL_ID_NBR;
		}

		public String INDIVIDUAL_ID_TYPE;

		public String getINDIVIDUAL_ID_TYPE() {
			return this.INDIVIDUAL_ID_TYPE;
		}

		public BigDecimal INDIVIDUAL_ID_NBR;

		public BigDecimal getINDIVIDUAL_ID_NBR() {
			return this.INDIVIDUAL_ID_NBR;
		}

		public String RESIDENCE_COUNTRY_CODE;

		public String getRESIDENCE_COUNTRY_CODE() {
			return this.RESIDENCE_COUNTRY_CODE;
		}

		public String STATE_NAME;

		public String getSTATE_NAME() {
			return this.STATE_NAME;
		}

		public String STATE_CODE;

		public String getSTATE_CODE() {
			return this.STATE_CODE;
		}

		public String CITY_NAME;

		public String getCITY_NAME() {
			return this.CITY_NAME;
		}

		public String CITY_CODE;

		public String getCITY_CODE() {
			return this.CITY_CODE;
		}

		public String ADDRESS_ZONE;

		public String getADDRESS_ZONE() {
			return this.ADDRESS_ZONE;
		}

		public String ADDRESS_STREET;

		public String getADDRESS_STREET() {
			return this.ADDRESS_STREET;
		}

		public String ADDRESS_STREET_LANG2;

		public String getADDRESS_STREET_LANG2() {
			return this.ADDRESS_STREET_LANG2;
		}

		public String ZIP_CODE;

		public String getZIP_CODE() {
			return this.ZIP_CODE;
		}

		public String EMAIL;

		public String getEMAIL() {
			return this.EMAIL;
		}

		public String TELEPHONE;

		public String getTELEPHONE() {
			return this.TELEPHONE;
		}

		public String PERSON_GROUP_CODE;

		public String getPERSON_GROUP_CODE() {
			return this.PERSON_GROUP_CODE;
		}

		public BigDecimal PERSON_NBR;

		public BigDecimal getPERSON_NBR() {
			return this.PERSON_NBR;
		}

		public BigDecimal ADDR_NBR;

		public BigDecimal getADDR_NBR() {
			return this.ADDR_NBR;
		}

		private String readString(ObjectInputStream dis) throws IOException {
			String strReturn = null;
			int length = 0;
			length = dis.readInt();
			if (length == -1) {
				strReturn = null;
			} else {
				if (length > commonByteArray_WIPO_PROJECTS_G2b_Mig_TM.length) {
					if (length < 1024 && commonByteArray_WIPO_PROJECTS_G2b_Mig_TM.length == 0) {
						commonByteArray_WIPO_PROJECTS_G2b_Mig_TM = new byte[1024];
					} else {
						commonByteArray_WIPO_PROJECTS_G2b_Mig_TM = new byte[2 * length];
					}
				}
				dis.readFully(commonByteArray_WIPO_PROJECTS_G2b_Mig_TM, 0, length);
				strReturn = new String(commonByteArray_WIPO_PROJECTS_G2b_Mig_TM, 0, length, utf8Charset);
			}
			return strReturn;
		}

		private void writeString(String str, ObjectOutputStream dos) throws IOException {
			if (str == null) {
				dos.writeInt(-1);
			} else {
				byte[] byteArray = str.getBytes(utf8Charset);
				dos.writeInt(byteArray.length);
				dos.write(byteArray);
			}
		}

		public void readData(ObjectInputStream dis) {

			synchronized (commonByteArrayLock_WIPO_PROJECTS_G2b_Mig_TM) {

				try {

					int length = 0;

					this.FILE_SEQ = readString(dis);

					this.FILE_TYPE = readString(dis);

					this.FILE_SERIES = (BigDecimal) dis.readObject();

					this.FILE_NBR = (BigDecimal) dis.readObject();

					this.IND_SERVICE = (BigDecimal) dis.readObject();

					this.OWNERSHIP_NOTES = readString(dis);

					this.PERSON_NAME = readString(dis);

					this.PERSON_NAME_LANG2 = readString(dis);

					this.NATIONALITY_COUNTRY_CODE = readString(dis);

					this.IND_COMPANY = (BigDecimal) dis.readObject();

					this.LEGAL_NATURE = readString(dis);

					this.LEGAL_NATURE_LANG2 = readString(dis);

					this.LEGAL_ID_TYPE = readString(dis);

					this.LEGAL_ID_NBR = (BigDecimal) dis.readObject();

					this.INDIVIDUAL_ID_TYPE = readString(dis);

					this.INDIVIDUAL_ID_NBR = (BigDecimal) dis.readObject();

					this.RESIDENCE_COUNTRY_CODE = readString(dis);

					this.STATE_NAME = readString(dis);

					this.STATE_CODE = readString(dis);

					this.CITY_NAME = readString(dis);

					this.CITY_CODE = readString(dis);

					this.ADDRESS_ZONE = readString(dis);

					this.ADDRESS_STREET = readString(dis);

					this.ADDRESS_STREET_LANG2 = readString(dis);

					this.ZIP_CODE = readString(dis);

					this.EMAIL = readString(dis);

					this.TELEPHONE = readString(dis);

					this.PERSON_GROUP_CODE = readString(dis);

					this.PERSON_NBR = (BigDecimal) dis.readObject();

					this.ADDR_NBR = (BigDecimal) dis.readObject();

				} catch (IOException e) {
					throw new RuntimeException(e);

				} catch (ClassNotFoundException eCNFE) {
					throw new RuntimeException(eCNFE);

				}

			}

		}

		public void writeData(ObjectOutputStream dos) {
			try {

				// String

				writeString(this.FILE_SEQ, dos);

				// String

				writeString(this.FILE_TYPE, dos);

				// BigDecimal

				dos.writeObject(this.FILE_SERIES);

				// BigDecimal

				dos.writeObject(this.FILE_NBR);

				// BigDecimal

				dos.writeObject(this.IND_SERVICE);

				// String

				writeString(this.OWNERSHIP_NOTES, dos);

				// String

				writeString(this.PERSON_NAME, dos);

				// String

				writeString(this.PERSON_NAME_LANG2, dos);

				// String

				writeString(this.NATIONALITY_COUNTRY_CODE, dos);

				// BigDecimal

				dos.writeObject(this.IND_COMPANY);

				// String

				writeString(this.LEGAL_NATURE, dos);

				// String

				writeString(this.LEGAL_NATURE_LANG2, dos);

				// String

				writeString(this.LEGAL_ID_TYPE, dos);

				// BigDecimal

				dos.writeObject(this.LEGAL_ID_NBR);

				// String

				writeString(this.INDIVIDUAL_ID_TYPE, dos);

				// BigDecimal

				dos.writeObject(this.INDIVIDUAL_ID_NBR);

				// String

				writeString(this.RESIDENCE_COUNTRY_CODE, dos);

				// String

				writeString(this.STATE_NAME, dos);

				// String

				writeString(this.STATE_CODE, dos);

				// String

				writeString(this.CITY_NAME, dos);

				// String

				writeString(this.CITY_CODE, dos);

				// String

				writeString(this.ADDRESS_ZONE, dos);

				// String

				writeString(this.ADDRESS_STREET, dos);

				// String

				writeString(this.ADDRESS_STREET_LANG2, dos);

				// String

				writeString(this.ZIP_CODE, dos);

				// String

				writeString(this.EMAIL, dos);

				// String

				writeString(this.TELEPHONE, dos);

				// String

				writeString(this.PERSON_GROUP_CODE, dos);

				// BigDecimal

				dos.writeObject(this.PERSON_NBR);

				// BigDecimal

				dos.writeObject(this.ADDR_NBR);

			} catch (IOException e) {
				throw new RuntimeException(e);
			}

		}

		public String toString() {

			StringBuilder sb = new StringBuilder();
			sb.append(super.toString());
			sb.append("[");
			sb.append("FILE_SEQ=" + FILE_SEQ);
			sb.append(",FILE_TYPE=" + FILE_TYPE);
			sb.append(",FILE_SERIES=" + String.valueOf(FILE_SERIES));
			sb.append(",FILE_NBR=" + String.valueOf(FILE_NBR));
			sb.append(",IND_SERVICE=" + String.valueOf(IND_SERVICE));
			sb.append(",OWNERSHIP_NOTES=" + OWNERSHIP_NOTES);
			sb.append(",PERSON_NAME=" + PERSON_NAME);
			sb.append(",PERSON_NAME_LANG2=" + PERSON_NAME_LANG2);
			sb.append(",NATIONALITY_COUNTRY_CODE=" + NATIONALITY_COUNTRY_CODE);
			sb.append(",IND_COMPANY=" + String.valueOf(IND_COMPANY));
			sb.append(",LEGAL_NATURE=" + LEGAL_NATURE);
			sb.append(",LEGAL_NATURE_LANG2=" + LEGAL_NATURE_LANG2);
			sb.append(",LEGAL_ID_TYPE=" + LEGAL_ID_TYPE);
			sb.append(",LEGAL_ID_NBR=" + String.valueOf(LEGAL_ID_NBR));
			sb.append(",INDIVIDUAL_ID_TYPE=" + INDIVIDUAL_ID_TYPE);
			sb.append(",INDIVIDUAL_ID_NBR=" + String.valueOf(INDIVIDUAL_ID_NBR));
			sb.append(",RESIDENCE_COUNTRY_CODE=" + RESIDENCE_COUNTRY_CODE);
			sb.append(",STATE_NAME=" + STATE_NAME);
			sb.append(",STATE_CODE=" + STATE_CODE);
			sb.append(",CITY_NAME=" + CITY_NAME);
			sb.append(",CITY_CODE=" + CITY_CODE);
			sb.append(",ADDRESS_ZONE=" + ADDRESS_ZONE);
			sb.append(",ADDRESS_STREET=" + ADDRESS_STREET);
			sb.append(",ADDRESS_STREET_LANG2=" + ADDRESS_STREET_LANG2);
			sb.append(",ZIP_CODE=" + ZIP_CODE);
			sb.append(",EMAIL=" + EMAIL);
			sb.append(",TELEPHONE=" + TELEPHONE);
			sb.append(",PERSON_GROUP_CODE=" + PERSON_GROUP_CODE);
			sb.append(",PERSON_NBR=" + String.valueOf(PERSON_NBR));
			sb.append(",ADDR_NBR=" + String.valueOf(ADDR_NBR));
			sb.append("]");

			return sb.toString();
		}

		/**
		 * Compare keys
		 */
		public int compareTo(copyOfrwk_ownersStruct other) {

			int returnValue = -1;

			return returnValue;
		}

		private int checkNullsAndCompare(Object object1, Object object2) {
			int returnValue = 0;
			if (object1 instanceof Comparable && object2 instanceof Comparable) {
				returnValue = ((Comparable) object1).compareTo(object2);
			} else if (object1 != null && object2 != null) {
				returnValue = compareStrings(object1.toString(), object2.toString());
			} else if (object1 == null && object2 != null) {
				returnValue = 1;
			} else if (object1 != null && object2 == null) {
				returnValue = -1;
			} else {
				returnValue = 0;
			}

			return returnValue;
		}

		private int compareStrings(String string1, String string2) {
			return string1.compareTo(string2);
		}

	}

	public static class row5Struct implements routines.system.IPersistableRow<row5Struct> {
		final static byte[] commonByteArrayLock_WIPO_PROJECTS_G2b_Mig_TM = new byte[0];
		static byte[] commonByteArray_WIPO_PROJECTS_G2b_Mig_TM = new byte[0];

		public String FILE_SEQ;

		public String getFILE_SEQ() {
			return this.FILE_SEQ;
		}

		public String FILE_TYPE;

		public String getFILE_TYPE() {
			return this.FILE_TYPE;
		}

		public BigDecimal FILE_SERIES;

		public BigDecimal getFILE_SERIES() {
			return this.FILE_SERIES;
		}

		public BigDecimal FILE_NBR;

		public BigDecimal getFILE_NBR() {
			return this.FILE_NBR;
		}

		public BigDecimal IND_SERVICE;

		public BigDecimal getIND_SERVICE() {
			return this.IND_SERVICE;
		}

		public String OWNERSHIP_NOTES;

		public String getOWNERSHIP_NOTES() {
			return this.OWNERSHIP_NOTES;
		}

		public String PERSON_NAME;

		public String getPERSON_NAME() {
			return this.PERSON_NAME;
		}

		public String PERSON_NAME_LANG2;

		public String getPERSON_NAME_LANG2() {
			return this.PERSON_NAME_LANG2;
		}

		public String NATIONALITY_COUNTRY_CODE;

		public String getNATIONALITY_COUNTRY_CODE() {
			return this.NATIONALITY_COUNTRY_CODE;
		}

		public BigDecimal IND_COMPANY;

		public BigDecimal getIND_COMPANY() {
			return this.IND_COMPANY;
		}

		public String LEGAL_NATURE;

		public String getLEGAL_NATURE() {
			return this.LEGAL_NATURE;
		}

		public String LEGAL_NATURE_LANG2;

		public String getLEGAL_NATURE_LANG2() {
			return this.LEGAL_NATURE_LANG2;
		}

		public String LEGAL_ID_TYPE;

		public String getLEGAL_ID_TYPE() {
			return this.LEGAL_ID_TYPE;
		}

		public BigDecimal LEGAL_ID_NBR;

		public BigDecimal getLEGAL_ID_NBR() {
			return this.LEGAL_ID_NBR;
		}

		public String INDIVIDUAL_ID_TYPE;

		public String getINDIVIDUAL_ID_TYPE() {
			return this.INDIVIDUAL_ID_TYPE;
		}

		public BigDecimal INDIVIDUAL_ID_NBR;

		public BigDecimal getINDIVIDUAL_ID_NBR() {
			return this.INDIVIDUAL_ID_NBR;
		}

		public String RESIDENCE_COUNTRY_CODE;

		public String getRESIDENCE_COUNTRY_CODE() {
			return this.RESIDENCE_COUNTRY_CODE;
		}

		public String STATE_NAME;

		public String getSTATE_NAME() {
			return this.STATE_NAME;
		}

		public String STATE_CODE;

		public String getSTATE_CODE() {
			return this.STATE_CODE;
		}

		public String CITY_NAME;

		public String getCITY_NAME() {
			return this.CITY_NAME;
		}

		public String CITY_CODE;

		public String getCITY_CODE() {
			return this.CITY_CODE;
		}

		public String ADDRESS_ZONE;

		public String getADDRESS_ZONE() {
			return this.ADDRESS_ZONE;
		}

		public String ADDRESS_STREET;

		public String getADDRESS_STREET() {
			return this.ADDRESS_STREET;
		}

		public String ADDRESS_STREET_LANG2;

		public String getADDRESS_STREET_LANG2() {
			return this.ADDRESS_STREET_LANG2;
		}

		public String ZIP_CODE;

		public String getZIP_CODE() {
			return this.ZIP_CODE;
		}

		public String EMAIL;

		public String getEMAIL() {
			return this.EMAIL;
		}

		public String TELEPHONE;

		public String getTELEPHONE() {
			return this.TELEPHONE;
		}

		public String PERSON_GROUP_CODE;

		public String getPERSON_GROUP_CODE() {
			return this.PERSON_GROUP_CODE;
		}

		private String readString(ObjectInputStream dis) throws IOException {
			String strReturn = null;
			int length = 0;
			length = dis.readInt();
			if (length == -1) {
				strReturn = null;
			} else {
				if (length > commonByteArray_WIPO_PROJECTS_G2b_Mig_TM.length) {
					if (length < 1024 && commonByteArray_WIPO_PROJECTS_G2b_Mig_TM.length == 0) {
						commonByteArray_WIPO_PROJECTS_G2b_Mig_TM = new byte[1024];
					} else {
						commonByteArray_WIPO_PROJECTS_G2b_Mig_TM = new byte[2 * length];
					}
				}
				dis.readFully(commonByteArray_WIPO_PROJECTS_G2b_Mig_TM, 0, length);
				strReturn = new String(commonByteArray_WIPO_PROJECTS_G2b_Mig_TM, 0, length, utf8Charset);
			}
			return strReturn;
		}

		private void writeString(String str, ObjectOutputStream dos) throws IOException {
			if (str == null) {
				dos.writeInt(-1);
			} else {
				byte[] byteArray = str.getBytes(utf8Charset);
				dos.writeInt(byteArray.length);
				dos.write(byteArray);
			}
		}

		public void readData(ObjectInputStream dis) {

			synchronized (commonByteArrayLock_WIPO_PROJECTS_G2b_Mig_TM) {

				try {

					int length = 0;

					this.FILE_SEQ = readString(dis);

					this.FILE_TYPE = readString(dis);

					this.FILE_SERIES = (BigDecimal) dis.readObject();

					this.FILE_NBR = (BigDecimal) dis.readObject();

					this.IND_SERVICE = (BigDecimal) dis.readObject();

					this.OWNERSHIP_NOTES = readString(dis);

					this.PERSON_NAME = readString(dis);

					this.PERSON_NAME_LANG2 = readString(dis);

					this.NATIONALITY_COUNTRY_CODE = readString(dis);

					this.IND_COMPANY = (BigDecimal) dis.readObject();

					this.LEGAL_NATURE = readString(dis);

					this.LEGAL_NATURE_LANG2 = readString(dis);

					this.LEGAL_ID_TYPE = readString(dis);

					this.LEGAL_ID_NBR = (BigDecimal) dis.readObject();

					this.INDIVIDUAL_ID_TYPE = readString(dis);

					this.INDIVIDUAL_ID_NBR = (BigDecimal) dis.readObject();

					this.RESIDENCE_COUNTRY_CODE = readString(dis);

					this.STATE_NAME = readString(dis);

					this.STATE_CODE = readString(dis);

					this.CITY_NAME = readString(dis);

					this.CITY_CODE = readString(dis);

					this.ADDRESS_ZONE = readString(dis);

					this.ADDRESS_STREET = readString(dis);

					this.ADDRESS_STREET_LANG2 = readString(dis);

					this.ZIP_CODE = readString(dis);

					this.EMAIL = readString(dis);

					this.TELEPHONE = readString(dis);

					this.PERSON_GROUP_CODE = readString(dis);

				} catch (IOException e) {
					throw new RuntimeException(e);

				} catch (ClassNotFoundException eCNFE) {
					throw new RuntimeException(eCNFE);

				}

			}

		}

		public void writeData(ObjectOutputStream dos) {
			try {

				// String

				writeString(this.FILE_SEQ, dos);

				// String

				writeString(this.FILE_TYPE, dos);

				// BigDecimal

				dos.writeObject(this.FILE_SERIES);

				// BigDecimal

				dos.writeObject(this.FILE_NBR);

				// BigDecimal

				dos.writeObject(this.IND_SERVICE);

				// String

				writeString(this.OWNERSHIP_NOTES, dos);

				// String

				writeString(this.PERSON_NAME, dos);

				// String

				writeString(this.PERSON_NAME_LANG2, dos);

				// String

				writeString(this.NATIONALITY_COUNTRY_CODE, dos);

				// BigDecimal

				dos.writeObject(this.IND_COMPANY);

				// String

				writeString(this.LEGAL_NATURE, dos);

				// String

				writeString(this.LEGAL_NATURE_LANG2, dos);

				// String

				writeString(this.LEGAL_ID_TYPE, dos);

				// BigDecimal

				dos.writeObject(this.LEGAL_ID_NBR);

				// String

				writeString(this.INDIVIDUAL_ID_TYPE, dos);

				// BigDecimal

				dos.writeObject(this.INDIVIDUAL_ID_NBR);

				// String

				writeString(this.RESIDENCE_COUNTRY_CODE, dos);

				// String

				writeString(this.STATE_NAME, dos);

				// String

				writeString(this.STATE_CODE, dos);

				// String

				writeString(this.CITY_NAME, dos);

				// String

				writeString(this.CITY_CODE, dos);

				// String

				writeString(this.ADDRESS_ZONE, dos);

				// String

				writeString(this.ADDRESS_STREET, dos);

				// String

				writeString(this.ADDRESS_STREET_LANG2, dos);

				// String

				writeString(this.ZIP_CODE, dos);

				// String

				writeString(this.EMAIL, dos);

				// String

				writeString(this.TELEPHONE, dos);

				// String

				writeString(this.PERSON_GROUP_CODE, dos);

			} catch (IOException e) {
				throw new RuntimeException(e);
			}

		}

		public String toString() {

			StringBuilder sb = new StringBuilder();
			sb.append(super.toString());
			sb.append("[");
			sb.append("FILE_SEQ=" + FILE_SEQ);
			sb.append(",FILE_TYPE=" + FILE_TYPE);
			sb.append(",FILE_SERIES=" + String.valueOf(FILE_SERIES));
			sb.append(",FILE_NBR=" + String.valueOf(FILE_NBR));
			sb.append(",IND_SERVICE=" + String.valueOf(IND_SERVICE));
			sb.append(",OWNERSHIP_NOTES=" + OWNERSHIP_NOTES);
			sb.append(",PERSON_NAME=" + PERSON_NAME);
			sb.append(",PERSON_NAME_LANG2=" + PERSON_NAME_LANG2);
			sb.append(",NATIONALITY_COUNTRY_CODE=" + NATIONALITY_COUNTRY_CODE);
			sb.append(",IND_COMPANY=" + String.valueOf(IND_COMPANY));
			sb.append(",LEGAL_NATURE=" + LEGAL_NATURE);
			sb.append(",LEGAL_NATURE_LANG2=" + LEGAL_NATURE_LANG2);
			sb.append(",LEGAL_ID_TYPE=" + LEGAL_ID_TYPE);
			sb.append(",LEGAL_ID_NBR=" + String.valueOf(LEGAL_ID_NBR));
			sb.append(",INDIVIDUAL_ID_TYPE=" + INDIVIDUAL_ID_TYPE);
			sb.append(",INDIVIDUAL_ID_NBR=" + String.valueOf(INDIVIDUAL_ID_NBR));
			sb.append(",RESIDENCE_COUNTRY_CODE=" + RESIDENCE_COUNTRY_CODE);
			sb.append(",STATE_NAME=" + STATE_NAME);
			sb.append(",STATE_CODE=" + STATE_CODE);
			sb.append(",CITY_NAME=" + CITY_NAME);
			sb.append(",CITY_CODE=" + CITY_CODE);
			sb.append(",ADDRESS_ZONE=" + ADDRESS_ZONE);
			sb.append(",ADDRESS_STREET=" + ADDRESS_STREET);
			sb.append(",ADDRESS_STREET_LANG2=" + ADDRESS_STREET_LANG2);
			sb.append(",ZIP_CODE=" + ZIP_CODE);
			sb.append(",EMAIL=" + EMAIL);
			sb.append(",TELEPHONE=" + TELEPHONE);
			sb.append(",PERSON_GROUP_CODE=" + PERSON_GROUP_CODE);
			sb.append("]");

			return sb.toString();
		}

		/**
		 * Compare keys
		 */
		public int compareTo(row5Struct other) {

			int returnValue = -1;

			return returnValue;
		}

		private int checkNullsAndCompare(Object object1, Object object2) {
			int returnValue = 0;
			if (object1 instanceof Comparable && object2 instanceof Comparable) {
				returnValue = ((Comparable) object1).compareTo(object2);
			} else if (object1 != null && object2 != null) {
				returnValue = compareStrings(object1.toString(), object2.toString());
			} else if (object1 == null && object2 != null) {
				returnValue = 1;
			} else if (object1 != null && object2 == null) {
				returnValue = -1;
			} else {
				returnValue = 0;
			}

			return returnValue;
		}

		private int compareStrings(String string1, String string2) {
			return string1.compareTo(string2);
		}

	}

	public static class after_tDBInput_47Struct implements routines.system.IPersistableRow<after_tDBInput_47Struct> {
		final static byte[] commonByteArrayLock_WIPO_PROJECTS_G2b_Mig_TM = new byte[0];
		static byte[] commonByteArray_WIPO_PROJECTS_G2b_Mig_TM = new byte[0];

		public String FILE_SEQ;

		public String getFILE_SEQ() {
			return this.FILE_SEQ;
		}

		public String FILE_TYPE;

		public String getFILE_TYPE() {
			return this.FILE_TYPE;
		}

		public BigDecimal FILE_SERIES;

		public BigDecimal getFILE_SERIES() {
			return this.FILE_SERIES;
		}

		public BigDecimal FILE_NBR;

		public BigDecimal getFILE_NBR() {
			return this.FILE_NBR;
		}

		public BigDecimal IND_SERVICE;

		public BigDecimal getIND_SERVICE() {
			return this.IND_SERVICE;
		}

		public String OWNERSHIP_NOTES;

		public String getOWNERSHIP_NOTES() {
			return this.OWNERSHIP_NOTES;
		}

		public String PERSON_NAME;

		public String getPERSON_NAME() {
			return this.PERSON_NAME;
		}

		public String PERSON_NAME_LANG2;

		public String getPERSON_NAME_LANG2() {
			return this.PERSON_NAME_LANG2;
		}

		public String NATIONALITY_COUNTRY_CODE;

		public String getNATIONALITY_COUNTRY_CODE() {
			return this.NATIONALITY_COUNTRY_CODE;
		}

		public BigDecimal IND_COMPANY;

		public BigDecimal getIND_COMPANY() {
			return this.IND_COMPANY;
		}

		public String LEGAL_NATURE;

		public String getLEGAL_NATURE() {
			return this.LEGAL_NATURE;
		}

		public String LEGAL_NATURE_LANG2;

		public String getLEGAL_NATURE_LANG2() {
			return this.LEGAL_NATURE_LANG2;
		}

		public String LEGAL_ID_TYPE;

		public String getLEGAL_ID_TYPE() {
			return this.LEGAL_ID_TYPE;
		}

		public BigDecimal LEGAL_ID_NBR;

		public BigDecimal getLEGAL_ID_NBR() {
			return this.LEGAL_ID_NBR;
		}

		public String INDIVIDUAL_ID_TYPE;

		public String getINDIVIDUAL_ID_TYPE() {
			return this.INDIVIDUAL_ID_TYPE;
		}

		public BigDecimal INDIVIDUAL_ID_NBR;

		public BigDecimal getINDIVIDUAL_ID_NBR() {
			return this.INDIVIDUAL_ID_NBR;
		}

		public String RESIDENCE_COUNTRY_CODE;

		public String getRESIDENCE_COUNTRY_CODE() {
			return this.RESIDENCE_COUNTRY_CODE;
		}

		public String STATE_NAME;

		public String getSTATE_NAME() {
			return this.STATE_NAME;
		}

		public String STATE_CODE;

		public String getSTATE_CODE() {
			return this.STATE_CODE;
		}

		public String CITY_NAME;

		public String getCITY_NAME() {
			return this.CITY_NAME;
		}

		public String CITY_CODE;

		public String getCITY_CODE() {
			return this.CITY_CODE;
		}

		public String ADDRESS_ZONE;

		public String getADDRESS_ZONE() {
			return this.ADDRESS_ZONE;
		}

		public String ADDRESS_STREET;

		public String getADDRESS_STREET() {
			return this.ADDRESS_STREET;
		}

		public String ADDRESS_STREET_LANG2;

		public String getADDRESS_STREET_LANG2() {
			return this.ADDRESS_STREET_LANG2;
		}

		public String ZIP_CODE;

		public String getZIP_CODE() {
			return this.ZIP_CODE;
		}

		public String EMAIL;

		public String getEMAIL() {
			return this.EMAIL;
		}

		public String TELEPHONE;

		public String getTELEPHONE() {
			return this.TELEPHONE;
		}

		public String PERSON_GROUP_CODE;

		public String getPERSON_GROUP_CODE() {
			return this.PERSON_GROUP_CODE;
		}

		private String readString(ObjectInputStream dis) throws IOException {
			String strReturn = null;
			int length = 0;
			length = dis.readInt();
			if (length == -1) {
				strReturn = null;
			} else {
				if (length > commonByteArray_WIPO_PROJECTS_G2b_Mig_TM.length) {
					if (length < 1024 && commonByteArray_WIPO_PROJECTS_G2b_Mig_TM.length == 0) {
						commonByteArray_WIPO_PROJECTS_G2b_Mig_TM = new byte[1024];
					} else {
						commonByteArray_WIPO_PROJECTS_G2b_Mig_TM = new byte[2 * length];
					}
				}
				dis.readFully(commonByteArray_WIPO_PROJECTS_G2b_Mig_TM, 0, length);
				strReturn = new String(commonByteArray_WIPO_PROJECTS_G2b_Mig_TM, 0, length, utf8Charset);
			}
			return strReturn;
		}

		private void writeString(String str, ObjectOutputStream dos) throws IOException {
			if (str == null) {
				dos.writeInt(-1);
			} else {
				byte[] byteArray = str.getBytes(utf8Charset);
				dos.writeInt(byteArray.length);
				dos.write(byteArray);
			}
		}

		public void readData(ObjectInputStream dis) {

			synchronized (commonByteArrayLock_WIPO_PROJECTS_G2b_Mig_TM) {

				try {

					int length = 0;

					this.FILE_SEQ = readString(dis);

					this.FILE_TYPE = readString(dis);

					this.FILE_SERIES = (BigDecimal) dis.readObject();

					this.FILE_NBR = (BigDecimal) dis.readObject();

					this.IND_SERVICE = (BigDecimal) dis.readObject();

					this.OWNERSHIP_NOTES = readString(dis);

					this.PERSON_NAME = readString(dis);

					this.PERSON_NAME_LANG2 = readString(dis);

					this.NATIONALITY_COUNTRY_CODE = readString(dis);

					this.IND_COMPANY = (BigDecimal) dis.readObject();

					this.LEGAL_NATURE = readString(dis);

					this.LEGAL_NATURE_LANG2 = readString(dis);

					this.LEGAL_ID_TYPE = readString(dis);

					this.LEGAL_ID_NBR = (BigDecimal) dis.readObject();

					this.INDIVIDUAL_ID_TYPE = readString(dis);

					this.INDIVIDUAL_ID_NBR = (BigDecimal) dis.readObject();

					this.RESIDENCE_COUNTRY_CODE = readString(dis);

					this.STATE_NAME = readString(dis);

					this.STATE_CODE = readString(dis);

					this.CITY_NAME = readString(dis);

					this.CITY_CODE = readString(dis);

					this.ADDRESS_ZONE = readString(dis);

					this.ADDRESS_STREET = readString(dis);

					this.ADDRESS_STREET_LANG2 = readString(dis);

					this.ZIP_CODE = readString(dis);

					this.EMAIL = readString(dis);

					this.TELEPHONE = readString(dis);

					this.PERSON_GROUP_CODE = readString(dis);

				} catch (IOException e) {
					throw new RuntimeException(e);

				} catch (ClassNotFoundException eCNFE) {
					throw new RuntimeException(eCNFE);

				}

			}

		}

		public void writeData(ObjectOutputStream dos) {
			try {

				// String

				writeString(this.FILE_SEQ, dos);

				// String

				writeString(this.FILE_TYPE, dos);

				// BigDecimal

				dos.writeObject(this.FILE_SERIES);

				// BigDecimal

				dos.writeObject(this.FILE_NBR);

				// BigDecimal

				dos.writeObject(this.IND_SERVICE);

				// String

				writeString(this.OWNERSHIP_NOTES, dos);

				// String

				writeString(this.PERSON_NAME, dos);

				// String

				writeString(this.PERSON_NAME_LANG2, dos);

				// String

				writeString(this.NATIONALITY_COUNTRY_CODE, dos);

				// BigDecimal

				dos.writeObject(this.IND_COMPANY);

				// String

				writeString(this.LEGAL_NATURE, dos);

				// String

				writeString(this.LEGAL_NATURE_LANG2, dos);

				// String

				writeString(this.LEGAL_ID_TYPE, dos);

				// BigDecimal

				dos.writeObject(this.LEGAL_ID_NBR);

				// String

				writeString(this.INDIVIDUAL_ID_TYPE, dos);

				// BigDecimal

				dos.writeObject(this.INDIVIDUAL_ID_NBR);

				// String

				writeString(this.RESIDENCE_COUNTRY_CODE, dos);

				// String

				writeString(this.STATE_NAME, dos);

				// String

				writeString(this.STATE_CODE, dos);

				// String

				writeString(this.CITY_NAME, dos);

				// String

				writeString(this.CITY_CODE, dos);

				// String

				writeString(this.ADDRESS_ZONE, dos);

				// String

				writeString(this.ADDRESS_STREET, dos);

				// String

				writeString(this.ADDRESS_STREET_LANG2, dos);

				// String

				writeString(this.ZIP_CODE, dos);

				// String

				writeString(this.EMAIL, dos);

				// String

				writeString(this.TELEPHONE, dos);

				// String

				writeString(this.PERSON_GROUP_CODE, dos);

			} catch (IOException e) {
				throw new RuntimeException(e);
			}

		}

		public String toString() {

			StringBuilder sb = new StringBuilder();
			sb.append(super.toString());
			sb.append("[");
			sb.append("FILE_SEQ=" + FILE_SEQ);
			sb.append(",FILE_TYPE=" + FILE_TYPE);
			sb.append(",FILE_SERIES=" + String.valueOf(FILE_SERIES));
			sb.append(",FILE_NBR=" + String.valueOf(FILE_NBR));
			sb.append(",IND_SERVICE=" + String.valueOf(IND_SERVICE));
			sb.append(",OWNERSHIP_NOTES=" + OWNERSHIP_NOTES);
			sb.append(",PERSON_NAME=" + PERSON_NAME);
			sb.append(",PERSON_NAME_LANG2=" + PERSON_NAME_LANG2);
			sb.append(",NATIONALITY_COUNTRY_CODE=" + NATIONALITY_COUNTRY_CODE);
			sb.append(",IND_COMPANY=" + String.valueOf(IND_COMPANY));
			sb.append(",LEGAL_NATURE=" + LEGAL_NATURE);
			sb.append(",LEGAL_NATURE_LANG2=" + LEGAL_NATURE_LANG2);
			sb.append(",LEGAL_ID_TYPE=" + LEGAL_ID_TYPE);
			sb.append(",LEGAL_ID_NBR=" + String.valueOf(LEGAL_ID_NBR));
			sb.append(",INDIVIDUAL_ID_TYPE=" + INDIVIDUAL_ID_TYPE);
			sb.append(",INDIVIDUAL_ID_NBR=" + String.valueOf(INDIVIDUAL_ID_NBR));
			sb.append(",RESIDENCE_COUNTRY_CODE=" + RESIDENCE_COUNTRY_CODE);
			sb.append(",STATE_NAME=" + STATE_NAME);
			sb.append(",STATE_CODE=" + STATE_CODE);
			sb.append(",CITY_NAME=" + CITY_NAME);
			sb.append(",CITY_CODE=" + CITY_CODE);
			sb.append(",ADDRESS_ZONE=" + ADDRESS_ZONE);
			sb.append(",ADDRESS_STREET=" + ADDRESS_STREET);
			sb.append(",ADDRESS_STREET_LANG2=" + ADDRESS_STREET_LANG2);
			sb.append(",ZIP_CODE=" + ZIP_CODE);
			sb.append(",EMAIL=" + EMAIL);
			sb.append(",TELEPHONE=" + TELEPHONE);
			sb.append(",PERSON_GROUP_CODE=" + PERSON_GROUP_CODE);
			sb.append("]");

			return sb.toString();
		}

		/**
		 * Compare keys
		 */
		public int compareTo(after_tDBInput_47Struct other) {

			int returnValue = -1;

			return returnValue;
		}

		private int checkNullsAndCompare(Object object1, Object object2) {
			int returnValue = 0;
			if (object1 instanceof Comparable && object2 instanceof Comparable) {
				returnValue = ((Comparable) object1).compareTo(object2);
			} else if (object1 != null && object2 != null) {
				returnValue = compareStrings(object1.toString(), object2.toString());
			} else if (object1 == null && object2 != null) {
				returnValue = 1;
			} else if (object1 != null && object2 == null) {
				returnValue = -1;
			} else {
				returnValue = 0;
			}

			return returnValue;
		}

		private int compareStrings(String string1, String string2) {
			return string1.compareTo(string2);
		}

	}

	public void tDBInput_47Process(final java.util.Map<String, Object> globalMap) throws TalendException {
		globalMap.put("tDBInput_47_SUBPROCESS_STATE", 0);

		final boolean execStat = this.execStat;

		String iterateId = "";

		String currentComponent = "";
		java.util.Map<String, Object> resourceMap = new java.util.HashMap<String, Object>();

		try {
			// TDI-39566 avoid throwing an useless Exception
			boolean resumeIt = true;
			if (globalResumeTicket == false && resumeEntryMethodName != null) {
				String currentMethodName = new java.lang.Exception().getStackTrace()[0].getMethodName();
				resumeIt = resumeEntryMethodName.equals(currentMethodName);
			}
			if (resumeIt || globalResumeTicket) { // start the resume
				globalResumeTicket = true;

				tDBInput_48Process(globalMap);

				row5Struct row5 = new row5Struct();
				copyOfrwk_ownersStruct copyOfrwk_owners = new copyOfrwk_ownersStruct();
				row1Struct row1 = new row1Struct();

				/**
				 * [tLogRow_1 begin ] start
				 */

				ok_Hash.put("tLogRow_1", false);
				start_Hash.put("tLogRow_1", System.currentTimeMillis());

				currentComponent = "tLogRow_1";

				if (execStat) {
					runStat.updateStatOnConnection(resourceMap, iterateId, 0, 0, "row1");
				}

				int tos_count_tLogRow_1 = 0;

				///////////////////////

				final String OUTPUT_FIELD_SEPARATOR_tLogRow_1 = "|";
				java.io.PrintStream consoleOut_tLogRow_1 = null;

				StringBuilder strBuffer_tLogRow_1 = null;
				int nb_line_tLogRow_1 = 0;
///////////////////////    			

				/**
				 * [tLogRow_1 begin ] stop
				 */

				/**
				 * [tDBOutput_15 begin ] start
				 */

				ok_Hash.put("tDBOutput_15", false);
				start_Hash.put("tDBOutput_15", System.currentTimeMillis());

				tStatCatcher_1.addMessage("begin", "tDBOutput_15");
				tStatCatcher_1Process(globalMap);

				currentComponent = "tDBOutput_15";

				if (execStat) {
					runStat.updateStatOnConnection(resourceMap, iterateId, 0, 0, "copyOfrwk_owners");
				}

				int tos_count_tDBOutput_15 = 0;

				int nb_line_tDBOutput_15 = 0;
				int nb_line_update_tDBOutput_15 = 0;
				int nb_line_inserted_tDBOutput_15 = 0;
				int nb_line_deleted_tDBOutput_15 = 0;
				int nb_line_rejected_tDBOutput_15 = 0;

				int deletedCount_tDBOutput_15 = 0;
				int updatedCount_tDBOutput_15 = 0;
				int insertedCount_tDBOutput_15 = 0;
				int rejectedCount_tDBOutput_15 = 0;
				String dbschema_tDBOutput_15 = null;
				String tableName_tDBOutput_15 = null;
				boolean whetherReject_tDBOutput_15 = false;

				java.util.Calendar calendar_tDBOutput_15 = java.util.Calendar.getInstance();
				long year1_tDBOutput_15 = TalendDate.parseDate("yyyy-MM-dd", "0001-01-01").getTime();
				long year2_tDBOutput_15 = TalendDate.parseDate("yyyy-MM-dd", "1753-01-01").getTime();
				long year10000_tDBOutput_15 = TalendDate.parseDate("yyyy-MM-dd HH:mm:ss", "9999-12-31 24:00:00")
						.getTime();
				long date_tDBOutput_15;

				java.util.Calendar calendar_datetimeoffset_tDBOutput_15 = java.util.Calendar
						.getInstance(java.util.TimeZone.getTimeZone("UTC"));

				java.sql.Connection conn_tDBOutput_15 = null;
				String dbUser_tDBOutput_15 = null;
				dbschema_tDBOutput_15 = "ADMIN";
				String driverClass_tDBOutput_15 = "net.sourceforge.jtds.jdbc.Driver";

				java.lang.Class.forName(driverClass_tDBOutput_15);
				String port_tDBOutput_15 = "1433";
				String dbname_tDBOutput_15 = "MARCAS_PY";
				String url_tDBOutput_15 = "jdbc:jtds:sqlserver://" + "localhost";
				if (!"".equals(port_tDBOutput_15)) {
					url_tDBOutput_15 += ":" + "1433";
				}
				if (!"".equals(dbname_tDBOutput_15)) {
					url_tDBOutput_15 += "//" + "MARCAS_PY";

				}
				url_tDBOutput_15 += ";appName=" + projectName + ";" + "";
				dbUser_tDBOutput_15 = "ADMIN";

				final String decryptedPassword_tDBOutput_15 = routines.system.PasswordEncryptUtil
						.decryptPassword("enc:routine.encryption.key.v1:8JEUT1O78hPQw+OOGax1fOxS/5uuwemU+u5WIFzWLzDp");

				String dbPwd_tDBOutput_15 = decryptedPassword_tDBOutput_15;
				conn_tDBOutput_15 = java.sql.DriverManager.getConnection(url_tDBOutput_15, dbUser_tDBOutput_15,
						dbPwd_tDBOutput_15);

				resourceMap.put("conn_tDBOutput_15", conn_tDBOutput_15);

				conn_tDBOutput_15.setAutoCommit(false);
				int commitEvery_tDBOutput_15 = 10000;
				int commitCounter_tDBOutput_15 = 0;

				if (dbschema_tDBOutput_15 == null || dbschema_tDBOutput_15.trim().length() == 0) {
					tableName_tDBOutput_15 = "WRK_MARK_OWNERS";
				} else {
					tableName_tDBOutput_15 = dbschema_tDBOutput_15 + "].[" + "WRK_MARK_OWNERS";
				}
				int count_tDBOutput_15 = 0;

				String insert_tDBOutput_15 = "INSERT INTO [" + tableName_tDBOutput_15
						+ "] ([FILE_SEQ],[FILE_TYPE],[FILE_SERIES],[FILE_NBR],[IND_SERVICE],[OWNERSHIP_NOTES],[PERSON_NAME],[PERSON_NAME_LANG2],[NATIONALITY_COUNTRY_CODE],[IND_COMPANY],[LEGAL_NATURE],[LEGAL_NATURE_LANG2],[LEGAL_ID_TYPE],[LEGAL_ID_NBR],[INDIVIDUAL_ID_TYPE],[INDIVIDUAL_ID_NBR],[RESIDENCE_COUNTRY_CODE],[STATE_NAME],[STATE_CODE],[CITY_NAME],[CITY_CODE],[ADDRESS_ZONE],[ADDRESS_STREET],[ADDRESS_STREET_LANG2],[ZIP_CODE],[EMAIL],[TELEPHONE],[PERSON_GROUP_CODE],[PERSON_NBR],[ADDR_NBR]) VALUES (?,?,?,?,?,?,?,?,?,?,?,?,?,?,?,?,?,?,?,?,?,?,?,?,?,?,?,?,?,?)";
				java.sql.PreparedStatement pstmt_tDBOutput_15 = conn_tDBOutput_15.prepareStatement(insert_tDBOutput_15);
				resourceMap.put("pstmt_tDBOutput_15", pstmt_tDBOutput_15);

				/**
				 * [tDBOutput_15 begin ] stop
				 */

				/**
				 * [tMap_15 begin ] start
				 */

				ok_Hash.put("tMap_15", false);
				start_Hash.put("tMap_15", System.currentTimeMillis());

				currentComponent = "tMap_15";

				if (execStat) {
					runStat.updateStatOnConnection(resourceMap, iterateId, 0, 0, "row5");
				}

				int tos_count_tMap_15 = 0;

// ###############################
// # Lookup's keys initialization

				org.talend.designer.components.lookup.memory.AdvancedMemoryLookup<row6Struct> tHash_Lookup_row6 = (org.talend.designer.components.lookup.memory.AdvancedMemoryLookup<row6Struct>) ((org.talend.designer.components.lookup.memory.AdvancedMemoryLookup<row6Struct>) globalMap
						.get("tHash_Lookup_row6"));

				row6Struct row6HashKey = new row6Struct();
				row6Struct row6Default = new row6Struct();
// ###############################        

// ###############################
// # Vars initialization
				class Var__tMap_15__Struct {
				}
				Var__tMap_15__Struct Var__tMap_15 = new Var__tMap_15__Struct();
// ###############################

// ###############################
// # Outputs initialization
				copyOfrwk_ownersStruct copyOfrwk_owners_tmp = new copyOfrwk_ownersStruct();
// ###############################

				/**
				 * [tMap_15 begin ] stop
				 */

				/**
				 * [tDBInput_47 begin ] start
				 */

				ok_Hash.put("tDBInput_47", false);
				start_Hash.put("tDBInput_47", System.currentTimeMillis());

				currentComponent = "tDBInput_47";

				int tos_count_tDBInput_47 = 0;

				org.talend.designer.components.util.mssql.MSSqlGenerateTimestampUtil mssqlGTU_tDBInput_47 = org.talend.designer.components.util.mssql.MSSqlUtilFactory
						.getMSSqlGenerateTimestampUtil();

				java.util.List<String> talendToDBList_tDBInput_47 = new java.util.ArrayList();
				String[] talendToDBArray_tDBInput_47 = new String[] { "FLOAT", "NUMERIC", "NUMERIC IDENTITY", "DECIMAL",
						"DECIMAL IDENTITY", "REAL" };
				java.util.Collections.addAll(talendToDBList_tDBInput_47, talendToDBArray_tDBInput_47);
				int nb_line_tDBInput_47 = 0;
				java.sql.Connection conn_tDBInput_47 = null;
				String driverClass_tDBInput_47 = "net.sourceforge.jtds.jdbc.Driver";
				java.lang.Class jdbcclazz_tDBInput_47 = java.lang.Class.forName(driverClass_tDBInput_47);
				String dbUser_tDBInput_47 = "sa";

				final String decryptedPassword_tDBInput_47 = routines.system.PasswordEncryptUtil.decryptPassword(
						"enc:routine.encryption.key.v1:wfJ/aWqHQH/9OuDrhZ8QIfyOM/6FY8ibbi9/r5IO80UOyelQ");

				String dbPwd_tDBInput_47 = decryptedPassword_tDBInput_47;

				String port_tDBInput_47 = "1433";
				String dbname_tDBInput_47 = "PY_INTERMED";
				String url_tDBInput_47 = "jdbc:jtds:sqlserver://" + "localhost";
				if (!"".equals(port_tDBInput_47)) {
					url_tDBInput_47 += ":" + "1433";
				}
				if (!"".equals(dbname_tDBInput_47)) {
					url_tDBInput_47 += "//" + "PY_INTERMED";
				}
				url_tDBInput_47 += ";appName=" + projectName + ";" + "";
				String dbschema_tDBInput_47 = "dbo";

				conn_tDBInput_47 = java.sql.DriverManager.getConnection(url_tDBInput_47, dbUser_tDBInput_47,
						dbPwd_tDBInput_47);

				java.sql.Statement stmt_tDBInput_47 = conn_tDBInput_47.createStatement();

				String dbquery_tDBInput_47 = "SELECT dbo.VW_IMPORT_MARK_OWNERS.FILE_SEQ,\n		dbo.VW_IMPORT_MARK_OWNERS.FILE_TYPE,\n		dbo.VW_IMPORT_MARK_OWNERS.FILE_SERI"
						+ "ES,\n		dbo.VW_IMPORT_MARK_OWNERS.FILE_NBR,\n		dbo.VW_IMPORT_MARK_OWNERS.IND_SERVICE,\n		dbo.VW_IMPORT_MARK_OWNERS.OWNERSHIP"
						+ "_NOTES,\n		dbo.VW_IMPORT_MARK_OWNERS.PERSON_NAME,\n		dbo.VW_IMPORT_MARK_OWNERS.PERSON_NAME_LANG2,\n		dbo.VW_IMPORT_MARK_OWN"
						+ "ERS.NATIONALITY_COUNTRY_CODE,\n		dbo.VW_IMPORT_MARK_OWNERS.IND_COMPANY,\n		dbo.VW_IMPORT_MARK_OWNERS.LEGAL_NATURE,\n		dbo.V"
						+ "W_IMPORT_MARK_OWNERS.LEGAL_NATURE_LANG2,\n		dbo.VW_IMPORT_MARK_OWNERS.LEGAL_ID_TYPE,\n		dbo.VW_IMPORT_MARK_OWNERS.LEGAL_ID"
						+ "_NBR,\n		dbo.VW_IMPORT_MARK_OWNERS.INDIVIDUAL_ID_TYPE,\n		dbo.VW_IMPORT_MARK_OWNERS.INDIVIDUAL_ID_NBR,\n		dbo.VW_IMPORT_MAR"
						+ "K_OWNERS.RESIDENCE_COUNTRY_CODE,\n		dbo.VW_IMPORT_MARK_OWNERS.STATE_NAME,\n		dbo.VW_IMPORT_MARK_OWNERS.STATE_CODE,\n		dbo.V"
						+ "W_IMPORT_MARK_OWNERS.CITY_NAME,\n		dbo.VW_IMPORT_MARK_OWNERS.CITY_CODE,\n		dbo.VW_IMPORT_MARK_OWNERS.ADDRESS_ZONE,\n		dbo.V"
						+ "W_IMPORT_MARK_OWNERS.ADDRESS_STREET,\n		dbo.VW_IMPORT_MARK_OWNERS.ADDRESS_STREET_LANG2,\n		dbo.VW_IMPORT_MARK_OWNERS.ZIP_C"
						+ "ODE,\n		dbo.VW_IMPORT_MARK_OWNERS.EMAIL,\n		dbo.VW_IMPORT_MARK_OWNERS.TELEPHONE,\n		dbo.VW_IMPORT_MARK_OWNERS.PERSON_GROUP_"
						+ "CODE\nFROM	dbo.VW_IMPORT_MARK_OWNERS";

				globalMap.put("tDBInput_47_QUERY", dbquery_tDBInput_47);
				java.sql.ResultSet rs_tDBInput_47 = null;

				try {
					rs_tDBInput_47 = stmt_tDBInput_47.executeQuery(dbquery_tDBInput_47);
					java.sql.ResultSetMetaData rsmd_tDBInput_47 = rs_tDBInput_47.getMetaData();
					int colQtyInRs_tDBInput_47 = rsmd_tDBInput_47.getColumnCount();

					String tmpContent_tDBInput_47 = null;

					while (rs_tDBInput_47.next()) {
						nb_line_tDBInput_47++;

						if (colQtyInRs_tDBInput_47 < 1) {
							row5.FILE_SEQ = null;
						} else {

							tmpContent_tDBInput_47 = rs_tDBInput_47.getString(1);
							if (tmpContent_tDBInput_47 != null) {
								if (talendToDBList_tDBInput_47.contains(
										rsmd_tDBInput_47.getColumnTypeName(1).toUpperCase(java.util.Locale.ENGLISH))) {
									row5.FILE_SEQ = FormatterUtils.formatUnwithE(tmpContent_tDBInput_47);
								} else {
									row5.FILE_SEQ = tmpContent_tDBInput_47;
								}
							} else {
								row5.FILE_SEQ = null;
							}
						}
						if (colQtyInRs_tDBInput_47 < 2) {
							row5.FILE_TYPE = null;
						} else {

							tmpContent_tDBInput_47 = rs_tDBInput_47.getString(2);
							if (tmpContent_tDBInput_47 != null) {
								if (talendToDBList_tDBInput_47.contains(
										rsmd_tDBInput_47.getColumnTypeName(2).toUpperCase(java.util.Locale.ENGLISH))) {
									row5.FILE_TYPE = FormatterUtils.formatUnwithE(tmpContent_tDBInput_47);
								} else {
									row5.FILE_TYPE = tmpContent_tDBInput_47;
								}
							} else {
								row5.FILE_TYPE = null;
							}
						}
						if (colQtyInRs_tDBInput_47 < 3) {
							row5.FILE_SERIES = null;
						} else {

							row5.FILE_SERIES = rs_tDBInput_47.getBigDecimal(3);
							if (rs_tDBInput_47.wasNull()) {
								throw new RuntimeException("Null value in non-Nullable column");
							}
						}
						if (colQtyInRs_tDBInput_47 < 4) {
							row5.FILE_NBR = null;
						} else {

							row5.FILE_NBR = rs_tDBInput_47.getBigDecimal(4);
							if (rs_tDBInput_47.wasNull()) {
								throw new RuntimeException("Null value in non-Nullable column");
							}
						}
						if (colQtyInRs_tDBInput_47 < 5) {
							row5.IND_SERVICE = null;
						} else {

							row5.IND_SERVICE = rs_tDBInput_47.getBigDecimal(5);
							if (rs_tDBInput_47.wasNull()) {
								row5.IND_SERVICE = null;
							}
						}
						if (colQtyInRs_tDBInput_47 < 6) {
							row5.OWNERSHIP_NOTES = null;
						} else {

							tmpContent_tDBInput_47 = rs_tDBInput_47.getString(6);
							if (tmpContent_tDBInput_47 != null) {
								if (talendToDBList_tDBInput_47.contains(
										rsmd_tDBInput_47.getColumnTypeName(6).toUpperCase(java.util.Locale.ENGLISH))) {
									row5.OWNERSHIP_NOTES = FormatterUtils.formatUnwithE(tmpContent_tDBInput_47);
								} else {
									row5.OWNERSHIP_NOTES = tmpContent_tDBInput_47;
								}
							} else {
								row5.OWNERSHIP_NOTES = null;
							}
						}
						if (colQtyInRs_tDBInput_47 < 7) {
							row5.PERSON_NAME = null;
						} else {

							tmpContent_tDBInput_47 = rs_tDBInput_47.getString(7);
							if (tmpContent_tDBInput_47 != null) {
								if (talendToDBList_tDBInput_47.contains(
										rsmd_tDBInput_47.getColumnTypeName(7).toUpperCase(java.util.Locale.ENGLISH))) {
									row5.PERSON_NAME = FormatterUtils.formatUnwithE(tmpContent_tDBInput_47);
								} else {
									row5.PERSON_NAME = tmpContent_tDBInput_47;
								}
							} else {
								row5.PERSON_NAME = null;
							}
						}
						if (colQtyInRs_tDBInput_47 < 8) {
							row5.PERSON_NAME_LANG2 = null;
						} else {

							tmpContent_tDBInput_47 = rs_tDBInput_47.getString(8);
							if (tmpContent_tDBInput_47 != null) {
								if (talendToDBList_tDBInput_47.contains(
										rsmd_tDBInput_47.getColumnTypeName(8).toUpperCase(java.util.Locale.ENGLISH))) {
									row5.PERSON_NAME_LANG2 = FormatterUtils.formatUnwithE(tmpContent_tDBInput_47);
								} else {
									row5.PERSON_NAME_LANG2 = tmpContent_tDBInput_47;
								}
							} else {
								row5.PERSON_NAME_LANG2 = null;
							}
						}
						if (colQtyInRs_tDBInput_47 < 9) {
							row5.NATIONALITY_COUNTRY_CODE = null;
						} else {

							tmpContent_tDBInput_47 = rs_tDBInput_47.getString(9);
							if (tmpContent_tDBInput_47 != null) {
								if (talendToDBList_tDBInput_47.contains(
										rsmd_tDBInput_47.getColumnTypeName(9).toUpperCase(java.util.Locale.ENGLISH))) {
									row5.NATIONALITY_COUNTRY_CODE = FormatterUtils
											.formatUnwithE(tmpContent_tDBInput_47);
								} else {
									row5.NATIONALITY_COUNTRY_CODE = tmpContent_tDBInput_47;
								}
							} else {
								row5.NATIONALITY_COUNTRY_CODE = null;
							}
						}
						if (colQtyInRs_tDBInput_47 < 10) {
							row5.IND_COMPANY = null;
						} else {

							row5.IND_COMPANY = rs_tDBInput_47.getBigDecimal(10);
							if (rs_tDBInput_47.wasNull()) {
								row5.IND_COMPANY = null;
							}
						}
						if (colQtyInRs_tDBInput_47 < 11) {
							row5.LEGAL_NATURE = null;
						} else {

							tmpContent_tDBInput_47 = rs_tDBInput_47.getString(11);
							if (tmpContent_tDBInput_47 != null) {
								if (talendToDBList_tDBInput_47.contains(
										rsmd_tDBInput_47.getColumnTypeName(11).toUpperCase(java.util.Locale.ENGLISH))) {
									row5.LEGAL_NATURE = FormatterUtils.formatUnwithE(tmpContent_tDBInput_47);
								} else {
									row5.LEGAL_NATURE = tmpContent_tDBInput_47;
								}
							} else {
								row5.LEGAL_NATURE = null;
							}
						}
						if (colQtyInRs_tDBInput_47 < 12) {
							row5.LEGAL_NATURE_LANG2 = null;
						} else {

							tmpContent_tDBInput_47 = rs_tDBInput_47.getString(12);
							if (tmpContent_tDBInput_47 != null) {
								if (talendToDBList_tDBInput_47.contains(
										rsmd_tDBInput_47.getColumnTypeName(12).toUpperCase(java.util.Locale.ENGLISH))) {
									row5.LEGAL_NATURE_LANG2 = FormatterUtils.formatUnwithE(tmpContent_tDBInput_47);
								} else {
									row5.LEGAL_NATURE_LANG2 = tmpContent_tDBInput_47;
								}
							} else {
								row5.LEGAL_NATURE_LANG2 = null;
							}
						}
						if (colQtyInRs_tDBInput_47 < 13) {
							row5.LEGAL_ID_TYPE = null;
						} else {

							tmpContent_tDBInput_47 = rs_tDBInput_47.getString(13);
							if (tmpContent_tDBInput_47 != null) {
								if (talendToDBList_tDBInput_47.contains(
										rsmd_tDBInput_47.getColumnTypeName(13).toUpperCase(java.util.Locale.ENGLISH))) {
									row5.LEGAL_ID_TYPE = FormatterUtils.formatUnwithE(tmpContent_tDBInput_47);
								} else {
									row5.LEGAL_ID_TYPE = tmpContent_tDBInput_47;
								}
							} else {
								row5.LEGAL_ID_TYPE = null;
							}
						}
						if (colQtyInRs_tDBInput_47 < 14) {
							row5.LEGAL_ID_NBR = null;
						} else {

							row5.LEGAL_ID_NBR = rs_tDBInput_47.getBigDecimal(14);
							if (rs_tDBInput_47.wasNull()) {
								row5.LEGAL_ID_NBR = null;
							}
						}
						if (colQtyInRs_tDBInput_47 < 15) {
							row5.INDIVIDUAL_ID_TYPE = null;
						} else {

							tmpContent_tDBInput_47 = rs_tDBInput_47.getString(15);
							if (tmpContent_tDBInput_47 != null) {
								if (talendToDBList_tDBInput_47.contains(
										rsmd_tDBInput_47.getColumnTypeName(15).toUpperCase(java.util.Locale.ENGLISH))) {
									row5.INDIVIDUAL_ID_TYPE = FormatterUtils.formatUnwithE(tmpContent_tDBInput_47);
								} else {
									row5.INDIVIDUAL_ID_TYPE = tmpContent_tDBInput_47;
								}
							} else {
								row5.INDIVIDUAL_ID_TYPE = null;
							}
						}
						if (colQtyInRs_tDBInput_47 < 16) {
							row5.INDIVIDUAL_ID_NBR = null;
						} else {

							row5.INDIVIDUAL_ID_NBR = rs_tDBInput_47.getBigDecimal(16);
							if (rs_tDBInput_47.wasNull()) {
								row5.INDIVIDUAL_ID_NBR = null;
							}
						}
						if (colQtyInRs_tDBInput_47 < 17) {
							row5.RESIDENCE_COUNTRY_CODE = null;
						} else {

							tmpContent_tDBInput_47 = rs_tDBInput_47.getString(17);
							if (tmpContent_tDBInput_47 != null) {
								if (talendToDBList_tDBInput_47.contains(
										rsmd_tDBInput_47.getColumnTypeName(17).toUpperCase(java.util.Locale.ENGLISH))) {
									row5.RESIDENCE_COUNTRY_CODE = FormatterUtils.formatUnwithE(tmpContent_tDBInput_47);
								} else {
									row5.RESIDENCE_COUNTRY_CODE = tmpContent_tDBInput_47;
								}
							} else {
								row5.RESIDENCE_COUNTRY_CODE = null;
							}
						}
						if (colQtyInRs_tDBInput_47 < 18) {
							row5.STATE_NAME = null;
						} else {

							tmpContent_tDBInput_47 = rs_tDBInput_47.getString(18);
							if (tmpContent_tDBInput_47 != null) {
								if (talendToDBList_tDBInput_47.contains(
										rsmd_tDBInput_47.getColumnTypeName(18).toUpperCase(java.util.Locale.ENGLISH))) {
									row5.STATE_NAME = FormatterUtils.formatUnwithE(tmpContent_tDBInput_47);
								} else {
									row5.STATE_NAME = tmpContent_tDBInput_47;
								}
							} else {
								row5.STATE_NAME = null;
							}
						}
						if (colQtyInRs_tDBInput_47 < 19) {
							row5.STATE_CODE = null;
						} else {

							tmpContent_tDBInput_47 = rs_tDBInput_47.getString(19);
							if (tmpContent_tDBInput_47 != null) {
								if (talendToDBList_tDBInput_47.contains(
										rsmd_tDBInput_47.getColumnTypeName(19).toUpperCase(java.util.Locale.ENGLISH))) {
									row5.STATE_CODE = FormatterUtils.formatUnwithE(tmpContent_tDBInput_47);
								} else {
									row5.STATE_CODE = tmpContent_tDBInput_47;
								}
							} else {
								row5.STATE_CODE = null;
							}
						}
						if (colQtyInRs_tDBInput_47 < 20) {
							row5.CITY_NAME = null;
						} else {

							tmpContent_tDBInput_47 = rs_tDBInput_47.getString(20);
							if (tmpContent_tDBInput_47 != null) {
								if (talendToDBList_tDBInput_47.contains(
										rsmd_tDBInput_47.getColumnTypeName(20).toUpperCase(java.util.Locale.ENGLISH))) {
									row5.CITY_NAME = FormatterUtils.formatUnwithE(tmpContent_tDBInput_47);
								} else {
									row5.CITY_NAME = tmpContent_tDBInput_47;
								}
							} else {
								row5.CITY_NAME = null;
							}
						}
						if (colQtyInRs_tDBInput_47 < 21) {
							row5.CITY_CODE = null;
						} else {

							tmpContent_tDBInput_47 = rs_tDBInput_47.getString(21);
							if (tmpContent_tDBInput_47 != null) {
								if (talendToDBList_tDBInput_47.contains(
										rsmd_tDBInput_47.getColumnTypeName(21).toUpperCase(java.util.Locale.ENGLISH))) {
									row5.CITY_CODE = FormatterUtils.formatUnwithE(tmpContent_tDBInput_47);
								} else {
									row5.CITY_CODE = tmpContent_tDBInput_47;
								}
							} else {
								row5.CITY_CODE = null;
							}
						}
						if (colQtyInRs_tDBInput_47 < 22) {
							row5.ADDRESS_ZONE = null;
						} else {

							tmpContent_tDBInput_47 = rs_tDBInput_47.getString(22);
							if (tmpContent_tDBInput_47 != null) {
								if (talendToDBList_tDBInput_47.contains(
										rsmd_tDBInput_47.getColumnTypeName(22).toUpperCase(java.util.Locale.ENGLISH))) {
									row5.ADDRESS_ZONE = FormatterUtils.formatUnwithE(tmpContent_tDBInput_47);
								} else {
									row5.ADDRESS_ZONE = tmpContent_tDBInput_47;
								}
							} else {
								row5.ADDRESS_ZONE = null;
							}
						}
						if (colQtyInRs_tDBInput_47 < 23) {
							row5.ADDRESS_STREET = null;
						} else {

							tmpContent_tDBInput_47 = rs_tDBInput_47.getString(23);
							if (tmpContent_tDBInput_47 != null) {
								if (talendToDBList_tDBInput_47.contains(
										rsmd_tDBInput_47.getColumnTypeName(23).toUpperCase(java.util.Locale.ENGLISH))) {
									row5.ADDRESS_STREET = FormatterUtils.formatUnwithE(tmpContent_tDBInput_47);
								} else {
									row5.ADDRESS_STREET = tmpContent_tDBInput_47;
								}
							} else {
								row5.ADDRESS_STREET = null;
							}
						}
						if (colQtyInRs_tDBInput_47 < 24) {
							row5.ADDRESS_STREET_LANG2 = null;
						} else {

							tmpContent_tDBInput_47 = rs_tDBInput_47.getString(24);
							if (tmpContent_tDBInput_47 != null) {
								if (talendToDBList_tDBInput_47.contains(
										rsmd_tDBInput_47.getColumnTypeName(24).toUpperCase(java.util.Locale.ENGLISH))) {
									row5.ADDRESS_STREET_LANG2 = FormatterUtils.formatUnwithE(tmpContent_tDBInput_47);
								} else {
									row5.ADDRESS_STREET_LANG2 = tmpContent_tDBInput_47;
								}
							} else {
								row5.ADDRESS_STREET_LANG2 = null;
							}
						}
						if (colQtyInRs_tDBInput_47 < 25) {
							row5.ZIP_CODE = null;
						} else {

							tmpContent_tDBInput_47 = rs_tDBInput_47.getString(25);
							if (tmpContent_tDBInput_47 != null) {
								if (talendToDBList_tDBInput_47.contains(
										rsmd_tDBInput_47.getColumnTypeName(25).toUpperCase(java.util.Locale.ENGLISH))) {
									row5.ZIP_CODE = FormatterUtils.formatUnwithE(tmpContent_tDBInput_47);
								} else {
									row5.ZIP_CODE = tmpContent_tDBInput_47;
								}
							} else {
								row5.ZIP_CODE = null;
							}
						}
						if (colQtyInRs_tDBInput_47 < 26) {
							row5.EMAIL = null;
						} else {

							tmpContent_tDBInput_47 = rs_tDBInput_47.getString(26);
							if (tmpContent_tDBInput_47 != null) {
								if (talendToDBList_tDBInput_47.contains(
										rsmd_tDBInput_47.getColumnTypeName(26).toUpperCase(java.util.Locale.ENGLISH))) {
									row5.EMAIL = FormatterUtils.formatUnwithE(tmpContent_tDBInput_47);
								} else {
									row5.EMAIL = tmpContent_tDBInput_47;
								}
							} else {
								row5.EMAIL = null;
							}
						}
						if (colQtyInRs_tDBInput_47 < 27) {
							row5.TELEPHONE = null;
						} else {

							tmpContent_tDBInput_47 = rs_tDBInput_47.getString(27);
							if (tmpContent_tDBInput_47 != null) {
								if (talendToDBList_tDBInput_47.contains(
										rsmd_tDBInput_47.getColumnTypeName(27).toUpperCase(java.util.Locale.ENGLISH))) {
									row5.TELEPHONE = FormatterUtils.formatUnwithE(tmpContent_tDBInput_47);
								} else {
									row5.TELEPHONE = tmpContent_tDBInput_47;
								}
							} else {
								row5.TELEPHONE = null;
							}
						}
						if (colQtyInRs_tDBInput_47 < 28) {
							row5.PERSON_GROUP_CODE = null;
						} else {

							tmpContent_tDBInput_47 = rs_tDBInput_47.getString(28);
							if (tmpContent_tDBInput_47 != null) {
								if (talendToDBList_tDBInput_47.contains(
										rsmd_tDBInput_47.getColumnTypeName(28).toUpperCase(java.util.Locale.ENGLISH))) {
									row5.PERSON_GROUP_CODE = FormatterUtils.formatUnwithE(tmpContent_tDBInput_47);
								} else {
									row5.PERSON_GROUP_CODE = tmpContent_tDBInput_47;
								}
							} else {
								row5.PERSON_GROUP_CODE = null;
							}
						}

						/**
						 * [tDBInput_47 begin ] stop
						 */

						/**
						 * [tDBInput_47 main ] start
						 */

						currentComponent = "tDBInput_47";

						tos_count_tDBInput_47++;

						/**
						 * [tDBInput_47 main ] stop
						 */

						/**
						 * [tDBInput_47 process_data_begin ] start
						 */

						currentComponent = "tDBInput_47";

						/**
						 * [tDBInput_47 process_data_begin ] stop
						 */

						/**
						 * [tMap_15 main ] start
						 */

						currentComponent = "tMap_15";

						if (execStat) {
							runStat.updateStatOnConnection(iterateId, 1, 1

									, "row5"

							);
						}

						boolean hasCasePrimitiveKeyWithNull_tMap_15 = false;

						// ###############################
						// # Input tables (lookups)
						boolean rejectedInnerJoin_tMap_15 = false;
						boolean mainRowRejected_tMap_15 = false;

						///////////////////////////////////////////////
						// Starting Lookup Table "row6"
						///////////////////////////////////////////////

						boolean forceLooprow6 = false;

						row6Struct row6ObjectFromLookup = null;

						if (!rejectedInnerJoin_tMap_15) { // G_TM_M_020

							hasCasePrimitiveKeyWithNull_tMap_15 = false;

							row6HashKey.FILE_SEQ = row5.FILE_SEQ;

							row6HashKey.FILE_TYPE = row5.FILE_TYPE;

							row6HashKey.FILE_SERIES = row5.FILE_SERIES;

							row6HashKey.FILE_NBR = row5.FILE_NBR;

							row6HashKey.hashCodeDirty = true;

							tHash_Lookup_row6.lookup(row6HashKey);

						} // G_TM_M_020

						if (tHash_Lookup_row6 != null && tHash_Lookup_row6.getCount(row6HashKey) > 1) { // G 071

							// System.out.println("WARNING: UNIQUE MATCH is configured for the lookup 'row6'
							// and it contains more one result from keys : row6.FILE_SEQ = '" +
							// row6HashKey.FILE_SEQ + "', row6.FILE_TYPE = '" + row6HashKey.FILE_TYPE + "',
							// row6.FILE_SERIES = '" + row6HashKey.FILE_SERIES + "', row6.FILE_NBR = '" +
							// row6HashKey.FILE_NBR + "'");
						} // G 071

						row6Struct row6 = null;

						row6Struct fromLookup_row6 = null;
						row6 = row6Default;

						if (tHash_Lookup_row6 != null && tHash_Lookup_row6.hasNext()) { // G 099

							fromLookup_row6 = tHash_Lookup_row6.next();

						} // G 099

						if (fromLookup_row6 != null) {
							row6 = fromLookup_row6;
						}

						// ###############################
						{ // start of Var scope

							// ###############################
							// # Vars tables

							Var__tMap_15__Struct Var = Var__tMap_15;// ###############################
							// ###############################
							// # Output tables

							copyOfrwk_owners = null;

// # Output table : 'copyOfrwk_owners'
							copyOfrwk_owners_tmp.FILE_SEQ = row6.FILE_SEQ;
							copyOfrwk_owners_tmp.FILE_TYPE = row6.FILE_TYPE;
							copyOfrwk_owners_tmp.FILE_SERIES = row6.FILE_SERIES;
							copyOfrwk_owners_tmp.FILE_NBR = row6.FILE_NBR;
							copyOfrwk_owners_tmp.IND_SERVICE = row5.IND_SERVICE;
							copyOfrwk_owners_tmp.OWNERSHIP_NOTES = row5.OWNERSHIP_NOTES;
							copyOfrwk_owners_tmp.PERSON_NAME = row5.PERSON_NAME;
							copyOfrwk_owners_tmp.PERSON_NAME_LANG2 = row5.PERSON_NAME_LANG2;
							copyOfrwk_owners_tmp.NATIONALITY_COUNTRY_CODE = row5.NATIONALITY_COUNTRY_CODE;
							copyOfrwk_owners_tmp.IND_COMPANY = row5.IND_COMPANY;
							copyOfrwk_owners_tmp.LEGAL_NATURE = row5.LEGAL_NATURE;
							copyOfrwk_owners_tmp.LEGAL_NATURE_LANG2 = row5.LEGAL_NATURE_LANG2;
							copyOfrwk_owners_tmp.LEGAL_ID_TYPE = row5.LEGAL_ID_TYPE;
							copyOfrwk_owners_tmp.LEGAL_ID_NBR = row5.LEGAL_ID_NBR;
							copyOfrwk_owners_tmp.INDIVIDUAL_ID_TYPE = row5.INDIVIDUAL_ID_TYPE;
							copyOfrwk_owners_tmp.INDIVIDUAL_ID_NBR = row5.INDIVIDUAL_ID_NBR;
							copyOfrwk_owners_tmp.RESIDENCE_COUNTRY_CODE = row5.RESIDENCE_COUNTRY_CODE;
							copyOfrwk_owners_tmp.STATE_NAME = row5.STATE_NAME;
							copyOfrwk_owners_tmp.STATE_CODE = row5.STATE_CODE;
							copyOfrwk_owners_tmp.CITY_NAME = row5.CITY_NAME;
							copyOfrwk_owners_tmp.CITY_CODE = row5.CITY_CODE;
							copyOfrwk_owners_tmp.ADDRESS_ZONE = row5.ADDRESS_ZONE;
							copyOfrwk_owners_tmp.ADDRESS_STREET = row5.ADDRESS_STREET;
							copyOfrwk_owners_tmp.ADDRESS_STREET_LANG2 = row5.ADDRESS_STREET_LANG2;
							copyOfrwk_owners_tmp.ZIP_CODE = row5.ZIP_CODE;
							copyOfrwk_owners_tmp.EMAIL = row5.EMAIL;
							copyOfrwk_owners_tmp.TELEPHONE = row5.TELEPHONE;
							copyOfrwk_owners_tmp.PERSON_GROUP_CODE = row5.PERSON_GROUP_CODE;
							copyOfrwk_owners_tmp.PERSON_NBR = null;
							copyOfrwk_owners_tmp.ADDR_NBR = null;
							copyOfrwk_owners = copyOfrwk_owners_tmp;
// ###############################

						} // end of Var scope

						rejectedInnerJoin_tMap_15 = false;

						tos_count_tMap_15++;

						/**
						 * [tMap_15 main ] stop
						 */

						/**
						 * [tMap_15 process_data_begin ] start
						 */

						currentComponent = "tMap_15";

						/**
						 * [tMap_15 process_data_begin ] stop
						 */
// Start of branch "copyOfrwk_owners"
						if (copyOfrwk_owners != null) {
							row1 = null;

							/**
							 * [tDBOutput_15 main ] start
							 */

							currentComponent = "tDBOutput_15";

							if (execStat) {
								runStat.updateStatOnConnection(iterateId, 1, 1

										, "copyOfrwk_owners"

								);
							}

							row1 = null;
							whetherReject_tDBOutput_15 = false;
							try {
								if (copyOfrwk_owners.FILE_SEQ == null) {
									pstmt_tDBOutput_15.setNull(1, java.sql.Types.VARCHAR);
								} else {
									pstmt_tDBOutput_15.setString(1, copyOfrwk_owners.FILE_SEQ);
								}

								if (copyOfrwk_owners.FILE_TYPE == null) {
									pstmt_tDBOutput_15.setNull(2, java.sql.Types.VARCHAR);
								} else {
									pstmt_tDBOutput_15.setString(2, copyOfrwk_owners.FILE_TYPE);
								}

								pstmt_tDBOutput_15.setBigDecimal(3, copyOfrwk_owners.FILE_SERIES);

								pstmt_tDBOutput_15.setBigDecimal(4, copyOfrwk_owners.FILE_NBR);

								pstmt_tDBOutput_15.setBigDecimal(5, copyOfrwk_owners.IND_SERVICE);

								if (copyOfrwk_owners.OWNERSHIP_NOTES == null) {
									pstmt_tDBOutput_15.setNull(6, java.sql.Types.VARCHAR);
								} else {
									pstmt_tDBOutput_15.setString(6, copyOfrwk_owners.OWNERSHIP_NOTES);
								}

								if (copyOfrwk_owners.PERSON_NAME == null) {
									pstmt_tDBOutput_15.setNull(7, java.sql.Types.VARCHAR);
								} else {
									pstmt_tDBOutput_15.setString(7, copyOfrwk_owners.PERSON_NAME);
								}

								if (copyOfrwk_owners.PERSON_NAME_LANG2 == null) {
									pstmt_tDBOutput_15.setNull(8, java.sql.Types.VARCHAR);
								} else {
									pstmt_tDBOutput_15.setString(8, copyOfrwk_owners.PERSON_NAME_LANG2);
								}

								if (copyOfrwk_owners.NATIONALITY_COUNTRY_CODE == null) {
									pstmt_tDBOutput_15.setNull(9, java.sql.Types.VARCHAR);
								} else {
									pstmt_tDBOutput_15.setString(9, copyOfrwk_owners.NATIONALITY_COUNTRY_CODE);
								}

								pstmt_tDBOutput_15.setBigDecimal(10, copyOfrwk_owners.IND_COMPANY);

								if (copyOfrwk_owners.LEGAL_NATURE == null) {
									pstmt_tDBOutput_15.setNull(11, java.sql.Types.VARCHAR);
								} else {
									pstmt_tDBOutput_15.setString(11, copyOfrwk_owners.LEGAL_NATURE);
								}

								if (copyOfrwk_owners.LEGAL_NATURE_LANG2 == null) {
									pstmt_tDBOutput_15.setNull(12, java.sql.Types.VARCHAR);
								} else {
									pstmt_tDBOutput_15.setString(12, copyOfrwk_owners.LEGAL_NATURE_LANG2);
								}

								if (copyOfrwk_owners.LEGAL_ID_TYPE == null) {
									pstmt_tDBOutput_15.setNull(13, java.sql.Types.VARCHAR);
								} else {
									pstmt_tDBOutput_15.setString(13, copyOfrwk_owners.LEGAL_ID_TYPE);
								}

								pstmt_tDBOutput_15.setBigDecimal(14, copyOfrwk_owners.LEGAL_ID_NBR);

								if (copyOfrwk_owners.INDIVIDUAL_ID_TYPE == null) {
									pstmt_tDBOutput_15.setNull(15, java.sql.Types.VARCHAR);
								} else {
									pstmt_tDBOutput_15.setString(15, copyOfrwk_owners.INDIVIDUAL_ID_TYPE);
								}

								pstmt_tDBOutput_15.setBigDecimal(16, copyOfrwk_owners.INDIVIDUAL_ID_NBR);

								if (copyOfrwk_owners.RESIDENCE_COUNTRY_CODE == null) {
									pstmt_tDBOutput_15.setNull(17, java.sql.Types.VARCHAR);
								} else {
									pstmt_tDBOutput_15.setString(17, copyOfrwk_owners.RESIDENCE_COUNTRY_CODE);
								}

								if (copyOfrwk_owners.STATE_NAME == null) {
									pstmt_tDBOutput_15.setNull(18, java.sql.Types.VARCHAR);
								} else {
									pstmt_tDBOutput_15.setString(18, copyOfrwk_owners.STATE_NAME);
								}

								if (copyOfrwk_owners.STATE_CODE == null) {
									pstmt_tDBOutput_15.setNull(19, java.sql.Types.VARCHAR);
								} else {
									pstmt_tDBOutput_15.setString(19, copyOfrwk_owners.STATE_CODE);
								}

								if (copyOfrwk_owners.CITY_NAME == null) {
									pstmt_tDBOutput_15.setNull(20, java.sql.Types.VARCHAR);
								} else {
									pstmt_tDBOutput_15.setString(20, copyOfrwk_owners.CITY_NAME);
								}

								if (copyOfrwk_owners.CITY_CODE == null) {
									pstmt_tDBOutput_15.setNull(21, java.sql.Types.VARCHAR);
								} else {
									pstmt_tDBOutput_15.setString(21, copyOfrwk_owners.CITY_CODE);
								}

								if (copyOfrwk_owners.ADDRESS_ZONE == null) {
									pstmt_tDBOutput_15.setNull(22, java.sql.Types.VARCHAR);
								} else {
									pstmt_tDBOutput_15.setString(22, copyOfrwk_owners.ADDRESS_ZONE);
								}

								if (copyOfrwk_owners.ADDRESS_STREET == null) {
									pstmt_tDBOutput_15.setNull(23, java.sql.Types.VARCHAR);
								} else {
									pstmt_tDBOutput_15.setString(23, copyOfrwk_owners.ADDRESS_STREET);
								}

								if (copyOfrwk_owners.ADDRESS_STREET_LANG2 == null) {
									pstmt_tDBOutput_15.setNull(24, java.sql.Types.VARCHAR);
								} else {
									pstmt_tDBOutput_15.setString(24, copyOfrwk_owners.ADDRESS_STREET_LANG2);
								}

								if (copyOfrwk_owners.ZIP_CODE == null) {
									pstmt_tDBOutput_15.setNull(25, java.sql.Types.VARCHAR);
								} else {
									pstmt_tDBOutput_15.setString(25, copyOfrwk_owners.ZIP_CODE);
								}

								if (copyOfrwk_owners.EMAIL == null) {
									pstmt_tDBOutput_15.setNull(26, java.sql.Types.VARCHAR);
								} else {
									pstmt_tDBOutput_15.setString(26, copyOfrwk_owners.EMAIL);
								}

								if (copyOfrwk_owners.TELEPHONE == null) {
									pstmt_tDBOutput_15.setNull(27, java.sql.Types.VARCHAR);
								} else {
									pstmt_tDBOutput_15.setString(27, copyOfrwk_owners.TELEPHONE);
								}

								if (copyOfrwk_owners.PERSON_GROUP_CODE == null) {
									pstmt_tDBOutput_15.setNull(28, java.sql.Types.VARCHAR);
								} else {
									pstmt_tDBOutput_15.setString(28, copyOfrwk_owners.PERSON_GROUP_CODE);
								}

								pstmt_tDBOutput_15.setBigDecimal(29, copyOfrwk_owners.PERSON_NBR);

								pstmt_tDBOutput_15.setBigDecimal(30, copyOfrwk_owners.ADDR_NBR);

								nb_line_tDBOutput_15++;
								insertedCount_tDBOutput_15 = insertedCount_tDBOutput_15
										+ pstmt_tDBOutput_15.executeUpdate();
							} catch (java.lang.Exception e) {
								whetherReject_tDBOutput_15 = true;
								row1 = new row1Struct();
								row1.FILE_SEQ = copyOfrwk_owners.FILE_SEQ;
								row1.FILE_TYPE = copyOfrwk_owners.FILE_TYPE;
								row1.FILE_SERIES = copyOfrwk_owners.FILE_SERIES;
								row1.FILE_NBR = copyOfrwk_owners.FILE_NBR;
								row1.IND_SERVICE = copyOfrwk_owners.IND_SERVICE;
								row1.OWNERSHIP_NOTES = copyOfrwk_owners.OWNERSHIP_NOTES;
								row1.PERSON_NAME = copyOfrwk_owners.PERSON_NAME;
								row1.PERSON_NAME_LANG2 = copyOfrwk_owners.PERSON_NAME_LANG2;
								row1.NATIONALITY_COUNTRY_CODE = copyOfrwk_owners.NATIONALITY_COUNTRY_CODE;
								row1.IND_COMPANY = copyOfrwk_owners.IND_COMPANY;
								row1.LEGAL_NATURE = copyOfrwk_owners.LEGAL_NATURE;
								row1.LEGAL_NATURE_LANG2 = copyOfrwk_owners.LEGAL_NATURE_LANG2;
								row1.LEGAL_ID_TYPE = copyOfrwk_owners.LEGAL_ID_TYPE;
								row1.LEGAL_ID_NBR = copyOfrwk_owners.LEGAL_ID_NBR;
								row1.INDIVIDUAL_ID_TYPE = copyOfrwk_owners.INDIVIDUAL_ID_TYPE;
								row1.INDIVIDUAL_ID_NBR = copyOfrwk_owners.INDIVIDUAL_ID_NBR;
								row1.RESIDENCE_COUNTRY_CODE = copyOfrwk_owners.RESIDENCE_COUNTRY_CODE;
								row1.STATE_NAME = copyOfrwk_owners.STATE_NAME;
								row1.STATE_CODE = copyOfrwk_owners.STATE_CODE;
								row1.CITY_NAME = copyOfrwk_owners.CITY_NAME;
								row1.CITY_CODE = copyOfrwk_owners.CITY_CODE;
								row1.ADDRESS_ZONE = copyOfrwk_owners.ADDRESS_ZONE;
								row1.ADDRESS_STREET = copyOfrwk_owners.ADDRESS_STREET;
								row1.ADDRESS_STREET_LANG2 = copyOfrwk_owners.ADDRESS_STREET_LANG2;
								row1.ZIP_CODE = copyOfrwk_owners.ZIP_CODE;
								row1.EMAIL = copyOfrwk_owners.EMAIL;
								row1.TELEPHONE = copyOfrwk_owners.TELEPHONE;
								row1.PERSON_GROUP_CODE = copyOfrwk_owners.PERSON_GROUP_CODE;
								row1.PERSON_NBR = copyOfrwk_owners.PERSON_NBR;
								row1.ADDR_NBR = copyOfrwk_owners.ADDR_NBR;
								rejectedCount_tDBOutput_15 = rejectedCount_tDBOutput_15 + 1;
								row1.errorCode = ((java.sql.SQLException) e).getSQLState();
								row1.errorMessage = e.getMessage() + " - Line: " + tos_count_tDBOutput_15;
							}
							if (!whetherReject_tDBOutput_15) {
							}
							////////// batch execute by batch size///////
							class LimitBytesHelper_tDBOutput_15 {
								public int limitBytePart1(int counter, java.sql.PreparedStatement pstmt_tDBOutput_15)
										throws Exception {
									try {

										for (int countEach_tDBOutput_15 : pstmt_tDBOutput_15.executeBatch()) {
											if (countEach_tDBOutput_15 == -2 || countEach_tDBOutput_15 == -3) {
												break;
											}
											counter += countEach_tDBOutput_15;
										}

									} catch (java.sql.BatchUpdateException e) {

										int countSum_tDBOutput_15 = 0;
										for (int countEach_tDBOutput_15 : e.getUpdateCounts()) {
											counter += (countEach_tDBOutput_15 < 0 ? 0 : countEach_tDBOutput_15);
										}

										System.err.println(e.getMessage());

									}
									return counter;
								}

								public int limitBytePart2(int counter, java.sql.PreparedStatement pstmt_tDBOutput_15)
										throws Exception {
									try {

										for (int countEach_tDBOutput_15 : pstmt_tDBOutput_15.executeBatch()) {
											if (countEach_tDBOutput_15 == -2 || countEach_tDBOutput_15 == -3) {
												break;
											}
											counter += countEach_tDBOutput_15;
										}

									} catch (java.sql.BatchUpdateException e) {

										for (int countEach_tDBOutput_15 : e.getUpdateCounts()) {
											counter += (countEach_tDBOutput_15 < 0 ? 0 : countEach_tDBOutput_15);
										}

										System.err.println(e.getMessage());

									}
									return counter;
								}
							}

							//////////// commit every////////////

							commitCounter_tDBOutput_15++;
							if (commitEvery_tDBOutput_15 <= commitCounter_tDBOutput_15) {

								conn_tDBOutput_15.commit();

								commitCounter_tDBOutput_15 = 0;
							}

							tos_count_tDBOutput_15++;

							/**
							 * [tDBOutput_15 main ] stop
							 */

							/**
							 * [tDBOutput_15 process_data_begin ] start
							 */

							currentComponent = "tDBOutput_15";

							/**
							 * [tDBOutput_15 process_data_begin ] stop
							 */
// Start of branch "row1"
							if (row1 != null) {

								/**
								 * [tLogRow_1 main ] start
								 */

								currentComponent = "tLogRow_1";

								if (execStat) {
									runStat.updateStatOnConnection(iterateId, 1, 1

											, "row1"

									);
								}

///////////////////////		

								strBuffer_tLogRow_1 = new StringBuilder();

								if (row1.FILE_SEQ != null) { //

									strBuffer_tLogRow_1.append(String.valueOf(row1.FILE_SEQ));

								} //

								strBuffer_tLogRow_1.append("|");

								if (row1.FILE_TYPE != null) { //

									strBuffer_tLogRow_1.append(String.valueOf(row1.FILE_TYPE));

								} //

								strBuffer_tLogRow_1.append("|");

								if (row1.FILE_SERIES != null) { //

									strBuffer_tLogRow_1.append(row1.FILE_SERIES
											.setScale(0, java.math.RoundingMode.HALF_UP).toPlainString());

								} //

								strBuffer_tLogRow_1.append("|");

								if (row1.FILE_NBR != null) { //

									strBuffer_tLogRow_1.append(
											row1.FILE_NBR.setScale(0, java.math.RoundingMode.HALF_UP).toPlainString());

								} //

								strBuffer_tLogRow_1.append("|");

								if (row1.IND_SERVICE != null) { //

									strBuffer_tLogRow_1.append(row1.IND_SERVICE
											.setScale(0, java.math.RoundingMode.HALF_UP).toPlainString());

								} //

								strBuffer_tLogRow_1.append("|");

								if (row1.OWNERSHIP_NOTES != null) { //

									strBuffer_tLogRow_1.append(String.valueOf(row1.OWNERSHIP_NOTES));

								} //

								strBuffer_tLogRow_1.append("|");

								if (row1.PERSON_NAME != null) { //

									strBuffer_tLogRow_1.append(String.valueOf(row1.PERSON_NAME));

								} //

								strBuffer_tLogRow_1.append("|");

								if (row1.PERSON_NAME_LANG2 != null) { //

									strBuffer_tLogRow_1.append(String.valueOf(row1.PERSON_NAME_LANG2));

								} //

								strBuffer_tLogRow_1.append("|");

								if (row1.NATIONALITY_COUNTRY_CODE != null) { //

									strBuffer_tLogRow_1.append(String.valueOf(row1.NATIONALITY_COUNTRY_CODE));

								} //

								strBuffer_tLogRow_1.append("|");

								if (row1.IND_COMPANY != null) { //

									strBuffer_tLogRow_1.append(row1.IND_COMPANY
											.setScale(0, java.math.RoundingMode.HALF_UP).toPlainString());

								} //

								strBuffer_tLogRow_1.append("|");

								if (row1.LEGAL_NATURE != null) { //

									strBuffer_tLogRow_1.append(String.valueOf(row1.LEGAL_NATURE));

								} //

								strBuffer_tLogRow_1.append("|");

								if (row1.LEGAL_NATURE_LANG2 != null) { //

									strBuffer_tLogRow_1.append(String.valueOf(row1.LEGAL_NATURE_LANG2));

								} //

								strBuffer_tLogRow_1.append("|");

								if (row1.LEGAL_ID_TYPE != null) { //

									strBuffer_tLogRow_1.append(String.valueOf(row1.LEGAL_ID_TYPE));

								} //

								strBuffer_tLogRow_1.append("|");

								if (row1.LEGAL_ID_NBR != null) { //

									strBuffer_tLogRow_1.append(row1.LEGAL_ID_NBR
											.setScale(0, java.math.RoundingMode.HALF_UP).toPlainString());

								} //

								strBuffer_tLogRow_1.append("|");

								if (row1.INDIVIDUAL_ID_TYPE != null) { //

									strBuffer_tLogRow_1.append(String.valueOf(row1.INDIVIDUAL_ID_TYPE));

								} //

								strBuffer_tLogRow_1.append("|");

								if (row1.INDIVIDUAL_ID_NBR != null) { //

									strBuffer_tLogRow_1.append(row1.INDIVIDUAL_ID_NBR
											.setScale(0, java.math.RoundingMode.HALF_UP).toPlainString());

								} //

								strBuffer_tLogRow_1.append("|");

								if (row1.RESIDENCE_COUNTRY_CODE != null) { //

									strBuffer_tLogRow_1.append(String.valueOf(row1.RESIDENCE_COUNTRY_CODE));

								} //

								strBuffer_tLogRow_1.append("|");

								if (row1.STATE_NAME != null) { //

									strBuffer_tLogRow_1.append(String.valueOf(row1.STATE_NAME));

								} //

								strBuffer_tLogRow_1.append("|");

								if (row1.STATE_CODE != null) { //

									strBuffer_tLogRow_1.append(String.valueOf(row1.STATE_CODE));

								} //

								strBuffer_tLogRow_1.append("|");

								if (row1.CITY_NAME != null) { //

									strBuffer_tLogRow_1.append(String.valueOf(row1.CITY_NAME));

								} //

								strBuffer_tLogRow_1.append("|");

								if (row1.CITY_CODE != null) { //

									strBuffer_tLogRow_1.append(String.valueOf(row1.CITY_CODE));

								} //

								strBuffer_tLogRow_1.append("|");

								if (row1.ADDRESS_ZONE != null) { //

									strBuffer_tLogRow_1.append(String.valueOf(row1.ADDRESS_ZONE));

								} //

								strBuffer_tLogRow_1.append("|");

								if (row1.ADDRESS_STREET != null) { //

									strBuffer_tLogRow_1.append(String.valueOf(row1.ADDRESS_STREET));

								} //

								strBuffer_tLogRow_1.append("|");

								if (row1.ADDRESS_STREET_LANG2 != null) { //

									strBuffer_tLogRow_1.append(String.valueOf(row1.ADDRESS_STREET_LANG2));

								} //

								strBuffer_tLogRow_1.append("|");

								if (row1.ZIP_CODE != null) { //

									strBuffer_tLogRow_1.append(String.valueOf(row1.ZIP_CODE));

								} //

								strBuffer_tLogRow_1.append("|");

								if (row1.EMAIL != null) { //

									strBuffer_tLogRow_1.append(String.valueOf(row1.EMAIL));

								} //

								strBuffer_tLogRow_1.append("|");

								if (row1.TELEPHONE != null) { //

									strBuffer_tLogRow_1.append(String.valueOf(row1.TELEPHONE));

								} //

								strBuffer_tLogRow_1.append("|");

								if (row1.PERSON_GROUP_CODE != null) { //

									strBuffer_tLogRow_1.append(String.valueOf(row1.PERSON_GROUP_CODE));

								} //

								strBuffer_tLogRow_1.append("|");

								if (row1.PERSON_NBR != null) { //

									strBuffer_tLogRow_1.append(row1.PERSON_NBR
											.setScale(0, java.math.RoundingMode.HALF_UP).toPlainString());

								} //

								strBuffer_tLogRow_1.append("|");

								if (row1.ADDR_NBR != null) { //

									strBuffer_tLogRow_1.append(
											row1.ADDR_NBR.setScale(0, java.math.RoundingMode.HALF_UP).toPlainString());

								} //

								strBuffer_tLogRow_1.append("|");

								if (row1.errorCode != null) { //

									strBuffer_tLogRow_1.append(String.valueOf(row1.errorCode));

								} //

								strBuffer_tLogRow_1.append("|");

								if (row1.errorMessage != null) { //

									strBuffer_tLogRow_1.append(String.valueOf(row1.errorMessage));

								} //

								if (globalMap.get("tLogRow_CONSOLE") != null) {
									consoleOut_tLogRow_1 = (java.io.PrintStream) globalMap.get("tLogRow_CONSOLE");
								} else {
									consoleOut_tLogRow_1 = new java.io.PrintStream(
											new java.io.BufferedOutputStream(System.out));
									globalMap.put("tLogRow_CONSOLE", consoleOut_tLogRow_1);
								}
								consoleOut_tLogRow_1.println(strBuffer_tLogRow_1.toString());
								consoleOut_tLogRow_1.flush();
								nb_line_tLogRow_1++;
//////

//////                    

///////////////////////    			

								tos_count_tLogRow_1++;

								/**
								 * [tLogRow_1 main ] stop
								 */

								/**
								 * [tLogRow_1 process_data_begin ] start
								 */

								currentComponent = "tLogRow_1";

								/**
								 * [tLogRow_1 process_data_begin ] stop
								 */

								/**
								 * [tLogRow_1 process_data_end ] start
								 */

								currentComponent = "tLogRow_1";

								/**
								 * [tLogRow_1 process_data_end ] stop
								 */

							} // End of branch "row1"

							/**
							 * [tDBOutput_15 process_data_end ] start
							 */

							currentComponent = "tDBOutput_15";

							/**
							 * [tDBOutput_15 process_data_end ] stop
							 */

						} // End of branch "copyOfrwk_owners"

						/**
						 * [tMap_15 process_data_end ] start
						 */

						currentComponent = "tMap_15";

						/**
						 * [tMap_15 process_data_end ] stop
						 */

						/**
						 * [tDBInput_47 process_data_end ] start
						 */

						currentComponent = "tDBInput_47";

						/**
						 * [tDBInput_47 process_data_end ] stop
						 */

						/**
						 * [tDBInput_47 end ] start
						 */

						currentComponent = "tDBInput_47";

					}
				} finally {
					if (rs_tDBInput_47 != null) {
						rs_tDBInput_47.close();
					}
					if (stmt_tDBInput_47 != null) {
						stmt_tDBInput_47.close();
					}
					if (conn_tDBInput_47 != null && !conn_tDBInput_47.isClosed()) {

						conn_tDBInput_47.close();

						if ("com.mysql.cj.jdbc.Driver".equals((String) globalMap.get("driverClass_"))
								&& routines.system.BundleUtils.inOSGi()) {
							Class.forName("com.mysql.cj.jdbc.AbandonedConnectionCleanupThread")
									.getMethod("checkedShutdown").invoke(null, (Object[]) null);
						}

					}
				}
				globalMap.put("tDBInput_47_NB_LINE", nb_line_tDBInput_47);

				ok_Hash.put("tDBInput_47", true);
				end_Hash.put("tDBInput_47", System.currentTimeMillis());

				/**
				 * [tDBInput_47 end ] stop
				 */

				/**
				 * [tMap_15 end ] start
				 */

				currentComponent = "tMap_15";

// ###############################
// # Lookup hashes releasing
				if (tHash_Lookup_row6 != null) {
					tHash_Lookup_row6.endGet();
				}
				globalMap.remove("tHash_Lookup_row6");

// ###############################      

				if (execStat) {
					runStat.updateStat(resourceMap, iterateId, 2, 0, "row5");
				}

				ok_Hash.put("tMap_15", true);
				end_Hash.put("tMap_15", System.currentTimeMillis());

				/**
				 * [tMap_15 end ] stop
				 */

				/**
				 * [tDBOutput_15 end ] start
				 */

				currentComponent = "tDBOutput_15";

				if (pstmt_tDBOutput_15 != null) {

					pstmt_tDBOutput_15.close();
					resourceMap.remove("pstmt_tDBOutput_15");

				}
				resourceMap.put("statementClosed_tDBOutput_15", true);
				conn_tDBOutput_15.commit();

				conn_tDBOutput_15.close();
				resourceMap.put("finish_tDBOutput_15", true);

				nb_line_deleted_tDBOutput_15 = nb_line_deleted_tDBOutput_15 + deletedCount_tDBOutput_15;
				nb_line_update_tDBOutput_15 = nb_line_update_tDBOutput_15 + updatedCount_tDBOutput_15;
				nb_line_inserted_tDBOutput_15 = nb_line_inserted_tDBOutput_15 + insertedCount_tDBOutput_15;
				nb_line_rejected_tDBOutput_15 = nb_line_rejected_tDBOutput_15 + rejectedCount_tDBOutput_15;

				globalMap.put("tDBOutput_15_NB_LINE", nb_line_tDBOutput_15);
				globalMap.put("tDBOutput_15_NB_LINE_UPDATED", nb_line_update_tDBOutput_15);
				globalMap.put("tDBOutput_15_NB_LINE_INSERTED", nb_line_inserted_tDBOutput_15);
				globalMap.put("tDBOutput_15_NB_LINE_DELETED", nb_line_deleted_tDBOutput_15);
				globalMap.put("tDBOutput_15_NB_LINE_REJECTED", nb_line_rejected_tDBOutput_15);

				if (execStat) {
					runStat.updateStat(resourceMap, iterateId, 2, 0, "copyOfrwk_owners");
				}

				ok_Hash.put("tDBOutput_15", true);
				end_Hash.put("tDBOutput_15", System.currentTimeMillis());

				tStatCatcher_1.addMessage("end", "tDBOutput_15",
						end_Hash.get("tDBOutput_15") - start_Hash.get("tDBOutput_15"));
				tStatCatcher_1Process(globalMap);

				/**
				 * [tDBOutput_15 end ] stop
				 */

				/**
				 * [tLogRow_1 end ] start
				 */

				currentComponent = "tLogRow_1";

//////
//////
				globalMap.put("tLogRow_1_NB_LINE", nb_line_tLogRow_1);

///////////////////////    			

				if (execStat) {
					runStat.updateStat(resourceMap, iterateId, 2, 0, "row1");
				}

				ok_Hash.put("tLogRow_1", true);
				end_Hash.put("tLogRow_1", System.currentTimeMillis());

				/**
				 * [tLogRow_1 end ] stop
				 */

			} // end the resume

			if (resumeEntryMethodName == null || globalResumeTicket) {
				resumeUtil.addLog("CHECKPOINT", "CONNECTION:SUBJOB_OK:tDBInput_47:OnSubjobOk", "",
						Thread.currentThread().getId() + "", "", "", "", "", "");
			}

			if (execStat) {
				runStat.updateStatOnConnection("OnSubjobOk7", 0, "ok");
			}

			tDBInput_1Process(globalMap);

		} catch (java.lang.Exception e) {

			TalendException te = new TalendException(e, currentComponent, globalMap);

			throw te;
		} catch (java.lang.Error error) {

			runStat.stopThreadStat();

			throw error;
		} finally {

			// free memory for "tMap_15"
			globalMap.remove("tHash_Lookup_row6");

			try {

				/**
				 * [tDBInput_47 finally ] start
				 */

				currentComponent = "tDBInput_47";

				/**
				 * [tDBInput_47 finally ] stop
				 */

				/**
				 * [tMap_15 finally ] start
				 */

				currentComponent = "tMap_15";

				/**
				 * [tMap_15 finally ] stop
				 */

				/**
				 * [tDBOutput_15 finally ] start
				 */

				currentComponent = "tDBOutput_15";

				try {
					if (resourceMap.get("statementClosed_tDBOutput_15") == null) {
						java.sql.PreparedStatement pstmtToClose_tDBOutput_15 = null;
						if ((pstmtToClose_tDBOutput_15 = (java.sql.PreparedStatement) resourceMap
								.remove("pstmt_tDBOutput_15")) != null) {
							pstmtToClose_tDBOutput_15.close();
						}
					}
				} finally {
					if (resourceMap.get("finish_tDBOutput_15") == null) {
						java.sql.Connection ctn_tDBOutput_15 = null;
						if ((ctn_tDBOutput_15 = (java.sql.Connection) resourceMap.get("conn_tDBOutput_15")) != null) {
							try {
								ctn_tDBOutput_15.close();
							} catch (java.sql.SQLException sqlEx_tDBOutput_15) {
								String errorMessage_tDBOutput_15 = "failed to close the connection in tDBOutput_15 :"
										+ sqlEx_tDBOutput_15.getMessage();
								System.err.println(errorMessage_tDBOutput_15);
							}
						}
					}
				}

				/**
				 * [tDBOutput_15 finally ] stop
				 */

				/**
				 * [tLogRow_1 finally ] start
				 */

				currentComponent = "tLogRow_1";

				/**
				 * [tLogRow_1 finally ] stop
				 */

			} catch (java.lang.Exception e) {
				// ignore
			} catch (java.lang.Error error) {
				// ignore
			}
			resourceMap = null;
		}

		globalMap.put("tDBInput_47_SUBPROCESS_STATE", 1);
	}

	public static class row8Struct implements routines.system.IPersistableRow<row8Struct> {
		final static byte[] commonByteArrayLock_WIPO_PROJECTS_G2b_Mig_TM = new byte[0];
		static byte[] commonByteArray_WIPO_PROJECTS_G2b_Mig_TM = new byte[0];

		public String FILE_SEQ;

		public String getFILE_SEQ() {
			return this.FILE_SEQ;
		}

		public String FILE_TYPE;

		public String getFILE_TYPE() {
			return this.FILE_TYPE;
		}

		public BigDecimal FILE_SERIES;

		public BigDecimal getFILE_SERIES() {
			return this.FILE_SERIES;
		}

		public BigDecimal FILE_NBR;

		public BigDecimal getFILE_NBR() {
			return this.FILE_NBR;
		}

		public BigDecimal IND_SERVICE;

		public BigDecimal getIND_SERVICE() {
			return this.IND_SERVICE;
		}

		public String REPRESENTATIVE_TYPE;

		public String getREPRESENTATIVE_TYPE() {
			return this.REPRESENTATIVE_TYPE;
		}

		public BigDecimal AGENT_CODE;

		public BigDecimal getAGENT_CODE() {
			return this.AGENT_CODE;
		}

		public String PERSON_NAME;

		public String getPERSON_NAME() {
			return this.PERSON_NAME;
		}

		public String PERSON_NAME_LANG2;

		public String getPERSON_NAME_LANG2() {
			return this.PERSON_NAME_LANG2;
		}

		public String NATIONALITY_COUNTRY_CODE;

		public String getNATIONALITY_COUNTRY_CODE() {
			return this.NATIONALITY_COUNTRY_CODE;
		}

		public BigDecimal IND_COMPANY;

		public BigDecimal getIND_COMPANY() {
			return this.IND_COMPANY;
		}

		public String LEGAL_NATURE;

		public String getLEGAL_NATURE() {
			return this.LEGAL_NATURE;
		}

		public String LEGAL_NATURE_LANG2;

		public String getLEGAL_NATURE_LANG2() {
			return this.LEGAL_NATURE_LANG2;
		}

		public String LEGAL_ID_TYPE;

		public String getLEGAL_ID_TYPE() {
			return this.LEGAL_ID_TYPE;
		}

		public BigDecimal LEGAL_ID_NBR;

		public BigDecimal getLEGAL_ID_NBR() {
			return this.LEGAL_ID_NBR;
		}

		public String INDIVIDUAL_ID_TYPE;

		public String getINDIVIDUAL_ID_TYPE() {
			return this.INDIVIDUAL_ID_TYPE;
		}

		public BigDecimal INDIVIDUAL_ID_NBR;

		public BigDecimal getINDIVIDUAL_ID_NBR() {
			return this.INDIVIDUAL_ID_NBR;
		}

		public String RESIDENCE_COUNTRY_CODE;

		public String getRESIDENCE_COUNTRY_CODE() {
			return this.RESIDENCE_COUNTRY_CODE;
		}

		public String STATE_NAME;

		public String getSTATE_NAME() {
			return this.STATE_NAME;
		}

		public String STATE_CODE;

		public String getSTATE_CODE() {
			return this.STATE_CODE;
		}

		public String CITY_NAME;

		public String getCITY_NAME() {
			return this.CITY_NAME;
		}

		public String CITY_CODE;

		public String getCITY_CODE() {
			return this.CITY_CODE;
		}

		public String ADDRESS_ZONE;

		public String getADDRESS_ZONE() {
			return this.ADDRESS_ZONE;
		}

		public String ADDRESS_STREET;

		public String getADDRESS_STREET() {
			return this.ADDRESS_STREET;
		}

		public String ADDRESS_STREET_LANG2;

		public String getADDRESS_STREET_LANG2() {
			return this.ADDRESS_STREET_LANG2;
		}

		public String ZIP_CODE;

		public String getZIP_CODE() {
			return this.ZIP_CODE;
		}

		public String EMAIL;

		public String getEMAIL() {
			return this.EMAIL;
		}

		public String TELEPHONE;

		public String getTELEPHONE() {
			return this.TELEPHONE;
		}

		public String PERSON_GROUP_CODE;

		public String getPERSON_GROUP_CODE() {
			return this.PERSON_GROUP_CODE;
		}

		public BigDecimal PERSON_NBR;

		public BigDecimal getPERSON_NBR() {
			return this.PERSON_NBR;
		}

		public BigDecimal ADDR_NBR;

		public BigDecimal getADDR_NBR() {
			return this.ADDR_NBR;
		}

		public String errorCode;

		public String getErrorCode() {
			return this.errorCode;
		}

		public String errorMessage;

		public String getErrorMessage() {
			return this.errorMessage;
		}

		private String readString(ObjectInputStream dis) throws IOException {
			String strReturn = null;
			int length = 0;
			length = dis.readInt();
			if (length == -1) {
				strReturn = null;
			} else {
				if (length > commonByteArray_WIPO_PROJECTS_G2b_Mig_TM.length) {
					if (length < 1024 && commonByteArray_WIPO_PROJECTS_G2b_Mig_TM.length == 0) {
						commonByteArray_WIPO_PROJECTS_G2b_Mig_TM = new byte[1024];
					} else {
						commonByteArray_WIPO_PROJECTS_G2b_Mig_TM = new byte[2 * length];
					}
				}
				dis.readFully(commonByteArray_WIPO_PROJECTS_G2b_Mig_TM, 0, length);
				strReturn = new String(commonByteArray_WIPO_PROJECTS_G2b_Mig_TM, 0, length, utf8Charset);
			}
			return strReturn;
		}

		private void writeString(String str, ObjectOutputStream dos) throws IOException {
			if (str == null) {
				dos.writeInt(-1);
			} else {
				byte[] byteArray = str.getBytes(utf8Charset);
				dos.writeInt(byteArray.length);
				dos.write(byteArray);
			}
		}

		public void readData(ObjectInputStream dis) {

			synchronized (commonByteArrayLock_WIPO_PROJECTS_G2b_Mig_TM) {

				try {

					int length = 0;

					this.FILE_SEQ = readString(dis);

					this.FILE_TYPE = readString(dis);

					this.FILE_SERIES = (BigDecimal) dis.readObject();

					this.FILE_NBR = (BigDecimal) dis.readObject();

					this.IND_SERVICE = (BigDecimal) dis.readObject();

					this.REPRESENTATIVE_TYPE = readString(dis);

					this.AGENT_CODE = (BigDecimal) dis.readObject();

					this.PERSON_NAME = readString(dis);

					this.PERSON_NAME_LANG2 = readString(dis);

					this.NATIONALITY_COUNTRY_CODE = readString(dis);

					this.IND_COMPANY = (BigDecimal) dis.readObject();

					this.LEGAL_NATURE = readString(dis);

					this.LEGAL_NATURE_LANG2 = readString(dis);

					this.LEGAL_ID_TYPE = readString(dis);

					this.LEGAL_ID_NBR = (BigDecimal) dis.readObject();

					this.INDIVIDUAL_ID_TYPE = readString(dis);

					this.INDIVIDUAL_ID_NBR = (BigDecimal) dis.readObject();

					this.RESIDENCE_COUNTRY_CODE = readString(dis);

					this.STATE_NAME = readString(dis);

					this.STATE_CODE = readString(dis);

					this.CITY_NAME = readString(dis);

					this.CITY_CODE = readString(dis);

					this.ADDRESS_ZONE = readString(dis);

					this.ADDRESS_STREET = readString(dis);

					this.ADDRESS_STREET_LANG2 = readString(dis);

					this.ZIP_CODE = readString(dis);

					this.EMAIL = readString(dis);

					this.TELEPHONE = readString(dis);

					this.PERSON_GROUP_CODE = readString(dis);

					this.PERSON_NBR = (BigDecimal) dis.readObject();

					this.ADDR_NBR = (BigDecimal) dis.readObject();

					this.errorCode = readString(dis);

					this.errorMessage = readString(dis);

				} catch (IOException e) {
					throw new RuntimeException(e);

				} catch (ClassNotFoundException eCNFE) {
					throw new RuntimeException(eCNFE);

				}

			}

		}

		public void writeData(ObjectOutputStream dos) {
			try {

				// String

				writeString(this.FILE_SEQ, dos);

				// String

				writeString(this.FILE_TYPE, dos);

				// BigDecimal

				dos.writeObject(this.FILE_SERIES);

				// BigDecimal

				dos.writeObject(this.FILE_NBR);

				// BigDecimal

				dos.writeObject(this.IND_SERVICE);

				// String

				writeString(this.REPRESENTATIVE_TYPE, dos);

				// BigDecimal

				dos.writeObject(this.AGENT_CODE);

				// String

				writeString(this.PERSON_NAME, dos);

				// String

				writeString(this.PERSON_NAME_LANG2, dos);

				// String

				writeString(this.NATIONALITY_COUNTRY_CODE, dos);

				// BigDecimal

				dos.writeObject(this.IND_COMPANY);

				// String

				writeString(this.LEGAL_NATURE, dos);

				// String

				writeString(this.LEGAL_NATURE_LANG2, dos);

				// String

				writeString(this.LEGAL_ID_TYPE, dos);

				// BigDecimal

				dos.writeObject(this.LEGAL_ID_NBR);

				// String

				writeString(this.INDIVIDUAL_ID_TYPE, dos);

				// BigDecimal

				dos.writeObject(this.INDIVIDUAL_ID_NBR);

				// String

				writeString(this.RESIDENCE_COUNTRY_CODE, dos);

				// String

				writeString(this.STATE_NAME, dos);

				// String

				writeString(this.STATE_CODE, dos);

				// String

				writeString(this.CITY_NAME, dos);

				// String

				writeString(this.CITY_CODE, dos);

				// String

				writeString(this.ADDRESS_ZONE, dos);

				// String

				writeString(this.ADDRESS_STREET, dos);

				// String

				writeString(this.ADDRESS_STREET_LANG2, dos);

				// String

				writeString(this.ZIP_CODE, dos);

				// String

				writeString(this.EMAIL, dos);

				// String

				writeString(this.TELEPHONE, dos);

				// String

				writeString(this.PERSON_GROUP_CODE, dos);

				// BigDecimal

				dos.writeObject(this.PERSON_NBR);

				// BigDecimal

				dos.writeObject(this.ADDR_NBR);

				// String

				writeString(this.errorCode, dos);

				// String

				writeString(this.errorMessage, dos);

			} catch (IOException e) {
				throw new RuntimeException(e);
			}

		}

		public String toString() {

			StringBuilder sb = new StringBuilder();
			sb.append(super.toString());
			sb.append("[");
			sb.append("FILE_SEQ=" + FILE_SEQ);
			sb.append(",FILE_TYPE=" + FILE_TYPE);
			sb.append(",FILE_SERIES=" + String.valueOf(FILE_SERIES));
			sb.append(",FILE_NBR=" + String.valueOf(FILE_NBR));
			sb.append(",IND_SERVICE=" + String.valueOf(IND_SERVICE));
			sb.append(",REPRESENTATIVE_TYPE=" + REPRESENTATIVE_TYPE);
			sb.append(",AGENT_CODE=" + String.valueOf(AGENT_CODE));
			sb.append(",PERSON_NAME=" + PERSON_NAME);
			sb.append(",PERSON_NAME_LANG2=" + PERSON_NAME_LANG2);
			sb.append(",NATIONALITY_COUNTRY_CODE=" + NATIONALITY_COUNTRY_CODE);
			sb.append(",IND_COMPANY=" + String.valueOf(IND_COMPANY));
			sb.append(",LEGAL_NATURE=" + LEGAL_NATURE);
			sb.append(",LEGAL_NATURE_LANG2=" + LEGAL_NATURE_LANG2);
			sb.append(",LEGAL_ID_TYPE=" + LEGAL_ID_TYPE);
			sb.append(",LEGAL_ID_NBR=" + String.valueOf(LEGAL_ID_NBR));
			sb.append(",INDIVIDUAL_ID_TYPE=" + INDIVIDUAL_ID_TYPE);
			sb.append(",INDIVIDUAL_ID_NBR=" + String.valueOf(INDIVIDUAL_ID_NBR));
			sb.append(",RESIDENCE_COUNTRY_CODE=" + RESIDENCE_COUNTRY_CODE);
			sb.append(",STATE_NAME=" + STATE_NAME);
			sb.append(",STATE_CODE=" + STATE_CODE);
			sb.append(",CITY_NAME=" + CITY_NAME);
			sb.append(",CITY_CODE=" + CITY_CODE);
			sb.append(",ADDRESS_ZONE=" + ADDRESS_ZONE);
			sb.append(",ADDRESS_STREET=" + ADDRESS_STREET);
			sb.append(",ADDRESS_STREET_LANG2=" + ADDRESS_STREET_LANG2);
			sb.append(",ZIP_CODE=" + ZIP_CODE);
			sb.append(",EMAIL=" + EMAIL);
			sb.append(",TELEPHONE=" + TELEPHONE);
			sb.append(",PERSON_GROUP_CODE=" + PERSON_GROUP_CODE);
			sb.append(",PERSON_NBR=" + String.valueOf(PERSON_NBR));
			sb.append(",ADDR_NBR=" + String.valueOf(ADDR_NBR));
			sb.append(",errorCode=" + errorCode);
			sb.append(",errorMessage=" + errorMessage);
			sb.append("]");

			return sb.toString();
		}

		/**
		 * Compare keys
		 */
		public int compareTo(row8Struct other) {

			int returnValue = -1;

			return returnValue;
		}

		private int checkNullsAndCompare(Object object1, Object object2) {
			int returnValue = 0;
			if (object1 instanceof Comparable && object2 instanceof Comparable) {
				returnValue = ((Comparable) object1).compareTo(object2);
			} else if (object1 != null && object2 != null) {
				returnValue = compareStrings(object1.toString(), object2.toString());
			} else if (object1 == null && object2 != null) {
				returnValue = 1;
			} else if (object1 != null && object2 == null) {
				returnValue = -1;
			} else {
				returnValue = 0;
			}

			return returnValue;
		}

		private int compareStrings(String string1, String string2) {
			return string1.compareTo(string2);
		}

	}

	public static class wrk_reprsStruct implements routines.system.IPersistableRow<wrk_reprsStruct> {
		final static byte[] commonByteArrayLock_WIPO_PROJECTS_G2b_Mig_TM = new byte[0];
		static byte[] commonByteArray_WIPO_PROJECTS_G2b_Mig_TM = new byte[0];

		public String FILE_SEQ;

		public String getFILE_SEQ() {
			return this.FILE_SEQ;
		}

		public String FILE_TYPE;

		public String getFILE_TYPE() {
			return this.FILE_TYPE;
		}

		public BigDecimal FILE_SERIES;

		public BigDecimal getFILE_SERIES() {
			return this.FILE_SERIES;
		}

		public BigDecimal FILE_NBR;

		public BigDecimal getFILE_NBR() {
			return this.FILE_NBR;
		}

		public BigDecimal IND_SERVICE;

		public BigDecimal getIND_SERVICE() {
			return this.IND_SERVICE;
		}

		public String REPRESENTATIVE_TYPE;

		public String getREPRESENTATIVE_TYPE() {
			return this.REPRESENTATIVE_TYPE;
		}

		public BigDecimal AGENT_CODE;

		public BigDecimal getAGENT_CODE() {
			return this.AGENT_CODE;
		}

		public String PERSON_NAME;

		public String getPERSON_NAME() {
			return this.PERSON_NAME;
		}

		public String PERSON_NAME_LANG2;

		public String getPERSON_NAME_LANG2() {
			return this.PERSON_NAME_LANG2;
		}

		public String NATIONALITY_COUNTRY_CODE;

		public String getNATIONALITY_COUNTRY_CODE() {
			return this.NATIONALITY_COUNTRY_CODE;
		}

		public BigDecimal IND_COMPANY;

		public BigDecimal getIND_COMPANY() {
			return this.IND_COMPANY;
		}

		public String LEGAL_NATURE;

		public String getLEGAL_NATURE() {
			return this.LEGAL_NATURE;
		}

		public String LEGAL_NATURE_LANG2;

		public String getLEGAL_NATURE_LANG2() {
			return this.LEGAL_NATURE_LANG2;
		}

		public String LEGAL_ID_TYPE;

		public String getLEGAL_ID_TYPE() {
			return this.LEGAL_ID_TYPE;
		}

		public BigDecimal LEGAL_ID_NBR;

		public BigDecimal getLEGAL_ID_NBR() {
			return this.LEGAL_ID_NBR;
		}

		public String INDIVIDUAL_ID_TYPE;

		public String getINDIVIDUAL_ID_TYPE() {
			return this.INDIVIDUAL_ID_TYPE;
		}

		public BigDecimal INDIVIDUAL_ID_NBR;

		public BigDecimal getINDIVIDUAL_ID_NBR() {
			return this.INDIVIDUAL_ID_NBR;
		}

		public String RESIDENCE_COUNTRY_CODE;

		public String getRESIDENCE_COUNTRY_CODE() {
			return this.RESIDENCE_COUNTRY_CODE;
		}

		public String STATE_NAME;

		public String getSTATE_NAME() {
			return this.STATE_NAME;
		}

		public String STATE_CODE;

		public String getSTATE_CODE() {
			return this.STATE_CODE;
		}

		public String CITY_NAME;

		public String getCITY_NAME() {
			return this.CITY_NAME;
		}

		public String CITY_CODE;

		public String getCITY_CODE() {
			return this.CITY_CODE;
		}

		public String ADDRESS_ZONE;

		public String getADDRESS_ZONE() {
			return this.ADDRESS_ZONE;
		}

		public String ADDRESS_STREET;

		public String getADDRESS_STREET() {
			return this.ADDRESS_STREET;
		}

		public String ADDRESS_STREET_LANG2;

		public String getADDRESS_STREET_LANG2() {
			return this.ADDRESS_STREET_LANG2;
		}

		public String ZIP_CODE;

		public String getZIP_CODE() {
			return this.ZIP_CODE;
		}

		public String EMAIL;

		public String getEMAIL() {
			return this.EMAIL;
		}

		public String TELEPHONE;

		public String getTELEPHONE() {
			return this.TELEPHONE;
		}

		public String PERSON_GROUP_CODE;

		public String getPERSON_GROUP_CODE() {
			return this.PERSON_GROUP_CODE;
		}

		public BigDecimal PERSON_NBR;

		public BigDecimal getPERSON_NBR() {
			return this.PERSON_NBR;
		}

		public BigDecimal ADDR_NBR;

		public BigDecimal getADDR_NBR() {
			return this.ADDR_NBR;
		}

		private String readString(ObjectInputStream dis) throws IOException {
			String strReturn = null;
			int length = 0;
			length = dis.readInt();
			if (length == -1) {
				strReturn = null;
			} else {
				if (length > commonByteArray_WIPO_PROJECTS_G2b_Mig_TM.length) {
					if (length < 1024 && commonByteArray_WIPO_PROJECTS_G2b_Mig_TM.length == 0) {
						commonByteArray_WIPO_PROJECTS_G2b_Mig_TM = new byte[1024];
					} else {
						commonByteArray_WIPO_PROJECTS_G2b_Mig_TM = new byte[2 * length];
					}
				}
				dis.readFully(commonByteArray_WIPO_PROJECTS_G2b_Mig_TM, 0, length);
				strReturn = new String(commonByteArray_WIPO_PROJECTS_G2b_Mig_TM, 0, length, utf8Charset);
			}
			return strReturn;
		}

		private void writeString(String str, ObjectOutputStream dos) throws IOException {
			if (str == null) {
				dos.writeInt(-1);
			} else {
				byte[] byteArray = str.getBytes(utf8Charset);
				dos.writeInt(byteArray.length);
				dos.write(byteArray);
			}
		}

		public void readData(ObjectInputStream dis) {

			synchronized (commonByteArrayLock_WIPO_PROJECTS_G2b_Mig_TM) {

				try {

					int length = 0;

					this.FILE_SEQ = readString(dis);

					this.FILE_TYPE = readString(dis);

					this.FILE_SERIES = (BigDecimal) dis.readObject();

					this.FILE_NBR = (BigDecimal) dis.readObject();

					this.IND_SERVICE = (BigDecimal) dis.readObject();

					this.REPRESENTATIVE_TYPE = readString(dis);

					this.AGENT_CODE = (BigDecimal) dis.readObject();

					this.PERSON_NAME = readString(dis);

					this.PERSON_NAME_LANG2 = readString(dis);

					this.NATIONALITY_COUNTRY_CODE = readString(dis);

					this.IND_COMPANY = (BigDecimal) dis.readObject();

					this.LEGAL_NATURE = readString(dis);

					this.LEGAL_NATURE_LANG2 = readString(dis);

					this.LEGAL_ID_TYPE = readString(dis);

					this.LEGAL_ID_NBR = (BigDecimal) dis.readObject();

					this.INDIVIDUAL_ID_TYPE = readString(dis);

					this.INDIVIDUAL_ID_NBR = (BigDecimal) dis.readObject();

					this.RESIDENCE_COUNTRY_CODE = readString(dis);

					this.STATE_NAME = readString(dis);

					this.STATE_CODE = readString(dis);

					this.CITY_NAME = readString(dis);

					this.CITY_CODE = readString(dis);

					this.ADDRESS_ZONE = readString(dis);

					this.ADDRESS_STREET = readString(dis);

					this.ADDRESS_STREET_LANG2 = readString(dis);

					this.ZIP_CODE = readString(dis);

					this.EMAIL = readString(dis);

					this.TELEPHONE = readString(dis);

					this.PERSON_GROUP_CODE = readString(dis);

					this.PERSON_NBR = (BigDecimal) dis.readObject();

					this.ADDR_NBR = (BigDecimal) dis.readObject();

				} catch (IOException e) {
					throw new RuntimeException(e);

				} catch (ClassNotFoundException eCNFE) {
					throw new RuntimeException(eCNFE);

				}

			}

		}

		public void writeData(ObjectOutputStream dos) {
			try {

				// String

				writeString(this.FILE_SEQ, dos);

				// String

				writeString(this.FILE_TYPE, dos);

				// BigDecimal

				dos.writeObject(this.FILE_SERIES);

				// BigDecimal

				dos.writeObject(this.FILE_NBR);

				// BigDecimal

				dos.writeObject(this.IND_SERVICE);

				// String

				writeString(this.REPRESENTATIVE_TYPE, dos);

				// BigDecimal

				dos.writeObject(this.AGENT_CODE);

				// String

				writeString(this.PERSON_NAME, dos);

				// String

				writeString(this.PERSON_NAME_LANG2, dos);

				// String

				writeString(this.NATIONALITY_COUNTRY_CODE, dos);

				// BigDecimal

				dos.writeObject(this.IND_COMPANY);

				// String

				writeString(this.LEGAL_NATURE, dos);

				// String

				writeString(this.LEGAL_NATURE_LANG2, dos);

				// String

				writeString(this.LEGAL_ID_TYPE, dos);

				// BigDecimal

				dos.writeObject(this.LEGAL_ID_NBR);

				// String

				writeString(this.INDIVIDUAL_ID_TYPE, dos);

				// BigDecimal

				dos.writeObject(this.INDIVIDUAL_ID_NBR);

				// String

				writeString(this.RESIDENCE_COUNTRY_CODE, dos);

				// String

				writeString(this.STATE_NAME, dos);

				// String

				writeString(this.STATE_CODE, dos);

				// String

				writeString(this.CITY_NAME, dos);

				// String

				writeString(this.CITY_CODE, dos);

				// String

				writeString(this.ADDRESS_ZONE, dos);

				// String

				writeString(this.ADDRESS_STREET, dos);

				// String

				writeString(this.ADDRESS_STREET_LANG2, dos);

				// String

				writeString(this.ZIP_CODE, dos);

				// String

				writeString(this.EMAIL, dos);

				// String

				writeString(this.TELEPHONE, dos);

				// String

				writeString(this.PERSON_GROUP_CODE, dos);

				// BigDecimal

				dos.writeObject(this.PERSON_NBR);

				// BigDecimal

				dos.writeObject(this.ADDR_NBR);

			} catch (IOException e) {
				throw new RuntimeException(e);
			}

		}

		public String toString() {

			StringBuilder sb = new StringBuilder();
			sb.append(super.toString());
			sb.append("[");
			sb.append("FILE_SEQ=" + FILE_SEQ);
			sb.append(",FILE_TYPE=" + FILE_TYPE);
			sb.append(",FILE_SERIES=" + String.valueOf(FILE_SERIES));
			sb.append(",FILE_NBR=" + String.valueOf(FILE_NBR));
			sb.append(",IND_SERVICE=" + String.valueOf(IND_SERVICE));
			sb.append(",REPRESENTATIVE_TYPE=" + REPRESENTATIVE_TYPE);
			sb.append(",AGENT_CODE=" + String.valueOf(AGENT_CODE));
			sb.append(",PERSON_NAME=" + PERSON_NAME);
			sb.append(",PERSON_NAME_LANG2=" + PERSON_NAME_LANG2);
			sb.append(",NATIONALITY_COUNTRY_CODE=" + NATIONALITY_COUNTRY_CODE);
			sb.append(",IND_COMPANY=" + String.valueOf(IND_COMPANY));
			sb.append(",LEGAL_NATURE=" + LEGAL_NATURE);
			sb.append(",LEGAL_NATURE_LANG2=" + LEGAL_NATURE_LANG2);
			sb.append(",LEGAL_ID_TYPE=" + LEGAL_ID_TYPE);
			sb.append(",LEGAL_ID_NBR=" + String.valueOf(LEGAL_ID_NBR));
			sb.append(",INDIVIDUAL_ID_TYPE=" + INDIVIDUAL_ID_TYPE);
			sb.append(",INDIVIDUAL_ID_NBR=" + String.valueOf(INDIVIDUAL_ID_NBR));
			sb.append(",RESIDENCE_COUNTRY_CODE=" + RESIDENCE_COUNTRY_CODE);
			sb.append(",STATE_NAME=" + STATE_NAME);
			sb.append(",STATE_CODE=" + STATE_CODE);
			sb.append(",CITY_NAME=" + CITY_NAME);
			sb.append(",CITY_CODE=" + CITY_CODE);
			sb.append(",ADDRESS_ZONE=" + ADDRESS_ZONE);
			sb.append(",ADDRESS_STREET=" + ADDRESS_STREET);
			sb.append(",ADDRESS_STREET_LANG2=" + ADDRESS_STREET_LANG2);
			sb.append(",ZIP_CODE=" + ZIP_CODE);
			sb.append(",EMAIL=" + EMAIL);
			sb.append(",TELEPHONE=" + TELEPHONE);
			sb.append(",PERSON_GROUP_CODE=" + PERSON_GROUP_CODE);
			sb.append(",PERSON_NBR=" + String.valueOf(PERSON_NBR));
			sb.append(",ADDR_NBR=" + String.valueOf(ADDR_NBR));
			sb.append("]");

			return sb.toString();
		}

		/**
		 * Compare keys
		 */
		public int compareTo(wrk_reprsStruct other) {

			int returnValue = -1;

			return returnValue;
		}

		private int checkNullsAndCompare(Object object1, Object object2) {
			int returnValue = 0;
			if (object1 instanceof Comparable && object2 instanceof Comparable) {
				returnValue = ((Comparable) object1).compareTo(object2);
			} else if (object1 != null && object2 != null) {
				returnValue = compareStrings(object1.toString(), object2.toString());
			} else if (object1 == null && object2 != null) {
				returnValue = 1;
			} else if (object1 != null && object2 == null) {
				returnValue = -1;
			} else {
				returnValue = 0;
			}

			return returnValue;
		}

		private int compareStrings(String string1, String string2) {
			return string1.compareTo(string2);
		}

	}

	public static class row2Struct implements routines.system.IPersistableRow<row2Struct> {
		final static byte[] commonByteArrayLock_WIPO_PROJECTS_G2b_Mig_TM = new byte[0];
		static byte[] commonByteArray_WIPO_PROJECTS_G2b_Mig_TM = new byte[0];

		public String FILE_SEQ;

		public String getFILE_SEQ() {
			return this.FILE_SEQ;
		}

		public String FILE_TYPE;

		public String getFILE_TYPE() {
			return this.FILE_TYPE;
		}

		public BigDecimal FILE_SERIES;

		public BigDecimal getFILE_SERIES() {
			return this.FILE_SERIES;
		}

		public BigDecimal FILE_NBR;

		public BigDecimal getFILE_NBR() {
			return this.FILE_NBR;
		}

		public BigDecimal IND_SERVICE;

		public BigDecimal getIND_SERVICE() {
			return this.IND_SERVICE;
		}

		public String REPRESENTATIVE_TYPE;

		public String getREPRESENTATIVE_TYPE() {
			return this.REPRESENTATIVE_TYPE;
		}

		public BigDecimal AGENT_CODE;

		public BigDecimal getAGENT_CODE() {
			return this.AGENT_CODE;
		}

		public String PERSON_NAME;

		public String getPERSON_NAME() {
			return this.PERSON_NAME;
		}

		public String PERSON_NAME_LANG2;

		public String getPERSON_NAME_LANG2() {
			return this.PERSON_NAME_LANG2;
		}

		public String NATIONALITY_COUNTRY_CODE;

		public String getNATIONALITY_COUNTRY_CODE() {
			return this.NATIONALITY_COUNTRY_CODE;
		}

		public BigDecimal IND_COMPANY;

		public BigDecimal getIND_COMPANY() {
			return this.IND_COMPANY;
		}

		public String LEGAL_NATURE;

		public String getLEGAL_NATURE() {
			return this.LEGAL_NATURE;
		}

		public String LEGAL_NATURE_LANG2;

		public String getLEGAL_NATURE_LANG2() {
			return this.LEGAL_NATURE_LANG2;
		}

		public String LEGAL_ID_TYPE;

		public String getLEGAL_ID_TYPE() {
			return this.LEGAL_ID_TYPE;
		}

		public BigDecimal LEGAL_ID_NBR;

		public BigDecimal getLEGAL_ID_NBR() {
			return this.LEGAL_ID_NBR;
		}

		public String INDIVIDUAL_ID_TYPE;

		public String getINDIVIDUAL_ID_TYPE() {
			return this.INDIVIDUAL_ID_TYPE;
		}

		public BigDecimal INDIVIDUAL_ID_NBR;

		public BigDecimal getINDIVIDUAL_ID_NBR() {
			return this.INDIVIDUAL_ID_NBR;
		}

		public String RESIDENCE_COUNTRY_CODE;

		public String getRESIDENCE_COUNTRY_CODE() {
			return this.RESIDENCE_COUNTRY_CODE;
		}

		public String STATE_NAME;

		public String getSTATE_NAME() {
			return this.STATE_NAME;
		}

		public String STATE_CODE;

		public String getSTATE_CODE() {
			return this.STATE_CODE;
		}

		public String CITY_NAME;

		public String getCITY_NAME() {
			return this.CITY_NAME;
		}

		public String CITY_CODE;

		public String getCITY_CODE() {
			return this.CITY_CODE;
		}

		public String ADDRESS_ZONE;

		public String getADDRESS_ZONE() {
			return this.ADDRESS_ZONE;
		}

		public String ADDRESS_STREET;

		public String getADDRESS_STREET() {
			return this.ADDRESS_STREET;
		}

		public String ADDRESS_STREET_LANG2;

		public String getADDRESS_STREET_LANG2() {
			return this.ADDRESS_STREET_LANG2;
		}

		public String ZIP_CODE;

		public String getZIP_CODE() {
			return this.ZIP_CODE;
		}

		public String EMAIL;

		public String getEMAIL() {
			return this.EMAIL;
		}

		public String TELEPHONE;

		public String getTELEPHONE() {
			return this.TELEPHONE;
		}

		public String PERSON_GROUP_CODE;

		public String getPERSON_GROUP_CODE() {
			return this.PERSON_GROUP_CODE;
		}

		private String readString(ObjectInputStream dis) throws IOException {
			String strReturn = null;
			int length = 0;
			length = dis.readInt();
			if (length == -1) {
				strReturn = null;
			} else {
				if (length > commonByteArray_WIPO_PROJECTS_G2b_Mig_TM.length) {
					if (length < 1024 && commonByteArray_WIPO_PROJECTS_G2b_Mig_TM.length == 0) {
						commonByteArray_WIPO_PROJECTS_G2b_Mig_TM = new byte[1024];
					} else {
						commonByteArray_WIPO_PROJECTS_G2b_Mig_TM = new byte[2 * length];
					}
				}
				dis.readFully(commonByteArray_WIPO_PROJECTS_G2b_Mig_TM, 0, length);
				strReturn = new String(commonByteArray_WIPO_PROJECTS_G2b_Mig_TM, 0, length, utf8Charset);
			}
			return strReturn;
		}

		private void writeString(String str, ObjectOutputStream dos) throws IOException {
			if (str == null) {
				dos.writeInt(-1);
			} else {
				byte[] byteArray = str.getBytes(utf8Charset);
				dos.writeInt(byteArray.length);
				dos.write(byteArray);
			}
		}

		public void readData(ObjectInputStream dis) {

			synchronized (commonByteArrayLock_WIPO_PROJECTS_G2b_Mig_TM) {

				try {

					int length = 0;

					this.FILE_SEQ = readString(dis);

					this.FILE_TYPE = readString(dis);

					this.FILE_SERIES = (BigDecimal) dis.readObject();

					this.FILE_NBR = (BigDecimal) dis.readObject();

					this.IND_SERVICE = (BigDecimal) dis.readObject();

					this.REPRESENTATIVE_TYPE = readString(dis);

					this.AGENT_CODE = (BigDecimal) dis.readObject();

					this.PERSON_NAME = readString(dis);

					this.PERSON_NAME_LANG2 = readString(dis);

					this.NATIONALITY_COUNTRY_CODE = readString(dis);

					this.IND_COMPANY = (BigDecimal) dis.readObject();

					this.LEGAL_NATURE = readString(dis);

					this.LEGAL_NATURE_LANG2 = readString(dis);

					this.LEGAL_ID_TYPE = readString(dis);

					this.LEGAL_ID_NBR = (BigDecimal) dis.readObject();

					this.INDIVIDUAL_ID_TYPE = readString(dis);

					this.INDIVIDUAL_ID_NBR = (BigDecimal) dis.readObject();

					this.RESIDENCE_COUNTRY_CODE = readString(dis);

					this.STATE_NAME = readString(dis);

					this.STATE_CODE = readString(dis);

					this.CITY_NAME = readString(dis);

					this.CITY_CODE = readString(dis);

					this.ADDRESS_ZONE = readString(dis);

					this.ADDRESS_STREET = readString(dis);

					this.ADDRESS_STREET_LANG2 = readString(dis);

					this.ZIP_CODE = readString(dis);

					this.EMAIL = readString(dis);

					this.TELEPHONE = readString(dis);

					this.PERSON_GROUP_CODE = readString(dis);

				} catch (IOException e) {
					throw new RuntimeException(e);

				} catch (ClassNotFoundException eCNFE) {
					throw new RuntimeException(eCNFE);

				}

			}

		}

		public void writeData(ObjectOutputStream dos) {
			try {

				// String

				writeString(this.FILE_SEQ, dos);

				// String

				writeString(this.FILE_TYPE, dos);

				// BigDecimal

				dos.writeObject(this.FILE_SERIES);

				// BigDecimal

				dos.writeObject(this.FILE_NBR);

				// BigDecimal

				dos.writeObject(this.IND_SERVICE);

				// String

				writeString(this.REPRESENTATIVE_TYPE, dos);

				// BigDecimal

				dos.writeObject(this.AGENT_CODE);

				// String

				writeString(this.PERSON_NAME, dos);

				// String

				writeString(this.PERSON_NAME_LANG2, dos);

				// String

				writeString(this.NATIONALITY_COUNTRY_CODE, dos);

				// BigDecimal

				dos.writeObject(this.IND_COMPANY);

				// String

				writeString(this.LEGAL_NATURE, dos);

				// String

				writeString(this.LEGAL_NATURE_LANG2, dos);

				// String

				writeString(this.LEGAL_ID_TYPE, dos);

				// BigDecimal

				dos.writeObject(this.LEGAL_ID_NBR);

				// String

				writeString(this.INDIVIDUAL_ID_TYPE, dos);

				// BigDecimal

				dos.writeObject(this.INDIVIDUAL_ID_NBR);

				// String

				writeString(this.RESIDENCE_COUNTRY_CODE, dos);

				// String

				writeString(this.STATE_NAME, dos);

				// String

				writeString(this.STATE_CODE, dos);

				// String

				writeString(this.CITY_NAME, dos);

				// String

				writeString(this.CITY_CODE, dos);

				// String

				writeString(this.ADDRESS_ZONE, dos);

				// String

				writeString(this.ADDRESS_STREET, dos);

				// String

				writeString(this.ADDRESS_STREET_LANG2, dos);

				// String

				writeString(this.ZIP_CODE, dos);

				// String

				writeString(this.EMAIL, dos);

				// String

				writeString(this.TELEPHONE, dos);

				// String

				writeString(this.PERSON_GROUP_CODE, dos);

			} catch (IOException e) {
				throw new RuntimeException(e);
			}

		}

		public String toString() {

			StringBuilder sb = new StringBuilder();
			sb.append(super.toString());
			sb.append("[");
			sb.append("FILE_SEQ=" + FILE_SEQ);
			sb.append(",FILE_TYPE=" + FILE_TYPE);
			sb.append(",FILE_SERIES=" + String.valueOf(FILE_SERIES));
			sb.append(",FILE_NBR=" + String.valueOf(FILE_NBR));
			sb.append(",IND_SERVICE=" + String.valueOf(IND_SERVICE));
			sb.append(",REPRESENTATIVE_TYPE=" + REPRESENTATIVE_TYPE);
			sb.append(",AGENT_CODE=" + String.valueOf(AGENT_CODE));
			sb.append(",PERSON_NAME=" + PERSON_NAME);
			sb.append(",PERSON_NAME_LANG2=" + PERSON_NAME_LANG2);
			sb.append(",NATIONALITY_COUNTRY_CODE=" + NATIONALITY_COUNTRY_CODE);
			sb.append(",IND_COMPANY=" + String.valueOf(IND_COMPANY));
			sb.append(",LEGAL_NATURE=" + LEGAL_NATURE);
			sb.append(",LEGAL_NATURE_LANG2=" + LEGAL_NATURE_LANG2);
			sb.append(",LEGAL_ID_TYPE=" + LEGAL_ID_TYPE);
			sb.append(",LEGAL_ID_NBR=" + String.valueOf(LEGAL_ID_NBR));
			sb.append(",INDIVIDUAL_ID_TYPE=" + INDIVIDUAL_ID_TYPE);
			sb.append(",INDIVIDUAL_ID_NBR=" + String.valueOf(INDIVIDUAL_ID_NBR));
			sb.append(",RESIDENCE_COUNTRY_CODE=" + RESIDENCE_COUNTRY_CODE);
			sb.append(",STATE_NAME=" + STATE_NAME);
			sb.append(",STATE_CODE=" + STATE_CODE);
			sb.append(",CITY_NAME=" + CITY_NAME);
			sb.append(",CITY_CODE=" + CITY_CODE);
			sb.append(",ADDRESS_ZONE=" + ADDRESS_ZONE);
			sb.append(",ADDRESS_STREET=" + ADDRESS_STREET);
			sb.append(",ADDRESS_STREET_LANG2=" + ADDRESS_STREET_LANG2);
			sb.append(",ZIP_CODE=" + ZIP_CODE);
			sb.append(",EMAIL=" + EMAIL);
			sb.append(",TELEPHONE=" + TELEPHONE);
			sb.append(",PERSON_GROUP_CODE=" + PERSON_GROUP_CODE);
			sb.append("]");

			return sb.toString();
		}

		/**
		 * Compare keys
		 */
		public int compareTo(row2Struct other) {

			int returnValue = -1;

			return returnValue;
		}

		private int checkNullsAndCompare(Object object1, Object object2) {
			int returnValue = 0;
			if (object1 instanceof Comparable && object2 instanceof Comparable) {
				returnValue = ((Comparable) object1).compareTo(object2);
			} else if (object1 != null && object2 != null) {
				returnValue = compareStrings(object1.toString(), object2.toString());
			} else if (object1 == null && object2 != null) {
				returnValue = 1;
			} else if (object1 != null && object2 == null) {
				returnValue = -1;
			} else {
				returnValue = 0;
			}

			return returnValue;
		}

		private int compareStrings(String string1, String string2) {
			return string1.compareTo(string2);
		}

	}

	public static class after_tDBInput_1Struct implements routines.system.IPersistableRow<after_tDBInput_1Struct> {
		final static byte[] commonByteArrayLock_WIPO_PROJECTS_G2b_Mig_TM = new byte[0];
		static byte[] commonByteArray_WIPO_PROJECTS_G2b_Mig_TM = new byte[0];

		public String FILE_SEQ;

		public String getFILE_SEQ() {
			return this.FILE_SEQ;
		}

		public String FILE_TYPE;

		public String getFILE_TYPE() {
			return this.FILE_TYPE;
		}

		public BigDecimal FILE_SERIES;

		public BigDecimal getFILE_SERIES() {
			return this.FILE_SERIES;
		}

		public BigDecimal FILE_NBR;

		public BigDecimal getFILE_NBR() {
			return this.FILE_NBR;
		}

		public BigDecimal IND_SERVICE;

		public BigDecimal getIND_SERVICE() {
			return this.IND_SERVICE;
		}

		public String REPRESENTATIVE_TYPE;

		public String getREPRESENTATIVE_TYPE() {
			return this.REPRESENTATIVE_TYPE;
		}

		public BigDecimal AGENT_CODE;

		public BigDecimal getAGENT_CODE() {
			return this.AGENT_CODE;
		}

		public String PERSON_NAME;

		public String getPERSON_NAME() {
			return this.PERSON_NAME;
		}

		public String PERSON_NAME_LANG2;

		public String getPERSON_NAME_LANG2() {
			return this.PERSON_NAME_LANG2;
		}

		public String NATIONALITY_COUNTRY_CODE;

		public String getNATIONALITY_COUNTRY_CODE() {
			return this.NATIONALITY_COUNTRY_CODE;
		}

		public BigDecimal IND_COMPANY;

		public BigDecimal getIND_COMPANY() {
			return this.IND_COMPANY;
		}

		public String LEGAL_NATURE;

		public String getLEGAL_NATURE() {
			return this.LEGAL_NATURE;
		}

		public String LEGAL_NATURE_LANG2;

		public String getLEGAL_NATURE_LANG2() {
			return this.LEGAL_NATURE_LANG2;
		}

		public String LEGAL_ID_TYPE;

		public String getLEGAL_ID_TYPE() {
			return this.LEGAL_ID_TYPE;
		}

		public BigDecimal LEGAL_ID_NBR;

		public BigDecimal getLEGAL_ID_NBR() {
			return this.LEGAL_ID_NBR;
		}

		public String INDIVIDUAL_ID_TYPE;

		public String getINDIVIDUAL_ID_TYPE() {
			return this.INDIVIDUAL_ID_TYPE;
		}

		public BigDecimal INDIVIDUAL_ID_NBR;

		public BigDecimal getINDIVIDUAL_ID_NBR() {
			return this.INDIVIDUAL_ID_NBR;
		}

		public String RESIDENCE_COUNTRY_CODE;

		public String getRESIDENCE_COUNTRY_CODE() {
			return this.RESIDENCE_COUNTRY_CODE;
		}

		public String STATE_NAME;

		public String getSTATE_NAME() {
			return this.STATE_NAME;
		}

		public String STATE_CODE;

		public String getSTATE_CODE() {
			return this.STATE_CODE;
		}

		public String CITY_NAME;

		public String getCITY_NAME() {
			return this.CITY_NAME;
		}

		public String CITY_CODE;

		public String getCITY_CODE() {
			return this.CITY_CODE;
		}

		public String ADDRESS_ZONE;

		public String getADDRESS_ZONE() {
			return this.ADDRESS_ZONE;
		}

		public String ADDRESS_STREET;

		public String getADDRESS_STREET() {
			return this.ADDRESS_STREET;
		}

		public String ADDRESS_STREET_LANG2;

		public String getADDRESS_STREET_LANG2() {
			return this.ADDRESS_STREET_LANG2;
		}

		public String ZIP_CODE;

		public String getZIP_CODE() {
			return this.ZIP_CODE;
		}

		public String EMAIL;

		public String getEMAIL() {
			return this.EMAIL;
		}

		public String TELEPHONE;

		public String getTELEPHONE() {
			return this.TELEPHONE;
		}

		public String PERSON_GROUP_CODE;

		public String getPERSON_GROUP_CODE() {
			return this.PERSON_GROUP_CODE;
		}

		private String readString(ObjectInputStream dis) throws IOException {
			String strReturn = null;
			int length = 0;
			length = dis.readInt();
			if (length == -1) {
				strReturn = null;
			} else {
				if (length > commonByteArray_WIPO_PROJECTS_G2b_Mig_TM.length) {
					if (length < 1024 && commonByteArray_WIPO_PROJECTS_G2b_Mig_TM.length == 0) {
						commonByteArray_WIPO_PROJECTS_G2b_Mig_TM = new byte[1024];
					} else {
						commonByteArray_WIPO_PROJECTS_G2b_Mig_TM = new byte[2 * length];
					}
				}
				dis.readFully(commonByteArray_WIPO_PROJECTS_G2b_Mig_TM, 0, length);
				strReturn = new String(commonByteArray_WIPO_PROJECTS_G2b_Mig_TM, 0, length, utf8Charset);
			}
			return strReturn;
		}

		private void writeString(String str, ObjectOutputStream dos) throws IOException {
			if (str == null) {
				dos.writeInt(-1);
			} else {
				byte[] byteArray = str.getBytes(utf8Charset);
				dos.writeInt(byteArray.length);
				dos.write(byteArray);
			}
		}

		public void readData(ObjectInputStream dis) {

			synchronized (commonByteArrayLock_WIPO_PROJECTS_G2b_Mig_TM) {

				try {

					int length = 0;

					this.FILE_SEQ = readString(dis);

					this.FILE_TYPE = readString(dis);

					this.FILE_SERIES = (BigDecimal) dis.readObject();

					this.FILE_NBR = (BigDecimal) dis.readObject();

					this.IND_SERVICE = (BigDecimal) dis.readObject();

					this.REPRESENTATIVE_TYPE = readString(dis);

					this.AGENT_CODE = (BigDecimal) dis.readObject();

					this.PERSON_NAME = readString(dis);

					this.PERSON_NAME_LANG2 = readString(dis);

					this.NATIONALITY_COUNTRY_CODE = readString(dis);

					this.IND_COMPANY = (BigDecimal) dis.readObject();

					this.LEGAL_NATURE = readString(dis);

					this.LEGAL_NATURE_LANG2 = readString(dis);

					this.LEGAL_ID_TYPE = readString(dis);

					this.LEGAL_ID_NBR = (BigDecimal) dis.readObject();

					this.INDIVIDUAL_ID_TYPE = readString(dis);

					this.INDIVIDUAL_ID_NBR = (BigDecimal) dis.readObject();

					this.RESIDENCE_COUNTRY_CODE = readString(dis);

					this.STATE_NAME = readString(dis);

					this.STATE_CODE = readString(dis);

					this.CITY_NAME = readString(dis);

					this.CITY_CODE = readString(dis);

					this.ADDRESS_ZONE = readString(dis);

					this.ADDRESS_STREET = readString(dis);

					this.ADDRESS_STREET_LANG2 = readString(dis);

					this.ZIP_CODE = readString(dis);

					this.EMAIL = readString(dis);

					this.TELEPHONE = readString(dis);

					this.PERSON_GROUP_CODE = readString(dis);

				} catch (IOException e) {
					throw new RuntimeException(e);

				} catch (ClassNotFoundException eCNFE) {
					throw new RuntimeException(eCNFE);

				}

			}

		}

		public void writeData(ObjectOutputStream dos) {
			try {

				// String

				writeString(this.FILE_SEQ, dos);

				// String

				writeString(this.FILE_TYPE, dos);

				// BigDecimal

				dos.writeObject(this.FILE_SERIES);

				// BigDecimal

				dos.writeObject(this.FILE_NBR);

				// BigDecimal

				dos.writeObject(this.IND_SERVICE);

				// String

				writeString(this.REPRESENTATIVE_TYPE, dos);

				// BigDecimal

				dos.writeObject(this.AGENT_CODE);

				// String

				writeString(this.PERSON_NAME, dos);

				// String

				writeString(this.PERSON_NAME_LANG2, dos);

				// String

				writeString(this.NATIONALITY_COUNTRY_CODE, dos);

				// BigDecimal

				dos.writeObject(this.IND_COMPANY);

				// String

				writeString(this.LEGAL_NATURE, dos);

				// String

				writeString(this.LEGAL_NATURE_LANG2, dos);

				// String

				writeString(this.LEGAL_ID_TYPE, dos);

				// BigDecimal

				dos.writeObject(this.LEGAL_ID_NBR);

				// String

				writeString(this.INDIVIDUAL_ID_TYPE, dos);

				// BigDecimal

				dos.writeObject(this.INDIVIDUAL_ID_NBR);

				// String

				writeString(this.RESIDENCE_COUNTRY_CODE, dos);

				// String

				writeString(this.STATE_NAME, dos);

				// String

				writeString(this.STATE_CODE, dos);

				// String

				writeString(this.CITY_NAME, dos);

				// String

				writeString(this.CITY_CODE, dos);

				// String

				writeString(this.ADDRESS_ZONE, dos);

				// String

				writeString(this.ADDRESS_STREET, dos);

				// String

				writeString(this.ADDRESS_STREET_LANG2, dos);

				// String

				writeString(this.ZIP_CODE, dos);

				// String

				writeString(this.EMAIL, dos);

				// String

				writeString(this.TELEPHONE, dos);

				// String

				writeString(this.PERSON_GROUP_CODE, dos);

			} catch (IOException e) {
				throw new RuntimeException(e);
			}

		}

		public String toString() {

			StringBuilder sb = new StringBuilder();
			sb.append(super.toString());
			sb.append("[");
			sb.append("FILE_SEQ=" + FILE_SEQ);
			sb.append(",FILE_TYPE=" + FILE_TYPE);
			sb.append(",FILE_SERIES=" + String.valueOf(FILE_SERIES));
			sb.append(",FILE_NBR=" + String.valueOf(FILE_NBR));
			sb.append(",IND_SERVICE=" + String.valueOf(IND_SERVICE));
			sb.append(",REPRESENTATIVE_TYPE=" + REPRESENTATIVE_TYPE);
			sb.append(",AGENT_CODE=" + String.valueOf(AGENT_CODE));
			sb.append(",PERSON_NAME=" + PERSON_NAME);
			sb.append(",PERSON_NAME_LANG2=" + PERSON_NAME_LANG2);
			sb.append(",NATIONALITY_COUNTRY_CODE=" + NATIONALITY_COUNTRY_CODE);
			sb.append(",IND_COMPANY=" + String.valueOf(IND_COMPANY));
			sb.append(",LEGAL_NATURE=" + LEGAL_NATURE);
			sb.append(",LEGAL_NATURE_LANG2=" + LEGAL_NATURE_LANG2);
			sb.append(",LEGAL_ID_TYPE=" + LEGAL_ID_TYPE);
			sb.append(",LEGAL_ID_NBR=" + String.valueOf(LEGAL_ID_NBR));
			sb.append(",INDIVIDUAL_ID_TYPE=" + INDIVIDUAL_ID_TYPE);
			sb.append(",INDIVIDUAL_ID_NBR=" + String.valueOf(INDIVIDUAL_ID_NBR));
			sb.append(",RESIDENCE_COUNTRY_CODE=" + RESIDENCE_COUNTRY_CODE);
			sb.append(",STATE_NAME=" + STATE_NAME);
			sb.append(",STATE_CODE=" + STATE_CODE);
			sb.append(",CITY_NAME=" + CITY_NAME);
			sb.append(",CITY_CODE=" + CITY_CODE);
			sb.append(",ADDRESS_ZONE=" + ADDRESS_ZONE);
			sb.append(",ADDRESS_STREET=" + ADDRESS_STREET);
			sb.append(",ADDRESS_STREET_LANG2=" + ADDRESS_STREET_LANG2);
			sb.append(",ZIP_CODE=" + ZIP_CODE);
			sb.append(",EMAIL=" + EMAIL);
			sb.append(",TELEPHONE=" + TELEPHONE);
			sb.append(",PERSON_GROUP_CODE=" + PERSON_GROUP_CODE);
			sb.append("]");

			return sb.toString();
		}

		/**
		 * Compare keys
		 */
		public int compareTo(after_tDBInput_1Struct other) {

			int returnValue = -1;

			return returnValue;
		}

		private int checkNullsAndCompare(Object object1, Object object2) {
			int returnValue = 0;
			if (object1 instanceof Comparable && object2 instanceof Comparable) {
				returnValue = ((Comparable) object1).compareTo(object2);
			} else if (object1 != null && object2 != null) {
				returnValue = compareStrings(object1.toString(), object2.toString());
			} else if (object1 == null && object2 != null) {
				returnValue = 1;
			} else if (object1 != null && object2 == null) {
				returnValue = -1;
			} else {
				returnValue = 0;
			}

			return returnValue;
		}

		private int compareStrings(String string1, String string2) {
			return string1.compareTo(string2);
		}

	}

	public void tDBInput_1Process(final java.util.Map<String, Object> globalMap) throws TalendException {
		globalMap.put("tDBInput_1_SUBPROCESS_STATE", 0);

		final boolean execStat = this.execStat;

		String iterateId = "";

		String currentComponent = "";
		java.util.Map<String, Object> resourceMap = new java.util.HashMap<String, Object>();

		try {
			// TDI-39566 avoid throwing an useless Exception
			boolean resumeIt = true;
			if (globalResumeTicket == false && resumeEntryMethodName != null) {
				String currentMethodName = new java.lang.Exception().getStackTrace()[0].getMethodName();
				resumeIt = resumeEntryMethodName.equals(currentMethodName);
			}
			if (resumeIt || globalResumeTicket) { // start the resume
				globalResumeTicket = true;

				tDBInput_3Process(globalMap);

				row2Struct row2 = new row2Struct();
				wrk_reprsStruct wrk_reprs = new wrk_reprsStruct();
				row8Struct row8 = new row8Struct();

				/**
				 * [tLogRow_3 begin ] start
				 */

				ok_Hash.put("tLogRow_3", false);
				start_Hash.put("tLogRow_3", System.currentTimeMillis());

				currentComponent = "tLogRow_3";

				if (execStat) {
					runStat.updateStatOnConnection(resourceMap, iterateId, 0, 0, "row8");
				}

				int tos_count_tLogRow_3 = 0;

				///////////////////////

				final String OUTPUT_FIELD_SEPARATOR_tLogRow_3 = "|";
				java.io.PrintStream consoleOut_tLogRow_3 = null;

				StringBuilder strBuffer_tLogRow_3 = null;
				int nb_line_tLogRow_3 = 0;
///////////////////////    			

				/**
				 * [tLogRow_3 begin ] stop
				 */

				/**
				 * [tDBOutput_1 begin ] start
				 */

				ok_Hash.put("tDBOutput_1", false);
				start_Hash.put("tDBOutput_1", System.currentTimeMillis());

				currentComponent = "tDBOutput_1";

				if (execStat) {
					runStat.updateStatOnConnection(resourceMap, iterateId, 0, 0, "wrk_reprs");
				}

				int tos_count_tDBOutput_1 = 0;

				int nb_line_tDBOutput_1 = 0;
				int nb_line_update_tDBOutput_1 = 0;
				int nb_line_inserted_tDBOutput_1 = 0;
				int nb_line_deleted_tDBOutput_1 = 0;
				int nb_line_rejected_tDBOutput_1 = 0;

				int deletedCount_tDBOutput_1 = 0;
				int updatedCount_tDBOutput_1 = 0;
				int insertedCount_tDBOutput_1 = 0;
				int rejectedCount_tDBOutput_1 = 0;
				String dbschema_tDBOutput_1 = null;
				String tableName_tDBOutput_1 = null;
				boolean whetherReject_tDBOutput_1 = false;

				java.util.Calendar calendar_tDBOutput_1 = java.util.Calendar.getInstance();
				long year1_tDBOutput_1 = TalendDate.parseDate("yyyy-MM-dd", "0001-01-01").getTime();
				long year2_tDBOutput_1 = TalendDate.parseDate("yyyy-MM-dd", "1753-01-01").getTime();
				long year10000_tDBOutput_1 = TalendDate.parseDate("yyyy-MM-dd HH:mm:ss", "9999-12-31 24:00:00")
						.getTime();
				long date_tDBOutput_1;

				java.util.Calendar calendar_datetimeoffset_tDBOutput_1 = java.util.Calendar
						.getInstance(java.util.TimeZone.getTimeZone("UTC"));

				java.sql.Connection conn_tDBOutput_1 = null;
				String dbUser_tDBOutput_1 = null;
				dbschema_tDBOutput_1 = "ADMIN";
				String driverClass_tDBOutput_1 = "net.sourceforge.jtds.jdbc.Driver";

				java.lang.Class.forName(driverClass_tDBOutput_1);
				String port_tDBOutput_1 = "1433";
				String dbname_tDBOutput_1 = "MARCAS_PY";
				String url_tDBOutput_1 = "jdbc:jtds:sqlserver://" + "localhost";
				if (!"".equals(port_tDBOutput_1)) {
					url_tDBOutput_1 += ":" + "1433";
				}
				if (!"".equals(dbname_tDBOutput_1)) {
					url_tDBOutput_1 += "//" + "MARCAS_PY";

				}
				url_tDBOutput_1 += ";appName=" + projectName + ";" + "";
				dbUser_tDBOutput_1 = "ADMIN";

				final String decryptedPassword_tDBOutput_1 = routines.system.PasswordEncryptUtil
						.decryptPassword("enc:routine.encryption.key.v1:nAZulSp0nLDq7HR/8IBmoOMZ+ONZBOSt5AIQJA1FRBpr");

				String dbPwd_tDBOutput_1 = decryptedPassword_tDBOutput_1;
				conn_tDBOutput_1 = java.sql.DriverManager.getConnection(url_tDBOutput_1, dbUser_tDBOutput_1,
						dbPwd_tDBOutput_1);

				resourceMap.put("conn_tDBOutput_1", conn_tDBOutput_1);

				conn_tDBOutput_1.setAutoCommit(false);
				int commitEvery_tDBOutput_1 = 10000;
				int commitCounter_tDBOutput_1 = 0;

				if (dbschema_tDBOutput_1 == null || dbschema_tDBOutput_1.trim().length() == 0) {
					tableName_tDBOutput_1 = "WRK_MARK_REPRS";
				} else {
					tableName_tDBOutput_1 = dbschema_tDBOutput_1 + "].[" + "WRK_MARK_REPRS";
				}
				int count_tDBOutput_1 = 0;

				String insert_tDBOutput_1 = "INSERT INTO [" + tableName_tDBOutput_1
						+ "] ([FILE_SEQ],[FILE_TYPE],[FILE_SERIES],[FILE_NBR],[IND_SERVICE],[REPRESENTATIVE_TYPE],[AGENT_CODE],[PERSON_NAME],[PERSON_NAME_LANG2],[NATIONALITY_COUNTRY_CODE],[IND_COMPANY],[LEGAL_NATURE],[LEGAL_NATURE_LANG2],[LEGAL_ID_TYPE],[LEGAL_ID_NBR],[INDIVIDUAL_ID_TYPE],[INDIVIDUAL_ID_NBR],[RESIDENCE_COUNTRY_CODE],[STATE_NAME],[STATE_CODE],[CITY_NAME],[CITY_CODE],[ADDRESS_ZONE],[ADDRESS_STREET],[ADDRESS_STREET_LANG2],[ZIP_CODE],[EMAIL],[TELEPHONE],[PERSON_GROUP_CODE],[PERSON_NBR],[ADDR_NBR]) VALUES (?,?,?,?,?,?,?,?,?,?,?,?,?,?,?,?,?,?,?,?,?,?,?,?,?,?,?,?,?,?,?)";
				java.sql.PreparedStatement pstmt_tDBOutput_1 = conn_tDBOutput_1.prepareStatement(insert_tDBOutput_1);
				resourceMap.put("pstmt_tDBOutput_1", pstmt_tDBOutput_1);

				/**
				 * [tDBOutput_1 begin ] stop
				 */

				/**
				 * [tMap_1 begin ] start
				 */

				ok_Hash.put("tMap_1", false);
				start_Hash.put("tMap_1", System.currentTimeMillis());

				currentComponent = "tMap_1";

				if (execStat) {
					runStat.updateStatOnConnection(resourceMap, iterateId, 0, 0, "row2");
				}

				int tos_count_tMap_1 = 0;

// ###############################
// # Lookup's keys initialization

				org.talend.designer.components.lookup.memory.AdvancedMemoryLookup<row7Struct> tHash_Lookup_row7 = (org.talend.designer.components.lookup.memory.AdvancedMemoryLookup<row7Struct>) ((org.talend.designer.components.lookup.memory.AdvancedMemoryLookup<row7Struct>) globalMap
						.get("tHash_Lookup_row7"));

				row7Struct row7HashKey = new row7Struct();
				row7Struct row7Default = new row7Struct();
// ###############################        

// ###############################
// # Vars initialization
				class Var__tMap_1__Struct {
				}
				Var__tMap_1__Struct Var__tMap_1 = new Var__tMap_1__Struct();
// ###############################

// ###############################
// # Outputs initialization
				wrk_reprsStruct wrk_reprs_tmp = new wrk_reprsStruct();
// ###############################

				/**
				 * [tMap_1 begin ] stop
				 */

				/**
				 * [tDBInput_1 begin ] start
				 */

				ok_Hash.put("tDBInput_1", false);
				start_Hash.put("tDBInput_1", System.currentTimeMillis());

				currentComponent = "tDBInput_1";

				int tos_count_tDBInput_1 = 0;

				org.talend.designer.components.util.mssql.MSSqlGenerateTimestampUtil mssqlGTU_tDBInput_1 = org.talend.designer.components.util.mssql.MSSqlUtilFactory
						.getMSSqlGenerateTimestampUtil();

				java.util.List<String> talendToDBList_tDBInput_1 = new java.util.ArrayList();
				String[] talendToDBArray_tDBInput_1 = new String[] { "FLOAT", "NUMERIC", "NUMERIC IDENTITY", "DECIMAL",
						"DECIMAL IDENTITY", "REAL" };
				java.util.Collections.addAll(talendToDBList_tDBInput_1, talendToDBArray_tDBInput_1);
				int nb_line_tDBInput_1 = 0;
				java.sql.Connection conn_tDBInput_1 = null;
				String driverClass_tDBInput_1 = "net.sourceforge.jtds.jdbc.Driver";
				java.lang.Class jdbcclazz_tDBInput_1 = java.lang.Class.forName(driverClass_tDBInput_1);
				String dbUser_tDBInput_1 = "sa";

				final String decryptedPassword_tDBInput_1 = routines.system.PasswordEncryptUtil.decryptPassword(
						"enc:routine.encryption.key.v1:SR+j9RvYLIP3olFeoo4LvMuXlMSbSVh8WIpeDlVvW2IvMdg7");

				String dbPwd_tDBInput_1 = decryptedPassword_tDBInput_1;

				String port_tDBInput_1 = "1433";
				String dbname_tDBInput_1 = "PY_INTERMED";
				String url_tDBInput_1 = "jdbc:jtds:sqlserver://" + "localhost";
				if (!"".equals(port_tDBInput_1)) {
					url_tDBInput_1 += ":" + "1433";
				}
				if (!"".equals(dbname_tDBInput_1)) {
					url_tDBInput_1 += "//" + "PY_INTERMED";
				}
				url_tDBInput_1 += ";appName=" + projectName + ";" + "";
				String dbschema_tDBInput_1 = "dbo";

				conn_tDBInput_1 = java.sql.DriverManager.getConnection(url_tDBInput_1, dbUser_tDBInput_1,
						dbPwd_tDBInput_1);

				java.sql.Statement stmt_tDBInput_1 = conn_tDBInput_1.createStatement();

				String dbquery_tDBInput_1 = "SELECT dbo.VW_IMPORT_MARK_REPRS.FILE_SEQ,\n		dbo.VW_IMPORT_MARK_REPRS.FILE_TYPE,\n		dbo.VW_IMPORT_MARK_REPRS.FILE_SERIES,"
						+ "\n		dbo.VW_IMPORT_MARK_REPRS.FILE_NBR,\n		dbo.VW_IMPORT_MARK_REPRS.IND_SERVICE,\n		dbo.VW_IMPORT_MARK_REPRS.REPRESENTATIVE_"
						+ "TYPE,\n		dbo.VW_IMPORT_MARK_REPRS.AGENT_CODE,\n		dbo.VW_IMPORT_MARK_REPRS.PERSON_NAME,\n		dbo.VW_IMPORT_MARK_REPRS.PERSON_N"
						+ "AME_LANG2,\n		dbo.VW_IMPORT_MARK_REPRS.NATIONALITY_COUNTRY_CODE,\n		dbo.VW_IMPORT_MARK_REPRS.IND_COMPANY,\n		dbo.VW_IMPORT_"
						+ "MARK_REPRS.LEGAL_NATURE,\n		dbo.VW_IMPORT_MARK_REPRS.LEGAL_NATURE_LANG2,\n		dbo.VW_IMPORT_MARK_REPRS.LEGAL_ID_TYPE,\n		dbo."
						+ "VW_IMPORT_MARK_REPRS.LEGAL_ID_NBR,\n		dbo.VW_IMPORT_MARK_REPRS.INDIVIDUAL_ID_TYPE,\n		dbo.VW_IMPORT_MARK_REPRS.INDIVIDUAL_"
						+ "ID_NBR,\n		dbo.VW_IMPORT_MARK_REPRS.RESIDENCE_COUNTRY_CODE,\n		dbo.VW_IMPORT_MARK_REPRS.STATE_NAME,\n		dbo.VW_IMPORT_MARK_R"
						+ "EPRS.STATE_CODE,\n		dbo.VW_IMPORT_MARK_REPRS.CITY_NAME,\n		dbo.VW_IMPORT_MARK_REPRS.CITY_CODE,\n		dbo.VW_IMPORT_MARK_REPRS."
						+ "ADDRESS_ZONE,\n		dbo.VW_IMPORT_MARK_REPRS.ADDRESS_STREET,\n		dbo.VW_IMPORT_MARK_REPRS.ADDRESS_STREET_LANG2,\n		dbo.VW_IMPOR"
						+ "T_MARK_REPRS.ZIP_CODE,\n		dbo.VW_IMPORT_MARK_REPRS.EMAIL,\n		dbo.VW_IMPORT_MARK_REPRS.TELEPHONE,\n		dbo.VW_IMPORT_MARK_REPR"
						+ "S.PERSON_GROUP_CODE\nFROM	dbo.VW_IMPORT_MARK_REPRS";

				globalMap.put("tDBInput_1_QUERY", dbquery_tDBInput_1);
				java.sql.ResultSet rs_tDBInput_1 = null;

				try {
					rs_tDBInput_1 = stmt_tDBInput_1.executeQuery(dbquery_tDBInput_1);
					java.sql.ResultSetMetaData rsmd_tDBInput_1 = rs_tDBInput_1.getMetaData();
					int colQtyInRs_tDBInput_1 = rsmd_tDBInput_1.getColumnCount();

					String tmpContent_tDBInput_1 = null;

					while (rs_tDBInput_1.next()) {
						nb_line_tDBInput_1++;

						if (colQtyInRs_tDBInput_1 < 1) {
							row2.FILE_SEQ = null;
						} else {

							tmpContent_tDBInput_1 = rs_tDBInput_1.getString(1);
							if (tmpContent_tDBInput_1 != null) {
								if (talendToDBList_tDBInput_1.contains(
										rsmd_tDBInput_1.getColumnTypeName(1).toUpperCase(java.util.Locale.ENGLISH))) {
									row2.FILE_SEQ = FormatterUtils.formatUnwithE(tmpContent_tDBInput_1);
								} else {
									row2.FILE_SEQ = tmpContent_tDBInput_1;
								}
							} else {
								row2.FILE_SEQ = null;
							}
						}
						if (colQtyInRs_tDBInput_1 < 2) {
							row2.FILE_TYPE = null;
						} else {

							tmpContent_tDBInput_1 = rs_tDBInput_1.getString(2);
							if (tmpContent_tDBInput_1 != null) {
								if (talendToDBList_tDBInput_1.contains(
										rsmd_tDBInput_1.getColumnTypeName(2).toUpperCase(java.util.Locale.ENGLISH))) {
									row2.FILE_TYPE = FormatterUtils.formatUnwithE(tmpContent_tDBInput_1);
								} else {
									row2.FILE_TYPE = tmpContent_tDBInput_1;
								}
							} else {
								row2.FILE_TYPE = null;
							}
						}
						if (colQtyInRs_tDBInput_1 < 3) {
							row2.FILE_SERIES = null;
						} else {

							row2.FILE_SERIES = rs_tDBInput_1.getBigDecimal(3);
							if (rs_tDBInput_1.wasNull()) {
								throw new RuntimeException("Null value in non-Nullable column");
							}
						}
						if (colQtyInRs_tDBInput_1 < 4) {
							row2.FILE_NBR = null;
						} else {

							row2.FILE_NBR = rs_tDBInput_1.getBigDecimal(4);
							if (rs_tDBInput_1.wasNull()) {
								throw new RuntimeException("Null value in non-Nullable column");
							}
						}
						if (colQtyInRs_tDBInput_1 < 5) {
							row2.IND_SERVICE = null;
						} else {

							row2.IND_SERVICE = rs_tDBInput_1.getBigDecimal(5);
							if (rs_tDBInput_1.wasNull()) {
								row2.IND_SERVICE = null;
							}
						}
						if (colQtyInRs_tDBInput_1 < 6) {
							row2.REPRESENTATIVE_TYPE = null;
						} else {

							tmpContent_tDBInput_1 = rs_tDBInput_1.getString(6);
							if (tmpContent_tDBInput_1 != null) {
								if (talendToDBList_tDBInput_1.contains(
										rsmd_tDBInput_1.getColumnTypeName(6).toUpperCase(java.util.Locale.ENGLISH))) {
									row2.REPRESENTATIVE_TYPE = FormatterUtils.formatUnwithE(tmpContent_tDBInput_1);
								} else {
									row2.REPRESENTATIVE_TYPE = tmpContent_tDBInput_1;
								}
							} else {
								row2.REPRESENTATIVE_TYPE = null;
							}
						}
						if (colQtyInRs_tDBInput_1 < 7) {
							row2.AGENT_CODE = null;
						} else {

							row2.AGENT_CODE = rs_tDBInput_1.getBigDecimal(7);
							if (rs_tDBInput_1.wasNull()) {
								row2.AGENT_CODE = null;
							}
						}
						if (colQtyInRs_tDBInput_1 < 8) {
							row2.PERSON_NAME = null;
						} else {

							tmpContent_tDBInput_1 = rs_tDBInput_1.getString(8);
							if (tmpContent_tDBInput_1 != null) {
								if (talendToDBList_tDBInput_1.contains(
										rsmd_tDBInput_1.getColumnTypeName(8).toUpperCase(java.util.Locale.ENGLISH))) {
									row2.PERSON_NAME = FormatterUtils.formatUnwithE(tmpContent_tDBInput_1);
								} else {
									row2.PERSON_NAME = tmpContent_tDBInput_1;
								}
							} else {
								row2.PERSON_NAME = null;
							}
						}
						if (colQtyInRs_tDBInput_1 < 9) {
							row2.PERSON_NAME_LANG2 = null;
						} else {

							tmpContent_tDBInput_1 = rs_tDBInput_1.getString(9);
							if (tmpContent_tDBInput_1 != null) {
								if (talendToDBList_tDBInput_1.contains(
										rsmd_tDBInput_1.getColumnTypeName(9).toUpperCase(java.util.Locale.ENGLISH))) {
									row2.PERSON_NAME_LANG2 = FormatterUtils.formatUnwithE(tmpContent_tDBInput_1);
								} else {
									row2.PERSON_NAME_LANG2 = tmpContent_tDBInput_1;
								}
							} else {
								row2.PERSON_NAME_LANG2 = null;
							}
						}
						if (colQtyInRs_tDBInput_1 < 10) {
							row2.NATIONALITY_COUNTRY_CODE = null;
						} else {

							tmpContent_tDBInput_1 = rs_tDBInput_1.getString(10);
							if (tmpContent_tDBInput_1 != null) {
								if (talendToDBList_tDBInput_1.contains(
										rsmd_tDBInput_1.getColumnTypeName(10).toUpperCase(java.util.Locale.ENGLISH))) {
									row2.NATIONALITY_COUNTRY_CODE = FormatterUtils.formatUnwithE(tmpContent_tDBInput_1);
								} else {
									row2.NATIONALITY_COUNTRY_CODE = tmpContent_tDBInput_1;
								}
							} else {
								row2.NATIONALITY_COUNTRY_CODE = null;
							}
						}
						if (colQtyInRs_tDBInput_1 < 11) {
							row2.IND_COMPANY = null;
						} else {

							row2.IND_COMPANY = rs_tDBInput_1.getBigDecimal(11);
							if (rs_tDBInput_1.wasNull()) {
								row2.IND_COMPANY = null;
							}
						}
						if (colQtyInRs_tDBInput_1 < 12) {
							row2.LEGAL_NATURE = null;
						} else {

							tmpContent_tDBInput_1 = rs_tDBInput_1.getString(12);
							if (tmpContent_tDBInput_1 != null) {
								if (talendToDBList_tDBInput_1.contains(
										rsmd_tDBInput_1.getColumnTypeName(12).toUpperCase(java.util.Locale.ENGLISH))) {
									row2.LEGAL_NATURE = FormatterUtils.formatUnwithE(tmpContent_tDBInput_1);
								} else {
									row2.LEGAL_NATURE = tmpContent_tDBInput_1;
								}
							} else {
								row2.LEGAL_NATURE = null;
							}
						}
						if (colQtyInRs_tDBInput_1 < 13) {
							row2.LEGAL_NATURE_LANG2 = null;
						} else {

							tmpContent_tDBInput_1 = rs_tDBInput_1.getString(13);
							if (tmpContent_tDBInput_1 != null) {
								if (talendToDBList_tDBInput_1.contains(
										rsmd_tDBInput_1.getColumnTypeName(13).toUpperCase(java.util.Locale.ENGLISH))) {
									row2.LEGAL_NATURE_LANG2 = FormatterUtils.formatUnwithE(tmpContent_tDBInput_1);
								} else {
									row2.LEGAL_NATURE_LANG2 = tmpContent_tDBInput_1;
								}
							} else {
								row2.LEGAL_NATURE_LANG2 = null;
							}
						}
						if (colQtyInRs_tDBInput_1 < 14) {
							row2.LEGAL_ID_TYPE = null;
						} else {

							tmpContent_tDBInput_1 = rs_tDBInput_1.getString(14);
							if (tmpContent_tDBInput_1 != null) {
								if (talendToDBList_tDBInput_1.contains(
										rsmd_tDBInput_1.getColumnTypeName(14).toUpperCase(java.util.Locale.ENGLISH))) {
									row2.LEGAL_ID_TYPE = FormatterUtils.formatUnwithE(tmpContent_tDBInput_1);
								} else {
									row2.LEGAL_ID_TYPE = tmpContent_tDBInput_1;
								}
							} else {
								row2.LEGAL_ID_TYPE = null;
							}
						}
						if (colQtyInRs_tDBInput_1 < 15) {
							row2.LEGAL_ID_NBR = null;
						} else {

							row2.LEGAL_ID_NBR = rs_tDBInput_1.getBigDecimal(15);
							if (rs_tDBInput_1.wasNull()) {
								row2.LEGAL_ID_NBR = null;
							}
						}
						if (colQtyInRs_tDBInput_1 < 16) {
							row2.INDIVIDUAL_ID_TYPE = null;
						} else {

							tmpContent_tDBInput_1 = rs_tDBInput_1.getString(16);
							if (tmpContent_tDBInput_1 != null) {
								if (talendToDBList_tDBInput_1.contains(
										rsmd_tDBInput_1.getColumnTypeName(16).toUpperCase(java.util.Locale.ENGLISH))) {
									row2.INDIVIDUAL_ID_TYPE = FormatterUtils.formatUnwithE(tmpContent_tDBInput_1);
								} else {
									row2.INDIVIDUAL_ID_TYPE = tmpContent_tDBInput_1;
								}
							} else {
								row2.INDIVIDUAL_ID_TYPE = null;
							}
						}
						if (colQtyInRs_tDBInput_1 < 17) {
							row2.INDIVIDUAL_ID_NBR = null;
						} else {

							row2.INDIVIDUAL_ID_NBR = rs_tDBInput_1.getBigDecimal(17);
							if (rs_tDBInput_1.wasNull()) {
								row2.INDIVIDUAL_ID_NBR = null;
							}
						}
						if (colQtyInRs_tDBInput_1 < 18) {
							row2.RESIDENCE_COUNTRY_CODE = null;
						} else {

							tmpContent_tDBInput_1 = rs_tDBInput_1.getString(18);
							if (tmpContent_tDBInput_1 != null) {
								if (talendToDBList_tDBInput_1.contains(
										rsmd_tDBInput_1.getColumnTypeName(18).toUpperCase(java.util.Locale.ENGLISH))) {
									row2.RESIDENCE_COUNTRY_CODE = FormatterUtils.formatUnwithE(tmpContent_tDBInput_1);
								} else {
									row2.RESIDENCE_COUNTRY_CODE = tmpContent_tDBInput_1;
								}
							} else {
								row2.RESIDENCE_COUNTRY_CODE = null;
							}
						}
						if (colQtyInRs_tDBInput_1 < 19) {
							row2.STATE_NAME = null;
						} else {

							tmpContent_tDBInput_1 = rs_tDBInput_1.getString(19);
							if (tmpContent_tDBInput_1 != null) {
								if (talendToDBList_tDBInput_1.contains(
										rsmd_tDBInput_1.getColumnTypeName(19).toUpperCase(java.util.Locale.ENGLISH))) {
									row2.STATE_NAME = FormatterUtils.formatUnwithE(tmpContent_tDBInput_1);
								} else {
									row2.STATE_NAME = tmpContent_tDBInput_1;
								}
							} else {
								row2.STATE_NAME = null;
							}
						}
						if (colQtyInRs_tDBInput_1 < 20) {
							row2.STATE_CODE = null;
						} else {

							tmpContent_tDBInput_1 = rs_tDBInput_1.getString(20);
							if (tmpContent_tDBInput_1 != null) {
								if (talendToDBList_tDBInput_1.contains(
										rsmd_tDBInput_1.getColumnTypeName(20).toUpperCase(java.util.Locale.ENGLISH))) {
									row2.STATE_CODE = FormatterUtils.formatUnwithE(tmpContent_tDBInput_1);
								} else {
									row2.STATE_CODE = tmpContent_tDBInput_1;
								}
							} else {
								row2.STATE_CODE = null;
							}
						}
						if (colQtyInRs_tDBInput_1 < 21) {
							row2.CITY_NAME = null;
						} else {

							tmpContent_tDBInput_1 = rs_tDBInput_1.getString(21);
							if (tmpContent_tDBInput_1 != null) {
								if (talendToDBList_tDBInput_1.contains(
										rsmd_tDBInput_1.getColumnTypeName(21).toUpperCase(java.util.Locale.ENGLISH))) {
									row2.CITY_NAME = FormatterUtils.formatUnwithE(tmpContent_tDBInput_1);
								} else {
									row2.CITY_NAME = tmpContent_tDBInput_1;
								}
							} else {
								row2.CITY_NAME = null;
							}
						}
						if (colQtyInRs_tDBInput_1 < 22) {
							row2.CITY_CODE = null;
						} else {

							tmpContent_tDBInput_1 = rs_tDBInput_1.getString(22);
							if (tmpContent_tDBInput_1 != null) {
								if (talendToDBList_tDBInput_1.contains(
										rsmd_tDBInput_1.getColumnTypeName(22).toUpperCase(java.util.Locale.ENGLISH))) {
									row2.CITY_CODE = FormatterUtils.formatUnwithE(tmpContent_tDBInput_1);
								} else {
									row2.CITY_CODE = tmpContent_tDBInput_1;
								}
							} else {
								row2.CITY_CODE = null;
							}
						}
						if (colQtyInRs_tDBInput_1 < 23) {
							row2.ADDRESS_ZONE = null;
						} else {

							tmpContent_tDBInput_1 = rs_tDBInput_1.getString(23);
							if (tmpContent_tDBInput_1 != null) {
								if (talendToDBList_tDBInput_1.contains(
										rsmd_tDBInput_1.getColumnTypeName(23).toUpperCase(java.util.Locale.ENGLISH))) {
									row2.ADDRESS_ZONE = FormatterUtils.formatUnwithE(tmpContent_tDBInput_1);
								} else {
									row2.ADDRESS_ZONE = tmpContent_tDBInput_1;
								}
							} else {
								row2.ADDRESS_ZONE = null;
							}
						}
						if (colQtyInRs_tDBInput_1 < 24) {
							row2.ADDRESS_STREET = null;
						} else {

							tmpContent_tDBInput_1 = rs_tDBInput_1.getString(24);
							if (tmpContent_tDBInput_1 != null) {
								if (talendToDBList_tDBInput_1.contains(
										rsmd_tDBInput_1.getColumnTypeName(24).toUpperCase(java.util.Locale.ENGLISH))) {
									row2.ADDRESS_STREET = FormatterUtils.formatUnwithE(tmpContent_tDBInput_1);
								} else {
									row2.ADDRESS_STREET = tmpContent_tDBInput_1;
								}
							} else {
								row2.ADDRESS_STREET = null;
							}
						}
						if (colQtyInRs_tDBInput_1 < 25) {
							row2.ADDRESS_STREET_LANG2 = null;
						} else {

							tmpContent_tDBInput_1 = rs_tDBInput_1.getString(25);
							if (tmpContent_tDBInput_1 != null) {
								if (talendToDBList_tDBInput_1.contains(
										rsmd_tDBInput_1.getColumnTypeName(25).toUpperCase(java.util.Locale.ENGLISH))) {
									row2.ADDRESS_STREET_LANG2 = FormatterUtils.formatUnwithE(tmpContent_tDBInput_1);
								} else {
									row2.ADDRESS_STREET_LANG2 = tmpContent_tDBInput_1;
								}
							} else {
								row2.ADDRESS_STREET_LANG2 = null;
							}
						}
						if (colQtyInRs_tDBInput_1 < 26) {
							row2.ZIP_CODE = null;
						} else {

							tmpContent_tDBInput_1 = rs_tDBInput_1.getString(26);
							if (tmpContent_tDBInput_1 != null) {
								if (talendToDBList_tDBInput_1.contains(
										rsmd_tDBInput_1.getColumnTypeName(26).toUpperCase(java.util.Locale.ENGLISH))) {
									row2.ZIP_CODE = FormatterUtils.formatUnwithE(tmpContent_tDBInput_1);
								} else {
									row2.ZIP_CODE = tmpContent_tDBInput_1;
								}
							} else {
								row2.ZIP_CODE = null;
							}
						}
						if (colQtyInRs_tDBInput_1 < 27) {
							row2.EMAIL = null;
						} else {

							tmpContent_tDBInput_1 = rs_tDBInput_1.getString(27);
							if (tmpContent_tDBInput_1 != null) {
								if (talendToDBList_tDBInput_1.contains(
										rsmd_tDBInput_1.getColumnTypeName(27).toUpperCase(java.util.Locale.ENGLISH))) {
									row2.EMAIL = FormatterUtils.formatUnwithE(tmpContent_tDBInput_1);
								} else {
									row2.EMAIL = tmpContent_tDBInput_1;
								}
							} else {
								row2.EMAIL = null;
							}
						}
						if (colQtyInRs_tDBInput_1 < 28) {
							row2.TELEPHONE = null;
						} else {

							tmpContent_tDBInput_1 = rs_tDBInput_1.getString(28);
							if (tmpContent_tDBInput_1 != null) {
								if (talendToDBList_tDBInput_1.contains(
										rsmd_tDBInput_1.getColumnTypeName(28).toUpperCase(java.util.Locale.ENGLISH))) {
									row2.TELEPHONE = FormatterUtils.formatUnwithE(tmpContent_tDBInput_1);
								} else {
									row2.TELEPHONE = tmpContent_tDBInput_1;
								}
							} else {
								row2.TELEPHONE = null;
							}
						}
						if (colQtyInRs_tDBInput_1 < 29) {
							row2.PERSON_GROUP_CODE = null;
						} else {

							tmpContent_tDBInput_1 = rs_tDBInput_1.getString(29);
							if (tmpContent_tDBInput_1 != null) {
								if (talendToDBList_tDBInput_1.contains(
										rsmd_tDBInput_1.getColumnTypeName(29).toUpperCase(java.util.Locale.ENGLISH))) {
									row2.PERSON_GROUP_CODE = FormatterUtils.formatUnwithE(tmpContent_tDBInput_1);
								} else {
									row2.PERSON_GROUP_CODE = tmpContent_tDBInput_1;
								}
							} else {
								row2.PERSON_GROUP_CODE = null;
							}
						}

						/**
						 * [tDBInput_1 begin ] stop
						 */

						/**
						 * [tDBInput_1 main ] start
						 */

						currentComponent = "tDBInput_1";

						tos_count_tDBInput_1++;

						/**
						 * [tDBInput_1 main ] stop
						 */

						/**
						 * [tDBInput_1 process_data_begin ] start
						 */

						currentComponent = "tDBInput_1";

						/**
						 * [tDBInput_1 process_data_begin ] stop
						 */

						/**
						 * [tMap_1 main ] start
						 */

						currentComponent = "tMap_1";

						if (execStat) {
							runStat.updateStatOnConnection(iterateId, 1, 1

									, "row2"

							);
						}

						boolean hasCasePrimitiveKeyWithNull_tMap_1 = false;

						// ###############################
						// # Input tables (lookups)
						boolean rejectedInnerJoin_tMap_1 = false;
						boolean mainRowRejected_tMap_1 = false;

						///////////////////////////////////////////////
						// Starting Lookup Table "row7"
						///////////////////////////////////////////////

						boolean forceLooprow7 = false;

						row7Struct row7ObjectFromLookup = null;

						if (!rejectedInnerJoin_tMap_1) { // G_TM_M_020

							hasCasePrimitiveKeyWithNull_tMap_1 = false;

							row7HashKey.FILE_SEQ = row2.FILE_SEQ;

							row7HashKey.FILE_TYPE = row2.FILE_TYPE;

							row7HashKey.FILE_SERIES = row2.FILE_SERIES;

							row7HashKey.FILE_NBR = row2.FILE_NBR;

							row7HashKey.hashCodeDirty = true;

							tHash_Lookup_row7.lookup(row7HashKey);

							if (!tHash_Lookup_row7.hasNext()) { // G_TM_M_090

								rejectedInnerJoin_tMap_1 = true;

								forceLooprow7 = true;

							} // G_TM_M_090

						} // G_TM_M_020

						else { // G 20 - G 21
							forceLooprow7 = true;
						} // G 21

						row7Struct row7 = null;

						while ((tHash_Lookup_row7 != null && tHash_Lookup_row7.hasNext()) || forceLooprow7) { // G_TM_M_043

							// CALL close loop of lookup 'row7'

							row7Struct fromLookup_row7 = null;
							row7 = row7Default;

							if (!forceLooprow7) { // G 46

								fromLookup_row7 = tHash_Lookup_row7.next();

								if (fromLookup_row7 != null) {
									row7 = fromLookup_row7;
								}

							} // G 46

							forceLooprow7 = false;

							// ###############################
							{ // start of Var scope

								// ###############################
								// # Vars tables

								Var__tMap_1__Struct Var = Var__tMap_1;// ###############################
								// ###############################
								// # Output tables

								wrk_reprs = null;

								if (!rejectedInnerJoin_tMap_1) {

// # Output table : 'wrk_reprs'
									wrk_reprs_tmp.FILE_SEQ = row7.FILE_SEQ;
									wrk_reprs_tmp.FILE_TYPE = row7.FILE_TYPE;
									wrk_reprs_tmp.FILE_SERIES = row7.FILE_SERIES;
									wrk_reprs_tmp.FILE_NBR = row7.FILE_NBR;
									wrk_reprs_tmp.IND_SERVICE = row2.IND_SERVICE;
									wrk_reprs_tmp.REPRESENTATIVE_TYPE = row2.REPRESENTATIVE_TYPE;
									wrk_reprs_tmp.AGENT_CODE = row2.AGENT_CODE;
									wrk_reprs_tmp.PERSON_NAME = row2.PERSON_NAME;
									wrk_reprs_tmp.PERSON_NAME_LANG2 = row2.PERSON_NAME_LANG2;
									wrk_reprs_tmp.NATIONALITY_COUNTRY_CODE = row2.NATIONALITY_COUNTRY_CODE;
									wrk_reprs_tmp.IND_COMPANY = row2.IND_COMPANY;
									wrk_reprs_tmp.LEGAL_NATURE = row2.LEGAL_NATURE;
									wrk_reprs_tmp.LEGAL_NATURE_LANG2 = row2.LEGAL_NATURE_LANG2;
									wrk_reprs_tmp.LEGAL_ID_TYPE = row2.LEGAL_ID_TYPE;
									wrk_reprs_tmp.LEGAL_ID_NBR = row2.LEGAL_ID_NBR;
									wrk_reprs_tmp.INDIVIDUAL_ID_TYPE = row2.INDIVIDUAL_ID_TYPE;
									wrk_reprs_tmp.INDIVIDUAL_ID_NBR = row2.INDIVIDUAL_ID_NBR;
									wrk_reprs_tmp.RESIDENCE_COUNTRY_CODE = row2.RESIDENCE_COUNTRY_CODE;
									wrk_reprs_tmp.STATE_NAME = row2.STATE_NAME;
									wrk_reprs_tmp.STATE_CODE = row2.STATE_CODE;
									wrk_reprs_tmp.CITY_NAME = row2.CITY_NAME;
									wrk_reprs_tmp.CITY_CODE = row2.CITY_CODE;
									wrk_reprs_tmp.ADDRESS_ZONE = row2.ADDRESS_ZONE;
									wrk_reprs_tmp.ADDRESS_STREET = row2.ADDRESS_STREET;
									wrk_reprs_tmp.ADDRESS_STREET_LANG2 = row2.ADDRESS_STREET_LANG2;
									wrk_reprs_tmp.ZIP_CODE = row2.ZIP_CODE;
									wrk_reprs_tmp.EMAIL = row2.EMAIL;
									wrk_reprs_tmp.TELEPHONE = row2.TELEPHONE;
									wrk_reprs_tmp.PERSON_GROUP_CODE = row2.PERSON_GROUP_CODE;
									wrk_reprs_tmp.PERSON_NBR = null;
									wrk_reprs_tmp.ADDR_NBR = null;
									wrk_reprs = wrk_reprs_tmp;
								} // closing inner join bracket (2)
// ###############################

							} // end of Var scope

							rejectedInnerJoin_tMap_1 = false;

							tos_count_tMap_1++;

							/**
							 * [tMap_1 main ] stop
							 */

							/**
							 * [tMap_1 process_data_begin ] start
							 */

							currentComponent = "tMap_1";

							/**
							 * [tMap_1 process_data_begin ] stop
							 */
// Start of branch "wrk_reprs"
							if (wrk_reprs != null) {
								row8 = null;

								/**
								 * [tDBOutput_1 main ] start
								 */

								currentComponent = "tDBOutput_1";

								if (execStat) {
									runStat.updateStatOnConnection(iterateId, 1, 1

											, "wrk_reprs"

									);
								}

								row8 = null;
								whetherReject_tDBOutput_1 = false;
								try {
									if (wrk_reprs.FILE_SEQ == null) {
										pstmt_tDBOutput_1.setNull(1, java.sql.Types.VARCHAR);
									} else {
										pstmt_tDBOutput_1.setString(1, wrk_reprs.FILE_SEQ);
									}

									if (wrk_reprs.FILE_TYPE == null) {
										pstmt_tDBOutput_1.setNull(2, java.sql.Types.VARCHAR);
									} else {
										pstmt_tDBOutput_1.setString(2, wrk_reprs.FILE_TYPE);
									}

									pstmt_tDBOutput_1.setBigDecimal(3, wrk_reprs.FILE_SERIES);

									pstmt_tDBOutput_1.setBigDecimal(4, wrk_reprs.FILE_NBR);

									pstmt_tDBOutput_1.setBigDecimal(5, wrk_reprs.IND_SERVICE);

									if (wrk_reprs.REPRESENTATIVE_TYPE == null) {
										pstmt_tDBOutput_1.setNull(6, java.sql.Types.VARCHAR);
									} else {
										pstmt_tDBOutput_1.setString(6, wrk_reprs.REPRESENTATIVE_TYPE);
									}

									pstmt_tDBOutput_1.setBigDecimal(7, wrk_reprs.AGENT_CODE);

									if (wrk_reprs.PERSON_NAME == null) {
										pstmt_tDBOutput_1.setNull(8, java.sql.Types.VARCHAR);
									} else {
										pstmt_tDBOutput_1.setString(8, wrk_reprs.PERSON_NAME);
									}

									if (wrk_reprs.PERSON_NAME_LANG2 == null) {
										pstmt_tDBOutput_1.setNull(9, java.sql.Types.VARCHAR);
									} else {
										pstmt_tDBOutput_1.setString(9, wrk_reprs.PERSON_NAME_LANG2);
									}

									if (wrk_reprs.NATIONALITY_COUNTRY_CODE == null) {
										pstmt_tDBOutput_1.setNull(10, java.sql.Types.VARCHAR);
									} else {
										pstmt_tDBOutput_1.setString(10, wrk_reprs.NATIONALITY_COUNTRY_CODE);
									}

									pstmt_tDBOutput_1.setBigDecimal(11, wrk_reprs.IND_COMPANY);

									if (wrk_reprs.LEGAL_NATURE == null) {
										pstmt_tDBOutput_1.setNull(12, java.sql.Types.VARCHAR);
									} else {
										pstmt_tDBOutput_1.setString(12, wrk_reprs.LEGAL_NATURE);
									}

									if (wrk_reprs.LEGAL_NATURE_LANG2 == null) {
										pstmt_tDBOutput_1.setNull(13, java.sql.Types.VARCHAR);
									} else {
										pstmt_tDBOutput_1.setString(13, wrk_reprs.LEGAL_NATURE_LANG2);
									}

									if (wrk_reprs.LEGAL_ID_TYPE == null) {
										pstmt_tDBOutput_1.setNull(14, java.sql.Types.VARCHAR);
									} else {
										pstmt_tDBOutput_1.setString(14, wrk_reprs.LEGAL_ID_TYPE);
									}

									pstmt_tDBOutput_1.setBigDecimal(15, wrk_reprs.LEGAL_ID_NBR);

									if (wrk_reprs.INDIVIDUAL_ID_TYPE == null) {
										pstmt_tDBOutput_1.setNull(16, java.sql.Types.VARCHAR);
									} else {
										pstmt_tDBOutput_1.setString(16, wrk_reprs.INDIVIDUAL_ID_TYPE);
									}

									pstmt_tDBOutput_1.setBigDecimal(17, wrk_reprs.INDIVIDUAL_ID_NBR);

									if (wrk_reprs.RESIDENCE_COUNTRY_CODE == null) {
										pstmt_tDBOutput_1.setNull(18, java.sql.Types.VARCHAR);
									} else {
										pstmt_tDBOutput_1.setString(18, wrk_reprs.RESIDENCE_COUNTRY_CODE);
									}

									if (wrk_reprs.STATE_NAME == null) {
										pstmt_tDBOutput_1.setNull(19, java.sql.Types.VARCHAR);
									} else {
										pstmt_tDBOutput_1.setString(19, wrk_reprs.STATE_NAME);
									}

									if (wrk_reprs.STATE_CODE == null) {
										pstmt_tDBOutput_1.setNull(20, java.sql.Types.VARCHAR);
									} else {
										pstmt_tDBOutput_1.setString(20, wrk_reprs.STATE_CODE);
									}

									if (wrk_reprs.CITY_NAME == null) {
										pstmt_tDBOutput_1.setNull(21, java.sql.Types.VARCHAR);
									} else {
										pstmt_tDBOutput_1.setString(21, wrk_reprs.CITY_NAME);
									}

									if (wrk_reprs.CITY_CODE == null) {
										pstmt_tDBOutput_1.setNull(22, java.sql.Types.VARCHAR);
									} else {
										pstmt_tDBOutput_1.setString(22, wrk_reprs.CITY_CODE);
									}

									if (wrk_reprs.ADDRESS_ZONE == null) {
										pstmt_tDBOutput_1.setNull(23, java.sql.Types.VARCHAR);
									} else {
										pstmt_tDBOutput_1.setString(23, wrk_reprs.ADDRESS_ZONE);
									}

									if (wrk_reprs.ADDRESS_STREET == null) {
										pstmt_tDBOutput_1.setNull(24, java.sql.Types.VARCHAR);
									} else {
										pstmt_tDBOutput_1.setString(24, wrk_reprs.ADDRESS_STREET);
									}

									if (wrk_reprs.ADDRESS_STREET_LANG2 == null) {
										pstmt_tDBOutput_1.setNull(25, java.sql.Types.VARCHAR);
									} else {
										pstmt_tDBOutput_1.setString(25, wrk_reprs.ADDRESS_STREET_LANG2);
									}

									if (wrk_reprs.ZIP_CODE == null) {
										pstmt_tDBOutput_1.setNull(26, java.sql.Types.VARCHAR);
									} else {
										pstmt_tDBOutput_1.setString(26, wrk_reprs.ZIP_CODE);
									}

									if (wrk_reprs.EMAIL == null) {
										pstmt_tDBOutput_1.setNull(27, java.sql.Types.VARCHAR);
									} else {
										pstmt_tDBOutput_1.setString(27, wrk_reprs.EMAIL);
									}

									if (wrk_reprs.TELEPHONE == null) {
										pstmt_tDBOutput_1.setNull(28, java.sql.Types.VARCHAR);
									} else {
										pstmt_tDBOutput_1.setString(28, wrk_reprs.TELEPHONE);
									}

									if (wrk_reprs.PERSON_GROUP_CODE == null) {
										pstmt_tDBOutput_1.setNull(29, java.sql.Types.VARCHAR);
									} else {
										pstmt_tDBOutput_1.setString(29, wrk_reprs.PERSON_GROUP_CODE);
									}

									pstmt_tDBOutput_1.setBigDecimal(30, wrk_reprs.PERSON_NBR);

									pstmt_tDBOutput_1.setBigDecimal(31, wrk_reprs.ADDR_NBR);

									nb_line_tDBOutput_1++;
									insertedCount_tDBOutput_1 = insertedCount_tDBOutput_1
											+ pstmt_tDBOutput_1.executeUpdate();
								} catch (java.lang.Exception e) {
									whetherReject_tDBOutput_1 = true;
									row8 = new row8Struct();
									row8.FILE_SEQ = wrk_reprs.FILE_SEQ;
									row8.FILE_TYPE = wrk_reprs.FILE_TYPE;
									row8.FILE_SERIES = wrk_reprs.FILE_SERIES;
									row8.FILE_NBR = wrk_reprs.FILE_NBR;
									row8.IND_SERVICE = wrk_reprs.IND_SERVICE;
									row8.REPRESENTATIVE_TYPE = wrk_reprs.REPRESENTATIVE_TYPE;
									row8.AGENT_CODE = wrk_reprs.AGENT_CODE;
									row8.PERSON_NAME = wrk_reprs.PERSON_NAME;
									row8.PERSON_NAME_LANG2 = wrk_reprs.PERSON_NAME_LANG2;
									row8.NATIONALITY_COUNTRY_CODE = wrk_reprs.NATIONALITY_COUNTRY_CODE;
									row8.IND_COMPANY = wrk_reprs.IND_COMPANY;
									row8.LEGAL_NATURE = wrk_reprs.LEGAL_NATURE;
									row8.LEGAL_NATURE_LANG2 = wrk_reprs.LEGAL_NATURE_LANG2;
									row8.LEGAL_ID_TYPE = wrk_reprs.LEGAL_ID_TYPE;
									row8.LEGAL_ID_NBR = wrk_reprs.LEGAL_ID_NBR;
									row8.INDIVIDUAL_ID_TYPE = wrk_reprs.INDIVIDUAL_ID_TYPE;
									row8.INDIVIDUAL_ID_NBR = wrk_reprs.INDIVIDUAL_ID_NBR;
									row8.RESIDENCE_COUNTRY_CODE = wrk_reprs.RESIDENCE_COUNTRY_CODE;
									row8.STATE_NAME = wrk_reprs.STATE_NAME;
									row8.STATE_CODE = wrk_reprs.STATE_CODE;
									row8.CITY_NAME = wrk_reprs.CITY_NAME;
									row8.CITY_CODE = wrk_reprs.CITY_CODE;
									row8.ADDRESS_ZONE = wrk_reprs.ADDRESS_ZONE;
									row8.ADDRESS_STREET = wrk_reprs.ADDRESS_STREET;
									row8.ADDRESS_STREET_LANG2 = wrk_reprs.ADDRESS_STREET_LANG2;
									row8.ZIP_CODE = wrk_reprs.ZIP_CODE;
									row8.EMAIL = wrk_reprs.EMAIL;
									row8.TELEPHONE = wrk_reprs.TELEPHONE;
									row8.PERSON_GROUP_CODE = wrk_reprs.PERSON_GROUP_CODE;
									row8.PERSON_NBR = wrk_reprs.PERSON_NBR;
									row8.ADDR_NBR = wrk_reprs.ADDR_NBR;
									rejectedCount_tDBOutput_1 = rejectedCount_tDBOutput_1 + 1;
									row8.errorCode = ((java.sql.SQLException) e).getSQLState();
									row8.errorMessage = e.getMessage() + " - Line: " + tos_count_tDBOutput_1;
								}
								if (!whetherReject_tDBOutput_1) {
								}
								////////// batch execute by batch size///////
								class LimitBytesHelper_tDBOutput_1 {
									public int limitBytePart1(int counter, java.sql.PreparedStatement pstmt_tDBOutput_1)
											throws Exception {
										try {

											for (int countEach_tDBOutput_1 : pstmt_tDBOutput_1.executeBatch()) {
												if (countEach_tDBOutput_1 == -2 || countEach_tDBOutput_1 == -3) {
													break;
												}
												counter += countEach_tDBOutput_1;
											}

										} catch (java.sql.BatchUpdateException e) {

											int countSum_tDBOutput_1 = 0;
											for (int countEach_tDBOutput_1 : e.getUpdateCounts()) {
												counter += (countEach_tDBOutput_1 < 0 ? 0 : countEach_tDBOutput_1);
											}

											System.err.println(e.getMessage());

										}
										return counter;
									}

									public int limitBytePart2(int counter, java.sql.PreparedStatement pstmt_tDBOutput_1)
											throws Exception {
										try {

											for (int countEach_tDBOutput_1 : pstmt_tDBOutput_1.executeBatch()) {
												if (countEach_tDBOutput_1 == -2 || countEach_tDBOutput_1 == -3) {
													break;
												}
												counter += countEach_tDBOutput_1;
											}

										} catch (java.sql.BatchUpdateException e) {

											for (int countEach_tDBOutput_1 : e.getUpdateCounts()) {
												counter += (countEach_tDBOutput_1 < 0 ? 0 : countEach_tDBOutput_1);
											}

											System.err.println(e.getMessage());

										}
										return counter;
									}
								}

								//////////// commit every////////////

								commitCounter_tDBOutput_1++;
								if (commitEvery_tDBOutput_1 <= commitCounter_tDBOutput_1) {

									conn_tDBOutput_1.commit();

									commitCounter_tDBOutput_1 = 0;
								}

								tos_count_tDBOutput_1++;

								/**
								 * [tDBOutput_1 main ] stop
								 */

								/**
								 * [tDBOutput_1 process_data_begin ] start
								 */

								currentComponent = "tDBOutput_1";

								/**
								 * [tDBOutput_1 process_data_begin ] stop
								 */
// Start of branch "row8"
								if (row8 != null) {

									/**
									 * [tLogRow_3 main ] start
									 */

									currentComponent = "tLogRow_3";

									if (execStat) {
										runStat.updateStatOnConnection(iterateId, 1, 1

												, "row8"

										);
									}

///////////////////////		

									strBuffer_tLogRow_3 = new StringBuilder();

									if (row8.FILE_SEQ != null) { //

										strBuffer_tLogRow_3.append(String.valueOf(row8.FILE_SEQ));

									} //

									strBuffer_tLogRow_3.append("|");

									if (row8.FILE_TYPE != null) { //

										strBuffer_tLogRow_3.append(String.valueOf(row8.FILE_TYPE));

									} //

									strBuffer_tLogRow_3.append("|");

									if (row8.FILE_SERIES != null) { //

										strBuffer_tLogRow_3.append(row8.FILE_SERIES
												.setScale(0, java.math.RoundingMode.HALF_UP).toPlainString());

									} //

									strBuffer_tLogRow_3.append("|");

									if (row8.FILE_NBR != null) { //

										strBuffer_tLogRow_3.append(row8.FILE_NBR
												.setScale(0, java.math.RoundingMode.HALF_UP).toPlainString());

									} //

									strBuffer_tLogRow_3.append("|");

									if (row8.IND_SERVICE != null) { //

										strBuffer_tLogRow_3.append(row8.IND_SERVICE
												.setScale(0, java.math.RoundingMode.HALF_UP).toPlainString());

									} //

									strBuffer_tLogRow_3.append("|");

									if (row8.REPRESENTATIVE_TYPE != null) { //

										strBuffer_tLogRow_3.append(String.valueOf(row8.REPRESENTATIVE_TYPE));

									} //

									strBuffer_tLogRow_3.append("|");

									if (row8.AGENT_CODE != null) { //

										strBuffer_tLogRow_3.append(row8.AGENT_CODE
												.setScale(0, java.math.RoundingMode.HALF_UP).toPlainString());

									} //

									strBuffer_tLogRow_3.append("|");

									if (row8.PERSON_NAME != null) { //

										strBuffer_tLogRow_3.append(String.valueOf(row8.PERSON_NAME));

									} //

									strBuffer_tLogRow_3.append("|");

									if (row8.PERSON_NAME_LANG2 != null) { //

										strBuffer_tLogRow_3.append(String.valueOf(row8.PERSON_NAME_LANG2));

									} //

									strBuffer_tLogRow_3.append("|");

									if (row8.NATIONALITY_COUNTRY_CODE != null) { //

										strBuffer_tLogRow_3.append(String.valueOf(row8.NATIONALITY_COUNTRY_CODE));

									} //

									strBuffer_tLogRow_3.append("|");

									if (row8.IND_COMPANY != null) { //

										strBuffer_tLogRow_3.append(row8.IND_COMPANY
												.setScale(0, java.math.RoundingMode.HALF_UP).toPlainString());

									} //

									strBuffer_tLogRow_3.append("|");

									if (row8.LEGAL_NATURE != null) { //

										strBuffer_tLogRow_3.append(String.valueOf(row8.LEGAL_NATURE));

									} //

									strBuffer_tLogRow_3.append("|");

									if (row8.LEGAL_NATURE_LANG2 != null) { //

										strBuffer_tLogRow_3.append(String.valueOf(row8.LEGAL_NATURE_LANG2));

									} //

									strBuffer_tLogRow_3.append("|");

									if (row8.LEGAL_ID_TYPE != null) { //

										strBuffer_tLogRow_3.append(String.valueOf(row8.LEGAL_ID_TYPE));

									} //

									strBuffer_tLogRow_3.append("|");

									if (row8.LEGAL_ID_NBR != null) { //

										strBuffer_tLogRow_3.append(row8.LEGAL_ID_NBR
												.setScale(0, java.math.RoundingMode.HALF_UP).toPlainString());

									} //

									strBuffer_tLogRow_3.append("|");

									if (row8.INDIVIDUAL_ID_TYPE != null) { //

										strBuffer_tLogRow_3.append(String.valueOf(row8.INDIVIDUAL_ID_TYPE));

									} //

									strBuffer_tLogRow_3.append("|");

									if (row8.INDIVIDUAL_ID_NBR != null) { //

										strBuffer_tLogRow_3.append(row8.INDIVIDUAL_ID_NBR
												.setScale(0, java.math.RoundingMode.HALF_UP).toPlainString());

									} //

									strBuffer_tLogRow_3.append("|");

									if (row8.RESIDENCE_COUNTRY_CODE != null) { //

										strBuffer_tLogRow_3.append(String.valueOf(row8.RESIDENCE_COUNTRY_CODE));

									} //

									strBuffer_tLogRow_3.append("|");

									if (row8.STATE_NAME != null) { //

										strBuffer_tLogRow_3.append(String.valueOf(row8.STATE_NAME));

									} //

									strBuffer_tLogRow_3.append("|");

									if (row8.STATE_CODE != null) { //

										strBuffer_tLogRow_3.append(String.valueOf(row8.STATE_CODE));

									} //

									strBuffer_tLogRow_3.append("|");

									if (row8.CITY_NAME != null) { //

										strBuffer_tLogRow_3.append(String.valueOf(row8.CITY_NAME));

									} //

									strBuffer_tLogRow_3.append("|");

									if (row8.CITY_CODE != null) { //

										strBuffer_tLogRow_3.append(String.valueOf(row8.CITY_CODE));

									} //

									strBuffer_tLogRow_3.append("|");

									if (row8.ADDRESS_ZONE != null) { //

										strBuffer_tLogRow_3.append(String.valueOf(row8.ADDRESS_ZONE));

									} //

									strBuffer_tLogRow_3.append("|");

									if (row8.ADDRESS_STREET != null) { //

										strBuffer_tLogRow_3.append(String.valueOf(row8.ADDRESS_STREET));

									} //

									strBuffer_tLogRow_3.append("|");

									if (row8.ADDRESS_STREET_LANG2 != null) { //

										strBuffer_tLogRow_3.append(String.valueOf(row8.ADDRESS_STREET_LANG2));

									} //

									strBuffer_tLogRow_3.append("|");

									if (row8.ZIP_CODE != null) { //

										strBuffer_tLogRow_3.append(String.valueOf(row8.ZIP_CODE));

									} //

									strBuffer_tLogRow_3.append("|");

									if (row8.EMAIL != null) { //

										strBuffer_tLogRow_3.append(String.valueOf(row8.EMAIL));

									} //

									strBuffer_tLogRow_3.append("|");

									if (row8.TELEPHONE != null) { //

										strBuffer_tLogRow_3.append(String.valueOf(row8.TELEPHONE));

									} //

									strBuffer_tLogRow_3.append("|");

									if (row8.PERSON_GROUP_CODE != null) { //

										strBuffer_tLogRow_3.append(String.valueOf(row8.PERSON_GROUP_CODE));

									} //

									strBuffer_tLogRow_3.append("|");

									if (row8.PERSON_NBR != null) { //

										strBuffer_tLogRow_3.append(row8.PERSON_NBR
												.setScale(0, java.math.RoundingMode.HALF_UP).toPlainString());

									} //

									strBuffer_tLogRow_3.append("|");

									if (row8.ADDR_NBR != null) { //

										strBuffer_tLogRow_3.append(row8.ADDR_NBR
												.setScale(0, java.math.RoundingMode.HALF_UP).toPlainString());

									} //

									strBuffer_tLogRow_3.append("|");

									if (row8.errorCode != null) { //

										strBuffer_tLogRow_3.append(String.valueOf(row8.errorCode));

									} //

									strBuffer_tLogRow_3.append("|");

									if (row8.errorMessage != null) { //

										strBuffer_tLogRow_3.append(String.valueOf(row8.errorMessage));

									} //

									if (globalMap.get("tLogRow_CONSOLE") != null) {
										consoleOut_tLogRow_3 = (java.io.PrintStream) globalMap.get("tLogRow_CONSOLE");
									} else {
										consoleOut_tLogRow_3 = new java.io.PrintStream(
												new java.io.BufferedOutputStream(System.out));
										globalMap.put("tLogRow_CONSOLE", consoleOut_tLogRow_3);
									}
									consoleOut_tLogRow_3.println(strBuffer_tLogRow_3.toString());
									consoleOut_tLogRow_3.flush();
									nb_line_tLogRow_3++;
//////

//////                    

///////////////////////    			

									tos_count_tLogRow_3++;

									/**
									 * [tLogRow_3 main ] stop
									 */

									/**
									 * [tLogRow_3 process_data_begin ] start
									 */

									currentComponent = "tLogRow_3";

									/**
									 * [tLogRow_3 process_data_begin ] stop
									 */

									/**
									 * [tLogRow_3 process_data_end ] start
									 */

									currentComponent = "tLogRow_3";

									/**
									 * [tLogRow_3 process_data_end ] stop
									 */

								} // End of branch "row8"

								/**
								 * [tDBOutput_1 process_data_end ] start
								 */

								currentComponent = "tDBOutput_1";

								/**
								 * [tDBOutput_1 process_data_end ] stop
								 */

							} // End of branch "wrk_reprs"

						} // close loop of lookup 'row7' // G_TM_M_043

						/**
						 * [tMap_1 process_data_end ] start
						 */

						currentComponent = "tMap_1";

						/**
						 * [tMap_1 process_data_end ] stop
						 */

						/**
						 * [tDBInput_1 process_data_end ] start
						 */

						currentComponent = "tDBInput_1";

						/**
						 * [tDBInput_1 process_data_end ] stop
						 */

						/**
						 * [tDBInput_1 end ] start
						 */

						currentComponent = "tDBInput_1";

					}
				} finally {
					if (rs_tDBInput_1 != null) {
						rs_tDBInput_1.close();
					}
					if (stmt_tDBInput_1 != null) {
						stmt_tDBInput_1.close();
					}
					if (conn_tDBInput_1 != null && !conn_tDBInput_1.isClosed()) {

						conn_tDBInput_1.close();

						if ("com.mysql.cj.jdbc.Driver".equals((String) globalMap.get("driverClass_"))
								&& routines.system.BundleUtils.inOSGi()) {
							Class.forName("com.mysql.cj.jdbc.AbandonedConnectionCleanupThread")
									.getMethod("checkedShutdown").invoke(null, (Object[]) null);
						}

					}
				}
				globalMap.put("tDBInput_1_NB_LINE", nb_line_tDBInput_1);

				ok_Hash.put("tDBInput_1", true);
				end_Hash.put("tDBInput_1", System.currentTimeMillis());

				/**
				 * [tDBInput_1 end ] stop
				 */

				/**
				 * [tMap_1 end ] start
				 */

				currentComponent = "tMap_1";

// ###############################
// # Lookup hashes releasing
				if (tHash_Lookup_row7 != null) {
					tHash_Lookup_row7.endGet();
				}
				globalMap.remove("tHash_Lookup_row7");

// ###############################      

				if (execStat) {
					runStat.updateStat(resourceMap, iterateId, 2, 0, "row2");
				}

				ok_Hash.put("tMap_1", true);
				end_Hash.put("tMap_1", System.currentTimeMillis());

				/**
				 * [tMap_1 end ] stop
				 */

				/**
				 * [tDBOutput_1 end ] start
				 */

				currentComponent = "tDBOutput_1";

				if (pstmt_tDBOutput_1 != null) {

					pstmt_tDBOutput_1.close();
					resourceMap.remove("pstmt_tDBOutput_1");

				}
				resourceMap.put("statementClosed_tDBOutput_1", true);
				conn_tDBOutput_1.commit();

				conn_tDBOutput_1.close();
				resourceMap.put("finish_tDBOutput_1", true);

				nb_line_deleted_tDBOutput_1 = nb_line_deleted_tDBOutput_1 + deletedCount_tDBOutput_1;
				nb_line_update_tDBOutput_1 = nb_line_update_tDBOutput_1 + updatedCount_tDBOutput_1;
				nb_line_inserted_tDBOutput_1 = nb_line_inserted_tDBOutput_1 + insertedCount_tDBOutput_1;
				nb_line_rejected_tDBOutput_1 = nb_line_rejected_tDBOutput_1 + rejectedCount_tDBOutput_1;

				globalMap.put("tDBOutput_1_NB_LINE", nb_line_tDBOutput_1);
				globalMap.put("tDBOutput_1_NB_LINE_UPDATED", nb_line_update_tDBOutput_1);
				globalMap.put("tDBOutput_1_NB_LINE_INSERTED", nb_line_inserted_tDBOutput_1);
				globalMap.put("tDBOutput_1_NB_LINE_DELETED", nb_line_deleted_tDBOutput_1);
				globalMap.put("tDBOutput_1_NB_LINE_REJECTED", nb_line_rejected_tDBOutput_1);

				if (execStat) {
					runStat.updateStat(resourceMap, iterateId, 2, 0, "wrk_reprs");
				}

				ok_Hash.put("tDBOutput_1", true);
				end_Hash.put("tDBOutput_1", System.currentTimeMillis());

				/**
				 * [tDBOutput_1 end ] stop
				 */

				/**
				 * [tLogRow_3 end ] start
				 */

				currentComponent = "tLogRow_3";

//////
//////
				globalMap.put("tLogRow_3_NB_LINE", nb_line_tLogRow_3);

///////////////////////    			

				if (execStat) {
					runStat.updateStat(resourceMap, iterateId, 2, 0, "row8");
				}

				ok_Hash.put("tLogRow_3", true);
				end_Hash.put("tLogRow_3", System.currentTimeMillis());

				/**
				 * [tLogRow_3 end ] stop
				 */

			} // end the resume

			if (resumeEntryMethodName == null || globalResumeTicket) {
				resumeUtil.addLog("CHECKPOINT", "CONNECTION:SUBJOB_OK:tDBInput_1:OnSubjobOk", "",
						Thread.currentThread().getId() + "", "", "", "", "", "");
			}

			if (execStat) {
				runStat.updateStatOnConnection("OnSubjobOk8", 0, "ok");
			}

			tDBInput_5Process(globalMap);

		} catch (java.lang.Exception e) {

			TalendException te = new TalendException(e, currentComponent, globalMap);

			throw te;
		} catch (java.lang.Error error) {

			runStat.stopThreadStat();

			throw error;
		} finally {

			// free memory for "tMap_1"
			globalMap.remove("tHash_Lookup_row7");

			try {

				/**
				 * [tDBInput_1 finally ] start
				 */

				currentComponent = "tDBInput_1";

				/**
				 * [tDBInput_1 finally ] stop
				 */

				/**
				 * [tMap_1 finally ] start
				 */

				currentComponent = "tMap_1";

				/**
				 * [tMap_1 finally ] stop
				 */

				/**
				 * [tDBOutput_1 finally ] start
				 */

				currentComponent = "tDBOutput_1";

				try {
					if (resourceMap.get("statementClosed_tDBOutput_1") == null) {
						java.sql.PreparedStatement pstmtToClose_tDBOutput_1 = null;
						if ((pstmtToClose_tDBOutput_1 = (java.sql.PreparedStatement) resourceMap
								.remove("pstmt_tDBOutput_1")) != null) {
							pstmtToClose_tDBOutput_1.close();
						}
					}
				} finally {
					if (resourceMap.get("finish_tDBOutput_1") == null) {
						java.sql.Connection ctn_tDBOutput_1 = null;
						if ((ctn_tDBOutput_1 = (java.sql.Connection) resourceMap.get("conn_tDBOutput_1")) != null) {
							try {
								ctn_tDBOutput_1.close();
							} catch (java.sql.SQLException sqlEx_tDBOutput_1) {
								String errorMessage_tDBOutput_1 = "failed to close the connection in tDBOutput_1 :"
										+ sqlEx_tDBOutput_1.getMessage();
								System.err.println(errorMessage_tDBOutput_1);
							}
						}
					}
				}

				/**
				 * [tDBOutput_1 finally ] stop
				 */

				/**
				 * [tLogRow_3 finally ] start
				 */

				currentComponent = "tLogRow_3";

				/**
				 * [tLogRow_3 finally ] stop
				 */

			} catch (java.lang.Exception e) {
				// ignore
			} catch (java.lang.Error error) {
				// ignore
			}
			resourceMap = null;
		}

		globalMap.put("tDBInput_1_SUBPROCESS_STATE", 1);
	}

	public static class row11Struct implements routines.system.IPersistableRow<row11Struct> {
		final static byte[] commonByteArrayLock_WIPO_PROJECTS_G2b_Mig_TM = new byte[0];
		static byte[] commonByteArray_WIPO_PROJECTS_G2b_Mig_TM = new byte[0];

		public String FILE_SEQ;

		public String getFILE_SEQ() {
			return this.FILE_SEQ;
		}

		public String FILE_TYPE;

		public String getFILE_TYPE() {
			return this.FILE_TYPE;
		}

		public BigDecimal FILE_SERIES;

		public BigDecimal getFILE_SERIES() {
			return this.FILE_SERIES;
		}

		public BigDecimal FILE_NBR;

		public BigDecimal getFILE_NBR() {
			return this.FILE_NBR;
		}

		public String COUNTRY_CODE;

		public String getCOUNTRY_CODE() {
			return this.COUNTRY_CODE;
		}

		public String APPLICATION_ID;

		public String getAPPLICATION_ID() {
			return this.APPLICATION_ID;
		}

		public java.util.Date PRIORITY_DATE;

		public java.util.Date getPRIORITY_DATE() {
			return this.PRIORITY_DATE;
		}

		public String NOTES;

		public String getNOTES() {
			return this.NOTES;
		}

		public BigDecimal IND_ACCEPTED;

		public BigDecimal getIND_ACCEPTED() {
			return this.IND_ACCEPTED;
		}

		public BigDecimal PRIORITY_APPL_ID_ALT;

		public BigDecimal getPRIORITY_APPL_ID_ALT() {
			return this.PRIORITY_APPL_ID_ALT;
		}

		public String errorCode;

		public String getErrorCode() {
			return this.errorCode;
		}

		public String errorMessage;

		public String getErrorMessage() {
			return this.errorMessage;
		}

		private String readString(ObjectInputStream dis) throws IOException {
			String strReturn = null;
			int length = 0;
			length = dis.readInt();
			if (length == -1) {
				strReturn = null;
			} else {
				if (length > commonByteArray_WIPO_PROJECTS_G2b_Mig_TM.length) {
					if (length < 1024 && commonByteArray_WIPO_PROJECTS_G2b_Mig_TM.length == 0) {
						commonByteArray_WIPO_PROJECTS_G2b_Mig_TM = new byte[1024];
					} else {
						commonByteArray_WIPO_PROJECTS_G2b_Mig_TM = new byte[2 * length];
					}
				}
				dis.readFully(commonByteArray_WIPO_PROJECTS_G2b_Mig_TM, 0, length);
				strReturn = new String(commonByteArray_WIPO_PROJECTS_G2b_Mig_TM, 0, length, utf8Charset);
			}
			return strReturn;
		}

		private void writeString(String str, ObjectOutputStream dos) throws IOException {
			if (str == null) {
				dos.writeInt(-1);
			} else {
				byte[] byteArray = str.getBytes(utf8Charset);
				dos.writeInt(byteArray.length);
				dos.write(byteArray);
			}
		}

		private java.util.Date readDate(ObjectInputStream dis) throws IOException {
			java.util.Date dateReturn = null;
			int length = 0;
			length = dis.readByte();
			if (length == -1) {
				dateReturn = null;
			} else {
				dateReturn = new Date(dis.readLong());
			}
			return dateReturn;
		}

		private void writeDate(java.util.Date date1, ObjectOutputStream dos) throws IOException {
			if (date1 == null) {
				dos.writeByte(-1);
			} else {
				dos.writeByte(0);
				dos.writeLong(date1.getTime());
			}
		}

		public void readData(ObjectInputStream dis) {

			synchronized (commonByteArrayLock_WIPO_PROJECTS_G2b_Mig_TM) {

				try {

					int length = 0;

					this.FILE_SEQ = readString(dis);

					this.FILE_TYPE = readString(dis);

					this.FILE_SERIES = (BigDecimal) dis.readObject();

					this.FILE_NBR = (BigDecimal) dis.readObject();

					this.COUNTRY_CODE = readString(dis);

					this.APPLICATION_ID = readString(dis);

					this.PRIORITY_DATE = readDate(dis);

					this.NOTES = readString(dis);

					this.IND_ACCEPTED = (BigDecimal) dis.readObject();

					this.PRIORITY_APPL_ID_ALT = (BigDecimal) dis.readObject();

					this.errorCode = readString(dis);

					this.errorMessage = readString(dis);

				} catch (IOException e) {
					throw new RuntimeException(e);

				} catch (ClassNotFoundException eCNFE) {
					throw new RuntimeException(eCNFE);

				}

			}

		}

		public void writeData(ObjectOutputStream dos) {
			try {

				// String

				writeString(this.FILE_SEQ, dos);

				// String

				writeString(this.FILE_TYPE, dos);

				// BigDecimal

				dos.writeObject(this.FILE_SERIES);

				// BigDecimal

				dos.writeObject(this.FILE_NBR);

				// String

				writeString(this.COUNTRY_CODE, dos);

				// String

				writeString(this.APPLICATION_ID, dos);

				// java.util.Date

				writeDate(this.PRIORITY_DATE, dos);

				// String

				writeString(this.NOTES, dos);

				// BigDecimal

				dos.writeObject(this.IND_ACCEPTED);

				// BigDecimal

				dos.writeObject(this.PRIORITY_APPL_ID_ALT);

				// String

				writeString(this.errorCode, dos);

				// String

				writeString(this.errorMessage, dos);

			} catch (IOException e) {
				throw new RuntimeException(e);
			}

		}

		public String toString() {

			StringBuilder sb = new StringBuilder();
			sb.append(super.toString());
			sb.append("[");
			sb.append("FILE_SEQ=" + FILE_SEQ);
			sb.append(",FILE_TYPE=" + FILE_TYPE);
			sb.append(",FILE_SERIES=" + String.valueOf(FILE_SERIES));
			sb.append(",FILE_NBR=" + String.valueOf(FILE_NBR));
			sb.append(",COUNTRY_CODE=" + COUNTRY_CODE);
			sb.append(",APPLICATION_ID=" + APPLICATION_ID);
			sb.append(",PRIORITY_DATE=" + String.valueOf(PRIORITY_DATE));
			sb.append(",NOTES=" + NOTES);
			sb.append(",IND_ACCEPTED=" + String.valueOf(IND_ACCEPTED));
			sb.append(",PRIORITY_APPL_ID_ALT=" + String.valueOf(PRIORITY_APPL_ID_ALT));
			sb.append(",errorCode=" + errorCode);
			sb.append(",errorMessage=" + errorMessage);
			sb.append("]");

			return sb.toString();
		}

		/**
		 * Compare keys
		 */
		public int compareTo(row11Struct other) {

			int returnValue = -1;

			return returnValue;
		}

		private int checkNullsAndCompare(Object object1, Object object2) {
			int returnValue = 0;
			if (object1 instanceof Comparable && object2 instanceof Comparable) {
				returnValue = ((Comparable) object1).compareTo(object2);
			} else if (object1 != null && object2 != null) {
				returnValue = compareStrings(object1.toString(), object2.toString());
			} else if (object1 == null && object2 != null) {
				returnValue = 1;
			} else if (object1 != null && object2 == null) {
				returnValue = -1;
			} else {
				returnValue = 0;
			}

			return returnValue;
		}

		private int compareStrings(String string1, String string2) {
			return string1.compareTo(string2);
		}

	}

	public static class wrk_mark_prioStruct implements routines.system.IPersistableRow<wrk_mark_prioStruct> {
		final static byte[] commonByteArrayLock_WIPO_PROJECTS_G2b_Mig_TM = new byte[0];
		static byte[] commonByteArray_WIPO_PROJECTS_G2b_Mig_TM = new byte[0];

		public String FILE_SEQ;

		public String getFILE_SEQ() {
			return this.FILE_SEQ;
		}

		public String FILE_TYPE;

		public String getFILE_TYPE() {
			return this.FILE_TYPE;
		}

		public BigDecimal FILE_SERIES;

		public BigDecimal getFILE_SERIES() {
			return this.FILE_SERIES;
		}

		public BigDecimal FILE_NBR;

		public BigDecimal getFILE_NBR() {
			return this.FILE_NBR;
		}

		public String COUNTRY_CODE;

		public String getCOUNTRY_CODE() {
			return this.COUNTRY_CODE;
		}

		public String APPLICATION_ID;

		public String getAPPLICATION_ID() {
			return this.APPLICATION_ID;
		}

		public java.util.Date PRIORITY_DATE;

		public java.util.Date getPRIORITY_DATE() {
			return this.PRIORITY_DATE;
		}

		public String NOTES;

		public String getNOTES() {
			return this.NOTES;
		}

		public BigDecimal IND_ACCEPTED;

		public BigDecimal getIND_ACCEPTED() {
			return this.IND_ACCEPTED;
		}

		public BigDecimal PRIORITY_APPL_ID_ALT;

		public BigDecimal getPRIORITY_APPL_ID_ALT() {
			return this.PRIORITY_APPL_ID_ALT;
		}

		private String readString(ObjectInputStream dis) throws IOException {
			String strReturn = null;
			int length = 0;
			length = dis.readInt();
			if (length == -1) {
				strReturn = null;
			} else {
				if (length > commonByteArray_WIPO_PROJECTS_G2b_Mig_TM.length) {
					if (length < 1024 && commonByteArray_WIPO_PROJECTS_G2b_Mig_TM.length == 0) {
						commonByteArray_WIPO_PROJECTS_G2b_Mig_TM = new byte[1024];
					} else {
						commonByteArray_WIPO_PROJECTS_G2b_Mig_TM = new byte[2 * length];
					}
				}
				dis.readFully(commonByteArray_WIPO_PROJECTS_G2b_Mig_TM, 0, length);
				strReturn = new String(commonByteArray_WIPO_PROJECTS_G2b_Mig_TM, 0, length, utf8Charset);
			}
			return strReturn;
		}

		private void writeString(String str, ObjectOutputStream dos) throws IOException {
			if (str == null) {
				dos.writeInt(-1);
			} else {
				byte[] byteArray = str.getBytes(utf8Charset);
				dos.writeInt(byteArray.length);
				dos.write(byteArray);
			}
		}

		private java.util.Date readDate(ObjectInputStream dis) throws IOException {
			java.util.Date dateReturn = null;
			int length = 0;
			length = dis.readByte();
			if (length == -1) {
				dateReturn = null;
			} else {
				dateReturn = new Date(dis.readLong());
			}
			return dateReturn;
		}

		private void writeDate(java.util.Date date1, ObjectOutputStream dos) throws IOException {
			if (date1 == null) {
				dos.writeByte(-1);
			} else {
				dos.writeByte(0);
				dos.writeLong(date1.getTime());
			}
		}

		public void readData(ObjectInputStream dis) {

			synchronized (commonByteArrayLock_WIPO_PROJECTS_G2b_Mig_TM) {

				try {

					int length = 0;

					this.FILE_SEQ = readString(dis);

					this.FILE_TYPE = readString(dis);

					this.FILE_SERIES = (BigDecimal) dis.readObject();

					this.FILE_NBR = (BigDecimal) dis.readObject();

					this.COUNTRY_CODE = readString(dis);

					this.APPLICATION_ID = readString(dis);

					this.PRIORITY_DATE = readDate(dis);

					this.NOTES = readString(dis);

					this.IND_ACCEPTED = (BigDecimal) dis.readObject();

					this.PRIORITY_APPL_ID_ALT = (BigDecimal) dis.readObject();

				} catch (IOException e) {
					throw new RuntimeException(e);

				} catch (ClassNotFoundException eCNFE) {
					throw new RuntimeException(eCNFE);

				}

			}

		}

		public void writeData(ObjectOutputStream dos) {
			try {

				// String

				writeString(this.FILE_SEQ, dos);

				// String

				writeString(this.FILE_TYPE, dos);

				// BigDecimal

				dos.writeObject(this.FILE_SERIES);

				// BigDecimal

				dos.writeObject(this.FILE_NBR);

				// String

				writeString(this.COUNTRY_CODE, dos);

				// String

				writeString(this.APPLICATION_ID, dos);

				// java.util.Date

				writeDate(this.PRIORITY_DATE, dos);

				// String

				writeString(this.NOTES, dos);

				// BigDecimal

				dos.writeObject(this.IND_ACCEPTED);

				// BigDecimal

				dos.writeObject(this.PRIORITY_APPL_ID_ALT);

			} catch (IOException e) {
				throw new RuntimeException(e);
			}

		}

		public String toString() {

			StringBuilder sb = new StringBuilder();
			sb.append(super.toString());
			sb.append("[");
			sb.append("FILE_SEQ=" + FILE_SEQ);
			sb.append(",FILE_TYPE=" + FILE_TYPE);
			sb.append(",FILE_SERIES=" + String.valueOf(FILE_SERIES));
			sb.append(",FILE_NBR=" + String.valueOf(FILE_NBR));
			sb.append(",COUNTRY_CODE=" + COUNTRY_CODE);
			sb.append(",APPLICATION_ID=" + APPLICATION_ID);
			sb.append(",PRIORITY_DATE=" + String.valueOf(PRIORITY_DATE));
			sb.append(",NOTES=" + NOTES);
			sb.append(",IND_ACCEPTED=" + String.valueOf(IND_ACCEPTED));
			sb.append(",PRIORITY_APPL_ID_ALT=" + String.valueOf(PRIORITY_APPL_ID_ALT));
			sb.append("]");

			return sb.toString();
		}

		/**
		 * Compare keys
		 */
		public int compareTo(wrk_mark_prioStruct other) {

			int returnValue = -1;

			return returnValue;
		}

		private int checkNullsAndCompare(Object object1, Object object2) {
			int returnValue = 0;
			if (object1 instanceof Comparable && object2 instanceof Comparable) {
				returnValue = ((Comparable) object1).compareTo(object2);
			} else if (object1 != null && object2 != null) {
				returnValue = compareStrings(object1.toString(), object2.toString());
			} else if (object1 == null && object2 != null) {
				returnValue = 1;
			} else if (object1 != null && object2 == null) {
				returnValue = -1;
			} else {
				returnValue = 0;
			}

			return returnValue;
		}

		private int compareStrings(String string1, String string2) {
			return string1.compareTo(string2);
		}

	}

	public static class row9Struct implements routines.system.IPersistableRow<row9Struct> {
		final static byte[] commonByteArrayLock_WIPO_PROJECTS_G2b_Mig_TM = new byte[0];
		static byte[] commonByteArray_WIPO_PROJECTS_G2b_Mig_TM = new byte[0];

		public String FILE_SEQ;

		public String getFILE_SEQ() {
			return this.FILE_SEQ;
		}

		public String FILE_TYPE;

		public String getFILE_TYPE() {
			return this.FILE_TYPE;
		}

		public BigDecimal FILE_SERIES;

		public BigDecimal getFILE_SERIES() {
			return this.FILE_SERIES;
		}

		public BigDecimal FILE_NBR;

		public BigDecimal getFILE_NBR() {
			return this.FILE_NBR;
		}

		public String COUNTRY_CODE;

		public String getCOUNTRY_CODE() {
			return this.COUNTRY_CODE;
		}

		public String APPLICATION_ID;

		public String getAPPLICATION_ID() {
			return this.APPLICATION_ID;
		}

		public java.util.Date PRIORITY_DATE;

		public java.util.Date getPRIORITY_DATE() {
			return this.PRIORITY_DATE;
		}

		public String NOTES;

		public String getNOTES() {
			return this.NOTES;
		}

		public BigDecimal IND_ACCEPTED;

		public BigDecimal getIND_ACCEPTED() {
			return this.IND_ACCEPTED;
		}

		private String readString(ObjectInputStream dis) throws IOException {
			String strReturn = null;
			int length = 0;
			length = dis.readInt();
			if (length == -1) {
				strReturn = null;
			} else {
				if (length > commonByteArray_WIPO_PROJECTS_G2b_Mig_TM.length) {
					if (length < 1024 && commonByteArray_WIPO_PROJECTS_G2b_Mig_TM.length == 0) {
						commonByteArray_WIPO_PROJECTS_G2b_Mig_TM = new byte[1024];
					} else {
						commonByteArray_WIPO_PROJECTS_G2b_Mig_TM = new byte[2 * length];
					}
				}
				dis.readFully(commonByteArray_WIPO_PROJECTS_G2b_Mig_TM, 0, length);
				strReturn = new String(commonByteArray_WIPO_PROJECTS_G2b_Mig_TM, 0, length, utf8Charset);
			}
			return strReturn;
		}

		private void writeString(String str, ObjectOutputStream dos) throws IOException {
			if (str == null) {
				dos.writeInt(-1);
			} else {
				byte[] byteArray = str.getBytes(utf8Charset);
				dos.writeInt(byteArray.length);
				dos.write(byteArray);
			}
		}

		private java.util.Date readDate(ObjectInputStream dis) throws IOException {
			java.util.Date dateReturn = null;
			int length = 0;
			length = dis.readByte();
			if (length == -1) {
				dateReturn = null;
			} else {
				dateReturn = new Date(dis.readLong());
			}
			return dateReturn;
		}

		private void writeDate(java.util.Date date1, ObjectOutputStream dos) throws IOException {
			if (date1 == null) {
				dos.writeByte(-1);
			} else {
				dos.writeByte(0);
				dos.writeLong(date1.getTime());
			}
		}

		public void readData(ObjectInputStream dis) {

			synchronized (commonByteArrayLock_WIPO_PROJECTS_G2b_Mig_TM) {

				try {

					int length = 0;

					this.FILE_SEQ = readString(dis);

					this.FILE_TYPE = readString(dis);

					this.FILE_SERIES = (BigDecimal) dis.readObject();

					this.FILE_NBR = (BigDecimal) dis.readObject();

					this.COUNTRY_CODE = readString(dis);

					this.APPLICATION_ID = readString(dis);

					this.PRIORITY_DATE = readDate(dis);

					this.NOTES = readString(dis);

					this.IND_ACCEPTED = (BigDecimal) dis.readObject();

				} catch (IOException e) {
					throw new RuntimeException(e);

				} catch (ClassNotFoundException eCNFE) {
					throw new RuntimeException(eCNFE);

				}

			}

		}

		public void writeData(ObjectOutputStream dos) {
			try {

				// String

				writeString(this.FILE_SEQ, dos);

				// String

				writeString(this.FILE_TYPE, dos);

				// BigDecimal

				dos.writeObject(this.FILE_SERIES);

				// BigDecimal

				dos.writeObject(this.FILE_NBR);

				// String

				writeString(this.COUNTRY_CODE, dos);

				// String

				writeString(this.APPLICATION_ID, dos);

				// java.util.Date

				writeDate(this.PRIORITY_DATE, dos);

				// String

				writeString(this.NOTES, dos);

				// BigDecimal

				dos.writeObject(this.IND_ACCEPTED);

			} catch (IOException e) {
				throw new RuntimeException(e);
			}

		}

		public String toString() {

			StringBuilder sb = new StringBuilder();
			sb.append(super.toString());
			sb.append("[");
			sb.append("FILE_SEQ=" + FILE_SEQ);
			sb.append(",FILE_TYPE=" + FILE_TYPE);
			sb.append(",FILE_SERIES=" + String.valueOf(FILE_SERIES));
			sb.append(",FILE_NBR=" + String.valueOf(FILE_NBR));
			sb.append(",COUNTRY_CODE=" + COUNTRY_CODE);
			sb.append(",APPLICATION_ID=" + APPLICATION_ID);
			sb.append(",PRIORITY_DATE=" + String.valueOf(PRIORITY_DATE));
			sb.append(",NOTES=" + NOTES);
			sb.append(",IND_ACCEPTED=" + String.valueOf(IND_ACCEPTED));
			sb.append("]");

			return sb.toString();
		}

		/**
		 * Compare keys
		 */
		public int compareTo(row9Struct other) {

			int returnValue = -1;

			return returnValue;
		}

		private int checkNullsAndCompare(Object object1, Object object2) {
			int returnValue = 0;
			if (object1 instanceof Comparable && object2 instanceof Comparable) {
				returnValue = ((Comparable) object1).compareTo(object2);
			} else if (object1 != null && object2 != null) {
				returnValue = compareStrings(object1.toString(), object2.toString());
			} else if (object1 == null && object2 != null) {
				returnValue = 1;
			} else if (object1 != null && object2 == null) {
				returnValue = -1;
			} else {
				returnValue = 0;
			}

			return returnValue;
		}

		private int compareStrings(String string1, String string2) {
			return string1.compareTo(string2);
		}

	}

	public static class after_tDBInput_5Struct implements routines.system.IPersistableRow<after_tDBInput_5Struct> {
		final static byte[] commonByteArrayLock_WIPO_PROJECTS_G2b_Mig_TM = new byte[0];
		static byte[] commonByteArray_WIPO_PROJECTS_G2b_Mig_TM = new byte[0];

		public String FILE_SEQ;

		public String getFILE_SEQ() {
			return this.FILE_SEQ;
		}

		public String FILE_TYPE;

		public String getFILE_TYPE() {
			return this.FILE_TYPE;
		}

		public BigDecimal FILE_SERIES;

		public BigDecimal getFILE_SERIES() {
			return this.FILE_SERIES;
		}

		public BigDecimal FILE_NBR;

		public BigDecimal getFILE_NBR() {
			return this.FILE_NBR;
		}

		public String COUNTRY_CODE;

		public String getCOUNTRY_CODE() {
			return this.COUNTRY_CODE;
		}

		public String APPLICATION_ID;

		public String getAPPLICATION_ID() {
			return this.APPLICATION_ID;
		}

		public java.util.Date PRIORITY_DATE;

		public java.util.Date getPRIORITY_DATE() {
			return this.PRIORITY_DATE;
		}

		public String NOTES;

		public String getNOTES() {
			return this.NOTES;
		}

		public BigDecimal IND_ACCEPTED;

		public BigDecimal getIND_ACCEPTED() {
			return this.IND_ACCEPTED;
		}

		private String readString(ObjectInputStream dis) throws IOException {
			String strReturn = null;
			int length = 0;
			length = dis.readInt();
			if (length == -1) {
				strReturn = null;
			} else {
				if (length > commonByteArray_WIPO_PROJECTS_G2b_Mig_TM.length) {
					if (length < 1024 && commonByteArray_WIPO_PROJECTS_G2b_Mig_TM.length == 0) {
						commonByteArray_WIPO_PROJECTS_G2b_Mig_TM = new byte[1024];
					} else {
						commonByteArray_WIPO_PROJECTS_G2b_Mig_TM = new byte[2 * length];
					}
				}
				dis.readFully(commonByteArray_WIPO_PROJECTS_G2b_Mig_TM, 0, length);
				strReturn = new String(commonByteArray_WIPO_PROJECTS_G2b_Mig_TM, 0, length, utf8Charset);
			}
			return strReturn;
		}

		private void writeString(String str, ObjectOutputStream dos) throws IOException {
			if (str == null) {
				dos.writeInt(-1);
			} else {
				byte[] byteArray = str.getBytes(utf8Charset);
				dos.writeInt(byteArray.length);
				dos.write(byteArray);
			}
		}

		private java.util.Date readDate(ObjectInputStream dis) throws IOException {
			java.util.Date dateReturn = null;
			int length = 0;
			length = dis.readByte();
			if (length == -1) {
				dateReturn = null;
			} else {
				dateReturn = new Date(dis.readLong());
			}
			return dateReturn;
		}

		private void writeDate(java.util.Date date1, ObjectOutputStream dos) throws IOException {
			if (date1 == null) {
				dos.writeByte(-1);
			} else {
				dos.writeByte(0);
				dos.writeLong(date1.getTime());
			}
		}

		public void readData(ObjectInputStream dis) {

			synchronized (commonByteArrayLock_WIPO_PROJECTS_G2b_Mig_TM) {

				try {

					int length = 0;

					this.FILE_SEQ = readString(dis);

					this.FILE_TYPE = readString(dis);

					this.FILE_SERIES = (BigDecimal) dis.readObject();

					this.FILE_NBR = (BigDecimal) dis.readObject();

					this.COUNTRY_CODE = readString(dis);

					this.APPLICATION_ID = readString(dis);

					this.PRIORITY_DATE = readDate(dis);

					this.NOTES = readString(dis);

					this.IND_ACCEPTED = (BigDecimal) dis.readObject();

				} catch (IOException e) {
					throw new RuntimeException(e);

				} catch (ClassNotFoundException eCNFE) {
					throw new RuntimeException(eCNFE);

				}

			}

		}

		public void writeData(ObjectOutputStream dos) {
			try {

				// String

				writeString(this.FILE_SEQ, dos);

				// String

				writeString(this.FILE_TYPE, dos);

				// BigDecimal

				dos.writeObject(this.FILE_SERIES);

				// BigDecimal

				dos.writeObject(this.FILE_NBR);

				// String

				writeString(this.COUNTRY_CODE, dos);

				// String

				writeString(this.APPLICATION_ID, dos);

				// java.util.Date

				writeDate(this.PRIORITY_DATE, dos);

				// String

				writeString(this.NOTES, dos);

				// BigDecimal

				dos.writeObject(this.IND_ACCEPTED);

			} catch (IOException e) {
				throw new RuntimeException(e);
			}

		}

		public String toString() {

			StringBuilder sb = new StringBuilder();
			sb.append(super.toString());
			sb.append("[");
			sb.append("FILE_SEQ=" + FILE_SEQ);
			sb.append(",FILE_TYPE=" + FILE_TYPE);
			sb.append(",FILE_SERIES=" + String.valueOf(FILE_SERIES));
			sb.append(",FILE_NBR=" + String.valueOf(FILE_NBR));
			sb.append(",COUNTRY_CODE=" + COUNTRY_CODE);
			sb.append(",APPLICATION_ID=" + APPLICATION_ID);
			sb.append(",PRIORITY_DATE=" + String.valueOf(PRIORITY_DATE));
			sb.append(",NOTES=" + NOTES);
			sb.append(",IND_ACCEPTED=" + String.valueOf(IND_ACCEPTED));
			sb.append("]");

			return sb.toString();
		}

		/**
		 * Compare keys
		 */
		public int compareTo(after_tDBInput_5Struct other) {

			int returnValue = -1;

			return returnValue;
		}

		private int checkNullsAndCompare(Object object1, Object object2) {
			int returnValue = 0;
			if (object1 instanceof Comparable && object2 instanceof Comparable) {
				returnValue = ((Comparable) object1).compareTo(object2);
			} else if (object1 != null && object2 != null) {
				returnValue = compareStrings(object1.toString(), object2.toString());
			} else if (object1 == null && object2 != null) {
				returnValue = 1;
			} else if (object1 != null && object2 == null) {
				returnValue = -1;
			} else {
				returnValue = 0;
			}

			return returnValue;
		}

		private int compareStrings(String string1, String string2) {
			return string1.compareTo(string2);
		}

	}

	public void tDBInput_5Process(final java.util.Map<String, Object> globalMap) throws TalendException {
		globalMap.put("tDBInput_5_SUBPROCESS_STATE", 0);

		final boolean execStat = this.execStat;

		String iterateId = "";

		String currentComponent = "";
		java.util.Map<String, Object> resourceMap = new java.util.HashMap<String, Object>();

		try {
			// TDI-39566 avoid throwing an useless Exception
			boolean resumeIt = true;
			if (globalResumeTicket == false && resumeEntryMethodName != null) {
				String currentMethodName = new java.lang.Exception().getStackTrace()[0].getMethodName();
				resumeIt = resumeEntryMethodName.equals(currentMethodName);
			}
			if (resumeIt || globalResumeTicket) { // start the resume
				globalResumeTicket = true;

				tDBInput_4Process(globalMap);

				row9Struct row9 = new row9Struct();
				wrk_mark_prioStruct wrk_mark_prio = new wrk_mark_prioStruct();
				row11Struct row11 = new row11Struct();

				/**
				 * [tLogRow_4 begin ] start
				 */

				ok_Hash.put("tLogRow_4", false);
				start_Hash.put("tLogRow_4", System.currentTimeMillis());

				currentComponent = "tLogRow_4";

				if (execStat) {
					runStat.updateStatOnConnection(resourceMap, iterateId, 0, 0, "row11");
				}

				int tos_count_tLogRow_4 = 0;

				///////////////////////

				final String OUTPUT_FIELD_SEPARATOR_tLogRow_4 = "|";
				java.io.PrintStream consoleOut_tLogRow_4 = null;

				StringBuilder strBuffer_tLogRow_4 = null;
				int nb_line_tLogRow_4 = 0;
///////////////////////    			

				/**
				 * [tLogRow_4 begin ] stop
				 */

				/**
				 * [tDBOutput_4 begin ] start
				 */

				ok_Hash.put("tDBOutput_4", false);
				start_Hash.put("tDBOutput_4", System.currentTimeMillis());

				currentComponent = "tDBOutput_4";

				if (execStat) {
					runStat.updateStatOnConnection(resourceMap, iterateId, 0, 0, "wrk_mark_prio");
				}

				int tos_count_tDBOutput_4 = 0;

				int nb_line_tDBOutput_4 = 0;
				int nb_line_update_tDBOutput_4 = 0;
				int nb_line_inserted_tDBOutput_4 = 0;
				int nb_line_deleted_tDBOutput_4 = 0;
				int nb_line_rejected_tDBOutput_4 = 0;

				int deletedCount_tDBOutput_4 = 0;
				int updatedCount_tDBOutput_4 = 0;
				int insertedCount_tDBOutput_4 = 0;
				int rejectedCount_tDBOutput_4 = 0;
				String dbschema_tDBOutput_4 = null;
				String tableName_tDBOutput_4 = null;
				boolean whetherReject_tDBOutput_4 = false;

				java.util.Calendar calendar_tDBOutput_4 = java.util.Calendar.getInstance();
				long year1_tDBOutput_4 = TalendDate.parseDate("yyyy-MM-dd", "0001-01-01").getTime();
				long year2_tDBOutput_4 = TalendDate.parseDate("yyyy-MM-dd", "1753-01-01").getTime();
				long year10000_tDBOutput_4 = TalendDate.parseDate("yyyy-MM-dd HH:mm:ss", "9999-12-31 24:00:00")
						.getTime();
				long date_tDBOutput_4;

				java.util.Calendar calendar_datetimeoffset_tDBOutput_4 = java.util.Calendar
						.getInstance(java.util.TimeZone.getTimeZone("UTC"));

				java.sql.Connection conn_tDBOutput_4 = null;
				String dbUser_tDBOutput_4 = null;
				dbschema_tDBOutput_4 = "ADMIN";
				String driverClass_tDBOutput_4 = "net.sourceforge.jtds.jdbc.Driver";

				java.lang.Class.forName(driverClass_tDBOutput_4);
				String port_tDBOutput_4 = "1433";
				String dbname_tDBOutput_4 = "MARCAS_PY";
				String url_tDBOutput_4 = "jdbc:jtds:sqlserver://" + "localhost";
				if (!"".equals(port_tDBOutput_4)) {
					url_tDBOutput_4 += ":" + "1433";
				}
				if (!"".equals(dbname_tDBOutput_4)) {
					url_tDBOutput_4 += "//" + "MARCAS_PY";

				}
				url_tDBOutput_4 += ";appName=" + projectName + ";" + "";
				dbUser_tDBOutput_4 = "ADMIN";

				final String decryptedPassword_tDBOutput_4 = routines.system.PasswordEncryptUtil
						.decryptPassword("enc:routine.encryption.key.v1:ZIpTEZx00YftcXT7suhZzPf/AV7w0jObx7z17UUqWbKv");

				String dbPwd_tDBOutput_4 = decryptedPassword_tDBOutput_4;
				conn_tDBOutput_4 = java.sql.DriverManager.getConnection(url_tDBOutput_4, dbUser_tDBOutput_4,
						dbPwd_tDBOutput_4);

				resourceMap.put("conn_tDBOutput_4", conn_tDBOutput_4);

				conn_tDBOutput_4.setAutoCommit(false);
				int commitEvery_tDBOutput_4 = 10000;
				int commitCounter_tDBOutput_4 = 0;

				if (dbschema_tDBOutput_4 == null || dbschema_tDBOutput_4.trim().length() == 0) {
					tableName_tDBOutput_4 = "WRK_MARK_PRIORITIES";
				} else {
					tableName_tDBOutput_4 = dbschema_tDBOutput_4 + "].[" + "WRK_MARK_PRIORITIES";
				}
				int count_tDBOutput_4 = 0;

				String insert_tDBOutput_4 = "INSERT INTO [" + tableName_tDBOutput_4
						+ "] ([FILE_SEQ],[FILE_TYPE],[FILE_SERIES],[FILE_NBR],[COUNTRY_CODE],[APPLICATION_ID],[PRIORITY_DATE],[NOTES],[IND_ACCEPTED],[PRIORITY_APPL_ID_ALT]) VALUES (?,?,?,?,?,?,?,?,?,?)";
				java.sql.PreparedStatement pstmt_tDBOutput_4 = conn_tDBOutput_4.prepareStatement(insert_tDBOutput_4);
				resourceMap.put("pstmt_tDBOutput_4", pstmt_tDBOutput_4);

				/**
				 * [tDBOutput_4 begin ] stop
				 */

				/**
				 * [tMap_4 begin ] start
				 */

				ok_Hash.put("tMap_4", false);
				start_Hash.put("tMap_4", System.currentTimeMillis());

				currentComponent = "tMap_4";

				if (execStat) {
					runStat.updateStatOnConnection(resourceMap, iterateId, 0, 0, "row9");
				}

				int tos_count_tMap_4 = 0;

// ###############################
// # Lookup's keys initialization

				org.talend.designer.components.lookup.memory.AdvancedMemoryLookup<row10Struct> tHash_Lookup_row10 = (org.talend.designer.components.lookup.memory.AdvancedMemoryLookup<row10Struct>) ((org.talend.designer.components.lookup.memory.AdvancedMemoryLookup<row10Struct>) globalMap
						.get("tHash_Lookup_row10"));

				row10Struct row10HashKey = new row10Struct();
				row10Struct row10Default = new row10Struct();
// ###############################        

// ###############################
// # Vars initialization
				class Var__tMap_4__Struct {
				}
				Var__tMap_4__Struct Var__tMap_4 = new Var__tMap_4__Struct();
// ###############################

// ###############################
// # Outputs initialization
				wrk_mark_prioStruct wrk_mark_prio_tmp = new wrk_mark_prioStruct();
// ###############################

				/**
				 * [tMap_4 begin ] stop
				 */

				/**
				 * [tDBInput_5 begin ] start
				 */

				ok_Hash.put("tDBInput_5", false);
				start_Hash.put("tDBInput_5", System.currentTimeMillis());

				currentComponent = "tDBInput_5";

				int tos_count_tDBInput_5 = 0;

				org.talend.designer.components.util.mssql.MSSqlGenerateTimestampUtil mssqlGTU_tDBInput_5 = org.talend.designer.components.util.mssql.MSSqlUtilFactory
						.getMSSqlGenerateTimestampUtil();

				java.util.List<String> talendToDBList_tDBInput_5 = new java.util.ArrayList();
				String[] talendToDBArray_tDBInput_5 = new String[] { "FLOAT", "NUMERIC", "NUMERIC IDENTITY", "DECIMAL",
						"DECIMAL IDENTITY", "REAL" };
				java.util.Collections.addAll(talendToDBList_tDBInput_5, talendToDBArray_tDBInput_5);
				int nb_line_tDBInput_5 = 0;
				java.sql.Connection conn_tDBInput_5 = null;
				String driverClass_tDBInput_5 = "net.sourceforge.jtds.jdbc.Driver";
				java.lang.Class jdbcclazz_tDBInput_5 = java.lang.Class.forName(driverClass_tDBInput_5);
				String dbUser_tDBInput_5 = "sa";

				final String decryptedPassword_tDBInput_5 = routines.system.PasswordEncryptUtil.decryptPassword(
						"enc:routine.encryption.key.v1:1cQGmntYOfdqccQOPKpzpAJSZAlAQ7VvlUWlDK0o4kKmp+R1");

				String dbPwd_tDBInput_5 = decryptedPassword_tDBInput_5;

				String port_tDBInput_5 = "1433";
				String dbname_tDBInput_5 = "PY_INTERMED";
				String url_tDBInput_5 = "jdbc:jtds:sqlserver://" + "localhost";
				if (!"".equals(port_tDBInput_5)) {
					url_tDBInput_5 += ":" + "1433";
				}
				if (!"".equals(dbname_tDBInput_5)) {
					url_tDBInput_5 += "//" + "PY_INTERMED";
				}
				url_tDBInput_5 += ";appName=" + projectName + ";" + "";
				String dbschema_tDBInput_5 = "dbo";

				conn_tDBInput_5 = java.sql.DriverManager.getConnection(url_tDBInput_5, dbUser_tDBInput_5,
						dbPwd_tDBInput_5);

				java.sql.Statement stmt_tDBInput_5 = conn_tDBInput_5.createStatement();

				String dbquery_tDBInput_5 = "SELECT dbo.VW_IMPORT_MARK_PRIORITIES.FILE_SEQ,\n		dbo.VW_IMPORT_MARK_PRIORITIES.FILE_TYPE,\n		dbo.VW_IMPORT_MARK_PRIORITI"
						+ "ES.FILE_SERIES,\n		dbo.VW_IMPORT_MARK_PRIORITIES.FILE_NBR,\n		dbo.VW_IMPORT_MARK_PRIORITIES.COUNTRY_CODE,\n		dbo.VW_IMPORT_"
						+ "MARK_PRIORITIES.APPLICATION_ID,\n		dbo.VW_IMPORT_MARK_PRIORITIES.PRIORITY_DATE,\n		dbo.VW_IMPORT_MARK_PRIORITIES.NOTES,\n		"
						+ "dbo.VW_IMPORT_MARK_PRIORITIES.IND_ACCEPTED\nFROM	dbo.VW_IMPORT_MARK_PRIORITIES";

				globalMap.put("tDBInput_5_QUERY", dbquery_tDBInput_5);
				java.sql.ResultSet rs_tDBInput_5 = null;

				try {
					rs_tDBInput_5 = stmt_tDBInput_5.executeQuery(dbquery_tDBInput_5);
					java.sql.ResultSetMetaData rsmd_tDBInput_5 = rs_tDBInput_5.getMetaData();
					int colQtyInRs_tDBInput_5 = rsmd_tDBInput_5.getColumnCount();

					String tmpContent_tDBInput_5 = null;

					while (rs_tDBInput_5.next()) {
						nb_line_tDBInput_5++;

						if (colQtyInRs_tDBInput_5 < 1) {
							row9.FILE_SEQ = null;
						} else {

							tmpContent_tDBInput_5 = rs_tDBInput_5.getString(1);
							if (tmpContent_tDBInput_5 != null) {
								if (talendToDBList_tDBInput_5.contains(
										rsmd_tDBInput_5.getColumnTypeName(1).toUpperCase(java.util.Locale.ENGLISH))) {
									row9.FILE_SEQ = FormatterUtils.formatUnwithE(tmpContent_tDBInput_5);
								} else {
									row9.FILE_SEQ = tmpContent_tDBInput_5;
								}
							} else {
								row9.FILE_SEQ = null;
							}
						}
						if (colQtyInRs_tDBInput_5 < 2) {
							row9.FILE_TYPE = null;
						} else {

							tmpContent_tDBInput_5 = rs_tDBInput_5.getString(2);
							if (tmpContent_tDBInput_5 != null) {
								if (talendToDBList_tDBInput_5.contains(
										rsmd_tDBInput_5.getColumnTypeName(2).toUpperCase(java.util.Locale.ENGLISH))) {
									row9.FILE_TYPE = FormatterUtils.formatUnwithE(tmpContent_tDBInput_5);
								} else {
									row9.FILE_TYPE = tmpContent_tDBInput_5;
								}
							} else {
								row9.FILE_TYPE = null;
							}
						}
						if (colQtyInRs_tDBInput_5 < 3) {
							row9.FILE_SERIES = null;
						} else {

							row9.FILE_SERIES = rs_tDBInput_5.getBigDecimal(3);
							if (rs_tDBInput_5.wasNull()) {
								throw new RuntimeException("Null value in non-Nullable column");
							}
						}
						if (colQtyInRs_tDBInput_5 < 4) {
							row9.FILE_NBR = null;
						} else {

							row9.FILE_NBR = rs_tDBInput_5.getBigDecimal(4);
							if (rs_tDBInput_5.wasNull()) {
								throw new RuntimeException("Null value in non-Nullable column");
							}
						}
						if (colQtyInRs_tDBInput_5 < 5) {
							row9.COUNTRY_CODE = null;
						} else {

							tmpContent_tDBInput_5 = rs_tDBInput_5.getString(5);
							if (tmpContent_tDBInput_5 != null) {
								if (talendToDBList_tDBInput_5.contains(
										rsmd_tDBInput_5.getColumnTypeName(5).toUpperCase(java.util.Locale.ENGLISH))) {
									row9.COUNTRY_CODE = FormatterUtils.formatUnwithE(tmpContent_tDBInput_5);
								} else {
									row9.COUNTRY_CODE = tmpContent_tDBInput_5;
								}
							} else {
								row9.COUNTRY_CODE = null;
							}
						}
						if (colQtyInRs_tDBInput_5 < 6) {
							row9.APPLICATION_ID = null;
						} else {

							tmpContent_tDBInput_5 = rs_tDBInput_5.getString(6);
							if (tmpContent_tDBInput_5 != null) {
								if (talendToDBList_tDBInput_5.contains(
										rsmd_tDBInput_5.getColumnTypeName(6).toUpperCase(java.util.Locale.ENGLISH))) {
									row9.APPLICATION_ID = FormatterUtils.formatUnwithE(tmpContent_tDBInput_5);
								} else {
									row9.APPLICATION_ID = tmpContent_tDBInput_5;
								}
							} else {
								row9.APPLICATION_ID = null;
							}
						}
						if (colQtyInRs_tDBInput_5 < 7) {
							row9.PRIORITY_DATE = null;
						} else {

							row9.PRIORITY_DATE = mssqlGTU_tDBInput_5.getDate(rsmd_tDBInput_5, rs_tDBInput_5, 7);

						}
						if (colQtyInRs_tDBInput_5 < 8) {
							row9.NOTES = null;
						} else {

							tmpContent_tDBInput_5 = rs_tDBInput_5.getString(8);
							if (tmpContent_tDBInput_5 != null) {
								if (talendToDBList_tDBInput_5.contains(
										rsmd_tDBInput_5.getColumnTypeName(8).toUpperCase(java.util.Locale.ENGLISH))) {
									row9.NOTES = FormatterUtils.formatUnwithE(tmpContent_tDBInput_5);
								} else {
									row9.NOTES = tmpContent_tDBInput_5;
								}
							} else {
								row9.NOTES = null;
							}
						}
						if (colQtyInRs_tDBInput_5 < 9) {
							row9.IND_ACCEPTED = null;
						} else {

							row9.IND_ACCEPTED = rs_tDBInput_5.getBigDecimal(9);
							if (rs_tDBInput_5.wasNull()) {
								row9.IND_ACCEPTED = null;
							}
						}

						/**
						 * [tDBInput_5 begin ] stop
						 */

						/**
						 * [tDBInput_5 main ] start
						 */

						currentComponent = "tDBInput_5";

						tos_count_tDBInput_5++;

						/**
						 * [tDBInput_5 main ] stop
						 */

						/**
						 * [tDBInput_5 process_data_begin ] start
						 */

						currentComponent = "tDBInput_5";

						/**
						 * [tDBInput_5 process_data_begin ] stop
						 */

						/**
						 * [tMap_4 main ] start
						 */

						currentComponent = "tMap_4";

						if (execStat) {
							runStat.updateStatOnConnection(iterateId, 1, 1

									, "row9"

							);
						}

						boolean hasCasePrimitiveKeyWithNull_tMap_4 = false;

						// ###############################
						// # Input tables (lookups)
						boolean rejectedInnerJoin_tMap_4 = false;
						boolean mainRowRejected_tMap_4 = false;

						///////////////////////////////////////////////
						// Starting Lookup Table "row10"
						///////////////////////////////////////////////

						boolean forceLooprow10 = false;

						row10Struct row10ObjectFromLookup = null;

						if (!rejectedInnerJoin_tMap_4) { // G_TM_M_020

							hasCasePrimitiveKeyWithNull_tMap_4 = false;

							row10HashKey.FILE_SEQ = row9.FILE_SEQ;

							row10HashKey.FILE_TYPE = row9.FILE_TYPE;

							row10HashKey.FILE_SERIES = row9.FILE_SERIES;

							row10HashKey.FILE_NBR = row9.FILE_NBR;

							row10HashKey.hashCodeDirty = true;

							tHash_Lookup_row10.lookup(row10HashKey);

							if (!tHash_Lookup_row10.hasNext()) { // G_TM_M_090

								rejectedInnerJoin_tMap_4 = true;

								forceLooprow10 = true;

							} // G_TM_M_090

						} // G_TM_M_020

						else { // G 20 - G 21
							forceLooprow10 = true;
						} // G 21

						row10Struct row10 = null;

						while ((tHash_Lookup_row10 != null && tHash_Lookup_row10.hasNext()) || forceLooprow10) { // G_TM_M_043

							// CALL close loop of lookup 'row10'

							row10Struct fromLookup_row10 = null;
							row10 = row10Default;

							if (!forceLooprow10) { // G 46

								fromLookup_row10 = tHash_Lookup_row10.next();

								if (fromLookup_row10 != null) {
									row10 = fromLookup_row10;
								}

							} // G 46

							forceLooprow10 = false;

							// ###############################
							{ // start of Var scope

								// ###############################
								// # Vars tables

								Var__tMap_4__Struct Var = Var__tMap_4;// ###############################
								// ###############################
								// # Output tables

								wrk_mark_prio = null;

								if (!rejectedInnerJoin_tMap_4) {

// # Output table : 'wrk_mark_prio'
									wrk_mark_prio_tmp.FILE_SEQ = row10.FILE_SEQ;
									wrk_mark_prio_tmp.FILE_TYPE = row10.FILE_TYPE;
									wrk_mark_prio_tmp.FILE_SERIES = row10.FILE_SERIES;
									wrk_mark_prio_tmp.FILE_NBR = row10.FILE_NBR;
									wrk_mark_prio_tmp.COUNTRY_CODE = row9.COUNTRY_CODE;
									wrk_mark_prio_tmp.APPLICATION_ID = row9.APPLICATION_ID;
									wrk_mark_prio_tmp.PRIORITY_DATE = row9.PRIORITY_DATE;
									wrk_mark_prio_tmp.NOTES = row9.NOTES;
									wrk_mark_prio_tmp.IND_ACCEPTED = row9.IND_ACCEPTED;
									wrk_mark_prio_tmp.PRIORITY_APPL_ID_ALT = null;
									wrk_mark_prio = wrk_mark_prio_tmp;
								} // closing inner join bracket (2)
// ###############################

							} // end of Var scope

							rejectedInnerJoin_tMap_4 = false;

							tos_count_tMap_4++;

							/**
							 * [tMap_4 main ] stop
							 */

							/**
							 * [tMap_4 process_data_begin ] start
							 */

							currentComponent = "tMap_4";

							/**
							 * [tMap_4 process_data_begin ] stop
							 */
// Start of branch "wrk_mark_prio"
							if (wrk_mark_prio != null) {
								row11 = null;

								/**
								 * [tDBOutput_4 main ] start
								 */

								currentComponent = "tDBOutput_4";

								if (execStat) {
									runStat.updateStatOnConnection(iterateId, 1, 1

											, "wrk_mark_prio"

									);
								}

								row11 = null;
								whetherReject_tDBOutput_4 = false;
								try {
									if (wrk_mark_prio.FILE_SEQ == null) {
										pstmt_tDBOutput_4.setNull(1, java.sql.Types.VARCHAR);
									} else {
										pstmt_tDBOutput_4.setString(1, wrk_mark_prio.FILE_SEQ);
									}

									if (wrk_mark_prio.FILE_TYPE == null) {
										pstmt_tDBOutput_4.setNull(2, java.sql.Types.VARCHAR);
									} else {
										pstmt_tDBOutput_4.setString(2, wrk_mark_prio.FILE_TYPE);
									}

									pstmt_tDBOutput_4.setBigDecimal(3, wrk_mark_prio.FILE_SERIES);

									pstmt_tDBOutput_4.setBigDecimal(4, wrk_mark_prio.FILE_NBR);

									if (wrk_mark_prio.COUNTRY_CODE == null) {
										pstmt_tDBOutput_4.setNull(5, java.sql.Types.VARCHAR);
									} else {
										pstmt_tDBOutput_4.setString(5, wrk_mark_prio.COUNTRY_CODE);
									}

									if (wrk_mark_prio.APPLICATION_ID == null) {
										pstmt_tDBOutput_4.setNull(6, java.sql.Types.VARCHAR);
									} else {
										pstmt_tDBOutput_4.setString(6, wrk_mark_prio.APPLICATION_ID);
									}

									if (wrk_mark_prio.PRIORITY_DATE != null) {
										pstmt_tDBOutput_4.setTimestamp(7,
												new java.sql.Timestamp(wrk_mark_prio.PRIORITY_DATE.getTime()));
									} else {
										pstmt_tDBOutput_4.setNull(7, java.sql.Types.TIMESTAMP);
									}

									if (wrk_mark_prio.NOTES == null) {
										pstmt_tDBOutput_4.setNull(8, java.sql.Types.VARCHAR);
									} else {
										pstmt_tDBOutput_4.setString(8, wrk_mark_prio.NOTES);
									}

									pstmt_tDBOutput_4.setBigDecimal(9, wrk_mark_prio.IND_ACCEPTED);

									pstmt_tDBOutput_4.setBigDecimal(10, wrk_mark_prio.PRIORITY_APPL_ID_ALT);

									nb_line_tDBOutput_4++;
									insertedCount_tDBOutput_4 = insertedCount_tDBOutput_4
											+ pstmt_tDBOutput_4.executeUpdate();
								} catch (java.lang.Exception e) {
									whetherReject_tDBOutput_4 = true;
									row11 = new row11Struct();
									row11.FILE_SEQ = wrk_mark_prio.FILE_SEQ;
									row11.FILE_TYPE = wrk_mark_prio.FILE_TYPE;
									row11.FILE_SERIES = wrk_mark_prio.FILE_SERIES;
									row11.FILE_NBR = wrk_mark_prio.FILE_NBR;
									row11.COUNTRY_CODE = wrk_mark_prio.COUNTRY_CODE;
									row11.APPLICATION_ID = wrk_mark_prio.APPLICATION_ID;
									row11.PRIORITY_DATE = wrk_mark_prio.PRIORITY_DATE;
									row11.NOTES = wrk_mark_prio.NOTES;
									row11.IND_ACCEPTED = wrk_mark_prio.IND_ACCEPTED;
									row11.PRIORITY_APPL_ID_ALT = wrk_mark_prio.PRIORITY_APPL_ID_ALT;
									rejectedCount_tDBOutput_4 = rejectedCount_tDBOutput_4 + 1;
									row11.errorCode = ((java.sql.SQLException) e).getSQLState();
									row11.errorMessage = e.getMessage() + " - Line: " + tos_count_tDBOutput_4;
								}
								if (!whetherReject_tDBOutput_4) {
								}
								////////// batch execute by batch size///////
								class LimitBytesHelper_tDBOutput_4 {
									public int limitBytePart1(int counter, java.sql.PreparedStatement pstmt_tDBOutput_4)
											throws Exception {
										try {

											for (int countEach_tDBOutput_4 : pstmt_tDBOutput_4.executeBatch()) {
												if (countEach_tDBOutput_4 == -2 || countEach_tDBOutput_4 == -3) {
													break;
												}
												counter += countEach_tDBOutput_4;
											}

										} catch (java.sql.BatchUpdateException e) {

											int countSum_tDBOutput_4 = 0;
											for (int countEach_tDBOutput_4 : e.getUpdateCounts()) {
												counter += (countEach_tDBOutput_4 < 0 ? 0 : countEach_tDBOutput_4);
											}

											System.err.println(e.getMessage());

										}
										return counter;
									}

									public int limitBytePart2(int counter, java.sql.PreparedStatement pstmt_tDBOutput_4)
											throws Exception {
										try {

											for (int countEach_tDBOutput_4 : pstmt_tDBOutput_4.executeBatch()) {
												if (countEach_tDBOutput_4 == -2 || countEach_tDBOutput_4 == -3) {
													break;
												}
												counter += countEach_tDBOutput_4;
											}

										} catch (java.sql.BatchUpdateException e) {

											for (int countEach_tDBOutput_4 : e.getUpdateCounts()) {
												counter += (countEach_tDBOutput_4 < 0 ? 0 : countEach_tDBOutput_4);
											}

											System.err.println(e.getMessage());

										}
										return counter;
									}
								}

								//////////// commit every////////////

								commitCounter_tDBOutput_4++;
								if (commitEvery_tDBOutput_4 <= commitCounter_tDBOutput_4) {

									conn_tDBOutput_4.commit();

									commitCounter_tDBOutput_4 = 0;
								}

								tos_count_tDBOutput_4++;

								/**
								 * [tDBOutput_4 main ] stop
								 */

								/**
								 * [tDBOutput_4 process_data_begin ] start
								 */

								currentComponent = "tDBOutput_4";

								/**
								 * [tDBOutput_4 process_data_begin ] stop
								 */
// Start of branch "row11"
								if (row11 != null) {

									/**
									 * [tLogRow_4 main ] start
									 */

									currentComponent = "tLogRow_4";

									if (execStat) {
										runStat.updateStatOnConnection(iterateId, 1, 1

												, "row11"

										);
									}

///////////////////////		

									strBuffer_tLogRow_4 = new StringBuilder();

									if (row11.FILE_SEQ != null) { //

										strBuffer_tLogRow_4.append(String.valueOf(row11.FILE_SEQ));

									} //

									strBuffer_tLogRow_4.append("|");

									if (row11.FILE_TYPE != null) { //

										strBuffer_tLogRow_4.append(String.valueOf(row11.FILE_TYPE));

									} //

									strBuffer_tLogRow_4.append("|");

									if (row11.FILE_SERIES != null) { //

										strBuffer_tLogRow_4.append(row11.FILE_SERIES
												.setScale(0, java.math.RoundingMode.HALF_UP).toPlainString());

									} //

									strBuffer_tLogRow_4.append("|");

									if (row11.FILE_NBR != null) { //

										strBuffer_tLogRow_4.append(row11.FILE_NBR
												.setScale(0, java.math.RoundingMode.HALF_UP).toPlainString());

									} //

									strBuffer_tLogRow_4.append("|");

									if (row11.COUNTRY_CODE != null) { //

										strBuffer_tLogRow_4.append(String.valueOf(row11.COUNTRY_CODE));

									} //

									strBuffer_tLogRow_4.append("|");

									if (row11.APPLICATION_ID != null) { //

										strBuffer_tLogRow_4.append(String.valueOf(row11.APPLICATION_ID));

									} //

									strBuffer_tLogRow_4.append("|");

									if (row11.PRIORITY_DATE != null) { //

										strBuffer_tLogRow_4
												.append(FormatterUtils.format_Date(row11.PRIORITY_DATE, "dd-MM-yyyy"));

									} //

									strBuffer_tLogRow_4.append("|");

									if (row11.NOTES != null) { //

										strBuffer_tLogRow_4.append(String.valueOf(row11.NOTES));

									} //

									strBuffer_tLogRow_4.append("|");

									if (row11.IND_ACCEPTED != null) { //

										strBuffer_tLogRow_4.append(row11.IND_ACCEPTED
												.setScale(0, java.math.RoundingMode.HALF_UP).toPlainString());

									} //

									strBuffer_tLogRow_4.append("|");

									if (row11.PRIORITY_APPL_ID_ALT != null) { //

										strBuffer_tLogRow_4.append(row11.PRIORITY_APPL_ID_ALT
												.setScale(0, java.math.RoundingMode.HALF_UP).toPlainString());

									} //

									strBuffer_tLogRow_4.append("|");

									if (row11.errorCode != null) { //

										strBuffer_tLogRow_4.append(String.valueOf(row11.errorCode));

									} //

									strBuffer_tLogRow_4.append("|");

									if (row11.errorMessage != null) { //

										strBuffer_tLogRow_4.append(String.valueOf(row11.errorMessage));

									} //

									if (globalMap.get("tLogRow_CONSOLE") != null) {
										consoleOut_tLogRow_4 = (java.io.PrintStream) globalMap.get("tLogRow_CONSOLE");
									} else {
										consoleOut_tLogRow_4 = new java.io.PrintStream(
												new java.io.BufferedOutputStream(System.out));
										globalMap.put("tLogRow_CONSOLE", consoleOut_tLogRow_4);
									}
									consoleOut_tLogRow_4.println(strBuffer_tLogRow_4.toString());
									consoleOut_tLogRow_4.flush();
									nb_line_tLogRow_4++;
//////

//////                    

///////////////////////    			

									tos_count_tLogRow_4++;

									/**
									 * [tLogRow_4 main ] stop
									 */

									/**
									 * [tLogRow_4 process_data_begin ] start
									 */

									currentComponent = "tLogRow_4";

									/**
									 * [tLogRow_4 process_data_begin ] stop
									 */

									/**
									 * [tLogRow_4 process_data_end ] start
									 */

									currentComponent = "tLogRow_4";

									/**
									 * [tLogRow_4 process_data_end ] stop
									 */

								} // End of branch "row11"

								/**
								 * [tDBOutput_4 process_data_end ] start
								 */

								currentComponent = "tDBOutput_4";

								/**
								 * [tDBOutput_4 process_data_end ] stop
								 */

							} // End of branch "wrk_mark_prio"

						} // close loop of lookup 'row10' // G_TM_M_043

						/**
						 * [tMap_4 process_data_end ] start
						 */

						currentComponent = "tMap_4";

						/**
						 * [tMap_4 process_data_end ] stop
						 */

						/**
						 * [tDBInput_5 process_data_end ] start
						 */

						currentComponent = "tDBInput_5";

						/**
						 * [tDBInput_5 process_data_end ] stop
						 */

						/**
						 * [tDBInput_5 end ] start
						 */

						currentComponent = "tDBInput_5";

					}
				} finally {
					if (rs_tDBInput_5 != null) {
						rs_tDBInput_5.close();
					}
					if (stmt_tDBInput_5 != null) {
						stmt_tDBInput_5.close();
					}
					if (conn_tDBInput_5 != null && !conn_tDBInput_5.isClosed()) {

						conn_tDBInput_5.close();

						if ("com.mysql.cj.jdbc.Driver".equals((String) globalMap.get("driverClass_"))
								&& routines.system.BundleUtils.inOSGi()) {
							Class.forName("com.mysql.cj.jdbc.AbandonedConnectionCleanupThread")
									.getMethod("checkedShutdown").invoke(null, (Object[]) null);
						}

					}
				}
				globalMap.put("tDBInput_5_NB_LINE", nb_line_tDBInput_5);

				ok_Hash.put("tDBInput_5", true);
				end_Hash.put("tDBInput_5", System.currentTimeMillis());

				/**
				 * [tDBInput_5 end ] stop
				 */

				/**
				 * [tMap_4 end ] start
				 */

				currentComponent = "tMap_4";

// ###############################
// # Lookup hashes releasing
				if (tHash_Lookup_row10 != null) {
					tHash_Lookup_row10.endGet();
				}
				globalMap.remove("tHash_Lookup_row10");

// ###############################      

				if (execStat) {
					runStat.updateStat(resourceMap, iterateId, 2, 0, "row9");
				}

				ok_Hash.put("tMap_4", true);
				end_Hash.put("tMap_4", System.currentTimeMillis());

				/**
				 * [tMap_4 end ] stop
				 */

				/**
				 * [tDBOutput_4 end ] start
				 */

				currentComponent = "tDBOutput_4";

				if (pstmt_tDBOutput_4 != null) {

					pstmt_tDBOutput_4.close();
					resourceMap.remove("pstmt_tDBOutput_4");

				}
				resourceMap.put("statementClosed_tDBOutput_4", true);
				conn_tDBOutput_4.commit();

				conn_tDBOutput_4.close();
				resourceMap.put("finish_tDBOutput_4", true);

				nb_line_deleted_tDBOutput_4 = nb_line_deleted_tDBOutput_4 + deletedCount_tDBOutput_4;
				nb_line_update_tDBOutput_4 = nb_line_update_tDBOutput_4 + updatedCount_tDBOutput_4;
				nb_line_inserted_tDBOutput_4 = nb_line_inserted_tDBOutput_4 + insertedCount_tDBOutput_4;
				nb_line_rejected_tDBOutput_4 = nb_line_rejected_tDBOutput_4 + rejectedCount_tDBOutput_4;

				globalMap.put("tDBOutput_4_NB_LINE", nb_line_tDBOutput_4);
				globalMap.put("tDBOutput_4_NB_LINE_UPDATED", nb_line_update_tDBOutput_4);
				globalMap.put("tDBOutput_4_NB_LINE_INSERTED", nb_line_inserted_tDBOutput_4);
				globalMap.put("tDBOutput_4_NB_LINE_DELETED", nb_line_deleted_tDBOutput_4);
				globalMap.put("tDBOutput_4_NB_LINE_REJECTED", nb_line_rejected_tDBOutput_4);

				if (execStat) {
					runStat.updateStat(resourceMap, iterateId, 2, 0, "wrk_mark_prio");
				}

				ok_Hash.put("tDBOutput_4", true);
				end_Hash.put("tDBOutput_4", System.currentTimeMillis());

				/**
				 * [tDBOutput_4 end ] stop
				 */

				/**
				 * [tLogRow_4 end ] start
				 */

				currentComponent = "tLogRow_4";

//////
//////
				globalMap.put("tLogRow_4_NB_LINE", nb_line_tLogRow_4);

///////////////////////    			

				if (execStat) {
					runStat.updateStat(resourceMap, iterateId, 2, 0, "row11");
				}

				ok_Hash.put("tLogRow_4", true);
				end_Hash.put("tLogRow_4", System.currentTimeMillis());

				/**
				 * [tLogRow_4 end ] stop
				 */

			} // end the resume

			if (resumeEntryMethodName == null || globalResumeTicket) {
				resumeUtil.addLog("CHECKPOINT", "CONNECTION:SUBJOB_OK:tDBInput_5:OnSubjobOk", "",
						Thread.currentThread().getId() + "", "", "", "", "", "");
			}

			if (execStat) {
				runStat.updateStatOnConnection("OnSubjobOk9", 0, "ok");
			}

			tDBInput_15Process(globalMap);

		} catch (java.lang.Exception e) {

			TalendException te = new TalendException(e, currentComponent, globalMap);

			throw te;
		} catch (java.lang.Error error) {

			runStat.stopThreadStat();

			throw error;
		} finally {

			// free memory for "tMap_4"
			globalMap.remove("tHash_Lookup_row10");

			try {

				/**
				 * [tDBInput_5 finally ] start
				 */

				currentComponent = "tDBInput_5";

				/**
				 * [tDBInput_5 finally ] stop
				 */

				/**
				 * [tMap_4 finally ] start
				 */

				currentComponent = "tMap_4";

				/**
				 * [tMap_4 finally ] stop
				 */

				/**
				 * [tDBOutput_4 finally ] start
				 */

				currentComponent = "tDBOutput_4";

				try {
					if (resourceMap.get("statementClosed_tDBOutput_4") == null) {
						java.sql.PreparedStatement pstmtToClose_tDBOutput_4 = null;
						if ((pstmtToClose_tDBOutput_4 = (java.sql.PreparedStatement) resourceMap
								.remove("pstmt_tDBOutput_4")) != null) {
							pstmtToClose_tDBOutput_4.close();
						}
					}
				} finally {
					if (resourceMap.get("finish_tDBOutput_4") == null) {
						java.sql.Connection ctn_tDBOutput_4 = null;
						if ((ctn_tDBOutput_4 = (java.sql.Connection) resourceMap.get("conn_tDBOutput_4")) != null) {
							try {
								ctn_tDBOutput_4.close();
							} catch (java.sql.SQLException sqlEx_tDBOutput_4) {
								String errorMessage_tDBOutput_4 = "failed to close the connection in tDBOutput_4 :"
										+ sqlEx_tDBOutput_4.getMessage();
								System.err.println(errorMessage_tDBOutput_4);
							}
						}
					}
				}

				/**
				 * [tDBOutput_4 finally ] stop
				 */

				/**
				 * [tLogRow_4 finally ] start
				 */

				currentComponent = "tLogRow_4";

				/**
				 * [tLogRow_4 finally ] stop
				 */

			} catch (java.lang.Exception e) {
				// ignore
			} catch (java.lang.Error error) {
				// ignore
			}
			resourceMap = null;
		}

		globalMap.put("tDBInput_5_SUBPROCESS_STATE", 1);
	}

	public static class row14Struct implements routines.system.IPersistableRow<row14Struct> {
		final static byte[] commonByteArrayLock_WIPO_PROJECTS_G2b_Mig_TM = new byte[0];
		static byte[] commonByteArray_WIPO_PROJECTS_G2b_Mig_TM = new byte[0];

		public String FILE_SEQ;

		public String getFILE_SEQ() {
			return this.FILE_SEQ;
		}

		public String FILE_TYPE;

		public String getFILE_TYPE() {
			return this.FILE_TYPE;
		}

		public BigDecimal FILE_SERIES;

		public BigDecimal getFILE_SERIES() {
			return this.FILE_SERIES;
		}

		public BigDecimal FILE_NBR;

		public BigDecimal getFILE_NBR() {
			return this.FILE_NBR;
		}

		public String NICE_CLASS_VERSION;

		public String getNICE_CLASS_VERSION() {
			return this.NICE_CLASS_VERSION;
		}

		public BigDecimal NICE_CLASS_EDITION;

		public BigDecimal getNICE_CLASS_EDITION() {
			return this.NICE_CLASS_EDITION;
		}

		public BigDecimal NICE_CLASS_NBR;

		public BigDecimal getNICE_CLASS_NBR() {
			return this.NICE_CLASS_NBR;
		}

		public String NICE_CLASS_STATUS;

		public String getNICE_CLASS_STATUS() {
			return this.NICE_CLASS_STATUS;
		}

		public String NICE_CLASS_DESCRIPTION;

		public String getNICE_CLASS_DESCRIPTION() {
			return this.NICE_CLASS_DESCRIPTION;
		}

		public String NICE_CLASS_DESCR_LANG2;

		public String getNICE_CLASS_DESCR_LANG2() {
			return this.NICE_CLASS_DESCR_LANG2;
		}

		public String errorCode;

		public String getErrorCode() {
			return this.errorCode;
		}

		public String errorMessage;

		public String getErrorMessage() {
			return this.errorMessage;
		}

		private String readString(ObjectInputStream dis) throws IOException {
			String strReturn = null;
			int length = 0;
			length = dis.readInt();
			if (length == -1) {
				strReturn = null;
			} else {
				if (length > commonByteArray_WIPO_PROJECTS_G2b_Mig_TM.length) {
					if (length < 1024 && commonByteArray_WIPO_PROJECTS_G2b_Mig_TM.length == 0) {
						commonByteArray_WIPO_PROJECTS_G2b_Mig_TM = new byte[1024];
					} else {
						commonByteArray_WIPO_PROJECTS_G2b_Mig_TM = new byte[2 * length];
					}
				}
				dis.readFully(commonByteArray_WIPO_PROJECTS_G2b_Mig_TM, 0, length);
				strReturn = new String(commonByteArray_WIPO_PROJECTS_G2b_Mig_TM, 0, length, utf8Charset);
			}
			return strReturn;
		}

		private void writeString(String str, ObjectOutputStream dos) throws IOException {
			if (str == null) {
				dos.writeInt(-1);
			} else {
				byte[] byteArray = str.getBytes(utf8Charset);
				dos.writeInt(byteArray.length);
				dos.write(byteArray);
			}
		}

		public void readData(ObjectInputStream dis) {

			synchronized (commonByteArrayLock_WIPO_PROJECTS_G2b_Mig_TM) {

				try {

					int length = 0;

					this.FILE_SEQ = readString(dis);

					this.FILE_TYPE = readString(dis);

					this.FILE_SERIES = (BigDecimal) dis.readObject();

					this.FILE_NBR = (BigDecimal) dis.readObject();

					this.NICE_CLASS_VERSION = readString(dis);

					this.NICE_CLASS_EDITION = (BigDecimal) dis.readObject();

					this.NICE_CLASS_NBR = (BigDecimal) dis.readObject();

					this.NICE_CLASS_STATUS = readString(dis);

					this.NICE_CLASS_DESCRIPTION = readString(dis);

					this.NICE_CLASS_DESCR_LANG2 = readString(dis);

					this.errorCode = readString(dis);

					this.errorMessage = readString(dis);

				} catch (IOException e) {
					throw new RuntimeException(e);

				} catch (ClassNotFoundException eCNFE) {
					throw new RuntimeException(eCNFE);

				}

			}

		}

		public void writeData(ObjectOutputStream dos) {
			try {

				// String

				writeString(this.FILE_SEQ, dos);

				// String

				writeString(this.FILE_TYPE, dos);

				// BigDecimal

				dos.writeObject(this.FILE_SERIES);

				// BigDecimal

				dos.writeObject(this.FILE_NBR);

				// String

				writeString(this.NICE_CLASS_VERSION, dos);

				// BigDecimal

				dos.writeObject(this.NICE_CLASS_EDITION);

				// BigDecimal

				dos.writeObject(this.NICE_CLASS_NBR);

				// String

				writeString(this.NICE_CLASS_STATUS, dos);

				// String

				writeString(this.NICE_CLASS_DESCRIPTION, dos);

				// String

				writeString(this.NICE_CLASS_DESCR_LANG2, dos);

				// String

				writeString(this.errorCode, dos);

				// String

				writeString(this.errorMessage, dos);

			} catch (IOException e) {
				throw new RuntimeException(e);
			}

		}

		public String toString() {

			StringBuilder sb = new StringBuilder();
			sb.append(super.toString());
			sb.append("[");
			sb.append("FILE_SEQ=" + FILE_SEQ);
			sb.append(",FILE_TYPE=" + FILE_TYPE);
			sb.append(",FILE_SERIES=" + String.valueOf(FILE_SERIES));
			sb.append(",FILE_NBR=" + String.valueOf(FILE_NBR));
			sb.append(",NICE_CLASS_VERSION=" + NICE_CLASS_VERSION);
			sb.append(",NICE_CLASS_EDITION=" + String.valueOf(NICE_CLASS_EDITION));
			sb.append(",NICE_CLASS_NBR=" + String.valueOf(NICE_CLASS_NBR));
			sb.append(",NICE_CLASS_STATUS=" + NICE_CLASS_STATUS);
			sb.append(",NICE_CLASS_DESCRIPTION=" + NICE_CLASS_DESCRIPTION);
			sb.append(",NICE_CLASS_DESCR_LANG2=" + NICE_CLASS_DESCR_LANG2);
			sb.append(",errorCode=" + errorCode);
			sb.append(",errorMessage=" + errorMessage);
			sb.append("]");

			return sb.toString();
		}

		/**
		 * Compare keys
		 */
		public int compareTo(row14Struct other) {

			int returnValue = -1;

			return returnValue;
		}

		private int checkNullsAndCompare(Object object1, Object object2) {
			int returnValue = 0;
			if (object1 instanceof Comparable && object2 instanceof Comparable) {
				returnValue = ((Comparable) object1).compareTo(object2);
			} else if (object1 != null && object2 != null) {
				returnValue = compareStrings(object1.toString(), object2.toString());
			} else if (object1 == null && object2 != null) {
				returnValue = 1;
			} else if (object1 != null && object2 == null) {
				returnValue = -1;
			} else {
				returnValue = 0;
			}

			return returnValue;
		}

		private int compareStrings(String string1, String string2) {
			return string1.compareTo(string2);
		}

	}

	public static class wrk_niceStruct implements routines.system.IPersistableRow<wrk_niceStruct> {
		final static byte[] commonByteArrayLock_WIPO_PROJECTS_G2b_Mig_TM = new byte[0];
		static byte[] commonByteArray_WIPO_PROJECTS_G2b_Mig_TM = new byte[0];

		public String FILE_SEQ;

		public String getFILE_SEQ() {
			return this.FILE_SEQ;
		}

		public String FILE_TYPE;

		public String getFILE_TYPE() {
			return this.FILE_TYPE;
		}

		public BigDecimal FILE_SERIES;

		public BigDecimal getFILE_SERIES() {
			return this.FILE_SERIES;
		}

		public BigDecimal FILE_NBR;

		public BigDecimal getFILE_NBR() {
			return this.FILE_NBR;
		}

		public String NICE_CLASS_VERSION;

		public String getNICE_CLASS_VERSION() {
			return this.NICE_CLASS_VERSION;
		}

		public BigDecimal NICE_CLASS_EDITION;

		public BigDecimal getNICE_CLASS_EDITION() {
			return this.NICE_CLASS_EDITION;
		}

		public BigDecimal NICE_CLASS_NBR;

		public BigDecimal getNICE_CLASS_NBR() {
			return this.NICE_CLASS_NBR;
		}

		public String NICE_CLASS_STATUS;

		public String getNICE_CLASS_STATUS() {
			return this.NICE_CLASS_STATUS;
		}

		public String NICE_CLASS_DESCRIPTION;

		public String getNICE_CLASS_DESCRIPTION() {
			return this.NICE_CLASS_DESCRIPTION;
		}

		public String NICE_CLASS_DESCR_LANG2;

		public String getNICE_CLASS_DESCR_LANG2() {
			return this.NICE_CLASS_DESCR_LANG2;
		}

		private String readString(ObjectInputStream dis) throws IOException {
			String strReturn = null;
			int length = 0;
			length = dis.readInt();
			if (length == -1) {
				strReturn = null;
			} else {
				if (length > commonByteArray_WIPO_PROJECTS_G2b_Mig_TM.length) {
					if (length < 1024 && commonByteArray_WIPO_PROJECTS_G2b_Mig_TM.length == 0) {
						commonByteArray_WIPO_PROJECTS_G2b_Mig_TM = new byte[1024];
					} else {
						commonByteArray_WIPO_PROJECTS_G2b_Mig_TM = new byte[2 * length];
					}
				}
				dis.readFully(commonByteArray_WIPO_PROJECTS_G2b_Mig_TM, 0, length);
				strReturn = new String(commonByteArray_WIPO_PROJECTS_G2b_Mig_TM, 0, length, utf8Charset);
			}
			return strReturn;
		}

		private void writeString(String str, ObjectOutputStream dos) throws IOException {
			if (str == null) {
				dos.writeInt(-1);
			} else {
				byte[] byteArray = str.getBytes(utf8Charset);
				dos.writeInt(byteArray.length);
				dos.write(byteArray);
			}
		}

		public void readData(ObjectInputStream dis) {

			synchronized (commonByteArrayLock_WIPO_PROJECTS_G2b_Mig_TM) {

				try {

					int length = 0;

					this.FILE_SEQ = readString(dis);

					this.FILE_TYPE = readString(dis);

					this.FILE_SERIES = (BigDecimal) dis.readObject();

					this.FILE_NBR = (BigDecimal) dis.readObject();

					this.NICE_CLASS_VERSION = readString(dis);

					this.NICE_CLASS_EDITION = (BigDecimal) dis.readObject();

					this.NICE_CLASS_NBR = (BigDecimal) dis.readObject();

					this.NICE_CLASS_STATUS = readString(dis);

					this.NICE_CLASS_DESCRIPTION = readString(dis);

					this.NICE_CLASS_DESCR_LANG2 = readString(dis);

				} catch (IOException e) {
					throw new RuntimeException(e);

				} catch (ClassNotFoundException eCNFE) {
					throw new RuntimeException(eCNFE);

				}

			}

		}

		public void writeData(ObjectOutputStream dos) {
			try {

				// String

				writeString(this.FILE_SEQ, dos);

				// String

				writeString(this.FILE_TYPE, dos);

				// BigDecimal

				dos.writeObject(this.FILE_SERIES);

				// BigDecimal

				dos.writeObject(this.FILE_NBR);

				// String

				writeString(this.NICE_CLASS_VERSION, dos);

				// BigDecimal

				dos.writeObject(this.NICE_CLASS_EDITION);

				// BigDecimal

				dos.writeObject(this.NICE_CLASS_NBR);

				// String

				writeString(this.NICE_CLASS_STATUS, dos);

				// String

				writeString(this.NICE_CLASS_DESCRIPTION, dos);

				// String

				writeString(this.NICE_CLASS_DESCR_LANG2, dos);

			} catch (IOException e) {
				throw new RuntimeException(e);
			}

		}

		public String toString() {

			StringBuilder sb = new StringBuilder();
			sb.append(super.toString());
			sb.append("[");
			sb.append("FILE_SEQ=" + FILE_SEQ);
			sb.append(",FILE_TYPE=" + FILE_TYPE);
			sb.append(",FILE_SERIES=" + String.valueOf(FILE_SERIES));
			sb.append(",FILE_NBR=" + String.valueOf(FILE_NBR));
			sb.append(",NICE_CLASS_VERSION=" + NICE_CLASS_VERSION);
			sb.append(",NICE_CLASS_EDITION=" + String.valueOf(NICE_CLASS_EDITION));
			sb.append(",NICE_CLASS_NBR=" + String.valueOf(NICE_CLASS_NBR));
			sb.append(",NICE_CLASS_STATUS=" + NICE_CLASS_STATUS);
			sb.append(",NICE_CLASS_DESCRIPTION=" + NICE_CLASS_DESCRIPTION);
			sb.append(",NICE_CLASS_DESCR_LANG2=" + NICE_CLASS_DESCR_LANG2);
			sb.append("]");

			return sb.toString();
		}

		/**
		 * Compare keys
		 */
		public int compareTo(wrk_niceStruct other) {

			int returnValue = -1;

			return returnValue;
		}

		private int checkNullsAndCompare(Object object1, Object object2) {
			int returnValue = 0;
			if (object1 instanceof Comparable && object2 instanceof Comparable) {
				returnValue = ((Comparable) object1).compareTo(object2);
			} else if (object1 != null && object2 != null) {
				returnValue = compareStrings(object1.toString(), object2.toString());
			} else if (object1 == null && object2 != null) {
				returnValue = 1;
			} else if (object1 != null && object2 == null) {
				returnValue = -1;
			} else {
				returnValue = 0;
			}

			return returnValue;
		}

		private int compareStrings(String string1, String string2) {
			return string1.compareTo(string2);
		}

	}

	public static class row12Struct implements routines.system.IPersistableRow<row12Struct> {
		final static byte[] commonByteArrayLock_WIPO_PROJECTS_G2b_Mig_TM = new byte[0];
		static byte[] commonByteArray_WIPO_PROJECTS_G2b_Mig_TM = new byte[0];

		public String FILE_SEQ;

		public String getFILE_SEQ() {
			return this.FILE_SEQ;
		}

		public String FILE_TYPE;

		public String getFILE_TYPE() {
			return this.FILE_TYPE;
		}

		public BigDecimal FILE_SERIES;

		public BigDecimal getFILE_SERIES() {
			return this.FILE_SERIES;
		}

		public BigDecimal FILE_NBR;

		public BigDecimal getFILE_NBR() {
			return this.FILE_NBR;
		}

		public String NICE_CLASS_VERSION;

		public String getNICE_CLASS_VERSION() {
			return this.NICE_CLASS_VERSION;
		}

		public BigDecimal NICE_CLASS_EDITION;

		public BigDecimal getNICE_CLASS_EDITION() {
			return this.NICE_CLASS_EDITION;
		}

		public BigDecimal NICE_CLASS_NBR;

		public BigDecimal getNICE_CLASS_NBR() {
			return this.NICE_CLASS_NBR;
		}

		public String NICE_CLASS_STATUS;

		public String getNICE_CLASS_STATUS() {
			return this.NICE_CLASS_STATUS;
		}

		public String NICE_CLASS_DESCRIPTION;

		public String getNICE_CLASS_DESCRIPTION() {
			return this.NICE_CLASS_DESCRIPTION;
		}

		public String NICE_CLASS_DESCR_LANG2;

		public String getNICE_CLASS_DESCR_LANG2() {
			return this.NICE_CLASS_DESCR_LANG2;
		}

		private String readString(ObjectInputStream dis) throws IOException {
			String strReturn = null;
			int length = 0;
			length = dis.readInt();
			if (length == -1) {
				strReturn = null;
			} else {
				if (length > commonByteArray_WIPO_PROJECTS_G2b_Mig_TM.length) {
					if (length < 1024 && commonByteArray_WIPO_PROJECTS_G2b_Mig_TM.length == 0) {
						commonByteArray_WIPO_PROJECTS_G2b_Mig_TM = new byte[1024];
					} else {
						commonByteArray_WIPO_PROJECTS_G2b_Mig_TM = new byte[2 * length];
					}
				}
				dis.readFully(commonByteArray_WIPO_PROJECTS_G2b_Mig_TM, 0, length);
				strReturn = new String(commonByteArray_WIPO_PROJECTS_G2b_Mig_TM, 0, length, utf8Charset);
			}
			return strReturn;
		}

		private void writeString(String str, ObjectOutputStream dos) throws IOException {
			if (str == null) {
				dos.writeInt(-1);
			} else {
				byte[] byteArray = str.getBytes(utf8Charset);
				dos.writeInt(byteArray.length);
				dos.write(byteArray);
			}
		}

		public void readData(ObjectInputStream dis) {

			synchronized (commonByteArrayLock_WIPO_PROJECTS_G2b_Mig_TM) {

				try {

					int length = 0;

					this.FILE_SEQ = readString(dis);

					this.FILE_TYPE = readString(dis);

					this.FILE_SERIES = (BigDecimal) dis.readObject();

					this.FILE_NBR = (BigDecimal) dis.readObject();

					this.NICE_CLASS_VERSION = readString(dis);

					this.NICE_CLASS_EDITION = (BigDecimal) dis.readObject();

					this.NICE_CLASS_NBR = (BigDecimal) dis.readObject();

					this.NICE_CLASS_STATUS = readString(dis);

					this.NICE_CLASS_DESCRIPTION = readString(dis);

					this.NICE_CLASS_DESCR_LANG2 = readString(dis);

				} catch (IOException e) {
					throw new RuntimeException(e);

				} catch (ClassNotFoundException eCNFE) {
					throw new RuntimeException(eCNFE);

				}

			}

		}

		public void writeData(ObjectOutputStream dos) {
			try {

				// String

				writeString(this.FILE_SEQ, dos);

				// String

				writeString(this.FILE_TYPE, dos);

				// BigDecimal

				dos.writeObject(this.FILE_SERIES);

				// BigDecimal

				dos.writeObject(this.FILE_NBR);

				// String

				writeString(this.NICE_CLASS_VERSION, dos);

				// BigDecimal

				dos.writeObject(this.NICE_CLASS_EDITION);

				// BigDecimal

				dos.writeObject(this.NICE_CLASS_NBR);

				// String

				writeString(this.NICE_CLASS_STATUS, dos);

				// String

				writeString(this.NICE_CLASS_DESCRIPTION, dos);

				// String

				writeString(this.NICE_CLASS_DESCR_LANG2, dos);

			} catch (IOException e) {
				throw new RuntimeException(e);
			}

		}

		public String toString() {

			StringBuilder sb = new StringBuilder();
			sb.append(super.toString());
			sb.append("[");
			sb.append("FILE_SEQ=" + FILE_SEQ);
			sb.append(",FILE_TYPE=" + FILE_TYPE);
			sb.append(",FILE_SERIES=" + String.valueOf(FILE_SERIES));
			sb.append(",FILE_NBR=" + String.valueOf(FILE_NBR));
			sb.append(",NICE_CLASS_VERSION=" + NICE_CLASS_VERSION);
			sb.append(",NICE_CLASS_EDITION=" + String.valueOf(NICE_CLASS_EDITION));
			sb.append(",NICE_CLASS_NBR=" + String.valueOf(NICE_CLASS_NBR));
			sb.append(",NICE_CLASS_STATUS=" + NICE_CLASS_STATUS);
			sb.append(",NICE_CLASS_DESCRIPTION=" + NICE_CLASS_DESCRIPTION);
			sb.append(",NICE_CLASS_DESCR_LANG2=" + NICE_CLASS_DESCR_LANG2);
			sb.append("]");

			return sb.toString();
		}

		/**
		 * Compare keys
		 */
		public int compareTo(row12Struct other) {

			int returnValue = -1;

			return returnValue;
		}

		private int checkNullsAndCompare(Object object1, Object object2) {
			int returnValue = 0;
			if (object1 instanceof Comparable && object2 instanceof Comparable) {
				returnValue = ((Comparable) object1).compareTo(object2);
			} else if (object1 != null && object2 != null) {
				returnValue = compareStrings(object1.toString(), object2.toString());
			} else if (object1 == null && object2 != null) {
				returnValue = 1;
			} else if (object1 != null && object2 == null) {
				returnValue = -1;
			} else {
				returnValue = 0;
			}

			return returnValue;
		}

		private int compareStrings(String string1, String string2) {
			return string1.compareTo(string2);
		}

	}

	public static class after_tDBInput_15Struct implements routines.system.IPersistableRow<after_tDBInput_15Struct> {
		final static byte[] commonByteArrayLock_WIPO_PROJECTS_G2b_Mig_TM = new byte[0];
		static byte[] commonByteArray_WIPO_PROJECTS_G2b_Mig_TM = new byte[0];

		public String FILE_SEQ;

		public String getFILE_SEQ() {
			return this.FILE_SEQ;
		}

		public String FILE_TYPE;

		public String getFILE_TYPE() {
			return this.FILE_TYPE;
		}

		public BigDecimal FILE_SERIES;

		public BigDecimal getFILE_SERIES() {
			return this.FILE_SERIES;
		}

		public BigDecimal FILE_NBR;

		public BigDecimal getFILE_NBR() {
			return this.FILE_NBR;
		}

		public String NICE_CLASS_VERSION;

		public String getNICE_CLASS_VERSION() {
			return this.NICE_CLASS_VERSION;
		}

		public BigDecimal NICE_CLASS_EDITION;

		public BigDecimal getNICE_CLASS_EDITION() {
			return this.NICE_CLASS_EDITION;
		}

		public BigDecimal NICE_CLASS_NBR;

		public BigDecimal getNICE_CLASS_NBR() {
			return this.NICE_CLASS_NBR;
		}

		public String NICE_CLASS_STATUS;

		public String getNICE_CLASS_STATUS() {
			return this.NICE_CLASS_STATUS;
		}

		public String NICE_CLASS_DESCRIPTION;

		public String getNICE_CLASS_DESCRIPTION() {
			return this.NICE_CLASS_DESCRIPTION;
		}

		public String NICE_CLASS_DESCR_LANG2;

		public String getNICE_CLASS_DESCR_LANG2() {
			return this.NICE_CLASS_DESCR_LANG2;
		}

		private String readString(ObjectInputStream dis) throws IOException {
			String strReturn = null;
			int length = 0;
			length = dis.readInt();
			if (length == -1) {
				strReturn = null;
			} else {
				if (length > commonByteArray_WIPO_PROJECTS_G2b_Mig_TM.length) {
					if (length < 1024 && commonByteArray_WIPO_PROJECTS_G2b_Mig_TM.length == 0) {
						commonByteArray_WIPO_PROJECTS_G2b_Mig_TM = new byte[1024];
					} else {
						commonByteArray_WIPO_PROJECTS_G2b_Mig_TM = new byte[2 * length];
					}
				}
				dis.readFully(commonByteArray_WIPO_PROJECTS_G2b_Mig_TM, 0, length);
				strReturn = new String(commonByteArray_WIPO_PROJECTS_G2b_Mig_TM, 0, length, utf8Charset);
			}
			return strReturn;
		}

		private void writeString(String str, ObjectOutputStream dos) throws IOException {
			if (str == null) {
				dos.writeInt(-1);
			} else {
				byte[] byteArray = str.getBytes(utf8Charset);
				dos.writeInt(byteArray.length);
				dos.write(byteArray);
			}
		}

		public void readData(ObjectInputStream dis) {

			synchronized (commonByteArrayLock_WIPO_PROJECTS_G2b_Mig_TM) {

				try {

					int length = 0;

					this.FILE_SEQ = readString(dis);

					this.FILE_TYPE = readString(dis);

					this.FILE_SERIES = (BigDecimal) dis.readObject();

					this.FILE_NBR = (BigDecimal) dis.readObject();

					this.NICE_CLASS_VERSION = readString(dis);

					this.NICE_CLASS_EDITION = (BigDecimal) dis.readObject();

					this.NICE_CLASS_NBR = (BigDecimal) dis.readObject();

					this.NICE_CLASS_STATUS = readString(dis);

					this.NICE_CLASS_DESCRIPTION = readString(dis);

					this.NICE_CLASS_DESCR_LANG2 = readString(dis);

				} catch (IOException e) {
					throw new RuntimeException(e);

				} catch (ClassNotFoundException eCNFE) {
					throw new RuntimeException(eCNFE);

				}

			}

		}

		public void writeData(ObjectOutputStream dos) {
			try {

				// String

				writeString(this.FILE_SEQ, dos);

				// String

				writeString(this.FILE_TYPE, dos);

				// BigDecimal

				dos.writeObject(this.FILE_SERIES);

				// BigDecimal

				dos.writeObject(this.FILE_NBR);

				// String

				writeString(this.NICE_CLASS_VERSION, dos);

				// BigDecimal

				dos.writeObject(this.NICE_CLASS_EDITION);

				// BigDecimal

				dos.writeObject(this.NICE_CLASS_NBR);

				// String

				writeString(this.NICE_CLASS_STATUS, dos);

				// String

				writeString(this.NICE_CLASS_DESCRIPTION, dos);

				// String

				writeString(this.NICE_CLASS_DESCR_LANG2, dos);

			} catch (IOException e) {
				throw new RuntimeException(e);
			}

		}

		public String toString() {

			StringBuilder sb = new StringBuilder();
			sb.append(super.toString());
			sb.append("[");
			sb.append("FILE_SEQ=" + FILE_SEQ);
			sb.append(",FILE_TYPE=" + FILE_TYPE);
			sb.append(",FILE_SERIES=" + String.valueOf(FILE_SERIES));
			sb.append(",FILE_NBR=" + String.valueOf(FILE_NBR));
			sb.append(",NICE_CLASS_VERSION=" + NICE_CLASS_VERSION);
			sb.append(",NICE_CLASS_EDITION=" + String.valueOf(NICE_CLASS_EDITION));
			sb.append(",NICE_CLASS_NBR=" + String.valueOf(NICE_CLASS_NBR));
			sb.append(",NICE_CLASS_STATUS=" + NICE_CLASS_STATUS);
			sb.append(",NICE_CLASS_DESCRIPTION=" + NICE_CLASS_DESCRIPTION);
			sb.append(",NICE_CLASS_DESCR_LANG2=" + NICE_CLASS_DESCR_LANG2);
			sb.append("]");

			return sb.toString();
		}

		/**
		 * Compare keys
		 */
		public int compareTo(after_tDBInput_15Struct other) {

			int returnValue = -1;

			return returnValue;
		}

		private int checkNullsAndCompare(Object object1, Object object2) {
			int returnValue = 0;
			if (object1 instanceof Comparable && object2 instanceof Comparable) {
				returnValue = ((Comparable) object1).compareTo(object2);
			} else if (object1 != null && object2 != null) {
				returnValue = compareStrings(object1.toString(), object2.toString());
			} else if (object1 == null && object2 != null) {
				returnValue = 1;
			} else if (object1 != null && object2 == null) {
				returnValue = -1;
			} else {
				returnValue = 0;
			}

			return returnValue;
		}

		private int compareStrings(String string1, String string2) {
			return string1.compareTo(string2);
		}

	}

	public void tDBInput_15Process(final java.util.Map<String, Object> globalMap) throws TalendException {
		globalMap.put("tDBInput_15_SUBPROCESS_STATE", 0);

		final boolean execStat = this.execStat;

		String iterateId = "";

		String currentComponent = "";
		java.util.Map<String, Object> resourceMap = new java.util.HashMap<String, Object>();

		try {
			// TDI-39566 avoid throwing an useless Exception
			boolean resumeIt = true;
			if (globalResumeTicket == false && resumeEntryMethodName != null) {
				String currentMethodName = new java.lang.Exception().getStackTrace()[0].getMethodName();
				resumeIt = resumeEntryMethodName.equals(currentMethodName);
			}
			if (resumeIt || globalResumeTicket) { // start the resume
				globalResumeTicket = true;

				tDBInput_7Process(globalMap);

				row12Struct row12 = new row12Struct();
				wrk_niceStruct wrk_nice = new wrk_niceStruct();
				row14Struct row14 = new row14Struct();

				/**
				 * [tLogRow_5 begin ] start
				 */

				ok_Hash.put("tLogRow_5", false);
				start_Hash.put("tLogRow_5", System.currentTimeMillis());

				currentComponent = "tLogRow_5";

				if (execStat) {
					runStat.updateStatOnConnection(resourceMap, iterateId, 0, 0, "row14");
				}

				int tos_count_tLogRow_5 = 0;

				///////////////////////

				final String OUTPUT_FIELD_SEPARATOR_tLogRow_5 = "|";
				java.io.PrintStream consoleOut_tLogRow_5 = null;

				StringBuilder strBuffer_tLogRow_5 = null;
				int nb_line_tLogRow_5 = 0;
///////////////////////    			

				/**
				 * [tLogRow_5 begin ] stop
				 */

				/**
				 * [tDBOutput_5 begin ] start
				 */

				ok_Hash.put("tDBOutput_5", false);
				start_Hash.put("tDBOutput_5", System.currentTimeMillis());

				currentComponent = "tDBOutput_5";

				if (execStat) {
					runStat.updateStatOnConnection(resourceMap, iterateId, 0, 0, "wrk_nice");
				}

				int tos_count_tDBOutput_5 = 0;

				int nb_line_tDBOutput_5 = 0;
				int nb_line_update_tDBOutput_5 = 0;
				int nb_line_inserted_tDBOutput_5 = 0;
				int nb_line_deleted_tDBOutput_5 = 0;
				int nb_line_rejected_tDBOutput_5 = 0;

				int deletedCount_tDBOutput_5 = 0;
				int updatedCount_tDBOutput_5 = 0;
				int insertedCount_tDBOutput_5 = 0;
				int rejectedCount_tDBOutput_5 = 0;
				String dbschema_tDBOutput_5 = null;
				String tableName_tDBOutput_5 = null;
				boolean whetherReject_tDBOutput_5 = false;

				java.util.Calendar calendar_tDBOutput_5 = java.util.Calendar.getInstance();
				long year1_tDBOutput_5 = TalendDate.parseDate("yyyy-MM-dd", "0001-01-01").getTime();
				long year2_tDBOutput_5 = TalendDate.parseDate("yyyy-MM-dd", "1753-01-01").getTime();
				long year10000_tDBOutput_5 = TalendDate.parseDate("yyyy-MM-dd HH:mm:ss", "9999-12-31 24:00:00")
						.getTime();
				long date_tDBOutput_5;

				java.util.Calendar calendar_datetimeoffset_tDBOutput_5 = java.util.Calendar
						.getInstance(java.util.TimeZone.getTimeZone("UTC"));

				java.sql.Connection conn_tDBOutput_5 = null;
				String dbUser_tDBOutput_5 = null;
				dbschema_tDBOutput_5 = "ADMIN";
				String driverClass_tDBOutput_5 = "net.sourceforge.jtds.jdbc.Driver";

				java.lang.Class.forName(driverClass_tDBOutput_5);
				String port_tDBOutput_5 = "1433";
				String dbname_tDBOutput_5 = "MARCAS_PY";
				String url_tDBOutput_5 = "jdbc:jtds:sqlserver://" + "localhost";
				if (!"".equals(port_tDBOutput_5)) {
					url_tDBOutput_5 += ":" + "1433";
				}
				if (!"".equals(dbname_tDBOutput_5)) {
					url_tDBOutput_5 += "//" + "MARCAS_PY";

				}
				url_tDBOutput_5 += ";appName=" + projectName + ";" + "";
				dbUser_tDBOutput_5 = "ADMIN";

				final String decryptedPassword_tDBOutput_5 = routines.system.PasswordEncryptUtil
						.decryptPassword("enc:routine.encryption.key.v1:Tj7ssjCgjtr3M+qlRfbJ2H/1zx9xc5awj/kNei+iG/ME");

				String dbPwd_tDBOutput_5 = decryptedPassword_tDBOutput_5;
				conn_tDBOutput_5 = java.sql.DriverManager.getConnection(url_tDBOutput_5, dbUser_tDBOutput_5,
						dbPwd_tDBOutput_5);

				resourceMap.put("conn_tDBOutput_5", conn_tDBOutput_5);

				conn_tDBOutput_5.setAutoCommit(false);
				int commitEvery_tDBOutput_5 = 10000;
				int commitCounter_tDBOutput_5 = 0;

				if (dbschema_tDBOutput_5 == null || dbschema_tDBOutput_5.trim().length() == 0) {
					tableName_tDBOutput_5 = "WRK_MARK_NICE_CLASSES";
				} else {
					tableName_tDBOutput_5 = dbschema_tDBOutput_5 + "].[" + "WRK_MARK_NICE_CLASSES";
				}
				int count_tDBOutput_5 = 0;

				String insert_tDBOutput_5 = "INSERT INTO [" + tableName_tDBOutput_5
						+ "] ([FILE_SEQ],[FILE_TYPE],[FILE_SERIES],[FILE_NBR],[NICE_CLASS_VERSION],[NICE_CLASS_EDITION],[NICE_CLASS_NBR],[NICE_CLASS_STATUS],[NICE_CLASS_DESCRIPTION],[NICE_CLASS_DESCR_LANG2]) VALUES (?,?,?,?,?,?,?,?,?,?)";
				java.sql.PreparedStatement pstmt_tDBOutput_5 = conn_tDBOutput_5.prepareStatement(insert_tDBOutput_5);
				resourceMap.put("pstmt_tDBOutput_5", pstmt_tDBOutput_5);

				/**
				 * [tDBOutput_5 begin ] stop
				 */

				/**
				 * [tMap_5 begin ] start
				 */

				ok_Hash.put("tMap_5", false);
				start_Hash.put("tMap_5", System.currentTimeMillis());

				currentComponent = "tMap_5";

				if (execStat) {
					runStat.updateStatOnConnection(resourceMap, iterateId, 0, 0, "row12");
				}

				int tos_count_tMap_5 = 0;

// ###############################
// # Lookup's keys initialization

				org.talend.designer.components.lookup.memory.AdvancedMemoryLookup<row13Struct> tHash_Lookup_row13 = (org.talend.designer.components.lookup.memory.AdvancedMemoryLookup<row13Struct>) ((org.talend.designer.components.lookup.memory.AdvancedMemoryLookup<row13Struct>) globalMap
						.get("tHash_Lookup_row13"));

				row13Struct row13HashKey = new row13Struct();
				row13Struct row13Default = new row13Struct();
// ###############################        

// ###############################
// # Vars initialization
				class Var__tMap_5__Struct {
				}
				Var__tMap_5__Struct Var__tMap_5 = new Var__tMap_5__Struct();
// ###############################

// ###############################
// # Outputs initialization
				wrk_niceStruct wrk_nice_tmp = new wrk_niceStruct();
// ###############################

				/**
				 * [tMap_5 begin ] stop
				 */

				/**
				 * [tDBInput_15 begin ] start
				 */

				ok_Hash.put("tDBInput_15", false);
				start_Hash.put("tDBInput_15", System.currentTimeMillis());

				currentComponent = "tDBInput_15";

				int tos_count_tDBInput_15 = 0;

				org.talend.designer.components.util.mssql.MSSqlGenerateTimestampUtil mssqlGTU_tDBInput_15 = org.talend.designer.components.util.mssql.MSSqlUtilFactory
						.getMSSqlGenerateTimestampUtil();

				java.util.List<String> talendToDBList_tDBInput_15 = new java.util.ArrayList();
				String[] talendToDBArray_tDBInput_15 = new String[] { "FLOAT", "NUMERIC", "NUMERIC IDENTITY", "DECIMAL",
						"DECIMAL IDENTITY", "REAL" };
				java.util.Collections.addAll(talendToDBList_tDBInput_15, talendToDBArray_tDBInput_15);
				int nb_line_tDBInput_15 = 0;
				java.sql.Connection conn_tDBInput_15 = null;
				String driverClass_tDBInput_15 = "net.sourceforge.jtds.jdbc.Driver";
				java.lang.Class jdbcclazz_tDBInput_15 = java.lang.Class.forName(driverClass_tDBInput_15);
				String dbUser_tDBInput_15 = "sa";

				final String decryptedPassword_tDBInput_15 = routines.system.PasswordEncryptUtil.decryptPassword(
						"enc:routine.encryption.key.v1:G92X/kJNqZBKfYhzE0BoMhoKYfgbKm8TUFiWKNNI99c+2Uwe");

				String dbPwd_tDBInput_15 = decryptedPassword_tDBInput_15;

				String port_tDBInput_15 = "1433";
				String dbname_tDBInput_15 = "PY_INTERMED";
				String url_tDBInput_15 = "jdbc:jtds:sqlserver://" + "localhost";
				if (!"".equals(port_tDBInput_15)) {
					url_tDBInput_15 += ":" + "1433";
				}
				if (!"".equals(dbname_tDBInput_15)) {
					url_tDBInput_15 += "//" + "PY_INTERMED";
				}
				url_tDBInput_15 += ";appName=" + projectName + ";" + "";
				String dbschema_tDBInput_15 = "dbo";

				conn_tDBInput_15 = java.sql.DriverManager.getConnection(url_tDBInput_15, dbUser_tDBInput_15,
						dbPwd_tDBInput_15);

				java.sql.Statement stmt_tDBInput_15 = conn_tDBInput_15.createStatement();

				String dbquery_tDBInput_15 = "SELECT dbo.VW_IMPORT_MARK_NICE_CLASSES.FILE_SEQ,\n		dbo.VW_IMPORT_MARK_NICE_CLASSES.FILE_TYPE,\n		dbo.VW_IMPORT_MARK_NICE"
						+ "_CLASSES.FILE_SERIES,\n		dbo.VW_IMPORT_MARK_NICE_CLASSES.FILE_NBR,\n		dbo.VW_IMPORT_MARK_NICE_CLASSES.NICE_CLASS_VERSION,\n"
						+ "		dbo.VW_IMPORT_MARK_NICE_CLASSES.NICE_CLASS_EDITION,\n		dbo.VW_IMPORT_MARK_NICE_CLASSES.NICE_CLASS_NBR,\n		dbo.VW_IMPORT_"
						+ "MARK_NICE_CLASSES.NICE_CLASS_STATUS,\n		dbo.VW_IMPORT_MARK_NICE_CLASSES.NICE_CLASS_DESCRIPTION,\n		dbo.VW_IMPORT_MARK_NICE"
						+ "_CLASSES.NICE_CLASS_DESCR_LANG2\nFROM	dbo.VW_IMPORT_MARK_NICE_CLASSES";

				globalMap.put("tDBInput_15_QUERY", dbquery_tDBInput_15);
				java.sql.ResultSet rs_tDBInput_15 = null;

				try {
					rs_tDBInput_15 = stmt_tDBInput_15.executeQuery(dbquery_tDBInput_15);
					java.sql.ResultSetMetaData rsmd_tDBInput_15 = rs_tDBInput_15.getMetaData();
					int colQtyInRs_tDBInput_15 = rsmd_tDBInput_15.getColumnCount();

					String tmpContent_tDBInput_15 = null;

					while (rs_tDBInput_15.next()) {
						nb_line_tDBInput_15++;

						if (colQtyInRs_tDBInput_15 < 1) {
							row12.FILE_SEQ = null;
						} else {

							tmpContent_tDBInput_15 = rs_tDBInput_15.getString(1);
							if (tmpContent_tDBInput_15 != null) {
								if (talendToDBList_tDBInput_15.contains(
										rsmd_tDBInput_15.getColumnTypeName(1).toUpperCase(java.util.Locale.ENGLISH))) {
									row12.FILE_SEQ = FormatterUtils.formatUnwithE(tmpContent_tDBInput_15);
								} else {
									row12.FILE_SEQ = tmpContent_tDBInput_15;
								}
							} else {
								row12.FILE_SEQ = null;
							}
						}
						if (colQtyInRs_tDBInput_15 < 2) {
							row12.FILE_TYPE = null;
						} else {

							tmpContent_tDBInput_15 = rs_tDBInput_15.getString(2);
							if (tmpContent_tDBInput_15 != null) {
								if (talendToDBList_tDBInput_15.contains(
										rsmd_tDBInput_15.getColumnTypeName(2).toUpperCase(java.util.Locale.ENGLISH))) {
									row12.FILE_TYPE = FormatterUtils.formatUnwithE(tmpContent_tDBInput_15);
								} else {
									row12.FILE_TYPE = tmpContent_tDBInput_15;
								}
							} else {
								row12.FILE_TYPE = null;
							}
						}
						if (colQtyInRs_tDBInput_15 < 3) {
							row12.FILE_SERIES = null;
						} else {

							row12.FILE_SERIES = rs_tDBInput_15.getBigDecimal(3);
							if (rs_tDBInput_15.wasNull()) {
								throw new RuntimeException("Null value in non-Nullable column");
							}
						}
						if (colQtyInRs_tDBInput_15 < 4) {
							row12.FILE_NBR = null;
						} else {

							row12.FILE_NBR = rs_tDBInput_15.getBigDecimal(4);
							if (rs_tDBInput_15.wasNull()) {
								throw new RuntimeException("Null value in non-Nullable column");
							}
						}
						if (colQtyInRs_tDBInput_15 < 5) {
							row12.NICE_CLASS_VERSION = null;
						} else {

							tmpContent_tDBInput_15 = rs_tDBInput_15.getString(5);
							if (tmpContent_tDBInput_15 != null) {
								if (talendToDBList_tDBInput_15.contains(
										rsmd_tDBInput_15.getColumnTypeName(5).toUpperCase(java.util.Locale.ENGLISH))) {
									row12.NICE_CLASS_VERSION = FormatterUtils.formatUnwithE(tmpContent_tDBInput_15);
								} else {
									row12.NICE_CLASS_VERSION = tmpContent_tDBInput_15;
								}
							} else {
								row12.NICE_CLASS_VERSION = null;
							}
						}
						if (colQtyInRs_tDBInput_15 < 6) {
							row12.NICE_CLASS_EDITION = null;
						} else {

							row12.NICE_CLASS_EDITION = rs_tDBInput_15.getBigDecimal(6);
							if (rs_tDBInput_15.wasNull()) {
								row12.NICE_CLASS_EDITION = null;
							}
						}
						if (colQtyInRs_tDBInput_15 < 7) {
							row12.NICE_CLASS_NBR = null;
						} else {

							row12.NICE_CLASS_NBR = rs_tDBInput_15.getBigDecimal(7);
							if (rs_tDBInput_15.wasNull()) {
								throw new RuntimeException("Null value in non-Nullable column");
							}
						}
						if (colQtyInRs_tDBInput_15 < 8) {
							row12.NICE_CLASS_STATUS = null;
						} else {

							tmpContent_tDBInput_15 = rs_tDBInput_15.getString(8);
							if (tmpContent_tDBInput_15 != null) {
								if (talendToDBList_tDBInput_15.contains(
										rsmd_tDBInput_15.getColumnTypeName(8).toUpperCase(java.util.Locale.ENGLISH))) {
									row12.NICE_CLASS_STATUS = FormatterUtils.formatUnwithE(tmpContent_tDBInput_15);
								} else {
									row12.NICE_CLASS_STATUS = tmpContent_tDBInput_15;
								}
							} else {
								row12.NICE_CLASS_STATUS = null;
							}
						}
						if (colQtyInRs_tDBInput_15 < 9) {
							row12.NICE_CLASS_DESCRIPTION = null;
						} else {

							tmpContent_tDBInput_15 = rs_tDBInput_15.getString(9);
							if (tmpContent_tDBInput_15 != null) {
								if (talendToDBList_tDBInput_15.contains(
										rsmd_tDBInput_15.getColumnTypeName(9).toUpperCase(java.util.Locale.ENGLISH))) {
									row12.NICE_CLASS_DESCRIPTION = FormatterUtils.formatUnwithE(tmpContent_tDBInput_15);
								} else {
									row12.NICE_CLASS_DESCRIPTION = tmpContent_tDBInput_15;
								}
							} else {
								row12.NICE_CLASS_DESCRIPTION = null;
							}
						}
						if (colQtyInRs_tDBInput_15 < 10) {
							row12.NICE_CLASS_DESCR_LANG2 = null;
						} else {

							tmpContent_tDBInput_15 = rs_tDBInput_15.getString(10);
							if (tmpContent_tDBInput_15 != null) {
								if (talendToDBList_tDBInput_15.contains(
										rsmd_tDBInput_15.getColumnTypeName(10).toUpperCase(java.util.Locale.ENGLISH))) {
									row12.NICE_CLASS_DESCR_LANG2 = FormatterUtils.formatUnwithE(tmpContent_tDBInput_15);
								} else {
									row12.NICE_CLASS_DESCR_LANG2 = tmpContent_tDBInput_15;
								}
							} else {
								row12.NICE_CLASS_DESCR_LANG2 = null;
							}
						}

						/**
						 * [tDBInput_15 begin ] stop
						 */

						/**
						 * [tDBInput_15 main ] start
						 */

						currentComponent = "tDBInput_15";

						tos_count_tDBInput_15++;

						/**
						 * [tDBInput_15 main ] stop
						 */

						/**
						 * [tDBInput_15 process_data_begin ] start
						 */

						currentComponent = "tDBInput_15";

						/**
						 * [tDBInput_15 process_data_begin ] stop
						 */

						/**
						 * [tMap_5 main ] start
						 */

						currentComponent = "tMap_5";

						if (execStat) {
							runStat.updateStatOnConnection(iterateId, 1, 1

									, "row12"

							);
						}

						boolean hasCasePrimitiveKeyWithNull_tMap_5 = false;

						// ###############################
						// # Input tables (lookups)
						boolean rejectedInnerJoin_tMap_5 = false;
						boolean mainRowRejected_tMap_5 = false;

						///////////////////////////////////////////////
						// Starting Lookup Table "row13"
						///////////////////////////////////////////////

						boolean forceLooprow13 = false;

						row13Struct row13ObjectFromLookup = null;

						if (!rejectedInnerJoin_tMap_5) { // G_TM_M_020

							hasCasePrimitiveKeyWithNull_tMap_5 = false;

							row13HashKey.FILE_SEQ = row12.FILE_SEQ;

							row13HashKey.FILE_TYPE = row12.FILE_TYPE;

							row13HashKey.FILE_SERIES = row12.FILE_SERIES;

							row13HashKey.FILE_NBR = row12.FILE_NBR;

							row13HashKey.hashCodeDirty = true;

							tHash_Lookup_row13.lookup(row13HashKey);

							if (!tHash_Lookup_row13.hasNext()) { // G_TM_M_090

								rejectedInnerJoin_tMap_5 = true;

								forceLooprow13 = true;

							} // G_TM_M_090

						} // G_TM_M_020

						else { // G 20 - G 21
							forceLooprow13 = true;
						} // G 21

						row13Struct row13 = null;

						while ((tHash_Lookup_row13 != null && tHash_Lookup_row13.hasNext()) || forceLooprow13) { // G_TM_M_043

							// CALL close loop of lookup 'row13'

							row13Struct fromLookup_row13 = null;
							row13 = row13Default;

							if (!forceLooprow13) { // G 46

								fromLookup_row13 = tHash_Lookup_row13.next();

								if (fromLookup_row13 != null) {
									row13 = fromLookup_row13;
								}

							} // G 46

							forceLooprow13 = false;

							// ###############################
							{ // start of Var scope

								// ###############################
								// # Vars tables

								Var__tMap_5__Struct Var = Var__tMap_5;// ###############################
								// ###############################
								// # Output tables

								wrk_nice = null;

								if (!rejectedInnerJoin_tMap_5) {

// # Output table : 'wrk_nice'
									wrk_nice_tmp.FILE_SEQ = row13.FILE_SEQ;
									wrk_nice_tmp.FILE_TYPE = row13.FILE_TYPE;
									wrk_nice_tmp.FILE_SERIES = row13.FILE_SERIES;
									wrk_nice_tmp.FILE_NBR = row13.FILE_NBR;
									wrk_nice_tmp.NICE_CLASS_VERSION = row12.NICE_CLASS_VERSION;
									wrk_nice_tmp.NICE_CLASS_EDITION = row12.NICE_CLASS_EDITION;
									wrk_nice_tmp.NICE_CLASS_NBR = row12.NICE_CLASS_NBR;
									wrk_nice_tmp.NICE_CLASS_STATUS = row12.NICE_CLASS_STATUS;
									wrk_nice_tmp.NICE_CLASS_DESCRIPTION = row12.NICE_CLASS_DESCRIPTION;
									wrk_nice_tmp.NICE_CLASS_DESCR_LANG2 = row12.NICE_CLASS_DESCR_LANG2;
									wrk_nice = wrk_nice_tmp;
								} // closing inner join bracket (2)
// ###############################

							} // end of Var scope

							rejectedInnerJoin_tMap_5 = false;

							tos_count_tMap_5++;

							/**
							 * [tMap_5 main ] stop
							 */

							/**
							 * [tMap_5 process_data_begin ] start
							 */

							currentComponent = "tMap_5";

							/**
							 * [tMap_5 process_data_begin ] stop
							 */
// Start of branch "wrk_nice"
							if (wrk_nice != null) {
								row14 = null;

								/**
								 * [tDBOutput_5 main ] start
								 */

								currentComponent = "tDBOutput_5";

								if (execStat) {
									runStat.updateStatOnConnection(iterateId, 1, 1

											, "wrk_nice"

									);
								}

								row14 = null;
								whetherReject_tDBOutput_5 = false;
								try {
									if (wrk_nice.FILE_SEQ == null) {
										pstmt_tDBOutput_5.setNull(1, java.sql.Types.VARCHAR);
									} else {
										pstmt_tDBOutput_5.setString(1, wrk_nice.FILE_SEQ);
									}

									if (wrk_nice.FILE_TYPE == null) {
										pstmt_tDBOutput_5.setNull(2, java.sql.Types.VARCHAR);
									} else {
										pstmt_tDBOutput_5.setString(2, wrk_nice.FILE_TYPE);
									}

									pstmt_tDBOutput_5.setBigDecimal(3, wrk_nice.FILE_SERIES);

									pstmt_tDBOutput_5.setBigDecimal(4, wrk_nice.FILE_NBR);

									if (wrk_nice.NICE_CLASS_VERSION == null) {
										pstmt_tDBOutput_5.setNull(5, java.sql.Types.VARCHAR);
									} else {
										pstmt_tDBOutput_5.setString(5, wrk_nice.NICE_CLASS_VERSION);
									}

									pstmt_tDBOutput_5.setBigDecimal(6, wrk_nice.NICE_CLASS_EDITION);

									pstmt_tDBOutput_5.setBigDecimal(7, wrk_nice.NICE_CLASS_NBR);

									if (wrk_nice.NICE_CLASS_STATUS == null) {
										pstmt_tDBOutput_5.setNull(8, java.sql.Types.VARCHAR);
									} else {
										pstmt_tDBOutput_5.setString(8, wrk_nice.NICE_CLASS_STATUS);
									}

									if (wrk_nice.NICE_CLASS_DESCRIPTION == null) {
										pstmt_tDBOutput_5.setNull(9, java.sql.Types.VARCHAR);
									} else {
										pstmt_tDBOutput_5.setString(9, wrk_nice.NICE_CLASS_DESCRIPTION);
									}

									if (wrk_nice.NICE_CLASS_DESCR_LANG2 == null) {
										pstmt_tDBOutput_5.setNull(10, java.sql.Types.VARCHAR);
									} else {
										pstmt_tDBOutput_5.setString(10, wrk_nice.NICE_CLASS_DESCR_LANG2);
									}

									nb_line_tDBOutput_5++;
									insertedCount_tDBOutput_5 = insertedCount_tDBOutput_5
											+ pstmt_tDBOutput_5.executeUpdate();
								} catch (java.lang.Exception e) {
									whetherReject_tDBOutput_5 = true;
									row14 = new row14Struct();
									row14.FILE_SEQ = wrk_nice.FILE_SEQ;
									row14.FILE_TYPE = wrk_nice.FILE_TYPE;
									row14.FILE_SERIES = wrk_nice.FILE_SERIES;
									row14.FILE_NBR = wrk_nice.FILE_NBR;
									row14.NICE_CLASS_VERSION = wrk_nice.NICE_CLASS_VERSION;
									row14.NICE_CLASS_EDITION = wrk_nice.NICE_CLASS_EDITION;
									row14.NICE_CLASS_NBR = wrk_nice.NICE_CLASS_NBR;
									row14.NICE_CLASS_STATUS = wrk_nice.NICE_CLASS_STATUS;
									row14.NICE_CLASS_DESCRIPTION = wrk_nice.NICE_CLASS_DESCRIPTION;
									row14.NICE_CLASS_DESCR_LANG2 = wrk_nice.NICE_CLASS_DESCR_LANG2;
									rejectedCount_tDBOutput_5 = rejectedCount_tDBOutput_5 + 1;
									row14.errorCode = ((java.sql.SQLException) e).getSQLState();
									row14.errorMessage = e.getMessage() + " - Line: " + tos_count_tDBOutput_5;
								}
								if (!whetherReject_tDBOutput_5) {
								}
								////////// batch execute by batch size///////
								class LimitBytesHelper_tDBOutput_5 {
									public int limitBytePart1(int counter, java.sql.PreparedStatement pstmt_tDBOutput_5)
											throws Exception {
										try {

											for (int countEach_tDBOutput_5 : pstmt_tDBOutput_5.executeBatch()) {
												if (countEach_tDBOutput_5 == -2 || countEach_tDBOutput_5 == -3) {
													break;
												}
												counter += countEach_tDBOutput_5;
											}

										} catch (java.sql.BatchUpdateException e) {

											int countSum_tDBOutput_5 = 0;
											for (int countEach_tDBOutput_5 : e.getUpdateCounts()) {
												counter += (countEach_tDBOutput_5 < 0 ? 0 : countEach_tDBOutput_5);
											}

											System.err.println(e.getMessage());

										}
										return counter;
									}

									public int limitBytePart2(int counter, java.sql.PreparedStatement pstmt_tDBOutput_5)
											throws Exception {
										try {

											for (int countEach_tDBOutput_5 : pstmt_tDBOutput_5.executeBatch()) {
												if (countEach_tDBOutput_5 == -2 || countEach_tDBOutput_5 == -3) {
													break;
												}
												counter += countEach_tDBOutput_5;
											}

										} catch (java.sql.BatchUpdateException e) {

											for (int countEach_tDBOutput_5 : e.getUpdateCounts()) {
												counter += (countEach_tDBOutput_5 < 0 ? 0 : countEach_tDBOutput_5);
											}

											System.err.println(e.getMessage());

										}
										return counter;
									}
								}

								//////////// commit every////////////

								commitCounter_tDBOutput_5++;
								if (commitEvery_tDBOutput_5 <= commitCounter_tDBOutput_5) {

									conn_tDBOutput_5.commit();

									commitCounter_tDBOutput_5 = 0;
								}

								tos_count_tDBOutput_5++;

								/**
								 * [tDBOutput_5 main ] stop
								 */

								/**
								 * [tDBOutput_5 process_data_begin ] start
								 */

								currentComponent = "tDBOutput_5";

								/**
								 * [tDBOutput_5 process_data_begin ] stop
								 */
// Start of branch "row14"
								if (row14 != null) {

									/**
									 * [tLogRow_5 main ] start
									 */

									currentComponent = "tLogRow_5";

									if (execStat) {
										runStat.updateStatOnConnection(iterateId, 1, 1

												, "row14"

										);
									}

///////////////////////		

									strBuffer_tLogRow_5 = new StringBuilder();

									if (row14.FILE_SEQ != null) { //

										strBuffer_tLogRow_5.append(String.valueOf(row14.FILE_SEQ));

									} //

									strBuffer_tLogRow_5.append("|");

									if (row14.FILE_TYPE != null) { //

										strBuffer_tLogRow_5.append(String.valueOf(row14.FILE_TYPE));

									} //

									strBuffer_tLogRow_5.append("|");

									if (row14.FILE_SERIES != null) { //

										strBuffer_tLogRow_5.append(row14.FILE_SERIES
												.setScale(0, java.math.RoundingMode.HALF_UP).toPlainString());

									} //

									strBuffer_tLogRow_5.append("|");

									if (row14.FILE_NBR != null) { //

										strBuffer_tLogRow_5.append(row14.FILE_NBR
												.setScale(0, java.math.RoundingMode.HALF_UP).toPlainString());

									} //

									strBuffer_tLogRow_5.append("|");

									if (row14.NICE_CLASS_VERSION != null) { //

										strBuffer_tLogRow_5.append(String.valueOf(row14.NICE_CLASS_VERSION));

									} //

									strBuffer_tLogRow_5.append("|");

									if (row14.NICE_CLASS_EDITION != null) { //

										strBuffer_tLogRow_5.append(row14.NICE_CLASS_EDITION
												.setScale(0, java.math.RoundingMode.HALF_UP).toPlainString());

									} //

									strBuffer_tLogRow_5.append("|");

									if (row14.NICE_CLASS_NBR != null) { //

										strBuffer_tLogRow_5.append(row14.NICE_CLASS_NBR
												.setScale(0, java.math.RoundingMode.HALF_UP).toPlainString());

									} //

									strBuffer_tLogRow_5.append("|");

									if (row14.NICE_CLASS_STATUS != null) { //

										strBuffer_tLogRow_5.append(String.valueOf(row14.NICE_CLASS_STATUS));

									} //

									strBuffer_tLogRow_5.append("|");

									if (row14.NICE_CLASS_DESCRIPTION != null) { //

										strBuffer_tLogRow_5.append(String.valueOf(row14.NICE_CLASS_DESCRIPTION));

									} //

									strBuffer_tLogRow_5.append("|");

									if (row14.NICE_CLASS_DESCR_LANG2 != null) { //

										strBuffer_tLogRow_5.append(String.valueOf(row14.NICE_CLASS_DESCR_LANG2));

									} //

									strBuffer_tLogRow_5.append("|");

									if (row14.errorCode != null) { //

										strBuffer_tLogRow_5.append(String.valueOf(row14.errorCode));

									} //

									strBuffer_tLogRow_5.append("|");

									if (row14.errorMessage != null) { //

										strBuffer_tLogRow_5.append(String.valueOf(row14.errorMessage));

									} //

									if (globalMap.get("tLogRow_CONSOLE") != null) {
										consoleOut_tLogRow_5 = (java.io.PrintStream) globalMap.get("tLogRow_CONSOLE");
									} else {
										consoleOut_tLogRow_5 = new java.io.PrintStream(
												new java.io.BufferedOutputStream(System.out));
										globalMap.put("tLogRow_CONSOLE", consoleOut_tLogRow_5);
									}
									consoleOut_tLogRow_5.println(strBuffer_tLogRow_5.toString());
									consoleOut_tLogRow_5.flush();
									nb_line_tLogRow_5++;
//////

//////                    

///////////////////////    			

									tos_count_tLogRow_5++;

									/**
									 * [tLogRow_5 main ] stop
									 */

									/**
									 * [tLogRow_5 process_data_begin ] start
									 */

									currentComponent = "tLogRow_5";

									/**
									 * [tLogRow_5 process_data_begin ] stop
									 */

									/**
									 * [tLogRow_5 process_data_end ] start
									 */

									currentComponent = "tLogRow_5";

									/**
									 * [tLogRow_5 process_data_end ] stop
									 */

								} // End of branch "row14"

								/**
								 * [tDBOutput_5 process_data_end ] start
								 */

								currentComponent = "tDBOutput_5";

								/**
								 * [tDBOutput_5 process_data_end ] stop
								 */

							} // End of branch "wrk_nice"

						} // close loop of lookup 'row13' // G_TM_M_043

						/**
						 * [tMap_5 process_data_end ] start
						 */

						currentComponent = "tMap_5";

						/**
						 * [tMap_5 process_data_end ] stop
						 */

						/**
						 * [tDBInput_15 process_data_end ] start
						 */

						currentComponent = "tDBInput_15";

						/**
						 * [tDBInput_15 process_data_end ] stop
						 */

						/**
						 * [tDBInput_15 end ] start
						 */

						currentComponent = "tDBInput_15";

					}
				} finally {
					if (rs_tDBInput_15 != null) {
						rs_tDBInput_15.close();
					}
					if (stmt_tDBInput_15 != null) {
						stmt_tDBInput_15.close();
					}
					if (conn_tDBInput_15 != null && !conn_tDBInput_15.isClosed()) {

						conn_tDBInput_15.close();

						if ("com.mysql.cj.jdbc.Driver".equals((String) globalMap.get("driverClass_"))
								&& routines.system.BundleUtils.inOSGi()) {
							Class.forName("com.mysql.cj.jdbc.AbandonedConnectionCleanupThread")
									.getMethod("checkedShutdown").invoke(null, (Object[]) null);
						}

					}
				}
				globalMap.put("tDBInput_15_NB_LINE", nb_line_tDBInput_15);

				ok_Hash.put("tDBInput_15", true);
				end_Hash.put("tDBInput_15", System.currentTimeMillis());

				/**
				 * [tDBInput_15 end ] stop
				 */

				/**
				 * [tMap_5 end ] start
				 */

				currentComponent = "tMap_5";

// ###############################
// # Lookup hashes releasing
				if (tHash_Lookup_row13 != null) {
					tHash_Lookup_row13.endGet();
				}
				globalMap.remove("tHash_Lookup_row13");

// ###############################      

				if (execStat) {
					runStat.updateStat(resourceMap, iterateId, 2, 0, "row12");
				}

				ok_Hash.put("tMap_5", true);
				end_Hash.put("tMap_5", System.currentTimeMillis());

				/**
				 * [tMap_5 end ] stop
				 */

				/**
				 * [tDBOutput_5 end ] start
				 */

				currentComponent = "tDBOutput_5";

				if (pstmt_tDBOutput_5 != null) {

					pstmt_tDBOutput_5.close();
					resourceMap.remove("pstmt_tDBOutput_5");

				}
				resourceMap.put("statementClosed_tDBOutput_5", true);
				conn_tDBOutput_5.commit();

				conn_tDBOutput_5.close();
				resourceMap.put("finish_tDBOutput_5", true);

				nb_line_deleted_tDBOutput_5 = nb_line_deleted_tDBOutput_5 + deletedCount_tDBOutput_5;
				nb_line_update_tDBOutput_5 = nb_line_update_tDBOutput_5 + updatedCount_tDBOutput_5;
				nb_line_inserted_tDBOutput_5 = nb_line_inserted_tDBOutput_5 + insertedCount_tDBOutput_5;
				nb_line_rejected_tDBOutput_5 = nb_line_rejected_tDBOutput_5 + rejectedCount_tDBOutput_5;

				globalMap.put("tDBOutput_5_NB_LINE", nb_line_tDBOutput_5);
				globalMap.put("tDBOutput_5_NB_LINE_UPDATED", nb_line_update_tDBOutput_5);
				globalMap.put("tDBOutput_5_NB_LINE_INSERTED", nb_line_inserted_tDBOutput_5);
				globalMap.put("tDBOutput_5_NB_LINE_DELETED", nb_line_deleted_tDBOutput_5);
				globalMap.put("tDBOutput_5_NB_LINE_REJECTED", nb_line_rejected_tDBOutput_5);

				if (execStat) {
					runStat.updateStat(resourceMap, iterateId, 2, 0, "wrk_nice");
				}

				ok_Hash.put("tDBOutput_5", true);
				end_Hash.put("tDBOutput_5", System.currentTimeMillis());

				/**
				 * [tDBOutput_5 end ] stop
				 */

				/**
				 * [tLogRow_5 end ] start
				 */

				currentComponent = "tLogRow_5";

//////
//////
				globalMap.put("tLogRow_5_NB_LINE", nb_line_tLogRow_5);

///////////////////////    			

				if (execStat) {
					runStat.updateStat(resourceMap, iterateId, 2, 0, "row14");
				}

				ok_Hash.put("tLogRow_5", true);
				end_Hash.put("tLogRow_5", System.currentTimeMillis());

				/**
				 * [tLogRow_5 end ] stop
				 */

			} // end the resume

			if (resumeEntryMethodName == null || globalResumeTicket) {
				resumeUtil.addLog("CHECKPOINT", "CONNECTION:SUBJOB_OK:tDBInput_15:OnSubjobOk", "",
						Thread.currentThread().getId() + "", "", "", "", "", "");
			}

			if (execStat) {
				runStat.updateStatOnConnection("OnSubjobOk10", 0, "ok");
			}

			tDBInput_17Process(globalMap);

		} catch (java.lang.Exception e) {

			TalendException te = new TalendException(e, currentComponent, globalMap);

			throw te;
		} catch (java.lang.Error error) {

			runStat.stopThreadStat();

			throw error;
		} finally {

			// free memory for "tMap_5"
			globalMap.remove("tHash_Lookup_row13");

			try {

				/**
				 * [tDBInput_15 finally ] start
				 */

				currentComponent = "tDBInput_15";

				/**
				 * [tDBInput_15 finally ] stop
				 */

				/**
				 * [tMap_5 finally ] start
				 */

				currentComponent = "tMap_5";

				/**
				 * [tMap_5 finally ] stop
				 */

				/**
				 * [tDBOutput_5 finally ] start
				 */

				currentComponent = "tDBOutput_5";

				try {
					if (resourceMap.get("statementClosed_tDBOutput_5") == null) {
						java.sql.PreparedStatement pstmtToClose_tDBOutput_5 = null;
						if ((pstmtToClose_tDBOutput_5 = (java.sql.PreparedStatement) resourceMap
								.remove("pstmt_tDBOutput_5")) != null) {
							pstmtToClose_tDBOutput_5.close();
						}
					}
				} finally {
					if (resourceMap.get("finish_tDBOutput_5") == null) {
						java.sql.Connection ctn_tDBOutput_5 = null;
						if ((ctn_tDBOutput_5 = (java.sql.Connection) resourceMap.get("conn_tDBOutput_5")) != null) {
							try {
								ctn_tDBOutput_5.close();
							} catch (java.sql.SQLException sqlEx_tDBOutput_5) {
								String errorMessage_tDBOutput_5 = "failed to close the connection in tDBOutput_5 :"
										+ sqlEx_tDBOutput_5.getMessage();
								System.err.println(errorMessage_tDBOutput_5);
							}
						}
					}
				}

				/**
				 * [tDBOutput_5 finally ] stop
				 */

				/**
				 * [tLogRow_5 finally ] start
				 */

				currentComponent = "tLogRow_5";

				/**
				 * [tLogRow_5 finally ] stop
				 */

			} catch (java.lang.Exception e) {
				// ignore
			} catch (java.lang.Error error) {
				// ignore
			}
			resourceMap = null;
		}

		globalMap.put("tDBInput_15_SUBPROCESS_STATE", 1);
	}

	public static class row17Struct implements routines.system.IPersistableRow<row17Struct> {
		final static byte[] commonByteArrayLock_WIPO_PROJECTS_G2b_Mig_TM = new byte[0];
		static byte[] commonByteArray_WIPO_PROJECTS_G2b_Mig_TM = new byte[0];
		protected static final int DEFAULT_HASHCODE = 1;
		protected static final int PRIME = 31;
		protected int hashCode = DEFAULT_HASHCODE;
		public boolean hashCodeDirty = true;

		public String loopKey;

		public String FILE_SEQ;

		public String getFILE_SEQ() {
			return this.FILE_SEQ;
		}

		public String FILE_TYPE;

		public String getFILE_TYPE() {
			return this.FILE_TYPE;
		}

		public BigDecimal FILE_SERIES;

		public BigDecimal getFILE_SERIES() {
			return this.FILE_SERIES;
		}

		public BigDecimal FILE_NBR;

		public BigDecimal getFILE_NBR() {
			return this.FILE_NBR;
		}

		public String ACTION_TYPE;

		public String getACTION_TYPE() {
			return this.ACTION_TYPE;
		}

		public java.util.Date ACTION_DATE;

		public java.util.Date getACTION_DATE() {
			return this.ACTION_DATE;
		}

		public java.util.Date MANUAL_DUE_DATE;

		public java.util.Date getMANUAL_DUE_DATE() {
			return this.MANUAL_DUE_DATE;
		}

		public BigDecimal RESPONSIBLE_USER;

		public BigDecimal getRESPONSIBLE_USER() {
			return this.RESPONSIBLE_USER;
		}

		public String ACTION_NOTES1;

		public String getACTION_NOTES1() {
			return this.ACTION_NOTES1;
		}

		public String ACTION_NOTES2;

		public String getACTION_NOTES2() {
			return this.ACTION_NOTES2;
		}

		public String ACTION_NOTES3;

		public String getACTION_NOTES3() {
			return this.ACTION_NOTES3;
		}

		public String ACTION_NOTES4;

		public String getACTION_NOTES4() {
			return this.ACTION_NOTES4;
		}

		public String ACTION_NOTES5;

		public String getACTION_NOTES5() {
			return this.ACTION_NOTES5;
		}

		public String GENERAL_NOTES;

		public String getGENERAL_NOTES() {
			return this.GENERAL_NOTES;
		}

		public String SELECTED_OPTIONS_TEXT;

		public String getSELECTED_OPTIONS_TEXT() {
			return this.SELECTED_OPTIONS_TEXT;
		}

		public BigDecimal ACTION_USER;

		public BigDecimal getACTION_USER() {
			return this.ACTION_USER;
		}

		public String ACTION_CATEGORY;

		public String getACTION_CATEGORY() {
			return this.ACTION_CATEGORY;
		}

		public String SPECIAL_FINAL_STATUS;

		public String getSPECIAL_FINAL_STATUS() {
			return this.SPECIAL_FINAL_STATUS;
		}

		public String JOURNAL_CODE;

		public String getJOURNAL_CODE() {
			return this.JOURNAL_CODE;
		}

		public java.util.Date PUBLICATION_DATE;

		public java.util.Date getPUBLICATION_DATE() {
			return this.PUBLICATION_DATE;
		}

		public String IPAS_PROC_TYP;

		public String getIPAS_PROC_TYP() {
			return this.IPAS_PROC_TYP;
		}

		public BigDecimal IPAS_PROC_NBR;

		public BigDecimal getIPAS_PROC_NBR() {
			return this.IPAS_PROC_NBR;
		}

		public BigDecimal IPAS_ACTION_NBR;

		public BigDecimal getIPAS_ACTION_NBR() {
			return this.IPAS_ACTION_NBR;
		}

		public BigDecimal ACTION_NBR;

		public BigDecimal getACTION_NBR() {
			return this.ACTION_NBR;
		}

		public String errorCode;

		public String getErrorCode() {
			return this.errorCode;
		}

		public String errorMessage;

		public String getErrorMessage() {
			return this.errorMessage;
		}

		@Override
		public int hashCode() {
			if (this.hashCodeDirty) {
				final int prime = PRIME;
				int result = DEFAULT_HASHCODE;

				result = prime * result + ((this.FILE_SEQ == null) ? 0 : this.FILE_SEQ.hashCode());

				result = prime * result + ((this.FILE_TYPE == null) ? 0 : this.FILE_TYPE.hashCode());

				result = prime * result + ((this.FILE_SERIES == null) ? 0 : this.FILE_SERIES.hashCode());

				result = prime * result + ((this.FILE_NBR == null) ? 0 : this.FILE_NBR.hashCode());

				result = prime * result + ((this.ACTION_TYPE == null) ? 0 : this.ACTION_TYPE.hashCode());

				result = prime * result + ((this.ACTION_DATE == null) ? 0 : this.ACTION_DATE.hashCode());

				this.hashCode = result;
				this.hashCodeDirty = false;
			}
			return this.hashCode;
		}

		@Override
		public boolean equals(Object obj) {
			if (this == obj)
				return true;
			if (obj == null)
				return false;
			if (getClass() != obj.getClass())
				return false;
			final row17Struct other = (row17Struct) obj;

			if (this.FILE_SEQ == null) {
				if (other.FILE_SEQ != null)
					return false;

			} else if (!this.FILE_SEQ.equals(other.FILE_SEQ))

				return false;

			if (this.FILE_TYPE == null) {
				if (other.FILE_TYPE != null)
					return false;

			} else if (!this.FILE_TYPE.equals(other.FILE_TYPE))

				return false;

			if (this.FILE_SERIES == null) {
				if (other.FILE_SERIES != null)
					return false;

			} else if (!this.FILE_SERIES.equals(other.FILE_SERIES))

				return false;

			if (this.FILE_NBR == null) {
				if (other.FILE_NBR != null)
					return false;

			} else if (!this.FILE_NBR.equals(other.FILE_NBR))

				return false;

			if (this.ACTION_TYPE == null) {
				if (other.ACTION_TYPE != null)
					return false;

			} else if (!this.ACTION_TYPE.equals(other.ACTION_TYPE))

				return false;

			if (this.ACTION_DATE == null) {
				if (other.ACTION_DATE != null)
					return false;

			} else if (!this.ACTION_DATE.equals(other.ACTION_DATE))

				return false;

			return true;
		}

		public void copyDataTo(row17Struct other) {

			other.FILE_SEQ = this.FILE_SEQ;
			other.FILE_TYPE = this.FILE_TYPE;
			other.FILE_SERIES = this.FILE_SERIES;
			other.FILE_NBR = this.FILE_NBR;
			other.ACTION_TYPE = this.ACTION_TYPE;
			other.ACTION_DATE = this.ACTION_DATE;
			other.MANUAL_DUE_DATE = this.MANUAL_DUE_DATE;
			other.RESPONSIBLE_USER = this.RESPONSIBLE_USER;
			other.ACTION_NOTES1 = this.ACTION_NOTES1;
			other.ACTION_NOTES2 = this.ACTION_NOTES2;
			other.ACTION_NOTES3 = this.ACTION_NOTES3;
			other.ACTION_NOTES4 = this.ACTION_NOTES4;
			other.ACTION_NOTES5 = this.ACTION_NOTES5;
			other.GENERAL_NOTES = this.GENERAL_NOTES;
			other.SELECTED_OPTIONS_TEXT = this.SELECTED_OPTIONS_TEXT;
			other.ACTION_USER = this.ACTION_USER;
			other.ACTION_CATEGORY = this.ACTION_CATEGORY;
			other.SPECIAL_FINAL_STATUS = this.SPECIAL_FINAL_STATUS;
			other.JOURNAL_CODE = this.JOURNAL_CODE;
			other.PUBLICATION_DATE = this.PUBLICATION_DATE;
			other.IPAS_PROC_TYP = this.IPAS_PROC_TYP;
			other.IPAS_PROC_NBR = this.IPAS_PROC_NBR;
			other.IPAS_ACTION_NBR = this.IPAS_ACTION_NBR;
			other.ACTION_NBR = this.ACTION_NBR;
			other.errorCode = this.errorCode;
			other.errorMessage = this.errorMessage;

		}

		public void copyKeysDataTo(row17Struct other) {

			other.FILE_SEQ = this.FILE_SEQ;
			other.FILE_TYPE = this.FILE_TYPE;
			other.FILE_SERIES = this.FILE_SERIES;
			other.FILE_NBR = this.FILE_NBR;
			other.ACTION_TYPE = this.ACTION_TYPE;
			other.ACTION_DATE = this.ACTION_DATE;

		}

		private String readString(ObjectInputStream dis) throws IOException {
			String strReturn = null;
			int length = 0;
			length = dis.readInt();
			if (length == -1) {
				strReturn = null;
			} else {
				if (length > commonByteArray_WIPO_PROJECTS_G2b_Mig_TM.length) {
					if (length < 1024 && commonByteArray_WIPO_PROJECTS_G2b_Mig_TM.length == 0) {
						commonByteArray_WIPO_PROJECTS_G2b_Mig_TM = new byte[1024];
					} else {
						commonByteArray_WIPO_PROJECTS_G2b_Mig_TM = new byte[2 * length];
					}
				}
				dis.readFully(commonByteArray_WIPO_PROJECTS_G2b_Mig_TM, 0, length);
				strReturn = new String(commonByteArray_WIPO_PROJECTS_G2b_Mig_TM, 0, length, utf8Charset);
			}
			return strReturn;
		}

		private void writeString(String str, ObjectOutputStream dos) throws IOException {
			if (str == null) {
				dos.writeInt(-1);
			} else {
				byte[] byteArray = str.getBytes(utf8Charset);
				dos.writeInt(byteArray.length);
				dos.write(byteArray);
			}
		}

		private java.util.Date readDate(ObjectInputStream dis) throws IOException {
			java.util.Date dateReturn = null;
			int length = 0;
			length = dis.readByte();
			if (length == -1) {
				dateReturn = null;
			} else {
				dateReturn = new Date(dis.readLong());
			}
			return dateReturn;
		}

		private void writeDate(java.util.Date date1, ObjectOutputStream dos) throws IOException {
			if (date1 == null) {
				dos.writeByte(-1);
			} else {
				dos.writeByte(0);
				dos.writeLong(date1.getTime());
			}
		}

		public void readData(ObjectInputStream dis) {

			synchronized (commonByteArrayLock_WIPO_PROJECTS_G2b_Mig_TM) {

				try {

					int length = 0;

					this.FILE_SEQ = readString(dis);

					this.FILE_TYPE = readString(dis);

					this.FILE_SERIES = (BigDecimal) dis.readObject();

					this.FILE_NBR = (BigDecimal) dis.readObject();

					this.ACTION_TYPE = readString(dis);

					this.ACTION_DATE = readDate(dis);

					this.MANUAL_DUE_DATE = readDate(dis);

					this.RESPONSIBLE_USER = (BigDecimal) dis.readObject();

					this.ACTION_NOTES1 = readString(dis);

					this.ACTION_NOTES2 = readString(dis);

					this.ACTION_NOTES3 = readString(dis);

					this.ACTION_NOTES4 = readString(dis);

					this.ACTION_NOTES5 = readString(dis);

					this.GENERAL_NOTES = readString(dis);

					this.SELECTED_OPTIONS_TEXT = readString(dis);

					this.ACTION_USER = (BigDecimal) dis.readObject();

					this.ACTION_CATEGORY = readString(dis);

					this.SPECIAL_FINAL_STATUS = readString(dis);

					this.JOURNAL_CODE = readString(dis);

					this.PUBLICATION_DATE = readDate(dis);

					this.IPAS_PROC_TYP = readString(dis);

					this.IPAS_PROC_NBR = (BigDecimal) dis.readObject();

					this.IPAS_ACTION_NBR = (BigDecimal) dis.readObject();

					this.ACTION_NBR = (BigDecimal) dis.readObject();

					this.errorCode = readString(dis);

					this.errorMessage = readString(dis);

				} catch (IOException e) {
					throw new RuntimeException(e);

				} catch (ClassNotFoundException eCNFE) {
					throw new RuntimeException(eCNFE);

				}

			}

		}

		public void writeData(ObjectOutputStream dos) {
			try {

				// String

				writeString(this.FILE_SEQ, dos);

				// String

				writeString(this.FILE_TYPE, dos);

				// BigDecimal

				dos.writeObject(this.FILE_SERIES);

				// BigDecimal

				dos.writeObject(this.FILE_NBR);

				// String

				writeString(this.ACTION_TYPE, dos);

				// java.util.Date

				writeDate(this.ACTION_DATE, dos);

				// java.util.Date

				writeDate(this.MANUAL_DUE_DATE, dos);

				// BigDecimal

				dos.writeObject(this.RESPONSIBLE_USER);

				// String

				writeString(this.ACTION_NOTES1, dos);

				// String

				writeString(this.ACTION_NOTES2, dos);

				// String

				writeString(this.ACTION_NOTES3, dos);

				// String

				writeString(this.ACTION_NOTES4, dos);

				// String

				writeString(this.ACTION_NOTES5, dos);

				// String

				writeString(this.GENERAL_NOTES, dos);

				// String

				writeString(this.SELECTED_OPTIONS_TEXT, dos);

				// BigDecimal

				dos.writeObject(this.ACTION_USER);

				// String

				writeString(this.ACTION_CATEGORY, dos);

				// String

				writeString(this.SPECIAL_FINAL_STATUS, dos);

				// String

				writeString(this.JOURNAL_CODE, dos);

				// java.util.Date

				writeDate(this.PUBLICATION_DATE, dos);

				// String

				writeString(this.IPAS_PROC_TYP, dos);

				// BigDecimal

				dos.writeObject(this.IPAS_PROC_NBR);

				// BigDecimal

				dos.writeObject(this.IPAS_ACTION_NBR);

				// BigDecimal

				dos.writeObject(this.ACTION_NBR);

				// String

				writeString(this.errorCode, dos);

				// String

				writeString(this.errorMessage, dos);

			} catch (IOException e) {
				throw new RuntimeException(e);
			}

		}

		public String toString() {

			StringBuilder sb = new StringBuilder();
			sb.append(super.toString());
			sb.append("[");
			sb.append("FILE_SEQ=" + FILE_SEQ);
			sb.append(",FILE_TYPE=" + FILE_TYPE);
			sb.append(",FILE_SERIES=" + String.valueOf(FILE_SERIES));
			sb.append(",FILE_NBR=" + String.valueOf(FILE_NBR));
			sb.append(",ACTION_TYPE=" + ACTION_TYPE);
			sb.append(",ACTION_DATE=" + String.valueOf(ACTION_DATE));
			sb.append(",MANUAL_DUE_DATE=" + String.valueOf(MANUAL_DUE_DATE));
			sb.append(",RESPONSIBLE_USER=" + String.valueOf(RESPONSIBLE_USER));
			sb.append(",ACTION_NOTES1=" + ACTION_NOTES1);
			sb.append(",ACTION_NOTES2=" + ACTION_NOTES2);
			sb.append(",ACTION_NOTES3=" + ACTION_NOTES3);
			sb.append(",ACTION_NOTES4=" + ACTION_NOTES4);
			sb.append(",ACTION_NOTES5=" + ACTION_NOTES5);
			sb.append(",GENERAL_NOTES=" + GENERAL_NOTES);
			sb.append(",SELECTED_OPTIONS_TEXT=" + SELECTED_OPTIONS_TEXT);
			sb.append(",ACTION_USER=" + String.valueOf(ACTION_USER));
			sb.append(",ACTION_CATEGORY=" + ACTION_CATEGORY);
			sb.append(",SPECIAL_FINAL_STATUS=" + SPECIAL_FINAL_STATUS);
			sb.append(",JOURNAL_CODE=" + JOURNAL_CODE);
			sb.append(",PUBLICATION_DATE=" + String.valueOf(PUBLICATION_DATE));
			sb.append(",IPAS_PROC_TYP=" + IPAS_PROC_TYP);
			sb.append(",IPAS_PROC_NBR=" + String.valueOf(IPAS_PROC_NBR));
			sb.append(",IPAS_ACTION_NBR=" + String.valueOf(IPAS_ACTION_NBR));
			sb.append(",ACTION_NBR=" + String.valueOf(ACTION_NBR));
			sb.append(",errorCode=" + errorCode);
			sb.append(",errorMessage=" + errorMessage);
			sb.append("]");

			return sb.toString();
		}

		/**
		 * Compare keys
		 */
		public int compareTo(row17Struct other) {

			int returnValue = -1;

			returnValue = checkNullsAndCompare(this.FILE_SEQ, other.FILE_SEQ);
			if (returnValue != 0) {
				return returnValue;
			}

			returnValue = checkNullsAndCompare(this.FILE_TYPE, other.FILE_TYPE);
			if (returnValue != 0) {
				return returnValue;
			}

			returnValue = checkNullsAndCompare(this.FILE_SERIES, other.FILE_SERIES);
			if (returnValue != 0) {
				return returnValue;
			}

			returnValue = checkNullsAndCompare(this.FILE_NBR, other.FILE_NBR);
			if (returnValue != 0) {
				return returnValue;
			}

			returnValue = checkNullsAndCompare(this.ACTION_TYPE, other.ACTION_TYPE);
			if (returnValue != 0) {
				return returnValue;
			}

			returnValue = checkNullsAndCompare(this.ACTION_DATE, other.ACTION_DATE);
			if (returnValue != 0) {
				return returnValue;
			}

			return returnValue;
		}

		private int checkNullsAndCompare(Object object1, Object object2) {
			int returnValue = 0;
			if (object1 instanceof Comparable && object2 instanceof Comparable) {
				returnValue = ((Comparable) object1).compareTo(object2);
			} else if (object1 != null && object2 != null) {
				returnValue = compareStrings(object1.toString(), object2.toString());
			} else if (object1 == null && object2 != null) {
				returnValue = 1;
			} else if (object1 != null && object2 == null) {
				returnValue = -1;
			} else {
				returnValue = 0;
			}

			return returnValue;
		}

		private int compareStrings(String string1, String string2) {
			return string1.compareTo(string2);
		}

	}

	public static class wrk_actionsStruct implements routines.system.IPersistableRow<wrk_actionsStruct> {
		final static byte[] commonByteArrayLock_WIPO_PROJECTS_G2b_Mig_TM = new byte[0];
		static byte[] commonByteArray_WIPO_PROJECTS_G2b_Mig_TM = new byte[0];
		protected static final int DEFAULT_HASHCODE = 1;
		protected static final int PRIME = 31;
		protected int hashCode = DEFAULT_HASHCODE;
		public boolean hashCodeDirty = true;

		public String loopKey;

		public String FILE_SEQ;

		public String getFILE_SEQ() {
			return this.FILE_SEQ;
		}

		public String FILE_TYPE;

		public String getFILE_TYPE() {
			return this.FILE_TYPE;
		}

		public BigDecimal FILE_SERIES;

		public BigDecimal getFILE_SERIES() {
			return this.FILE_SERIES;
		}

		public BigDecimal FILE_NBR;

		public BigDecimal getFILE_NBR() {
			return this.FILE_NBR;
		}

		public String ACTION_TYPE;

		public String getACTION_TYPE() {
			return this.ACTION_TYPE;
		}

		public java.util.Date ACTION_DATE;

		public java.util.Date getACTION_DATE() {
			return this.ACTION_DATE;
		}

		public java.util.Date MANUAL_DUE_DATE;

		public java.util.Date getMANUAL_DUE_DATE() {
			return this.MANUAL_DUE_DATE;
		}

		public BigDecimal RESPONSIBLE_USER;

		public BigDecimal getRESPONSIBLE_USER() {
			return this.RESPONSIBLE_USER;
		}

		public String ACTION_NOTES1;

		public String getACTION_NOTES1() {
			return this.ACTION_NOTES1;
		}

		public String ACTION_NOTES2;

		public String getACTION_NOTES2() {
			return this.ACTION_NOTES2;
		}

		public String ACTION_NOTES3;

		public String getACTION_NOTES3() {
			return this.ACTION_NOTES3;
		}

		public String ACTION_NOTES4;

		public String getACTION_NOTES4() {
			return this.ACTION_NOTES4;
		}

		public String ACTION_NOTES5;

		public String getACTION_NOTES5() {
			return this.ACTION_NOTES5;
		}

		public String GENERAL_NOTES;

		public String getGENERAL_NOTES() {
			return this.GENERAL_NOTES;
		}

		public String SELECTED_OPTIONS_TEXT;

		public String getSELECTED_OPTIONS_TEXT() {
			return this.SELECTED_OPTIONS_TEXT;
		}

		public BigDecimal ACTION_USER;

		public BigDecimal getACTION_USER() {
			return this.ACTION_USER;
		}

		public String ACTION_CATEGORY;

		public String getACTION_CATEGORY() {
			return this.ACTION_CATEGORY;
		}

		public String SPECIAL_FINAL_STATUS;

		public String getSPECIAL_FINAL_STATUS() {
			return this.SPECIAL_FINAL_STATUS;
		}

		public String JOURNAL_CODE;

		public String getJOURNAL_CODE() {
			return this.JOURNAL_CODE;
		}

		public java.util.Date PUBLICATION_DATE;

		public java.util.Date getPUBLICATION_DATE() {
			return this.PUBLICATION_DATE;
		}

		public String IPAS_PROC_TYP;

		public String getIPAS_PROC_TYP() {
			return this.IPAS_PROC_TYP;
		}

		public BigDecimal IPAS_PROC_NBR;

		public BigDecimal getIPAS_PROC_NBR() {
			return this.IPAS_PROC_NBR;
		}

		public BigDecimal IPAS_ACTION_NBR;

		public BigDecimal getIPAS_ACTION_NBR() {
			return this.IPAS_ACTION_NBR;
		}

		public BigDecimal ACTION_NBR;

		public BigDecimal getACTION_NBR() {
			return this.ACTION_NBR;
		}

		@Override
		public int hashCode() {
			if (this.hashCodeDirty) {
				final int prime = PRIME;
				int result = DEFAULT_HASHCODE;

				result = prime * result + ((this.FILE_SEQ == null) ? 0 : this.FILE_SEQ.hashCode());

				result = prime * result + ((this.FILE_TYPE == null) ? 0 : this.FILE_TYPE.hashCode());

				result = prime * result + ((this.FILE_SERIES == null) ? 0 : this.FILE_SERIES.hashCode());

				result = prime * result + ((this.FILE_NBR == null) ? 0 : this.FILE_NBR.hashCode());

				result = prime * result + ((this.ACTION_TYPE == null) ? 0 : this.ACTION_TYPE.hashCode());

				result = prime * result + ((this.ACTION_DATE == null) ? 0 : this.ACTION_DATE.hashCode());

				this.hashCode = result;
				this.hashCodeDirty = false;
			}
			return this.hashCode;
		}

		@Override
		public boolean equals(Object obj) {
			if (this == obj)
				return true;
			if (obj == null)
				return false;
			if (getClass() != obj.getClass())
				return false;
			final wrk_actionsStruct other = (wrk_actionsStruct) obj;

			if (this.FILE_SEQ == null) {
				if (other.FILE_SEQ != null)
					return false;

			} else if (!this.FILE_SEQ.equals(other.FILE_SEQ))

				return false;

			if (this.FILE_TYPE == null) {
				if (other.FILE_TYPE != null)
					return false;

			} else if (!this.FILE_TYPE.equals(other.FILE_TYPE))

				return false;

			if (this.FILE_SERIES == null) {
				if (other.FILE_SERIES != null)
					return false;

			} else if (!this.FILE_SERIES.equals(other.FILE_SERIES))

				return false;

			if (this.FILE_NBR == null) {
				if (other.FILE_NBR != null)
					return false;

			} else if (!this.FILE_NBR.equals(other.FILE_NBR))

				return false;

			if (this.ACTION_TYPE == null) {
				if (other.ACTION_TYPE != null)
					return false;

			} else if (!this.ACTION_TYPE.equals(other.ACTION_TYPE))

				return false;

			if (this.ACTION_DATE == null) {
				if (other.ACTION_DATE != null)
					return false;

			} else if (!this.ACTION_DATE.equals(other.ACTION_DATE))

				return false;

			return true;
		}

		public void copyDataTo(wrk_actionsStruct other) {

			other.FILE_SEQ = this.FILE_SEQ;
			other.FILE_TYPE = this.FILE_TYPE;
			other.FILE_SERIES = this.FILE_SERIES;
			other.FILE_NBR = this.FILE_NBR;
			other.ACTION_TYPE = this.ACTION_TYPE;
			other.ACTION_DATE = this.ACTION_DATE;
			other.MANUAL_DUE_DATE = this.MANUAL_DUE_DATE;
			other.RESPONSIBLE_USER = this.RESPONSIBLE_USER;
			other.ACTION_NOTES1 = this.ACTION_NOTES1;
			other.ACTION_NOTES2 = this.ACTION_NOTES2;
			other.ACTION_NOTES3 = this.ACTION_NOTES3;
			other.ACTION_NOTES4 = this.ACTION_NOTES4;
			other.ACTION_NOTES5 = this.ACTION_NOTES5;
			other.GENERAL_NOTES = this.GENERAL_NOTES;
			other.SELECTED_OPTIONS_TEXT = this.SELECTED_OPTIONS_TEXT;
			other.ACTION_USER = this.ACTION_USER;
			other.ACTION_CATEGORY = this.ACTION_CATEGORY;
			other.SPECIAL_FINAL_STATUS = this.SPECIAL_FINAL_STATUS;
			other.JOURNAL_CODE = this.JOURNAL_CODE;
			other.PUBLICATION_DATE = this.PUBLICATION_DATE;
			other.IPAS_PROC_TYP = this.IPAS_PROC_TYP;
			other.IPAS_PROC_NBR = this.IPAS_PROC_NBR;
			other.IPAS_ACTION_NBR = this.IPAS_ACTION_NBR;
			other.ACTION_NBR = this.ACTION_NBR;

		}

		public void copyKeysDataTo(wrk_actionsStruct other) {

			other.FILE_SEQ = this.FILE_SEQ;
			other.FILE_TYPE = this.FILE_TYPE;
			other.FILE_SERIES = this.FILE_SERIES;
			other.FILE_NBR = this.FILE_NBR;
			other.ACTION_TYPE = this.ACTION_TYPE;
			other.ACTION_DATE = this.ACTION_DATE;

		}

		private String readString(ObjectInputStream dis) throws IOException {
			String strReturn = null;
			int length = 0;
			length = dis.readInt();
			if (length == -1) {
				strReturn = null;
			} else {
				if (length > commonByteArray_WIPO_PROJECTS_G2b_Mig_TM.length) {
					if (length < 1024 && commonByteArray_WIPO_PROJECTS_G2b_Mig_TM.length == 0) {
						commonByteArray_WIPO_PROJECTS_G2b_Mig_TM = new byte[1024];
					} else {
						commonByteArray_WIPO_PROJECTS_G2b_Mig_TM = new byte[2 * length];
					}
				}
				dis.readFully(commonByteArray_WIPO_PROJECTS_G2b_Mig_TM, 0, length);
				strReturn = new String(commonByteArray_WIPO_PROJECTS_G2b_Mig_TM, 0, length, utf8Charset);
			}
			return strReturn;
		}

		private void writeString(String str, ObjectOutputStream dos) throws IOException {
			if (str == null) {
				dos.writeInt(-1);
			} else {
				byte[] byteArray = str.getBytes(utf8Charset);
				dos.writeInt(byteArray.length);
				dos.write(byteArray);
			}
		}

		private java.util.Date readDate(ObjectInputStream dis) throws IOException {
			java.util.Date dateReturn = null;
			int length = 0;
			length = dis.readByte();
			if (length == -1) {
				dateReturn = null;
			} else {
				dateReturn = new Date(dis.readLong());
			}
			return dateReturn;
		}

		private void writeDate(java.util.Date date1, ObjectOutputStream dos) throws IOException {
			if (date1 == null) {
				dos.writeByte(-1);
			} else {
				dos.writeByte(0);
				dos.writeLong(date1.getTime());
			}
		}

		public void readData(ObjectInputStream dis) {

			synchronized (commonByteArrayLock_WIPO_PROJECTS_G2b_Mig_TM) {

				try {

					int length = 0;

					this.FILE_SEQ = readString(dis);

					this.FILE_TYPE = readString(dis);

					this.FILE_SERIES = (BigDecimal) dis.readObject();

					this.FILE_NBR = (BigDecimal) dis.readObject();

					this.ACTION_TYPE = readString(dis);

					this.ACTION_DATE = readDate(dis);

					this.MANUAL_DUE_DATE = readDate(dis);

					this.RESPONSIBLE_USER = (BigDecimal) dis.readObject();

					this.ACTION_NOTES1 = readString(dis);

					this.ACTION_NOTES2 = readString(dis);

					this.ACTION_NOTES3 = readString(dis);

					this.ACTION_NOTES4 = readString(dis);

					this.ACTION_NOTES5 = readString(dis);

					this.GENERAL_NOTES = readString(dis);

					this.SELECTED_OPTIONS_TEXT = readString(dis);

					this.ACTION_USER = (BigDecimal) dis.readObject();

					this.ACTION_CATEGORY = readString(dis);

					this.SPECIAL_FINAL_STATUS = readString(dis);

					this.JOURNAL_CODE = readString(dis);

					this.PUBLICATION_DATE = readDate(dis);

					this.IPAS_PROC_TYP = readString(dis);

					this.IPAS_PROC_NBR = (BigDecimal) dis.readObject();

					this.IPAS_ACTION_NBR = (BigDecimal) dis.readObject();

					this.ACTION_NBR = (BigDecimal) dis.readObject();

				} catch (IOException e) {
					throw new RuntimeException(e);

				} catch (ClassNotFoundException eCNFE) {
					throw new RuntimeException(eCNFE);

				}

			}

		}

		public void writeData(ObjectOutputStream dos) {
			try {

				// String

				writeString(this.FILE_SEQ, dos);

				// String

				writeString(this.FILE_TYPE, dos);

				// BigDecimal

				dos.writeObject(this.FILE_SERIES);

				// BigDecimal

				dos.writeObject(this.FILE_NBR);

				// String

				writeString(this.ACTION_TYPE, dos);

				// java.util.Date

				writeDate(this.ACTION_DATE, dos);

				// java.util.Date

				writeDate(this.MANUAL_DUE_DATE, dos);

				// BigDecimal

				dos.writeObject(this.RESPONSIBLE_USER);

				// String

				writeString(this.ACTION_NOTES1, dos);

				// String

				writeString(this.ACTION_NOTES2, dos);

				// String

				writeString(this.ACTION_NOTES3, dos);

				// String

				writeString(this.ACTION_NOTES4, dos);

				// String

				writeString(this.ACTION_NOTES5, dos);

				// String

				writeString(this.GENERAL_NOTES, dos);

				// String

				writeString(this.SELECTED_OPTIONS_TEXT, dos);

				// BigDecimal

				dos.writeObject(this.ACTION_USER);

				// String

				writeString(this.ACTION_CATEGORY, dos);

				// String

				writeString(this.SPECIAL_FINAL_STATUS, dos);

				// String

				writeString(this.JOURNAL_CODE, dos);

				// java.util.Date

				writeDate(this.PUBLICATION_DATE, dos);

				// String

				writeString(this.IPAS_PROC_TYP, dos);

				// BigDecimal

				dos.writeObject(this.IPAS_PROC_NBR);

				// BigDecimal

				dos.writeObject(this.IPAS_ACTION_NBR);

				// BigDecimal

				dos.writeObject(this.ACTION_NBR);

			} catch (IOException e) {
				throw new RuntimeException(e);
			}

		}

		public String toString() {

			StringBuilder sb = new StringBuilder();
			sb.append(super.toString());
			sb.append("[");
			sb.append("FILE_SEQ=" + FILE_SEQ);
			sb.append(",FILE_TYPE=" + FILE_TYPE);
			sb.append(",FILE_SERIES=" + String.valueOf(FILE_SERIES));
			sb.append(",FILE_NBR=" + String.valueOf(FILE_NBR));
			sb.append(",ACTION_TYPE=" + ACTION_TYPE);
			sb.append(",ACTION_DATE=" + String.valueOf(ACTION_DATE));
			sb.append(",MANUAL_DUE_DATE=" + String.valueOf(MANUAL_DUE_DATE));
			sb.append(",RESPONSIBLE_USER=" + String.valueOf(RESPONSIBLE_USER));
			sb.append(",ACTION_NOTES1=" + ACTION_NOTES1);
			sb.append(",ACTION_NOTES2=" + ACTION_NOTES2);
			sb.append(",ACTION_NOTES3=" + ACTION_NOTES3);
			sb.append(",ACTION_NOTES4=" + ACTION_NOTES4);
			sb.append(",ACTION_NOTES5=" + ACTION_NOTES5);
			sb.append(",GENERAL_NOTES=" + GENERAL_NOTES);
			sb.append(",SELECTED_OPTIONS_TEXT=" + SELECTED_OPTIONS_TEXT);
			sb.append(",ACTION_USER=" + String.valueOf(ACTION_USER));
			sb.append(",ACTION_CATEGORY=" + ACTION_CATEGORY);
			sb.append(",SPECIAL_FINAL_STATUS=" + SPECIAL_FINAL_STATUS);
			sb.append(",JOURNAL_CODE=" + JOURNAL_CODE);
			sb.append(",PUBLICATION_DATE=" + String.valueOf(PUBLICATION_DATE));
			sb.append(",IPAS_PROC_TYP=" + IPAS_PROC_TYP);
			sb.append(",IPAS_PROC_NBR=" + String.valueOf(IPAS_PROC_NBR));
			sb.append(",IPAS_ACTION_NBR=" + String.valueOf(IPAS_ACTION_NBR));
			sb.append(",ACTION_NBR=" + String.valueOf(ACTION_NBR));
			sb.append("]");

			return sb.toString();
		}

		/**
		 * Compare keys
		 */
		public int compareTo(wrk_actionsStruct other) {

			int returnValue = -1;

			returnValue = checkNullsAndCompare(this.FILE_SEQ, other.FILE_SEQ);
			if (returnValue != 0) {
				return returnValue;
			}

			returnValue = checkNullsAndCompare(this.FILE_TYPE, other.FILE_TYPE);
			if (returnValue != 0) {
				return returnValue;
			}

			returnValue = checkNullsAndCompare(this.FILE_SERIES, other.FILE_SERIES);
			if (returnValue != 0) {
				return returnValue;
			}

			returnValue = checkNullsAndCompare(this.FILE_NBR, other.FILE_NBR);
			if (returnValue != 0) {
				return returnValue;
			}

			returnValue = checkNullsAndCompare(this.ACTION_TYPE, other.ACTION_TYPE);
			if (returnValue != 0) {
				return returnValue;
			}

			returnValue = checkNullsAndCompare(this.ACTION_DATE, other.ACTION_DATE);
			if (returnValue != 0) {
				return returnValue;
			}

			return returnValue;
		}

		private int checkNullsAndCompare(Object object1, Object object2) {
			int returnValue = 0;
			if (object1 instanceof Comparable && object2 instanceof Comparable) {
				returnValue = ((Comparable) object1).compareTo(object2);
			} else if (object1 != null && object2 != null) {
				returnValue = compareStrings(object1.toString(), object2.toString());
			} else if (object1 == null && object2 != null) {
				returnValue = 1;
			} else if (object1 != null && object2 == null) {
				returnValue = -1;
			} else {
				returnValue = 0;
			}

			return returnValue;
		}

		private int compareStrings(String string1, String string2) {
			return string1.compareTo(string2);
		}

	}

	public static class row15Struct implements routines.system.IPersistableRow<row15Struct> {
		final static byte[] commonByteArrayLock_WIPO_PROJECTS_G2b_Mig_TM = new byte[0];
		static byte[] commonByteArray_WIPO_PROJECTS_G2b_Mig_TM = new byte[0];

		public String FILE_SEQ;

		public String getFILE_SEQ() {
			return this.FILE_SEQ;
		}

		public String FILE_TYPE;

		public String getFILE_TYPE() {
			return this.FILE_TYPE;
		}

		public BigDecimal FILE_SERIES;

		public BigDecimal getFILE_SERIES() {
			return this.FILE_SERIES;
		}

		public BigDecimal FILE_NBR;

		public BigDecimal getFILE_NBR() {
			return this.FILE_NBR;
		}

		public String ACTION_TYPE;

		public String getACTION_TYPE() {
			return this.ACTION_TYPE;
		}

		public java.util.Date ACTION_DATE;

		public java.util.Date getACTION_DATE() {
			return this.ACTION_DATE;
		}

		public java.util.Date MANUAL_DUE_DATE;

		public java.util.Date getMANUAL_DUE_DATE() {
			return this.MANUAL_DUE_DATE;
		}

		public BigDecimal RESPONSIBLE_USER;

		public BigDecimal getRESPONSIBLE_USER() {
			return this.RESPONSIBLE_USER;
		}

		public String ACTION_NOTES1;

		public String getACTION_NOTES1() {
			return this.ACTION_NOTES1;
		}

		public String ACTION_NOTES2;

		public String getACTION_NOTES2() {
			return this.ACTION_NOTES2;
		}

		public String ACTION_NOTES3;

		public String getACTION_NOTES3() {
			return this.ACTION_NOTES3;
		}

		public String ACTION_NOTES4;

		public String getACTION_NOTES4() {
			return this.ACTION_NOTES4;
		}

		public String ACTION_NOTES5;

		public String getACTION_NOTES5() {
			return this.ACTION_NOTES5;
		}

		public String GENERAL_NOTES;

		public String getGENERAL_NOTES() {
			return this.GENERAL_NOTES;
		}

		public String SELECTED_OPTIONS_TEXT;

		public String getSELECTED_OPTIONS_TEXT() {
			return this.SELECTED_OPTIONS_TEXT;
		}

		public BigDecimal ACTION_USER;

		public BigDecimal getACTION_USER() {
			return this.ACTION_USER;
		}

		public String ACTION_CATEGORY;

		public String getACTION_CATEGORY() {
			return this.ACTION_CATEGORY;
		}

		public String SPECIAL_FINAL_STATUS;

		public String getSPECIAL_FINAL_STATUS() {
			return this.SPECIAL_FINAL_STATUS;
		}

		public String JOURNAL_CODE;

		public String getJOURNAL_CODE() {
			return this.JOURNAL_CODE;
		}

		public java.util.Date PUBLICATION_DATE;

		public java.util.Date getPUBLICATION_DATE() {
			return this.PUBLICATION_DATE;
		}

		public String IPAS_PROC_TYP;

		public String getIPAS_PROC_TYP() {
			return this.IPAS_PROC_TYP;
		}

		public BigDecimal IPAS_PROC_NBR;

		public BigDecimal getIPAS_PROC_NBR() {
			return this.IPAS_PROC_NBR;
		}

		public BigDecimal IPAS_ACTION_NBR;

		public BigDecimal getIPAS_ACTION_NBR() {
			return this.IPAS_ACTION_NBR;
		}

		private String readString(ObjectInputStream dis) throws IOException {
			String strReturn = null;
			int length = 0;
			length = dis.readInt();
			if (length == -1) {
				strReturn = null;
			} else {
				if (length > commonByteArray_WIPO_PROJECTS_G2b_Mig_TM.length) {
					if (length < 1024 && commonByteArray_WIPO_PROJECTS_G2b_Mig_TM.length == 0) {
						commonByteArray_WIPO_PROJECTS_G2b_Mig_TM = new byte[1024];
					} else {
						commonByteArray_WIPO_PROJECTS_G2b_Mig_TM = new byte[2 * length];
					}
				}
				dis.readFully(commonByteArray_WIPO_PROJECTS_G2b_Mig_TM, 0, length);
				strReturn = new String(commonByteArray_WIPO_PROJECTS_G2b_Mig_TM, 0, length, utf8Charset);
			}
			return strReturn;
		}

		private void writeString(String str, ObjectOutputStream dos) throws IOException {
			if (str == null) {
				dos.writeInt(-1);
			} else {
				byte[] byteArray = str.getBytes(utf8Charset);
				dos.writeInt(byteArray.length);
				dos.write(byteArray);
			}
		}

		private java.util.Date readDate(ObjectInputStream dis) throws IOException {
			java.util.Date dateReturn = null;
			int length = 0;
			length = dis.readByte();
			if (length == -1) {
				dateReturn = null;
			} else {
				dateReturn = new Date(dis.readLong());
			}
			return dateReturn;
		}

		private void writeDate(java.util.Date date1, ObjectOutputStream dos) throws IOException {
			if (date1 == null) {
				dos.writeByte(-1);
			} else {
				dos.writeByte(0);
				dos.writeLong(date1.getTime());
			}
		}

		public void readData(ObjectInputStream dis) {

			synchronized (commonByteArrayLock_WIPO_PROJECTS_G2b_Mig_TM) {

				try {

					int length = 0;

					this.FILE_SEQ = readString(dis);

					this.FILE_TYPE = readString(dis);

					this.FILE_SERIES = (BigDecimal) dis.readObject();

					this.FILE_NBR = (BigDecimal) dis.readObject();

					this.ACTION_TYPE = readString(dis);

					this.ACTION_DATE = readDate(dis);

					this.MANUAL_DUE_DATE = readDate(dis);

					this.RESPONSIBLE_USER = (BigDecimal) dis.readObject();

					this.ACTION_NOTES1 = readString(dis);

					this.ACTION_NOTES2 = readString(dis);

					this.ACTION_NOTES3 = readString(dis);

					this.ACTION_NOTES4 = readString(dis);

					this.ACTION_NOTES5 = readString(dis);

					this.GENERAL_NOTES = readString(dis);

					this.SELECTED_OPTIONS_TEXT = readString(dis);

					this.ACTION_USER = (BigDecimal) dis.readObject();

					this.ACTION_CATEGORY = readString(dis);

					this.SPECIAL_FINAL_STATUS = readString(dis);

					this.JOURNAL_CODE = readString(dis);

					this.PUBLICATION_DATE = readDate(dis);

					this.IPAS_PROC_TYP = readString(dis);

					this.IPAS_PROC_NBR = (BigDecimal) dis.readObject();

					this.IPAS_ACTION_NBR = (BigDecimal) dis.readObject();

				} catch (IOException e) {
					throw new RuntimeException(e);

				} catch (ClassNotFoundException eCNFE) {
					throw new RuntimeException(eCNFE);

				}

			}

		}

		public void writeData(ObjectOutputStream dos) {
			try {

				// String

				writeString(this.FILE_SEQ, dos);

				// String

				writeString(this.FILE_TYPE, dos);

				// BigDecimal

				dos.writeObject(this.FILE_SERIES);

				// BigDecimal

				dos.writeObject(this.FILE_NBR);

				// String

				writeString(this.ACTION_TYPE, dos);

				// java.util.Date

				writeDate(this.ACTION_DATE, dos);

				// java.util.Date

				writeDate(this.MANUAL_DUE_DATE, dos);

				// BigDecimal

				dos.writeObject(this.RESPONSIBLE_USER);

				// String

				writeString(this.ACTION_NOTES1, dos);

				// String

				writeString(this.ACTION_NOTES2, dos);

				// String

				writeString(this.ACTION_NOTES3, dos);

				// String

				writeString(this.ACTION_NOTES4, dos);

				// String

				writeString(this.ACTION_NOTES5, dos);

				// String

				writeString(this.GENERAL_NOTES, dos);

				// String

				writeString(this.SELECTED_OPTIONS_TEXT, dos);

				// BigDecimal

				dos.writeObject(this.ACTION_USER);

				// String

				writeString(this.ACTION_CATEGORY, dos);

				// String

				writeString(this.SPECIAL_FINAL_STATUS, dos);

				// String

				writeString(this.JOURNAL_CODE, dos);

				// java.util.Date

				writeDate(this.PUBLICATION_DATE, dos);

				// String

				writeString(this.IPAS_PROC_TYP, dos);

				// BigDecimal

				dos.writeObject(this.IPAS_PROC_NBR);

				// BigDecimal

				dos.writeObject(this.IPAS_ACTION_NBR);

			} catch (IOException e) {
				throw new RuntimeException(e);
			}

		}

		public String toString() {

			StringBuilder sb = new StringBuilder();
			sb.append(super.toString());
			sb.append("[");
			sb.append("FILE_SEQ=" + FILE_SEQ);
			sb.append(",FILE_TYPE=" + FILE_TYPE);
			sb.append(",FILE_SERIES=" + String.valueOf(FILE_SERIES));
			sb.append(",FILE_NBR=" + String.valueOf(FILE_NBR));
			sb.append(",ACTION_TYPE=" + ACTION_TYPE);
			sb.append(",ACTION_DATE=" + String.valueOf(ACTION_DATE));
			sb.append(",MANUAL_DUE_DATE=" + String.valueOf(MANUAL_DUE_DATE));
			sb.append(",RESPONSIBLE_USER=" + String.valueOf(RESPONSIBLE_USER));
			sb.append(",ACTION_NOTES1=" + ACTION_NOTES1);
			sb.append(",ACTION_NOTES2=" + ACTION_NOTES2);
			sb.append(",ACTION_NOTES3=" + ACTION_NOTES3);
			sb.append(",ACTION_NOTES4=" + ACTION_NOTES4);
			sb.append(",ACTION_NOTES5=" + ACTION_NOTES5);
			sb.append(",GENERAL_NOTES=" + GENERAL_NOTES);
			sb.append(",SELECTED_OPTIONS_TEXT=" + SELECTED_OPTIONS_TEXT);
			sb.append(",ACTION_USER=" + String.valueOf(ACTION_USER));
			sb.append(",ACTION_CATEGORY=" + ACTION_CATEGORY);
			sb.append(",SPECIAL_FINAL_STATUS=" + SPECIAL_FINAL_STATUS);
			sb.append(",JOURNAL_CODE=" + JOURNAL_CODE);
			sb.append(",PUBLICATION_DATE=" + String.valueOf(PUBLICATION_DATE));
			sb.append(",IPAS_PROC_TYP=" + IPAS_PROC_TYP);
			sb.append(",IPAS_PROC_NBR=" + String.valueOf(IPAS_PROC_NBR));
			sb.append(",IPAS_ACTION_NBR=" + String.valueOf(IPAS_ACTION_NBR));
			sb.append("]");

			return sb.toString();
		}

		/**
		 * Compare keys
		 */
		public int compareTo(row15Struct other) {

			int returnValue = -1;

			return returnValue;
		}

		private int checkNullsAndCompare(Object object1, Object object2) {
			int returnValue = 0;
			if (object1 instanceof Comparable && object2 instanceof Comparable) {
				returnValue = ((Comparable) object1).compareTo(object2);
			} else if (object1 != null && object2 != null) {
				returnValue = compareStrings(object1.toString(), object2.toString());
			} else if (object1 == null && object2 != null) {
				returnValue = 1;
			} else if (object1 != null && object2 == null) {
				returnValue = -1;
			} else {
				returnValue = 0;
			}

			return returnValue;
		}

		private int compareStrings(String string1, String string2) {
			return string1.compareTo(string2);
		}

	}

	public static class after_tDBInput_17Struct implements routines.system.IPersistableRow<after_tDBInput_17Struct> {
		final static byte[] commonByteArrayLock_WIPO_PROJECTS_G2b_Mig_TM = new byte[0];
		static byte[] commonByteArray_WIPO_PROJECTS_G2b_Mig_TM = new byte[0];

		public String FILE_SEQ;

		public String getFILE_SEQ() {
			return this.FILE_SEQ;
		}

		public String FILE_TYPE;

		public String getFILE_TYPE() {
			return this.FILE_TYPE;
		}

		public BigDecimal FILE_SERIES;

		public BigDecimal getFILE_SERIES() {
			return this.FILE_SERIES;
		}

		public BigDecimal FILE_NBR;

		public BigDecimal getFILE_NBR() {
			return this.FILE_NBR;
		}

		public String ACTION_TYPE;

		public String getACTION_TYPE() {
			return this.ACTION_TYPE;
		}

		public java.util.Date ACTION_DATE;

		public java.util.Date getACTION_DATE() {
			return this.ACTION_DATE;
		}

		public java.util.Date MANUAL_DUE_DATE;

		public java.util.Date getMANUAL_DUE_DATE() {
			return this.MANUAL_DUE_DATE;
		}

		public BigDecimal RESPONSIBLE_USER;

		public BigDecimal getRESPONSIBLE_USER() {
			return this.RESPONSIBLE_USER;
		}

		public String ACTION_NOTES1;

		public String getACTION_NOTES1() {
			return this.ACTION_NOTES1;
		}

		public String ACTION_NOTES2;

		public String getACTION_NOTES2() {
			return this.ACTION_NOTES2;
		}

		public String ACTION_NOTES3;

		public String getACTION_NOTES3() {
			return this.ACTION_NOTES3;
		}

		public String ACTION_NOTES4;

		public String getACTION_NOTES4() {
			return this.ACTION_NOTES4;
		}

		public String ACTION_NOTES5;

		public String getACTION_NOTES5() {
			return this.ACTION_NOTES5;
		}

		public String GENERAL_NOTES;

		public String getGENERAL_NOTES() {
			return this.GENERAL_NOTES;
		}

		public String SELECTED_OPTIONS_TEXT;

		public String getSELECTED_OPTIONS_TEXT() {
			return this.SELECTED_OPTIONS_TEXT;
		}

		public BigDecimal ACTION_USER;

		public BigDecimal getACTION_USER() {
			return this.ACTION_USER;
		}

		public String ACTION_CATEGORY;

		public String getACTION_CATEGORY() {
			return this.ACTION_CATEGORY;
		}

		public String SPECIAL_FINAL_STATUS;

		public String getSPECIAL_FINAL_STATUS() {
			return this.SPECIAL_FINAL_STATUS;
		}

		public String JOURNAL_CODE;

		public String getJOURNAL_CODE() {
			return this.JOURNAL_CODE;
		}

		public java.util.Date PUBLICATION_DATE;

		public java.util.Date getPUBLICATION_DATE() {
			return this.PUBLICATION_DATE;
		}

		public String IPAS_PROC_TYP;

		public String getIPAS_PROC_TYP() {
			return this.IPAS_PROC_TYP;
		}

		public BigDecimal IPAS_PROC_NBR;

		public BigDecimal getIPAS_PROC_NBR() {
			return this.IPAS_PROC_NBR;
		}

		public BigDecimal IPAS_ACTION_NBR;

		public BigDecimal getIPAS_ACTION_NBR() {
			return this.IPAS_ACTION_NBR;
		}

		private String readString(ObjectInputStream dis) throws IOException {
			String strReturn = null;
			int length = 0;
			length = dis.readInt();
			if (length == -1) {
				strReturn = null;
			} else {
				if (length > commonByteArray_WIPO_PROJECTS_G2b_Mig_TM.length) {
					if (length < 1024 && commonByteArray_WIPO_PROJECTS_G2b_Mig_TM.length == 0) {
						commonByteArray_WIPO_PROJECTS_G2b_Mig_TM = new byte[1024];
					} else {
						commonByteArray_WIPO_PROJECTS_G2b_Mig_TM = new byte[2 * length];
					}
				}
				dis.readFully(commonByteArray_WIPO_PROJECTS_G2b_Mig_TM, 0, length);
				strReturn = new String(commonByteArray_WIPO_PROJECTS_G2b_Mig_TM, 0, length, utf8Charset);
			}
			return strReturn;
		}

		private void writeString(String str, ObjectOutputStream dos) throws IOException {
			if (str == null) {
				dos.writeInt(-1);
			} else {
				byte[] byteArray = str.getBytes(utf8Charset);
				dos.writeInt(byteArray.length);
				dos.write(byteArray);
			}
		}

		private java.util.Date readDate(ObjectInputStream dis) throws IOException {
			java.util.Date dateReturn = null;
			int length = 0;
			length = dis.readByte();
			if (length == -1) {
				dateReturn = null;
			} else {
				dateReturn = new Date(dis.readLong());
			}
			return dateReturn;
		}

		private void writeDate(java.util.Date date1, ObjectOutputStream dos) throws IOException {
			if (date1 == null) {
				dos.writeByte(-1);
			} else {
				dos.writeByte(0);
				dos.writeLong(date1.getTime());
			}
		}

		public void readData(ObjectInputStream dis) {

			synchronized (commonByteArrayLock_WIPO_PROJECTS_G2b_Mig_TM) {

				try {

					int length = 0;

					this.FILE_SEQ = readString(dis);

					this.FILE_TYPE = readString(dis);

					this.FILE_SERIES = (BigDecimal) dis.readObject();

					this.FILE_NBR = (BigDecimal) dis.readObject();

					this.ACTION_TYPE = readString(dis);

					this.ACTION_DATE = readDate(dis);

					this.MANUAL_DUE_DATE = readDate(dis);

					this.RESPONSIBLE_USER = (BigDecimal) dis.readObject();

					this.ACTION_NOTES1 = readString(dis);

					this.ACTION_NOTES2 = readString(dis);

					this.ACTION_NOTES3 = readString(dis);

					this.ACTION_NOTES4 = readString(dis);

					this.ACTION_NOTES5 = readString(dis);

					this.GENERAL_NOTES = readString(dis);

					this.SELECTED_OPTIONS_TEXT = readString(dis);

					this.ACTION_USER = (BigDecimal) dis.readObject();

					this.ACTION_CATEGORY = readString(dis);

					this.SPECIAL_FINAL_STATUS = readString(dis);

					this.JOURNAL_CODE = readString(dis);

					this.PUBLICATION_DATE = readDate(dis);

					this.IPAS_PROC_TYP = readString(dis);

					this.IPAS_PROC_NBR = (BigDecimal) dis.readObject();

					this.IPAS_ACTION_NBR = (BigDecimal) dis.readObject();

				} catch (IOException e) {
					throw new RuntimeException(e);

				} catch (ClassNotFoundException eCNFE) {
					throw new RuntimeException(eCNFE);

				}

			}

		}

		public void writeData(ObjectOutputStream dos) {
			try {

				// String

				writeString(this.FILE_SEQ, dos);

				// String

				writeString(this.FILE_TYPE, dos);

				// BigDecimal

				dos.writeObject(this.FILE_SERIES);

				// BigDecimal

				dos.writeObject(this.FILE_NBR);

				// String

				writeString(this.ACTION_TYPE, dos);

				// java.util.Date

				writeDate(this.ACTION_DATE, dos);

				// java.util.Date

				writeDate(this.MANUAL_DUE_DATE, dos);

				// BigDecimal

				dos.writeObject(this.RESPONSIBLE_USER);

				// String

				writeString(this.ACTION_NOTES1, dos);

				// String

				writeString(this.ACTION_NOTES2, dos);

				// String

				writeString(this.ACTION_NOTES3, dos);

				// String

				writeString(this.ACTION_NOTES4, dos);

				// String

				writeString(this.ACTION_NOTES5, dos);

				// String

				writeString(this.GENERAL_NOTES, dos);

				// String

				writeString(this.SELECTED_OPTIONS_TEXT, dos);

				// BigDecimal

				dos.writeObject(this.ACTION_USER);

				// String

				writeString(this.ACTION_CATEGORY, dos);

				// String

				writeString(this.SPECIAL_FINAL_STATUS, dos);

				// String

				writeString(this.JOURNAL_CODE, dos);

				// java.util.Date

				writeDate(this.PUBLICATION_DATE, dos);

				// String

				writeString(this.IPAS_PROC_TYP, dos);

				// BigDecimal

				dos.writeObject(this.IPAS_PROC_NBR);

				// BigDecimal

				dos.writeObject(this.IPAS_ACTION_NBR);

			} catch (IOException e) {
				throw new RuntimeException(e);
			}

		}

		public String toString() {

			StringBuilder sb = new StringBuilder();
			sb.append(super.toString());
			sb.append("[");
			sb.append("FILE_SEQ=" + FILE_SEQ);
			sb.append(",FILE_TYPE=" + FILE_TYPE);
			sb.append(",FILE_SERIES=" + String.valueOf(FILE_SERIES));
			sb.append(",FILE_NBR=" + String.valueOf(FILE_NBR));
			sb.append(",ACTION_TYPE=" + ACTION_TYPE);
			sb.append(",ACTION_DATE=" + String.valueOf(ACTION_DATE));
			sb.append(",MANUAL_DUE_DATE=" + String.valueOf(MANUAL_DUE_DATE));
			sb.append(",RESPONSIBLE_USER=" + String.valueOf(RESPONSIBLE_USER));
			sb.append(",ACTION_NOTES1=" + ACTION_NOTES1);
			sb.append(",ACTION_NOTES2=" + ACTION_NOTES2);
			sb.append(",ACTION_NOTES3=" + ACTION_NOTES3);
			sb.append(",ACTION_NOTES4=" + ACTION_NOTES4);
			sb.append(",ACTION_NOTES5=" + ACTION_NOTES5);
			sb.append(",GENERAL_NOTES=" + GENERAL_NOTES);
			sb.append(",SELECTED_OPTIONS_TEXT=" + SELECTED_OPTIONS_TEXT);
			sb.append(",ACTION_USER=" + String.valueOf(ACTION_USER));
			sb.append(",ACTION_CATEGORY=" + ACTION_CATEGORY);
			sb.append(",SPECIAL_FINAL_STATUS=" + SPECIAL_FINAL_STATUS);
			sb.append(",JOURNAL_CODE=" + JOURNAL_CODE);
			sb.append(",PUBLICATION_DATE=" + String.valueOf(PUBLICATION_DATE));
			sb.append(",IPAS_PROC_TYP=" + IPAS_PROC_TYP);
			sb.append(",IPAS_PROC_NBR=" + String.valueOf(IPAS_PROC_NBR));
			sb.append(",IPAS_ACTION_NBR=" + String.valueOf(IPAS_ACTION_NBR));
			sb.append("]");

			return sb.toString();
		}

		/**
		 * Compare keys
		 */
		public int compareTo(after_tDBInput_17Struct other) {

			int returnValue = -1;

			return returnValue;
		}

		private int checkNullsAndCompare(Object object1, Object object2) {
			int returnValue = 0;
			if (object1 instanceof Comparable && object2 instanceof Comparable) {
				returnValue = ((Comparable) object1).compareTo(object2);
			} else if (object1 != null && object2 != null) {
				returnValue = compareStrings(object1.toString(), object2.toString());
			} else if (object1 == null && object2 != null) {
				returnValue = 1;
			} else if (object1 != null && object2 == null) {
				returnValue = -1;
			} else {
				returnValue = 0;
			}

			return returnValue;
		}

		private int compareStrings(String string1, String string2) {
			return string1.compareTo(string2);
		}

	}

	public void tDBInput_17Process(final java.util.Map<String, Object> globalMap) throws TalendException {
		globalMap.put("tDBInput_17_SUBPROCESS_STATE", 0);

		final boolean execStat = this.execStat;

		String iterateId = "";

		String currentComponent = "";
		java.util.Map<String, Object> resourceMap = new java.util.HashMap<String, Object>();

		try {
			// TDI-39566 avoid throwing an useless Exception
			boolean resumeIt = true;
			if (globalResumeTicket == false && resumeEntryMethodName != null) {
				String currentMethodName = new java.lang.Exception().getStackTrace()[0].getMethodName();
				resumeIt = resumeEntryMethodName.equals(currentMethodName);
			}
			if (resumeIt || globalResumeTicket) { // start the resume
				globalResumeTicket = true;

				tDBInput_16Process(globalMap);

				row15Struct row15 = new row15Struct();
				wrk_actionsStruct wrk_actions = new wrk_actionsStruct();
				row17Struct row17 = new row17Struct();

				/**
				 * [tLogRow_6 begin ] start
				 */

				ok_Hash.put("tLogRow_6", false);
				start_Hash.put("tLogRow_6", System.currentTimeMillis());

				currentComponent = "tLogRow_6";

				if (execStat) {
					runStat.updateStatOnConnection(resourceMap, iterateId, 0, 0, "row17");
				}

				int tos_count_tLogRow_6 = 0;

				///////////////////////

				final String OUTPUT_FIELD_SEPARATOR_tLogRow_6 = "|";
				java.io.PrintStream consoleOut_tLogRow_6 = null;

				StringBuilder strBuffer_tLogRow_6 = null;
				int nb_line_tLogRow_6 = 0;
///////////////////////    			

				/**
				 * [tLogRow_6 begin ] stop
				 */

				/**
				 * [tDBOutput_6 begin ] start
				 */

				ok_Hash.put("tDBOutput_6", false);
				start_Hash.put("tDBOutput_6", System.currentTimeMillis());

				currentComponent = "tDBOutput_6";

				if (execStat) {
					runStat.updateStatOnConnection(resourceMap, iterateId, 0, 0, "wrk_actions");
				}

				int tos_count_tDBOutput_6 = 0;

				int nb_line_tDBOutput_6 = 0;
				int nb_line_update_tDBOutput_6 = 0;
				int nb_line_inserted_tDBOutput_6 = 0;
				int nb_line_deleted_tDBOutput_6 = 0;
				int nb_line_rejected_tDBOutput_6 = 0;

				int deletedCount_tDBOutput_6 = 0;
				int updatedCount_tDBOutput_6 = 0;
				int insertedCount_tDBOutput_6 = 0;
				int rejectedCount_tDBOutput_6 = 0;
				String dbschema_tDBOutput_6 = null;
				String tableName_tDBOutput_6 = null;
				boolean whetherReject_tDBOutput_6 = false;

				java.util.Calendar calendar_tDBOutput_6 = java.util.Calendar.getInstance();
				long year1_tDBOutput_6 = TalendDate.parseDate("yyyy-MM-dd", "0001-01-01").getTime();
				long year2_tDBOutput_6 = TalendDate.parseDate("yyyy-MM-dd", "1753-01-01").getTime();
				long year10000_tDBOutput_6 = TalendDate.parseDate("yyyy-MM-dd HH:mm:ss", "9999-12-31 24:00:00")
						.getTime();
				long date_tDBOutput_6;

				java.util.Calendar calendar_datetimeoffset_tDBOutput_6 = java.util.Calendar
						.getInstance(java.util.TimeZone.getTimeZone("UTC"));

				java.sql.Connection conn_tDBOutput_6 = null;
				String dbUser_tDBOutput_6 = null;
				dbschema_tDBOutput_6 = "ADMIN";
				String driverClass_tDBOutput_6 = "net.sourceforge.jtds.jdbc.Driver";

				java.lang.Class.forName(driverClass_tDBOutput_6);
				String port_tDBOutput_6 = "1433";
				String dbname_tDBOutput_6 = "MARCAS_PY";
				String url_tDBOutput_6 = "jdbc:jtds:sqlserver://" + "localhost";
				if (!"".equals(port_tDBOutput_6)) {
					url_tDBOutput_6 += ":" + "1433";
				}
				if (!"".equals(dbname_tDBOutput_6)) {
					url_tDBOutput_6 += "//" + "MARCAS_PY";

				}
				url_tDBOutput_6 += ";appName=" + projectName + ";" + "";
				dbUser_tDBOutput_6 = "ADMIN";

				final String decryptedPassword_tDBOutput_6 = routines.system.PasswordEncryptUtil
						.decryptPassword("enc:routine.encryption.key.v1:lo34uC6eqxwjwB0mR/4SNq16l4XPNKrtNDZw50pg6Efm");

				String dbPwd_tDBOutput_6 = decryptedPassword_tDBOutput_6;
				conn_tDBOutput_6 = java.sql.DriverManager.getConnection(url_tDBOutput_6, dbUser_tDBOutput_6,
						dbPwd_tDBOutput_6);

				resourceMap.put("conn_tDBOutput_6", conn_tDBOutput_6);

				conn_tDBOutput_6.setAutoCommit(false);
				int commitEvery_tDBOutput_6 = 10000;
				int commitCounter_tDBOutput_6 = 0;

				if (dbschema_tDBOutput_6 == null || dbschema_tDBOutput_6.trim().length() == 0) {
					tableName_tDBOutput_6 = "WRK_MARK_ACTIONS";
				} else {
					tableName_tDBOutput_6 = dbschema_tDBOutput_6 + "].[" + "WRK_MARK_ACTIONS";
				}
				int count_tDBOutput_6 = 0;

				String insert_tDBOutput_6 = "INSERT INTO [" + tableName_tDBOutput_6
						+ "] ([FILE_SEQ],[FILE_TYPE],[FILE_SERIES],[FILE_NBR],[ACTION_TYPE],[ACTION_DATE],[MANUAL_DUE_DATE],[RESPONSIBLE_USER],[ACTION_NOTES1],[ACTION_NOTES2],[ACTION_NOTES3],[ACTION_NOTES4],[ACTION_NOTES5],[GENERAL_NOTES],[SELECTED_OPTIONS_TEXT],[ACTION_USER],[ACTION_CATEGORY],[SPECIAL_FINAL_STATUS],[JOURNAL_CODE],[PUBLICATION_DATE],[IPAS_PROC_TYP],[IPAS_PROC_NBR],[IPAS_ACTION_NBR],[ACTION_NBR]) VALUES (?,?,?,?,?,?,?,?,?,?,?,?,?,?,?,?,?,?,?,?,?,?,?,?)";
				java.sql.PreparedStatement pstmt_tDBOutput_6 = conn_tDBOutput_6.prepareStatement(insert_tDBOutput_6);
				resourceMap.put("pstmt_tDBOutput_6", pstmt_tDBOutput_6);

				/**
				 * [tDBOutput_6 begin ] stop
				 */

				/**
				 * [tMap_6 begin ] start
				 */

				ok_Hash.put("tMap_6", false);
				start_Hash.put("tMap_6", System.currentTimeMillis());

				currentComponent = "tMap_6";

				if (execStat) {
					runStat.updateStatOnConnection(resourceMap, iterateId, 0, 0, "row15");
				}

				int tos_count_tMap_6 = 0;

// ###############################
// # Lookup's keys initialization

				org.talend.designer.components.lookup.memory.AdvancedMemoryLookup<row16Struct> tHash_Lookup_row16 = (org.talend.designer.components.lookup.memory.AdvancedMemoryLookup<row16Struct>) ((org.talend.designer.components.lookup.memory.AdvancedMemoryLookup<row16Struct>) globalMap
						.get("tHash_Lookup_row16"));

				row16Struct row16HashKey = new row16Struct();
				row16Struct row16Default = new row16Struct();
// ###############################        

// ###############################
// # Vars initialization
				class Var__tMap_6__Struct {
				}
				Var__tMap_6__Struct Var__tMap_6 = new Var__tMap_6__Struct();
// ###############################

// ###############################
// # Outputs initialization
				wrk_actionsStruct wrk_actions_tmp = new wrk_actionsStruct();
// ###############################

				/**
				 * [tMap_6 begin ] stop
				 */

				/**
				 * [tDBInput_17 begin ] start
				 */

				ok_Hash.put("tDBInput_17", false);
				start_Hash.put("tDBInput_17", System.currentTimeMillis());

				currentComponent = "tDBInput_17";

				int tos_count_tDBInput_17 = 0;

				org.talend.designer.components.util.mssql.MSSqlGenerateTimestampUtil mssqlGTU_tDBInput_17 = org.talend.designer.components.util.mssql.MSSqlUtilFactory
						.getMSSqlGenerateTimestampUtil();

				java.util.List<String> talendToDBList_tDBInput_17 = new java.util.ArrayList();
				String[] talendToDBArray_tDBInput_17 = new String[] { "FLOAT", "NUMERIC", "NUMERIC IDENTITY", "DECIMAL",
						"DECIMAL IDENTITY", "REAL" };
				java.util.Collections.addAll(talendToDBList_tDBInput_17, talendToDBArray_tDBInput_17);
				int nb_line_tDBInput_17 = 0;
				java.sql.Connection conn_tDBInput_17 = null;
				String driverClass_tDBInput_17 = "net.sourceforge.jtds.jdbc.Driver";
				java.lang.Class jdbcclazz_tDBInput_17 = java.lang.Class.forName(driverClass_tDBInput_17);
				String dbUser_tDBInput_17 = "sa";

				final String decryptedPassword_tDBInput_17 = routines.system.PasswordEncryptUtil.decryptPassword(
						"enc:routine.encryption.key.v1:WCH+FfpoVuSuiBdxYTu1Ql3Z+x6Ss8owe6Zlv2Aq2zaIuFy/");

				String dbPwd_tDBInput_17 = decryptedPassword_tDBInput_17;

				String port_tDBInput_17 = "1433";
				String dbname_tDBInput_17 = "PY_INTERMED";
				String url_tDBInput_17 = "jdbc:jtds:sqlserver://" + "localhost";
				if (!"".equals(port_tDBInput_17)) {
					url_tDBInput_17 += ":" + "1433";
				}
				if (!"".equals(dbname_tDBInput_17)) {
					url_tDBInput_17 += "//" + "PY_INTERMED";
				}
				url_tDBInput_17 += ";appName=" + projectName + ";" + "";
				String dbschema_tDBInput_17 = "dbo";

				conn_tDBInput_17 = java.sql.DriverManager.getConnection(url_tDBInput_17, dbUser_tDBInput_17,
						dbPwd_tDBInput_17);

				java.sql.Statement stmt_tDBInput_17 = conn_tDBInput_17.createStatement();

				String dbquery_tDBInput_17 = "SELECT dbo.VW_IMPORT_MARK_ACTIONS.FILE_SEQ,\n		dbo.VW_IMPORT_MARK_ACTIONS.FILE_TYPE,\n		dbo.VW_IMPORT_MARK_ACTIONS.FILE_S"
						+ "ERIES,\n		dbo.VW_IMPORT_MARK_ACTIONS.FILE_NBR,\n		dbo.VW_IMPORT_MARK_ACTIONS.ACTION_TYPE,\n		dbo.VW_IMPORT_MARK_ACTIONS.ACT"
						+ "ION_DATE,\n		dbo.VW_IMPORT_MARK_ACTIONS.MANUAL_DUE_DATE,\n		dbo.VW_IMPORT_MARK_ACTIONS.RESPONSIBLE_USER,\n		dbo.VW_IMPORT_M"
						+ "ARK_ACTIONS.ACTION_NOTES1,\n		dbo.VW_IMPORT_MARK_ACTIONS.ACTION_NOTES2,\n		dbo.VW_IMPORT_MARK_ACTIONS.ACTION_NOTES3,\n		dbo"
						+ ".VW_IMPORT_MARK_ACTIONS.ACTION_NOTES4,\n		dbo.VW_IMPORT_MARK_ACTIONS.ACTION_NOTES5,\n		dbo.VW_IMPORT_MARK_ACTIONS.GENERAL_"
						+ "NOTES,\n		dbo.VW_IMPORT_MARK_ACTIONS.SELECTED_OPTIONS_TEXT,\n		dbo.VW_IMPORT_MARK_ACTIONS.ACTION_USER,\n		dbo.VW_IMPORT_MAR"
						+ "K_ACTIONS.ACTION_CATEGORY,\n		dbo.VW_IMPORT_MARK_ACTIONS.SPECIAL_FINAL_STATUS,\n		dbo.VW_IMPORT_MARK_ACTIONS.JOURNAL_CODE,"
						+ "\n		dbo.VW_IMPORT_MARK_ACTIONS.PUBLICATION_DATE,\n		dbo.VW_IMPORT_MARK_ACTIONS.IPAS_PROC_TYP,\n		dbo.VW_IMPORT_MARK_ACTIONS"
						+ ".IPAS_PROC_NBR,\n		dbo.VW_IMPORT_MARK_ACTIONS.IPAS_ACTION_NBR\nFROM	dbo.VW_IMPORT_MARK_ACTIONS";

				globalMap.put("tDBInput_17_QUERY", dbquery_tDBInput_17);
				java.sql.ResultSet rs_tDBInput_17 = null;

				try {
					rs_tDBInput_17 = stmt_tDBInput_17.executeQuery(dbquery_tDBInput_17);
					java.sql.ResultSetMetaData rsmd_tDBInput_17 = rs_tDBInput_17.getMetaData();
					int colQtyInRs_tDBInput_17 = rsmd_tDBInput_17.getColumnCount();

					String tmpContent_tDBInput_17 = null;

					while (rs_tDBInput_17.next()) {
						nb_line_tDBInput_17++;

						if (colQtyInRs_tDBInput_17 < 1) {
							row15.FILE_SEQ = null;
						} else {

							tmpContent_tDBInput_17 = rs_tDBInput_17.getString(1);
							if (tmpContent_tDBInput_17 != null) {
								if (talendToDBList_tDBInput_17.contains(
										rsmd_tDBInput_17.getColumnTypeName(1).toUpperCase(java.util.Locale.ENGLISH))) {
									row15.FILE_SEQ = FormatterUtils.formatUnwithE(tmpContent_tDBInput_17);
								} else {
									row15.FILE_SEQ = tmpContent_tDBInput_17;
								}
							} else {
								row15.FILE_SEQ = null;
							}
						}
						if (colQtyInRs_tDBInput_17 < 2) {
							row15.FILE_TYPE = null;
						} else {

							tmpContent_tDBInput_17 = rs_tDBInput_17.getString(2);
							if (tmpContent_tDBInput_17 != null) {
								if (talendToDBList_tDBInput_17.contains(
										rsmd_tDBInput_17.getColumnTypeName(2).toUpperCase(java.util.Locale.ENGLISH))) {
									row15.FILE_TYPE = FormatterUtils.formatUnwithE(tmpContent_tDBInput_17);
								} else {
									row15.FILE_TYPE = tmpContent_tDBInput_17;
								}
							} else {
								row15.FILE_TYPE = null;
							}
						}
						if (colQtyInRs_tDBInput_17 < 3) {
							row15.FILE_SERIES = null;
						} else {

							row15.FILE_SERIES = rs_tDBInput_17.getBigDecimal(3);
							if (rs_tDBInput_17.wasNull()) {
								throw new RuntimeException("Null value in non-Nullable column");
							}
						}
						if (colQtyInRs_tDBInput_17 < 4) {
							row15.FILE_NBR = null;
						} else {

							row15.FILE_NBR = rs_tDBInput_17.getBigDecimal(4);
							if (rs_tDBInput_17.wasNull()) {
								throw new RuntimeException("Null value in non-Nullable column");
							}
						}
						if (colQtyInRs_tDBInput_17 < 5) {
							row15.ACTION_TYPE = null;
						} else {

							tmpContent_tDBInput_17 = rs_tDBInput_17.getString(5);
							if (tmpContent_tDBInput_17 != null) {
								if (talendToDBList_tDBInput_17.contains(
										rsmd_tDBInput_17.getColumnTypeName(5).toUpperCase(java.util.Locale.ENGLISH))) {
									row15.ACTION_TYPE = FormatterUtils.formatUnwithE(tmpContent_tDBInput_17);
								} else {
									row15.ACTION_TYPE = tmpContent_tDBInput_17;
								}
							} else {
								row15.ACTION_TYPE = null;
							}
						}
						if (colQtyInRs_tDBInput_17 < 6) {
							row15.ACTION_DATE = null;
						} else {

							row15.ACTION_DATE = mssqlGTU_tDBInput_17.getDate(rsmd_tDBInput_17, rs_tDBInput_17, 6);

						}
						if (colQtyInRs_tDBInput_17 < 7) {
							row15.MANUAL_DUE_DATE = null;
						} else {

							row15.MANUAL_DUE_DATE = mssqlGTU_tDBInput_17.getDate(rsmd_tDBInput_17, rs_tDBInput_17, 7);

						}
						if (colQtyInRs_tDBInput_17 < 8) {
							row15.RESPONSIBLE_USER = null;
						} else {

							row15.RESPONSIBLE_USER = rs_tDBInput_17.getBigDecimal(8);
							if (rs_tDBInput_17.wasNull()) {
								row15.RESPONSIBLE_USER = null;
							}
						}
						if (colQtyInRs_tDBInput_17 < 9) {
							row15.ACTION_NOTES1 = null;
						} else {

							tmpContent_tDBInput_17 = rs_tDBInput_17.getString(9);
							if (tmpContent_tDBInput_17 != null) {
								if (talendToDBList_tDBInput_17.contains(
										rsmd_tDBInput_17.getColumnTypeName(9).toUpperCase(java.util.Locale.ENGLISH))) {
									row15.ACTION_NOTES1 = FormatterUtils.formatUnwithE(tmpContent_tDBInput_17);
								} else {
									row15.ACTION_NOTES1 = tmpContent_tDBInput_17;
								}
							} else {
								row15.ACTION_NOTES1 = null;
							}
						}
						if (colQtyInRs_tDBInput_17 < 10) {
							row15.ACTION_NOTES2 = null;
						} else {

							tmpContent_tDBInput_17 = rs_tDBInput_17.getString(10);
							if (tmpContent_tDBInput_17 != null) {
								if (talendToDBList_tDBInput_17.contains(
										rsmd_tDBInput_17.getColumnTypeName(10).toUpperCase(java.util.Locale.ENGLISH))) {
									row15.ACTION_NOTES2 = FormatterUtils.formatUnwithE(tmpContent_tDBInput_17);
								} else {
									row15.ACTION_NOTES2 = tmpContent_tDBInput_17;
								}
							} else {
								row15.ACTION_NOTES2 = null;
							}
						}
						if (colQtyInRs_tDBInput_17 < 11) {
							row15.ACTION_NOTES3 = null;
						} else {

							tmpContent_tDBInput_17 = rs_tDBInput_17.getString(11);
							if (tmpContent_tDBInput_17 != null) {
								if (talendToDBList_tDBInput_17.contains(
										rsmd_tDBInput_17.getColumnTypeName(11).toUpperCase(java.util.Locale.ENGLISH))) {
									row15.ACTION_NOTES3 = FormatterUtils.formatUnwithE(tmpContent_tDBInput_17);
								} else {
									row15.ACTION_NOTES3 = tmpContent_tDBInput_17;
								}
							} else {
								row15.ACTION_NOTES3 = null;
							}
						}
						if (colQtyInRs_tDBInput_17 < 12) {
							row15.ACTION_NOTES4 = null;
						} else {

							tmpContent_tDBInput_17 = rs_tDBInput_17.getString(12);
							if (tmpContent_tDBInput_17 != null) {
								if (talendToDBList_tDBInput_17.contains(
										rsmd_tDBInput_17.getColumnTypeName(12).toUpperCase(java.util.Locale.ENGLISH))) {
									row15.ACTION_NOTES4 = FormatterUtils.formatUnwithE(tmpContent_tDBInput_17);
								} else {
									row15.ACTION_NOTES4 = tmpContent_tDBInput_17;
								}
							} else {
								row15.ACTION_NOTES4 = null;
							}
						}
						if (colQtyInRs_tDBInput_17 < 13) {
							row15.ACTION_NOTES5 = null;
						} else {

							tmpContent_tDBInput_17 = rs_tDBInput_17.getString(13);
							if (tmpContent_tDBInput_17 != null) {
								if (talendToDBList_tDBInput_17.contains(
										rsmd_tDBInput_17.getColumnTypeName(13).toUpperCase(java.util.Locale.ENGLISH))) {
									row15.ACTION_NOTES5 = FormatterUtils.formatUnwithE(tmpContent_tDBInput_17);
								} else {
									row15.ACTION_NOTES5 = tmpContent_tDBInput_17;
								}
							} else {
								row15.ACTION_NOTES5 = null;
							}
						}
						if (colQtyInRs_tDBInput_17 < 14) {
							row15.GENERAL_NOTES = null;
						} else {

							tmpContent_tDBInput_17 = rs_tDBInput_17.getString(14);
							if (tmpContent_tDBInput_17 != null) {
								if (talendToDBList_tDBInput_17.contains(
										rsmd_tDBInput_17.getColumnTypeName(14).toUpperCase(java.util.Locale.ENGLISH))) {
									row15.GENERAL_NOTES = FormatterUtils.formatUnwithE(tmpContent_tDBInput_17);
								} else {
									row15.GENERAL_NOTES = tmpContent_tDBInput_17;
								}
							} else {
								row15.GENERAL_NOTES = null;
							}
						}
						if (colQtyInRs_tDBInput_17 < 15) {
							row15.SELECTED_OPTIONS_TEXT = null;
						} else {

							tmpContent_tDBInput_17 = rs_tDBInput_17.getString(15);
							if (tmpContent_tDBInput_17 != null) {
								if (talendToDBList_tDBInput_17.contains(
										rsmd_tDBInput_17.getColumnTypeName(15).toUpperCase(java.util.Locale.ENGLISH))) {
									row15.SELECTED_OPTIONS_TEXT = FormatterUtils.formatUnwithE(tmpContent_tDBInput_17);
								} else {
									row15.SELECTED_OPTIONS_TEXT = tmpContent_tDBInput_17;
								}
							} else {
								row15.SELECTED_OPTIONS_TEXT = null;
							}
						}
						if (colQtyInRs_tDBInput_17 < 16) {
							row15.ACTION_USER = null;
						} else {

							row15.ACTION_USER = rs_tDBInput_17.getBigDecimal(16);
							if (rs_tDBInput_17.wasNull()) {
								row15.ACTION_USER = null;
							}
						}
						if (colQtyInRs_tDBInput_17 < 17) {
							row15.ACTION_CATEGORY = null;
						} else {

							tmpContent_tDBInput_17 = rs_tDBInput_17.getString(17);
							if (tmpContent_tDBInput_17 != null) {
								if (talendToDBList_tDBInput_17.contains(
										rsmd_tDBInput_17.getColumnTypeName(17).toUpperCase(java.util.Locale.ENGLISH))) {
									row15.ACTION_CATEGORY = FormatterUtils.formatUnwithE(tmpContent_tDBInput_17);
								} else {
									row15.ACTION_CATEGORY = tmpContent_tDBInput_17;
								}
							} else {
								row15.ACTION_CATEGORY = null;
							}
						}
						if (colQtyInRs_tDBInput_17 < 18) {
							row15.SPECIAL_FINAL_STATUS = null;
						} else {

							tmpContent_tDBInput_17 = rs_tDBInput_17.getString(18);
							if (tmpContent_tDBInput_17 != null) {
								if (talendToDBList_tDBInput_17.contains(
										rsmd_tDBInput_17.getColumnTypeName(18).toUpperCase(java.util.Locale.ENGLISH))) {
									row15.SPECIAL_FINAL_STATUS = FormatterUtils.formatUnwithE(tmpContent_tDBInput_17);
								} else {
									row15.SPECIAL_FINAL_STATUS = tmpContent_tDBInput_17;
								}
							} else {
								row15.SPECIAL_FINAL_STATUS = null;
							}
						}
						if (colQtyInRs_tDBInput_17 < 19) {
							row15.JOURNAL_CODE = null;
						} else {

							tmpContent_tDBInput_17 = rs_tDBInput_17.getString(19);
							if (tmpContent_tDBInput_17 != null) {
								if (talendToDBList_tDBInput_17.contains(
										rsmd_tDBInput_17.getColumnTypeName(19).toUpperCase(java.util.Locale.ENGLISH))) {
									row15.JOURNAL_CODE = FormatterUtils.formatUnwithE(tmpContent_tDBInput_17);
								} else {
									row15.JOURNAL_CODE = tmpContent_tDBInput_17;
								}
							} else {
								row15.JOURNAL_CODE = null;
							}
						}
						if (colQtyInRs_tDBInput_17 < 20) {
							row15.PUBLICATION_DATE = null;
						} else {

							row15.PUBLICATION_DATE = mssqlGTU_tDBInput_17.getDate(rsmd_tDBInput_17, rs_tDBInput_17, 20);

						}
						if (colQtyInRs_tDBInput_17 < 21) {
							row15.IPAS_PROC_TYP = null;
						} else {

							tmpContent_tDBInput_17 = rs_tDBInput_17.getString(21);
							if (tmpContent_tDBInput_17 != null) {
								if (talendToDBList_tDBInput_17.contains(
										rsmd_tDBInput_17.getColumnTypeName(21).toUpperCase(java.util.Locale.ENGLISH))) {
									row15.IPAS_PROC_TYP = FormatterUtils.formatUnwithE(tmpContent_tDBInput_17);
								} else {
									row15.IPAS_PROC_TYP = tmpContent_tDBInput_17;
								}
							} else {
								row15.IPAS_PROC_TYP = null;
							}
						}
						if (colQtyInRs_tDBInput_17 < 22) {
							row15.IPAS_PROC_NBR = null;
						} else {

							row15.IPAS_PROC_NBR = rs_tDBInput_17.getBigDecimal(22);
							if (rs_tDBInput_17.wasNull()) {
								row15.IPAS_PROC_NBR = null;
							}
						}
						if (colQtyInRs_tDBInput_17 < 23) {
							row15.IPAS_ACTION_NBR = null;
						} else {

							row15.IPAS_ACTION_NBR = rs_tDBInput_17.getBigDecimal(23);
							if (rs_tDBInput_17.wasNull()) {
								row15.IPAS_ACTION_NBR = null;
							}
						}

						/**
						 * [tDBInput_17 begin ] stop
						 */

						/**
						 * [tDBInput_17 main ] start
						 */

						currentComponent = "tDBInput_17";

						tos_count_tDBInput_17++;

						/**
						 * [tDBInput_17 main ] stop
						 */

						/**
						 * [tDBInput_17 process_data_begin ] start
						 */

						currentComponent = "tDBInput_17";

						/**
						 * [tDBInput_17 process_data_begin ] stop
						 */

						/**
						 * [tMap_6 main ] start
						 */

						currentComponent = "tMap_6";

						if (execStat) {
							runStat.updateStatOnConnection(iterateId, 1, 1

									, "row15"

							);
						}

						boolean hasCasePrimitiveKeyWithNull_tMap_6 = false;

						// ###############################
						// # Input tables (lookups)
						boolean rejectedInnerJoin_tMap_6 = false;
						boolean mainRowRejected_tMap_6 = false;

						///////////////////////////////////////////////
						// Starting Lookup Table "row16"
						///////////////////////////////////////////////

						boolean forceLooprow16 = false;

						row16Struct row16ObjectFromLookup = null;

						if (!rejectedInnerJoin_tMap_6) { // G_TM_M_020

							hasCasePrimitiveKeyWithNull_tMap_6 = false;

							row16HashKey.FILE_SEQ = row15.FILE_SEQ;

							row16HashKey.FILE_TYPE = row15.FILE_TYPE;

							row16HashKey.FILE_SERIES = row15.FILE_SERIES;

							row16HashKey.FILE_NBR = row15.FILE_NBR;

							row16HashKey.hashCodeDirty = true;

							tHash_Lookup_row16.lookup(row16HashKey);

						} // G_TM_M_020

						if (tHash_Lookup_row16 != null && tHash_Lookup_row16.getCount(row16HashKey) > 1) { // G 071

							// System.out.println("WARNING: UNIQUE MATCH is configured for the lookup
							// 'row16' and it contains more one result from keys : row16.FILE_SEQ = '" +
							// row16HashKey.FILE_SEQ + "', row16.FILE_TYPE = '" + row16HashKey.FILE_TYPE +
							// "', row16.FILE_SERIES = '" + row16HashKey.FILE_SERIES + "', row16.FILE_NBR =
							// '" + row16HashKey.FILE_NBR + "'");
						} // G 071

						row16Struct row16 = null;

						row16Struct fromLookup_row16 = null;
						row16 = row16Default;

						if (tHash_Lookup_row16 != null && tHash_Lookup_row16.hasNext()) { // G 099

							fromLookup_row16 = tHash_Lookup_row16.next();

						} // G 099

						if (fromLookup_row16 != null) {
							row16 = fromLookup_row16;
						}

						// ###############################
						{ // start of Var scope

							// ###############################
							// # Vars tables

							Var__tMap_6__Struct Var = Var__tMap_6;// ###############################
							// ###############################
							// # Output tables

							wrk_actions = null;

// # Output table : 'wrk_actions'
							wrk_actions_tmp.FILE_SEQ = row16.FILE_SEQ;
							wrk_actions_tmp.FILE_TYPE = row16.FILE_TYPE;
							wrk_actions_tmp.FILE_SERIES = row16.FILE_SERIES;
							wrk_actions_tmp.FILE_NBR = row16.FILE_NBR;
							wrk_actions_tmp.ACTION_TYPE = row15.ACTION_TYPE;
							wrk_actions_tmp.ACTION_DATE = row15.ACTION_DATE;
							wrk_actions_tmp.MANUAL_DUE_DATE = row15.MANUAL_DUE_DATE;
							wrk_actions_tmp.RESPONSIBLE_USER = row15.RESPONSIBLE_USER;
							wrk_actions_tmp.ACTION_NOTES1 = row15.ACTION_NOTES1;
							wrk_actions_tmp.ACTION_NOTES2 = row15.ACTION_NOTES2;
							wrk_actions_tmp.ACTION_NOTES3 = row15.ACTION_NOTES3;
							wrk_actions_tmp.ACTION_NOTES4 = row15.ACTION_NOTES4;
							wrk_actions_tmp.ACTION_NOTES5 = row15.ACTION_NOTES5;
							wrk_actions_tmp.GENERAL_NOTES = row15.GENERAL_NOTES;
							wrk_actions_tmp.SELECTED_OPTIONS_TEXT = row15.SELECTED_OPTIONS_TEXT;
							wrk_actions_tmp.ACTION_USER = row15.ACTION_USER;
							wrk_actions_tmp.ACTION_CATEGORY = row15.ACTION_CATEGORY;
							wrk_actions_tmp.SPECIAL_FINAL_STATUS = row15.SPECIAL_FINAL_STATUS;
							wrk_actions_tmp.JOURNAL_CODE = row15.JOURNAL_CODE;
							wrk_actions_tmp.PUBLICATION_DATE = row15.PUBLICATION_DATE;
							wrk_actions_tmp.IPAS_PROC_TYP = row15.IPAS_PROC_TYP;
							wrk_actions_tmp.IPAS_PROC_NBR = row15.IPAS_PROC_NBR;
							wrk_actions_tmp.IPAS_ACTION_NBR = row15.IPAS_ACTION_NBR;
							wrk_actions_tmp.ACTION_NBR = new BigDecimal(Numeric.sequence("s1", 1, 1));
							wrk_actions = wrk_actions_tmp;
// ###############################

						} // end of Var scope

						rejectedInnerJoin_tMap_6 = false;

						tos_count_tMap_6++;

						/**
						 * [tMap_6 main ] stop
						 */

						/**
						 * [tMap_6 process_data_begin ] start
						 */

						currentComponent = "tMap_6";

						/**
						 * [tMap_6 process_data_begin ] stop
						 */
// Start of branch "wrk_actions"
						if (wrk_actions != null) {
							row17 = null;

							/**
							 * [tDBOutput_6 main ] start
							 */

							currentComponent = "tDBOutput_6";

							if (execStat) {
								runStat.updateStatOnConnection(iterateId, 1, 1

										, "wrk_actions"

								);
							}

							row17 = null;
							whetherReject_tDBOutput_6 = false;
							try {
								if (wrk_actions.FILE_SEQ == null) {
									pstmt_tDBOutput_6.setNull(1, java.sql.Types.VARCHAR);
								} else {
									pstmt_tDBOutput_6.setString(1, wrk_actions.FILE_SEQ);
								}

								if (wrk_actions.FILE_TYPE == null) {
									pstmt_tDBOutput_6.setNull(2, java.sql.Types.VARCHAR);
								} else {
									pstmt_tDBOutput_6.setString(2, wrk_actions.FILE_TYPE);
								}

								pstmt_tDBOutput_6.setBigDecimal(3, wrk_actions.FILE_SERIES);

								pstmt_tDBOutput_6.setBigDecimal(4, wrk_actions.FILE_NBR);

								if (wrk_actions.ACTION_TYPE == null) {
									pstmt_tDBOutput_6.setNull(5, java.sql.Types.VARCHAR);
								} else {
									pstmt_tDBOutput_6.setString(5, wrk_actions.ACTION_TYPE);
								}

								if (wrk_actions.ACTION_DATE != null) {
									pstmt_tDBOutput_6.setTimestamp(6,
											new java.sql.Timestamp(wrk_actions.ACTION_DATE.getTime()));
								} else {
									pstmt_tDBOutput_6.setNull(6, java.sql.Types.TIMESTAMP);
								}

								if (wrk_actions.MANUAL_DUE_DATE != null) {
									pstmt_tDBOutput_6.setTimestamp(7,
											new java.sql.Timestamp(wrk_actions.MANUAL_DUE_DATE.getTime()));
								} else {
									pstmt_tDBOutput_6.setNull(7, java.sql.Types.TIMESTAMP);
								}

								pstmt_tDBOutput_6.setBigDecimal(8, wrk_actions.RESPONSIBLE_USER);

								if (wrk_actions.ACTION_NOTES1 == null) {
									pstmt_tDBOutput_6.setNull(9, java.sql.Types.VARCHAR);
								} else {
									pstmt_tDBOutput_6.setString(9, wrk_actions.ACTION_NOTES1);
								}

								if (wrk_actions.ACTION_NOTES2 == null) {
									pstmt_tDBOutput_6.setNull(10, java.sql.Types.VARCHAR);
								} else {
									pstmt_tDBOutput_6.setString(10, wrk_actions.ACTION_NOTES2);
								}

								if (wrk_actions.ACTION_NOTES3 == null) {
									pstmt_tDBOutput_6.setNull(11, java.sql.Types.VARCHAR);
								} else {
									pstmt_tDBOutput_6.setString(11, wrk_actions.ACTION_NOTES3);
								}

								if (wrk_actions.ACTION_NOTES4 == null) {
									pstmt_tDBOutput_6.setNull(12, java.sql.Types.VARCHAR);
								} else {
									pstmt_tDBOutput_6.setString(12, wrk_actions.ACTION_NOTES4);
								}

								if (wrk_actions.ACTION_NOTES5 == null) {
									pstmt_tDBOutput_6.setNull(13, java.sql.Types.VARCHAR);
								} else {
									pstmt_tDBOutput_6.setString(13, wrk_actions.ACTION_NOTES5);
								}

								if (wrk_actions.GENERAL_NOTES == null) {
									pstmt_tDBOutput_6.setNull(14, java.sql.Types.VARCHAR);
								} else {
									pstmt_tDBOutput_6.setString(14, wrk_actions.GENERAL_NOTES);
								}

								if (wrk_actions.SELECTED_OPTIONS_TEXT == null) {
									pstmt_tDBOutput_6.setNull(15, java.sql.Types.VARCHAR);
								} else {
									pstmt_tDBOutput_6.setString(15, wrk_actions.SELECTED_OPTIONS_TEXT);
								}

								pstmt_tDBOutput_6.setBigDecimal(16, wrk_actions.ACTION_USER);

								if (wrk_actions.ACTION_CATEGORY == null) {
									pstmt_tDBOutput_6.setNull(17, java.sql.Types.VARCHAR);
								} else {
									pstmt_tDBOutput_6.setString(17, wrk_actions.ACTION_CATEGORY);
								}

								if (wrk_actions.SPECIAL_FINAL_STATUS == null) {
									pstmt_tDBOutput_6.setNull(18, java.sql.Types.VARCHAR);
								} else {
									pstmt_tDBOutput_6.setString(18, wrk_actions.SPECIAL_FINAL_STATUS);
								}

								if (wrk_actions.JOURNAL_CODE == null) {
									pstmt_tDBOutput_6.setNull(19, java.sql.Types.VARCHAR);
								} else {
									pstmt_tDBOutput_6.setString(19, wrk_actions.JOURNAL_CODE);
								}

								if (wrk_actions.PUBLICATION_DATE != null) {
									pstmt_tDBOutput_6.setTimestamp(20,
											new java.sql.Timestamp(wrk_actions.PUBLICATION_DATE.getTime()));
								} else {
									pstmt_tDBOutput_6.setNull(20, java.sql.Types.TIMESTAMP);
								}

								if (wrk_actions.IPAS_PROC_TYP == null) {
									pstmt_tDBOutput_6.setNull(21, java.sql.Types.VARCHAR);
								} else {
									pstmt_tDBOutput_6.setString(21, wrk_actions.IPAS_PROC_TYP);
								}

								pstmt_tDBOutput_6.setBigDecimal(22, wrk_actions.IPAS_PROC_NBR);

								pstmt_tDBOutput_6.setBigDecimal(23, wrk_actions.IPAS_ACTION_NBR);

								pstmt_tDBOutput_6.setBigDecimal(24, wrk_actions.ACTION_NBR);

								nb_line_tDBOutput_6++;
								insertedCount_tDBOutput_6 = insertedCount_tDBOutput_6
										+ pstmt_tDBOutput_6.executeUpdate();
							} catch (java.lang.Exception e) {
								whetherReject_tDBOutput_6 = true;
								row17 = new row17Struct();
								row17.FILE_SEQ = wrk_actions.FILE_SEQ;
								row17.FILE_TYPE = wrk_actions.FILE_TYPE;
								row17.FILE_SERIES = wrk_actions.FILE_SERIES;
								row17.FILE_NBR = wrk_actions.FILE_NBR;
								row17.ACTION_TYPE = wrk_actions.ACTION_TYPE;
								row17.ACTION_DATE = wrk_actions.ACTION_DATE;
								row17.MANUAL_DUE_DATE = wrk_actions.MANUAL_DUE_DATE;
								row17.RESPONSIBLE_USER = wrk_actions.RESPONSIBLE_USER;
								row17.ACTION_NOTES1 = wrk_actions.ACTION_NOTES1;
								row17.ACTION_NOTES2 = wrk_actions.ACTION_NOTES2;
								row17.ACTION_NOTES3 = wrk_actions.ACTION_NOTES3;
								row17.ACTION_NOTES4 = wrk_actions.ACTION_NOTES4;
								row17.ACTION_NOTES5 = wrk_actions.ACTION_NOTES5;
								row17.GENERAL_NOTES = wrk_actions.GENERAL_NOTES;
								row17.SELECTED_OPTIONS_TEXT = wrk_actions.SELECTED_OPTIONS_TEXT;
								row17.ACTION_USER = wrk_actions.ACTION_USER;
								row17.ACTION_CATEGORY = wrk_actions.ACTION_CATEGORY;
								row17.SPECIAL_FINAL_STATUS = wrk_actions.SPECIAL_FINAL_STATUS;
								row17.JOURNAL_CODE = wrk_actions.JOURNAL_CODE;
								row17.PUBLICATION_DATE = wrk_actions.PUBLICATION_DATE;
								row17.IPAS_PROC_TYP = wrk_actions.IPAS_PROC_TYP;
								row17.IPAS_PROC_NBR = wrk_actions.IPAS_PROC_NBR;
								row17.IPAS_ACTION_NBR = wrk_actions.IPAS_ACTION_NBR;
								row17.ACTION_NBR = wrk_actions.ACTION_NBR;
								rejectedCount_tDBOutput_6 = rejectedCount_tDBOutput_6 + 1;
								row17.errorCode = ((java.sql.SQLException) e).getSQLState();
								row17.errorMessage = e.getMessage() + " - Line: " + tos_count_tDBOutput_6;
							}
							if (!whetherReject_tDBOutput_6) {
							}
							////////// batch execute by batch size///////
							class LimitBytesHelper_tDBOutput_6 {
								public int limitBytePart1(int counter, java.sql.PreparedStatement pstmt_tDBOutput_6)
										throws Exception {
									try {

										for (int countEach_tDBOutput_6 : pstmt_tDBOutput_6.executeBatch()) {
											if (countEach_tDBOutput_6 == -2 || countEach_tDBOutput_6 == -3) {
												break;
											}
											counter += countEach_tDBOutput_6;
										}

									} catch (java.sql.BatchUpdateException e) {

										int countSum_tDBOutput_6 = 0;
										for (int countEach_tDBOutput_6 : e.getUpdateCounts()) {
											counter += (countEach_tDBOutput_6 < 0 ? 0 : countEach_tDBOutput_6);
										}

										System.err.println(e.getMessage());

									}
									return counter;
								}

								public int limitBytePart2(int counter, java.sql.PreparedStatement pstmt_tDBOutput_6)
										throws Exception {
									try {

										for (int countEach_tDBOutput_6 : pstmt_tDBOutput_6.executeBatch()) {
											if (countEach_tDBOutput_6 == -2 || countEach_tDBOutput_6 == -3) {
												break;
											}
											counter += countEach_tDBOutput_6;
										}

									} catch (java.sql.BatchUpdateException e) {

										for (int countEach_tDBOutput_6 : e.getUpdateCounts()) {
											counter += (countEach_tDBOutput_6 < 0 ? 0 : countEach_tDBOutput_6);
										}

										System.err.println(e.getMessage());

									}
									return counter;
								}
							}

							//////////// commit every////////////

							commitCounter_tDBOutput_6++;
							if (commitEvery_tDBOutput_6 <= commitCounter_tDBOutput_6) {

								conn_tDBOutput_6.commit();

								commitCounter_tDBOutput_6 = 0;
							}

							tos_count_tDBOutput_6++;

							/**
							 * [tDBOutput_6 main ] stop
							 */

							/**
							 * [tDBOutput_6 process_data_begin ] start
							 */

							currentComponent = "tDBOutput_6";

							/**
							 * [tDBOutput_6 process_data_begin ] stop
							 */
// Start of branch "row17"
							if (row17 != null) {

								/**
								 * [tLogRow_6 main ] start
								 */

								currentComponent = "tLogRow_6";

								if (execStat) {
									runStat.updateStatOnConnection(iterateId, 1, 1

											, "row17"

									);
								}

///////////////////////		

								strBuffer_tLogRow_6 = new StringBuilder();

								if (row17.FILE_SEQ != null) { //

									strBuffer_tLogRow_6.append(String.valueOf(row17.FILE_SEQ));

								} //

								strBuffer_tLogRow_6.append("|");

								if (row17.FILE_TYPE != null) { //

									strBuffer_tLogRow_6.append(String.valueOf(row17.FILE_TYPE));

								} //

								strBuffer_tLogRow_6.append("|");

								if (row17.FILE_SERIES != null) { //

									strBuffer_tLogRow_6.append(row17.FILE_SERIES
											.setScale(0, java.math.RoundingMode.HALF_UP).toPlainString());

								} //

								strBuffer_tLogRow_6.append("|");

								if (row17.FILE_NBR != null) { //

									strBuffer_tLogRow_6.append(
											row17.FILE_NBR.setScale(0, java.math.RoundingMode.HALF_UP).toPlainString());

								} //

								strBuffer_tLogRow_6.append("|");

								if (row17.ACTION_TYPE != null) { //

									strBuffer_tLogRow_6.append(String.valueOf(row17.ACTION_TYPE));

								} //

								strBuffer_tLogRow_6.append("|");

								if (row17.ACTION_DATE != null) { //

									strBuffer_tLogRow_6
											.append(FormatterUtils.format_Date(row17.ACTION_DATE, "dd-MM-yyyy"));

								} //

								strBuffer_tLogRow_6.append("|");

								if (row17.MANUAL_DUE_DATE != null) { //

									strBuffer_tLogRow_6
											.append(FormatterUtils.format_Date(row17.MANUAL_DUE_DATE, "dd-MM-yyyy"));

								} //

								strBuffer_tLogRow_6.append("|");

								if (row17.RESPONSIBLE_USER != null) { //

									strBuffer_tLogRow_6.append(row17.RESPONSIBLE_USER
											.setScale(0, java.math.RoundingMode.HALF_UP).toPlainString());

								} //

								strBuffer_tLogRow_6.append("|");

								if (row17.ACTION_NOTES1 != null) { //

									strBuffer_tLogRow_6.append(String.valueOf(row17.ACTION_NOTES1));

								} //

								strBuffer_tLogRow_6.append("|");

								if (row17.ACTION_NOTES2 != null) { //

									strBuffer_tLogRow_6.append(String.valueOf(row17.ACTION_NOTES2));

								} //

								strBuffer_tLogRow_6.append("|");

								if (row17.ACTION_NOTES3 != null) { //

									strBuffer_tLogRow_6.append(String.valueOf(row17.ACTION_NOTES3));

								} //

								strBuffer_tLogRow_6.append("|");

								if (row17.ACTION_NOTES4 != null) { //

									strBuffer_tLogRow_6.append(String.valueOf(row17.ACTION_NOTES4));

								} //

								strBuffer_tLogRow_6.append("|");

								if (row17.ACTION_NOTES5 != null) { //

									strBuffer_tLogRow_6.append(String.valueOf(row17.ACTION_NOTES5));

								} //

								strBuffer_tLogRow_6.append("|");

								if (row17.GENERAL_NOTES != null) { //

									strBuffer_tLogRow_6.append(String.valueOf(row17.GENERAL_NOTES));

								} //

								strBuffer_tLogRow_6.append("|");

								if (row17.SELECTED_OPTIONS_TEXT != null) { //

									strBuffer_tLogRow_6.append(String.valueOf(row17.SELECTED_OPTIONS_TEXT));

								} //

								strBuffer_tLogRow_6.append("|");

								if (row17.ACTION_USER != null) { //

									strBuffer_tLogRow_6.append(row17.ACTION_USER
											.setScale(0, java.math.RoundingMode.HALF_UP).toPlainString());

								} //

								strBuffer_tLogRow_6.append("|");

								if (row17.ACTION_CATEGORY != null) { //

									strBuffer_tLogRow_6.append(String.valueOf(row17.ACTION_CATEGORY));

								} //

								strBuffer_tLogRow_6.append("|");

								if (row17.SPECIAL_FINAL_STATUS != null) { //

									strBuffer_tLogRow_6.append(String.valueOf(row17.SPECIAL_FINAL_STATUS));

								} //

								strBuffer_tLogRow_6.append("|");

								if (row17.JOURNAL_CODE != null) { //

									strBuffer_tLogRow_6.append(String.valueOf(row17.JOURNAL_CODE));

								} //

								strBuffer_tLogRow_6.append("|");

								if (row17.PUBLICATION_DATE != null) { //

									strBuffer_tLogRow_6
											.append(FormatterUtils.format_Date(row17.PUBLICATION_DATE, "dd-MM-yyyy"));

								} //

								strBuffer_tLogRow_6.append("|");

								if (row17.IPAS_PROC_TYP != null) { //

									strBuffer_tLogRow_6.append(String.valueOf(row17.IPAS_PROC_TYP));

								} //

								strBuffer_tLogRow_6.append("|");

								if (row17.IPAS_PROC_NBR != null) { //

									strBuffer_tLogRow_6.append(row17.IPAS_PROC_NBR
											.setScale(0, java.math.RoundingMode.HALF_UP).toPlainString());

								} //

								strBuffer_tLogRow_6.append("|");

								if (row17.IPAS_ACTION_NBR != null) { //

									strBuffer_tLogRow_6.append(row17.IPAS_ACTION_NBR
											.setScale(0, java.math.RoundingMode.HALF_UP).toPlainString());

								} //

								strBuffer_tLogRow_6.append("|");

								if (row17.ACTION_NBR != null) { //

									strBuffer_tLogRow_6.append(row17.ACTION_NBR
											.setScale(0, java.math.RoundingMode.HALF_UP).toPlainString());

								} //

								strBuffer_tLogRow_6.append("|");

								if (row17.errorCode != null) { //

									strBuffer_tLogRow_6.append(String.valueOf(row17.errorCode));

								} //

								strBuffer_tLogRow_6.append("|");

								if (row17.errorMessage != null) { //

									strBuffer_tLogRow_6.append(String.valueOf(row17.errorMessage));

								} //

								if (globalMap.get("tLogRow_CONSOLE") != null) {
									consoleOut_tLogRow_6 = (java.io.PrintStream) globalMap.get("tLogRow_CONSOLE");
								} else {
									consoleOut_tLogRow_6 = new java.io.PrintStream(
											new java.io.BufferedOutputStream(System.out));
									globalMap.put("tLogRow_CONSOLE", consoleOut_tLogRow_6);
								}
								consoleOut_tLogRow_6.println(strBuffer_tLogRow_6.toString());
								consoleOut_tLogRow_6.flush();
								nb_line_tLogRow_6++;
//////

//////                    

///////////////////////    			

								tos_count_tLogRow_6++;

								/**
								 * [tLogRow_6 main ] stop
								 */

								/**
								 * [tLogRow_6 process_data_begin ] start
								 */

								currentComponent = "tLogRow_6";

								/**
								 * [tLogRow_6 process_data_begin ] stop
								 */

								/**
								 * [tLogRow_6 process_data_end ] start
								 */

								currentComponent = "tLogRow_6";

								/**
								 * [tLogRow_6 process_data_end ] stop
								 */

							} // End of branch "row17"

							/**
							 * [tDBOutput_6 process_data_end ] start
							 */

							currentComponent = "tDBOutput_6";

							/**
							 * [tDBOutput_6 process_data_end ] stop
							 */

						} // End of branch "wrk_actions"

						/**
						 * [tMap_6 process_data_end ] start
						 */

						currentComponent = "tMap_6";

						/**
						 * [tMap_6 process_data_end ] stop
						 */

						/**
						 * [tDBInput_17 process_data_end ] start
						 */

						currentComponent = "tDBInput_17";

						/**
						 * [tDBInput_17 process_data_end ] stop
						 */

						/**
						 * [tDBInput_17 end ] start
						 */

						currentComponent = "tDBInput_17";

					}
				} finally {
					if (rs_tDBInput_17 != null) {
						rs_tDBInput_17.close();
					}
					if (stmt_tDBInput_17 != null) {
						stmt_tDBInput_17.close();
					}
					if (conn_tDBInput_17 != null && !conn_tDBInput_17.isClosed()) {

						conn_tDBInput_17.close();

						if ("com.mysql.cj.jdbc.Driver".equals((String) globalMap.get("driverClass_"))
								&& routines.system.BundleUtils.inOSGi()) {
							Class.forName("com.mysql.cj.jdbc.AbandonedConnectionCleanupThread")
									.getMethod("checkedShutdown").invoke(null, (Object[]) null);
						}

					}
				}
				globalMap.put("tDBInput_17_NB_LINE", nb_line_tDBInput_17);

				ok_Hash.put("tDBInput_17", true);
				end_Hash.put("tDBInput_17", System.currentTimeMillis());

				/**
				 * [tDBInput_17 end ] stop
				 */

				/**
				 * [tMap_6 end ] start
				 */

				currentComponent = "tMap_6";

// ###############################
// # Lookup hashes releasing
				if (tHash_Lookup_row16 != null) {
					tHash_Lookup_row16.endGet();
				}
				globalMap.remove("tHash_Lookup_row16");

// ###############################      

				if (execStat) {
					runStat.updateStat(resourceMap, iterateId, 2, 0, "row15");
				}

				ok_Hash.put("tMap_6", true);
				end_Hash.put("tMap_6", System.currentTimeMillis());

				/**
				 * [tMap_6 end ] stop
				 */

				/**
				 * [tDBOutput_6 end ] start
				 */

				currentComponent = "tDBOutput_6";

				if (pstmt_tDBOutput_6 != null) {

					pstmt_tDBOutput_6.close();
					resourceMap.remove("pstmt_tDBOutput_6");

				}
				resourceMap.put("statementClosed_tDBOutput_6", true);
				conn_tDBOutput_6.commit();

				conn_tDBOutput_6.close();
				resourceMap.put("finish_tDBOutput_6", true);

				nb_line_deleted_tDBOutput_6 = nb_line_deleted_tDBOutput_6 + deletedCount_tDBOutput_6;
				nb_line_update_tDBOutput_6 = nb_line_update_tDBOutput_6 + updatedCount_tDBOutput_6;
				nb_line_inserted_tDBOutput_6 = nb_line_inserted_tDBOutput_6 + insertedCount_tDBOutput_6;
				nb_line_rejected_tDBOutput_6 = nb_line_rejected_tDBOutput_6 + rejectedCount_tDBOutput_6;

				globalMap.put("tDBOutput_6_NB_LINE", nb_line_tDBOutput_6);
				globalMap.put("tDBOutput_6_NB_LINE_UPDATED", nb_line_update_tDBOutput_6);
				globalMap.put("tDBOutput_6_NB_LINE_INSERTED", nb_line_inserted_tDBOutput_6);
				globalMap.put("tDBOutput_6_NB_LINE_DELETED", nb_line_deleted_tDBOutput_6);
				globalMap.put("tDBOutput_6_NB_LINE_REJECTED", nb_line_rejected_tDBOutput_6);

				if (execStat) {
					runStat.updateStat(resourceMap, iterateId, 2, 0, "wrk_actions");
				}

				ok_Hash.put("tDBOutput_6", true);
				end_Hash.put("tDBOutput_6", System.currentTimeMillis());

				/**
				 * [tDBOutput_6 end ] stop
				 */

				/**
				 * [tLogRow_6 end ] start
				 */

				currentComponent = "tLogRow_6";

//////
//////
				globalMap.put("tLogRow_6_NB_LINE", nb_line_tLogRow_6);

///////////////////////    			

				if (execStat) {
					runStat.updateStat(resourceMap, iterateId, 2, 0, "row17");
				}

				ok_Hash.put("tLogRow_6", true);
				end_Hash.put("tLogRow_6", System.currentTimeMillis());

				/**
				 * [tLogRow_6 end ] stop
				 */

			} // end the resume

			if (resumeEntryMethodName == null || globalResumeTicket) {
				resumeUtil.addLog("CHECKPOINT", "CONNECTION:SUBJOB_OK:tDBInput_17:OnSubjobOk", "",
						Thread.currentThread().getId() + "", "", "", "", "", "");
			}

			if (execStat) {
				runStat.updateStatOnConnection("OnSubjobOk11", 0, "ok");
			}

			tDBRow_1Process(globalMap);

		} catch (java.lang.Exception e) {

			TalendException te = new TalendException(e, currentComponent, globalMap);

			throw te;
		} catch (java.lang.Error error) {

			runStat.stopThreadStat();

			throw error;
		} finally {

			// free memory for "tMap_6"
			globalMap.remove("tHash_Lookup_row16");

			try {

				/**
				 * [tDBInput_17 finally ] start
				 */

				currentComponent = "tDBInput_17";

				/**
				 * [tDBInput_17 finally ] stop
				 */

				/**
				 * [tMap_6 finally ] start
				 */

				currentComponent = "tMap_6";

				/**
				 * [tMap_6 finally ] stop
				 */

				/**
				 * [tDBOutput_6 finally ] start
				 */

				currentComponent = "tDBOutput_6";

				try {
					if (resourceMap.get("statementClosed_tDBOutput_6") == null) {
						java.sql.PreparedStatement pstmtToClose_tDBOutput_6 = null;
						if ((pstmtToClose_tDBOutput_6 = (java.sql.PreparedStatement) resourceMap
								.remove("pstmt_tDBOutput_6")) != null) {
							pstmtToClose_tDBOutput_6.close();
						}
					}
				} finally {
					if (resourceMap.get("finish_tDBOutput_6") == null) {
						java.sql.Connection ctn_tDBOutput_6 = null;
						if ((ctn_tDBOutput_6 = (java.sql.Connection) resourceMap.get("conn_tDBOutput_6")) != null) {
							try {
								ctn_tDBOutput_6.close();
							} catch (java.sql.SQLException sqlEx_tDBOutput_6) {
								String errorMessage_tDBOutput_6 = "failed to close the connection in tDBOutput_6 :"
										+ sqlEx_tDBOutput_6.getMessage();
								System.err.println(errorMessage_tDBOutput_6);
							}
						}
					}
				}

				/**
				 * [tDBOutput_6 finally ] stop
				 */

				/**
				 * [tLogRow_6 finally ] start
				 */

				currentComponent = "tLogRow_6";

				/**
				 * [tLogRow_6 finally ] stop
				 */

			} catch (java.lang.Exception e) {
				// ignore
			} catch (java.lang.Error error) {
				// ignore
			}
			resourceMap = null;
		}

		globalMap.put("tDBInput_17_SUBPROCESS_STATE", 1);
	}

	public void tDBRow_1Process(final java.util.Map<String, Object> globalMap) throws TalendException {
		globalMap.put("tDBRow_1_SUBPROCESS_STATE", 0);

		final boolean execStat = this.execStat;

		String iterateId = "";

		String currentComponent = "";
		java.util.Map<String, Object> resourceMap = new java.util.HashMap<String, Object>();

		try {
			// TDI-39566 avoid throwing an useless Exception
			boolean resumeIt = true;
			if (globalResumeTicket == false && resumeEntryMethodName != null) {
				String currentMethodName = new java.lang.Exception().getStackTrace()[0].getMethodName();
				resumeIt = resumeEntryMethodName.equals(currentMethodName);
			}
			if (resumeIt || globalResumeTicket) { // start the resume
				globalResumeTicket = true;

				/**
				 * [tDBRow_1 begin ] start
				 */

				ok_Hash.put("tDBRow_1", false);
				start_Hash.put("tDBRow_1", System.currentTimeMillis());

				currentComponent = "tDBRow_1";

				int tos_count_tDBRow_1 = 0;

				java.sql.Connection conn_tDBRow_1 = null;
				String query_tDBRow_1 = "";
				boolean whetherReject_tDBRow_1 = false;
				String driverClass_tDBRow_1 = "net.sourceforge.jtds.jdbc.Driver";
				java.lang.Class jdbcclazz_tDBRow_1 = java.lang.Class.forName(driverClass_tDBRow_1);

				String port_tDBRow_1 = "1433";
				String dbname_tDBRow_1 = "MARCAS_PY";

				String url_tDBRow_1 = "jdbc:jtds:sqlserver://" + "localhost";

				if (!"".equals(port_tDBRow_1)) {
					url_tDBRow_1 += ":" + "1433";
				}
				if (!"".equals(dbname_tDBRow_1)) {

					url_tDBRow_1 += "//" + "MARCAS_PY";

				}
				url_tDBRow_1 += ";appName=" + projectName + ";" + "";

				String dbUser_tDBRow_1 = "ADMIN";

				final String decryptedPassword_tDBRow_1 = routines.system.PasswordEncryptUtil
						.decryptPassword("enc:routine.encryption.key.v1:YaKElwocebej++0l36icQJ7I4vf1Hr13zvD0rHDIpu1Y");

				String dbPwd_tDBRow_1 = decryptedPassword_tDBRow_1;

				conn_tDBRow_1 = java.sql.DriverManager.getConnection(url_tDBRow_1, dbUser_tDBRow_1, dbPwd_tDBRow_1);

				resourceMap.put("conn_tDBRow_1", conn_tDBRow_1);
				if (conn_tDBRow_1.getAutoCommit()) {

					conn_tDBRow_1.setAutoCommit(false);

				}
				int commitEvery_tDBRow_1 = 10000;
				int commitCounter_tDBRow_1 = 0;

				java.sql.Statement stmt_tDBRow_1 = conn_tDBRow_1.createStatement();
				resourceMap.put("stmt_tDBRow_1", stmt_tDBRow_1);

				/**
				 * [tDBRow_1 begin ] stop
				 */

				/**
				 * [tDBRow_1 main ] start
				 */

				currentComponent = "tDBRow_1";

				query_tDBRow_1 = "\"/* postpone due date if Saturday/Sunday */\n                set datefirst 7;        /* set Sunday = 1 */\n           "
						+ "     update  wrk_mark_actions\n                set     manual_due_date = dateadd(dd, 2, manual_due_date)\n              "
						+ "  where   datepart(dw, manual_due_date) = 7 /* Saturday */\n                ;\n                update  wrk_mark_actions"
						+ "\n                set     manual_due_date = dateadd(dd, 1, manual_due_date)\n                where   datepart(dw, manual_"
						+ "due_date) = 1 /* Sunday */\n                ;;\"";
				whetherReject_tDBRow_1 = false;
				globalMap.put("tDBRow_1_QUERY", query_tDBRow_1);
				try {
					stmt_tDBRow_1.execute(query_tDBRow_1);

				} catch (java.lang.Exception e) {
					whetherReject_tDBRow_1 = true;

					System.err.print(e.getMessage());

				}

				if (!whetherReject_tDBRow_1) {

				}

				commitCounter_tDBRow_1++;
				if (commitEvery_tDBRow_1 <= commitCounter_tDBRow_1) {

					conn_tDBRow_1.commit();

					commitCounter_tDBRow_1 = 0;
				}

				tos_count_tDBRow_1++;

				/**
				 * [tDBRow_1 main ] stop
				 */

				/**
				 * [tDBRow_1 process_data_begin ] start
				 */

				currentComponent = "tDBRow_1";

				/**
				 * [tDBRow_1 process_data_begin ] stop
				 */

				/**
				 * [tDBRow_1 process_data_end ] start
				 */

				currentComponent = "tDBRow_1";

				/**
				 * [tDBRow_1 process_data_end ] stop
				 */

				/**
				 * [tDBRow_1 end ] start
				 */

				currentComponent = "tDBRow_1";

				stmt_tDBRow_1.close();
				resourceMap.remove("stmt_tDBRow_1");
				resourceMap.put("statementClosed_tDBRow_1", true);
				if (commitEvery_tDBRow_1 > commitCounter_tDBRow_1) {

					conn_tDBRow_1.commit();

					commitCounter_tDBRow_1 = 0;

				}
				conn_tDBRow_1.close();

				if ("com.mysql.cj.jdbc.Driver".equals((String) globalMap.get("driverClass_"))
						&& routines.system.BundleUtils.inOSGi()) {
					Class.forName("com.mysql.cj.jdbc.AbandonedConnectionCleanupThread").getMethod("checkedShutdown")
							.invoke(null, (Object[]) null);
				}

				resourceMap.put("finish_tDBRow_1", true);

				ok_Hash.put("tDBRow_1", true);
				end_Hash.put("tDBRow_1", System.currentTimeMillis());

				/**
				 * [tDBRow_1 end ] stop
				 */
			} // end the resume

			if (resumeEntryMethodName == null || globalResumeTicket) {
				resumeUtil.addLog("CHECKPOINT", "CONNECTION:SUBJOB_OK:tDBRow_1:OnSubjobOk", "",
						Thread.currentThread().getId() + "", "", "", "", "", "");
			}

			if (execStat) {
				runStat.updateStatOnConnection("OnSubjobOk13", 0, "ok");
			}

			tMsgBox_1Process(globalMap);

		} catch (java.lang.Exception e) {

			TalendException te = new TalendException(e, currentComponent, globalMap);

			throw te;
		} catch (java.lang.Error error) {

			runStat.stopThreadStat();

			throw error;
		} finally {

			try {

				/**
				 * [tDBRow_1 finally ] start
				 */

				currentComponent = "tDBRow_1";

				try {
					if (resourceMap.get("statementClosed_tDBRow_1") == null) {
						java.sql.Statement stmtToClose_tDBRow_1 = null;
						if ((stmtToClose_tDBRow_1 = (java.sql.Statement) resourceMap.remove("stmt_tDBRow_1")) != null) {
							stmtToClose_tDBRow_1.close();
						}
					}
				} finally {
					if (resourceMap.get("finish_tDBRow_1") == null) {
						java.sql.Connection ctn_tDBRow_1 = null;
						if ((ctn_tDBRow_1 = (java.sql.Connection) resourceMap.get("conn_tDBRow_1")) != null) {
							try {
								ctn_tDBRow_1.close();
							} catch (java.sql.SQLException sqlEx_tDBRow_1) {
								String errorMessage_tDBRow_1 = "failed to close the connection in tDBRow_1 :"
										+ sqlEx_tDBRow_1.getMessage();
								System.err.println(errorMessage_tDBRow_1);
							}
						}
					}
				}

				/**
				 * [tDBRow_1 finally ] stop
				 */
			} catch (java.lang.Exception e) {
				// ignore
			} catch (java.lang.Error error) {
				// ignore
			}
			resourceMap = null;
		}

		globalMap.put("tDBRow_1_SUBPROCESS_STATE", 1);
	}

	public void tMsgBox_1Process(final java.util.Map<String, Object> globalMap) throws TalendException {
		globalMap.put("tMsgBox_1_SUBPROCESS_STATE", 0);

		final boolean execStat = this.execStat;

		String iterateId = "";

		String currentComponent = "";
		java.util.Map<String, Object> resourceMap = new java.util.HashMap<String, Object>();

		try {
			// TDI-39566 avoid throwing an useless Exception
			boolean resumeIt = true;
			if (globalResumeTicket == false && resumeEntryMethodName != null) {
				String currentMethodName = new java.lang.Exception().getStackTrace()[0].getMethodName();
				resumeIt = resumeEntryMethodName.equals(currentMethodName);
			}
			if (resumeIt || globalResumeTicket) { // start the resume
				globalResumeTicket = true;

				/**
				 * [tMsgBox_1 begin ] start
				 */

				ok_Hash.put("tMsgBox_1", false);
				start_Hash.put("tMsgBox_1", System.currentTimeMillis());

				currentComponent = "tMsgBox_1";

				int tos_count_tMsgBox_1 = 0;

				/**
				 * [tMsgBox_1 begin ] stop
				 */

				/**
				 * [tMsgBox_1 main ] start
				 */

				currentComponent = "tMsgBox_1";

				int messageIcontMsgBox_1 = javax.swing.JOptionPane.INFORMATION_MESSAGE;
				String titletMsgBox_1 = "Talend Open Studio";
				String messagetMsgBox_1 = "Step 1: populate work tables  to add  required data";
				String resulttMsgBox_1 = null;

				javax.swing.JOptionPane.showMessageDialog(null, messagetMsgBox_1, titletMsgBox_1, messageIcontMsgBox_1);
				resulttMsgBox_1 = String.valueOf(1);

				globalMap.put("tMsgBox_1_RESULT", resulttMsgBox_1);

				tos_count_tMsgBox_1++;

				/**
				 * [tMsgBox_1 main ] stop
				 */

				/**
				 * [tMsgBox_1 process_data_begin ] start
				 */

				currentComponent = "tMsgBox_1";

				/**
				 * [tMsgBox_1 process_data_begin ] stop
				 */

				/**
				 * [tMsgBox_1 process_data_end ] start
				 */

				currentComponent = "tMsgBox_1";

				/**
				 * [tMsgBox_1 process_data_end ] stop
				 */

				/**
				 * [tMsgBox_1 end ] start
				 */

				currentComponent = "tMsgBox_1";

				ok_Hash.put("tMsgBox_1", true);
				end_Hash.put("tMsgBox_1", System.currentTimeMillis());

				/**
				 * [tMsgBox_1 end ] stop
				 */
			} // end the resume

		} catch (java.lang.Exception e) {

			TalendException te = new TalendException(e, currentComponent, globalMap);

			throw te;
		} catch (java.lang.Error error) {

			runStat.stopThreadStat();

			throw error;
		} finally {

			try {

				/**
				 * [tMsgBox_1 finally ] start
				 */

				currentComponent = "tMsgBox_1";

				/**
				 * [tMsgBox_1 finally ] stop
				 */
			} catch (java.lang.Exception e) {
				// ignore
			} catch (java.lang.Error error) {
				// ignore
			}
			resourceMap = null;
		}

		globalMap.put("tMsgBox_1_SUBPROCESS_STATE", 1);
	}

	public static class row7Struct implements routines.system.IPersistableComparableLookupRow<row7Struct> {
		final static byte[] commonByteArrayLock_WIPO_PROJECTS_G2b_Mig_TM = new byte[0];
		static byte[] commonByteArray_WIPO_PROJECTS_G2b_Mig_TM = new byte[0];
		protected static final int DEFAULT_HASHCODE = 1;
		protected static final int PRIME = 31;
		protected int hashCode = DEFAULT_HASHCODE;
		public boolean hashCodeDirty = true;

		public String loopKey;

		public String FILE_SEQ;

		public String getFILE_SEQ() {
			return this.FILE_SEQ;
		}

		public String FILE_TYPE;

		public String getFILE_TYPE() {
			return this.FILE_TYPE;
		}

		public BigDecimal FILE_SERIES;

		public BigDecimal getFILE_SERIES() {
			return this.FILE_SERIES;
		}

		public BigDecimal FILE_NBR;

		public BigDecimal getFILE_NBR() {
			return this.FILE_NBR;
		}

		public String DOC_ORI;

		public String getDOC_ORI() {
			return this.DOC_ORI;
		}

		public BigDecimal DOC_SERIES;

		public BigDecimal getDOC_SERIES() {
			return this.DOC_SERIES;
		}

		public BigDecimal DOC_NBR;

		public BigDecimal getDOC_NBR() {
			return this.DOC_NBR;
		}

		public BigDecimal IND_IMPORT;

		public BigDecimal getIND_IMPORT() {
			return this.IND_IMPORT;
		}

		public String APPLICATION_TYPE;

		public String getAPPLICATION_TYPE() {
			return this.APPLICATION_TYPE;
		}

		public String APPLICATION_SUBTYPE;

		public String getAPPLICATION_SUBTYPE() {
			return this.APPLICATION_SUBTYPE;
		}

		public BigDecimal LAW_CODE;

		public BigDecimal getLAW_CODE() {
			return this.LAW_CODE;
		}

		public java.util.Date FILING_DATE;

		public java.util.Date getFILING_DATE() {
			return this.FILING_DATE;
		}

		public java.util.Date RECEPTION_DATE;

		public java.util.Date getRECEPTION_DATE() {
			return this.RECEPTION_DATE;
		}

		public java.util.Date PUBLICATION_DATE;

		public java.util.Date getPUBLICATION_DATE() {
			return this.PUBLICATION_DATE;
		}

		public String PUBLICATION_NOTES;

		public String getPUBLICATION_NOTES() {
			return this.PUBLICATION_NOTES;
		}

		public BigDecimal IND_REGISTERED;

		public BigDecimal getIND_REGISTERED() {
			return this.IND_REGISTERED;
		}

		public String REGISTRATION_TYPE;

		public String getREGISTRATION_TYPE() {
			return this.REGISTRATION_TYPE;
		}

		public BigDecimal REGISTRATION_SERIES;

		public BigDecimal getREGISTRATION_SERIES() {
			return this.REGISTRATION_SERIES;
		}

		public BigDecimal REGISTRATION_NBR;

		public BigDecimal getREGISTRATION_NBR() {
			return this.REGISTRATION_NBR;
		}

		public String REGISTRATION_DUP;

		public String getREGISTRATION_DUP() {
			return this.REGISTRATION_DUP;
		}

		public java.util.Date REGISTRATION_DATE;

		public java.util.Date getREGISTRATION_DATE() {
			return this.REGISTRATION_DATE;
		}

		public java.util.Date ENTITLEMENT_DATE;

		public java.util.Date getENTITLEMENT_DATE() {
			return this.ENTITLEMENT_DATE;
		}

		public java.util.Date EXPIRATION_DATE;

		public java.util.Date getEXPIRATION_DATE() {
			return this.EXPIRATION_DATE;
		}

		public java.util.Date EXHIBITION_DATE;

		public java.util.Date getEXHIBITION_DATE() {
			return this.EXHIBITION_DATE;
		}

		public String EXHIBITION_NOTES;

		public String getEXHIBITION_NOTES() {
			return this.EXHIBITION_NOTES;
		}

		public String SIGN_TYPE;

		public String getSIGN_TYPE() {
			return this.SIGN_TYPE;
		}

		public String MARK_NAME;

		public String getMARK_NAME() {
			return this.MARK_NAME;
		}

		public String MARK_NAME_LANG2;

		public String getMARK_NAME_LANG2() {
			return this.MARK_NAME_LANG2;
		}

		public String MARK_TRANSLATION;

		public String getMARK_TRANSLATION() {
			return this.MARK_TRANSLATION;
		}

		public String MARK_TRANSLATION_LANG2;

		public String getMARK_TRANSLATION_LANG2() {
			return this.MARK_TRANSLATION_LANG2;
		}

		public String MARK_TRANSLITERATION;

		public String getMARK_TRANSLITERATION() {
			return this.MARK_TRANSLITERATION;
		}

		public String MARK_TRANSLITERATION_LANG2;

		public String getMARK_TRANSLITERATION_LANG2() {
			return this.MARK_TRANSLITERATION_LANG2;
		}

		public String SERIES_DESCRIPTION;

		public String getSERIES_DESCRIPTION() {
			return this.SERIES_DESCRIPTION;
		}

		public String COLOUR_DESCRIPTION;

		public String getCOLOUR_DESCRIPTION() {
			return this.COLOUR_DESCRIPTION;
		}

		public String COLOUR_DESCR_LANG2;

		public String getCOLOUR_DESCR_LANG2() {
			return this.COLOUR_DESCR_LANG2;
		}

		public String DISCLAIMER;

		public String getDISCLAIMER() {
			return this.DISCLAIMER;
		}

		public String DISCLAIMER_LANG2;

		public String getDISCLAIMER_LANG2() {
			return this.DISCLAIMER_LANG2;
		}

		public String BY_CONSENT;

		public String getBY_CONSENT() {
			return this.BY_CONSENT;
		}

		public String REGULATIONS;

		public String getREGULATIONS() {
			return this.REGULATIONS;
		}

		public String NOTES;

		public String getNOTES() {
			return this.NOTES;
		}

		public BigDecimal CAPTURE_USER_ID;

		public BigDecimal getCAPTURE_USER_ID() {
			return this.CAPTURE_USER_ID;
		}

		public java.util.Date CAPTURE_DATE;

		public java.util.Date getCAPTURE_DATE() {
			return this.CAPTURE_DATE;
		}

		public BigDecimal PUBLICATION_NBR;

		public BigDecimal getPUBLICATION_NBR() {
			return this.PUBLICATION_NBR;
		}

		public String PUBLICATION_SER;

		public String getPUBLICATION_SER() {
			return this.PUBLICATION_SER;
		}

		public String PUBLICATION_TYP;

		public String getPUBLICATION_TYP() {
			return this.PUBLICATION_TYP;
		}

		public java.util.Date FIRST_PRIORITY_DATE;

		public java.util.Date getFIRST_PRIORITY_DATE() {
			return this.FIRST_PRIORITY_DATE;
		}

		public BigDecimal MAIN_OWNER_ADDR_NBR;

		public BigDecimal getMAIN_OWNER_ADDR_NBR() {
			return this.MAIN_OWNER_ADDR_NBR;
		}

		public BigDecimal MAIN_OWNER_PERSON_NBR;

		public BigDecimal getMAIN_OWNER_PERSON_NBR() {
			return this.MAIN_OWNER_PERSON_NBR;
		}

		public BigDecimal SERVICE_ADDR_NBR;

		public BigDecimal getSERVICE_ADDR_NBR() {
			return this.SERVICE_ADDR_NBR;
		}

		public BigDecimal SERVICE_PERSON_NBR;

		public BigDecimal getSERVICE_PERSON_NBR() {
			return this.SERVICE_PERSON_NBR;
		}

		public String NICE_CLASS_TXT;

		public String getNICE_CLASS_TXT() {
			return this.NICE_CLASS_TXT;
		}

		public BigDecimal MARK_CODE;

		public BigDecimal getMARK_CODE() {
			return this.MARK_CODE;
		}

		public String PROC_TYP;

		public String getPROC_TYP() {
			return this.PROC_TYP;
		}

		public BigDecimal PROC_NBR;

		public BigDecimal getPROC_NBR() {
			return this.PROC_NBR;
		}

		public String STATUS_CODE;

		public String getSTATUS_CODE() {
			return this.STATUS_CODE;
		}

		@Override
		public int hashCode() {
			if (this.hashCodeDirty) {
				final int prime = PRIME;
				int result = DEFAULT_HASHCODE;

				result = prime * result + ((this.FILE_SEQ == null) ? 0 : this.FILE_SEQ.hashCode());

				result = prime * result + ((this.FILE_TYPE == null) ? 0 : this.FILE_TYPE.hashCode());

				result = prime * result
						+ ((this.FILE_SERIES == null) ? 0 : new Double(this.FILE_SERIES.doubleValue()).hashCode());

				result = prime * result
						+ ((this.FILE_NBR == null) ? 0 : new Double(this.FILE_NBR.doubleValue()).hashCode());

				this.hashCode = result;
				this.hashCodeDirty = false;
			}
			return this.hashCode;
		}

		@Override
		public boolean equals(Object obj) {
			if (this == obj)
				return true;
			if (obj == null)
				return false;
			if (getClass() != obj.getClass())
				return false;
			final row7Struct other = (row7Struct) obj;

			if (this.FILE_SEQ == null) {
				if (other.FILE_SEQ != null)
					return false;

			} else if (!this.FILE_SEQ.equals(other.FILE_SEQ))

				return false;

			if (this.FILE_TYPE == null) {
				if (other.FILE_TYPE != null)
					return false;

			} else if (!this.FILE_TYPE.equals(other.FILE_TYPE))

				return false;

			if (this.FILE_SERIES == null) {
				if (other.FILE_SERIES != null)
					return false;

			} else if ((other.FILE_SERIES == null) || (this.FILE_SERIES.compareTo(other.FILE_SERIES) != 0))

				return false;

			if (this.FILE_NBR == null) {
				if (other.FILE_NBR != null)
					return false;

			} else if ((other.FILE_NBR == null) || (this.FILE_NBR.compareTo(other.FILE_NBR) != 0))

				return false;

			return true;
		}

		public void copyDataTo(row7Struct other) {

			other.FILE_SEQ = this.FILE_SEQ;
			other.FILE_TYPE = this.FILE_TYPE;
			other.FILE_SERIES = this.FILE_SERIES;
			other.FILE_NBR = this.FILE_NBR;
			other.DOC_ORI = this.DOC_ORI;
			other.DOC_SERIES = this.DOC_SERIES;
			other.DOC_NBR = this.DOC_NBR;
			other.IND_IMPORT = this.IND_IMPORT;
			other.APPLICATION_TYPE = this.APPLICATION_TYPE;
			other.APPLICATION_SUBTYPE = this.APPLICATION_SUBTYPE;
			other.LAW_CODE = this.LAW_CODE;
			other.FILING_DATE = this.FILING_DATE;
			other.RECEPTION_DATE = this.RECEPTION_DATE;
			other.PUBLICATION_DATE = this.PUBLICATION_DATE;
			other.PUBLICATION_NOTES = this.PUBLICATION_NOTES;
			other.IND_REGISTERED = this.IND_REGISTERED;
			other.REGISTRATION_TYPE = this.REGISTRATION_TYPE;
			other.REGISTRATION_SERIES = this.REGISTRATION_SERIES;
			other.REGISTRATION_NBR = this.REGISTRATION_NBR;
			other.REGISTRATION_DUP = this.REGISTRATION_DUP;
			other.REGISTRATION_DATE = this.REGISTRATION_DATE;
			other.ENTITLEMENT_DATE = this.ENTITLEMENT_DATE;
			other.EXPIRATION_DATE = this.EXPIRATION_DATE;
			other.EXHIBITION_DATE = this.EXHIBITION_DATE;
			other.EXHIBITION_NOTES = this.EXHIBITION_NOTES;
			other.SIGN_TYPE = this.SIGN_TYPE;
			other.MARK_NAME = this.MARK_NAME;
			other.MARK_NAME_LANG2 = this.MARK_NAME_LANG2;
			other.MARK_TRANSLATION = this.MARK_TRANSLATION;
			other.MARK_TRANSLATION_LANG2 = this.MARK_TRANSLATION_LANG2;
			other.MARK_TRANSLITERATION = this.MARK_TRANSLITERATION;
			other.MARK_TRANSLITERATION_LANG2 = this.MARK_TRANSLITERATION_LANG2;
			other.SERIES_DESCRIPTION = this.SERIES_DESCRIPTION;
			other.COLOUR_DESCRIPTION = this.COLOUR_DESCRIPTION;
			other.COLOUR_DESCR_LANG2 = this.COLOUR_DESCR_LANG2;
			other.DISCLAIMER = this.DISCLAIMER;
			other.DISCLAIMER_LANG2 = this.DISCLAIMER_LANG2;
			other.BY_CONSENT = this.BY_CONSENT;
			other.REGULATIONS = this.REGULATIONS;
			other.NOTES = this.NOTES;
			other.CAPTURE_USER_ID = this.CAPTURE_USER_ID;
			other.CAPTURE_DATE = this.CAPTURE_DATE;
			other.PUBLICATION_NBR = this.PUBLICATION_NBR;
			other.PUBLICATION_SER = this.PUBLICATION_SER;
			other.PUBLICATION_TYP = this.PUBLICATION_TYP;
			other.FIRST_PRIORITY_DATE = this.FIRST_PRIORITY_DATE;
			other.MAIN_OWNER_ADDR_NBR = this.MAIN_OWNER_ADDR_NBR;
			other.MAIN_OWNER_PERSON_NBR = this.MAIN_OWNER_PERSON_NBR;
			other.SERVICE_ADDR_NBR = this.SERVICE_ADDR_NBR;
			other.SERVICE_PERSON_NBR = this.SERVICE_PERSON_NBR;
			other.NICE_CLASS_TXT = this.NICE_CLASS_TXT;
			other.MARK_CODE = this.MARK_CODE;
			other.PROC_TYP = this.PROC_TYP;
			other.PROC_NBR = this.PROC_NBR;
			other.STATUS_CODE = this.STATUS_CODE;

		}

		public void copyKeysDataTo(row7Struct other) {

			other.FILE_SEQ = this.FILE_SEQ;
			other.FILE_TYPE = this.FILE_TYPE;
			other.FILE_SERIES = this.FILE_SERIES;
			other.FILE_NBR = this.FILE_NBR;

		}

		private String readString(ObjectInputStream dis) throws IOException {
			String strReturn = null;
			int length = 0;
			length = dis.readInt();
			if (length == -1) {
				strReturn = null;
			} else {
				if (length > commonByteArray_WIPO_PROJECTS_G2b_Mig_TM.length) {
					if (length < 1024 && commonByteArray_WIPO_PROJECTS_G2b_Mig_TM.length == 0) {
						commonByteArray_WIPO_PROJECTS_G2b_Mig_TM = new byte[1024];
					} else {
						commonByteArray_WIPO_PROJECTS_G2b_Mig_TM = new byte[2 * length];
					}
				}
				dis.readFully(commonByteArray_WIPO_PROJECTS_G2b_Mig_TM, 0, length);
				strReturn = new String(commonByteArray_WIPO_PROJECTS_G2b_Mig_TM, 0, length, utf8Charset);
			}
			return strReturn;
		}

		private void writeString(String str, ObjectOutputStream dos) throws IOException {
			if (str == null) {
				dos.writeInt(-1);
			} else {
				byte[] byteArray = str.getBytes(utf8Charset);
				dos.writeInt(byteArray.length);
				dos.write(byteArray);
			}
		}

		private String readString(DataInputStream dis, ObjectInputStream ois) throws IOException {
			String strReturn = null;
			int length = 0;
			length = dis.readInt();
			if (length == -1) {
				strReturn = null;
			} else {
				byte[] byteArray = new byte[length];
				dis.read(byteArray);
				strReturn = new String(byteArray, utf8Charset);
			}
			return strReturn;
		}

		private void writeString(String str, DataOutputStream dos, ObjectOutputStream oos) throws IOException {
			if (str == null) {
				dos.writeInt(-1);
			} else {
				byte[] byteArray = str.getBytes(utf8Charset);
				dos.writeInt(byteArray.length);
				dos.write(byteArray);
			}
		}

		private java.util.Date readDate(DataInputStream dis, ObjectInputStream ois) throws IOException {
			java.util.Date dateReturn = null;
			int length = 0;
			length = dis.readByte();
			if (length == -1) {
				dateReturn = null;
			} else {
				dateReturn = new Date(dis.readLong());
			}
			return dateReturn;
		}

		private void writeDate(java.util.Date date1, DataOutputStream dos, ObjectOutputStream oos) throws IOException {
			if (date1 == null) {
				dos.writeByte(-1);
			} else {
				dos.writeByte(0);
				dos.writeLong(date1.getTime());
			}
		}

		public void readKeysData(ObjectInputStream dis) {

			synchronized (commonByteArrayLock_WIPO_PROJECTS_G2b_Mig_TM) {

				try {

					int length = 0;

					this.FILE_SEQ = readString(dis);

					this.FILE_TYPE = readString(dis);

					this.FILE_SERIES = (BigDecimal) dis.readObject();

					this.FILE_NBR = (BigDecimal) dis.readObject();

				} catch (IOException e) {
					throw new RuntimeException(e);

				} catch (ClassNotFoundException eCNFE) {
					throw new RuntimeException(eCNFE);

				}

			}

		}

		public void writeKeysData(ObjectOutputStream dos) {
			try {

				// String

				writeString(this.FILE_SEQ, dos);

				// String

				writeString(this.FILE_TYPE, dos);

				// BigDecimal

				dos.writeObject(this.FILE_SERIES);

				// BigDecimal

				dos.writeObject(this.FILE_NBR);

			} catch (IOException e) {
				throw new RuntimeException(e);
			}

		}

		/**
		 * Fill Values data by reading ObjectInputStream.
		 */
		public void readValuesData(DataInputStream dis, ObjectInputStream ois) {
			try {

				int length = 0;

				this.DOC_ORI = readString(dis, ois);

				this.DOC_SERIES = (BigDecimal) ois.readObject();

				this.DOC_NBR = (BigDecimal) ois.readObject();

				this.IND_IMPORT = (BigDecimal) ois.readObject();

				this.APPLICATION_TYPE = readString(dis, ois);

				this.APPLICATION_SUBTYPE = readString(dis, ois);

				this.LAW_CODE = (BigDecimal) ois.readObject();

				this.FILING_DATE = readDate(dis, ois);

				this.RECEPTION_DATE = readDate(dis, ois);

				this.PUBLICATION_DATE = readDate(dis, ois);

				this.PUBLICATION_NOTES = readString(dis, ois);

				this.IND_REGISTERED = (BigDecimal) ois.readObject();

				this.REGISTRATION_TYPE = readString(dis, ois);

				this.REGISTRATION_SERIES = (BigDecimal) ois.readObject();

				this.REGISTRATION_NBR = (BigDecimal) ois.readObject();

				this.REGISTRATION_DUP = readString(dis, ois);

				this.REGISTRATION_DATE = readDate(dis, ois);

				this.ENTITLEMENT_DATE = readDate(dis, ois);

				this.EXPIRATION_DATE = readDate(dis, ois);

				this.EXHIBITION_DATE = readDate(dis, ois);

				this.EXHIBITION_NOTES = readString(dis, ois);

				this.SIGN_TYPE = readString(dis, ois);

				this.MARK_NAME = readString(dis, ois);

				this.MARK_NAME_LANG2 = readString(dis, ois);

				this.MARK_TRANSLATION = readString(dis, ois);

				this.MARK_TRANSLATION_LANG2 = readString(dis, ois);

				this.MARK_TRANSLITERATION = readString(dis, ois);

				this.MARK_TRANSLITERATION_LANG2 = readString(dis, ois);

				this.SERIES_DESCRIPTION = readString(dis, ois);

				this.COLOUR_DESCRIPTION = readString(dis, ois);

				this.COLOUR_DESCR_LANG2 = readString(dis, ois);

				this.DISCLAIMER = readString(dis, ois);

				this.DISCLAIMER_LANG2 = readString(dis, ois);

				this.BY_CONSENT = readString(dis, ois);

				this.REGULATIONS = readString(dis, ois);

				this.NOTES = readString(dis, ois);

				this.CAPTURE_USER_ID = (BigDecimal) ois.readObject();

				this.CAPTURE_DATE = readDate(dis, ois);

				this.PUBLICATION_NBR = (BigDecimal) ois.readObject();

				this.PUBLICATION_SER = readString(dis, ois);

				this.PUBLICATION_TYP = readString(dis, ois);

				this.FIRST_PRIORITY_DATE = readDate(dis, ois);

				this.MAIN_OWNER_ADDR_NBR = (BigDecimal) ois.readObject();

				this.MAIN_OWNER_PERSON_NBR = (BigDecimal) ois.readObject();

				this.SERVICE_ADDR_NBR = (BigDecimal) ois.readObject();

				this.SERVICE_PERSON_NBR = (BigDecimal) ois.readObject();

				this.NICE_CLASS_TXT = readString(dis, ois);

				this.MARK_CODE = (BigDecimal) ois.readObject();

				this.PROC_TYP = readString(dis, ois);

				this.PROC_NBR = (BigDecimal) ois.readObject();

				this.STATUS_CODE = readString(dis, ois);

			} catch (IOException e) {
				throw new RuntimeException(e);

			} catch (ClassNotFoundException eCNFE) {
				throw new RuntimeException(eCNFE);

			}

		}

		/**
		 * Return a byte array which represents Values data.
		 */
		public void writeValuesData(DataOutputStream dos, ObjectOutputStream oos) {
			try {

				writeString(this.DOC_ORI, dos, oos);

				oos.writeObject(this.DOC_SERIES);

				oos.writeObject(this.DOC_NBR);

				oos.writeObject(this.IND_IMPORT);

				writeString(this.APPLICATION_TYPE, dos, oos);

				writeString(this.APPLICATION_SUBTYPE, dos, oos);

				oos.writeObject(this.LAW_CODE);

				writeDate(this.FILING_DATE, dos, oos);

				writeDate(this.RECEPTION_DATE, dos, oos);

				writeDate(this.PUBLICATION_DATE, dos, oos);

				writeString(this.PUBLICATION_NOTES, dos, oos);

				oos.writeObject(this.IND_REGISTERED);

				writeString(this.REGISTRATION_TYPE, dos, oos);

				oos.writeObject(this.REGISTRATION_SERIES);

				oos.writeObject(this.REGISTRATION_NBR);

				writeString(this.REGISTRATION_DUP, dos, oos);

				writeDate(this.REGISTRATION_DATE, dos, oos);

				writeDate(this.ENTITLEMENT_DATE, dos, oos);

				writeDate(this.EXPIRATION_DATE, dos, oos);

				writeDate(this.EXHIBITION_DATE, dos, oos);

				writeString(this.EXHIBITION_NOTES, dos, oos);

				writeString(this.SIGN_TYPE, dos, oos);

				writeString(this.MARK_NAME, dos, oos);

				writeString(this.MARK_NAME_LANG2, dos, oos);

				writeString(this.MARK_TRANSLATION, dos, oos);

				writeString(this.MARK_TRANSLATION_LANG2, dos, oos);

				writeString(this.MARK_TRANSLITERATION, dos, oos);

				writeString(this.MARK_TRANSLITERATION_LANG2, dos, oos);

				writeString(this.SERIES_DESCRIPTION, dos, oos);

				writeString(this.COLOUR_DESCRIPTION, dos, oos);

				writeString(this.COLOUR_DESCR_LANG2, dos, oos);

				writeString(this.DISCLAIMER, dos, oos);

				writeString(this.DISCLAIMER_LANG2, dos, oos);

				writeString(this.BY_CONSENT, dos, oos);

				writeString(this.REGULATIONS, dos, oos);

				writeString(this.NOTES, dos, oos);

				oos.writeObject(this.CAPTURE_USER_ID);

				writeDate(this.CAPTURE_DATE, dos, oos);

				oos.writeObject(this.PUBLICATION_NBR);

				writeString(this.PUBLICATION_SER, dos, oos);

				writeString(this.PUBLICATION_TYP, dos, oos);

				writeDate(this.FIRST_PRIORITY_DATE, dos, oos);

				oos.writeObject(this.MAIN_OWNER_ADDR_NBR);

				oos.writeObject(this.MAIN_OWNER_PERSON_NBR);

				oos.writeObject(this.SERVICE_ADDR_NBR);

				oos.writeObject(this.SERVICE_PERSON_NBR);

				writeString(this.NICE_CLASS_TXT, dos, oos);

				oos.writeObject(this.MARK_CODE);

				writeString(this.PROC_TYP, dos, oos);

				oos.writeObject(this.PROC_NBR);

				writeString(this.STATUS_CODE, dos, oos);

			} catch (IOException e) {
				throw new RuntimeException(e);
			}

		}

		public String toString() {

			StringBuilder sb = new StringBuilder();
			sb.append(super.toString());
			sb.append("[");
			sb.append("FILE_SEQ=" + FILE_SEQ);
			sb.append(",FILE_TYPE=" + FILE_TYPE);
			sb.append(",FILE_SERIES=" + String.valueOf(FILE_SERIES));
			sb.append(",FILE_NBR=" + String.valueOf(FILE_NBR));
			sb.append(",DOC_ORI=" + DOC_ORI);
			sb.append(",DOC_SERIES=" + String.valueOf(DOC_SERIES));
			sb.append(",DOC_NBR=" + String.valueOf(DOC_NBR));
			sb.append(",IND_IMPORT=" + String.valueOf(IND_IMPORT));
			sb.append(",APPLICATION_TYPE=" + APPLICATION_TYPE);
			sb.append(",APPLICATION_SUBTYPE=" + APPLICATION_SUBTYPE);
			sb.append(",LAW_CODE=" + String.valueOf(LAW_CODE));
			sb.append(",FILING_DATE=" + String.valueOf(FILING_DATE));
			sb.append(",RECEPTION_DATE=" + String.valueOf(RECEPTION_DATE));
			sb.append(",PUBLICATION_DATE=" + String.valueOf(PUBLICATION_DATE));
			sb.append(",PUBLICATION_NOTES=" + PUBLICATION_NOTES);
			sb.append(",IND_REGISTERED=" + String.valueOf(IND_REGISTERED));
			sb.append(",REGISTRATION_TYPE=" + REGISTRATION_TYPE);
			sb.append(",REGISTRATION_SERIES=" + String.valueOf(REGISTRATION_SERIES));
			sb.append(",REGISTRATION_NBR=" + String.valueOf(REGISTRATION_NBR));
			sb.append(",REGISTRATION_DUP=" + REGISTRATION_DUP);
			sb.append(",REGISTRATION_DATE=" + String.valueOf(REGISTRATION_DATE));
			sb.append(",ENTITLEMENT_DATE=" + String.valueOf(ENTITLEMENT_DATE));
			sb.append(",EXPIRATION_DATE=" + String.valueOf(EXPIRATION_DATE));
			sb.append(",EXHIBITION_DATE=" + String.valueOf(EXHIBITION_DATE));
			sb.append(",EXHIBITION_NOTES=" + EXHIBITION_NOTES);
			sb.append(",SIGN_TYPE=" + SIGN_TYPE);
			sb.append(",MARK_NAME=" + MARK_NAME);
			sb.append(",MARK_NAME_LANG2=" + MARK_NAME_LANG2);
			sb.append(",MARK_TRANSLATION=" + MARK_TRANSLATION);
			sb.append(",MARK_TRANSLATION_LANG2=" + MARK_TRANSLATION_LANG2);
			sb.append(",MARK_TRANSLITERATION=" + MARK_TRANSLITERATION);
			sb.append(",MARK_TRANSLITERATION_LANG2=" + MARK_TRANSLITERATION_LANG2);
			sb.append(",SERIES_DESCRIPTION=" + SERIES_DESCRIPTION);
			sb.append(",COLOUR_DESCRIPTION=" + COLOUR_DESCRIPTION);
			sb.append(",COLOUR_DESCR_LANG2=" + COLOUR_DESCR_LANG2);
			sb.append(",DISCLAIMER=" + DISCLAIMER);
			sb.append(",DISCLAIMER_LANG2=" + DISCLAIMER_LANG2);
			sb.append(",BY_CONSENT=" + BY_CONSENT);
			sb.append(",REGULATIONS=" + REGULATIONS);
			sb.append(",NOTES=" + NOTES);
			sb.append(",CAPTURE_USER_ID=" + String.valueOf(CAPTURE_USER_ID));
			sb.append(",CAPTURE_DATE=" + String.valueOf(CAPTURE_DATE));
			sb.append(",PUBLICATION_NBR=" + String.valueOf(PUBLICATION_NBR));
			sb.append(",PUBLICATION_SER=" + PUBLICATION_SER);
			sb.append(",PUBLICATION_TYP=" + PUBLICATION_TYP);
			sb.append(",FIRST_PRIORITY_DATE=" + String.valueOf(FIRST_PRIORITY_DATE));
			sb.append(",MAIN_OWNER_ADDR_NBR=" + String.valueOf(MAIN_OWNER_ADDR_NBR));
			sb.append(",MAIN_OWNER_PERSON_NBR=" + String.valueOf(MAIN_OWNER_PERSON_NBR));
			sb.append(",SERVICE_ADDR_NBR=" + String.valueOf(SERVICE_ADDR_NBR));
			sb.append(",SERVICE_PERSON_NBR=" + String.valueOf(SERVICE_PERSON_NBR));
			sb.append(",NICE_CLASS_TXT=" + NICE_CLASS_TXT);
			sb.append(",MARK_CODE=" + String.valueOf(MARK_CODE));
			sb.append(",PROC_TYP=" + PROC_TYP);
			sb.append(",PROC_NBR=" + String.valueOf(PROC_NBR));
			sb.append(",STATUS_CODE=" + STATUS_CODE);
			sb.append("]");

			return sb.toString();
		}

		/**
		 * Compare keys
		 */
		public int compareTo(row7Struct other) {

			int returnValue = -1;

			returnValue = checkNullsAndCompare(this.FILE_SEQ, other.FILE_SEQ);
			if (returnValue != 0) {
				return returnValue;
			}

			returnValue = checkNullsAndCompare(this.FILE_TYPE, other.FILE_TYPE);
			if (returnValue != 0) {
				return returnValue;
			}

			returnValue = checkNullsAndCompare(this.FILE_SERIES, other.FILE_SERIES);
			if (returnValue != 0) {
				return returnValue;
			}

			returnValue = checkNullsAndCompare(this.FILE_NBR, other.FILE_NBR);
			if (returnValue != 0) {
				return returnValue;
			}

			return returnValue;
		}

		private int checkNullsAndCompare(Object object1, Object object2) {
			int returnValue = 0;
			if (object1 instanceof Comparable && object2 instanceof Comparable) {
				returnValue = ((Comparable) object1).compareTo(object2);
			} else if (object1 != null && object2 != null) {
				returnValue = compareStrings(object1.toString(), object2.toString());
			} else if (object1 == null && object2 != null) {
				returnValue = 1;
			} else if (object1 != null && object2 == null) {
				returnValue = -1;
			} else {
				returnValue = 0;
			}

			return returnValue;
		}

		private int compareStrings(String string1, String string2) {
			return string1.compareTo(string2);
		}

	}

	public void tDBInput_3Process(final java.util.Map<String, Object> globalMap) throws TalendException {
		globalMap.put("tDBInput_3_SUBPROCESS_STATE", 0);

		final boolean execStat = this.execStat;

		String iterateId = "";

		String currentComponent = "";
		java.util.Map<String, Object> resourceMap = new java.util.HashMap<String, Object>();

		try {
			// TDI-39566 avoid throwing an useless Exception
			boolean resumeIt = true;
			if (globalResumeTicket == false && resumeEntryMethodName != null) {
				String currentMethodName = new java.lang.Exception().getStackTrace()[0].getMethodName();
				resumeIt = resumeEntryMethodName.equals(currentMethodName);
			}
			if (resumeIt || globalResumeTicket) { // start the resume
				globalResumeTicket = true;

				row7Struct row7 = new row7Struct();

				/**
				 * [tAdvancedHash_row7 begin ] start
				 */

				ok_Hash.put("tAdvancedHash_row7", false);
				start_Hash.put("tAdvancedHash_row7", System.currentTimeMillis());

				currentComponent = "tAdvancedHash_row7";

				if (execStat) {
					runStat.updateStatOnConnection(resourceMap, iterateId, 0, 0, "row7");
				}

				int tos_count_tAdvancedHash_row7 = 0;

				// connection name:row7
				// source node:tDBInput_3 - inputs:(after_tDBInput_1) outputs:(row7,row7) |
				// target node:tAdvancedHash_row7 - inputs:(row7) outputs:()
				// linked node: tMap_1 - inputs:(row2,row7) outputs:(wrk_reprs)

				org.talend.designer.components.lookup.common.ICommonLookup.MATCHING_MODE matchingModeEnum_row7 = org.talend.designer.components.lookup.common.ICommonLookup.MATCHING_MODE.ALL_MATCHES;

				org.talend.designer.components.lookup.memory.AdvancedMemoryLookup<row7Struct> tHash_Lookup_row7 = org.talend.designer.components.lookup.memory.AdvancedMemoryLookup
						.<row7Struct>getLookup(matchingModeEnum_row7);

				globalMap.put("tHash_Lookup_row7", tHash_Lookup_row7);

				/**
				 * [tAdvancedHash_row7 begin ] stop
				 */

				/**
				 * [tDBInput_3 begin ] start
				 */

				ok_Hash.put("tDBInput_3", false);
				start_Hash.put("tDBInput_3", System.currentTimeMillis());

				currentComponent = "tDBInput_3";

				int tos_count_tDBInput_3 = 0;

				org.talend.designer.components.util.mssql.MSSqlGenerateTimestampUtil mssqlGTU_tDBInput_3 = org.talend.designer.components.util.mssql.MSSqlUtilFactory
						.getMSSqlGenerateTimestampUtil();

				java.util.List<String> talendToDBList_tDBInput_3 = new java.util.ArrayList();
				String[] talendToDBArray_tDBInput_3 = new String[] { "FLOAT", "NUMERIC", "NUMERIC IDENTITY", "DECIMAL",
						"DECIMAL IDENTITY", "REAL" };
				java.util.Collections.addAll(talendToDBList_tDBInput_3, talendToDBArray_tDBInput_3);
				int nb_line_tDBInput_3 = 0;
				java.sql.Connection conn_tDBInput_3 = null;
				String driverClass_tDBInput_3 = "net.sourceforge.jtds.jdbc.Driver";
				java.lang.Class jdbcclazz_tDBInput_3 = java.lang.Class.forName(driverClass_tDBInput_3);
				String dbUser_tDBInput_3 = "ADMIN";

				final String decryptedPassword_tDBInput_3 = routines.system.PasswordEncryptUtil
						.decryptPassword("enc:routine.encryption.key.v1:O6/3A3qAd/8ZRzAgedpTC5Y7fPpF1A5VdGkHP6T7g92u");

				String dbPwd_tDBInput_3 = decryptedPassword_tDBInput_3;

				String port_tDBInput_3 = "1433";
				String dbname_tDBInput_3 = "MARCAS_PY";
				String url_tDBInput_3 = "jdbc:jtds:sqlserver://" + "localhost";
				if (!"".equals(port_tDBInput_3)) {
					url_tDBInput_3 += ":" + "1433";
				}
				if (!"".equals(dbname_tDBInput_3)) {
					url_tDBInput_3 += "//" + "MARCAS_PY";
				}
				url_tDBInput_3 += ";appName=" + projectName + ";" + "";
				String dbschema_tDBInput_3 = "ADMIN";

				conn_tDBInput_3 = java.sql.DriverManager.getConnection(url_tDBInput_3, dbUser_tDBInput_3,
						dbPwd_tDBInput_3);

				java.sql.Statement stmt_tDBInput_3 = conn_tDBInput_3.createStatement();

				String dbquery_tDBInput_3 = "SELECT ADMIN.WRK_MARK.FILE_SEQ,\n		ADMIN.WRK_MARK.FILE_TYPE,\n		ADMIN.WRK_MARK.FILE_SERIES,\n		ADMIN.WRK_MARK.FILE_NBR,\n		"
						+ "ADMIN.WRK_MARK.DOC_ORI,\n		ADMIN.WRK_MARK.DOC_SERIES,\n		ADMIN.WRK_MARK.DOC_NBR,\n		ADMIN.WRK_MARK.IND_IMPORT,\n		ADMIN.WRK_"
						+ "MARK.APPLICATION_TYPE,\n		ADMIN.WRK_MARK.APPLICATION_SUBTYPE,\n		ADMIN.WRK_MARK.LAW_CODE,\n		ADMIN.WRK_MARK.FILING_DATE,\n		"
						+ "ADMIN.WRK_MARK.RECEPTION_DATE,\n		ADMIN.WRK_MARK.PUBLICATION_DATE,\n		ADMIN.WRK_MARK.PUBLICATION_NOTES,\n		ADMIN.WRK_MARK.I"
						+ "ND_REGISTERED,\n		ADMIN.WRK_MARK.REGISTRATION_TYPE,\n		ADMIN.WRK_MARK.REGISTRATION_SERIES,\n		ADMIN.WRK_MARK.REGISTRATION_N"
						+ "BR,\n		ADMIN.WRK_MARK.REGISTRATION_DUP,\n		ADMIN.WRK_MARK.REGISTRATION_DATE,\n		ADMIN.WRK_MARK.ENTITLEMENT_DATE,\n		ADMIN.WR"
						+ "K_MARK.EXPIRATION_DATE,\n		ADMIN.WRK_MARK.EXHIBITION_DATE,\n		ADMIN.WRK_MARK.EXHIBITION_NOTES,\n		ADMIN.WRK_MARK.SIGN_TYPE,"
						+ "\n		ADMIN.WRK_MARK.MARK_NAME,\n		ADMIN.WRK_MARK.MARK_NAME_LANG2,\n		ADMIN.WRK_MARK.MARK_TRANSLATION,\n		ADMIN.WRK_MARK.MARK_"
						+ "TRANSLATION_LANG2,\n		ADMIN.WRK_MARK.MARK_TRANSLITERATION,\n		ADMIN.WRK_MARK.MARK_TRANSLITERATION_LANG2,\n		ADMIN.WRK_MARK."
						+ "SERIES_DESCRIPTION,\n		ADMIN.WRK_MARK.COLOUR_DESCRIPTION,\n		ADMIN.WRK_MARK.COLOUR_DESCR_LANG2,\n		ADMIN.WRK_MARK.DISCLAIME"
						+ "R,\n		ADMIN.WRK_MARK.DISCLAIMER_LANG2,\n		ADMIN.WRK_MARK.BY_CONSENT,\n		ADMIN.WRK_MARK.REGULATIONS,\n		ADMIN.WRK_MARK.NOTES,"
						+ "\n		ADMIN.WRK_MARK.CAPTURE_USER_ID,\n		ADMIN.WRK_MARK.CAPTURE_DATE,\n		ADMIN.WRK_MARK.PUBLICATION_NBR,\n		ADMIN.WRK_MARK.PUB"
						+ "LICATION_SER,\n		ADMIN.WRK_MARK.PUBLICATION_TYP,\n		ADMIN.WRK_MARK.FIRST_PRIORITY_DATE,\n		ADMIN.WRK_MARK.MAIN_OWNER_ADDR_N"
						+ "BR,\n		ADMIN.WRK_MARK.MAIN_OWNER_PERSON_NBR,\n		ADMIN.WRK_MARK.SERVICE_ADDR_NBR,\n		ADMIN.WRK_MARK.SERVICE_PERSON_NBR,\n		AD"
						+ "MIN.WRK_MARK.NICE_CLASS_TXT,\n		ADMIN.WRK_MARK.MARK_CODE,\n		ADMIN.WRK_MARK.PROC_TYP,\n		ADMIN.WRK_MARK.PROC_NBR,\n		ADMIN.W"
						+ "RK_MARK.STATUS_CODE\nFROM	ADMIN.WRK_MARK";

				globalMap.put("tDBInput_3_QUERY", dbquery_tDBInput_3);
				java.sql.ResultSet rs_tDBInput_3 = null;

				try {
					rs_tDBInput_3 = stmt_tDBInput_3.executeQuery(dbquery_tDBInput_3);
					java.sql.ResultSetMetaData rsmd_tDBInput_3 = rs_tDBInput_3.getMetaData();
					int colQtyInRs_tDBInput_3 = rsmd_tDBInput_3.getColumnCount();

					String tmpContent_tDBInput_3 = null;

					while (rs_tDBInput_3.next()) {
						nb_line_tDBInput_3++;

						if (colQtyInRs_tDBInput_3 < 1) {
							row7.FILE_SEQ = null;
						} else {

							tmpContent_tDBInput_3 = rs_tDBInput_3.getString(1);
							if (tmpContent_tDBInput_3 != null) {
								if (talendToDBList_tDBInput_3.contains(
										rsmd_tDBInput_3.getColumnTypeName(1).toUpperCase(java.util.Locale.ENGLISH))) {
									row7.FILE_SEQ = FormatterUtils.formatUnwithE(tmpContent_tDBInput_3);
								} else {
									row7.FILE_SEQ = tmpContent_tDBInput_3;
								}
							} else {
								row7.FILE_SEQ = null;
							}
						}
						if (colQtyInRs_tDBInput_3 < 2) {
							row7.FILE_TYPE = null;
						} else {

							tmpContent_tDBInput_3 = rs_tDBInput_3.getString(2);
							if (tmpContent_tDBInput_3 != null) {
								if (talendToDBList_tDBInput_3.contains(
										rsmd_tDBInput_3.getColumnTypeName(2).toUpperCase(java.util.Locale.ENGLISH))) {
									row7.FILE_TYPE = FormatterUtils.formatUnwithE(tmpContent_tDBInput_3);
								} else {
									row7.FILE_TYPE = tmpContent_tDBInput_3;
								}
							} else {
								row7.FILE_TYPE = null;
							}
						}
						if (colQtyInRs_tDBInput_3 < 3) {
							row7.FILE_SERIES = null;
						} else {

							row7.FILE_SERIES = rs_tDBInput_3.getBigDecimal(3);
							if (rs_tDBInput_3.wasNull()) {
								throw new RuntimeException("Null value in non-Nullable column");
							}
						}
						if (colQtyInRs_tDBInput_3 < 4) {
							row7.FILE_NBR = null;
						} else {

							row7.FILE_NBR = rs_tDBInput_3.getBigDecimal(4);
							if (rs_tDBInput_3.wasNull()) {
								throw new RuntimeException("Null value in non-Nullable column");
							}
						}
						if (colQtyInRs_tDBInput_3 < 5) {
							row7.DOC_ORI = null;
						} else {

							tmpContent_tDBInput_3 = rs_tDBInput_3.getString(5);
							if (tmpContent_tDBInput_3 != null) {
								if (talendToDBList_tDBInput_3.contains(
										rsmd_tDBInput_3.getColumnTypeName(5).toUpperCase(java.util.Locale.ENGLISH))) {
									row7.DOC_ORI = FormatterUtils.formatUnwithE(tmpContent_tDBInput_3);
								} else {
									row7.DOC_ORI = tmpContent_tDBInput_3;
								}
							} else {
								row7.DOC_ORI = null;
							}
						}
						if (colQtyInRs_tDBInput_3 < 6) {
							row7.DOC_SERIES = null;
						} else {

							row7.DOC_SERIES = rs_tDBInput_3.getBigDecimal(6);
							if (rs_tDBInput_3.wasNull()) {
								row7.DOC_SERIES = null;
							}
						}
						if (colQtyInRs_tDBInput_3 < 7) {
							row7.DOC_NBR = null;
						} else {

							row7.DOC_NBR = rs_tDBInput_3.getBigDecimal(7);
							if (rs_tDBInput_3.wasNull()) {
								row7.DOC_NBR = null;
							}
						}
						if (colQtyInRs_tDBInput_3 < 8) {
							row7.IND_IMPORT = null;
						} else {

							row7.IND_IMPORT = rs_tDBInput_3.getBigDecimal(8);
							if (rs_tDBInput_3.wasNull()) {
								row7.IND_IMPORT = null;
							}
						}
						if (colQtyInRs_tDBInput_3 < 9) {
							row7.APPLICATION_TYPE = null;
						} else {

							tmpContent_tDBInput_3 = rs_tDBInput_3.getString(9);
							if (tmpContent_tDBInput_3 != null) {
								if (talendToDBList_tDBInput_3.contains(
										rsmd_tDBInput_3.getColumnTypeName(9).toUpperCase(java.util.Locale.ENGLISH))) {
									row7.APPLICATION_TYPE = FormatterUtils.formatUnwithE(tmpContent_tDBInput_3);
								} else {
									row7.APPLICATION_TYPE = tmpContent_tDBInput_3;
								}
							} else {
								row7.APPLICATION_TYPE = null;
							}
						}
						if (colQtyInRs_tDBInput_3 < 10) {
							row7.APPLICATION_SUBTYPE = null;
						} else {

							tmpContent_tDBInput_3 = rs_tDBInput_3.getString(10);
							if (tmpContent_tDBInput_3 != null) {
								if (talendToDBList_tDBInput_3.contains(
										rsmd_tDBInput_3.getColumnTypeName(10).toUpperCase(java.util.Locale.ENGLISH))) {
									row7.APPLICATION_SUBTYPE = FormatterUtils.formatUnwithE(tmpContent_tDBInput_3);
								} else {
									row7.APPLICATION_SUBTYPE = tmpContent_tDBInput_3;
								}
							} else {
								row7.APPLICATION_SUBTYPE = null;
							}
						}
						if (colQtyInRs_tDBInput_3 < 11) {
							row7.LAW_CODE = null;
						} else {

							row7.LAW_CODE = rs_tDBInput_3.getBigDecimal(11);
							if (rs_tDBInput_3.wasNull()) {
								throw new RuntimeException("Null value in non-Nullable column");
							}
						}
						if (colQtyInRs_tDBInput_3 < 12) {
							row7.FILING_DATE = null;
						} else {

							row7.FILING_DATE = mssqlGTU_tDBInput_3.getDate(rsmd_tDBInput_3, rs_tDBInput_3, 12);

						}
						if (colQtyInRs_tDBInput_3 < 13) {
							row7.RECEPTION_DATE = null;
						} else {

							row7.RECEPTION_DATE = mssqlGTU_tDBInput_3.getDate(rsmd_tDBInput_3, rs_tDBInput_3, 13);

						}
						if (colQtyInRs_tDBInput_3 < 14) {
							row7.PUBLICATION_DATE = null;
						} else {

							row7.PUBLICATION_DATE = mssqlGTU_tDBInput_3.getDate(rsmd_tDBInput_3, rs_tDBInput_3, 14);

						}
						if (colQtyInRs_tDBInput_3 < 15) {
							row7.PUBLICATION_NOTES = null;
						} else {

							tmpContent_tDBInput_3 = rs_tDBInput_3.getString(15);
							if (tmpContent_tDBInput_3 != null) {
								if (talendToDBList_tDBInput_3.contains(
										rsmd_tDBInput_3.getColumnTypeName(15).toUpperCase(java.util.Locale.ENGLISH))) {
									row7.PUBLICATION_NOTES = FormatterUtils.formatUnwithE(tmpContent_tDBInput_3);
								} else {
									row7.PUBLICATION_NOTES = tmpContent_tDBInput_3;
								}
							} else {
								row7.PUBLICATION_NOTES = null;
							}
						}
						if (colQtyInRs_tDBInput_3 < 16) {
							row7.IND_REGISTERED = null;
						} else {

							row7.IND_REGISTERED = rs_tDBInput_3.getBigDecimal(16);
							if (rs_tDBInput_3.wasNull()) {
								row7.IND_REGISTERED = null;
							}
						}
						if (colQtyInRs_tDBInput_3 < 17) {
							row7.REGISTRATION_TYPE = null;
						} else {

							tmpContent_tDBInput_3 = rs_tDBInput_3.getString(17);
							if (tmpContent_tDBInput_3 != null) {
								if (talendToDBList_tDBInput_3.contains(
										rsmd_tDBInput_3.getColumnTypeName(17).toUpperCase(java.util.Locale.ENGLISH))) {
									row7.REGISTRATION_TYPE = FormatterUtils.formatUnwithE(tmpContent_tDBInput_3);
								} else {
									row7.REGISTRATION_TYPE = tmpContent_tDBInput_3;
								}
							} else {
								row7.REGISTRATION_TYPE = null;
							}
						}
						if (colQtyInRs_tDBInput_3 < 18) {
							row7.REGISTRATION_SERIES = null;
						} else {

							row7.REGISTRATION_SERIES = rs_tDBInput_3.getBigDecimal(18);
							if (rs_tDBInput_3.wasNull()) {
								row7.REGISTRATION_SERIES = null;
							}
						}
						if (colQtyInRs_tDBInput_3 < 19) {
							row7.REGISTRATION_NBR = null;
						} else {

							row7.REGISTRATION_NBR = rs_tDBInput_3.getBigDecimal(19);
							if (rs_tDBInput_3.wasNull()) {
								row7.REGISTRATION_NBR = null;
							}
						}
						if (colQtyInRs_tDBInput_3 < 20) {
							row7.REGISTRATION_DUP = null;
						} else {

							tmpContent_tDBInput_3 = rs_tDBInput_3.getString(20);
							if (tmpContent_tDBInput_3 != null) {
								if (talendToDBList_tDBInput_3.contains(
										rsmd_tDBInput_3.getColumnTypeName(20).toUpperCase(java.util.Locale.ENGLISH))) {
									row7.REGISTRATION_DUP = FormatterUtils.formatUnwithE(tmpContent_tDBInput_3);
								} else {
									row7.REGISTRATION_DUP = tmpContent_tDBInput_3;
								}
							} else {
								row7.REGISTRATION_DUP = null;
							}
						}
						if (colQtyInRs_tDBInput_3 < 21) {
							row7.REGISTRATION_DATE = null;
						} else {

							row7.REGISTRATION_DATE = mssqlGTU_tDBInput_3.getDate(rsmd_tDBInput_3, rs_tDBInput_3, 21);

						}
						if (colQtyInRs_tDBInput_3 < 22) {
							row7.ENTITLEMENT_DATE = null;
						} else {

							row7.ENTITLEMENT_DATE = mssqlGTU_tDBInput_3.getDate(rsmd_tDBInput_3, rs_tDBInput_3, 22);

						}
						if (colQtyInRs_tDBInput_3 < 23) {
							row7.EXPIRATION_DATE = null;
						} else {

							row7.EXPIRATION_DATE = mssqlGTU_tDBInput_3.getDate(rsmd_tDBInput_3, rs_tDBInput_3, 23);

						}
						if (colQtyInRs_tDBInput_3 < 24) {
							row7.EXHIBITION_DATE = null;
						} else {

							row7.EXHIBITION_DATE = mssqlGTU_tDBInput_3.getDate(rsmd_tDBInput_3, rs_tDBInput_3, 24);

						}
						if (colQtyInRs_tDBInput_3 < 25) {
							row7.EXHIBITION_NOTES = null;
						} else {

							tmpContent_tDBInput_3 = rs_tDBInput_3.getString(25);
							if (tmpContent_tDBInput_3 != null) {
								if (talendToDBList_tDBInput_3.contains(
										rsmd_tDBInput_3.getColumnTypeName(25).toUpperCase(java.util.Locale.ENGLISH))) {
									row7.EXHIBITION_NOTES = FormatterUtils.formatUnwithE(tmpContent_tDBInput_3);
								} else {
									row7.EXHIBITION_NOTES = tmpContent_tDBInput_3;
								}
							} else {
								row7.EXHIBITION_NOTES = null;
							}
						}
						if (colQtyInRs_tDBInput_3 < 26) {
							row7.SIGN_TYPE = null;
						} else {

							tmpContent_tDBInput_3 = rs_tDBInput_3.getString(26);
							if (tmpContent_tDBInput_3 != null) {
								if (talendToDBList_tDBInput_3.contains(
										rsmd_tDBInput_3.getColumnTypeName(26).toUpperCase(java.util.Locale.ENGLISH))) {
									row7.SIGN_TYPE = FormatterUtils.formatUnwithE(tmpContent_tDBInput_3);
								} else {
									row7.SIGN_TYPE = tmpContent_tDBInput_3;
								}
							} else {
								row7.SIGN_TYPE = null;
							}
						}
						if (colQtyInRs_tDBInput_3 < 27) {
							row7.MARK_NAME = null;
						} else {

							tmpContent_tDBInput_3 = rs_tDBInput_3.getString(27);
							if (tmpContent_tDBInput_3 != null) {
								if (talendToDBList_tDBInput_3.contains(
										rsmd_tDBInput_3.getColumnTypeName(27).toUpperCase(java.util.Locale.ENGLISH))) {
									row7.MARK_NAME = FormatterUtils.formatUnwithE(tmpContent_tDBInput_3);
								} else {
									row7.MARK_NAME = tmpContent_tDBInput_3;
								}
							} else {
								row7.MARK_NAME = null;
							}
						}
						if (colQtyInRs_tDBInput_3 < 28) {
							row7.MARK_NAME_LANG2 = null;
						} else {

							tmpContent_tDBInput_3 = rs_tDBInput_3.getString(28);
							if (tmpContent_tDBInput_3 != null) {
								if (talendToDBList_tDBInput_3.contains(
										rsmd_tDBInput_3.getColumnTypeName(28).toUpperCase(java.util.Locale.ENGLISH))) {
									row7.MARK_NAME_LANG2 = FormatterUtils.formatUnwithE(tmpContent_tDBInput_3);
								} else {
									row7.MARK_NAME_LANG2 = tmpContent_tDBInput_3;
								}
							} else {
								row7.MARK_NAME_LANG2 = null;
							}
						}
						if (colQtyInRs_tDBInput_3 < 29) {
							row7.MARK_TRANSLATION = null;
						} else {

							tmpContent_tDBInput_3 = rs_tDBInput_3.getString(29);
							if (tmpContent_tDBInput_3 != null) {
								if (talendToDBList_tDBInput_3.contains(
										rsmd_tDBInput_3.getColumnTypeName(29).toUpperCase(java.util.Locale.ENGLISH))) {
									row7.MARK_TRANSLATION = FormatterUtils.formatUnwithE(tmpContent_tDBInput_3);
								} else {
									row7.MARK_TRANSLATION = tmpContent_tDBInput_3;
								}
							} else {
								row7.MARK_TRANSLATION = null;
							}
						}
						if (colQtyInRs_tDBInput_3 < 30) {
							row7.MARK_TRANSLATION_LANG2 = null;
						} else {

							tmpContent_tDBInput_3 = rs_tDBInput_3.getString(30);
							if (tmpContent_tDBInput_3 != null) {
								if (talendToDBList_tDBInput_3.contains(
										rsmd_tDBInput_3.getColumnTypeName(30).toUpperCase(java.util.Locale.ENGLISH))) {
									row7.MARK_TRANSLATION_LANG2 = FormatterUtils.formatUnwithE(tmpContent_tDBInput_3);
								} else {
									row7.MARK_TRANSLATION_LANG2 = tmpContent_tDBInput_3;
								}
							} else {
								row7.MARK_TRANSLATION_LANG2 = null;
							}
						}
						if (colQtyInRs_tDBInput_3 < 31) {
							row7.MARK_TRANSLITERATION = null;
						} else {

							tmpContent_tDBInput_3 = rs_tDBInput_3.getString(31);
							if (tmpContent_tDBInput_3 != null) {
								if (talendToDBList_tDBInput_3.contains(
										rsmd_tDBInput_3.getColumnTypeName(31).toUpperCase(java.util.Locale.ENGLISH))) {
									row7.MARK_TRANSLITERATION = FormatterUtils.formatUnwithE(tmpContent_tDBInput_3);
								} else {
									row7.MARK_TRANSLITERATION = tmpContent_tDBInput_3;
								}
							} else {
								row7.MARK_TRANSLITERATION = null;
							}
						}
						if (colQtyInRs_tDBInput_3 < 32) {
							row7.MARK_TRANSLITERATION_LANG2 = null;
						} else {

							tmpContent_tDBInput_3 = rs_tDBInput_3.getString(32);
							if (tmpContent_tDBInput_3 != null) {
								if (talendToDBList_tDBInput_3.contains(
										rsmd_tDBInput_3.getColumnTypeName(32).toUpperCase(java.util.Locale.ENGLISH))) {
									row7.MARK_TRANSLITERATION_LANG2 = FormatterUtils
											.formatUnwithE(tmpContent_tDBInput_3);
								} else {
									row7.MARK_TRANSLITERATION_LANG2 = tmpContent_tDBInput_3;
								}
							} else {
								row7.MARK_TRANSLITERATION_LANG2 = null;
							}
						}
						if (colQtyInRs_tDBInput_3 < 33) {
							row7.SERIES_DESCRIPTION = null;
						} else {

							tmpContent_tDBInput_3 = rs_tDBInput_3.getString(33);
							if (tmpContent_tDBInput_3 != null) {
								if (talendToDBList_tDBInput_3.contains(
										rsmd_tDBInput_3.getColumnTypeName(33).toUpperCase(java.util.Locale.ENGLISH))) {
									row7.SERIES_DESCRIPTION = FormatterUtils.formatUnwithE(tmpContent_tDBInput_3);
								} else {
									row7.SERIES_DESCRIPTION = tmpContent_tDBInput_3;
								}
							} else {
								row7.SERIES_DESCRIPTION = null;
							}
						}
						if (colQtyInRs_tDBInput_3 < 34) {
							row7.COLOUR_DESCRIPTION = null;
						} else {

							tmpContent_tDBInput_3 = rs_tDBInput_3.getString(34);
							if (tmpContent_tDBInput_3 != null) {
								if (talendToDBList_tDBInput_3.contains(
										rsmd_tDBInput_3.getColumnTypeName(34).toUpperCase(java.util.Locale.ENGLISH))) {
									row7.COLOUR_DESCRIPTION = FormatterUtils.formatUnwithE(tmpContent_tDBInput_3);
								} else {
									row7.COLOUR_DESCRIPTION = tmpContent_tDBInput_3;
								}
							} else {
								row7.COLOUR_DESCRIPTION = null;
							}
						}
						if (colQtyInRs_tDBInput_3 < 35) {
							row7.COLOUR_DESCR_LANG2 = null;
						} else {

							tmpContent_tDBInput_3 = rs_tDBInput_3.getString(35);
							if (tmpContent_tDBInput_3 != null) {
								if (talendToDBList_tDBInput_3.contains(
										rsmd_tDBInput_3.getColumnTypeName(35).toUpperCase(java.util.Locale.ENGLISH))) {
									row7.COLOUR_DESCR_LANG2 = FormatterUtils.formatUnwithE(tmpContent_tDBInput_3);
								} else {
									row7.COLOUR_DESCR_LANG2 = tmpContent_tDBInput_3;
								}
							} else {
								row7.COLOUR_DESCR_LANG2 = null;
							}
						}
						if (colQtyInRs_tDBInput_3 < 36) {
							row7.DISCLAIMER = null;
						} else {

							tmpContent_tDBInput_3 = rs_tDBInput_3.getString(36);
							if (tmpContent_tDBInput_3 != null) {
								if (talendToDBList_tDBInput_3.contains(
										rsmd_tDBInput_3.getColumnTypeName(36).toUpperCase(java.util.Locale.ENGLISH))) {
									row7.DISCLAIMER = FormatterUtils.formatUnwithE(tmpContent_tDBInput_3);
								} else {
									row7.DISCLAIMER = tmpContent_tDBInput_3;
								}
							} else {
								row7.DISCLAIMER = null;
							}
						}
						if (colQtyInRs_tDBInput_3 < 37) {
							row7.DISCLAIMER_LANG2 = null;
						} else {

							tmpContent_tDBInput_3 = rs_tDBInput_3.getString(37);
							if (tmpContent_tDBInput_3 != null) {
								if (talendToDBList_tDBInput_3.contains(
										rsmd_tDBInput_3.getColumnTypeName(37).toUpperCase(java.util.Locale.ENGLISH))) {
									row7.DISCLAIMER_LANG2 = FormatterUtils.formatUnwithE(tmpContent_tDBInput_3);
								} else {
									row7.DISCLAIMER_LANG2 = tmpContent_tDBInput_3;
								}
							} else {
								row7.DISCLAIMER_LANG2 = null;
							}
						}
						if (colQtyInRs_tDBInput_3 < 38) {
							row7.BY_CONSENT = null;
						} else {

							tmpContent_tDBInput_3 = rs_tDBInput_3.getString(38);
							if (tmpContent_tDBInput_3 != null) {
								if (talendToDBList_tDBInput_3.contains(
										rsmd_tDBInput_3.getColumnTypeName(38).toUpperCase(java.util.Locale.ENGLISH))) {
									row7.BY_CONSENT = FormatterUtils.formatUnwithE(tmpContent_tDBInput_3);
								} else {
									row7.BY_CONSENT = tmpContent_tDBInput_3;
								}
							} else {
								row7.BY_CONSENT = null;
							}
						}
						if (colQtyInRs_tDBInput_3 < 39) {
							row7.REGULATIONS = null;
						} else {

							tmpContent_tDBInput_3 = rs_tDBInput_3.getString(39);
							if (tmpContent_tDBInput_3 != null) {
								if (talendToDBList_tDBInput_3.contains(
										rsmd_tDBInput_3.getColumnTypeName(39).toUpperCase(java.util.Locale.ENGLISH))) {
									row7.REGULATIONS = FormatterUtils.formatUnwithE(tmpContent_tDBInput_3);
								} else {
									row7.REGULATIONS = tmpContent_tDBInput_3;
								}
							} else {
								row7.REGULATIONS = null;
							}
						}
						if (colQtyInRs_tDBInput_3 < 40) {
							row7.NOTES = null;
						} else {

							tmpContent_tDBInput_3 = rs_tDBInput_3.getString(40);
							if (tmpContent_tDBInput_3 != null) {
								if (talendToDBList_tDBInput_3.contains(
										rsmd_tDBInput_3.getColumnTypeName(40).toUpperCase(java.util.Locale.ENGLISH))) {
									row7.NOTES = FormatterUtils.formatUnwithE(tmpContent_tDBInput_3);
								} else {
									row7.NOTES = tmpContent_tDBInput_3;
								}
							} else {
								row7.NOTES = null;
							}
						}
						if (colQtyInRs_tDBInput_3 < 41) {
							row7.CAPTURE_USER_ID = null;
						} else {

							row7.CAPTURE_USER_ID = rs_tDBInput_3.getBigDecimal(41);
							if (rs_tDBInput_3.wasNull()) {
								row7.CAPTURE_USER_ID = null;
							}
						}
						if (colQtyInRs_tDBInput_3 < 42) {
							row7.CAPTURE_DATE = null;
						} else {

							row7.CAPTURE_DATE = mssqlGTU_tDBInput_3.getDate(rsmd_tDBInput_3, rs_tDBInput_3, 42);

						}
						if (colQtyInRs_tDBInput_3 < 43) {
							row7.PUBLICATION_NBR = null;
						} else {

							row7.PUBLICATION_NBR = rs_tDBInput_3.getBigDecimal(43);
							if (rs_tDBInput_3.wasNull()) {
								row7.PUBLICATION_NBR = null;
							}
						}
						if (colQtyInRs_tDBInput_3 < 44) {
							row7.PUBLICATION_SER = null;
						} else {

							tmpContent_tDBInput_3 = rs_tDBInput_3.getString(44);
							if (tmpContent_tDBInput_3 != null) {
								if (talendToDBList_tDBInput_3.contains(
										rsmd_tDBInput_3.getColumnTypeName(44).toUpperCase(java.util.Locale.ENGLISH))) {
									row7.PUBLICATION_SER = FormatterUtils.formatUnwithE(tmpContent_tDBInput_3);
								} else {
									row7.PUBLICATION_SER = tmpContent_tDBInput_3;
								}
							} else {
								row7.PUBLICATION_SER = null;
							}
						}
						if (colQtyInRs_tDBInput_3 < 45) {
							row7.PUBLICATION_TYP = null;
						} else {

							tmpContent_tDBInput_3 = rs_tDBInput_3.getString(45);
							if (tmpContent_tDBInput_3 != null) {
								if (talendToDBList_tDBInput_3.contains(
										rsmd_tDBInput_3.getColumnTypeName(45).toUpperCase(java.util.Locale.ENGLISH))) {
									row7.PUBLICATION_TYP = FormatterUtils.formatUnwithE(tmpContent_tDBInput_3);
								} else {
									row7.PUBLICATION_TYP = tmpContent_tDBInput_3;
								}
							} else {
								row7.PUBLICATION_TYP = null;
							}
						}
						if (colQtyInRs_tDBInput_3 < 46) {
							row7.FIRST_PRIORITY_DATE = null;
						} else {

							row7.FIRST_PRIORITY_DATE = mssqlGTU_tDBInput_3.getDate(rsmd_tDBInput_3, rs_tDBInput_3, 46);

						}
						if (colQtyInRs_tDBInput_3 < 47) {
							row7.MAIN_OWNER_ADDR_NBR = null;
						} else {

							row7.MAIN_OWNER_ADDR_NBR = rs_tDBInput_3.getBigDecimal(47);
							if (rs_tDBInput_3.wasNull()) {
								row7.MAIN_OWNER_ADDR_NBR = null;
							}
						}
						if (colQtyInRs_tDBInput_3 < 48) {
							row7.MAIN_OWNER_PERSON_NBR = null;
						} else {

							row7.MAIN_OWNER_PERSON_NBR = rs_tDBInput_3.getBigDecimal(48);
							if (rs_tDBInput_3.wasNull()) {
								row7.MAIN_OWNER_PERSON_NBR = null;
							}
						}
						if (colQtyInRs_tDBInput_3 < 49) {
							row7.SERVICE_ADDR_NBR = null;
						} else {

							row7.SERVICE_ADDR_NBR = rs_tDBInput_3.getBigDecimal(49);
							if (rs_tDBInput_3.wasNull()) {
								row7.SERVICE_ADDR_NBR = null;
							}
						}
						if (colQtyInRs_tDBInput_3 < 50) {
							row7.SERVICE_PERSON_NBR = null;
						} else {

							row7.SERVICE_PERSON_NBR = rs_tDBInput_3.getBigDecimal(50);
							if (rs_tDBInput_3.wasNull()) {
								row7.SERVICE_PERSON_NBR = null;
							}
						}
						if (colQtyInRs_tDBInput_3 < 51) {
							row7.NICE_CLASS_TXT = null;
						} else {

							tmpContent_tDBInput_3 = rs_tDBInput_3.getString(51);
							if (tmpContent_tDBInput_3 != null) {
								if (talendToDBList_tDBInput_3.contains(
										rsmd_tDBInput_3.getColumnTypeName(51).toUpperCase(java.util.Locale.ENGLISH))) {
									row7.NICE_CLASS_TXT = FormatterUtils.formatUnwithE(tmpContent_tDBInput_3);
								} else {
									row7.NICE_CLASS_TXT = tmpContent_tDBInput_3;
								}
							} else {
								row7.NICE_CLASS_TXT = null;
							}
						}
						if (colQtyInRs_tDBInput_3 < 52) {
							row7.MARK_CODE = null;
						} else {

							row7.MARK_CODE = rs_tDBInput_3.getBigDecimal(52);
							if (rs_tDBInput_3.wasNull()) {
								row7.MARK_CODE = null;
							}
						}
						if (colQtyInRs_tDBInput_3 < 53) {
							row7.PROC_TYP = null;
						} else {

							tmpContent_tDBInput_3 = rs_tDBInput_3.getString(53);
							if (tmpContent_tDBInput_3 != null) {
								if (talendToDBList_tDBInput_3.contains(
										rsmd_tDBInput_3.getColumnTypeName(53).toUpperCase(java.util.Locale.ENGLISH))) {
									row7.PROC_TYP = FormatterUtils.formatUnwithE(tmpContent_tDBInput_3);
								} else {
									row7.PROC_TYP = tmpContent_tDBInput_3;
								}
							} else {
								row7.PROC_TYP = null;
							}
						}
						if (colQtyInRs_tDBInput_3 < 54) {
							row7.PROC_NBR = null;
						} else {

							row7.PROC_NBR = rs_tDBInput_3.getBigDecimal(54);
							if (rs_tDBInput_3.wasNull()) {
								row7.PROC_NBR = null;
							}
						}
						if (colQtyInRs_tDBInput_3 < 55) {
							row7.STATUS_CODE = null;
						} else {

							tmpContent_tDBInput_3 = rs_tDBInput_3.getString(55);
							if (tmpContent_tDBInput_3 != null) {
								if (talendToDBList_tDBInput_3.contains(
										rsmd_tDBInput_3.getColumnTypeName(55).toUpperCase(java.util.Locale.ENGLISH))) {
									row7.STATUS_CODE = FormatterUtils.formatUnwithE(tmpContent_tDBInput_3);
								} else {
									row7.STATUS_CODE = tmpContent_tDBInput_3;
								}
							} else {
								row7.STATUS_CODE = null;
							}
						}

						/**
						 * [tDBInput_3 begin ] stop
						 */

						/**
						 * [tDBInput_3 main ] start
						 */

						currentComponent = "tDBInput_3";

						tos_count_tDBInput_3++;

						/**
						 * [tDBInput_3 main ] stop
						 */

						/**
						 * [tDBInput_3 process_data_begin ] start
						 */

						currentComponent = "tDBInput_3";

						/**
						 * [tDBInput_3 process_data_begin ] stop
						 */

						/**
						 * [tAdvancedHash_row7 main ] start
						 */

						currentComponent = "tAdvancedHash_row7";

						if (execStat) {
							runStat.updateStatOnConnection(iterateId, 1, 1

									, "row7"

							);
						}

						row7Struct row7_HashRow = new row7Struct();

						row7_HashRow.FILE_SEQ = row7.FILE_SEQ;

						row7_HashRow.FILE_TYPE = row7.FILE_TYPE;

						row7_HashRow.FILE_SERIES = row7.FILE_SERIES;

						row7_HashRow.FILE_NBR = row7.FILE_NBR;

						row7_HashRow.DOC_ORI = row7.DOC_ORI;

						row7_HashRow.DOC_SERIES = row7.DOC_SERIES;

						row7_HashRow.DOC_NBR = row7.DOC_NBR;

						row7_HashRow.IND_IMPORT = row7.IND_IMPORT;

						row7_HashRow.APPLICATION_TYPE = row7.APPLICATION_TYPE;

						row7_HashRow.APPLICATION_SUBTYPE = row7.APPLICATION_SUBTYPE;

						row7_HashRow.LAW_CODE = row7.LAW_CODE;

						row7_HashRow.FILING_DATE = row7.FILING_DATE;

						row7_HashRow.RECEPTION_DATE = row7.RECEPTION_DATE;

						row7_HashRow.PUBLICATION_DATE = row7.PUBLICATION_DATE;

						row7_HashRow.PUBLICATION_NOTES = row7.PUBLICATION_NOTES;

						row7_HashRow.IND_REGISTERED = row7.IND_REGISTERED;

						row7_HashRow.REGISTRATION_TYPE = row7.REGISTRATION_TYPE;

						row7_HashRow.REGISTRATION_SERIES = row7.REGISTRATION_SERIES;

						row7_HashRow.REGISTRATION_NBR = row7.REGISTRATION_NBR;

						row7_HashRow.REGISTRATION_DUP = row7.REGISTRATION_DUP;

						row7_HashRow.REGISTRATION_DATE = row7.REGISTRATION_DATE;

						row7_HashRow.ENTITLEMENT_DATE = row7.ENTITLEMENT_DATE;

						row7_HashRow.EXPIRATION_DATE = row7.EXPIRATION_DATE;

						row7_HashRow.EXHIBITION_DATE = row7.EXHIBITION_DATE;

						row7_HashRow.EXHIBITION_NOTES = row7.EXHIBITION_NOTES;

						row7_HashRow.SIGN_TYPE = row7.SIGN_TYPE;

						row7_HashRow.MARK_NAME = row7.MARK_NAME;

						row7_HashRow.MARK_NAME_LANG2 = row7.MARK_NAME_LANG2;

						row7_HashRow.MARK_TRANSLATION = row7.MARK_TRANSLATION;

						row7_HashRow.MARK_TRANSLATION_LANG2 = row7.MARK_TRANSLATION_LANG2;

						row7_HashRow.MARK_TRANSLITERATION = row7.MARK_TRANSLITERATION;

						row7_HashRow.MARK_TRANSLITERATION_LANG2 = row7.MARK_TRANSLITERATION_LANG2;

						row7_HashRow.SERIES_DESCRIPTION = row7.SERIES_DESCRIPTION;

						row7_HashRow.COLOUR_DESCRIPTION = row7.COLOUR_DESCRIPTION;

						row7_HashRow.COLOUR_DESCR_LANG2 = row7.COLOUR_DESCR_LANG2;

						row7_HashRow.DISCLAIMER = row7.DISCLAIMER;

						row7_HashRow.DISCLAIMER_LANG2 = row7.DISCLAIMER_LANG2;

						row7_HashRow.BY_CONSENT = row7.BY_CONSENT;

						row7_HashRow.REGULATIONS = row7.REGULATIONS;

						row7_HashRow.NOTES = row7.NOTES;

						row7_HashRow.CAPTURE_USER_ID = row7.CAPTURE_USER_ID;

						row7_HashRow.CAPTURE_DATE = row7.CAPTURE_DATE;

						row7_HashRow.PUBLICATION_NBR = row7.PUBLICATION_NBR;

						row7_HashRow.PUBLICATION_SER = row7.PUBLICATION_SER;

						row7_HashRow.PUBLICATION_TYP = row7.PUBLICATION_TYP;

						row7_HashRow.FIRST_PRIORITY_DATE = row7.FIRST_PRIORITY_DATE;

						row7_HashRow.MAIN_OWNER_ADDR_NBR = row7.MAIN_OWNER_ADDR_NBR;

						row7_HashRow.MAIN_OWNER_PERSON_NBR = row7.MAIN_OWNER_PERSON_NBR;

						row7_HashRow.SERVICE_ADDR_NBR = row7.SERVICE_ADDR_NBR;

						row7_HashRow.SERVICE_PERSON_NBR = row7.SERVICE_PERSON_NBR;

						row7_HashRow.NICE_CLASS_TXT = row7.NICE_CLASS_TXT;

						row7_HashRow.MARK_CODE = row7.MARK_CODE;

						row7_HashRow.PROC_TYP = row7.PROC_TYP;

						row7_HashRow.PROC_NBR = row7.PROC_NBR;

						row7_HashRow.STATUS_CODE = row7.STATUS_CODE;

						tHash_Lookup_row7.put(row7_HashRow);

						tos_count_tAdvancedHash_row7++;

						/**
						 * [tAdvancedHash_row7 main ] stop
						 */

						/**
						 * [tAdvancedHash_row7 process_data_begin ] start
						 */

						currentComponent = "tAdvancedHash_row7";

						/**
						 * [tAdvancedHash_row7 process_data_begin ] stop
						 */

						/**
						 * [tAdvancedHash_row7 process_data_end ] start
						 */

						currentComponent = "tAdvancedHash_row7";

						/**
						 * [tAdvancedHash_row7 process_data_end ] stop
						 */

						/**
						 * [tDBInput_3 process_data_end ] start
						 */

						currentComponent = "tDBInput_3";

						/**
						 * [tDBInput_3 process_data_end ] stop
						 */

						/**
						 * [tDBInput_3 end ] start
						 */

						currentComponent = "tDBInput_3";

					}
				} finally {
					if (rs_tDBInput_3 != null) {
						rs_tDBInput_3.close();
					}
					if (stmt_tDBInput_3 != null) {
						stmt_tDBInput_3.close();
					}
					if (conn_tDBInput_3 != null && !conn_tDBInput_3.isClosed()) {

						conn_tDBInput_3.close();

						if ("com.mysql.cj.jdbc.Driver".equals((String) globalMap.get("driverClass_"))
								&& routines.system.BundleUtils.inOSGi()) {
							Class.forName("com.mysql.cj.jdbc.AbandonedConnectionCleanupThread")
									.getMethod("checkedShutdown").invoke(null, (Object[]) null);
						}

					}
				}
				globalMap.put("tDBInput_3_NB_LINE", nb_line_tDBInput_3);

				ok_Hash.put("tDBInput_3", true);
				end_Hash.put("tDBInput_3", System.currentTimeMillis());

				/**
				 * [tDBInput_3 end ] stop
				 */

				/**
				 * [tAdvancedHash_row7 end ] start
				 */

				currentComponent = "tAdvancedHash_row7";

				tHash_Lookup_row7.endPut();

				if (execStat) {
					runStat.updateStat(resourceMap, iterateId, 2, 0, "row7");
				}

				ok_Hash.put("tAdvancedHash_row7", true);
				end_Hash.put("tAdvancedHash_row7", System.currentTimeMillis());

				/**
				 * [tAdvancedHash_row7 end ] stop
				 */

			} // end the resume

		} catch (java.lang.Exception e) {

			TalendException te = new TalendException(e, currentComponent, globalMap);

			throw te;
		} catch (java.lang.Error error) {

			runStat.stopThreadStat();

			throw error;
		} finally {

			try {

				/**
				 * [tDBInput_3 finally ] start
				 */

				currentComponent = "tDBInput_3";

				/**
				 * [tDBInput_3 finally ] stop
				 */

				/**
				 * [tAdvancedHash_row7 finally ] start
				 */

				currentComponent = "tAdvancedHash_row7";

				/**
				 * [tAdvancedHash_row7 finally ] stop
				 */

			} catch (java.lang.Exception e) {
				// ignore
			} catch (java.lang.Error error) {
				// ignore
			}
			resourceMap = null;
		}

		globalMap.put("tDBInput_3_SUBPROCESS_STATE", 1);
	}

	public static class row10Struct implements routines.system.IPersistableComparableLookupRow<row10Struct> {
		final static byte[] commonByteArrayLock_WIPO_PROJECTS_G2b_Mig_TM = new byte[0];
		static byte[] commonByteArray_WIPO_PROJECTS_G2b_Mig_TM = new byte[0];
		protected static final int DEFAULT_HASHCODE = 1;
		protected static final int PRIME = 31;
		protected int hashCode = DEFAULT_HASHCODE;
		public boolean hashCodeDirty = true;

		public String loopKey;

		public String FILE_SEQ;

		public String getFILE_SEQ() {
			return this.FILE_SEQ;
		}

		public String FILE_TYPE;

		public String getFILE_TYPE() {
			return this.FILE_TYPE;
		}

		public BigDecimal FILE_SERIES;

		public BigDecimal getFILE_SERIES() {
			return this.FILE_SERIES;
		}

		public BigDecimal FILE_NBR;

		public BigDecimal getFILE_NBR() {
			return this.FILE_NBR;
		}

		public String DOC_ORI;

		public String getDOC_ORI() {
			return this.DOC_ORI;
		}

		public BigDecimal DOC_SERIES;

		public BigDecimal getDOC_SERIES() {
			return this.DOC_SERIES;
		}

		public BigDecimal DOC_NBR;

		public BigDecimal getDOC_NBR() {
			return this.DOC_NBR;
		}

		public BigDecimal IND_IMPORT;

		public BigDecimal getIND_IMPORT() {
			return this.IND_IMPORT;
		}

		public String APPLICATION_TYPE;

		public String getAPPLICATION_TYPE() {
			return this.APPLICATION_TYPE;
		}

		public String APPLICATION_SUBTYPE;

		public String getAPPLICATION_SUBTYPE() {
			return this.APPLICATION_SUBTYPE;
		}

		public BigDecimal LAW_CODE;

		public BigDecimal getLAW_CODE() {
			return this.LAW_CODE;
		}

		public java.util.Date FILING_DATE;

		public java.util.Date getFILING_DATE() {
			return this.FILING_DATE;
		}

		public java.util.Date RECEPTION_DATE;

		public java.util.Date getRECEPTION_DATE() {
			return this.RECEPTION_DATE;
		}

		public java.util.Date PUBLICATION_DATE;

		public java.util.Date getPUBLICATION_DATE() {
			return this.PUBLICATION_DATE;
		}

		public String PUBLICATION_NOTES;

		public String getPUBLICATION_NOTES() {
			return this.PUBLICATION_NOTES;
		}

		public BigDecimal IND_REGISTERED;

		public BigDecimal getIND_REGISTERED() {
			return this.IND_REGISTERED;
		}

		public String REGISTRATION_TYPE;

		public String getREGISTRATION_TYPE() {
			return this.REGISTRATION_TYPE;
		}

		public BigDecimal REGISTRATION_SERIES;

		public BigDecimal getREGISTRATION_SERIES() {
			return this.REGISTRATION_SERIES;
		}

		public BigDecimal REGISTRATION_NBR;

		public BigDecimal getREGISTRATION_NBR() {
			return this.REGISTRATION_NBR;
		}

		public String REGISTRATION_DUP;

		public String getREGISTRATION_DUP() {
			return this.REGISTRATION_DUP;
		}

		public java.util.Date REGISTRATION_DATE;

		public java.util.Date getREGISTRATION_DATE() {
			return this.REGISTRATION_DATE;
		}

		public java.util.Date ENTITLEMENT_DATE;

		public java.util.Date getENTITLEMENT_DATE() {
			return this.ENTITLEMENT_DATE;
		}

		public java.util.Date EXPIRATION_DATE;

		public java.util.Date getEXPIRATION_DATE() {
			return this.EXPIRATION_DATE;
		}

		public java.util.Date EXHIBITION_DATE;

		public java.util.Date getEXHIBITION_DATE() {
			return this.EXHIBITION_DATE;
		}

		public String EXHIBITION_NOTES;

		public String getEXHIBITION_NOTES() {
			return this.EXHIBITION_NOTES;
		}

		public String SIGN_TYPE;

		public String getSIGN_TYPE() {
			return this.SIGN_TYPE;
		}

		public String MARK_NAME;

		public String getMARK_NAME() {
			return this.MARK_NAME;
		}

		public String MARK_NAME_LANG2;

		public String getMARK_NAME_LANG2() {
			return this.MARK_NAME_LANG2;
		}

		public String MARK_TRANSLATION;

		public String getMARK_TRANSLATION() {
			return this.MARK_TRANSLATION;
		}

		public String MARK_TRANSLATION_LANG2;

		public String getMARK_TRANSLATION_LANG2() {
			return this.MARK_TRANSLATION_LANG2;
		}

		public String MARK_TRANSLITERATION;

		public String getMARK_TRANSLITERATION() {
			return this.MARK_TRANSLITERATION;
		}

		public String MARK_TRANSLITERATION_LANG2;

		public String getMARK_TRANSLITERATION_LANG2() {
			return this.MARK_TRANSLITERATION_LANG2;
		}

		public String SERIES_DESCRIPTION;

		public String getSERIES_DESCRIPTION() {
			return this.SERIES_DESCRIPTION;
		}

		public String COLOUR_DESCRIPTION;

		public String getCOLOUR_DESCRIPTION() {
			return this.COLOUR_DESCRIPTION;
		}

		public String COLOUR_DESCR_LANG2;

		public String getCOLOUR_DESCR_LANG2() {
			return this.COLOUR_DESCR_LANG2;
		}

		public String DISCLAIMER;

		public String getDISCLAIMER() {
			return this.DISCLAIMER;
		}

		public String DISCLAIMER_LANG2;

		public String getDISCLAIMER_LANG2() {
			return this.DISCLAIMER_LANG2;
		}

		public String BY_CONSENT;

		public String getBY_CONSENT() {
			return this.BY_CONSENT;
		}

		public String REGULATIONS;

		public String getREGULATIONS() {
			return this.REGULATIONS;
		}

		public String NOTES;

		public String getNOTES() {
			return this.NOTES;
		}

		public BigDecimal CAPTURE_USER_ID;

		public BigDecimal getCAPTURE_USER_ID() {
			return this.CAPTURE_USER_ID;
		}

		public java.util.Date CAPTURE_DATE;

		public java.util.Date getCAPTURE_DATE() {
			return this.CAPTURE_DATE;
		}

		public BigDecimal PUBLICATION_NBR;

		public BigDecimal getPUBLICATION_NBR() {
			return this.PUBLICATION_NBR;
		}

		public String PUBLICATION_SER;

		public String getPUBLICATION_SER() {
			return this.PUBLICATION_SER;
		}

		public String PUBLICATION_TYP;

		public String getPUBLICATION_TYP() {
			return this.PUBLICATION_TYP;
		}

		public java.util.Date FIRST_PRIORITY_DATE;

		public java.util.Date getFIRST_PRIORITY_DATE() {
			return this.FIRST_PRIORITY_DATE;
		}

		public BigDecimal MAIN_OWNER_ADDR_NBR;

		public BigDecimal getMAIN_OWNER_ADDR_NBR() {
			return this.MAIN_OWNER_ADDR_NBR;
		}

		public BigDecimal MAIN_OWNER_PERSON_NBR;

		public BigDecimal getMAIN_OWNER_PERSON_NBR() {
			return this.MAIN_OWNER_PERSON_NBR;
		}

		public BigDecimal SERVICE_ADDR_NBR;

		public BigDecimal getSERVICE_ADDR_NBR() {
			return this.SERVICE_ADDR_NBR;
		}

		public BigDecimal SERVICE_PERSON_NBR;

		public BigDecimal getSERVICE_PERSON_NBR() {
			return this.SERVICE_PERSON_NBR;
		}

		public String NICE_CLASS_TXT;

		public String getNICE_CLASS_TXT() {
			return this.NICE_CLASS_TXT;
		}

		public BigDecimal MARK_CODE;

		public BigDecimal getMARK_CODE() {
			return this.MARK_CODE;
		}

		public String PROC_TYP;

		public String getPROC_TYP() {
			return this.PROC_TYP;
		}

		public BigDecimal PROC_NBR;

		public BigDecimal getPROC_NBR() {
			return this.PROC_NBR;
		}

		public String STATUS_CODE;

		public String getSTATUS_CODE() {
			return this.STATUS_CODE;
		}

		@Override
		public int hashCode() {
			if (this.hashCodeDirty) {
				final int prime = PRIME;
				int result = DEFAULT_HASHCODE;

				result = prime * result + ((this.FILE_SEQ == null) ? 0 : this.FILE_SEQ.hashCode());

				result = prime * result + ((this.FILE_TYPE == null) ? 0 : this.FILE_TYPE.hashCode());

				result = prime * result
						+ ((this.FILE_SERIES == null) ? 0 : new Double(this.FILE_SERIES.doubleValue()).hashCode());

				result = prime * result
						+ ((this.FILE_NBR == null) ? 0 : new Double(this.FILE_NBR.doubleValue()).hashCode());

				this.hashCode = result;
				this.hashCodeDirty = false;
			}
			return this.hashCode;
		}

		@Override
		public boolean equals(Object obj) {
			if (this == obj)
				return true;
			if (obj == null)
				return false;
			if (getClass() != obj.getClass())
				return false;
			final row10Struct other = (row10Struct) obj;

			if (this.FILE_SEQ == null) {
				if (other.FILE_SEQ != null)
					return false;

			} else if (!this.FILE_SEQ.equals(other.FILE_SEQ))

				return false;

			if (this.FILE_TYPE == null) {
				if (other.FILE_TYPE != null)
					return false;

			} else if (!this.FILE_TYPE.equals(other.FILE_TYPE))

				return false;

			if (this.FILE_SERIES == null) {
				if (other.FILE_SERIES != null)
					return false;

			} else if ((other.FILE_SERIES == null) || (this.FILE_SERIES.compareTo(other.FILE_SERIES) != 0))

				return false;

			if (this.FILE_NBR == null) {
				if (other.FILE_NBR != null)
					return false;

			} else if ((other.FILE_NBR == null) || (this.FILE_NBR.compareTo(other.FILE_NBR) != 0))

				return false;

			return true;
		}

		public void copyDataTo(row10Struct other) {

			other.FILE_SEQ = this.FILE_SEQ;
			other.FILE_TYPE = this.FILE_TYPE;
			other.FILE_SERIES = this.FILE_SERIES;
			other.FILE_NBR = this.FILE_NBR;
			other.DOC_ORI = this.DOC_ORI;
			other.DOC_SERIES = this.DOC_SERIES;
			other.DOC_NBR = this.DOC_NBR;
			other.IND_IMPORT = this.IND_IMPORT;
			other.APPLICATION_TYPE = this.APPLICATION_TYPE;
			other.APPLICATION_SUBTYPE = this.APPLICATION_SUBTYPE;
			other.LAW_CODE = this.LAW_CODE;
			other.FILING_DATE = this.FILING_DATE;
			other.RECEPTION_DATE = this.RECEPTION_DATE;
			other.PUBLICATION_DATE = this.PUBLICATION_DATE;
			other.PUBLICATION_NOTES = this.PUBLICATION_NOTES;
			other.IND_REGISTERED = this.IND_REGISTERED;
			other.REGISTRATION_TYPE = this.REGISTRATION_TYPE;
			other.REGISTRATION_SERIES = this.REGISTRATION_SERIES;
			other.REGISTRATION_NBR = this.REGISTRATION_NBR;
			other.REGISTRATION_DUP = this.REGISTRATION_DUP;
			other.REGISTRATION_DATE = this.REGISTRATION_DATE;
			other.ENTITLEMENT_DATE = this.ENTITLEMENT_DATE;
			other.EXPIRATION_DATE = this.EXPIRATION_DATE;
			other.EXHIBITION_DATE = this.EXHIBITION_DATE;
			other.EXHIBITION_NOTES = this.EXHIBITION_NOTES;
			other.SIGN_TYPE = this.SIGN_TYPE;
			other.MARK_NAME = this.MARK_NAME;
			other.MARK_NAME_LANG2 = this.MARK_NAME_LANG2;
			other.MARK_TRANSLATION = this.MARK_TRANSLATION;
			other.MARK_TRANSLATION_LANG2 = this.MARK_TRANSLATION_LANG2;
			other.MARK_TRANSLITERATION = this.MARK_TRANSLITERATION;
			other.MARK_TRANSLITERATION_LANG2 = this.MARK_TRANSLITERATION_LANG2;
			other.SERIES_DESCRIPTION = this.SERIES_DESCRIPTION;
			other.COLOUR_DESCRIPTION = this.COLOUR_DESCRIPTION;
			other.COLOUR_DESCR_LANG2 = this.COLOUR_DESCR_LANG2;
			other.DISCLAIMER = this.DISCLAIMER;
			other.DISCLAIMER_LANG2 = this.DISCLAIMER_LANG2;
			other.BY_CONSENT = this.BY_CONSENT;
			other.REGULATIONS = this.REGULATIONS;
			other.NOTES = this.NOTES;
			other.CAPTURE_USER_ID = this.CAPTURE_USER_ID;
			other.CAPTURE_DATE = this.CAPTURE_DATE;
			other.PUBLICATION_NBR = this.PUBLICATION_NBR;
			other.PUBLICATION_SER = this.PUBLICATION_SER;
			other.PUBLICATION_TYP = this.PUBLICATION_TYP;
			other.FIRST_PRIORITY_DATE = this.FIRST_PRIORITY_DATE;
			other.MAIN_OWNER_ADDR_NBR = this.MAIN_OWNER_ADDR_NBR;
			other.MAIN_OWNER_PERSON_NBR = this.MAIN_OWNER_PERSON_NBR;
			other.SERVICE_ADDR_NBR = this.SERVICE_ADDR_NBR;
			other.SERVICE_PERSON_NBR = this.SERVICE_PERSON_NBR;
			other.NICE_CLASS_TXT = this.NICE_CLASS_TXT;
			other.MARK_CODE = this.MARK_CODE;
			other.PROC_TYP = this.PROC_TYP;
			other.PROC_NBR = this.PROC_NBR;
			other.STATUS_CODE = this.STATUS_CODE;

		}

		public void copyKeysDataTo(row10Struct other) {

			other.FILE_SEQ = this.FILE_SEQ;
			other.FILE_TYPE = this.FILE_TYPE;
			other.FILE_SERIES = this.FILE_SERIES;
			other.FILE_NBR = this.FILE_NBR;

		}

		private String readString(ObjectInputStream dis) throws IOException {
			String strReturn = null;
			int length = 0;
			length = dis.readInt();
			if (length == -1) {
				strReturn = null;
			} else {
				if (length > commonByteArray_WIPO_PROJECTS_G2b_Mig_TM.length) {
					if (length < 1024 && commonByteArray_WIPO_PROJECTS_G2b_Mig_TM.length == 0) {
						commonByteArray_WIPO_PROJECTS_G2b_Mig_TM = new byte[1024];
					} else {
						commonByteArray_WIPO_PROJECTS_G2b_Mig_TM = new byte[2 * length];
					}
				}
				dis.readFully(commonByteArray_WIPO_PROJECTS_G2b_Mig_TM, 0, length);
				strReturn = new String(commonByteArray_WIPO_PROJECTS_G2b_Mig_TM, 0, length, utf8Charset);
			}
			return strReturn;
		}

		private void writeString(String str, ObjectOutputStream dos) throws IOException {
			if (str == null) {
				dos.writeInt(-1);
			} else {
				byte[] byteArray = str.getBytes(utf8Charset);
				dos.writeInt(byteArray.length);
				dos.write(byteArray);
			}
		}

		private String readString(DataInputStream dis, ObjectInputStream ois) throws IOException {
			String strReturn = null;
			int length = 0;
			length = dis.readInt();
			if (length == -1) {
				strReturn = null;
			} else {
				byte[] byteArray = new byte[length];
				dis.read(byteArray);
				strReturn = new String(byteArray, utf8Charset);
			}
			return strReturn;
		}

		private void writeString(String str, DataOutputStream dos, ObjectOutputStream oos) throws IOException {
			if (str == null) {
				dos.writeInt(-1);
			} else {
				byte[] byteArray = str.getBytes(utf8Charset);
				dos.writeInt(byteArray.length);
				dos.write(byteArray);
			}
		}

		private java.util.Date readDate(DataInputStream dis, ObjectInputStream ois) throws IOException {
			java.util.Date dateReturn = null;
			int length = 0;
			length = dis.readByte();
			if (length == -1) {
				dateReturn = null;
			} else {
				dateReturn = new Date(dis.readLong());
			}
			return dateReturn;
		}

		private void writeDate(java.util.Date date1, DataOutputStream dos, ObjectOutputStream oos) throws IOException {
			if (date1 == null) {
				dos.writeByte(-1);
			} else {
				dos.writeByte(0);
				dos.writeLong(date1.getTime());
			}
		}

		public void readKeysData(ObjectInputStream dis) {

			synchronized (commonByteArrayLock_WIPO_PROJECTS_G2b_Mig_TM) {

				try {

					int length = 0;

					this.FILE_SEQ = readString(dis);

					this.FILE_TYPE = readString(dis);

					this.FILE_SERIES = (BigDecimal) dis.readObject();

					this.FILE_NBR = (BigDecimal) dis.readObject();

				} catch (IOException e) {
					throw new RuntimeException(e);

				} catch (ClassNotFoundException eCNFE) {
					throw new RuntimeException(eCNFE);

				}

			}

		}

		public void writeKeysData(ObjectOutputStream dos) {
			try {

				// String

				writeString(this.FILE_SEQ, dos);

				// String

				writeString(this.FILE_TYPE, dos);

				// BigDecimal

				dos.writeObject(this.FILE_SERIES);

				// BigDecimal

				dos.writeObject(this.FILE_NBR);

			} catch (IOException e) {
				throw new RuntimeException(e);
			}

		}

		/**
		 * Fill Values data by reading ObjectInputStream.
		 */
		public void readValuesData(DataInputStream dis, ObjectInputStream ois) {
			try {

				int length = 0;

				this.DOC_ORI = readString(dis, ois);

				this.DOC_SERIES = (BigDecimal) ois.readObject();

				this.DOC_NBR = (BigDecimal) ois.readObject();

				this.IND_IMPORT = (BigDecimal) ois.readObject();

				this.APPLICATION_TYPE = readString(dis, ois);

				this.APPLICATION_SUBTYPE = readString(dis, ois);

				this.LAW_CODE = (BigDecimal) ois.readObject();

				this.FILING_DATE = readDate(dis, ois);

				this.RECEPTION_DATE = readDate(dis, ois);

				this.PUBLICATION_DATE = readDate(dis, ois);

				this.PUBLICATION_NOTES = readString(dis, ois);

				this.IND_REGISTERED = (BigDecimal) ois.readObject();

				this.REGISTRATION_TYPE = readString(dis, ois);

				this.REGISTRATION_SERIES = (BigDecimal) ois.readObject();

				this.REGISTRATION_NBR = (BigDecimal) ois.readObject();

				this.REGISTRATION_DUP = readString(dis, ois);

				this.REGISTRATION_DATE = readDate(dis, ois);

				this.ENTITLEMENT_DATE = readDate(dis, ois);

				this.EXPIRATION_DATE = readDate(dis, ois);

				this.EXHIBITION_DATE = readDate(dis, ois);

				this.EXHIBITION_NOTES = readString(dis, ois);

				this.SIGN_TYPE = readString(dis, ois);

				this.MARK_NAME = readString(dis, ois);

				this.MARK_NAME_LANG2 = readString(dis, ois);

				this.MARK_TRANSLATION = readString(dis, ois);

				this.MARK_TRANSLATION_LANG2 = readString(dis, ois);

				this.MARK_TRANSLITERATION = readString(dis, ois);

				this.MARK_TRANSLITERATION_LANG2 = readString(dis, ois);

				this.SERIES_DESCRIPTION = readString(dis, ois);

				this.COLOUR_DESCRIPTION = readString(dis, ois);

				this.COLOUR_DESCR_LANG2 = readString(dis, ois);

				this.DISCLAIMER = readString(dis, ois);

				this.DISCLAIMER_LANG2 = readString(dis, ois);

				this.BY_CONSENT = readString(dis, ois);

				this.REGULATIONS = readString(dis, ois);

				this.NOTES = readString(dis, ois);

				this.CAPTURE_USER_ID = (BigDecimal) ois.readObject();

				this.CAPTURE_DATE = readDate(dis, ois);

				this.PUBLICATION_NBR = (BigDecimal) ois.readObject();

				this.PUBLICATION_SER = readString(dis, ois);

				this.PUBLICATION_TYP = readString(dis, ois);

				this.FIRST_PRIORITY_DATE = readDate(dis, ois);

				this.MAIN_OWNER_ADDR_NBR = (BigDecimal) ois.readObject();

				this.MAIN_OWNER_PERSON_NBR = (BigDecimal) ois.readObject();

				this.SERVICE_ADDR_NBR = (BigDecimal) ois.readObject();

				this.SERVICE_PERSON_NBR = (BigDecimal) ois.readObject();

				this.NICE_CLASS_TXT = readString(dis, ois);

				this.MARK_CODE = (BigDecimal) ois.readObject();

				this.PROC_TYP = readString(dis, ois);

				this.PROC_NBR = (BigDecimal) ois.readObject();

				this.STATUS_CODE = readString(dis, ois);

			} catch (IOException e) {
				throw new RuntimeException(e);

			} catch (ClassNotFoundException eCNFE) {
				throw new RuntimeException(eCNFE);

			}

		}

		/**
		 * Return a byte array which represents Values data.
		 */
		public void writeValuesData(DataOutputStream dos, ObjectOutputStream oos) {
			try {

				writeString(this.DOC_ORI, dos, oos);

				oos.writeObject(this.DOC_SERIES);

				oos.writeObject(this.DOC_NBR);

				oos.writeObject(this.IND_IMPORT);

				writeString(this.APPLICATION_TYPE, dos, oos);

				writeString(this.APPLICATION_SUBTYPE, dos, oos);

				oos.writeObject(this.LAW_CODE);

				writeDate(this.FILING_DATE, dos, oos);

				writeDate(this.RECEPTION_DATE, dos, oos);

				writeDate(this.PUBLICATION_DATE, dos, oos);

				writeString(this.PUBLICATION_NOTES, dos, oos);

				oos.writeObject(this.IND_REGISTERED);

				writeString(this.REGISTRATION_TYPE, dos, oos);

				oos.writeObject(this.REGISTRATION_SERIES);

				oos.writeObject(this.REGISTRATION_NBR);

				writeString(this.REGISTRATION_DUP, dos, oos);

				writeDate(this.REGISTRATION_DATE, dos, oos);

				writeDate(this.ENTITLEMENT_DATE, dos, oos);

				writeDate(this.EXPIRATION_DATE, dos, oos);

				writeDate(this.EXHIBITION_DATE, dos, oos);

				writeString(this.EXHIBITION_NOTES, dos, oos);

				writeString(this.SIGN_TYPE, dos, oos);

				writeString(this.MARK_NAME, dos, oos);

				writeString(this.MARK_NAME_LANG2, dos, oos);

				writeString(this.MARK_TRANSLATION, dos, oos);

				writeString(this.MARK_TRANSLATION_LANG2, dos, oos);

				writeString(this.MARK_TRANSLITERATION, dos, oos);

				writeString(this.MARK_TRANSLITERATION_LANG2, dos, oos);

				writeString(this.SERIES_DESCRIPTION, dos, oos);

				writeString(this.COLOUR_DESCRIPTION, dos, oos);

				writeString(this.COLOUR_DESCR_LANG2, dos, oos);

				writeString(this.DISCLAIMER, dos, oos);

				writeString(this.DISCLAIMER_LANG2, dos, oos);

				writeString(this.BY_CONSENT, dos, oos);

				writeString(this.REGULATIONS, dos, oos);

				writeString(this.NOTES, dos, oos);

				oos.writeObject(this.CAPTURE_USER_ID);

				writeDate(this.CAPTURE_DATE, dos, oos);

				oos.writeObject(this.PUBLICATION_NBR);

				writeString(this.PUBLICATION_SER, dos, oos);

				writeString(this.PUBLICATION_TYP, dos, oos);

				writeDate(this.FIRST_PRIORITY_DATE, dos, oos);

				oos.writeObject(this.MAIN_OWNER_ADDR_NBR);

				oos.writeObject(this.MAIN_OWNER_PERSON_NBR);

				oos.writeObject(this.SERVICE_ADDR_NBR);

				oos.writeObject(this.SERVICE_PERSON_NBR);

				writeString(this.NICE_CLASS_TXT, dos, oos);

				oos.writeObject(this.MARK_CODE);

				writeString(this.PROC_TYP, dos, oos);

				oos.writeObject(this.PROC_NBR);

				writeString(this.STATUS_CODE, dos, oos);

			} catch (IOException e) {
				throw new RuntimeException(e);
			}

		}

		public String toString() {

			StringBuilder sb = new StringBuilder();
			sb.append(super.toString());
			sb.append("[");
			sb.append("FILE_SEQ=" + FILE_SEQ);
			sb.append(",FILE_TYPE=" + FILE_TYPE);
			sb.append(",FILE_SERIES=" + String.valueOf(FILE_SERIES));
			sb.append(",FILE_NBR=" + String.valueOf(FILE_NBR));
			sb.append(",DOC_ORI=" + DOC_ORI);
			sb.append(",DOC_SERIES=" + String.valueOf(DOC_SERIES));
			sb.append(",DOC_NBR=" + String.valueOf(DOC_NBR));
			sb.append(",IND_IMPORT=" + String.valueOf(IND_IMPORT));
			sb.append(",APPLICATION_TYPE=" + APPLICATION_TYPE);
			sb.append(",APPLICATION_SUBTYPE=" + APPLICATION_SUBTYPE);
			sb.append(",LAW_CODE=" + String.valueOf(LAW_CODE));
			sb.append(",FILING_DATE=" + String.valueOf(FILING_DATE));
			sb.append(",RECEPTION_DATE=" + String.valueOf(RECEPTION_DATE));
			sb.append(",PUBLICATION_DATE=" + String.valueOf(PUBLICATION_DATE));
			sb.append(",PUBLICATION_NOTES=" + PUBLICATION_NOTES);
			sb.append(",IND_REGISTERED=" + String.valueOf(IND_REGISTERED));
			sb.append(",REGISTRATION_TYPE=" + REGISTRATION_TYPE);
			sb.append(",REGISTRATION_SERIES=" + String.valueOf(REGISTRATION_SERIES));
			sb.append(",REGISTRATION_NBR=" + String.valueOf(REGISTRATION_NBR));
			sb.append(",REGISTRATION_DUP=" + REGISTRATION_DUP);
			sb.append(",REGISTRATION_DATE=" + String.valueOf(REGISTRATION_DATE));
			sb.append(",ENTITLEMENT_DATE=" + String.valueOf(ENTITLEMENT_DATE));
			sb.append(",EXPIRATION_DATE=" + String.valueOf(EXPIRATION_DATE));
			sb.append(",EXHIBITION_DATE=" + String.valueOf(EXHIBITION_DATE));
			sb.append(",EXHIBITION_NOTES=" + EXHIBITION_NOTES);
			sb.append(",SIGN_TYPE=" + SIGN_TYPE);
			sb.append(",MARK_NAME=" + MARK_NAME);
			sb.append(",MARK_NAME_LANG2=" + MARK_NAME_LANG2);
			sb.append(",MARK_TRANSLATION=" + MARK_TRANSLATION);
			sb.append(",MARK_TRANSLATION_LANG2=" + MARK_TRANSLATION_LANG2);
			sb.append(",MARK_TRANSLITERATION=" + MARK_TRANSLITERATION);
			sb.append(",MARK_TRANSLITERATION_LANG2=" + MARK_TRANSLITERATION_LANG2);
			sb.append(",SERIES_DESCRIPTION=" + SERIES_DESCRIPTION);
			sb.append(",COLOUR_DESCRIPTION=" + COLOUR_DESCRIPTION);
			sb.append(",COLOUR_DESCR_LANG2=" + COLOUR_DESCR_LANG2);
			sb.append(",DISCLAIMER=" + DISCLAIMER);
			sb.append(",DISCLAIMER_LANG2=" + DISCLAIMER_LANG2);
			sb.append(",BY_CONSENT=" + BY_CONSENT);
			sb.append(",REGULATIONS=" + REGULATIONS);
			sb.append(",NOTES=" + NOTES);
			sb.append(",CAPTURE_USER_ID=" + String.valueOf(CAPTURE_USER_ID));
			sb.append(",CAPTURE_DATE=" + String.valueOf(CAPTURE_DATE));
			sb.append(",PUBLICATION_NBR=" + String.valueOf(PUBLICATION_NBR));
			sb.append(",PUBLICATION_SER=" + PUBLICATION_SER);
			sb.append(",PUBLICATION_TYP=" + PUBLICATION_TYP);
			sb.append(",FIRST_PRIORITY_DATE=" + String.valueOf(FIRST_PRIORITY_DATE));
			sb.append(",MAIN_OWNER_ADDR_NBR=" + String.valueOf(MAIN_OWNER_ADDR_NBR));
			sb.append(",MAIN_OWNER_PERSON_NBR=" + String.valueOf(MAIN_OWNER_PERSON_NBR));
			sb.append(",SERVICE_ADDR_NBR=" + String.valueOf(SERVICE_ADDR_NBR));
			sb.append(",SERVICE_PERSON_NBR=" + String.valueOf(SERVICE_PERSON_NBR));
			sb.append(",NICE_CLASS_TXT=" + NICE_CLASS_TXT);
			sb.append(",MARK_CODE=" + String.valueOf(MARK_CODE));
			sb.append(",PROC_TYP=" + PROC_TYP);
			sb.append(",PROC_NBR=" + String.valueOf(PROC_NBR));
			sb.append(",STATUS_CODE=" + STATUS_CODE);
			sb.append("]");

			return sb.toString();
		}

		/**
		 * Compare keys
		 */
		public int compareTo(row10Struct other) {

			int returnValue = -1;

			returnValue = checkNullsAndCompare(this.FILE_SEQ, other.FILE_SEQ);
			if (returnValue != 0) {
				return returnValue;
			}

			returnValue = checkNullsAndCompare(this.FILE_TYPE, other.FILE_TYPE);
			if (returnValue != 0) {
				return returnValue;
			}

			returnValue = checkNullsAndCompare(this.FILE_SERIES, other.FILE_SERIES);
			if (returnValue != 0) {
				return returnValue;
			}

			returnValue = checkNullsAndCompare(this.FILE_NBR, other.FILE_NBR);
			if (returnValue != 0) {
				return returnValue;
			}

			return returnValue;
		}

		private int checkNullsAndCompare(Object object1, Object object2) {
			int returnValue = 0;
			if (object1 instanceof Comparable && object2 instanceof Comparable) {
				returnValue = ((Comparable) object1).compareTo(object2);
			} else if (object1 != null && object2 != null) {
				returnValue = compareStrings(object1.toString(), object2.toString());
			} else if (object1 == null && object2 != null) {
				returnValue = 1;
			} else if (object1 != null && object2 == null) {
				returnValue = -1;
			} else {
				returnValue = 0;
			}

			return returnValue;
		}

		private int compareStrings(String string1, String string2) {
			return string1.compareTo(string2);
		}

	}

	public void tDBInput_4Process(final java.util.Map<String, Object> globalMap) throws TalendException {
		globalMap.put("tDBInput_4_SUBPROCESS_STATE", 0);

		final boolean execStat = this.execStat;

		String iterateId = "";

		String currentComponent = "";
		java.util.Map<String, Object> resourceMap = new java.util.HashMap<String, Object>();

		try {
			// TDI-39566 avoid throwing an useless Exception
			boolean resumeIt = true;
			if (globalResumeTicket == false && resumeEntryMethodName != null) {
				String currentMethodName = new java.lang.Exception().getStackTrace()[0].getMethodName();
				resumeIt = resumeEntryMethodName.equals(currentMethodName);
			}
			if (resumeIt || globalResumeTicket) { // start the resume
				globalResumeTicket = true;

				row10Struct row10 = new row10Struct();

				/**
				 * [tAdvancedHash_row10 begin ] start
				 */

				ok_Hash.put("tAdvancedHash_row10", false);
				start_Hash.put("tAdvancedHash_row10", System.currentTimeMillis());

				currentComponent = "tAdvancedHash_row10";

				if (execStat) {
					runStat.updateStatOnConnection(resourceMap, iterateId, 0, 0, "row10");
				}

				int tos_count_tAdvancedHash_row10 = 0;

				// connection name:row10
				// source node:tDBInput_4 - inputs:(after_tDBInput_5) outputs:(row10,row10) |
				// target node:tAdvancedHash_row10 - inputs:(row10) outputs:()
				// linked node: tMap_4 - inputs:(row9,row10) outputs:(wrk_mark_prio)

				org.talend.designer.components.lookup.common.ICommonLookup.MATCHING_MODE matchingModeEnum_row10 = org.talend.designer.components.lookup.common.ICommonLookup.MATCHING_MODE.ALL_MATCHES;

				org.talend.designer.components.lookup.memory.AdvancedMemoryLookup<row10Struct> tHash_Lookup_row10 = org.talend.designer.components.lookup.memory.AdvancedMemoryLookup
						.<row10Struct>getLookup(matchingModeEnum_row10);

				globalMap.put("tHash_Lookup_row10", tHash_Lookup_row10);

				/**
				 * [tAdvancedHash_row10 begin ] stop
				 */

				/**
				 * [tDBInput_4 begin ] start
				 */

				ok_Hash.put("tDBInput_4", false);
				start_Hash.put("tDBInput_4", System.currentTimeMillis());

				currentComponent = "tDBInput_4";

				int tos_count_tDBInput_4 = 0;

				org.talend.designer.components.util.mssql.MSSqlGenerateTimestampUtil mssqlGTU_tDBInput_4 = org.talend.designer.components.util.mssql.MSSqlUtilFactory
						.getMSSqlGenerateTimestampUtil();

				java.util.List<String> talendToDBList_tDBInput_4 = new java.util.ArrayList();
				String[] talendToDBArray_tDBInput_4 = new String[] { "FLOAT", "NUMERIC", "NUMERIC IDENTITY", "DECIMAL",
						"DECIMAL IDENTITY", "REAL" };
				java.util.Collections.addAll(talendToDBList_tDBInput_4, talendToDBArray_tDBInput_4);
				int nb_line_tDBInput_4 = 0;
				java.sql.Connection conn_tDBInput_4 = null;
				String driverClass_tDBInput_4 = "net.sourceforge.jtds.jdbc.Driver";
				java.lang.Class jdbcclazz_tDBInput_4 = java.lang.Class.forName(driverClass_tDBInput_4);
				String dbUser_tDBInput_4 = "ADMIN";

				final String decryptedPassword_tDBInput_4 = routines.system.PasswordEncryptUtil
						.decryptPassword("enc:routine.encryption.key.v1:3GuJTAw5YTapiC1KHmV2Hr/7l2X+tiApLUGYK8S5hAI3");

				String dbPwd_tDBInput_4 = decryptedPassword_tDBInput_4;

				String port_tDBInput_4 = "1433";
				String dbname_tDBInput_4 = "MARCAS_PY";
				String url_tDBInput_4 = "jdbc:jtds:sqlserver://" + "localhost";
				if (!"".equals(port_tDBInput_4)) {
					url_tDBInput_4 += ":" + "1433";
				}
				if (!"".equals(dbname_tDBInput_4)) {
					url_tDBInput_4 += "//" + "MARCAS_PY";
				}
				url_tDBInput_4 += ";appName=" + projectName + ";" + "";
				String dbschema_tDBInput_4 = "ADMIN";

				conn_tDBInput_4 = java.sql.DriverManager.getConnection(url_tDBInput_4, dbUser_tDBInput_4,
						dbPwd_tDBInput_4);

				java.sql.Statement stmt_tDBInput_4 = conn_tDBInput_4.createStatement();

				String dbquery_tDBInput_4 = "SELECT ADMIN.WRK_MARK.FILE_SEQ,\n		ADMIN.WRK_MARK.FILE_TYPE,\n		ADMIN.WRK_MARK.FILE_SERIES,\n		ADMIN.WRK_MARK.FILE_NBR,\n		"
						+ "ADMIN.WRK_MARK.DOC_ORI,\n		ADMIN.WRK_MARK.DOC_SERIES,\n		ADMIN.WRK_MARK.DOC_NBR,\n		ADMIN.WRK_MARK.IND_IMPORT,\n		ADMIN.WRK_"
						+ "MARK.APPLICATION_TYPE,\n		ADMIN.WRK_MARK.APPLICATION_SUBTYPE,\n		ADMIN.WRK_MARK.LAW_CODE,\n		ADMIN.WRK_MARK.FILING_DATE,\n		"
						+ "ADMIN.WRK_MARK.RECEPTION_DATE,\n		ADMIN.WRK_MARK.PUBLICATION_DATE,\n		ADMIN.WRK_MARK.PUBLICATION_NOTES,\n		ADMIN.WRK_MARK.I"
						+ "ND_REGISTERED,\n		ADMIN.WRK_MARK.REGISTRATION_TYPE,\n		ADMIN.WRK_MARK.REGISTRATION_SERIES,\n		ADMIN.WRK_MARK.REGISTRATION_N"
						+ "BR,\n		ADMIN.WRK_MARK.REGISTRATION_DUP,\n		ADMIN.WRK_MARK.REGISTRATION_DATE,\n		ADMIN.WRK_MARK.ENTITLEMENT_DATE,\n		ADMIN.WR"
						+ "K_MARK.EXPIRATION_DATE,\n		ADMIN.WRK_MARK.EXHIBITION_DATE,\n		ADMIN.WRK_MARK.EXHIBITION_NOTES,\n		ADMIN.WRK_MARK.SIGN_TYPE,"
						+ "\n		ADMIN.WRK_MARK.MARK_NAME,\n		ADMIN.WRK_MARK.MARK_NAME_LANG2,\n		ADMIN.WRK_MARK.MARK_TRANSLATION,\n		ADMIN.WRK_MARK.MARK_"
						+ "TRANSLATION_LANG2,\n		ADMIN.WRK_MARK.MARK_TRANSLITERATION,\n		ADMIN.WRK_MARK.MARK_TRANSLITERATION_LANG2,\n		ADMIN.WRK_MARK."
						+ "SERIES_DESCRIPTION,\n		ADMIN.WRK_MARK.COLOUR_DESCRIPTION,\n		ADMIN.WRK_MARK.COLOUR_DESCR_LANG2,\n		ADMIN.WRK_MARK.DISCLAIME"
						+ "R,\n		ADMIN.WRK_MARK.DISCLAIMER_LANG2,\n		ADMIN.WRK_MARK.BY_CONSENT,\n		ADMIN.WRK_MARK.REGULATIONS,\n		ADMIN.WRK_MARK.NOTES,"
						+ "\n		ADMIN.WRK_MARK.CAPTURE_USER_ID,\n		ADMIN.WRK_MARK.CAPTURE_DATE,\n		ADMIN.WRK_MARK.PUBLICATION_NBR,\n		ADMIN.WRK_MARK.PUB"
						+ "LICATION_SER,\n		ADMIN.WRK_MARK.PUBLICATION_TYP,\n		ADMIN.WRK_MARK.FIRST_PRIORITY_DATE,\n		ADMIN.WRK_MARK.MAIN_OWNER_ADDR_N"
						+ "BR,\n		ADMIN.WRK_MARK.MAIN_OWNER_PERSON_NBR,\n		ADMIN.WRK_MARK.SERVICE_ADDR_NBR,\n		ADMIN.WRK_MARK.SERVICE_PERSON_NBR,\n		AD"
						+ "MIN.WRK_MARK.NICE_CLASS_TXT,\n		ADMIN.WRK_MARK.MARK_CODE,\n		ADMIN.WRK_MARK.PROC_TYP,\n		ADMIN.WRK_MARK.PROC_NBR,\n		ADMIN.W"
						+ "RK_MARK.STATUS_CODE\nFROM	ADMIN.WRK_MARK";

				globalMap.put("tDBInput_4_QUERY", dbquery_tDBInput_4);
				java.sql.ResultSet rs_tDBInput_4 = null;

				try {
					rs_tDBInput_4 = stmt_tDBInput_4.executeQuery(dbquery_tDBInput_4);
					java.sql.ResultSetMetaData rsmd_tDBInput_4 = rs_tDBInput_4.getMetaData();
					int colQtyInRs_tDBInput_4 = rsmd_tDBInput_4.getColumnCount();

					String tmpContent_tDBInput_4 = null;

					while (rs_tDBInput_4.next()) {
						nb_line_tDBInput_4++;

						if (colQtyInRs_tDBInput_4 < 1) {
							row10.FILE_SEQ = null;
						} else {

							tmpContent_tDBInput_4 = rs_tDBInput_4.getString(1);
							if (tmpContent_tDBInput_4 != null) {
								if (talendToDBList_tDBInput_4.contains(
										rsmd_tDBInput_4.getColumnTypeName(1).toUpperCase(java.util.Locale.ENGLISH))) {
									row10.FILE_SEQ = FormatterUtils.formatUnwithE(tmpContent_tDBInput_4);
								} else {
									row10.FILE_SEQ = tmpContent_tDBInput_4;
								}
							} else {
								row10.FILE_SEQ = null;
							}
						}
						if (colQtyInRs_tDBInput_4 < 2) {
							row10.FILE_TYPE = null;
						} else {

							tmpContent_tDBInput_4 = rs_tDBInput_4.getString(2);
							if (tmpContent_tDBInput_4 != null) {
								if (talendToDBList_tDBInput_4.contains(
										rsmd_tDBInput_4.getColumnTypeName(2).toUpperCase(java.util.Locale.ENGLISH))) {
									row10.FILE_TYPE = FormatterUtils.formatUnwithE(tmpContent_tDBInput_4);
								} else {
									row10.FILE_TYPE = tmpContent_tDBInput_4;
								}
							} else {
								row10.FILE_TYPE = null;
							}
						}
						if (colQtyInRs_tDBInput_4 < 3) {
							row10.FILE_SERIES = null;
						} else {

							row10.FILE_SERIES = rs_tDBInput_4.getBigDecimal(3);
							if (rs_tDBInput_4.wasNull()) {
								throw new RuntimeException("Null value in non-Nullable column");
							}
						}
						if (colQtyInRs_tDBInput_4 < 4) {
							row10.FILE_NBR = null;
						} else {

							row10.FILE_NBR = rs_tDBInput_4.getBigDecimal(4);
							if (rs_tDBInput_4.wasNull()) {
								throw new RuntimeException("Null value in non-Nullable column");
							}
						}
						if (colQtyInRs_tDBInput_4 < 5) {
							row10.DOC_ORI = null;
						} else {

							tmpContent_tDBInput_4 = rs_tDBInput_4.getString(5);
							if (tmpContent_tDBInput_4 != null) {
								if (talendToDBList_tDBInput_4.contains(
										rsmd_tDBInput_4.getColumnTypeName(5).toUpperCase(java.util.Locale.ENGLISH))) {
									row10.DOC_ORI = FormatterUtils.formatUnwithE(tmpContent_tDBInput_4);
								} else {
									row10.DOC_ORI = tmpContent_tDBInput_4;
								}
							} else {
								row10.DOC_ORI = null;
							}
						}
						if (colQtyInRs_tDBInput_4 < 6) {
							row10.DOC_SERIES = null;
						} else {

							row10.DOC_SERIES = rs_tDBInput_4.getBigDecimal(6);
							if (rs_tDBInput_4.wasNull()) {
								row10.DOC_SERIES = null;
							}
						}
						if (colQtyInRs_tDBInput_4 < 7) {
							row10.DOC_NBR = null;
						} else {

							row10.DOC_NBR = rs_tDBInput_4.getBigDecimal(7);
							if (rs_tDBInput_4.wasNull()) {
								row10.DOC_NBR = null;
							}
						}
						if (colQtyInRs_tDBInput_4 < 8) {
							row10.IND_IMPORT = null;
						} else {

							row10.IND_IMPORT = rs_tDBInput_4.getBigDecimal(8);
							if (rs_tDBInput_4.wasNull()) {
								row10.IND_IMPORT = null;
							}
						}
						if (colQtyInRs_tDBInput_4 < 9) {
							row10.APPLICATION_TYPE = null;
						} else {

							tmpContent_tDBInput_4 = rs_tDBInput_4.getString(9);
							if (tmpContent_tDBInput_4 != null) {
								if (talendToDBList_tDBInput_4.contains(
										rsmd_tDBInput_4.getColumnTypeName(9).toUpperCase(java.util.Locale.ENGLISH))) {
									row10.APPLICATION_TYPE = FormatterUtils.formatUnwithE(tmpContent_tDBInput_4);
								} else {
									row10.APPLICATION_TYPE = tmpContent_tDBInput_4;
								}
							} else {
								row10.APPLICATION_TYPE = null;
							}
						}
						if (colQtyInRs_tDBInput_4 < 10) {
							row10.APPLICATION_SUBTYPE = null;
						} else {

							tmpContent_tDBInput_4 = rs_tDBInput_4.getString(10);
							if (tmpContent_tDBInput_4 != null) {
								if (talendToDBList_tDBInput_4.contains(
										rsmd_tDBInput_4.getColumnTypeName(10).toUpperCase(java.util.Locale.ENGLISH))) {
									row10.APPLICATION_SUBTYPE = FormatterUtils.formatUnwithE(tmpContent_tDBInput_4);
								} else {
									row10.APPLICATION_SUBTYPE = tmpContent_tDBInput_4;
								}
							} else {
								row10.APPLICATION_SUBTYPE = null;
							}
						}
						if (colQtyInRs_tDBInput_4 < 11) {
							row10.LAW_CODE = null;
						} else {

							row10.LAW_CODE = rs_tDBInput_4.getBigDecimal(11);
							if (rs_tDBInput_4.wasNull()) {
								throw new RuntimeException("Null value in non-Nullable column");
							}
						}
						if (colQtyInRs_tDBInput_4 < 12) {
							row10.FILING_DATE = null;
						} else {

							row10.FILING_DATE = mssqlGTU_tDBInput_4.getDate(rsmd_tDBInput_4, rs_tDBInput_4, 12);

						}
						if (colQtyInRs_tDBInput_4 < 13) {
							row10.RECEPTION_DATE = null;
						} else {

							row10.RECEPTION_DATE = mssqlGTU_tDBInput_4.getDate(rsmd_tDBInput_4, rs_tDBInput_4, 13);

						}
						if (colQtyInRs_tDBInput_4 < 14) {
							row10.PUBLICATION_DATE = null;
						} else {

							row10.PUBLICATION_DATE = mssqlGTU_tDBInput_4.getDate(rsmd_tDBInput_4, rs_tDBInput_4, 14);

						}
						if (colQtyInRs_tDBInput_4 < 15) {
							row10.PUBLICATION_NOTES = null;
						} else {

							tmpContent_tDBInput_4 = rs_tDBInput_4.getString(15);
							if (tmpContent_tDBInput_4 != null) {
								if (talendToDBList_tDBInput_4.contains(
										rsmd_tDBInput_4.getColumnTypeName(15).toUpperCase(java.util.Locale.ENGLISH))) {
									row10.PUBLICATION_NOTES = FormatterUtils.formatUnwithE(tmpContent_tDBInput_4);
								} else {
									row10.PUBLICATION_NOTES = tmpContent_tDBInput_4;
								}
							} else {
								row10.PUBLICATION_NOTES = null;
							}
						}
						if (colQtyInRs_tDBInput_4 < 16) {
							row10.IND_REGISTERED = null;
						} else {

							row10.IND_REGISTERED = rs_tDBInput_4.getBigDecimal(16);
							if (rs_tDBInput_4.wasNull()) {
								row10.IND_REGISTERED = null;
							}
						}
						if (colQtyInRs_tDBInput_4 < 17) {
							row10.REGISTRATION_TYPE = null;
						} else {

							tmpContent_tDBInput_4 = rs_tDBInput_4.getString(17);
							if (tmpContent_tDBInput_4 != null) {
								if (talendToDBList_tDBInput_4.contains(
										rsmd_tDBInput_4.getColumnTypeName(17).toUpperCase(java.util.Locale.ENGLISH))) {
									row10.REGISTRATION_TYPE = FormatterUtils.formatUnwithE(tmpContent_tDBInput_4);
								} else {
									row10.REGISTRATION_TYPE = tmpContent_tDBInput_4;
								}
							} else {
								row10.REGISTRATION_TYPE = null;
							}
						}
						if (colQtyInRs_tDBInput_4 < 18) {
							row10.REGISTRATION_SERIES = null;
						} else {

							row10.REGISTRATION_SERIES = rs_tDBInput_4.getBigDecimal(18);
							if (rs_tDBInput_4.wasNull()) {
								row10.REGISTRATION_SERIES = null;
							}
						}
						if (colQtyInRs_tDBInput_4 < 19) {
							row10.REGISTRATION_NBR = null;
						} else {

							row10.REGISTRATION_NBR = rs_tDBInput_4.getBigDecimal(19);
							if (rs_tDBInput_4.wasNull()) {
								row10.REGISTRATION_NBR = null;
							}
						}
						if (colQtyInRs_tDBInput_4 < 20) {
							row10.REGISTRATION_DUP = null;
						} else {

							tmpContent_tDBInput_4 = rs_tDBInput_4.getString(20);
							if (tmpContent_tDBInput_4 != null) {
								if (talendToDBList_tDBInput_4.contains(
										rsmd_tDBInput_4.getColumnTypeName(20).toUpperCase(java.util.Locale.ENGLISH))) {
									row10.REGISTRATION_DUP = FormatterUtils.formatUnwithE(tmpContent_tDBInput_4);
								} else {
									row10.REGISTRATION_DUP = tmpContent_tDBInput_4;
								}
							} else {
								row10.REGISTRATION_DUP = null;
							}
						}
						if (colQtyInRs_tDBInput_4 < 21) {
							row10.REGISTRATION_DATE = null;
						} else {

							row10.REGISTRATION_DATE = mssqlGTU_tDBInput_4.getDate(rsmd_tDBInput_4, rs_tDBInput_4, 21);

						}
						if (colQtyInRs_tDBInput_4 < 22) {
							row10.ENTITLEMENT_DATE = null;
						} else {

							row10.ENTITLEMENT_DATE = mssqlGTU_tDBInput_4.getDate(rsmd_tDBInput_4, rs_tDBInput_4, 22);

						}
						if (colQtyInRs_tDBInput_4 < 23) {
							row10.EXPIRATION_DATE = null;
						} else {

							row10.EXPIRATION_DATE = mssqlGTU_tDBInput_4.getDate(rsmd_tDBInput_4, rs_tDBInput_4, 23);

						}
						if (colQtyInRs_tDBInput_4 < 24) {
							row10.EXHIBITION_DATE = null;
						} else {

							row10.EXHIBITION_DATE = mssqlGTU_tDBInput_4.getDate(rsmd_tDBInput_4, rs_tDBInput_4, 24);

						}
						if (colQtyInRs_tDBInput_4 < 25) {
							row10.EXHIBITION_NOTES = null;
						} else {

							tmpContent_tDBInput_4 = rs_tDBInput_4.getString(25);
							if (tmpContent_tDBInput_4 != null) {
								if (talendToDBList_tDBInput_4.contains(
										rsmd_tDBInput_4.getColumnTypeName(25).toUpperCase(java.util.Locale.ENGLISH))) {
									row10.EXHIBITION_NOTES = FormatterUtils.formatUnwithE(tmpContent_tDBInput_4);
								} else {
									row10.EXHIBITION_NOTES = tmpContent_tDBInput_4;
								}
							} else {
								row10.EXHIBITION_NOTES = null;
							}
						}
						if (colQtyInRs_tDBInput_4 < 26) {
							row10.SIGN_TYPE = null;
						} else {

							tmpContent_tDBInput_4 = rs_tDBInput_4.getString(26);
							if (tmpContent_tDBInput_4 != null) {
								if (talendToDBList_tDBInput_4.contains(
										rsmd_tDBInput_4.getColumnTypeName(26).toUpperCase(java.util.Locale.ENGLISH))) {
									row10.SIGN_TYPE = FormatterUtils.formatUnwithE(tmpContent_tDBInput_4);
								} else {
									row10.SIGN_TYPE = tmpContent_tDBInput_4;
								}
							} else {
								row10.SIGN_TYPE = null;
							}
						}
						if (colQtyInRs_tDBInput_4 < 27) {
							row10.MARK_NAME = null;
						} else {

							tmpContent_tDBInput_4 = rs_tDBInput_4.getString(27);
							if (tmpContent_tDBInput_4 != null) {
								if (talendToDBList_tDBInput_4.contains(
										rsmd_tDBInput_4.getColumnTypeName(27).toUpperCase(java.util.Locale.ENGLISH))) {
									row10.MARK_NAME = FormatterUtils.formatUnwithE(tmpContent_tDBInput_4);
								} else {
									row10.MARK_NAME = tmpContent_tDBInput_4;
								}
							} else {
								row10.MARK_NAME = null;
							}
						}
						if (colQtyInRs_tDBInput_4 < 28) {
							row10.MARK_NAME_LANG2 = null;
						} else {

							tmpContent_tDBInput_4 = rs_tDBInput_4.getString(28);
							if (tmpContent_tDBInput_4 != null) {
								if (talendToDBList_tDBInput_4.contains(
										rsmd_tDBInput_4.getColumnTypeName(28).toUpperCase(java.util.Locale.ENGLISH))) {
									row10.MARK_NAME_LANG2 = FormatterUtils.formatUnwithE(tmpContent_tDBInput_4);
								} else {
									row10.MARK_NAME_LANG2 = tmpContent_tDBInput_4;
								}
							} else {
								row10.MARK_NAME_LANG2 = null;
							}
						}
						if (colQtyInRs_tDBInput_4 < 29) {
							row10.MARK_TRANSLATION = null;
						} else {

							tmpContent_tDBInput_4 = rs_tDBInput_4.getString(29);
							if (tmpContent_tDBInput_4 != null) {
								if (talendToDBList_tDBInput_4.contains(
										rsmd_tDBInput_4.getColumnTypeName(29).toUpperCase(java.util.Locale.ENGLISH))) {
									row10.MARK_TRANSLATION = FormatterUtils.formatUnwithE(tmpContent_tDBInput_4);
								} else {
									row10.MARK_TRANSLATION = tmpContent_tDBInput_4;
								}
							} else {
								row10.MARK_TRANSLATION = null;
							}
						}
						if (colQtyInRs_tDBInput_4 < 30) {
							row10.MARK_TRANSLATION_LANG2 = null;
						} else {

							tmpContent_tDBInput_4 = rs_tDBInput_4.getString(30);
							if (tmpContent_tDBInput_4 != null) {
								if (talendToDBList_tDBInput_4.contains(
										rsmd_tDBInput_4.getColumnTypeName(30).toUpperCase(java.util.Locale.ENGLISH))) {
									row10.MARK_TRANSLATION_LANG2 = FormatterUtils.formatUnwithE(tmpContent_tDBInput_4);
								} else {
									row10.MARK_TRANSLATION_LANG2 = tmpContent_tDBInput_4;
								}
							} else {
								row10.MARK_TRANSLATION_LANG2 = null;
							}
						}
						if (colQtyInRs_tDBInput_4 < 31) {
							row10.MARK_TRANSLITERATION = null;
						} else {

							tmpContent_tDBInput_4 = rs_tDBInput_4.getString(31);
							if (tmpContent_tDBInput_4 != null) {
								if (talendToDBList_tDBInput_4.contains(
										rsmd_tDBInput_4.getColumnTypeName(31).toUpperCase(java.util.Locale.ENGLISH))) {
									row10.MARK_TRANSLITERATION = FormatterUtils.formatUnwithE(tmpContent_tDBInput_4);
								} else {
									row10.MARK_TRANSLITERATION = tmpContent_tDBInput_4;
								}
							} else {
								row10.MARK_TRANSLITERATION = null;
							}
						}
						if (colQtyInRs_tDBInput_4 < 32) {
							row10.MARK_TRANSLITERATION_LANG2 = null;
						} else {

							tmpContent_tDBInput_4 = rs_tDBInput_4.getString(32);
							if (tmpContent_tDBInput_4 != null) {
								if (talendToDBList_tDBInput_4.contains(
										rsmd_tDBInput_4.getColumnTypeName(32).toUpperCase(java.util.Locale.ENGLISH))) {
									row10.MARK_TRANSLITERATION_LANG2 = FormatterUtils
											.formatUnwithE(tmpContent_tDBInput_4);
								} else {
									row10.MARK_TRANSLITERATION_LANG2 = tmpContent_tDBInput_4;
								}
							} else {
								row10.MARK_TRANSLITERATION_LANG2 = null;
							}
						}
						if (colQtyInRs_tDBInput_4 < 33) {
							row10.SERIES_DESCRIPTION = null;
						} else {

							tmpContent_tDBInput_4 = rs_tDBInput_4.getString(33);
							if (tmpContent_tDBInput_4 != null) {
								if (talendToDBList_tDBInput_4.contains(
										rsmd_tDBInput_4.getColumnTypeName(33).toUpperCase(java.util.Locale.ENGLISH))) {
									row10.SERIES_DESCRIPTION = FormatterUtils.formatUnwithE(tmpContent_tDBInput_4);
								} else {
									row10.SERIES_DESCRIPTION = tmpContent_tDBInput_4;
								}
							} else {
								row10.SERIES_DESCRIPTION = null;
							}
						}
						if (colQtyInRs_tDBInput_4 < 34) {
							row10.COLOUR_DESCRIPTION = null;
						} else {

							tmpContent_tDBInput_4 = rs_tDBInput_4.getString(34);
							if (tmpContent_tDBInput_4 != null) {
								if (talendToDBList_tDBInput_4.contains(
										rsmd_tDBInput_4.getColumnTypeName(34).toUpperCase(java.util.Locale.ENGLISH))) {
									row10.COLOUR_DESCRIPTION = FormatterUtils.formatUnwithE(tmpContent_tDBInput_4);
								} else {
									row10.COLOUR_DESCRIPTION = tmpContent_tDBInput_4;
								}
							} else {
								row10.COLOUR_DESCRIPTION = null;
							}
						}
						if (colQtyInRs_tDBInput_4 < 35) {
							row10.COLOUR_DESCR_LANG2 = null;
						} else {

							tmpContent_tDBInput_4 = rs_tDBInput_4.getString(35);
							if (tmpContent_tDBInput_4 != null) {
								if (talendToDBList_tDBInput_4.contains(
										rsmd_tDBInput_4.getColumnTypeName(35).toUpperCase(java.util.Locale.ENGLISH))) {
									row10.COLOUR_DESCR_LANG2 = FormatterUtils.formatUnwithE(tmpContent_tDBInput_4);
								} else {
									row10.COLOUR_DESCR_LANG2 = tmpContent_tDBInput_4;
								}
							} else {
								row10.COLOUR_DESCR_LANG2 = null;
							}
						}
						if (colQtyInRs_tDBInput_4 < 36) {
							row10.DISCLAIMER = null;
						} else {

							tmpContent_tDBInput_4 = rs_tDBInput_4.getString(36);
							if (tmpContent_tDBInput_4 != null) {
								if (talendToDBList_tDBInput_4.contains(
										rsmd_tDBInput_4.getColumnTypeName(36).toUpperCase(java.util.Locale.ENGLISH))) {
									row10.DISCLAIMER = FormatterUtils.formatUnwithE(tmpContent_tDBInput_4);
								} else {
									row10.DISCLAIMER = tmpContent_tDBInput_4;
								}
							} else {
								row10.DISCLAIMER = null;
							}
						}
						if (colQtyInRs_tDBInput_4 < 37) {
							row10.DISCLAIMER_LANG2 = null;
						} else {

							tmpContent_tDBInput_4 = rs_tDBInput_4.getString(37);
							if (tmpContent_tDBInput_4 != null) {
								if (talendToDBList_tDBInput_4.contains(
										rsmd_tDBInput_4.getColumnTypeName(37).toUpperCase(java.util.Locale.ENGLISH))) {
									row10.DISCLAIMER_LANG2 = FormatterUtils.formatUnwithE(tmpContent_tDBInput_4);
								} else {
									row10.DISCLAIMER_LANG2 = tmpContent_tDBInput_4;
								}
							} else {
								row10.DISCLAIMER_LANG2 = null;
							}
						}
						if (colQtyInRs_tDBInput_4 < 38) {
							row10.BY_CONSENT = null;
						} else {

							tmpContent_tDBInput_4 = rs_tDBInput_4.getString(38);
							if (tmpContent_tDBInput_4 != null) {
								if (talendToDBList_tDBInput_4.contains(
										rsmd_tDBInput_4.getColumnTypeName(38).toUpperCase(java.util.Locale.ENGLISH))) {
									row10.BY_CONSENT = FormatterUtils.formatUnwithE(tmpContent_tDBInput_4);
								} else {
									row10.BY_CONSENT = tmpContent_tDBInput_4;
								}
							} else {
								row10.BY_CONSENT = null;
							}
						}
						if (colQtyInRs_tDBInput_4 < 39) {
							row10.REGULATIONS = null;
						} else {

							tmpContent_tDBInput_4 = rs_tDBInput_4.getString(39);
							if (tmpContent_tDBInput_4 != null) {
								if (talendToDBList_tDBInput_4.contains(
										rsmd_tDBInput_4.getColumnTypeName(39).toUpperCase(java.util.Locale.ENGLISH))) {
									row10.REGULATIONS = FormatterUtils.formatUnwithE(tmpContent_tDBInput_4);
								} else {
									row10.REGULATIONS = tmpContent_tDBInput_4;
								}
							} else {
								row10.REGULATIONS = null;
							}
						}
						if (colQtyInRs_tDBInput_4 < 40) {
							row10.NOTES = null;
						} else {

							tmpContent_tDBInput_4 = rs_tDBInput_4.getString(40);
							if (tmpContent_tDBInput_4 != null) {
								if (talendToDBList_tDBInput_4.contains(
										rsmd_tDBInput_4.getColumnTypeName(40).toUpperCase(java.util.Locale.ENGLISH))) {
									row10.NOTES = FormatterUtils.formatUnwithE(tmpContent_tDBInput_4);
								} else {
									row10.NOTES = tmpContent_tDBInput_4;
								}
							} else {
								row10.NOTES = null;
							}
						}
						if (colQtyInRs_tDBInput_4 < 41) {
							row10.CAPTURE_USER_ID = null;
						} else {

							row10.CAPTURE_USER_ID = rs_tDBInput_4.getBigDecimal(41);
							if (rs_tDBInput_4.wasNull()) {
								row10.CAPTURE_USER_ID = null;
							}
						}
						if (colQtyInRs_tDBInput_4 < 42) {
							row10.CAPTURE_DATE = null;
						} else {

							row10.CAPTURE_DATE = mssqlGTU_tDBInput_4.getDate(rsmd_tDBInput_4, rs_tDBInput_4, 42);

						}
						if (colQtyInRs_tDBInput_4 < 43) {
							row10.PUBLICATION_NBR = null;
						} else {

							row10.PUBLICATION_NBR = rs_tDBInput_4.getBigDecimal(43);
							if (rs_tDBInput_4.wasNull()) {
								row10.PUBLICATION_NBR = null;
							}
						}
						if (colQtyInRs_tDBInput_4 < 44) {
							row10.PUBLICATION_SER = null;
						} else {

							tmpContent_tDBInput_4 = rs_tDBInput_4.getString(44);
							if (tmpContent_tDBInput_4 != null) {
								if (talendToDBList_tDBInput_4.contains(
										rsmd_tDBInput_4.getColumnTypeName(44).toUpperCase(java.util.Locale.ENGLISH))) {
									row10.PUBLICATION_SER = FormatterUtils.formatUnwithE(tmpContent_tDBInput_4);
								} else {
									row10.PUBLICATION_SER = tmpContent_tDBInput_4;
								}
							} else {
								row10.PUBLICATION_SER = null;
							}
						}
						if (colQtyInRs_tDBInput_4 < 45) {
							row10.PUBLICATION_TYP = null;
						} else {

							tmpContent_tDBInput_4 = rs_tDBInput_4.getString(45);
							if (tmpContent_tDBInput_4 != null) {
								if (talendToDBList_tDBInput_4.contains(
										rsmd_tDBInput_4.getColumnTypeName(45).toUpperCase(java.util.Locale.ENGLISH))) {
									row10.PUBLICATION_TYP = FormatterUtils.formatUnwithE(tmpContent_tDBInput_4);
								} else {
									row10.PUBLICATION_TYP = tmpContent_tDBInput_4;
								}
							} else {
								row10.PUBLICATION_TYP = null;
							}
						}
						if (colQtyInRs_tDBInput_4 < 46) {
							row10.FIRST_PRIORITY_DATE = null;
						} else {

							row10.FIRST_PRIORITY_DATE = mssqlGTU_tDBInput_4.getDate(rsmd_tDBInput_4, rs_tDBInput_4, 46);

						}
						if (colQtyInRs_tDBInput_4 < 47) {
							row10.MAIN_OWNER_ADDR_NBR = null;
						} else {

							row10.MAIN_OWNER_ADDR_NBR = rs_tDBInput_4.getBigDecimal(47);
							if (rs_tDBInput_4.wasNull()) {
								row10.MAIN_OWNER_ADDR_NBR = null;
							}
						}
						if (colQtyInRs_tDBInput_4 < 48) {
							row10.MAIN_OWNER_PERSON_NBR = null;
						} else {

							row10.MAIN_OWNER_PERSON_NBR = rs_tDBInput_4.getBigDecimal(48);
							if (rs_tDBInput_4.wasNull()) {
								row10.MAIN_OWNER_PERSON_NBR = null;
							}
						}
						if (colQtyInRs_tDBInput_4 < 49) {
							row10.SERVICE_ADDR_NBR = null;
						} else {

							row10.SERVICE_ADDR_NBR = rs_tDBInput_4.getBigDecimal(49);
							if (rs_tDBInput_4.wasNull()) {
								row10.SERVICE_ADDR_NBR = null;
							}
						}
						if (colQtyInRs_tDBInput_4 < 50) {
							row10.SERVICE_PERSON_NBR = null;
						} else {

							row10.SERVICE_PERSON_NBR = rs_tDBInput_4.getBigDecimal(50);
							if (rs_tDBInput_4.wasNull()) {
								row10.SERVICE_PERSON_NBR = null;
							}
						}
						if (colQtyInRs_tDBInput_4 < 51) {
							row10.NICE_CLASS_TXT = null;
						} else {

							tmpContent_tDBInput_4 = rs_tDBInput_4.getString(51);
							if (tmpContent_tDBInput_4 != null) {
								if (talendToDBList_tDBInput_4.contains(
										rsmd_tDBInput_4.getColumnTypeName(51).toUpperCase(java.util.Locale.ENGLISH))) {
									row10.NICE_CLASS_TXT = FormatterUtils.formatUnwithE(tmpContent_tDBInput_4);
								} else {
									row10.NICE_CLASS_TXT = tmpContent_tDBInput_4;
								}
							} else {
								row10.NICE_CLASS_TXT = null;
							}
						}
						if (colQtyInRs_tDBInput_4 < 52) {
							row10.MARK_CODE = null;
						} else {

							row10.MARK_CODE = rs_tDBInput_4.getBigDecimal(52);
							if (rs_tDBInput_4.wasNull()) {
								row10.MARK_CODE = null;
							}
						}
						if (colQtyInRs_tDBInput_4 < 53) {
							row10.PROC_TYP = null;
						} else {

							tmpContent_tDBInput_4 = rs_tDBInput_4.getString(53);
							if (tmpContent_tDBInput_4 != null) {
								if (talendToDBList_tDBInput_4.contains(
										rsmd_tDBInput_4.getColumnTypeName(53).toUpperCase(java.util.Locale.ENGLISH))) {
									row10.PROC_TYP = FormatterUtils.formatUnwithE(tmpContent_tDBInput_4);
								} else {
									row10.PROC_TYP = tmpContent_tDBInput_4;
								}
							} else {
								row10.PROC_TYP = null;
							}
						}
						if (colQtyInRs_tDBInput_4 < 54) {
							row10.PROC_NBR = null;
						} else {

							row10.PROC_NBR = rs_tDBInput_4.getBigDecimal(54);
							if (rs_tDBInput_4.wasNull()) {
								row10.PROC_NBR = null;
							}
						}
						if (colQtyInRs_tDBInput_4 < 55) {
							row10.STATUS_CODE = null;
						} else {

							tmpContent_tDBInput_4 = rs_tDBInput_4.getString(55);
							if (tmpContent_tDBInput_4 != null) {
								if (talendToDBList_tDBInput_4.contains(
										rsmd_tDBInput_4.getColumnTypeName(55).toUpperCase(java.util.Locale.ENGLISH))) {
									row10.STATUS_CODE = FormatterUtils.formatUnwithE(tmpContent_tDBInput_4);
								} else {
									row10.STATUS_CODE = tmpContent_tDBInput_4;
								}
							} else {
								row10.STATUS_CODE = null;
							}
						}

						/**
						 * [tDBInput_4 begin ] stop
						 */

						/**
						 * [tDBInput_4 main ] start
						 */

						currentComponent = "tDBInput_4";

						tos_count_tDBInput_4++;

						/**
						 * [tDBInput_4 main ] stop
						 */

						/**
						 * [tDBInput_4 process_data_begin ] start
						 */

						currentComponent = "tDBInput_4";

						/**
						 * [tDBInput_4 process_data_begin ] stop
						 */

						/**
						 * [tAdvancedHash_row10 main ] start
						 */

						currentComponent = "tAdvancedHash_row10";

						if (execStat) {
							runStat.updateStatOnConnection(iterateId, 1, 1

									, "row10"

							);
						}

						row10Struct row10_HashRow = new row10Struct();

						row10_HashRow.FILE_SEQ = row10.FILE_SEQ;

						row10_HashRow.FILE_TYPE = row10.FILE_TYPE;

						row10_HashRow.FILE_SERIES = row10.FILE_SERIES;

						row10_HashRow.FILE_NBR = row10.FILE_NBR;

						row10_HashRow.DOC_ORI = row10.DOC_ORI;

						row10_HashRow.DOC_SERIES = row10.DOC_SERIES;

						row10_HashRow.DOC_NBR = row10.DOC_NBR;

						row10_HashRow.IND_IMPORT = row10.IND_IMPORT;

						row10_HashRow.APPLICATION_TYPE = row10.APPLICATION_TYPE;

						row10_HashRow.APPLICATION_SUBTYPE = row10.APPLICATION_SUBTYPE;

						row10_HashRow.LAW_CODE = row10.LAW_CODE;

						row10_HashRow.FILING_DATE = row10.FILING_DATE;

						row10_HashRow.RECEPTION_DATE = row10.RECEPTION_DATE;

						row10_HashRow.PUBLICATION_DATE = row10.PUBLICATION_DATE;

						row10_HashRow.PUBLICATION_NOTES = row10.PUBLICATION_NOTES;

						row10_HashRow.IND_REGISTERED = row10.IND_REGISTERED;

						row10_HashRow.REGISTRATION_TYPE = row10.REGISTRATION_TYPE;

						row10_HashRow.REGISTRATION_SERIES = row10.REGISTRATION_SERIES;

						row10_HashRow.REGISTRATION_NBR = row10.REGISTRATION_NBR;

						row10_HashRow.REGISTRATION_DUP = row10.REGISTRATION_DUP;

						row10_HashRow.REGISTRATION_DATE = row10.REGISTRATION_DATE;

						row10_HashRow.ENTITLEMENT_DATE = row10.ENTITLEMENT_DATE;

						row10_HashRow.EXPIRATION_DATE = row10.EXPIRATION_DATE;

						row10_HashRow.EXHIBITION_DATE = row10.EXHIBITION_DATE;

						row10_HashRow.EXHIBITION_NOTES = row10.EXHIBITION_NOTES;

						row10_HashRow.SIGN_TYPE = row10.SIGN_TYPE;

						row10_HashRow.MARK_NAME = row10.MARK_NAME;

						row10_HashRow.MARK_NAME_LANG2 = row10.MARK_NAME_LANG2;

						row10_HashRow.MARK_TRANSLATION = row10.MARK_TRANSLATION;

						row10_HashRow.MARK_TRANSLATION_LANG2 = row10.MARK_TRANSLATION_LANG2;

						row10_HashRow.MARK_TRANSLITERATION = row10.MARK_TRANSLITERATION;

						row10_HashRow.MARK_TRANSLITERATION_LANG2 = row10.MARK_TRANSLITERATION_LANG2;

						row10_HashRow.SERIES_DESCRIPTION = row10.SERIES_DESCRIPTION;

						row10_HashRow.COLOUR_DESCRIPTION = row10.COLOUR_DESCRIPTION;

						row10_HashRow.COLOUR_DESCR_LANG2 = row10.COLOUR_DESCR_LANG2;

						row10_HashRow.DISCLAIMER = row10.DISCLAIMER;

						row10_HashRow.DISCLAIMER_LANG2 = row10.DISCLAIMER_LANG2;

						row10_HashRow.BY_CONSENT = row10.BY_CONSENT;

						row10_HashRow.REGULATIONS = row10.REGULATIONS;

						row10_HashRow.NOTES = row10.NOTES;

						row10_HashRow.CAPTURE_USER_ID = row10.CAPTURE_USER_ID;

						row10_HashRow.CAPTURE_DATE = row10.CAPTURE_DATE;

						row10_HashRow.PUBLICATION_NBR = row10.PUBLICATION_NBR;

						row10_HashRow.PUBLICATION_SER = row10.PUBLICATION_SER;

						row10_HashRow.PUBLICATION_TYP = row10.PUBLICATION_TYP;

						row10_HashRow.FIRST_PRIORITY_DATE = row10.FIRST_PRIORITY_DATE;

						row10_HashRow.MAIN_OWNER_ADDR_NBR = row10.MAIN_OWNER_ADDR_NBR;

						row10_HashRow.MAIN_OWNER_PERSON_NBR = row10.MAIN_OWNER_PERSON_NBR;

						row10_HashRow.SERVICE_ADDR_NBR = row10.SERVICE_ADDR_NBR;

						row10_HashRow.SERVICE_PERSON_NBR = row10.SERVICE_PERSON_NBR;

						row10_HashRow.NICE_CLASS_TXT = row10.NICE_CLASS_TXT;

						row10_HashRow.MARK_CODE = row10.MARK_CODE;

						row10_HashRow.PROC_TYP = row10.PROC_TYP;

						row10_HashRow.PROC_NBR = row10.PROC_NBR;

						row10_HashRow.STATUS_CODE = row10.STATUS_CODE;

						tHash_Lookup_row10.put(row10_HashRow);

						tos_count_tAdvancedHash_row10++;

						/**
						 * [tAdvancedHash_row10 main ] stop
						 */

						/**
						 * [tAdvancedHash_row10 process_data_begin ] start
						 */

						currentComponent = "tAdvancedHash_row10";

						/**
						 * [tAdvancedHash_row10 process_data_begin ] stop
						 */

						/**
						 * [tAdvancedHash_row10 process_data_end ] start
						 */

						currentComponent = "tAdvancedHash_row10";

						/**
						 * [tAdvancedHash_row10 process_data_end ] stop
						 */

						/**
						 * [tDBInput_4 process_data_end ] start
						 */

						currentComponent = "tDBInput_4";

						/**
						 * [tDBInput_4 process_data_end ] stop
						 */

						/**
						 * [tDBInput_4 end ] start
						 */

						currentComponent = "tDBInput_4";

					}
				} finally {
					if (rs_tDBInput_4 != null) {
						rs_tDBInput_4.close();
					}
					if (stmt_tDBInput_4 != null) {
						stmt_tDBInput_4.close();
					}
					if (conn_tDBInput_4 != null && !conn_tDBInput_4.isClosed()) {

						conn_tDBInput_4.close();

						if ("com.mysql.cj.jdbc.Driver".equals((String) globalMap.get("driverClass_"))
								&& routines.system.BundleUtils.inOSGi()) {
							Class.forName("com.mysql.cj.jdbc.AbandonedConnectionCleanupThread")
									.getMethod("checkedShutdown").invoke(null, (Object[]) null);
						}

					}
				}
				globalMap.put("tDBInput_4_NB_LINE", nb_line_tDBInput_4);

				ok_Hash.put("tDBInput_4", true);
				end_Hash.put("tDBInput_4", System.currentTimeMillis());

				/**
				 * [tDBInput_4 end ] stop
				 */

				/**
				 * [tAdvancedHash_row10 end ] start
				 */

				currentComponent = "tAdvancedHash_row10";

				tHash_Lookup_row10.endPut();

				if (execStat) {
					runStat.updateStat(resourceMap, iterateId, 2, 0, "row10");
				}

				ok_Hash.put("tAdvancedHash_row10", true);
				end_Hash.put("tAdvancedHash_row10", System.currentTimeMillis());

				/**
				 * [tAdvancedHash_row10 end ] stop
				 */

			} // end the resume

		} catch (java.lang.Exception e) {

			TalendException te = new TalendException(e, currentComponent, globalMap);

			throw te;
		} catch (java.lang.Error error) {

			runStat.stopThreadStat();

			throw error;
		} finally {

			try {

				/**
				 * [tDBInput_4 finally ] start
				 */

				currentComponent = "tDBInput_4";

				/**
				 * [tDBInput_4 finally ] stop
				 */

				/**
				 * [tAdvancedHash_row10 finally ] start
				 */

				currentComponent = "tAdvancedHash_row10";

				/**
				 * [tAdvancedHash_row10 finally ] stop
				 */

			} catch (java.lang.Exception e) {
				// ignore
			} catch (java.lang.Error error) {
				// ignore
			}
			resourceMap = null;
		}

		globalMap.put("tDBInput_4_SUBPROCESS_STATE", 1);
	}

	public static class row13Struct implements routines.system.IPersistableComparableLookupRow<row13Struct> {
		final static byte[] commonByteArrayLock_WIPO_PROJECTS_G2b_Mig_TM = new byte[0];
		static byte[] commonByteArray_WIPO_PROJECTS_G2b_Mig_TM = new byte[0];
		protected static final int DEFAULT_HASHCODE = 1;
		protected static final int PRIME = 31;
		protected int hashCode = DEFAULT_HASHCODE;
		public boolean hashCodeDirty = true;

		public String loopKey;

		public String FILE_SEQ;

		public String getFILE_SEQ() {
			return this.FILE_SEQ;
		}

		public String FILE_TYPE;

		public String getFILE_TYPE() {
			return this.FILE_TYPE;
		}

		public BigDecimal FILE_SERIES;

		public BigDecimal getFILE_SERIES() {
			return this.FILE_SERIES;
		}

		public BigDecimal FILE_NBR;

		public BigDecimal getFILE_NBR() {
			return this.FILE_NBR;
		}

		public String DOC_ORI;

		public String getDOC_ORI() {
			return this.DOC_ORI;
		}

		public BigDecimal DOC_SERIES;

		public BigDecimal getDOC_SERIES() {
			return this.DOC_SERIES;
		}

		public BigDecimal DOC_NBR;

		public BigDecimal getDOC_NBR() {
			return this.DOC_NBR;
		}

		public BigDecimal IND_IMPORT;

		public BigDecimal getIND_IMPORT() {
			return this.IND_IMPORT;
		}

		public String APPLICATION_TYPE;

		public String getAPPLICATION_TYPE() {
			return this.APPLICATION_TYPE;
		}

		public String APPLICATION_SUBTYPE;

		public String getAPPLICATION_SUBTYPE() {
			return this.APPLICATION_SUBTYPE;
		}

		public BigDecimal LAW_CODE;

		public BigDecimal getLAW_CODE() {
			return this.LAW_CODE;
		}

		public java.util.Date FILING_DATE;

		public java.util.Date getFILING_DATE() {
			return this.FILING_DATE;
		}

		public java.util.Date RECEPTION_DATE;

		public java.util.Date getRECEPTION_DATE() {
			return this.RECEPTION_DATE;
		}

		public java.util.Date PUBLICATION_DATE;

		public java.util.Date getPUBLICATION_DATE() {
			return this.PUBLICATION_DATE;
		}

		public String PUBLICATION_NOTES;

		public String getPUBLICATION_NOTES() {
			return this.PUBLICATION_NOTES;
		}

		public BigDecimal IND_REGISTERED;

		public BigDecimal getIND_REGISTERED() {
			return this.IND_REGISTERED;
		}

		public String REGISTRATION_TYPE;

		public String getREGISTRATION_TYPE() {
			return this.REGISTRATION_TYPE;
		}

		public BigDecimal REGISTRATION_SERIES;

		public BigDecimal getREGISTRATION_SERIES() {
			return this.REGISTRATION_SERIES;
		}

		public BigDecimal REGISTRATION_NBR;

		public BigDecimal getREGISTRATION_NBR() {
			return this.REGISTRATION_NBR;
		}

		public String REGISTRATION_DUP;

		public String getREGISTRATION_DUP() {
			return this.REGISTRATION_DUP;
		}

		public java.util.Date REGISTRATION_DATE;

		public java.util.Date getREGISTRATION_DATE() {
			return this.REGISTRATION_DATE;
		}

		public java.util.Date ENTITLEMENT_DATE;

		public java.util.Date getENTITLEMENT_DATE() {
			return this.ENTITLEMENT_DATE;
		}

		public java.util.Date EXPIRATION_DATE;

		public java.util.Date getEXPIRATION_DATE() {
			return this.EXPIRATION_DATE;
		}

		public java.util.Date EXHIBITION_DATE;

		public java.util.Date getEXHIBITION_DATE() {
			return this.EXHIBITION_DATE;
		}

		public String EXHIBITION_NOTES;

		public String getEXHIBITION_NOTES() {
			return this.EXHIBITION_NOTES;
		}

		public String SIGN_TYPE;

		public String getSIGN_TYPE() {
			return this.SIGN_TYPE;
		}

		public String MARK_NAME;

		public String getMARK_NAME() {
			return this.MARK_NAME;
		}

		public String MARK_NAME_LANG2;

		public String getMARK_NAME_LANG2() {
			return this.MARK_NAME_LANG2;
		}

		public String MARK_TRANSLATION;

		public String getMARK_TRANSLATION() {
			return this.MARK_TRANSLATION;
		}

		public String MARK_TRANSLATION_LANG2;

		public String getMARK_TRANSLATION_LANG2() {
			return this.MARK_TRANSLATION_LANG2;
		}

		public String MARK_TRANSLITERATION;

		public String getMARK_TRANSLITERATION() {
			return this.MARK_TRANSLITERATION;
		}

		public String MARK_TRANSLITERATION_LANG2;

		public String getMARK_TRANSLITERATION_LANG2() {
			return this.MARK_TRANSLITERATION_LANG2;
		}

		public String SERIES_DESCRIPTION;

		public String getSERIES_DESCRIPTION() {
			return this.SERIES_DESCRIPTION;
		}

		public String COLOUR_DESCRIPTION;

		public String getCOLOUR_DESCRIPTION() {
			return this.COLOUR_DESCRIPTION;
		}

		public String COLOUR_DESCR_LANG2;

		public String getCOLOUR_DESCR_LANG2() {
			return this.COLOUR_DESCR_LANG2;
		}

		public String DISCLAIMER;

		public String getDISCLAIMER() {
			return this.DISCLAIMER;
		}

		public String DISCLAIMER_LANG2;

		public String getDISCLAIMER_LANG2() {
			return this.DISCLAIMER_LANG2;
		}

		public String BY_CONSENT;

		public String getBY_CONSENT() {
			return this.BY_CONSENT;
		}

		public String REGULATIONS;

		public String getREGULATIONS() {
			return this.REGULATIONS;
		}

		public String NOTES;

		public String getNOTES() {
			return this.NOTES;
		}

		public BigDecimal CAPTURE_USER_ID;

		public BigDecimal getCAPTURE_USER_ID() {
			return this.CAPTURE_USER_ID;
		}

		public java.util.Date CAPTURE_DATE;

		public java.util.Date getCAPTURE_DATE() {
			return this.CAPTURE_DATE;
		}

		public BigDecimal PUBLICATION_NBR;

		public BigDecimal getPUBLICATION_NBR() {
			return this.PUBLICATION_NBR;
		}

		public String PUBLICATION_SER;

		public String getPUBLICATION_SER() {
			return this.PUBLICATION_SER;
		}

		public String PUBLICATION_TYP;

		public String getPUBLICATION_TYP() {
			return this.PUBLICATION_TYP;
		}

		public java.util.Date FIRST_PRIORITY_DATE;

		public java.util.Date getFIRST_PRIORITY_DATE() {
			return this.FIRST_PRIORITY_DATE;
		}

		public BigDecimal MAIN_OWNER_ADDR_NBR;

		public BigDecimal getMAIN_OWNER_ADDR_NBR() {
			return this.MAIN_OWNER_ADDR_NBR;
		}

		public BigDecimal MAIN_OWNER_PERSON_NBR;

		public BigDecimal getMAIN_OWNER_PERSON_NBR() {
			return this.MAIN_OWNER_PERSON_NBR;
		}

		public BigDecimal SERVICE_ADDR_NBR;

		public BigDecimal getSERVICE_ADDR_NBR() {
			return this.SERVICE_ADDR_NBR;
		}

		public BigDecimal SERVICE_PERSON_NBR;

		public BigDecimal getSERVICE_PERSON_NBR() {
			return this.SERVICE_PERSON_NBR;
		}

		public String NICE_CLASS_TXT;

		public String getNICE_CLASS_TXT() {
			return this.NICE_CLASS_TXT;
		}

		public BigDecimal MARK_CODE;

		public BigDecimal getMARK_CODE() {
			return this.MARK_CODE;
		}

		public String PROC_TYP;

		public String getPROC_TYP() {
			return this.PROC_TYP;
		}

		public BigDecimal PROC_NBR;

		public BigDecimal getPROC_NBR() {
			return this.PROC_NBR;
		}

		public String STATUS_CODE;

		public String getSTATUS_CODE() {
			return this.STATUS_CODE;
		}

		@Override
		public int hashCode() {
			if (this.hashCodeDirty) {
				final int prime = PRIME;
				int result = DEFAULT_HASHCODE;

				result = prime * result + ((this.FILE_SEQ == null) ? 0 : this.FILE_SEQ.hashCode());

				result = prime * result + ((this.FILE_TYPE == null) ? 0 : this.FILE_TYPE.hashCode());

				result = prime * result
						+ ((this.FILE_SERIES == null) ? 0 : new Double(this.FILE_SERIES.doubleValue()).hashCode());

				result = prime * result
						+ ((this.FILE_NBR == null) ? 0 : new Double(this.FILE_NBR.doubleValue()).hashCode());

				this.hashCode = result;
				this.hashCodeDirty = false;
			}
			return this.hashCode;
		}

		@Override
		public boolean equals(Object obj) {
			if (this == obj)
				return true;
			if (obj == null)
				return false;
			if (getClass() != obj.getClass())
				return false;
			final row13Struct other = (row13Struct) obj;

			if (this.FILE_SEQ == null) {
				if (other.FILE_SEQ != null)
					return false;

			} else if (!this.FILE_SEQ.equals(other.FILE_SEQ))

				return false;

			if (this.FILE_TYPE == null) {
				if (other.FILE_TYPE != null)
					return false;

			} else if (!this.FILE_TYPE.equals(other.FILE_TYPE))

				return false;

			if (this.FILE_SERIES == null) {
				if (other.FILE_SERIES != null)
					return false;

			} else if ((other.FILE_SERIES == null) || (this.FILE_SERIES.compareTo(other.FILE_SERIES) != 0))

				return false;

			if (this.FILE_NBR == null) {
				if (other.FILE_NBR != null)
					return false;

			} else if ((other.FILE_NBR == null) || (this.FILE_NBR.compareTo(other.FILE_NBR) != 0))

				return false;

			return true;
		}

		public void copyDataTo(row13Struct other) {

			other.FILE_SEQ = this.FILE_SEQ;
			other.FILE_TYPE = this.FILE_TYPE;
			other.FILE_SERIES = this.FILE_SERIES;
			other.FILE_NBR = this.FILE_NBR;
			other.DOC_ORI = this.DOC_ORI;
			other.DOC_SERIES = this.DOC_SERIES;
			other.DOC_NBR = this.DOC_NBR;
			other.IND_IMPORT = this.IND_IMPORT;
			other.APPLICATION_TYPE = this.APPLICATION_TYPE;
			other.APPLICATION_SUBTYPE = this.APPLICATION_SUBTYPE;
			other.LAW_CODE = this.LAW_CODE;
			other.FILING_DATE = this.FILING_DATE;
			other.RECEPTION_DATE = this.RECEPTION_DATE;
			other.PUBLICATION_DATE = this.PUBLICATION_DATE;
			other.PUBLICATION_NOTES = this.PUBLICATION_NOTES;
			other.IND_REGISTERED = this.IND_REGISTERED;
			other.REGISTRATION_TYPE = this.REGISTRATION_TYPE;
			other.REGISTRATION_SERIES = this.REGISTRATION_SERIES;
			other.REGISTRATION_NBR = this.REGISTRATION_NBR;
			other.REGISTRATION_DUP = this.REGISTRATION_DUP;
			other.REGISTRATION_DATE = this.REGISTRATION_DATE;
			other.ENTITLEMENT_DATE = this.ENTITLEMENT_DATE;
			other.EXPIRATION_DATE = this.EXPIRATION_DATE;
			other.EXHIBITION_DATE = this.EXHIBITION_DATE;
			other.EXHIBITION_NOTES = this.EXHIBITION_NOTES;
			other.SIGN_TYPE = this.SIGN_TYPE;
			other.MARK_NAME = this.MARK_NAME;
			other.MARK_NAME_LANG2 = this.MARK_NAME_LANG2;
			other.MARK_TRANSLATION = this.MARK_TRANSLATION;
			other.MARK_TRANSLATION_LANG2 = this.MARK_TRANSLATION_LANG2;
			other.MARK_TRANSLITERATION = this.MARK_TRANSLITERATION;
			other.MARK_TRANSLITERATION_LANG2 = this.MARK_TRANSLITERATION_LANG2;
			other.SERIES_DESCRIPTION = this.SERIES_DESCRIPTION;
			other.COLOUR_DESCRIPTION = this.COLOUR_DESCRIPTION;
			other.COLOUR_DESCR_LANG2 = this.COLOUR_DESCR_LANG2;
			other.DISCLAIMER = this.DISCLAIMER;
			other.DISCLAIMER_LANG2 = this.DISCLAIMER_LANG2;
			other.BY_CONSENT = this.BY_CONSENT;
			other.REGULATIONS = this.REGULATIONS;
			other.NOTES = this.NOTES;
			other.CAPTURE_USER_ID = this.CAPTURE_USER_ID;
			other.CAPTURE_DATE = this.CAPTURE_DATE;
			other.PUBLICATION_NBR = this.PUBLICATION_NBR;
			other.PUBLICATION_SER = this.PUBLICATION_SER;
			other.PUBLICATION_TYP = this.PUBLICATION_TYP;
			other.FIRST_PRIORITY_DATE = this.FIRST_PRIORITY_DATE;
			other.MAIN_OWNER_ADDR_NBR = this.MAIN_OWNER_ADDR_NBR;
			other.MAIN_OWNER_PERSON_NBR = this.MAIN_OWNER_PERSON_NBR;
			other.SERVICE_ADDR_NBR = this.SERVICE_ADDR_NBR;
			other.SERVICE_PERSON_NBR = this.SERVICE_PERSON_NBR;
			other.NICE_CLASS_TXT = this.NICE_CLASS_TXT;
			other.MARK_CODE = this.MARK_CODE;
			other.PROC_TYP = this.PROC_TYP;
			other.PROC_NBR = this.PROC_NBR;
			other.STATUS_CODE = this.STATUS_CODE;

		}

		public void copyKeysDataTo(row13Struct other) {

			other.FILE_SEQ = this.FILE_SEQ;
			other.FILE_TYPE = this.FILE_TYPE;
			other.FILE_SERIES = this.FILE_SERIES;
			other.FILE_NBR = this.FILE_NBR;

		}

		private String readString(ObjectInputStream dis) throws IOException {
			String strReturn = null;
			int length = 0;
			length = dis.readInt();
			if (length == -1) {
				strReturn = null;
			} else {
				if (length > commonByteArray_WIPO_PROJECTS_G2b_Mig_TM.length) {
					if (length < 1024 && commonByteArray_WIPO_PROJECTS_G2b_Mig_TM.length == 0) {
						commonByteArray_WIPO_PROJECTS_G2b_Mig_TM = new byte[1024];
					} else {
						commonByteArray_WIPO_PROJECTS_G2b_Mig_TM = new byte[2 * length];
					}
				}
				dis.readFully(commonByteArray_WIPO_PROJECTS_G2b_Mig_TM, 0, length);
				strReturn = new String(commonByteArray_WIPO_PROJECTS_G2b_Mig_TM, 0, length, utf8Charset);
			}
			return strReturn;
		}

		private void writeString(String str, ObjectOutputStream dos) throws IOException {
			if (str == null) {
				dos.writeInt(-1);
			} else {
				byte[] byteArray = str.getBytes(utf8Charset);
				dos.writeInt(byteArray.length);
				dos.write(byteArray);
			}
		}

		private String readString(DataInputStream dis, ObjectInputStream ois) throws IOException {
			String strReturn = null;
			int length = 0;
			length = dis.readInt();
			if (length == -1) {
				strReturn = null;
			} else {
				byte[] byteArray = new byte[length];
				dis.read(byteArray);
				strReturn = new String(byteArray, utf8Charset);
			}
			return strReturn;
		}

		private void writeString(String str, DataOutputStream dos, ObjectOutputStream oos) throws IOException {
			if (str == null) {
				dos.writeInt(-1);
			} else {
				byte[] byteArray = str.getBytes(utf8Charset);
				dos.writeInt(byteArray.length);
				dos.write(byteArray);
			}
		}

		private java.util.Date readDate(DataInputStream dis, ObjectInputStream ois) throws IOException {
			java.util.Date dateReturn = null;
			int length = 0;
			length = dis.readByte();
			if (length == -1) {
				dateReturn = null;
			} else {
				dateReturn = new Date(dis.readLong());
			}
			return dateReturn;
		}

		private void writeDate(java.util.Date date1, DataOutputStream dos, ObjectOutputStream oos) throws IOException {
			if (date1 == null) {
				dos.writeByte(-1);
			} else {
				dos.writeByte(0);
				dos.writeLong(date1.getTime());
			}
		}

		public void readKeysData(ObjectInputStream dis) {

			synchronized (commonByteArrayLock_WIPO_PROJECTS_G2b_Mig_TM) {

				try {

					int length = 0;

					this.FILE_SEQ = readString(dis);

					this.FILE_TYPE = readString(dis);

					this.FILE_SERIES = (BigDecimal) dis.readObject();

					this.FILE_NBR = (BigDecimal) dis.readObject();

				} catch (IOException e) {
					throw new RuntimeException(e);

				} catch (ClassNotFoundException eCNFE) {
					throw new RuntimeException(eCNFE);

				}

			}

		}

		public void writeKeysData(ObjectOutputStream dos) {
			try {

				// String

				writeString(this.FILE_SEQ, dos);

				// String

				writeString(this.FILE_TYPE, dos);

				// BigDecimal

				dos.writeObject(this.FILE_SERIES);

				// BigDecimal

				dos.writeObject(this.FILE_NBR);

			} catch (IOException e) {
				throw new RuntimeException(e);
			}

		}

		/**
		 * Fill Values data by reading ObjectInputStream.
		 */
		public void readValuesData(DataInputStream dis, ObjectInputStream ois) {
			try {

				int length = 0;

				this.DOC_ORI = readString(dis, ois);

				this.DOC_SERIES = (BigDecimal) ois.readObject();

				this.DOC_NBR = (BigDecimal) ois.readObject();

				this.IND_IMPORT = (BigDecimal) ois.readObject();

				this.APPLICATION_TYPE = readString(dis, ois);

				this.APPLICATION_SUBTYPE = readString(dis, ois);

				this.LAW_CODE = (BigDecimal) ois.readObject();

				this.FILING_DATE = readDate(dis, ois);

				this.RECEPTION_DATE = readDate(dis, ois);

				this.PUBLICATION_DATE = readDate(dis, ois);

				this.PUBLICATION_NOTES = readString(dis, ois);

				this.IND_REGISTERED = (BigDecimal) ois.readObject();

				this.REGISTRATION_TYPE = readString(dis, ois);

				this.REGISTRATION_SERIES = (BigDecimal) ois.readObject();

				this.REGISTRATION_NBR = (BigDecimal) ois.readObject();

				this.REGISTRATION_DUP = readString(dis, ois);

				this.REGISTRATION_DATE = readDate(dis, ois);

				this.ENTITLEMENT_DATE = readDate(dis, ois);

				this.EXPIRATION_DATE = readDate(dis, ois);

				this.EXHIBITION_DATE = readDate(dis, ois);

				this.EXHIBITION_NOTES = readString(dis, ois);

				this.SIGN_TYPE = readString(dis, ois);

				this.MARK_NAME = readString(dis, ois);

				this.MARK_NAME_LANG2 = readString(dis, ois);

				this.MARK_TRANSLATION = readString(dis, ois);

				this.MARK_TRANSLATION_LANG2 = readString(dis, ois);

				this.MARK_TRANSLITERATION = readString(dis, ois);

				this.MARK_TRANSLITERATION_LANG2 = readString(dis, ois);

				this.SERIES_DESCRIPTION = readString(dis, ois);

				this.COLOUR_DESCRIPTION = readString(dis, ois);

				this.COLOUR_DESCR_LANG2 = readString(dis, ois);

				this.DISCLAIMER = readString(dis, ois);

				this.DISCLAIMER_LANG2 = readString(dis, ois);

				this.BY_CONSENT = readString(dis, ois);

				this.REGULATIONS = readString(dis, ois);

				this.NOTES = readString(dis, ois);

				this.CAPTURE_USER_ID = (BigDecimal) ois.readObject();

				this.CAPTURE_DATE = readDate(dis, ois);

				this.PUBLICATION_NBR = (BigDecimal) ois.readObject();

				this.PUBLICATION_SER = readString(dis, ois);

				this.PUBLICATION_TYP = readString(dis, ois);

				this.FIRST_PRIORITY_DATE = readDate(dis, ois);

				this.MAIN_OWNER_ADDR_NBR = (BigDecimal) ois.readObject();

				this.MAIN_OWNER_PERSON_NBR = (BigDecimal) ois.readObject();

				this.SERVICE_ADDR_NBR = (BigDecimal) ois.readObject();

				this.SERVICE_PERSON_NBR = (BigDecimal) ois.readObject();

				this.NICE_CLASS_TXT = readString(dis, ois);

				this.MARK_CODE = (BigDecimal) ois.readObject();

				this.PROC_TYP = readString(dis, ois);

				this.PROC_NBR = (BigDecimal) ois.readObject();

				this.STATUS_CODE = readString(dis, ois);

			} catch (IOException e) {
				throw new RuntimeException(e);

			} catch (ClassNotFoundException eCNFE) {
				throw new RuntimeException(eCNFE);

			}

		}

		/**
		 * Return a byte array which represents Values data.
		 */
		public void writeValuesData(DataOutputStream dos, ObjectOutputStream oos) {
			try {

				writeString(this.DOC_ORI, dos, oos);

				oos.writeObject(this.DOC_SERIES);

				oos.writeObject(this.DOC_NBR);

				oos.writeObject(this.IND_IMPORT);

				writeString(this.APPLICATION_TYPE, dos, oos);

				writeString(this.APPLICATION_SUBTYPE, dos, oos);

				oos.writeObject(this.LAW_CODE);

				writeDate(this.FILING_DATE, dos, oos);

				writeDate(this.RECEPTION_DATE, dos, oos);

				writeDate(this.PUBLICATION_DATE, dos, oos);

				writeString(this.PUBLICATION_NOTES, dos, oos);

				oos.writeObject(this.IND_REGISTERED);

				writeString(this.REGISTRATION_TYPE, dos, oos);

				oos.writeObject(this.REGISTRATION_SERIES);

				oos.writeObject(this.REGISTRATION_NBR);

				writeString(this.REGISTRATION_DUP, dos, oos);

				writeDate(this.REGISTRATION_DATE, dos, oos);

				writeDate(this.ENTITLEMENT_DATE, dos, oos);

				writeDate(this.EXPIRATION_DATE, dos, oos);

				writeDate(this.EXHIBITION_DATE, dos, oos);

				writeString(this.EXHIBITION_NOTES, dos, oos);

				writeString(this.SIGN_TYPE, dos, oos);

				writeString(this.MARK_NAME, dos, oos);

				writeString(this.MARK_NAME_LANG2, dos, oos);

				writeString(this.MARK_TRANSLATION, dos, oos);

				writeString(this.MARK_TRANSLATION_LANG2, dos, oos);

				writeString(this.MARK_TRANSLITERATION, dos, oos);

				writeString(this.MARK_TRANSLITERATION_LANG2, dos, oos);

				writeString(this.SERIES_DESCRIPTION, dos, oos);

				writeString(this.COLOUR_DESCRIPTION, dos, oos);

				writeString(this.COLOUR_DESCR_LANG2, dos, oos);

				writeString(this.DISCLAIMER, dos, oos);

				writeString(this.DISCLAIMER_LANG2, dos, oos);

				writeString(this.BY_CONSENT, dos, oos);

				writeString(this.REGULATIONS, dos, oos);

				writeString(this.NOTES, dos, oos);

				oos.writeObject(this.CAPTURE_USER_ID);

				writeDate(this.CAPTURE_DATE, dos, oos);

				oos.writeObject(this.PUBLICATION_NBR);

				writeString(this.PUBLICATION_SER, dos, oos);

				writeString(this.PUBLICATION_TYP, dos, oos);

				writeDate(this.FIRST_PRIORITY_DATE, dos, oos);

				oos.writeObject(this.MAIN_OWNER_ADDR_NBR);

				oos.writeObject(this.MAIN_OWNER_PERSON_NBR);

				oos.writeObject(this.SERVICE_ADDR_NBR);

				oos.writeObject(this.SERVICE_PERSON_NBR);

				writeString(this.NICE_CLASS_TXT, dos, oos);

				oos.writeObject(this.MARK_CODE);

				writeString(this.PROC_TYP, dos, oos);

				oos.writeObject(this.PROC_NBR);

				writeString(this.STATUS_CODE, dos, oos);

			} catch (IOException e) {
				throw new RuntimeException(e);
			}

		}

		public String toString() {

			StringBuilder sb = new StringBuilder();
			sb.append(super.toString());
			sb.append("[");
			sb.append("FILE_SEQ=" + FILE_SEQ);
			sb.append(",FILE_TYPE=" + FILE_TYPE);
			sb.append(",FILE_SERIES=" + String.valueOf(FILE_SERIES));
			sb.append(",FILE_NBR=" + String.valueOf(FILE_NBR));
			sb.append(",DOC_ORI=" + DOC_ORI);
			sb.append(",DOC_SERIES=" + String.valueOf(DOC_SERIES));
			sb.append(",DOC_NBR=" + String.valueOf(DOC_NBR));
			sb.append(",IND_IMPORT=" + String.valueOf(IND_IMPORT));
			sb.append(",APPLICATION_TYPE=" + APPLICATION_TYPE);
			sb.append(",APPLICATION_SUBTYPE=" + APPLICATION_SUBTYPE);
			sb.append(",LAW_CODE=" + String.valueOf(LAW_CODE));
			sb.append(",FILING_DATE=" + String.valueOf(FILING_DATE));
			sb.append(",RECEPTION_DATE=" + String.valueOf(RECEPTION_DATE));
			sb.append(",PUBLICATION_DATE=" + String.valueOf(PUBLICATION_DATE));
			sb.append(",PUBLICATION_NOTES=" + PUBLICATION_NOTES);
			sb.append(",IND_REGISTERED=" + String.valueOf(IND_REGISTERED));
			sb.append(",REGISTRATION_TYPE=" + REGISTRATION_TYPE);
			sb.append(",REGISTRATION_SERIES=" + String.valueOf(REGISTRATION_SERIES));
			sb.append(",REGISTRATION_NBR=" + String.valueOf(REGISTRATION_NBR));
			sb.append(",REGISTRATION_DUP=" + REGISTRATION_DUP);
			sb.append(",REGISTRATION_DATE=" + String.valueOf(REGISTRATION_DATE));
			sb.append(",ENTITLEMENT_DATE=" + String.valueOf(ENTITLEMENT_DATE));
			sb.append(",EXPIRATION_DATE=" + String.valueOf(EXPIRATION_DATE));
			sb.append(",EXHIBITION_DATE=" + String.valueOf(EXHIBITION_DATE));
			sb.append(",EXHIBITION_NOTES=" + EXHIBITION_NOTES);
			sb.append(",SIGN_TYPE=" + SIGN_TYPE);
			sb.append(",MARK_NAME=" + MARK_NAME);
			sb.append(",MARK_NAME_LANG2=" + MARK_NAME_LANG2);
			sb.append(",MARK_TRANSLATION=" + MARK_TRANSLATION);
			sb.append(",MARK_TRANSLATION_LANG2=" + MARK_TRANSLATION_LANG2);
			sb.append(",MARK_TRANSLITERATION=" + MARK_TRANSLITERATION);
			sb.append(",MARK_TRANSLITERATION_LANG2=" + MARK_TRANSLITERATION_LANG2);
			sb.append(",SERIES_DESCRIPTION=" + SERIES_DESCRIPTION);
			sb.append(",COLOUR_DESCRIPTION=" + COLOUR_DESCRIPTION);
			sb.append(",COLOUR_DESCR_LANG2=" + COLOUR_DESCR_LANG2);
			sb.append(",DISCLAIMER=" + DISCLAIMER);
			sb.append(",DISCLAIMER_LANG2=" + DISCLAIMER_LANG2);
			sb.append(",BY_CONSENT=" + BY_CONSENT);
			sb.append(",REGULATIONS=" + REGULATIONS);
			sb.append(",NOTES=" + NOTES);
			sb.append(",CAPTURE_USER_ID=" + String.valueOf(CAPTURE_USER_ID));
			sb.append(",CAPTURE_DATE=" + String.valueOf(CAPTURE_DATE));
			sb.append(",PUBLICATION_NBR=" + String.valueOf(PUBLICATION_NBR));
			sb.append(",PUBLICATION_SER=" + PUBLICATION_SER);
			sb.append(",PUBLICATION_TYP=" + PUBLICATION_TYP);
			sb.append(",FIRST_PRIORITY_DATE=" + String.valueOf(FIRST_PRIORITY_DATE));
			sb.append(",MAIN_OWNER_ADDR_NBR=" + String.valueOf(MAIN_OWNER_ADDR_NBR));
			sb.append(",MAIN_OWNER_PERSON_NBR=" + String.valueOf(MAIN_OWNER_PERSON_NBR));
			sb.append(",SERVICE_ADDR_NBR=" + String.valueOf(SERVICE_ADDR_NBR));
			sb.append(",SERVICE_PERSON_NBR=" + String.valueOf(SERVICE_PERSON_NBR));
			sb.append(",NICE_CLASS_TXT=" + NICE_CLASS_TXT);
			sb.append(",MARK_CODE=" + String.valueOf(MARK_CODE));
			sb.append(",PROC_TYP=" + PROC_TYP);
			sb.append(",PROC_NBR=" + String.valueOf(PROC_NBR));
			sb.append(",STATUS_CODE=" + STATUS_CODE);
			sb.append("]");

			return sb.toString();
		}

		/**
		 * Compare keys
		 */
		public int compareTo(row13Struct other) {

			int returnValue = -1;

			returnValue = checkNullsAndCompare(this.FILE_SEQ, other.FILE_SEQ);
			if (returnValue != 0) {
				return returnValue;
			}

			returnValue = checkNullsAndCompare(this.FILE_TYPE, other.FILE_TYPE);
			if (returnValue != 0) {
				return returnValue;
			}

			returnValue = checkNullsAndCompare(this.FILE_SERIES, other.FILE_SERIES);
			if (returnValue != 0) {
				return returnValue;
			}

			returnValue = checkNullsAndCompare(this.FILE_NBR, other.FILE_NBR);
			if (returnValue != 0) {
				return returnValue;
			}

			return returnValue;
		}

		private int checkNullsAndCompare(Object object1, Object object2) {
			int returnValue = 0;
			if (object1 instanceof Comparable && object2 instanceof Comparable) {
				returnValue = ((Comparable) object1).compareTo(object2);
			} else if (object1 != null && object2 != null) {
				returnValue = compareStrings(object1.toString(), object2.toString());
			} else if (object1 == null && object2 != null) {
				returnValue = 1;
			} else if (object1 != null && object2 == null) {
				returnValue = -1;
			} else {
				returnValue = 0;
			}

			return returnValue;
		}

		private int compareStrings(String string1, String string2) {
			return string1.compareTo(string2);
		}

	}

	public void tDBInput_7Process(final java.util.Map<String, Object> globalMap) throws TalendException {
		globalMap.put("tDBInput_7_SUBPROCESS_STATE", 0);

		final boolean execStat = this.execStat;

		String iterateId = "";

		String currentComponent = "";
		java.util.Map<String, Object> resourceMap = new java.util.HashMap<String, Object>();

		try {
			// TDI-39566 avoid throwing an useless Exception
			boolean resumeIt = true;
			if (globalResumeTicket == false && resumeEntryMethodName != null) {
				String currentMethodName = new java.lang.Exception().getStackTrace()[0].getMethodName();
				resumeIt = resumeEntryMethodName.equals(currentMethodName);
			}
			if (resumeIt || globalResumeTicket) { // start the resume
				globalResumeTicket = true;

				row13Struct row13 = new row13Struct();

				/**
				 * [tAdvancedHash_row13 begin ] start
				 */

				ok_Hash.put("tAdvancedHash_row13", false);
				start_Hash.put("tAdvancedHash_row13", System.currentTimeMillis());

				currentComponent = "tAdvancedHash_row13";

				if (execStat) {
					runStat.updateStatOnConnection(resourceMap, iterateId, 0, 0, "row13");
				}

				int tos_count_tAdvancedHash_row13 = 0;

				// connection name:row13
				// source node:tDBInput_7 - inputs:(after_tDBInput_15) outputs:(row13,row13) |
				// target node:tAdvancedHash_row13 - inputs:(row13) outputs:()
				// linked node: tMap_5 - inputs:(row12,row13) outputs:(wrk_nice)

				org.talend.designer.components.lookup.common.ICommonLookup.MATCHING_MODE matchingModeEnum_row13 = org.talend.designer.components.lookup.common.ICommonLookup.MATCHING_MODE.ALL_MATCHES;

				org.talend.designer.components.lookup.memory.AdvancedMemoryLookup<row13Struct> tHash_Lookup_row13 = org.talend.designer.components.lookup.memory.AdvancedMemoryLookup
						.<row13Struct>getLookup(matchingModeEnum_row13);

				globalMap.put("tHash_Lookup_row13", tHash_Lookup_row13);

				/**
				 * [tAdvancedHash_row13 begin ] stop
				 */

				/**
				 * [tDBInput_7 begin ] start
				 */

				ok_Hash.put("tDBInput_7", false);
				start_Hash.put("tDBInput_7", System.currentTimeMillis());

				currentComponent = "tDBInput_7";

				int tos_count_tDBInput_7 = 0;

				org.talend.designer.components.util.mssql.MSSqlGenerateTimestampUtil mssqlGTU_tDBInput_7 = org.talend.designer.components.util.mssql.MSSqlUtilFactory
						.getMSSqlGenerateTimestampUtil();

				java.util.List<String> talendToDBList_tDBInput_7 = new java.util.ArrayList();
				String[] talendToDBArray_tDBInput_7 = new String[] { "FLOAT", "NUMERIC", "NUMERIC IDENTITY", "DECIMAL",
						"DECIMAL IDENTITY", "REAL" };
				java.util.Collections.addAll(talendToDBList_tDBInput_7, talendToDBArray_tDBInput_7);
				int nb_line_tDBInput_7 = 0;
				java.sql.Connection conn_tDBInput_7 = null;
				String driverClass_tDBInput_7 = "net.sourceforge.jtds.jdbc.Driver";
				java.lang.Class jdbcclazz_tDBInput_7 = java.lang.Class.forName(driverClass_tDBInput_7);
				String dbUser_tDBInput_7 = "ADMIN";

				final String decryptedPassword_tDBInput_7 = routines.system.PasswordEncryptUtil
						.decryptPassword("enc:routine.encryption.key.v1:TOERrZPDfCoTES6xjgM3xF1aoQFqparbQo8yx74v9fE+");

				String dbPwd_tDBInput_7 = decryptedPassword_tDBInput_7;

				String port_tDBInput_7 = "1433";
				String dbname_tDBInput_7 = "MARCAS_PY";
				String url_tDBInput_7 = "jdbc:jtds:sqlserver://" + "localhost";
				if (!"".equals(port_tDBInput_7)) {
					url_tDBInput_7 += ":" + "1433";
				}
				if (!"".equals(dbname_tDBInput_7)) {
					url_tDBInput_7 += "//" + "MARCAS_PY";
				}
				url_tDBInput_7 += ";appName=" + projectName + ";" + "";
				String dbschema_tDBInput_7 = "ADMIN";

				conn_tDBInput_7 = java.sql.DriverManager.getConnection(url_tDBInput_7, dbUser_tDBInput_7,
						dbPwd_tDBInput_7);

				java.sql.Statement stmt_tDBInput_7 = conn_tDBInput_7.createStatement();

				String dbquery_tDBInput_7 = "SELECT ADMIN.WRK_MARK.FILE_SEQ,\n		ADMIN.WRK_MARK.FILE_TYPE,\n		ADMIN.WRK_MARK.FILE_SERIES,\n		ADMIN.WRK_MARK.FILE_NBR,\n		"
						+ "ADMIN.WRK_MARK.DOC_ORI,\n		ADMIN.WRK_MARK.DOC_SERIES,\n		ADMIN.WRK_MARK.DOC_NBR,\n		ADMIN.WRK_MARK.IND_IMPORT,\n		ADMIN.WRK_"
						+ "MARK.APPLICATION_TYPE,\n		ADMIN.WRK_MARK.APPLICATION_SUBTYPE,\n		ADMIN.WRK_MARK.LAW_CODE,\n		ADMIN.WRK_MARK.FILING_DATE,\n		"
						+ "ADMIN.WRK_MARK.RECEPTION_DATE,\n		ADMIN.WRK_MARK.PUBLICATION_DATE,\n		ADMIN.WRK_MARK.PUBLICATION_NOTES,\n		ADMIN.WRK_MARK.I"
						+ "ND_REGISTERED,\n		ADMIN.WRK_MARK.REGISTRATION_TYPE,\n		ADMIN.WRK_MARK.REGISTRATION_SERIES,\n		ADMIN.WRK_MARK.REGISTRATION_N"
						+ "BR,\n		ADMIN.WRK_MARK.REGISTRATION_DUP,\n		ADMIN.WRK_MARK.REGISTRATION_DATE,\n		ADMIN.WRK_MARK.ENTITLEMENT_DATE,\n		ADMIN.WR"
						+ "K_MARK.EXPIRATION_DATE,\n		ADMIN.WRK_MARK.EXHIBITION_DATE,\n		ADMIN.WRK_MARK.EXHIBITION_NOTES,\n		ADMIN.WRK_MARK.SIGN_TYPE,"
						+ "\n		ADMIN.WRK_MARK.MARK_NAME,\n		ADMIN.WRK_MARK.MARK_NAME_LANG2,\n		ADMIN.WRK_MARK.MARK_TRANSLATION,\n		ADMIN.WRK_MARK.MARK_"
						+ "TRANSLATION_LANG2,\n		ADMIN.WRK_MARK.MARK_TRANSLITERATION,\n		ADMIN.WRK_MARK.MARK_TRANSLITERATION_LANG2,\n		ADMIN.WRK_MARK."
						+ "SERIES_DESCRIPTION,\n		ADMIN.WRK_MARK.COLOUR_DESCRIPTION,\n		ADMIN.WRK_MARK.COLOUR_DESCR_LANG2,\n		ADMIN.WRK_MARK.DISCLAIME"
						+ "R,\n		ADMIN.WRK_MARK.DISCLAIMER_LANG2,\n		ADMIN.WRK_MARK.BY_CONSENT,\n		ADMIN.WRK_MARK.REGULATIONS,\n		ADMIN.WRK_MARK.NOTES,"
						+ "\n		ADMIN.WRK_MARK.CAPTURE_USER_ID,\n		ADMIN.WRK_MARK.CAPTURE_DATE,\n		ADMIN.WRK_MARK.PUBLICATION_NBR,\n		ADMIN.WRK_MARK.PUB"
						+ "LICATION_SER,\n		ADMIN.WRK_MARK.PUBLICATION_TYP,\n		ADMIN.WRK_MARK.FIRST_PRIORITY_DATE,\n		ADMIN.WRK_MARK.MAIN_OWNER_ADDR_N"
						+ "BR,\n		ADMIN.WRK_MARK.MAIN_OWNER_PERSON_NBR,\n		ADMIN.WRK_MARK.SERVICE_ADDR_NBR,\n		ADMIN.WRK_MARK.SERVICE_PERSON_NBR,\n		AD"
						+ "MIN.WRK_MARK.NICE_CLASS_TXT,\n		ADMIN.WRK_MARK.MARK_CODE,\n		ADMIN.WRK_MARK.PROC_TYP,\n		ADMIN.WRK_MARK.PROC_NBR,\n		ADMIN.W"
						+ "RK_MARK.STATUS_CODE\nFROM	ADMIN.WRK_MARK";

				globalMap.put("tDBInput_7_QUERY", dbquery_tDBInput_7);
				java.sql.ResultSet rs_tDBInput_7 = null;

				try {
					rs_tDBInput_7 = stmt_tDBInput_7.executeQuery(dbquery_tDBInput_7);
					java.sql.ResultSetMetaData rsmd_tDBInput_7 = rs_tDBInput_7.getMetaData();
					int colQtyInRs_tDBInput_7 = rsmd_tDBInput_7.getColumnCount();

					String tmpContent_tDBInput_7 = null;

					while (rs_tDBInput_7.next()) {
						nb_line_tDBInput_7++;

						if (colQtyInRs_tDBInput_7 < 1) {
							row13.FILE_SEQ = null;
						} else {

							tmpContent_tDBInput_7 = rs_tDBInput_7.getString(1);
							if (tmpContent_tDBInput_7 != null) {
								if (talendToDBList_tDBInput_7.contains(
										rsmd_tDBInput_7.getColumnTypeName(1).toUpperCase(java.util.Locale.ENGLISH))) {
									row13.FILE_SEQ = FormatterUtils.formatUnwithE(tmpContent_tDBInput_7);
								} else {
									row13.FILE_SEQ = tmpContent_tDBInput_7;
								}
							} else {
								row13.FILE_SEQ = null;
							}
						}
						if (colQtyInRs_tDBInput_7 < 2) {
							row13.FILE_TYPE = null;
						} else {

							tmpContent_tDBInput_7 = rs_tDBInput_7.getString(2);
							if (tmpContent_tDBInput_7 != null) {
								if (talendToDBList_tDBInput_7.contains(
										rsmd_tDBInput_7.getColumnTypeName(2).toUpperCase(java.util.Locale.ENGLISH))) {
									row13.FILE_TYPE = FormatterUtils.formatUnwithE(tmpContent_tDBInput_7);
								} else {
									row13.FILE_TYPE = tmpContent_tDBInput_7;
								}
							} else {
								row13.FILE_TYPE = null;
							}
						}
						if (colQtyInRs_tDBInput_7 < 3) {
							row13.FILE_SERIES = null;
						} else {

							row13.FILE_SERIES = rs_tDBInput_7.getBigDecimal(3);
							if (rs_tDBInput_7.wasNull()) {
								throw new RuntimeException("Null value in non-Nullable column");
							}
						}
						if (colQtyInRs_tDBInput_7 < 4) {
							row13.FILE_NBR = null;
						} else {

							row13.FILE_NBR = rs_tDBInput_7.getBigDecimal(4);
							if (rs_tDBInput_7.wasNull()) {
								throw new RuntimeException("Null value in non-Nullable column");
							}
						}
						if (colQtyInRs_tDBInput_7 < 5) {
							row13.DOC_ORI = null;
						} else {

							tmpContent_tDBInput_7 = rs_tDBInput_7.getString(5);
							if (tmpContent_tDBInput_7 != null) {
								if (talendToDBList_tDBInput_7.contains(
										rsmd_tDBInput_7.getColumnTypeName(5).toUpperCase(java.util.Locale.ENGLISH))) {
									row13.DOC_ORI = FormatterUtils.formatUnwithE(tmpContent_tDBInput_7);
								} else {
									row13.DOC_ORI = tmpContent_tDBInput_7;
								}
							} else {
								row13.DOC_ORI = null;
							}
						}
						if (colQtyInRs_tDBInput_7 < 6) {
							row13.DOC_SERIES = null;
						} else {

							row13.DOC_SERIES = rs_tDBInput_7.getBigDecimal(6);
							if (rs_tDBInput_7.wasNull()) {
								row13.DOC_SERIES = null;
							}
						}
						if (colQtyInRs_tDBInput_7 < 7) {
							row13.DOC_NBR = null;
						} else {

							row13.DOC_NBR = rs_tDBInput_7.getBigDecimal(7);
							if (rs_tDBInput_7.wasNull()) {
								row13.DOC_NBR = null;
							}
						}
						if (colQtyInRs_tDBInput_7 < 8) {
							row13.IND_IMPORT = null;
						} else {

							row13.IND_IMPORT = rs_tDBInput_7.getBigDecimal(8);
							if (rs_tDBInput_7.wasNull()) {
								row13.IND_IMPORT = null;
							}
						}
						if (colQtyInRs_tDBInput_7 < 9) {
							row13.APPLICATION_TYPE = null;
						} else {

							tmpContent_tDBInput_7 = rs_tDBInput_7.getString(9);
							if (tmpContent_tDBInput_7 != null) {
								if (talendToDBList_tDBInput_7.contains(
										rsmd_tDBInput_7.getColumnTypeName(9).toUpperCase(java.util.Locale.ENGLISH))) {
									row13.APPLICATION_TYPE = FormatterUtils.formatUnwithE(tmpContent_tDBInput_7);
								} else {
									row13.APPLICATION_TYPE = tmpContent_tDBInput_7;
								}
							} else {
								row13.APPLICATION_TYPE = null;
							}
						}
						if (colQtyInRs_tDBInput_7 < 10) {
							row13.APPLICATION_SUBTYPE = null;
						} else {

							tmpContent_tDBInput_7 = rs_tDBInput_7.getString(10);
							if (tmpContent_tDBInput_7 != null) {
								if (talendToDBList_tDBInput_7.contains(
										rsmd_tDBInput_7.getColumnTypeName(10).toUpperCase(java.util.Locale.ENGLISH))) {
									row13.APPLICATION_SUBTYPE = FormatterUtils.formatUnwithE(tmpContent_tDBInput_7);
								} else {
									row13.APPLICATION_SUBTYPE = tmpContent_tDBInput_7;
								}
							} else {
								row13.APPLICATION_SUBTYPE = null;
							}
						}
						if (colQtyInRs_tDBInput_7 < 11) {
							row13.LAW_CODE = null;
						} else {

							row13.LAW_CODE = rs_tDBInput_7.getBigDecimal(11);
							if (rs_tDBInput_7.wasNull()) {
								throw new RuntimeException("Null value in non-Nullable column");
							}
						}
						if (colQtyInRs_tDBInput_7 < 12) {
							row13.FILING_DATE = null;
						} else {

							row13.FILING_DATE = mssqlGTU_tDBInput_7.getDate(rsmd_tDBInput_7, rs_tDBInput_7, 12);

						}
						if (colQtyInRs_tDBInput_7 < 13) {
							row13.RECEPTION_DATE = null;
						} else {

							row13.RECEPTION_DATE = mssqlGTU_tDBInput_7.getDate(rsmd_tDBInput_7, rs_tDBInput_7, 13);

						}
						if (colQtyInRs_tDBInput_7 < 14) {
							row13.PUBLICATION_DATE = null;
						} else {

							row13.PUBLICATION_DATE = mssqlGTU_tDBInput_7.getDate(rsmd_tDBInput_7, rs_tDBInput_7, 14);

						}
						if (colQtyInRs_tDBInput_7 < 15) {
							row13.PUBLICATION_NOTES = null;
						} else {

							tmpContent_tDBInput_7 = rs_tDBInput_7.getString(15);
							if (tmpContent_tDBInput_7 != null) {
								if (talendToDBList_tDBInput_7.contains(
										rsmd_tDBInput_7.getColumnTypeName(15).toUpperCase(java.util.Locale.ENGLISH))) {
									row13.PUBLICATION_NOTES = FormatterUtils.formatUnwithE(tmpContent_tDBInput_7);
								} else {
									row13.PUBLICATION_NOTES = tmpContent_tDBInput_7;
								}
							} else {
								row13.PUBLICATION_NOTES = null;
							}
						}
						if (colQtyInRs_tDBInput_7 < 16) {
							row13.IND_REGISTERED = null;
						} else {

							row13.IND_REGISTERED = rs_tDBInput_7.getBigDecimal(16);
							if (rs_tDBInput_7.wasNull()) {
								row13.IND_REGISTERED = null;
							}
						}
						if (colQtyInRs_tDBInput_7 < 17) {
							row13.REGISTRATION_TYPE = null;
						} else {

							tmpContent_tDBInput_7 = rs_tDBInput_7.getString(17);
							if (tmpContent_tDBInput_7 != null) {
								if (talendToDBList_tDBInput_7.contains(
										rsmd_tDBInput_7.getColumnTypeName(17).toUpperCase(java.util.Locale.ENGLISH))) {
									row13.REGISTRATION_TYPE = FormatterUtils.formatUnwithE(tmpContent_tDBInput_7);
								} else {
									row13.REGISTRATION_TYPE = tmpContent_tDBInput_7;
								}
							} else {
								row13.REGISTRATION_TYPE = null;
							}
						}
						if (colQtyInRs_tDBInput_7 < 18) {
							row13.REGISTRATION_SERIES = null;
						} else {

							row13.REGISTRATION_SERIES = rs_tDBInput_7.getBigDecimal(18);
							if (rs_tDBInput_7.wasNull()) {
								row13.REGISTRATION_SERIES = null;
							}
						}
						if (colQtyInRs_tDBInput_7 < 19) {
							row13.REGISTRATION_NBR = null;
						} else {

							row13.REGISTRATION_NBR = rs_tDBInput_7.getBigDecimal(19);
							if (rs_tDBInput_7.wasNull()) {
								row13.REGISTRATION_NBR = null;
							}
						}
						if (colQtyInRs_tDBInput_7 < 20) {
							row13.REGISTRATION_DUP = null;
						} else {

							tmpContent_tDBInput_7 = rs_tDBInput_7.getString(20);
							if (tmpContent_tDBInput_7 != null) {
								if (talendToDBList_tDBInput_7.contains(
										rsmd_tDBInput_7.getColumnTypeName(20).toUpperCase(java.util.Locale.ENGLISH))) {
									row13.REGISTRATION_DUP = FormatterUtils.formatUnwithE(tmpContent_tDBInput_7);
								} else {
									row13.REGISTRATION_DUP = tmpContent_tDBInput_7;
								}
							} else {
								row13.REGISTRATION_DUP = null;
							}
						}
						if (colQtyInRs_tDBInput_7 < 21) {
							row13.REGISTRATION_DATE = null;
						} else {

							row13.REGISTRATION_DATE = mssqlGTU_tDBInput_7.getDate(rsmd_tDBInput_7, rs_tDBInput_7, 21);

						}
						if (colQtyInRs_tDBInput_7 < 22) {
							row13.ENTITLEMENT_DATE = null;
						} else {

							row13.ENTITLEMENT_DATE = mssqlGTU_tDBInput_7.getDate(rsmd_tDBInput_7, rs_tDBInput_7, 22);

						}
						if (colQtyInRs_tDBInput_7 < 23) {
							row13.EXPIRATION_DATE = null;
						} else {

							row13.EXPIRATION_DATE = mssqlGTU_tDBInput_7.getDate(rsmd_tDBInput_7, rs_tDBInput_7, 23);

						}
						if (colQtyInRs_tDBInput_7 < 24) {
							row13.EXHIBITION_DATE = null;
						} else {

							row13.EXHIBITION_DATE = mssqlGTU_tDBInput_7.getDate(rsmd_tDBInput_7, rs_tDBInput_7, 24);

						}
						if (colQtyInRs_tDBInput_7 < 25) {
							row13.EXHIBITION_NOTES = null;
						} else {

							tmpContent_tDBInput_7 = rs_tDBInput_7.getString(25);
							if (tmpContent_tDBInput_7 != null) {
								if (talendToDBList_tDBInput_7.contains(
										rsmd_tDBInput_7.getColumnTypeName(25).toUpperCase(java.util.Locale.ENGLISH))) {
									row13.EXHIBITION_NOTES = FormatterUtils.formatUnwithE(tmpContent_tDBInput_7);
								} else {
									row13.EXHIBITION_NOTES = tmpContent_tDBInput_7;
								}
							} else {
								row13.EXHIBITION_NOTES = null;
							}
						}
						if (colQtyInRs_tDBInput_7 < 26) {
							row13.SIGN_TYPE = null;
						} else {

							tmpContent_tDBInput_7 = rs_tDBInput_7.getString(26);
							if (tmpContent_tDBInput_7 != null) {
								if (talendToDBList_tDBInput_7.contains(
										rsmd_tDBInput_7.getColumnTypeName(26).toUpperCase(java.util.Locale.ENGLISH))) {
									row13.SIGN_TYPE = FormatterUtils.formatUnwithE(tmpContent_tDBInput_7);
								} else {
									row13.SIGN_TYPE = tmpContent_tDBInput_7;
								}
							} else {
								row13.SIGN_TYPE = null;
							}
						}
						if (colQtyInRs_tDBInput_7 < 27) {
							row13.MARK_NAME = null;
						} else {

							tmpContent_tDBInput_7 = rs_tDBInput_7.getString(27);
							if (tmpContent_tDBInput_7 != null) {
								if (talendToDBList_tDBInput_7.contains(
										rsmd_tDBInput_7.getColumnTypeName(27).toUpperCase(java.util.Locale.ENGLISH))) {
									row13.MARK_NAME = FormatterUtils.formatUnwithE(tmpContent_tDBInput_7);
								} else {
									row13.MARK_NAME = tmpContent_tDBInput_7;
								}
							} else {
								row13.MARK_NAME = null;
							}
						}
						if (colQtyInRs_tDBInput_7 < 28) {
							row13.MARK_NAME_LANG2 = null;
						} else {

							tmpContent_tDBInput_7 = rs_tDBInput_7.getString(28);
							if (tmpContent_tDBInput_7 != null) {
								if (talendToDBList_tDBInput_7.contains(
										rsmd_tDBInput_7.getColumnTypeName(28).toUpperCase(java.util.Locale.ENGLISH))) {
									row13.MARK_NAME_LANG2 = FormatterUtils.formatUnwithE(tmpContent_tDBInput_7);
								} else {
									row13.MARK_NAME_LANG2 = tmpContent_tDBInput_7;
								}
							} else {
								row13.MARK_NAME_LANG2 = null;
							}
						}
						if (colQtyInRs_tDBInput_7 < 29) {
							row13.MARK_TRANSLATION = null;
						} else {

							tmpContent_tDBInput_7 = rs_tDBInput_7.getString(29);
							if (tmpContent_tDBInput_7 != null) {
								if (talendToDBList_tDBInput_7.contains(
										rsmd_tDBInput_7.getColumnTypeName(29).toUpperCase(java.util.Locale.ENGLISH))) {
									row13.MARK_TRANSLATION = FormatterUtils.formatUnwithE(tmpContent_tDBInput_7);
								} else {
									row13.MARK_TRANSLATION = tmpContent_tDBInput_7;
								}
							} else {
								row13.MARK_TRANSLATION = null;
							}
						}
						if (colQtyInRs_tDBInput_7 < 30) {
							row13.MARK_TRANSLATION_LANG2 = null;
						} else {

							tmpContent_tDBInput_7 = rs_tDBInput_7.getString(30);
							if (tmpContent_tDBInput_7 != null) {
								if (talendToDBList_tDBInput_7.contains(
										rsmd_tDBInput_7.getColumnTypeName(30).toUpperCase(java.util.Locale.ENGLISH))) {
									row13.MARK_TRANSLATION_LANG2 = FormatterUtils.formatUnwithE(tmpContent_tDBInput_7);
								} else {
									row13.MARK_TRANSLATION_LANG2 = tmpContent_tDBInput_7;
								}
							} else {
								row13.MARK_TRANSLATION_LANG2 = null;
							}
						}
						if (colQtyInRs_tDBInput_7 < 31) {
							row13.MARK_TRANSLITERATION = null;
						} else {

							tmpContent_tDBInput_7 = rs_tDBInput_7.getString(31);
							if (tmpContent_tDBInput_7 != null) {
								if (talendToDBList_tDBInput_7.contains(
										rsmd_tDBInput_7.getColumnTypeName(31).toUpperCase(java.util.Locale.ENGLISH))) {
									row13.MARK_TRANSLITERATION = FormatterUtils.formatUnwithE(tmpContent_tDBInput_7);
								} else {
									row13.MARK_TRANSLITERATION = tmpContent_tDBInput_7;
								}
							} else {
								row13.MARK_TRANSLITERATION = null;
							}
						}
						if (colQtyInRs_tDBInput_7 < 32) {
							row13.MARK_TRANSLITERATION_LANG2 = null;
						} else {

							tmpContent_tDBInput_7 = rs_tDBInput_7.getString(32);
							if (tmpContent_tDBInput_7 != null) {
								if (talendToDBList_tDBInput_7.contains(
										rsmd_tDBInput_7.getColumnTypeName(32).toUpperCase(java.util.Locale.ENGLISH))) {
									row13.MARK_TRANSLITERATION_LANG2 = FormatterUtils
											.formatUnwithE(tmpContent_tDBInput_7);
								} else {
									row13.MARK_TRANSLITERATION_LANG2 = tmpContent_tDBInput_7;
								}
							} else {
								row13.MARK_TRANSLITERATION_LANG2 = null;
							}
						}
						if (colQtyInRs_tDBInput_7 < 33) {
							row13.SERIES_DESCRIPTION = null;
						} else {

							tmpContent_tDBInput_7 = rs_tDBInput_7.getString(33);
							if (tmpContent_tDBInput_7 != null) {
								if (talendToDBList_tDBInput_7.contains(
										rsmd_tDBInput_7.getColumnTypeName(33).toUpperCase(java.util.Locale.ENGLISH))) {
									row13.SERIES_DESCRIPTION = FormatterUtils.formatUnwithE(tmpContent_tDBInput_7);
								} else {
									row13.SERIES_DESCRIPTION = tmpContent_tDBInput_7;
								}
							} else {
								row13.SERIES_DESCRIPTION = null;
							}
						}
						if (colQtyInRs_tDBInput_7 < 34) {
							row13.COLOUR_DESCRIPTION = null;
						} else {

							tmpContent_tDBInput_7 = rs_tDBInput_7.getString(34);
							if (tmpContent_tDBInput_7 != null) {
								if (talendToDBList_tDBInput_7.contains(
										rsmd_tDBInput_7.getColumnTypeName(34).toUpperCase(java.util.Locale.ENGLISH))) {
									row13.COLOUR_DESCRIPTION = FormatterUtils.formatUnwithE(tmpContent_tDBInput_7);
								} else {
									row13.COLOUR_DESCRIPTION = tmpContent_tDBInput_7;
								}
							} else {
								row13.COLOUR_DESCRIPTION = null;
							}
						}
						if (colQtyInRs_tDBInput_7 < 35) {
							row13.COLOUR_DESCR_LANG2 = null;
						} else {

							tmpContent_tDBInput_7 = rs_tDBInput_7.getString(35);
							if (tmpContent_tDBInput_7 != null) {
								if (talendToDBList_tDBInput_7.contains(
										rsmd_tDBInput_7.getColumnTypeName(35).toUpperCase(java.util.Locale.ENGLISH))) {
									row13.COLOUR_DESCR_LANG2 = FormatterUtils.formatUnwithE(tmpContent_tDBInput_7);
								} else {
									row13.COLOUR_DESCR_LANG2 = tmpContent_tDBInput_7;
								}
							} else {
								row13.COLOUR_DESCR_LANG2 = null;
							}
						}
						if (colQtyInRs_tDBInput_7 < 36) {
							row13.DISCLAIMER = null;
						} else {

							tmpContent_tDBInput_7 = rs_tDBInput_7.getString(36);
							if (tmpContent_tDBInput_7 != null) {
								if (talendToDBList_tDBInput_7.contains(
										rsmd_tDBInput_7.getColumnTypeName(36).toUpperCase(java.util.Locale.ENGLISH))) {
									row13.DISCLAIMER = FormatterUtils.formatUnwithE(tmpContent_tDBInput_7);
								} else {
									row13.DISCLAIMER = tmpContent_tDBInput_7;
								}
							} else {
								row13.DISCLAIMER = null;
							}
						}
						if (colQtyInRs_tDBInput_7 < 37) {
							row13.DISCLAIMER_LANG2 = null;
						} else {

							tmpContent_tDBInput_7 = rs_tDBInput_7.getString(37);
							if (tmpContent_tDBInput_7 != null) {
								if (talendToDBList_tDBInput_7.contains(
										rsmd_tDBInput_7.getColumnTypeName(37).toUpperCase(java.util.Locale.ENGLISH))) {
									row13.DISCLAIMER_LANG2 = FormatterUtils.formatUnwithE(tmpContent_tDBInput_7);
								} else {
									row13.DISCLAIMER_LANG2 = tmpContent_tDBInput_7;
								}
							} else {
								row13.DISCLAIMER_LANG2 = null;
							}
						}
						if (colQtyInRs_tDBInput_7 < 38) {
							row13.BY_CONSENT = null;
						} else {

							tmpContent_tDBInput_7 = rs_tDBInput_7.getString(38);
							if (tmpContent_tDBInput_7 != null) {
								if (talendToDBList_tDBInput_7.contains(
										rsmd_tDBInput_7.getColumnTypeName(38).toUpperCase(java.util.Locale.ENGLISH))) {
									row13.BY_CONSENT = FormatterUtils.formatUnwithE(tmpContent_tDBInput_7);
								} else {
									row13.BY_CONSENT = tmpContent_tDBInput_7;
								}
							} else {
								row13.BY_CONSENT = null;
							}
						}
						if (colQtyInRs_tDBInput_7 < 39) {
							row13.REGULATIONS = null;
						} else {

							tmpContent_tDBInput_7 = rs_tDBInput_7.getString(39);
							if (tmpContent_tDBInput_7 != null) {
								if (talendToDBList_tDBInput_7.contains(
										rsmd_tDBInput_7.getColumnTypeName(39).toUpperCase(java.util.Locale.ENGLISH))) {
									row13.REGULATIONS = FormatterUtils.formatUnwithE(tmpContent_tDBInput_7);
								} else {
									row13.REGULATIONS = tmpContent_tDBInput_7;
								}
							} else {
								row13.REGULATIONS = null;
							}
						}
						if (colQtyInRs_tDBInput_7 < 40) {
							row13.NOTES = null;
						} else {

							tmpContent_tDBInput_7 = rs_tDBInput_7.getString(40);
							if (tmpContent_tDBInput_7 != null) {
								if (talendToDBList_tDBInput_7.contains(
										rsmd_tDBInput_7.getColumnTypeName(40).toUpperCase(java.util.Locale.ENGLISH))) {
									row13.NOTES = FormatterUtils.formatUnwithE(tmpContent_tDBInput_7);
								} else {
									row13.NOTES = tmpContent_tDBInput_7;
								}
							} else {
								row13.NOTES = null;
							}
						}
						if (colQtyInRs_tDBInput_7 < 41) {
							row13.CAPTURE_USER_ID = null;
						} else {

							row13.CAPTURE_USER_ID = rs_tDBInput_7.getBigDecimal(41);
							if (rs_tDBInput_7.wasNull()) {
								row13.CAPTURE_USER_ID = null;
							}
						}
						if (colQtyInRs_tDBInput_7 < 42) {
							row13.CAPTURE_DATE = null;
						} else {

							row13.CAPTURE_DATE = mssqlGTU_tDBInput_7.getDate(rsmd_tDBInput_7, rs_tDBInput_7, 42);

						}
						if (colQtyInRs_tDBInput_7 < 43) {
							row13.PUBLICATION_NBR = null;
						} else {

							row13.PUBLICATION_NBR = rs_tDBInput_7.getBigDecimal(43);
							if (rs_tDBInput_7.wasNull()) {
								row13.PUBLICATION_NBR = null;
							}
						}
						if (colQtyInRs_tDBInput_7 < 44) {
							row13.PUBLICATION_SER = null;
						} else {

							tmpContent_tDBInput_7 = rs_tDBInput_7.getString(44);
							if (tmpContent_tDBInput_7 != null) {
								if (talendToDBList_tDBInput_7.contains(
										rsmd_tDBInput_7.getColumnTypeName(44).toUpperCase(java.util.Locale.ENGLISH))) {
									row13.PUBLICATION_SER = FormatterUtils.formatUnwithE(tmpContent_tDBInput_7);
								} else {
									row13.PUBLICATION_SER = tmpContent_tDBInput_7;
								}
							} else {
								row13.PUBLICATION_SER = null;
							}
						}
						if (colQtyInRs_tDBInput_7 < 45) {
							row13.PUBLICATION_TYP = null;
						} else {

							tmpContent_tDBInput_7 = rs_tDBInput_7.getString(45);
							if (tmpContent_tDBInput_7 != null) {
								if (talendToDBList_tDBInput_7.contains(
										rsmd_tDBInput_7.getColumnTypeName(45).toUpperCase(java.util.Locale.ENGLISH))) {
									row13.PUBLICATION_TYP = FormatterUtils.formatUnwithE(tmpContent_tDBInput_7);
								} else {
									row13.PUBLICATION_TYP = tmpContent_tDBInput_7;
								}
							} else {
								row13.PUBLICATION_TYP = null;
							}
						}
						if (colQtyInRs_tDBInput_7 < 46) {
							row13.FIRST_PRIORITY_DATE = null;
						} else {

							row13.FIRST_PRIORITY_DATE = mssqlGTU_tDBInput_7.getDate(rsmd_tDBInput_7, rs_tDBInput_7, 46);

						}
						if (colQtyInRs_tDBInput_7 < 47) {
							row13.MAIN_OWNER_ADDR_NBR = null;
						} else {

							row13.MAIN_OWNER_ADDR_NBR = rs_tDBInput_7.getBigDecimal(47);
							if (rs_tDBInput_7.wasNull()) {
								row13.MAIN_OWNER_ADDR_NBR = null;
							}
						}
						if (colQtyInRs_tDBInput_7 < 48) {
							row13.MAIN_OWNER_PERSON_NBR = null;
						} else {

							row13.MAIN_OWNER_PERSON_NBR = rs_tDBInput_7.getBigDecimal(48);
							if (rs_tDBInput_7.wasNull()) {
								row13.MAIN_OWNER_PERSON_NBR = null;
							}
						}
						if (colQtyInRs_tDBInput_7 < 49) {
							row13.SERVICE_ADDR_NBR = null;
						} else {

							row13.SERVICE_ADDR_NBR = rs_tDBInput_7.getBigDecimal(49);
							if (rs_tDBInput_7.wasNull()) {
								row13.SERVICE_ADDR_NBR = null;
							}
						}
						if (colQtyInRs_tDBInput_7 < 50) {
							row13.SERVICE_PERSON_NBR = null;
						} else {

							row13.SERVICE_PERSON_NBR = rs_tDBInput_7.getBigDecimal(50);
							if (rs_tDBInput_7.wasNull()) {
								row13.SERVICE_PERSON_NBR = null;
							}
						}
						if (colQtyInRs_tDBInput_7 < 51) {
							row13.NICE_CLASS_TXT = null;
						} else {

							tmpContent_tDBInput_7 = rs_tDBInput_7.getString(51);
							if (tmpContent_tDBInput_7 != null) {
								if (talendToDBList_tDBInput_7.contains(
										rsmd_tDBInput_7.getColumnTypeName(51).toUpperCase(java.util.Locale.ENGLISH))) {
									row13.NICE_CLASS_TXT = FormatterUtils.formatUnwithE(tmpContent_tDBInput_7);
								} else {
									row13.NICE_CLASS_TXT = tmpContent_tDBInput_7;
								}
							} else {
								row13.NICE_CLASS_TXT = null;
							}
						}
						if (colQtyInRs_tDBInput_7 < 52) {
							row13.MARK_CODE = null;
						} else {

							row13.MARK_CODE = rs_tDBInput_7.getBigDecimal(52);
							if (rs_tDBInput_7.wasNull()) {
								row13.MARK_CODE = null;
							}
						}
						if (colQtyInRs_tDBInput_7 < 53) {
							row13.PROC_TYP = null;
						} else {

							tmpContent_tDBInput_7 = rs_tDBInput_7.getString(53);
							if (tmpContent_tDBInput_7 != null) {
								if (talendToDBList_tDBInput_7.contains(
										rsmd_tDBInput_7.getColumnTypeName(53).toUpperCase(java.util.Locale.ENGLISH))) {
									row13.PROC_TYP = FormatterUtils.formatUnwithE(tmpContent_tDBInput_7);
								} else {
									row13.PROC_TYP = tmpContent_tDBInput_7;
								}
							} else {
								row13.PROC_TYP = null;
							}
						}
						if (colQtyInRs_tDBInput_7 < 54) {
							row13.PROC_NBR = null;
						} else {

							row13.PROC_NBR = rs_tDBInput_7.getBigDecimal(54);
							if (rs_tDBInput_7.wasNull()) {
								row13.PROC_NBR = null;
							}
						}
						if (colQtyInRs_tDBInput_7 < 55) {
							row13.STATUS_CODE = null;
						} else {

							tmpContent_tDBInput_7 = rs_tDBInput_7.getString(55);
							if (tmpContent_tDBInput_7 != null) {
								if (talendToDBList_tDBInput_7.contains(
										rsmd_tDBInput_7.getColumnTypeName(55).toUpperCase(java.util.Locale.ENGLISH))) {
									row13.STATUS_CODE = FormatterUtils.formatUnwithE(tmpContent_tDBInput_7);
								} else {
									row13.STATUS_CODE = tmpContent_tDBInput_7;
								}
							} else {
								row13.STATUS_CODE = null;
							}
						}

						/**
						 * [tDBInput_7 begin ] stop
						 */

						/**
						 * [tDBInput_7 main ] start
						 */

						currentComponent = "tDBInput_7";

						tos_count_tDBInput_7++;

						/**
						 * [tDBInput_7 main ] stop
						 */

						/**
						 * [tDBInput_7 process_data_begin ] start
						 */

						currentComponent = "tDBInput_7";

						/**
						 * [tDBInput_7 process_data_begin ] stop
						 */

						/**
						 * [tAdvancedHash_row13 main ] start
						 */

						currentComponent = "tAdvancedHash_row13";

						if (execStat) {
							runStat.updateStatOnConnection(iterateId, 1, 1

									, "row13"

							);
						}

						row13Struct row13_HashRow = new row13Struct();

						row13_HashRow.FILE_SEQ = row13.FILE_SEQ;

						row13_HashRow.FILE_TYPE = row13.FILE_TYPE;

						row13_HashRow.FILE_SERIES = row13.FILE_SERIES;

						row13_HashRow.FILE_NBR = row13.FILE_NBR;

						row13_HashRow.DOC_ORI = row13.DOC_ORI;

						row13_HashRow.DOC_SERIES = row13.DOC_SERIES;

						row13_HashRow.DOC_NBR = row13.DOC_NBR;

						row13_HashRow.IND_IMPORT = row13.IND_IMPORT;

						row13_HashRow.APPLICATION_TYPE = row13.APPLICATION_TYPE;

						row13_HashRow.APPLICATION_SUBTYPE = row13.APPLICATION_SUBTYPE;

						row13_HashRow.LAW_CODE = row13.LAW_CODE;

						row13_HashRow.FILING_DATE = row13.FILING_DATE;

						row13_HashRow.RECEPTION_DATE = row13.RECEPTION_DATE;

						row13_HashRow.PUBLICATION_DATE = row13.PUBLICATION_DATE;

						row13_HashRow.PUBLICATION_NOTES = row13.PUBLICATION_NOTES;

						row13_HashRow.IND_REGISTERED = row13.IND_REGISTERED;

						row13_HashRow.REGISTRATION_TYPE = row13.REGISTRATION_TYPE;

						row13_HashRow.REGISTRATION_SERIES = row13.REGISTRATION_SERIES;

						row13_HashRow.REGISTRATION_NBR = row13.REGISTRATION_NBR;

						row13_HashRow.REGISTRATION_DUP = row13.REGISTRATION_DUP;

						row13_HashRow.REGISTRATION_DATE = row13.REGISTRATION_DATE;

						row13_HashRow.ENTITLEMENT_DATE = row13.ENTITLEMENT_DATE;

						row13_HashRow.EXPIRATION_DATE = row13.EXPIRATION_DATE;

						row13_HashRow.EXHIBITION_DATE = row13.EXHIBITION_DATE;

						row13_HashRow.EXHIBITION_NOTES = row13.EXHIBITION_NOTES;

						row13_HashRow.SIGN_TYPE = row13.SIGN_TYPE;

						row13_HashRow.MARK_NAME = row13.MARK_NAME;

						row13_HashRow.MARK_NAME_LANG2 = row13.MARK_NAME_LANG2;

						row13_HashRow.MARK_TRANSLATION = row13.MARK_TRANSLATION;

						row13_HashRow.MARK_TRANSLATION_LANG2 = row13.MARK_TRANSLATION_LANG2;

						row13_HashRow.MARK_TRANSLITERATION = row13.MARK_TRANSLITERATION;

						row13_HashRow.MARK_TRANSLITERATION_LANG2 = row13.MARK_TRANSLITERATION_LANG2;

						row13_HashRow.SERIES_DESCRIPTION = row13.SERIES_DESCRIPTION;

						row13_HashRow.COLOUR_DESCRIPTION = row13.COLOUR_DESCRIPTION;

						row13_HashRow.COLOUR_DESCR_LANG2 = row13.COLOUR_DESCR_LANG2;

						row13_HashRow.DISCLAIMER = row13.DISCLAIMER;

						row13_HashRow.DISCLAIMER_LANG2 = row13.DISCLAIMER_LANG2;

						row13_HashRow.BY_CONSENT = row13.BY_CONSENT;

						row13_HashRow.REGULATIONS = row13.REGULATIONS;

						row13_HashRow.NOTES = row13.NOTES;

						row13_HashRow.CAPTURE_USER_ID = row13.CAPTURE_USER_ID;

						row13_HashRow.CAPTURE_DATE = row13.CAPTURE_DATE;

						row13_HashRow.PUBLICATION_NBR = row13.PUBLICATION_NBR;

						row13_HashRow.PUBLICATION_SER = row13.PUBLICATION_SER;

						row13_HashRow.PUBLICATION_TYP = row13.PUBLICATION_TYP;

						row13_HashRow.FIRST_PRIORITY_DATE = row13.FIRST_PRIORITY_DATE;

						row13_HashRow.MAIN_OWNER_ADDR_NBR = row13.MAIN_OWNER_ADDR_NBR;

						row13_HashRow.MAIN_OWNER_PERSON_NBR = row13.MAIN_OWNER_PERSON_NBR;

						row13_HashRow.SERVICE_ADDR_NBR = row13.SERVICE_ADDR_NBR;

						row13_HashRow.SERVICE_PERSON_NBR = row13.SERVICE_PERSON_NBR;

						row13_HashRow.NICE_CLASS_TXT = row13.NICE_CLASS_TXT;

						row13_HashRow.MARK_CODE = row13.MARK_CODE;

						row13_HashRow.PROC_TYP = row13.PROC_TYP;

						row13_HashRow.PROC_NBR = row13.PROC_NBR;

						row13_HashRow.STATUS_CODE = row13.STATUS_CODE;

						tHash_Lookup_row13.put(row13_HashRow);

						tos_count_tAdvancedHash_row13++;

						/**
						 * [tAdvancedHash_row13 main ] stop
						 */

						/**
						 * [tAdvancedHash_row13 process_data_begin ] start
						 */

						currentComponent = "tAdvancedHash_row13";

						/**
						 * [tAdvancedHash_row13 process_data_begin ] stop
						 */

						/**
						 * [tAdvancedHash_row13 process_data_end ] start
						 */

						currentComponent = "tAdvancedHash_row13";

						/**
						 * [tAdvancedHash_row13 process_data_end ] stop
						 */

						/**
						 * [tDBInput_7 process_data_end ] start
						 */

						currentComponent = "tDBInput_7";

						/**
						 * [tDBInput_7 process_data_end ] stop
						 */

						/**
						 * [tDBInput_7 end ] start
						 */

						currentComponent = "tDBInput_7";

					}
				} finally {
					if (rs_tDBInput_7 != null) {
						rs_tDBInput_7.close();
					}
					if (stmt_tDBInput_7 != null) {
						stmt_tDBInput_7.close();
					}
					if (conn_tDBInput_7 != null && !conn_tDBInput_7.isClosed()) {

						conn_tDBInput_7.close();

						if ("com.mysql.cj.jdbc.Driver".equals((String) globalMap.get("driverClass_"))
								&& routines.system.BundleUtils.inOSGi()) {
							Class.forName("com.mysql.cj.jdbc.AbandonedConnectionCleanupThread")
									.getMethod("checkedShutdown").invoke(null, (Object[]) null);
						}

					}
				}
				globalMap.put("tDBInput_7_NB_LINE", nb_line_tDBInput_7);

				ok_Hash.put("tDBInput_7", true);
				end_Hash.put("tDBInput_7", System.currentTimeMillis());

				/**
				 * [tDBInput_7 end ] stop
				 */

				/**
				 * [tAdvancedHash_row13 end ] start
				 */

				currentComponent = "tAdvancedHash_row13";

				tHash_Lookup_row13.endPut();

				if (execStat) {
					runStat.updateStat(resourceMap, iterateId, 2, 0, "row13");
				}

				ok_Hash.put("tAdvancedHash_row13", true);
				end_Hash.put("tAdvancedHash_row13", System.currentTimeMillis());

				/**
				 * [tAdvancedHash_row13 end ] stop
				 */

			} // end the resume

		} catch (java.lang.Exception e) {

			TalendException te = new TalendException(e, currentComponent, globalMap);

			throw te;
		} catch (java.lang.Error error) {

			runStat.stopThreadStat();

			throw error;
		} finally {

			try {

				/**
				 * [tDBInput_7 finally ] start
				 */

				currentComponent = "tDBInput_7";

				/**
				 * [tDBInput_7 finally ] stop
				 */

				/**
				 * [tAdvancedHash_row13 finally ] start
				 */

				currentComponent = "tAdvancedHash_row13";

				/**
				 * [tAdvancedHash_row13 finally ] stop
				 */

			} catch (java.lang.Exception e) {
				// ignore
			} catch (java.lang.Error error) {
				// ignore
			}
			resourceMap = null;
		}

		globalMap.put("tDBInput_7_SUBPROCESS_STATE", 1);
	}

	public static class row16Struct implements routines.system.IPersistableComparableLookupRow<row16Struct> {
		final static byte[] commonByteArrayLock_WIPO_PROJECTS_G2b_Mig_TM = new byte[0];
		static byte[] commonByteArray_WIPO_PROJECTS_G2b_Mig_TM = new byte[0];
		protected static final int DEFAULT_HASHCODE = 1;
		protected static final int PRIME = 31;
		protected int hashCode = DEFAULT_HASHCODE;
		public boolean hashCodeDirty = true;

		public String loopKey;

		public String FILE_SEQ;

		public String getFILE_SEQ() {
			return this.FILE_SEQ;
		}

		public String FILE_TYPE;

		public String getFILE_TYPE() {
			return this.FILE_TYPE;
		}

		public BigDecimal FILE_SERIES;

		public BigDecimal getFILE_SERIES() {
			return this.FILE_SERIES;
		}

		public BigDecimal FILE_NBR;

		public BigDecimal getFILE_NBR() {
			return this.FILE_NBR;
		}

		public String DOC_ORI;

		public String getDOC_ORI() {
			return this.DOC_ORI;
		}

		public BigDecimal DOC_SERIES;

		public BigDecimal getDOC_SERIES() {
			return this.DOC_SERIES;
		}

		public BigDecimal DOC_NBR;

		public BigDecimal getDOC_NBR() {
			return this.DOC_NBR;
		}

		public BigDecimal IND_IMPORT;

		public BigDecimal getIND_IMPORT() {
			return this.IND_IMPORT;
		}

		public String APPLICATION_TYPE;

		public String getAPPLICATION_TYPE() {
			return this.APPLICATION_TYPE;
		}

		public String APPLICATION_SUBTYPE;

		public String getAPPLICATION_SUBTYPE() {
			return this.APPLICATION_SUBTYPE;
		}

		public BigDecimal LAW_CODE;

		public BigDecimal getLAW_CODE() {
			return this.LAW_CODE;
		}

		public java.util.Date FILING_DATE;

		public java.util.Date getFILING_DATE() {
			return this.FILING_DATE;
		}

		public java.util.Date RECEPTION_DATE;

		public java.util.Date getRECEPTION_DATE() {
			return this.RECEPTION_DATE;
		}

		public java.util.Date PUBLICATION_DATE;

		public java.util.Date getPUBLICATION_DATE() {
			return this.PUBLICATION_DATE;
		}

		public String PUBLICATION_NOTES;

		public String getPUBLICATION_NOTES() {
			return this.PUBLICATION_NOTES;
		}

		public BigDecimal IND_REGISTERED;

		public BigDecimal getIND_REGISTERED() {
			return this.IND_REGISTERED;
		}

		public String REGISTRATION_TYPE;

		public String getREGISTRATION_TYPE() {
			return this.REGISTRATION_TYPE;
		}

		public BigDecimal REGISTRATION_SERIES;

		public BigDecimal getREGISTRATION_SERIES() {
			return this.REGISTRATION_SERIES;
		}

		public BigDecimal REGISTRATION_NBR;

		public BigDecimal getREGISTRATION_NBR() {
			return this.REGISTRATION_NBR;
		}

		public String REGISTRATION_DUP;

		public String getREGISTRATION_DUP() {
			return this.REGISTRATION_DUP;
		}

		public java.util.Date REGISTRATION_DATE;

		public java.util.Date getREGISTRATION_DATE() {
			return this.REGISTRATION_DATE;
		}

		public java.util.Date ENTITLEMENT_DATE;

		public java.util.Date getENTITLEMENT_DATE() {
			return this.ENTITLEMENT_DATE;
		}

		public java.util.Date EXPIRATION_DATE;

		public java.util.Date getEXPIRATION_DATE() {
			return this.EXPIRATION_DATE;
		}

		public java.util.Date EXHIBITION_DATE;

		public java.util.Date getEXHIBITION_DATE() {
			return this.EXHIBITION_DATE;
		}

		public String EXHIBITION_NOTES;

		public String getEXHIBITION_NOTES() {
			return this.EXHIBITION_NOTES;
		}

		public String SIGN_TYPE;

		public String getSIGN_TYPE() {
			return this.SIGN_TYPE;
		}

		public String MARK_NAME;

		public String getMARK_NAME() {
			return this.MARK_NAME;
		}

		public String MARK_NAME_LANG2;

		public String getMARK_NAME_LANG2() {
			return this.MARK_NAME_LANG2;
		}

		public String MARK_TRANSLATION;

		public String getMARK_TRANSLATION() {
			return this.MARK_TRANSLATION;
		}

		public String MARK_TRANSLATION_LANG2;

		public String getMARK_TRANSLATION_LANG2() {
			return this.MARK_TRANSLATION_LANG2;
		}

		public String MARK_TRANSLITERATION;

		public String getMARK_TRANSLITERATION() {
			return this.MARK_TRANSLITERATION;
		}

		public String MARK_TRANSLITERATION_LANG2;

		public String getMARK_TRANSLITERATION_LANG2() {
			return this.MARK_TRANSLITERATION_LANG2;
		}

		public String SERIES_DESCRIPTION;

		public String getSERIES_DESCRIPTION() {
			return this.SERIES_DESCRIPTION;
		}

		public String COLOUR_DESCRIPTION;

		public String getCOLOUR_DESCRIPTION() {
			return this.COLOUR_DESCRIPTION;
		}

		public String COLOUR_DESCR_LANG2;

		public String getCOLOUR_DESCR_LANG2() {
			return this.COLOUR_DESCR_LANG2;
		}

		public String DISCLAIMER;

		public String getDISCLAIMER() {
			return this.DISCLAIMER;
		}

		public String DISCLAIMER_LANG2;

		public String getDISCLAIMER_LANG2() {
			return this.DISCLAIMER_LANG2;
		}

		public String BY_CONSENT;

		public String getBY_CONSENT() {
			return this.BY_CONSENT;
		}

		public String REGULATIONS;

		public String getREGULATIONS() {
			return this.REGULATIONS;
		}

		public String NOTES;

		public String getNOTES() {
			return this.NOTES;
		}

		public BigDecimal CAPTURE_USER_ID;

		public BigDecimal getCAPTURE_USER_ID() {
			return this.CAPTURE_USER_ID;
		}

		public java.util.Date CAPTURE_DATE;

		public java.util.Date getCAPTURE_DATE() {
			return this.CAPTURE_DATE;
		}

		public BigDecimal PUBLICATION_NBR;

		public BigDecimal getPUBLICATION_NBR() {
			return this.PUBLICATION_NBR;
		}

		public String PUBLICATION_SER;

		public String getPUBLICATION_SER() {
			return this.PUBLICATION_SER;
		}

		public String PUBLICATION_TYP;

		public String getPUBLICATION_TYP() {
			return this.PUBLICATION_TYP;
		}

		public java.util.Date FIRST_PRIORITY_DATE;

		public java.util.Date getFIRST_PRIORITY_DATE() {
			return this.FIRST_PRIORITY_DATE;
		}

		public BigDecimal MAIN_OWNER_ADDR_NBR;

		public BigDecimal getMAIN_OWNER_ADDR_NBR() {
			return this.MAIN_OWNER_ADDR_NBR;
		}

		public BigDecimal MAIN_OWNER_PERSON_NBR;

		public BigDecimal getMAIN_OWNER_PERSON_NBR() {
			return this.MAIN_OWNER_PERSON_NBR;
		}

		public BigDecimal SERVICE_ADDR_NBR;

		public BigDecimal getSERVICE_ADDR_NBR() {
			return this.SERVICE_ADDR_NBR;
		}

		public BigDecimal SERVICE_PERSON_NBR;

		public BigDecimal getSERVICE_PERSON_NBR() {
			return this.SERVICE_PERSON_NBR;
		}

		public String NICE_CLASS_TXT;

		public String getNICE_CLASS_TXT() {
			return this.NICE_CLASS_TXT;
		}

		public BigDecimal MARK_CODE;

		public BigDecimal getMARK_CODE() {
			return this.MARK_CODE;
		}

		public String PROC_TYP;

		public String getPROC_TYP() {
			return this.PROC_TYP;
		}

		public BigDecimal PROC_NBR;

		public BigDecimal getPROC_NBR() {
			return this.PROC_NBR;
		}

		public String STATUS_CODE;

		public String getSTATUS_CODE() {
			return this.STATUS_CODE;
		}

		@Override
		public int hashCode() {
			if (this.hashCodeDirty) {
				final int prime = PRIME;
				int result = DEFAULT_HASHCODE;

				result = prime * result + ((this.FILE_SEQ == null) ? 0 : this.FILE_SEQ.hashCode());

				result = prime * result + ((this.FILE_TYPE == null) ? 0 : this.FILE_TYPE.hashCode());

				result = prime * result
						+ ((this.FILE_SERIES == null) ? 0 : new Double(this.FILE_SERIES.doubleValue()).hashCode());

				result = prime * result
						+ ((this.FILE_NBR == null) ? 0 : new Double(this.FILE_NBR.doubleValue()).hashCode());

				this.hashCode = result;
				this.hashCodeDirty = false;
			}
			return this.hashCode;
		}

		@Override
		public boolean equals(Object obj) {
			if (this == obj)
				return true;
			if (obj == null)
				return false;
			if (getClass() != obj.getClass())
				return false;
			final row16Struct other = (row16Struct) obj;

			if (this.FILE_SEQ == null) {
				if (other.FILE_SEQ != null)
					return false;

			} else if (!this.FILE_SEQ.equals(other.FILE_SEQ))

				return false;

			if (this.FILE_TYPE == null) {
				if (other.FILE_TYPE != null)
					return false;

			} else if (!this.FILE_TYPE.equals(other.FILE_TYPE))

				return false;

			if (this.FILE_SERIES == null) {
				if (other.FILE_SERIES != null)
					return false;

			} else if ((other.FILE_SERIES == null) || (this.FILE_SERIES.compareTo(other.FILE_SERIES) != 0))

				return false;

			if (this.FILE_NBR == null) {
				if (other.FILE_NBR != null)
					return false;

			} else if ((other.FILE_NBR == null) || (this.FILE_NBR.compareTo(other.FILE_NBR) != 0))

				return false;

			return true;
		}

		public void copyDataTo(row16Struct other) {

			other.FILE_SEQ = this.FILE_SEQ;
			other.FILE_TYPE = this.FILE_TYPE;
			other.FILE_SERIES = this.FILE_SERIES;
			other.FILE_NBR = this.FILE_NBR;
			other.DOC_ORI = this.DOC_ORI;
			other.DOC_SERIES = this.DOC_SERIES;
			other.DOC_NBR = this.DOC_NBR;
			other.IND_IMPORT = this.IND_IMPORT;
			other.APPLICATION_TYPE = this.APPLICATION_TYPE;
			other.APPLICATION_SUBTYPE = this.APPLICATION_SUBTYPE;
			other.LAW_CODE = this.LAW_CODE;
			other.FILING_DATE = this.FILING_DATE;
			other.RECEPTION_DATE = this.RECEPTION_DATE;
			other.PUBLICATION_DATE = this.PUBLICATION_DATE;
			other.PUBLICATION_NOTES = this.PUBLICATION_NOTES;
			other.IND_REGISTERED = this.IND_REGISTERED;
			other.REGISTRATION_TYPE = this.REGISTRATION_TYPE;
			other.REGISTRATION_SERIES = this.REGISTRATION_SERIES;
			other.REGISTRATION_NBR = this.REGISTRATION_NBR;
			other.REGISTRATION_DUP = this.REGISTRATION_DUP;
			other.REGISTRATION_DATE = this.REGISTRATION_DATE;
			other.ENTITLEMENT_DATE = this.ENTITLEMENT_DATE;
			other.EXPIRATION_DATE = this.EXPIRATION_DATE;
			other.EXHIBITION_DATE = this.EXHIBITION_DATE;
			other.EXHIBITION_NOTES = this.EXHIBITION_NOTES;
			other.SIGN_TYPE = this.SIGN_TYPE;
			other.MARK_NAME = this.MARK_NAME;
			other.MARK_NAME_LANG2 = this.MARK_NAME_LANG2;
			other.MARK_TRANSLATION = this.MARK_TRANSLATION;
			other.MARK_TRANSLATION_LANG2 = this.MARK_TRANSLATION_LANG2;
			other.MARK_TRANSLITERATION = this.MARK_TRANSLITERATION;
			other.MARK_TRANSLITERATION_LANG2 = this.MARK_TRANSLITERATION_LANG2;
			other.SERIES_DESCRIPTION = this.SERIES_DESCRIPTION;
			other.COLOUR_DESCRIPTION = this.COLOUR_DESCRIPTION;
			other.COLOUR_DESCR_LANG2 = this.COLOUR_DESCR_LANG2;
			other.DISCLAIMER = this.DISCLAIMER;
			other.DISCLAIMER_LANG2 = this.DISCLAIMER_LANG2;
			other.BY_CONSENT = this.BY_CONSENT;
			other.REGULATIONS = this.REGULATIONS;
			other.NOTES = this.NOTES;
			other.CAPTURE_USER_ID = this.CAPTURE_USER_ID;
			other.CAPTURE_DATE = this.CAPTURE_DATE;
			other.PUBLICATION_NBR = this.PUBLICATION_NBR;
			other.PUBLICATION_SER = this.PUBLICATION_SER;
			other.PUBLICATION_TYP = this.PUBLICATION_TYP;
			other.FIRST_PRIORITY_DATE = this.FIRST_PRIORITY_DATE;
			other.MAIN_OWNER_ADDR_NBR = this.MAIN_OWNER_ADDR_NBR;
			other.MAIN_OWNER_PERSON_NBR = this.MAIN_OWNER_PERSON_NBR;
			other.SERVICE_ADDR_NBR = this.SERVICE_ADDR_NBR;
			other.SERVICE_PERSON_NBR = this.SERVICE_PERSON_NBR;
			other.NICE_CLASS_TXT = this.NICE_CLASS_TXT;
			other.MARK_CODE = this.MARK_CODE;
			other.PROC_TYP = this.PROC_TYP;
			other.PROC_NBR = this.PROC_NBR;
			other.STATUS_CODE = this.STATUS_CODE;

		}

		public void copyKeysDataTo(row16Struct other) {

			other.FILE_SEQ = this.FILE_SEQ;
			other.FILE_TYPE = this.FILE_TYPE;
			other.FILE_SERIES = this.FILE_SERIES;
			other.FILE_NBR = this.FILE_NBR;

		}

		private String readString(ObjectInputStream dis) throws IOException {
			String strReturn = null;
			int length = 0;
			length = dis.readInt();
			if (length == -1) {
				strReturn = null;
			} else {
				if (length > commonByteArray_WIPO_PROJECTS_G2b_Mig_TM.length) {
					if (length < 1024 && commonByteArray_WIPO_PROJECTS_G2b_Mig_TM.length == 0) {
						commonByteArray_WIPO_PROJECTS_G2b_Mig_TM = new byte[1024];
					} else {
						commonByteArray_WIPO_PROJECTS_G2b_Mig_TM = new byte[2 * length];
					}
				}
				dis.readFully(commonByteArray_WIPO_PROJECTS_G2b_Mig_TM, 0, length);
				strReturn = new String(commonByteArray_WIPO_PROJECTS_G2b_Mig_TM, 0, length, utf8Charset);
			}
			return strReturn;
		}

		private void writeString(String str, ObjectOutputStream dos) throws IOException {
			if (str == null) {
				dos.writeInt(-1);
			} else {
				byte[] byteArray = str.getBytes(utf8Charset);
				dos.writeInt(byteArray.length);
				dos.write(byteArray);
			}
		}

		private String readString(DataInputStream dis, ObjectInputStream ois) throws IOException {
			String strReturn = null;
			int length = 0;
			length = dis.readInt();
			if (length == -1) {
				strReturn = null;
			} else {
				byte[] byteArray = new byte[length];
				dis.read(byteArray);
				strReturn = new String(byteArray, utf8Charset);
			}
			return strReturn;
		}

		private void writeString(String str, DataOutputStream dos, ObjectOutputStream oos) throws IOException {
			if (str == null) {
				dos.writeInt(-1);
			} else {
				byte[] byteArray = str.getBytes(utf8Charset);
				dos.writeInt(byteArray.length);
				dos.write(byteArray);
			}
		}

		private java.util.Date readDate(DataInputStream dis, ObjectInputStream ois) throws IOException {
			java.util.Date dateReturn = null;
			int length = 0;
			length = dis.readByte();
			if (length == -1) {
				dateReturn = null;
			} else {
				dateReturn = new Date(dis.readLong());
			}
			return dateReturn;
		}

		private void writeDate(java.util.Date date1, DataOutputStream dos, ObjectOutputStream oos) throws IOException {
			if (date1 == null) {
				dos.writeByte(-1);
			} else {
				dos.writeByte(0);
				dos.writeLong(date1.getTime());
			}
		}

		public void readKeysData(ObjectInputStream dis) {

			synchronized (commonByteArrayLock_WIPO_PROJECTS_G2b_Mig_TM) {

				try {

					int length = 0;

					this.FILE_SEQ = readString(dis);

					this.FILE_TYPE = readString(dis);

					this.FILE_SERIES = (BigDecimal) dis.readObject();

					this.FILE_NBR = (BigDecimal) dis.readObject();

				} catch (IOException e) {
					throw new RuntimeException(e);

				} catch (ClassNotFoundException eCNFE) {
					throw new RuntimeException(eCNFE);

				}

			}

		}

		public void writeKeysData(ObjectOutputStream dos) {
			try {

				// String

				writeString(this.FILE_SEQ, dos);

				// String

				writeString(this.FILE_TYPE, dos);

				// BigDecimal

				dos.writeObject(this.FILE_SERIES);

				// BigDecimal

				dos.writeObject(this.FILE_NBR);

			} catch (IOException e) {
				throw new RuntimeException(e);
			}

		}

		/**
		 * Fill Values data by reading ObjectInputStream.
		 */
		public void readValuesData(DataInputStream dis, ObjectInputStream ois) {
			try {

				int length = 0;

				this.DOC_ORI = readString(dis, ois);

				this.DOC_SERIES = (BigDecimal) ois.readObject();

				this.DOC_NBR = (BigDecimal) ois.readObject();

				this.IND_IMPORT = (BigDecimal) ois.readObject();

				this.APPLICATION_TYPE = readString(dis, ois);

				this.APPLICATION_SUBTYPE = readString(dis, ois);

				this.LAW_CODE = (BigDecimal) ois.readObject();

				this.FILING_DATE = readDate(dis, ois);

				this.RECEPTION_DATE = readDate(dis, ois);

				this.PUBLICATION_DATE = readDate(dis, ois);

				this.PUBLICATION_NOTES = readString(dis, ois);

				this.IND_REGISTERED = (BigDecimal) ois.readObject();

				this.REGISTRATION_TYPE = readString(dis, ois);

				this.REGISTRATION_SERIES = (BigDecimal) ois.readObject();

				this.REGISTRATION_NBR = (BigDecimal) ois.readObject();

				this.REGISTRATION_DUP = readString(dis, ois);

				this.REGISTRATION_DATE = readDate(dis, ois);

				this.ENTITLEMENT_DATE = readDate(dis, ois);

				this.EXPIRATION_DATE = readDate(dis, ois);

				this.EXHIBITION_DATE = readDate(dis, ois);

				this.EXHIBITION_NOTES = readString(dis, ois);

				this.SIGN_TYPE = readString(dis, ois);

				this.MARK_NAME = readString(dis, ois);

				this.MARK_NAME_LANG2 = readString(dis, ois);

				this.MARK_TRANSLATION = readString(dis, ois);

				this.MARK_TRANSLATION_LANG2 = readString(dis, ois);

				this.MARK_TRANSLITERATION = readString(dis, ois);

				this.MARK_TRANSLITERATION_LANG2 = readString(dis, ois);

				this.SERIES_DESCRIPTION = readString(dis, ois);

				this.COLOUR_DESCRIPTION = readString(dis, ois);

				this.COLOUR_DESCR_LANG2 = readString(dis, ois);

				this.DISCLAIMER = readString(dis, ois);

				this.DISCLAIMER_LANG2 = readString(dis, ois);

				this.BY_CONSENT = readString(dis, ois);

				this.REGULATIONS = readString(dis, ois);

				this.NOTES = readString(dis, ois);

				this.CAPTURE_USER_ID = (BigDecimal) ois.readObject();

				this.CAPTURE_DATE = readDate(dis, ois);

				this.PUBLICATION_NBR = (BigDecimal) ois.readObject();

				this.PUBLICATION_SER = readString(dis, ois);

				this.PUBLICATION_TYP = readString(dis, ois);

				this.FIRST_PRIORITY_DATE = readDate(dis, ois);

				this.MAIN_OWNER_ADDR_NBR = (BigDecimal) ois.readObject();

				this.MAIN_OWNER_PERSON_NBR = (BigDecimal) ois.readObject();

				this.SERVICE_ADDR_NBR = (BigDecimal) ois.readObject();

				this.SERVICE_PERSON_NBR = (BigDecimal) ois.readObject();

				this.NICE_CLASS_TXT = readString(dis, ois);

				this.MARK_CODE = (BigDecimal) ois.readObject();

				this.PROC_TYP = readString(dis, ois);

				this.PROC_NBR = (BigDecimal) ois.readObject();

				this.STATUS_CODE = readString(dis, ois);

			} catch (IOException e) {
				throw new RuntimeException(e);

			} catch (ClassNotFoundException eCNFE) {
				throw new RuntimeException(eCNFE);

			}

		}

		/**
		 * Return a byte array which represents Values data.
		 */
		public void writeValuesData(DataOutputStream dos, ObjectOutputStream oos) {
			try {

				writeString(this.DOC_ORI, dos, oos);

				oos.writeObject(this.DOC_SERIES);

				oos.writeObject(this.DOC_NBR);

				oos.writeObject(this.IND_IMPORT);

				writeString(this.APPLICATION_TYPE, dos, oos);

				writeString(this.APPLICATION_SUBTYPE, dos, oos);

				oos.writeObject(this.LAW_CODE);

				writeDate(this.FILING_DATE, dos, oos);

				writeDate(this.RECEPTION_DATE, dos, oos);

				writeDate(this.PUBLICATION_DATE, dos, oos);

				writeString(this.PUBLICATION_NOTES, dos, oos);

				oos.writeObject(this.IND_REGISTERED);

				writeString(this.REGISTRATION_TYPE, dos, oos);

				oos.writeObject(this.REGISTRATION_SERIES);

				oos.writeObject(this.REGISTRATION_NBR);

				writeString(this.REGISTRATION_DUP, dos, oos);

				writeDate(this.REGISTRATION_DATE, dos, oos);

				writeDate(this.ENTITLEMENT_DATE, dos, oos);

				writeDate(this.EXPIRATION_DATE, dos, oos);

				writeDate(this.EXHIBITION_DATE, dos, oos);

				writeString(this.EXHIBITION_NOTES, dos, oos);

				writeString(this.SIGN_TYPE, dos, oos);

				writeString(this.MARK_NAME, dos, oos);

				writeString(this.MARK_NAME_LANG2, dos, oos);

				writeString(this.MARK_TRANSLATION, dos, oos);

				writeString(this.MARK_TRANSLATION_LANG2, dos, oos);

				writeString(this.MARK_TRANSLITERATION, dos, oos);

				writeString(this.MARK_TRANSLITERATION_LANG2, dos, oos);

				writeString(this.SERIES_DESCRIPTION, dos, oos);

				writeString(this.COLOUR_DESCRIPTION, dos, oos);

				writeString(this.COLOUR_DESCR_LANG2, dos, oos);

				writeString(this.DISCLAIMER, dos, oos);

				writeString(this.DISCLAIMER_LANG2, dos, oos);

				writeString(this.BY_CONSENT, dos, oos);

				writeString(this.REGULATIONS, dos, oos);

				writeString(this.NOTES, dos, oos);

				oos.writeObject(this.CAPTURE_USER_ID);

				writeDate(this.CAPTURE_DATE, dos, oos);

				oos.writeObject(this.PUBLICATION_NBR);

				writeString(this.PUBLICATION_SER, dos, oos);

				writeString(this.PUBLICATION_TYP, dos, oos);

				writeDate(this.FIRST_PRIORITY_DATE, dos, oos);

				oos.writeObject(this.MAIN_OWNER_ADDR_NBR);

				oos.writeObject(this.MAIN_OWNER_PERSON_NBR);

				oos.writeObject(this.SERVICE_ADDR_NBR);

				oos.writeObject(this.SERVICE_PERSON_NBR);

				writeString(this.NICE_CLASS_TXT, dos, oos);

				oos.writeObject(this.MARK_CODE);

				writeString(this.PROC_TYP, dos, oos);

				oos.writeObject(this.PROC_NBR);

				writeString(this.STATUS_CODE, dos, oos);

			} catch (IOException e) {
				throw new RuntimeException(e);
			}

		}

		public String toString() {

			StringBuilder sb = new StringBuilder();
			sb.append(super.toString());
			sb.append("[");
			sb.append("FILE_SEQ=" + FILE_SEQ);
			sb.append(",FILE_TYPE=" + FILE_TYPE);
			sb.append(",FILE_SERIES=" + String.valueOf(FILE_SERIES));
			sb.append(",FILE_NBR=" + String.valueOf(FILE_NBR));
			sb.append(",DOC_ORI=" + DOC_ORI);
			sb.append(",DOC_SERIES=" + String.valueOf(DOC_SERIES));
			sb.append(",DOC_NBR=" + String.valueOf(DOC_NBR));
			sb.append(",IND_IMPORT=" + String.valueOf(IND_IMPORT));
			sb.append(",APPLICATION_TYPE=" + APPLICATION_TYPE);
			sb.append(",APPLICATION_SUBTYPE=" + APPLICATION_SUBTYPE);
			sb.append(",LAW_CODE=" + String.valueOf(LAW_CODE));
			sb.append(",FILING_DATE=" + String.valueOf(FILING_DATE));
			sb.append(",RECEPTION_DATE=" + String.valueOf(RECEPTION_DATE));
			sb.append(",PUBLICATION_DATE=" + String.valueOf(PUBLICATION_DATE));
			sb.append(",PUBLICATION_NOTES=" + PUBLICATION_NOTES);
			sb.append(",IND_REGISTERED=" + String.valueOf(IND_REGISTERED));
			sb.append(",REGISTRATION_TYPE=" + REGISTRATION_TYPE);
			sb.append(",REGISTRATION_SERIES=" + String.valueOf(REGISTRATION_SERIES));
			sb.append(",REGISTRATION_NBR=" + String.valueOf(REGISTRATION_NBR));
			sb.append(",REGISTRATION_DUP=" + REGISTRATION_DUP);
			sb.append(",REGISTRATION_DATE=" + String.valueOf(REGISTRATION_DATE));
			sb.append(",ENTITLEMENT_DATE=" + String.valueOf(ENTITLEMENT_DATE));
			sb.append(",EXPIRATION_DATE=" + String.valueOf(EXPIRATION_DATE));
			sb.append(",EXHIBITION_DATE=" + String.valueOf(EXHIBITION_DATE));
			sb.append(",EXHIBITION_NOTES=" + EXHIBITION_NOTES);
			sb.append(",SIGN_TYPE=" + SIGN_TYPE);
			sb.append(",MARK_NAME=" + MARK_NAME);
			sb.append(",MARK_NAME_LANG2=" + MARK_NAME_LANG2);
			sb.append(",MARK_TRANSLATION=" + MARK_TRANSLATION);
			sb.append(",MARK_TRANSLATION_LANG2=" + MARK_TRANSLATION_LANG2);
			sb.append(",MARK_TRANSLITERATION=" + MARK_TRANSLITERATION);
			sb.append(",MARK_TRANSLITERATION_LANG2=" + MARK_TRANSLITERATION_LANG2);
			sb.append(",SERIES_DESCRIPTION=" + SERIES_DESCRIPTION);
			sb.append(",COLOUR_DESCRIPTION=" + COLOUR_DESCRIPTION);
			sb.append(",COLOUR_DESCR_LANG2=" + COLOUR_DESCR_LANG2);
			sb.append(",DISCLAIMER=" + DISCLAIMER);
			sb.append(",DISCLAIMER_LANG2=" + DISCLAIMER_LANG2);
			sb.append(",BY_CONSENT=" + BY_CONSENT);
			sb.append(",REGULATIONS=" + REGULATIONS);
			sb.append(",NOTES=" + NOTES);
			sb.append(",CAPTURE_USER_ID=" + String.valueOf(CAPTURE_USER_ID));
			sb.append(",CAPTURE_DATE=" + String.valueOf(CAPTURE_DATE));
			sb.append(",PUBLICATION_NBR=" + String.valueOf(PUBLICATION_NBR));
			sb.append(",PUBLICATION_SER=" + PUBLICATION_SER);
			sb.append(",PUBLICATION_TYP=" + PUBLICATION_TYP);
			sb.append(",FIRST_PRIORITY_DATE=" + String.valueOf(FIRST_PRIORITY_DATE));
			sb.append(",MAIN_OWNER_ADDR_NBR=" + String.valueOf(MAIN_OWNER_ADDR_NBR));
			sb.append(",MAIN_OWNER_PERSON_NBR=" + String.valueOf(MAIN_OWNER_PERSON_NBR));
			sb.append(",SERVICE_ADDR_NBR=" + String.valueOf(SERVICE_ADDR_NBR));
			sb.append(",SERVICE_PERSON_NBR=" + String.valueOf(SERVICE_PERSON_NBR));
			sb.append(",NICE_CLASS_TXT=" + NICE_CLASS_TXT);
			sb.append(",MARK_CODE=" + String.valueOf(MARK_CODE));
			sb.append(",PROC_TYP=" + PROC_TYP);
			sb.append(",PROC_NBR=" + String.valueOf(PROC_NBR));
			sb.append(",STATUS_CODE=" + STATUS_CODE);
			sb.append("]");

			return sb.toString();
		}

		/**
		 * Compare keys
		 */
		public int compareTo(row16Struct other) {

			int returnValue = -1;

			returnValue = checkNullsAndCompare(this.FILE_SEQ, other.FILE_SEQ);
			if (returnValue != 0) {
				return returnValue;
			}

			returnValue = checkNullsAndCompare(this.FILE_TYPE, other.FILE_TYPE);
			if (returnValue != 0) {
				return returnValue;
			}

			returnValue = checkNullsAndCompare(this.FILE_SERIES, other.FILE_SERIES);
			if (returnValue != 0) {
				return returnValue;
			}

			returnValue = checkNullsAndCompare(this.FILE_NBR, other.FILE_NBR);
			if (returnValue != 0) {
				return returnValue;
			}

			return returnValue;
		}

		private int checkNullsAndCompare(Object object1, Object object2) {
			int returnValue = 0;
			if (object1 instanceof Comparable && object2 instanceof Comparable) {
				returnValue = ((Comparable) object1).compareTo(object2);
			} else if (object1 != null && object2 != null) {
				returnValue = compareStrings(object1.toString(), object2.toString());
			} else if (object1 == null && object2 != null) {
				returnValue = 1;
			} else if (object1 != null && object2 == null) {
				returnValue = -1;
			} else {
				returnValue = 0;
			}

			return returnValue;
		}

		private int compareStrings(String string1, String string2) {
			return string1.compareTo(string2);
		}

	}

	public void tDBInput_16Process(final java.util.Map<String, Object> globalMap) throws TalendException {
		globalMap.put("tDBInput_16_SUBPROCESS_STATE", 0);

		final boolean execStat = this.execStat;

		String iterateId = "";

		String currentComponent = "";
		java.util.Map<String, Object> resourceMap = new java.util.HashMap<String, Object>();

		try {
			// TDI-39566 avoid throwing an useless Exception
			boolean resumeIt = true;
			if (globalResumeTicket == false && resumeEntryMethodName != null) {
				String currentMethodName = new java.lang.Exception().getStackTrace()[0].getMethodName();
				resumeIt = resumeEntryMethodName.equals(currentMethodName);
			}
			if (resumeIt || globalResumeTicket) { // start the resume
				globalResumeTicket = true;

				row16Struct row16 = new row16Struct();

				/**
				 * [tAdvancedHash_row16 begin ] start
				 */

				ok_Hash.put("tAdvancedHash_row16", false);
				start_Hash.put("tAdvancedHash_row16", System.currentTimeMillis());

				currentComponent = "tAdvancedHash_row16";

				if (execStat) {
					runStat.updateStatOnConnection(resourceMap, iterateId, 0, 0, "row16");
				}

				int tos_count_tAdvancedHash_row16 = 0;

				// connection name:row16
				// source node:tDBInput_16 - inputs:(after_tDBInput_17) outputs:(row16,row16) |
				// target node:tAdvancedHash_row16 - inputs:(row16) outputs:()
				// linked node: tMap_6 - inputs:(row15,row16) outputs:(wrk_actions)

				org.talend.designer.components.lookup.common.ICommonLookup.MATCHING_MODE matchingModeEnum_row16 = org.talend.designer.components.lookup.common.ICommonLookup.MATCHING_MODE.UNIQUE_MATCH;

				org.talend.designer.components.lookup.memory.AdvancedMemoryLookup<row16Struct> tHash_Lookup_row16 = org.talend.designer.components.lookup.memory.AdvancedMemoryLookup
						.<row16Struct>getLookup(matchingModeEnum_row16);

				globalMap.put("tHash_Lookup_row16", tHash_Lookup_row16);

				/**
				 * [tAdvancedHash_row16 begin ] stop
				 */

				/**
				 * [tDBInput_16 begin ] start
				 */

				ok_Hash.put("tDBInput_16", false);
				start_Hash.put("tDBInput_16", System.currentTimeMillis());

				currentComponent = "tDBInput_16";

				int tos_count_tDBInput_16 = 0;

				org.talend.designer.components.util.mssql.MSSqlGenerateTimestampUtil mssqlGTU_tDBInput_16 = org.talend.designer.components.util.mssql.MSSqlUtilFactory
						.getMSSqlGenerateTimestampUtil();

				java.util.List<String> talendToDBList_tDBInput_16 = new java.util.ArrayList();
				String[] talendToDBArray_tDBInput_16 = new String[] { "FLOAT", "NUMERIC", "NUMERIC IDENTITY", "DECIMAL",
						"DECIMAL IDENTITY", "REAL" };
				java.util.Collections.addAll(talendToDBList_tDBInput_16, talendToDBArray_tDBInput_16);
				int nb_line_tDBInput_16 = 0;
				java.sql.Connection conn_tDBInput_16 = null;
				String driverClass_tDBInput_16 = "net.sourceforge.jtds.jdbc.Driver";
				java.lang.Class jdbcclazz_tDBInput_16 = java.lang.Class.forName(driverClass_tDBInput_16);
				String dbUser_tDBInput_16 = "ADMIN";

				final String decryptedPassword_tDBInput_16 = routines.system.PasswordEncryptUtil
						.decryptPassword("enc:routine.encryption.key.v1:BMZ30UWrZR+hh1qepvUhhhgbtQzp0uKAB9zwPpR8Kj5S");

				String dbPwd_tDBInput_16 = decryptedPassword_tDBInput_16;

				String port_tDBInput_16 = "1433";
				String dbname_tDBInput_16 = "MARCAS_PY";
				String url_tDBInput_16 = "jdbc:jtds:sqlserver://" + "localhost";
				if (!"".equals(port_tDBInput_16)) {
					url_tDBInput_16 += ":" + "1433";
				}
				if (!"".equals(dbname_tDBInput_16)) {
					url_tDBInput_16 += "//" + "MARCAS_PY";
				}
				url_tDBInput_16 += ";appName=" + projectName + ";" + "";
				String dbschema_tDBInput_16 = "ADMIN";

				conn_tDBInput_16 = java.sql.DriverManager.getConnection(url_tDBInput_16, dbUser_tDBInput_16,
						dbPwd_tDBInput_16);

				java.sql.Statement stmt_tDBInput_16 = conn_tDBInput_16.createStatement();

				String dbquery_tDBInput_16 = "SELECT ADMIN.WRK_MARK.FILE_SEQ,\n		ADMIN.WRK_MARK.FILE_TYPE,\n		ADMIN.WRK_MARK.FILE_SERIES,\n		ADMIN.WRK_MARK.FILE_NBR,\n		"
						+ "ADMIN.WRK_MARK.DOC_ORI,\n		ADMIN.WRK_MARK.DOC_SERIES,\n		ADMIN.WRK_MARK.DOC_NBR,\n		ADMIN.WRK_MARK.IND_IMPORT,\n		ADMIN.WRK_"
						+ "MARK.APPLICATION_TYPE,\n		ADMIN.WRK_MARK.APPLICATION_SUBTYPE,\n		ADMIN.WRK_MARK.LAW_CODE,\n		ADMIN.WRK_MARK.FILING_DATE,\n		"
						+ "ADMIN.WRK_MARK.RECEPTION_DATE,\n		ADMIN.WRK_MARK.PUBLICATION_DATE,\n		ADMIN.WRK_MARK.PUBLICATION_NOTES,\n		ADMIN.WRK_MARK.I"
						+ "ND_REGISTERED,\n		ADMIN.WRK_MARK.REGISTRATION_TYPE,\n		ADMIN.WRK_MARK.REGISTRATION_SERIES,\n		ADMIN.WRK_MARK.REGISTRATION_N"
						+ "BR,\n		ADMIN.WRK_MARK.REGISTRATION_DUP,\n		ADMIN.WRK_MARK.REGISTRATION_DATE,\n		ADMIN.WRK_MARK.ENTITLEMENT_DATE,\n		ADMIN.WR"
						+ "K_MARK.EXPIRATION_DATE,\n		ADMIN.WRK_MARK.EXHIBITION_DATE,\n		ADMIN.WRK_MARK.EXHIBITION_NOTES,\n		ADMIN.WRK_MARK.SIGN_TYPE,"
						+ "\n		ADMIN.WRK_MARK.MARK_NAME,\n		ADMIN.WRK_MARK.MARK_NAME_LANG2,\n		ADMIN.WRK_MARK.MARK_TRANSLATION,\n		ADMIN.WRK_MARK.MARK_"
						+ "TRANSLATION_LANG2,\n		ADMIN.WRK_MARK.MARK_TRANSLITERATION,\n		ADMIN.WRK_MARK.MARK_TRANSLITERATION_LANG2,\n		ADMIN.WRK_MARK."
						+ "SERIES_DESCRIPTION,\n		ADMIN.WRK_MARK.COLOUR_DESCRIPTION,\n		ADMIN.WRK_MARK.COLOUR_DESCR_LANG2,\n		ADMIN.WRK_MARK.DISCLAIME"
						+ "R,\n		ADMIN.WRK_MARK.DISCLAIMER_LANG2,\n		ADMIN.WRK_MARK.BY_CONSENT,\n		ADMIN.WRK_MARK.REGULATIONS,\n		ADMIN.WRK_MARK.NOTES,"
						+ "\n		ADMIN.WRK_MARK.CAPTURE_USER_ID,\n		ADMIN.WRK_MARK.CAPTURE_DATE,\n		ADMIN.WRK_MARK.PUBLICATION_NBR,\n		ADMIN.WRK_MARK.PUB"
						+ "LICATION_SER,\n		ADMIN.WRK_MARK.PUBLICATION_TYP,\n		ADMIN.WRK_MARK.FIRST_PRIORITY_DATE,\n		ADMIN.WRK_MARK.MAIN_OWNER_ADDR_N"
						+ "BR,\n		ADMIN.WRK_MARK.MAIN_OWNER_PERSON_NBR,\n		ADMIN.WRK_MARK.SERVICE_ADDR_NBR,\n		ADMIN.WRK_MARK.SERVICE_PERSON_NBR,\n		AD"
						+ "MIN.WRK_MARK.NICE_CLASS_TXT,\n		ADMIN.WRK_MARK.MARK_CODE,\n		ADMIN.WRK_MARK.PROC_TYP,\n		ADMIN.WRK_MARK.PROC_NBR,\n		ADMIN.W"
						+ "RK_MARK.STATUS_CODE\nFROM	ADMIN.WRK_MARK";

				globalMap.put("tDBInput_16_QUERY", dbquery_tDBInput_16);
				java.sql.ResultSet rs_tDBInput_16 = null;

				try {
					rs_tDBInput_16 = stmt_tDBInput_16.executeQuery(dbquery_tDBInput_16);
					java.sql.ResultSetMetaData rsmd_tDBInput_16 = rs_tDBInput_16.getMetaData();
					int colQtyInRs_tDBInput_16 = rsmd_tDBInput_16.getColumnCount();

					String tmpContent_tDBInput_16 = null;

					while (rs_tDBInput_16.next()) {
						nb_line_tDBInput_16++;

						if (colQtyInRs_tDBInput_16 < 1) {
							row16.FILE_SEQ = null;
						} else {

							tmpContent_tDBInput_16 = rs_tDBInput_16.getString(1);
							if (tmpContent_tDBInput_16 != null) {
								if (talendToDBList_tDBInput_16.contains(
										rsmd_tDBInput_16.getColumnTypeName(1).toUpperCase(java.util.Locale.ENGLISH))) {
									row16.FILE_SEQ = FormatterUtils.formatUnwithE(tmpContent_tDBInput_16);
								} else {
									row16.FILE_SEQ = tmpContent_tDBInput_16;
								}
							} else {
								row16.FILE_SEQ = null;
							}
						}
						if (colQtyInRs_tDBInput_16 < 2) {
							row16.FILE_TYPE = null;
						} else {

							tmpContent_tDBInput_16 = rs_tDBInput_16.getString(2);
							if (tmpContent_tDBInput_16 != null) {
								if (talendToDBList_tDBInput_16.contains(
										rsmd_tDBInput_16.getColumnTypeName(2).toUpperCase(java.util.Locale.ENGLISH))) {
									row16.FILE_TYPE = FormatterUtils.formatUnwithE(tmpContent_tDBInput_16);
								} else {
									row16.FILE_TYPE = tmpContent_tDBInput_16;
								}
							} else {
								row16.FILE_TYPE = null;
							}
						}
						if (colQtyInRs_tDBInput_16 < 3) {
							row16.FILE_SERIES = null;
						} else {

							row16.FILE_SERIES = rs_tDBInput_16.getBigDecimal(3);
							if (rs_tDBInput_16.wasNull()) {
								throw new RuntimeException("Null value in non-Nullable column");
							}
						}
						if (colQtyInRs_tDBInput_16 < 4) {
							row16.FILE_NBR = null;
						} else {

							row16.FILE_NBR = rs_tDBInput_16.getBigDecimal(4);
							if (rs_tDBInput_16.wasNull()) {
								throw new RuntimeException("Null value in non-Nullable column");
							}
						}
						if (colQtyInRs_tDBInput_16 < 5) {
							row16.DOC_ORI = null;
						} else {

							tmpContent_tDBInput_16 = rs_tDBInput_16.getString(5);
							if (tmpContent_tDBInput_16 != null) {
								if (talendToDBList_tDBInput_16.contains(
										rsmd_tDBInput_16.getColumnTypeName(5).toUpperCase(java.util.Locale.ENGLISH))) {
									row16.DOC_ORI = FormatterUtils.formatUnwithE(tmpContent_tDBInput_16);
								} else {
									row16.DOC_ORI = tmpContent_tDBInput_16;
								}
							} else {
								row16.DOC_ORI = null;
							}
						}
						if (colQtyInRs_tDBInput_16 < 6) {
							row16.DOC_SERIES = null;
						} else {

							row16.DOC_SERIES = rs_tDBInput_16.getBigDecimal(6);
							if (rs_tDBInput_16.wasNull()) {
								row16.DOC_SERIES = null;
							}
						}
						if (colQtyInRs_tDBInput_16 < 7) {
							row16.DOC_NBR = null;
						} else {

							row16.DOC_NBR = rs_tDBInput_16.getBigDecimal(7);
							if (rs_tDBInput_16.wasNull()) {
								row16.DOC_NBR = null;
							}
						}
						if (colQtyInRs_tDBInput_16 < 8) {
							row16.IND_IMPORT = null;
						} else {

							row16.IND_IMPORT = rs_tDBInput_16.getBigDecimal(8);
							if (rs_tDBInput_16.wasNull()) {
								row16.IND_IMPORT = null;
							}
						}
						if (colQtyInRs_tDBInput_16 < 9) {
							row16.APPLICATION_TYPE = null;
						} else {

							tmpContent_tDBInput_16 = rs_tDBInput_16.getString(9);
							if (tmpContent_tDBInput_16 != null) {
								if (talendToDBList_tDBInput_16.contains(
										rsmd_tDBInput_16.getColumnTypeName(9).toUpperCase(java.util.Locale.ENGLISH))) {
									row16.APPLICATION_TYPE = FormatterUtils.formatUnwithE(tmpContent_tDBInput_16);
								} else {
									row16.APPLICATION_TYPE = tmpContent_tDBInput_16;
								}
							} else {
								row16.APPLICATION_TYPE = null;
							}
						}
						if (colQtyInRs_tDBInput_16 < 10) {
							row16.APPLICATION_SUBTYPE = null;
						} else {

							tmpContent_tDBInput_16 = rs_tDBInput_16.getString(10);
							if (tmpContent_tDBInput_16 != null) {
								if (talendToDBList_tDBInput_16.contains(
										rsmd_tDBInput_16.getColumnTypeName(10).toUpperCase(java.util.Locale.ENGLISH))) {
									row16.APPLICATION_SUBTYPE = FormatterUtils.formatUnwithE(tmpContent_tDBInput_16);
								} else {
									row16.APPLICATION_SUBTYPE = tmpContent_tDBInput_16;
								}
							} else {
								row16.APPLICATION_SUBTYPE = null;
							}
						}
						if (colQtyInRs_tDBInput_16 < 11) {
							row16.LAW_CODE = null;
						} else {

							row16.LAW_CODE = rs_tDBInput_16.getBigDecimal(11);
							if (rs_tDBInput_16.wasNull()) {
								throw new RuntimeException("Null value in non-Nullable column");
							}
						}
						if (colQtyInRs_tDBInput_16 < 12) {
							row16.FILING_DATE = null;
						} else {

							row16.FILING_DATE = mssqlGTU_tDBInput_16.getDate(rsmd_tDBInput_16, rs_tDBInput_16, 12);

						}
						if (colQtyInRs_tDBInput_16 < 13) {
							row16.RECEPTION_DATE = null;
						} else {

							row16.RECEPTION_DATE = mssqlGTU_tDBInput_16.getDate(rsmd_tDBInput_16, rs_tDBInput_16, 13);

						}
						if (colQtyInRs_tDBInput_16 < 14) {
							row16.PUBLICATION_DATE = null;
						} else {

							row16.PUBLICATION_DATE = mssqlGTU_tDBInput_16.getDate(rsmd_tDBInput_16, rs_tDBInput_16, 14);

						}
						if (colQtyInRs_tDBInput_16 < 15) {
							row16.PUBLICATION_NOTES = null;
						} else {

							tmpContent_tDBInput_16 = rs_tDBInput_16.getString(15);
							if (tmpContent_tDBInput_16 != null) {
								if (talendToDBList_tDBInput_16.contains(
										rsmd_tDBInput_16.getColumnTypeName(15).toUpperCase(java.util.Locale.ENGLISH))) {
									row16.PUBLICATION_NOTES = FormatterUtils.formatUnwithE(tmpContent_tDBInput_16);
								} else {
									row16.PUBLICATION_NOTES = tmpContent_tDBInput_16;
								}
							} else {
								row16.PUBLICATION_NOTES = null;
							}
						}
						if (colQtyInRs_tDBInput_16 < 16) {
							row16.IND_REGISTERED = null;
						} else {

							row16.IND_REGISTERED = rs_tDBInput_16.getBigDecimal(16);
							if (rs_tDBInput_16.wasNull()) {
								row16.IND_REGISTERED = null;
							}
						}
						if (colQtyInRs_tDBInput_16 < 17) {
							row16.REGISTRATION_TYPE = null;
						} else {

							tmpContent_tDBInput_16 = rs_tDBInput_16.getString(17);
							if (tmpContent_tDBInput_16 != null) {
								if (talendToDBList_tDBInput_16.contains(
										rsmd_tDBInput_16.getColumnTypeName(17).toUpperCase(java.util.Locale.ENGLISH))) {
									row16.REGISTRATION_TYPE = FormatterUtils.formatUnwithE(tmpContent_tDBInput_16);
								} else {
									row16.REGISTRATION_TYPE = tmpContent_tDBInput_16;
								}
							} else {
								row16.REGISTRATION_TYPE = null;
							}
						}
						if (colQtyInRs_tDBInput_16 < 18) {
							row16.REGISTRATION_SERIES = null;
						} else {

							row16.REGISTRATION_SERIES = rs_tDBInput_16.getBigDecimal(18);
							if (rs_tDBInput_16.wasNull()) {
								row16.REGISTRATION_SERIES = null;
							}
						}
						if (colQtyInRs_tDBInput_16 < 19) {
							row16.REGISTRATION_NBR = null;
						} else {

							row16.REGISTRATION_NBR = rs_tDBInput_16.getBigDecimal(19);
							if (rs_tDBInput_16.wasNull()) {
								row16.REGISTRATION_NBR = null;
							}
						}
						if (colQtyInRs_tDBInput_16 < 20) {
							row16.REGISTRATION_DUP = null;
						} else {

							tmpContent_tDBInput_16 = rs_tDBInput_16.getString(20);
							if (tmpContent_tDBInput_16 != null) {
								if (talendToDBList_tDBInput_16.contains(
										rsmd_tDBInput_16.getColumnTypeName(20).toUpperCase(java.util.Locale.ENGLISH))) {
									row16.REGISTRATION_DUP = FormatterUtils.formatUnwithE(tmpContent_tDBInput_16);
								} else {
									row16.REGISTRATION_DUP = tmpContent_tDBInput_16;
								}
							} else {
								row16.REGISTRATION_DUP = null;
							}
						}
						if (colQtyInRs_tDBInput_16 < 21) {
							row16.REGISTRATION_DATE = null;
						} else {

							row16.REGISTRATION_DATE = mssqlGTU_tDBInput_16.getDate(rsmd_tDBInput_16, rs_tDBInput_16,
									21);

						}
						if (colQtyInRs_tDBInput_16 < 22) {
							row16.ENTITLEMENT_DATE = null;
						} else {

							row16.ENTITLEMENT_DATE = mssqlGTU_tDBInput_16.getDate(rsmd_tDBInput_16, rs_tDBInput_16, 22);

						}
						if (colQtyInRs_tDBInput_16 < 23) {
							row16.EXPIRATION_DATE = null;
						} else {

							row16.EXPIRATION_DATE = mssqlGTU_tDBInput_16.getDate(rsmd_tDBInput_16, rs_tDBInput_16, 23);

						}
						if (colQtyInRs_tDBInput_16 < 24) {
							row16.EXHIBITION_DATE = null;
						} else {

							row16.EXHIBITION_DATE = mssqlGTU_tDBInput_16.getDate(rsmd_tDBInput_16, rs_tDBInput_16, 24);

						}
						if (colQtyInRs_tDBInput_16 < 25) {
							row16.EXHIBITION_NOTES = null;
						} else {

							tmpContent_tDBInput_16 = rs_tDBInput_16.getString(25);
							if (tmpContent_tDBInput_16 != null) {
								if (talendToDBList_tDBInput_16.contains(
										rsmd_tDBInput_16.getColumnTypeName(25).toUpperCase(java.util.Locale.ENGLISH))) {
									row16.EXHIBITION_NOTES = FormatterUtils.formatUnwithE(tmpContent_tDBInput_16);
								} else {
									row16.EXHIBITION_NOTES = tmpContent_tDBInput_16;
								}
							} else {
								row16.EXHIBITION_NOTES = null;
							}
						}
						if (colQtyInRs_tDBInput_16 < 26) {
							row16.SIGN_TYPE = null;
						} else {

							tmpContent_tDBInput_16 = rs_tDBInput_16.getString(26);
							if (tmpContent_tDBInput_16 != null) {
								if (talendToDBList_tDBInput_16.contains(
										rsmd_tDBInput_16.getColumnTypeName(26).toUpperCase(java.util.Locale.ENGLISH))) {
									row16.SIGN_TYPE = FormatterUtils.formatUnwithE(tmpContent_tDBInput_16);
								} else {
									row16.SIGN_TYPE = tmpContent_tDBInput_16;
								}
							} else {
								row16.SIGN_TYPE = null;
							}
						}
						if (colQtyInRs_tDBInput_16 < 27) {
							row16.MARK_NAME = null;
						} else {

							tmpContent_tDBInput_16 = rs_tDBInput_16.getString(27);
							if (tmpContent_tDBInput_16 != null) {
								if (talendToDBList_tDBInput_16.contains(
										rsmd_tDBInput_16.getColumnTypeName(27).toUpperCase(java.util.Locale.ENGLISH))) {
									row16.MARK_NAME = FormatterUtils.formatUnwithE(tmpContent_tDBInput_16);
								} else {
									row16.MARK_NAME = tmpContent_tDBInput_16;
								}
							} else {
								row16.MARK_NAME = null;
							}
						}
						if (colQtyInRs_tDBInput_16 < 28) {
							row16.MARK_NAME_LANG2 = null;
						} else {

							tmpContent_tDBInput_16 = rs_tDBInput_16.getString(28);
							if (tmpContent_tDBInput_16 != null) {
								if (talendToDBList_tDBInput_16.contains(
										rsmd_tDBInput_16.getColumnTypeName(28).toUpperCase(java.util.Locale.ENGLISH))) {
									row16.MARK_NAME_LANG2 = FormatterUtils.formatUnwithE(tmpContent_tDBInput_16);
								} else {
									row16.MARK_NAME_LANG2 = tmpContent_tDBInput_16;
								}
							} else {
								row16.MARK_NAME_LANG2 = null;
							}
						}
						if (colQtyInRs_tDBInput_16 < 29) {
							row16.MARK_TRANSLATION = null;
						} else {

							tmpContent_tDBInput_16 = rs_tDBInput_16.getString(29);
							if (tmpContent_tDBInput_16 != null) {
								if (talendToDBList_tDBInput_16.contains(
										rsmd_tDBInput_16.getColumnTypeName(29).toUpperCase(java.util.Locale.ENGLISH))) {
									row16.MARK_TRANSLATION = FormatterUtils.formatUnwithE(tmpContent_tDBInput_16);
								} else {
									row16.MARK_TRANSLATION = tmpContent_tDBInput_16;
								}
							} else {
								row16.MARK_TRANSLATION = null;
							}
						}
						if (colQtyInRs_tDBInput_16 < 30) {
							row16.MARK_TRANSLATION_LANG2 = null;
						} else {

							tmpContent_tDBInput_16 = rs_tDBInput_16.getString(30);
							if (tmpContent_tDBInput_16 != null) {
								if (talendToDBList_tDBInput_16.contains(
										rsmd_tDBInput_16.getColumnTypeName(30).toUpperCase(java.util.Locale.ENGLISH))) {
									row16.MARK_TRANSLATION_LANG2 = FormatterUtils.formatUnwithE(tmpContent_tDBInput_16);
								} else {
									row16.MARK_TRANSLATION_LANG2 = tmpContent_tDBInput_16;
								}
							} else {
								row16.MARK_TRANSLATION_LANG2 = null;
							}
						}
						if (colQtyInRs_tDBInput_16 < 31) {
							row16.MARK_TRANSLITERATION = null;
						} else {

							tmpContent_tDBInput_16 = rs_tDBInput_16.getString(31);
							if (tmpContent_tDBInput_16 != null) {
								if (talendToDBList_tDBInput_16.contains(
										rsmd_tDBInput_16.getColumnTypeName(31).toUpperCase(java.util.Locale.ENGLISH))) {
									row16.MARK_TRANSLITERATION = FormatterUtils.formatUnwithE(tmpContent_tDBInput_16);
								} else {
									row16.MARK_TRANSLITERATION = tmpContent_tDBInput_16;
								}
							} else {
								row16.MARK_TRANSLITERATION = null;
							}
						}
						if (colQtyInRs_tDBInput_16 < 32) {
							row16.MARK_TRANSLITERATION_LANG2 = null;
						} else {

							tmpContent_tDBInput_16 = rs_tDBInput_16.getString(32);
							if (tmpContent_tDBInput_16 != null) {
								if (talendToDBList_tDBInput_16.contains(
										rsmd_tDBInput_16.getColumnTypeName(32).toUpperCase(java.util.Locale.ENGLISH))) {
									row16.MARK_TRANSLITERATION_LANG2 = FormatterUtils
											.formatUnwithE(tmpContent_tDBInput_16);
								} else {
									row16.MARK_TRANSLITERATION_LANG2 = tmpContent_tDBInput_16;
								}
							} else {
								row16.MARK_TRANSLITERATION_LANG2 = null;
							}
						}
						if (colQtyInRs_tDBInput_16 < 33) {
							row16.SERIES_DESCRIPTION = null;
						} else {

							tmpContent_tDBInput_16 = rs_tDBInput_16.getString(33);
							if (tmpContent_tDBInput_16 != null) {
								if (talendToDBList_tDBInput_16.contains(
										rsmd_tDBInput_16.getColumnTypeName(33).toUpperCase(java.util.Locale.ENGLISH))) {
									row16.SERIES_DESCRIPTION = FormatterUtils.formatUnwithE(tmpContent_tDBInput_16);
								} else {
									row16.SERIES_DESCRIPTION = tmpContent_tDBInput_16;
								}
							} else {
								row16.SERIES_DESCRIPTION = null;
							}
						}
						if (colQtyInRs_tDBInput_16 < 34) {
							row16.COLOUR_DESCRIPTION = null;
						} else {

							tmpContent_tDBInput_16 = rs_tDBInput_16.getString(34);
							if (tmpContent_tDBInput_16 != null) {
								if (talendToDBList_tDBInput_16.contains(
										rsmd_tDBInput_16.getColumnTypeName(34).toUpperCase(java.util.Locale.ENGLISH))) {
									row16.COLOUR_DESCRIPTION = FormatterUtils.formatUnwithE(tmpContent_tDBInput_16);
								} else {
									row16.COLOUR_DESCRIPTION = tmpContent_tDBInput_16;
								}
							} else {
								row16.COLOUR_DESCRIPTION = null;
							}
						}
						if (colQtyInRs_tDBInput_16 < 35) {
							row16.COLOUR_DESCR_LANG2 = null;
						} else {

							tmpContent_tDBInput_16 = rs_tDBInput_16.getString(35);
							if (tmpContent_tDBInput_16 != null) {
								if (talendToDBList_tDBInput_16.contains(
										rsmd_tDBInput_16.getColumnTypeName(35).toUpperCase(java.util.Locale.ENGLISH))) {
									row16.COLOUR_DESCR_LANG2 = FormatterUtils.formatUnwithE(tmpContent_tDBInput_16);
								} else {
									row16.COLOUR_DESCR_LANG2 = tmpContent_tDBInput_16;
								}
							} else {
								row16.COLOUR_DESCR_LANG2 = null;
							}
						}
						if (colQtyInRs_tDBInput_16 < 36) {
							row16.DISCLAIMER = null;
						} else {

							tmpContent_tDBInput_16 = rs_tDBInput_16.getString(36);
							if (tmpContent_tDBInput_16 != null) {
								if (talendToDBList_tDBInput_16.contains(
										rsmd_tDBInput_16.getColumnTypeName(36).toUpperCase(java.util.Locale.ENGLISH))) {
									row16.DISCLAIMER = FormatterUtils.formatUnwithE(tmpContent_tDBInput_16);
								} else {
									row16.DISCLAIMER = tmpContent_tDBInput_16;
								}
							} else {
								row16.DISCLAIMER = null;
							}
						}
						if (colQtyInRs_tDBInput_16 < 37) {
							row16.DISCLAIMER_LANG2 = null;
						} else {

							tmpContent_tDBInput_16 = rs_tDBInput_16.getString(37);
							if (tmpContent_tDBInput_16 != null) {
								if (talendToDBList_tDBInput_16.contains(
										rsmd_tDBInput_16.getColumnTypeName(37).toUpperCase(java.util.Locale.ENGLISH))) {
									row16.DISCLAIMER_LANG2 = FormatterUtils.formatUnwithE(tmpContent_tDBInput_16);
								} else {
									row16.DISCLAIMER_LANG2 = tmpContent_tDBInput_16;
								}
							} else {
								row16.DISCLAIMER_LANG2 = null;
							}
						}
						if (colQtyInRs_tDBInput_16 < 38) {
							row16.BY_CONSENT = null;
						} else {

							tmpContent_tDBInput_16 = rs_tDBInput_16.getString(38);
							if (tmpContent_tDBInput_16 != null) {
								if (talendToDBList_tDBInput_16.contains(
										rsmd_tDBInput_16.getColumnTypeName(38).toUpperCase(java.util.Locale.ENGLISH))) {
									row16.BY_CONSENT = FormatterUtils.formatUnwithE(tmpContent_tDBInput_16);
								} else {
									row16.BY_CONSENT = tmpContent_tDBInput_16;
								}
							} else {
								row16.BY_CONSENT = null;
							}
						}
						if (colQtyInRs_tDBInput_16 < 39) {
							row16.REGULATIONS = null;
						} else {

							tmpContent_tDBInput_16 = rs_tDBInput_16.getString(39);
							if (tmpContent_tDBInput_16 != null) {
								if (talendToDBList_tDBInput_16.contains(
										rsmd_tDBInput_16.getColumnTypeName(39).toUpperCase(java.util.Locale.ENGLISH))) {
									row16.REGULATIONS = FormatterUtils.formatUnwithE(tmpContent_tDBInput_16);
								} else {
									row16.REGULATIONS = tmpContent_tDBInput_16;
								}
							} else {
								row16.REGULATIONS = null;
							}
						}
						if (colQtyInRs_tDBInput_16 < 40) {
							row16.NOTES = null;
						} else {

							tmpContent_tDBInput_16 = rs_tDBInput_16.getString(40);
							if (tmpContent_tDBInput_16 != null) {
								if (talendToDBList_tDBInput_16.contains(
										rsmd_tDBInput_16.getColumnTypeName(40).toUpperCase(java.util.Locale.ENGLISH))) {
									row16.NOTES = FormatterUtils.formatUnwithE(tmpContent_tDBInput_16);
								} else {
									row16.NOTES = tmpContent_tDBInput_16;
								}
							} else {
								row16.NOTES = null;
							}
						}
						if (colQtyInRs_tDBInput_16 < 41) {
							row16.CAPTURE_USER_ID = null;
						} else {

							row16.CAPTURE_USER_ID = rs_tDBInput_16.getBigDecimal(41);
							if (rs_tDBInput_16.wasNull()) {
								row16.CAPTURE_USER_ID = null;
							}
						}
						if (colQtyInRs_tDBInput_16 < 42) {
							row16.CAPTURE_DATE = null;
						} else {

							row16.CAPTURE_DATE = mssqlGTU_tDBInput_16.getDate(rsmd_tDBInput_16, rs_tDBInput_16, 42);

						}
						if (colQtyInRs_tDBInput_16 < 43) {
							row16.PUBLICATION_NBR = null;
						} else {

							row16.PUBLICATION_NBR = rs_tDBInput_16.getBigDecimal(43);
							if (rs_tDBInput_16.wasNull()) {
								row16.PUBLICATION_NBR = null;
							}
						}
						if (colQtyInRs_tDBInput_16 < 44) {
							row16.PUBLICATION_SER = null;
						} else {

							tmpContent_tDBInput_16 = rs_tDBInput_16.getString(44);
							if (tmpContent_tDBInput_16 != null) {
								if (talendToDBList_tDBInput_16.contains(
										rsmd_tDBInput_16.getColumnTypeName(44).toUpperCase(java.util.Locale.ENGLISH))) {
									row16.PUBLICATION_SER = FormatterUtils.formatUnwithE(tmpContent_tDBInput_16);
								} else {
									row16.PUBLICATION_SER = tmpContent_tDBInput_16;
								}
							} else {
								row16.PUBLICATION_SER = null;
							}
						}
						if (colQtyInRs_tDBInput_16 < 45) {
							row16.PUBLICATION_TYP = null;
						} else {

							tmpContent_tDBInput_16 = rs_tDBInput_16.getString(45);
							if (tmpContent_tDBInput_16 != null) {
								if (talendToDBList_tDBInput_16.contains(
										rsmd_tDBInput_16.getColumnTypeName(45).toUpperCase(java.util.Locale.ENGLISH))) {
									row16.PUBLICATION_TYP = FormatterUtils.formatUnwithE(tmpContent_tDBInput_16);
								} else {
									row16.PUBLICATION_TYP = tmpContent_tDBInput_16;
								}
							} else {
								row16.PUBLICATION_TYP = null;
							}
						}
						if (colQtyInRs_tDBInput_16 < 46) {
							row16.FIRST_PRIORITY_DATE = null;
						} else {

							row16.FIRST_PRIORITY_DATE = mssqlGTU_tDBInput_16.getDate(rsmd_tDBInput_16, rs_tDBInput_16,
									46);

						}
						if (colQtyInRs_tDBInput_16 < 47) {
							row16.MAIN_OWNER_ADDR_NBR = null;
						} else {

							row16.MAIN_OWNER_ADDR_NBR = rs_tDBInput_16.getBigDecimal(47);
							if (rs_tDBInput_16.wasNull()) {
								row16.MAIN_OWNER_ADDR_NBR = null;
							}
						}
						if (colQtyInRs_tDBInput_16 < 48) {
							row16.MAIN_OWNER_PERSON_NBR = null;
						} else {

							row16.MAIN_OWNER_PERSON_NBR = rs_tDBInput_16.getBigDecimal(48);
							if (rs_tDBInput_16.wasNull()) {
								row16.MAIN_OWNER_PERSON_NBR = null;
							}
						}
						if (colQtyInRs_tDBInput_16 < 49) {
							row16.SERVICE_ADDR_NBR = null;
						} else {

							row16.SERVICE_ADDR_NBR = rs_tDBInput_16.getBigDecimal(49);
							if (rs_tDBInput_16.wasNull()) {
								row16.SERVICE_ADDR_NBR = null;
							}
						}
						if (colQtyInRs_tDBInput_16 < 50) {
							row16.SERVICE_PERSON_NBR = null;
						} else {

							row16.SERVICE_PERSON_NBR = rs_tDBInput_16.getBigDecimal(50);
							if (rs_tDBInput_16.wasNull()) {
								row16.SERVICE_PERSON_NBR = null;
							}
						}
						if (colQtyInRs_tDBInput_16 < 51) {
							row16.NICE_CLASS_TXT = null;
						} else {

							tmpContent_tDBInput_16 = rs_tDBInput_16.getString(51);
							if (tmpContent_tDBInput_16 != null) {
								if (talendToDBList_tDBInput_16.contains(
										rsmd_tDBInput_16.getColumnTypeName(51).toUpperCase(java.util.Locale.ENGLISH))) {
									row16.NICE_CLASS_TXT = FormatterUtils.formatUnwithE(tmpContent_tDBInput_16);
								} else {
									row16.NICE_CLASS_TXT = tmpContent_tDBInput_16;
								}
							} else {
								row16.NICE_CLASS_TXT = null;
							}
						}
						if (colQtyInRs_tDBInput_16 < 52) {
							row16.MARK_CODE = null;
						} else {

							row16.MARK_CODE = rs_tDBInput_16.getBigDecimal(52);
							if (rs_tDBInput_16.wasNull()) {
								row16.MARK_CODE = null;
							}
						}
						if (colQtyInRs_tDBInput_16 < 53) {
							row16.PROC_TYP = null;
						} else {

							tmpContent_tDBInput_16 = rs_tDBInput_16.getString(53);
							if (tmpContent_tDBInput_16 != null) {
								if (talendToDBList_tDBInput_16.contains(
										rsmd_tDBInput_16.getColumnTypeName(53).toUpperCase(java.util.Locale.ENGLISH))) {
									row16.PROC_TYP = FormatterUtils.formatUnwithE(tmpContent_tDBInput_16);
								} else {
									row16.PROC_TYP = tmpContent_tDBInput_16;
								}
							} else {
								row16.PROC_TYP = null;
							}
						}
						if (colQtyInRs_tDBInput_16 < 54) {
							row16.PROC_NBR = null;
						} else {

							row16.PROC_NBR = rs_tDBInput_16.getBigDecimal(54);
							if (rs_tDBInput_16.wasNull()) {
								row16.PROC_NBR = null;
							}
						}
						if (colQtyInRs_tDBInput_16 < 55) {
							row16.STATUS_CODE = null;
						} else {

							tmpContent_tDBInput_16 = rs_tDBInput_16.getString(55);
							if (tmpContent_tDBInput_16 != null) {
								if (talendToDBList_tDBInput_16.contains(
										rsmd_tDBInput_16.getColumnTypeName(55).toUpperCase(java.util.Locale.ENGLISH))) {
									row16.STATUS_CODE = FormatterUtils.formatUnwithE(tmpContent_tDBInput_16);
								} else {
									row16.STATUS_CODE = tmpContent_tDBInput_16;
								}
							} else {
								row16.STATUS_CODE = null;
							}
						}

						/**
						 * [tDBInput_16 begin ] stop
						 */

						/**
						 * [tDBInput_16 main ] start
						 */

						currentComponent = "tDBInput_16";

						tos_count_tDBInput_16++;

						/**
						 * [tDBInput_16 main ] stop
						 */

						/**
						 * [tDBInput_16 process_data_begin ] start
						 */

						currentComponent = "tDBInput_16";

						/**
						 * [tDBInput_16 process_data_begin ] stop
						 */

						/**
						 * [tAdvancedHash_row16 main ] start
						 */

						currentComponent = "tAdvancedHash_row16";

						if (execStat) {
							runStat.updateStatOnConnection(iterateId, 1, 1

									, "row16"

							);
						}

						row16Struct row16_HashRow = new row16Struct();

						row16_HashRow.FILE_SEQ = row16.FILE_SEQ;

						row16_HashRow.FILE_TYPE = row16.FILE_TYPE;

						row16_HashRow.FILE_SERIES = row16.FILE_SERIES;

						row16_HashRow.FILE_NBR = row16.FILE_NBR;

						row16_HashRow.DOC_ORI = row16.DOC_ORI;

						row16_HashRow.DOC_SERIES = row16.DOC_SERIES;

						row16_HashRow.DOC_NBR = row16.DOC_NBR;

						row16_HashRow.IND_IMPORT = row16.IND_IMPORT;

						row16_HashRow.APPLICATION_TYPE = row16.APPLICATION_TYPE;

						row16_HashRow.APPLICATION_SUBTYPE = row16.APPLICATION_SUBTYPE;

						row16_HashRow.LAW_CODE = row16.LAW_CODE;

						row16_HashRow.FILING_DATE = row16.FILING_DATE;

						row16_HashRow.RECEPTION_DATE = row16.RECEPTION_DATE;

						row16_HashRow.PUBLICATION_DATE = row16.PUBLICATION_DATE;

						row16_HashRow.PUBLICATION_NOTES = row16.PUBLICATION_NOTES;

						row16_HashRow.IND_REGISTERED = row16.IND_REGISTERED;

						row16_HashRow.REGISTRATION_TYPE = row16.REGISTRATION_TYPE;

						row16_HashRow.REGISTRATION_SERIES = row16.REGISTRATION_SERIES;

						row16_HashRow.REGISTRATION_NBR = row16.REGISTRATION_NBR;

						row16_HashRow.REGISTRATION_DUP = row16.REGISTRATION_DUP;

						row16_HashRow.REGISTRATION_DATE = row16.REGISTRATION_DATE;

						row16_HashRow.ENTITLEMENT_DATE = row16.ENTITLEMENT_DATE;

						row16_HashRow.EXPIRATION_DATE = row16.EXPIRATION_DATE;

						row16_HashRow.EXHIBITION_DATE = row16.EXHIBITION_DATE;

						row16_HashRow.EXHIBITION_NOTES = row16.EXHIBITION_NOTES;

						row16_HashRow.SIGN_TYPE = row16.SIGN_TYPE;

						row16_HashRow.MARK_NAME = row16.MARK_NAME;

						row16_HashRow.MARK_NAME_LANG2 = row16.MARK_NAME_LANG2;

						row16_HashRow.MARK_TRANSLATION = row16.MARK_TRANSLATION;

						row16_HashRow.MARK_TRANSLATION_LANG2 = row16.MARK_TRANSLATION_LANG2;

						row16_HashRow.MARK_TRANSLITERATION = row16.MARK_TRANSLITERATION;

						row16_HashRow.MARK_TRANSLITERATION_LANG2 = row16.MARK_TRANSLITERATION_LANG2;

						row16_HashRow.SERIES_DESCRIPTION = row16.SERIES_DESCRIPTION;

						row16_HashRow.COLOUR_DESCRIPTION = row16.COLOUR_DESCRIPTION;

						row16_HashRow.COLOUR_DESCR_LANG2 = row16.COLOUR_DESCR_LANG2;

						row16_HashRow.DISCLAIMER = row16.DISCLAIMER;

						row16_HashRow.DISCLAIMER_LANG2 = row16.DISCLAIMER_LANG2;

						row16_HashRow.BY_CONSENT = row16.BY_CONSENT;

						row16_HashRow.REGULATIONS = row16.REGULATIONS;

						row16_HashRow.NOTES = row16.NOTES;

						row16_HashRow.CAPTURE_USER_ID = row16.CAPTURE_USER_ID;

						row16_HashRow.CAPTURE_DATE = row16.CAPTURE_DATE;

						row16_HashRow.PUBLICATION_NBR = row16.PUBLICATION_NBR;

						row16_HashRow.PUBLICATION_SER = row16.PUBLICATION_SER;

						row16_HashRow.PUBLICATION_TYP = row16.PUBLICATION_TYP;

						row16_HashRow.FIRST_PRIORITY_DATE = row16.FIRST_PRIORITY_DATE;

						row16_HashRow.MAIN_OWNER_ADDR_NBR = row16.MAIN_OWNER_ADDR_NBR;

						row16_HashRow.MAIN_OWNER_PERSON_NBR = row16.MAIN_OWNER_PERSON_NBR;

						row16_HashRow.SERVICE_ADDR_NBR = row16.SERVICE_ADDR_NBR;

						row16_HashRow.SERVICE_PERSON_NBR = row16.SERVICE_PERSON_NBR;

						row16_HashRow.NICE_CLASS_TXT = row16.NICE_CLASS_TXT;

						row16_HashRow.MARK_CODE = row16.MARK_CODE;

						row16_HashRow.PROC_TYP = row16.PROC_TYP;

						row16_HashRow.PROC_NBR = row16.PROC_NBR;

						row16_HashRow.STATUS_CODE = row16.STATUS_CODE;

						tHash_Lookup_row16.put(row16_HashRow);

						tos_count_tAdvancedHash_row16++;

						/**
						 * [tAdvancedHash_row16 main ] stop
						 */

						/**
						 * [tAdvancedHash_row16 process_data_begin ] start
						 */

						currentComponent = "tAdvancedHash_row16";

						/**
						 * [tAdvancedHash_row16 process_data_begin ] stop
						 */

						/**
						 * [tAdvancedHash_row16 process_data_end ] start
						 */

						currentComponent = "tAdvancedHash_row16";

						/**
						 * [tAdvancedHash_row16 process_data_end ] stop
						 */

						/**
						 * [tDBInput_16 process_data_end ] start
						 */

						currentComponent = "tDBInput_16";

						/**
						 * [tDBInput_16 process_data_end ] stop
						 */

						/**
						 * [tDBInput_16 end ] start
						 */

						currentComponent = "tDBInput_16";

					}
				} finally {
					if (rs_tDBInput_16 != null) {
						rs_tDBInput_16.close();
					}
					if (stmt_tDBInput_16 != null) {
						stmt_tDBInput_16.close();
					}
					if (conn_tDBInput_16 != null && !conn_tDBInput_16.isClosed()) {

						conn_tDBInput_16.close();

						if ("com.mysql.cj.jdbc.Driver".equals((String) globalMap.get("driverClass_"))
								&& routines.system.BundleUtils.inOSGi()) {
							Class.forName("com.mysql.cj.jdbc.AbandonedConnectionCleanupThread")
									.getMethod("checkedShutdown").invoke(null, (Object[]) null);
						}

					}
				}
				globalMap.put("tDBInput_16_NB_LINE", nb_line_tDBInput_16);

				ok_Hash.put("tDBInput_16", true);
				end_Hash.put("tDBInput_16", System.currentTimeMillis());

				/**
				 * [tDBInput_16 end ] stop
				 */

				/**
				 * [tAdvancedHash_row16 end ] start
				 */

				currentComponent = "tAdvancedHash_row16";

				tHash_Lookup_row16.endPut();

				if (execStat) {
					runStat.updateStat(resourceMap, iterateId, 2, 0, "row16");
				}

				ok_Hash.put("tAdvancedHash_row16", true);
				end_Hash.put("tAdvancedHash_row16", System.currentTimeMillis());

				/**
				 * [tAdvancedHash_row16 end ] stop
				 */

			} // end the resume

		} catch (java.lang.Exception e) {

			TalendException te = new TalendException(e, currentComponent, globalMap);

			throw te;
		} catch (java.lang.Error error) {

			runStat.stopThreadStat();

			throw error;
		} finally {

			try {

				/**
				 * [tDBInput_16 finally ] start
				 */

				currentComponent = "tDBInput_16";

				/**
				 * [tDBInput_16 finally ] stop
				 */

				/**
				 * [tAdvancedHash_row16 finally ] start
				 */

				currentComponent = "tAdvancedHash_row16";

				/**
				 * [tAdvancedHash_row16 finally ] stop
				 */

			} catch (java.lang.Exception e) {
				// ignore
			} catch (java.lang.Error error) {
				// ignore
			}
			resourceMap = null;
		}

		globalMap.put("tDBInput_16_SUBPROCESS_STATE", 1);
	}

	public static class row6Struct implements routines.system.IPersistableComparableLookupRow<row6Struct> {
		final static byte[] commonByteArrayLock_WIPO_PROJECTS_G2b_Mig_TM = new byte[0];
		static byte[] commonByteArray_WIPO_PROJECTS_G2b_Mig_TM = new byte[0];
		protected static final int DEFAULT_HASHCODE = 1;
		protected static final int PRIME = 31;
		protected int hashCode = DEFAULT_HASHCODE;
		public boolean hashCodeDirty = true;

		public String loopKey;

		public String FILE_SEQ;

		public String getFILE_SEQ() {
			return this.FILE_SEQ;
		}

		public String FILE_TYPE;

		public String getFILE_TYPE() {
			return this.FILE_TYPE;
		}

		public BigDecimal FILE_SERIES;

		public BigDecimal getFILE_SERIES() {
			return this.FILE_SERIES;
		}

		public BigDecimal FILE_NBR;

		public BigDecimal getFILE_NBR() {
			return this.FILE_NBR;
		}

		public String DOC_ORI;

		public String getDOC_ORI() {
			return this.DOC_ORI;
		}

		public BigDecimal DOC_SERIES;

		public BigDecimal getDOC_SERIES() {
			return this.DOC_SERIES;
		}

		public BigDecimal DOC_NBR;

		public BigDecimal getDOC_NBR() {
			return this.DOC_NBR;
		}

		public BigDecimal IND_IMPORT;

		public BigDecimal getIND_IMPORT() {
			return this.IND_IMPORT;
		}

		public String APPLICATION_TYPE;

		public String getAPPLICATION_TYPE() {
			return this.APPLICATION_TYPE;
		}

		public String APPLICATION_SUBTYPE;

		public String getAPPLICATION_SUBTYPE() {
			return this.APPLICATION_SUBTYPE;
		}

		public BigDecimal LAW_CODE;

		public BigDecimal getLAW_CODE() {
			return this.LAW_CODE;
		}

		public java.util.Date FILING_DATE;

		public java.util.Date getFILING_DATE() {
			return this.FILING_DATE;
		}

		public java.util.Date RECEPTION_DATE;

		public java.util.Date getRECEPTION_DATE() {
			return this.RECEPTION_DATE;
		}

		public java.util.Date PUBLICATION_DATE;

		public java.util.Date getPUBLICATION_DATE() {
			return this.PUBLICATION_DATE;
		}

		public String PUBLICATION_NOTES;

		public String getPUBLICATION_NOTES() {
			return this.PUBLICATION_NOTES;
		}

		public BigDecimal IND_REGISTERED;

		public BigDecimal getIND_REGISTERED() {
			return this.IND_REGISTERED;
		}

		public String REGISTRATION_TYPE;

		public String getREGISTRATION_TYPE() {
			return this.REGISTRATION_TYPE;
		}

		public BigDecimal REGISTRATION_SERIES;

		public BigDecimal getREGISTRATION_SERIES() {
			return this.REGISTRATION_SERIES;
		}

		public BigDecimal REGISTRATION_NBR;

		public BigDecimal getREGISTRATION_NBR() {
			return this.REGISTRATION_NBR;
		}

		public String REGISTRATION_DUP;

		public String getREGISTRATION_DUP() {
			return this.REGISTRATION_DUP;
		}

		public java.util.Date REGISTRATION_DATE;

		public java.util.Date getREGISTRATION_DATE() {
			return this.REGISTRATION_DATE;
		}

		public java.util.Date ENTITLEMENT_DATE;

		public java.util.Date getENTITLEMENT_DATE() {
			return this.ENTITLEMENT_DATE;
		}

		public java.util.Date EXPIRATION_DATE;

		public java.util.Date getEXPIRATION_DATE() {
			return this.EXPIRATION_DATE;
		}

		public java.util.Date EXHIBITION_DATE;

		public java.util.Date getEXHIBITION_DATE() {
			return this.EXHIBITION_DATE;
		}

		public String EXHIBITION_NOTES;

		public String getEXHIBITION_NOTES() {
			return this.EXHIBITION_NOTES;
		}

		public String SIGN_TYPE;

		public String getSIGN_TYPE() {
			return this.SIGN_TYPE;
		}

		public String MARK_NAME;

		public String getMARK_NAME() {
			return this.MARK_NAME;
		}

		public String MARK_NAME_LANG2;

		public String getMARK_NAME_LANG2() {
			return this.MARK_NAME_LANG2;
		}

		public String MARK_TRANSLATION;

		public String getMARK_TRANSLATION() {
			return this.MARK_TRANSLATION;
		}

		public String MARK_TRANSLATION_LANG2;

		public String getMARK_TRANSLATION_LANG2() {
			return this.MARK_TRANSLATION_LANG2;
		}

		public String MARK_TRANSLITERATION;

		public String getMARK_TRANSLITERATION() {
			return this.MARK_TRANSLITERATION;
		}

		public String MARK_TRANSLITERATION_LANG2;

		public String getMARK_TRANSLITERATION_LANG2() {
			return this.MARK_TRANSLITERATION_LANG2;
		}

		public String SERIES_DESCRIPTION;

		public String getSERIES_DESCRIPTION() {
			return this.SERIES_DESCRIPTION;
		}

		public String COLOUR_DESCRIPTION;

		public String getCOLOUR_DESCRIPTION() {
			return this.COLOUR_DESCRIPTION;
		}

		public String COLOUR_DESCR_LANG2;

		public String getCOLOUR_DESCR_LANG2() {
			return this.COLOUR_DESCR_LANG2;
		}

		public String DISCLAIMER;

		public String getDISCLAIMER() {
			return this.DISCLAIMER;
		}

		public String DISCLAIMER_LANG2;

		public String getDISCLAIMER_LANG2() {
			return this.DISCLAIMER_LANG2;
		}

		public String BY_CONSENT;

		public String getBY_CONSENT() {
			return this.BY_CONSENT;
		}

		public String REGULATIONS;

		public String getREGULATIONS() {
			return this.REGULATIONS;
		}

		public String NOTES;

		public String getNOTES() {
			return this.NOTES;
		}

		public BigDecimal CAPTURE_USER_ID;

		public BigDecimal getCAPTURE_USER_ID() {
			return this.CAPTURE_USER_ID;
		}

		public java.util.Date CAPTURE_DATE;

		public java.util.Date getCAPTURE_DATE() {
			return this.CAPTURE_DATE;
		}

		public BigDecimal PUBLICATION_NBR;

		public BigDecimal getPUBLICATION_NBR() {
			return this.PUBLICATION_NBR;
		}

		public String PUBLICATION_SER;

		public String getPUBLICATION_SER() {
			return this.PUBLICATION_SER;
		}

		public String PUBLICATION_TYP;

		public String getPUBLICATION_TYP() {
			return this.PUBLICATION_TYP;
		}

		public java.util.Date FIRST_PRIORITY_DATE;

		public java.util.Date getFIRST_PRIORITY_DATE() {
			return this.FIRST_PRIORITY_DATE;
		}

		public BigDecimal MAIN_OWNER_ADDR_NBR;

		public BigDecimal getMAIN_OWNER_ADDR_NBR() {
			return this.MAIN_OWNER_ADDR_NBR;
		}

		public BigDecimal MAIN_OWNER_PERSON_NBR;

		public BigDecimal getMAIN_OWNER_PERSON_NBR() {
			return this.MAIN_OWNER_PERSON_NBR;
		}

		public BigDecimal SERVICE_ADDR_NBR;

		public BigDecimal getSERVICE_ADDR_NBR() {
			return this.SERVICE_ADDR_NBR;
		}

		public BigDecimal SERVICE_PERSON_NBR;

		public BigDecimal getSERVICE_PERSON_NBR() {
			return this.SERVICE_PERSON_NBR;
		}

		public String NICE_CLASS_TXT;

		public String getNICE_CLASS_TXT() {
			return this.NICE_CLASS_TXT;
		}

		public BigDecimal MARK_CODE;

		public BigDecimal getMARK_CODE() {
			return this.MARK_CODE;
		}

		public String PROC_TYP;

		public String getPROC_TYP() {
			return this.PROC_TYP;
		}

		public BigDecimal PROC_NBR;

		public BigDecimal getPROC_NBR() {
			return this.PROC_NBR;
		}

		public String STATUS_CODE;

		public String getSTATUS_CODE() {
			return this.STATUS_CODE;
		}

		@Override
		public int hashCode() {
			if (this.hashCodeDirty) {
				final int prime = PRIME;
				int result = DEFAULT_HASHCODE;

				result = prime * result + ((this.FILE_SEQ == null) ? 0 : this.FILE_SEQ.hashCode());

				result = prime * result + ((this.FILE_TYPE == null) ? 0 : this.FILE_TYPE.hashCode());

				result = prime * result
						+ ((this.FILE_SERIES == null) ? 0 : new Double(this.FILE_SERIES.doubleValue()).hashCode());

				result = prime * result
						+ ((this.FILE_NBR == null) ? 0 : new Double(this.FILE_NBR.doubleValue()).hashCode());

				this.hashCode = result;
				this.hashCodeDirty = false;
			}
			return this.hashCode;
		}

		@Override
		public boolean equals(Object obj) {
			if (this == obj)
				return true;
			if (obj == null)
				return false;
			if (getClass() != obj.getClass())
				return false;
			final row6Struct other = (row6Struct) obj;

			if (this.FILE_SEQ == null) {
				if (other.FILE_SEQ != null)
					return false;

			} else if (!this.FILE_SEQ.equals(other.FILE_SEQ))

				return false;

			if (this.FILE_TYPE == null) {
				if (other.FILE_TYPE != null)
					return false;

			} else if (!this.FILE_TYPE.equals(other.FILE_TYPE))

				return false;

			if (this.FILE_SERIES == null) {
				if (other.FILE_SERIES != null)
					return false;

			} else if ((other.FILE_SERIES == null) || (this.FILE_SERIES.compareTo(other.FILE_SERIES) != 0))

				return false;

			if (this.FILE_NBR == null) {
				if (other.FILE_NBR != null)
					return false;

			} else if ((other.FILE_NBR == null) || (this.FILE_NBR.compareTo(other.FILE_NBR) != 0))

				return false;

			return true;
		}

		public void copyDataTo(row6Struct other) {

			other.FILE_SEQ = this.FILE_SEQ;
			other.FILE_TYPE = this.FILE_TYPE;
			other.FILE_SERIES = this.FILE_SERIES;
			other.FILE_NBR = this.FILE_NBR;
			other.DOC_ORI = this.DOC_ORI;
			other.DOC_SERIES = this.DOC_SERIES;
			other.DOC_NBR = this.DOC_NBR;
			other.IND_IMPORT = this.IND_IMPORT;
			other.APPLICATION_TYPE = this.APPLICATION_TYPE;
			other.APPLICATION_SUBTYPE = this.APPLICATION_SUBTYPE;
			other.LAW_CODE = this.LAW_CODE;
			other.FILING_DATE = this.FILING_DATE;
			other.RECEPTION_DATE = this.RECEPTION_DATE;
			other.PUBLICATION_DATE = this.PUBLICATION_DATE;
			other.PUBLICATION_NOTES = this.PUBLICATION_NOTES;
			other.IND_REGISTERED = this.IND_REGISTERED;
			other.REGISTRATION_TYPE = this.REGISTRATION_TYPE;
			other.REGISTRATION_SERIES = this.REGISTRATION_SERIES;
			other.REGISTRATION_NBR = this.REGISTRATION_NBR;
			other.REGISTRATION_DUP = this.REGISTRATION_DUP;
			other.REGISTRATION_DATE = this.REGISTRATION_DATE;
			other.ENTITLEMENT_DATE = this.ENTITLEMENT_DATE;
			other.EXPIRATION_DATE = this.EXPIRATION_DATE;
			other.EXHIBITION_DATE = this.EXHIBITION_DATE;
			other.EXHIBITION_NOTES = this.EXHIBITION_NOTES;
			other.SIGN_TYPE = this.SIGN_TYPE;
			other.MARK_NAME = this.MARK_NAME;
			other.MARK_NAME_LANG2 = this.MARK_NAME_LANG2;
			other.MARK_TRANSLATION = this.MARK_TRANSLATION;
			other.MARK_TRANSLATION_LANG2 = this.MARK_TRANSLATION_LANG2;
			other.MARK_TRANSLITERATION = this.MARK_TRANSLITERATION;
			other.MARK_TRANSLITERATION_LANG2 = this.MARK_TRANSLITERATION_LANG2;
			other.SERIES_DESCRIPTION = this.SERIES_DESCRIPTION;
			other.COLOUR_DESCRIPTION = this.COLOUR_DESCRIPTION;
			other.COLOUR_DESCR_LANG2 = this.COLOUR_DESCR_LANG2;
			other.DISCLAIMER = this.DISCLAIMER;
			other.DISCLAIMER_LANG2 = this.DISCLAIMER_LANG2;
			other.BY_CONSENT = this.BY_CONSENT;
			other.REGULATIONS = this.REGULATIONS;
			other.NOTES = this.NOTES;
			other.CAPTURE_USER_ID = this.CAPTURE_USER_ID;
			other.CAPTURE_DATE = this.CAPTURE_DATE;
			other.PUBLICATION_NBR = this.PUBLICATION_NBR;
			other.PUBLICATION_SER = this.PUBLICATION_SER;
			other.PUBLICATION_TYP = this.PUBLICATION_TYP;
			other.FIRST_PRIORITY_DATE = this.FIRST_PRIORITY_DATE;
			other.MAIN_OWNER_ADDR_NBR = this.MAIN_OWNER_ADDR_NBR;
			other.MAIN_OWNER_PERSON_NBR = this.MAIN_OWNER_PERSON_NBR;
			other.SERVICE_ADDR_NBR = this.SERVICE_ADDR_NBR;
			other.SERVICE_PERSON_NBR = this.SERVICE_PERSON_NBR;
			other.NICE_CLASS_TXT = this.NICE_CLASS_TXT;
			other.MARK_CODE = this.MARK_CODE;
			other.PROC_TYP = this.PROC_TYP;
			other.PROC_NBR = this.PROC_NBR;
			other.STATUS_CODE = this.STATUS_CODE;

		}

		public void copyKeysDataTo(row6Struct other) {

			other.FILE_SEQ = this.FILE_SEQ;
			other.FILE_TYPE = this.FILE_TYPE;
			other.FILE_SERIES = this.FILE_SERIES;
			other.FILE_NBR = this.FILE_NBR;

		}

		private String readString(ObjectInputStream dis) throws IOException {
			String strReturn = null;
			int length = 0;
			length = dis.readInt();
			if (length == -1) {
				strReturn = null;
			} else {
				if (length > commonByteArray_WIPO_PROJECTS_G2b_Mig_TM.length) {
					if (length < 1024 && commonByteArray_WIPO_PROJECTS_G2b_Mig_TM.length == 0) {
						commonByteArray_WIPO_PROJECTS_G2b_Mig_TM = new byte[1024];
					} else {
						commonByteArray_WIPO_PROJECTS_G2b_Mig_TM = new byte[2 * length];
					}
				}
				dis.readFully(commonByteArray_WIPO_PROJECTS_G2b_Mig_TM, 0, length);
				strReturn = new String(commonByteArray_WIPO_PROJECTS_G2b_Mig_TM, 0, length, utf8Charset);
			}
			return strReturn;
		}

		private void writeString(String str, ObjectOutputStream dos) throws IOException {
			if (str == null) {
				dos.writeInt(-1);
			} else {
				byte[] byteArray = str.getBytes(utf8Charset);
				dos.writeInt(byteArray.length);
				dos.write(byteArray);
			}
		}

		private String readString(DataInputStream dis, ObjectInputStream ois) throws IOException {
			String strReturn = null;
			int length = 0;
			length = dis.readInt();
			if (length == -1) {
				strReturn = null;
			} else {
				byte[] byteArray = new byte[length];
				dis.read(byteArray);
				strReturn = new String(byteArray, utf8Charset);
			}
			return strReturn;
		}

		private void writeString(String str, DataOutputStream dos, ObjectOutputStream oos) throws IOException {
			if (str == null) {
				dos.writeInt(-1);
			} else {
				byte[] byteArray = str.getBytes(utf8Charset);
				dos.writeInt(byteArray.length);
				dos.write(byteArray);
			}
		}

		private java.util.Date readDate(DataInputStream dis, ObjectInputStream ois) throws IOException {
			java.util.Date dateReturn = null;
			int length = 0;
			length = dis.readByte();
			if (length == -1) {
				dateReturn = null;
			} else {
				dateReturn = new Date(dis.readLong());
			}
			return dateReturn;
		}

		private void writeDate(java.util.Date date1, DataOutputStream dos, ObjectOutputStream oos) throws IOException {
			if (date1 == null) {
				dos.writeByte(-1);
			} else {
				dos.writeByte(0);
				dos.writeLong(date1.getTime());
			}
		}

		public void readKeysData(ObjectInputStream dis) {

			synchronized (commonByteArrayLock_WIPO_PROJECTS_G2b_Mig_TM) {

				try {

					int length = 0;

					this.FILE_SEQ = readString(dis);

					this.FILE_TYPE = readString(dis);

					this.FILE_SERIES = (BigDecimal) dis.readObject();

					this.FILE_NBR = (BigDecimal) dis.readObject();

				} catch (IOException e) {
					throw new RuntimeException(e);

				} catch (ClassNotFoundException eCNFE) {
					throw new RuntimeException(eCNFE);

				}

			}

		}

		public void writeKeysData(ObjectOutputStream dos) {
			try {

				// String

				writeString(this.FILE_SEQ, dos);

				// String

				writeString(this.FILE_TYPE, dos);

				// BigDecimal

				dos.writeObject(this.FILE_SERIES);

				// BigDecimal

				dos.writeObject(this.FILE_NBR);

			} catch (IOException e) {
				throw new RuntimeException(e);
			}

		}

		/**
		 * Fill Values data by reading ObjectInputStream.
		 */
		public void readValuesData(DataInputStream dis, ObjectInputStream ois) {
			try {

				int length = 0;

				this.DOC_ORI = readString(dis, ois);

				this.DOC_SERIES = (BigDecimal) ois.readObject();

				this.DOC_NBR = (BigDecimal) ois.readObject();

				this.IND_IMPORT = (BigDecimal) ois.readObject();

				this.APPLICATION_TYPE = readString(dis, ois);

				this.APPLICATION_SUBTYPE = readString(dis, ois);

				this.LAW_CODE = (BigDecimal) ois.readObject();

				this.FILING_DATE = readDate(dis, ois);

				this.RECEPTION_DATE = readDate(dis, ois);

				this.PUBLICATION_DATE = readDate(dis, ois);

				this.PUBLICATION_NOTES = readString(dis, ois);

				this.IND_REGISTERED = (BigDecimal) ois.readObject();

				this.REGISTRATION_TYPE = readString(dis, ois);

				this.REGISTRATION_SERIES = (BigDecimal) ois.readObject();

				this.REGISTRATION_NBR = (BigDecimal) ois.readObject();

				this.REGISTRATION_DUP = readString(dis, ois);

				this.REGISTRATION_DATE = readDate(dis, ois);

				this.ENTITLEMENT_DATE = readDate(dis, ois);

				this.EXPIRATION_DATE = readDate(dis, ois);

				this.EXHIBITION_DATE = readDate(dis, ois);

				this.EXHIBITION_NOTES = readString(dis, ois);

				this.SIGN_TYPE = readString(dis, ois);

				this.MARK_NAME = readString(dis, ois);

				this.MARK_NAME_LANG2 = readString(dis, ois);

				this.MARK_TRANSLATION = readString(dis, ois);

				this.MARK_TRANSLATION_LANG2 = readString(dis, ois);

				this.MARK_TRANSLITERATION = readString(dis, ois);

				this.MARK_TRANSLITERATION_LANG2 = readString(dis, ois);

				this.SERIES_DESCRIPTION = readString(dis, ois);

				this.COLOUR_DESCRIPTION = readString(dis, ois);

				this.COLOUR_DESCR_LANG2 = readString(dis, ois);

				this.DISCLAIMER = readString(dis, ois);

				this.DISCLAIMER_LANG2 = readString(dis, ois);

				this.BY_CONSENT = readString(dis, ois);

				this.REGULATIONS = readString(dis, ois);

				this.NOTES = readString(dis, ois);

				this.CAPTURE_USER_ID = (BigDecimal) ois.readObject();

				this.CAPTURE_DATE = readDate(dis, ois);

				this.PUBLICATION_NBR = (BigDecimal) ois.readObject();

				this.PUBLICATION_SER = readString(dis, ois);

				this.PUBLICATION_TYP = readString(dis, ois);

				this.FIRST_PRIORITY_DATE = readDate(dis, ois);

				this.MAIN_OWNER_ADDR_NBR = (BigDecimal) ois.readObject();

				this.MAIN_OWNER_PERSON_NBR = (BigDecimal) ois.readObject();

				this.SERVICE_ADDR_NBR = (BigDecimal) ois.readObject();

				this.SERVICE_PERSON_NBR = (BigDecimal) ois.readObject();

				this.NICE_CLASS_TXT = readString(dis, ois);

				this.MARK_CODE = (BigDecimal) ois.readObject();

				this.PROC_TYP = readString(dis, ois);

				this.PROC_NBR = (BigDecimal) ois.readObject();

				this.STATUS_CODE = readString(dis, ois);

			} catch (IOException e) {
				throw new RuntimeException(e);

			} catch (ClassNotFoundException eCNFE) {
				throw new RuntimeException(eCNFE);

			}

		}

		/**
		 * Return a byte array which represents Values data.
		 */
		public void writeValuesData(DataOutputStream dos, ObjectOutputStream oos) {
			try {

				writeString(this.DOC_ORI, dos, oos);

				oos.writeObject(this.DOC_SERIES);

				oos.writeObject(this.DOC_NBR);

				oos.writeObject(this.IND_IMPORT);

				writeString(this.APPLICATION_TYPE, dos, oos);

				writeString(this.APPLICATION_SUBTYPE, dos, oos);

				oos.writeObject(this.LAW_CODE);

				writeDate(this.FILING_DATE, dos, oos);

				writeDate(this.RECEPTION_DATE, dos, oos);

				writeDate(this.PUBLICATION_DATE, dos, oos);

				writeString(this.PUBLICATION_NOTES, dos, oos);

				oos.writeObject(this.IND_REGISTERED);

				writeString(this.REGISTRATION_TYPE, dos, oos);

				oos.writeObject(this.REGISTRATION_SERIES);

				oos.writeObject(this.REGISTRATION_NBR);

				writeString(this.REGISTRATION_DUP, dos, oos);

				writeDate(this.REGISTRATION_DATE, dos, oos);

				writeDate(this.ENTITLEMENT_DATE, dos, oos);

				writeDate(this.EXPIRATION_DATE, dos, oos);

				writeDate(this.EXHIBITION_DATE, dos, oos);

				writeString(this.EXHIBITION_NOTES, dos, oos);

				writeString(this.SIGN_TYPE, dos, oos);

				writeString(this.MARK_NAME, dos, oos);

				writeString(this.MARK_NAME_LANG2, dos, oos);

				writeString(this.MARK_TRANSLATION, dos, oos);

				writeString(this.MARK_TRANSLATION_LANG2, dos, oos);

				writeString(this.MARK_TRANSLITERATION, dos, oos);

				writeString(this.MARK_TRANSLITERATION_LANG2, dos, oos);

				writeString(this.SERIES_DESCRIPTION, dos, oos);

				writeString(this.COLOUR_DESCRIPTION, dos, oos);

				writeString(this.COLOUR_DESCR_LANG2, dos, oos);

				writeString(this.DISCLAIMER, dos, oos);

				writeString(this.DISCLAIMER_LANG2, dos, oos);

				writeString(this.BY_CONSENT, dos, oos);

				writeString(this.REGULATIONS, dos, oos);

				writeString(this.NOTES, dos, oos);

				oos.writeObject(this.CAPTURE_USER_ID);

				writeDate(this.CAPTURE_DATE, dos, oos);

				oos.writeObject(this.PUBLICATION_NBR);

				writeString(this.PUBLICATION_SER, dos, oos);

				writeString(this.PUBLICATION_TYP, dos, oos);

				writeDate(this.FIRST_PRIORITY_DATE, dos, oos);

				oos.writeObject(this.MAIN_OWNER_ADDR_NBR);

				oos.writeObject(this.MAIN_OWNER_PERSON_NBR);

				oos.writeObject(this.SERVICE_ADDR_NBR);

				oos.writeObject(this.SERVICE_PERSON_NBR);

				writeString(this.NICE_CLASS_TXT, dos, oos);

				oos.writeObject(this.MARK_CODE);

				writeString(this.PROC_TYP, dos, oos);

				oos.writeObject(this.PROC_NBR);

				writeString(this.STATUS_CODE, dos, oos);

			} catch (IOException e) {
				throw new RuntimeException(e);
			}

		}

		public String toString() {

			StringBuilder sb = new StringBuilder();
			sb.append(super.toString());
			sb.append("[");
			sb.append("FILE_SEQ=" + FILE_SEQ);
			sb.append(",FILE_TYPE=" + FILE_TYPE);
			sb.append(",FILE_SERIES=" + String.valueOf(FILE_SERIES));
			sb.append(",FILE_NBR=" + String.valueOf(FILE_NBR));
			sb.append(",DOC_ORI=" + DOC_ORI);
			sb.append(",DOC_SERIES=" + String.valueOf(DOC_SERIES));
			sb.append(",DOC_NBR=" + String.valueOf(DOC_NBR));
			sb.append(",IND_IMPORT=" + String.valueOf(IND_IMPORT));
			sb.append(",APPLICATION_TYPE=" + APPLICATION_TYPE);
			sb.append(",APPLICATION_SUBTYPE=" + APPLICATION_SUBTYPE);
			sb.append(",LAW_CODE=" + String.valueOf(LAW_CODE));
			sb.append(",FILING_DATE=" + String.valueOf(FILING_DATE));
			sb.append(",RECEPTION_DATE=" + String.valueOf(RECEPTION_DATE));
			sb.append(",PUBLICATION_DATE=" + String.valueOf(PUBLICATION_DATE));
			sb.append(",PUBLICATION_NOTES=" + PUBLICATION_NOTES);
			sb.append(",IND_REGISTERED=" + String.valueOf(IND_REGISTERED));
			sb.append(",REGISTRATION_TYPE=" + REGISTRATION_TYPE);
			sb.append(",REGISTRATION_SERIES=" + String.valueOf(REGISTRATION_SERIES));
			sb.append(",REGISTRATION_NBR=" + String.valueOf(REGISTRATION_NBR));
			sb.append(",REGISTRATION_DUP=" + REGISTRATION_DUP);
			sb.append(",REGISTRATION_DATE=" + String.valueOf(REGISTRATION_DATE));
			sb.append(",ENTITLEMENT_DATE=" + String.valueOf(ENTITLEMENT_DATE));
			sb.append(",EXPIRATION_DATE=" + String.valueOf(EXPIRATION_DATE));
			sb.append(",EXHIBITION_DATE=" + String.valueOf(EXHIBITION_DATE));
			sb.append(",EXHIBITION_NOTES=" + EXHIBITION_NOTES);
			sb.append(",SIGN_TYPE=" + SIGN_TYPE);
			sb.append(",MARK_NAME=" + MARK_NAME);
			sb.append(",MARK_NAME_LANG2=" + MARK_NAME_LANG2);
			sb.append(",MARK_TRANSLATION=" + MARK_TRANSLATION);
			sb.append(",MARK_TRANSLATION_LANG2=" + MARK_TRANSLATION_LANG2);
			sb.append(",MARK_TRANSLITERATION=" + MARK_TRANSLITERATION);
			sb.append(",MARK_TRANSLITERATION_LANG2=" + MARK_TRANSLITERATION_LANG2);
			sb.append(",SERIES_DESCRIPTION=" + SERIES_DESCRIPTION);
			sb.append(",COLOUR_DESCRIPTION=" + COLOUR_DESCRIPTION);
			sb.append(",COLOUR_DESCR_LANG2=" + COLOUR_DESCR_LANG2);
			sb.append(",DISCLAIMER=" + DISCLAIMER);
			sb.append(",DISCLAIMER_LANG2=" + DISCLAIMER_LANG2);
			sb.append(",BY_CONSENT=" + BY_CONSENT);
			sb.append(",REGULATIONS=" + REGULATIONS);
			sb.append(",NOTES=" + NOTES);
			sb.append(",CAPTURE_USER_ID=" + String.valueOf(CAPTURE_USER_ID));
			sb.append(",CAPTURE_DATE=" + String.valueOf(CAPTURE_DATE));
			sb.append(",PUBLICATION_NBR=" + String.valueOf(PUBLICATION_NBR));
			sb.append(",PUBLICATION_SER=" + PUBLICATION_SER);
			sb.append(",PUBLICATION_TYP=" + PUBLICATION_TYP);
			sb.append(",FIRST_PRIORITY_DATE=" + String.valueOf(FIRST_PRIORITY_DATE));
			sb.append(",MAIN_OWNER_ADDR_NBR=" + String.valueOf(MAIN_OWNER_ADDR_NBR));
			sb.append(",MAIN_OWNER_PERSON_NBR=" + String.valueOf(MAIN_OWNER_PERSON_NBR));
			sb.append(",SERVICE_ADDR_NBR=" + String.valueOf(SERVICE_ADDR_NBR));
			sb.append(",SERVICE_PERSON_NBR=" + String.valueOf(SERVICE_PERSON_NBR));
			sb.append(",NICE_CLASS_TXT=" + NICE_CLASS_TXT);
			sb.append(",MARK_CODE=" + String.valueOf(MARK_CODE));
			sb.append(",PROC_TYP=" + PROC_TYP);
			sb.append(",PROC_NBR=" + String.valueOf(PROC_NBR));
			sb.append(",STATUS_CODE=" + STATUS_CODE);
			sb.append("]");

			return sb.toString();
		}

		/**
		 * Compare keys
		 */
		public int compareTo(row6Struct other) {

			int returnValue = -1;

			returnValue = checkNullsAndCompare(this.FILE_SEQ, other.FILE_SEQ);
			if (returnValue != 0) {
				return returnValue;
			}

			returnValue = checkNullsAndCompare(this.FILE_TYPE, other.FILE_TYPE);
			if (returnValue != 0) {
				return returnValue;
			}

			returnValue = checkNullsAndCompare(this.FILE_SERIES, other.FILE_SERIES);
			if (returnValue != 0) {
				return returnValue;
			}

			returnValue = checkNullsAndCompare(this.FILE_NBR, other.FILE_NBR);
			if (returnValue != 0) {
				return returnValue;
			}

			return returnValue;
		}

		private int checkNullsAndCompare(Object object1, Object object2) {
			int returnValue = 0;
			if (object1 instanceof Comparable && object2 instanceof Comparable) {
				returnValue = ((Comparable) object1).compareTo(object2);
			} else if (object1 != null && object2 != null) {
				returnValue = compareStrings(object1.toString(), object2.toString());
			} else if (object1 == null && object2 != null) {
				returnValue = 1;
			} else if (object1 != null && object2 == null) {
				returnValue = -1;
			} else {
				returnValue = 0;
			}

			return returnValue;
		}

		private int compareStrings(String string1, String string2) {
			return string1.compareTo(string2);
		}

	}

	public void tDBInput_48Process(final java.util.Map<String, Object> globalMap) throws TalendException {
		globalMap.put("tDBInput_48_SUBPROCESS_STATE", 0);

		final boolean execStat = this.execStat;

		String iterateId = "";

		String currentComponent = "";
		java.util.Map<String, Object> resourceMap = new java.util.HashMap<String, Object>();

		try {
			// TDI-39566 avoid throwing an useless Exception
			boolean resumeIt = true;
			if (globalResumeTicket == false && resumeEntryMethodName != null) {
				String currentMethodName = new java.lang.Exception().getStackTrace()[0].getMethodName();
				resumeIt = resumeEntryMethodName.equals(currentMethodName);
			}
			if (resumeIt || globalResumeTicket) { // start the resume
				globalResumeTicket = true;

				row6Struct row6 = new row6Struct();

				/**
				 * [tAdvancedHash_row6 begin ] start
				 */

				ok_Hash.put("tAdvancedHash_row6", false);
				start_Hash.put("tAdvancedHash_row6", System.currentTimeMillis());

				currentComponent = "tAdvancedHash_row6";

				if (execStat) {
					runStat.updateStatOnConnection(resourceMap, iterateId, 0, 0, "row6");
				}

				int tos_count_tAdvancedHash_row6 = 0;

				// connection name:row6
				// source node:tDBInput_48 - inputs:(after_tDBInput_47) outputs:(row6,row6) |
				// target node:tAdvancedHash_row6 - inputs:(row6) outputs:()
				// linked node: tMap_15 - inputs:(row5,row6) outputs:(copyOfrwk_owners)

				org.talend.designer.components.lookup.common.ICommonLookup.MATCHING_MODE matchingModeEnum_row6 = org.talend.designer.components.lookup.common.ICommonLookup.MATCHING_MODE.UNIQUE_MATCH;

				org.talend.designer.components.lookup.memory.AdvancedMemoryLookup<row6Struct> tHash_Lookup_row6 = org.talend.designer.components.lookup.memory.AdvancedMemoryLookup
						.<row6Struct>getLookup(matchingModeEnum_row6);

				globalMap.put("tHash_Lookup_row6", tHash_Lookup_row6);

				/**
				 * [tAdvancedHash_row6 begin ] stop
				 */

				/**
				 * [tDBInput_48 begin ] start
				 */

				ok_Hash.put("tDBInput_48", false);
				start_Hash.put("tDBInput_48", System.currentTimeMillis());

				currentComponent = "tDBInput_48";

				int tos_count_tDBInput_48 = 0;

				org.talend.designer.components.util.mssql.MSSqlGenerateTimestampUtil mssqlGTU_tDBInput_48 = org.talend.designer.components.util.mssql.MSSqlUtilFactory
						.getMSSqlGenerateTimestampUtil();

				java.util.List<String> talendToDBList_tDBInput_48 = new java.util.ArrayList();
				String[] talendToDBArray_tDBInput_48 = new String[] { "FLOAT", "NUMERIC", "NUMERIC IDENTITY", "DECIMAL",
						"DECIMAL IDENTITY", "REAL" };
				java.util.Collections.addAll(talendToDBList_tDBInput_48, talendToDBArray_tDBInput_48);
				int nb_line_tDBInput_48 = 0;
				java.sql.Connection conn_tDBInput_48 = null;
				String driverClass_tDBInput_48 = "net.sourceforge.jtds.jdbc.Driver";
				java.lang.Class jdbcclazz_tDBInput_48 = java.lang.Class.forName(driverClass_tDBInput_48);
				String dbUser_tDBInput_48 = "ADMIN";

				final String decryptedPassword_tDBInput_48 = routines.system.PasswordEncryptUtil
						.decryptPassword("enc:routine.encryption.key.v1:zOs3LUJVUdbiCjlQ3F1PxLfS5hY6SN+WkAd2EO2GqvjT");

				String dbPwd_tDBInput_48 = decryptedPassword_tDBInput_48;

				String port_tDBInput_48 = "1433";
				String dbname_tDBInput_48 = "MARCAS_PY";
				String url_tDBInput_48 = "jdbc:jtds:sqlserver://" + "localhost";
				if (!"".equals(port_tDBInput_48)) {
					url_tDBInput_48 += ":" + "1433";
				}
				if (!"".equals(dbname_tDBInput_48)) {
					url_tDBInput_48 += "//" + "MARCAS_PY";
				}
				url_tDBInput_48 += ";appName=" + projectName + ";" + "";
				String dbschema_tDBInput_48 = "ADMIN";

				conn_tDBInput_48 = java.sql.DriverManager.getConnection(url_tDBInput_48, dbUser_tDBInput_48,
						dbPwd_tDBInput_48);

				java.sql.Statement stmt_tDBInput_48 = conn_tDBInput_48.createStatement();

				String dbquery_tDBInput_48 = "SELECT ADMIN.WRK_MARK.FILE_SEQ,\n		ADMIN.WRK_MARK.FILE_TYPE,\n		ADMIN.WRK_MARK.FILE_SERIES,\n		ADMIN.WRK_MARK.FILE_NBR,\n		"
						+ "ADMIN.WRK_MARK.DOC_ORI,\n		ADMIN.WRK_MARK.DOC_SERIES,\n		ADMIN.WRK_MARK.DOC_NBR,\n		ADMIN.WRK_MARK.IND_IMPORT,\n		ADMIN.WRK_"
						+ "MARK.APPLICATION_TYPE,\n		ADMIN.WRK_MARK.APPLICATION_SUBTYPE,\n		ADMIN.WRK_MARK.LAW_CODE,\n		ADMIN.WRK_MARK.FILING_DATE,\n		"
						+ "ADMIN.WRK_MARK.RECEPTION_DATE,\n		ADMIN.WRK_MARK.PUBLICATION_DATE,\n		ADMIN.WRK_MARK.PUBLICATION_NOTES,\n		ADMIN.WRK_MARK.I"
						+ "ND_REGISTERED,\n		ADMIN.WRK_MARK.REGISTRATION_TYPE,\n		ADMIN.WRK_MARK.REGISTRATION_SERIES,\n		ADMIN.WRK_MARK.REGISTRATION_N"
						+ "BR,\n		ADMIN.WRK_MARK.REGISTRATION_DUP,\n		ADMIN.WRK_MARK.REGISTRATION_DATE,\n		ADMIN.WRK_MARK.ENTITLEMENT_DATE,\n		ADMIN.WR"
						+ "K_MARK.EXPIRATION_DATE,\n		ADMIN.WRK_MARK.EXHIBITION_DATE,\n		ADMIN.WRK_MARK.EXHIBITION_NOTES,\n		ADMIN.WRK_MARK.SIGN_TYPE,"
						+ "\n		ADMIN.WRK_MARK.MARK_NAME,\n		ADMIN.WRK_MARK.MARK_NAME_LANG2,\n		ADMIN.WRK_MARK.MARK_TRANSLATION,\n		ADMIN.WRK_MARK.MARK_"
						+ "TRANSLATION_LANG2,\n		ADMIN.WRK_MARK.MARK_TRANSLITERATION,\n		ADMIN.WRK_MARK.MARK_TRANSLITERATION_LANG2,\n		ADMIN.WRK_MARK."
						+ "SERIES_DESCRIPTION,\n		ADMIN.WRK_MARK.COLOUR_DESCRIPTION,\n		ADMIN.WRK_MARK.COLOUR_DESCR_LANG2,\n		ADMIN.WRK_MARK.DISCLAIME"
						+ "R,\n		ADMIN.WRK_MARK.DISCLAIMER_LANG2,\n		ADMIN.WRK_MARK.BY_CONSENT,\n		ADMIN.WRK_MARK.REGULATIONS,\n		ADMIN.WRK_MARK.NOTES,"
						+ "\n		ADMIN.WRK_MARK.CAPTURE_USER_ID,\n		ADMIN.WRK_MARK.CAPTURE_DATE,\n		ADMIN.WRK_MARK.PUBLICATION_NBR,\n		ADMIN.WRK_MARK.PUB"
						+ "LICATION_SER,\n		ADMIN.WRK_MARK.PUBLICATION_TYP,\n		ADMIN.WRK_MARK.FIRST_PRIORITY_DATE,\n		ADMIN.WRK_MARK.MAIN_OWNER_ADDR_N"
						+ "BR,\n		ADMIN.WRK_MARK.MAIN_OWNER_PERSON_NBR,\n		ADMIN.WRK_MARK.SERVICE_ADDR_NBR,\n		ADMIN.WRK_MARK.SERVICE_PERSON_NBR,\n		AD"
						+ "MIN.WRK_MARK.NICE_CLASS_TXT,\n		ADMIN.WRK_MARK.MARK_CODE,\n		ADMIN.WRK_MARK.PROC_TYP,\n		ADMIN.WRK_MARK.PROC_NBR,\n		ADMIN.W"
						+ "RK_MARK.STATUS_CODE\nFROM	ADMIN.WRK_MARK";

				globalMap.put("tDBInput_48_QUERY", dbquery_tDBInput_48);
				java.sql.ResultSet rs_tDBInput_48 = null;

				try {
					rs_tDBInput_48 = stmt_tDBInput_48.executeQuery(dbquery_tDBInput_48);
					java.sql.ResultSetMetaData rsmd_tDBInput_48 = rs_tDBInput_48.getMetaData();
					int colQtyInRs_tDBInput_48 = rsmd_tDBInput_48.getColumnCount();

					String tmpContent_tDBInput_48 = null;

					while (rs_tDBInput_48.next()) {
						nb_line_tDBInput_48++;

						if (colQtyInRs_tDBInput_48 < 1) {
							row6.FILE_SEQ = null;
						} else {

							tmpContent_tDBInput_48 = rs_tDBInput_48.getString(1);
							if (tmpContent_tDBInput_48 != null) {
								if (talendToDBList_tDBInput_48.contains(
										rsmd_tDBInput_48.getColumnTypeName(1).toUpperCase(java.util.Locale.ENGLISH))) {
									row6.FILE_SEQ = FormatterUtils.formatUnwithE(tmpContent_tDBInput_48);
								} else {
									row6.FILE_SEQ = tmpContent_tDBInput_48;
								}
							} else {
								row6.FILE_SEQ = null;
							}
						}
						if (colQtyInRs_tDBInput_48 < 2) {
							row6.FILE_TYPE = null;
						} else {

							tmpContent_tDBInput_48 = rs_tDBInput_48.getString(2);
							if (tmpContent_tDBInput_48 != null) {
								if (talendToDBList_tDBInput_48.contains(
										rsmd_tDBInput_48.getColumnTypeName(2).toUpperCase(java.util.Locale.ENGLISH))) {
									row6.FILE_TYPE = FormatterUtils.formatUnwithE(tmpContent_tDBInput_48);
								} else {
									row6.FILE_TYPE = tmpContent_tDBInput_48;
								}
							} else {
								row6.FILE_TYPE = null;
							}
						}
						if (colQtyInRs_tDBInput_48 < 3) {
							row6.FILE_SERIES = null;
						} else {

							row6.FILE_SERIES = rs_tDBInput_48.getBigDecimal(3);
							if (rs_tDBInput_48.wasNull()) {
								throw new RuntimeException("Null value in non-Nullable column");
							}
						}
						if (colQtyInRs_tDBInput_48 < 4) {
							row6.FILE_NBR = null;
						} else {

							row6.FILE_NBR = rs_tDBInput_48.getBigDecimal(4);
							if (rs_tDBInput_48.wasNull()) {
								throw new RuntimeException("Null value in non-Nullable column");
							}
						}
						if (colQtyInRs_tDBInput_48 < 5) {
							row6.DOC_ORI = null;
						} else {

							tmpContent_tDBInput_48 = rs_tDBInput_48.getString(5);
							if (tmpContent_tDBInput_48 != null) {
								if (talendToDBList_tDBInput_48.contains(
										rsmd_tDBInput_48.getColumnTypeName(5).toUpperCase(java.util.Locale.ENGLISH))) {
									row6.DOC_ORI = FormatterUtils.formatUnwithE(tmpContent_tDBInput_48);
								} else {
									row6.DOC_ORI = tmpContent_tDBInput_48;
								}
							} else {
								row6.DOC_ORI = null;
							}
						}
						if (colQtyInRs_tDBInput_48 < 6) {
							row6.DOC_SERIES = null;
						} else {

							row6.DOC_SERIES = rs_tDBInput_48.getBigDecimal(6);
							if (rs_tDBInput_48.wasNull()) {
								row6.DOC_SERIES = null;
							}
						}
						if (colQtyInRs_tDBInput_48 < 7) {
							row6.DOC_NBR = null;
						} else {

							row6.DOC_NBR = rs_tDBInput_48.getBigDecimal(7);
							if (rs_tDBInput_48.wasNull()) {
								row6.DOC_NBR = null;
							}
						}
						if (colQtyInRs_tDBInput_48 < 8) {
							row6.IND_IMPORT = null;
						} else {

							row6.IND_IMPORT = rs_tDBInput_48.getBigDecimal(8);
							if (rs_tDBInput_48.wasNull()) {
								row6.IND_IMPORT = null;
							}
						}
						if (colQtyInRs_tDBInput_48 < 9) {
							row6.APPLICATION_TYPE = null;
						} else {

							tmpContent_tDBInput_48 = rs_tDBInput_48.getString(9);
							if (tmpContent_tDBInput_48 != null) {
								if (talendToDBList_tDBInput_48.contains(
										rsmd_tDBInput_48.getColumnTypeName(9).toUpperCase(java.util.Locale.ENGLISH))) {
									row6.APPLICATION_TYPE = FormatterUtils.formatUnwithE(tmpContent_tDBInput_48);
								} else {
									row6.APPLICATION_TYPE = tmpContent_tDBInput_48;
								}
							} else {
								row6.APPLICATION_TYPE = null;
							}
						}
						if (colQtyInRs_tDBInput_48 < 10) {
							row6.APPLICATION_SUBTYPE = null;
						} else {

							tmpContent_tDBInput_48 = rs_tDBInput_48.getString(10);
							if (tmpContent_tDBInput_48 != null) {
								if (talendToDBList_tDBInput_48.contains(
										rsmd_tDBInput_48.getColumnTypeName(10).toUpperCase(java.util.Locale.ENGLISH))) {
									row6.APPLICATION_SUBTYPE = FormatterUtils.formatUnwithE(tmpContent_tDBInput_48);
								} else {
									row6.APPLICATION_SUBTYPE = tmpContent_tDBInput_48;
								}
							} else {
								row6.APPLICATION_SUBTYPE = null;
							}
						}
						if (colQtyInRs_tDBInput_48 < 11) {
							row6.LAW_CODE = null;
						} else {

							row6.LAW_CODE = rs_tDBInput_48.getBigDecimal(11);
							if (rs_tDBInput_48.wasNull()) {
								throw new RuntimeException("Null value in non-Nullable column");
							}
						}
						if (colQtyInRs_tDBInput_48 < 12) {
							row6.FILING_DATE = null;
						} else {

							row6.FILING_DATE = mssqlGTU_tDBInput_48.getDate(rsmd_tDBInput_48, rs_tDBInput_48, 12);

						}
						if (colQtyInRs_tDBInput_48 < 13) {
							row6.RECEPTION_DATE = null;
						} else {

							row6.RECEPTION_DATE = mssqlGTU_tDBInput_48.getDate(rsmd_tDBInput_48, rs_tDBInput_48, 13);

						}
						if (colQtyInRs_tDBInput_48 < 14) {
							row6.PUBLICATION_DATE = null;
						} else {

							row6.PUBLICATION_DATE = mssqlGTU_tDBInput_48.getDate(rsmd_tDBInput_48, rs_tDBInput_48, 14);

						}
						if (colQtyInRs_tDBInput_48 < 15) {
							row6.PUBLICATION_NOTES = null;
						} else {

							tmpContent_tDBInput_48 = rs_tDBInput_48.getString(15);
							if (tmpContent_tDBInput_48 != null) {
								if (talendToDBList_tDBInput_48.contains(
										rsmd_tDBInput_48.getColumnTypeName(15).toUpperCase(java.util.Locale.ENGLISH))) {
									row6.PUBLICATION_NOTES = FormatterUtils.formatUnwithE(tmpContent_tDBInput_48);
								} else {
									row6.PUBLICATION_NOTES = tmpContent_tDBInput_48;
								}
							} else {
								row6.PUBLICATION_NOTES = null;
							}
						}
						if (colQtyInRs_tDBInput_48 < 16) {
							row6.IND_REGISTERED = null;
						} else {

							row6.IND_REGISTERED = rs_tDBInput_48.getBigDecimal(16);
							if (rs_tDBInput_48.wasNull()) {
								row6.IND_REGISTERED = null;
							}
						}
						if (colQtyInRs_tDBInput_48 < 17) {
							row6.REGISTRATION_TYPE = null;
						} else {

							tmpContent_tDBInput_48 = rs_tDBInput_48.getString(17);
							if (tmpContent_tDBInput_48 != null) {
								if (talendToDBList_tDBInput_48.contains(
										rsmd_tDBInput_48.getColumnTypeName(17).toUpperCase(java.util.Locale.ENGLISH))) {
									row6.REGISTRATION_TYPE = FormatterUtils.formatUnwithE(tmpContent_tDBInput_48);
								} else {
									row6.REGISTRATION_TYPE = tmpContent_tDBInput_48;
								}
							} else {
								row6.REGISTRATION_TYPE = null;
							}
						}
						if (colQtyInRs_tDBInput_48 < 18) {
							row6.REGISTRATION_SERIES = null;
						} else {

							row6.REGISTRATION_SERIES = rs_tDBInput_48.getBigDecimal(18);
							if (rs_tDBInput_48.wasNull()) {
								row6.REGISTRATION_SERIES = null;
							}
						}
						if (colQtyInRs_tDBInput_48 < 19) {
							row6.REGISTRATION_NBR = null;
						} else {

							row6.REGISTRATION_NBR = rs_tDBInput_48.getBigDecimal(19);
							if (rs_tDBInput_48.wasNull()) {
								row6.REGISTRATION_NBR = null;
							}
						}
						if (colQtyInRs_tDBInput_48 < 20) {
							row6.REGISTRATION_DUP = null;
						} else {

							tmpContent_tDBInput_48 = rs_tDBInput_48.getString(20);
							if (tmpContent_tDBInput_48 != null) {
								if (talendToDBList_tDBInput_48.contains(
										rsmd_tDBInput_48.getColumnTypeName(20).toUpperCase(java.util.Locale.ENGLISH))) {
									row6.REGISTRATION_DUP = FormatterUtils.formatUnwithE(tmpContent_tDBInput_48);
								} else {
									row6.REGISTRATION_DUP = tmpContent_tDBInput_48;
								}
							} else {
								row6.REGISTRATION_DUP = null;
							}
						}
						if (colQtyInRs_tDBInput_48 < 21) {
							row6.REGISTRATION_DATE = null;
						} else {

							row6.REGISTRATION_DATE = mssqlGTU_tDBInput_48.getDate(rsmd_tDBInput_48, rs_tDBInput_48, 21);

						}
						if (colQtyInRs_tDBInput_48 < 22) {
							row6.ENTITLEMENT_DATE = null;
						} else {

							row6.ENTITLEMENT_DATE = mssqlGTU_tDBInput_48.getDate(rsmd_tDBInput_48, rs_tDBInput_48, 22);

						}
						if (colQtyInRs_tDBInput_48 < 23) {
							row6.EXPIRATION_DATE = null;
						} else {

							row6.EXPIRATION_DATE = mssqlGTU_tDBInput_48.getDate(rsmd_tDBInput_48, rs_tDBInput_48, 23);

						}
						if (colQtyInRs_tDBInput_48 < 24) {
							row6.EXHIBITION_DATE = null;
						} else {

							row6.EXHIBITION_DATE = mssqlGTU_tDBInput_48.getDate(rsmd_tDBInput_48, rs_tDBInput_48, 24);

						}
						if (colQtyInRs_tDBInput_48 < 25) {
							row6.EXHIBITION_NOTES = null;
						} else {

							tmpContent_tDBInput_48 = rs_tDBInput_48.getString(25);
							if (tmpContent_tDBInput_48 != null) {
								if (talendToDBList_tDBInput_48.contains(
										rsmd_tDBInput_48.getColumnTypeName(25).toUpperCase(java.util.Locale.ENGLISH))) {
									row6.EXHIBITION_NOTES = FormatterUtils.formatUnwithE(tmpContent_tDBInput_48);
								} else {
									row6.EXHIBITION_NOTES = tmpContent_tDBInput_48;
								}
							} else {
								row6.EXHIBITION_NOTES = null;
							}
						}
						if (colQtyInRs_tDBInput_48 < 26) {
							row6.SIGN_TYPE = null;
						} else {

							tmpContent_tDBInput_48 = rs_tDBInput_48.getString(26);
							if (tmpContent_tDBInput_48 != null) {
								if (talendToDBList_tDBInput_48.contains(
										rsmd_tDBInput_48.getColumnTypeName(26).toUpperCase(java.util.Locale.ENGLISH))) {
									row6.SIGN_TYPE = FormatterUtils.formatUnwithE(tmpContent_tDBInput_48);
								} else {
									row6.SIGN_TYPE = tmpContent_tDBInput_48;
								}
							} else {
								row6.SIGN_TYPE = null;
							}
						}
						if (colQtyInRs_tDBInput_48 < 27) {
							row6.MARK_NAME = null;
						} else {

							tmpContent_tDBInput_48 = rs_tDBInput_48.getString(27);
							if (tmpContent_tDBInput_48 != null) {
								if (talendToDBList_tDBInput_48.contains(
										rsmd_tDBInput_48.getColumnTypeName(27).toUpperCase(java.util.Locale.ENGLISH))) {
									row6.MARK_NAME = FormatterUtils.formatUnwithE(tmpContent_tDBInput_48);
								} else {
									row6.MARK_NAME = tmpContent_tDBInput_48;
								}
							} else {
								row6.MARK_NAME = null;
							}
						}
						if (colQtyInRs_tDBInput_48 < 28) {
							row6.MARK_NAME_LANG2 = null;
						} else {

							tmpContent_tDBInput_48 = rs_tDBInput_48.getString(28);
							if (tmpContent_tDBInput_48 != null) {
								if (talendToDBList_tDBInput_48.contains(
										rsmd_tDBInput_48.getColumnTypeName(28).toUpperCase(java.util.Locale.ENGLISH))) {
									row6.MARK_NAME_LANG2 = FormatterUtils.formatUnwithE(tmpContent_tDBInput_48);
								} else {
									row6.MARK_NAME_LANG2 = tmpContent_tDBInput_48;
								}
							} else {
								row6.MARK_NAME_LANG2 = null;
							}
						}
						if (colQtyInRs_tDBInput_48 < 29) {
							row6.MARK_TRANSLATION = null;
						} else {

							tmpContent_tDBInput_48 = rs_tDBInput_48.getString(29);
							if (tmpContent_tDBInput_48 != null) {
								if (talendToDBList_tDBInput_48.contains(
										rsmd_tDBInput_48.getColumnTypeName(29).toUpperCase(java.util.Locale.ENGLISH))) {
									row6.MARK_TRANSLATION = FormatterUtils.formatUnwithE(tmpContent_tDBInput_48);
								} else {
									row6.MARK_TRANSLATION = tmpContent_tDBInput_48;
								}
							} else {
								row6.MARK_TRANSLATION = null;
							}
						}
						if (colQtyInRs_tDBInput_48 < 30) {
							row6.MARK_TRANSLATION_LANG2 = null;
						} else {

							tmpContent_tDBInput_48 = rs_tDBInput_48.getString(30);
							if (tmpContent_tDBInput_48 != null) {
								if (talendToDBList_tDBInput_48.contains(
										rsmd_tDBInput_48.getColumnTypeName(30).toUpperCase(java.util.Locale.ENGLISH))) {
									row6.MARK_TRANSLATION_LANG2 = FormatterUtils.formatUnwithE(tmpContent_tDBInput_48);
								} else {
									row6.MARK_TRANSLATION_LANG2 = tmpContent_tDBInput_48;
								}
							} else {
								row6.MARK_TRANSLATION_LANG2 = null;
							}
						}
						if (colQtyInRs_tDBInput_48 < 31) {
							row6.MARK_TRANSLITERATION = null;
						} else {

							tmpContent_tDBInput_48 = rs_tDBInput_48.getString(31);
							if (tmpContent_tDBInput_48 != null) {
								if (talendToDBList_tDBInput_48.contains(
										rsmd_tDBInput_48.getColumnTypeName(31).toUpperCase(java.util.Locale.ENGLISH))) {
									row6.MARK_TRANSLITERATION = FormatterUtils.formatUnwithE(tmpContent_tDBInput_48);
								} else {
									row6.MARK_TRANSLITERATION = tmpContent_tDBInput_48;
								}
							} else {
								row6.MARK_TRANSLITERATION = null;
							}
						}
						if (colQtyInRs_tDBInput_48 < 32) {
							row6.MARK_TRANSLITERATION_LANG2 = null;
						} else {

							tmpContent_tDBInput_48 = rs_tDBInput_48.getString(32);
							if (tmpContent_tDBInput_48 != null) {
								if (talendToDBList_tDBInput_48.contains(
										rsmd_tDBInput_48.getColumnTypeName(32).toUpperCase(java.util.Locale.ENGLISH))) {
									row6.MARK_TRANSLITERATION_LANG2 = FormatterUtils
											.formatUnwithE(tmpContent_tDBInput_48);
								} else {
									row6.MARK_TRANSLITERATION_LANG2 = tmpContent_tDBInput_48;
								}
							} else {
								row6.MARK_TRANSLITERATION_LANG2 = null;
							}
						}
						if (colQtyInRs_tDBInput_48 < 33) {
							row6.SERIES_DESCRIPTION = null;
						} else {

							tmpContent_tDBInput_48 = rs_tDBInput_48.getString(33);
							if (tmpContent_tDBInput_48 != null) {
								if (talendToDBList_tDBInput_48.contains(
										rsmd_tDBInput_48.getColumnTypeName(33).toUpperCase(java.util.Locale.ENGLISH))) {
									row6.SERIES_DESCRIPTION = FormatterUtils.formatUnwithE(tmpContent_tDBInput_48);
								} else {
									row6.SERIES_DESCRIPTION = tmpContent_tDBInput_48;
								}
							} else {
								row6.SERIES_DESCRIPTION = null;
							}
						}
						if (colQtyInRs_tDBInput_48 < 34) {
							row6.COLOUR_DESCRIPTION = null;
						} else {

							tmpContent_tDBInput_48 = rs_tDBInput_48.getString(34);
							if (tmpContent_tDBInput_48 != null) {
								if (talendToDBList_tDBInput_48.contains(
										rsmd_tDBInput_48.getColumnTypeName(34).toUpperCase(java.util.Locale.ENGLISH))) {
									row6.COLOUR_DESCRIPTION = FormatterUtils.formatUnwithE(tmpContent_tDBInput_48);
								} else {
									row6.COLOUR_DESCRIPTION = tmpContent_tDBInput_48;
								}
							} else {
								row6.COLOUR_DESCRIPTION = null;
							}
						}
						if (colQtyInRs_tDBInput_48 < 35) {
							row6.COLOUR_DESCR_LANG2 = null;
						} else {

							tmpContent_tDBInput_48 = rs_tDBInput_48.getString(35);
							if (tmpContent_tDBInput_48 != null) {
								if (talendToDBList_tDBInput_48.contains(
										rsmd_tDBInput_48.getColumnTypeName(35).toUpperCase(java.util.Locale.ENGLISH))) {
									row6.COLOUR_DESCR_LANG2 = FormatterUtils.formatUnwithE(tmpContent_tDBInput_48);
								} else {
									row6.COLOUR_DESCR_LANG2 = tmpContent_tDBInput_48;
								}
							} else {
								row6.COLOUR_DESCR_LANG2 = null;
							}
						}
						if (colQtyInRs_tDBInput_48 < 36) {
							row6.DISCLAIMER = null;
						} else {

							tmpContent_tDBInput_48 = rs_tDBInput_48.getString(36);
							if (tmpContent_tDBInput_48 != null) {
								if (talendToDBList_tDBInput_48.contains(
										rsmd_tDBInput_48.getColumnTypeName(36).toUpperCase(java.util.Locale.ENGLISH))) {
									row6.DISCLAIMER = FormatterUtils.formatUnwithE(tmpContent_tDBInput_48);
								} else {
									row6.DISCLAIMER = tmpContent_tDBInput_48;
								}
							} else {
								row6.DISCLAIMER = null;
							}
						}
						if (colQtyInRs_tDBInput_48 < 37) {
							row6.DISCLAIMER_LANG2 = null;
						} else {

							tmpContent_tDBInput_48 = rs_tDBInput_48.getString(37);
							if (tmpContent_tDBInput_48 != null) {
								if (talendToDBList_tDBInput_48.contains(
										rsmd_tDBInput_48.getColumnTypeName(37).toUpperCase(java.util.Locale.ENGLISH))) {
									row6.DISCLAIMER_LANG2 = FormatterUtils.formatUnwithE(tmpContent_tDBInput_48);
								} else {
									row6.DISCLAIMER_LANG2 = tmpContent_tDBInput_48;
								}
							} else {
								row6.DISCLAIMER_LANG2 = null;
							}
						}
						if (colQtyInRs_tDBInput_48 < 38) {
							row6.BY_CONSENT = null;
						} else {

							tmpContent_tDBInput_48 = rs_tDBInput_48.getString(38);
							if (tmpContent_tDBInput_48 != null) {
								if (talendToDBList_tDBInput_48.contains(
										rsmd_tDBInput_48.getColumnTypeName(38).toUpperCase(java.util.Locale.ENGLISH))) {
									row6.BY_CONSENT = FormatterUtils.formatUnwithE(tmpContent_tDBInput_48);
								} else {
									row6.BY_CONSENT = tmpContent_tDBInput_48;
								}
							} else {
								row6.BY_CONSENT = null;
							}
						}
						if (colQtyInRs_tDBInput_48 < 39) {
							row6.REGULATIONS = null;
						} else {

							tmpContent_tDBInput_48 = rs_tDBInput_48.getString(39);
							if (tmpContent_tDBInput_48 != null) {
								if (talendToDBList_tDBInput_48.contains(
										rsmd_tDBInput_48.getColumnTypeName(39).toUpperCase(java.util.Locale.ENGLISH))) {
									row6.REGULATIONS = FormatterUtils.formatUnwithE(tmpContent_tDBInput_48);
								} else {
									row6.REGULATIONS = tmpContent_tDBInput_48;
								}
							} else {
								row6.REGULATIONS = null;
							}
						}
						if (colQtyInRs_tDBInput_48 < 40) {
							row6.NOTES = null;
						} else {

							tmpContent_tDBInput_48 = rs_tDBInput_48.getString(40);
							if (tmpContent_tDBInput_48 != null) {
								if (talendToDBList_tDBInput_48.contains(
										rsmd_tDBInput_48.getColumnTypeName(40).toUpperCase(java.util.Locale.ENGLISH))) {
									row6.NOTES = FormatterUtils.formatUnwithE(tmpContent_tDBInput_48);
								} else {
									row6.NOTES = tmpContent_tDBInput_48;
								}
							} else {
								row6.NOTES = null;
							}
						}
						if (colQtyInRs_tDBInput_48 < 41) {
							row6.CAPTURE_USER_ID = null;
						} else {

							row6.CAPTURE_USER_ID = rs_tDBInput_48.getBigDecimal(41);
							if (rs_tDBInput_48.wasNull()) {
								row6.CAPTURE_USER_ID = null;
							}
						}
						if (colQtyInRs_tDBInput_48 < 42) {
							row6.CAPTURE_DATE = null;
						} else {

							row6.CAPTURE_DATE = mssqlGTU_tDBInput_48.getDate(rsmd_tDBInput_48, rs_tDBInput_48, 42);

						}
						if (colQtyInRs_tDBInput_48 < 43) {
							row6.PUBLICATION_NBR = null;
						} else {

							row6.PUBLICATION_NBR = rs_tDBInput_48.getBigDecimal(43);
							if (rs_tDBInput_48.wasNull()) {
								row6.PUBLICATION_NBR = null;
							}
						}
						if (colQtyInRs_tDBInput_48 < 44) {
							row6.PUBLICATION_SER = null;
						} else {

							tmpContent_tDBInput_48 = rs_tDBInput_48.getString(44);
							if (tmpContent_tDBInput_48 != null) {
								if (talendToDBList_tDBInput_48.contains(
										rsmd_tDBInput_48.getColumnTypeName(44).toUpperCase(java.util.Locale.ENGLISH))) {
									row6.PUBLICATION_SER = FormatterUtils.formatUnwithE(tmpContent_tDBInput_48);
								} else {
									row6.PUBLICATION_SER = tmpContent_tDBInput_48;
								}
							} else {
								row6.PUBLICATION_SER = null;
							}
						}
						if (colQtyInRs_tDBInput_48 < 45) {
							row6.PUBLICATION_TYP = null;
						} else {

							tmpContent_tDBInput_48 = rs_tDBInput_48.getString(45);
							if (tmpContent_tDBInput_48 != null) {
								if (talendToDBList_tDBInput_48.contains(
										rsmd_tDBInput_48.getColumnTypeName(45).toUpperCase(java.util.Locale.ENGLISH))) {
									row6.PUBLICATION_TYP = FormatterUtils.formatUnwithE(tmpContent_tDBInput_48);
								} else {
									row6.PUBLICATION_TYP = tmpContent_tDBInput_48;
								}
							} else {
								row6.PUBLICATION_TYP = null;
							}
						}
						if (colQtyInRs_tDBInput_48 < 46) {
							row6.FIRST_PRIORITY_DATE = null;
						} else {

							row6.FIRST_PRIORITY_DATE = mssqlGTU_tDBInput_48.getDate(rsmd_tDBInput_48, rs_tDBInput_48,
									46);

						}
						if (colQtyInRs_tDBInput_48 < 47) {
							row6.MAIN_OWNER_ADDR_NBR = null;
						} else {

							row6.MAIN_OWNER_ADDR_NBR = rs_tDBInput_48.getBigDecimal(47);
							if (rs_tDBInput_48.wasNull()) {
								row6.MAIN_OWNER_ADDR_NBR = null;
							}
						}
						if (colQtyInRs_tDBInput_48 < 48) {
							row6.MAIN_OWNER_PERSON_NBR = null;
						} else {

							row6.MAIN_OWNER_PERSON_NBR = rs_tDBInput_48.getBigDecimal(48);
							if (rs_tDBInput_48.wasNull()) {
								row6.MAIN_OWNER_PERSON_NBR = null;
							}
						}
						if (colQtyInRs_tDBInput_48 < 49) {
							row6.SERVICE_ADDR_NBR = null;
						} else {

							row6.SERVICE_ADDR_NBR = rs_tDBInput_48.getBigDecimal(49);
							if (rs_tDBInput_48.wasNull()) {
								row6.SERVICE_ADDR_NBR = null;
							}
						}
						if (colQtyInRs_tDBInput_48 < 50) {
							row6.SERVICE_PERSON_NBR = null;
						} else {

							row6.SERVICE_PERSON_NBR = rs_tDBInput_48.getBigDecimal(50);
							if (rs_tDBInput_48.wasNull()) {
								row6.SERVICE_PERSON_NBR = null;
							}
						}
						if (colQtyInRs_tDBInput_48 < 51) {
							row6.NICE_CLASS_TXT = null;
						} else {

							tmpContent_tDBInput_48 = rs_tDBInput_48.getString(51);
							if (tmpContent_tDBInput_48 != null) {
								if (talendToDBList_tDBInput_48.contains(
										rsmd_tDBInput_48.getColumnTypeName(51).toUpperCase(java.util.Locale.ENGLISH))) {
									row6.NICE_CLASS_TXT = FormatterUtils.formatUnwithE(tmpContent_tDBInput_48);
								} else {
									row6.NICE_CLASS_TXT = tmpContent_tDBInput_48;
								}
							} else {
								row6.NICE_CLASS_TXT = null;
							}
						}
						if (colQtyInRs_tDBInput_48 < 52) {
							row6.MARK_CODE = null;
						} else {

							row6.MARK_CODE = rs_tDBInput_48.getBigDecimal(52);
							if (rs_tDBInput_48.wasNull()) {
								row6.MARK_CODE = null;
							}
						}
						if (colQtyInRs_tDBInput_48 < 53) {
							row6.PROC_TYP = null;
						} else {

							tmpContent_tDBInput_48 = rs_tDBInput_48.getString(53);
							if (tmpContent_tDBInput_48 != null) {
								if (talendToDBList_tDBInput_48.contains(
										rsmd_tDBInput_48.getColumnTypeName(53).toUpperCase(java.util.Locale.ENGLISH))) {
									row6.PROC_TYP = FormatterUtils.formatUnwithE(tmpContent_tDBInput_48);
								} else {
									row6.PROC_TYP = tmpContent_tDBInput_48;
								}
							} else {
								row6.PROC_TYP = null;
							}
						}
						if (colQtyInRs_tDBInput_48 < 54) {
							row6.PROC_NBR = null;
						} else {

							row6.PROC_NBR = rs_tDBInput_48.getBigDecimal(54);
							if (rs_tDBInput_48.wasNull()) {
								row6.PROC_NBR = null;
							}
						}
						if (colQtyInRs_tDBInput_48 < 55) {
							row6.STATUS_CODE = null;
						} else {

							tmpContent_tDBInput_48 = rs_tDBInput_48.getString(55);
							if (tmpContent_tDBInput_48 != null) {
								if (talendToDBList_tDBInput_48.contains(
										rsmd_tDBInput_48.getColumnTypeName(55).toUpperCase(java.util.Locale.ENGLISH))) {
									row6.STATUS_CODE = FormatterUtils.formatUnwithE(tmpContent_tDBInput_48);
								} else {
									row6.STATUS_CODE = tmpContent_tDBInput_48;
								}
							} else {
								row6.STATUS_CODE = null;
							}
						}

						/**
						 * [tDBInput_48 begin ] stop
						 */

						/**
						 * [tDBInput_48 main ] start
						 */

						currentComponent = "tDBInput_48";

						tos_count_tDBInput_48++;

						/**
						 * [tDBInput_48 main ] stop
						 */

						/**
						 * [tDBInput_48 process_data_begin ] start
						 */

						currentComponent = "tDBInput_48";

						/**
						 * [tDBInput_48 process_data_begin ] stop
						 */

						/**
						 * [tAdvancedHash_row6 main ] start
						 */

						currentComponent = "tAdvancedHash_row6";

						if (execStat) {
							runStat.updateStatOnConnection(iterateId, 1, 1

									, "row6"

							);
						}

						row6Struct row6_HashRow = new row6Struct();

						row6_HashRow.FILE_SEQ = row6.FILE_SEQ;

						row6_HashRow.FILE_TYPE = row6.FILE_TYPE;

						row6_HashRow.FILE_SERIES = row6.FILE_SERIES;

						row6_HashRow.FILE_NBR = row6.FILE_NBR;

						row6_HashRow.DOC_ORI = row6.DOC_ORI;

						row6_HashRow.DOC_SERIES = row6.DOC_SERIES;

						row6_HashRow.DOC_NBR = row6.DOC_NBR;

						row6_HashRow.IND_IMPORT = row6.IND_IMPORT;

						row6_HashRow.APPLICATION_TYPE = row6.APPLICATION_TYPE;

						row6_HashRow.APPLICATION_SUBTYPE = row6.APPLICATION_SUBTYPE;

						row6_HashRow.LAW_CODE = row6.LAW_CODE;

						row6_HashRow.FILING_DATE = row6.FILING_DATE;

						row6_HashRow.RECEPTION_DATE = row6.RECEPTION_DATE;

						row6_HashRow.PUBLICATION_DATE = row6.PUBLICATION_DATE;

						row6_HashRow.PUBLICATION_NOTES = row6.PUBLICATION_NOTES;

						row6_HashRow.IND_REGISTERED = row6.IND_REGISTERED;

						row6_HashRow.REGISTRATION_TYPE = row6.REGISTRATION_TYPE;

						row6_HashRow.REGISTRATION_SERIES = row6.REGISTRATION_SERIES;

						row6_HashRow.REGISTRATION_NBR = row6.REGISTRATION_NBR;

						row6_HashRow.REGISTRATION_DUP = row6.REGISTRATION_DUP;

						row6_HashRow.REGISTRATION_DATE = row6.REGISTRATION_DATE;

						row6_HashRow.ENTITLEMENT_DATE = row6.ENTITLEMENT_DATE;

						row6_HashRow.EXPIRATION_DATE = row6.EXPIRATION_DATE;

						row6_HashRow.EXHIBITION_DATE = row6.EXHIBITION_DATE;

						row6_HashRow.EXHIBITION_NOTES = row6.EXHIBITION_NOTES;

						row6_HashRow.SIGN_TYPE = row6.SIGN_TYPE;

						row6_HashRow.MARK_NAME = row6.MARK_NAME;

						row6_HashRow.MARK_NAME_LANG2 = row6.MARK_NAME_LANG2;

						row6_HashRow.MARK_TRANSLATION = row6.MARK_TRANSLATION;

						row6_HashRow.MARK_TRANSLATION_LANG2 = row6.MARK_TRANSLATION_LANG2;

						row6_HashRow.MARK_TRANSLITERATION = row6.MARK_TRANSLITERATION;

						row6_HashRow.MARK_TRANSLITERATION_LANG2 = row6.MARK_TRANSLITERATION_LANG2;

						row6_HashRow.SERIES_DESCRIPTION = row6.SERIES_DESCRIPTION;

						row6_HashRow.COLOUR_DESCRIPTION = row6.COLOUR_DESCRIPTION;

						row6_HashRow.COLOUR_DESCR_LANG2 = row6.COLOUR_DESCR_LANG2;

						row6_HashRow.DISCLAIMER = row6.DISCLAIMER;

						row6_HashRow.DISCLAIMER_LANG2 = row6.DISCLAIMER_LANG2;

						row6_HashRow.BY_CONSENT = row6.BY_CONSENT;

						row6_HashRow.REGULATIONS = row6.REGULATIONS;

						row6_HashRow.NOTES = row6.NOTES;

						row6_HashRow.CAPTURE_USER_ID = row6.CAPTURE_USER_ID;

						row6_HashRow.CAPTURE_DATE = row6.CAPTURE_DATE;

						row6_HashRow.PUBLICATION_NBR = row6.PUBLICATION_NBR;

						row6_HashRow.PUBLICATION_SER = row6.PUBLICATION_SER;

						row6_HashRow.PUBLICATION_TYP = row6.PUBLICATION_TYP;

						row6_HashRow.FIRST_PRIORITY_DATE = row6.FIRST_PRIORITY_DATE;

						row6_HashRow.MAIN_OWNER_ADDR_NBR = row6.MAIN_OWNER_ADDR_NBR;

						row6_HashRow.MAIN_OWNER_PERSON_NBR = row6.MAIN_OWNER_PERSON_NBR;

						row6_HashRow.SERVICE_ADDR_NBR = row6.SERVICE_ADDR_NBR;

						row6_HashRow.SERVICE_PERSON_NBR = row6.SERVICE_PERSON_NBR;

						row6_HashRow.NICE_CLASS_TXT = row6.NICE_CLASS_TXT;

						row6_HashRow.MARK_CODE = row6.MARK_CODE;

						row6_HashRow.PROC_TYP = row6.PROC_TYP;

						row6_HashRow.PROC_NBR = row6.PROC_NBR;

						row6_HashRow.STATUS_CODE = row6.STATUS_CODE;

						tHash_Lookup_row6.put(row6_HashRow);

						tos_count_tAdvancedHash_row6++;

						/**
						 * [tAdvancedHash_row6 main ] stop
						 */

						/**
						 * [tAdvancedHash_row6 process_data_begin ] start
						 */

						currentComponent = "tAdvancedHash_row6";

						/**
						 * [tAdvancedHash_row6 process_data_begin ] stop
						 */

						/**
						 * [tAdvancedHash_row6 process_data_end ] start
						 */

						currentComponent = "tAdvancedHash_row6";

						/**
						 * [tAdvancedHash_row6 process_data_end ] stop
						 */

						/**
						 * [tDBInput_48 process_data_end ] start
						 */

						currentComponent = "tDBInput_48";

						/**
						 * [tDBInput_48 process_data_end ] stop
						 */

						/**
						 * [tDBInput_48 end ] start
						 */

						currentComponent = "tDBInput_48";

					}
				} finally {
					if (rs_tDBInput_48 != null) {
						rs_tDBInput_48.close();
					}
					if (stmt_tDBInput_48 != null) {
						stmt_tDBInput_48.close();
					}
					if (conn_tDBInput_48 != null && !conn_tDBInput_48.isClosed()) {

						conn_tDBInput_48.close();

						if ("com.mysql.cj.jdbc.Driver".equals((String) globalMap.get("driverClass_"))
								&& routines.system.BundleUtils.inOSGi()) {
							Class.forName("com.mysql.cj.jdbc.AbandonedConnectionCleanupThread")
									.getMethod("checkedShutdown").invoke(null, (Object[]) null);
						}

					}
				}
				globalMap.put("tDBInput_48_NB_LINE", nb_line_tDBInput_48);

				ok_Hash.put("tDBInput_48", true);
				end_Hash.put("tDBInput_48", System.currentTimeMillis());

				/**
				 * [tDBInput_48 end ] stop
				 */

				/**
				 * [tAdvancedHash_row6 end ] start
				 */

				currentComponent = "tAdvancedHash_row6";

				tHash_Lookup_row6.endPut();

				if (execStat) {
					runStat.updateStat(resourceMap, iterateId, 2, 0, "row6");
				}

				ok_Hash.put("tAdvancedHash_row6", true);
				end_Hash.put("tAdvancedHash_row6", System.currentTimeMillis());

				/**
				 * [tAdvancedHash_row6 end ] stop
				 */

			} // end the resume

		} catch (java.lang.Exception e) {

			TalendException te = new TalendException(e, currentComponent, globalMap);

			throw te;
		} catch (java.lang.Error error) {

			runStat.stopThreadStat();

			throw error;
		} finally {

			try {

				/**
				 * [tDBInput_48 finally ] start
				 */

				currentComponent = "tDBInput_48";

				/**
				 * [tDBInput_48 finally ] stop
				 */

				/**
				 * [tAdvancedHash_row6 finally ] start
				 */

				currentComponent = "tAdvancedHash_row6";

				/**
				 * [tAdvancedHash_row6 finally ] stop
				 */

			} catch (java.lang.Exception e) {
				// ignore
			} catch (java.lang.Error error) {
				// ignore
			}
			resourceMap = null;
		}

		globalMap.put("tDBInput_48_SUBPROCESS_STATE", 1);
	}

	public static class row96Struct implements routines.system.IPersistableRow<row96Struct> {
		final static byte[] commonByteArrayLock_WIPO_PROJECTS_G2b_Mig_TM = new byte[0];
		static byte[] commonByteArray_WIPO_PROJECTS_G2b_Mig_TM = new byte[0];

		public java.util.Date moment;

		public java.util.Date getMoment() {
			return this.moment;
		}

		public String pid;

		public String getPid() {
			return this.pid;
		}

		public String father_pid;

		public String getFather_pid() {
			return this.father_pid;
		}

		public String root_pid;

		public String getRoot_pid() {
			return this.root_pid;
		}

		public Long system_pid;

		public Long getSystem_pid() {
			return this.system_pid;
		}

		public String project;

		public String getProject() {
			return this.project;
		}

		public String job;

		public String getJob() {
			return this.job;
		}

		public String job_repository_id;

		public String getJob_repository_id() {
			return this.job_repository_id;
		}

		public String job_version;

		public String getJob_version() {
			return this.job_version;
		}

		public String context;

		public String getContext() {
			return this.context;
		}

		public String origin;

		public String getOrigin() {
			return this.origin;
		}

		public String message_type;

		public String getMessage_type() {
			return this.message_type;
		}

		public String message;

		public String getMessage() {
			return this.message;
		}

		public Long duration;

		public Long getDuration() {
			return this.duration;
		}

		private java.util.Date readDate(ObjectInputStream dis) throws IOException {
			java.util.Date dateReturn = null;
			int length = 0;
			length = dis.readByte();
			if (length == -1) {
				dateReturn = null;
			} else {
				dateReturn = new Date(dis.readLong());
			}
			return dateReturn;
		}

		private void writeDate(java.util.Date date1, ObjectOutputStream dos) throws IOException {
			if (date1 == null) {
				dos.writeByte(-1);
			} else {
				dos.writeByte(0);
				dos.writeLong(date1.getTime());
			}
		}

		private String readString(ObjectInputStream dis) throws IOException {
			String strReturn = null;
			int length = 0;
			length = dis.readInt();
			if (length == -1) {
				strReturn = null;
			} else {
				if (length > commonByteArray_WIPO_PROJECTS_G2b_Mig_TM.length) {
					if (length < 1024 && commonByteArray_WIPO_PROJECTS_G2b_Mig_TM.length == 0) {
						commonByteArray_WIPO_PROJECTS_G2b_Mig_TM = new byte[1024];
					} else {
						commonByteArray_WIPO_PROJECTS_G2b_Mig_TM = new byte[2 * length];
					}
				}
				dis.readFully(commonByteArray_WIPO_PROJECTS_G2b_Mig_TM, 0, length);
				strReturn = new String(commonByteArray_WIPO_PROJECTS_G2b_Mig_TM, 0, length, utf8Charset);
			}
			return strReturn;
		}

		private void writeString(String str, ObjectOutputStream dos) throws IOException {
			if (str == null) {
				dos.writeInt(-1);
			} else {
				byte[] byteArray = str.getBytes(utf8Charset);
				dos.writeInt(byteArray.length);
				dos.write(byteArray);
			}
		}

		public void readData(ObjectInputStream dis) {

			synchronized (commonByteArrayLock_WIPO_PROJECTS_G2b_Mig_TM) {

				try {

					int length = 0;

					this.moment = readDate(dis);

					this.pid = readString(dis);

					this.father_pid = readString(dis);

					this.root_pid = readString(dis);

					length = dis.readByte();
					if (length == -1) {
						this.system_pid = null;
					} else {
						this.system_pid = dis.readLong();
					}

					this.project = readString(dis);

					this.job = readString(dis);

					this.job_repository_id = readString(dis);

					this.job_version = readString(dis);

					this.context = readString(dis);

					this.origin = readString(dis);

					this.message_type = readString(dis);

					this.message = readString(dis);

					length = dis.readByte();
					if (length == -1) {
						this.duration = null;
					} else {
						this.duration = dis.readLong();
					}

				} catch (IOException e) {
					throw new RuntimeException(e);

				}

			}

		}

		public void writeData(ObjectOutputStream dos) {
			try {

				// java.util.Date

				writeDate(this.moment, dos);

				// String

				writeString(this.pid, dos);

				// String

				writeString(this.father_pid, dos);

				// String

				writeString(this.root_pid, dos);

				// Long

				if (this.system_pid == null) {
					dos.writeByte(-1);
				} else {
					dos.writeByte(0);
					dos.writeLong(this.system_pid);
				}

				// String

				writeString(this.project, dos);

				// String

				writeString(this.job, dos);

				// String

				writeString(this.job_repository_id, dos);

				// String

				writeString(this.job_version, dos);

				// String

				writeString(this.context, dos);

				// String

				writeString(this.origin, dos);

				// String

				writeString(this.message_type, dos);

				// String

				writeString(this.message, dos);

				// Long

				if (this.duration == null) {
					dos.writeByte(-1);
				} else {
					dos.writeByte(0);
					dos.writeLong(this.duration);
				}

			} catch (IOException e) {
				throw new RuntimeException(e);
			}

		}

		public String toString() {

			StringBuilder sb = new StringBuilder();
			sb.append(super.toString());
			sb.append("[");
			sb.append("moment=" + String.valueOf(moment));
			sb.append(",pid=" + pid);
			sb.append(",father_pid=" + father_pid);
			sb.append(",root_pid=" + root_pid);
			sb.append(",system_pid=" + String.valueOf(system_pid));
			sb.append(",project=" + project);
			sb.append(",job=" + job);
			sb.append(",job_repository_id=" + job_repository_id);
			sb.append(",job_version=" + job_version);
			sb.append(",context=" + context);
			sb.append(",origin=" + origin);
			sb.append(",message_type=" + message_type);
			sb.append(",message=" + message);
			sb.append(",duration=" + String.valueOf(duration));
			sb.append("]");

			return sb.toString();
		}

		/**
		 * Compare keys
		 */
		public int compareTo(row96Struct other) {

			int returnValue = -1;

			return returnValue;
		}

		private int checkNullsAndCompare(Object object1, Object object2) {
			int returnValue = 0;
			if (object1 instanceof Comparable && object2 instanceof Comparable) {
				returnValue = ((Comparable) object1).compareTo(object2);
			} else if (object1 != null && object2 != null) {
				returnValue = compareStrings(object1.toString(), object2.toString());
			} else if (object1 == null && object2 != null) {
				returnValue = 1;
			} else if (object1 != null && object2 == null) {
				returnValue = -1;
			} else {
				returnValue = 0;
			}

			return returnValue;
		}

		private int compareStrings(String string1, String string2) {
			return string1.compareTo(string2);
		}

	}

	public void tStatCatcher_1Process(final java.util.Map<String, Object> globalMap) throws TalendException {
		globalMap.put("tStatCatcher_1_SUBPROCESS_STATE", 0);

		final boolean execStat = this.execStat;

		String iterateId = "";

		String currentComponent = "";
		java.util.Map<String, Object> resourceMap = new java.util.HashMap<String, Object>();

		try {
			// TDI-39566 avoid throwing an useless Exception
			boolean resumeIt = true;
			if (globalResumeTicket == false && resumeEntryMethodName != null) {
				String currentMethodName = new java.lang.Exception().getStackTrace()[0].getMethodName();
				resumeIt = resumeEntryMethodName.equals(currentMethodName);
			}
			if (resumeIt || globalResumeTicket) { // start the resume
				globalResumeTicket = true;

				row96Struct row96 = new row96Struct();

				/**
				 * [tLogRow_22 begin ] start
				 */

				ok_Hash.put("tLogRow_22", false);
				start_Hash.put("tLogRow_22", System.currentTimeMillis());

				currentComponent = "tLogRow_22";

				if (execStat) {
					runStat.updateStatOnConnection(resourceMap, iterateId, 0, 0, "row96");
				}

				int tos_count_tLogRow_22 = 0;

				///////////////////////

				final String OUTPUT_FIELD_SEPARATOR_tLogRow_22 = "|";
				java.io.PrintStream consoleOut_tLogRow_22 = null;

				StringBuilder strBuffer_tLogRow_22 = null;
				int nb_line_tLogRow_22 = 0;
///////////////////////    			

				/**
				 * [tLogRow_22 begin ] stop
				 */

				/**
				 * [tStatCatcher_1 begin ] start
				 */

				ok_Hash.put("tStatCatcher_1", false);
				start_Hash.put("tStatCatcher_1", System.currentTimeMillis());

				currentComponent = "tStatCatcher_1";

				int tos_count_tStatCatcher_1 = 0;

				for (StatCatcherUtils.StatCatcherMessage scm : tStatCatcher_1.getMessages()) {
					row96.pid = pid;
					row96.root_pid = rootPid;
					row96.father_pid = fatherPid;
					row96.project = projectName;
					row96.job = jobName;
					row96.context = contextStr;
					row96.origin = (scm.getOrigin() == null || scm.getOrigin().length() < 1 ? null : scm.getOrigin());
					row96.message = scm.getMessage();
					row96.duration = scm.getDuration();
					row96.moment = scm.getMoment();
					row96.message_type = scm.getMessageType();
					row96.job_version = scm.getJobVersion();
					row96.job_repository_id = scm.getJobId();
					row96.system_pid = scm.getSystemPid();

					/**
					 * [tStatCatcher_1 begin ] stop
					 */

					/**
					 * [tStatCatcher_1 main ] start
					 */

					currentComponent = "tStatCatcher_1";

					tos_count_tStatCatcher_1++;

					/**
					 * [tStatCatcher_1 main ] stop
					 */

					/**
					 * [tStatCatcher_1 process_data_begin ] start
					 */

					currentComponent = "tStatCatcher_1";

					/**
					 * [tStatCatcher_1 process_data_begin ] stop
					 */

					/**
					 * [tLogRow_22 main ] start
					 */

					currentComponent = "tLogRow_22";

					if (execStat) {
						runStat.updateStatOnConnection(iterateId, 1, 1

								, "row96"

						);
					}

///////////////////////		

					strBuffer_tLogRow_22 = new StringBuilder();

					if (row96.moment != null) { //

						strBuffer_tLogRow_22.append(FormatterUtils.format_Date(row96.moment, "yyyy-MM-dd HH:mm:ss"));

					} //

					strBuffer_tLogRow_22.append("|");

					if (row96.job != null) { //

						strBuffer_tLogRow_22.append(String.valueOf(row96.job));

					} //

					strBuffer_tLogRow_22.append("|");

					if (row96.context != null) { //

						strBuffer_tLogRow_22.append(String.valueOf(row96.context));

					} //

					strBuffer_tLogRow_22.append("|");

					if (row96.origin != null) { //

						strBuffer_tLogRow_22.append(String.valueOf(row96.origin));

					} //

					strBuffer_tLogRow_22.append("|");

					if (row96.message_type != null) { //

						strBuffer_tLogRow_22.append(String.valueOf(row96.message_type));

					} //

					strBuffer_tLogRow_22.append("|");

					if (row96.message != null) { //

						strBuffer_tLogRow_22.append(String.valueOf(row96.message));

					} //

					strBuffer_tLogRow_22.append("|");

					if (row96.duration != null) { //

						strBuffer_tLogRow_22.append(String.valueOf(row96.duration));

					} //

					if (globalMap.get("tLogRow_CONSOLE") != null) {
						consoleOut_tLogRow_22 = (java.io.PrintStream) globalMap.get("tLogRow_CONSOLE");
					} else {
						consoleOut_tLogRow_22 = new java.io.PrintStream(new java.io.BufferedOutputStream(System.out));
						globalMap.put("tLogRow_CONSOLE", consoleOut_tLogRow_22);
					}
					consoleOut_tLogRow_22.println(strBuffer_tLogRow_22.toString());
					consoleOut_tLogRow_22.flush();
					nb_line_tLogRow_22++;
//////

//////                    

///////////////////////    			

					tos_count_tLogRow_22++;

					/**
					 * [tLogRow_22 main ] stop
					 */

					/**
					 * [tLogRow_22 process_data_begin ] start
					 */

					currentComponent = "tLogRow_22";

					/**
					 * [tLogRow_22 process_data_begin ] stop
					 */

					/**
					 * [tLogRow_22 process_data_end ] start
					 */

					currentComponent = "tLogRow_22";

					/**
					 * [tLogRow_22 process_data_end ] stop
					 */

					/**
					 * [tStatCatcher_1 process_data_end ] start
					 */

					currentComponent = "tStatCatcher_1";

					/**
					 * [tStatCatcher_1 process_data_end ] stop
					 */

					/**
					 * [tStatCatcher_1 end ] start
					 */

					currentComponent = "tStatCatcher_1";

				}

				ok_Hash.put("tStatCatcher_1", true);
				end_Hash.put("tStatCatcher_1", System.currentTimeMillis());

				/**
				 * [tStatCatcher_1 end ] stop
				 */

				/**
				 * [tLogRow_22 end ] start
				 */

				currentComponent = "tLogRow_22";

//////
//////
				globalMap.put("tLogRow_22_NB_LINE", nb_line_tLogRow_22);

///////////////////////    			

				if (execStat) {
					runStat.updateStat(resourceMap, iterateId, 2, 0, "row96");
				}

				ok_Hash.put("tLogRow_22", true);
				end_Hash.put("tLogRow_22", System.currentTimeMillis());

				/**
				 * [tLogRow_22 end ] stop
				 */

			} // end the resume

		} catch (java.lang.Exception e) {

			TalendException te = new TalendException(e, currentComponent, globalMap);

			throw te;
		} catch (java.lang.Error error) {

			runStat.stopThreadStat();

			throw error;
		} finally {

			try {

				/**
				 * [tStatCatcher_1 finally ] start
				 */

				currentComponent = "tStatCatcher_1";

				/**
				 * [tStatCatcher_1 finally ] stop
				 */

				/**
				 * [tLogRow_22 finally ] start
				 */

				currentComponent = "tLogRow_22";

				/**
				 * [tLogRow_22 finally ] stop
				 */

			} catch (java.lang.Exception e) {
				// ignore
			} catch (java.lang.Error error) {
				// ignore
			}
			resourceMap = null;
		}

		globalMap.put("tStatCatcher_1_SUBPROCESS_STATE", 1);
	}

	public String resuming_logs_dir_path = null;
	public String resuming_checkpoint_path = null;
	public String parent_part_launcher = null;
	private String resumeEntryMethodName = null;
	private boolean globalResumeTicket = false;

	public boolean watch = false;
	// portStats is null, it means don't execute the statistics
	public Integer portStats = null;
	public int portTraces = 4334;
	public String clientHost;
	public String defaultClientHost = "localhost";
	public String contextStr = "Default";
	public boolean isDefaultContext = true;
	public String pid = "0";
	public String rootPid = null;
	public String fatherPid = null;
	public String fatherNode = null;
	public long startTime = 0;
	public boolean isChildJob = false;
	public String log4jLevel = "";

	private boolean enableLogStash;

	private boolean execStat = true;

	private ThreadLocal<java.util.Map<String, String>> threadLocal = new ThreadLocal<java.util.Map<String, String>>() {
		protected java.util.Map<String, String> initialValue() {
			java.util.Map<String, String> threadRunResultMap = new java.util.HashMap<String, String>();
			threadRunResultMap.put("errorCode", null);
			threadRunResultMap.put("status", "");
			return threadRunResultMap;
		};
	};

	protected PropertiesWithType context_param = new PropertiesWithType();
	public java.util.Map<String, Object> parentContextMap = new java.util.HashMap<String, Object>();

	public String status = "";

	public static void main(String[] args) {
		final G2b_Mig_TM G2b_Mig_TMClass = new G2b_Mig_TM();

		int exitCode = G2b_Mig_TMClass.runJobInTOS(args);

		System.exit(exitCode);
	}

	public String[][] runJob(String[] args) {

		int exitCode = runJobInTOS(args);
		String[][] bufferValue = new String[][] { { Integer.toString(exitCode) } };

		return bufferValue;
	}

	public boolean hastBufferOutputComponent() {
		boolean hastBufferOutput = false;

		return hastBufferOutput;
	}

	public int runJobInTOS(String[] args) {
		// reset status
		status = "";

		String lastStr = "";
		for (String arg : args) {
			if (arg.equalsIgnoreCase("--context_param")) {
				lastStr = arg;
			} else if (lastStr.equals("")) {
				evalParam(arg);
			} else {
				evalParam(lastStr + " " + arg);
				lastStr = "";
			}
		}
		enableLogStash = "true".equalsIgnoreCase(System.getProperty("audit.enabled"));

		if (clientHost == null) {
			clientHost = defaultClientHost;
		}

		if (pid == null || "0".equals(pid)) {
			pid = TalendString.getAsciiRandomString(6);
		}

		if (rootPid == null) {
			rootPid = pid;
		}
		if (fatherPid == null) {
			fatherPid = pid;
		} else {
			isChildJob = true;
		}

		if (portStats != null) {
			// portStats = -1; //for testing
			if (portStats < 0 || portStats > 65535) {
				// issue:10869, the portStats is invalid, so this client socket can't open
				System.err.println("The statistics socket port " + portStats + " is invalid.");
				execStat = false;
			}
		} else {
			execStat = false;
		}

		try {
			// call job/subjob with an existing context, like: --context=production. if
			// without this parameter, there will use the default context instead.
			java.io.InputStream inContext = G2b_Mig_TM.class.getClassLoader()
					.getResourceAsStream("wipo_projects/g2b_mig_tm_0_1/contexts/" + contextStr + ".properties");
			if (inContext == null) {
				inContext = G2b_Mig_TM.class.getClassLoader()
						.getResourceAsStream("config/contexts/" + contextStr + ".properties");
			}
			if (inContext != null) {
				// defaultProps is in order to keep the original context value
				if (context != null && context.isEmpty()) {
					defaultProps.load(inContext);
					context = new ContextProperties(defaultProps);
				}

				inContext.close();
			} else if (!isDefaultContext) {
				// print info and job continue to run, for case: context_param is not empty.
				System.err.println("Could not find the context " + contextStr);
			}

			if (!context_param.isEmpty()) {
				context.putAll(context_param);
				// set types for params from parentJobs
				for (Object key : context_param.keySet()) {
					String context_key = key.toString();
					String context_type = context_param.getContextType(context_key);
					context.setContextType(context_key, context_type);

				}
			}
			class ContextProcessing {
				private void processContext_0() {
					context.setContextType("intermediateHost", "id_String");
					if (context.getStringValue("intermediateHost") == null) {
						context.intermediateHost = null;
					} else {
						context.intermediateHost = (String) context.getProperty("intermediateHost");
					}
					context.setContextType("intermediatePort", "id_String");
					if (context.getStringValue("intermediatePort") == null) {
						context.intermediatePort = null;
					} else {
						context.intermediatePort = (String) context.getProperty("intermediatePort");
					}
					context.setContextType("intermediateDB", "id_String");
					if (context.getStringValue("intermediateDB") == null) {
						context.intermediateDB = null;
					} else {
						context.intermediateDB = (String) context.getProperty("intermediateDB");
					}
					context.setContextType("intermediateUser", "id_String");
					if (context.getStringValue("intermediateUser") == null) {
						context.intermediateUser = null;
					} else {
						context.intermediateUser = (String) context.getProperty("intermediateUser");
					}
					context.setContextType("intermediatePassword", "id_String");
					if (context.getStringValue("intermediatePassword") == null) {
						context.intermediatePassword = null;
					} else {
						context.intermediatePassword = (String) context.getProperty("intermediatePassword");
					}
					context.setContextType("ipasHost", "id_String");
					if (context.getStringValue("ipasHost") == null) {
						context.ipasHost = null;
					} else {
						context.ipasHost = (String) context.getProperty("ipasHost");
					}
					context.setContextType("ipasPort", "id_String");
					if (context.getStringValue("ipasPort") == null) {
						context.ipasPort = null;
					} else {
						context.ipasPort = (String) context.getProperty("ipasPort");
					}
					context.setContextType("ipasDB", "id_String");
					if (context.getStringValue("ipasDB") == null) {
						context.ipasDB = null;
					} else {
						context.ipasDB = (String) context.getProperty("ipasDB");
					}
					context.setContextType("ipasUser", "id_String");
					if (context.getStringValue("ipasUser") == null) {
						context.ipasUser = null;
					} else {
						context.ipasUser = (String) context.getProperty("ipasUser");
					}
					context.setContextType("ipasPassword", "id_String");
					if (context.getStringValue("ipasPassword") == null) {
						context.ipasPassword = null;
					} else {
						context.ipasPassword = (String) context.getProperty("ipasPassword");
					}
					context.setContextType("ipasSaPassword", "id_String");
					if (context.getStringValue("ipasSaPassword") == null) {
						context.ipasSaPassword = null;
					} else {
						context.ipasSaPassword = (String) context.getProperty("ipasSaPassword");
					}
					context.setContextType("processAll", "id_String");
					if (context.getStringValue("processAll") == null) {
						context.processAll = null;
					} else {
						context.processAll = (String) context.getProperty("processAll");
					}
				}

				public void processAllContext() {
					processContext_0();
				}
			}

			new ContextProcessing().processAllContext();
		} catch (java.io.IOException ie) {
			System.err.println("Could not load context " + contextStr);
			ie.printStackTrace();
		}

		// get context value from parent directly
		if (parentContextMap != null && !parentContextMap.isEmpty()) {
			if (parentContextMap.containsKey("intermediateHost")) {
				context.intermediateHost = (String) parentContextMap.get("intermediateHost");
			}
			if (parentContextMap.containsKey("intermediatePort")) {
				context.intermediatePort = (String) parentContextMap.get("intermediatePort");
			}
			if (parentContextMap.containsKey("intermediateDB")) {
				context.intermediateDB = (String) parentContextMap.get("intermediateDB");
			}
			if (parentContextMap.containsKey("intermediateUser")) {
				context.intermediateUser = (String) parentContextMap.get("intermediateUser");
			}
			if (parentContextMap.containsKey("intermediatePassword")) {
				context.intermediatePassword = (String) parentContextMap.get("intermediatePassword");
			}
			if (parentContextMap.containsKey("ipasHost")) {
				context.ipasHost = (String) parentContextMap.get("ipasHost");
			}
			if (parentContextMap.containsKey("ipasPort")) {
				context.ipasPort = (String) parentContextMap.get("ipasPort");
			}
			if (parentContextMap.containsKey("ipasDB")) {
				context.ipasDB = (String) parentContextMap.get("ipasDB");
			}
			if (parentContextMap.containsKey("ipasUser")) {
				context.ipasUser = (String) parentContextMap.get("ipasUser");
			}
			if (parentContextMap.containsKey("ipasPassword")) {
				context.ipasPassword = (String) parentContextMap.get("ipasPassword");
			}
			if (parentContextMap.containsKey("ipasSaPassword")) {
				context.ipasSaPassword = (String) parentContextMap.get("ipasSaPassword");
			}
			if (parentContextMap.containsKey("processAll")) {
				context.processAll = (String) parentContextMap.get("processAll");
			}
		}

		// Resume: init the resumeUtil
		resumeEntryMethodName = ResumeUtil.getResumeEntryMethodName(resuming_checkpoint_path);
		resumeUtil = new ResumeUtil(resuming_logs_dir_path, isChildJob, rootPid);
		resumeUtil.initCommonInfo(pid, rootPid, fatherPid, projectName, jobName, contextStr, jobVersion);

		List<String> parametersToEncrypt = new java.util.ArrayList<String>();
		// Resume: jobStart
		resumeUtil.addLog("JOB_STARTED", "JOB:" + jobName, parent_part_launcher, Thread.currentThread().getId() + "",
				"", "", "", "", resumeUtil.convertToJsonText(context, parametersToEncrypt));

		if (execStat) {
			try {
				runStat.openSocket(!isChildJob);
				runStat.setAllPID(rootPid, fatherPid, pid, jobName);
				runStat.startThreadStat(clientHost, portStats);
				runStat.updateStatOnJob(RunStat.JOBSTART, fatherNode);
			} catch (java.io.IOException ioException) {
				ioException.printStackTrace();
			}
		}

		java.util.concurrent.ConcurrentHashMap<Object, Object> concurrentHashMap = new java.util.concurrent.ConcurrentHashMap<Object, Object>();
		globalMap.put("concurrentHashMap", concurrentHashMap);

		long startUsedMemory = Runtime.getRuntime().totalMemory() - Runtime.getRuntime().freeMemory();
		long endUsedMemory = 0;
		long end = 0;

		startTime = System.currentTimeMillis();
		tStatCatcher_1.addMessage("begin");

		this.globalResumeTicket = true;// to run tPreJob

		try {
			tStatCatcher_1Process(globalMap);
		} catch (java.lang.Exception e) {
			e.printStackTrace();
		}

		this.globalResumeTicket = false;// to run others jobs

		try {
			errorCode = null;
			tDBConnection_1Process(globalMap);
			if (!"failure".equals(status)) {
				status = "end";
			}
		} catch (TalendException e_tDBConnection_1) {
			globalMap.put("tDBConnection_1_SUBPROCESS_STATE", -1);

			e_tDBConnection_1.printStackTrace();

		}

		this.globalResumeTicket = true;// to run tPostJob

		end = System.currentTimeMillis();

		if (watch) {
			System.out.println((end - startTime) + " milliseconds");
		}

		endUsedMemory = Runtime.getRuntime().totalMemory() - Runtime.getRuntime().freeMemory();
		if (false) {
			System.out.println((endUsedMemory - startUsedMemory) + " bytes memory increase when running : G2b_Mig_TM");
		}
		tStatCatcher_1.addMessage(status == "" ? "end" : status, (end - startTime));
		try {
			tStatCatcher_1Process(globalMap);
		} catch (java.lang.Exception e) {
			e.printStackTrace();
		}

		if (execStat) {
			runStat.updateStatOnJob(RunStat.JOBEND, fatherNode);
			runStat.stopThreadStat();
		}
		int returnCode = 0;

		if (errorCode == null) {
			returnCode = status != null && status.equals("failure") ? 1 : 0;
		} else {
			returnCode = errorCode.intValue();
		}
		resumeUtil.addLog("JOB_ENDED", "JOB:" + jobName, parent_part_launcher, Thread.currentThread().getId() + "", "",
				"" + returnCode, "", "", "");

		return returnCode;

	}

	// only for OSGi env
	public void destroy() {
		closeSqlDbConnections();

	}

	private void closeSqlDbConnections() {
		try {
			Object obj_conn;
			obj_conn = globalMap.remove("conn_tDBConnection_1");
			if (null != obj_conn) {
				((java.sql.Connection) obj_conn).close();
			}
			obj_conn = globalMap.remove("conn_tDBConnection_2");
			if (null != obj_conn) {
				((java.sql.Connection) obj_conn).close();
			}
		} catch (java.lang.Exception e) {
		}
	}

	private java.util.Map<String, Object> getSharedConnections4REST() {
		java.util.Map<String, Object> connections = new java.util.HashMap<String, Object>();
		connections.put("conn_tDBConnection_1", globalMap.get("conn_tDBConnection_1"));
		connections.put("conn_tDBConnection_2", globalMap.get("conn_tDBConnection_2"));

		return connections;
	}

	private void evalParam(String arg) {
		if (arg.startsWith("--resuming_logs_dir_path")) {
			resuming_logs_dir_path = arg.substring(25);
		} else if (arg.startsWith("--resuming_checkpoint_path")) {
			resuming_checkpoint_path = arg.substring(27);
		} else if (arg.startsWith("--parent_part_launcher")) {
			parent_part_launcher = arg.substring(23);
		} else if (arg.startsWith("--watch")) {
			watch = true;
		} else if (arg.startsWith("--stat_port=")) {
			String portStatsStr = arg.substring(12);
			if (portStatsStr != null && !portStatsStr.equals("null")) {
				portStats = Integer.parseInt(portStatsStr);
			}
		} else if (arg.startsWith("--trace_port=")) {
			portTraces = Integer.parseInt(arg.substring(13));
		} else if (arg.startsWith("--client_host=")) {
			clientHost = arg.substring(14);
		} else if (arg.startsWith("--context=")) {
			contextStr = arg.substring(10);
			isDefaultContext = false;
		} else if (arg.startsWith("--father_pid=")) {
			fatherPid = arg.substring(13);
		} else if (arg.startsWith("--root_pid=")) {
			rootPid = arg.substring(11);
		} else if (arg.startsWith("--father_node=")) {
			fatherNode = arg.substring(14);
		} else if (arg.startsWith("--pid=")) {
			pid = arg.substring(6);
		} else if (arg.startsWith("--context_type")) {
			String keyValue = arg.substring(15);
			int index = -1;
			if (keyValue != null && (index = keyValue.indexOf('=')) > -1) {
				if (fatherPid == null) {
					context_param.setContextType(keyValue.substring(0, index),
							replaceEscapeChars(keyValue.substring(index + 1)));
				} else { // the subjob won't escape the especial chars
					context_param.setContextType(keyValue.substring(0, index), keyValue.substring(index + 1));
				}

			}

		} else if (arg.startsWith("--context_param")) {
			String keyValue = arg.substring(16);
			int index = -1;
			if (keyValue != null && (index = keyValue.indexOf('=')) > -1) {
				if (fatherPid == null) {
					context_param.put(keyValue.substring(0, index), replaceEscapeChars(keyValue.substring(index + 1)));
				} else { // the subjob won't escape the especial chars
					context_param.put(keyValue.substring(0, index), keyValue.substring(index + 1));
				}
			}
		} else if (arg.startsWith("--log4jLevel=")) {
			log4jLevel = arg.substring(13);
		} else if (arg.startsWith("--audit.enabled") && arg.contains("=")) {// for trunjob call
			final int equal = arg.indexOf('=');
			final String key = arg.substring("--".length(), equal);
			System.setProperty(key, arg.substring(equal + 1));
		}
	}

	private static final String NULL_VALUE_EXPRESSION_IN_COMMAND_STRING_FOR_CHILD_JOB_ONLY = "<TALEND_NULL>";

	private final String[][] escapeChars = { { "\\\\", "\\" }, { "\\n", "\n" }, { "\\'", "\'" }, { "\\r", "\r" },
			{ "\\f", "\f" }, { "\\b", "\b" }, { "\\t", "\t" } };

	private String replaceEscapeChars(String keyValue) {

		if (keyValue == null || ("").equals(keyValue.trim())) {
			return keyValue;
		}

		StringBuilder result = new StringBuilder();
		int currIndex = 0;
		while (currIndex < keyValue.length()) {
			int index = -1;
			// judege if the left string includes escape chars
			for (String[] strArray : escapeChars) {
				index = keyValue.indexOf(strArray[0], currIndex);
				if (index >= 0) {

					result.append(keyValue.substring(currIndex, index + strArray[0].length()).replace(strArray[0],
							strArray[1]));
					currIndex = index + strArray[0].length();
					break;
				}
			}
			// if the left string doesn't include escape chars, append the left into the
			// result
			if (index < 0) {
				result.append(keyValue.substring(currIndex));
				currIndex = currIndex + keyValue.length();
			}
		}

		return result.toString();
	}

	public Integer getErrorCode() {
		return errorCode;
	}

	public String getStatus() {
		return status;
	}

	ResumeUtil resumeUtil = null;
}
/************************************************************************************************
 * 1041656 characters generated by Talend Open Studio for Data Integration on
 * the November 5, 2020 at 2:32:53 PM CET
 ************************************************************************************************/