// ============================================================================
//
// Copyright (c) 2006-2015, Talend Inc.
//
// This source code has been automatically generated by_Talend Open Studio for Data Integration
// / Licensed under the Apache License, Version 2.0 (the "License");
// you may not use this file except in compliance with the License.
// You may obtain a copy of the License at
// http://www.apache.org/licenses/LICENSE-2.0
// 
// Unless required by applicable law or agreed to in writing, software
// distributed under the License is distributed on an "AS IS" BASIS,
// WITHOUT WARRANTIES OR CONDITIONS OF ANY KIND, either express or implied.
// See the License for the specific language governing permissions and
// limitations under the License.


package wipo_projects.f_ipas_env_cre_0_1;

import routines.Numeric;
import routines.DataOperation;
import routines.TalendDataGenerator;
import routines.TalendStringUtil;
import routines.TalendString;
import routines.StringHandling;
import routines.Relational;
import routines.TalendDate;
import routines.Mathematical;
import routines.IPAS;
import routines.system.*;
import routines.system.api.*;
import java.text.ParseException;
import java.text.SimpleDateFormat;
import java.util.Date;
import java.util.List;
import java.math.BigDecimal;
import java.io.ByteArrayOutputStream;
import java.io.ByteArrayInputStream;
import java.io.DataInputStream;
import java.io.DataOutputStream;
import java.io.ObjectOutputStream;
import java.io.ObjectInputStream;
import java.io.IOException;
import java.util.Comparator;
 





@SuppressWarnings("unused")

/**
 * Job: F_IPAS_ENV_CRE Purpose: automatizar el proceso de validación de la migración<br>
 * Description:  <br>
 * @author user@talend.com
 * @version 7.4.1.20201110_1014-M4
 * @status 
 */
public class F_IPAS_ENV_CRE implements TalendJob {

protected static void logIgnoredError(String message, Throwable cause) {
       System.err.println(message);
       if (cause != null) {
               cause.printStackTrace();
       }

}


	public final Object obj = new Object();

	// for transmiting parameters purpose
	private Object valueObject = null;

	public Object getValueObject() {
		return this.valueObject;
	}

	public void setValueObject(Object valueObject) {
		this.valueObject = valueObject;
	}
	
	private final static String defaultCharset = java.nio.charset.Charset.defaultCharset().name();

	
	private final static String utf8Charset = "UTF-8";
	//contains type for every context property
	public class PropertiesWithType extends java.util.Properties {
		private static final long serialVersionUID = 1L;
		private java.util.Map<String,String> propertyTypes = new java.util.HashMap<>();
		
		public PropertiesWithType(java.util.Properties properties){
			super(properties);
		}
		public PropertiesWithType(){
			super();
		}
		
		public void setContextType(String key, String type) {
			propertyTypes.put(key,type);
		}
	
		public String getContextType(String key) {
			return propertyTypes.get(key);
		}
	}
	
	// create and load default properties
	private java.util.Properties defaultProps = new java.util.Properties();
	// create application properties with default
	public class ContextProperties extends PropertiesWithType {

		private static final long serialVersionUID = 1L;

		public ContextProperties(java.util.Properties properties){
			super(properties);
		}
		public ContextProperties(){
			super();
		}

		public void synchronizeContext(){
			
			if(intermediateHost != null){
				
					this.setProperty("intermediateHost", intermediateHost.toString());
				
			}
			
			if(intermediatePort != null){
				
					this.setProperty("intermediatePort", intermediatePort.toString());
				
			}
			
			if(intermediateDB != null){
				
					this.setProperty("intermediateDB", intermediateDB.toString());
				
			}
			
			if(intermediateUser != null){
				
					this.setProperty("intermediateUser", intermediateUser.toString());
				
			}
			
			if(intermediatePassword != null){
				
					this.setProperty("intermediatePassword", intermediatePassword.toString());
				
			}
			
			if(ipasHost != null){
				
					this.setProperty("ipasHost", ipasHost.toString());
				
			}
			
			if(ipasPort != null){
				
					this.setProperty("ipasPort", ipasPort.toString());
				
			}
			
			if(ipasDB != null){
				
					this.setProperty("ipasDB", ipasDB.toString());
				
			}
			
			if(ipasUser != null){
				
					this.setProperty("ipasUser", ipasUser.toString());
				
			}
			
			if(ipasPassword != null){
				
					this.setProperty("ipasPassword", ipasPassword.toString());
				
			}
			
			if(ipasSaPassword != null){
				
					this.setProperty("ipasSaPassword", ipasSaPassword.toString());
				
			}
			
			if(dumpBaseIpasLocation != null){
				
					this.setProperty("dumpBaseIpasLocation", dumpBaseIpasLocation.toString());
				
			}
			
			if(sqlLocation != null){
				
					this.setProperty("sqlLocation", sqlLocation.toString());
				
			}
			
		}
		
		//if the stored or passed value is "<TALEND_NULL>" string, it mean null
		public String getStringValue(String key) {
			String origin_value = this.getProperty(key);
			if(NULL_VALUE_EXPRESSION_IN_COMMAND_STRING_FOR_CHILD_JOB_ONLY.equals(origin_value)) {
				return null;
			}
			return origin_value;
		}

public String intermediateHost;
public String getIntermediateHost(){
	return this.intermediateHost;
}
public String intermediatePort;
public String getIntermediatePort(){
	return this.intermediatePort;
}
public String intermediateDB;
public String getIntermediateDB(){
	return this.intermediateDB;
}
public String intermediateUser;
public String getIntermediateUser(){
	return this.intermediateUser;
}
public String intermediatePassword;
public String getIntermediatePassword(){
	return this.intermediatePassword;
}
public String ipasHost;
public String getIpasHost(){
	return this.ipasHost;
}
public String ipasPort;
public String getIpasPort(){
	return this.ipasPort;
}
public String ipasDB;
public String getIpasDB(){
	return this.ipasDB;
}
public String ipasUser;
public String getIpasUser(){
	return this.ipasUser;
}
public String ipasPassword;
public String getIpasPassword(){
	return this.ipasPassword;
}
public String ipasSaPassword;
public String getIpasSaPassword(){
	return this.ipasSaPassword;
}
public String dumpBaseIpasLocation;
public String getDumpBaseIpasLocation(){
	return this.dumpBaseIpasLocation;
}
public String sqlLocation;
public String getSqlLocation(){
	return this.sqlLocation;
}
	}
	protected ContextProperties context = new ContextProperties(); // will be instanciated by MS.
	public ContextProperties getContext() {
		return this.context;
	}
	private final String jobVersion = "0.1";
	private final String jobName = "F_IPAS_ENV_CRE";
	private final String projectName = "WIPO_PROJECTS";
	public Integer errorCode = null;
	private String currentComponent = "";
	
		private final java.util.Map<String, Object> globalMap = new java.util.HashMap<String, Object>();
        private final static java.util.Map<String, Object> junitGlobalMap = new java.util.HashMap<String, Object>();
	
		private final java.util.Map<String, Long> start_Hash = new java.util.HashMap<String, Long>();
		private final java.util.Map<String, Long> end_Hash = new java.util.HashMap<String, Long>();
		private final java.util.Map<String, Boolean> ok_Hash = new java.util.HashMap<String, Boolean>();
		public  final java.util.List<String[]> globalBuffer = new java.util.ArrayList<String[]>();
	

private RunStat runStat = new RunStat();

	// OSGi DataSource
	private final static String KEY_DB_DATASOURCES = "KEY_DB_DATASOURCES";
	
	private final static String KEY_DB_DATASOURCES_RAW = "KEY_DB_DATASOURCES_RAW";

	public void setDataSources(java.util.Map<String, javax.sql.DataSource> dataSources) {
		java.util.Map<String, routines.system.TalendDataSource> talendDataSources = new java.util.HashMap<String, routines.system.TalendDataSource>();
		for (java.util.Map.Entry<String, javax.sql.DataSource> dataSourceEntry : dataSources.entrySet()) {
			talendDataSources.put(dataSourceEntry.getKey(), new routines.system.TalendDataSource(dataSourceEntry.getValue()));
		}
		globalMap.put(KEY_DB_DATASOURCES, talendDataSources);
		globalMap.put(KEY_DB_DATASOURCES_RAW, new java.util.HashMap<String, javax.sql.DataSource>(dataSources));
	}

	StatCatcherUtils tStatCatcher_1 = new StatCatcherUtils("_K4YqECn1Eemz5OxCQ4AlZg", "0.1");

private final java.io.ByteArrayOutputStream baos = new java.io.ByteArrayOutputStream();
private final java.io.PrintStream errorMessagePS = new java.io.PrintStream(new java.io.BufferedOutputStream(baos));

public String getExceptionStackTrace() {
	if ("failure".equals(this.getStatus())) {
		errorMessagePS.flush();
		return baos.toString();
	}
	return null;
}

private Exception exception;

public Exception getException() {
	if ("failure".equals(this.getStatus())) {
		return this.exception;
	}
	return null;
}

private class TalendException extends Exception {

	private static final long serialVersionUID = 1L;

	private java.util.Map<String, Object> globalMap = null;
	private Exception e = null;
	private String currentComponent = null;
	private String virtualComponentName = null;
	
	public void setVirtualComponentName (String virtualComponentName){
		this.virtualComponentName = virtualComponentName;
	}

	private TalendException(Exception e, String errorComponent, final java.util.Map<String, Object> globalMap) {
		this.currentComponent= errorComponent;
		this.globalMap = globalMap;
		this.e = e;
	}

	public Exception getException() {
		return this.e;
	}

	public String getCurrentComponent() {
		return this.currentComponent;
	}

	
    public String getExceptionCauseMessage(Exception e){
        Throwable cause = e;
        String message = null;
        int i = 10;
        while (null != cause && 0 < i--) {
            message = cause.getMessage();
            if (null == message) {
                cause = cause.getCause();
            } else {
                break;          
            }
        }
        if (null == message) {
            message = e.getClass().getName();
        }   
        return message;
    }

	@Override
	public void printStackTrace() {
		if (!(e instanceof TalendException || e instanceof TDieException)) {
			if(virtualComponentName!=null && currentComponent.indexOf(virtualComponentName+"_")==0){
				globalMap.put(virtualComponentName+"_ERROR_MESSAGE",getExceptionCauseMessage(e));
			}
			globalMap.put(currentComponent+"_ERROR_MESSAGE",getExceptionCauseMessage(e));
			System.err.println("Exception in component " + currentComponent + " (" + jobName + ")");
		}
		if (!(e instanceof TDieException)) {
			if(e instanceof TalendException){
				e.printStackTrace();
			} else {
				e.printStackTrace();
				e.printStackTrace(errorMessagePS);
				F_IPAS_ENV_CRE.this.exception = e;
			}
		}
		if (!(e instanceof TalendException)) {
		try {
			for (java.lang.reflect.Method m : this.getClass().getEnclosingClass().getMethods()) {
				if (m.getName().compareTo(currentComponent + "_error") == 0) {
					m.invoke(F_IPAS_ENV_CRE.this, new Object[] { e , currentComponent, globalMap});
					break;
				}
			}

			if(!(e instanceof TDieException)){
			}
		} catch (Exception e) {
			this.e.printStackTrace();
		}
		}
	}
}

			public void tMSSqlConnection_1_error(Exception exception, String errorComponent, final java.util.Map<String, Object> globalMap) throws TalendException {
				
				end_Hash.put(errorComponent, System.currentTimeMillis());
				
							tStatCatcher_1.addMessage("failure",errorComponent, end_Hash.get(errorComponent)-start_Hash.get(errorComponent));
							tStatCatcher_1Process(globalMap);
							
				status = "failure";
				
					tMSSqlConnection_1_onSubJobError(exception, errorComponent, globalMap);
			}
			
			public void tMSSqlRow_40_error(Exception exception, String errorComponent, final java.util.Map<String, Object> globalMap) throws TalendException {
				
				end_Hash.put(errorComponent, System.currentTimeMillis());
				
				status = "failure";
				
					tMSSqlRow_40_onSubJobError(exception, errorComponent, globalMap);
			}
			
			public void tMSSqlRow_1_error(Exception exception, String errorComponent, final java.util.Map<String, Object> globalMap) throws TalendException {
				
				end_Hash.put(errorComponent, System.currentTimeMillis());
				
				status = "failure";
				
					tMSSqlRow_40_onSubJobError(exception, errorComponent, globalMap);
			}
			
			public void tMSSqlRow_3_error(Exception exception, String errorComponent, final java.util.Map<String, Object> globalMap) throws TalendException {
				
				end_Hash.put(errorComponent, System.currentTimeMillis());
				
				status = "failure";
				
					tMSSqlRow_40_onSubJobError(exception, errorComponent, globalMap);
			}
			
			public void tMSSqlRow_42_error(Exception exception, String errorComponent, final java.util.Map<String, Object> globalMap) throws TalendException {
				
				end_Hash.put(errorComponent, System.currentTimeMillis());
				
				status = "failure";
				
					tMSSqlRow_40_onSubJobError(exception, errorComponent, globalMap);
			}
			
			public void tLogRow_6_error(Exception exception, String errorComponent, final java.util.Map<String, Object> globalMap) throws TalendException {
				
				end_Hash.put(errorComponent, System.currentTimeMillis());
				
				status = "failure";
				
					tMSSqlRow_40_onSubJobError(exception, errorComponent, globalMap);
			}
			
			public void tLogRow_3_error(Exception exception, String errorComponent, final java.util.Map<String, Object> globalMap) throws TalendException {
				
				end_Hash.put(errorComponent, System.currentTimeMillis());
				
				status = "failure";
				
					tMSSqlRow_40_onSubJobError(exception, errorComponent, globalMap);
			}
			
			public void tLogRow_2_error(Exception exception, String errorComponent, final java.util.Map<String, Object> globalMap) throws TalendException {
				
				end_Hash.put(errorComponent, System.currentTimeMillis());
				
				status = "failure";
				
					tMSSqlRow_40_onSubJobError(exception, errorComponent, globalMap);
			}
			
			public void tLogRow_1_error(Exception exception, String errorComponent, final java.util.Map<String, Object> globalMap) throws TalendException {
				
				end_Hash.put(errorComponent, System.currentTimeMillis());
				
				status = "failure";
				
					tMSSqlRow_40_onSubJobError(exception, errorComponent, globalMap);
			}
			
			public void tMSSqlConnection_2_error(Exception exception, String errorComponent, final java.util.Map<String, Object> globalMap) throws TalendException {
				
				end_Hash.put(errorComponent, System.currentTimeMillis());
				
							tStatCatcher_1.addMessage("failure",errorComponent, end_Hash.get(errorComponent)-start_Hash.get(errorComponent));
							tStatCatcher_1Process(globalMap);
							
				status = "failure";
				
					tMSSqlConnection_2_onSubJobError(exception, errorComponent, globalMap);
			}
			
			public void tMSSqlRow_4_error(Exception exception, String errorComponent, final java.util.Map<String, Object> globalMap) throws TalendException {
				
				end_Hash.put(errorComponent, System.currentTimeMillis());
				
				status = "failure";
				
					tMSSqlRow_4_onSubJobError(exception, errorComponent, globalMap);
			}
			
			public void tMSSqlRow_5_error(Exception exception, String errorComponent, final java.util.Map<String, Object> globalMap) throws TalendException {
				
				end_Hash.put(errorComponent, System.currentTimeMillis());
				
				status = "failure";
				
					tMSSqlRow_4_onSubJobError(exception, errorComponent, globalMap);
			}
			
			public void tLogRow_5_error(Exception exception, String errorComponent, final java.util.Map<String, Object> globalMap) throws TalendException {
				
				end_Hash.put(errorComponent, System.currentTimeMillis());
				
				status = "failure";
				
					tMSSqlRow_4_onSubJobError(exception, errorComponent, globalMap);
			}
			
			public void tLogRow_4_error(Exception exception, String errorComponent, final java.util.Map<String, Object> globalMap) throws TalendException {
				
				end_Hash.put(errorComponent, System.currentTimeMillis());
				
				status = "failure";
				
					tMSSqlRow_4_onSubJobError(exception, errorComponent, globalMap);
			}
			
			public void tMSSqlConnection_3_error(Exception exception, String errorComponent, final java.util.Map<String, Object> globalMap) throws TalendException {
				
				end_Hash.put(errorComponent, System.currentTimeMillis());
				
							tStatCatcher_1.addMessage("failure",errorComponent, end_Hash.get(errorComponent)-start_Hash.get(errorComponent));
							tStatCatcher_1Process(globalMap);
							
				status = "failure";
				
					tMSSqlConnection_3_onSubJobError(exception, errorComponent, globalMap);
			}
			
			public void tMSSqlRow_6_error(Exception exception, String errorComponent, final java.util.Map<String, Object> globalMap) throws TalendException {
				
				end_Hash.put(errorComponent, System.currentTimeMillis());
				
				status = "failure";
				
					tMSSqlRow_6_onSubJobError(exception, errorComponent, globalMap);
			}
			
			public void tLogRow_8_error(Exception exception, String errorComponent, final java.util.Map<String, Object> globalMap) throws TalendException {
				
				end_Hash.put(errorComponent, System.currentTimeMillis());
				
				status = "failure";
				
					tMSSqlRow_6_onSubJobError(exception, errorComponent, globalMap);
			}
			
			public void tMSSqlConnection_4_error(Exception exception, String errorComponent, final java.util.Map<String, Object> globalMap) throws TalendException {
				
				end_Hash.put(errorComponent, System.currentTimeMillis());
				
							tStatCatcher_1.addMessage("failure",errorComponent, end_Hash.get(errorComponent)-start_Hash.get(errorComponent));
							tStatCatcher_1Process(globalMap);
							
				status = "failure";
				
					tMSSqlConnection_4_onSubJobError(exception, errorComponent, globalMap);
			}
			
			public void tMSSqlRow_9_error(Exception exception, String errorComponent, final java.util.Map<String, Object> globalMap) throws TalendException {
				
				end_Hash.put(errorComponent, System.currentTimeMillis());
				
				status = "failure";
				
					tMSSqlRow_9_onSubJobError(exception, errorComponent, globalMap);
			}
			
			public void tLogRow_11_error(Exception exception, String errorComponent, final java.util.Map<String, Object> globalMap) throws TalendException {
				
				end_Hash.put(errorComponent, System.currentTimeMillis());
				
				status = "failure";
				
					tMSSqlRow_9_onSubJobError(exception, errorComponent, globalMap);
			}
			
			public void tMSSqlRow_10_error(Exception exception, String errorComponent, final java.util.Map<String, Object> globalMap) throws TalendException {
				
				end_Hash.put(errorComponent, System.currentTimeMillis());
				
				status = "failure";
				
					tMSSqlRow_10_onSubJobError(exception, errorComponent, globalMap);
			}
			
			public void tLogRow_12_error(Exception exception, String errorComponent, final java.util.Map<String, Object> globalMap) throws TalendException {
				
				end_Hash.put(errorComponent, System.currentTimeMillis());
				
				status = "failure";
				
					tMSSqlRow_10_onSubJobError(exception, errorComponent, globalMap);
			}
			
			public void tMSSqlRow_7_error(Exception exception, String errorComponent, final java.util.Map<String, Object> globalMap) throws TalendException {
				
				end_Hash.put(errorComponent, System.currentTimeMillis());
				
				status = "failure";
				
					tMSSqlRow_7_onSubJobError(exception, errorComponent, globalMap);
			}
			
			public void tMSSqlRow_8_error(Exception exception, String errorComponent, final java.util.Map<String, Object> globalMap) throws TalendException {
				
				end_Hash.put(errorComponent, System.currentTimeMillis());
				
				status = "failure";
				
					tMSSqlRow_7_onSubJobError(exception, errorComponent, globalMap);
			}
			
			public void tLogRow_10_error(Exception exception, String errorComponent, final java.util.Map<String, Object> globalMap) throws TalendException {
				
				end_Hash.put(errorComponent, System.currentTimeMillis());
				
				status = "failure";
				
					tMSSqlRow_7_onSubJobError(exception, errorComponent, globalMap);
			}
			
			public void tLogRow_9_error(Exception exception, String errorComponent, final java.util.Map<String, Object> globalMap) throws TalendException {
				
				end_Hash.put(errorComponent, System.currentTimeMillis());
				
				status = "failure";
				
					tMSSqlRow_7_onSubJobError(exception, errorComponent, globalMap);
			}
			
			public void tDBRow_1_error(Exception exception, String errorComponent, final java.util.Map<String, Object> globalMap) throws TalendException {
				
				end_Hash.put(errorComponent, System.currentTimeMillis());
				
				status = "failure";
				
					tDBRow_1_onSubJobError(exception, errorComponent, globalMap);
			}
			
			public void tDBRow_2_error(Exception exception, String errorComponent, final java.util.Map<String, Object> globalMap) throws TalendException {
				
				end_Hash.put(errorComponent, System.currentTimeMillis());
				
				status = "failure";
				
					tDBRow_1_onSubJobError(exception, errorComponent, globalMap);
			}
			
			public void tLogRow_38_error(Exception exception, String errorComponent, final java.util.Map<String, Object> globalMap) throws TalendException {
				
				end_Hash.put(errorComponent, System.currentTimeMillis());
				
				status = "failure";
				
					tDBRow_1_onSubJobError(exception, errorComponent, globalMap);
			}
			
			public void tLogRow_37_error(Exception exception, String errorComponent, final java.util.Map<String, Object> globalMap) throws TalendException {
				
				end_Hash.put(errorComponent, System.currentTimeMillis());
				
				status = "failure";
				
					tDBRow_1_onSubJobError(exception, errorComponent, globalMap);
			}
			
			public void tDBRow_3_error(Exception exception, String errorComponent, final java.util.Map<String, Object> globalMap) throws TalendException {
				
				end_Hash.put(errorComponent, System.currentTimeMillis());
				
				status = "failure";
				
					tDBRow_3_onSubJobError(exception, errorComponent, globalMap);
			}
			
			public void tDBRow_4_error(Exception exception, String errorComponent, final java.util.Map<String, Object> globalMap) throws TalendException {
				
				end_Hash.put(errorComponent, System.currentTimeMillis());
				
				status = "failure";
				
					tDBRow_3_onSubJobError(exception, errorComponent, globalMap);
			}
			
			public void tLogRow_40_error(Exception exception, String errorComponent, final java.util.Map<String, Object> globalMap) throws TalendException {
				
				end_Hash.put(errorComponent, System.currentTimeMillis());
				
				status = "failure";
				
					tDBRow_3_onSubJobError(exception, errorComponent, globalMap);
			}
			
			public void tLogRow_39_error(Exception exception, String errorComponent, final java.util.Map<String, Object> globalMap) throws TalendException {
				
				end_Hash.put(errorComponent, System.currentTimeMillis());
				
				status = "failure";
				
					tDBRow_3_onSubJobError(exception, errorComponent, globalMap);
			}
			
			public void tDBRow_5_error(Exception exception, String errorComponent, final java.util.Map<String, Object> globalMap) throws TalendException {
				
				end_Hash.put(errorComponent, System.currentTimeMillis());
				
				status = "failure";
				
					tDBRow_5_onSubJobError(exception, errorComponent, globalMap);
			}
			
			public void tDBRow_6_error(Exception exception, String errorComponent, final java.util.Map<String, Object> globalMap) throws TalendException {
				
				end_Hash.put(errorComponent, System.currentTimeMillis());
				
				status = "failure";
				
					tDBRow_5_onSubJobError(exception, errorComponent, globalMap);
			}
			
			public void tLogRow_42_error(Exception exception, String errorComponent, final java.util.Map<String, Object> globalMap) throws TalendException {
				
				end_Hash.put(errorComponent, System.currentTimeMillis());
				
				status = "failure";
				
					tDBRow_5_onSubJobError(exception, errorComponent, globalMap);
			}
			
			public void tLogRow_41_error(Exception exception, String errorComponent, final java.util.Map<String, Object> globalMap) throws TalendException {
				
				end_Hash.put(errorComponent, System.currentTimeMillis());
				
				status = "failure";
				
					tDBRow_5_onSubJobError(exception, errorComponent, globalMap);
			}
			
			public void tDBRow_7_error(Exception exception, String errorComponent, final java.util.Map<String, Object> globalMap) throws TalendException {
				
				end_Hash.put(errorComponent, System.currentTimeMillis());
				
				status = "failure";
				
					tDBRow_7_onSubJobError(exception, errorComponent, globalMap);
			}
			
			public void tDBRow_8_error(Exception exception, String errorComponent, final java.util.Map<String, Object> globalMap) throws TalendException {
				
				end_Hash.put(errorComponent, System.currentTimeMillis());
				
				status = "failure";
				
					tDBRow_7_onSubJobError(exception, errorComponent, globalMap);
			}
			
			public void tLogRow_44_error(Exception exception, String errorComponent, final java.util.Map<String, Object> globalMap) throws TalendException {
				
				end_Hash.put(errorComponent, System.currentTimeMillis());
				
				status = "failure";
				
					tDBRow_7_onSubJobError(exception, errorComponent, globalMap);
			}
			
			public void tLogRow_43_error(Exception exception, String errorComponent, final java.util.Map<String, Object> globalMap) throws TalendException {
				
				end_Hash.put(errorComponent, System.currentTimeMillis());
				
				status = "failure";
				
					tDBRow_7_onSubJobError(exception, errorComponent, globalMap);
			}
			
			public void tDBRow_13_error(Exception exception, String errorComponent, final java.util.Map<String, Object> globalMap) throws TalendException {
				
				end_Hash.put(errorComponent, System.currentTimeMillis());
				
				status = "failure";
				
					tDBRow_13_onSubJobError(exception, errorComponent, globalMap);
			}
			
			public void tDBRow_14_error(Exception exception, String errorComponent, final java.util.Map<String, Object> globalMap) throws TalendException {
				
				end_Hash.put(errorComponent, System.currentTimeMillis());
				
				status = "failure";
				
					tDBRow_13_onSubJobError(exception, errorComponent, globalMap);
			}
			
			public void tLogRow_50_error(Exception exception, String errorComponent, final java.util.Map<String, Object> globalMap) throws TalendException {
				
				end_Hash.put(errorComponent, System.currentTimeMillis());
				
				status = "failure";
				
					tDBRow_13_onSubJobError(exception, errorComponent, globalMap);
			}
			
			public void tLogRow_49_error(Exception exception, String errorComponent, final java.util.Map<String, Object> globalMap) throws TalendException {
				
				end_Hash.put(errorComponent, System.currentTimeMillis());
				
				status = "failure";
				
					tDBRow_13_onSubJobError(exception, errorComponent, globalMap);
			}
			
			public void tMSSqlRow_11_error(Exception exception, String errorComponent, final java.util.Map<String, Object> globalMap) throws TalendException {
				
				end_Hash.put(errorComponent, System.currentTimeMillis());
				
				status = "failure";
				
					tMSSqlRow_11_onSubJobError(exception, errorComponent, globalMap);
			}
			
			public void tMSSqlRow_12_error(Exception exception, String errorComponent, final java.util.Map<String, Object> globalMap) throws TalendException {
				
				end_Hash.put(errorComponent, System.currentTimeMillis());
				
				status = "failure";
				
					tMSSqlRow_11_onSubJobError(exception, errorComponent, globalMap);
			}
			
			public void tLogRow_14_error(Exception exception, String errorComponent, final java.util.Map<String, Object> globalMap) throws TalendException {
				
				end_Hash.put(errorComponent, System.currentTimeMillis());
				
				status = "failure";
				
					tMSSqlRow_11_onSubJobError(exception, errorComponent, globalMap);
			}
			
			public void tLogRow_13_error(Exception exception, String errorComponent, final java.util.Map<String, Object> globalMap) throws TalendException {
				
				end_Hash.put(errorComponent, System.currentTimeMillis());
				
				status = "failure";
				
					tMSSqlRow_11_onSubJobError(exception, errorComponent, globalMap);
			}
			
			public void tMSSqlRow_13_error(Exception exception, String errorComponent, final java.util.Map<String, Object> globalMap) throws TalendException {
				
				end_Hash.put(errorComponent, System.currentTimeMillis());
				
				status = "failure";
				
					tMSSqlRow_13_onSubJobError(exception, errorComponent, globalMap);
			}
			
			public void tMSSqlRow_14_error(Exception exception, String errorComponent, final java.util.Map<String, Object> globalMap) throws TalendException {
				
				end_Hash.put(errorComponent, System.currentTimeMillis());
				
				status = "failure";
				
					tMSSqlRow_13_onSubJobError(exception, errorComponent, globalMap);
			}
			
			public void tLogRow_16_error(Exception exception, String errorComponent, final java.util.Map<String, Object> globalMap) throws TalendException {
				
				end_Hash.put(errorComponent, System.currentTimeMillis());
				
				status = "failure";
				
					tMSSqlRow_13_onSubJobError(exception, errorComponent, globalMap);
			}
			
			public void tLogRow_15_error(Exception exception, String errorComponent, final java.util.Map<String, Object> globalMap) throws TalendException {
				
				end_Hash.put(errorComponent, System.currentTimeMillis());
				
				status = "failure";
				
					tMSSqlRow_13_onSubJobError(exception, errorComponent, globalMap);
			}
			
			public void tMSSqlRow_15_error(Exception exception, String errorComponent, final java.util.Map<String, Object> globalMap) throws TalendException {
				
				end_Hash.put(errorComponent, System.currentTimeMillis());
				
				status = "failure";
				
					tMSSqlRow_15_onSubJobError(exception, errorComponent, globalMap);
			}
			
			public void tMSSqlRow_16_error(Exception exception, String errorComponent, final java.util.Map<String, Object> globalMap) throws TalendException {
				
				end_Hash.put(errorComponent, System.currentTimeMillis());
				
				status = "failure";
				
					tMSSqlRow_15_onSubJobError(exception, errorComponent, globalMap);
			}
			
			public void tLogRow_18_error(Exception exception, String errorComponent, final java.util.Map<String, Object> globalMap) throws TalendException {
				
				end_Hash.put(errorComponent, System.currentTimeMillis());
				
				status = "failure";
				
					tMSSqlRow_15_onSubJobError(exception, errorComponent, globalMap);
			}
			
			public void tLogRow_17_error(Exception exception, String errorComponent, final java.util.Map<String, Object> globalMap) throws TalendException {
				
				end_Hash.put(errorComponent, System.currentTimeMillis());
				
				status = "failure";
				
					tMSSqlRow_15_onSubJobError(exception, errorComponent, globalMap);
			}
			
			public void tMSSqlRow_17_error(Exception exception, String errorComponent, final java.util.Map<String, Object> globalMap) throws TalendException {
				
				end_Hash.put(errorComponent, System.currentTimeMillis());
				
				status = "failure";
				
					tMSSqlRow_17_onSubJobError(exception, errorComponent, globalMap);
			}
			
			public void tMSSqlRow_18_error(Exception exception, String errorComponent, final java.util.Map<String, Object> globalMap) throws TalendException {
				
				end_Hash.put(errorComponent, System.currentTimeMillis());
				
				status = "failure";
				
					tMSSqlRow_17_onSubJobError(exception, errorComponent, globalMap);
			}
			
			public void tLogRow_20_error(Exception exception, String errorComponent, final java.util.Map<String, Object> globalMap) throws TalendException {
				
				end_Hash.put(errorComponent, System.currentTimeMillis());
				
				status = "failure";
				
					tMSSqlRow_17_onSubJobError(exception, errorComponent, globalMap);
			}
			
			public void tLogRow_19_error(Exception exception, String errorComponent, final java.util.Map<String, Object> globalMap) throws TalendException {
				
				end_Hash.put(errorComponent, System.currentTimeMillis());
				
				status = "failure";
				
					tMSSqlRow_17_onSubJobError(exception, errorComponent, globalMap);
			}
			
			public void tMSSqlRow_19_error(Exception exception, String errorComponent, final java.util.Map<String, Object> globalMap) throws TalendException {
				
				end_Hash.put(errorComponent, System.currentTimeMillis());
				
				status = "failure";
				
					tMSSqlRow_19_onSubJobError(exception, errorComponent, globalMap);
			}
			
			public void tMSSqlRow_20_error(Exception exception, String errorComponent, final java.util.Map<String, Object> globalMap) throws TalendException {
				
				end_Hash.put(errorComponent, System.currentTimeMillis());
				
				status = "failure";
				
					tMSSqlRow_19_onSubJobError(exception, errorComponent, globalMap);
			}
			
			public void tLogRow_22_error(Exception exception, String errorComponent, final java.util.Map<String, Object> globalMap) throws TalendException {
				
				end_Hash.put(errorComponent, System.currentTimeMillis());
				
				status = "failure";
				
					tMSSqlRow_19_onSubJobError(exception, errorComponent, globalMap);
			}
			
			public void tLogRow_21_error(Exception exception, String errorComponent, final java.util.Map<String, Object> globalMap) throws TalendException {
				
				end_Hash.put(errorComponent, System.currentTimeMillis());
				
				status = "failure";
				
					tMSSqlRow_19_onSubJobError(exception, errorComponent, globalMap);
			}
			
			public void tMSSqlRow_21_error(Exception exception, String errorComponent, final java.util.Map<String, Object> globalMap) throws TalendException {
				
				end_Hash.put(errorComponent, System.currentTimeMillis());
				
				status = "failure";
				
					tMSSqlRow_21_onSubJobError(exception, errorComponent, globalMap);
			}
			
			public void tMSSqlRow_22_error(Exception exception, String errorComponent, final java.util.Map<String, Object> globalMap) throws TalendException {
				
				end_Hash.put(errorComponent, System.currentTimeMillis());
				
				status = "failure";
				
					tMSSqlRow_21_onSubJobError(exception, errorComponent, globalMap);
			}
			
			public void tLogRow_24_error(Exception exception, String errorComponent, final java.util.Map<String, Object> globalMap) throws TalendException {
				
				end_Hash.put(errorComponent, System.currentTimeMillis());
				
				status = "failure";
				
					tMSSqlRow_21_onSubJobError(exception, errorComponent, globalMap);
			}
			
			public void tLogRow_23_error(Exception exception, String errorComponent, final java.util.Map<String, Object> globalMap) throws TalendException {
				
				end_Hash.put(errorComponent, System.currentTimeMillis());
				
				status = "failure";
				
					tMSSqlRow_21_onSubJobError(exception, errorComponent, globalMap);
			}
			
			public void tMSSqlRow_23_error(Exception exception, String errorComponent, final java.util.Map<String, Object> globalMap) throws TalendException {
				
				end_Hash.put(errorComponent, System.currentTimeMillis());
				
				status = "failure";
				
					tMSSqlRow_23_onSubJobError(exception, errorComponent, globalMap);
			}
			
			public void tMSSqlRow_24_error(Exception exception, String errorComponent, final java.util.Map<String, Object> globalMap) throws TalendException {
				
				end_Hash.put(errorComponent, System.currentTimeMillis());
				
				status = "failure";
				
					tMSSqlRow_23_onSubJobError(exception, errorComponent, globalMap);
			}
			
			public void tLogRow_26_error(Exception exception, String errorComponent, final java.util.Map<String, Object> globalMap) throws TalendException {
				
				end_Hash.put(errorComponent, System.currentTimeMillis());
				
				status = "failure";
				
					tMSSqlRow_23_onSubJobError(exception, errorComponent, globalMap);
			}
			
			public void tLogRow_25_error(Exception exception, String errorComponent, final java.util.Map<String, Object> globalMap) throws TalendException {
				
				end_Hash.put(errorComponent, System.currentTimeMillis());
				
				status = "failure";
				
					tMSSqlRow_23_onSubJobError(exception, errorComponent, globalMap);
			}
			
			public void tMSSqlRow_25_error(Exception exception, String errorComponent, final java.util.Map<String, Object> globalMap) throws TalendException {
				
				end_Hash.put(errorComponent, System.currentTimeMillis());
				
				status = "failure";
				
					tMSSqlRow_25_onSubJobError(exception, errorComponent, globalMap);
			}
			
			public void tMSSqlRow_26_error(Exception exception, String errorComponent, final java.util.Map<String, Object> globalMap) throws TalendException {
				
				end_Hash.put(errorComponent, System.currentTimeMillis());
				
				status = "failure";
				
					tMSSqlRow_25_onSubJobError(exception, errorComponent, globalMap);
			}
			
			public void tLogRow_28_error(Exception exception, String errorComponent, final java.util.Map<String, Object> globalMap) throws TalendException {
				
				end_Hash.put(errorComponent, System.currentTimeMillis());
				
				status = "failure";
				
					tMSSqlRow_25_onSubJobError(exception, errorComponent, globalMap);
			}
			
			public void tLogRow_27_error(Exception exception, String errorComponent, final java.util.Map<String, Object> globalMap) throws TalendException {
				
				end_Hash.put(errorComponent, System.currentTimeMillis());
				
				status = "failure";
				
					tMSSqlRow_25_onSubJobError(exception, errorComponent, globalMap);
			}
			
			public void tMSSqlRow_27_error(Exception exception, String errorComponent, final java.util.Map<String, Object> globalMap) throws TalendException {
				
				end_Hash.put(errorComponent, System.currentTimeMillis());
				
				status = "failure";
				
					tMSSqlRow_27_onSubJobError(exception, errorComponent, globalMap);
			}
			
			public void tMSSqlRow_28_error(Exception exception, String errorComponent, final java.util.Map<String, Object> globalMap) throws TalendException {
				
				end_Hash.put(errorComponent, System.currentTimeMillis());
				
				status = "failure";
				
					tMSSqlRow_27_onSubJobError(exception, errorComponent, globalMap);
			}
			
			public void tLogRow_30_error(Exception exception, String errorComponent, final java.util.Map<String, Object> globalMap) throws TalendException {
				
				end_Hash.put(errorComponent, System.currentTimeMillis());
				
				status = "failure";
				
					tMSSqlRow_27_onSubJobError(exception, errorComponent, globalMap);
			}
			
			public void tLogRow_29_error(Exception exception, String errorComponent, final java.util.Map<String, Object> globalMap) throws TalendException {
				
				end_Hash.put(errorComponent, System.currentTimeMillis());
				
				status = "failure";
				
					tMSSqlRow_27_onSubJobError(exception, errorComponent, globalMap);
			}
			
			public void tMSSqlRow_29_error(Exception exception, String errorComponent, final java.util.Map<String, Object> globalMap) throws TalendException {
				
				end_Hash.put(errorComponent, System.currentTimeMillis());
				
				status = "failure";
				
					tMSSqlRow_29_onSubJobError(exception, errorComponent, globalMap);
			}
			
			public void tMSSqlRow_30_error(Exception exception, String errorComponent, final java.util.Map<String, Object> globalMap) throws TalendException {
				
				end_Hash.put(errorComponent, System.currentTimeMillis());
				
				status = "failure";
				
					tMSSqlRow_29_onSubJobError(exception, errorComponent, globalMap);
			}
			
			public void tLogRow_32_error(Exception exception, String errorComponent, final java.util.Map<String, Object> globalMap) throws TalendException {
				
				end_Hash.put(errorComponent, System.currentTimeMillis());
				
				status = "failure";
				
					tMSSqlRow_29_onSubJobError(exception, errorComponent, globalMap);
			}
			
			public void tLogRow_31_error(Exception exception, String errorComponent, final java.util.Map<String, Object> globalMap) throws TalendException {
				
				end_Hash.put(errorComponent, System.currentTimeMillis());
				
				status = "failure";
				
					tMSSqlRow_29_onSubJobError(exception, errorComponent, globalMap);
			}
			
			public void tMSSqlRow_31_error(Exception exception, String errorComponent, final java.util.Map<String, Object> globalMap) throws TalendException {
				
				end_Hash.put(errorComponent, System.currentTimeMillis());
				
				status = "failure";
				
					tMSSqlRow_31_onSubJobError(exception, errorComponent, globalMap);
			}
			
			public void tMSSqlRow_32_error(Exception exception, String errorComponent, final java.util.Map<String, Object> globalMap) throws TalendException {
				
				end_Hash.put(errorComponent, System.currentTimeMillis());
				
				status = "failure";
				
					tMSSqlRow_31_onSubJobError(exception, errorComponent, globalMap);
			}
			
			public void tLogRow_34_error(Exception exception, String errorComponent, final java.util.Map<String, Object> globalMap) throws TalendException {
				
				end_Hash.put(errorComponent, System.currentTimeMillis());
				
				status = "failure";
				
					tMSSqlRow_31_onSubJobError(exception, errorComponent, globalMap);
			}
			
			public void tLogRow_33_error(Exception exception, String errorComponent, final java.util.Map<String, Object> globalMap) throws TalendException {
				
				end_Hash.put(errorComponent, System.currentTimeMillis());
				
				status = "failure";
				
					tMSSqlRow_31_onSubJobError(exception, errorComponent, globalMap);
			}
			
			public void tMSSqlRow_33_error(Exception exception, String errorComponent, final java.util.Map<String, Object> globalMap) throws TalendException {
				
				end_Hash.put(errorComponent, System.currentTimeMillis());
				
				status = "failure";
				
					tMSSqlRow_33_onSubJobError(exception, errorComponent, globalMap);
			}
			
			public void tMSSqlRow_34_error(Exception exception, String errorComponent, final java.util.Map<String, Object> globalMap) throws TalendException {
				
				end_Hash.put(errorComponent, System.currentTimeMillis());
				
				status = "failure";
				
					tMSSqlRow_33_onSubJobError(exception, errorComponent, globalMap);
			}
			
			public void tLogRow_36_error(Exception exception, String errorComponent, final java.util.Map<String, Object> globalMap) throws TalendException {
				
				end_Hash.put(errorComponent, System.currentTimeMillis());
				
				status = "failure";
				
					tMSSqlRow_33_onSubJobError(exception, errorComponent, globalMap);
			}
			
			public void tLogRow_35_error(Exception exception, String errorComponent, final java.util.Map<String, Object> globalMap) throws TalendException {
				
				end_Hash.put(errorComponent, System.currentTimeMillis());
				
				status = "failure";
				
					tMSSqlRow_33_onSubJobError(exception, errorComponent, globalMap);
			}
			
			public void tMSSqlRow_35_error(Exception exception, String errorComponent, final java.util.Map<String, Object> globalMap) throws TalendException {
				
				end_Hash.put(errorComponent, System.currentTimeMillis());
				
							tStatCatcher_1.addMessage("failure",errorComponent, end_Hash.get(errorComponent)-start_Hash.get(errorComponent));
							tStatCatcher_1Process(globalMap);
							
				status = "failure";
				
					tMSSqlRow_35_onSubJobError(exception, errorComponent, globalMap);
			}
			
			public void tStatCatcher_1_error(Exception exception, String errorComponent, final java.util.Map<String, Object> globalMap) throws TalendException {
				
				end_Hash.put(errorComponent, System.currentTimeMillis());
				
				status = "failure";
				
					tStatCatcher_1_onSubJobError(exception, errorComponent, globalMap);
			}
			
			public void tLogRow_52_error(Exception exception, String errorComponent, final java.util.Map<String, Object> globalMap) throws TalendException {
				
				end_Hash.put(errorComponent, System.currentTimeMillis());
				
				status = "failure";
				
					tStatCatcher_1_onSubJobError(exception, errorComponent, globalMap);
			}
			
			public void tMSSqlConnection_1_onSubJobError(Exception exception, String errorComponent, final java.util.Map<String, Object> globalMap) throws TalendException {

resumeUtil.addLog("SYSTEM_LOG", "NODE:"+ errorComponent, "", Thread.currentThread().getId()+ "", "FATAL", "", exception.getMessage(), ResumeUtil.getExceptionStackTrace(exception),"");

			}
			public void tMSSqlRow_40_onSubJobError(Exception exception, String errorComponent, final java.util.Map<String, Object> globalMap) throws TalendException {

resumeUtil.addLog("SYSTEM_LOG", "NODE:"+ errorComponent, "", Thread.currentThread().getId()+ "", "FATAL", "", exception.getMessage(), ResumeUtil.getExceptionStackTrace(exception),"");

			}
			public void tMSSqlConnection_2_onSubJobError(Exception exception, String errorComponent, final java.util.Map<String, Object> globalMap) throws TalendException {

resumeUtil.addLog("SYSTEM_LOG", "NODE:"+ errorComponent, "", Thread.currentThread().getId()+ "", "FATAL", "", exception.getMessage(), ResumeUtil.getExceptionStackTrace(exception),"");

			}
			public void tMSSqlRow_4_onSubJobError(Exception exception, String errorComponent, final java.util.Map<String, Object> globalMap) throws TalendException {

resumeUtil.addLog("SYSTEM_LOG", "NODE:"+ errorComponent, "", Thread.currentThread().getId()+ "", "FATAL", "", exception.getMessage(), ResumeUtil.getExceptionStackTrace(exception),"");

			}
			public void tMSSqlConnection_3_onSubJobError(Exception exception, String errorComponent, final java.util.Map<String, Object> globalMap) throws TalendException {

resumeUtil.addLog("SYSTEM_LOG", "NODE:"+ errorComponent, "", Thread.currentThread().getId()+ "", "FATAL", "", exception.getMessage(), ResumeUtil.getExceptionStackTrace(exception),"");

			}
			public void tMSSqlRow_6_onSubJobError(Exception exception, String errorComponent, final java.util.Map<String, Object> globalMap) throws TalendException {

resumeUtil.addLog("SYSTEM_LOG", "NODE:"+ errorComponent, "", Thread.currentThread().getId()+ "", "FATAL", "", exception.getMessage(), ResumeUtil.getExceptionStackTrace(exception),"");

			}
			public void tMSSqlConnection_4_onSubJobError(Exception exception, String errorComponent, final java.util.Map<String, Object> globalMap) throws TalendException {

resumeUtil.addLog("SYSTEM_LOG", "NODE:"+ errorComponent, "", Thread.currentThread().getId()+ "", "FATAL", "", exception.getMessage(), ResumeUtil.getExceptionStackTrace(exception),"");

			}
			public void tMSSqlRow_9_onSubJobError(Exception exception, String errorComponent, final java.util.Map<String, Object> globalMap) throws TalendException {

resumeUtil.addLog("SYSTEM_LOG", "NODE:"+ errorComponent, "", Thread.currentThread().getId()+ "", "FATAL", "", exception.getMessage(), ResumeUtil.getExceptionStackTrace(exception),"");

			}
			public void tMSSqlRow_10_onSubJobError(Exception exception, String errorComponent, final java.util.Map<String, Object> globalMap) throws TalendException {

resumeUtil.addLog("SYSTEM_LOG", "NODE:"+ errorComponent, "", Thread.currentThread().getId()+ "", "FATAL", "", exception.getMessage(), ResumeUtil.getExceptionStackTrace(exception),"");

			}
			public void tMSSqlRow_7_onSubJobError(Exception exception, String errorComponent, final java.util.Map<String, Object> globalMap) throws TalendException {

resumeUtil.addLog("SYSTEM_LOG", "NODE:"+ errorComponent, "", Thread.currentThread().getId()+ "", "FATAL", "", exception.getMessage(), ResumeUtil.getExceptionStackTrace(exception),"");

			}
			public void tDBRow_1_onSubJobError(Exception exception, String errorComponent, final java.util.Map<String, Object> globalMap) throws TalendException {

resumeUtil.addLog("SYSTEM_LOG", "NODE:"+ errorComponent, "", Thread.currentThread().getId()+ "", "FATAL", "", exception.getMessage(), ResumeUtil.getExceptionStackTrace(exception),"");

			}
			public void tDBRow_3_onSubJobError(Exception exception, String errorComponent, final java.util.Map<String, Object> globalMap) throws TalendException {

resumeUtil.addLog("SYSTEM_LOG", "NODE:"+ errorComponent, "", Thread.currentThread().getId()+ "", "FATAL", "", exception.getMessage(), ResumeUtil.getExceptionStackTrace(exception),"");

			}
			public void tDBRow_5_onSubJobError(Exception exception, String errorComponent, final java.util.Map<String, Object> globalMap) throws TalendException {

resumeUtil.addLog("SYSTEM_LOG", "NODE:"+ errorComponent, "", Thread.currentThread().getId()+ "", "FATAL", "", exception.getMessage(), ResumeUtil.getExceptionStackTrace(exception),"");

			}
			public void tDBRow_7_onSubJobError(Exception exception, String errorComponent, final java.util.Map<String, Object> globalMap) throws TalendException {

resumeUtil.addLog("SYSTEM_LOG", "NODE:"+ errorComponent, "", Thread.currentThread().getId()+ "", "FATAL", "", exception.getMessage(), ResumeUtil.getExceptionStackTrace(exception),"");

			}
			public void tDBRow_13_onSubJobError(Exception exception, String errorComponent, final java.util.Map<String, Object> globalMap) throws TalendException {

resumeUtil.addLog("SYSTEM_LOG", "NODE:"+ errorComponent, "", Thread.currentThread().getId()+ "", "FATAL", "", exception.getMessage(), ResumeUtil.getExceptionStackTrace(exception),"");

			}
			public void tMSSqlRow_11_onSubJobError(Exception exception, String errorComponent, final java.util.Map<String, Object> globalMap) throws TalendException {

resumeUtil.addLog("SYSTEM_LOG", "NODE:"+ errorComponent, "", Thread.currentThread().getId()+ "", "FATAL", "", exception.getMessage(), ResumeUtil.getExceptionStackTrace(exception),"");

			}
			public void tMSSqlRow_13_onSubJobError(Exception exception, String errorComponent, final java.util.Map<String, Object> globalMap) throws TalendException {

resumeUtil.addLog("SYSTEM_LOG", "NODE:"+ errorComponent, "", Thread.currentThread().getId()+ "", "FATAL", "", exception.getMessage(), ResumeUtil.getExceptionStackTrace(exception),"");

			}
			public void tMSSqlRow_15_onSubJobError(Exception exception, String errorComponent, final java.util.Map<String, Object> globalMap) throws TalendException {

resumeUtil.addLog("SYSTEM_LOG", "NODE:"+ errorComponent, "", Thread.currentThread().getId()+ "", "FATAL", "", exception.getMessage(), ResumeUtil.getExceptionStackTrace(exception),"");

			}
			public void tMSSqlRow_17_onSubJobError(Exception exception, String errorComponent, final java.util.Map<String, Object> globalMap) throws TalendException {

resumeUtil.addLog("SYSTEM_LOG", "NODE:"+ errorComponent, "", Thread.currentThread().getId()+ "", "FATAL", "", exception.getMessage(), ResumeUtil.getExceptionStackTrace(exception),"");

			}
			public void tMSSqlRow_19_onSubJobError(Exception exception, String errorComponent, final java.util.Map<String, Object> globalMap) throws TalendException {

resumeUtil.addLog("SYSTEM_LOG", "NODE:"+ errorComponent, "", Thread.currentThread().getId()+ "", "FATAL", "", exception.getMessage(), ResumeUtil.getExceptionStackTrace(exception),"");

			}
			public void tMSSqlRow_21_onSubJobError(Exception exception, String errorComponent, final java.util.Map<String, Object> globalMap) throws TalendException {

resumeUtil.addLog("SYSTEM_LOG", "NODE:"+ errorComponent, "", Thread.currentThread().getId()+ "", "FATAL", "", exception.getMessage(), ResumeUtil.getExceptionStackTrace(exception),"");

			}
			public void tMSSqlRow_23_onSubJobError(Exception exception, String errorComponent, final java.util.Map<String, Object> globalMap) throws TalendException {

resumeUtil.addLog("SYSTEM_LOG", "NODE:"+ errorComponent, "", Thread.currentThread().getId()+ "", "FATAL", "", exception.getMessage(), ResumeUtil.getExceptionStackTrace(exception),"");

			}
			public void tMSSqlRow_25_onSubJobError(Exception exception, String errorComponent, final java.util.Map<String, Object> globalMap) throws TalendException {

resumeUtil.addLog("SYSTEM_LOG", "NODE:"+ errorComponent, "", Thread.currentThread().getId()+ "", "FATAL", "", exception.getMessage(), ResumeUtil.getExceptionStackTrace(exception),"");

			}
			public void tMSSqlRow_27_onSubJobError(Exception exception, String errorComponent, final java.util.Map<String, Object> globalMap) throws TalendException {

resumeUtil.addLog("SYSTEM_LOG", "NODE:"+ errorComponent, "", Thread.currentThread().getId()+ "", "FATAL", "", exception.getMessage(), ResumeUtil.getExceptionStackTrace(exception),"");

			}
			public void tMSSqlRow_29_onSubJobError(Exception exception, String errorComponent, final java.util.Map<String, Object> globalMap) throws TalendException {

resumeUtil.addLog("SYSTEM_LOG", "NODE:"+ errorComponent, "", Thread.currentThread().getId()+ "", "FATAL", "", exception.getMessage(), ResumeUtil.getExceptionStackTrace(exception),"");

			}
			public void tMSSqlRow_31_onSubJobError(Exception exception, String errorComponent, final java.util.Map<String, Object> globalMap) throws TalendException {

resumeUtil.addLog("SYSTEM_LOG", "NODE:"+ errorComponent, "", Thread.currentThread().getId()+ "", "FATAL", "", exception.getMessage(), ResumeUtil.getExceptionStackTrace(exception),"");

			}
			public void tMSSqlRow_33_onSubJobError(Exception exception, String errorComponent, final java.util.Map<String, Object> globalMap) throws TalendException {

resumeUtil.addLog("SYSTEM_LOG", "NODE:"+ errorComponent, "", Thread.currentThread().getId()+ "", "FATAL", "", exception.getMessage(), ResumeUtil.getExceptionStackTrace(exception),"");

			}
			public void tMSSqlRow_35_onSubJobError(Exception exception, String errorComponent, final java.util.Map<String, Object> globalMap) throws TalendException {

resumeUtil.addLog("SYSTEM_LOG", "NODE:"+ errorComponent, "", Thread.currentThread().getId()+ "", "FATAL", "", exception.getMessage(), ResumeUtil.getExceptionStackTrace(exception),"");

			}
			public void tStatCatcher_1_onSubJobError(Exception exception, String errorComponent, final java.util.Map<String, Object> globalMap) throws TalendException {

resumeUtil.addLog("SYSTEM_LOG", "NODE:"+ errorComponent, "", Thread.currentThread().getId()+ "", "FATAL", "", exception.getMessage(), ResumeUtil.getExceptionStackTrace(exception),"");

			}
	





public void tMSSqlConnection_1Process(final java.util.Map<String, Object> globalMap) throws TalendException {
	globalMap.put("tMSSqlConnection_1_SUBPROCESS_STATE", 0);

 final boolean execStat = this.execStat;
	
		String iterateId = "";
	
	
	String currentComponent = "";
	java.util.Map<String, Object> resourceMap = new java.util.HashMap<String, Object>();

	try {
			// TDI-39566 avoid throwing an useless Exception
			boolean resumeIt = true;
			if (globalResumeTicket == false && resumeEntryMethodName != null) {
				String currentMethodName = new java.lang.Exception().getStackTrace()[0].getMethodName();
				resumeIt = resumeEntryMethodName.equals(currentMethodName);
			}
			if (resumeIt || globalResumeTicket) { //start the resume
				globalResumeTicket = true;



		


	
	/**
	 * [tMSSqlConnection_1 begin ] start
	 */

	

	
		
		ok_Hash.put("tMSSqlConnection_1", false);
		start_Hash.put("tMSSqlConnection_1", System.currentTimeMillis());
		
				tStatCatcher_1.addMessage("begin","tMSSqlConnection_1");
				tStatCatcher_1Process(globalMap);
			
	
	currentComponent="tMSSqlConnection_1";

	
		int tos_count_tMSSqlConnection_1 = 0;
		
	

	
			String url_tMSSqlConnection_1 = "jdbc:jtds:sqlserver://" + context.ipasHost ;
		String port_tMSSqlConnection_1 = context.ipasPort;
		String dbname_tMSSqlConnection_1 = "" ;
    	if (!"".equals(port_tMSSqlConnection_1)) {
    		url_tMSSqlConnection_1 += ":" + context.ipasPort;
    	}
    	if (!"".equals(dbname_tMSSqlConnection_1)) {
    		
				url_tMSSqlConnection_1 += "//" + ""; 
    	}

		url_tMSSqlConnection_1 += ";appName=" + projectName + ";" +  "allowMultiQueries=true";  
	String dbUser_tMSSqlConnection_1 = "sa";
	
	
		
	final String decryptedPassword_tMSSqlConnection_1 = context.ipasSaPassword; 
		String dbPwd_tMSSqlConnection_1 = decryptedPassword_tMSSqlConnection_1;
	
	
	java.sql.Connection conn_tMSSqlConnection_1 = null;
	
		
			String driverClass_tMSSqlConnection_1 = "net.sourceforge.jtds.jdbc.Driver";
			java.lang.Class jdbcclazz_tMSSqlConnection_1 = java.lang.Class.forName(driverClass_tMSSqlConnection_1);
			globalMap.put("driverClass_tMSSqlConnection_1", driverClass_tMSSqlConnection_1);
		
			conn_tMSSqlConnection_1 = java.sql.DriverManager.getConnection(url_tMSSqlConnection_1,dbUser_tMSSqlConnection_1,dbPwd_tMSSqlConnection_1);

		globalMap.put("conn_tMSSqlConnection_1", conn_tMSSqlConnection_1);
	if (null != conn_tMSSqlConnection_1) {
		
			conn_tMSSqlConnection_1.setAutoCommit(true);
	}

	globalMap.put("dbschema_tMSSqlConnection_1", "");

	globalMap.put("db_tMSSqlConnection_1",  "");
	
	globalMap.put("shareIdentitySetting_tMSSqlConnection_1",  false);

	globalMap.put("driver_tMSSqlConnection_1", "JTDS");

 



/**
 * [tMSSqlConnection_1 begin ] stop
 */
	
	/**
	 * [tMSSqlConnection_1 main ] start
	 */

	

	
	
	currentComponent="tMSSqlConnection_1";

	

 


	tos_count_tMSSqlConnection_1++;

/**
 * [tMSSqlConnection_1 main ] stop
 */
	
	/**
	 * [tMSSqlConnection_1 process_data_begin ] start
	 */

	

	
	
	currentComponent="tMSSqlConnection_1";

	

 



/**
 * [tMSSqlConnection_1 process_data_begin ] stop
 */
	
	/**
	 * [tMSSqlConnection_1 process_data_end ] start
	 */

	

	
	
	currentComponent="tMSSqlConnection_1";

	

 



/**
 * [tMSSqlConnection_1 process_data_end ] stop
 */
	
	/**
	 * [tMSSqlConnection_1 end ] start
	 */

	

	
	
	currentComponent="tMSSqlConnection_1";

	

 

ok_Hash.put("tMSSqlConnection_1", true);
end_Hash.put("tMSSqlConnection_1", System.currentTimeMillis());

tStatCatcher_1.addMessage("end","tMSSqlConnection_1", end_Hash.get("tMSSqlConnection_1")-start_Hash.get("tMSSqlConnection_1"));
tStatCatcher_1Process(globalMap);



/**
 * [tMSSqlConnection_1 end ] stop
 */
				}//end the resume

				
				    			if(resumeEntryMethodName == null || globalResumeTicket){
				    				resumeUtil.addLog("CHECKPOINT", "CONNECTION:SUBJOB_OK:tMSSqlConnection_1:OnSubjobOk", "", Thread.currentThread().getId() + "", "", "", "", "", "");
								}	    				    			
					    	
								if(execStat){    	
									runStat.updateStatOnConnection("OnSubjobOk1", 0, "ok");
								} 
							
							tMSSqlRow_40Process(globalMap); 
						



	
			}catch(java.lang.Exception e){	
				
				TalendException te = new TalendException(e, currentComponent, globalMap);
				
				throw te;
			}catch(java.lang.Error error){	
				
					runStat.stopThreadStat();
				
				throw error;
			}finally{
				
				try{
					
	
	/**
	 * [tMSSqlConnection_1 finally ] start
	 */

	

	
	
	currentComponent="tMSSqlConnection_1";

	

 



/**
 * [tMSSqlConnection_1 finally ] stop
 */
				}catch(java.lang.Exception e){	
					//ignore
				}catch(java.lang.Error error){
					//ignore
				}
				resourceMap = null;
			}
		

		globalMap.put("tMSSqlConnection_1_SUBPROCESS_STATE", 1);
	}
	


public static class row64Struct implements routines.system.IPersistableRow<row64Struct> {
    final static byte[] commonByteArrayLock_WIPO_PROJECTS_F_IPAS_ENV_CRE = new byte[0];
    static byte[] commonByteArray_WIPO_PROJECTS_F_IPAS_ENV_CRE = new byte[0];

	
			    public String errorCode;

				public String getErrorCode () {
					return this.errorCode;
				}
				
			    public String errorMessage;

				public String getErrorMessage () {
					return this.errorMessage;
				}
				



	private String readString(ObjectInputStream dis) throws IOException{
		String strReturn = null;
		int length = 0;
        length = dis.readInt();
		if (length == -1) {
			strReturn = null;
		} else {
			if(length > commonByteArray_WIPO_PROJECTS_F_IPAS_ENV_CRE.length) {
				if(length < 1024 && commonByteArray_WIPO_PROJECTS_F_IPAS_ENV_CRE.length == 0) {
   					commonByteArray_WIPO_PROJECTS_F_IPAS_ENV_CRE = new byte[1024];
				} else {
   					commonByteArray_WIPO_PROJECTS_F_IPAS_ENV_CRE = new byte[2 * length];
   				}
			}
			dis.readFully(commonByteArray_WIPO_PROJECTS_F_IPAS_ENV_CRE, 0, length);
			strReturn = new String(commonByteArray_WIPO_PROJECTS_F_IPAS_ENV_CRE, 0, length, utf8Charset);
		}
		return strReturn;
	}

    private void writeString(String str, ObjectOutputStream dos) throws IOException{
		if(str == null) {
            dos.writeInt(-1);
		} else {
            byte[] byteArray = str.getBytes(utf8Charset);
	    	dos.writeInt(byteArray.length);
			dos.write(byteArray);
    	}
    }

    public void readData(ObjectInputStream dis) {

		synchronized(commonByteArrayLock_WIPO_PROJECTS_F_IPAS_ENV_CRE) {

        	try {

        		int length = 0;
		
					this.errorCode = readString(dis);
					
					this.errorMessage = readString(dis);
					
        	} catch (IOException e) {
	            throw new RuntimeException(e);

		

        }

		

      }


    }

    public void writeData(ObjectOutputStream dos) {
        try {

		
					// String
				
						writeString(this.errorCode,dos);
					
					// String
				
						writeString(this.errorMessage,dos);
					
        	} catch (IOException e) {
	            throw new RuntimeException(e);
        }


    }


    public String toString() {

		StringBuilder sb = new StringBuilder();
		sb.append(super.toString());
		sb.append("[");
		sb.append("errorCode="+errorCode);
		sb.append(",errorMessage="+errorMessage);
	    sb.append("]");

	    return sb.toString();
    }

    /**
     * Compare keys
     */
    public int compareTo(row64Struct other) {

		int returnValue = -1;
		
	    return returnValue;
    }


    private int checkNullsAndCompare(Object object1, Object object2) {
        int returnValue = 0;
		if (object1 instanceof Comparable && object2 instanceof Comparable) {
            returnValue = ((Comparable) object1).compareTo(object2);
        } else if (object1 != null && object2 != null) {
            returnValue = compareStrings(object1.toString(), object2.toString());
        } else if (object1 == null && object2 != null) {
            returnValue = 1;
        } else if (object1 != null && object2 == null) {
            returnValue = -1;
        } else {
            returnValue = 0;
        }

        return returnValue;
    }

    private int compareStrings(String string1, String string2) {
        return string1.compareTo(string2);
    }


}

public static class row4Struct implements routines.system.IPersistableRow<row4Struct> {
    final static byte[] commonByteArrayLock_WIPO_PROJECTS_F_IPAS_ENV_CRE = new byte[0];
    static byte[] commonByteArray_WIPO_PROJECTS_F_IPAS_ENV_CRE = new byte[0];

	



    public void readData(ObjectInputStream dis) {

		synchronized(commonByteArrayLock_WIPO_PROJECTS_F_IPAS_ENV_CRE) {

        	try {

        		int length = 0;
		

		

        }

		
			finally {}
		

      }


    }

    public void writeData(ObjectOutputStream dos) {
        try {

		
        }

			finally {}
		

    }


    public String toString() {

		StringBuilder sb = new StringBuilder();
		sb.append(super.toString());
		sb.append("[");
	    sb.append("]");

	    return sb.toString();
    }

    /**
     * Compare keys
     */
    public int compareTo(row4Struct other) {

		int returnValue = -1;
		
	    return returnValue;
    }


    private int checkNullsAndCompare(Object object1, Object object2) {
        int returnValue = 0;
		if (object1 instanceof Comparable && object2 instanceof Comparable) {
            returnValue = ((Comparable) object1).compareTo(object2);
        } else if (object1 != null && object2 != null) {
            returnValue = compareStrings(object1.toString(), object2.toString());
        } else if (object1 == null && object2 != null) {
            returnValue = 1;
        } else if (object1 != null && object2 == null) {
            returnValue = -1;
        } else {
            returnValue = 0;
        }

        return returnValue;
    }

    private int compareStrings(String string1, String string2) {
        return string1.compareTo(string2);
    }


}

public static class row61Struct implements routines.system.IPersistableRow<row61Struct> {
    final static byte[] commonByteArrayLock_WIPO_PROJECTS_F_IPAS_ENV_CRE = new byte[0];
    static byte[] commonByteArray_WIPO_PROJECTS_F_IPAS_ENV_CRE = new byte[0];

	
			    public String errorCode;

				public String getErrorCode () {
					return this.errorCode;
				}
				
			    public String errorMessage;

				public String getErrorMessage () {
					return this.errorMessage;
				}
				



	private String readString(ObjectInputStream dis) throws IOException{
		String strReturn = null;
		int length = 0;
        length = dis.readInt();
		if (length == -1) {
			strReturn = null;
		} else {
			if(length > commonByteArray_WIPO_PROJECTS_F_IPAS_ENV_CRE.length) {
				if(length < 1024 && commonByteArray_WIPO_PROJECTS_F_IPAS_ENV_CRE.length == 0) {
   					commonByteArray_WIPO_PROJECTS_F_IPAS_ENV_CRE = new byte[1024];
				} else {
   					commonByteArray_WIPO_PROJECTS_F_IPAS_ENV_CRE = new byte[2 * length];
   				}
			}
			dis.readFully(commonByteArray_WIPO_PROJECTS_F_IPAS_ENV_CRE, 0, length);
			strReturn = new String(commonByteArray_WIPO_PROJECTS_F_IPAS_ENV_CRE, 0, length, utf8Charset);
		}
		return strReturn;
	}

    private void writeString(String str, ObjectOutputStream dos) throws IOException{
		if(str == null) {
            dos.writeInt(-1);
		} else {
            byte[] byteArray = str.getBytes(utf8Charset);
	    	dos.writeInt(byteArray.length);
			dos.write(byteArray);
    	}
    }

    public void readData(ObjectInputStream dis) {

		synchronized(commonByteArrayLock_WIPO_PROJECTS_F_IPAS_ENV_CRE) {

        	try {

        		int length = 0;
		
					this.errorCode = readString(dis);
					
					this.errorMessage = readString(dis);
					
        	} catch (IOException e) {
	            throw new RuntimeException(e);

		

        }

		

      }


    }

    public void writeData(ObjectOutputStream dos) {
        try {

		
					// String
				
						writeString(this.errorCode,dos);
					
					// String
				
						writeString(this.errorMessage,dos);
					
        	} catch (IOException e) {
	            throw new RuntimeException(e);
        }


    }


    public String toString() {

		StringBuilder sb = new StringBuilder();
		sb.append(super.toString());
		sb.append("[");
		sb.append("errorCode="+errorCode);
		sb.append(",errorMessage="+errorMessage);
	    sb.append("]");

	    return sb.toString();
    }

    /**
     * Compare keys
     */
    public int compareTo(row61Struct other) {

		int returnValue = -1;
		
	    return returnValue;
    }


    private int checkNullsAndCompare(Object object1, Object object2) {
        int returnValue = 0;
		if (object1 instanceof Comparable && object2 instanceof Comparable) {
            returnValue = ((Comparable) object1).compareTo(object2);
        } else if (object1 != null && object2 != null) {
            returnValue = compareStrings(object1.toString(), object2.toString());
        } else if (object1 == null && object2 != null) {
            returnValue = 1;
        } else if (object1 != null && object2 == null) {
            returnValue = -1;
        } else {
            returnValue = 0;
        }

        return returnValue;
    }

    private int compareStrings(String string1, String string2) {
        return string1.compareTo(string2);
    }


}

public static class row1Struct implements routines.system.IPersistableRow<row1Struct> {
    final static byte[] commonByteArrayLock_WIPO_PROJECTS_F_IPAS_ENV_CRE = new byte[0];
    static byte[] commonByteArray_WIPO_PROJECTS_F_IPAS_ENV_CRE = new byte[0];

	



    public void readData(ObjectInputStream dis) {

		synchronized(commonByteArrayLock_WIPO_PROJECTS_F_IPAS_ENV_CRE) {

        	try {

        		int length = 0;
		

		

        }

		
			finally {}
		

      }


    }

    public void writeData(ObjectOutputStream dos) {
        try {

		
        }

			finally {}
		

    }


    public String toString() {

		StringBuilder sb = new StringBuilder();
		sb.append(super.toString());
		sb.append("[");
	    sb.append("]");

	    return sb.toString();
    }

    /**
     * Compare keys
     */
    public int compareTo(row1Struct other) {

		int returnValue = -1;
		
	    return returnValue;
    }


    private int checkNullsAndCompare(Object object1, Object object2) {
        int returnValue = 0;
		if (object1 instanceof Comparable && object2 instanceof Comparable) {
            returnValue = ((Comparable) object1).compareTo(object2);
        } else if (object1 != null && object2 != null) {
            returnValue = compareStrings(object1.toString(), object2.toString());
        } else if (object1 == null && object2 != null) {
            returnValue = 1;
        } else if (object1 != null && object2 == null) {
            returnValue = -1;
        } else {
            returnValue = 0;
        }

        return returnValue;
    }

    private int compareStrings(String string1, String string2) {
        return string1.compareTo(string2);
    }


}

public static class row60Struct implements routines.system.IPersistableRow<row60Struct> {
    final static byte[] commonByteArrayLock_WIPO_PROJECTS_F_IPAS_ENV_CRE = new byte[0];
    static byte[] commonByteArray_WIPO_PROJECTS_F_IPAS_ENV_CRE = new byte[0];

	
			    public String errorCode;

				public String getErrorCode () {
					return this.errorCode;
				}
				
			    public String errorMessage;

				public String getErrorMessage () {
					return this.errorMessage;
				}
				



	private String readString(ObjectInputStream dis) throws IOException{
		String strReturn = null;
		int length = 0;
        length = dis.readInt();
		if (length == -1) {
			strReturn = null;
		} else {
			if(length > commonByteArray_WIPO_PROJECTS_F_IPAS_ENV_CRE.length) {
				if(length < 1024 && commonByteArray_WIPO_PROJECTS_F_IPAS_ENV_CRE.length == 0) {
   					commonByteArray_WIPO_PROJECTS_F_IPAS_ENV_CRE = new byte[1024];
				} else {
   					commonByteArray_WIPO_PROJECTS_F_IPAS_ENV_CRE = new byte[2 * length];
   				}
			}
			dis.readFully(commonByteArray_WIPO_PROJECTS_F_IPAS_ENV_CRE, 0, length);
			strReturn = new String(commonByteArray_WIPO_PROJECTS_F_IPAS_ENV_CRE, 0, length, utf8Charset);
		}
		return strReturn;
	}

    private void writeString(String str, ObjectOutputStream dos) throws IOException{
		if(str == null) {
            dos.writeInt(-1);
		} else {
            byte[] byteArray = str.getBytes(utf8Charset);
	    	dos.writeInt(byteArray.length);
			dos.write(byteArray);
    	}
    }

    public void readData(ObjectInputStream dis) {

		synchronized(commonByteArrayLock_WIPO_PROJECTS_F_IPAS_ENV_CRE) {

        	try {

        		int length = 0;
		
					this.errorCode = readString(dis);
					
					this.errorMessage = readString(dis);
					
        	} catch (IOException e) {
	            throw new RuntimeException(e);

		

        }

		

      }


    }

    public void writeData(ObjectOutputStream dos) {
        try {

		
					// String
				
						writeString(this.errorCode,dos);
					
					// String
				
						writeString(this.errorMessage,dos);
					
        	} catch (IOException e) {
	            throw new RuntimeException(e);
        }


    }


    public String toString() {

		StringBuilder sb = new StringBuilder();
		sb.append(super.toString());
		sb.append("[");
		sb.append("errorCode="+errorCode);
		sb.append(",errorMessage="+errorMessage);
	    sb.append("]");

	    return sb.toString();
    }

    /**
     * Compare keys
     */
    public int compareTo(row60Struct other) {

		int returnValue = -1;
		
	    return returnValue;
    }


    private int checkNullsAndCompare(Object object1, Object object2) {
        int returnValue = 0;
		if (object1 instanceof Comparable && object2 instanceof Comparable) {
            returnValue = ((Comparable) object1).compareTo(object2);
        } else if (object1 != null && object2 != null) {
            returnValue = compareStrings(object1.toString(), object2.toString());
        } else if (object1 == null && object2 != null) {
            returnValue = 1;
        } else if (object1 != null && object2 == null) {
            returnValue = -1;
        } else {
            returnValue = 0;
        }

        return returnValue;
    }

    private int compareStrings(String string1, String string2) {
        return string1.compareTo(string2);
    }


}

public static class row55Struct implements routines.system.IPersistableRow<row55Struct> {
    final static byte[] commonByteArrayLock_WIPO_PROJECTS_F_IPAS_ENV_CRE = new byte[0];
    static byte[] commonByteArray_WIPO_PROJECTS_F_IPAS_ENV_CRE = new byte[0];

	



    public void readData(ObjectInputStream dis) {

		synchronized(commonByteArrayLock_WIPO_PROJECTS_F_IPAS_ENV_CRE) {

        	try {

        		int length = 0;
		

		

        }

		
			finally {}
		

      }


    }

    public void writeData(ObjectOutputStream dos) {
        try {

		
        }

			finally {}
		

    }


    public String toString() {

		StringBuilder sb = new StringBuilder();
		sb.append(super.toString());
		sb.append("[");
	    sb.append("]");

	    return sb.toString();
    }

    /**
     * Compare keys
     */
    public int compareTo(row55Struct other) {

		int returnValue = -1;
		
	    return returnValue;
    }


    private int checkNullsAndCompare(Object object1, Object object2) {
        int returnValue = 0;
		if (object1 instanceof Comparable && object2 instanceof Comparable) {
            returnValue = ((Comparable) object1).compareTo(object2);
        } else if (object1 != null && object2 != null) {
            returnValue = compareStrings(object1.toString(), object2.toString());
        } else if (object1 == null && object2 != null) {
            returnValue = 1;
        } else if (object1 != null && object2 == null) {
            returnValue = -1;
        } else {
            returnValue = 0;
        }

        return returnValue;
    }

    private int compareStrings(String string1, String string2) {
        return string1.compareTo(string2);
    }


}

public static class row59Struct implements routines.system.IPersistableRow<row59Struct> {
    final static byte[] commonByteArrayLock_WIPO_PROJECTS_F_IPAS_ENV_CRE = new byte[0];
    static byte[] commonByteArray_WIPO_PROJECTS_F_IPAS_ENV_CRE = new byte[0];

	
			    public String errorCode;

				public String getErrorCode () {
					return this.errorCode;
				}
				
			    public String errorMessage;

				public String getErrorMessage () {
					return this.errorMessage;
				}
				



	private String readString(ObjectInputStream dis) throws IOException{
		String strReturn = null;
		int length = 0;
        length = dis.readInt();
		if (length == -1) {
			strReturn = null;
		} else {
			if(length > commonByteArray_WIPO_PROJECTS_F_IPAS_ENV_CRE.length) {
				if(length < 1024 && commonByteArray_WIPO_PROJECTS_F_IPAS_ENV_CRE.length == 0) {
   					commonByteArray_WIPO_PROJECTS_F_IPAS_ENV_CRE = new byte[1024];
				} else {
   					commonByteArray_WIPO_PROJECTS_F_IPAS_ENV_CRE = new byte[2 * length];
   				}
			}
			dis.readFully(commonByteArray_WIPO_PROJECTS_F_IPAS_ENV_CRE, 0, length);
			strReturn = new String(commonByteArray_WIPO_PROJECTS_F_IPAS_ENV_CRE, 0, length, utf8Charset);
		}
		return strReturn;
	}

    private void writeString(String str, ObjectOutputStream dos) throws IOException{
		if(str == null) {
            dos.writeInt(-1);
		} else {
            byte[] byteArray = str.getBytes(utf8Charset);
	    	dos.writeInt(byteArray.length);
			dos.write(byteArray);
    	}
    }

    public void readData(ObjectInputStream dis) {

		synchronized(commonByteArrayLock_WIPO_PROJECTS_F_IPAS_ENV_CRE) {

        	try {

        		int length = 0;
		
					this.errorCode = readString(dis);
					
					this.errorMessage = readString(dis);
					
        	} catch (IOException e) {
	            throw new RuntimeException(e);

		

        }

		

      }


    }

    public void writeData(ObjectOutputStream dos) {
        try {

		
					// String
				
						writeString(this.errorCode,dos);
					
					// String
				
						writeString(this.errorMessage,dos);
					
        	} catch (IOException e) {
	            throw new RuntimeException(e);
        }


    }


    public String toString() {

		StringBuilder sb = new StringBuilder();
		sb.append(super.toString());
		sb.append("[");
		sb.append("errorCode="+errorCode);
		sb.append(",errorMessage="+errorMessage);
	    sb.append("]");

	    return sb.toString();
    }

    /**
     * Compare keys
     */
    public int compareTo(row59Struct other) {

		int returnValue = -1;
		
	    return returnValue;
    }


    private int checkNullsAndCompare(Object object1, Object object2) {
        int returnValue = 0;
		if (object1 instanceof Comparable && object2 instanceof Comparable) {
            returnValue = ((Comparable) object1).compareTo(object2);
        } else if (object1 != null && object2 != null) {
            returnValue = compareStrings(object1.toString(), object2.toString());
        } else if (object1 == null && object2 != null) {
            returnValue = 1;
        } else if (object1 != null && object2 == null) {
            returnValue = -1;
        } else {
            returnValue = 0;
        }

        return returnValue;
    }

    private int compareStrings(String string1, String string2) {
        return string1.compareTo(string2);
    }


}
public void tMSSqlRow_40Process(final java.util.Map<String, Object> globalMap) throws TalendException {
	globalMap.put("tMSSqlRow_40_SUBPROCESS_STATE", 0);

 final boolean execStat = this.execStat;
	
		String iterateId = "";
	
	
	String currentComponent = "";
	java.util.Map<String, Object> resourceMap = new java.util.HashMap<String, Object>();

	try {
			// TDI-39566 avoid throwing an useless Exception
			boolean resumeIt = true;
			if (globalResumeTicket == false && resumeEntryMethodName != null) {
				String currentMethodName = new java.lang.Exception().getStackTrace()[0].getMethodName();
				resumeIt = resumeEntryMethodName.equals(currentMethodName);
			}
			if (resumeIt || globalResumeTicket) { //start the resume
				globalResumeTicket = true;



		row55Struct row55 = new row55Struct();
row1Struct row1 = new row1Struct();
row4Struct row4 = new row4Struct();
row64Struct row64 = new row64Struct();
row61Struct row61 = new row61Struct();
row60Struct row60 = new row60Struct();
row59Struct row59 = new row59Struct();







	
	/**
	 * [tLogRow_6 begin ] start
	 */

	

	
		
		ok_Hash.put("tLogRow_6", false);
		start_Hash.put("tLogRow_6", System.currentTimeMillis());
		
	
	currentComponent="tLogRow_6";

	
					if(execStat) {
						runStat.updateStatOnConnection(resourceMap,iterateId,0,0,"row64");
					}
				
		int tos_count_tLogRow_6 = 0;
		

	///////////////////////
		


	class Util_tLogRow_6 {
	
		String[] des_top = { ".", "-" };

        String[] des_data = { "-", "+" };

        String[] des_frame = { "|" }; 
        
        public void printLine(StringBuilder sb, int titleWidth, int dataWidth){
        
        	sb.append("+");
			for(int i=0; i<titleWidth+2; i++)
				sb.append("-");
			sb.append("+");
			for(int i=0; i<dataWidth+2; i++)
				sb.append("-");
        	sb.append("+" + "\n");
        }      

		public String print(String[] row, int nbLine){
			
			StringBuilder sb = new StringBuilder();
			
			    String title = "#" + nbLine + ". " + "tLogRow_6";
			    
		
			//step 1: get the max length of all the row[] member;
			int dataWidth = 5;		//the length of the string "value"	
			for(int i=0;i<row.length;i++) {
				if(row[i] == null && 4 > dataWidth) {
					dataWidth = 4;
				}
				else if(row[i] != null && row[i].length()>dataWidth) 
					dataWidth = row[i].length();
			}			
						
			int titleWidth = 12;
			
			int totalWidth = dataWidth + titleWidth + 5;
			
			//step 2: print the header with line number
			sb.append(".");
			for(int i=0 ; i<totalWidth ; i++)
				sb.append("-");			
			sb.append("." + "\n" + "|");
			
			int emptyCenterWidth = (totalWidth-title.length())/2;
			for(int i=0 ; i<emptyCenterWidth; i++)
				sb.append(" ");	
			sb.append(title);
			for(int i=0 ; i<totalWidth - emptyCenterWidth - title.length() ; i++)
				sb.append(" ");	
			sb.append("|" + "\n");
			
			//step 3: print "key" and "value"			
			printLine(sb,titleWidth,dataWidth);
			
			sb.append("|" + " key");
			for(int i=0; i<titleWidth-2; i++)
				sb.append(" ");
        	sb.append("|" + " value");
			for(int i=0; i<dataWidth-4; i++)
				sb.append(" ");
			sb.append("|" + "\n");
			
			printLine(sb,titleWidth,dataWidth);
			
			//step 4: print dataset
			
			//for(int i=0; i<row.length; i++){
				sb.append("| " + "errorCode");
				for(int i=0; i<titleWidth -"errorCode".length()+ 1 ;i++)
					sb.append(" ");
				sb.append("| " + row[0]);
				for(int i=0; row[0] == null && i<dataWidth - 3 || row[0] != null && i<dataWidth -row[0].length()+ 1 ;i++)
					sb.append(" ");
				sb.append("|" + "\n");
			
			//}

			
			//for(int i=0; i<row.length; i++){
				sb.append("| " + "errorMessage");
				for(int i=0; i<titleWidth -"errorMessage".length()+ 1 ;i++)
					sb.append(" ");
				sb.append("| " + row[1]);
				for(int i=0; row[1] == null && i<dataWidth - 3 || row[1] != null && i<dataWidth -row[1].length()+ 1 ;i++)
					sb.append(" ");
				sb.append("|" + "\n");
			
			//}

			
			//step 5: print a line gap
			printLine(sb,titleWidth,dataWidth);
			return sb.toString();

		}


	}

	Util_tLogRow_6 util_tLogRow_6 = new Util_tLogRow_6();




	java.io.PrintStream consoleOut_tLogRow_6 = null;
	if (globalMap.get("tLogRow_CONSOLE")!=null){
        consoleOut_tLogRow_6 = (java.io.PrintStream) globalMap.get("tLogRow_CONSOLE");
    }else{
        consoleOut_tLogRow_6 = new java.io.PrintStream(new java.io.BufferedOutputStream(System.out));
        globalMap.put("tLogRow_CONSOLE",consoleOut_tLogRow_6);
    }

 		StringBuilder strBuffer_tLogRow_6 = null;
		int nb_line_tLogRow_6 = 0;
///////////////////////    			



 



/**
 * [tLogRow_6 begin ] stop
 */



	
	/**
	 * [tMSSqlRow_42 begin ] start
	 */

	

	
		
		ok_Hash.put("tMSSqlRow_42", false);
		start_Hash.put("tMSSqlRow_42", System.currentTimeMillis());
		
	
	currentComponent="tMSSqlRow_42";

	
					if(execStat) {
						runStat.updateStatOnConnection(resourceMap,iterateId,0,0,"row4");
					}
				
		int tos_count_tMSSqlRow_42 = 0;
		

	java.sql.Connection conn_tMSSqlRow_42 = null;
	String query_tMSSqlRow_42 = "";
	boolean whetherReject_tMSSqlRow_42 = false;
				conn_tMSSqlRow_42 = (java.sql.Connection)globalMap.get("conn_tMSSqlConnection_1");
			
    resourceMap.put("conn_tMSSqlRow_42", conn_tMSSqlRow_42);
        java.sql.Statement stmt_tMSSqlRow_42 = conn_tMSSqlRow_42.createStatement();
        resourceMap.put("stmt_tMSSqlRow_42", stmt_tMSSqlRow_42);

 



/**
 * [tMSSqlRow_42 begin ] stop
 */




	
	/**
	 * [tLogRow_3 begin ] start
	 */

	

	
		
		ok_Hash.put("tLogRow_3", false);
		start_Hash.put("tLogRow_3", System.currentTimeMillis());
		
	
	currentComponent="tLogRow_3";

	
					if(execStat) {
						runStat.updateStatOnConnection(resourceMap,iterateId,0,0,"row61");
					}
				
		int tos_count_tLogRow_3 = 0;
		

	///////////////////////
		


	class Util_tLogRow_3 {
	
		String[] des_top = { ".", "-" };

        String[] des_data = { "-", "+" };

        String[] des_frame = { "|" }; 
        
        public void printLine(StringBuilder sb, int titleWidth, int dataWidth){
        
        	sb.append("+");
			for(int i=0; i<titleWidth+2; i++)
				sb.append("-");
			sb.append("+");
			for(int i=0; i<dataWidth+2; i++)
				sb.append("-");
        	sb.append("+" + "\n");
        }      

		public String print(String[] row, int nbLine){
			
			StringBuilder sb = new StringBuilder();
			
			    String title = "#" + nbLine + ". " + "tLogRow_3";
			    
		
			//step 1: get the max length of all the row[] member;
			int dataWidth = 5;		//the length of the string "value"	
			for(int i=0;i<row.length;i++) {
				if(row[i] == null && 4 > dataWidth) {
					dataWidth = 4;
				}
				else if(row[i] != null && row[i].length()>dataWidth) 
					dataWidth = row[i].length();
			}			
						
			int titleWidth = 12;
			
			int totalWidth = dataWidth + titleWidth + 5;
			
			//step 2: print the header with line number
			sb.append(".");
			for(int i=0 ; i<totalWidth ; i++)
				sb.append("-");			
			sb.append("." + "\n" + "|");
			
			int emptyCenterWidth = (totalWidth-title.length())/2;
			for(int i=0 ; i<emptyCenterWidth; i++)
				sb.append(" ");	
			sb.append(title);
			for(int i=0 ; i<totalWidth - emptyCenterWidth - title.length() ; i++)
				sb.append(" ");	
			sb.append("|" + "\n");
			
			//step 3: print "key" and "value"			
			printLine(sb,titleWidth,dataWidth);
			
			sb.append("|" + " key");
			for(int i=0; i<titleWidth-2; i++)
				sb.append(" ");
        	sb.append("|" + " value");
			for(int i=0; i<dataWidth-4; i++)
				sb.append(" ");
			sb.append("|" + "\n");
			
			printLine(sb,titleWidth,dataWidth);
			
			//step 4: print dataset
			
			//for(int i=0; i<row.length; i++){
				sb.append("| " + "errorCode");
				for(int i=0; i<titleWidth -"errorCode".length()+ 1 ;i++)
					sb.append(" ");
				sb.append("| " + row[0]);
				for(int i=0; row[0] == null && i<dataWidth - 3 || row[0] != null && i<dataWidth -row[0].length()+ 1 ;i++)
					sb.append(" ");
				sb.append("|" + "\n");
			
			//}

			
			//for(int i=0; i<row.length; i++){
				sb.append("| " + "errorMessage");
				for(int i=0; i<titleWidth -"errorMessage".length()+ 1 ;i++)
					sb.append(" ");
				sb.append("| " + row[1]);
				for(int i=0; row[1] == null && i<dataWidth - 3 || row[1] != null && i<dataWidth -row[1].length()+ 1 ;i++)
					sb.append(" ");
				sb.append("|" + "\n");
			
			//}

			
			//step 5: print a line gap
			printLine(sb,titleWidth,dataWidth);
			return sb.toString();

		}


	}

	Util_tLogRow_3 util_tLogRow_3 = new Util_tLogRow_3();




	java.io.PrintStream consoleOut_tLogRow_3 = null;
	if (globalMap.get("tLogRow_CONSOLE")!=null){
        consoleOut_tLogRow_3 = (java.io.PrintStream) globalMap.get("tLogRow_CONSOLE");
    }else{
        consoleOut_tLogRow_3 = new java.io.PrintStream(new java.io.BufferedOutputStream(System.out));
        globalMap.put("tLogRow_CONSOLE",consoleOut_tLogRow_3);
    }

 		StringBuilder strBuffer_tLogRow_3 = null;
		int nb_line_tLogRow_3 = 0;
///////////////////////    			



 



/**
 * [tLogRow_3 begin ] stop
 */



	
	/**
	 * [tMSSqlRow_3 begin ] start
	 */

	

	
		
		ok_Hash.put("tMSSqlRow_3", false);
		start_Hash.put("tMSSqlRow_3", System.currentTimeMillis());
		
	
	currentComponent="tMSSqlRow_3";

	
					if(execStat) {
						runStat.updateStatOnConnection(resourceMap,iterateId,0,0,"row1");
					}
				
		int tos_count_tMSSqlRow_3 = 0;
		

	java.sql.Connection conn_tMSSqlRow_3 = null;
	String query_tMSSqlRow_3 = "";
	boolean whetherReject_tMSSqlRow_3 = false;
				conn_tMSSqlRow_3 = (java.sql.Connection)globalMap.get("conn_tMSSqlConnection_1");
			
    resourceMap.put("conn_tMSSqlRow_3", conn_tMSSqlRow_3);
        java.sql.Statement stmt_tMSSqlRow_3 = conn_tMSSqlRow_3.createStatement();
        resourceMap.put("stmt_tMSSqlRow_3", stmt_tMSSqlRow_3);

 



/**
 * [tMSSqlRow_3 begin ] stop
 */




	
	/**
	 * [tLogRow_2 begin ] start
	 */

	

	
		
		ok_Hash.put("tLogRow_2", false);
		start_Hash.put("tLogRow_2", System.currentTimeMillis());
		
	
	currentComponent="tLogRow_2";

	
					if(execStat) {
						runStat.updateStatOnConnection(resourceMap,iterateId,0,0,"row60");
					}
				
		int tos_count_tLogRow_2 = 0;
		

	///////////////////////
		


	class Util_tLogRow_2 {
	
		String[] des_top = { ".", "-" };

        String[] des_data = { "-", "+" };

        String[] des_frame = { "|" }; 
        
        public void printLine(StringBuilder sb, int titleWidth, int dataWidth){
        
        	sb.append("+");
			for(int i=0; i<titleWidth+2; i++)
				sb.append("-");
			sb.append("+");
			for(int i=0; i<dataWidth+2; i++)
				sb.append("-");
        	sb.append("+" + "\n");
        }      

		public String print(String[] row, int nbLine){
			
			StringBuilder sb = new StringBuilder();
			
			    String title = "#" + nbLine + ". " + "tLogRow_2";
			    
		
			//step 1: get the max length of all the row[] member;
			int dataWidth = 5;		//the length of the string "value"	
			for(int i=0;i<row.length;i++) {
				if(row[i] == null && 4 > dataWidth) {
					dataWidth = 4;
				}
				else if(row[i] != null && row[i].length()>dataWidth) 
					dataWidth = row[i].length();
			}			
						
			int titleWidth = 12;
			
			int totalWidth = dataWidth + titleWidth + 5;
			
			//step 2: print the header with line number
			sb.append(".");
			for(int i=0 ; i<totalWidth ; i++)
				sb.append("-");			
			sb.append("." + "\n" + "|");
			
			int emptyCenterWidth = (totalWidth-title.length())/2;
			for(int i=0 ; i<emptyCenterWidth; i++)
				sb.append(" ");	
			sb.append(title);
			for(int i=0 ; i<totalWidth - emptyCenterWidth - title.length() ; i++)
				sb.append(" ");	
			sb.append("|" + "\n");
			
			//step 3: print "key" and "value"			
			printLine(sb,titleWidth,dataWidth);
			
			sb.append("|" + " key");
			for(int i=0; i<titleWidth-2; i++)
				sb.append(" ");
        	sb.append("|" + " value");
			for(int i=0; i<dataWidth-4; i++)
				sb.append(" ");
			sb.append("|" + "\n");
			
			printLine(sb,titleWidth,dataWidth);
			
			//step 4: print dataset
			
			//for(int i=0; i<row.length; i++){
				sb.append("| " + "errorCode");
				for(int i=0; i<titleWidth -"errorCode".length()+ 1 ;i++)
					sb.append(" ");
				sb.append("| " + row[0]);
				for(int i=0; row[0] == null && i<dataWidth - 3 || row[0] != null && i<dataWidth -row[0].length()+ 1 ;i++)
					sb.append(" ");
				sb.append("|" + "\n");
			
			//}

			
			//for(int i=0; i<row.length; i++){
				sb.append("| " + "errorMessage");
				for(int i=0; i<titleWidth -"errorMessage".length()+ 1 ;i++)
					sb.append(" ");
				sb.append("| " + row[1]);
				for(int i=0; row[1] == null && i<dataWidth - 3 || row[1] != null && i<dataWidth -row[1].length()+ 1 ;i++)
					sb.append(" ");
				sb.append("|" + "\n");
			
			//}

			
			//step 5: print a line gap
			printLine(sb,titleWidth,dataWidth);
			return sb.toString();

		}


	}

	Util_tLogRow_2 util_tLogRow_2 = new Util_tLogRow_2();




	java.io.PrintStream consoleOut_tLogRow_2 = null;
	if (globalMap.get("tLogRow_CONSOLE")!=null){
        consoleOut_tLogRow_2 = (java.io.PrintStream) globalMap.get("tLogRow_CONSOLE");
    }else{
        consoleOut_tLogRow_2 = new java.io.PrintStream(new java.io.BufferedOutputStream(System.out));
        globalMap.put("tLogRow_CONSOLE",consoleOut_tLogRow_2);
    }

 		StringBuilder strBuffer_tLogRow_2 = null;
		int nb_line_tLogRow_2 = 0;
///////////////////////    			



 



/**
 * [tLogRow_2 begin ] stop
 */



	
	/**
	 * [tMSSqlRow_1 begin ] start
	 */

	

	
		
		ok_Hash.put("tMSSqlRow_1", false);
		start_Hash.put("tMSSqlRow_1", System.currentTimeMillis());
		
	
	currentComponent="tMSSqlRow_1";

	
					if(execStat) {
						runStat.updateStatOnConnection(resourceMap,iterateId,0,0,"row55");
					}
				
		int tos_count_tMSSqlRow_1 = 0;
		

	java.sql.Connection conn_tMSSqlRow_1 = null;
	String query_tMSSqlRow_1 = "";
	boolean whetherReject_tMSSqlRow_1 = false;
				conn_tMSSqlRow_1 = (java.sql.Connection)globalMap.get("conn_tMSSqlConnection_1");
			
    resourceMap.put("conn_tMSSqlRow_1", conn_tMSSqlRow_1);
        java.sql.Statement stmt_tMSSqlRow_1 = conn_tMSSqlRow_1.createStatement();
        resourceMap.put("stmt_tMSSqlRow_1", stmt_tMSSqlRow_1);

 



/**
 * [tMSSqlRow_1 begin ] stop
 */




	
	/**
	 * [tLogRow_1 begin ] start
	 */

	

	
		
		ok_Hash.put("tLogRow_1", false);
		start_Hash.put("tLogRow_1", System.currentTimeMillis());
		
	
	currentComponent="tLogRow_1";

	
					if(execStat) {
						runStat.updateStatOnConnection(resourceMap,iterateId,0,0,"row59");
					}
				
		int tos_count_tLogRow_1 = 0;
		

	///////////////////////
		


	class Util_tLogRow_1 {
	
		String[] des_top = { ".", "-" };

        String[] des_data = { "-", "+" };

        String[] des_frame = { "|" }; 
        
        public void printLine(StringBuilder sb, int titleWidth, int dataWidth){
        
        	sb.append("+");
			for(int i=0; i<titleWidth+2; i++)
				sb.append("-");
			sb.append("+");
			for(int i=0; i<dataWidth+2; i++)
				sb.append("-");
        	sb.append("+" + "\n");
        }      

		public String print(String[] row, int nbLine){
			
			StringBuilder sb = new StringBuilder();
			
			    String title = "#" + nbLine + ". " + "tLogRow_1";
			    
		
			//step 1: get the max length of all the row[] member;
			int dataWidth = 5;		//the length of the string "value"	
			for(int i=0;i<row.length;i++) {
				if(row[i] == null && 4 > dataWidth) {
					dataWidth = 4;
				}
				else if(row[i] != null && row[i].length()>dataWidth) 
					dataWidth = row[i].length();
			}			
						
			int titleWidth = 12;
			
			int totalWidth = dataWidth + titleWidth + 5;
			
			//step 2: print the header with line number
			sb.append(".");
			for(int i=0 ; i<totalWidth ; i++)
				sb.append("-");			
			sb.append("." + "\n" + "|");
			
			int emptyCenterWidth = (totalWidth-title.length())/2;
			for(int i=0 ; i<emptyCenterWidth; i++)
				sb.append(" ");	
			sb.append(title);
			for(int i=0 ; i<totalWidth - emptyCenterWidth - title.length() ; i++)
				sb.append(" ");	
			sb.append("|" + "\n");
			
			//step 3: print "key" and "value"			
			printLine(sb,titleWidth,dataWidth);
			
			sb.append("|" + " key");
			for(int i=0; i<titleWidth-2; i++)
				sb.append(" ");
        	sb.append("|" + " value");
			for(int i=0; i<dataWidth-4; i++)
				sb.append(" ");
			sb.append("|" + "\n");
			
			printLine(sb,titleWidth,dataWidth);
			
			//step 4: print dataset
			
			//for(int i=0; i<row.length; i++){
				sb.append("| " + "errorCode");
				for(int i=0; i<titleWidth -"errorCode".length()+ 1 ;i++)
					sb.append(" ");
				sb.append("| " + row[0]);
				for(int i=0; row[0] == null && i<dataWidth - 3 || row[0] != null && i<dataWidth -row[0].length()+ 1 ;i++)
					sb.append(" ");
				sb.append("|" + "\n");
			
			//}

			
			//for(int i=0; i<row.length; i++){
				sb.append("| " + "errorMessage");
				for(int i=0; i<titleWidth -"errorMessage".length()+ 1 ;i++)
					sb.append(" ");
				sb.append("| " + row[1]);
				for(int i=0; row[1] == null && i<dataWidth - 3 || row[1] != null && i<dataWidth -row[1].length()+ 1 ;i++)
					sb.append(" ");
				sb.append("|" + "\n");
			
			//}

			
			//step 5: print a line gap
			printLine(sb,titleWidth,dataWidth);
			return sb.toString();

		}


	}

	Util_tLogRow_1 util_tLogRow_1 = new Util_tLogRow_1();




	java.io.PrintStream consoleOut_tLogRow_1 = null;
	if (globalMap.get("tLogRow_CONSOLE")!=null){
        consoleOut_tLogRow_1 = (java.io.PrintStream) globalMap.get("tLogRow_CONSOLE");
    }else{
        consoleOut_tLogRow_1 = new java.io.PrintStream(new java.io.BufferedOutputStream(System.out));
        globalMap.put("tLogRow_CONSOLE",consoleOut_tLogRow_1);
    }

 		StringBuilder strBuffer_tLogRow_1 = null;
		int nb_line_tLogRow_1 = 0;
///////////////////////    			



 



/**
 * [tLogRow_1 begin ] stop
 */



	
	/**
	 * [tMSSqlRow_40 begin ] start
	 */

	

	
		
		ok_Hash.put("tMSSqlRow_40", false);
		start_Hash.put("tMSSqlRow_40", System.currentTimeMillis());
		
	
	currentComponent="tMSSqlRow_40";

	
		int tos_count_tMSSqlRow_40 = 0;
		

	java.sql.Connection conn_tMSSqlRow_40 = null;
	String query_tMSSqlRow_40 = "";
	boolean whetherReject_tMSSqlRow_40 = false;
				conn_tMSSqlRow_40 = (java.sql.Connection)globalMap.get("conn_tMSSqlConnection_1");
			
    resourceMap.put("conn_tMSSqlRow_40", conn_tMSSqlRow_40);
        java.sql.Statement stmt_tMSSqlRow_40 = conn_tMSSqlRow_40.createStatement();
        resourceMap.put("stmt_tMSSqlRow_40", stmt_tMSSqlRow_40);

 



/**
 * [tMSSqlRow_40 begin ] stop
 */
	
	/**
	 * [tMSSqlRow_40 main ] start
	 */

	

	
	
	currentComponent="tMSSqlRow_40";

	

		row55 = null;
		
		row59 = null;
		
query_tMSSqlRow_40 = "IF EXISTS(select * from sys.databases where name='"+context.ipasDB +"')\nalter database "+context.ipasDB +" set single_user with rollback immediate;";
whetherReject_tMSSqlRow_40 = false;
globalMap.put("tMSSqlRow_40_QUERY",query_tMSSqlRow_40);
try {
		stmt_tMSSqlRow_40.execute(query_tMSSqlRow_40);
		
	} catch (java.lang.Exception e) {
		whetherReject_tMSSqlRow_40 = true;
		
				row59 = new row59Struct();
				
				row59.errorCode = ((java.sql.SQLException)e).getSQLState();
				row59.errorMessage = e.getMessage() + " - Line: " + tos_count_tMSSqlRow_40;
				
	}
	
	if(!whetherReject_tMSSqlRow_40) {
		
					row55 = new row55Struct();
					
	}
	

 


	tos_count_tMSSqlRow_40++;

/**
 * [tMSSqlRow_40 main ] stop
 */
	
	/**
	 * [tMSSqlRow_40 process_data_begin ] start
	 */

	

	
	
	currentComponent="tMSSqlRow_40";

	

 



/**
 * [tMSSqlRow_40 process_data_begin ] stop
 */
// Start of branch "row55"
if(row55 != null) { 
			row64 = null;
			row60 = null;
			row61 = null;



	
	/**
	 * [tMSSqlRow_1 main ] start
	 */

	

	
	
	currentComponent="tMSSqlRow_1";

	
					if(execStat){
						runStat.updateStatOnConnection(iterateId,1,1
						
							,"row55"
						
						);
					}
					

		row1 = null;
		
		row60 = null;
		
query_tMSSqlRow_1 = "\nIF EXISTS(select * from sys.databases where name='"+context.ipasDB +"')\nDROP DATABASE "+context.ipasDB +";";
whetherReject_tMSSqlRow_1 = false;
globalMap.put("tMSSqlRow_1_QUERY",query_tMSSqlRow_1);
try {
		stmt_tMSSqlRow_1.execute(query_tMSSqlRow_1);
		
	} catch (java.lang.Exception e) {
		whetherReject_tMSSqlRow_1 = true;
		
				row60 = new row60Struct();
				
				row60.errorCode = ((java.sql.SQLException)e).getSQLState();
				row60.errorMessage = e.getMessage() + " - Line: " + tos_count_tMSSqlRow_1;
				
	}
	
	if(!whetherReject_tMSSqlRow_1) {
		
					row1 = new row1Struct();
					
	}
	

 


	tos_count_tMSSqlRow_1++;

/**
 * [tMSSqlRow_1 main ] stop
 */
	
	/**
	 * [tMSSqlRow_1 process_data_begin ] start
	 */

	

	
	
	currentComponent="tMSSqlRow_1";

	

 



/**
 * [tMSSqlRow_1 process_data_begin ] stop
 */
// Start of branch "row1"
if(row1 != null) { 
			row64 = null;
			row61 = null;



	
	/**
	 * [tMSSqlRow_3 main ] start
	 */

	

	
	
	currentComponent="tMSSqlRow_3";

	
					if(execStat){
						runStat.updateStatOnConnection(iterateId,1,1
						
							,"row1"
						
						);
					}
					

		row4 = null;
		
		row61 = null;
		
query_tMSSqlRow_3 = "RESTORE DATABASE "+context.ipasDB +"\nFROM DISK = '" + context.dumpBaseIpasLocation +"' \nWITH MOVE '"+context.ipasDB +"' TO '"+context.sqlLocation+context.ipasDB +".mdf',\nMOVE '"+context.ipasDB +"_LOG' TO '"+context.sqlLocation+context.ipasDB +"_log.ldf', REPLACE; ";
whetherReject_tMSSqlRow_3 = false;
globalMap.put("tMSSqlRow_3_QUERY",query_tMSSqlRow_3);
try {
		stmt_tMSSqlRow_3.execute(query_tMSSqlRow_3);
		
	} catch (java.lang.Exception e) {
		whetherReject_tMSSqlRow_3 = true;
		
				row61 = new row61Struct();
				
				row61.errorCode = ((java.sql.SQLException)e).getSQLState();
				row61.errorMessage = e.getMessage() + " - Line: " + tos_count_tMSSqlRow_3;
				
	}
	
	if(!whetherReject_tMSSqlRow_3) {
		
					row4 = new row4Struct();
					
	}
	

 


	tos_count_tMSSqlRow_3++;

/**
 * [tMSSqlRow_3 main ] stop
 */
	
	/**
	 * [tMSSqlRow_3 process_data_begin ] start
	 */

	

	
	
	currentComponent="tMSSqlRow_3";

	

 



/**
 * [tMSSqlRow_3 process_data_begin ] stop
 */
// Start of branch "row4"
if(row4 != null) { 
			row64 = null;



	
	/**
	 * [tMSSqlRow_42 main ] start
	 */

	

	
	
	currentComponent="tMSSqlRow_42";

	
					if(execStat){
						runStat.updateStatOnConnection(iterateId,1,1
						
							,"row4"
						
						);
					}
					

		row64 = null;
		
query_tMSSqlRow_42 = "\nUSE "+context.intermediateDB+";\nBEGIN\n	if not exists(select * from DBO.SYSUSERS where name = '"+ context.ipasUser +"')\n    CREATE USER "+context.ipasUser+" FOR LOGIN "+context.ipasUser+";\n\n   EXEC sp_addrolemember N'db_datareader', N'"+context.ipasUser+"';\n   EXEC sp_addrolemember N'db_datawriter', N'"+context.ipasUser+"';\n\n   ALTER LOGIN "+ context.ipasUser+" WITH PASSWORD ='"+context.ipasPassword+"';\n	ALTER LOGIN "+context.ipasUser+" WITH\n     CHECK_POLICY = OFF,\n      CHECK_EXPIRATION = OFF;\nEND;\n\n\n";
whetherReject_tMSSqlRow_42 = false;
globalMap.put("tMSSqlRow_42_QUERY",query_tMSSqlRow_42);
try {
		stmt_tMSSqlRow_42.execute(query_tMSSqlRow_42);
		
	} catch (java.lang.Exception e) {
		whetherReject_tMSSqlRow_42 = true;
		
				row64 = new row64Struct();
				
				row64.errorCode = ((java.sql.SQLException)e).getSQLState();
				row64.errorMessage = e.getMessage() + " - Line: " + tos_count_tMSSqlRow_42;
				
	}
	
	if(!whetherReject_tMSSqlRow_42) {
		
	}
	

 


	tos_count_tMSSqlRow_42++;

/**
 * [tMSSqlRow_42 main ] stop
 */
	
	/**
	 * [tMSSqlRow_42 process_data_begin ] start
	 */

	

	
	
	currentComponent="tMSSqlRow_42";

	

 



/**
 * [tMSSqlRow_42 process_data_begin ] stop
 */
// Start of branch "row64"
if(row64 != null) { 



	
	/**
	 * [tLogRow_6 main ] start
	 */

	

	
	
	currentComponent="tLogRow_6";

	
					if(execStat){
						runStat.updateStatOnConnection(iterateId,1,1
						
							,"row64"
						
						);
					}
					
///////////////////////		
						



				strBuffer_tLogRow_6 = new StringBuilder();




   				
	    		if(row64.errorCode != null) { //              
                    							
       
				strBuffer_tLogRow_6.append(
				                String.valueOf(row64.errorCode)							
				);


							
	    		} //  			

    			strBuffer_tLogRow_6.append("|");
    			


   				
	    		if(row64.errorMessage != null) { //              
                    							
       
				strBuffer_tLogRow_6.append(
				                String.valueOf(row64.errorMessage)							
				);


							
	    		} //  			

				
				String[] row_tLogRow_6 = new String[2];
   				
	    		if(row64.errorCode != null) { //              
                 row_tLogRow_6[0]=    						    
				                String.valueOf(row64.errorCode)			
					          ;	
							
	    		} //			
    			   				
	    		if(row64.errorMessage != null) { //              
                 row_tLogRow_6[1]=    						    
				                String.valueOf(row64.errorMessage)			
					          ;	
							
	    		} //			
    			
				nb_line_tLogRow_6++;
                consoleOut_tLogRow_6.println(util_tLogRow_6.print(row_tLogRow_6,nb_line_tLogRow_6));
                consoleOut_tLogRow_6.flush();
//////

//////                    
                    
///////////////////////    			

 


	tos_count_tLogRow_6++;

/**
 * [tLogRow_6 main ] stop
 */
	
	/**
	 * [tLogRow_6 process_data_begin ] start
	 */

	

	
	
	currentComponent="tLogRow_6";

	

 



/**
 * [tLogRow_6 process_data_begin ] stop
 */
	
	/**
	 * [tLogRow_6 process_data_end ] start
	 */

	

	
	
	currentComponent="tLogRow_6";

	

 



/**
 * [tLogRow_6 process_data_end ] stop
 */

} // End of branch "row64"




	
	/**
	 * [tMSSqlRow_42 process_data_end ] start
	 */

	

	
	
	currentComponent="tMSSqlRow_42";

	

 



/**
 * [tMSSqlRow_42 process_data_end ] stop
 */

} // End of branch "row4"




// Start of branch "row61"
if(row61 != null) { 



	
	/**
	 * [tLogRow_3 main ] start
	 */

	

	
	
	currentComponent="tLogRow_3";

	
					if(execStat){
						runStat.updateStatOnConnection(iterateId,1,1
						
							,"row61"
						
						);
					}
					
///////////////////////		
						



				strBuffer_tLogRow_3 = new StringBuilder();




   				
	    		if(row61.errorCode != null) { //              
                    							
       
				strBuffer_tLogRow_3.append(
				                String.valueOf(row61.errorCode)							
				);


							
	    		} //  			

    			strBuffer_tLogRow_3.append("|");
    			


   				
	    		if(row61.errorMessage != null) { //              
                    							
       
				strBuffer_tLogRow_3.append(
				                String.valueOf(row61.errorMessage)							
				);


							
	    		} //  			

				
				String[] row_tLogRow_3 = new String[2];
   				
	    		if(row61.errorCode != null) { //              
                 row_tLogRow_3[0]=    						    
				                String.valueOf(row61.errorCode)			
					          ;	
							
	    		} //			
    			   				
	    		if(row61.errorMessage != null) { //              
                 row_tLogRow_3[1]=    						    
				                String.valueOf(row61.errorMessage)			
					          ;	
							
	    		} //			
    			
				nb_line_tLogRow_3++;
                consoleOut_tLogRow_3.println(util_tLogRow_3.print(row_tLogRow_3,nb_line_tLogRow_3));
                consoleOut_tLogRow_3.flush();
//////

//////                    
                    
///////////////////////    			

 


	tos_count_tLogRow_3++;

/**
 * [tLogRow_3 main ] stop
 */
	
	/**
	 * [tLogRow_3 process_data_begin ] start
	 */

	

	
	
	currentComponent="tLogRow_3";

	

 



/**
 * [tLogRow_3 process_data_begin ] stop
 */
	
	/**
	 * [tLogRow_3 process_data_end ] start
	 */

	

	
	
	currentComponent="tLogRow_3";

	

 



/**
 * [tLogRow_3 process_data_end ] stop
 */

} // End of branch "row61"




	
	/**
	 * [tMSSqlRow_3 process_data_end ] start
	 */

	

	
	
	currentComponent="tMSSqlRow_3";

	

 



/**
 * [tMSSqlRow_3 process_data_end ] stop
 */

} // End of branch "row1"




// Start of branch "row60"
if(row60 != null) { 



	
	/**
	 * [tLogRow_2 main ] start
	 */

	

	
	
	currentComponent="tLogRow_2";

	
					if(execStat){
						runStat.updateStatOnConnection(iterateId,1,1
						
							,"row60"
						
						);
					}
					
///////////////////////		
						



				strBuffer_tLogRow_2 = new StringBuilder();




   				
	    		if(row60.errorCode != null) { //              
                    							
       
				strBuffer_tLogRow_2.append(
				                String.valueOf(row60.errorCode)							
				);


							
	    		} //  			

    			strBuffer_tLogRow_2.append("|");
    			


   				
	    		if(row60.errorMessage != null) { //              
                    							
       
				strBuffer_tLogRow_2.append(
				                String.valueOf(row60.errorMessage)							
				);


							
	    		} //  			

				
				String[] row_tLogRow_2 = new String[2];
   				
	    		if(row60.errorCode != null) { //              
                 row_tLogRow_2[0]=    						    
				                String.valueOf(row60.errorCode)			
					          ;	
							
	    		} //			
    			   				
	    		if(row60.errorMessage != null) { //              
                 row_tLogRow_2[1]=    						    
				                String.valueOf(row60.errorMessage)			
					          ;	
							
	    		} //			
    			
				nb_line_tLogRow_2++;
                consoleOut_tLogRow_2.println(util_tLogRow_2.print(row_tLogRow_2,nb_line_tLogRow_2));
                consoleOut_tLogRow_2.flush();
//////

//////                    
                    
///////////////////////    			

 


	tos_count_tLogRow_2++;

/**
 * [tLogRow_2 main ] stop
 */
	
	/**
	 * [tLogRow_2 process_data_begin ] start
	 */

	

	
	
	currentComponent="tLogRow_2";

	

 



/**
 * [tLogRow_2 process_data_begin ] stop
 */
	
	/**
	 * [tLogRow_2 process_data_end ] start
	 */

	

	
	
	currentComponent="tLogRow_2";

	

 



/**
 * [tLogRow_2 process_data_end ] stop
 */

} // End of branch "row60"




	
	/**
	 * [tMSSqlRow_1 process_data_end ] start
	 */

	

	
	
	currentComponent="tMSSqlRow_1";

	

 



/**
 * [tMSSqlRow_1 process_data_end ] stop
 */

} // End of branch "row55"




// Start of branch "row59"
if(row59 != null) { 



	
	/**
	 * [tLogRow_1 main ] start
	 */

	

	
	
	currentComponent="tLogRow_1";

	
					if(execStat){
						runStat.updateStatOnConnection(iterateId,1,1
						
							,"row59"
						
						);
					}
					
///////////////////////		
						



				strBuffer_tLogRow_1 = new StringBuilder();




   				
	    		if(row59.errorCode != null) { //              
                    							
       
				strBuffer_tLogRow_1.append(
				                String.valueOf(row59.errorCode)							
				);


							
	    		} //  			

    			strBuffer_tLogRow_1.append("|");
    			


   				
	    		if(row59.errorMessage != null) { //              
                    							
       
				strBuffer_tLogRow_1.append(
				                String.valueOf(row59.errorMessage)							
				);


							
	    		} //  			

				
				String[] row_tLogRow_1 = new String[2];
   				
	    		if(row59.errorCode != null) { //              
                 row_tLogRow_1[0]=    						    
				                String.valueOf(row59.errorCode)			
					          ;	
							
	    		} //			
    			   				
	    		if(row59.errorMessage != null) { //              
                 row_tLogRow_1[1]=    						    
				                String.valueOf(row59.errorMessage)			
					          ;	
							
	    		} //			
    			
				nb_line_tLogRow_1++;
                consoleOut_tLogRow_1.println(util_tLogRow_1.print(row_tLogRow_1,nb_line_tLogRow_1));
                consoleOut_tLogRow_1.flush();
//////

//////                    
                    
///////////////////////    			

 


	tos_count_tLogRow_1++;

/**
 * [tLogRow_1 main ] stop
 */
	
	/**
	 * [tLogRow_1 process_data_begin ] start
	 */

	

	
	
	currentComponent="tLogRow_1";

	

 



/**
 * [tLogRow_1 process_data_begin ] stop
 */
	
	/**
	 * [tLogRow_1 process_data_end ] start
	 */

	

	
	
	currentComponent="tLogRow_1";

	

 



/**
 * [tLogRow_1 process_data_end ] stop
 */

} // End of branch "row59"




	
	/**
	 * [tMSSqlRow_40 process_data_end ] start
	 */

	

	
	
	currentComponent="tMSSqlRow_40";

	

 



/**
 * [tMSSqlRow_40 process_data_end ] stop
 */
	
	/**
	 * [tMSSqlRow_40 end ] start
	 */

	

	
	
	currentComponent="tMSSqlRow_40";

	

	
        stmt_tMSSqlRow_40.close();
        resourceMap.remove("stmt_tMSSqlRow_40");
    resourceMap.put("statementClosed_tMSSqlRow_40", true);
    resourceMap.put("finish_tMSSqlRow_40", true);
 

ok_Hash.put("tMSSqlRow_40", true);
end_Hash.put("tMSSqlRow_40", System.currentTimeMillis());




/**
 * [tMSSqlRow_40 end ] stop
 */

	
	/**
	 * [tMSSqlRow_1 end ] start
	 */

	

	
	
	currentComponent="tMSSqlRow_1";

	

	
        stmt_tMSSqlRow_1.close();
        resourceMap.remove("stmt_tMSSqlRow_1");
    resourceMap.put("statementClosed_tMSSqlRow_1", true);
    resourceMap.put("finish_tMSSqlRow_1", true);
				if(execStat){
			  		runStat.updateStat(resourceMap,iterateId,2,0,"row55");
			  	}
			  	
 

ok_Hash.put("tMSSqlRow_1", true);
end_Hash.put("tMSSqlRow_1", System.currentTimeMillis());




/**
 * [tMSSqlRow_1 end ] stop
 */

	
	/**
	 * [tMSSqlRow_3 end ] start
	 */

	

	
	
	currentComponent="tMSSqlRow_3";

	

	
        stmt_tMSSqlRow_3.close();
        resourceMap.remove("stmt_tMSSqlRow_3");
    resourceMap.put("statementClosed_tMSSqlRow_3", true);
    resourceMap.put("finish_tMSSqlRow_3", true);
				if(execStat){
			  		runStat.updateStat(resourceMap,iterateId,2,0,"row1");
			  	}
			  	
 

ok_Hash.put("tMSSqlRow_3", true);
end_Hash.put("tMSSqlRow_3", System.currentTimeMillis());




/**
 * [tMSSqlRow_3 end ] stop
 */

	
	/**
	 * [tMSSqlRow_42 end ] start
	 */

	

	
	
	currentComponent="tMSSqlRow_42";

	

	
        stmt_tMSSqlRow_42.close();
        resourceMap.remove("stmt_tMSSqlRow_42");
    resourceMap.put("statementClosed_tMSSqlRow_42", true);
    resourceMap.put("finish_tMSSqlRow_42", true);
				if(execStat){
			  		runStat.updateStat(resourceMap,iterateId,2,0,"row4");
			  	}
			  	
 

ok_Hash.put("tMSSqlRow_42", true);
end_Hash.put("tMSSqlRow_42", System.currentTimeMillis());




/**
 * [tMSSqlRow_42 end ] stop
 */

	
	/**
	 * [tLogRow_6 end ] start
	 */

	

	
	
	currentComponent="tLogRow_6";

	


//////
//////
globalMap.put("tLogRow_6_NB_LINE",nb_line_tLogRow_6);

///////////////////////    			

				if(execStat){
			  		runStat.updateStat(resourceMap,iterateId,2,0,"row64");
			  	}
			  	
 

ok_Hash.put("tLogRow_6", true);
end_Hash.put("tLogRow_6", System.currentTimeMillis());




/**
 * [tLogRow_6 end ] stop
 */







	
	/**
	 * [tLogRow_3 end ] start
	 */

	

	
	
	currentComponent="tLogRow_3";

	


//////
//////
globalMap.put("tLogRow_3_NB_LINE",nb_line_tLogRow_3);

///////////////////////    			

				if(execStat){
			  		runStat.updateStat(resourceMap,iterateId,2,0,"row61");
			  	}
			  	
 

ok_Hash.put("tLogRow_3", true);
end_Hash.put("tLogRow_3", System.currentTimeMillis());




/**
 * [tLogRow_3 end ] stop
 */







	
	/**
	 * [tLogRow_2 end ] start
	 */

	

	
	
	currentComponent="tLogRow_2";

	


//////
//////
globalMap.put("tLogRow_2_NB_LINE",nb_line_tLogRow_2);

///////////////////////    			

				if(execStat){
			  		runStat.updateStat(resourceMap,iterateId,2,0,"row60");
			  	}
			  	
 

ok_Hash.put("tLogRow_2", true);
end_Hash.put("tLogRow_2", System.currentTimeMillis());




/**
 * [tLogRow_2 end ] stop
 */







	
	/**
	 * [tLogRow_1 end ] start
	 */

	

	
	
	currentComponent="tLogRow_1";

	


//////
//////
globalMap.put("tLogRow_1_NB_LINE",nb_line_tLogRow_1);

///////////////////////    			

				if(execStat){
			  		runStat.updateStat(resourceMap,iterateId,2,0,"row59");
			  	}
			  	
 

ok_Hash.put("tLogRow_1", true);
end_Hash.put("tLogRow_1", System.currentTimeMillis());




/**
 * [tLogRow_1 end ] stop
 */



				}//end the resume

				
				    			if(resumeEntryMethodName == null || globalResumeTicket){
				    				resumeUtil.addLog("CHECKPOINT", "CONNECTION:SUBJOB_OK:tMSSqlRow_40:OnSubjobOk", "", Thread.currentThread().getId() + "", "", "", "", "", "");
								}	    				    			
					    	
								if(execStat){    	
									runStat.updateStatOnConnection("OnSubjobOk31", 0, "ok");
								} 
							
							tMSSqlConnection_2Process(globalMap); 
						



	
			}catch(java.lang.Exception e){	
				
				TalendException te = new TalendException(e, currentComponent, globalMap);
				
				throw te;
			}catch(java.lang.Error error){	
				
					runStat.stopThreadStat();
				
				throw error;
			}finally{
				
				try{
					
	
	/**
	 * [tMSSqlRow_40 finally ] start
	 */

	

	
	
	currentComponent="tMSSqlRow_40";

	

    if (resourceMap.get("statementClosed_tMSSqlRow_40") == null) {
            java.sql.Statement stmtToClose_tMSSqlRow_40 = null;
            if ((stmtToClose_tMSSqlRow_40 = (java.sql.Statement) resourceMap.remove("stmt_tMSSqlRow_40")) != null) {
                stmtToClose_tMSSqlRow_40.close();
            }
    }
 



/**
 * [tMSSqlRow_40 finally ] stop
 */

	
	/**
	 * [tMSSqlRow_1 finally ] start
	 */

	

	
	
	currentComponent="tMSSqlRow_1";

	

    if (resourceMap.get("statementClosed_tMSSqlRow_1") == null) {
            java.sql.Statement stmtToClose_tMSSqlRow_1 = null;
            if ((stmtToClose_tMSSqlRow_1 = (java.sql.Statement) resourceMap.remove("stmt_tMSSqlRow_1")) != null) {
                stmtToClose_tMSSqlRow_1.close();
            }
    }
 



/**
 * [tMSSqlRow_1 finally ] stop
 */

	
	/**
	 * [tMSSqlRow_3 finally ] start
	 */

	

	
	
	currentComponent="tMSSqlRow_3";

	

    if (resourceMap.get("statementClosed_tMSSqlRow_3") == null) {
            java.sql.Statement stmtToClose_tMSSqlRow_3 = null;
            if ((stmtToClose_tMSSqlRow_3 = (java.sql.Statement) resourceMap.remove("stmt_tMSSqlRow_3")) != null) {
                stmtToClose_tMSSqlRow_3.close();
            }
    }
 



/**
 * [tMSSqlRow_3 finally ] stop
 */

	
	/**
	 * [tMSSqlRow_42 finally ] start
	 */

	

	
	
	currentComponent="tMSSqlRow_42";

	

    if (resourceMap.get("statementClosed_tMSSqlRow_42") == null) {
            java.sql.Statement stmtToClose_tMSSqlRow_42 = null;
            if ((stmtToClose_tMSSqlRow_42 = (java.sql.Statement) resourceMap.remove("stmt_tMSSqlRow_42")) != null) {
                stmtToClose_tMSSqlRow_42.close();
            }
    }
 



/**
 * [tMSSqlRow_42 finally ] stop
 */

	
	/**
	 * [tLogRow_6 finally ] start
	 */

	

	
	
	currentComponent="tLogRow_6";

	

 



/**
 * [tLogRow_6 finally ] stop
 */







	
	/**
	 * [tLogRow_3 finally ] start
	 */

	

	
	
	currentComponent="tLogRow_3";

	

 



/**
 * [tLogRow_3 finally ] stop
 */







	
	/**
	 * [tLogRow_2 finally ] start
	 */

	

	
	
	currentComponent="tLogRow_2";

	

 



/**
 * [tLogRow_2 finally ] stop
 */







	
	/**
	 * [tLogRow_1 finally ] start
	 */

	

	
	
	currentComponent="tLogRow_1";

	

 



/**
 * [tLogRow_1 finally ] stop
 */



				}catch(java.lang.Exception e){	
					//ignore
				}catch(java.lang.Error error){
					//ignore
				}
				resourceMap = null;
			}
		

		globalMap.put("tMSSqlRow_40_SUBPROCESS_STATE", 1);
	}
	

public void tMSSqlConnection_2Process(final java.util.Map<String, Object> globalMap) throws TalendException {
	globalMap.put("tMSSqlConnection_2_SUBPROCESS_STATE", 0);

 final boolean execStat = this.execStat;
	
		String iterateId = "";
	
	
	String currentComponent = "";
	java.util.Map<String, Object> resourceMap = new java.util.HashMap<String, Object>();

	try {
			// TDI-39566 avoid throwing an useless Exception
			boolean resumeIt = true;
			if (globalResumeTicket == false && resumeEntryMethodName != null) {
				String currentMethodName = new java.lang.Exception().getStackTrace()[0].getMethodName();
				resumeIt = resumeEntryMethodName.equals(currentMethodName);
			}
			if (resumeIt || globalResumeTicket) { //start the resume
				globalResumeTicket = true;



		


	
	/**
	 * [tMSSqlConnection_2 begin ] start
	 */

	

	
		
		ok_Hash.put("tMSSqlConnection_2", false);
		start_Hash.put("tMSSqlConnection_2", System.currentTimeMillis());
		
				tStatCatcher_1.addMessage("begin","tMSSqlConnection_2");
				tStatCatcher_1Process(globalMap);
			
	
	currentComponent="tMSSqlConnection_2";

	
		int tos_count_tMSSqlConnection_2 = 0;
		
	

	
			String url_tMSSqlConnection_2 = "jdbc:jtds:sqlserver://" + context.intermediateHost ;
		String port_tMSSqlConnection_2 = context.intermediatePort;
		String dbname_tMSSqlConnection_2 = context.intermediateDB ;
    	if (!"".equals(port_tMSSqlConnection_2)) {
    		url_tMSSqlConnection_2 += ":" + context.intermediatePort;
    	}
    	if (!"".equals(dbname_tMSSqlConnection_2)) {
    		
				url_tMSSqlConnection_2 += "//" + context.intermediateDB; 
    	}

		url_tMSSqlConnection_2 += ";appName=" + projectName + ";" +  "allowMultiQueries=true";  
	String dbUser_tMSSqlConnection_2 = context.intermediateUser;
	
	
		
	final String decryptedPassword_tMSSqlConnection_2 = context.intermediatePassword; 
		String dbPwd_tMSSqlConnection_2 = decryptedPassword_tMSSqlConnection_2;
	
	
	java.sql.Connection conn_tMSSqlConnection_2 = null;
	
		
			String driverClass_tMSSqlConnection_2 = "net.sourceforge.jtds.jdbc.Driver";
			java.lang.Class jdbcclazz_tMSSqlConnection_2 = java.lang.Class.forName(driverClass_tMSSqlConnection_2);
			globalMap.put("driverClass_tMSSqlConnection_2", driverClass_tMSSqlConnection_2);
		
			conn_tMSSqlConnection_2 = java.sql.DriverManager.getConnection(url_tMSSqlConnection_2,dbUser_tMSSqlConnection_2,dbPwd_tMSSqlConnection_2);

		globalMap.put("conn_tMSSqlConnection_2", conn_tMSSqlConnection_2);
	if (null != conn_tMSSqlConnection_2) {
		
			conn_tMSSqlConnection_2.setAutoCommit(true);
	}

	globalMap.put("dbschema_tMSSqlConnection_2", "");

	globalMap.put("db_tMSSqlConnection_2",  context.intermediateDB);
	
	globalMap.put("shareIdentitySetting_tMSSqlConnection_2",  false);

	globalMap.put("driver_tMSSqlConnection_2", "JTDS");

 



/**
 * [tMSSqlConnection_2 begin ] stop
 */
	
	/**
	 * [tMSSqlConnection_2 main ] start
	 */

	

	
	
	currentComponent="tMSSqlConnection_2";

	

 


	tos_count_tMSSqlConnection_2++;

/**
 * [tMSSqlConnection_2 main ] stop
 */
	
	/**
	 * [tMSSqlConnection_2 process_data_begin ] start
	 */

	

	
	
	currentComponent="tMSSqlConnection_2";

	

 



/**
 * [tMSSqlConnection_2 process_data_begin ] stop
 */
	
	/**
	 * [tMSSqlConnection_2 process_data_end ] start
	 */

	

	
	
	currentComponent="tMSSqlConnection_2";

	

 



/**
 * [tMSSqlConnection_2 process_data_end ] stop
 */
	
	/**
	 * [tMSSqlConnection_2 end ] start
	 */

	

	
	
	currentComponent="tMSSqlConnection_2";

	

 

ok_Hash.put("tMSSqlConnection_2", true);
end_Hash.put("tMSSqlConnection_2", System.currentTimeMillis());

tStatCatcher_1.addMessage("end","tMSSqlConnection_2", end_Hash.get("tMSSqlConnection_2")-start_Hash.get("tMSSqlConnection_2"));
tStatCatcher_1Process(globalMap);



/**
 * [tMSSqlConnection_2 end ] stop
 */
				}//end the resume

				
				    			if(resumeEntryMethodName == null || globalResumeTicket){
				    				resumeUtil.addLog("CHECKPOINT", "CONNECTION:SUBJOB_OK:tMSSqlConnection_2:OnSubjobOk", "", Thread.currentThread().getId() + "", "", "", "", "", "");
								}	    				    			
					    	
								if(execStat){    	
									runStat.updateStatOnConnection("OnSubjobOk2", 0, "ok");
								} 
							
							tMSSqlRow_4Process(globalMap); 
						



	
			}catch(java.lang.Exception e){	
				
				TalendException te = new TalendException(e, currentComponent, globalMap);
				
				throw te;
			}catch(java.lang.Error error){	
				
					runStat.stopThreadStat();
				
				throw error;
			}finally{
				
				try{
					
	
	/**
	 * [tMSSqlConnection_2 finally ] start
	 */

	

	
	
	currentComponent="tMSSqlConnection_2";

	

 



/**
 * [tMSSqlConnection_2 finally ] stop
 */
				}catch(java.lang.Exception e){	
					//ignore
				}catch(java.lang.Error error){
					//ignore
				}
				resourceMap = null;
			}
		

		globalMap.put("tMSSqlConnection_2_SUBPROCESS_STATE", 1);
	}
	


public static class row63Struct implements routines.system.IPersistableRow<row63Struct> {
    final static byte[] commonByteArrayLock_WIPO_PROJECTS_F_IPAS_ENV_CRE = new byte[0];
    static byte[] commonByteArray_WIPO_PROJECTS_F_IPAS_ENV_CRE = new byte[0];

	
			    public String errorCode;

				public String getErrorCode () {
					return this.errorCode;
				}
				
			    public String errorMessage;

				public String getErrorMessage () {
					return this.errorMessage;
				}
				



	private String readString(ObjectInputStream dis) throws IOException{
		String strReturn = null;
		int length = 0;
        length = dis.readInt();
		if (length == -1) {
			strReturn = null;
		} else {
			if(length > commonByteArray_WIPO_PROJECTS_F_IPAS_ENV_CRE.length) {
				if(length < 1024 && commonByteArray_WIPO_PROJECTS_F_IPAS_ENV_CRE.length == 0) {
   					commonByteArray_WIPO_PROJECTS_F_IPAS_ENV_CRE = new byte[1024];
				} else {
   					commonByteArray_WIPO_PROJECTS_F_IPAS_ENV_CRE = new byte[2 * length];
   				}
			}
			dis.readFully(commonByteArray_WIPO_PROJECTS_F_IPAS_ENV_CRE, 0, length);
			strReturn = new String(commonByteArray_WIPO_PROJECTS_F_IPAS_ENV_CRE, 0, length, utf8Charset);
		}
		return strReturn;
	}

    private void writeString(String str, ObjectOutputStream dos) throws IOException{
		if(str == null) {
            dos.writeInt(-1);
		} else {
            byte[] byteArray = str.getBytes(utf8Charset);
	    	dos.writeInt(byteArray.length);
			dos.write(byteArray);
    	}
    }

    public void readData(ObjectInputStream dis) {

		synchronized(commonByteArrayLock_WIPO_PROJECTS_F_IPAS_ENV_CRE) {

        	try {

        		int length = 0;
		
					this.errorCode = readString(dis);
					
					this.errorMessage = readString(dis);
					
        	} catch (IOException e) {
	            throw new RuntimeException(e);

		

        }

		

      }


    }

    public void writeData(ObjectOutputStream dos) {
        try {

		
					// String
				
						writeString(this.errorCode,dos);
					
					// String
				
						writeString(this.errorMessage,dos);
					
        	} catch (IOException e) {
	            throw new RuntimeException(e);
        }


    }


    public String toString() {

		StringBuilder sb = new StringBuilder();
		sb.append(super.toString());
		sb.append("[");
		sb.append("errorCode="+errorCode);
		sb.append(",errorMessage="+errorMessage);
	    sb.append("]");

	    return sb.toString();
    }

    /**
     * Compare keys
     */
    public int compareTo(row63Struct other) {

		int returnValue = -1;
		
	    return returnValue;
    }


    private int checkNullsAndCompare(Object object1, Object object2) {
        int returnValue = 0;
		if (object1 instanceof Comparable && object2 instanceof Comparable) {
            returnValue = ((Comparable) object1).compareTo(object2);
        } else if (object1 != null && object2 != null) {
            returnValue = compareStrings(object1.toString(), object2.toString());
        } else if (object1 == null && object2 != null) {
            returnValue = 1;
        } else if (object1 != null && object2 == null) {
            returnValue = -1;
        } else {
            returnValue = 0;
        }

        return returnValue;
    }

    private int compareStrings(String string1, String string2) {
        return string1.compareTo(string2);
    }


}

public static class row6Struct implements routines.system.IPersistableRow<row6Struct> {
    final static byte[] commonByteArrayLock_WIPO_PROJECTS_F_IPAS_ENV_CRE = new byte[0];
    static byte[] commonByteArray_WIPO_PROJECTS_F_IPAS_ENV_CRE = new byte[0];

	



    public void readData(ObjectInputStream dis) {

		synchronized(commonByteArrayLock_WIPO_PROJECTS_F_IPAS_ENV_CRE) {

        	try {

        		int length = 0;
		

		

        }

		
			finally {}
		

      }


    }

    public void writeData(ObjectOutputStream dos) {
        try {

		
        }

			finally {}
		

    }


    public String toString() {

		StringBuilder sb = new StringBuilder();
		sb.append(super.toString());
		sb.append("[");
	    sb.append("]");

	    return sb.toString();
    }

    /**
     * Compare keys
     */
    public int compareTo(row6Struct other) {

		int returnValue = -1;
		
	    return returnValue;
    }


    private int checkNullsAndCompare(Object object1, Object object2) {
        int returnValue = 0;
		if (object1 instanceof Comparable && object2 instanceof Comparable) {
            returnValue = ((Comparable) object1).compareTo(object2);
        } else if (object1 != null && object2 != null) {
            returnValue = compareStrings(object1.toString(), object2.toString());
        } else if (object1 == null && object2 != null) {
            returnValue = 1;
        } else if (object1 != null && object2 == null) {
            returnValue = -1;
        } else {
            returnValue = 0;
        }

        return returnValue;
    }

    private int compareStrings(String string1, String string2) {
        return string1.compareTo(string2);
    }


}

public static class row62Struct implements routines.system.IPersistableRow<row62Struct> {
    final static byte[] commonByteArrayLock_WIPO_PROJECTS_F_IPAS_ENV_CRE = new byte[0];
    static byte[] commonByteArray_WIPO_PROJECTS_F_IPAS_ENV_CRE = new byte[0];

	
			    public String errorCode;

				public String getErrorCode () {
					return this.errorCode;
				}
				
			    public String errorMessage;

				public String getErrorMessage () {
					return this.errorMessage;
				}
				



	private String readString(ObjectInputStream dis) throws IOException{
		String strReturn = null;
		int length = 0;
        length = dis.readInt();
		if (length == -1) {
			strReturn = null;
		} else {
			if(length > commonByteArray_WIPO_PROJECTS_F_IPAS_ENV_CRE.length) {
				if(length < 1024 && commonByteArray_WIPO_PROJECTS_F_IPAS_ENV_CRE.length == 0) {
   					commonByteArray_WIPO_PROJECTS_F_IPAS_ENV_CRE = new byte[1024];
				} else {
   					commonByteArray_WIPO_PROJECTS_F_IPAS_ENV_CRE = new byte[2 * length];
   				}
			}
			dis.readFully(commonByteArray_WIPO_PROJECTS_F_IPAS_ENV_CRE, 0, length);
			strReturn = new String(commonByteArray_WIPO_PROJECTS_F_IPAS_ENV_CRE, 0, length, utf8Charset);
		}
		return strReturn;
	}

    private void writeString(String str, ObjectOutputStream dos) throws IOException{
		if(str == null) {
            dos.writeInt(-1);
		} else {
            byte[] byteArray = str.getBytes(utf8Charset);
	    	dos.writeInt(byteArray.length);
			dos.write(byteArray);
    	}
    }

    public void readData(ObjectInputStream dis) {

		synchronized(commonByteArrayLock_WIPO_PROJECTS_F_IPAS_ENV_CRE) {

        	try {

        		int length = 0;
		
					this.errorCode = readString(dis);
					
					this.errorMessage = readString(dis);
					
        	} catch (IOException e) {
	            throw new RuntimeException(e);

		

        }

		

      }


    }

    public void writeData(ObjectOutputStream dos) {
        try {

		
					// String
				
						writeString(this.errorCode,dos);
					
					// String
				
						writeString(this.errorMessage,dos);
					
        	} catch (IOException e) {
	            throw new RuntimeException(e);
        }


    }


    public String toString() {

		StringBuilder sb = new StringBuilder();
		sb.append(super.toString());
		sb.append("[");
		sb.append("errorCode="+errorCode);
		sb.append(",errorMessage="+errorMessage);
	    sb.append("]");

	    return sb.toString();
    }

    /**
     * Compare keys
     */
    public int compareTo(row62Struct other) {

		int returnValue = -1;
		
	    return returnValue;
    }


    private int checkNullsAndCompare(Object object1, Object object2) {
        int returnValue = 0;
		if (object1 instanceof Comparable && object2 instanceof Comparable) {
            returnValue = ((Comparable) object1).compareTo(object2);
        } else if (object1 != null && object2 != null) {
            returnValue = compareStrings(object1.toString(), object2.toString());
        } else if (object1 == null && object2 != null) {
            returnValue = 1;
        } else if (object1 != null && object2 == null) {
            returnValue = -1;
        } else {
            returnValue = 0;
        }

        return returnValue;
    }

    private int compareStrings(String string1, String string2) {
        return string1.compareTo(string2);
    }


}
public void tMSSqlRow_4Process(final java.util.Map<String, Object> globalMap) throws TalendException {
	globalMap.put("tMSSqlRow_4_SUBPROCESS_STATE", 0);

 final boolean execStat = this.execStat;
	
		String iterateId = "";
	
	
	String currentComponent = "";
	java.util.Map<String, Object> resourceMap = new java.util.HashMap<String, Object>();

	try {
			// TDI-39566 avoid throwing an useless Exception
			boolean resumeIt = true;
			if (globalResumeTicket == false && resumeEntryMethodName != null) {
				String currentMethodName = new java.lang.Exception().getStackTrace()[0].getMethodName();
				resumeIt = resumeEntryMethodName.equals(currentMethodName);
			}
			if (resumeIt || globalResumeTicket) { //start the resume
				globalResumeTicket = true;



		row6Struct row6 = new row6Struct();
row63Struct row63 = new row63Struct();
row62Struct row62 = new row62Struct();





	
	/**
	 * [tLogRow_5 begin ] start
	 */

	

	
		
		ok_Hash.put("tLogRow_5", false);
		start_Hash.put("tLogRow_5", System.currentTimeMillis());
		
	
	currentComponent="tLogRow_5";

	
					if(execStat) {
						runStat.updateStatOnConnection(resourceMap,iterateId,0,0,"row63");
					}
				
		int tos_count_tLogRow_5 = 0;
		

	///////////////////////
		


	class Util_tLogRow_5 {
	
		String[] des_top = { ".", "-" };

        String[] des_data = { "-", "+" };

        String[] des_frame = { "|" }; 
        
        public void printLine(StringBuilder sb, int titleWidth, int dataWidth){
        
        	sb.append("+");
			for(int i=0; i<titleWidth+2; i++)
				sb.append("-");
			sb.append("+");
			for(int i=0; i<dataWidth+2; i++)
				sb.append("-");
        	sb.append("+" + "\n");
        }      

		public String print(String[] row, int nbLine){
			
			StringBuilder sb = new StringBuilder();
			
			    String title = "#" + nbLine + ". " + "tLogRow_5";
			    
		
			//step 1: get the max length of all the row[] member;
			int dataWidth = 5;		//the length of the string "value"	
			for(int i=0;i<row.length;i++) {
				if(row[i] == null && 4 > dataWidth) {
					dataWidth = 4;
				}
				else if(row[i] != null && row[i].length()>dataWidth) 
					dataWidth = row[i].length();
			}			
						
			int titleWidth = 12;
			
			int totalWidth = dataWidth + titleWidth + 5;
			
			//step 2: print the header with line number
			sb.append(".");
			for(int i=0 ; i<totalWidth ; i++)
				sb.append("-");			
			sb.append("." + "\n" + "|");
			
			int emptyCenterWidth = (totalWidth-title.length())/2;
			for(int i=0 ; i<emptyCenterWidth; i++)
				sb.append(" ");	
			sb.append(title);
			for(int i=0 ; i<totalWidth - emptyCenterWidth - title.length() ; i++)
				sb.append(" ");	
			sb.append("|" + "\n");
			
			//step 3: print "key" and "value"			
			printLine(sb,titleWidth,dataWidth);
			
			sb.append("|" + " key");
			for(int i=0; i<titleWidth-2; i++)
				sb.append(" ");
        	sb.append("|" + " value");
			for(int i=0; i<dataWidth-4; i++)
				sb.append(" ");
			sb.append("|" + "\n");
			
			printLine(sb,titleWidth,dataWidth);
			
			//step 4: print dataset
			
			//for(int i=0; i<row.length; i++){
				sb.append("| " + "errorCode");
				for(int i=0; i<titleWidth -"errorCode".length()+ 1 ;i++)
					sb.append(" ");
				sb.append("| " + row[0]);
				for(int i=0; row[0] == null && i<dataWidth - 3 || row[0] != null && i<dataWidth -row[0].length()+ 1 ;i++)
					sb.append(" ");
				sb.append("|" + "\n");
			
			//}

			
			//for(int i=0; i<row.length; i++){
				sb.append("| " + "errorMessage");
				for(int i=0; i<titleWidth -"errorMessage".length()+ 1 ;i++)
					sb.append(" ");
				sb.append("| " + row[1]);
				for(int i=0; row[1] == null && i<dataWidth - 3 || row[1] != null && i<dataWidth -row[1].length()+ 1 ;i++)
					sb.append(" ");
				sb.append("|" + "\n");
			
			//}

			
			//step 5: print a line gap
			printLine(sb,titleWidth,dataWidth);
			return sb.toString();

		}


	}

	Util_tLogRow_5 util_tLogRow_5 = new Util_tLogRow_5();




	java.io.PrintStream consoleOut_tLogRow_5 = null;
	if (globalMap.get("tLogRow_CONSOLE")!=null){
        consoleOut_tLogRow_5 = (java.io.PrintStream) globalMap.get("tLogRow_CONSOLE");
    }else{
        consoleOut_tLogRow_5 = new java.io.PrintStream(new java.io.BufferedOutputStream(System.out));
        globalMap.put("tLogRow_CONSOLE",consoleOut_tLogRow_5);
    }

 		StringBuilder strBuffer_tLogRow_5 = null;
		int nb_line_tLogRow_5 = 0;
///////////////////////    			



 



/**
 * [tLogRow_5 begin ] stop
 */



	
	/**
	 * [tMSSqlRow_5 begin ] start
	 */

	

	
		
		ok_Hash.put("tMSSqlRow_5", false);
		start_Hash.put("tMSSqlRow_5", System.currentTimeMillis());
		
	
	currentComponent="tMSSqlRow_5";

	
					if(execStat) {
						runStat.updateStatOnConnection(resourceMap,iterateId,0,0,"row6");
					}
				
		int tos_count_tMSSqlRow_5 = 0;
		

	java.sql.Connection conn_tMSSqlRow_5 = null;
	String query_tMSSqlRow_5 = "";
	boolean whetherReject_tMSSqlRow_5 = false;
				conn_tMSSqlRow_5 = (java.sql.Connection)globalMap.get("conn_tMSSqlConnection_1");
			
    resourceMap.put("conn_tMSSqlRow_5", conn_tMSSqlRow_5);
        java.sql.Statement stmt_tMSSqlRow_5 = conn_tMSSqlRow_5.createStatement();
        resourceMap.put("stmt_tMSSqlRow_5", stmt_tMSSqlRow_5);

 



/**
 * [tMSSqlRow_5 begin ] stop
 */




	
	/**
	 * [tLogRow_4 begin ] start
	 */

	

	
		
		ok_Hash.put("tLogRow_4", false);
		start_Hash.put("tLogRow_4", System.currentTimeMillis());
		
	
	currentComponent="tLogRow_4";

	
					if(execStat) {
						runStat.updateStatOnConnection(resourceMap,iterateId,0,0,"row62");
					}
				
		int tos_count_tLogRow_4 = 0;
		

	///////////////////////
		


	class Util_tLogRow_4 {
	
		String[] des_top = { ".", "-" };

        String[] des_data = { "-", "+" };

        String[] des_frame = { "|" }; 
        
        public void printLine(StringBuilder sb, int titleWidth, int dataWidth){
        
        	sb.append("+");
			for(int i=0; i<titleWidth+2; i++)
				sb.append("-");
			sb.append("+");
			for(int i=0; i<dataWidth+2; i++)
				sb.append("-");
        	sb.append("+" + "\n");
        }      

		public String print(String[] row, int nbLine){
			
			StringBuilder sb = new StringBuilder();
			
			    String title = "#" + nbLine + ". " + "tLogRow_4";
			    
		
			//step 1: get the max length of all the row[] member;
			int dataWidth = 5;		//the length of the string "value"	
			for(int i=0;i<row.length;i++) {
				if(row[i] == null && 4 > dataWidth) {
					dataWidth = 4;
				}
				else if(row[i] != null && row[i].length()>dataWidth) 
					dataWidth = row[i].length();
			}			
						
			int titleWidth = 12;
			
			int totalWidth = dataWidth + titleWidth + 5;
			
			//step 2: print the header with line number
			sb.append(".");
			for(int i=0 ; i<totalWidth ; i++)
				sb.append("-");			
			sb.append("." + "\n" + "|");
			
			int emptyCenterWidth = (totalWidth-title.length())/2;
			for(int i=0 ; i<emptyCenterWidth; i++)
				sb.append(" ");	
			sb.append(title);
			for(int i=0 ; i<totalWidth - emptyCenterWidth - title.length() ; i++)
				sb.append(" ");	
			sb.append("|" + "\n");
			
			//step 3: print "key" and "value"			
			printLine(sb,titleWidth,dataWidth);
			
			sb.append("|" + " key");
			for(int i=0; i<titleWidth-2; i++)
				sb.append(" ");
        	sb.append("|" + " value");
			for(int i=0; i<dataWidth-4; i++)
				sb.append(" ");
			sb.append("|" + "\n");
			
			printLine(sb,titleWidth,dataWidth);
			
			//step 4: print dataset
			
			//for(int i=0; i<row.length; i++){
				sb.append("| " + "errorCode");
				for(int i=0; i<titleWidth -"errorCode".length()+ 1 ;i++)
					sb.append(" ");
				sb.append("| " + row[0]);
				for(int i=0; row[0] == null && i<dataWidth - 3 || row[0] != null && i<dataWidth -row[0].length()+ 1 ;i++)
					sb.append(" ");
				sb.append("|" + "\n");
			
			//}

			
			//for(int i=0; i<row.length; i++){
				sb.append("| " + "errorMessage");
				for(int i=0; i<titleWidth -"errorMessage".length()+ 1 ;i++)
					sb.append(" ");
				sb.append("| " + row[1]);
				for(int i=0; row[1] == null && i<dataWidth - 3 || row[1] != null && i<dataWidth -row[1].length()+ 1 ;i++)
					sb.append(" ");
				sb.append("|" + "\n");
			
			//}

			
			//step 5: print a line gap
			printLine(sb,titleWidth,dataWidth);
			return sb.toString();

		}


	}

	Util_tLogRow_4 util_tLogRow_4 = new Util_tLogRow_4();




	java.io.PrintStream consoleOut_tLogRow_4 = null;
	if (globalMap.get("tLogRow_CONSOLE")!=null){
        consoleOut_tLogRow_4 = (java.io.PrintStream) globalMap.get("tLogRow_CONSOLE");
    }else{
        consoleOut_tLogRow_4 = new java.io.PrintStream(new java.io.BufferedOutputStream(System.out));
        globalMap.put("tLogRow_CONSOLE",consoleOut_tLogRow_4);
    }

 		StringBuilder strBuffer_tLogRow_4 = null;
		int nb_line_tLogRow_4 = 0;
///////////////////////    			



 



/**
 * [tLogRow_4 begin ] stop
 */



	
	/**
	 * [tMSSqlRow_4 begin ] start
	 */

	

	
		
		ok_Hash.put("tMSSqlRow_4", false);
		start_Hash.put("tMSSqlRow_4", System.currentTimeMillis());
		
	
	currentComponent="tMSSqlRow_4";

	
		int tos_count_tMSSqlRow_4 = 0;
		

	java.sql.Connection conn_tMSSqlRow_4 = null;
	String query_tMSSqlRow_4 = "";
	boolean whetherReject_tMSSqlRow_4 = false;
				conn_tMSSqlRow_4 = (java.sql.Connection)globalMap.get("conn_tMSSqlConnection_1");
			
    resourceMap.put("conn_tMSSqlRow_4", conn_tMSSqlRow_4);
        java.sql.Statement stmt_tMSSqlRow_4 = conn_tMSSqlRow_4.createStatement();
        resourceMap.put("stmt_tMSSqlRow_4", stmt_tMSSqlRow_4);

 



/**
 * [tMSSqlRow_4 begin ] stop
 */
	
	/**
	 * [tMSSqlRow_4 main ] start
	 */

	

	
	
	currentComponent="tMSSqlRow_4";

	

		row6 = null;
		
		row62 = null;
		
query_tMSSqlRow_4 = "\nUSE "+context.ipasDB+";\nBEGIN\n	 EXEC sp_change_users_login 'Auto_fix','REPOSITORY',null,'B894806';\nEND\n";
whetherReject_tMSSqlRow_4 = false;
globalMap.put("tMSSqlRow_4_QUERY",query_tMSSqlRow_4);
try {
		stmt_tMSSqlRow_4.execute(query_tMSSqlRow_4);
		
	} catch (java.lang.Exception e) {
		whetherReject_tMSSqlRow_4 = true;
		
				row62 = new row62Struct();
				
				row62.errorCode = ((java.sql.SQLException)e).getSQLState();
				row62.errorMessage = e.getMessage() + " - Line: " + tos_count_tMSSqlRow_4;
				
	}
	
	if(!whetherReject_tMSSqlRow_4) {
		
					row6 = new row6Struct();
					
	}
	

 


	tos_count_tMSSqlRow_4++;

/**
 * [tMSSqlRow_4 main ] stop
 */
	
	/**
	 * [tMSSqlRow_4 process_data_begin ] start
	 */

	

	
	
	currentComponent="tMSSqlRow_4";

	

 



/**
 * [tMSSqlRow_4 process_data_begin ] stop
 */
// Start of branch "row6"
if(row6 != null) { 
			row63 = null;



	
	/**
	 * [tMSSqlRow_5 main ] start
	 */

	

	
	
	currentComponent="tMSSqlRow_5";

	
					if(execStat){
						runStat.updateStatOnConnection(iterateId,1,1
						
							,"row6"
						
						);
					}
					

		row63 = null;
		
query_tMSSqlRow_5 = "\nUSE "+context.ipasDB+";\nBEGIN\n	 EXEC sp_change_users_login 'Auto_fix','"+context.ipasUser+"',null,'"
+context.ipasPassword+"';\nEND;";
whetherReject_tMSSqlRow_5 = false;
globalMap.put("tMSSqlRow_5_QUERY",query_tMSSqlRow_5);
try {
		stmt_tMSSqlRow_5.execute(query_tMSSqlRow_5);
		
	} catch (java.lang.Exception e) {
		whetherReject_tMSSqlRow_5 = true;
		
				row63 = new row63Struct();
				
				row63.errorCode = ((java.sql.SQLException)e).getSQLState();
				row63.errorMessage = e.getMessage() + " - Line: " + tos_count_tMSSqlRow_5;
				
	}
	
	if(!whetherReject_tMSSqlRow_5) {
		
	}
	

 


	tos_count_tMSSqlRow_5++;

/**
 * [tMSSqlRow_5 main ] stop
 */
	
	/**
	 * [tMSSqlRow_5 process_data_begin ] start
	 */

	

	
	
	currentComponent="tMSSqlRow_5";

	

 



/**
 * [tMSSqlRow_5 process_data_begin ] stop
 */
// Start of branch "row63"
if(row63 != null) { 



	
	/**
	 * [tLogRow_5 main ] start
	 */

	

	
	
	currentComponent="tLogRow_5";

	
					if(execStat){
						runStat.updateStatOnConnection(iterateId,1,1
						
							,"row63"
						
						);
					}
					
///////////////////////		
						



				strBuffer_tLogRow_5 = new StringBuilder();




   				
	    		if(row63.errorCode != null) { //              
                    							
       
				strBuffer_tLogRow_5.append(
				                String.valueOf(row63.errorCode)							
				);


							
	    		} //  			

    			strBuffer_tLogRow_5.append("|");
    			


   				
	    		if(row63.errorMessage != null) { //              
                    							
       
				strBuffer_tLogRow_5.append(
				                String.valueOf(row63.errorMessage)							
				);


							
	    		} //  			

				
				String[] row_tLogRow_5 = new String[2];
   				
	    		if(row63.errorCode != null) { //              
                 row_tLogRow_5[0]=    						    
				                String.valueOf(row63.errorCode)			
					          ;	
							
	    		} //			
    			   				
	    		if(row63.errorMessage != null) { //              
                 row_tLogRow_5[1]=    						    
				                String.valueOf(row63.errorMessage)			
					          ;	
							
	    		} //			
    			
				nb_line_tLogRow_5++;
                consoleOut_tLogRow_5.println(util_tLogRow_5.print(row_tLogRow_5,nb_line_tLogRow_5));
                consoleOut_tLogRow_5.flush();
//////

//////                    
                    
///////////////////////    			

 


	tos_count_tLogRow_5++;

/**
 * [tLogRow_5 main ] stop
 */
	
	/**
	 * [tLogRow_5 process_data_begin ] start
	 */

	

	
	
	currentComponent="tLogRow_5";

	

 



/**
 * [tLogRow_5 process_data_begin ] stop
 */
	
	/**
	 * [tLogRow_5 process_data_end ] start
	 */

	

	
	
	currentComponent="tLogRow_5";

	

 



/**
 * [tLogRow_5 process_data_end ] stop
 */

} // End of branch "row63"




	
	/**
	 * [tMSSqlRow_5 process_data_end ] start
	 */

	

	
	
	currentComponent="tMSSqlRow_5";

	

 



/**
 * [tMSSqlRow_5 process_data_end ] stop
 */

} // End of branch "row6"




// Start of branch "row62"
if(row62 != null) { 



	
	/**
	 * [tLogRow_4 main ] start
	 */

	

	
	
	currentComponent="tLogRow_4";

	
					if(execStat){
						runStat.updateStatOnConnection(iterateId,1,1
						
							,"row62"
						
						);
					}
					
///////////////////////		
						



				strBuffer_tLogRow_4 = new StringBuilder();




   				
	    		if(row62.errorCode != null) { //              
                    							
       
				strBuffer_tLogRow_4.append(
				                String.valueOf(row62.errorCode)							
				);


							
	    		} //  			

    			strBuffer_tLogRow_4.append("|");
    			


   				
	    		if(row62.errorMessage != null) { //              
                    							
       
				strBuffer_tLogRow_4.append(
				                String.valueOf(row62.errorMessage)							
				);


							
	    		} //  			

				
				String[] row_tLogRow_4 = new String[2];
   				
	    		if(row62.errorCode != null) { //              
                 row_tLogRow_4[0]=    						    
				                String.valueOf(row62.errorCode)			
					          ;	
							
	    		} //			
    			   				
	    		if(row62.errorMessage != null) { //              
                 row_tLogRow_4[1]=    						    
				                String.valueOf(row62.errorMessage)			
					          ;	
							
	    		} //			
    			
				nb_line_tLogRow_4++;
                consoleOut_tLogRow_4.println(util_tLogRow_4.print(row_tLogRow_4,nb_line_tLogRow_4));
                consoleOut_tLogRow_4.flush();
//////

//////                    
                    
///////////////////////    			

 


	tos_count_tLogRow_4++;

/**
 * [tLogRow_4 main ] stop
 */
	
	/**
	 * [tLogRow_4 process_data_begin ] start
	 */

	

	
	
	currentComponent="tLogRow_4";

	

 



/**
 * [tLogRow_4 process_data_begin ] stop
 */
	
	/**
	 * [tLogRow_4 process_data_end ] start
	 */

	

	
	
	currentComponent="tLogRow_4";

	

 



/**
 * [tLogRow_4 process_data_end ] stop
 */

} // End of branch "row62"




	
	/**
	 * [tMSSqlRow_4 process_data_end ] start
	 */

	

	
	
	currentComponent="tMSSqlRow_4";

	

 



/**
 * [tMSSqlRow_4 process_data_end ] stop
 */
	
	/**
	 * [tMSSqlRow_4 end ] start
	 */

	

	
	
	currentComponent="tMSSqlRow_4";

	

	
        stmt_tMSSqlRow_4.close();
        resourceMap.remove("stmt_tMSSqlRow_4");
    resourceMap.put("statementClosed_tMSSqlRow_4", true);
    resourceMap.put("finish_tMSSqlRow_4", true);
 

ok_Hash.put("tMSSqlRow_4", true);
end_Hash.put("tMSSqlRow_4", System.currentTimeMillis());




/**
 * [tMSSqlRow_4 end ] stop
 */

	
	/**
	 * [tMSSqlRow_5 end ] start
	 */

	

	
	
	currentComponent="tMSSqlRow_5";

	

	
        stmt_tMSSqlRow_5.close();
        resourceMap.remove("stmt_tMSSqlRow_5");
    resourceMap.put("statementClosed_tMSSqlRow_5", true);
    resourceMap.put("finish_tMSSqlRow_5", true);
				if(execStat){
			  		runStat.updateStat(resourceMap,iterateId,2,0,"row6");
			  	}
			  	
 

ok_Hash.put("tMSSqlRow_5", true);
end_Hash.put("tMSSqlRow_5", System.currentTimeMillis());




/**
 * [tMSSqlRow_5 end ] stop
 */

	
	/**
	 * [tLogRow_5 end ] start
	 */

	

	
	
	currentComponent="tLogRow_5";

	


//////
//////
globalMap.put("tLogRow_5_NB_LINE",nb_line_tLogRow_5);

///////////////////////    			

				if(execStat){
			  		runStat.updateStat(resourceMap,iterateId,2,0,"row63");
			  	}
			  	
 

ok_Hash.put("tLogRow_5", true);
end_Hash.put("tLogRow_5", System.currentTimeMillis());




/**
 * [tLogRow_5 end ] stop
 */







	
	/**
	 * [tLogRow_4 end ] start
	 */

	

	
	
	currentComponent="tLogRow_4";

	


//////
//////
globalMap.put("tLogRow_4_NB_LINE",nb_line_tLogRow_4);

///////////////////////    			

				if(execStat){
			  		runStat.updateStat(resourceMap,iterateId,2,0,"row62");
			  	}
			  	
 

ok_Hash.put("tLogRow_4", true);
end_Hash.put("tLogRow_4", System.currentTimeMillis());




/**
 * [tLogRow_4 end ] stop
 */



				}//end the resume

				
				    			if(resumeEntryMethodName == null || globalResumeTicket){
				    				resumeUtil.addLog("CHECKPOINT", "CONNECTION:SUBJOB_OK:tMSSqlRow_4:OnSubjobOk", "", Thread.currentThread().getId() + "", "", "", "", "", "");
								}	    				    			
					    	
								if(execStat){    	
									runStat.updateStatOnConnection("OnSubjobOk15", 0, "ok");
								} 
							
							tMSSqlConnection_3Process(globalMap); 
						



	
			}catch(java.lang.Exception e){	
				
				TalendException te = new TalendException(e, currentComponent, globalMap);
				
				throw te;
			}catch(java.lang.Error error){	
				
					runStat.stopThreadStat();
				
				throw error;
			}finally{
				
				try{
					
	
	/**
	 * [tMSSqlRow_4 finally ] start
	 */

	

	
	
	currentComponent="tMSSqlRow_4";

	

    if (resourceMap.get("statementClosed_tMSSqlRow_4") == null) {
            java.sql.Statement stmtToClose_tMSSqlRow_4 = null;
            if ((stmtToClose_tMSSqlRow_4 = (java.sql.Statement) resourceMap.remove("stmt_tMSSqlRow_4")) != null) {
                stmtToClose_tMSSqlRow_4.close();
            }
    }
 



/**
 * [tMSSqlRow_4 finally ] stop
 */

	
	/**
	 * [tMSSqlRow_5 finally ] start
	 */

	

	
	
	currentComponent="tMSSqlRow_5";

	

    if (resourceMap.get("statementClosed_tMSSqlRow_5") == null) {
            java.sql.Statement stmtToClose_tMSSqlRow_5 = null;
            if ((stmtToClose_tMSSqlRow_5 = (java.sql.Statement) resourceMap.remove("stmt_tMSSqlRow_5")) != null) {
                stmtToClose_tMSSqlRow_5.close();
            }
    }
 



/**
 * [tMSSqlRow_5 finally ] stop
 */

	
	/**
	 * [tLogRow_5 finally ] start
	 */

	

	
	
	currentComponent="tLogRow_5";

	

 



/**
 * [tLogRow_5 finally ] stop
 */







	
	/**
	 * [tLogRow_4 finally ] start
	 */

	

	
	
	currentComponent="tLogRow_4";

	

 



/**
 * [tLogRow_4 finally ] stop
 */



				}catch(java.lang.Exception e){	
					//ignore
				}catch(java.lang.Error error){
					//ignore
				}
				resourceMap = null;
			}
		

		globalMap.put("tMSSqlRow_4_SUBPROCESS_STATE", 1);
	}
	

public void tMSSqlConnection_3Process(final java.util.Map<String, Object> globalMap) throws TalendException {
	globalMap.put("tMSSqlConnection_3_SUBPROCESS_STATE", 0);

 final boolean execStat = this.execStat;
	
		String iterateId = "";
	
	
	String currentComponent = "";
	java.util.Map<String, Object> resourceMap = new java.util.HashMap<String, Object>();

	try {
			// TDI-39566 avoid throwing an useless Exception
			boolean resumeIt = true;
			if (globalResumeTicket == false && resumeEntryMethodName != null) {
				String currentMethodName = new java.lang.Exception().getStackTrace()[0].getMethodName();
				resumeIt = resumeEntryMethodName.equals(currentMethodName);
			}
			if (resumeIt || globalResumeTicket) { //start the resume
				globalResumeTicket = true;



		


	
	/**
	 * [tMSSqlConnection_3 begin ] start
	 */

	

	
		
		ok_Hash.put("tMSSqlConnection_3", false);
		start_Hash.put("tMSSqlConnection_3", System.currentTimeMillis());
		
				tStatCatcher_1.addMessage("begin","tMSSqlConnection_3");
				tStatCatcher_1Process(globalMap);
			
	
	currentComponent="tMSSqlConnection_3";

	
		int tos_count_tMSSqlConnection_3 = 0;
		
	

	
			String url_tMSSqlConnection_3 = "jdbc:jtds:sqlserver://" + context.intermediateHost ;
		String port_tMSSqlConnection_3 = context.intermediatePort;
		String dbname_tMSSqlConnection_3 = context.intermediateDB ;
    	if (!"".equals(port_tMSSqlConnection_3)) {
    		url_tMSSqlConnection_3 += ":" + context.intermediatePort;
    	}
    	if (!"".equals(dbname_tMSSqlConnection_3)) {
    		
				url_tMSSqlConnection_3 += "//" + context.intermediateDB; 
    	}

		url_tMSSqlConnection_3 += ";appName=" + projectName + ";" +  "allowMultiQueries=true";  
	String dbUser_tMSSqlConnection_3 = context.intermediateUser;
	
	
		
	final String decryptedPassword_tMSSqlConnection_3 = context.intermediatePassword; 
		String dbPwd_tMSSqlConnection_3 = decryptedPassword_tMSSqlConnection_3;
	
	
	java.sql.Connection conn_tMSSqlConnection_3 = null;
	
		
			String driverClass_tMSSqlConnection_3 = "net.sourceforge.jtds.jdbc.Driver";
			java.lang.Class jdbcclazz_tMSSqlConnection_3 = java.lang.Class.forName(driverClass_tMSSqlConnection_3);
			globalMap.put("driverClass_tMSSqlConnection_3", driverClass_tMSSqlConnection_3);
		
			conn_tMSSqlConnection_3 = java.sql.DriverManager.getConnection(url_tMSSqlConnection_3,dbUser_tMSSqlConnection_3,dbPwd_tMSSqlConnection_3);

		globalMap.put("conn_tMSSqlConnection_3", conn_tMSSqlConnection_3);
	if (null != conn_tMSSqlConnection_3) {
		
			conn_tMSSqlConnection_3.setAutoCommit(true);
	}

	globalMap.put("dbschema_tMSSqlConnection_3", "");

	globalMap.put("db_tMSSqlConnection_3",  context.intermediateDB);
	
	globalMap.put("shareIdentitySetting_tMSSqlConnection_3",  false);

	globalMap.put("driver_tMSSqlConnection_3", "JTDS");

 



/**
 * [tMSSqlConnection_3 begin ] stop
 */
	
	/**
	 * [tMSSqlConnection_3 main ] start
	 */

	

	
	
	currentComponent="tMSSqlConnection_3";

	

 


	tos_count_tMSSqlConnection_3++;

/**
 * [tMSSqlConnection_3 main ] stop
 */
	
	/**
	 * [tMSSqlConnection_3 process_data_begin ] start
	 */

	

	
	
	currentComponent="tMSSqlConnection_3";

	

 



/**
 * [tMSSqlConnection_3 process_data_begin ] stop
 */
	
	/**
	 * [tMSSqlConnection_3 process_data_end ] start
	 */

	

	
	
	currentComponent="tMSSqlConnection_3";

	

 



/**
 * [tMSSqlConnection_3 process_data_end ] stop
 */
	
	/**
	 * [tMSSqlConnection_3 end ] start
	 */

	

	
	
	currentComponent="tMSSqlConnection_3";

	

 

ok_Hash.put("tMSSqlConnection_3", true);
end_Hash.put("tMSSqlConnection_3", System.currentTimeMillis());

tStatCatcher_1.addMessage("end","tMSSqlConnection_3", end_Hash.get("tMSSqlConnection_3")-start_Hash.get("tMSSqlConnection_3"));
tStatCatcher_1Process(globalMap);



/**
 * [tMSSqlConnection_3 end ] stop
 */
				}//end the resume

				
				    			if(resumeEntryMethodName == null || globalResumeTicket){
				    				resumeUtil.addLog("CHECKPOINT", "CONNECTION:SUBJOB_OK:tMSSqlConnection_3:OnSubjobOk", "", Thread.currentThread().getId() + "", "", "", "", "", "");
								}	    				    			
					    	
								if(execStat){    	
									runStat.updateStatOnConnection("OnSubjobOk3", 0, "ok");
								} 
							
							tMSSqlRow_6Process(globalMap); 
						



	
			}catch(java.lang.Exception e){	
				
				TalendException te = new TalendException(e, currentComponent, globalMap);
				
				throw te;
			}catch(java.lang.Error error){	
				
					runStat.stopThreadStat();
				
				throw error;
			}finally{
				
				try{
					
	
	/**
	 * [tMSSqlConnection_3 finally ] start
	 */

	

	
	
	currentComponent="tMSSqlConnection_3";

	

 



/**
 * [tMSSqlConnection_3 finally ] stop
 */
				}catch(java.lang.Exception e){	
					//ignore
				}catch(java.lang.Error error){
					//ignore
				}
				resourceMap = null;
			}
		

		globalMap.put("tMSSqlConnection_3_SUBPROCESS_STATE", 1);
	}
	


public static class row65Struct implements routines.system.IPersistableRow<row65Struct> {
    final static byte[] commonByteArrayLock_WIPO_PROJECTS_F_IPAS_ENV_CRE = new byte[0];
    static byte[] commonByteArray_WIPO_PROJECTS_F_IPAS_ENV_CRE = new byte[0];

	
			    public String errorCode;

				public String getErrorCode () {
					return this.errorCode;
				}
				
			    public String errorMessage;

				public String getErrorMessage () {
					return this.errorMessage;
				}
				



	private String readString(ObjectInputStream dis) throws IOException{
		String strReturn = null;
		int length = 0;
        length = dis.readInt();
		if (length == -1) {
			strReturn = null;
		} else {
			if(length > commonByteArray_WIPO_PROJECTS_F_IPAS_ENV_CRE.length) {
				if(length < 1024 && commonByteArray_WIPO_PROJECTS_F_IPAS_ENV_CRE.length == 0) {
   					commonByteArray_WIPO_PROJECTS_F_IPAS_ENV_CRE = new byte[1024];
				} else {
   					commonByteArray_WIPO_PROJECTS_F_IPAS_ENV_CRE = new byte[2 * length];
   				}
			}
			dis.readFully(commonByteArray_WIPO_PROJECTS_F_IPAS_ENV_CRE, 0, length);
			strReturn = new String(commonByteArray_WIPO_PROJECTS_F_IPAS_ENV_CRE, 0, length, utf8Charset);
		}
		return strReturn;
	}

    private void writeString(String str, ObjectOutputStream dos) throws IOException{
		if(str == null) {
            dos.writeInt(-1);
		} else {
            byte[] byteArray = str.getBytes(utf8Charset);
	    	dos.writeInt(byteArray.length);
			dos.write(byteArray);
    	}
    }

    public void readData(ObjectInputStream dis) {

		synchronized(commonByteArrayLock_WIPO_PROJECTS_F_IPAS_ENV_CRE) {

        	try {

        		int length = 0;
		
					this.errorCode = readString(dis);
					
					this.errorMessage = readString(dis);
					
        	} catch (IOException e) {
	            throw new RuntimeException(e);

		

        }

		

      }


    }

    public void writeData(ObjectOutputStream dos) {
        try {

		
					// String
				
						writeString(this.errorCode,dos);
					
					// String
				
						writeString(this.errorMessage,dos);
					
        	} catch (IOException e) {
	            throw new RuntimeException(e);
        }


    }


    public String toString() {

		StringBuilder sb = new StringBuilder();
		sb.append(super.toString());
		sb.append("[");
		sb.append("errorCode="+errorCode);
		sb.append(",errorMessage="+errorMessage);
	    sb.append("]");

	    return sb.toString();
    }

    /**
     * Compare keys
     */
    public int compareTo(row65Struct other) {

		int returnValue = -1;
		
	    return returnValue;
    }


    private int checkNullsAndCompare(Object object1, Object object2) {
        int returnValue = 0;
		if (object1 instanceof Comparable && object2 instanceof Comparable) {
            returnValue = ((Comparable) object1).compareTo(object2);
        } else if (object1 != null && object2 != null) {
            returnValue = compareStrings(object1.toString(), object2.toString());
        } else if (object1 == null && object2 != null) {
            returnValue = 1;
        } else if (object1 != null && object2 == null) {
            returnValue = -1;
        } else {
            returnValue = 0;
        }

        return returnValue;
    }

    private int compareStrings(String string1, String string2) {
        return string1.compareTo(string2);
    }


}
public void tMSSqlRow_6Process(final java.util.Map<String, Object> globalMap) throws TalendException {
	globalMap.put("tMSSqlRow_6_SUBPROCESS_STATE", 0);

 final boolean execStat = this.execStat;
	
		String iterateId = "";
	
	
	String currentComponent = "";
	java.util.Map<String, Object> resourceMap = new java.util.HashMap<String, Object>();

	try {
			// TDI-39566 avoid throwing an useless Exception
			boolean resumeIt = true;
			if (globalResumeTicket == false && resumeEntryMethodName != null) {
				String currentMethodName = new java.lang.Exception().getStackTrace()[0].getMethodName();
				resumeIt = resumeEntryMethodName.equals(currentMethodName);
			}
			if (resumeIt || globalResumeTicket) { //start the resume
				globalResumeTicket = true;



		row65Struct row65 = new row65Struct();




	
	/**
	 * [tLogRow_8 begin ] start
	 */

	

	
		
		ok_Hash.put("tLogRow_8", false);
		start_Hash.put("tLogRow_8", System.currentTimeMillis());
		
	
	currentComponent="tLogRow_8";

	
					if(execStat) {
						runStat.updateStatOnConnection(resourceMap,iterateId,0,0,"row65");
					}
				
		int tos_count_tLogRow_8 = 0;
		

	///////////////////////
		


	class Util_tLogRow_8 {
	
		String[] des_top = { ".", "-" };

        String[] des_data = { "-", "+" };

        String[] des_frame = { "|" }; 
        
        public void printLine(StringBuilder sb, int titleWidth, int dataWidth){
        
        	sb.append("+");
			for(int i=0; i<titleWidth+2; i++)
				sb.append("-");
			sb.append("+");
			for(int i=0; i<dataWidth+2; i++)
				sb.append("-");
        	sb.append("+" + "\n");
        }      

		public String print(String[] row, int nbLine){
			
			StringBuilder sb = new StringBuilder();
			
			    String title = "#" + nbLine + ". " + "tLogRow_8";
			    
		
			//step 1: get the max length of all the row[] member;
			int dataWidth = 5;		//the length of the string "value"	
			for(int i=0;i<row.length;i++) {
				if(row[i] == null && 4 > dataWidth) {
					dataWidth = 4;
				}
				else if(row[i] != null && row[i].length()>dataWidth) 
					dataWidth = row[i].length();
			}			
						
			int titleWidth = 12;
			
			int totalWidth = dataWidth + titleWidth + 5;
			
			//step 2: print the header with line number
			sb.append(".");
			for(int i=0 ; i<totalWidth ; i++)
				sb.append("-");			
			sb.append("." + "\n" + "|");
			
			int emptyCenterWidth = (totalWidth-title.length())/2;
			for(int i=0 ; i<emptyCenterWidth; i++)
				sb.append(" ");	
			sb.append(title);
			for(int i=0 ; i<totalWidth - emptyCenterWidth - title.length() ; i++)
				sb.append(" ");	
			sb.append("|" + "\n");
			
			//step 3: print "key" and "value"			
			printLine(sb,titleWidth,dataWidth);
			
			sb.append("|" + " key");
			for(int i=0; i<titleWidth-2; i++)
				sb.append(" ");
        	sb.append("|" + " value");
			for(int i=0; i<dataWidth-4; i++)
				sb.append(" ");
			sb.append("|" + "\n");
			
			printLine(sb,titleWidth,dataWidth);
			
			//step 4: print dataset
			
			//for(int i=0; i<row.length; i++){
				sb.append("| " + "errorCode");
				for(int i=0; i<titleWidth -"errorCode".length()+ 1 ;i++)
					sb.append(" ");
				sb.append("| " + row[0]);
				for(int i=0; row[0] == null && i<dataWidth - 3 || row[0] != null && i<dataWidth -row[0].length()+ 1 ;i++)
					sb.append(" ");
				sb.append("|" + "\n");
			
			//}

			
			//for(int i=0; i<row.length; i++){
				sb.append("| " + "errorMessage");
				for(int i=0; i<titleWidth -"errorMessage".length()+ 1 ;i++)
					sb.append(" ");
				sb.append("| " + row[1]);
				for(int i=0; row[1] == null && i<dataWidth - 3 || row[1] != null && i<dataWidth -row[1].length()+ 1 ;i++)
					sb.append(" ");
				sb.append("|" + "\n");
			
			//}

			
			//step 5: print a line gap
			printLine(sb,titleWidth,dataWidth);
			return sb.toString();

		}


	}

	Util_tLogRow_8 util_tLogRow_8 = new Util_tLogRow_8();




	java.io.PrintStream consoleOut_tLogRow_8 = null;
	if (globalMap.get("tLogRow_CONSOLE")!=null){
        consoleOut_tLogRow_8 = (java.io.PrintStream) globalMap.get("tLogRow_CONSOLE");
    }else{
        consoleOut_tLogRow_8 = new java.io.PrintStream(new java.io.BufferedOutputStream(System.out));
        globalMap.put("tLogRow_CONSOLE",consoleOut_tLogRow_8);
    }

 		StringBuilder strBuffer_tLogRow_8 = null;
		int nb_line_tLogRow_8 = 0;
///////////////////////    			



 



/**
 * [tLogRow_8 begin ] stop
 */



	
	/**
	 * [tMSSqlRow_6 begin ] start
	 */

	

	
		
		ok_Hash.put("tMSSqlRow_6", false);
		start_Hash.put("tMSSqlRow_6", System.currentTimeMillis());
		
	
	currentComponent="tMSSqlRow_6";

	
		int tos_count_tMSSqlRow_6 = 0;
		

	java.sql.Connection conn_tMSSqlRow_6 = null;
	String query_tMSSqlRow_6 = "";
	boolean whetherReject_tMSSqlRow_6 = false;
				conn_tMSSqlRow_6 = (java.sql.Connection)globalMap.get("conn_tMSSqlConnection_3");
			
    resourceMap.put("conn_tMSSqlRow_6", conn_tMSSqlRow_6);
        java.sql.Statement stmt_tMSSqlRow_6 = conn_tMSSqlRow_6.createStatement();
        resourceMap.put("stmt_tMSSqlRow_6", stmt_tMSSqlRow_6);

 



/**
 * [tMSSqlRow_6 begin ] stop
 */
	
	/**
	 * [tMSSqlRow_6 main ] start
	 */

	

	
	
	currentComponent="tMSSqlRow_6";

	

		row65 = null;
		
query_tMSSqlRow_6 = "update VW_IMPORT_AGENT set IND_IMPORT = null;\nupdate VW_IMPORT_MARK set IND_IMPORT = null;\nupdate VW_IMPORT_MARK_RELS"
+" set IND_IMPORT = null;\nupdate VW_IMPORT_USERDOC set IND_IMPORT = null;";
whetherReject_tMSSqlRow_6 = false;
globalMap.put("tMSSqlRow_6_QUERY",query_tMSSqlRow_6);
try {
		stmt_tMSSqlRow_6.execute(query_tMSSqlRow_6);
		
	} catch (java.lang.Exception e) {
		whetherReject_tMSSqlRow_6 = true;
		
				row65 = new row65Struct();
				
				row65.errorCode = ((java.sql.SQLException)e).getSQLState();
				row65.errorMessage = e.getMessage() + " - Line: " + tos_count_tMSSqlRow_6;
				
	}
	
	if(!whetherReject_tMSSqlRow_6) {
		
	}
	

 


	tos_count_tMSSqlRow_6++;

/**
 * [tMSSqlRow_6 main ] stop
 */
	
	/**
	 * [tMSSqlRow_6 process_data_begin ] start
	 */

	

	
	
	currentComponent="tMSSqlRow_6";

	

 



/**
 * [tMSSqlRow_6 process_data_begin ] stop
 */
// Start of branch "row65"
if(row65 != null) { 



	
	/**
	 * [tLogRow_8 main ] start
	 */

	

	
	
	currentComponent="tLogRow_8";

	
					if(execStat){
						runStat.updateStatOnConnection(iterateId,1,1
						
							,"row65"
						
						);
					}
					
///////////////////////		
						



				strBuffer_tLogRow_8 = new StringBuilder();




   				
	    		if(row65.errorCode != null) { //              
                    							
       
				strBuffer_tLogRow_8.append(
				                String.valueOf(row65.errorCode)							
				);


							
	    		} //  			

    			strBuffer_tLogRow_8.append("|");
    			


   				
	    		if(row65.errorMessage != null) { //              
                    							
       
				strBuffer_tLogRow_8.append(
				                String.valueOf(row65.errorMessage)							
				);


							
	    		} //  			

				
				String[] row_tLogRow_8 = new String[2];
   				
	    		if(row65.errorCode != null) { //              
                 row_tLogRow_8[0]=    						    
				                String.valueOf(row65.errorCode)			
					          ;	
							
	    		} //			
    			   				
	    		if(row65.errorMessage != null) { //              
                 row_tLogRow_8[1]=    						    
				                String.valueOf(row65.errorMessage)			
					          ;	
							
	    		} //			
    			
				nb_line_tLogRow_8++;
                consoleOut_tLogRow_8.println(util_tLogRow_8.print(row_tLogRow_8,nb_line_tLogRow_8));
                consoleOut_tLogRow_8.flush();
//////

//////                    
                    
///////////////////////    			

 


	tos_count_tLogRow_8++;

/**
 * [tLogRow_8 main ] stop
 */
	
	/**
	 * [tLogRow_8 process_data_begin ] start
	 */

	

	
	
	currentComponent="tLogRow_8";

	

 



/**
 * [tLogRow_8 process_data_begin ] stop
 */
	
	/**
	 * [tLogRow_8 process_data_end ] start
	 */

	

	
	
	currentComponent="tLogRow_8";

	

 



/**
 * [tLogRow_8 process_data_end ] stop
 */

} // End of branch "row65"




	
	/**
	 * [tMSSqlRow_6 process_data_end ] start
	 */

	

	
	
	currentComponent="tMSSqlRow_6";

	

 



/**
 * [tMSSqlRow_6 process_data_end ] stop
 */
	
	/**
	 * [tMSSqlRow_6 end ] start
	 */

	

	
	
	currentComponent="tMSSqlRow_6";

	

	
        stmt_tMSSqlRow_6.close();
        resourceMap.remove("stmt_tMSSqlRow_6");
    resourceMap.put("statementClosed_tMSSqlRow_6", true);
    resourceMap.put("finish_tMSSqlRow_6", true);
 

ok_Hash.put("tMSSqlRow_6", true);
end_Hash.put("tMSSqlRow_6", System.currentTimeMillis());




/**
 * [tMSSqlRow_6 end ] stop
 */

	
	/**
	 * [tLogRow_8 end ] start
	 */

	

	
	
	currentComponent="tLogRow_8";

	


//////
//////
globalMap.put("tLogRow_8_NB_LINE",nb_line_tLogRow_8);

///////////////////////    			

				if(execStat){
			  		runStat.updateStat(resourceMap,iterateId,2,0,"row65");
			  	}
			  	
 

ok_Hash.put("tLogRow_8", true);
end_Hash.put("tLogRow_8", System.currentTimeMillis());




/**
 * [tLogRow_8 end ] stop
 */



				}//end the resume

				
				    			if(resumeEntryMethodName == null || globalResumeTicket){
				    				resumeUtil.addLog("CHECKPOINT", "CONNECTION:SUBJOB_OK:tMSSqlRow_6:OnSubjobOk", "", Thread.currentThread().getId() + "", "", "", "", "", "");
								}	    				    			
					    	
								if(execStat){    	
									runStat.updateStatOnConnection("OnSubjobOk5", 0, "ok");
								} 
							
							tMSSqlConnection_4Process(globalMap); 
						



	
			}catch(java.lang.Exception e){	
				
				TalendException te = new TalendException(e, currentComponent, globalMap);
				
				throw te;
			}catch(java.lang.Error error){	
				
					runStat.stopThreadStat();
				
				throw error;
			}finally{
				
				try{
					
	
	/**
	 * [tMSSqlRow_6 finally ] start
	 */

	

	
	
	currentComponent="tMSSqlRow_6";

	

    if (resourceMap.get("statementClosed_tMSSqlRow_6") == null) {
            java.sql.Statement stmtToClose_tMSSqlRow_6 = null;
            if ((stmtToClose_tMSSqlRow_6 = (java.sql.Statement) resourceMap.remove("stmt_tMSSqlRow_6")) != null) {
                stmtToClose_tMSSqlRow_6.close();
            }
    }
 



/**
 * [tMSSqlRow_6 finally ] stop
 */

	
	/**
	 * [tLogRow_8 finally ] start
	 */

	

	
	
	currentComponent="tLogRow_8";

	

 



/**
 * [tLogRow_8 finally ] stop
 */



				}catch(java.lang.Exception e){	
					//ignore
				}catch(java.lang.Error error){
					//ignore
				}
				resourceMap = null;
			}
		

		globalMap.put("tMSSqlRow_6_SUBPROCESS_STATE", 1);
	}
	

public void tMSSqlConnection_4Process(final java.util.Map<String, Object> globalMap) throws TalendException {
	globalMap.put("tMSSqlConnection_4_SUBPROCESS_STATE", 0);

 final boolean execStat = this.execStat;
	
		String iterateId = "";
	
	
	String currentComponent = "";
	java.util.Map<String, Object> resourceMap = new java.util.HashMap<String, Object>();

	try {
			// TDI-39566 avoid throwing an useless Exception
			boolean resumeIt = true;
			if (globalResumeTicket == false && resumeEntryMethodName != null) {
				String currentMethodName = new java.lang.Exception().getStackTrace()[0].getMethodName();
				resumeIt = resumeEntryMethodName.equals(currentMethodName);
			}
			if (resumeIt || globalResumeTicket) { //start the resume
				globalResumeTicket = true;



		


	
	/**
	 * [tMSSqlConnection_4 begin ] start
	 */

	

	
		
		ok_Hash.put("tMSSqlConnection_4", false);
		start_Hash.put("tMSSqlConnection_4", System.currentTimeMillis());
		
				tStatCatcher_1.addMessage("begin","tMSSqlConnection_4");
				tStatCatcher_1Process(globalMap);
			
	
	currentComponent="tMSSqlConnection_4";

	
		int tos_count_tMSSqlConnection_4 = 0;
		
	

	
			String url_tMSSqlConnection_4 = "jdbc:jtds:sqlserver://" + context.ipasHost ;
		String port_tMSSqlConnection_4 = context.ipasPort;
		String dbname_tMSSqlConnection_4 = context.ipasDB ;
    	if (!"".equals(port_tMSSqlConnection_4)) {
    		url_tMSSqlConnection_4 += ":" + context.ipasPort;
    	}
    	if (!"".equals(dbname_tMSSqlConnection_4)) {
    		
				url_tMSSqlConnection_4 += "//" + context.ipasDB; 
    	}

		url_tMSSqlConnection_4 += ";appName=" + projectName + ";" +  "allowMultiQueries=true";  
	String dbUser_tMSSqlConnection_4 = context.ipasUser;
	
	
		
	final String decryptedPassword_tMSSqlConnection_4 = context.ipasPassword; 
		String dbPwd_tMSSqlConnection_4 = decryptedPassword_tMSSqlConnection_4;
	
	
	java.sql.Connection conn_tMSSqlConnection_4 = null;
	
		
			String driverClass_tMSSqlConnection_4 = "net.sourceforge.jtds.jdbc.Driver";
			java.lang.Class jdbcclazz_tMSSqlConnection_4 = java.lang.Class.forName(driverClass_tMSSqlConnection_4);
			globalMap.put("driverClass_tMSSqlConnection_4", driverClass_tMSSqlConnection_4);
		
			conn_tMSSqlConnection_4 = java.sql.DriverManager.getConnection(url_tMSSqlConnection_4,dbUser_tMSSqlConnection_4,dbPwd_tMSSqlConnection_4);

		globalMap.put("conn_tMSSqlConnection_4", conn_tMSSqlConnection_4);
	if (null != conn_tMSSqlConnection_4) {
		
			conn_tMSSqlConnection_4.setAutoCommit(true);
	}

	globalMap.put("dbschema_tMSSqlConnection_4", "");

	globalMap.put("db_tMSSqlConnection_4",  context.ipasDB);
	
	globalMap.put("shareIdentitySetting_tMSSqlConnection_4",  false);

	globalMap.put("driver_tMSSqlConnection_4", "JTDS");

 



/**
 * [tMSSqlConnection_4 begin ] stop
 */
	
	/**
	 * [tMSSqlConnection_4 main ] start
	 */

	

	
	
	currentComponent="tMSSqlConnection_4";

	

 


	tos_count_tMSSqlConnection_4++;

/**
 * [tMSSqlConnection_4 main ] stop
 */
	
	/**
	 * [tMSSqlConnection_4 process_data_begin ] start
	 */

	

	
	
	currentComponent="tMSSqlConnection_4";

	

 



/**
 * [tMSSqlConnection_4 process_data_begin ] stop
 */
	
	/**
	 * [tMSSqlConnection_4 process_data_end ] start
	 */

	

	
	
	currentComponent="tMSSqlConnection_4";

	

 



/**
 * [tMSSqlConnection_4 process_data_end ] stop
 */
	
	/**
	 * [tMSSqlConnection_4 end ] start
	 */

	

	
	
	currentComponent="tMSSqlConnection_4";

	

 

ok_Hash.put("tMSSqlConnection_4", true);
end_Hash.put("tMSSqlConnection_4", System.currentTimeMillis());

tStatCatcher_1.addMessage("end","tMSSqlConnection_4", end_Hash.get("tMSSqlConnection_4")-start_Hash.get("tMSSqlConnection_4"));
tStatCatcher_1Process(globalMap);
				if(execStat){   
   	 				runStat.updateStatOnConnection("OnComponentOk3", 0, "ok");
				}
				tMSSqlRow_9Process(globalMap);



/**
 * [tMSSqlConnection_4 end ] stop
 */
				}//end the resume

				



	
			}catch(java.lang.Exception e){	
				
				TalendException te = new TalendException(e, currentComponent, globalMap);
				
				throw te;
			}catch(java.lang.Error error){	
				
					runStat.stopThreadStat();
				
				throw error;
			}finally{
				
				try{
					
	
	/**
	 * [tMSSqlConnection_4 finally ] start
	 */

	

	
	
	currentComponent="tMSSqlConnection_4";

	

 



/**
 * [tMSSqlConnection_4 finally ] stop
 */
				}catch(java.lang.Exception e){	
					//ignore
				}catch(java.lang.Error error){
					//ignore
				}
				resourceMap = null;
			}
		

		globalMap.put("tMSSqlConnection_4_SUBPROCESS_STATE", 1);
	}
	


public static class row67Struct implements routines.system.IPersistableRow<row67Struct> {
    final static byte[] commonByteArrayLock_WIPO_PROJECTS_F_IPAS_ENV_CRE = new byte[0];
    static byte[] commonByteArray_WIPO_PROJECTS_F_IPAS_ENV_CRE = new byte[0];

	
			    public String errorCode;

				public String getErrorCode () {
					return this.errorCode;
				}
				
			    public String errorMessage;

				public String getErrorMessage () {
					return this.errorMessage;
				}
				



	private String readString(ObjectInputStream dis) throws IOException{
		String strReturn = null;
		int length = 0;
        length = dis.readInt();
		if (length == -1) {
			strReturn = null;
		} else {
			if(length > commonByteArray_WIPO_PROJECTS_F_IPAS_ENV_CRE.length) {
				if(length < 1024 && commonByteArray_WIPO_PROJECTS_F_IPAS_ENV_CRE.length == 0) {
   					commonByteArray_WIPO_PROJECTS_F_IPAS_ENV_CRE = new byte[1024];
				} else {
   					commonByteArray_WIPO_PROJECTS_F_IPAS_ENV_CRE = new byte[2 * length];
   				}
			}
			dis.readFully(commonByteArray_WIPO_PROJECTS_F_IPAS_ENV_CRE, 0, length);
			strReturn = new String(commonByteArray_WIPO_PROJECTS_F_IPAS_ENV_CRE, 0, length, utf8Charset);
		}
		return strReturn;
	}

    private void writeString(String str, ObjectOutputStream dos) throws IOException{
		if(str == null) {
            dos.writeInt(-1);
		} else {
            byte[] byteArray = str.getBytes(utf8Charset);
	    	dos.writeInt(byteArray.length);
			dos.write(byteArray);
    	}
    }

    public void readData(ObjectInputStream dis) {

		synchronized(commonByteArrayLock_WIPO_PROJECTS_F_IPAS_ENV_CRE) {

        	try {

        		int length = 0;
		
					this.errorCode = readString(dis);
					
					this.errorMessage = readString(dis);
					
        	} catch (IOException e) {
	            throw new RuntimeException(e);

		

        }

		

      }


    }

    public void writeData(ObjectOutputStream dos) {
        try {

		
					// String
				
						writeString(this.errorCode,dos);
					
					// String
				
						writeString(this.errorMessage,dos);
					
        	} catch (IOException e) {
	            throw new RuntimeException(e);
        }


    }


    public String toString() {

		StringBuilder sb = new StringBuilder();
		sb.append(super.toString());
		sb.append("[");
		sb.append("errorCode="+errorCode);
		sb.append(",errorMessage="+errorMessage);
	    sb.append("]");

	    return sb.toString();
    }

    /**
     * Compare keys
     */
    public int compareTo(row67Struct other) {

		int returnValue = -1;
		
	    return returnValue;
    }


    private int checkNullsAndCompare(Object object1, Object object2) {
        int returnValue = 0;
		if (object1 instanceof Comparable && object2 instanceof Comparable) {
            returnValue = ((Comparable) object1).compareTo(object2);
        } else if (object1 != null && object2 != null) {
            returnValue = compareStrings(object1.toString(), object2.toString());
        } else if (object1 == null && object2 != null) {
            returnValue = 1;
        } else if (object1 != null && object2 == null) {
            returnValue = -1;
        } else {
            returnValue = 0;
        }

        return returnValue;
    }

    private int compareStrings(String string1, String string2) {
        return string1.compareTo(string2);
    }


}
public void tMSSqlRow_9Process(final java.util.Map<String, Object> globalMap) throws TalendException {
	globalMap.put("tMSSqlRow_9_SUBPROCESS_STATE", 0);

 final boolean execStat = this.execStat;
	
		String iterateId = "";
	
	
	String currentComponent = "";
	java.util.Map<String, Object> resourceMap = new java.util.HashMap<String, Object>();

	try {
			// TDI-39566 avoid throwing an useless Exception
			boolean resumeIt = true;
			if (globalResumeTicket == false && resumeEntryMethodName != null) {
				String currentMethodName = new java.lang.Exception().getStackTrace()[0].getMethodName();
				resumeIt = resumeEntryMethodName.equals(currentMethodName);
			}
			if (resumeIt || globalResumeTicket) { //start the resume
				globalResumeTicket = true;



		row67Struct row67 = new row67Struct();




	
	/**
	 * [tLogRow_11 begin ] start
	 */

	

	
		
		ok_Hash.put("tLogRow_11", false);
		start_Hash.put("tLogRow_11", System.currentTimeMillis());
		
	
	currentComponent="tLogRow_11";

	
					if(execStat) {
						runStat.updateStatOnConnection(resourceMap,iterateId,0,0,"row67");
					}
				
		int tos_count_tLogRow_11 = 0;
		

	///////////////////////
		


	class Util_tLogRow_11 {
	
		String[] des_top = { ".", "-" };

        String[] des_data = { "-", "+" };

        String[] des_frame = { "|" }; 
        
        public void printLine(StringBuilder sb, int titleWidth, int dataWidth){
        
        	sb.append("+");
			for(int i=0; i<titleWidth+2; i++)
				sb.append("-");
			sb.append("+");
			for(int i=0; i<dataWidth+2; i++)
				sb.append("-");
        	sb.append("+" + "\n");
        }      

		public String print(String[] row, int nbLine){
			
			StringBuilder sb = new StringBuilder();
			
			    String title = "#" + nbLine + ". " + "tLogRow_11";
			    
		
			//step 1: get the max length of all the row[] member;
			int dataWidth = 5;		//the length of the string "value"	
			for(int i=0;i<row.length;i++) {
				if(row[i] == null && 4 > dataWidth) {
					dataWidth = 4;
				}
				else if(row[i] != null && row[i].length()>dataWidth) 
					dataWidth = row[i].length();
			}			
						
			int titleWidth = 12;
			
			int totalWidth = dataWidth + titleWidth + 5;
			
			//step 2: print the header with line number
			sb.append(".");
			for(int i=0 ; i<totalWidth ; i++)
				sb.append("-");			
			sb.append("." + "\n" + "|");
			
			int emptyCenterWidth = (totalWidth-title.length())/2;
			for(int i=0 ; i<emptyCenterWidth; i++)
				sb.append(" ");	
			sb.append(title);
			for(int i=0 ; i<totalWidth - emptyCenterWidth - title.length() ; i++)
				sb.append(" ");	
			sb.append("|" + "\n");
			
			//step 3: print "key" and "value"			
			printLine(sb,titleWidth,dataWidth);
			
			sb.append("|" + " key");
			for(int i=0; i<titleWidth-2; i++)
				sb.append(" ");
        	sb.append("|" + " value");
			for(int i=0; i<dataWidth-4; i++)
				sb.append(" ");
			sb.append("|" + "\n");
			
			printLine(sb,titleWidth,dataWidth);
			
			//step 4: print dataset
			
			//for(int i=0; i<row.length; i++){
				sb.append("| " + "errorCode");
				for(int i=0; i<titleWidth -"errorCode".length()+ 1 ;i++)
					sb.append(" ");
				sb.append("| " + row[0]);
				for(int i=0; row[0] == null && i<dataWidth - 3 || row[0] != null && i<dataWidth -row[0].length()+ 1 ;i++)
					sb.append(" ");
				sb.append("|" + "\n");
			
			//}

			
			//for(int i=0; i<row.length; i++){
				sb.append("| " + "errorMessage");
				for(int i=0; i<titleWidth -"errorMessage".length()+ 1 ;i++)
					sb.append(" ");
				sb.append("| " + row[1]);
				for(int i=0; row[1] == null && i<dataWidth - 3 || row[1] != null && i<dataWidth -row[1].length()+ 1 ;i++)
					sb.append(" ");
				sb.append("|" + "\n");
			
			//}

			
			//step 5: print a line gap
			printLine(sb,titleWidth,dataWidth);
			return sb.toString();

		}


	}

	Util_tLogRow_11 util_tLogRow_11 = new Util_tLogRow_11();




	java.io.PrintStream consoleOut_tLogRow_11 = null;
	if (globalMap.get("tLogRow_CONSOLE")!=null){
        consoleOut_tLogRow_11 = (java.io.PrintStream) globalMap.get("tLogRow_CONSOLE");
    }else{
        consoleOut_tLogRow_11 = new java.io.PrintStream(new java.io.BufferedOutputStream(System.out));
        globalMap.put("tLogRow_CONSOLE",consoleOut_tLogRow_11);
    }

 		StringBuilder strBuffer_tLogRow_11 = null;
		int nb_line_tLogRow_11 = 0;
///////////////////////    			



 



/**
 * [tLogRow_11 begin ] stop
 */



	
	/**
	 * [tMSSqlRow_9 begin ] start
	 */

	

	
		
		ok_Hash.put("tMSSqlRow_9", false);
		start_Hash.put("tMSSqlRow_9", System.currentTimeMillis());
		
	
	currentComponent="tMSSqlRow_9";

	
		int tos_count_tMSSqlRow_9 = 0;
		

	java.sql.Connection conn_tMSSqlRow_9 = null;
	String query_tMSSqlRow_9 = "";
	boolean whetherReject_tMSSqlRow_9 = false;
				conn_tMSSqlRow_9 = (java.sql.Connection)globalMap.get("conn_tMSSqlConnection_4");
			
    resourceMap.put("conn_tMSSqlRow_9", conn_tMSSqlRow_9);
        java.sql.Statement stmt_tMSSqlRow_9 = conn_tMSSqlRow_9.createStatement();
        resourceMap.put("stmt_tMSSqlRow_9", stmt_tMSSqlRow_9);

 



/**
 * [tMSSqlRow_9 begin ] stop
 */
	
	/**
	 * [tMSSqlRow_9 main ] start
	 */

	

	
	
	currentComponent="tMSSqlRow_9";

	

		row67 = null;
		
query_tMSSqlRow_9 = "\nIF OBJECT_ID('wrk_person_addr', 'U') IS NOT NULL DROP TABLE wrk_person_addr;\n\nIF OBJECT_ID('WRK_MARK', 'U') IS NOT "
+"NULL DROP TABLE WRK_MARK;\nIF OBJECT_ID('WRK_MARK_OWNERS', 'U') IS NOT NULL DROP TABLE WRK_MARK_OWNERS;\nIF OBJECT_ID('W"
+"RK_MARK_REPRS', 'U') IS NOT NULL DROP TABLE WRK_MARK_REPRS;\nIF OBJECT_ID('WRK_MARK_PRIORITIES', 'U') IS NOT NULL DROP T"
+"ABLE WRK_MARK_PRIORITIES;\nIF OBJECT_ID('WRK_MARK_NICE_CLASSES', 'U') IS NOT NULL DROP TABLE WRK_MARK_NICE_CLASSES;\nIF "
+"OBJECT_ID('WRK_MARK_ACTIONS', 'U') IS NOT NULL DROP TABLE WRK_MARK_ACTIONS;\n\nIF OBJECT_ID('WRK_USERDOC', 'U') IS NOT N"
+"ULL DROP TABLE WRK_USERDOC;\nIF OBJECT_ID('WRK_USERDOC_FILES', 'U') IS NOT NULL DROP TABLE WRK_USERDOC_FILES;\nIF OBJECT"
+"_ID('WRK_USERDOC_OWNERS', 'U') IS NOT NULL DROP TABLE WRK_USERDOC_OWNERS;\nIF OBJECT_ID('WRK_USERDOC_REPRS', 'U') IS NOT"
+" NULL DROP TABLE WRK_USERDOC_REPRS;\nIF OBJECT_ID('WRK_USERDOC_ACTIONS', 'U') IS NOT NULL DROP TABLE WRK_USERDOC_ACTIONS"
+";\nIF OBJECT_ID('WRK_LOG', 'U') IS NOT NULL DROP TABLE WRK_LOG;\nIF OBJECT_ID('WRK_ACTION_OPTIONS', 'U') IS NOT NULL DRO"
+"P TABLE WRK_ACTION_OPTIONS;\n\nIF OBJECT_ID('wrk_doc_key', 'U') IS NOT NULL DROP TABLE wrk_doc_key;\nIF OBJECT_ID('wrk_f"
+"ile_service_count', 'U') IS NOT NULL DROP TABLE wrk_file_service_count;\nIF OBJECT_ID('wrk_userdoc_service_count', 'U') "
+"IS NOT NULL DROP TABLE wrk_userdoc_service_count;\nIF OBJECT_ID('wrk_file_priority_count', 'U') IS NOT NULL DROP TABLE w"
+"rk_file_priority_count;\nIF OBJECT_ID('wrk_file_vienna_count', 'U') IS NOT NULL DROP TABLE wrk_file_vienna_count;\nIF OB"
+"JECT_ID('wrk_file_nice_count', 'U') IS NOT NULL DROP TABLE wrk_file_nice_count;\nIF OBJECT_ID('wrk_file_detail_count', '"
+"U') IS NOT NULL DROP TABLE wrk_file_detail_count;\nIF OBJECT_ID('wrk_file_payment_count', 'U') IS NOT NULL DROP TABLE wr"
+"k_file_payment_count;\n\nIF OBJECT_ID('WRK_PATENT', 'U') IS NOT NULL DROP TABLE WRK_PATENT;\nIF OBJECT_ID('WRK_PATENT_OW"
+"NERS', 'U') IS NOT NULL DROP TABLE WRK_PATENT_OWNERS;\nIF OBJECT_ID('WRK_PATENT_REPRS', 'U') IS NOT NULL DROP TABLE WRK_"
+"PATENT_REPRS;\nIF OBJECT_ID('WRK_PATENT_INVENTORS', 'U') IS NOT NULL DROP TABLE WRK_PATENT_INVENTORS;\nIF OBJECT_ID('WRK"
+"_PATENT_PRIORITIES', 'U') IS NOT NULL DROP TABLE WRK_PATENT_PRIORITIES;\nIF OBJECT_ID('WRK_PATENT_ACTIONS', 'U') IS NOT "
+"NULL DROP TABLE WRK_PATENT_ACTIONS;\n\nIF OBJECT_ID('WRK_MARK_EXPORT', 'U') IS NOT NULL DROP TABLE WRK_MARK_EXPORT;\nIF "
+"OBJECT_ID('WRK_PATENT_EXPORT', 'U') IS NOT NULL DROP TABLE WRK_PATENT_EXPORT;\nIF OBJECT_ID('WRK_USERDOC_EXPORT', 'U') I"
+"S NOT NULL DROP TABLE WRK_USERDOC_EXPORT;\n\n";
whetherReject_tMSSqlRow_9 = false;
globalMap.put("tMSSqlRow_9_QUERY",query_tMSSqlRow_9);
try {
		stmt_tMSSqlRow_9.execute(query_tMSSqlRow_9);
		
	} catch (java.lang.Exception e) {
		whetherReject_tMSSqlRow_9 = true;
		
				row67 = new row67Struct();
				
				row67.errorCode = ((java.sql.SQLException)e).getSQLState();
				row67.errorMessage = e.getMessage() + " - Line: " + tos_count_tMSSqlRow_9;
				
	}
	
	if(!whetherReject_tMSSqlRow_9) {
		
	}
	

 


	tos_count_tMSSqlRow_9++;

/**
 * [tMSSqlRow_9 main ] stop
 */
	
	/**
	 * [tMSSqlRow_9 process_data_begin ] start
	 */

	

	
	
	currentComponent="tMSSqlRow_9";

	

 



/**
 * [tMSSqlRow_9 process_data_begin ] stop
 */
// Start of branch "row67"
if(row67 != null) { 



	
	/**
	 * [tLogRow_11 main ] start
	 */

	

	
	
	currentComponent="tLogRow_11";

	
					if(execStat){
						runStat.updateStatOnConnection(iterateId,1,1
						
							,"row67"
						
						);
					}
					
///////////////////////		
						



				strBuffer_tLogRow_11 = new StringBuilder();




   				
	    		if(row67.errorCode != null) { //              
                    							
       
				strBuffer_tLogRow_11.append(
				                String.valueOf(row67.errorCode)							
				);


							
	    		} //  			

    			strBuffer_tLogRow_11.append("|");
    			


   				
	    		if(row67.errorMessage != null) { //              
                    							
       
				strBuffer_tLogRow_11.append(
				                String.valueOf(row67.errorMessage)							
				);


							
	    		} //  			

				
				String[] row_tLogRow_11 = new String[2];
   				
	    		if(row67.errorCode != null) { //              
                 row_tLogRow_11[0]=    						    
				                String.valueOf(row67.errorCode)			
					          ;	
							
	    		} //			
    			   				
	    		if(row67.errorMessage != null) { //              
                 row_tLogRow_11[1]=    						    
				                String.valueOf(row67.errorMessage)			
					          ;	
							
	    		} //			
    			
				nb_line_tLogRow_11++;
                consoleOut_tLogRow_11.println(util_tLogRow_11.print(row_tLogRow_11,nb_line_tLogRow_11));
                consoleOut_tLogRow_11.flush();
//////

//////                    
                    
///////////////////////    			

 


	tos_count_tLogRow_11++;

/**
 * [tLogRow_11 main ] stop
 */
	
	/**
	 * [tLogRow_11 process_data_begin ] start
	 */

	

	
	
	currentComponent="tLogRow_11";

	

 



/**
 * [tLogRow_11 process_data_begin ] stop
 */
	
	/**
	 * [tLogRow_11 process_data_end ] start
	 */

	

	
	
	currentComponent="tLogRow_11";

	

 



/**
 * [tLogRow_11 process_data_end ] stop
 */

} // End of branch "row67"




	
	/**
	 * [tMSSqlRow_9 process_data_end ] start
	 */

	

	
	
	currentComponent="tMSSqlRow_9";

	

 



/**
 * [tMSSqlRow_9 process_data_end ] stop
 */
	
	/**
	 * [tMSSqlRow_9 end ] start
	 */

	

	
	
	currentComponent="tMSSqlRow_9";

	

	
        stmt_tMSSqlRow_9.close();
        resourceMap.remove("stmt_tMSSqlRow_9");
    resourceMap.put("statementClosed_tMSSqlRow_9", true);
    resourceMap.put("finish_tMSSqlRow_9", true);
 

ok_Hash.put("tMSSqlRow_9", true);
end_Hash.put("tMSSqlRow_9", System.currentTimeMillis());




/**
 * [tMSSqlRow_9 end ] stop
 */

	
	/**
	 * [tLogRow_11 end ] start
	 */

	

	
	
	currentComponent="tLogRow_11";

	


//////
//////
globalMap.put("tLogRow_11_NB_LINE",nb_line_tLogRow_11);

///////////////////////    			

				if(execStat){
			  		runStat.updateStat(resourceMap,iterateId,2,0,"row67");
			  	}
			  	
 

ok_Hash.put("tLogRow_11", true);
end_Hash.put("tLogRow_11", System.currentTimeMillis());




/**
 * [tLogRow_11 end ] stop
 */



				}//end the resume

				
				    			if(resumeEntryMethodName == null || globalResumeTicket){
				    				resumeUtil.addLog("CHECKPOINT", "CONNECTION:SUBJOB_OK:tMSSqlRow_9:OnSubjobOk", "", Thread.currentThread().getId() + "", "", "", "", "", "");
								}	    				    			
					    	
								if(execStat){    	
									runStat.updateStatOnConnection("OnSubjobOk7", 0, "ok");
								} 
							
							tMSSqlRow_10Process(globalMap); 
						



	
			}catch(java.lang.Exception e){	
				
				TalendException te = new TalendException(e, currentComponent, globalMap);
				
				throw te;
			}catch(java.lang.Error error){	
				
					runStat.stopThreadStat();
				
				throw error;
			}finally{
				
				try{
					
	
	/**
	 * [tMSSqlRow_9 finally ] start
	 */

	

	
	
	currentComponent="tMSSqlRow_9";

	

    if (resourceMap.get("statementClosed_tMSSqlRow_9") == null) {
            java.sql.Statement stmtToClose_tMSSqlRow_9 = null;
            if ((stmtToClose_tMSSqlRow_9 = (java.sql.Statement) resourceMap.remove("stmt_tMSSqlRow_9")) != null) {
                stmtToClose_tMSSqlRow_9.close();
            }
    }
 



/**
 * [tMSSqlRow_9 finally ] stop
 */

	
	/**
	 * [tLogRow_11 finally ] start
	 */

	

	
	
	currentComponent="tLogRow_11";

	

 



/**
 * [tLogRow_11 finally ] stop
 */



				}catch(java.lang.Exception e){	
					//ignore
				}catch(java.lang.Error error){
					//ignore
				}
				resourceMap = null;
			}
		

		globalMap.put("tMSSqlRow_9_SUBPROCESS_STATE", 1);
	}
	


public static class row68Struct implements routines.system.IPersistableRow<row68Struct> {
    final static byte[] commonByteArrayLock_WIPO_PROJECTS_F_IPAS_ENV_CRE = new byte[0];
    static byte[] commonByteArray_WIPO_PROJECTS_F_IPAS_ENV_CRE = new byte[0];

	
			    public String errorCode;

				public String getErrorCode () {
					return this.errorCode;
				}
				
			    public String errorMessage;

				public String getErrorMessage () {
					return this.errorMessage;
				}
				



	private String readString(ObjectInputStream dis) throws IOException{
		String strReturn = null;
		int length = 0;
        length = dis.readInt();
		if (length == -1) {
			strReturn = null;
		} else {
			if(length > commonByteArray_WIPO_PROJECTS_F_IPAS_ENV_CRE.length) {
				if(length < 1024 && commonByteArray_WIPO_PROJECTS_F_IPAS_ENV_CRE.length == 0) {
   					commonByteArray_WIPO_PROJECTS_F_IPAS_ENV_CRE = new byte[1024];
				} else {
   					commonByteArray_WIPO_PROJECTS_F_IPAS_ENV_CRE = new byte[2 * length];
   				}
			}
			dis.readFully(commonByteArray_WIPO_PROJECTS_F_IPAS_ENV_CRE, 0, length);
			strReturn = new String(commonByteArray_WIPO_PROJECTS_F_IPAS_ENV_CRE, 0, length, utf8Charset);
		}
		return strReturn;
	}

    private void writeString(String str, ObjectOutputStream dos) throws IOException{
		if(str == null) {
            dos.writeInt(-1);
		} else {
            byte[] byteArray = str.getBytes(utf8Charset);
	    	dos.writeInt(byteArray.length);
			dos.write(byteArray);
    	}
    }

    public void readData(ObjectInputStream dis) {

		synchronized(commonByteArrayLock_WIPO_PROJECTS_F_IPAS_ENV_CRE) {

        	try {

        		int length = 0;
		
					this.errorCode = readString(dis);
					
					this.errorMessage = readString(dis);
					
        	} catch (IOException e) {
	            throw new RuntimeException(e);

		

        }

		

      }


    }

    public void writeData(ObjectOutputStream dos) {
        try {

		
					// String
				
						writeString(this.errorCode,dos);
					
					// String
				
						writeString(this.errorMessage,dos);
					
        	} catch (IOException e) {
	            throw new RuntimeException(e);
        }


    }


    public String toString() {

		StringBuilder sb = new StringBuilder();
		sb.append(super.toString());
		sb.append("[");
		sb.append("errorCode="+errorCode);
		sb.append(",errorMessage="+errorMessage);
	    sb.append("]");

	    return sb.toString();
    }

    /**
     * Compare keys
     */
    public int compareTo(row68Struct other) {

		int returnValue = -1;
		
	    return returnValue;
    }


    private int checkNullsAndCompare(Object object1, Object object2) {
        int returnValue = 0;
		if (object1 instanceof Comparable && object2 instanceof Comparable) {
            returnValue = ((Comparable) object1).compareTo(object2);
        } else if (object1 != null && object2 != null) {
            returnValue = compareStrings(object1.toString(), object2.toString());
        } else if (object1 == null && object2 != null) {
            returnValue = 1;
        } else if (object1 != null && object2 == null) {
            returnValue = -1;
        } else {
            returnValue = 0;
        }

        return returnValue;
    }

    private int compareStrings(String string1, String string2) {
        return string1.compareTo(string2);
    }


}
public void tMSSqlRow_10Process(final java.util.Map<String, Object> globalMap) throws TalendException {
	globalMap.put("tMSSqlRow_10_SUBPROCESS_STATE", 0);

 final boolean execStat = this.execStat;
	
		String iterateId = "";
	
	
	String currentComponent = "";
	java.util.Map<String, Object> resourceMap = new java.util.HashMap<String, Object>();

	try {
			// TDI-39566 avoid throwing an useless Exception
			boolean resumeIt = true;
			if (globalResumeTicket == false && resumeEntryMethodName != null) {
				String currentMethodName = new java.lang.Exception().getStackTrace()[0].getMethodName();
				resumeIt = resumeEntryMethodName.equals(currentMethodName);
			}
			if (resumeIt || globalResumeTicket) { //start the resume
				globalResumeTicket = true;



		row68Struct row68 = new row68Struct();




	
	/**
	 * [tLogRow_12 begin ] start
	 */

	

	
		
		ok_Hash.put("tLogRow_12", false);
		start_Hash.put("tLogRow_12", System.currentTimeMillis());
		
	
	currentComponent="tLogRow_12";

	
					if(execStat) {
						runStat.updateStatOnConnection(resourceMap,iterateId,0,0,"row68");
					}
				
		int tos_count_tLogRow_12 = 0;
		

	///////////////////////
		


	class Util_tLogRow_12 {
	
		String[] des_top = { ".", "-" };

        String[] des_data = { "-", "+" };

        String[] des_frame = { "|" }; 
        
        public void printLine(StringBuilder sb, int titleWidth, int dataWidth){
        
        	sb.append("+");
			for(int i=0; i<titleWidth+2; i++)
				sb.append("-");
			sb.append("+");
			for(int i=0; i<dataWidth+2; i++)
				sb.append("-");
        	sb.append("+" + "\n");
        }      

		public String print(String[] row, int nbLine){
			
			StringBuilder sb = new StringBuilder();
			
			    String title = "#" + nbLine + ". " + "tLogRow_12";
			    
		
			//step 1: get the max length of all the row[] member;
			int dataWidth = 5;		//the length of the string "value"	
			for(int i=0;i<row.length;i++) {
				if(row[i] == null && 4 > dataWidth) {
					dataWidth = 4;
				}
				else if(row[i] != null && row[i].length()>dataWidth) 
					dataWidth = row[i].length();
			}			
						
			int titleWidth = 12;
			
			int totalWidth = dataWidth + titleWidth + 5;
			
			//step 2: print the header with line number
			sb.append(".");
			for(int i=0 ; i<totalWidth ; i++)
				sb.append("-");			
			sb.append("." + "\n" + "|");
			
			int emptyCenterWidth = (totalWidth-title.length())/2;
			for(int i=0 ; i<emptyCenterWidth; i++)
				sb.append(" ");	
			sb.append(title);
			for(int i=0 ; i<totalWidth - emptyCenterWidth - title.length() ; i++)
				sb.append(" ");	
			sb.append("|" + "\n");
			
			//step 3: print "key" and "value"			
			printLine(sb,titleWidth,dataWidth);
			
			sb.append("|" + " key");
			for(int i=0; i<titleWidth-2; i++)
				sb.append(" ");
        	sb.append("|" + " value");
			for(int i=0; i<dataWidth-4; i++)
				sb.append(" ");
			sb.append("|" + "\n");
			
			printLine(sb,titleWidth,dataWidth);
			
			//step 4: print dataset
			
			//for(int i=0; i<row.length; i++){
				sb.append("| " + "errorCode");
				for(int i=0; i<titleWidth -"errorCode".length()+ 1 ;i++)
					sb.append(" ");
				sb.append("| " + row[0]);
				for(int i=0; row[0] == null && i<dataWidth - 3 || row[0] != null && i<dataWidth -row[0].length()+ 1 ;i++)
					sb.append(" ");
				sb.append("|" + "\n");
			
			//}

			
			//for(int i=0; i<row.length; i++){
				sb.append("| " + "errorMessage");
				for(int i=0; i<titleWidth -"errorMessage".length()+ 1 ;i++)
					sb.append(" ");
				sb.append("| " + row[1]);
				for(int i=0; row[1] == null && i<dataWidth - 3 || row[1] != null && i<dataWidth -row[1].length()+ 1 ;i++)
					sb.append(" ");
				sb.append("|" + "\n");
			
			//}

			
			//step 5: print a line gap
			printLine(sb,titleWidth,dataWidth);
			return sb.toString();

		}


	}

	Util_tLogRow_12 util_tLogRow_12 = new Util_tLogRow_12();




	java.io.PrintStream consoleOut_tLogRow_12 = null;
	if (globalMap.get("tLogRow_CONSOLE")!=null){
        consoleOut_tLogRow_12 = (java.io.PrintStream) globalMap.get("tLogRow_CONSOLE");
    }else{
        consoleOut_tLogRow_12 = new java.io.PrintStream(new java.io.BufferedOutputStream(System.out));
        globalMap.put("tLogRow_CONSOLE",consoleOut_tLogRow_12);
    }

 		StringBuilder strBuffer_tLogRow_12 = null;
		int nb_line_tLogRow_12 = 0;
///////////////////////    			



 



/**
 * [tLogRow_12 begin ] stop
 */



	
	/**
	 * [tMSSqlRow_10 begin ] start
	 */

	

	
		
		ok_Hash.put("tMSSqlRow_10", false);
		start_Hash.put("tMSSqlRow_10", System.currentTimeMillis());
		
	
	currentComponent="tMSSqlRow_10";

	
		int tos_count_tMSSqlRow_10 = 0;
		

	java.sql.Connection conn_tMSSqlRow_10 = null;
	String query_tMSSqlRow_10 = "";
	boolean whetherReject_tMSSqlRow_10 = false;
				conn_tMSSqlRow_10 = (java.sql.Connection)globalMap.get("conn_tMSSqlConnection_4");
			
    resourceMap.put("conn_tMSSqlRow_10", conn_tMSSqlRow_10);
        java.sql.Statement stmt_tMSSqlRow_10 = conn_tMSSqlRow_10.createStatement();
        resourceMap.put("stmt_tMSSqlRow_10", stmt_tMSSqlRow_10);

 



/**
 * [tMSSqlRow_10 begin ] stop
 */
	
	/**
	 * [tMSSqlRow_10 main ] start
	 */

	

	
	
	currentComponent="tMSSqlRow_10";

	

		row68 = null;
		
query_tMSSqlRow_10 = "\nselect  M.*,\n        cast(null as datetime)       FIRST_PRIORITY_DATE,\n        cast(null as numeric(4))     MAIN_OW"
+"NER_ADDR_NBR,\n        cast(null as numeric(10))    MAIN_OWNER_PERSON_NBR,\n        cast(null as numeric(4))     SERVICE"
+"_ADDR_NBR,\n        cast(null as numeric(10))    SERVICE_PERSON_NBR,\n        cast(null as varchar(254)) NICE_CLASS_TXT,"
+"\n        cast(null as numeric(10))    MARK_CODE,\n        cast(null as varchar(8))   PROC_TYP,\n        cast(null as nu"
+"meric(10))    PROC_NBR,\n        cast(null as varchar(8))   STATUS_CODE\ninto	WRK_MARK\nfrom    [" +context.intermediateDB+ "].[dbo].VW_IMPORT_MARK M\nwhere   IND_IMPORT = 8;\n\ncreate index WRK_mark on WRK_mark(file_seq, file_type, file_series"
+", file_nbr);\n\n    \nselect  T.*,\n        cast(null as numeric(10))    PERSON_NBR,\n        cast(null as numeric(4))  "
+"   ADDR_NBR\ninto	WRK_MARK_OWNERS\nfrom    [" +context.intermediateDB+ "].[dbo].VW_IMPORT_MARK_OWNERS T\nwhere   file_nbr = 999999;\n\nalter	table WRK_MARK_OWNERS add rowid INT identity;\n\nc"
+"reate index WRK_mark_owners on WRK_mark_owners(file_seq, file_type, file_series, file_nbr);\n\n\nselect  T.*,\n        c"
+"ast(null as numeric(10))    PERSON_NBR,\n        cast(null as numeric(4))     ADDR_NBR\ninto	WRK_MARK_REPRS\nfrom    [" +context.intermediateDB+ "].[dbo].VW_IMPORT_MARK_REPRS T\nwhere   file_nbr = 999999;\n\nalter	table WRK_MARK_REPRS add rowid INT identity;\n\ncre"
+"ate index WRK_mark_reprs on WRK_mark_reprs(file_seq, file_type, file_series, file_nbr);\n\n    \nselect  T.*,\n        c"
+"ast(null as numeric(22))    PRIORITY_APPL_ID_ALT\ninto	WRK_MARK_PRIORITIES\nfrom    [" +context.intermediateDB+ "].[dbo].VW_IMPORT_MARK_PRIORITIES T\nwhere   file_nbr = 999999;\n\ncreate index WRK_mark_priorities on WRK_mark_priorit"
+"ies(file_seq, file_type, file_series, file_nbr);\n\n\nselect  T.*\ninto	WRK_MARK_NICE_CLASSES\nfrom    [" +context.intermediateDB+ "].[dbo].VW_IMPORT_MARK_NICE_CLASSES T\nwhere   file_nbr = 999999;\n\ncreate index WRK_mark_nice_classes on WRK_mark_NIC"
+"E_CLASSES(file_seq, file_type, file_series, file_nbr);\n\n\nselect  T.*,\n        cast(null as numeric(10))     ACTION_N"
+"BR\ninto	WRK_MARK_ACTIONS\nfrom    [" +context.intermediateDB+ "].[dbo].VW_IMPORT_MARK_ACTIONS T\nwhere   file_nbr = 999999;\n\ncreate index WRK_mark_actions on WRK_mark_actions(file_"
+"seq, file_type, file_series, file_nbr);\n\nalter table WRK_mark_actions \nadd constraint WRK_mark_actions_pk primary key"
+"  (file_seq, file_type, file_series, file_nbr, action_date, action_type);\n\nselect  PERSON_GROUP_CODE, cast(null as num"
+"eric(5)) AGENT_CODE, \n        PERSON_NAME,PERSON_NAME_LANG2, NATIONALITY_COUNTRY_CODE, IND_COMPANY, LEGAL_NATURE,LEGAL_"
+"NATURE_LANG2, LEGAL_ID_TYPE, LEGAL_ID_NBR, INDIVIDUAL_ID_TYPE, INDIVIDUAL_ID_NBR, EMAIL, TELEPHONE, \n        RESIDENCE_"
+"COUNTRY_CODE, STATE_NAME, STATE_CODE,CITY_CODE, CITY_NAME, ADDRESS_ZONE, ADDRESS_STREET, ADDRESS_STREET_LANG2,ZIP_CODE, "
+"\n        PERSON_NBR, ADDR_NBR, 123456789 REF_NBR\ninto	WRK_person_addr\nfrom    WRK_mark_owners T;\n\n/* remove non-nul"
+"l constraint in address street */\nalter table WRK_person_addr alter column ADDRESS_STREET varchar(2000) null;\n\ncreate"
+" index WRK_person_addr on WRK_person_addr(ref_nbr);\n\n\nselect  M.*,\n        cast(null as numeric(10))    APPLICANT_PE"
+"RSON_NBR,\n        cast(null as numeric(4))     APPLICANT_ADDR_NBR,\n        cast(null as varchar(8))   USERDOC_PROC_TYP"
+",\n        cast(null as numeric(10))    USERDOC_PROC_NBR,\n        cast(null as varchar(8))   USERDOC_STATUS_CODE\ninto	"
+"WRK_USERDOC\nfrom    [" +context.intermediateDB+ "].[dbo].VW_IMPORT_USERDOC M\nwhere   IND_IMPORT = 8;\n\nalter	table WRK_USERDOC add rowid INT identity;\n\ncreate index"
+" WRK_userdoc on WRK_userdoc(userdoc_seq, userdoc_series, userdoc_nbr);\n\n\nselect  M.*,\n        cast(null as varchar(8"
+"))   USERDOC_FILE_PROC_TYP,\n        cast(null as numeric(10))    USERDOC_FILE_PROC_NBR,\n        cast(null as varchar(8"
+"))   USERDOC_FILE_STATUS_CODE\ninto	WRK_USERDOC_FILES\nfrom    [" +context.intermediateDB+ "].[dbo].VW_IMPORT_USERDOC_FILES M\nwhere   userdoc_nbr = 999999;\n\ncreate index WRK_userdoc_files on WRK_userdoc_files"
+"(userdoc_seq, userdoc_series, userdoc_nbr);\n\n\nselect  T.*,\n        cast(null as numeric(10))    PERSON_NBR,\n       "
+" cast(null as numeric(4))     ADDR_NBR\ninto	WRK_USERDOC_OWNERS\nfrom    [" +context.intermediateDB+ "].[dbo].VW_IMPORT_USERDOC_OWNERS T\nwhere   userdoc_nbr = 999999;\n\nalter	table WRK_USERDOC_OWNERS add rowid INT ident"
+"ity;\n\ncreate index WRK_userdoc_owners on WRK_userdoc_owners(userdoc_seq, userdoc_series, userdoc_nbr);\n\n\nselect  T."
+"*,\n        cast(null as numeric(10))    PERSON_NBR,\n        cast(null as numeric(4))     ADDR_NBR\ninto	WRK_USERDOC_RE"
+"PRS\nfrom    [" +context.intermediateDB+ "].[dbo].VW_IMPORT_USERDOC_REPRS T\nwhere   userdoc_nbr = 999999;\n\nalter	table WRK_USERDOC_REPRS add rowid INT identit"
+"y;\n\ncreate index WRK_userdoc_reprs on WRK_userdoc_reprs(userdoc_seq, userdoc_series, userdoc_nbr);\n\n\nselect  T.*,\n"
+"        cast(null as numeric(10))     ACTION_NBR\ninto	WRK_USERDOC_ACTIONS\nfrom    [" +context.intermediateDB+ "].[dbo].VW_IMPORT_USERDOC_ACTIONS T\nwhere   userdoc_nbr = 999999;\n\ncreate index WRK_userdoc_actions on WRK_userdoc_a"
+"ctions(userdoc_seq, userdoc_series, userdoc_nbr);\n\nalter table WRK_userdoc_actions \nadd constraint WRK_userdoc_action"
+"s_pk primary key  (userdoc_seq, userdoc_series, userdoc_nbr, action_date, action_type);\n\n/* work tables to monitor exe"
+"cution time */\n\ncreate table WRK_LOG (\n    stage   varchar(200),\n    time    datetime,\n    seconds numeric\n);\n\nC"
+"REATE TABLE WRK_ACTION_OPTIONS\n(   \n	PROC_TYP VARCHAR(4) NOT NULL,\n	PROC_NBR NUMERIC(8)NOT NULL ,\n	ACTION_NBR NUMERI"
+"C(10) NOT NULL,\n	CONSTRAINT WRK_ACTION_OPTIONS_PK PRIMARY KEY (proc_typ,proc_nbr,action_nbr)\n);\n\n/* work tables for "
+"validation */\n\nselect  DOC_ORI, DOC_SERIES, DOC_NBR\ninto	WRK_doc_key\nfrom    [" +context.intermediateDB+ "].[dbo].VW_IMPORT_MARK\nwhere   DOC_NBR = 999999;\n\n\ncreate  index WRK_doc_key on WRK_doc_key(DOC_ORI, DOC_SERIES, DO"
+"C_NBR);\n\n\nselect  FILE_SEQ, FILE_TYPE, FILE_SERIES, FILE_NBR, IND_SERVICE, 999999 count1\ninto	WRK_file_service_count"
+"\nfrom    [" +context.intermediateDB+ "].[dbo].VW_IMPORT_MARK_REPRS\nwhere   file_nbr = 999999;\n\n\ncreate  index WRK_file_service_count on WRK_file_service_"
+"count(FILE_SEQ, FILE_TYPE, FILE_SERIES, FILE_NBR);\n\n\nselect  USERDOC_SEQ, USERDOC_SERIES, USERDOC_NBR, IND_SERVICE, 9"
+"99999 count1\ninto	WRK_userdoc_service_count\nfrom    [" +context.intermediateDB+ "].[dbo].VW_IMPORT_USERDOC_OWNERS\nwhere   userdoc_nbr = 999999;\n\n\ncreate  index WRK_userdoc_service_count on WRK_use"
+"rdoc_service_count(USERDOC_SEQ, USERDOC_SERIES, USERDOC_NBR);\n\n\n\nselect  FILE_SEQ, FILE_TYPE, FILE_SERIES, FILE_NBR,"
+" APPLICATION_ID, 999999 count1\ninto	WRK_file_priority_count\nfrom    [" +context.intermediateDB+ "].[dbo].VW_IMPORT_MARK_PRIORITIES\nwhere   file_nbr = 999999;\n\ncreate  index WRK_file_priority_count on WRK_file_prio"
+"rity_count(FILE_SEQ, FILE_TYPE, FILE_SERIES, FILE_NBR);\n\n\nselect  FILE_SEQ, FILE_TYPE, FILE_SERIES, FILE_NBR, RECEIPT"
+"_NBR, 999999 count1\ninto	WRK_file_payment_count\nfrom    [" +context.intermediateDB+ "].[dbo].VW_IMPORT_MARK_PAYMENTS\nwhere   0 = 1;\n\ncreate  index WRK_file_payment_count on WRK_file_payment_count(FILE_"
+"SEQ, FILE_TYPE, FILE_SERIES, FILE_NBR);\n\n/* IPAS-1273/1341 Added VIENNA_EDITION_CODE for Vienna classification*/\nsele"
+"ct  FILE_SEQ, FILE_TYPE, FILE_SERIES, FILE_NBR, \n        VIENNA_EDITION_CODE, VIENNA_CATEGORY, VIENNA_DIVISION, VIENNA_"
+"SECTION, 999999 count1\ninto	WRK_file_vienna_count\nfrom    [" +context.intermediateDB+ "].[dbo].VW_IMPORT_MARK_VIENNA_CLASSES\nwhere   file_nbr = 999999;\n\n\ncreate  index WRK_file_vienna_count on WRK_file_"
+"vienna_count(FILE_SEQ, FILE_TYPE, FILE_SERIES, FILE_NBR);\n\n/* IPAS-1273/1341 Added NICE_CLASS_VERSION for NICE classif"
+"ication */\nselect  FILE_SEQ, FILE_TYPE, FILE_SERIES, FILE_NBR, NICE_CLASS_VERSION, NICE_CLASS_NBR, 999999 count1\ninto	"
+"WRK_file_nice_count\nfrom    [" +context.intermediateDB+ "].[dbo].VW_IMPORT_MARK_NICE_CLASSES\nwhere   file_nbr = 999999;\n\n\ncreate  index wrk_file_nice_count on wrk_file_nice"
+"_count(FILE_SEQ, FILE_TYPE, FILE_SERIES, FILE_NBR);\n\n\n\n    /* patent work tables to add additional data before inser"
+"tions */\n        select  M.*,\n                cast(null as datetime)          FIRST_PRIORITY_DATE,\n                ca"
+"st(null as datetime)          NOVELTY_DATE,\n                cast(null as numeric(4))     MAIN_OWNER_ADDR_NBR,\n        "
+"        cast(null as numeric(10))    MAIN_OWNER_PERSON_NBR,\n                cast(null as numeric(4))     SERVICE_ADDR_N"
+"BR,\n                cast(null as numeric(10))    SERVICE_PERSON_NBR,\n                cast(null as varchar(8))   PROC_T"
+"YP,\n                cast(null as numeric(10))    PROC_NBR,\n                cast(null as varchar(8))   STATUS_CODE\n   "
+"     into WRK_PATENT\n        from    [" +context.intermediateDB+ "].[dbo].VW_IMPORT_PATENT M\n        where   0 = 1\n;\n\n create index wrk_patent on wrk_patent(file_seq, file_type, fil"
+"e_series, file_nbr)\n;\n\n        select  T.*,\n                cast(null as numeric(10))    PERSON_NBR,\n              "
+"  cast(null as numeric(4))     ADDR_NBR\n				into WRK_PATENT_OWNERS\n        from    [" +context.intermediateDB+ "].[dbo].VW_IMPORT_PATENT_OWNERS T\n        where   0 = 1\n;\n\nalter	table WRK_PATENT_OWNERS add rowid INT identity;\n"
+"\ncreate index wrk_patent_owners on wrk_patent_owners(file_seq, file_type, file_series, file_nbr)\n;\n\n\n        select "
+" T.*,\n                cast(null as numeric(10))    PERSON_NBR,\n                cast(null as numeric(4))     ADDR_NBR\n"
+"				into WRK_PATENT_REPRS	\n        from    [" +context.intermediateDB+ "].[dbo].VW_IMPORT_PATENT_REPRS T\n        where   0 = 1\n;\n\nalter	table WRK_PATENT_REPRS add rowid INT identity;\n\nc"
+"reate index wrk_patent_reprs on wrk_patent_reprs(file_seq, file_type, file_series, file_nbr)\n;\n\n\n        select  T.*"
+",\n                cast(null as numeric(10))    PERSON_NBR,\n                cast(null as numeric(4))     ADDR_NBR\n				"
+"into WRK_PATENT_INVENTORS\n        from    [" +context.intermediateDB+ "].[dbo].VW_IMPORT_PATENT_INVENTORS T\n        where   0 = 1\n;\n\nalter	table WRK_PATENT_INVENTORS add rowid INT identi"
+"ty;\n\ncreate index wrk_patent_inventors on wrk_patent_inventors(file_seq, file_type, file_series, file_nbr)\n;\n\n     "
+"   select  T.*,\n                cast(null as numeric(22))    PRIORITY_APPL_ID_ALT\n				into WRK_PATENT_PRIORITIES\n    "
+"    from    [" +context.intermediateDB+ "].[dbo].VW_IMPORT_PATENT_PRIORITIES T\n        where   0 = 1\n;\n\ncreate index wrk_patent_priorities on wrk_patent_pri"
+"orities(file_seq, file_type, file_series, file_nbr)\n;\n\n        select  T.*,\n                cast(null as numeric(10)"
+")     ACTION_NBR\n				into WRK_PATENT_ACTIONS\n        from    [" +context.intermediateDB+ "].[dbo].VW_IMPORT_PATENT_ACTIONS T\n        where   0 = 1\n;\n\ncreate index wrk_patent_actions on wrk_patent_actions(f"
+"ile_seq, file_type, file_series, file_nbr)\n;\n\n 	/* generic work table to count number of detail records of any type, "
+"using a 20-char DETAIL_CODE column */\n        select  FILE_SEQ, FILE_TYPE, FILE_SERIES, FILE_NBR, cast(null as varchar("
+"20)) DETAIL_CODE, 999999 count1\n	into    wrk_file_detail_count\n        from    [" +context.intermediateDB+ "].[dbo].VW_IMPORT_MARK\n        where   0 = 1\n;\n\n\n\n  create table wrk_mark_export (\n      FILE_SEQ varchar(2)   N"
+"OT NULL ,     \n      FILE_TYP varchar(1)   NOT NULL ,         \n      FILE_SER numeric(4,0)   NOT NULL ,         \n    "
+"  FILE_NBR numeric(10,0)  NOT NULL   \n      )\n;\n	create index wrk_mark_export_pk on wrk_mark_export(file_seq,file_typ"
+",file_ser,file_nbr)\n;\n\n  create table wrk_patent_export(\n      FILE_SEQ varchar(2)   NOT NULL ,     \n      FILE_TYP"
+" varchar(1)   NOT NULL ,         \n      FILE_SER numeric(4,0)   NOT NULL ,         \n      FILE_NBR numeric(10,0)  NOT "
+"NULL   \n      )\n;\n  \n\n  create index wrk_patent_export_pk on wrk_patent_export(file_seq,file_typ,file_ser,file_nbr)"
+"\n;\n\n  create table wrk_userdoc_export(\n      DOC_ORI varchar(4)   NOT NULL ,     \n      DOC_LOG varchar(1)   NOT NU"
+"LL ,         \n      DOC_SER numeric(4,0)   NOT NULL ,         \n      DOC_NBR numeric(15,0)  NOT NULL   \n      )\n;\n "
+" \n  create index wrk_userdoc_export_pk on wrk_userdoc_export(doc_ori,doc_log,doc_ser,doc_nbr)\n;  \n\n\n\n";
whetherReject_tMSSqlRow_10 = false;
globalMap.put("tMSSqlRow_10_QUERY",query_tMSSqlRow_10);
try {
		stmt_tMSSqlRow_10.execute(query_tMSSqlRow_10);
		
	} catch (java.lang.Exception e) {
		whetherReject_tMSSqlRow_10 = true;
		
				row68 = new row68Struct();
				
				row68.errorCode = ((java.sql.SQLException)e).getSQLState();
				row68.errorMessage = e.getMessage() + " - Line: " + tos_count_tMSSqlRow_10;
				
	}
	
	if(!whetherReject_tMSSqlRow_10) {
		
	}
	

 


	tos_count_tMSSqlRow_10++;

/**
 * [tMSSqlRow_10 main ] stop
 */
	
	/**
	 * [tMSSqlRow_10 process_data_begin ] start
	 */

	

	
	
	currentComponent="tMSSqlRow_10";

	

 



/**
 * [tMSSqlRow_10 process_data_begin ] stop
 */
// Start of branch "row68"
if(row68 != null) { 



	
	/**
	 * [tLogRow_12 main ] start
	 */

	

	
	
	currentComponent="tLogRow_12";

	
					if(execStat){
						runStat.updateStatOnConnection(iterateId,1,1
						
							,"row68"
						
						);
					}
					
///////////////////////		
						



				strBuffer_tLogRow_12 = new StringBuilder();




   				
	    		if(row68.errorCode != null) { //              
                    							
       
				strBuffer_tLogRow_12.append(
				                String.valueOf(row68.errorCode)							
				);


							
	    		} //  			

    			strBuffer_tLogRow_12.append("|");
    			


   				
	    		if(row68.errorMessage != null) { //              
                    							
       
				strBuffer_tLogRow_12.append(
				                String.valueOf(row68.errorMessage)							
				);


							
	    		} //  			

				
				String[] row_tLogRow_12 = new String[2];
   				
	    		if(row68.errorCode != null) { //              
                 row_tLogRow_12[0]=    						    
				                String.valueOf(row68.errorCode)			
					          ;	
							
	    		} //			
    			   				
	    		if(row68.errorMessage != null) { //              
                 row_tLogRow_12[1]=    						    
				                String.valueOf(row68.errorMessage)			
					          ;	
							
	    		} //			
    			
				nb_line_tLogRow_12++;
                consoleOut_tLogRow_12.println(util_tLogRow_12.print(row_tLogRow_12,nb_line_tLogRow_12));
                consoleOut_tLogRow_12.flush();
//////

//////                    
                    
///////////////////////    			

 


	tos_count_tLogRow_12++;

/**
 * [tLogRow_12 main ] stop
 */
	
	/**
	 * [tLogRow_12 process_data_begin ] start
	 */

	

	
	
	currentComponent="tLogRow_12";

	

 



/**
 * [tLogRow_12 process_data_begin ] stop
 */
	
	/**
	 * [tLogRow_12 process_data_end ] start
	 */

	

	
	
	currentComponent="tLogRow_12";

	

 



/**
 * [tLogRow_12 process_data_end ] stop
 */

} // End of branch "row68"




	
	/**
	 * [tMSSqlRow_10 process_data_end ] start
	 */

	

	
	
	currentComponent="tMSSqlRow_10";

	

 



/**
 * [tMSSqlRow_10 process_data_end ] stop
 */
	
	/**
	 * [tMSSqlRow_10 end ] start
	 */

	

	
	
	currentComponent="tMSSqlRow_10";

	

	
        stmt_tMSSqlRow_10.close();
        resourceMap.remove("stmt_tMSSqlRow_10");
    resourceMap.put("statementClosed_tMSSqlRow_10", true);
    resourceMap.put("finish_tMSSqlRow_10", true);
 

ok_Hash.put("tMSSqlRow_10", true);
end_Hash.put("tMSSqlRow_10", System.currentTimeMillis());




/**
 * [tMSSqlRow_10 end ] stop
 */

	
	/**
	 * [tLogRow_12 end ] start
	 */

	

	
	
	currentComponent="tLogRow_12";

	


//////
//////
globalMap.put("tLogRow_12_NB_LINE",nb_line_tLogRow_12);

///////////////////////    			

				if(execStat){
			  		runStat.updateStat(resourceMap,iterateId,2,0,"row68");
			  	}
			  	
 

ok_Hash.put("tLogRow_12", true);
end_Hash.put("tLogRow_12", System.currentTimeMillis());




/**
 * [tLogRow_12 end ] stop
 */



				}//end the resume

				
				    			if(resumeEntryMethodName == null || globalResumeTicket){
				    				resumeUtil.addLog("CHECKPOINT", "CONNECTION:SUBJOB_OK:tMSSqlRow_10:OnSubjobOk", "", Thread.currentThread().getId() + "", "", "", "", "", "");
								}	    				    			
					    	
								if(execStat){    	
									runStat.updateStatOnConnection("OnSubjobOk8", 0, "ok");
								} 
							
							tMSSqlRow_7Process(globalMap); 
						



	
			}catch(java.lang.Exception e){	
				
				TalendException te = new TalendException(e, currentComponent, globalMap);
				
				throw te;
			}catch(java.lang.Error error){	
				
					runStat.stopThreadStat();
				
				throw error;
			}finally{
				
				try{
					
	
	/**
	 * [tMSSqlRow_10 finally ] start
	 */

	

	
	
	currentComponent="tMSSqlRow_10";

	

    if (resourceMap.get("statementClosed_tMSSqlRow_10") == null) {
            java.sql.Statement stmtToClose_tMSSqlRow_10 = null;
            if ((stmtToClose_tMSSqlRow_10 = (java.sql.Statement) resourceMap.remove("stmt_tMSSqlRow_10")) != null) {
                stmtToClose_tMSSqlRow_10.close();
            }
    }
 



/**
 * [tMSSqlRow_10 finally ] stop
 */

	
	/**
	 * [tLogRow_12 finally ] start
	 */

	

	
	
	currentComponent="tLogRow_12";

	

 



/**
 * [tLogRow_12 finally ] stop
 */



				}catch(java.lang.Exception e){	
					//ignore
				}catch(java.lang.Error error){
					//ignore
				}
				resourceMap = null;
			}
		

		globalMap.put("tMSSqlRow_10_SUBPROCESS_STATE", 1);
	}
	


public static class row70Struct implements routines.system.IPersistableRow<row70Struct> {
    final static byte[] commonByteArrayLock_WIPO_PROJECTS_F_IPAS_ENV_CRE = new byte[0];
    static byte[] commonByteArray_WIPO_PROJECTS_F_IPAS_ENV_CRE = new byte[0];

	
			    public String errorCode;

				public String getErrorCode () {
					return this.errorCode;
				}
				
			    public String errorMessage;

				public String getErrorMessage () {
					return this.errorMessage;
				}
				



	private String readString(ObjectInputStream dis) throws IOException{
		String strReturn = null;
		int length = 0;
        length = dis.readInt();
		if (length == -1) {
			strReturn = null;
		} else {
			if(length > commonByteArray_WIPO_PROJECTS_F_IPAS_ENV_CRE.length) {
				if(length < 1024 && commonByteArray_WIPO_PROJECTS_F_IPAS_ENV_CRE.length == 0) {
   					commonByteArray_WIPO_PROJECTS_F_IPAS_ENV_CRE = new byte[1024];
				} else {
   					commonByteArray_WIPO_PROJECTS_F_IPAS_ENV_CRE = new byte[2 * length];
   				}
			}
			dis.readFully(commonByteArray_WIPO_PROJECTS_F_IPAS_ENV_CRE, 0, length);
			strReturn = new String(commonByteArray_WIPO_PROJECTS_F_IPAS_ENV_CRE, 0, length, utf8Charset);
		}
		return strReturn;
	}

    private void writeString(String str, ObjectOutputStream dos) throws IOException{
		if(str == null) {
            dos.writeInt(-1);
		} else {
            byte[] byteArray = str.getBytes(utf8Charset);
	    	dos.writeInt(byteArray.length);
			dos.write(byteArray);
    	}
    }

    public void readData(ObjectInputStream dis) {

		synchronized(commonByteArrayLock_WIPO_PROJECTS_F_IPAS_ENV_CRE) {

        	try {

        		int length = 0;
		
					this.errorCode = readString(dis);
					
					this.errorMessage = readString(dis);
					
        	} catch (IOException e) {
	            throw new RuntimeException(e);

		

        }

		

      }


    }

    public void writeData(ObjectOutputStream dos) {
        try {

		
					// String
				
						writeString(this.errorCode,dos);
					
					// String
				
						writeString(this.errorMessage,dos);
					
        	} catch (IOException e) {
	            throw new RuntimeException(e);
        }


    }


    public String toString() {

		StringBuilder sb = new StringBuilder();
		sb.append(super.toString());
		sb.append("[");
		sb.append("errorCode="+errorCode);
		sb.append(",errorMessage="+errorMessage);
	    sb.append("]");

	    return sb.toString();
    }

    /**
     * Compare keys
     */
    public int compareTo(row70Struct other) {

		int returnValue = -1;
		
	    return returnValue;
    }


    private int checkNullsAndCompare(Object object1, Object object2) {
        int returnValue = 0;
		if (object1 instanceof Comparable && object2 instanceof Comparable) {
            returnValue = ((Comparable) object1).compareTo(object2);
        } else if (object1 != null && object2 != null) {
            returnValue = compareStrings(object1.toString(), object2.toString());
        } else if (object1 == null && object2 != null) {
            returnValue = 1;
        } else if (object1 != null && object2 == null) {
            returnValue = -1;
        } else {
            returnValue = 0;
        }

        return returnValue;
    }

    private int compareStrings(String string1, String string2) {
        return string1.compareTo(string2);
    }


}

public static class row7Struct implements routines.system.IPersistableRow<row7Struct> {
    final static byte[] commonByteArrayLock_WIPO_PROJECTS_F_IPAS_ENV_CRE = new byte[0];
    static byte[] commonByteArray_WIPO_PROJECTS_F_IPAS_ENV_CRE = new byte[0];

	



    public void readData(ObjectInputStream dis) {

		synchronized(commonByteArrayLock_WIPO_PROJECTS_F_IPAS_ENV_CRE) {

        	try {

        		int length = 0;
		

		

        }

		
			finally {}
		

      }


    }

    public void writeData(ObjectOutputStream dos) {
        try {

		
        }

			finally {}
		

    }


    public String toString() {

		StringBuilder sb = new StringBuilder();
		sb.append(super.toString());
		sb.append("[");
	    sb.append("]");

	    return sb.toString();
    }

    /**
     * Compare keys
     */
    public int compareTo(row7Struct other) {

		int returnValue = -1;
		
	    return returnValue;
    }


    private int checkNullsAndCompare(Object object1, Object object2) {
        int returnValue = 0;
		if (object1 instanceof Comparable && object2 instanceof Comparable) {
            returnValue = ((Comparable) object1).compareTo(object2);
        } else if (object1 != null && object2 != null) {
            returnValue = compareStrings(object1.toString(), object2.toString());
        } else if (object1 == null && object2 != null) {
            returnValue = 1;
        } else if (object1 != null && object2 == null) {
            returnValue = -1;
        } else {
            returnValue = 0;
        }

        return returnValue;
    }

    private int compareStrings(String string1, String string2) {
        return string1.compareTo(string2);
    }


}

public static class row69Struct implements routines.system.IPersistableRow<row69Struct> {
    final static byte[] commonByteArrayLock_WIPO_PROJECTS_F_IPAS_ENV_CRE = new byte[0];
    static byte[] commonByteArray_WIPO_PROJECTS_F_IPAS_ENV_CRE = new byte[0];

	
			    public String errorCode;

				public String getErrorCode () {
					return this.errorCode;
				}
				
			    public String errorMessage;

				public String getErrorMessage () {
					return this.errorMessage;
				}
				



	private String readString(ObjectInputStream dis) throws IOException{
		String strReturn = null;
		int length = 0;
        length = dis.readInt();
		if (length == -1) {
			strReturn = null;
		} else {
			if(length > commonByteArray_WIPO_PROJECTS_F_IPAS_ENV_CRE.length) {
				if(length < 1024 && commonByteArray_WIPO_PROJECTS_F_IPAS_ENV_CRE.length == 0) {
   					commonByteArray_WIPO_PROJECTS_F_IPAS_ENV_CRE = new byte[1024];
				} else {
   					commonByteArray_WIPO_PROJECTS_F_IPAS_ENV_CRE = new byte[2 * length];
   				}
			}
			dis.readFully(commonByteArray_WIPO_PROJECTS_F_IPAS_ENV_CRE, 0, length);
			strReturn = new String(commonByteArray_WIPO_PROJECTS_F_IPAS_ENV_CRE, 0, length, utf8Charset);
		}
		return strReturn;
	}

    private void writeString(String str, ObjectOutputStream dos) throws IOException{
		if(str == null) {
            dos.writeInt(-1);
		} else {
            byte[] byteArray = str.getBytes(utf8Charset);
	    	dos.writeInt(byteArray.length);
			dos.write(byteArray);
    	}
    }

    public void readData(ObjectInputStream dis) {

		synchronized(commonByteArrayLock_WIPO_PROJECTS_F_IPAS_ENV_CRE) {

        	try {

        		int length = 0;
		
					this.errorCode = readString(dis);
					
					this.errorMessage = readString(dis);
					
        	} catch (IOException e) {
	            throw new RuntimeException(e);

		

        }

		

      }


    }

    public void writeData(ObjectOutputStream dos) {
        try {

		
					// String
				
						writeString(this.errorCode,dos);
					
					// String
				
						writeString(this.errorMessage,dos);
					
        	} catch (IOException e) {
	            throw new RuntimeException(e);
        }


    }


    public String toString() {

		StringBuilder sb = new StringBuilder();
		sb.append(super.toString());
		sb.append("[");
		sb.append("errorCode="+errorCode);
		sb.append(",errorMessage="+errorMessage);
	    sb.append("]");

	    return sb.toString();
    }

    /**
     * Compare keys
     */
    public int compareTo(row69Struct other) {

		int returnValue = -1;
		
	    return returnValue;
    }


    private int checkNullsAndCompare(Object object1, Object object2) {
        int returnValue = 0;
		if (object1 instanceof Comparable && object2 instanceof Comparable) {
            returnValue = ((Comparable) object1).compareTo(object2);
        } else if (object1 != null && object2 != null) {
            returnValue = compareStrings(object1.toString(), object2.toString());
        } else if (object1 == null && object2 != null) {
            returnValue = 1;
        } else if (object1 != null && object2 == null) {
            returnValue = -1;
        } else {
            returnValue = 0;
        }

        return returnValue;
    }

    private int compareStrings(String string1, String string2) {
        return string1.compareTo(string2);
    }


}
public void tMSSqlRow_7Process(final java.util.Map<String, Object> globalMap) throws TalendException {
	globalMap.put("tMSSqlRow_7_SUBPROCESS_STATE", 0);

 final boolean execStat = this.execStat;
	
		String iterateId = "";
	
	
	String currentComponent = "";
	java.util.Map<String, Object> resourceMap = new java.util.HashMap<String, Object>();

	try {
			// TDI-39566 avoid throwing an useless Exception
			boolean resumeIt = true;
			if (globalResumeTicket == false && resumeEntryMethodName != null) {
				String currentMethodName = new java.lang.Exception().getStackTrace()[0].getMethodName();
				resumeIt = resumeEntryMethodName.equals(currentMethodName);
			}
			if (resumeIt || globalResumeTicket) { //start the resume
				globalResumeTicket = true;



		row7Struct row7 = new row7Struct();
row70Struct row70 = new row70Struct();
row69Struct row69 = new row69Struct();





	
	/**
	 * [tLogRow_10 begin ] start
	 */

	

	
		
		ok_Hash.put("tLogRow_10", false);
		start_Hash.put("tLogRow_10", System.currentTimeMillis());
		
	
	currentComponent="tLogRow_10";

	
					if(execStat) {
						runStat.updateStatOnConnection(resourceMap,iterateId,0,0,"row70");
					}
				
		int tos_count_tLogRow_10 = 0;
		

	///////////////////////
		


	class Util_tLogRow_10 {
	
		String[] des_top = { ".", "-" };

        String[] des_data = { "-", "+" };

        String[] des_frame = { "|" }; 
        
        public void printLine(StringBuilder sb, int titleWidth, int dataWidth){
        
        	sb.append("+");
			for(int i=0; i<titleWidth+2; i++)
				sb.append("-");
			sb.append("+");
			for(int i=0; i<dataWidth+2; i++)
				sb.append("-");
        	sb.append("+" + "\n");
        }      

		public String print(String[] row, int nbLine){
			
			StringBuilder sb = new StringBuilder();
			
			    String title = "#" + nbLine + ". " + "tLogRow_10";
			    
		
			//step 1: get the max length of all the row[] member;
			int dataWidth = 5;		//the length of the string "value"	
			for(int i=0;i<row.length;i++) {
				if(row[i] == null && 4 > dataWidth) {
					dataWidth = 4;
				}
				else if(row[i] != null && row[i].length()>dataWidth) 
					dataWidth = row[i].length();
			}			
						
			int titleWidth = 12;
			
			int totalWidth = dataWidth + titleWidth + 5;
			
			//step 2: print the header with line number
			sb.append(".");
			for(int i=0 ; i<totalWidth ; i++)
				sb.append("-");			
			sb.append("." + "\n" + "|");
			
			int emptyCenterWidth = (totalWidth-title.length())/2;
			for(int i=0 ; i<emptyCenterWidth; i++)
				sb.append(" ");	
			sb.append(title);
			for(int i=0 ; i<totalWidth - emptyCenterWidth - title.length() ; i++)
				sb.append(" ");	
			sb.append("|" + "\n");
			
			//step 3: print "key" and "value"			
			printLine(sb,titleWidth,dataWidth);
			
			sb.append("|" + " key");
			for(int i=0; i<titleWidth-2; i++)
				sb.append(" ");
        	sb.append("|" + " value");
			for(int i=0; i<dataWidth-4; i++)
				sb.append(" ");
			sb.append("|" + "\n");
			
			printLine(sb,titleWidth,dataWidth);
			
			//step 4: print dataset
			
			//for(int i=0; i<row.length; i++){
				sb.append("| " + "errorCode");
				for(int i=0; i<titleWidth -"errorCode".length()+ 1 ;i++)
					sb.append(" ");
				sb.append("| " + row[0]);
				for(int i=0; row[0] == null && i<dataWidth - 3 || row[0] != null && i<dataWidth -row[0].length()+ 1 ;i++)
					sb.append(" ");
				sb.append("|" + "\n");
			
			//}

			
			//for(int i=0; i<row.length; i++){
				sb.append("| " + "errorMessage");
				for(int i=0; i<titleWidth -"errorMessage".length()+ 1 ;i++)
					sb.append(" ");
				sb.append("| " + row[1]);
				for(int i=0; row[1] == null && i<dataWidth - 3 || row[1] != null && i<dataWidth -row[1].length()+ 1 ;i++)
					sb.append(" ");
				sb.append("|" + "\n");
			
			//}

			
			//step 5: print a line gap
			printLine(sb,titleWidth,dataWidth);
			return sb.toString();

		}


	}

	Util_tLogRow_10 util_tLogRow_10 = new Util_tLogRow_10();




	java.io.PrintStream consoleOut_tLogRow_10 = null;
	if (globalMap.get("tLogRow_CONSOLE")!=null){
        consoleOut_tLogRow_10 = (java.io.PrintStream) globalMap.get("tLogRow_CONSOLE");
    }else{
        consoleOut_tLogRow_10 = new java.io.PrintStream(new java.io.BufferedOutputStream(System.out));
        globalMap.put("tLogRow_CONSOLE",consoleOut_tLogRow_10);
    }

 		StringBuilder strBuffer_tLogRow_10 = null;
		int nb_line_tLogRow_10 = 0;
///////////////////////    			



 



/**
 * [tLogRow_10 begin ] stop
 */



	
	/**
	 * [tMSSqlRow_8 begin ] start
	 */

	

	
		
		ok_Hash.put("tMSSqlRow_8", false);
		start_Hash.put("tMSSqlRow_8", System.currentTimeMillis());
		
	
	currentComponent="tMSSqlRow_8";

	
					if(execStat) {
						runStat.updateStatOnConnection(resourceMap,iterateId,0,0,"row7");
					}
				
		int tos_count_tMSSqlRow_8 = 0;
		

	java.sql.Connection conn_tMSSqlRow_8 = null;
	String query_tMSSqlRow_8 = "";
	boolean whetherReject_tMSSqlRow_8 = false;
				conn_tMSSqlRow_8 = (java.sql.Connection)globalMap.get("conn_tMSSqlConnection_4");
			
    resourceMap.put("conn_tMSSqlRow_8", conn_tMSSqlRow_8);
        java.sql.Statement stmt_tMSSqlRow_8 = conn_tMSSqlRow_8.createStatement();
        resourceMap.put("stmt_tMSSqlRow_8", stmt_tMSSqlRow_8);

 



/**
 * [tMSSqlRow_8 begin ] stop
 */




	
	/**
	 * [tLogRow_9 begin ] start
	 */

	

	
		
		ok_Hash.put("tLogRow_9", false);
		start_Hash.put("tLogRow_9", System.currentTimeMillis());
		
	
	currentComponent="tLogRow_9";

	
					if(execStat) {
						runStat.updateStatOnConnection(resourceMap,iterateId,0,0,"row69");
					}
				
		int tos_count_tLogRow_9 = 0;
		

	///////////////////////
		


	class Util_tLogRow_9 {
	
		String[] des_top = { ".", "-" };

        String[] des_data = { "-", "+" };

        String[] des_frame = { "|" }; 
        
        public void printLine(StringBuilder sb, int titleWidth, int dataWidth){
        
        	sb.append("+");
			for(int i=0; i<titleWidth+2; i++)
				sb.append("-");
			sb.append("+");
			for(int i=0; i<dataWidth+2; i++)
				sb.append("-");
        	sb.append("+" + "\n");
        }      

		public String print(String[] row, int nbLine){
			
			StringBuilder sb = new StringBuilder();
			
			    String title = "#" + nbLine + ". " + "tLogRow_9";
			    
		
			//step 1: get the max length of all the row[] member;
			int dataWidth = 5;		//the length of the string "value"	
			for(int i=0;i<row.length;i++) {
				if(row[i] == null && 4 > dataWidth) {
					dataWidth = 4;
				}
				else if(row[i] != null && row[i].length()>dataWidth) 
					dataWidth = row[i].length();
			}			
						
			int titleWidth = 12;
			
			int totalWidth = dataWidth + titleWidth + 5;
			
			//step 2: print the header with line number
			sb.append(".");
			for(int i=0 ; i<totalWidth ; i++)
				sb.append("-");			
			sb.append("." + "\n" + "|");
			
			int emptyCenterWidth = (totalWidth-title.length())/2;
			for(int i=0 ; i<emptyCenterWidth; i++)
				sb.append(" ");	
			sb.append(title);
			for(int i=0 ; i<totalWidth - emptyCenterWidth - title.length() ; i++)
				sb.append(" ");	
			sb.append("|" + "\n");
			
			//step 3: print "key" and "value"			
			printLine(sb,titleWidth,dataWidth);
			
			sb.append("|" + " key");
			for(int i=0; i<titleWidth-2; i++)
				sb.append(" ");
        	sb.append("|" + " value");
			for(int i=0; i<dataWidth-4; i++)
				sb.append(" ");
			sb.append("|" + "\n");
			
			printLine(sb,titleWidth,dataWidth);
			
			//step 4: print dataset
			
			//for(int i=0; i<row.length; i++){
				sb.append("| " + "errorCode");
				for(int i=0; i<titleWidth -"errorCode".length()+ 1 ;i++)
					sb.append(" ");
				sb.append("| " + row[0]);
				for(int i=0; row[0] == null && i<dataWidth - 3 || row[0] != null && i<dataWidth -row[0].length()+ 1 ;i++)
					sb.append(" ");
				sb.append("|" + "\n");
			
			//}

			
			//for(int i=0; i<row.length; i++){
				sb.append("| " + "errorMessage");
				for(int i=0; i<titleWidth -"errorMessage".length()+ 1 ;i++)
					sb.append(" ");
				sb.append("| " + row[1]);
				for(int i=0; row[1] == null && i<dataWidth - 3 || row[1] != null && i<dataWidth -row[1].length()+ 1 ;i++)
					sb.append(" ");
				sb.append("|" + "\n");
			
			//}

			
			//step 5: print a line gap
			printLine(sb,titleWidth,dataWidth);
			return sb.toString();

		}


	}

	Util_tLogRow_9 util_tLogRow_9 = new Util_tLogRow_9();




	java.io.PrintStream consoleOut_tLogRow_9 = null;
	if (globalMap.get("tLogRow_CONSOLE")!=null){
        consoleOut_tLogRow_9 = (java.io.PrintStream) globalMap.get("tLogRow_CONSOLE");
    }else{
        consoleOut_tLogRow_9 = new java.io.PrintStream(new java.io.BufferedOutputStream(System.out));
        globalMap.put("tLogRow_CONSOLE",consoleOut_tLogRow_9);
    }

 		StringBuilder strBuffer_tLogRow_9 = null;
		int nb_line_tLogRow_9 = 0;
///////////////////////    			



 



/**
 * [tLogRow_9 begin ] stop
 */



	
	/**
	 * [tMSSqlRow_7 begin ] start
	 */

	

	
		
		ok_Hash.put("tMSSqlRow_7", false);
		start_Hash.put("tMSSqlRow_7", System.currentTimeMillis());
		
	
	currentComponent="tMSSqlRow_7";

	
		int tos_count_tMSSqlRow_7 = 0;
		

	java.sql.Connection conn_tMSSqlRow_7 = null;
	String query_tMSSqlRow_7 = "";
	boolean whetherReject_tMSSqlRow_7 = false;
				conn_tMSSqlRow_7 = (java.sql.Connection)globalMap.get("conn_tMSSqlConnection_4");
			
    resourceMap.put("conn_tMSSqlRow_7", conn_tMSSqlRow_7);
        java.sql.Statement stmt_tMSSqlRow_7 = conn_tMSSqlRow_7.createStatement();
        resourceMap.put("stmt_tMSSqlRow_7", stmt_tMSSqlRow_7);

 



/**
 * [tMSSqlRow_7 begin ] stop
 */
	
	/**
	 * [tMSSqlRow_7 main ] start
	 */

	

	
	
	currentComponent="tMSSqlRow_7";

	

		row7 = null;
		
		row69 = null;
		
query_tMSSqlRow_7 = "If Exists ( SELECT name \n            FROM sysobjects  \n            WHERE name = 'ImportAgentValidate'\n            AN"
+"D type = 'P')\n	DROP PROCEDURE ImportAgentValidate";
whetherReject_tMSSqlRow_7 = false;
globalMap.put("tMSSqlRow_7_QUERY",query_tMSSqlRow_7);
try {
		stmt_tMSSqlRow_7.execute(query_tMSSqlRow_7);
		
	} catch (java.lang.Exception e) {
		whetherReject_tMSSqlRow_7 = true;
		
				row69 = new row69Struct();
				
				row69.errorCode = ((java.sql.SQLException)e).getSQLState();
				row69.errorMessage = e.getMessage() + " - Line: " + tos_count_tMSSqlRow_7;
				
	}
	
	if(!whetherReject_tMSSqlRow_7) {
		
					row7 = new row7Struct();
					
	}
	

 


	tos_count_tMSSqlRow_7++;

/**
 * [tMSSqlRow_7 main ] stop
 */
	
	/**
	 * [tMSSqlRow_7 process_data_begin ] start
	 */

	

	
	
	currentComponent="tMSSqlRow_7";

	

 



/**
 * [tMSSqlRow_7 process_data_begin ] stop
 */
// Start of branch "row7"
if(row7 != null) { 
			row70 = null;



	
	/**
	 * [tMSSqlRow_8 main ] start
	 */

	

	
	
	currentComponent="tMSSqlRow_8";

	
					if(execStat){
						runStat.updateStatOnConnection(iterateId,1,1
						
							,"row7"
						
						);
					}
					

		row70 = null;
		
query_tMSSqlRow_8 = "CREATE PROCEDURE ImportAgentValidate\nAS \n	BEGIN\n		SET NOCOUNT ON\n		\n		/* Procedure name: ImportAgentValidate\n		In"
+"put:  IPAS database and import tables not imported (i.e. IND_IMPORT not 1)\n		Output: if errors, validation flag set to "
+"2 and error messages in  ["+ context.intermediateDB + "].[dbo].VW_IMPORT_AGENT_RESULT\n		if OK, validation flag set to 9\n		*/\n		\n		/* flag all pending agents as to be vali"
+"dated */\n		UPDATE   ["+ context.intermediateDB + "].[dbo].VW_import_agent   \n		SET	ind_import = 0 \n		WHERE  ind_import  is null\n		 OR	ind_import  not in ( 0  , 1  ) "
+"\n		\n		/* delete prior errors */\n		DELETE FROM    ["+ context.intermediateDB + "].[dbo].VW_IMPORT_AGENT_RESULT    \n		\n		/* AGENT_CODE: if already exists in IP_AGENT, message ?Agent already exists i"
+"n the database? */\n		INSERT INTO   ["+ context.intermediateDB + "].[dbo].VW_IMPORT_AGENT_RESULT   \n				( agent_code , \n				ind_import , \n				msg_import )  \n		SELECT\n				 agent_cod"
+"e,\n				 2,\n				 'Agent already exists in the database'\n		FROM   ["+ context.intermediateDB + "].[dbo].VW_import_agent \n		WHERE	 ind_import  = 0\n		 AND	AGENT_CODE  in\n			(\n		 	SELECT AGENT_CODE\n			FROM  IP_AGE"
+"NT \n			)\n		\n		/* NATIONALITY_COUNTRY_CODE: if not exists in CF_GEO_COUNTRY, message ?Invalid agent nationality countr"
+"y code? */\n		INSERT INTO   ["+ context.intermediateDB + "].[dbo].VW_IMPORT_AGENT_RESULT   \n				( agent_code , \n				ind_import , \n				msg_import )  \n		SELECT\n				 T.agent_c"
+"ode,\n				 2,\n				 'Invalid agent nationality country code'\n		FROM   ["+ context.intermediateDB + "].[dbo].VW_import_agent_persons T JOIN  ["+ context.intermediateDB + "].[dbo].VW_import_agent M ON T.agent_code  = M.agent_code  \n		WHERE	 ind_import  = 0\n		 AND	NATIONALITY_COUNTRY_CODE "
+"COLLATE DATABASE_DEFAULT not in\n			(\n		 	SELECT COUNTRY_CODE\n			FROM  cf_geo_country \n			)\n		\n		/* LEGAL_NATURE: i"
+"f not null and IND_COMPANY = 0, message ?Agent legal nature only applies when the person is a company? */\n		INSERT INTO"
+"   ["+ context.intermediateDB + "].[dbo].VW_IMPORT_AGENT_RESULT   \n				( agent_code , \n				ind_import , \n				msg_import )  \n		SELECT\n				 T.agent_c"
+"ode,\n				 2,\n				 'Agent legal nature only applies when the person is a company'\n		FROM   ["+ context.intermediateDB + "].[dbo].VW_import_agent_persons T JOIN  ["+ context.intermediateDB + "].[dbo].VW_import_agent M ON T.agent_code  = M.agent_code  \n		WHERE	 ind_import  = 0\n		 AND	LEGAL_NATURE  is not null"
+"\n		 AND	IND_COMPANY  = 0\n		\n		/* LEGAL_ID_TYPE: if not null and not exists if CF_PERSON_ID_TYPE with IND_GENERAL_ID ="
+" ?S?, \n		       message ?Invalid agent legal id type? */\n		INSERT INTO   ["+ context.intermediateDB + "].[dbo].VW_IMPORT_AGENT_RESULT   \n				( agent_code , \n				ind_import , \n				msg_import )  \n		SELECT\n				 T.agent_c"
+"ode,\n				 2,\n				 'Invalid agent legal id type'\n		FROM   ["+ context.intermediateDB + "].[dbo].VW_import_agent_persons T JOIN  ["+ context.intermediateDB + "].[dbo].VW_import_agent M ON T.agent_code  = M.agent_code  \n		WHERE	 ind_import  = 0\n		 AND	LEGAL_ID_TYPE is not null"
+"\n		 AND	LEGAL_ID_TYPE COLLATE DATABASE_DEFAULT not in\n			(\n		 	SELECT PERSON_ID_TYP\n			FROM  CF_PERSON_ID_TYPE \n			"
+"WHERE	 IND_GENERAL_ID  = 'S'\n			)\n		\n		/* INDIVIDUAL_ID_TYPE: if not null and not exists if CF_PERSON_ID_TYPE with IN"
+"D_INDIVIDUAL_ID = ?S?, \n		       message ?Invalid agent individual id type? */\n		INSERT INTO   ["+ context.intermediateDB + "].[dbo].VW_IMPORT_AGENT_RESULT   \n				( agent_code , \n				ind_import , \n				msg_import )  \n		SELECT\n				 T.agent_c"
+"ode,\n				 2,\n				 'Invalid agent individual id type'\n		FROM   ["+ context.intermediateDB + "].[dbo].VW_import_agent_persons T JOIN  ["+ context.intermediateDB + "].[dbo].VW_import_agent M ON T.agent_code  = M.agent_code  \n		WHERE	 ind_import  = 0\n		 AND	INDIVIDUAL_ID_TYPE  is no"
+"t null\n		 AND	INDIVIDUAL_ID_TYPE  COLLATE DATABASE_DEFAULT not in\n			(\n		 	SELECT PERSON_ID_TYP\n			FROM  CF_PERSON_I"
+"D_TYPE \n			WHERE	 IND_INDIVIDUAL_ID  = 'S'\n			)\n		\n		/* If LEGAL_ID_TYPE is not null and LEGAL_ID_NBR is null, messa"
+"ge ?Missing agent legal id number? */\n		INSERT INTO   ["+ context.intermediateDB + "].[dbo].VW_IMPORT_AGENT_RESULT   \n				( agent_code , \n				ind_import , \n				msg_import )  \n		SELECT\n				 T.agent_c"
+"ode,\n				 2,\n				 'Missing agent legal id number'\n		FROM   ["+ context.intermediateDB + "].[dbo].VW_import_agent_persons T JOIN  ["+ context.intermediateDB + "].[dbo].VW_import_agent M ON T.agent_code  = M.agent_code  \n		WHERE	 ind_import  = 0\n		 AND	LEGAL_ID_TYPE  is not nul"
+"l\n		 AND	LEGAL_ID_NBR  is null\n		\n		/* If LEGAL_ID_TYPE is null and LEGAL_ID_NBR is not null, message ?Missing agent "
+"legal id type? */\n		INSERT INTO   ["+ context.intermediateDB + "].[dbo].VW_IMPORT_AGENT_RESULT   \n				( agent_code , \n				ind_import , \n				msg_import )  \n		SELECT\n				 T.agent_c"
+"ode,\n				 2,\n				 'Missing agent legal id type'\n		FROM   ["+ context.intermediateDB + "].[dbo].VW_import_agent_persons T JOIN  ["+ context.intermediateDB + "].[dbo].VW_import_agent M ON T.agent_code  = M.agent_code  \n		WHERE	 ind_import  = 0\n		 AND	LEGAL_ID_TYPE  is null\n	"
+"	 AND	LEGAL_ID_NBR  is not null\n		\n		/* If INDIVIDUAL_ID_TYPE is not null and INDIVIDUAL_ID_NBR is null, message ?Miss"
+"ing agent individual id number? */\n		INSERT INTO   ["+ context.intermediateDB + "].[dbo].VW_IMPORT_AGENT_RESULT   \n				( agent_code , \n				ind_import , \n				msg_import )  \n		SELECT\n				 T.agent_c"
+"ode,\n				 2,\n				 'Missing agent individual id number'\n		FROM   ["+ context.intermediateDB + "].[dbo].VW_import_agent_persons T JOIN  ["+ context.intermediateDB + "].[dbo].VW_import_agent M ON T.agent_code  = M.agent_code  \n		WHERE	 ind_import  = 0\n		 AND	INDIVIDUAL_ID_TYPE  is no"
+"t null\n		 AND	INDIVIDUAL_ID_NBR  is null\n		\n		/* If INDIVIDUAL_ID_TYPE is null and INDIVIDUAL_ID_NBR is not null, mes"
+"sage ?Missing agent individual id type? */\n		INSERT INTO   ["+ context.intermediateDB + "].[dbo].VW_IMPORT_AGENT_RESULT   \n				( agent_code , \n				ind_import , \n				msg_import )  \n		SELECT\n				 T.agent_c"
+"ode,\n				 2,\n				 'Missing agent individual id type'\n		FROM   ["+ context.intermediateDB + "].[dbo].VW_import_agent_persons T JOIN  ["+ context.intermediateDB + "].[dbo].VW_import_agent M ON T.agent_code  = M.agent_code  \n		WHERE	 ind_import  = 0\n		 AND	INDIVIDUAL_ID_TYPE  is nu"
+"ll\n		 AND	INDIVIDUAL_ID_NBR  is not null\n		\n		/* RESIDENCE_COUNTRY_CODE: if not exists in CF_GEO_COUNTRY, message ?In"
+"valid agent residence country code? */\n		INSERT INTO   ["+ context.intermediateDB + "].[dbo].VW_IMPORT_AGENT_RESULT   \n				( agent_code , \n				ind_import , \n				msg_import )  \n		SELECT\n				 T.agent_c"
+"ode,\n				 2,\n				 'Invalid agent residence country code'\n		FROM   ["+ context.intermediateDB + "].[dbo].VW_import_agent_persons T JOIN  ["+ context.intermediateDB + "].[dbo].VW_import_agent M ON T.agent_code  = M.agent_code  \n		WHERE	 ind_import  = 0\n		 AND	RESIDENCE_COUNTRY_CODE CO"
+"LLATE DATABASE_DEFAULT not in\n			(\n		 	SELECT COUNTRY_CODE\n			FROM  cf_geo_country \n			)\n		\n		/* STATE_CODE: if no"
+"t null and not exists RESIDENCE_COUNTRY_CODE / STATE_CODE in CF_GEO_STATE, \n		       message ?Invalid agent residence s"
+"tate code? */\n		INSERT INTO   ["+ context.intermediateDB + "].[dbo].VW_IMPORT_AGENT_RESULT   \n				( agent_code , \n				ind_import , \n				msg_import )  \n		SELECT\n				 T.agent_c"
+"ode,\n				 2,\n				 'Invalid agent residence state code'\n		FROM   ["+ context.intermediateDB + "].[dbo].VW_import_agent_persons T JOIN  ["+ context.intermediateDB + "].[dbo].VW_import_agent M ON T.agent_code  = M.agent_code  \n		WHERE	 ind_import  = 0\n		 AND	STATE_CODE  is not null\n"
+"		 AND	 NOT EXISTS\n			(\n		 	SELECT\n					 cf_geo_state.COUNTRY_CODE,\n					 cf_geo_state.STATE_CODE\n			FROM  cf_geo_s"
+"tate \n			WHERE	 cf_geo_state.COUNTRY_CODE  = T.RESIDENCE_COUNTRY_CODE	COLLATE DATABASE_DEFAULT\n			 AND	cf_geo_state.ST"
+"ATE_CODE  = T.STATE_CODE					COLLATE DATABASE_DEFAULT\n			)\n		\n		/* If STATE_CODE Is null and exist any CF_GEO_STATE w"
+"ith the RESIDENCE_COUNTRY_CODE, \n		       message ?A state code is required for the specified agent residence country? "
+"*/\n		INSERT INTO   ["+ context.intermediateDB + "].[dbo].VW_IMPORT_AGENT_RESULT   \n				( agent_code , \n				ind_import , \n				msg_import )  \n		SELECT\n				 T.agent_c"
+"ode,\n				 2,\n				 'A state code is required for the specified agent residence country'\n		FROM   ["+ context.intermediateDB + "].[dbo].VW_import_agent_persons T JOIN  ["+ context.intermediateDB + "].[dbo].VW_import_agent M ON T.agent_code  = M.agent_code  \n		WHERE	 ind_import  = 0\n		 AND	STATE_CODE  is null\n		 A"
+"ND	RESIDENCE_COUNTRY_CODE COLLATE DATABASE_DEFAULT in \n			(\n		 	SELECT country_code\n			FROM  cf_geo_state S \n			)\n	"
+"	\n		/* If PERSON_GROUP_CODE is not null and not exists in IP_PERSON_GROUP, message ?Invalid agent person group code? */"
+"\n		INSERT INTO   ["+ context.intermediateDB + "].[dbo].VW_IMPORT_AGENT_RESULT   \n				( agent_code , \n				ind_import , \n				msg_import )  \n		SELECT\n				 T.agent_c"
+"ode,\n				 2,\n				 'Invalid agent person group code'\n		FROM   ["+ context.intermediateDB + "].[dbo].VW_import_agent_persons T JOIN  ["+ context.intermediateDB + "].[dbo].VW_import_agent M ON T.agent_code  = M.agent_code  \n		WHERE	 ind_import  = 0\n		 AND	PERSON_GROUP_CODE  is not"
+" null\n		 AND	PERSON_GROUP_CODE  COLLATE DATABASE_DEFAULT not in\n			(\n		 	SELECT PERSON_GROUP_NBR\n			FROM  IP_PERSON_"
+"GROUP \n			)\n		\n		/* *************** END OF VALIDATIONS *************** */\n		/* set import indicator to error, for th"
+"ose cases with error messages */\n		UPDATE  M   \n		SET	ind_import = 2 \n		FROM   ["+ context.intermediateDB + "].[dbo].VW_IMPORT_AGENT M \n		WHERE    exists\n			(\n		 	SELECT *\n			FROM   ["+ context.intermediateDB + "].[dbo].VW_IMPORT_AGENT_RESULT R \n			WHERE	 M.agent_code  = R.agent_code\n			) \n		\n		\n		/* set import indicator to "
+"validated, for those cases with no error messages */\n		UPDATE  M   \n		SET	ind_import = 9 \n		FROM   ["+ context.intermediateDB + "].[dbo].VW_IMPORT_AGENT M \n		WHERE  ind_import  = 0 \n		\n		SET NOCOUNT OFF\n\n	END\n";
whetherReject_tMSSqlRow_8 = false;
globalMap.put("tMSSqlRow_8_QUERY",query_tMSSqlRow_8);
try {
		stmt_tMSSqlRow_8.execute(query_tMSSqlRow_8);
		
	} catch (java.lang.Exception e) {
		whetherReject_tMSSqlRow_8 = true;
		
				row70 = new row70Struct();
				
				row70.errorCode = ((java.sql.SQLException)e).getSQLState();
				row70.errorMessage = e.getMessage() + " - Line: " + tos_count_tMSSqlRow_8;
				
	}
	
	if(!whetherReject_tMSSqlRow_8) {
		
	}
	

 


	tos_count_tMSSqlRow_8++;

/**
 * [tMSSqlRow_8 main ] stop
 */
	
	/**
	 * [tMSSqlRow_8 process_data_begin ] start
	 */

	

	
	
	currentComponent="tMSSqlRow_8";

	

 



/**
 * [tMSSqlRow_8 process_data_begin ] stop
 */
// Start of branch "row70"
if(row70 != null) { 



	
	/**
	 * [tLogRow_10 main ] start
	 */

	

	
	
	currentComponent="tLogRow_10";

	
					if(execStat){
						runStat.updateStatOnConnection(iterateId,1,1
						
							,"row70"
						
						);
					}
					
///////////////////////		
						



				strBuffer_tLogRow_10 = new StringBuilder();




   				
	    		if(row70.errorCode != null) { //              
                    							
       
				strBuffer_tLogRow_10.append(
				                String.valueOf(row70.errorCode)							
				);


							
	    		} //  			

    			strBuffer_tLogRow_10.append("|");
    			


   				
	    		if(row70.errorMessage != null) { //              
                    							
       
				strBuffer_tLogRow_10.append(
				                String.valueOf(row70.errorMessage)							
				);


							
	    		} //  			

				
				String[] row_tLogRow_10 = new String[2];
   				
	    		if(row70.errorCode != null) { //              
                 row_tLogRow_10[0]=    						    
				                String.valueOf(row70.errorCode)			
					          ;	
							
	    		} //			
    			   				
	    		if(row70.errorMessage != null) { //              
                 row_tLogRow_10[1]=    						    
				                String.valueOf(row70.errorMessage)			
					          ;	
							
	    		} //			
    			
				nb_line_tLogRow_10++;
                consoleOut_tLogRow_10.println(util_tLogRow_10.print(row_tLogRow_10,nb_line_tLogRow_10));
                consoleOut_tLogRow_10.flush();
//////

//////                    
                    
///////////////////////    			

 


	tos_count_tLogRow_10++;

/**
 * [tLogRow_10 main ] stop
 */
	
	/**
	 * [tLogRow_10 process_data_begin ] start
	 */

	

	
	
	currentComponent="tLogRow_10";

	

 



/**
 * [tLogRow_10 process_data_begin ] stop
 */
	
	/**
	 * [tLogRow_10 process_data_end ] start
	 */

	

	
	
	currentComponent="tLogRow_10";

	

 



/**
 * [tLogRow_10 process_data_end ] stop
 */

} // End of branch "row70"




	
	/**
	 * [tMSSqlRow_8 process_data_end ] start
	 */

	

	
	
	currentComponent="tMSSqlRow_8";

	

 



/**
 * [tMSSqlRow_8 process_data_end ] stop
 */

} // End of branch "row7"




// Start of branch "row69"
if(row69 != null) { 



	
	/**
	 * [tLogRow_9 main ] start
	 */

	

	
	
	currentComponent="tLogRow_9";

	
					if(execStat){
						runStat.updateStatOnConnection(iterateId,1,1
						
							,"row69"
						
						);
					}
					
///////////////////////		
						



				strBuffer_tLogRow_9 = new StringBuilder();




   				
	    		if(row69.errorCode != null) { //              
                    							
       
				strBuffer_tLogRow_9.append(
				                String.valueOf(row69.errorCode)							
				);


							
	    		} //  			

    			strBuffer_tLogRow_9.append("|");
    			


   				
	    		if(row69.errorMessage != null) { //              
                    							
       
				strBuffer_tLogRow_9.append(
				                String.valueOf(row69.errorMessage)							
				);


							
	    		} //  			

				
				String[] row_tLogRow_9 = new String[2];
   				
	    		if(row69.errorCode != null) { //              
                 row_tLogRow_9[0]=    						    
				                String.valueOf(row69.errorCode)			
					          ;	
							
	    		} //			
    			   				
	    		if(row69.errorMessage != null) { //              
                 row_tLogRow_9[1]=    						    
				                String.valueOf(row69.errorMessage)			
					          ;	
							
	    		} //			
    			
				nb_line_tLogRow_9++;
                consoleOut_tLogRow_9.println(util_tLogRow_9.print(row_tLogRow_9,nb_line_tLogRow_9));
                consoleOut_tLogRow_9.flush();
//////

//////                    
                    
///////////////////////    			

 


	tos_count_tLogRow_9++;

/**
 * [tLogRow_9 main ] stop
 */
	
	/**
	 * [tLogRow_9 process_data_begin ] start
	 */

	

	
	
	currentComponent="tLogRow_9";

	

 



/**
 * [tLogRow_9 process_data_begin ] stop
 */
	
	/**
	 * [tLogRow_9 process_data_end ] start
	 */

	

	
	
	currentComponent="tLogRow_9";

	

 



/**
 * [tLogRow_9 process_data_end ] stop
 */

} // End of branch "row69"




	
	/**
	 * [tMSSqlRow_7 process_data_end ] start
	 */

	

	
	
	currentComponent="tMSSqlRow_7";

	

 



/**
 * [tMSSqlRow_7 process_data_end ] stop
 */
	
	/**
	 * [tMSSqlRow_7 end ] start
	 */

	

	
	
	currentComponent="tMSSqlRow_7";

	

	
        stmt_tMSSqlRow_7.close();
        resourceMap.remove("stmt_tMSSqlRow_7");
    resourceMap.put("statementClosed_tMSSqlRow_7", true);
    resourceMap.put("finish_tMSSqlRow_7", true);
 

ok_Hash.put("tMSSqlRow_7", true);
end_Hash.put("tMSSqlRow_7", System.currentTimeMillis());




/**
 * [tMSSqlRow_7 end ] stop
 */

	
	/**
	 * [tMSSqlRow_8 end ] start
	 */

	

	
	
	currentComponent="tMSSqlRow_8";

	

	
        stmt_tMSSqlRow_8.close();
        resourceMap.remove("stmt_tMSSqlRow_8");
    resourceMap.put("statementClosed_tMSSqlRow_8", true);
    resourceMap.put("finish_tMSSqlRow_8", true);
				if(execStat){
			  		runStat.updateStat(resourceMap,iterateId,2,0,"row7");
			  	}
			  	
 

ok_Hash.put("tMSSqlRow_8", true);
end_Hash.put("tMSSqlRow_8", System.currentTimeMillis());




/**
 * [tMSSqlRow_8 end ] stop
 */

	
	/**
	 * [tLogRow_10 end ] start
	 */

	

	
	
	currentComponent="tLogRow_10";

	


//////
//////
globalMap.put("tLogRow_10_NB_LINE",nb_line_tLogRow_10);

///////////////////////    			

				if(execStat){
			  		runStat.updateStat(resourceMap,iterateId,2,0,"row70");
			  	}
			  	
 

ok_Hash.put("tLogRow_10", true);
end_Hash.put("tLogRow_10", System.currentTimeMillis());




/**
 * [tLogRow_10 end ] stop
 */







	
	/**
	 * [tLogRow_9 end ] start
	 */

	

	
	
	currentComponent="tLogRow_9";

	


//////
//////
globalMap.put("tLogRow_9_NB_LINE",nb_line_tLogRow_9);

///////////////////////    			

				if(execStat){
			  		runStat.updateStat(resourceMap,iterateId,2,0,"row69");
			  	}
			  	
 

ok_Hash.put("tLogRow_9", true);
end_Hash.put("tLogRow_9", System.currentTimeMillis());




/**
 * [tLogRow_9 end ] stop
 */



				}//end the resume

				
				    			if(resumeEntryMethodName == null || globalResumeTicket){
				    				resumeUtil.addLog("CHECKPOINT", "CONNECTION:SUBJOB_OK:tMSSqlRow_7:OnSubjobOk", "", Thread.currentThread().getId() + "", "", "", "", "", "");
								}	    				    			
					    	
								if(execStat){    	
									runStat.updateStatOnConnection("OnSubjobOk6", 0, "ok");
								} 
							
							tDBRow_1Process(globalMap); 
						



	
			}catch(java.lang.Exception e){	
				
				TalendException te = new TalendException(e, currentComponent, globalMap);
				
				throw te;
			}catch(java.lang.Error error){	
				
					runStat.stopThreadStat();
				
				throw error;
			}finally{
				
				try{
					
	
	/**
	 * [tMSSqlRow_7 finally ] start
	 */

	

	
	
	currentComponent="tMSSqlRow_7";

	

    if (resourceMap.get("statementClosed_tMSSqlRow_7") == null) {
            java.sql.Statement stmtToClose_tMSSqlRow_7 = null;
            if ((stmtToClose_tMSSqlRow_7 = (java.sql.Statement) resourceMap.remove("stmt_tMSSqlRow_7")) != null) {
                stmtToClose_tMSSqlRow_7.close();
            }
    }
 



/**
 * [tMSSqlRow_7 finally ] stop
 */

	
	/**
	 * [tMSSqlRow_8 finally ] start
	 */

	

	
	
	currentComponent="tMSSqlRow_8";

	

    if (resourceMap.get("statementClosed_tMSSqlRow_8") == null) {
            java.sql.Statement stmtToClose_tMSSqlRow_8 = null;
            if ((stmtToClose_tMSSqlRow_8 = (java.sql.Statement) resourceMap.remove("stmt_tMSSqlRow_8")) != null) {
                stmtToClose_tMSSqlRow_8.close();
            }
    }
 



/**
 * [tMSSqlRow_8 finally ] stop
 */

	
	/**
	 * [tLogRow_10 finally ] start
	 */

	

	
	
	currentComponent="tLogRow_10";

	

 



/**
 * [tLogRow_10 finally ] stop
 */







	
	/**
	 * [tLogRow_9 finally ] start
	 */

	

	
	
	currentComponent="tLogRow_9";

	

 



/**
 * [tLogRow_9 finally ] stop
 */



				}catch(java.lang.Exception e){	
					//ignore
				}catch(java.lang.Error error){
					//ignore
				}
				resourceMap = null;
			}
		

		globalMap.put("tMSSqlRow_7_SUBPROCESS_STATE", 1);
	}
	


public static class row38Struct implements routines.system.IPersistableRow<row38Struct> {
    final static byte[] commonByteArrayLock_WIPO_PROJECTS_F_IPAS_ENV_CRE = new byte[0];
    static byte[] commonByteArray_WIPO_PROJECTS_F_IPAS_ENV_CRE = new byte[0];

	
			    public String errorCode;

				public String getErrorCode () {
					return this.errorCode;
				}
				
			    public String errorMessage;

				public String getErrorMessage () {
					return this.errorMessage;
				}
				



	private String readString(ObjectInputStream dis) throws IOException{
		String strReturn = null;
		int length = 0;
        length = dis.readInt();
		if (length == -1) {
			strReturn = null;
		} else {
			if(length > commonByteArray_WIPO_PROJECTS_F_IPAS_ENV_CRE.length) {
				if(length < 1024 && commonByteArray_WIPO_PROJECTS_F_IPAS_ENV_CRE.length == 0) {
   					commonByteArray_WIPO_PROJECTS_F_IPAS_ENV_CRE = new byte[1024];
				} else {
   					commonByteArray_WIPO_PROJECTS_F_IPAS_ENV_CRE = new byte[2 * length];
   				}
			}
			dis.readFully(commonByteArray_WIPO_PROJECTS_F_IPAS_ENV_CRE, 0, length);
			strReturn = new String(commonByteArray_WIPO_PROJECTS_F_IPAS_ENV_CRE, 0, length, utf8Charset);
		}
		return strReturn;
	}

    private void writeString(String str, ObjectOutputStream dos) throws IOException{
		if(str == null) {
            dos.writeInt(-1);
		} else {
            byte[] byteArray = str.getBytes(utf8Charset);
	    	dos.writeInt(byteArray.length);
			dos.write(byteArray);
    	}
    }

    public void readData(ObjectInputStream dis) {

		synchronized(commonByteArrayLock_WIPO_PROJECTS_F_IPAS_ENV_CRE) {

        	try {

        		int length = 0;
		
					this.errorCode = readString(dis);
					
					this.errorMessage = readString(dis);
					
        	} catch (IOException e) {
	            throw new RuntimeException(e);

		

        }

		

      }


    }

    public void writeData(ObjectOutputStream dos) {
        try {

		
					// String
				
						writeString(this.errorCode,dos);
					
					// String
				
						writeString(this.errorMessage,dos);
					
        	} catch (IOException e) {
	            throw new RuntimeException(e);
        }


    }


    public String toString() {

		StringBuilder sb = new StringBuilder();
		sb.append(super.toString());
		sb.append("[");
		sb.append("errorCode="+errorCode);
		sb.append(",errorMessage="+errorMessage);
	    sb.append("]");

	    return sb.toString();
    }

    /**
     * Compare keys
     */
    public int compareTo(row38Struct other) {

		int returnValue = -1;
		
	    return returnValue;
    }


    private int checkNullsAndCompare(Object object1, Object object2) {
        int returnValue = 0;
		if (object1 instanceof Comparable && object2 instanceof Comparable) {
            returnValue = ((Comparable) object1).compareTo(object2);
        } else if (object1 != null && object2 != null) {
            returnValue = compareStrings(object1.toString(), object2.toString());
        } else if (object1 == null && object2 != null) {
            returnValue = 1;
        } else if (object1 != null && object2 == null) {
            returnValue = -1;
        } else {
            returnValue = 0;
        }

        return returnValue;
    }

    private int compareStrings(String string1, String string2) {
        return string1.compareTo(string2);
    }


}

public static class row27Struct implements routines.system.IPersistableRow<row27Struct> {
    final static byte[] commonByteArrayLock_WIPO_PROJECTS_F_IPAS_ENV_CRE = new byte[0];
    static byte[] commonByteArray_WIPO_PROJECTS_F_IPAS_ENV_CRE = new byte[0];

	



    public void readData(ObjectInputStream dis) {

		synchronized(commonByteArrayLock_WIPO_PROJECTS_F_IPAS_ENV_CRE) {

        	try {

        		int length = 0;
		

		

        }

		
			finally {}
		

      }


    }

    public void writeData(ObjectOutputStream dos) {
        try {

		
        }

			finally {}
		

    }


    public String toString() {

		StringBuilder sb = new StringBuilder();
		sb.append(super.toString());
		sb.append("[");
	    sb.append("]");

	    return sb.toString();
    }

    /**
     * Compare keys
     */
    public int compareTo(row27Struct other) {

		int returnValue = -1;
		
	    return returnValue;
    }


    private int checkNullsAndCompare(Object object1, Object object2) {
        int returnValue = 0;
		if (object1 instanceof Comparable && object2 instanceof Comparable) {
            returnValue = ((Comparable) object1).compareTo(object2);
        } else if (object1 != null && object2 != null) {
            returnValue = compareStrings(object1.toString(), object2.toString());
        } else if (object1 == null && object2 != null) {
            returnValue = 1;
        } else if (object1 != null && object2 == null) {
            returnValue = -1;
        } else {
            returnValue = 0;
        }

        return returnValue;
    }

    private int compareStrings(String string1, String string2) {
        return string1.compareTo(string2);
    }


}

public static class row32Struct implements routines.system.IPersistableRow<row32Struct> {
    final static byte[] commonByteArrayLock_WIPO_PROJECTS_F_IPAS_ENV_CRE = new byte[0];
    static byte[] commonByteArray_WIPO_PROJECTS_F_IPAS_ENV_CRE = new byte[0];

	
			    public String errorCode;

				public String getErrorCode () {
					return this.errorCode;
				}
				
			    public String errorMessage;

				public String getErrorMessage () {
					return this.errorMessage;
				}
				



	private String readString(ObjectInputStream dis) throws IOException{
		String strReturn = null;
		int length = 0;
        length = dis.readInt();
		if (length == -1) {
			strReturn = null;
		} else {
			if(length > commonByteArray_WIPO_PROJECTS_F_IPAS_ENV_CRE.length) {
				if(length < 1024 && commonByteArray_WIPO_PROJECTS_F_IPAS_ENV_CRE.length == 0) {
   					commonByteArray_WIPO_PROJECTS_F_IPAS_ENV_CRE = new byte[1024];
				} else {
   					commonByteArray_WIPO_PROJECTS_F_IPAS_ENV_CRE = new byte[2 * length];
   				}
			}
			dis.readFully(commonByteArray_WIPO_PROJECTS_F_IPAS_ENV_CRE, 0, length);
			strReturn = new String(commonByteArray_WIPO_PROJECTS_F_IPAS_ENV_CRE, 0, length, utf8Charset);
		}
		return strReturn;
	}

    private void writeString(String str, ObjectOutputStream dos) throws IOException{
		if(str == null) {
            dos.writeInt(-1);
		} else {
            byte[] byteArray = str.getBytes(utf8Charset);
	    	dos.writeInt(byteArray.length);
			dos.write(byteArray);
    	}
    }

    public void readData(ObjectInputStream dis) {

		synchronized(commonByteArrayLock_WIPO_PROJECTS_F_IPAS_ENV_CRE) {

        	try {

        		int length = 0;
		
					this.errorCode = readString(dis);
					
					this.errorMessage = readString(dis);
					
        	} catch (IOException e) {
	            throw new RuntimeException(e);

		

        }

		

      }


    }

    public void writeData(ObjectOutputStream dos) {
        try {

		
					// String
				
						writeString(this.errorCode,dos);
					
					// String
				
						writeString(this.errorMessage,dos);
					
        	} catch (IOException e) {
	            throw new RuntimeException(e);
        }


    }


    public String toString() {

		StringBuilder sb = new StringBuilder();
		sb.append(super.toString());
		sb.append("[");
		sb.append("errorCode="+errorCode);
		sb.append(",errorMessage="+errorMessage);
	    sb.append("]");

	    return sb.toString();
    }

    /**
     * Compare keys
     */
    public int compareTo(row32Struct other) {

		int returnValue = -1;
		
	    return returnValue;
    }


    private int checkNullsAndCompare(Object object1, Object object2) {
        int returnValue = 0;
		if (object1 instanceof Comparable && object2 instanceof Comparable) {
            returnValue = ((Comparable) object1).compareTo(object2);
        } else if (object1 != null && object2 != null) {
            returnValue = compareStrings(object1.toString(), object2.toString());
        } else if (object1 == null && object2 != null) {
            returnValue = 1;
        } else if (object1 != null && object2 == null) {
            returnValue = -1;
        } else {
            returnValue = 0;
        }

        return returnValue;
    }

    private int compareStrings(String string1, String string2) {
        return string1.compareTo(string2);
    }


}
public void tDBRow_1Process(final java.util.Map<String, Object> globalMap) throws TalendException {
	globalMap.put("tDBRow_1_SUBPROCESS_STATE", 0);

 final boolean execStat = this.execStat;
	
		String iterateId = "";
	
	
	String currentComponent = "";
	java.util.Map<String, Object> resourceMap = new java.util.HashMap<String, Object>();

	try {
			// TDI-39566 avoid throwing an useless Exception
			boolean resumeIt = true;
			if (globalResumeTicket == false && resumeEntryMethodName != null) {
				String currentMethodName = new java.lang.Exception().getStackTrace()[0].getMethodName();
				resumeIt = resumeEntryMethodName.equals(currentMethodName);
			}
			if (resumeIt || globalResumeTicket) { //start the resume
				globalResumeTicket = true;



		row27Struct row27 = new row27Struct();
row38Struct row38 = new row38Struct();
row32Struct row32 = new row32Struct();





	
	/**
	 * [tLogRow_38 begin ] start
	 */

	

	
		
		ok_Hash.put("tLogRow_38", false);
		start_Hash.put("tLogRow_38", System.currentTimeMillis());
		
	
	currentComponent="tLogRow_38";

	
					if(execStat) {
						runStat.updateStatOnConnection(resourceMap,iterateId,0,0,"row38");
					}
				
		int tos_count_tLogRow_38 = 0;
		

	///////////////////////
		


	class Util_tLogRow_38 {
	
		String[] des_top = { ".", "-" };

        String[] des_data = { "-", "+" };

        String[] des_frame = { "|" }; 
        
        public void printLine(StringBuilder sb, int titleWidth, int dataWidth){
        
        	sb.append("+");
			for(int i=0; i<titleWidth+2; i++)
				sb.append("-");
			sb.append("+");
			for(int i=0; i<dataWidth+2; i++)
				sb.append("-");
        	sb.append("+" + "\n");
        }      

		public String print(String[] row, int nbLine){
			
			StringBuilder sb = new StringBuilder();
			
			    String title = "#" + nbLine + ". " + "tLogRow_38";
			    
		
			//step 1: get the max length of all the row[] member;
			int dataWidth = 5;		//the length of the string "value"	
			for(int i=0;i<row.length;i++) {
				if(row[i] == null && 4 > dataWidth) {
					dataWidth = 4;
				}
				else if(row[i] != null && row[i].length()>dataWidth) 
					dataWidth = row[i].length();
			}			
						
			int titleWidth = 12;
			
			int totalWidth = dataWidth + titleWidth + 5;
			
			//step 2: print the header with line number
			sb.append(".");
			for(int i=0 ; i<totalWidth ; i++)
				sb.append("-");			
			sb.append("." + "\n" + "|");
			
			int emptyCenterWidth = (totalWidth-title.length())/2;
			for(int i=0 ; i<emptyCenterWidth; i++)
				sb.append(" ");	
			sb.append(title);
			for(int i=0 ; i<totalWidth - emptyCenterWidth - title.length() ; i++)
				sb.append(" ");	
			sb.append("|" + "\n");
			
			//step 3: print "key" and "value"			
			printLine(sb,titleWidth,dataWidth);
			
			sb.append("|" + " key");
			for(int i=0; i<titleWidth-2; i++)
				sb.append(" ");
        	sb.append("|" + " value");
			for(int i=0; i<dataWidth-4; i++)
				sb.append(" ");
			sb.append("|" + "\n");
			
			printLine(sb,titleWidth,dataWidth);
			
			//step 4: print dataset
			
			//for(int i=0; i<row.length; i++){
				sb.append("| " + "errorCode");
				for(int i=0; i<titleWidth -"errorCode".length()+ 1 ;i++)
					sb.append(" ");
				sb.append("| " + row[0]);
				for(int i=0; row[0] == null && i<dataWidth - 3 || row[0] != null && i<dataWidth -row[0].length()+ 1 ;i++)
					sb.append(" ");
				sb.append("|" + "\n");
			
			//}

			
			//for(int i=0; i<row.length; i++){
				sb.append("| " + "errorMessage");
				for(int i=0; i<titleWidth -"errorMessage".length()+ 1 ;i++)
					sb.append(" ");
				sb.append("| " + row[1]);
				for(int i=0; row[1] == null && i<dataWidth - 3 || row[1] != null && i<dataWidth -row[1].length()+ 1 ;i++)
					sb.append(" ");
				sb.append("|" + "\n");
			
			//}

			
			//step 5: print a line gap
			printLine(sb,titleWidth,dataWidth);
			return sb.toString();

		}


	}

	Util_tLogRow_38 util_tLogRow_38 = new Util_tLogRow_38();




	java.io.PrintStream consoleOut_tLogRow_38 = null;
	if (globalMap.get("tLogRow_CONSOLE")!=null){
        consoleOut_tLogRow_38 = (java.io.PrintStream) globalMap.get("tLogRow_CONSOLE");
    }else{
        consoleOut_tLogRow_38 = new java.io.PrintStream(new java.io.BufferedOutputStream(System.out));
        globalMap.put("tLogRow_CONSOLE",consoleOut_tLogRow_38);
    }

 		StringBuilder strBuffer_tLogRow_38 = null;
		int nb_line_tLogRow_38 = 0;
///////////////////////    			



 



/**
 * [tLogRow_38 begin ] stop
 */



	
	/**
	 * [tDBRow_2 begin ] start
	 */

	

	
		
		ok_Hash.put("tDBRow_2", false);
		start_Hash.put("tDBRow_2", System.currentTimeMillis());
		
	
	currentComponent="tDBRow_2";

	
					if(execStat) {
						runStat.updateStatOnConnection(resourceMap,iterateId,0,0,"row27");
					}
				
		int tos_count_tDBRow_2 = 0;
		

	java.sql.Connection conn_tDBRow_2 = null;
	String query_tDBRow_2 = "";
	boolean whetherReject_tDBRow_2 = false;
				conn_tDBRow_2 = (java.sql.Connection)globalMap.get("conn_tMSSqlConnection_4");
			
    resourceMap.put("conn_tDBRow_2", conn_tDBRow_2);
        java.sql.Statement stmt_tDBRow_2 = conn_tDBRow_2.createStatement();
        resourceMap.put("stmt_tDBRow_2", stmt_tDBRow_2);

 



/**
 * [tDBRow_2 begin ] stop
 */




	
	/**
	 * [tLogRow_37 begin ] start
	 */

	

	
		
		ok_Hash.put("tLogRow_37", false);
		start_Hash.put("tLogRow_37", System.currentTimeMillis());
		
	
	currentComponent="tLogRow_37";

	
					if(execStat) {
						runStat.updateStatOnConnection(resourceMap,iterateId,0,0,"row32");
					}
				
		int tos_count_tLogRow_37 = 0;
		

	///////////////////////
		


	class Util_tLogRow_37 {
	
		String[] des_top = { ".", "-" };

        String[] des_data = { "-", "+" };

        String[] des_frame = { "|" }; 
        
        public void printLine(StringBuilder sb, int titleWidth, int dataWidth){
        
        	sb.append("+");
			for(int i=0; i<titleWidth+2; i++)
				sb.append("-");
			sb.append("+");
			for(int i=0; i<dataWidth+2; i++)
				sb.append("-");
        	sb.append("+" + "\n");
        }      

		public String print(String[] row, int nbLine){
			
			StringBuilder sb = new StringBuilder();
			
			    String title = "#" + nbLine + ". " + "tLogRow_37";
			    
		
			//step 1: get the max length of all the row[] member;
			int dataWidth = 5;		//the length of the string "value"	
			for(int i=0;i<row.length;i++) {
				if(row[i] == null && 4 > dataWidth) {
					dataWidth = 4;
				}
				else if(row[i] != null && row[i].length()>dataWidth) 
					dataWidth = row[i].length();
			}			
						
			int titleWidth = 12;
			
			int totalWidth = dataWidth + titleWidth + 5;
			
			//step 2: print the header with line number
			sb.append(".");
			for(int i=0 ; i<totalWidth ; i++)
				sb.append("-");			
			sb.append("." + "\n" + "|");
			
			int emptyCenterWidth = (totalWidth-title.length())/2;
			for(int i=0 ; i<emptyCenterWidth; i++)
				sb.append(" ");	
			sb.append(title);
			for(int i=0 ; i<totalWidth - emptyCenterWidth - title.length() ; i++)
				sb.append(" ");	
			sb.append("|" + "\n");
			
			//step 3: print "key" and "value"			
			printLine(sb,titleWidth,dataWidth);
			
			sb.append("|" + " key");
			for(int i=0; i<titleWidth-2; i++)
				sb.append(" ");
        	sb.append("|" + " value");
			for(int i=0; i<dataWidth-4; i++)
				sb.append(" ");
			sb.append("|" + "\n");
			
			printLine(sb,titleWidth,dataWidth);
			
			//step 4: print dataset
			
			//for(int i=0; i<row.length; i++){
				sb.append("| " + "errorCode");
				for(int i=0; i<titleWidth -"errorCode".length()+ 1 ;i++)
					sb.append(" ");
				sb.append("| " + row[0]);
				for(int i=0; row[0] == null && i<dataWidth - 3 || row[0] != null && i<dataWidth -row[0].length()+ 1 ;i++)
					sb.append(" ");
				sb.append("|" + "\n");
			
			//}

			
			//for(int i=0; i<row.length; i++){
				sb.append("| " + "errorMessage");
				for(int i=0; i<titleWidth -"errorMessage".length()+ 1 ;i++)
					sb.append(" ");
				sb.append("| " + row[1]);
				for(int i=0; row[1] == null && i<dataWidth - 3 || row[1] != null && i<dataWidth -row[1].length()+ 1 ;i++)
					sb.append(" ");
				sb.append("|" + "\n");
			
			//}

			
			//step 5: print a line gap
			printLine(sb,titleWidth,dataWidth);
			return sb.toString();

		}


	}

	Util_tLogRow_37 util_tLogRow_37 = new Util_tLogRow_37();




	java.io.PrintStream consoleOut_tLogRow_37 = null;
	if (globalMap.get("tLogRow_CONSOLE")!=null){
        consoleOut_tLogRow_37 = (java.io.PrintStream) globalMap.get("tLogRow_CONSOLE");
    }else{
        consoleOut_tLogRow_37 = new java.io.PrintStream(new java.io.BufferedOutputStream(System.out));
        globalMap.put("tLogRow_CONSOLE",consoleOut_tLogRow_37);
    }

 		StringBuilder strBuffer_tLogRow_37 = null;
		int nb_line_tLogRow_37 = 0;
///////////////////////    			



 



/**
 * [tLogRow_37 begin ] stop
 */



	
	/**
	 * [tDBRow_1 begin ] start
	 */

	

	
		
		ok_Hash.put("tDBRow_1", false);
		start_Hash.put("tDBRow_1", System.currentTimeMillis());
		
	
	currentComponent="tDBRow_1";

	
		int tos_count_tDBRow_1 = 0;
		

	java.sql.Connection conn_tDBRow_1 = null;
	String query_tDBRow_1 = "";
	boolean whetherReject_tDBRow_1 = false;
				conn_tDBRow_1 = (java.sql.Connection)globalMap.get("conn_tMSSqlConnection_4");
			
    resourceMap.put("conn_tDBRow_1", conn_tDBRow_1);
        java.sql.Statement stmt_tDBRow_1 = conn_tDBRow_1.createStatement();
        resourceMap.put("stmt_tDBRow_1", stmt_tDBRow_1);

 



/**
 * [tDBRow_1 begin ] stop
 */
	
	/**
	 * [tDBRow_1 main ] start
	 */

	

	
	
	currentComponent="tDBRow_1";

	

		row27 = null;
		
		row32 = null;
		
query_tDBRow_1 = "If Exists ( SELECT name \n            FROM sysobjects  \n            WHERE name = 'ImportMarkValidate'\n            AND"
+" type = 'P')\n	DROP PROCEDURE ImportMarkValidate";
whetherReject_tDBRow_1 = false;
globalMap.put("tDBRow_1_QUERY",query_tDBRow_1);
try {
		stmt_tDBRow_1.execute(query_tDBRow_1);
		
	} catch (java.lang.Exception e) {
		whetherReject_tDBRow_1 = true;
		
				row32 = new row32Struct();
				
				row32.errorCode = ((java.sql.SQLException)e).getSQLState();
				row32.errorMessage = e.getMessage() + " - Line: " + tos_count_tDBRow_1;
				
	}
	
	if(!whetherReject_tDBRow_1) {
		
					row27 = new row27Struct();
					
	}
	

 


	tos_count_tDBRow_1++;

/**
 * [tDBRow_1 main ] stop
 */
	
	/**
	 * [tDBRow_1 process_data_begin ] start
	 */

	

	
	
	currentComponent="tDBRow_1";

	

 



/**
 * [tDBRow_1 process_data_begin ] stop
 */
// Start of branch "row27"
if(row27 != null) { 
			row38 = null;



	
	/**
	 * [tDBRow_2 main ] start
	 */

	

	
	
	currentComponent="tDBRow_2";

	
					if(execStat){
						runStat.updateStatOnConnection(iterateId,1,1
						
							,"row27"
						
						);
					}
					

		row38 = null;
		
query_tDBRow_2 = "CREATE PROCEDURE ImportMarkValidate\nAS \n	BEGIN\n		SET NOCOUNT ON\n		\n		/* Procedure name: ImportMarkValidate\n		Inpu"
+"t:  IPAS database and import tables not imported (i.e. IND_IMPORT not 1)\n		Output: if errors, validation flag set to 2 "
+"and error messages in  ["+ context.intermediateDB + "].[dbo].VW_IMPORT_MARK_RESULT\n		if OK, validation flag set to 9\n		create or replace procedure ImportMarkValidate as\n"
+"		*/\n		\n		/* flag all pending marks as to be validated */\n		UPDATE   ["+ context.intermediateDB + "].[dbo].VW_import_mark   \n		SET	ind_import = 0 \n		WHERE  ind_import  is null\n		 OR	ind_import  not in ( 0  , 1  ) \n"
+"		\n		/* delete prior errors */\n		DELETE FROM    ["+ context.intermediateDB + "].[dbo].VW_IMPORT_MARK_RESULT    \n		\n		/* 1.1.1  ["+ context.intermediateDB + "].[dbo].VW_IMPORT_MARK validations */\n		/* 1.1.1.1 Codes validations */\n		/* FILE_SEQ: if not exists in CF_FILE_SEQUE"
+"NCE, insert message 'Invalid file sequence code' */\n		INSERT INTO   ["+ context.intermediateDB + "].[dbo].VW_IMPORT_MARK_RESULT   \n				( file_seq , \n				file_type , \n				file_series , \n				file_nbr , \n				ind_imp"
+"ort , \n				msg_import )  \n		SELECT\n				 file_seq,\n				 file_type,\n				 file_series,\n				 file_nbr,\n				 2,\n				 "
+"'Invalid file sequence code'\n		FROM   ["+ context.intermediateDB + "].[dbo].VW_import_mark \n		WHERE	 ind_import  = 0\n		 AND	file_seq  COLLATE DATABASE_DEFAULT not in\n			(\n		 	SELECT f"
+"ile_seq\n			FROM  CF_file_sequence \n			)\n		\n		/* FILE_TYPE: if not exists in CF_FILE_TYPE, insert message Invalid fil"
+"e type code' */\n		INSERT INTO   ["+ context.intermediateDB + "].[dbo].VW_IMPORT_MARK_RESULT   \n				( file_seq , \n				file_type , \n				file_series , \n				file_nbr , \n				ind_imp"
+"ort , \n				msg_import )  \n		SELECT\n				 file_seq,\n				 file_type,\n				 file_series,\n				 file_nbr,\n				 2,\n				 "
+"'Invalid file type code'\n		FROM   ["+ context.intermediateDB + "].[dbo].VW_import_mark \n		WHERE	 ind_import  = 0\n		 AND	file_type  not in\n			(\n		 	SELECT file_type\n			FROM  CF_fi"
+"le_type \n			)\n		\n		/* DOC_ORI: if not null and not exists in CF_DOC_ORIGIN, message 'Invalid document origin code' */"
+"\n		INSERT INTO   ["+ context.intermediateDB + "].[dbo].VW_IMPORT_MARK_RESULT   \n				( file_seq , \n				file_type , \n				file_series , \n				file_nbr , \n				ind_imp"
+"ort , \n				msg_import )  \n		SELECT\n				 file_seq,\n				 file_type,\n				 file_series,\n				 file_nbr,\n				 2,\n				 "
+"'Invalid document origin code'\n		FROM   ["+ context.intermediateDB + "].[dbo].VW_import_mark \n		WHERE	 ind_import  = 0\n		 AND	doc_ori  is not null\n		 AND	doc_ori  COLLATE DATABASE_DEFAUL"
+"T not in\n			(\n		 	SELECT doc_ori\n			FROM  CF_DOC_ORIGIN \n			)\n		\n		/* DOC_ORI: if null and not exists config param"
+" 'MigrationCodOri' message 'Null document origin code but no 'MigrationDocOri' parameter configured' */\n		INSERT INTO  "
+" ["+ context.intermediateDB + "].[dbo].VW_IMPORT_MARK_RESULT   \n				( file_seq , \n				file_type , \n				file_series , \n				file_nbr , \n				ind_imp"
+"ort , \n				msg_import )  \n		SELECT\n				 file_seq,\n				 file_type,\n				 file_series,\n				 file_nbr,\n				 2,\n				 "
+"'Null document origin code but no [MigrationCodOri] parameter configured'\n		FROM   ["+ context.intermediateDB + "].[dbo].VW_import_mark \n		WHERE	 ind_import  = 0\n		 AND	doc_ori  is null\n		 AND	NOT   exists\n			(\n		 	SELECT *\n		"
+"	FROM  CF_CONFIG_PARAM \n			WHERE	 config_code  = 'MigrationCodOri'\n			)\n		\n		/* DOC_ORI: if null and a nul value exi"
+"sts for config param 'MigrationCodOri' message 'Null document origin code but no valid 'MigrationDocOri' parameter confi"
+"gured' */\n		INSERT INTO   ["+ context.intermediateDB + "].[dbo].VW_IMPORT_MARK_RESULT   \n				( file_seq , \n				file_type , \n				file_series , \n				file_nbr , \n				ind_imp"
+"ort , \n				msg_import )  \n		SELECT\n				 file_seq,\n				 file_type,\n				 file_series,\n				 file_nbr,\n				 2,\n				 "
+"'Null document origin code but no valid [MigrationCodOri] parameter configured'\n		FROM   ["+ context.intermediateDB + "].[dbo].VW_import_mark \n		WHERE	 ind_import  = 0\n		 AND	doc_ori  is null\n		 AND	  exists\n			(\n		 	SELECT *\n			FRO"
+"M  CF_CONFIG_PARAM \n			WHERE	 config_code  = 'MigrationCodOri'\n			 AND	value  is null\n			)\n		\n		/* APPLICATION_TYPE"
+": if not exists in CF_APPLICATION_TYPE, message 'Invalid application type code' */\n		INSERT INTO   ["+ context.intermediateDB + "].[dbo].VW_IMPORT_MARK_RESULT   \n				( file_seq , \n				file_type , \n				file_series , \n				file_nbr , \n				ind_imp"
+"ort , \n				msg_import )  \n		SELECT\n				 file_seq,\n				 file_type,\n				 file_series,\n				 file_nbr,\n				 2,\n				 "
+"'Invalid application type code'\n		FROM   ["+ context.intermediateDB + "].[dbo].VW_import_mark \n		WHERE	 ind_import  = 0\n		 AND	APPLICATION_TYPE COLLATE DATABASE_DEFAULT not in\n			(\n		 	S"
+"ELECT appl_typ\n			FROM  CF_APPLICATION_TYPE \n			)\n		\n		/* APPLICATION_TYPE / APPLICATION_SUBTYPE: if not exists in C"
+"F_APPLICATION_SUBTYPE, message 'Invalid application type / subtype code' */\n		INSERT INTO   ["+ context.intermediateDB + "].[dbo].VW_IMPORT_MARK_RESULT   \n				( file_seq , \n				file_type , \n				file_series , \n				file_nbr , \n				ind_imp"
+"ort , \n				msg_import )  \n		SELECT\n				 file_seq,\n				 file_type,\n				 file_series,\n				 file_nbr,\n				 2,\n				 "
+"'Invalid application type / subtype code'\n		FROM   ["+ context.intermediateDB + "].[dbo].VW_import_mark \n		WHERE	 ind_import  = 0\n		 AND	 NOT EXISTS\n			(\n		 	SELECT\n					 CF_APPLICATION_SUBTYPE.a"
+"ppl_typ,\n					 CF_APPLICATION_SUBTYPE.appl_subtyp\n			FROM  CF_APPLICATION_SUBTYPE \n			WHERE	 CF_APPLICATION_SUBTYPE.a"
+"ppl_typ  =  ["+ context.intermediateDB + "].[dbo].VW_import_mark.APPLICATION_TYPE			COLLATE DATABASE_DEFAULT\n			 AND	CF_APPLICATION_SUBTYPE.appl_subtyp  =  ["+ context.intermediateDB + "].[dbo].VW_import_mark.APPLICATION_SUBTYPE	COLLATE DATABASE_DEFAULT\n			)\n		\n		/* LAW_CODE: if not exists in CF_LAW, "
+"message 'Invalid law code' */\n		INSERT INTO   ["+ context.intermediateDB + "].[dbo].VW_IMPORT_MARK_RESULT   \n				( file_seq , \n				file_type , \n				file_series , \n				file_nbr , \n				ind_imp"
+"ort , \n				msg_import )  \n		SELECT\n				 file_seq,\n				 file_type,\n				 file_series,\n				 file_nbr,\n				 2,\n				 "
+"'Invalid law code'\n		FROM   ["+ context.intermediateDB + "].[dbo].VW_import_mark \n		WHERE	 ind_import  = 0\n		 AND	LAW_CODE  not in\n			(\n		 	SELECT law_code\n			FROM  CF_LAW "
+"\n			)\n		\n		/* Null registration: if IND_REGISTERED = 0 and any of the other registration data items is nut null/0, \n"
+"		       message 'File not flagged as registered but some of the registration data items is not null' */\n\n		/* Note: t"
+"his control was removed in Chile\n		INSERT INTO   ["+ context.intermediateDB + "].[dbo].VW_IMPORT_MARK_RESULT   \n				( file_seq , \n				file_type , \n				file_series , \n				file_nbr , \n				ind_imp"
+"ort , \n				msg_import )  \n		SELECT\n				 file_seq,\n				 file_type,\n				 file_series,\n				 file_nbr,\n				 2,\n				 "
+"'File not flagged as registered but some of the registration data items is not null'\n		FROM   ["+ context.intermediateDB + "].[dbo].VW_import_mark \n		WHERE	 ind_import  = 0\n		 AND	IND_REGISTERED  = 0\n		 AND	(REGISTRATION_TYPE  is not null\n"
+"		 OR	(REGISTRATION_SERIES  not in ( 0  )\n		 AND	REGISTRATION_SERIES  IS NOT NULL)\n		 OR	(REGISTRATION_NBR  not in ( 0"
+"  )\n		 AND	REGISTRATION_NBR  IS NOT NULL)\n		 OR	REGISTRATION_DUP  is not null\n		 OR	REGISTRATION_DATE  is not null\n	"
+"	 OR	REGISTRATION_TYPE  is not null\n		 OR	ENTITLEMENT_DATE  is not null\n		 OR	EXPIRATION_DATE  is not null)\n		*/\n		"
+"\n		/* Not null registration: if IND_REGISTERED = 1 and any of the other registration data items is null/0 \n		       (ex"
+"cept REGISTRATION_DUP), message 'File flagged as registered but some of the registration data items is null' */\n		INSER"
+"T INTO   ["+ context.intermediateDB + "].[dbo].VW_IMPORT_MARK_RESULT   \n				( file_seq , \n				file_type , \n				file_series , \n				file_nbr , \n				ind_imp"
+"ort , \n				msg_import )  \n		SELECT\n				 file_seq,\n				 file_type,\n				 file_series,\n				 file_nbr,\n				 2,\n				 "
+"'File flagged as registered but some of the registration data items is null'\n		FROM   ["+ context.intermediateDB + "].[dbo].VW_import_mark \n		WHERE	 ind_import  = 0\n		 AND	IND_REGISTERED  = 1\n		 AND	(REGISTRATION_TYPE  is null\n		 O"
+"R	(REGISTRATION_SERIES  in ( 0  )\n		 OR	REGISTRATION_SERIES  IS NULL)\n		 OR	(REGISTRATION_NBR  in ( 0  )\n		 OR	REGIST"
+"RATION_NBR  IS NULL)\n		 OR	REGISTRATION_DATE  is null\n		 OR	REGISTRATION_TYPE  is null\n		 OR	ENTITLEMENT_DATE  is nul"
+"l\n		 OR	EXPIRATION_DATE  is null)\n		\n		/* EXPIRATION_DATE: if less than ENTITLEMENT_DATE, message 'Expiration date is"
+" less then entitlement date' */\n		INSERT INTO   ["+ context.intermediateDB + "].[dbo].VW_IMPORT_MARK_RESULT   \n				( file_seq , \n				file_type , \n				file_series , \n				file_nbr , \n				ind_imp"
+"ort , \n				msg_import )  \n		SELECT\n				 file_seq,\n				 file_type,\n				 file_series,\n				 file_nbr,\n				 2,\n				 "
+"'Expiration date is less then entitlement date'\n		FROM   ["+ context.intermediateDB + "].[dbo].VW_import_mark \n		WHERE	 ind_import  = 0\n		 AND	IND_REGISTERED  = 1\n		 AND	EXPIRATION_DATE  < ENTITLEMENT_DA"
+"TE\n		\n		/* SIGN_TYPE: if not in N / L / B / T / S / O, message 'Invalid sign type, possible values are \n		       N = "
+"name only, L = logo only, B = both name and logo, T = tridimensional, S = sound, O = olfative' */\n		INSERT INTO   ["+ context.intermediateDB + "].[dbo].VW_IMPORT_MARK_RESULT   \n				( file_seq , \n				file_type , \n				file_series , \n				file_nbr , \n				ind_imp"
+"ort , \n				msg_import )  \n		SELECT\n				 file_seq,\n				 file_type,\n				 file_series,\n				 file_nbr,\n				 2,\n				 "
+"'Invalid sign type, possible values are N = name only, L = logo only, B = both name and logo, T = tridimensional, S = so"
+"und, O = olfative'\n		FROM   ["+ context.intermediateDB + "].[dbo].VW_import_mark \n		WHERE	 ind_import  = 0\n		 AND	SIGN_TYPE  not in ( 'N'  , 'L'  , 'B'  , 'T'  , 'S'  , 'O'  )"
+"\n		\n		/* CAPTURE_USER_ID: if not exists in IP_USER, message 'Invalid capture user code' */\n		INSERT INTO   ["+ context.intermediateDB + "].[dbo].VW_IMPORT_MARK_RESULT   \n				( file_seq , \n				file_type , \n				file_series , \n				file_nbr , \n				ind_imp"
+"ort , \n				msg_import )  \n		SELECT\n				 file_seq,\n				 file_type,\n				 file_series,\n				 file_nbr,\n				 2,\n				 "
+"'Invalid capture user code'\n		FROM   ["+ context.intermediateDB + "].[dbo].VW_import_mark \n		WHERE	 ind_import  = 0\n		 AND	CAPTURE_USER_ID  is not null\n		 AND	CAPTURE_USER_ID  not in"
+"\n			(\n		 	SELECT user_id\n			FROM  IP_USER \n			)\n		\n		/* 1.1.1.2 Duplicate keys validations */\n		/* If FILE_SEQ / F"
+"ILE_TYPE / FILE_SERIES / FILE_NBR already exists in IP_FILE, \n		       insert message 'File sequence / type / series / "
+"number already exists in the database' */\n		INSERT INTO   ["+ context.intermediateDB + "].[dbo].VW_IMPORT_MARK_RESULT   \n				( file_seq , \n				file_type , \n				file_series , \n				file_nbr , \n				ind_imp"
+"ort , \n				msg_import )  \n		SELECT\n				 file_seq,\n				 file_type,\n				 file_series,\n				 file_nbr,\n				 2,\n				 "
+"'File sequence / type / series / number already exists in the database'\n		FROM   ["+ context.intermediateDB + "].[dbo].VW_import_mark  M\n		WHERE	ind_import  = 0\n		 AND	EXISTS \n				(SELECT * \n				 FROM	IP_FILE F\n				 WHERE	F.F"
+"ILE_SEQ	= M.FILE_SEQ	COLLATE DATABASE_DEFAULT\n				  AND	F.FILE_TYP	= M.FILE_TYPE	COLLATE DATABASE_DEFAULT\n				  AND	F."
+"FILE_SER	= M.FILE_SERIES\n				  AND	F.FILE_NBR	= M.FILE_NBR\n				)\n		\n		/* If DOC_NBR is not null and DOC_ORI / DOC_SE"
+"RIES / DOC_NBR already exists in IP_DOC, \n		       insert message 'Document origin / series / number already exists in "
+"the database' */\n		INSERT INTO   ["+ context.intermediateDB + "].[dbo].VW_IMPORT_MARK_RESULT   \n				( file_seq , \n				file_type , \n				file_series , \n				file_nbr , \n				ind_imp"
+"ort , \n				msg_import )  \n		SELECT\n				 file_seq,\n				 file_type,\n				 file_series,\n				 file_nbr,\n				 2,\n				 "
+"'Document origin / series / number already exists in the database'\n		FROM   ["+ context.intermediateDB + "].[dbo].VW_import_mark \n		WHERE	 ind_import  = 0\n		 AND	DOC_NBR  is not null\n		 AND	DOC_ORI  COLLATE DATABASE_DEFAUL"
+"T IN\n			(\n		 	SELECT doc_ori\n			FROM  IP_DOC \n			)\n		 AND	'E'  IN\n			(\n		 	SELECT doc_log\n			FROM  IP_DOC \n			)"
+"\n		 AND	DOC_SERIES  IN\n			(\n		 	SELECT doc_ser\n			FROM  IP_DOC \n			)\n		 AND	DOC_NBR  IN\n			(\n		 	SELECT doc_nbr"
+"\n			FROM  IP_DOC \n			)\n		\n		/* If DOC_NBR is not null and DOC_ORI / DOC_SERIES / DOC_NBR is repeated in  ["+ context.intermediateDB + "].[dbo].VW_IMPORT_MARK,\n		insert message 'Document origin / series / number duplicated in intermediate table' */\n		/*"
+" Generate work table with repeated DOC_ORI / DOC_SERIES / DOC_NBR */\n		\n		\n		DECLARE @EXEC_IMMEDIATE_VAR VARCHAR (400"
+"0)\n		SELECT @EXEC_IMMEDIATE_VAR  = 'TRUNCATE TABLE wrk_doc_key' \n\n		EXECUTE (@EXEC_IMMEDIATE_VAR)\n		INSERT INTO  wrk"
+"_doc_key    \n		SELECT\n				 DOC_ORI,\n				 DOC_SERIES,\n				 DOC_NBR\n		FROM   ["+ context.intermediateDB + "].[dbo].VW_IMPORT_MARK \n		WHERE	 DOC_NBR  is not null\n		GROUP BY DOC_ORI,\n			 DOC_SERIES,\n			  DOC_NBR \n		HAVING C"
+"OUNT(*)  > 1  \n		\n		INSERT INTO   ["+ context.intermediateDB + "].[dbo].VW_IMPORT_MARK_RESULT   \n				( file_seq , \n				file_type , \n				file_series , \n				file_nbr , \n				ind_imp"
+"ort , \n				msg_import )  \n		SELECT\n				 file_seq,\n				 file_type,\n				 file_series,\n				 file_nbr,\n				 2,\n				 "
+"'Document origin / series / number duplicated in intermediate table'\n		FROM   ["+ context.intermediateDB + "].[dbo].VW_import_mark \n		WHERE	 ind_import  = 0\n		 AND	DOC_NBR  is not null\n		 AND	DOC_ORI  IN\n			(\n		 	SELECT do"
+"c_ori\n			FROM  wrk_doc_key \n			)\n		 AND	DOC_SERIES  IN\n			(\n		 	SELECT doc_series\n			FROM  wrk_doc_key \n			)\n		 "
+"AND	DOC_NBR  IN\n			(\n		 	SELECT doc_nbr\n			FROM  wrk_doc_key \n			)\n		\n		/* If IND_REGISTERED = 1 and REGISTRATION_"
+"TYPE / REGISTRATION_SERIES / REGISTRATION_NBR / REGISTRATION_DUP \n		       already exists in IP_FILE, insert message 'R"
+"egistration type / series / number / duplicate already exists in the database' */\n		INSERT INTO   ["+ context.intermediateDB + "].[dbo].VW_IMPORT_MARK_RESULT   \n				( file_seq , \n				file_type , \n				file_series , \n				file_nbr , \n				ind_imp"
+"ort , \n				msg_import )  \n		SELECT\n				 file_seq,\n				 file_type,\n				 file_series,\n				 file_nbr,\n				 2,\n				 "
+"'Registration type / series / number / duplicate already exists in the database'\n		FROM   ["+ context.intermediateDB + "].[dbo].VW_import_mark M\n		WHERE	 ind_import  = 0\n		 AND	IND_REGISTERED  = 1\n		 AND	EXISTS\n				(SELECT	*\n				 FROM"
+"	IP_FILE F\n				 WHERE	F.registration_typ	= M.registration_type	COLLATE DATABASE_DEFAULT\n				  AND	F.registration_ser	="
+" M.registration_series\n				  AND	F.registration_nbr	= M.registration_nbr\n				  AND	F.registration_dup	= M.registration"
+"_dup	COLLATE DATABASE_DEFAULT\n				)\n		\n		/* 1.1.1.3 Sign validations */\n		/* If SIGN_TYPE is N or B, and MARK_NAME i"
+"s null, message 'Mark name is required' */\n		INSERT INTO   ["+ context.intermediateDB + "].[dbo].VW_IMPORT_MARK_RESULT   \n				( file_seq , \n				file_type , \n				file_series , \n				file_nbr , \n				ind_imp"
+"ort , \n				msg_import )  \n		SELECT\n				 file_seq,\n				 file_type,\n				 file_series,\n				 file_nbr,\n				 2,\n				 "
+"'Mark name is required'\n		FROM   ["+ context.intermediateDB + "].[dbo].VW_import_mark \n		WHERE	 ind_import  = 0\n		 AND	SIGN_TYPE  in ( 'N'  , 'B'  )\n		 AND	MARK_NAME  is null\n		"
+"\n		/* 1.1.2  ["+ context.intermediateDB + "].[dbo].VW_IMPORT_MARK_OWNERS validations */\n		/* 1.1.2.1 Owner validations */\n		/* Generate work table with FILE_SEQ"
+", FILE_TYPE, FILE_SERIES, FILE_NBR, IND_SERVICE and COUNT(*) */\n		DELETE FROM   wrk_file_service_count    \n		\n		INSER"
+"T INTO  wrk_file_service_count    \n		SELECT\n				 FILE_SEQ,\n				 FILE_TYPE,\n				 FILE_SERIES,\n				 FILE_NBR,\n				 I"
+"ND_SERVICE,\n				 COUNT(*) count1\n		FROM   ["+ context.intermediateDB + "].[dbo].VW_IMPORT_MARK_OWNERS \n		GROUP BY FILE_SEQ,\n			 FILE_TYPE,\n			 FILE_SERIES,\n			 FILE_NBR,\n			  IND_SERVICE"
+" \n		\n		/* No service address: where not exists corresponding tuple in the work table with IND_SERVICE = 1, \n		       "
+"message 'No owner flagged as service address' */\n		INSERT INTO   ["+ context.intermediateDB + "].[dbo].VW_IMPORT_MARK_RESULT   \n				( file_seq , \n				file_type , \n				file_series , \n				file_nbr , \n				ind_imp"
+"ort , \n				msg_import )  \n		SELECT\n				 file_seq,\n				 file_type,\n				 file_series,\n				 file_nbr,\n				 2,\n				 "
+"'No owner flagged as service address'\n		FROM   ["+ context.intermediateDB + "].[dbo].VW_import_mark M \n		WHERE	 ind_import  = 0\n		 AND	NOT   exists\n			(\n		 	SELECT *\n			FROM  wrk_file_service"
+"_count W \n			WHERE	 M.file_seq  = W.file_seq\n			 AND	M.file_type  = W.file_type\n			 AND	M.file_series  = W.file_serie"
+"s\n			 AND	M.file_nbr  = W.file_nbr\n			 AND	ind_service  = 1\n			)\n		\n		/* Several service addresses: where exists co"
+"rresponding tuple in the work table with \n		      IND_SERVICE = 1 and with count column > 1, message 'Several owners fl"
+"agged as service addresses' */\n		INSERT INTO   ["+ context.intermediateDB + "].[dbo].VW_IMPORT_MARK_RESULT   \n				( file_seq , \n				file_type , \n				file_series , \n				file_nbr , \n				ind_imp"
+"ort , \n				msg_import )  \n		SELECT\n				 M.file_seq,\n				 M.file_type,\n				 M.file_series,\n				 M.file_nbr,\n				 2"
+",\n				 'Several owners flagged as service addresses'\n		FROM   ["+ context.intermediateDB + "].[dbo].VW_import_mark M JOIN wrk_file_service_count W ON M.file_seq  = W.file_seq\n			 AND	M.file_type  = W.file_type"
+"\n			 AND	M.file_series  = W.file_series\n			 AND	M.file_nbr  = W.file_nbr  \n		WHERE	 ind_import  = 0\n		 AND	ind_servic"
+"e  = 1\n		 AND	count1  > 1\n		\n		/* 1.1.2.2 Person validations */\n		/* NATIONALITY_COUNTRY_CODE: if not exists in CF_G"
+"EO_COUNTRY, message 'Invalid owner nationality country code' */\n		INSERT INTO   ["+ context.intermediateDB + "].[dbo].VW_IMPORT_MARK_RESULT   \n				( file_seq , \n				file_type , \n				file_series , \n				file_nbr , \n				ind_imp"
+"ort , \n				msg_import )  \n		SELECT\n				 T.file_seq,\n				 T.file_type,\n				 T.file_series,\n				 T.file_nbr,\n				 2"
+",\n				 'Invalid owner nationality country code'\n		FROM   ["+ context.intermediateDB + "].[dbo].VW_import_mark_owners T JOIN  ["+ context.intermediateDB + "].[dbo].VW_import_mark M ON T.file_seq  = M.file_seq\n			 AND	T.file_type  = M.file_type\n			 AND	T.file_series  = M.fi"
+"le_series\n			 AND	T.file_nbr  = M.file_nbr  \n		WHERE	 ind_import  = 0\n		 AND	NATIONALITY_COUNTRY_CODE COLLATE DATABAS"
+"E_DEFAULT not in\n			(\n		 	SELECT COUNTRY_CODE\n			FROM  CF_geo_country \n			)\n		\n		/* LEGAL_NATURE: if not null and "
+"IND_COMPANY = 0, message 'Owner legal nature only applies when the person is a company' */\n		INSERT INTO   ["+ context.intermediateDB + "].[dbo].VW_IMPORT_MARK_RESULT   \n				( file_seq , \n				file_type , \n				file_series , \n				file_nbr , \n				ind_imp"
+"ort , \n				msg_import )  \n		SELECT\n				 T.file_seq,\n				 T.file_type,\n				 T.file_series,\n				 T.file_nbr,\n				 2"
+",\n				 'Owner legal nature only applies when the person is a company'\n		FROM   ["+ context.intermediateDB + "].[dbo].VW_import_mark_owners T JOIN  ["+ context.intermediateDB + "].[dbo].VW_import_mark M ON T.file_seq  = M.file_seq\n			 AND	T.file_type  = M.file_type\n			 AND	T.file_series  = M.fi"
+"le_series\n			 AND	T.file_nbr  = M.file_nbr  \n		WHERE	 ind_import  = 0\n		 AND	LEGAL_NATURE  is not null\n		 AND	IND_CO"
+"MPANY  = 0\n		\n		/* LEGAL_ID_TYPE: if not null and not exists if CF_PERSON_ID_TYPE with IND_GENERAL_ID = 'S', \n		     "
+"  message 'Invalid owner legal id type' */\n		INSERT INTO   ["+ context.intermediateDB + "].[dbo].VW_IMPORT_MARK_RESULT   \n				( file_seq , \n				file_type , \n				file_series , \n				file_nbr , \n				ind_imp"
+"ort , \n				msg_import )  \n		SELECT\n				 T.file_seq,\n				 T.file_type,\n				 T.file_series,\n				 T.file_nbr,\n				 2"
+",\n				 'Invalid owner legal id type'\n		FROM   ["+ context.intermediateDB + "].[dbo].VW_import_mark_owners T JOIN  ["+ context.intermediateDB + "].[dbo].VW_import_mark M ON T.file_seq  = M.file_seq\n			 AND	T.file_type  = M.file_type\n			 AND	T.file_series  = M.fi"
+"le_series\n			 AND	T.file_nbr  = M.file_nbr  \n		WHERE	 ind_import  = 0\n		 AND	LEGAL_ID_TYPE  is not null\n		 AND	LEGAL"
+"_ID_TYPE  COLLATE DATABASE_DEFAULT not in\n			(\n		 	SELECT PERSON_ID_TYP\n			FROM  CF_PERSON_ID_TYPE \n			WHERE	 IND_GE"
+"NERAL_ID  = 'S'\n			)\n		\n		/* INDIVIDUAL_ID_TYPE: if not null and not exists if CF_PERSON_ID_TYPE with IND_INDIVIDUAL_"
+"ID = 'S', \n		       message 'Invalid owner individual id type' */\n		INSERT INTO   ["+ context.intermediateDB + "].[dbo].VW_IMPORT_MARK_RESULT   \n				( file_seq , \n				file_type , \n				file_series , \n				file_nbr , \n				ind_imp"
+"ort , \n				msg_import )  \n		SELECT\n				 T.file_seq,\n				 T.file_type,\n				 T.file_series,\n				 T.file_nbr,\n				 2"
+",\n				 'Invalid owner individual id type'\n		FROM   ["+ context.intermediateDB + "].[dbo].VW_import_mark_owners T JOIN  ["+ context.intermediateDB + "].[dbo].VW_import_mark M ON T.file_seq  = M.file_seq\n			 AND	T.file_type  = M.file_type\n			 AND	T.file_series  = M.fi"
+"le_series\n			 AND	T.file_nbr  = M.file_nbr  \n		WHERE	 ind_import  = 0\n		 AND	INDIVIDUAL_ID_TYPE  is not null\n		 AND	"
+"INDIVIDUAL_ID_TYPE  COLLATE DATABASE_DEFAULT not in\n			(\n		 	SELECT PERSON_ID_TYP\n			FROM  CF_PERSON_ID_TYPE \n			WHE"
+"RE	 IND_INDIVIDUAL_ID  = 'S'\n			)\n		\n		/* If LEGAL_ID_TYPE is not null and LEGAL_ID_NBR is null, message 'Missing own"
+"er legal id number' */\n		INSERT INTO   ["+ context.intermediateDB + "].[dbo].VW_IMPORT_MARK_RESULT   \n				( file_seq , \n				file_type , \n				file_series , \n				file_nbr , \n				ind_imp"
+"ort , \n				msg_import )  \n		SELECT\n				 T.file_seq,\n				 T.file_type,\n				 T.file_series,\n				 T.file_nbr,\n				 2"
+",\n				 'Missing owner legal id number'\n		FROM   ["+ context.intermediateDB + "].[dbo].VW_import_mark_owners T JOIN  ["+ context.intermediateDB + "].[dbo].VW_import_mark M ON T.file_seq  = M.file_seq\n			 AND	T.file_type  = M.file_type\n			 AND	T.file_series  = M.fi"
+"le_series\n			 AND	T.file_nbr  = M.file_nbr  \n		WHERE	 ind_import  = 0\n		 AND	LEGAL_ID_TYPE  is not null\n		 AND	LEGAL"
+"_ID_NBR  is null\n		\n		/* If LEGAL_ID_TYPE is null and LEGAL_ID_NBR is not null, message 'Missing owner legal id type' "
+"*/\n		INSERT INTO   ["+ context.intermediateDB + "].[dbo].VW_IMPORT_MARK_RESULT   \n				( file_seq , \n				file_type , \n				file_series , \n				file_nbr , \n				ind_imp"
+"ort , \n				msg_import )  \n		SELECT\n				 T.file_seq,\n				 T.file_type,\n				 T.file_series,\n				 T.file_nbr,\n				 2"
+",\n				 'Missing owner legal id type'\n		FROM   ["+ context.intermediateDB + "].[dbo].VW_import_mark_owners T JOIN  ["+ context.intermediateDB + "].[dbo].VW_import_mark M ON T.file_seq  = M.file_seq\n			 AND	T.file_type  = M.file_type\n			 AND	T.file_series  = M.fi"
+"le_series\n			 AND	T.file_nbr  = M.file_nbr  \n		WHERE	 ind_import  = 0\n		 AND	LEGAL_ID_TYPE  is null\n		 AND	LEGAL_ID_"
+"NBR  is not null\n		\n		/* If INDIVIDUAL_ID_TYPE is not null and INDIVIDUAL_ID_NBR is null, message 'Missing owner indiv"
+"idual id number' */\n		INSERT INTO   ["+ context.intermediateDB + "].[dbo].VW_IMPORT_MARK_RESULT   \n				( file_seq , \n				file_type , \n				file_series , \n				file_nbr , \n				ind_imp"
+"ort , \n				msg_import )  \n		SELECT\n				 T.file_seq,\n				 T.file_type,\n				 T.file_series,\n				 T.file_nbr,\n				 2"
+",\n				 'Missing owner individual id number'\n		FROM   ["+ context.intermediateDB + "].[dbo].VW_import_mark_owners T JOIN  ["+ context.intermediateDB + "].[dbo].VW_import_mark M ON T.file_seq  = M.file_seq\n			 AND	T.file_type  = M.file_type\n			 AND	T.file_series  = M.fi"
+"le_series\n			 AND	T.file_nbr  = M.file_nbr  \n		WHERE	 ind_import  = 0\n		 AND	INDIVIDUAL_ID_TYPE  is not null\n		 AND	"
+"INDIVIDUAL_ID_NBR  is null\n		\n		/* If INDIVIDUAL_ID_TYPE is null and INDIVIDUAL_ID_NBR is not null, message 'Missing o"
+"wner individual id type' */\n		INSERT INTO   ["+ context.intermediateDB + "].[dbo].VW_IMPORT_MARK_RESULT   \n				( file_seq , \n				file_type , \n				file_series , \n				file_nbr , \n				ind_imp"
+"ort , \n				msg_import )  \n		SELECT\n				 T.file_seq,\n				 T.file_type,\n				 T.file_series,\n				 T.file_nbr,\n				 2"
+",\n				 'Missing owner individual id type'\n		FROM   ["+ context.intermediateDB + "].[dbo].VW_import_mark_owners T JOIN  ["+ context.intermediateDB + "].[dbo].VW_import_mark M ON T.file_seq  = M.file_seq\n			 AND	T.file_type  = M.file_type\n			 AND	T.file_series  = M.fi"
+"le_series\n			 AND	T.file_nbr  = M.file_nbr  \n		WHERE	 ind_import  = 0\n		 AND	INDIVIDUAL_ID_TYPE  is null\n		 AND	INDI"
+"VIDUAL_ID_NBR  is not null\n		\n		/* RESIDENCE_COUNTRY_CODE: if not exists in CF_GEO_COUNTRY, message 'Invalid owner res"
+"idence country code' */\n		INSERT INTO   ["+ context.intermediateDB + "].[dbo].VW_IMPORT_MARK_RESULT   \n				( file_seq , \n				file_type , \n				file_series , \n				file_nbr , \n				ind_imp"
+"ort , \n				msg_import )  \n		SELECT\n				 T.file_seq,\n				 T.file_type,\n				 T.file_series,\n				 T.file_nbr,\n				 2"
+",\n				 'Invalid owner residence country code'\n		FROM   ["+ context.intermediateDB + "].[dbo].VW_import_mark_owners T JOIN  ["+ context.intermediateDB + "].[dbo].VW_import_mark M ON T.file_seq  = M.file_seq\n			 AND	T.file_type  = M.file_type\n			 AND	T.file_series  = M.fi"
+"le_series\n			 AND	T.file_nbr  = M.file_nbr  \n		WHERE	 ind_import  = 0\n		 AND	RESIDENCE_COUNTRY_CODE COLLATE DATABASE_"
+"DEFAULT not in\n			(\n		 	SELECT COUNTRY_CODE\n			FROM  CF_geo_country \n			)\n		\n		/* STATE_CODE: if not null and not "
+"exists RESIDENCE_COUNTRY_CODE / STATE_CODE in CF_GEO_STATE, \n		       message 'Invalid owner residence state code' */\n"
+"		INSERT INTO   ["+ context.intermediateDB + "].[dbo].VW_IMPORT_MARK_RESULT   \n				( file_seq , \n				file_type , \n				file_series , \n				file_nbr , \n				ind_imp"
+"ort , \n				msg_import )  \n		SELECT\n				 T.file_seq,\n				 T.file_type,\n				 T.file_series,\n				 T.file_nbr,\n				 2"
+",\n				 'Invalid owner residence state code'\n		FROM   ["+ context.intermediateDB + "].[dbo].VW_import_mark_owners T JOIN  ["+ context.intermediateDB + "].[dbo].VW_import_mark M ON T.file_seq  = M.file_seq\n			 AND	T.file_type  = M.file_type\n			 AND	T.file_series  = M.fi"
+"le_series\n			 AND	T.file_nbr  = M.file_nbr  \n		WHERE	 ind_import  = 0\n		 AND	STATE_CODE  is not null\n		 AND	 NOT EXI"
+"STS\n			(\n		 	SELECT\n					 CF_geo_state.COUNTRY_CODE,\n					 CF_geo_state.STATE_CODE\n			FROM  CF_geo_state \n			WHERE"
+"	 CF_geo_state.COUNTRY_CODE  = T.RESIDENCE_COUNTRY_CODE COLLATE DATABASE_DEFAULT\n			 AND	CF_geo_state.STATE_CODE  = T.S"
+"TATE_CODE COLLATE DATABASE_DEFAULT\n			)\n		\n		/* If STATE_CODE Is null and exist any CF_GEO_STATE with the RESIDENCE_C"
+"OUNTRY_CODE, \n		       message 'A state code is required for the specified owner residence country' */\n		INSERT INTO  "
+" ["+ context.intermediateDB + "].[dbo].VW_IMPORT_MARK_RESULT   \n				( file_seq , \n				file_type , \n				file_series , \n				file_nbr , \n				ind_imp"
+"ort , \n				msg_import )  \n		SELECT\n				 T.file_seq,\n				 T.file_type,\n				 T.file_series,\n				 T.file_nbr,\n				 2"
+",\n				 'A state code is required for the specified owner residence country'\n		FROM   ["+ context.intermediateDB + "].[dbo].VW_import_mark_owners T JOIN  ["+ context.intermediateDB + "].[dbo].VW_import_mark M ON T.file_seq  = M.file_seq\n			 AND	T.file_type  = M.file_type\n			 AND	T.file_series  = M.fi"
+"le_series\n			 AND	T.file_nbr  = M.file_nbr  \n		WHERE	 ind_import  = 0\n		 AND	STATE_CODE  is null\n		 AND	RESIDENCE_CO"
+"UNTRY_CODE COLLATE DATABASE_DEFAULT in\n			(\n		 	SELECT country_code\n			FROM  CF_geo_state S \n			)\n\n\n		\n		/* CITY"
+"_CODE: if not null and not exists CITY_CODE / STATE_CODE/RESIDENCE_COUNTRY_CODE in CF_GEO_CITY, \n		       message 'Inva"
+"lid owner city code' */\n		INSERT INTO   ["+ context.intermediateDB + "].[dbo].VW_IMPORT_MARK_RESULT   \n				( file_seq , \n				file_type , \n				file_series , \n				file_nbr , \n				ind_imp"
+"ort , \n				msg_import )  \n		SELECT\n				 T.file_seq,\n				 T.file_type,\n				 T.file_series,\n				 T.file_nbr,\n				 2"
+",\n				 'Invalid owner city code'\n		FROM   ["+ context.intermediateDB + "].[dbo].VW_import_mark_owners T JOIN  ["+ context.intermediateDB + "].[dbo].VW_import_mark M ON T.file_seq  = M.file_seq\n			 AND	T.file_type  = M.file_type\n			 AND	T.file_series  = M.fi"
+"le_series\n			 AND	T.file_nbr  = M.file_nbr  \n		WHERE	 ind_import  = 0\n		 AND	CITY_CODE  is not null\n		 AND	 NOT EXIS"
+"TS\n			(\n		 	SELECT\n					 CF_geo_city.COUNTRY_CODE,\n					 CF_geo_city.STATE_CODE\n			FROM  CF_geo_city \n			WHERE	 CF"
+"_geo_city.COUNTRY_CODE  = T.RESIDENCE_COUNTRY_CODE COLLATE DATABASE_DEFAULT\n			 AND	CF_geo_city.STATE_CODE  = T.STATE_C"
+"ODE COLLATE DATABASE_DEFAULT\n			 AND	CF_geo_city.CITY_CODE  = T.CITY_CODE COLLATE DATABASE_DEFAULT\n			)\n\n\n		\n		/* "
+"If PERSON_GROUP_CODE is not null and not exists in IP_PERSON_GROUP, message 'Invalid owner person group code' */\n		INSE"
+"RT INTO   ["+ context.intermediateDB + "].[dbo].VW_IMPORT_MARK_RESULT   \n				( file_seq , \n				file_type , \n				file_series , \n				file_nbr , \n				ind_imp"
+"ort , \n				msg_import )  \n		SELECT\n				 T.file_seq,\n				 T.file_type,\n				 T.file_series,\n				 T.file_nbr,\n				 2"
+",\n				 'Invalid owner person group code'\n		FROM   ["+ context.intermediateDB + "].[dbo].VW_import_mark_owners T JOIN  ["+ context.intermediateDB + "].[dbo].VW_import_mark M ON T.file_seq  = M.file_seq\n			 AND	T.file_type  = M.file_type\n			 AND	T.file_series  = M.fi"
+"le_series\n			 AND	T.file_nbr  = M.file_nbr  \n		WHERE	 ind_import  = 0\n		 AND	PERSON_GROUP_CODE  is not null\n		 AND	P"
+"ERSON_GROUP_CODE  COLLATE DATABASE_DEFAULT not in\n			(\n		 	SELECT PERSON_GROUP_NBR\n			FROM  IP_PERSON_GROUP \n			)\n	"
+"	\n		\n		/* owners must be different for each file */\n	/*	INSERT INTO   ["+ context.intermediateDB + "].[dbo].VW_IMPORT_MARK_RESULT   \n				( file_seq , \n				file_type , \n				file_series , \n				file_nbr , \n				ind_imp"
+"ort , \n				msg_import )\n				\n		SELECT DISTINCT \n			FILE_SEQ,\n			FILE_TYPE,\n			FILE_SERIES,\n			FILE_NBR,\n			2,\n	"
+"		'Duplicated owner'\n	    FROM  ["+ context.intermediateDB + "].[dbo].VW_IMPORT_MARK_OWNERS M\n		WHERE EXISTS(    \n			SELECT  FILE_SEQ,FILE_TYPE,FILE_SERIES,FILE_NBR,PERSON_NAME,NA"
+"TIONALITY_COUNTRY_CODE,\n					IND_COMPANY,LEGAL_NATURE,LEGAL_ID_TYPE,LEGAL_ID_NBR,INDIVIDUAL_ID_TYPE,INDIVIDUAL_ID_NBR, "
+" COUNT(*) \n			FROM  ["+ context.intermediateDB + "].[dbo].VW_IMPORT_MARK_OWNERS T \n			WHERE	T.file_seq  = M.file_seq\n					AND	T.file_type  = M.file_type\n					AND	T.fi"
+"le_series  = M.file_series\n					AND	T.file_nbr  = M.file_nbr   \n			GROUP BY FILE_SEQ,FILE_TYPE,FILE_SERIES,FILE_NBR,PE"
+"RSON_NAME,NATIONALITY_COUNTRY_CODE,IND_COMPANY,LEGAL_NATURE,LEGAL_ID_TYPE,LEGAL_ID_NBR,INDIVIDUAL_ID_TYPE,INDIVIDUAL_ID_"
+"NBR\n			HAVING COUNT(*)>1   \n		)\n 			*/\n				\n	  		\n		\n		\n		\n		/* 1.1.3  ["+ context.intermediateDB + "].[dbo].VW_IMPORT_MARK_REPRS validations */\n		/* 1.1.3.1 Representative validations */\n		/* Generate work table with "
+"FILE_SEQ, FILE_TYPE, FILE_SERIES, FILE_NBR, IND_SERVICE and COUNT(*) */\n		\n		\n		DECLARE @EXEC_IMMEDIATE_VAR1 VARCHAR "
+"(4000)\n		SELECT @EXEC_IMMEDIATE_VAR1  = 'TRUNCATE TABLE wrk_file_service_count' \n\n		EXECUTE (@EXEC_IMMEDIATE_VAR1)\n	"
+"	INSERT INTO  wrk_file_service_count    \n		SELECT\n				 FILE_SEQ,\n				 FILE_TYPE,\n				 FILE_SERIES,\n				 FILE_NBR,\n"
+"				 IND_SERVICE,\n				 COUNT(*) count1\n		FROM   ["+ context.intermediateDB + "].[dbo].VW_IMPORT_MARK_REPRS \n		GROUP BY FILE_SEQ,\n			 FILE_TYPE,\n			 FILE_SERIES,\n			 FILE_NBR,\n			  IND_SERVICE "
+"\n		\n		/* No service address: where a representative exists but no one has IND_SERVICE = 1, \n		       message 'No repr"
+"esentative flagged as service address' */\n		INSERT INTO   ["+ context.intermediateDB + "].[dbo].VW_IMPORT_MARK_RESULT   \n				( file_seq , \n				file_type , \n				file_series , \n				file_nbr , \n				ind_imp"
+"ort , \n				msg_import )  \n		SELECT\n				 file_seq,\n				 file_type,\n				 file_series,\n				 file_nbr,\n				 2,\n				 "
+"'No representative flagged as service address'\n		FROM   ["+ context.intermediateDB + "].[dbo].VW_import_mark M \n		WHERE	 ind_import  = 0\n		 AND	  exists\n			(\n		 	SELECT *\n			FROM  wrk_file_service_cou"
+"nt W \n			WHERE	 M.file_seq  = W.file_seq\n			 AND	M.file_type  = W.file_type\n			 AND	M.file_series  = W.file_series\n	"
+"		 AND	M.file_nbr  = W.file_nbr\n			)\n		 AND	NOT   exists\n			(\n		 	SELECT *\n			FROM  wrk_file_service_count W \n			W"
+"HERE	 M.file_seq  = W.file_seq\n			 AND	M.file_type  = W.file_type\n			 AND	M.file_series  = W.file_series\n			 AND	M.fi"
+"le_nbr  = W.file_nbr\n			 AND	ind_service  = 1\n			)\n		\n		/* Several service addresses: where exists corresponding tup"
+"le in the work table with IND_SERVICE = 1 and with count column > 1, \n		       message 'Several representatives flagged"
+" as service addresses' */\n		INSERT INTO   ["+ context.intermediateDB + "].[dbo].VW_IMPORT_MARK_RESULT   \n				( file_seq , \n				file_type , \n				file_series , \n				file_nbr , \n				ind_imp"
+"ort , \n				msg_import )  \n		SELECT\n				 M.file_seq,\n				 M.file_type,\n				 M.file_series,\n				 M.file_nbr,\n				 2"
+",\n				 'Several representatives flagged as service addresses'\n		FROM   ["+ context.intermediateDB + "].[dbo].VW_import_mark M JOIN wrk_file_service_count W ON M.file_seq  = W.file_seq\n			 AND	M.file_type  = W.file_type"
+"\n			 AND	M.file_series  = W.file_series\n			 AND	M.file_nbr  = W.file_nbr  \n		WHERE	 ind_import  = 0\n		 AND	ind_servic"
+"e  = 1\n		 AND	count1  > 1\n		\n		/* REPRESENTATIVE_TYPE: if null, message 'Null representative type' */\n		INSERT INTO "
+"  ["+ context.intermediateDB + "].[dbo].VW_IMPORT_MARK_RESULT   \n				( file_seq , \n				file_type , \n				file_series , \n				file_nbr , \n				ind_imp"
+"ort , \n				msg_import )  \n		SELECT\n				 T.file_seq,\n				 T.file_type,\n				 T.file_series,\n				 T.file_nbr,\n				 2"
+",\n				 'Null representative type'\n		FROM   ["+ context.intermediateDB + "].[dbo].VW_import_mark_reprs T JOIN  ["+ context.intermediateDB + "].[dbo].VW_import_mark M ON T.file_seq  = M.file_seq\n			 AND	T.file_type  = M.file_type\n			 AND	T.file_series  = M.fi"
+"le_series\n			 AND	T.file_nbr  = M.file_nbr  \n		WHERE	 ind_import  = 0\n		 AND	REPRESENTATIVE_TYPE  is null\n		\n		/* R"
+"EPRESENTATIVE_TYPE: if not exists in CF_REPRESENTATIVE_TYPE, message 'Invalid representative type' */\n		INSERT INTO   ["
+""+ context.intermediateDB + "].[dbo].VW_IMPORT_MARK_RESULT   \n				( file_seq , \n				file_type , \n				file_series , \n				file_nbr , \n				ind_imp"
+"ort , \n				msg_import )  \n		SELECT\n				 T.file_seq,\n				 T.file_type,\n				 T.file_series,\n				 T.file_nbr,\n				 2"
+",\n				 'Invalid representative type'\n		FROM   ["+ context.intermediateDB + "].[dbo].VW_import_mark_reprs T JOIN  ["+ context.intermediateDB + "].[dbo].VW_import_mark M ON T.file_seq  = M.file_seq\n			 AND	T.file_type  = M.file_type\n			 AND	T.file_series  = M.fi"
+"le_series\n			 AND	T.file_nbr  = M.file_nbr  \n		WHERE	 ind_import  = 0\n		 AND	REPRESENTATIVE_TYPE  not in\n			(\n		 	S"
+"ELECT REPRESENTATIVE_TYPE\n			FROM  CF_REPRESENTATIVE_TYPE \n			)\n		\n		/* AGENT_CODE: if not null and not exists in IF"
+"_AGENT, message 'Invalid agent code' */\n		INSERT INTO   ["+ context.intermediateDB + "].[dbo].VW_IMPORT_MARK_RESULT   \n				( file_seq , \n				file_type , \n				file_series , \n				file_nbr , \n				ind_imp"
+"ort , \n				msg_import )  \n		SELECT\n				 T.file_seq,\n				 T.file_type,\n				 T.file_series,\n				 T.file_nbr,\n				 2"
+",\n				 'Invalid agent code'\n		FROM   ["+ context.intermediateDB + "].[dbo].VW_import_mark_reprs T JOIN  ["+ context.intermediateDB + "].[dbo].VW_import_mark M ON T.file_seq  = M.file_seq\n			 AND	T.file_type  = M.file_type\n			 AND	T.file_series  = M.fi"
+"le_series\n			 AND	T.file_nbr  = M.file_nbr  \n		WHERE	 ind_import  = 0\n		 AND	AGENT_CODE  is not null\n		 AND	AGENT_CO"
+"DE  not in\n			(\n		 	SELECT AGENT_CODE\n			FROM  IP_AGENT \n			)\n		\n		/* 1.1.3.2 Person validations */\n		/* NATIONAL"
+"ITY_COUNTRY_CODE: if not exists in CF_GEO_COUNTRY, message 'Invalid representative nationality country code' */\n		INSER"
+"T INTO   ["+ context.intermediateDB + "].[dbo].VW_IMPORT_MARK_RESULT   \n				( file_seq , \n				file_type , \n				file_series , \n				file_nbr , \n				ind_imp"
+"ort , \n				msg_import )  \n		SELECT\n				 T.file_seq,\n				 T.file_type,\n				 T.file_series,\n				 T.file_nbr,\n				 2"
+",\n				 'Invalid representative nationality country code'\n		FROM   ["+ context.intermediateDB + "].[dbo].VW_import_mark_reprs T JOIN  ["+ context.intermediateDB + "].[dbo].VW_import_mark M ON T.file_seq  = M.file_seq\n			 AND	T.file_type  = M.file_type\n			 AND	T.file_series  = M.fi"
+"le_series\n			 AND	T.file_nbr  = M.file_nbr  \n		WHERE	 ind_import  = 0\n		 AND	NATIONALITY_COUNTRY_CODE COLLATE DATABAS"
+"E_DEFAULT not in\n			(\n		 	SELECT COUNTRY_CODE\n			FROM  CF_geo_country \n			)\n		\n		/* LEGAL_NATURE: if not null and "
+"IND_COMPANY = 0, message 'Representative legal nature only applies when the person is a company' */\n		INSERT INTO   ["+ context.intermediateDB + "].[dbo].VW_IMPORT_MARK_RESULT   \n				( file_seq , \n				file_type , \n				file_series , \n				file_nbr , \n				ind_imp"
+"ort , \n				msg_import )  \n		SELECT\n				 T.file_seq,\n				 T.file_type,\n				 T.file_series,\n				 T.file_nbr,\n				 2"
+",\n				 'Representative legal nature only applies when the person is a company'\n		FROM   ["+ context.intermediateDB + "].[dbo].VW_import_mark_reprs T JOIN  ["+ context.intermediateDB + "].[dbo].VW_import_mark M ON T.file_seq  = M.file_seq\n			 AND	T.file_type  = M.file_type\n			 AND	T.file_series  = M.fi"
+"le_series\n			 AND	T.file_nbr  = M.file_nbr  \n		WHERE	 ind_import  = 0\n		 AND	LEGAL_NATURE  is not null\n		 AND	IND_CO"
+"MPANY  = 0\n		\n		/* LEGAL_ID_TYPE: if not null and not exists if CF_PERSON_ID_TYPE with IND_GENERAL_ID = 'S', \n		     "
+"  message 'Invalid Representative legal id type' */\n		INSERT INTO   ["+ context.intermediateDB + "].[dbo].VW_IMPORT_MARK_RESULT   \n				( file_seq , \n				file_type , \n				file_series , \n				file_nbr , \n				ind_imp"
+"ort , \n				msg_import )  \n		SELECT\n				 T.file_seq,\n				 T.file_type,\n				 T.file_series,\n				 T.file_nbr,\n				 2"
+",\n				 'Invalid representative legal id type'\n		FROM   ["+ context.intermediateDB + "].[dbo].VW_import_mark_reprs T JOIN  ["+ context.intermediateDB + "].[dbo].VW_import_mark M ON T.file_seq  = M.file_seq\n			 AND	T.file_type  = M.file_type\n			 AND	T.file_series  = M.fi"
+"le_series\n			 AND	T.file_nbr  = M.file_nbr  \n		WHERE	 ind_import  = 0\n		 AND	LEGAL_ID_TYPE  is not null\n		 AND	LEGAL"
+"_ID_TYPE  COLLATE DATABASE_DEFAULT not in\n			(\n		 	SELECT PERSON_ID_TYP\n			FROM  CF_PERSON_ID_TYPE \n			WHERE	 IND_GE"
+"NERAL_ID  = 'S'\n			)\n		\n		/* INDIVIDUAL_ID_TYPE: if not null and not exists if CF_PERSON_ID_TYPE with IND_INDIVIDUAL_"
+"ID = 'S', \n		       message 'Invalid representative individual id type' */\n		INSERT INTO   ["+ context.intermediateDB + "].[dbo].VW_IMPORT_MARK_RESULT   \n				( file_seq , \n				file_type , \n				file_series , \n				file_nbr , \n				ind_imp"
+"ort , \n				msg_import )  \n		SELECT\n				 T.file_seq,\n				 T.file_type,\n				 T.file_series,\n				 T.file_nbr,\n				 2"
+",\n				 'Invalid representative individual id type'\n		FROM   ["+ context.intermediateDB + "].[dbo].VW_import_mark_reprs T JOIN  ["+ context.intermediateDB + "].[dbo].VW_import_mark M ON T.file_seq  = M.file_seq\n			 AND	T.file_type  = M.file_type\n			 AND	T.file_series  = M.fi"
+"le_series\n			 AND	T.file_nbr  = M.file_nbr  \n		WHERE	 ind_import  = 0\n		 AND	INDIVIDUAL_ID_TYPE  is not null\n		 AND	"
+"INDIVIDUAL_ID_TYPE  COLLATE DATABASE_DEFAULT not in\n			(\n		 	SELECT PERSON_ID_TYP\n			FROM  CF_PERSON_ID_TYPE \n			WHE"
+"RE	 IND_INDIVIDUAL_ID  = 'S'\n			)\n		\n		/* If LEGAL_ID_TYPE is not null and LEGAL_ID_NBR is null, message 'Missing rep"
+"resentative legal id number' */\n		INSERT INTO   ["+ context.intermediateDB + "].[dbo].VW_IMPORT_MARK_RESULT   \n				( file_seq , \n				file_type , \n				file_series , \n				file_nbr , \n				ind_imp"
+"ort , \n				msg_import )  \n		SELECT\n				 T.file_seq,\n				 T.file_type,\n				 T.file_series,\n				 T.file_nbr,\n				 2"
+",\n				 'Missing representative legal id number'\n		FROM   ["+ context.intermediateDB + "].[dbo].VW_import_mark_reprs T JOIN  ["+ context.intermediateDB + "].[dbo].VW_import_mark M ON T.file_seq  = M.file_seq\n			 AND	T.file_type  = M.file_type\n			 AND	T.file_series  = M.fi"
+"le_series\n			 AND	T.file_nbr  = M.file_nbr  \n		WHERE	 ind_import  = 0\n		 AND	LEGAL_ID_TYPE  is not null\n		 AND	LEGAL"
+"_ID_NBR  is null\n		\n		/* If LEGAL_ID_TYPE is null and LEGAL_ID_NBR is not null, message 'Missing representative legal "
+"id type' */\n		INSERT INTO   ["+ context.intermediateDB + "].[dbo].VW_IMPORT_MARK_RESULT   \n				( file_seq , \n				file_type , \n				file_series , \n				file_nbr , \n				ind_imp"
+"ort , \n				msg_import )  \n		SELECT\n				 T.file_seq,\n				 T.file_type,\n				 T.file_series,\n				 T.file_nbr,\n				 2"
+",\n				 'Missing representative legal id type'\n		FROM   ["+ context.intermediateDB + "].[dbo].VW_import_mark_reprs T JOIN  ["+ context.intermediateDB + "].[dbo].VW_import_mark M ON T.file_seq  = M.file_seq\n			 AND	T.file_type  = M.file_type\n			 AND	T.file_series  = M.fi"
+"le_series\n			 AND	T.file_nbr  = M.file_nbr  \n		WHERE	 ind_import  = 0\n		 AND	LEGAL_ID_TYPE  is null\n		 AND	LEGAL_ID_"
+"NBR  is not null\n		\n		/* If INDIVIDUAL_ID_TYPE is not null and INDIVIDUAL_ID_NBR is null, message 'Missing representat"
+"ive individual id number' */\n		INSERT INTO   ["+ context.intermediateDB + "].[dbo].VW_IMPORT_MARK_RESULT   \n				( file_seq , \n				file_type , \n				file_series , \n				file_nbr , \n				ind_imp"
+"ort , \n				msg_import )  \n		SELECT\n				 T.file_seq,\n				 T.file_type,\n				 T.file_series,\n				 T.file_nbr,\n				 2"
+",\n				 'Missing representative individual id number'\n		FROM   ["+ context.intermediateDB + "].[dbo].VW_import_mark_reprs T JOIN  ["+ context.intermediateDB + "].[dbo].VW_import_mark M ON T.file_seq  = M.file_seq\n			 AND	T.file_type  = M.file_type\n			 AND	T.file_series  = M.fi"
+"le_series\n			 AND	T.file_nbr  = M.file_nbr  \n		WHERE	 ind_import  = 0\n		 AND	INDIVIDUAL_ID_TYPE  is not null\n		 AND	"
+"INDIVIDUAL_ID_NBR  is null\n		\n		/* If INDIVIDUAL_ID_TYPE is null and INDIVIDUAL_ID_NBR is not null, message 'Missing r"
+"epresentative individual id type' */\n		INSERT INTO   ["+ context.intermediateDB + "].[dbo].VW_IMPORT_MARK_RESULT   \n				( file_seq , \n				file_type , \n				file_series , \n				file_nbr , \n				ind_imp"
+"ort , \n				msg_import )  \n		SELECT\n				 T.file_seq,\n				 T.file_type,\n				 T.file_series,\n				 T.file_nbr,\n				 2"
+",\n				 'Missing representative individual id type'\n		FROM   ["+ context.intermediateDB + "].[dbo].VW_import_mark_reprs T JOIN  ["+ context.intermediateDB + "].[dbo].VW_import_mark M ON T.file_seq  = M.file_seq\n			 AND	T.file_type  = M.file_type\n			 AND	T.file_series  = M.fi"
+"le_series\n			 AND	T.file_nbr  = M.file_nbr  \n		WHERE	 ind_import  = 0\n		 AND	INDIVIDUAL_ID_TYPE  is null\n		 AND	INDI"
+"VIDUAL_ID_NBR  is not null\n		\n		/* RESIDENCE_COUNTRY_CODE: if not exists in CF_GEO_COUNTRY, message 'Invalid represent"
+"ative residence country code' */\n		INSERT INTO   ["+ context.intermediateDB + "].[dbo].VW_IMPORT_MARK_RESULT   \n				( file_seq , \n				file_type , \n				file_series , \n				file_nbr , \n				ind_imp"
+"ort , \n				msg_import )  \n		SELECT\n				 T.file_seq,\n				 T.file_type,\n				 T.file_series,\n				 T.file_nbr,\n				 2"
+",\n				 'Invalid representative residence country code'\n		FROM   ["+ context.intermediateDB + "].[dbo].VW_import_mark_reprs T JOIN  ["+ context.intermediateDB + "].[dbo].VW_import_mark M ON T.file_seq  = M.file_seq\n			 AND	T.file_type  = M.file_type\n			 AND	T.file_series  = M.fi"
+"le_series\n			 AND	T.file_nbr  = M.file_nbr  \n		WHERE	 ind_import  = 0\n		 AND	RESIDENCE_COUNTRY_CODE COLLATE DATABASE_"
+"DEFAULT not in\n			(\n		 	SELECT COUNTRY_CODE\n			FROM  CF_geo_country \n			)\n		\n		/* STATE_CODE: if not null and not "
+"exists RESIDENCE_COUNTRY_CODE / STATE_CODE in CF_GEO_STATE, \n		       message 'Invalid representative residence state c"
+"ode' */\n		INSERT INTO   ["+ context.intermediateDB + "].[dbo].VW_IMPORT_MARK_RESULT   \n				( file_seq , \n				file_type , \n				file_series , \n				file_nbr , \n				ind_imp"
+"ort , \n				msg_import )  \n		SELECT\n				 T.file_seq,\n				 T.file_type,\n				 T.file_series,\n				 T.file_nbr,\n				 2"
+",\n				 'Invalid representative residence state code'\n		FROM   ["+ context.intermediateDB + "].[dbo].VW_import_mark_reprs T JOIN  ["+ context.intermediateDB + "].[dbo].VW_import_mark M ON T.file_seq  = M.file_seq\n			 AND	T.file_type  = M.file_type\n			 AND	T.file_series  = M.fi"
+"le_series\n			 AND	T.file_nbr  = M.file_nbr  \n		WHERE	 ind_import  = 0\n		 AND	STATE_CODE  is not null\n		 AND	 NOT EXI"
+"STS\n			(\n		 	SELECT\n					 CF_geo_state.COUNTRY_CODE,\n					 CF_geo_state.STATE_CODE\n			FROM  CF_geo_state \n			WHERE"
+"	 CF_geo_state.COUNTRY_CODE  = T.RESIDENCE_COUNTRY_CODE COLLATE DATABASE_DEFAULT\n			 AND	CF_geo_state.STATE_CODE  = T.S"
+"TATE_CODE COLLATE DATABASE_DEFAULT\n			)\n		\n		/* If STATE_CODE Is null and exist any CF_GEO_STATE with the RESIDENCE_C"
+"OUNTRY_CODE, \n		       message 'A state code is required for the specified representative residence country' */\n		INSE"
+"RT INTO   ["+ context.intermediateDB + "].[dbo].VW_IMPORT_MARK_RESULT   \n				( file_seq , \n				file_type , \n				file_series , \n				file_nbr , \n				ind_imp"
+"ort , \n				msg_import )  \n		SELECT\n				 T.file_seq,\n				 T.file_type,\n				 T.file_series,\n				 T.file_nbr,\n				 2"
+",\n				 'A state code is required for the specified representative residence country'\n		FROM   ["+ context.intermediateDB + "].[dbo].VW_import_mark_reprs T \n			   JOIN  ["+ context.intermediateDB + "].[dbo].VW_import_mark M ON \n					T.file_seq  = M.file_seq COLLATE DATABASE_DEFAULT\n			 AND	T.file_type  = M.file_typ"
+"e COLLATE DATABASE_DEFAULT\n			 AND	T.file_series  = M.file_series\n			 AND	T.file_nbr  = M.file_nbr  \n		WHERE	 ind_imp"
+"ort  = 0\n		 AND	STATE_CODE  is null\n		 AND	RESIDENCE_COUNTRY_CODE COLLATE DATABASE_DEFAULT in\n			(\n		 	SELECT countr"
+"y_code\n			FROM  CF_geo_state \n			)\n\n\n\n		\n		/* CITY_CODE: if not null and not exists CITY_CODE / STATE_CODE/RESIDE"
+"NCE_COUNTRY_CODE in CF_GEO_CITY, \n		       message 'Invalid representative city code' */\n		INSERT INTO   ["+ context.intermediateDB + "].[dbo].VW_IMPORT_MARK_RESULT   \n				( file_seq , \n				file_type , \n				file_series , \n				file_nbr , \n				ind_imp"
+"ort , \n				msg_import )  \n		SELECT\n				 T.file_seq,\n				 T.file_type,\n				 T.file_series,\n				 T.file_nbr,\n				 2"
+",\n				 'Invalid representative city code'\n		FROM   ["+ context.intermediateDB + "].[dbo].VW_import_mark_reprs T JOIN  ["+ context.intermediateDB + "].[dbo].VW_import_mark M ON T.file_seq  = M.file_seq\n			 AND	T.file_type  = M.file_type\n			 AND	T.file_series  = M.fi"
+"le_series\n			 AND	T.file_nbr  = M.file_nbr  \n		WHERE	 ind_import  = 0\n		 AND	CITY_CODE  is not null\n		 AND	 NOT EXIS"
+"TS\n			(\n		 	SELECT\n					 CF_geo_city.COUNTRY_CODE,\n					 CF_geo_city.STATE_CODE\n			FROM  CF_geo_city \n			WHERE	 CF"
+"_geo_city.COUNTRY_CODE  = T.RESIDENCE_COUNTRY_CODE COLLATE DATABASE_DEFAULT\n			 AND	CF_geo_city.STATE_CODE  = T.STATE_C"
+"ODE COLLATE DATABASE_DEFAULT\n			 AND	CF_geo_city.CITY_CODE  = T.CITY_CODE COLLATE DATABASE_DEFAULT\n			)\n\n\n		\n		/* "
+"If PERSON_GROUP_CODE is not null and not exists in IP_PERSON_GROUP, message 'Invalid representative person group code' *"
+"/\n		INSERT INTO   ["+ context.intermediateDB + "].[dbo].VW_IMPORT_MARK_RESULT   \n				( file_seq , \n				file_type , \n				file_series , \n				file_nbr , \n				ind_imp"
+"ort , \n				msg_import )  \n		SELECT\n				 T.file_seq,\n				 T.file_type,\n				 T.file_series,\n				 T.file_nbr,\n				 2"
+",\n				 'Invalid representative person group code'\n		FROM   ["+ context.intermediateDB + "].[dbo].VW_import_mark_reprs T JOIN  ["+ context.intermediateDB + "].[dbo].VW_import_mark M ON T.file_seq  = M.file_seq\n			 AND	T.file_type  = M.file_type\n			 AND	T.file_series  = M.fi"
+"le_series\n			 AND	T.file_nbr  = M.file_nbr  \n		WHERE	 ind_import  = 0\n		 AND	PERSON_GROUP_CODE  is not null\n		 AND	P"
+"ERSON_GROUP_CODE  COLLATE DATABASE_DEFAULT not in\n			(\n		 	SELECT PERSON_GROUP_NBR\n			FROM  IP_PERSON_GROUP \n			)\n	"
+"	\n		\n		\n			/* owners must be different for each file */\n		INSERT INTO   ["+ context.intermediateDB + "].[dbo].VW_IMPORT_MARK_RESULT   \n				( file_seq , \n				file_type , \n				file_series , \n				file_nbr , \n				ind_imp"
+"ort , \n				msg_import )\n				\n		SELECT DISTINCT \n			FILE_SEQ,\n			FILE_TYPE,\n			FILE_SERIES,\n			FILE_NBR,\n			2,\n	"
+"		'Duplicated representative data'\n	    FROM  ["+ context.intermediateDB + "].[dbo].VW_IMPORT_MARK_REPRS M\n		WHERE EXISTS(    \n			SELECT  FILE_SEQ,FILE_TYPE,FILE_SERIES,FILE_NBR,PERSON_NAME,NAT"
+"IONALITY_COUNTRY_CODE,\n					IND_COMPANY,LEGAL_NATURE,LEGAL_ID_TYPE,LEGAL_ID_NBR,INDIVIDUAL_ID_TYPE,INDIVIDUAL_ID_NBR,  "
+"COUNT(*) \n			FROM  ["+ context.intermediateDB + "].[dbo].VW_IMPORT_MARK_REPRS T \n			WHERE	T.file_seq  = M.file_seq\n					AND	T.file_type  = M.file_type\n					AND	T.fil"
+"e_series  = M.file_series\n					AND	T.file_nbr  = M.file_nbr   \n			GROUP BY FILE_SEQ,FILE_TYPE,FILE_SERIES,FILE_NBR,PER"
+"SON_NAME,NATIONALITY_COUNTRY_CODE,IND_COMPANY,LEGAL_NATURE,LEGAL_ID_TYPE,LEGAL_ID_NBR,INDIVIDUAL_ID_TYPE,INDIVIDUAL_ID_N"
+"BR\n			HAVING COUNT(*)>1   \n		)\n 			\n		\n		\n		\n		/* 1.1.4  ["+ context.intermediateDB + "].[dbo].VW_IMPORT_MARK_PRIORITIES validations */\n		/* COUNTRY_CODE: if not exists in CF_GEO_COUNTRY, message 'Invalid "
+"priority country code' */\n		INSERT INTO   ["+ context.intermediateDB + "].[dbo].VW_IMPORT_MARK_RESULT   \n				( file_seq , \n				file_type , \n				file_series , \n				file_nbr , \n				ind_imp"
+"ort , \n				msg_import )  \n		SELECT\n				 T.file_seq,\n				 T.file_type,\n				 T.file_series,\n				 T.file_nbr,\n				 2"
+",\n				 'Invalid priority country code'\n		FROM   ["+ context.intermediateDB + "].[dbo].VW_import_mark_priorities T JOIN  ["+ context.intermediateDB + "].[dbo].VW_import_mark M ON T.file_seq  = M.file_seq\n			 AND	T.file_type  = M.file_type\n			 AND	T.file_series  = M.fi"
+"le_series\n			 AND	T.file_nbr  = M.file_nbr  \n		WHERE	 ind_import  = 0\n		 AND	COUNTRY_CODE  COLLATE DATABASE_DEFAULT n"
+"ot in\n			(\n		 	SELECT COUNTRY_CODE\n			FROM  CF_GEO_COUNTRY \n			)\n		\n		/* Generate work table with FILE_SEQ, FILE_T"
+"YPE, FILE_SERIES, FILE_NBR, APPLICATION_ID and COUNT(*) */\n		\n		\n		DECLARE @EXEC_IMMEDIATE_VAR2 VARCHAR (4000)\n		SEL"
+"ECT @EXEC_IMMEDIATE_VAR2  = 'TRUNCATE TABLE wrk_file_priority_count' \n\n		EXECUTE (@EXEC_IMMEDIATE_VAR2)\n		INSERT INTO"
+"  wrk_file_priority_count    \n		SELECT\n				 FILE_SEQ,\n				 FILE_TYPE,\n				 FILE_SERIES,\n				 FILE_NBR,\n				 APPLIC"
+"ATION_ID,\n				 COUNT(*) count1\n		FROM   ["+ context.intermediateDB + "].[dbo].VW_IMPORT_MARK_PRIORITIES \n		GROUP BY FILE_SEQ,\n			 FILE_TYPE,\n			 FILE_SERIES,\n			 FILE_NBR,\n			  APPLICA"
+"TION_ID \n		\n		/* Duplicate application id: where exists corresponding tuple in the work table with the same APPLICATIO"
+"N_ID \n		       and with count column > 1, message 'Several priorities use the same application id' */\n		INSERT INTO   "
+"["+ context.intermediateDB + "].[dbo].VW_IMPORT_MARK_RESULT   \n				( file_seq , \n				file_type , \n				file_series , \n				file_nbr , \n				ind_imp"
+"ort , \n				msg_import )  \n		SELECT\n				 M.file_seq,\n				 M.file_type,\n				 M.file_series,\n				 M.file_nbr,\n				 2"
+",\n				 'Several priorities use the same application id'\n		FROM   ["+ context.intermediateDB + "].[dbo].VW_import_mark_priorities T JOIN  ["+ context.intermediateDB + "].[dbo].VW_import_mark M ON T.file_seq  = M.file_seq\n			 AND	T.file_type  = M.file_type\n			 AND	T.file_series  = M.fi"
+"le_series\n			 AND	T.file_nbr  = M.file_nbr  JOIN wrk_file_priority_count W ON T.file_seq  = W.file_seq\n			 AND	T.file_"
+"type  = W.file_type\n			 AND	T.file_series  = W.file_series\n			 AND	T.file_nbr  = W.file_nbr\n			 AND	T.application_id "
+" = W.application_id  \n		WHERE	 ind_import  = 0\n		 AND	count1  > 1\n		\n		/* 1.1.5  ["+ context.intermediateDB + "].[dbo].VW_IMPORT_MARK_VIENNA_CLASSES validations */\n		/* Category: if VIENNA_CATEGORY / VIENNA_EDITION_CODE not exist"
+"s in CF_CLASS_VIENNA_CATEG, message 'Invalid Vienna category / edition codes' */\n		/* IPAS-1273/1341 Added VIENNA_EDITI"
+"ON_CODE for Vienna classification*/\n		INSERT INTO   ["+ context.intermediateDB + "].[dbo].VW_IMPORT_MARK_RESULT   \n				( file_seq , \n				file_type , \n				file_series , \n				file_nbr , \n				ind_imp"
+"ort , \n				msg_import )  \n		SELECT\n				 T.file_seq,\n				 T.file_type,\n				 T.file_series,\n				 T.file_nbr,\n				 2"
+",\n				 'Invalid Vienna category / edition codes'\n		FROM   ["+ context.intermediateDB + "].[dbo].VW_import_mark_vienna_classes T JOIN  ["+ context.intermediateDB + "].[dbo].VW_import_mark M ON T.file_seq  = M.file_seq\n			 AND	T.file_type  = M.file_type\n			 AND	T.file_series  = M.fi"
+"le_series\n			 AND	T.file_nbr  = M.file_nbr  \n		WHERE	 ind_import  = 0\n	    AND NOT EXISTS\n			(\n		 	 SELECT	*\n			 F"
+"ROM  CF_CLASS_VIENNA_CATEG \n			 WHERE	 CF_CLASS_VIENNA_CATEG.VIENNA_CATEGORY_CODE  = T.VIENNA_CATEGORY			 \n			 AND	CF_"
+"CLASS_VIENNA_CATEG.VIENNA_EDITION_CODE   = T.VIENNA_EDITION_CODE\n			)			\n		\n		/* Division: if VIENNA_CATEGORY / VIENN"
+"A_DIVISION / VIENNA_EDITION_CODE not exists in CF_CLASS_VIENNA_DIVIS, \n		       message 'Invalid Vienna category / divi"
+"sion / edition codes' */\n		/* IPAS-1273/1341 Added VIENNA_EDITION_CODE for Vienna classification*/	   \n		INSERT INTO  "
+" ["+ context.intermediateDB + "].[dbo].VW_IMPORT_MARK_RESULT   \n				( file_seq , \n				file_type , \n				file_series , \n				file_nbr , \n				ind_imp"
+"ort , \n				msg_import )  \n		SELECT\n				 T.file_seq,\n				 T.file_type,\n				 T.file_series,\n				 T.file_nbr,\n				 2"
+",\n				 'Invalid Vienna category / division / edition codes'\n		FROM   ["+ context.intermediateDB + "].[dbo].VW_import_mark_vienna_classes T JOIN  ["+ context.intermediateDB + "].[dbo].VW_import_mark M ON T.file_seq  = M.file_seq\n			 AND	T.file_type  = M.file_type\n			 AND	T.file_series  = M.fi"
+"le_series\n			 AND	T.file_nbr  = M.file_nbr  \n		WHERE	 ind_import  = 0\n		 AND	 NOT EXISTS\n			(\n		 	SELECT	*\n			FROM"
+"  CF_CLASS_VIENNA_DIVIS \n			WHERE	 CF_CLASS_VIENNA_DIVIS.VIENNA_CATEGORY_CODE  = T.VIENNA_CATEGORY\n			 AND	CF_CLASS_VI"
+"ENNA_DIVIS.VIENNA_DIVISION_CODE   = T.VIENNA_DIVISION\n			 AND	CF_CLASS_VIENNA_DIVIS.VIENNA_EDITION_CODE   = T.VIENNA_ED"
+"ITION_CODE\n			)\n		\n		/* Section: if VIENNA_SECTION is not null and VIENNA_CATEGORY / VIENNA_DIVISION / VIENNA_SECTION"
+" / VIENNA_EDITION_CODE\n		       not exists in CF_CLASS_VIENNA_SECT, message 'Invalid Vienna category / division / secti"
+"on / edition codes' */\n		/* IPAS-1273/1341 Added VIENNA_EDITION_CODE for Vienna classification*/	   \n		INSERT INTO   ["
+""+ context.intermediateDB + "].[dbo].VW_IMPORT_MARK_RESULT   \n				( file_seq , \n				file_type , \n				file_series , \n				file_nbr , \n				ind_imp"
+"ort , \n				msg_import )  \n		SELECT\n				 T.file_seq,\n				 T.file_type,\n				 T.file_series,\n				 T.file_nbr,\n				 2"
+",\n				 'Invalid Vienna category / division / section / edition codes'\n		FROM   ["+ context.intermediateDB + "].[dbo].VW_import_mark_vienna_classes T JOIN  ["+ context.intermediateDB + "].[dbo].VW_import_mark M ON T.file_seq  = M.file_seq\n			 AND	T.file_type  = M.file_type\n			 AND	T.file_series  = M.fi"
+"le_series\n			 AND	T.file_nbr  = M.file_nbr  \n		WHERE	 ind_import  = 0\n		 AND	VIENNA_SECTION  is not null\n		 AND	 NOT"
+" EXISTS\n			(\n		 	SELECT *\n			FROM  CF_CLASS_VIENNA_SECT \n			WHERE	 CF_CLASS_VIENNA_SECT.VIENNA_CATEGORY_CODE  = T.VI"
+"ENNA_CATEGORY\n			 AND	CF_CLASS_VIENNA_SECT.VIENNA_DIVISION_CODE   = T.VIENNA_DIVISION\n			 AND	CF_CLASS_VIENNA_SECT.VIE"
+"NNA_SECTION_CODE    = T.VIENNA_SECTION\n			 AND	CF_CLASS_VIENNA_SECT.VIENNA_EDITION_CODE   = T.VIENNA_EDITION_CODE\n			)"
+"\n		\n		/* If VIENNA_SECTION is null and the configuration parameter 'VienaElementoOpcional' indicates N, \n		       mes"
+"sage 'Current configuration indicates that Vienna section is required' */\n		INSERT INTO   ["+ context.intermediateDB + "].[dbo].VW_IMPORT_MARK_RESULT   \n				( file_seq , \n				file_type , \n				file_series , \n				file_nbr , \n				ind_imp"
+"ort , \n				msg_import )  \n		SELECT\n				 T.file_seq,\n				 T.file_type,\n				 T.file_series,\n				 T.file_nbr,\n				 2"
+",\n				 'Current configuration indicates that Vienna section is required'\n		FROM   ["+ context.intermediateDB + "].[dbo].VW_import_mark_vienna_classes T JOIN  ["+ context.intermediateDB + "].[dbo].VW_import_mark M ON T.file_seq  = M.file_seq\n			 AND	T.file_type  = M.file_type\n			 AND	T.file_series  = M.fi"
+"le_series\n			 AND	T.file_nbr  = M.file_nbr ,\n			 CF_config_param \n		WHERE	 ind_import  = 0\n		 AND	VIENNA_SECTION  is"
+" null\n		 AND	config_code  = 'VienaElementoOpcional'\n		 AND	value  = 'N'\n		\n		/* Generate work table with VIENNA_CATE"
+"GORY, VIENNA_DIVISION, VIENNA_SECTION and COUNT(*) */\n		/* IPAS-1273/1341 Added VIENNA_EDITION_CODE for Vienna classifi"
+"cation*/\n		\n		DECLARE @EXEC_IMMEDIATE_VAR3 VARCHAR (4000)\n		SELECT @EXEC_IMMEDIATE_VAR3  = 'TRUNCATE TABLE wrk_file_v"
+"ienna_count' \n\n		EXECUTE (@EXEC_IMMEDIATE_VAR3)\n		INSERT INTO  wrk_file_vienna_count    \n		SELECT\n				 FILE_SEQ,\n	"
+"			 FILE_TYPE,\n				 FILE_SERIES,\n				 FILE_NBR,\n				 VIENNA_EDITION_CODE,\n				 VIENNA_CATEGORY,\n				 VIENNA_DIVISIO"
+"N,\n				 VIENNA_SECTION,\n				 COUNT(*) count1\n		FROM   ["+ context.intermediateDB + "].[dbo].VW_IMPORT_MARK_VIENNA_CLASSES \n		GROUP BY FILE_SEQ,\n			 FILE_TYPE,\n			 FILE_SERIES,\n			 FILE_NBR,\n			 VIEN"
+"NA_EDITION_CODE,\n			 VIENNA_CATEGORY,\n			 VIENNA_DIVISION,\n			  VIENNA_SECTION \n		\n		/* If several tuples exist for"
+" the same Vienna codes, message 'Several Vienna classes with the same number' */\n		INSERT INTO   ["+ context.intermediateDB + "].[dbo].VW_IMPORT_MARK_RESULT   \n				( file_seq , \n				file_type , \n				file_series , \n				file_nbr , \n				ind_imp"
+"ort , \n				msg_import )  \n		SELECT\n				 M.file_seq,\n				 M.file_type,\n				 M.file_series,\n				 M.file_nbr,\n				 2"
+",\n				 'Several Vienna classes with the same number'\n		FROM   ["+ context.intermediateDB + "].[dbo].VW_import_mark M JOIN wrk_file_vienna_count W ON M.file_seq  = W.file_seq\n			 AND	M.file_type  = W.file_type\n"
+"			 AND	M.file_series  = W.file_series\n			 AND	M.file_nbr  = W.file_nbr  \n		WHERE	 ind_import  = 0\n		 AND	count1  > 1"
+"\n		\n		/* 1.1.6  ["+ context.intermediateDB + "].[dbo].VW_IMPORT_MARK_NICE_CLASSES validations */\n		/* Generate work table with FILE_SEQ, FILE_TYPE, FILE_SERIES, FIL"
+"E_NBR, NICE_CLASS_NBR and COUNT(*) */\n		/* IPAS-1273/1341 Added NICE_CLASS_VERSION for NICE classification */\n		\n		DE"
+"CLARE @EXEC_IMMEDIATE_VAR4 VARCHAR (4000)\n		SELECT @EXEC_IMMEDIATE_VAR4  = 'TRUNCATE TABLE wrk_file_nice_count' \n\n		E"
+"XECUTE (@EXEC_IMMEDIATE_VAR4)\n		INSERT INTO  wrk_file_nice_count    \n		SELECT\n				 FILE_SEQ,\n				 FILE_TYPE,\n				 F"
+"ILE_SERIES,\n				 FILE_NBR,\n				 NICE_CLASS_VERSION,\n				 NICE_CLASS_NBR,				 \n				 COUNT(*) count1\n		FROM   ["+ context.intermediateDB + "].[dbo].VW_IMPORT_MARK_NICE_CLASSES \n		GROUP BY FILE_SEQ,\n			 FILE_TYPE,\n			 FILE_SERIES,\n			 FILE_NBR,\n			 NICE_C"
+"LASS_VERSION,\n			  NICE_CLASS_NBR \n		\n		/* NICE_CLASS_NBR: if not exists in CF_CLASS_NICE, message 'Invalid Nice clas"
+"s number / version' */\n		/* IPAS-1273/1341 Added NICE_CLASS_VERSION for NICE classification */\n		INSERT INTO   ["+ context.intermediateDB + "].[dbo].VW_IMPORT_MARK_RESULT   \n				( file_seq , \n				file_type , \n				file_series , \n				file_nbr , \n				ind_imp"
+"ort , \n				msg_import )  \n		SELECT\n				 T.file_seq,\n				 T.file_type,\n				 T.file_series,\n				 T.file_nbr,\n				 2"
+",\n				 'Invalid Nice class number / version'\n		FROM   ["+ context.intermediateDB + "].[dbo].VW_import_mark_nice_classes T JOIN  ["+ context.intermediateDB + "].[dbo].VW_import_mark M ON T.file_seq  = M.file_seq\n			 AND	T.file_type  = M.file_type\n			 AND	T.file_series  = M.fi"
+"le_series\n			 AND	T.file_nbr  = M.file_nbr  \n		WHERE	 ind_import  = 0\n		AND NOT EXISTS\n			(\n		 	 SELECT	*\n			 FROM"
+"   CF_CLASS_NICE \n			 WHERE	CF_CLASS_NICE.NICE_CLASS_CODE  = T.NICE_CLASS_NBR			 \n			 AND	CF_CLASS_NICE.NICE_CLASS_VER"
+"SION   = T.NICE_CLASS_VERSION\n			)		\n		\n		/* NICE_CLASS_STATUS: if not exists in CF_PROCESS_RESULT_TYPE, message 'Inv"
+"alid Nice class status' */\n		INSERT INTO   ["+ context.intermediateDB + "].[dbo].VW_IMPORT_MARK_RESULT   \n				( file_seq , \n				file_type , \n				file_series , \n				file_nbr , \n				ind_imp"
+"ort , \n				msg_import )  \n		SELECT\n				 T.file_seq,\n				 T.file_type,\n				 T.file_series,\n				 T.file_nbr,\n				 2"
+",\n				 'Invalid Nice class status'\n		FROM   ["+ context.intermediateDB + "].[dbo].VW_import_mark_nice_classes T JOIN  ["+ context.intermediateDB + "].[dbo].VW_import_mark M ON T.file_seq  = M.file_seq\n			 AND	T.file_type  = M.file_type\n			 AND	T.file_series  = M.fi"
+"le_series\n			 AND	T.file_nbr  = M.file_nbr  \n		WHERE	 ind_import  = 0\n		 AND	NICE_CLASS_STATUS COLLATE DATABASE_DEFAU"
+"LT not in\n			(\n		 	SELECT NICE_CLASS_STATUS_WCODE\n			FROM  CF_PROCESS_RESULT_TYPE\n			)\n		\n\n		/* If several tuples"
+" exist for the same NICE_CLASS_NBR, message 'Several Nice classes with the same number' */\n		INSERT INTO   ["+ context.intermediateDB + "].[dbo].VW_IMPORT_MARK_RESULT   \n				( file_seq , \n				file_type , \n				file_series , \n				file_nbr , \n				ind_imp"
+"ort , \n				msg_import )  \n		SELECT\n				 M.file_seq,\n				 M.file_type,\n				 M.file_series,\n				 M.file_nbr,\n				 2"
+",\n				 'Several Nice classes with the same number'\n		FROM   ["+ context.intermediateDB + "].[dbo].VW_import_mark M JOIN wrk_file_nice_count W ON M.file_seq  = W.file_seq\n			 AND	M.file_type  = W.file_type\n		"
+"	 AND	M.file_series  = W.file_series\n			 AND	M.file_nbr  = W.file_nbr  \n		WHERE	 ind_import  = 0\n		 AND	count1  > 1\n"
+"		\n		/* 1.1.7  ["+ context.intermediateDB + "].[dbo].VW_IMPORT_MARK_NATL_CLASSES validations */\n		/* NATIONAL_CLASS_NBR: if not exists in CF_CLASS_NATL, message 'I"
+"nvalid national goods and services class number' */\n		INSERT INTO   ["+ context.intermediateDB + "].[dbo].VW_IMPORT_MARK_RESULT   \n				( file_seq , \n				file_type , \n				file_series , \n				file_nbr , \n				ind_imp"
+"ort , \n				msg_import )  \n		SELECT\n				 T.file_seq,\n				 T.file_type,\n				 T.file_series,\n				 T.file_nbr,\n				 2"
+",\n				 'Invalid national goods and services class number'\n		FROM   ["+ context.intermediateDB + "].[dbo].VW_import_mark_natl_classes T JOIN  ["+ context.intermediateDB + "].[dbo].VW_import_mark M ON T.file_seq  = M.file_seq\n			 AND	T.file_type  = M.file_type\n			 AND	T.file_series  = M.fi"
+"le_series\n			 AND	T.file_nbr  = M.file_nbr  \n		WHERE	 ind_import  = 0\n		 AND	NATIONAL_CLASS_NBR  not in\n			(\n		 	SE"
+"LECT NATL_CLASS_CODE\n			FROM  CF_CLASS_NATL \n			)\n		\n		/* OJO NATIONAL_CLASS_NBR: if not exists in CF_CLASS_NATL_2_N"
+"ICE, \n		       message 'National goods and services class number not mapped to Nice class(es)' */\n		INSERT INTO   ["+ context.intermediateDB + "].[dbo].VW_IMPORT_MARK_RESULT   \n				( file_seq , \n				file_type , \n				file_series , \n				file_nbr , \n				ind_imp"
+"ort , \n				msg_import )  \n		SELECT\n				 T.file_seq,\n				 T.file_type,\n				 T.file_series,\n				 T.file_nbr,\n				 2"
+",\n				 'National goods and services class number not mapped to Nice class(es)'\n		FROM   ["+ context.intermediateDB + "].[dbo].VW_import_mark_natl_classes T JOIN  ["+ context.intermediateDB + "].[dbo].VW_import_mark M ON T.file_seq  = M.file_seq\n			 AND	T.file_type  = M.file_type\n			 AND	T.file_series  = M.fi"
+"le_series\n			 AND	T.file_nbr  = M.file_nbr  \n		WHERE	 ind_import  = 0\n		 AND	NATIONAL_CLASS_NBR  not in\n			(\n		 	SE"
+"LECT NATL_CLASS_CODE\n			FROM  CF_CLASS_NATL_2_SEARCH\n			)\n		\n		/* If a mark has no Nice and no national class, \n		 "
+"      message 'Mark has no Nice class and no national class' */\n		INSERT INTO   ["+ context.intermediateDB + "].[dbo].VW_IMPORT_MARK_RESULT   \n				( file_seq , \n				file_type , \n				file_series , \n				file_nbr , \n				ind_imp"
+"ort , \n				msg_import )  \n		SELECT\n				 M.file_seq,\n				 M.file_type,\n				 M.file_series,\n				 M.file_nbr,\n				 2"
+",\n				 'Mark has no Nice class and no national class'\n		FROM   ["+ context.intermediateDB + "].[dbo].VW_import_mark M \n		WHERE	 ind_import  = 0\n		 AND	NOT   exists\n			(\n		 	SELECT *\n			FROM   ["+ context.intermediateDB + "].[dbo].VW_IMPORT_MARK_NICE_CLASSES C1 \n			WHERE	 M.file_seq  = C1.file_seq\n			 AND	M.file_type  = C1.file_type\n			 "
+"AND	M.file_series  = C1.file_series\n			 AND	M.file_nbr  = C1.file_nbr\n			)\n		 AND	NOT   exists\n			(\n		 	SELECT *\n	"
+"		FROM   ["+ context.intermediateDB + "].[dbo].VW_IMPORT_MARK_NATL_CLASSES C2 \n			WHERE	 M.file_seq  = C2.file_seq\n			 AND	M.file_type  = C2.file_type\n			 "
+"AND	M.file_series  = C2.file_series\n			 AND	M.file_nbr  = C2.file_nbr\n			)\n		\n		/* 1.1.8  ["+ context.intermediateDB + "].[dbo].VW_IMPORT_MARK_PAYMENTS validations */\n		/* RECEIPT_TYPE: if not exists in CF_RECEIPT_TYPE, message 'Invalid r"
+"eceipt type' */\n		INSERT INTO   ["+ context.intermediateDB + "].[dbo].VW_IMPORT_MARK_RESULT   \n				( file_seq , \n				file_type , \n				file_series , \n				file_nbr , \n				ind_imp"
+"ort , \n				msg_import )  \n		SELECT\n				 T.file_seq,\n				 T.file_type,\n				 T.file_series,\n				 T.file_nbr,\n				 2"
+",\n				 'Invalid receipt type'\n		FROM   ["+ context.intermediateDB + "].[dbo].VW_import_mark_payments T JOIN  ["+ context.intermediateDB + "].[dbo].VW_import_mark M ON T.file_seq  = M.file_seq\n			 AND	T.file_type  = M.file_type\n			 AND	T.file_series  = M.fi"
+"le_series\n			 AND	T.file_nbr  = M.file_nbr  \n		WHERE	 ind_import  = 0\n		 AND	RECEIPT_TYPE  COLLATE DATABASE_DEFAULT n"
+"ot in\n			(\n		 	SELECT RECEIPT_TYP\n			FROM  CF_RECEIPT_TYPE \n			)\n		\n		/* CURRENCY_TYPE: if not exists in CF_CURREN"
+"CY_TYPE, message 'Invalid currency type' */\n		INSERT INTO   ["+ context.intermediateDB + "].[dbo].VW_IMPORT_MARK_RESULT   \n				( file_seq , \n				file_type , \n				file_series , \n				file_nbr , \n				ind_imp"
+"ort , \n				msg_import )  \n		SELECT\n				 T.file_seq,\n				 T.file_type,\n				 T.file_series,\n				 T.file_nbr,\n				 2"
+",\n				 'Invalid currency type'\n		FROM   ["+ context.intermediateDB + "].[dbo].VW_import_mark_payments T JOIN  ["+ context.intermediateDB + "].[dbo].VW_import_mark M ON T.file_seq  = M.file_seq\n			 AND	T.file_type  = M.file_type\n			 AND	T.file_series  = M.fi"
+"le_series\n			 AND	T.file_nbr  = M.file_nbr  \n		WHERE	 ind_import  = 0\n		 AND	CURRENCY_TYPE COLLATE DATABASE_DEFAULT n"
+"ot in\n			(\n		 	SELECT CURRENCY_TYP\n			FROM  CF_CURRENCY_TYPE \n			)\n\n\n		/* ["+ context.intermediateDB + "].[dbo].VW_IMPORT_MARK_VALID_STATES validations	*/\n		\n		/* Check if validity national states is missing */\n/*		INSER"
+"T INTO   ["+ context.intermediateDB + "].[dbo].VW_IMPORT_MARK_RESULT   \n				( file_seq , \n				file_type , \n				file_series , \n				file_nbr , \n				ind_imp"
+"ort , \n				msg_import )  \n		SELECT\n				 file_seq,\n				 file_type,\n				 file_series,\n				 file_nbr,\n				 2,\n				 "
+"'The list of validity national states is missing'\n		FROM   ["+ context.intermediateDB + "].[dbo].VW_IMPORT_MARK m, CF_APPLICATION_TYPE t\n                WHERE\n                        ind_import=0 and \n    "
+"                    m.APPLICATION_TYPE COLLATE DATABASE_DEFAULT  =  t.APPL_TYP and \n                        t.IND_VALID"
+"_IN_STATES='S' and\n                        not exists (select * from  ["+ context.intermediateDB + "].[dbo].VW_IMPORT_MARK_VALID_STATES s where\n                         s.FILE_SEQ=m.FILE_SEQ and\n                      "
+"   s.FILE_TYPE=m.FILE_TYPE and\n                         s.FILE_SERIES=m.FILE_SERIES and\n                         s.FIL"
+"E_NBR=m.FILE_NBR);\n*/\n\n		/* Check if validity national states must be empty */\n/*		INSERT INTO   ["+ context.intermediateDB + "].[dbo].VW_IMPORT_MARK_RESULT   \n				( file_seq , \n				file_type , \n				file_series , \n				file_nbr , \n				ind_imp"
+"ort , \n				msg_import )  \n		SELECT\n				 file_seq,\n				 file_type,\n				 file_series,\n				 file_nbr,\n				 2,\n				 "
+"'The list of validity national states does not apply for this application type'\n		FROM   ["+ context.intermediateDB + "].[dbo].VW_IMPORT_MARK m, CF_APPLICATION_TYPE t\n                WHERE\n                        ind_import=0 and \n    "
+"                    m.APPLICATION_TYPE COLLATE DATABASE_DEFAULT  =  t.APPL_TYP and \n                        t.IND_VALID"
+"_IN_STATES='N' and\n                        exists (select * from  ["+ context.intermediateDB + "].[dbo].VW_IMPORT_MARK_VALID_STATES s where\n                         s.FILE_SEQ=m.FILE_SEQ and\n                      "
+"   s.FILE_TYPE=m.FILE_TYPE and\n                         s.FILE_SERIES=m.FILE_SERIES and\n                         s.FIL"
+"E_NBR=m.FILE_NBR);\n\n                	INSERT INTO   ["+ context.intermediateDB + "].[dbo].VW_IMPORT_MARK_RESULT   \n				( file_seq , \n				file_type , \n				file_series , \n				file_nbr , \n				ind_imp"
+"ort , \n				msg_import )  \n		SELECT\n				 file_seq,\n				 file_type,\n				 file_series,\n				 file_nbr,\n				 2,\n				 "
+"'The list of validity national states does not apply for this application type'\n		FROM   ["+ context.intermediateDB + "].[dbo].VW_IMPORT_MARK m, CF_APPLICATION_TYPE t\n                WHERE\n                        ind_import=0 and \n    "
+"                    m.APPLICATION_TYPE COLLATE DATABASE_DEFAULT  =  t.APPL_TYP and \n                        t.IND_VALID"
+"_IN_STATES='N' and\n                        exists (select * from  ["+ context.intermediateDB + "].[dbo].VW_IMPORT_MARK_VALID_STATES s where\n                         s.FILE_SEQ=m.FILE_SEQ and\n                      "
+"   s.FILE_TYPE=m.FILE_TYPE and\n                         s.FILE_SERIES=m.FILE_SERIES and\n                         s.FIL"
+"E_NBR=m.FILE_NBR);\n*/\n                         /* Check if The country code used in one of the validity states is not "
+"the national country code*/\n\n                	INSERT INTO   ["+ context.intermediateDB + "].[dbo].VW_IMPORT_MARK_RESULT   \n				( file_seq , \n				file_type , \n				file_series , \n				file_nbr , \n				ind_imp"
+"ort , \n				msg_import )  \n		SELECT\n				 file_seq,\n				 file_type,\n				 file_series,\n				 file_nbr,\n				 2,\n				 "
+"'The country code used in one of the validity states is not the national country code'\n		FROM   ["+ context.intermediateDB + "].[dbo].VW_IMPORT_MARK m, CF_CONFIG_PARAM t\n                WHERE\n                        ind_import=0 and \n        "
+"                t.CONFIG_CODE='CodPaisEstadisticasOmpi' and\n                        exists (select * from  ["+ context.intermediateDB + "].[dbo].VW_IMPORT_MARK_VALID_STATES s where\n                         s.FILE_SEQ=m.FILE_SEQ and\n                      "
+"   s.FILE_TYPE=m.FILE_TYPE and\n                         s.FILE_SERIES=m.FILE_SERIES and\n                         s.FIL"
+"E_NBR=m.FILE_NBR and\n                         s.COUNTRY_CODE COLLATE DATABASE_DEFAULT <> VALUE);\n\n\n\n		\n		/* 1.1.9 "
+" ["+ context.intermediateDB + "].[dbo].VW_IMPORT_MARK_ACTIONS validations */\n		/* If CF_APPLICATION_TYPE.GENERATE_PROC_TYP is null, message 'The appl"
+"ication type is not configured so as to generate a process' */\n		INSERT INTO   ["+ context.intermediateDB + "].[dbo].VW_IMPORT_MARK_RESULT   \n				( file_seq , \n				file_type , \n				file_series , \n				file_nbr , \n				ind_imp"
+"ort , \n				msg_import )  \n		SELECT\n				 T.file_seq,\n				 T.file_type,\n				 T.file_series,\n				 T.file_nbr,\n				 2"
+",\n				 'The application type is not configured so as to generate a process'\n		FROM   ["+ context.intermediateDB + "].[dbo].VW_import_mark_actions T JOIN  ["+ context.intermediateDB + "].[dbo].VW_import_mark M ON T.file_seq  = M.file_seq\n			 AND	T.file_type  = M.file_type\n			 AND	T.file_series  = M.fi"
+"le_series\n			 AND	T.file_nbr  = M.file_nbr  JOIN CF_application_type AT ON M.application_type  = AT.appl_typ COLLATE DA"
+"TABASE_DEFAULT \n		WHERE	 GENERATE_PROC_TYP  is null\n		\n		/* ACTION_TYPE: if not exists in CF_ACTION_TYPE, message 'In"
+"valid action type' */\n		/* Performace note: join with  ["+ context.intermediateDB + "].[dbo].VW_IMPORT_MARK to select marks with IND_IMPORT = 0 */\n		INSERT INTO   ["+ context.intermediateDB + "].[dbo].VW_IMPORT_MARK_RESULT   \n				( file_seq , \n				file_type , \n				file_series , \n				file_nbr , \n				ind_imp"
+"ort , \n				msg_import )  \n		SELECT\n				 T.file_seq,\n				 T.file_type,\n				 T.file_series,\n				 T.file_nbr,\n				 2"
+",\n				 'Invalid action type'\n		FROM   ["+ context.intermediateDB + "].[dbo].VW_import_mark_actions T \n		WHERE	 ACTION_TYPE COLLATE DATABASE_DEFAULT not in\n			(\n		 	SELECT action_typ\n	"
+"		FROM  CF_action_type \n			)\n		\n		/* SPECIAL_FINAL_STATUS: if not null and ACTION_CATEGORY in A / N, message 'Special"
+" final status is only applicable for special actions' */\n		/* Performace note: join with  ["+ context.intermediateDB + "].[dbo].VW_IMPORT_MARK to select marks with IND_IMPORT = 0 */\n		INSERT INTO   ["+ context.intermediateDB + "].[dbo].VW_IMPORT_MARK_RESULT   \n				( file_seq , \n				file_type , \n				file_series , \n				file_nbr , \n				ind_imp"
+"ort , \n				msg_import )  \n		SELECT\n				 T.file_seq,\n				 T.file_type,\n				 T.file_series,\n				 T.file_nbr,\n				 2"
+",\n				 'Special final status is only applicable for special actions'\n		FROM   ["+ context.intermediateDB + "].[dbo].VW_import_mark_actions T \n		WHERE	 SPECIAL_FINAL_STATUS  is not null\n		 AND	ACTION_CATEGORY  in ( 'A'  , 'N' "
+" )\n		\n		/* If ACTION_CATEGORY is S and SPECIAL_FINAL_STATUS is null, message 'Special final status is required' */\n		"
+"/* Performace note: join with  ["+ context.intermediateDB + "].[dbo].VW_IMPORT_MARK to select marks with IND_IMPORT = 0 */\n		INSERT INTO   ["+ context.intermediateDB + "].[dbo].VW_IMPORT_MARK_RESULT   \n				( file_seq , \n				file_type , \n				file_series , \n				file_nbr , \n				ind_imp"
+"ort , \n				msg_import )  \n		SELECT\n				 T.file_seq,\n				 T.file_type,\n				 T.file_series,\n				 T.file_nbr,\n				 2"
+",\n				 'Special final status is required'\n		FROM   ["+ context.intermediateDB + "].[dbo].VW_import_mark_actions T \n		WHERE	 SPECIAL_FINAL_STATUS  is null\n		 AND	ACTION_CATEGORY  = 'S'\n		\n/* If SPE"
+"CIAL_FINAL_STATUS is not null and proc_typ / SPECIAL_FINAL_STATUS not exists in CF_STATUS \n		       (where proc_typ is "
+"CF_APPLICATION_TYPE.GENERATE_PROC_TYP for the corresponding application type), \n		       message 'Special final status "
+"is not a valid status in the process type associated to the application type' */\n		INSERT INTO   ["+ context.intermediateDB + "].[dbo].VW_IMPORT_MARK_RESULT   \n				( file_seq , \n				file_type , \n				file_series , \n				file_nbr , \n				ind_imp"
+"ort , \n				msg_import )  \n		SELECT\n				 T.file_seq,\n				 T.file_type,\n				 T.file_series,\n				 T.file_nbr,\n				 2"
+",\n				 'Special final status is not a valid status in the process type associated to the application type'\n		FROM   ["+ context.intermediateDB + "].[dbo].VW_import_mark_actions T JOIN  ["+ context.intermediateDB + "].[dbo].VW_import_mark M ON T.file_seq  = M.file_seq\n			 AND	T.file_type  = M.file_type\n			 AND	T.file_series  = M.fi"
+"le_series\n			 AND	T.file_nbr  = M.file_nbr  JOIN CF_application_type AT ON M.application_type  = AT.appl_typ COLLATE DA"
+"TABASE_DEFAULT \n		WHERE	 SPECIAL_FINAL_STATUS  is not null\n		 AND	 NOT EXISTS\n			(\n		 	SELECT	*\n			FROM	CF_status "
+"\n			WHERE	CF_status.proc_typ  = AT.GENERATE_PROC_TYP\n			 AND	CF_status.status_code  = T.SPECIAL_FINAL_STATUS COLLATE DA"
+"TABASE_DEFAULT\n			)\n		\n			/* If SPECIAL_FINAL_STATUS is not null and proc_typ / SPECIAL_FINAL_STATUS is origin for \n"
+"	   a 'due date' automatic action, then MANUAL_DUE_DATE must not be null. \n	   Otherwise, message ?Special final status"
+" is origin for a date is due automatic action, but manual due date is null? */\n	INSERT INTO   ["+ context.intermediateDB + "].[dbo].VW_IMPORT_MARK_RESULT   \n			( file_seq , \n			file_type , \n			file_series , \n			file_nbr , \n			ind_import ,"
+" \n			msg_import )  \n	SELECT\n			 T.file_seq,\n			 T.file_type,\n			 T.file_series,\n			 T.file_nbr,\n			 2,\n			 'Spec"
+"ial final status is origin for a date is due automatic action, but manual due date is null'\n	FROM   ["+ context.intermediateDB + "].[dbo].VW_import_mark_actions T JOIN  ["+ context.intermediateDB + "].[dbo].VW_import_mark M ON T.file_seq  = M.file_seq\n		 AND	T.file_type  = M.file_type\n		 AND	T.file_series  = M.file"
+"_series\n		 AND	T.file_nbr  = M.file_nbr  JOIN CF_application_type AT  ON M.application_type  = AT.appl_typ COLLATE DATA"
+"BASE_DEFAULT \n	WHERE	 SPECIAL_FINAL_STATUS  is not null\n	 AND	GENERATE_PROC_TYP  IN\n		(\n	 	SELECT proc_typ\n		FROM  "
+"CF_migration \n		WHERE	 action_typ  in\n			(\n	 		SELECT action_typ\n			FROM  CF_action_type \n			WHERE	 automatic_actio"
+"n_wcode  = 1\n			)\n		)\n	 AND	SPECIAL_FINAL_STATUS COLLATE DATABASE_DEFAULT  IN\n		(\n	 	SELECT initial_status_code\n		"
+"FROM  CF_migration \n		WHERE	 action_typ  in\n			(\n	 		SELECT action_typ\n			FROM  CF_action_type \n			WHERE	 automatic"
+"_action_wcode  = 1\n			)\n		)\n	 AND	manual_due_date  is null\n	\n	/* If SPECIAL_FINAL_STATUS is not null and proc_typ /"
+" SPECIAL_FINAL_STATUS is not origin for \n	   a 'due date' automatic action, then MANUAL_DUE_DATE must be null. \n	   Ot"
+"herwise, message 'Special final status is not origin for a date is due automatic action, but manual due date is not null"
+"' */\n	INSERT INTO   ["+ context.intermediateDB + "].[dbo].VW_IMPORT_MARK_RESULT   \n			( file_seq , \n			file_type , \n			file_series , \n			file_nbr , \n			ind_import ,"
+" \n			msg_import )  \n	SELECT\n			 T.file_seq,\n			 T.file_type,\n			 T.file_series,\n			 T.file_nbr,\n			 2,\n			 'Spec"
+"ial final status is not origin for a date is due automatic action, but manual due date is not null'\n	FROM   ["+ context.intermediateDB + "].[dbo].VW_import_mark_actions T \n		  JOIN  ["+ context.intermediateDB + "].[dbo].VW_import_mark M ON \n				T.file_seq  = M.file_seq\n		 AND	T.file_type  = M.file_type\n		 AND	T.file_series  = "
+"M.file_series\n		 AND	T.file_nbr  = M.file_nbr  \n		  JOIN CF_application_type AT ON M.application_type   = AT.appl_typ "
+"   COLLATE DATABASE_DEFAULT\n	WHERE	 SPECIAL_FINAL_STATUS  is not null\n	 AND	 GENERATE_PROC_TYP + SPECIAL_FINAL_STATUS "
+"COLLATE DATABASE_DEFAULT not in\n		(\n	 	SELECT	proc_typ + initial_status_code\n		FROM	CF_migration \n		WHERE	 action_ty"
+"p  in\n			(\n	 		SELECT action_typ\n			FROM  CF_action_type \n			WHERE	 automatic_action_wcode  = 1\n			)\n		 )\n	 AND	m"
+"anual_due_date  is not null\n	\n	/* If SPECIAL_FINAL_STATUS is not null and proc_typ / SPECIAL_FINAL_STATUS requires a\n"
+"	   responsible user, then RESPONSIBLE_USER must not be null. \n	   Otherwise, message ?Special final status requires a "
+"responsible user to be assigned? */\n/*	INSERT INTO   ["+ context.intermediateDB + "].[dbo].VW_IMPORT_MARK_RESULT   \n			( file_seq , \n			file_type , \n			file_series , \n			file_nbr , \n			ind_import ,"
+" \n			msg_import )  \n	SELECT\n			 T.file_seq,\n			 T.file_type,\n			 T.file_series,\n			 T.file_nbr,\n			 2,\n			 'Spec"
+"ial final status requires a responsible user to be assigned'\n	FROM   ["+ context.intermediateDB + "].[dbo].VW_import_mark_actions T \n			JOIN  ["+ context.intermediateDB + "].[dbo].VW_import_mark M ON T.file_seq  = M.file_seq\n		 AND	T.file_type  = M.file_type\n		 AND	T.file_series  = M.file"
+"_series\n		 AND	T.file_nbr  = M.file_nbr  \n			JOIN CF_application_type AT ON M.application_type  = AT.appl_typ COLLATE "
+"DATABASE_DEFAULT\n	WHERE	 SPECIAL_FINAL_STATUS  is not null\n	 AND	(GENERATE_PROC_TYP + SPECIAL_FINAL_STATUS)  IN\n		(\n"
+"	 	SELECT proc_typ + status_code\n		FROM  CF_status \n		WHERE	 ind_responsible_req  = 'S'\n		)\n	 AND	responsible_user  "
+"is null\n*/	\n	/* If SPECIAL_FINAL_STATUS is not null and proc_typ / SPECIAL_FINAL_STATUS requires no\n	   responsible u"
+"ser, then RESPONSIBLE_USER must be null. \n	   Otherwise, message ?Special final status requires no responsible user to "
+"be assigned? */\n/*	INSERT INTO   ["+ context.intermediateDB + "].[dbo].VW_IMPORT_MARK_RESULT   \n			( file_seq , \n			file_type , \n			file_series , \n			file_nbr , \n			ind_import ,"
+" \n			msg_import )  \n	SELECT\n			 T.file_seq,\n			 T.file_type,\n			 T.file_series,\n			 T.file_nbr,\n			 2,\n			 'Spec"
+"ial final status requires no responsible user to be assigned'\n	FROM   ["+ context.intermediateDB + "].[dbo].VW_import_mark_actions T JOIN  ["+ context.intermediateDB + "].[dbo].VW_import_mark M ON T.file_seq  = M.file_seq\n		 AND	T.file_type  = M.file_type\n		 AND	T.file_series  = M.file"
+"_series\n		 AND	T.file_nbr  = M.file_nbr  JOIN CF_application_type AT ON M.application_type  = AT.appl_typ COLLATE DATAB"
+"ASE_DEFAULT \n	WHERE	 SPECIAL_FINAL_STATUS  is not null\n	 AND	 (GENERATE_PROC_TYP + SPECIAL_FINAL_STATUS) NOT IN\n		(\n"
+"	 	SELECT	proc_typ + status_code\n		FROM  CF_status \n		WHERE	 ind_responsible_req  = 'S'\n		)\n	 AND	responsible_user  "
+"is not null\n*/	\n	/* If SPECIAL_FINAL_STATUS is not null and proc_typ / SPECIAL_FINAL_STATUS is origin for \n	   a 'end"
+" of freezing' automatic action, then a 'freezing' document must be specified in tables\n	    ["+ context.intermediateDB + "].[dbo].VW_IMPORT_MARK_FREEZE_FILE or  ["+ context.intermediateDB + "].[dbo].VW_IMPORT_MARK_FREEZE_UDOC.\n	   Otherwise, message ?Special final status is origin for an 'end of freezing' au"
+"tomatic action, but no freezings exist in  ["+ context.intermediateDB + "].[dbo].VW_IMPORT_MARK_FREEZE_FILE / UDOC? */\n	/*\n	INSERT INTO   ["+ context.intermediateDB + "].[dbo].VW_IMPORT_MARK_RESULT   \n			( file_seq , \n			file_type , \n			file_series , \n			file_nbr , \n			ind_import ,"
+" \n			msg_import )  \n	SELECT\n			 T.file_seq,\n			 T.file_type,\n			 T.file_series,\n			 T.file_nbr,\n			 2,\n			 'Spec"
+"ial final status is origin for an 'end of freezing' automatic action, but no freezings exist in  ["+ context.intermediateDB + "].[dbo].VW_IMPORT_MARK_FREEZE_FILE / UDOC'\n	FROM   ["+ context.intermediateDB + "].[dbo].VW_import_mark_actions T JOIN  ["+ context.intermediateDB + "].[dbo].VW_import_mark M ON T.file_seq  = M.file_seq\n		 AND	T.file_type  = M.file_type\n		 AND	T.file_series  = M.file"
+"_series\n		 AND	T.file_nbr  = M.file_nbr  JOIN CF_application_type AT ON M.application_type  = AT.appl_typ  COLLATE DATA"
+"BASE_DEFAULT\n	WHERE	 SPECIAL_FINAL_STATUS  is not null\n	 AND	(GENERATE_PROC_TYP + SPECIAL_FINAL_STATUS ) IN\n		(\n	 	S"
+"ELECT proc_typ + initial_status_code\n		FROM  CF_migration \n		WHERE	 action_typ  in\n			(\n	 		SELECT action_typ\n			FR"
+"OM  CF_action_type \n			WHERE	 automatic_action_wcode  = 2\n			)\n		)\n	 AND	NOT   exists\n		(\n	 	SELECT *\n		FROM   ["+ context.intermediateDB + "].[dbo].VW_import_mark_file_freezes ff \n		WHERE	 ff.file_type  = T.file_type\n		 AND	ff.file_seq  = T.file_seq\n		 AND"
+"	ff.file_series  = T.file_series\n		 AND	ff.file_nbr  = T.file_nbr\n		)\n	 AND	NOT   exists\n		(\n	 	SELECT *\n		FROM   "
+"["+ context.intermediateDB + "].[dbo].VW_import_mark_udoc_freezes uf \n		WHERE	 uf.file_type  = T.file_type\n		 AND	uf.file_seq  = T.file_seq\n		 AND"
+"	uf.file_series  = T.file_series\n		 AND	uf.file_nbr  = T.file_nbr\n		)\n	*/\n	/* If SPECIAL_FINAL_STATUS is not null an"
+"d proc_typ / SPECIAL_FINAL_STATUS is not origin for \n	   a 'end of freezing' automatic action, then no 'freezing' docum"
+"ent must be specified in tables\n	    ["+ context.intermediateDB + "].[dbo].VW_IMPORT_MARK_FREEZE_FILE or  ["+ context.intermediateDB + "].[dbo].VW_IMPORT_MARK_FREEZE_UDOC.\n	   Otherwise, message ?Special final status is not origin for an 'end of freezing"
+"' automatic action, but a freezings exist in  ["+ context.intermediateDB + "].[dbo].VW_IMPORT_MARK_FREEZE_FILE / UDOC? */\n/*\n	INSERT INTO   ["+ context.intermediateDB + "].[dbo].VW_IMPORT_MARK_RESULT   \n			( file_seq , \n			file_type , \n			file_series , \n			file_nbr , \n			ind_import ,"
+" \n			msg_import )  \n	SELECT\n			 T.file_seq,\n			 T.file_type,\n			 T.file_series,\n			 T.file_nbr,\n			 2,\n			 'Spec"
+"ial final status is not origin for an 'end of freezing' automatic action, but a freezings exist in  ["+ context.intermediateDB + "].[dbo].VW_IMPORT_MARK_FREEZE_FILE / UDOC'\n	FROM   ["+ context.intermediateDB + "].[dbo].VW_import_mark_actions T JOIN  ["+ context.intermediateDB + "].[dbo].VW_import_mark M ON T.file_seq  = M.file_seq\n		 AND	T.file_type  = M.file_type\n		 AND	T.file_series  = M.file"
+"_series\n		 AND	T.file_nbr  = M.file_nbr  JOIN CF_application_type AT ON M.application_type  = AT.appl_typ  COLLATE DATA"
+"BASE_DEFAULT\n	WHERE	 SPECIAL_FINAL_STATUS  is not null\n	 AND	 (GENERATE_PROC_TYP + SPECIAL_FINAL_STATUS) COLLATE DATAB"
+"ASE_DEFAULT NOT IN\n		(\n	 	SELECT	proc_typ + initial_status_code\n		FROM  CF_migration \n		WHERE	 action_typ  in\n			("
+"\n	 		SELECT action_typ\n			FROM  CF_action_type \n			WHERE	 automatic_action_wcode  = 2\n			)\n		)\n	 AND	(  exists\n		("
+"\n	 	SELECT *\n		FROM   ["+ context.intermediateDB + "].[dbo].VW_import_mark_file_freezes ff \n		WHERE	 ff.file_type  = T.file_type\n		 AND	ff.file_seq  = T.file_seq\n		 AND"
+"	ff.file_series  = T.file_series\n		 AND	ff.file_nbr  = T.file_nbr\n		)\n	 OR	  exists\n		(\n	 	SELECT *\n		FROM   ["+ context.intermediateDB + "].[dbo].VW_import_mark_udoc_freezes uf \n		WHERE	 uf.file_type  = T.file_type\n		 AND	uf.file_seq  = T.file_seq\n		 AND"
+"	uf.file_series  = T.file_series\n		 AND	uf.file_nbr  = T.file_nbr\n		))\n	\n*/		\n\n		\n		\n		/* If ACTION_NOTES1 is no"
+"t null and CF_ACTION_TYPE.NOTES1_PROMPT is null, \n		       message 'Current configuration indicates that this action ty"
+"pe does not accept an action notes 1' */\n		/* Performace note: join with  ["+ context.intermediateDB + "].[dbo].VW_IMPORT_MARK to select marks with IND_IMPORT = 0 */\n		/* OJO ignorar por ahora \n		    insert  into  ["+ context.intermediateDB + "].[dbo].VW_IMPORT_MARK_RESULT (file_seq, file_type, file_series, file_nbr, ind_import, msg_import)\n		    select  T.fil"
+"e_seq, T.file_type, T.file_series, T.file_nbr,\n		            2, 'Current configuration indicates that this action type "
+"does not accept an action notes 1'\n		    from     ["+ context.intermediateDB + "].[dbo].VW_import_mark_actions T\n		            join CF_action_type AT on\n		                T.action_type   = AT.actio"
+"n_typ\n		    where   length(ACTION_NOTES1)   > 1   and\n		            NOTES1_PROMPT           is null\n		    ;\n		*/\n		"
+"/* If ACTION_NOTES2 is not null and CF_ACTION_TYPE.NOTES2_PROMPT is null, \n		       message 'Current configuration indi"
+"cates that this action type does not accept an action notes 2' */\n		/* Performace note: join with  ["+ context.intermediateDB + "].[dbo].VW_IMPORT_MARK to select marks with IND_IMPORT = 0 */\n		/* OJO ignorar por ahora\n		    insert  into  ["+ context.intermediateDB + "].[dbo].VW_IMPORT_MARK_RESULT (file_seq, file_type, file_series, file_nbr, ind_import, msg_import)\n		    select  T.fil"
+"e_seq, T.file_type, T.file_series, T.file_nbr,\n		            2, 'Current configuration indicates that this action type "
+"does not accept an action notes 2'\n		    from     ["+ context.intermediateDB + "].[dbo].VW_import_mark_actions T\n		            join CF_action_type AT on\n		                T.action_type   = AT.actio"
+"n_typ\n		    where   length(ACTION_NOTES2)   > 1   and\n		            NOTES2_PROMPT           is null\n		    ;\n		*/\n		"
+"/* If ACTION_NOTES3 is not null and CF_ACTION_TYPE.NOTES3_PROMPT is null, \n		       message 'Current configuration indi"
+"cates that this action type does not accept an action notes 3' */\n		/* Performace note: join with  ["+ context.intermediateDB + "].[dbo].VW_IMPORT_MARK to select marks with IND_IMPORT = 0 */\n		/* OJO ignorar por ahora\n		    insert  into  ["+ context.intermediateDB + "].[dbo].VW_IMPORT_MARK_RESULT (file_seq, file_type, file_series, file_nbr, ind_import, msg_import)\n		    select  T.fil"
+"e_seq, T.file_type, T.file_series, T.file_nbr,\n		            2, 'Current configuration indicates that this action type "
+"does not accept an action notes 3'\n		    from     ["+ context.intermediateDB + "].[dbo].VW_import_mark_actions T\n		            join CF_action_type AT on\n		                T.action_type   = AT.actio"
+"n_typ\n		    where   length(ACTION_NOTES3)   > 1   and\n		            NOTES3_PROMPT           is null\n		    ;\n		*/\n		"
+"/* If ACTION_NOTES4 is not null and CF_ACTION_TYPE.NOTES4_PROMPT is null, \n		       message 'Current configuration indi"
+"cates that this action type does not accept an action notes 4' */\n		/* Performace note: join with  ["+ context.intermediateDB + "].[dbo].VW_IMPORT_MARK to select marks with IND_IMPORT = 0 */\n		/* OJO ignorar por ahora\n		    insert  into  ["+ context.intermediateDB + "].[dbo].VW_IMPORT_MARK_RESULT (file_seq, file_type, file_series, file_nbr, ind_import, msg_import)\n		    select  T.fil"
+"e_seq, T.file_type, T.file_series, T.file_nbr,\n		            2, 'Current configuration indicates that this action type "
+"does not accept an action notes 4'\n		    from     ["+ context.intermediateDB + "].[dbo].VW_import_mark_actions T\n		            join CF_action_type AT on\n		                T.action_type   = AT.actio"
+"n_typ\n		    where   length(ACTION_NOTES4)   > 1   and\n		            NOTES4_PROMPT           is null\n		    ;\n		*/\n		"
+"/* If ACTION_NOTES5 is not null and CF_ACTION_TYPE.NOTES5_PROMPT is null, \n		       message 'Current configuration indi"
+"cates that this action type does not accept an action notes 5' */\n		/* Performace note: join with  ["+ context.intermediateDB + "].[dbo].VW_IMPORT_MARK to select marks with IND_IMPORT = 0 */\n		/* OJO ignorar por ahora\n		    insert  into  ["+ context.intermediateDB + "].[dbo].VW_IMPORT_MARK_RESULT (file_seq, file_type, file_series, file_nbr, ind_import, msg_import)\n		    select  T.fil"
+"e_seq, T.file_type, T.file_series, T.file_nbr,\n		            2, 'Current configuration indicates that this action type "
+"does not accept an action notes 5'\n		    from     ["+ context.intermediateDB + "].[dbo].VW_import_mark_actions T\n		            join CF_action_type AT on\n		                T.action_type   = AT.actio"
+"n_typ\n		    where   length(ACTION_NOTES5)   > 1   and\n		            NOTES5_PROMPT           is null\n		    ;\n		*/\n		"
+"/* ACTION_USER: if not exists in IP_USER, message 'Invalid action user' */\n		/* Performace note: join with  ["+ context.intermediateDB + "].[dbo].VW_IMPORT_MARK to select marks with IND_IMPORT = 0 */\n		INSERT INTO   ["+ context.intermediateDB + "].[dbo].VW_IMPORT_MARK_RESULT   \n				( file_seq , \n				file_type , \n				file_series , \n				file_nbr , \n				ind_imp"
+"ort , \n				msg_import )  \n		SELECT\n				 T.file_seq,\n				 T.file_type,\n				 T.file_series,\n				 T.file_nbr,\n				 2"
+",\n				 'Invalid action user'\n		FROM   ["+ context.intermediateDB + "].[dbo].VW_import_mark_actions T \n		WHERE	 (ACTION_USER  is null\n		 OR	ACTION_USER  not in\n			(\n		 	SELECT user_id"
+"\n			FROM  IP_user \n			))\n\n		/* if duplicate file + action date/type, message 'Duplicate action date and type' */\n		I"
+"NSERT INTO   ["+ context.intermediateDB + "].[dbo].VW_IMPORT_MARK_RESULT   \n				( file_seq , \n				file_type , \n				file_series , \n				file_nbr , \n				ind_imp"
+"ort , \n				msg_import )  \n		SELECT\n				 T.file_seq,\n				 T.file_type,\n				 T.file_series,\n				 T.file_nbr,\n				 2"
+",\n				 'Duplicate action date and type'\n		FROM   ["+ context.intermediateDB + "].[dbo].VW_import_mark_actions T \n		GROUP	BY file_seq, file_type, file_series, file_nbr, action_date, action_type\n		H"
+"AVING	COUNT(*) > 1\n		\n\n	/* Check duplicated logos */\n		INSERT INTO   ["+ context.intermediateDB + "].[dbo].VW_IMPORT_MARK_RESULT   \n				( file_seq , \n				file_type , \n				file_series , \n				file_nbr , \n				ind_imp"
+"ort , \n				msg_import )\n				\n	SELECT DISTINCT \n			FILE_SEQ,\n			FILE_TYPE,\n			FILE_SERIES,\n			FILE_NBR,\n			2,\n		"
+"	'Duplicated Logo'\n	    FROM  ["+ context.intermediateDB + "].[dbo].VW_IMPORT_MARK_LOGOS M\n	    GROUP BY FILE_SEQ,FILE_TYPE,FILE_SERIES,FILE_NBR\n		HAVING COUNT(*)>1\n	    \n	 --"
+" Move below check into CallToDateValidationPROC --> MarkDateValidationPROC SP   \n	/* IPAS-375 Added validation for fili"
+"ng date */\n	--insert  into  ["+ context.intermediateDB + "].[dbo].VW_IMPORT_MARK_RESULT (file_seq, file_type, file_series, file_nbr, ind_import, msg_import)\n	--select  T.file_s"
+"eq, T.file_type, T.file_series, T.file_nbr, 2, 'Invalid Filing date. Filing date required to be greater than 1700-01-01 "
+"and lower than the current date.' \n	--from  ["+ context.intermediateDB + "].[dbo].VW_import_mark T where filing_date > GETDATE() or CAST(DATEPART(YYYY, filing_date) as NUMERIC) < 1700\n\n	/* IP"
+"AS-623 FIX \n			Call to Mark Date validation \n		*/\n			exec CallToDateValidationPROC 'MARK';		\n		/* FIX IPAS-623 Ends "
+"here*/\n	\n		/* *************** END OF VALIDATIONS *************** */\n		/* set import indicator to 'error', for those c"
+"ases with error messages */\n		UPDATE  M   \n		SET	ind_import = 2 \n		FROM   ["+ context.intermediateDB + "].[dbo].VW_IMPORT_MARK M \n		WHERE    exists\n			(\n		 	SELECT *\n			FROM   ["+ context.intermediateDB + "].[dbo].VW_IMPORT_MARK_RESULT R \n			WHERE	 M.file_seq  = R.file_seq\n			 AND	M.file_type  = R.file_type\n			 AND	M.fil"
+"e_series  = R.file_series\n			 AND	M.file_nbr  = R.file_nbr\n			) \n		\n		/* set import indicator to 'validated', for th"
+"ose cases with no error messages */\n		UPDATE  M   \n		SET	ind_import = 9 \n		FROM   ["+ context.intermediateDB + "].[dbo].VW_IMPORT_MARK M \n		WHERE  ind_import  = 0 \n		\n\n		SET NOCOUNT OFF\n\n	END\n";
whetherReject_tDBRow_2 = false;
globalMap.put("tDBRow_2_QUERY",query_tDBRow_2);
try {
		stmt_tDBRow_2.execute(query_tDBRow_2);
		
	} catch (java.lang.Exception e) {
		whetherReject_tDBRow_2 = true;
		
				row38 = new row38Struct();
				
				row38.errorCode = ((java.sql.SQLException)e).getSQLState();
				row38.errorMessage = e.getMessage() + " - Line: " + tos_count_tDBRow_2;
				
	}
	
	if(!whetherReject_tDBRow_2) {
		
	}
	

 


	tos_count_tDBRow_2++;

/**
 * [tDBRow_2 main ] stop
 */
	
	/**
	 * [tDBRow_2 process_data_begin ] start
	 */

	

	
	
	currentComponent="tDBRow_2";

	

 



/**
 * [tDBRow_2 process_data_begin ] stop
 */
// Start of branch "row38"
if(row38 != null) { 



	
	/**
	 * [tLogRow_38 main ] start
	 */

	

	
	
	currentComponent="tLogRow_38";

	
					if(execStat){
						runStat.updateStatOnConnection(iterateId,1,1
						
							,"row38"
						
						);
					}
					
///////////////////////		
						



				strBuffer_tLogRow_38 = new StringBuilder();




   				
	    		if(row38.errorCode != null) { //              
                    							
       
				strBuffer_tLogRow_38.append(
				                String.valueOf(row38.errorCode)							
				);


							
	    		} //  			

    			strBuffer_tLogRow_38.append("|");
    			


   				
	    		if(row38.errorMessage != null) { //              
                    							
       
				strBuffer_tLogRow_38.append(
				                String.valueOf(row38.errorMessage)							
				);


							
	    		} //  			

				
				String[] row_tLogRow_38 = new String[2];
   				
	    		if(row38.errorCode != null) { //              
                 row_tLogRow_38[0]=    						    
				                String.valueOf(row38.errorCode)			
					          ;	
							
	    		} //			
    			   				
	    		if(row38.errorMessage != null) { //              
                 row_tLogRow_38[1]=    						    
				                String.valueOf(row38.errorMessage)			
					          ;	
							
	    		} //			
    			
				nb_line_tLogRow_38++;
                consoleOut_tLogRow_38.println(util_tLogRow_38.print(row_tLogRow_38,nb_line_tLogRow_38));
                consoleOut_tLogRow_38.flush();
//////

//////                    
                    
///////////////////////    			

 


	tos_count_tLogRow_38++;

/**
 * [tLogRow_38 main ] stop
 */
	
	/**
	 * [tLogRow_38 process_data_begin ] start
	 */

	

	
	
	currentComponent="tLogRow_38";

	

 



/**
 * [tLogRow_38 process_data_begin ] stop
 */
	
	/**
	 * [tLogRow_38 process_data_end ] start
	 */

	

	
	
	currentComponent="tLogRow_38";

	

 



/**
 * [tLogRow_38 process_data_end ] stop
 */

} // End of branch "row38"




	
	/**
	 * [tDBRow_2 process_data_end ] start
	 */

	

	
	
	currentComponent="tDBRow_2";

	

 



/**
 * [tDBRow_2 process_data_end ] stop
 */

} // End of branch "row27"




// Start of branch "row32"
if(row32 != null) { 



	
	/**
	 * [tLogRow_37 main ] start
	 */

	

	
	
	currentComponent="tLogRow_37";

	
					if(execStat){
						runStat.updateStatOnConnection(iterateId,1,1
						
							,"row32"
						
						);
					}
					
///////////////////////		
						



				strBuffer_tLogRow_37 = new StringBuilder();




   				
	    		if(row32.errorCode != null) { //              
                    							
       
				strBuffer_tLogRow_37.append(
				                String.valueOf(row32.errorCode)							
				);


							
	    		} //  			

    			strBuffer_tLogRow_37.append("|");
    			


   				
	    		if(row32.errorMessage != null) { //              
                    							
       
				strBuffer_tLogRow_37.append(
				                String.valueOf(row32.errorMessage)							
				);


							
	    		} //  			

				
				String[] row_tLogRow_37 = new String[2];
   				
	    		if(row32.errorCode != null) { //              
                 row_tLogRow_37[0]=    						    
				                String.valueOf(row32.errorCode)			
					          ;	
							
	    		} //			
    			   				
	    		if(row32.errorMessage != null) { //              
                 row_tLogRow_37[1]=    						    
				                String.valueOf(row32.errorMessage)			
					          ;	
							
	    		} //			
    			
				nb_line_tLogRow_37++;
                consoleOut_tLogRow_37.println(util_tLogRow_37.print(row_tLogRow_37,nb_line_tLogRow_37));
                consoleOut_tLogRow_37.flush();
//////

//////                    
                    
///////////////////////    			

 


	tos_count_tLogRow_37++;

/**
 * [tLogRow_37 main ] stop
 */
	
	/**
	 * [tLogRow_37 process_data_begin ] start
	 */

	

	
	
	currentComponent="tLogRow_37";

	

 



/**
 * [tLogRow_37 process_data_begin ] stop
 */
	
	/**
	 * [tLogRow_37 process_data_end ] start
	 */

	

	
	
	currentComponent="tLogRow_37";

	

 



/**
 * [tLogRow_37 process_data_end ] stop
 */

} // End of branch "row32"




	
	/**
	 * [tDBRow_1 process_data_end ] start
	 */

	

	
	
	currentComponent="tDBRow_1";

	

 



/**
 * [tDBRow_1 process_data_end ] stop
 */
	
	/**
	 * [tDBRow_1 end ] start
	 */

	

	
	
	currentComponent="tDBRow_1";

	

	
        stmt_tDBRow_1.close();
        resourceMap.remove("stmt_tDBRow_1");
    resourceMap.put("statementClosed_tDBRow_1", true);
    resourceMap.put("finish_tDBRow_1", true);
 

ok_Hash.put("tDBRow_1", true);
end_Hash.put("tDBRow_1", System.currentTimeMillis());




/**
 * [tDBRow_1 end ] stop
 */

	
	/**
	 * [tDBRow_2 end ] start
	 */

	

	
	
	currentComponent="tDBRow_2";

	

	
        stmt_tDBRow_2.close();
        resourceMap.remove("stmt_tDBRow_2");
    resourceMap.put("statementClosed_tDBRow_2", true);
    resourceMap.put("finish_tDBRow_2", true);
				if(execStat){
			  		runStat.updateStat(resourceMap,iterateId,2,0,"row27");
			  	}
			  	
 

ok_Hash.put("tDBRow_2", true);
end_Hash.put("tDBRow_2", System.currentTimeMillis());




/**
 * [tDBRow_2 end ] stop
 */

	
	/**
	 * [tLogRow_38 end ] start
	 */

	

	
	
	currentComponent="tLogRow_38";

	


//////
//////
globalMap.put("tLogRow_38_NB_LINE",nb_line_tLogRow_38);

///////////////////////    			

				if(execStat){
			  		runStat.updateStat(resourceMap,iterateId,2,0,"row38");
			  	}
			  	
 

ok_Hash.put("tLogRow_38", true);
end_Hash.put("tLogRow_38", System.currentTimeMillis());




/**
 * [tLogRow_38 end ] stop
 */







	
	/**
	 * [tLogRow_37 end ] start
	 */

	

	
	
	currentComponent="tLogRow_37";

	


//////
//////
globalMap.put("tLogRow_37_NB_LINE",nb_line_tLogRow_37);

///////////////////////    			

				if(execStat){
			  		runStat.updateStat(resourceMap,iterateId,2,0,"row32");
			  	}
			  	
 

ok_Hash.put("tLogRow_37", true);
end_Hash.put("tLogRow_37", System.currentTimeMillis());




/**
 * [tLogRow_37 end ] stop
 */



				}//end the resume

				
				    			if(resumeEntryMethodName == null || globalResumeTicket){
				    				resumeUtil.addLog("CHECKPOINT", "CONNECTION:SUBJOB_OK:tDBRow_1:OnSubjobOk", "", Thread.currentThread().getId() + "", "", "", "", "", "");
								}	    				    			
					    	
								if(execStat){    	
									runStat.updateStatOnConnection("OnSubjobOk4", 0, "ok");
								} 
							
							tDBRow_3Process(globalMap); 
						



	
			}catch(java.lang.Exception e){	
				
				TalendException te = new TalendException(e, currentComponent, globalMap);
				
				throw te;
			}catch(java.lang.Error error){	
				
					runStat.stopThreadStat();
				
				throw error;
			}finally{
				
				try{
					
	
	/**
	 * [tDBRow_1 finally ] start
	 */

	

	
	
	currentComponent="tDBRow_1";

	

    if (resourceMap.get("statementClosed_tDBRow_1") == null) {
            java.sql.Statement stmtToClose_tDBRow_1 = null;
            if ((stmtToClose_tDBRow_1 = (java.sql.Statement) resourceMap.remove("stmt_tDBRow_1")) != null) {
                stmtToClose_tDBRow_1.close();
            }
    }
 



/**
 * [tDBRow_1 finally ] stop
 */

	
	/**
	 * [tDBRow_2 finally ] start
	 */

	

	
	
	currentComponent="tDBRow_2";

	

    if (resourceMap.get("statementClosed_tDBRow_2") == null) {
            java.sql.Statement stmtToClose_tDBRow_2 = null;
            if ((stmtToClose_tDBRow_2 = (java.sql.Statement) resourceMap.remove("stmt_tDBRow_2")) != null) {
                stmtToClose_tDBRow_2.close();
            }
    }
 



/**
 * [tDBRow_2 finally ] stop
 */

	
	/**
	 * [tLogRow_38 finally ] start
	 */

	

	
	
	currentComponent="tLogRow_38";

	

 



/**
 * [tLogRow_38 finally ] stop
 */







	
	/**
	 * [tLogRow_37 finally ] start
	 */

	

	
	
	currentComponent="tLogRow_37";

	

 



/**
 * [tLogRow_37 finally ] stop
 */



				}catch(java.lang.Exception e){	
					//ignore
				}catch(java.lang.Error error){
					//ignore
				}
				resourceMap = null;
			}
		

		globalMap.put("tDBRow_1_SUBPROCESS_STATE", 1);
	}
	


public static class row44Struct implements routines.system.IPersistableRow<row44Struct> {
    final static byte[] commonByteArrayLock_WIPO_PROJECTS_F_IPAS_ENV_CRE = new byte[0];
    static byte[] commonByteArray_WIPO_PROJECTS_F_IPAS_ENV_CRE = new byte[0];

	
			    public String errorCode;

				public String getErrorCode () {
					return this.errorCode;
				}
				
			    public String errorMessage;

				public String getErrorMessage () {
					return this.errorMessage;
				}
				



	private String readString(ObjectInputStream dis) throws IOException{
		String strReturn = null;
		int length = 0;
        length = dis.readInt();
		if (length == -1) {
			strReturn = null;
		} else {
			if(length > commonByteArray_WIPO_PROJECTS_F_IPAS_ENV_CRE.length) {
				if(length < 1024 && commonByteArray_WIPO_PROJECTS_F_IPAS_ENV_CRE.length == 0) {
   					commonByteArray_WIPO_PROJECTS_F_IPAS_ENV_CRE = new byte[1024];
				} else {
   					commonByteArray_WIPO_PROJECTS_F_IPAS_ENV_CRE = new byte[2 * length];
   				}
			}
			dis.readFully(commonByteArray_WIPO_PROJECTS_F_IPAS_ENV_CRE, 0, length);
			strReturn = new String(commonByteArray_WIPO_PROJECTS_F_IPAS_ENV_CRE, 0, length, utf8Charset);
		}
		return strReturn;
	}

    private void writeString(String str, ObjectOutputStream dos) throws IOException{
		if(str == null) {
            dos.writeInt(-1);
		} else {
            byte[] byteArray = str.getBytes(utf8Charset);
	    	dos.writeInt(byteArray.length);
			dos.write(byteArray);
    	}
    }

    public void readData(ObjectInputStream dis) {

		synchronized(commonByteArrayLock_WIPO_PROJECTS_F_IPAS_ENV_CRE) {

        	try {

        		int length = 0;
		
					this.errorCode = readString(dis);
					
					this.errorMessage = readString(dis);
					
        	} catch (IOException e) {
	            throw new RuntimeException(e);

		

        }

		

      }


    }

    public void writeData(ObjectOutputStream dos) {
        try {

		
					// String
				
						writeString(this.errorCode,dos);
					
					// String
				
						writeString(this.errorMessage,dos);
					
        	} catch (IOException e) {
	            throw new RuntimeException(e);
        }


    }


    public String toString() {

		StringBuilder sb = new StringBuilder();
		sb.append(super.toString());
		sb.append("[");
		sb.append("errorCode="+errorCode);
		sb.append(",errorMessage="+errorMessage);
	    sb.append("]");

	    return sb.toString();
    }

    /**
     * Compare keys
     */
    public int compareTo(row44Struct other) {

		int returnValue = -1;
		
	    return returnValue;
    }


    private int checkNullsAndCompare(Object object1, Object object2) {
        int returnValue = 0;
		if (object1 instanceof Comparable && object2 instanceof Comparable) {
            returnValue = ((Comparable) object1).compareTo(object2);
        } else if (object1 != null && object2 != null) {
            returnValue = compareStrings(object1.toString(), object2.toString());
        } else if (object1 == null && object2 != null) {
            returnValue = 1;
        } else if (object1 != null && object2 == null) {
            returnValue = -1;
        } else {
            returnValue = 0;
        }

        return returnValue;
    }

    private int compareStrings(String string1, String string2) {
        return string1.compareTo(string2);
    }


}

public static class row41Struct implements routines.system.IPersistableRow<row41Struct> {
    final static byte[] commonByteArrayLock_WIPO_PROJECTS_F_IPAS_ENV_CRE = new byte[0];
    static byte[] commonByteArray_WIPO_PROJECTS_F_IPAS_ENV_CRE = new byte[0];

	



    public void readData(ObjectInputStream dis) {

		synchronized(commonByteArrayLock_WIPO_PROJECTS_F_IPAS_ENV_CRE) {

        	try {

        		int length = 0;
		

		

        }

		
			finally {}
		

      }


    }

    public void writeData(ObjectOutputStream dos) {
        try {

		
        }

			finally {}
		

    }


    public String toString() {

		StringBuilder sb = new StringBuilder();
		sb.append(super.toString());
		sb.append("[");
	    sb.append("]");

	    return sb.toString();
    }

    /**
     * Compare keys
     */
    public int compareTo(row41Struct other) {

		int returnValue = -1;
		
	    return returnValue;
    }


    private int checkNullsAndCompare(Object object1, Object object2) {
        int returnValue = 0;
		if (object1 instanceof Comparable && object2 instanceof Comparable) {
            returnValue = ((Comparable) object1).compareTo(object2);
        } else if (object1 != null && object2 != null) {
            returnValue = compareStrings(object1.toString(), object2.toString());
        } else if (object1 == null && object2 != null) {
            returnValue = 1;
        } else if (object1 != null && object2 == null) {
            returnValue = -1;
        } else {
            returnValue = 0;
        }

        return returnValue;
    }

    private int compareStrings(String string1, String string2) {
        return string1.compareTo(string2);
    }


}

public static class row42Struct implements routines.system.IPersistableRow<row42Struct> {
    final static byte[] commonByteArrayLock_WIPO_PROJECTS_F_IPAS_ENV_CRE = new byte[0];
    static byte[] commonByteArray_WIPO_PROJECTS_F_IPAS_ENV_CRE = new byte[0];

	
			    public String errorCode;

				public String getErrorCode () {
					return this.errorCode;
				}
				
			    public String errorMessage;

				public String getErrorMessage () {
					return this.errorMessage;
				}
				



	private String readString(ObjectInputStream dis) throws IOException{
		String strReturn = null;
		int length = 0;
        length = dis.readInt();
		if (length == -1) {
			strReturn = null;
		} else {
			if(length > commonByteArray_WIPO_PROJECTS_F_IPAS_ENV_CRE.length) {
				if(length < 1024 && commonByteArray_WIPO_PROJECTS_F_IPAS_ENV_CRE.length == 0) {
   					commonByteArray_WIPO_PROJECTS_F_IPAS_ENV_CRE = new byte[1024];
				} else {
   					commonByteArray_WIPO_PROJECTS_F_IPAS_ENV_CRE = new byte[2 * length];
   				}
			}
			dis.readFully(commonByteArray_WIPO_PROJECTS_F_IPAS_ENV_CRE, 0, length);
			strReturn = new String(commonByteArray_WIPO_PROJECTS_F_IPAS_ENV_CRE, 0, length, utf8Charset);
		}
		return strReturn;
	}

    private void writeString(String str, ObjectOutputStream dos) throws IOException{
		if(str == null) {
            dos.writeInt(-1);
		} else {
            byte[] byteArray = str.getBytes(utf8Charset);
	    	dos.writeInt(byteArray.length);
			dos.write(byteArray);
    	}
    }

    public void readData(ObjectInputStream dis) {

		synchronized(commonByteArrayLock_WIPO_PROJECTS_F_IPAS_ENV_CRE) {

        	try {

        		int length = 0;
		
					this.errorCode = readString(dis);
					
					this.errorMessage = readString(dis);
					
        	} catch (IOException e) {
	            throw new RuntimeException(e);

		

        }

		

      }


    }

    public void writeData(ObjectOutputStream dos) {
        try {

		
					// String
				
						writeString(this.errorCode,dos);
					
					// String
				
						writeString(this.errorMessage,dos);
					
        	} catch (IOException e) {
	            throw new RuntimeException(e);
        }


    }


    public String toString() {

		StringBuilder sb = new StringBuilder();
		sb.append(super.toString());
		sb.append("[");
		sb.append("errorCode="+errorCode);
		sb.append(",errorMessage="+errorMessage);
	    sb.append("]");

	    return sb.toString();
    }

    /**
     * Compare keys
     */
    public int compareTo(row42Struct other) {

		int returnValue = -1;
		
	    return returnValue;
    }


    private int checkNullsAndCompare(Object object1, Object object2) {
        int returnValue = 0;
		if (object1 instanceof Comparable && object2 instanceof Comparable) {
            returnValue = ((Comparable) object1).compareTo(object2);
        } else if (object1 != null && object2 != null) {
            returnValue = compareStrings(object1.toString(), object2.toString());
        } else if (object1 == null && object2 != null) {
            returnValue = 1;
        } else if (object1 != null && object2 == null) {
            returnValue = -1;
        } else {
            returnValue = 0;
        }

        return returnValue;
    }

    private int compareStrings(String string1, String string2) {
        return string1.compareTo(string2);
    }


}
public void tDBRow_3Process(final java.util.Map<String, Object> globalMap) throws TalendException {
	globalMap.put("tDBRow_3_SUBPROCESS_STATE", 0);

 final boolean execStat = this.execStat;
	
		String iterateId = "";
	
	
	String currentComponent = "";
	java.util.Map<String, Object> resourceMap = new java.util.HashMap<String, Object>();

	try {
			// TDI-39566 avoid throwing an useless Exception
			boolean resumeIt = true;
			if (globalResumeTicket == false && resumeEntryMethodName != null) {
				String currentMethodName = new java.lang.Exception().getStackTrace()[0].getMethodName();
				resumeIt = resumeEntryMethodName.equals(currentMethodName);
			}
			if (resumeIt || globalResumeTicket) { //start the resume
				globalResumeTicket = true;



		row41Struct row41 = new row41Struct();
row44Struct row44 = new row44Struct();
row42Struct row42 = new row42Struct();





	
	/**
	 * [tLogRow_40 begin ] start
	 */

	

	
		
		ok_Hash.put("tLogRow_40", false);
		start_Hash.put("tLogRow_40", System.currentTimeMillis());
		
	
	currentComponent="tLogRow_40";

	
					if(execStat) {
						runStat.updateStatOnConnection(resourceMap,iterateId,0,0,"row44");
					}
				
		int tos_count_tLogRow_40 = 0;
		

	///////////////////////
		


	class Util_tLogRow_40 {
	
		String[] des_top = { ".", "-" };

        String[] des_data = { "-", "+" };

        String[] des_frame = { "|" }; 
        
        public void printLine(StringBuilder sb, int titleWidth, int dataWidth){
        
        	sb.append("+");
			for(int i=0; i<titleWidth+2; i++)
				sb.append("-");
			sb.append("+");
			for(int i=0; i<dataWidth+2; i++)
				sb.append("-");
        	sb.append("+" + "\n");
        }      

		public String print(String[] row, int nbLine){
			
			StringBuilder sb = new StringBuilder();
			
			    String title = "#" + nbLine + ". " + "tLogRow_40";
			    
		
			//step 1: get the max length of all the row[] member;
			int dataWidth = 5;		//the length of the string "value"	
			for(int i=0;i<row.length;i++) {
				if(row[i] == null && 4 > dataWidth) {
					dataWidth = 4;
				}
				else if(row[i] != null && row[i].length()>dataWidth) 
					dataWidth = row[i].length();
			}			
						
			int titleWidth = 12;
			
			int totalWidth = dataWidth + titleWidth + 5;
			
			//step 2: print the header with line number
			sb.append(".");
			for(int i=0 ; i<totalWidth ; i++)
				sb.append("-");			
			sb.append("." + "\n" + "|");
			
			int emptyCenterWidth = (totalWidth-title.length())/2;
			for(int i=0 ; i<emptyCenterWidth; i++)
				sb.append(" ");	
			sb.append(title);
			for(int i=0 ; i<totalWidth - emptyCenterWidth - title.length() ; i++)
				sb.append(" ");	
			sb.append("|" + "\n");
			
			//step 3: print "key" and "value"			
			printLine(sb,titleWidth,dataWidth);
			
			sb.append("|" + " key");
			for(int i=0; i<titleWidth-2; i++)
				sb.append(" ");
        	sb.append("|" + " value");
			for(int i=0; i<dataWidth-4; i++)
				sb.append(" ");
			sb.append("|" + "\n");
			
			printLine(sb,titleWidth,dataWidth);
			
			//step 4: print dataset
			
			//for(int i=0; i<row.length; i++){
				sb.append("| " + "errorCode");
				for(int i=0; i<titleWidth -"errorCode".length()+ 1 ;i++)
					sb.append(" ");
				sb.append("| " + row[0]);
				for(int i=0; row[0] == null && i<dataWidth - 3 || row[0] != null && i<dataWidth -row[0].length()+ 1 ;i++)
					sb.append(" ");
				sb.append("|" + "\n");
			
			//}

			
			//for(int i=0; i<row.length; i++){
				sb.append("| " + "errorMessage");
				for(int i=0; i<titleWidth -"errorMessage".length()+ 1 ;i++)
					sb.append(" ");
				sb.append("| " + row[1]);
				for(int i=0; row[1] == null && i<dataWidth - 3 || row[1] != null && i<dataWidth -row[1].length()+ 1 ;i++)
					sb.append(" ");
				sb.append("|" + "\n");
			
			//}

			
			//step 5: print a line gap
			printLine(sb,titleWidth,dataWidth);
			return sb.toString();

		}


	}

	Util_tLogRow_40 util_tLogRow_40 = new Util_tLogRow_40();




	java.io.PrintStream consoleOut_tLogRow_40 = null;
	if (globalMap.get("tLogRow_CONSOLE")!=null){
        consoleOut_tLogRow_40 = (java.io.PrintStream) globalMap.get("tLogRow_CONSOLE");
    }else{
        consoleOut_tLogRow_40 = new java.io.PrintStream(new java.io.BufferedOutputStream(System.out));
        globalMap.put("tLogRow_CONSOLE",consoleOut_tLogRow_40);
    }

 		StringBuilder strBuffer_tLogRow_40 = null;
		int nb_line_tLogRow_40 = 0;
///////////////////////    			



 



/**
 * [tLogRow_40 begin ] stop
 */



	
	/**
	 * [tDBRow_4 begin ] start
	 */

	

	
		
		ok_Hash.put("tDBRow_4", false);
		start_Hash.put("tDBRow_4", System.currentTimeMillis());
		
	
	currentComponent="tDBRow_4";

	
					if(execStat) {
						runStat.updateStatOnConnection(resourceMap,iterateId,0,0,"row41");
					}
				
		int tos_count_tDBRow_4 = 0;
		

	java.sql.Connection conn_tDBRow_4 = null;
	String query_tDBRow_4 = "";
	boolean whetherReject_tDBRow_4 = false;
				conn_tDBRow_4 = (java.sql.Connection)globalMap.get("conn_tMSSqlConnection_4");
			
    resourceMap.put("conn_tDBRow_4", conn_tDBRow_4);
        java.sql.Statement stmt_tDBRow_4 = conn_tDBRow_4.createStatement();
        resourceMap.put("stmt_tDBRow_4", stmt_tDBRow_4);

 



/**
 * [tDBRow_4 begin ] stop
 */




	
	/**
	 * [tLogRow_39 begin ] start
	 */

	

	
		
		ok_Hash.put("tLogRow_39", false);
		start_Hash.put("tLogRow_39", System.currentTimeMillis());
		
	
	currentComponent="tLogRow_39";

	
					if(execStat) {
						runStat.updateStatOnConnection(resourceMap,iterateId,0,0,"row42");
					}
				
		int tos_count_tLogRow_39 = 0;
		

	///////////////////////
		


	class Util_tLogRow_39 {
	
		String[] des_top = { ".", "-" };

        String[] des_data = { "-", "+" };

        String[] des_frame = { "|" }; 
        
        public void printLine(StringBuilder sb, int titleWidth, int dataWidth){
        
        	sb.append("+");
			for(int i=0; i<titleWidth+2; i++)
				sb.append("-");
			sb.append("+");
			for(int i=0; i<dataWidth+2; i++)
				sb.append("-");
        	sb.append("+" + "\n");
        }      

		public String print(String[] row, int nbLine){
			
			StringBuilder sb = new StringBuilder();
			
			    String title = "#" + nbLine + ". " + "tLogRow_39";
			    
		
			//step 1: get the max length of all the row[] member;
			int dataWidth = 5;		//the length of the string "value"	
			for(int i=0;i<row.length;i++) {
				if(row[i] == null && 4 > dataWidth) {
					dataWidth = 4;
				}
				else if(row[i] != null && row[i].length()>dataWidth) 
					dataWidth = row[i].length();
			}			
						
			int titleWidth = 12;
			
			int totalWidth = dataWidth + titleWidth + 5;
			
			//step 2: print the header with line number
			sb.append(".");
			for(int i=0 ; i<totalWidth ; i++)
				sb.append("-");			
			sb.append("." + "\n" + "|");
			
			int emptyCenterWidth = (totalWidth-title.length())/2;
			for(int i=0 ; i<emptyCenterWidth; i++)
				sb.append(" ");	
			sb.append(title);
			for(int i=0 ; i<totalWidth - emptyCenterWidth - title.length() ; i++)
				sb.append(" ");	
			sb.append("|" + "\n");
			
			//step 3: print "key" and "value"			
			printLine(sb,titleWidth,dataWidth);
			
			sb.append("|" + " key");
			for(int i=0; i<titleWidth-2; i++)
				sb.append(" ");
        	sb.append("|" + " value");
			for(int i=0; i<dataWidth-4; i++)
				sb.append(" ");
			sb.append("|" + "\n");
			
			printLine(sb,titleWidth,dataWidth);
			
			//step 4: print dataset
			
			//for(int i=0; i<row.length; i++){
				sb.append("| " + "errorCode");
				for(int i=0; i<titleWidth -"errorCode".length()+ 1 ;i++)
					sb.append(" ");
				sb.append("| " + row[0]);
				for(int i=0; row[0] == null && i<dataWidth - 3 || row[0] != null && i<dataWidth -row[0].length()+ 1 ;i++)
					sb.append(" ");
				sb.append("|" + "\n");
			
			//}

			
			//for(int i=0; i<row.length; i++){
				sb.append("| " + "errorMessage");
				for(int i=0; i<titleWidth -"errorMessage".length()+ 1 ;i++)
					sb.append(" ");
				sb.append("| " + row[1]);
				for(int i=0; row[1] == null && i<dataWidth - 3 || row[1] != null && i<dataWidth -row[1].length()+ 1 ;i++)
					sb.append(" ");
				sb.append("|" + "\n");
			
			//}

			
			//step 5: print a line gap
			printLine(sb,titleWidth,dataWidth);
			return sb.toString();

		}


	}

	Util_tLogRow_39 util_tLogRow_39 = new Util_tLogRow_39();




	java.io.PrintStream consoleOut_tLogRow_39 = null;
	if (globalMap.get("tLogRow_CONSOLE")!=null){
        consoleOut_tLogRow_39 = (java.io.PrintStream) globalMap.get("tLogRow_CONSOLE");
    }else{
        consoleOut_tLogRow_39 = new java.io.PrintStream(new java.io.BufferedOutputStream(System.out));
        globalMap.put("tLogRow_CONSOLE",consoleOut_tLogRow_39);
    }

 		StringBuilder strBuffer_tLogRow_39 = null;
		int nb_line_tLogRow_39 = 0;
///////////////////////    			



 



/**
 * [tLogRow_39 begin ] stop
 */



	
	/**
	 * [tDBRow_3 begin ] start
	 */

	

	
		
		ok_Hash.put("tDBRow_3", false);
		start_Hash.put("tDBRow_3", System.currentTimeMillis());
		
	
	currentComponent="tDBRow_3";

	
		int tos_count_tDBRow_3 = 0;
		

	java.sql.Connection conn_tDBRow_3 = null;
	String query_tDBRow_3 = "";
	boolean whetherReject_tDBRow_3 = false;
				conn_tDBRow_3 = (java.sql.Connection)globalMap.get("conn_tMSSqlConnection_4");
			
    resourceMap.put("conn_tDBRow_3", conn_tDBRow_3);
        java.sql.Statement stmt_tDBRow_3 = conn_tDBRow_3.createStatement();
        resourceMap.put("stmt_tDBRow_3", stmt_tDBRow_3);

 



/**
 * [tDBRow_3 begin ] stop
 */
	
	/**
	 * [tDBRow_3 main ] start
	 */

	

	
	
	currentComponent="tDBRow_3";

	

		row41 = null;
		
		row42 = null;
		
query_tDBRow_3 = "If Exists ( SELECT name \n            FROM sysobjects  \n            WHERE name = 'ImportMarkSearch'\n            AND t"
+"ype = 'P')\n	DROP PROCEDURE ImportMarkSearch";
whetherReject_tDBRow_3 = false;
globalMap.put("tDBRow_3_QUERY",query_tDBRow_3);
try {
		stmt_tDBRow_3.execute(query_tDBRow_3);
		
	} catch (java.lang.Exception e) {
		whetherReject_tDBRow_3 = true;
		
				row42 = new row42Struct();
				
				row42.errorCode = ((java.sql.SQLException)e).getSQLState();
				row42.errorMessage = e.getMessage() + " - Line: " + tos_count_tDBRow_3;
				
	}
	
	if(!whetherReject_tDBRow_3) {
		
					row41 = new row41Struct();
					
	}
	

 


	tos_count_tDBRow_3++;

/**
 * [tDBRow_3 main ] stop
 */
	
	/**
	 * [tDBRow_3 process_data_begin ] start
	 */

	

	
	
	currentComponent="tDBRow_3";

	

 



/**
 * [tDBRow_3 process_data_begin ] stop
 */
// Start of branch "row41"
if(row41 != null) { 
			row44 = null;



	
	/**
	 * [tDBRow_4 main ] start
	 */

	

	
	
	currentComponent="tDBRow_4";

	
					if(execStat){
						runStat.updateStatOnConnection(iterateId,1,1
						
							,"row41"
						
						);
					}
					

		row44 = null;
		
query_tDBRow_4 = "CREATE PROCEDURE ImportMarkSearch\nAS \n	BEGIN\n		SET NOCOUNT ON\n		\n		/* Procedure name: ImportMarkSearch\n		Input:  "
+"IPAS database\n		Output: Search module updated and all names flagged as 'pending phonetization)\n		create or replace pro"
+"cedure ImportMarkSearch as\n		*/\n		\n		DECLARE @time1                                    DATETIME \n		DECLARE @VarMarkC"
+"ode                              FLOAT \n		DECLARE @VarMarkName                              VARCHAR(2000) \n		DECLARE @"
+"VarNiceClassMap                          VARCHAR(2000) \n\n		DECLARE @nbr                                      INT\n\n		"
+"-- positions for parsing of NICE_CLASS_TXT\n		DECLARE @pos1                                     INT \n		DECLARE @pos2   "
+"                                  INT\n		-- position for searching in class map\n		DECLARE @pos                         "
+"             INT\n\n		-- substring of NICE_CLASS_TXT\n		DECLARE @string                                   VARCHAR(2000) "
+"\n		-- substring of class map\n		DECLARE @string2                                  VARCHAR(2000) \n		-- storing the conf"
+"ig param\n		DECLARE @ConfigPhSrcFld							  VARCHAR(254) 	\n		\n		DECLARE curMarkByName cursor LOCAL FOR \n		SELECT	M.MA"
+"RK_CODE, MARK_NAME, MARK_NAME_LANG2,\n				file_seq, file_typ, file_ser, file_nbr, nice_class_txt, filing_date\n		FROM  I"
+"P_MARK M JOIN IP_NAME N ON M.mark_code  = N.mark_code  \n		WHERE	 M.mark_code  is not null\n		ORDER BY M.mark_code \n		"
+"\n		DECLARE @recMarkByName_MARK_CODE			NUMERIC\n		DECLARE @recMarkByName_MARK_NAME			VARCHAR(2000)\n		DECLARE @recMarkByN"
+"ame_MARK_NAME_LANG2		VARCHAR(2000)\n		DECLARE @recMarkByName_file_seq				VARCHAR(200)\n		DECLARE @recMarkByName_file_typ"
+"				VARCHAR(200)\n		DECLARE @recMarkByName_file_ser				NUMERIC\n		DECLARE @recMarkByName_file_nbr				NUMERIC\n		DECLARE "
+"@recMarkByName_nice_class_txt		VARCHAR(200)\n		DECLARE @recMarkByName_filing_date			DATETIME\n\n		SET @time1  =  GETDATE"
+"()\n		\n		/* clear SE (search module) tables */\n		DELETE FROM   se_name_pending    \n		\n		DELETE FROM   se_name_token "
+"   \n		\n		DELETE FROM   se_name    \n		\n		DELETE FROM   se_mark    \n		\n		/* IPAS-329: Select the phonetic search sou"
+"rce field*/\n		SELECT @ConfigPhSrcFld = value FROM CF_config_param WHERE config_code='PhoneticSearchSource';\n		\n		/* N"
+"ote: the same codes will be used for SE_NAME and for IP_NAME,\n		which will not necessarily be the case in the future */"
+"\n\n		/* Browse WRK_MARK order by MARK_CODE in order to build groups */\n		OPEN curMarkByName \n		SET	@VarMarkCode  = 0 "
+"\n		SET @VarMarkName  = '' \n		SET @VarNiceClassMap  = '' \n		WHILE (0 = 0) \n		BEGIN --( \n			fetch NEXT FROM curMarkBy"
+"Name INTO @recMarkByName_MARK_CODE, @recMarkByName_MARK_NAME, @recMarkByName_MARK_NAME_LANG2, @recMarkByName_file_seq, @"
+"recMarkByName_file_typ, @recMarkByName_file_ser, @recMarkByName_file_nbr, @recMarkByName_nice_class_txt, @recMarkByName_"
+"filing_date\n\n			/* test end-of-group condition */\n			IF (@@FETCH_STATUS = -1) or (@@FETCH_STATUS <> -1) and @recmarkB"
+"yName_MARK_CODE <> @VarMarkCode \n			BEGIN \n				IF @VarMarkCode <> 0 \n				BEGIN \n					INSERT INTO  se_name   \n						"
+"	( row_version , \n							mark_code , \n							mark_name , \n							nice_class_map )  \n					 VALUES 		( 1 , \n							@V"
+"arMarkCode , \n							SUBSTRING(@VarMarkName, 1, 254) , \n							LTRIM(RTRIM(@VarNiceClassMap)) )  \n					\n				END\n   "
+"\n			END\n   \n			/* test exit condition */\n			IF (@@FETCH_STATUS = -1) \n			BREAK\n\n			/* test beginning-of-group con"
+"dition */\n			IF @recmarkByName_MARK_CODE <> @VarMarkCode \n			BEGIN \n				SET @VarMarkCode	= @recmarkByName_MARK_CODE "
+"\n				SET @VarMarkName	= @recmarkByName_MARK_NAME \n				IF @ConfigPhSrcFld = '2'\n				BEGIN\n					SET @VarMarkName	= @rec"
+"MarkByName_MARK_NAME_LANG2 \n				END\n				SET @VarNiceClassMap= '' \n			END\n   \n			/* insert SE_MARK */\n			INSERT INT"
+"O  se_mark   \n					( row_version , \n					ind_ipas , \n					mark_ref , \n					mark_code , \n					nice_class_txt , \n			"
+"		search_date )  \n			 VALUES 		( 1 , \n					'S' , \n					CAST(@recmarkByName_file_seq AS VARCHAR) + '/' + CAST(@recmark"
+"ByName_file_typ AS VARCHAR) + '/' + CAST(LTRIM(RTRIM(CONVERT(VARCHAR(23), @recmarkByName_file_ser))) AS VARCHAR) + '/' +"
+" CAST(CONVERT(VARCHAR(23), @recmarkByName_file_nbr) AS VARCHAR) , \n					@recmarkByName_mark_code , \n					@recmarkByNam"
+"e_nice_class_txt , \n					@recmarkByName_filing_date )  \n			\n			/* parse NICE_CLASS_TXT, convert each class number to "
+"a char code and append new codes in VarNiceClassMap */\n			SET @pos1  = 1 \n			SET @pos2  = 1 \n		WHILE (0 = 0) \n			BEG"
+"IN --( \n				/* all class numbers are separated by spaces plus an initial and final space */\n				\n				SET @pos1  = @po"
+"s2 \n				SET @pos2  = CHARINDEX(' ', @recmarkByName_NICE_CLASS_TXT, @pos1 + 1)\n				/* now pos1 and pos2 delimit a Nice "
+"class number */\n				\n				SET @string  = LTRIM(RTRIM(SUBSTRING(@recmarkByName_NICE_CLASS_TXT, @pos1, @pos2 - @pos1)))\n"
+"				IF LEN(@string)> 0 \n				BEGIN \n					SET @nbr  = CONVERT(NUMERIC(8, 2), @string)\n					/* convert nbr into a charac"
+"ter code */\n					\n					SET @string2  = SUBSTRING('ABCDEFGHIJKLMNOPQRSTUVWXYZ7890123456/()=!@[]{}<>&#', @nbr, 1)\n					"
+"/* append new codes to VarNiceClassMap */\n					\n					SET @pos  = CHARINDEX(@string2, @VarNiceClassMap)\n					IF @pos ="
+" 0 \n					BEGIN \n						SET @VarNiceClassMap  = @VarNiceClassMap + @string2 \n					END\n   \n				END\n   \n				-- the LE"
+"N function is not used becasue trailing spaces are ignored\n				IF @pos2 = DATALENGTH(@recmarkByName_NICE_CLASS_TXT)\n		"
+"		BEGIN \n					BREAK\n				END\n			END --) \n		END --) \n		\n		close curMarkByName\n		DEALLOCATE curMarkByName\n		\n		/* "
+"all names are flagged as pending for phonetization */\n		INSERT INTO  se_name_pending    \n		SELECT mark_code\n		FROM  s"
+"e_name \n		\n		SET NOCOUNT OFF\n\n	END\n";
whetherReject_tDBRow_4 = false;
globalMap.put("tDBRow_4_QUERY",query_tDBRow_4);
try {
		stmt_tDBRow_4.execute(query_tDBRow_4);
		
	} catch (java.lang.Exception e) {
		whetherReject_tDBRow_4 = true;
		
				row44 = new row44Struct();
				
				row44.errorCode = ((java.sql.SQLException)e).getSQLState();
				row44.errorMessage = e.getMessage() + " - Line: " + tos_count_tDBRow_4;
				
	}
	
	if(!whetherReject_tDBRow_4) {
		
	}
	

 


	tos_count_tDBRow_4++;

/**
 * [tDBRow_4 main ] stop
 */
	
	/**
	 * [tDBRow_4 process_data_begin ] start
	 */

	

	
	
	currentComponent="tDBRow_4";

	

 



/**
 * [tDBRow_4 process_data_begin ] stop
 */
// Start of branch "row44"
if(row44 != null) { 



	
	/**
	 * [tLogRow_40 main ] start
	 */

	

	
	
	currentComponent="tLogRow_40";

	
					if(execStat){
						runStat.updateStatOnConnection(iterateId,1,1
						
							,"row44"
						
						);
					}
					
///////////////////////		
						



				strBuffer_tLogRow_40 = new StringBuilder();




   				
	    		if(row44.errorCode != null) { //              
                    							
       
				strBuffer_tLogRow_40.append(
				                String.valueOf(row44.errorCode)							
				);


							
	    		} //  			

    			strBuffer_tLogRow_40.append("|");
    			


   				
	    		if(row44.errorMessage != null) { //              
                    							
       
				strBuffer_tLogRow_40.append(
				                String.valueOf(row44.errorMessage)							
				);


							
	    		} //  			

				
				String[] row_tLogRow_40 = new String[2];
   				
	    		if(row44.errorCode != null) { //              
                 row_tLogRow_40[0]=    						    
				                String.valueOf(row44.errorCode)			
					          ;	
							
	    		} //			
    			   				
	    		if(row44.errorMessage != null) { //              
                 row_tLogRow_40[1]=    						    
				                String.valueOf(row44.errorMessage)			
					          ;	
							
	    		} //			
    			
				nb_line_tLogRow_40++;
                consoleOut_tLogRow_40.println(util_tLogRow_40.print(row_tLogRow_40,nb_line_tLogRow_40));
                consoleOut_tLogRow_40.flush();
//////

//////                    
                    
///////////////////////    			

 


	tos_count_tLogRow_40++;

/**
 * [tLogRow_40 main ] stop
 */
	
	/**
	 * [tLogRow_40 process_data_begin ] start
	 */

	

	
	
	currentComponent="tLogRow_40";

	

 



/**
 * [tLogRow_40 process_data_begin ] stop
 */
	
	/**
	 * [tLogRow_40 process_data_end ] start
	 */

	

	
	
	currentComponent="tLogRow_40";

	

 



/**
 * [tLogRow_40 process_data_end ] stop
 */

} // End of branch "row44"




	
	/**
	 * [tDBRow_4 process_data_end ] start
	 */

	

	
	
	currentComponent="tDBRow_4";

	

 



/**
 * [tDBRow_4 process_data_end ] stop
 */

} // End of branch "row41"




// Start of branch "row42"
if(row42 != null) { 



	
	/**
	 * [tLogRow_39 main ] start
	 */

	

	
	
	currentComponent="tLogRow_39";

	
					if(execStat){
						runStat.updateStatOnConnection(iterateId,1,1
						
							,"row42"
						
						);
					}
					
///////////////////////		
						



				strBuffer_tLogRow_39 = new StringBuilder();




   				
	    		if(row42.errorCode != null) { //              
                    							
       
				strBuffer_tLogRow_39.append(
				                String.valueOf(row42.errorCode)							
				);


							
	    		} //  			

    			strBuffer_tLogRow_39.append("|");
    			


   				
	    		if(row42.errorMessage != null) { //              
                    							
       
				strBuffer_tLogRow_39.append(
				                String.valueOf(row42.errorMessage)							
				);


							
	    		} //  			

				
				String[] row_tLogRow_39 = new String[2];
   				
	    		if(row42.errorCode != null) { //              
                 row_tLogRow_39[0]=    						    
				                String.valueOf(row42.errorCode)			
					          ;	
							
	    		} //			
    			   				
	    		if(row42.errorMessage != null) { //              
                 row_tLogRow_39[1]=    						    
				                String.valueOf(row42.errorMessage)			
					          ;	
							
	    		} //			
    			
				nb_line_tLogRow_39++;
                consoleOut_tLogRow_39.println(util_tLogRow_39.print(row_tLogRow_39,nb_line_tLogRow_39));
                consoleOut_tLogRow_39.flush();
//////

//////                    
                    
///////////////////////    			

 


	tos_count_tLogRow_39++;

/**
 * [tLogRow_39 main ] stop
 */
	
	/**
	 * [tLogRow_39 process_data_begin ] start
	 */

	

	
	
	currentComponent="tLogRow_39";

	

 



/**
 * [tLogRow_39 process_data_begin ] stop
 */
	
	/**
	 * [tLogRow_39 process_data_end ] start
	 */

	

	
	
	currentComponent="tLogRow_39";

	

 



/**
 * [tLogRow_39 process_data_end ] stop
 */

} // End of branch "row42"




	
	/**
	 * [tDBRow_3 process_data_end ] start
	 */

	

	
	
	currentComponent="tDBRow_3";

	

 



/**
 * [tDBRow_3 process_data_end ] stop
 */
	
	/**
	 * [tDBRow_3 end ] start
	 */

	

	
	
	currentComponent="tDBRow_3";

	

	
        stmt_tDBRow_3.close();
        resourceMap.remove("stmt_tDBRow_3");
    resourceMap.put("statementClosed_tDBRow_3", true);
    resourceMap.put("finish_tDBRow_3", true);
 

ok_Hash.put("tDBRow_3", true);
end_Hash.put("tDBRow_3", System.currentTimeMillis());




/**
 * [tDBRow_3 end ] stop
 */

	
	/**
	 * [tDBRow_4 end ] start
	 */

	

	
	
	currentComponent="tDBRow_4";

	

	
        stmt_tDBRow_4.close();
        resourceMap.remove("stmt_tDBRow_4");
    resourceMap.put("statementClosed_tDBRow_4", true);
    resourceMap.put("finish_tDBRow_4", true);
				if(execStat){
			  		runStat.updateStat(resourceMap,iterateId,2,0,"row41");
			  	}
			  	
 

ok_Hash.put("tDBRow_4", true);
end_Hash.put("tDBRow_4", System.currentTimeMillis());




/**
 * [tDBRow_4 end ] stop
 */

	
	/**
	 * [tLogRow_40 end ] start
	 */

	

	
	
	currentComponent="tLogRow_40";

	


//////
//////
globalMap.put("tLogRow_40_NB_LINE",nb_line_tLogRow_40);

///////////////////////    			

				if(execStat){
			  		runStat.updateStat(resourceMap,iterateId,2,0,"row44");
			  	}
			  	
 

ok_Hash.put("tLogRow_40", true);
end_Hash.put("tLogRow_40", System.currentTimeMillis());




/**
 * [tLogRow_40 end ] stop
 */







	
	/**
	 * [tLogRow_39 end ] start
	 */

	

	
	
	currentComponent="tLogRow_39";

	


//////
//////
globalMap.put("tLogRow_39_NB_LINE",nb_line_tLogRow_39);

///////////////////////    			

				if(execStat){
			  		runStat.updateStat(resourceMap,iterateId,2,0,"row42");
			  	}
			  	
 

ok_Hash.put("tLogRow_39", true);
end_Hash.put("tLogRow_39", System.currentTimeMillis());




/**
 * [tLogRow_39 end ] stop
 */



				}//end the resume

				
				    			if(resumeEntryMethodName == null || globalResumeTicket){
				    				resumeUtil.addLog("CHECKPOINT", "CONNECTION:SUBJOB_OK:tDBRow_3:OnSubjobOk", "", Thread.currentThread().getId() + "", "", "", "", "", "");
								}	    				    			
					    	
								if(execStat){    	
									runStat.updateStatOnConnection("OnSubjobOk20", 0, "ok");
								} 
							
							tDBRow_5Process(globalMap); 
						



	
			}catch(java.lang.Exception e){	
				
				TalendException te = new TalendException(e, currentComponent, globalMap);
				
				throw te;
			}catch(java.lang.Error error){	
				
					runStat.stopThreadStat();
				
				throw error;
			}finally{
				
				try{
					
	
	/**
	 * [tDBRow_3 finally ] start
	 */

	

	
	
	currentComponent="tDBRow_3";

	

    if (resourceMap.get("statementClosed_tDBRow_3") == null) {
            java.sql.Statement stmtToClose_tDBRow_3 = null;
            if ((stmtToClose_tDBRow_3 = (java.sql.Statement) resourceMap.remove("stmt_tDBRow_3")) != null) {
                stmtToClose_tDBRow_3.close();
            }
    }
 



/**
 * [tDBRow_3 finally ] stop
 */

	
	/**
	 * [tDBRow_4 finally ] start
	 */

	

	
	
	currentComponent="tDBRow_4";

	

    if (resourceMap.get("statementClosed_tDBRow_4") == null) {
            java.sql.Statement stmtToClose_tDBRow_4 = null;
            if ((stmtToClose_tDBRow_4 = (java.sql.Statement) resourceMap.remove("stmt_tDBRow_4")) != null) {
                stmtToClose_tDBRow_4.close();
            }
    }
 



/**
 * [tDBRow_4 finally ] stop
 */

	
	/**
	 * [tLogRow_40 finally ] start
	 */

	

	
	
	currentComponent="tLogRow_40";

	

 



/**
 * [tLogRow_40 finally ] stop
 */







	
	/**
	 * [tLogRow_39 finally ] start
	 */

	

	
	
	currentComponent="tLogRow_39";

	

 



/**
 * [tLogRow_39 finally ] stop
 */



				}catch(java.lang.Exception e){	
					//ignore
				}catch(java.lang.Error error){
					//ignore
				}
				resourceMap = null;
			}
		

		globalMap.put("tDBRow_3_SUBPROCESS_STATE", 1);
	}
	


public static class row49Struct implements routines.system.IPersistableRow<row49Struct> {
    final static byte[] commonByteArrayLock_WIPO_PROJECTS_F_IPAS_ENV_CRE = new byte[0];
    static byte[] commonByteArray_WIPO_PROJECTS_F_IPAS_ENV_CRE = new byte[0];

	
			    public String errorCode;

				public String getErrorCode () {
					return this.errorCode;
				}
				
			    public String errorMessage;

				public String getErrorMessage () {
					return this.errorMessage;
				}
				



	private String readString(ObjectInputStream dis) throws IOException{
		String strReturn = null;
		int length = 0;
        length = dis.readInt();
		if (length == -1) {
			strReturn = null;
		} else {
			if(length > commonByteArray_WIPO_PROJECTS_F_IPAS_ENV_CRE.length) {
				if(length < 1024 && commonByteArray_WIPO_PROJECTS_F_IPAS_ENV_CRE.length == 0) {
   					commonByteArray_WIPO_PROJECTS_F_IPAS_ENV_CRE = new byte[1024];
				} else {
   					commonByteArray_WIPO_PROJECTS_F_IPAS_ENV_CRE = new byte[2 * length];
   				}
			}
			dis.readFully(commonByteArray_WIPO_PROJECTS_F_IPAS_ENV_CRE, 0, length);
			strReturn = new String(commonByteArray_WIPO_PROJECTS_F_IPAS_ENV_CRE, 0, length, utf8Charset);
		}
		return strReturn;
	}

    private void writeString(String str, ObjectOutputStream dos) throws IOException{
		if(str == null) {
            dos.writeInt(-1);
		} else {
            byte[] byteArray = str.getBytes(utf8Charset);
	    	dos.writeInt(byteArray.length);
			dos.write(byteArray);
    	}
    }

    public void readData(ObjectInputStream dis) {

		synchronized(commonByteArrayLock_WIPO_PROJECTS_F_IPAS_ENV_CRE) {

        	try {

        		int length = 0;
		
					this.errorCode = readString(dis);
					
					this.errorMessage = readString(dis);
					
        	} catch (IOException e) {
	            throw new RuntimeException(e);

		

        }

		

      }


    }

    public void writeData(ObjectOutputStream dos) {
        try {

		
					// String
				
						writeString(this.errorCode,dos);
					
					// String
				
						writeString(this.errorMessage,dos);
					
        	} catch (IOException e) {
	            throw new RuntimeException(e);
        }


    }


    public String toString() {

		StringBuilder sb = new StringBuilder();
		sb.append(super.toString());
		sb.append("[");
		sb.append("errorCode="+errorCode);
		sb.append(",errorMessage="+errorMessage);
	    sb.append("]");

	    return sb.toString();
    }

    /**
     * Compare keys
     */
    public int compareTo(row49Struct other) {

		int returnValue = -1;
		
	    return returnValue;
    }


    private int checkNullsAndCompare(Object object1, Object object2) {
        int returnValue = 0;
		if (object1 instanceof Comparable && object2 instanceof Comparable) {
            returnValue = ((Comparable) object1).compareTo(object2);
        } else if (object1 != null && object2 != null) {
            returnValue = compareStrings(object1.toString(), object2.toString());
        } else if (object1 == null && object2 != null) {
            returnValue = 1;
        } else if (object1 != null && object2 == null) {
            returnValue = -1;
        } else {
            returnValue = 0;
        }

        return returnValue;
    }

    private int compareStrings(String string1, String string2) {
        return string1.compareTo(string2);
    }


}

public static class row45Struct implements routines.system.IPersistableRow<row45Struct> {
    final static byte[] commonByteArrayLock_WIPO_PROJECTS_F_IPAS_ENV_CRE = new byte[0];
    static byte[] commonByteArray_WIPO_PROJECTS_F_IPAS_ENV_CRE = new byte[0];

	



    public void readData(ObjectInputStream dis) {

		synchronized(commonByteArrayLock_WIPO_PROJECTS_F_IPAS_ENV_CRE) {

        	try {

        		int length = 0;
		

		

        }

		
			finally {}
		

      }


    }

    public void writeData(ObjectOutputStream dos) {
        try {

		
        }

			finally {}
		

    }


    public String toString() {

		StringBuilder sb = new StringBuilder();
		sb.append(super.toString());
		sb.append("[");
	    sb.append("]");

	    return sb.toString();
    }

    /**
     * Compare keys
     */
    public int compareTo(row45Struct other) {

		int returnValue = -1;
		
	    return returnValue;
    }


    private int checkNullsAndCompare(Object object1, Object object2) {
        int returnValue = 0;
		if (object1 instanceof Comparable && object2 instanceof Comparable) {
            returnValue = ((Comparable) object1).compareTo(object2);
        } else if (object1 != null && object2 != null) {
            returnValue = compareStrings(object1.toString(), object2.toString());
        } else if (object1 == null && object2 != null) {
            returnValue = 1;
        } else if (object1 != null && object2 == null) {
            returnValue = -1;
        } else {
            returnValue = 0;
        }

        return returnValue;
    }

    private int compareStrings(String string1, String string2) {
        return string1.compareTo(string2);
    }


}

public static class row46Struct implements routines.system.IPersistableRow<row46Struct> {
    final static byte[] commonByteArrayLock_WIPO_PROJECTS_F_IPAS_ENV_CRE = new byte[0];
    static byte[] commonByteArray_WIPO_PROJECTS_F_IPAS_ENV_CRE = new byte[0];

	
			    public String errorCode;

				public String getErrorCode () {
					return this.errorCode;
				}
				
			    public String errorMessage;

				public String getErrorMessage () {
					return this.errorMessage;
				}
				



	private String readString(ObjectInputStream dis) throws IOException{
		String strReturn = null;
		int length = 0;
        length = dis.readInt();
		if (length == -1) {
			strReturn = null;
		} else {
			if(length > commonByteArray_WIPO_PROJECTS_F_IPAS_ENV_CRE.length) {
				if(length < 1024 && commonByteArray_WIPO_PROJECTS_F_IPAS_ENV_CRE.length == 0) {
   					commonByteArray_WIPO_PROJECTS_F_IPAS_ENV_CRE = new byte[1024];
				} else {
   					commonByteArray_WIPO_PROJECTS_F_IPAS_ENV_CRE = new byte[2 * length];
   				}
			}
			dis.readFully(commonByteArray_WIPO_PROJECTS_F_IPAS_ENV_CRE, 0, length);
			strReturn = new String(commonByteArray_WIPO_PROJECTS_F_IPAS_ENV_CRE, 0, length, utf8Charset);
		}
		return strReturn;
	}

    private void writeString(String str, ObjectOutputStream dos) throws IOException{
		if(str == null) {
            dos.writeInt(-1);
		} else {
            byte[] byteArray = str.getBytes(utf8Charset);
	    	dos.writeInt(byteArray.length);
			dos.write(byteArray);
    	}
    }

    public void readData(ObjectInputStream dis) {

		synchronized(commonByteArrayLock_WIPO_PROJECTS_F_IPAS_ENV_CRE) {

        	try {

        		int length = 0;
		
					this.errorCode = readString(dis);
					
					this.errorMessage = readString(dis);
					
        	} catch (IOException e) {
	            throw new RuntimeException(e);

		

        }

		

      }


    }

    public void writeData(ObjectOutputStream dos) {
        try {

		
					// String
				
						writeString(this.errorCode,dos);
					
					// String
				
						writeString(this.errorMessage,dos);
					
        	} catch (IOException e) {
	            throw new RuntimeException(e);
        }


    }


    public String toString() {

		StringBuilder sb = new StringBuilder();
		sb.append(super.toString());
		sb.append("[");
		sb.append("errorCode="+errorCode);
		sb.append(",errorMessage="+errorMessage);
	    sb.append("]");

	    return sb.toString();
    }

    /**
     * Compare keys
     */
    public int compareTo(row46Struct other) {

		int returnValue = -1;
		
	    return returnValue;
    }


    private int checkNullsAndCompare(Object object1, Object object2) {
        int returnValue = 0;
		if (object1 instanceof Comparable && object2 instanceof Comparable) {
            returnValue = ((Comparable) object1).compareTo(object2);
        } else if (object1 != null && object2 != null) {
            returnValue = compareStrings(object1.toString(), object2.toString());
        } else if (object1 == null && object2 != null) {
            returnValue = 1;
        } else if (object1 != null && object2 == null) {
            returnValue = -1;
        } else {
            returnValue = 0;
        }

        return returnValue;
    }

    private int compareStrings(String string1, String string2) {
        return string1.compareTo(string2);
    }


}
public void tDBRow_5Process(final java.util.Map<String, Object> globalMap) throws TalendException {
	globalMap.put("tDBRow_5_SUBPROCESS_STATE", 0);

 final boolean execStat = this.execStat;
	
		String iterateId = "";
	
	
	String currentComponent = "";
	java.util.Map<String, Object> resourceMap = new java.util.HashMap<String, Object>();

	try {
			// TDI-39566 avoid throwing an useless Exception
			boolean resumeIt = true;
			if (globalResumeTicket == false && resumeEntryMethodName != null) {
				String currentMethodName = new java.lang.Exception().getStackTrace()[0].getMethodName();
				resumeIt = resumeEntryMethodName.equals(currentMethodName);
			}
			if (resumeIt || globalResumeTicket) { //start the resume
				globalResumeTicket = true;



		row45Struct row45 = new row45Struct();
row49Struct row49 = new row49Struct();
row46Struct row46 = new row46Struct();





	
	/**
	 * [tLogRow_42 begin ] start
	 */

	

	
		
		ok_Hash.put("tLogRow_42", false);
		start_Hash.put("tLogRow_42", System.currentTimeMillis());
		
	
	currentComponent="tLogRow_42";

	
					if(execStat) {
						runStat.updateStatOnConnection(resourceMap,iterateId,0,0,"row49");
					}
				
		int tos_count_tLogRow_42 = 0;
		

	///////////////////////
		


	class Util_tLogRow_42 {
	
		String[] des_top = { ".", "-" };

        String[] des_data = { "-", "+" };

        String[] des_frame = { "|" }; 
        
        public void printLine(StringBuilder sb, int titleWidth, int dataWidth){
        
        	sb.append("+");
			for(int i=0; i<titleWidth+2; i++)
				sb.append("-");
			sb.append("+");
			for(int i=0; i<dataWidth+2; i++)
				sb.append("-");
        	sb.append("+" + "\n");
        }      

		public String print(String[] row, int nbLine){
			
			StringBuilder sb = new StringBuilder();
			
			    String title = "#" + nbLine + ". " + "tLogRow_42";
			    
		
			//step 1: get the max length of all the row[] member;
			int dataWidth = 5;		//the length of the string "value"	
			for(int i=0;i<row.length;i++) {
				if(row[i] == null && 4 > dataWidth) {
					dataWidth = 4;
				}
				else if(row[i] != null && row[i].length()>dataWidth) 
					dataWidth = row[i].length();
			}			
						
			int titleWidth = 12;
			
			int totalWidth = dataWidth + titleWidth + 5;
			
			//step 2: print the header with line number
			sb.append(".");
			for(int i=0 ; i<totalWidth ; i++)
				sb.append("-");			
			sb.append("." + "\n" + "|");
			
			int emptyCenterWidth = (totalWidth-title.length())/2;
			for(int i=0 ; i<emptyCenterWidth; i++)
				sb.append(" ");	
			sb.append(title);
			for(int i=0 ; i<totalWidth - emptyCenterWidth - title.length() ; i++)
				sb.append(" ");	
			sb.append("|" + "\n");
			
			//step 3: print "key" and "value"			
			printLine(sb,titleWidth,dataWidth);
			
			sb.append("|" + " key");
			for(int i=0; i<titleWidth-2; i++)
				sb.append(" ");
        	sb.append("|" + " value");
			for(int i=0; i<dataWidth-4; i++)
				sb.append(" ");
			sb.append("|" + "\n");
			
			printLine(sb,titleWidth,dataWidth);
			
			//step 4: print dataset
			
			//for(int i=0; i<row.length; i++){
				sb.append("| " + "errorCode");
				for(int i=0; i<titleWidth -"errorCode".length()+ 1 ;i++)
					sb.append(" ");
				sb.append("| " + row[0]);
				for(int i=0; row[0] == null && i<dataWidth - 3 || row[0] != null && i<dataWidth -row[0].length()+ 1 ;i++)
					sb.append(" ");
				sb.append("|" + "\n");
			
			//}

			
			//for(int i=0; i<row.length; i++){
				sb.append("| " + "errorMessage");
				for(int i=0; i<titleWidth -"errorMessage".length()+ 1 ;i++)
					sb.append(" ");
				sb.append("| " + row[1]);
				for(int i=0; row[1] == null && i<dataWidth - 3 || row[1] != null && i<dataWidth -row[1].length()+ 1 ;i++)
					sb.append(" ");
				sb.append("|" + "\n");
			
			//}

			
			//step 5: print a line gap
			printLine(sb,titleWidth,dataWidth);
			return sb.toString();

		}


	}

	Util_tLogRow_42 util_tLogRow_42 = new Util_tLogRow_42();




	java.io.PrintStream consoleOut_tLogRow_42 = null;
	if (globalMap.get("tLogRow_CONSOLE")!=null){
        consoleOut_tLogRow_42 = (java.io.PrintStream) globalMap.get("tLogRow_CONSOLE");
    }else{
        consoleOut_tLogRow_42 = new java.io.PrintStream(new java.io.BufferedOutputStream(System.out));
        globalMap.put("tLogRow_CONSOLE",consoleOut_tLogRow_42);
    }

 		StringBuilder strBuffer_tLogRow_42 = null;
		int nb_line_tLogRow_42 = 0;
///////////////////////    			



 



/**
 * [tLogRow_42 begin ] stop
 */



	
	/**
	 * [tDBRow_6 begin ] start
	 */

	

	
		
		ok_Hash.put("tDBRow_6", false);
		start_Hash.put("tDBRow_6", System.currentTimeMillis());
		
	
	currentComponent="tDBRow_6";

	
					if(execStat) {
						runStat.updateStatOnConnection(resourceMap,iterateId,0,0,"row45");
					}
				
		int tos_count_tDBRow_6 = 0;
		

	java.sql.Connection conn_tDBRow_6 = null;
	String query_tDBRow_6 = "";
	boolean whetherReject_tDBRow_6 = false;
				conn_tDBRow_6 = (java.sql.Connection)globalMap.get("conn_tMSSqlConnection_4");
			
    resourceMap.put("conn_tDBRow_6", conn_tDBRow_6);
        java.sql.Statement stmt_tDBRow_6 = conn_tDBRow_6.createStatement();
        resourceMap.put("stmt_tDBRow_6", stmt_tDBRow_6);

 



/**
 * [tDBRow_6 begin ] stop
 */




	
	/**
	 * [tLogRow_41 begin ] start
	 */

	

	
		
		ok_Hash.put("tLogRow_41", false);
		start_Hash.put("tLogRow_41", System.currentTimeMillis());
		
	
	currentComponent="tLogRow_41";

	
					if(execStat) {
						runStat.updateStatOnConnection(resourceMap,iterateId,0,0,"row46");
					}
				
		int tos_count_tLogRow_41 = 0;
		

	///////////////////////
		


	class Util_tLogRow_41 {
	
		String[] des_top = { ".", "-" };

        String[] des_data = { "-", "+" };

        String[] des_frame = { "|" }; 
        
        public void printLine(StringBuilder sb, int titleWidth, int dataWidth){
        
        	sb.append("+");
			for(int i=0; i<titleWidth+2; i++)
				sb.append("-");
			sb.append("+");
			for(int i=0; i<dataWidth+2; i++)
				sb.append("-");
        	sb.append("+" + "\n");
        }      

		public String print(String[] row, int nbLine){
			
			StringBuilder sb = new StringBuilder();
			
			    String title = "#" + nbLine + ". " + "tLogRow_41";
			    
		
			//step 1: get the max length of all the row[] member;
			int dataWidth = 5;		//the length of the string "value"	
			for(int i=0;i<row.length;i++) {
				if(row[i] == null && 4 > dataWidth) {
					dataWidth = 4;
				}
				else if(row[i] != null && row[i].length()>dataWidth) 
					dataWidth = row[i].length();
			}			
						
			int titleWidth = 12;
			
			int totalWidth = dataWidth + titleWidth + 5;
			
			//step 2: print the header with line number
			sb.append(".");
			for(int i=0 ; i<totalWidth ; i++)
				sb.append("-");			
			sb.append("." + "\n" + "|");
			
			int emptyCenterWidth = (totalWidth-title.length())/2;
			for(int i=0 ; i<emptyCenterWidth; i++)
				sb.append(" ");	
			sb.append(title);
			for(int i=0 ; i<totalWidth - emptyCenterWidth - title.length() ; i++)
				sb.append(" ");	
			sb.append("|" + "\n");
			
			//step 3: print "key" and "value"			
			printLine(sb,titleWidth,dataWidth);
			
			sb.append("|" + " key");
			for(int i=0; i<titleWidth-2; i++)
				sb.append(" ");
        	sb.append("|" + " value");
			for(int i=0; i<dataWidth-4; i++)
				sb.append(" ");
			sb.append("|" + "\n");
			
			printLine(sb,titleWidth,dataWidth);
			
			//step 4: print dataset
			
			//for(int i=0; i<row.length; i++){
				sb.append("| " + "errorCode");
				for(int i=0; i<titleWidth -"errorCode".length()+ 1 ;i++)
					sb.append(" ");
				sb.append("| " + row[0]);
				for(int i=0; row[0] == null && i<dataWidth - 3 || row[0] != null && i<dataWidth -row[0].length()+ 1 ;i++)
					sb.append(" ");
				sb.append("|" + "\n");
			
			//}

			
			//for(int i=0; i<row.length; i++){
				sb.append("| " + "errorMessage");
				for(int i=0; i<titleWidth -"errorMessage".length()+ 1 ;i++)
					sb.append(" ");
				sb.append("| " + row[1]);
				for(int i=0; row[1] == null && i<dataWidth - 3 || row[1] != null && i<dataWidth -row[1].length()+ 1 ;i++)
					sb.append(" ");
				sb.append("|" + "\n");
			
			//}

			
			//step 5: print a line gap
			printLine(sb,titleWidth,dataWidth);
			return sb.toString();

		}


	}

	Util_tLogRow_41 util_tLogRow_41 = new Util_tLogRow_41();




	java.io.PrintStream consoleOut_tLogRow_41 = null;
	if (globalMap.get("tLogRow_CONSOLE")!=null){
        consoleOut_tLogRow_41 = (java.io.PrintStream) globalMap.get("tLogRow_CONSOLE");
    }else{
        consoleOut_tLogRow_41 = new java.io.PrintStream(new java.io.BufferedOutputStream(System.out));
        globalMap.put("tLogRow_CONSOLE",consoleOut_tLogRow_41);
    }

 		StringBuilder strBuffer_tLogRow_41 = null;
		int nb_line_tLogRow_41 = 0;
///////////////////////    			



 



/**
 * [tLogRow_41 begin ] stop
 */



	
	/**
	 * [tDBRow_5 begin ] start
	 */

	

	
		
		ok_Hash.put("tDBRow_5", false);
		start_Hash.put("tDBRow_5", System.currentTimeMillis());
		
	
	currentComponent="tDBRow_5";

	
		int tos_count_tDBRow_5 = 0;
		

	java.sql.Connection conn_tDBRow_5 = null;
	String query_tDBRow_5 = "";
	boolean whetherReject_tDBRow_5 = false;
				conn_tDBRow_5 = (java.sql.Connection)globalMap.get("conn_tMSSqlConnection_4");
			
    resourceMap.put("conn_tDBRow_5", conn_tDBRow_5);
        java.sql.Statement stmt_tDBRow_5 = conn_tDBRow_5.createStatement();
        resourceMap.put("stmt_tDBRow_5", stmt_tDBRow_5);

 



/**
 * [tDBRow_5 begin ] stop
 */
	
	/**
	 * [tDBRow_5 main ] start
	 */

	

	
	
	currentComponent="tDBRow_5";

	

		row45 = null;
		
		row46 = null;
		
query_tDBRow_5 = "If Exists ( SELECT name \n            FROM sysobjects  \n            WHERE name = 'ImportMarkRelsValidate'\n           "
+" AND type = 'P')\n	DROP PROCEDURE ImportMarkRelsValidate";
whetherReject_tDBRow_5 = false;
globalMap.put("tDBRow_5_QUERY",query_tDBRow_5);
try {
		stmt_tDBRow_5.execute(query_tDBRow_5);
		
	} catch (java.lang.Exception e) {
		whetherReject_tDBRow_5 = true;
		
				row46 = new row46Struct();
				
				row46.errorCode = ((java.sql.SQLException)e).getSQLState();
				row46.errorMessage = e.getMessage() + " - Line: " + tos_count_tDBRow_5;
				
	}
	
	if(!whetherReject_tDBRow_5) {
		
					row45 = new row45Struct();
					
	}
	

 


	tos_count_tDBRow_5++;

/**
 * [tDBRow_5 main ] stop
 */
	
	/**
	 * [tDBRow_5 process_data_begin ] start
	 */

	

	
	
	currentComponent="tDBRow_5";

	

 



/**
 * [tDBRow_5 process_data_begin ] stop
 */
// Start of branch "row45"
if(row45 != null) { 
			row49 = null;



	
	/**
	 * [tDBRow_6 main ] start
	 */

	

	
	
	currentComponent="tDBRow_6";

	
					if(execStat){
						runStat.updateStatOnConnection(iterateId,1,1
						
							,"row45"
						
						);
					}
					

		row49 = null;
		
query_tDBRow_6 = "CREATE PROCEDURE ImportMarkRelsValidate\nAS \n	BEGIN\n		 /* flag all pending marks rels as to be validated */\n    upda"
+"te   ["+ context.intermediateDB + "].[dbo].VW_import_mark_rels \n    set     ind_import = 0\n    where   ind_import is null or\n            ind_import not"
+" in (0, 1)\n    ;\n    /* delete prior errors */\n    delete from  ["+ context.intermediateDB + "].[dbo].VW_IMPORT_MARK_RELS_RESULT;\n\n    /* 2.1.1  ["+ context.intermediateDB + "].[dbo].VW_IMPORT_MARK_RELS validations */\n\n    /* RELATIONSHIP_TYPE: if not exists in CF_RELATIONSHIP_TYPE, message "
+"“Invalid relationship type” */\n    insert  into  ["+ context.intermediateDB + "].[dbo].VW_IMPORT_MARK_RELS_RESULT (file_seq, file_type, file_series, file_nbr, \n                                     "
+"        relationshIP_type, relationshIP_role, \n                                             related_file_seq, related_f"
+"ile_type, related_file_series, related_file_nbr, \n                                             ind_import, msg_import)"
+"\n    select  file_seq, file_type, file_series, file_nbr,\n            relationshIP_type, relationshIP_role, \n          "
+"  related_file_seq, related_file_type, related_file_series, related_file_nbr, \n            2, 'Invalid relationship typ"
+"e'\n    from     ["+ context.intermediateDB + "].[dbo].VW_import_mark_rels\n    where   ind_import = 0      and\n            relationshIP_type COLLATE DATABASE_DEFAUL"
+"T not in\n            (select relationshIP_typ\n             from   CF_relationshIP_type)\n    ;\n\n    /* RELATIONSHIP_"
+"ROLE: if not in 1 / 2, message “Invalid relationship role” */\n    insert  into  ["+ context.intermediateDB + "].[dbo].VW_IMPORT_MARK_RELS_RESULT (file_seq, file_type, file_series, file_nbr, \n                                     "
+"        relationshIP_type, relationshIP_role, \n                                             related_file_seq, related_f"
+"ile_type, related_file_series, related_file_nbr, \n                                             ind_import, msg_import)"
+"\n    select  file_seq, file_type, file_series, file_nbr,\n            relationshIP_type, relationshIP_role, \n          "
+"  related_file_seq, related_file_type, related_file_series, related_file_nbr, \n            2, 'Invalid relationship rol"
+"e'\n    from     ["+ context.intermediateDB + "].[dbo].VW_import_mark_rels\n    where   ind_import = 0      and\n            relationshIP_role not in ( '1', '2')\n   "
+" ;\n\n    /* If FILE_SEQ / FILE_TYPE / FILE_SERIES / FILE_NBR already exists in IP_FILE, insert message “File sequence /"
+" type / series / number is invalid” */\n    insert  into  ["+ context.intermediateDB + "].[dbo].VW_IMPORT_MARK_RELS_RESULT (file_seq, file_type, file_series, file_nbr, \n                                     "
+"        relationshIP_type, relationshIP_role, \n                                             related_file_seq, related_f"
+"ile_type, related_file_series, related_file_nbr, \n                                             ind_import, msg_import)"
+"\n    select  file_seq, file_type, file_series, file_nbr,\n            relationshIP_type, relationshIP_role, \n          "
+"  related_file_seq, related_file_type, related_file_series, related_file_nbr, \n            2, 'File sequence / type / s"
+"eries / number is invalid'\n    from     ["+ context.intermediateDB + "].[dbo].VW_import_mark_rels m\n    where   ind_import = 0      and not exists \n			(select * from IP_FILE f \n			where "
+"f.FILE_SEQ=m.FILE_SEQ COLLATE DATABASE_DEFAULT and f.FILE_TYP=m.FILE_TYPE COLLATE DATABASE_DEFAULT and f.FILE_SER=m.FILE"
+"_SERIES and f.FILE_NBR=m.FILE_NBR)\n    ;\n\n    /* If RELATED_FILE_SEQ / RELATED_FILE_TYPE / RELATED_FILE_SERIES / RELA"
+"TED_FILE_NBR already exists in IP_FILE, insert message “Related file sequence / type / series / number is invalid” */\n "
+"   insert  into  ["+ context.intermediateDB + "].[dbo].VW_IMPORT_MARK_RELS_RESULT (file_seq, file_type, file_series, file_nbr, \n                                     "
+"        relationshIP_type, relationshIP_role, \n                                             related_file_seq, related_f"
+"ile_type, related_file_series, related_file_nbr, \n                                             ind_import, msg_import)"
+"\n    select  file_seq, file_type, file_series, file_nbr,\n            relationshIP_type, relationshIP_role, \n          "
+"  related_file_seq, related_file_type, related_file_series, related_file_nbr, \n            2, 'Related file sequence / "
+"type / series / number is invalid'\n    from     ["+ context.intermediateDB + "].[dbo].VW_import_mark_rels m\n    where   ind_import = 0      and not exists \n			(select * from IP_FILE f \n			where "
+"f.FILE_SEQ=m.RELATED_FILE_SEQ COLLATE DATABASE_DEFAULT and f.FILE_TYP=m.RELATED_FILE_TYPE COLLATE DATABASE_DEFAULT and f"
+".FILE_SER=m.RELATED_FILE_SERIES and f.FILE_NBR=m.RELATED_FILE_NBR)\n			\n            \n    ;\n\n    /* *************** E"
+"ND OF VALIDATIONS *************** */\n\n    /* set import indicator to error, for those cases with error messages */\n  "
+"  update  M\n    set     ind_import = 2\n	from	 ["+ context.intermediateDB + "].[dbo].VW_IMPORT_MARK_RELS M\n    where   exists\n            (select *\n             from    ["+ context.intermediateDB + "].[dbo].VW_IMPORT_MARK_RELS_RESULT R\n             where  M.file_seq      = R.file_seq    and\n                    M.fi"
+"le_type     = R.file_type   and\n                    M.file_series   = R.file_series and\n                    M.file_nbr"
+"      = R.file_nbr\n            )\n    ;\n\n    /* set import indicator to validated, for those cases with no error mess"
+"ages */\n    update   ["+ context.intermediateDB + "].[dbo].VW_IMPORT_MARK_RELS \n    set     ind_import = 9\n    where   ind_import = 0\n    ;	END\n";
whetherReject_tDBRow_6 = false;
globalMap.put("tDBRow_6_QUERY",query_tDBRow_6);
try {
		stmt_tDBRow_6.execute(query_tDBRow_6);
		
	} catch (java.lang.Exception e) {
		whetherReject_tDBRow_6 = true;
		
				row49 = new row49Struct();
				
				row49.errorCode = ((java.sql.SQLException)e).getSQLState();
				row49.errorMessage = e.getMessage() + " - Line: " + tos_count_tDBRow_6;
				
	}
	
	if(!whetherReject_tDBRow_6) {
		
	}
	

 


	tos_count_tDBRow_6++;

/**
 * [tDBRow_6 main ] stop
 */
	
	/**
	 * [tDBRow_6 process_data_begin ] start
	 */

	

	
	
	currentComponent="tDBRow_6";

	

 



/**
 * [tDBRow_6 process_data_begin ] stop
 */
// Start of branch "row49"
if(row49 != null) { 



	
	/**
	 * [tLogRow_42 main ] start
	 */

	

	
	
	currentComponent="tLogRow_42";

	
					if(execStat){
						runStat.updateStatOnConnection(iterateId,1,1
						
							,"row49"
						
						);
					}
					
///////////////////////		
						



				strBuffer_tLogRow_42 = new StringBuilder();




   				
	    		if(row49.errorCode != null) { //              
                    							
       
				strBuffer_tLogRow_42.append(
				                String.valueOf(row49.errorCode)							
				);


							
	    		} //  			

    			strBuffer_tLogRow_42.append("|");
    			


   				
	    		if(row49.errorMessage != null) { //              
                    							
       
				strBuffer_tLogRow_42.append(
				                String.valueOf(row49.errorMessage)							
				);


							
	    		} //  			

				
				String[] row_tLogRow_42 = new String[2];
   				
	    		if(row49.errorCode != null) { //              
                 row_tLogRow_42[0]=    						    
				                String.valueOf(row49.errorCode)			
					          ;	
							
	    		} //			
    			   				
	    		if(row49.errorMessage != null) { //              
                 row_tLogRow_42[1]=    						    
				                String.valueOf(row49.errorMessage)			
					          ;	
							
	    		} //			
    			
				nb_line_tLogRow_42++;
                consoleOut_tLogRow_42.println(util_tLogRow_42.print(row_tLogRow_42,nb_line_tLogRow_42));
                consoleOut_tLogRow_42.flush();
//////

//////                    
                    
///////////////////////    			

 


	tos_count_tLogRow_42++;

/**
 * [tLogRow_42 main ] stop
 */
	
	/**
	 * [tLogRow_42 process_data_begin ] start
	 */

	

	
	
	currentComponent="tLogRow_42";

	

 



/**
 * [tLogRow_42 process_data_begin ] stop
 */
	
	/**
	 * [tLogRow_42 process_data_end ] start
	 */

	

	
	
	currentComponent="tLogRow_42";

	

 



/**
 * [tLogRow_42 process_data_end ] stop
 */

} // End of branch "row49"




	
	/**
	 * [tDBRow_6 process_data_end ] start
	 */

	

	
	
	currentComponent="tDBRow_6";

	

 



/**
 * [tDBRow_6 process_data_end ] stop
 */

} // End of branch "row45"




// Start of branch "row46"
if(row46 != null) { 



	
	/**
	 * [tLogRow_41 main ] start
	 */

	

	
	
	currentComponent="tLogRow_41";

	
					if(execStat){
						runStat.updateStatOnConnection(iterateId,1,1
						
							,"row46"
						
						);
					}
					
///////////////////////		
						



				strBuffer_tLogRow_41 = new StringBuilder();




   				
	    		if(row46.errorCode != null) { //              
                    							
       
				strBuffer_tLogRow_41.append(
				                String.valueOf(row46.errorCode)							
				);


							
	    		} //  			

    			strBuffer_tLogRow_41.append("|");
    			


   				
	    		if(row46.errorMessage != null) { //              
                    							
       
				strBuffer_tLogRow_41.append(
				                String.valueOf(row46.errorMessage)							
				);


							
	    		} //  			

				
				String[] row_tLogRow_41 = new String[2];
   				
	    		if(row46.errorCode != null) { //              
                 row_tLogRow_41[0]=    						    
				                String.valueOf(row46.errorCode)			
					          ;	
							
	    		} //			
    			   				
	    		if(row46.errorMessage != null) { //              
                 row_tLogRow_41[1]=    						    
				                String.valueOf(row46.errorMessage)			
					          ;	
							
	    		} //			
    			
				nb_line_tLogRow_41++;
                consoleOut_tLogRow_41.println(util_tLogRow_41.print(row_tLogRow_41,nb_line_tLogRow_41));
                consoleOut_tLogRow_41.flush();
//////

//////                    
                    
///////////////////////    			

 


	tos_count_tLogRow_41++;

/**
 * [tLogRow_41 main ] stop
 */
	
	/**
	 * [tLogRow_41 process_data_begin ] start
	 */

	

	
	
	currentComponent="tLogRow_41";

	

 



/**
 * [tLogRow_41 process_data_begin ] stop
 */
	
	/**
	 * [tLogRow_41 process_data_end ] start
	 */

	

	
	
	currentComponent="tLogRow_41";

	

 



/**
 * [tLogRow_41 process_data_end ] stop
 */

} // End of branch "row46"




	
	/**
	 * [tDBRow_5 process_data_end ] start
	 */

	

	
	
	currentComponent="tDBRow_5";

	

 



/**
 * [tDBRow_5 process_data_end ] stop
 */
	
	/**
	 * [tDBRow_5 end ] start
	 */

	

	
	
	currentComponent="tDBRow_5";

	

	
        stmt_tDBRow_5.close();
        resourceMap.remove("stmt_tDBRow_5");
    resourceMap.put("statementClosed_tDBRow_5", true);
    resourceMap.put("finish_tDBRow_5", true);
 

ok_Hash.put("tDBRow_5", true);
end_Hash.put("tDBRow_5", System.currentTimeMillis());




/**
 * [tDBRow_5 end ] stop
 */

	
	/**
	 * [tDBRow_6 end ] start
	 */

	

	
	
	currentComponent="tDBRow_6";

	

	
        stmt_tDBRow_6.close();
        resourceMap.remove("stmt_tDBRow_6");
    resourceMap.put("statementClosed_tDBRow_6", true);
    resourceMap.put("finish_tDBRow_6", true);
				if(execStat){
			  		runStat.updateStat(resourceMap,iterateId,2,0,"row45");
			  	}
			  	
 

ok_Hash.put("tDBRow_6", true);
end_Hash.put("tDBRow_6", System.currentTimeMillis());




/**
 * [tDBRow_6 end ] stop
 */

	
	/**
	 * [tLogRow_42 end ] start
	 */

	

	
	
	currentComponent="tLogRow_42";

	


//////
//////
globalMap.put("tLogRow_42_NB_LINE",nb_line_tLogRow_42);

///////////////////////    			

				if(execStat){
			  		runStat.updateStat(resourceMap,iterateId,2,0,"row49");
			  	}
			  	
 

ok_Hash.put("tLogRow_42", true);
end_Hash.put("tLogRow_42", System.currentTimeMillis());




/**
 * [tLogRow_42 end ] stop
 */







	
	/**
	 * [tLogRow_41 end ] start
	 */

	

	
	
	currentComponent="tLogRow_41";

	


//////
//////
globalMap.put("tLogRow_41_NB_LINE",nb_line_tLogRow_41);

///////////////////////    			

				if(execStat){
			  		runStat.updateStat(resourceMap,iterateId,2,0,"row46");
			  	}
			  	
 

ok_Hash.put("tLogRow_41", true);
end_Hash.put("tLogRow_41", System.currentTimeMillis());




/**
 * [tLogRow_41 end ] stop
 */



				}//end the resume

				
				    			if(resumeEntryMethodName == null || globalResumeTicket){
				    				resumeUtil.addLog("CHECKPOINT", "CONNECTION:SUBJOB_OK:tDBRow_5:OnSubjobOk", "", Thread.currentThread().getId() + "", "", "", "", "", "");
								}	    				    			
					    	
								if(execStat){    	
									runStat.updateStatOnConnection("OnSubjobOk21", 0, "ok");
								} 
							
							tDBRow_7Process(globalMap); 
						



	
			}catch(java.lang.Exception e){	
				
				TalendException te = new TalendException(e, currentComponent, globalMap);
				
				throw te;
			}catch(java.lang.Error error){	
				
					runStat.stopThreadStat();
				
				throw error;
			}finally{
				
				try{
					
	
	/**
	 * [tDBRow_5 finally ] start
	 */

	

	
	
	currentComponent="tDBRow_5";

	

    if (resourceMap.get("statementClosed_tDBRow_5") == null) {
            java.sql.Statement stmtToClose_tDBRow_5 = null;
            if ((stmtToClose_tDBRow_5 = (java.sql.Statement) resourceMap.remove("stmt_tDBRow_5")) != null) {
                stmtToClose_tDBRow_5.close();
            }
    }
 



/**
 * [tDBRow_5 finally ] stop
 */

	
	/**
	 * [tDBRow_6 finally ] start
	 */

	

	
	
	currentComponent="tDBRow_6";

	

    if (resourceMap.get("statementClosed_tDBRow_6") == null) {
            java.sql.Statement stmtToClose_tDBRow_6 = null;
            if ((stmtToClose_tDBRow_6 = (java.sql.Statement) resourceMap.remove("stmt_tDBRow_6")) != null) {
                stmtToClose_tDBRow_6.close();
            }
    }
 



/**
 * [tDBRow_6 finally ] stop
 */

	
	/**
	 * [tLogRow_42 finally ] start
	 */

	

	
	
	currentComponent="tLogRow_42";

	

 



/**
 * [tLogRow_42 finally ] stop
 */







	
	/**
	 * [tLogRow_41 finally ] start
	 */

	

	
	
	currentComponent="tLogRow_41";

	

 



/**
 * [tLogRow_41 finally ] stop
 */



				}catch(java.lang.Exception e){	
					//ignore
				}catch(java.lang.Error error){
					//ignore
				}
				resourceMap = null;
			}
		

		globalMap.put("tDBRow_5_SUBPROCESS_STATE", 1);
	}
	


public static class row53Struct implements routines.system.IPersistableRow<row53Struct> {
    final static byte[] commonByteArrayLock_WIPO_PROJECTS_F_IPAS_ENV_CRE = new byte[0];
    static byte[] commonByteArray_WIPO_PROJECTS_F_IPAS_ENV_CRE = new byte[0];

	
			    public String errorCode;

				public String getErrorCode () {
					return this.errorCode;
				}
				
			    public String errorMessage;

				public String getErrorMessage () {
					return this.errorMessage;
				}
				



	private String readString(ObjectInputStream dis) throws IOException{
		String strReturn = null;
		int length = 0;
        length = dis.readInt();
		if (length == -1) {
			strReturn = null;
		} else {
			if(length > commonByteArray_WIPO_PROJECTS_F_IPAS_ENV_CRE.length) {
				if(length < 1024 && commonByteArray_WIPO_PROJECTS_F_IPAS_ENV_CRE.length == 0) {
   					commonByteArray_WIPO_PROJECTS_F_IPAS_ENV_CRE = new byte[1024];
				} else {
   					commonByteArray_WIPO_PROJECTS_F_IPAS_ENV_CRE = new byte[2 * length];
   				}
			}
			dis.readFully(commonByteArray_WIPO_PROJECTS_F_IPAS_ENV_CRE, 0, length);
			strReturn = new String(commonByteArray_WIPO_PROJECTS_F_IPAS_ENV_CRE, 0, length, utf8Charset);
		}
		return strReturn;
	}

    private void writeString(String str, ObjectOutputStream dos) throws IOException{
		if(str == null) {
            dos.writeInt(-1);
		} else {
            byte[] byteArray = str.getBytes(utf8Charset);
	    	dos.writeInt(byteArray.length);
			dos.write(byteArray);
    	}
    }

    public void readData(ObjectInputStream dis) {

		synchronized(commonByteArrayLock_WIPO_PROJECTS_F_IPAS_ENV_CRE) {

        	try {

        		int length = 0;
		
					this.errorCode = readString(dis);
					
					this.errorMessage = readString(dis);
					
        	} catch (IOException e) {
	            throw new RuntimeException(e);

		

        }

		

      }


    }

    public void writeData(ObjectOutputStream dos) {
        try {

		
					// String
				
						writeString(this.errorCode,dos);
					
					// String
				
						writeString(this.errorMessage,dos);
					
        	} catch (IOException e) {
	            throw new RuntimeException(e);
        }


    }


    public String toString() {

		StringBuilder sb = new StringBuilder();
		sb.append(super.toString());
		sb.append("[");
		sb.append("errorCode="+errorCode);
		sb.append(",errorMessage="+errorMessage);
	    sb.append("]");

	    return sb.toString();
    }

    /**
     * Compare keys
     */
    public int compareTo(row53Struct other) {

		int returnValue = -1;
		
	    return returnValue;
    }


    private int checkNullsAndCompare(Object object1, Object object2) {
        int returnValue = 0;
		if (object1 instanceof Comparable && object2 instanceof Comparable) {
            returnValue = ((Comparable) object1).compareTo(object2);
        } else if (object1 != null && object2 != null) {
            returnValue = compareStrings(object1.toString(), object2.toString());
        } else if (object1 == null && object2 != null) {
            returnValue = 1;
        } else if (object1 != null && object2 == null) {
            returnValue = -1;
        } else {
            returnValue = 0;
        }

        return returnValue;
    }

    private int compareStrings(String string1, String string2) {
        return string1.compareTo(string2);
    }


}

public static class row50Struct implements routines.system.IPersistableRow<row50Struct> {
    final static byte[] commonByteArrayLock_WIPO_PROJECTS_F_IPAS_ENV_CRE = new byte[0];
    static byte[] commonByteArray_WIPO_PROJECTS_F_IPAS_ENV_CRE = new byte[0];

	



    public void readData(ObjectInputStream dis) {

		synchronized(commonByteArrayLock_WIPO_PROJECTS_F_IPAS_ENV_CRE) {

        	try {

        		int length = 0;
		

		

        }

		
			finally {}
		

      }


    }

    public void writeData(ObjectOutputStream dos) {
        try {

		
        }

			finally {}
		

    }


    public String toString() {

		StringBuilder sb = new StringBuilder();
		sb.append(super.toString());
		sb.append("[");
	    sb.append("]");

	    return sb.toString();
    }

    /**
     * Compare keys
     */
    public int compareTo(row50Struct other) {

		int returnValue = -1;
		
	    return returnValue;
    }


    private int checkNullsAndCompare(Object object1, Object object2) {
        int returnValue = 0;
		if (object1 instanceof Comparable && object2 instanceof Comparable) {
            returnValue = ((Comparable) object1).compareTo(object2);
        } else if (object1 != null && object2 != null) {
            returnValue = compareStrings(object1.toString(), object2.toString());
        } else if (object1 == null && object2 != null) {
            returnValue = 1;
        } else if (object1 != null && object2 == null) {
            returnValue = -1;
        } else {
            returnValue = 0;
        }

        return returnValue;
    }

    private int compareStrings(String string1, String string2) {
        return string1.compareTo(string2);
    }


}

public static class row51Struct implements routines.system.IPersistableRow<row51Struct> {
    final static byte[] commonByteArrayLock_WIPO_PROJECTS_F_IPAS_ENV_CRE = new byte[0];
    static byte[] commonByteArray_WIPO_PROJECTS_F_IPAS_ENV_CRE = new byte[0];

	
			    public String errorCode;

				public String getErrorCode () {
					return this.errorCode;
				}
				
			    public String errorMessage;

				public String getErrorMessage () {
					return this.errorMessage;
				}
				



	private String readString(ObjectInputStream dis) throws IOException{
		String strReturn = null;
		int length = 0;
        length = dis.readInt();
		if (length == -1) {
			strReturn = null;
		} else {
			if(length > commonByteArray_WIPO_PROJECTS_F_IPAS_ENV_CRE.length) {
				if(length < 1024 && commonByteArray_WIPO_PROJECTS_F_IPAS_ENV_CRE.length == 0) {
   					commonByteArray_WIPO_PROJECTS_F_IPAS_ENV_CRE = new byte[1024];
				} else {
   					commonByteArray_WIPO_PROJECTS_F_IPAS_ENV_CRE = new byte[2 * length];
   				}
			}
			dis.readFully(commonByteArray_WIPO_PROJECTS_F_IPAS_ENV_CRE, 0, length);
			strReturn = new String(commonByteArray_WIPO_PROJECTS_F_IPAS_ENV_CRE, 0, length, utf8Charset);
		}
		return strReturn;
	}

    private void writeString(String str, ObjectOutputStream dos) throws IOException{
		if(str == null) {
            dos.writeInt(-1);
		} else {
            byte[] byteArray = str.getBytes(utf8Charset);
	    	dos.writeInt(byteArray.length);
			dos.write(byteArray);
    	}
    }

    public void readData(ObjectInputStream dis) {

		synchronized(commonByteArrayLock_WIPO_PROJECTS_F_IPAS_ENV_CRE) {

        	try {

        		int length = 0;
		
					this.errorCode = readString(dis);
					
					this.errorMessage = readString(dis);
					
        	} catch (IOException e) {
	            throw new RuntimeException(e);

		

        }

		

      }


    }

    public void writeData(ObjectOutputStream dos) {
        try {

		
					// String
				
						writeString(this.errorCode,dos);
					
					// String
				
						writeString(this.errorMessage,dos);
					
        	} catch (IOException e) {
	            throw new RuntimeException(e);
        }


    }


    public String toString() {

		StringBuilder sb = new StringBuilder();
		sb.append(super.toString());
		sb.append("[");
		sb.append("errorCode="+errorCode);
		sb.append(",errorMessage="+errorMessage);
	    sb.append("]");

	    return sb.toString();
    }

    /**
     * Compare keys
     */
    public int compareTo(row51Struct other) {

		int returnValue = -1;
		
	    return returnValue;
    }


    private int checkNullsAndCompare(Object object1, Object object2) {
        int returnValue = 0;
		if (object1 instanceof Comparable && object2 instanceof Comparable) {
            returnValue = ((Comparable) object1).compareTo(object2);
        } else if (object1 != null && object2 != null) {
            returnValue = compareStrings(object1.toString(), object2.toString());
        } else if (object1 == null && object2 != null) {
            returnValue = 1;
        } else if (object1 != null && object2 == null) {
            returnValue = -1;
        } else {
            returnValue = 0;
        }

        return returnValue;
    }

    private int compareStrings(String string1, String string2) {
        return string1.compareTo(string2);
    }


}
public void tDBRow_7Process(final java.util.Map<String, Object> globalMap) throws TalendException {
	globalMap.put("tDBRow_7_SUBPROCESS_STATE", 0);

 final boolean execStat = this.execStat;
	
		String iterateId = "";
	
	
	String currentComponent = "";
	java.util.Map<String, Object> resourceMap = new java.util.HashMap<String, Object>();

	try {
			// TDI-39566 avoid throwing an useless Exception
			boolean resumeIt = true;
			if (globalResumeTicket == false && resumeEntryMethodName != null) {
				String currentMethodName = new java.lang.Exception().getStackTrace()[0].getMethodName();
				resumeIt = resumeEntryMethodName.equals(currentMethodName);
			}
			if (resumeIt || globalResumeTicket) { //start the resume
				globalResumeTicket = true;



		row50Struct row50 = new row50Struct();
row53Struct row53 = new row53Struct();
row51Struct row51 = new row51Struct();





	
	/**
	 * [tLogRow_44 begin ] start
	 */

	

	
		
		ok_Hash.put("tLogRow_44", false);
		start_Hash.put("tLogRow_44", System.currentTimeMillis());
		
	
	currentComponent="tLogRow_44";

	
					if(execStat) {
						runStat.updateStatOnConnection(resourceMap,iterateId,0,0,"row53");
					}
				
		int tos_count_tLogRow_44 = 0;
		

	///////////////////////
		


	class Util_tLogRow_44 {
	
		String[] des_top = { ".", "-" };

        String[] des_data = { "-", "+" };

        String[] des_frame = { "|" }; 
        
        public void printLine(StringBuilder sb, int titleWidth, int dataWidth){
        
        	sb.append("+");
			for(int i=0; i<titleWidth+2; i++)
				sb.append("-");
			sb.append("+");
			for(int i=0; i<dataWidth+2; i++)
				sb.append("-");
        	sb.append("+" + "\n");
        }      

		public String print(String[] row, int nbLine){
			
			StringBuilder sb = new StringBuilder();
			
			    String title = "#" + nbLine + ". " + "tLogRow_44";
			    
		
			//step 1: get the max length of all the row[] member;
			int dataWidth = 5;		//the length of the string "value"	
			for(int i=0;i<row.length;i++) {
				if(row[i] == null && 4 > dataWidth) {
					dataWidth = 4;
				}
				else if(row[i] != null && row[i].length()>dataWidth) 
					dataWidth = row[i].length();
			}			
						
			int titleWidth = 12;
			
			int totalWidth = dataWidth + titleWidth + 5;
			
			//step 2: print the header with line number
			sb.append(".");
			for(int i=0 ; i<totalWidth ; i++)
				sb.append("-");			
			sb.append("." + "\n" + "|");
			
			int emptyCenterWidth = (totalWidth-title.length())/2;
			for(int i=0 ; i<emptyCenterWidth; i++)
				sb.append(" ");	
			sb.append(title);
			for(int i=0 ; i<totalWidth - emptyCenterWidth - title.length() ; i++)
				sb.append(" ");	
			sb.append("|" + "\n");
			
			//step 3: print "key" and "value"			
			printLine(sb,titleWidth,dataWidth);
			
			sb.append("|" + " key");
			for(int i=0; i<titleWidth-2; i++)
				sb.append(" ");
        	sb.append("|" + " value");
			for(int i=0; i<dataWidth-4; i++)
				sb.append(" ");
			sb.append("|" + "\n");
			
			printLine(sb,titleWidth,dataWidth);
			
			//step 4: print dataset
			
			//for(int i=0; i<row.length; i++){
				sb.append("| " + "errorCode");
				for(int i=0; i<titleWidth -"errorCode".length()+ 1 ;i++)
					sb.append(" ");
				sb.append("| " + row[0]);
				for(int i=0; row[0] == null && i<dataWidth - 3 || row[0] != null && i<dataWidth -row[0].length()+ 1 ;i++)
					sb.append(" ");
				sb.append("|" + "\n");
			
			//}

			
			//for(int i=0; i<row.length; i++){
				sb.append("| " + "errorMessage");
				for(int i=0; i<titleWidth -"errorMessage".length()+ 1 ;i++)
					sb.append(" ");
				sb.append("| " + row[1]);
				for(int i=0; row[1] == null && i<dataWidth - 3 || row[1] != null && i<dataWidth -row[1].length()+ 1 ;i++)
					sb.append(" ");
				sb.append("|" + "\n");
			
			//}

			
			//step 5: print a line gap
			printLine(sb,titleWidth,dataWidth);
			return sb.toString();

		}


	}

	Util_tLogRow_44 util_tLogRow_44 = new Util_tLogRow_44();




	java.io.PrintStream consoleOut_tLogRow_44 = null;
	if (globalMap.get("tLogRow_CONSOLE")!=null){
        consoleOut_tLogRow_44 = (java.io.PrintStream) globalMap.get("tLogRow_CONSOLE");
    }else{
        consoleOut_tLogRow_44 = new java.io.PrintStream(new java.io.BufferedOutputStream(System.out));
        globalMap.put("tLogRow_CONSOLE",consoleOut_tLogRow_44);
    }

 		StringBuilder strBuffer_tLogRow_44 = null;
		int nb_line_tLogRow_44 = 0;
///////////////////////    			



 



/**
 * [tLogRow_44 begin ] stop
 */



	
	/**
	 * [tDBRow_8 begin ] start
	 */

	

	
		
		ok_Hash.put("tDBRow_8", false);
		start_Hash.put("tDBRow_8", System.currentTimeMillis());
		
	
	currentComponent="tDBRow_8";

	
					if(execStat) {
						runStat.updateStatOnConnection(resourceMap,iterateId,0,0,"row50");
					}
				
		int tos_count_tDBRow_8 = 0;
		

	java.sql.Connection conn_tDBRow_8 = null;
	String query_tDBRow_8 = "";
	boolean whetherReject_tDBRow_8 = false;
				conn_tDBRow_8 = (java.sql.Connection)globalMap.get("conn_tMSSqlConnection_4");
			
    resourceMap.put("conn_tDBRow_8", conn_tDBRow_8);
        java.sql.Statement stmt_tDBRow_8 = conn_tDBRow_8.createStatement();
        resourceMap.put("stmt_tDBRow_8", stmt_tDBRow_8);

 



/**
 * [tDBRow_8 begin ] stop
 */




	
	/**
	 * [tLogRow_43 begin ] start
	 */

	

	
		
		ok_Hash.put("tLogRow_43", false);
		start_Hash.put("tLogRow_43", System.currentTimeMillis());
		
	
	currentComponent="tLogRow_43";

	
					if(execStat) {
						runStat.updateStatOnConnection(resourceMap,iterateId,0,0,"row51");
					}
				
		int tos_count_tLogRow_43 = 0;
		

	///////////////////////
		


	class Util_tLogRow_43 {
	
		String[] des_top = { ".", "-" };

        String[] des_data = { "-", "+" };

        String[] des_frame = { "|" }; 
        
        public void printLine(StringBuilder sb, int titleWidth, int dataWidth){
        
        	sb.append("+");
			for(int i=0; i<titleWidth+2; i++)
				sb.append("-");
			sb.append("+");
			for(int i=0; i<dataWidth+2; i++)
				sb.append("-");
        	sb.append("+" + "\n");
        }      

		public String print(String[] row, int nbLine){
			
			StringBuilder sb = new StringBuilder();
			
			    String title = "#" + nbLine + ". " + "tLogRow_43";
			    
		
			//step 1: get the max length of all the row[] member;
			int dataWidth = 5;		//the length of the string "value"	
			for(int i=0;i<row.length;i++) {
				if(row[i] == null && 4 > dataWidth) {
					dataWidth = 4;
				}
				else if(row[i] != null && row[i].length()>dataWidth) 
					dataWidth = row[i].length();
			}			
						
			int titleWidth = 12;
			
			int totalWidth = dataWidth + titleWidth + 5;
			
			//step 2: print the header with line number
			sb.append(".");
			for(int i=0 ; i<totalWidth ; i++)
				sb.append("-");			
			sb.append("." + "\n" + "|");
			
			int emptyCenterWidth = (totalWidth-title.length())/2;
			for(int i=0 ; i<emptyCenterWidth; i++)
				sb.append(" ");	
			sb.append(title);
			for(int i=0 ; i<totalWidth - emptyCenterWidth - title.length() ; i++)
				sb.append(" ");	
			sb.append("|" + "\n");
			
			//step 3: print "key" and "value"			
			printLine(sb,titleWidth,dataWidth);
			
			sb.append("|" + " key");
			for(int i=0; i<titleWidth-2; i++)
				sb.append(" ");
        	sb.append("|" + " value");
			for(int i=0; i<dataWidth-4; i++)
				sb.append(" ");
			sb.append("|" + "\n");
			
			printLine(sb,titleWidth,dataWidth);
			
			//step 4: print dataset
			
			//for(int i=0; i<row.length; i++){
				sb.append("| " + "errorCode");
				for(int i=0; i<titleWidth -"errorCode".length()+ 1 ;i++)
					sb.append(" ");
				sb.append("| " + row[0]);
				for(int i=0; row[0] == null && i<dataWidth - 3 || row[0] != null && i<dataWidth -row[0].length()+ 1 ;i++)
					sb.append(" ");
				sb.append("|" + "\n");
			
			//}

			
			//for(int i=0; i<row.length; i++){
				sb.append("| " + "errorMessage");
				for(int i=0; i<titleWidth -"errorMessage".length()+ 1 ;i++)
					sb.append(" ");
				sb.append("| " + row[1]);
				for(int i=0; row[1] == null && i<dataWidth - 3 || row[1] != null && i<dataWidth -row[1].length()+ 1 ;i++)
					sb.append(" ");
				sb.append("|" + "\n");
			
			//}

			
			//step 5: print a line gap
			printLine(sb,titleWidth,dataWidth);
			return sb.toString();

		}


	}

	Util_tLogRow_43 util_tLogRow_43 = new Util_tLogRow_43();




	java.io.PrintStream consoleOut_tLogRow_43 = null;
	if (globalMap.get("tLogRow_CONSOLE")!=null){
        consoleOut_tLogRow_43 = (java.io.PrintStream) globalMap.get("tLogRow_CONSOLE");
    }else{
        consoleOut_tLogRow_43 = new java.io.PrintStream(new java.io.BufferedOutputStream(System.out));
        globalMap.put("tLogRow_CONSOLE",consoleOut_tLogRow_43);
    }

 		StringBuilder strBuffer_tLogRow_43 = null;
		int nb_line_tLogRow_43 = 0;
///////////////////////    			



 



/**
 * [tLogRow_43 begin ] stop
 */



	
	/**
	 * [tDBRow_7 begin ] start
	 */

	

	
		
		ok_Hash.put("tDBRow_7", false);
		start_Hash.put("tDBRow_7", System.currentTimeMillis());
		
	
	currentComponent="tDBRow_7";

	
		int tos_count_tDBRow_7 = 0;
		

	java.sql.Connection conn_tDBRow_7 = null;
	String query_tDBRow_7 = "";
	boolean whetherReject_tDBRow_7 = false;
				conn_tDBRow_7 = (java.sql.Connection)globalMap.get("conn_tMSSqlConnection_4");
			
    resourceMap.put("conn_tDBRow_7", conn_tDBRow_7);
        java.sql.Statement stmt_tDBRow_7 = conn_tDBRow_7.createStatement();
        resourceMap.put("stmt_tDBRow_7", stmt_tDBRow_7);

 



/**
 * [tDBRow_7 begin ] stop
 */
	
	/**
	 * [tDBRow_7 main ] start
	 */

	

	
	
	currentComponent="tDBRow_7";

	

		row50 = null;
		
		row51 = null;
		
query_tDBRow_7 = "If Exists ( SELECT name \n            FROM sysobjects  \n            WHERE name = 'ImportMarkRelsProcessAll'\n         "
+"   AND type = 'P')\n	DROP PROCEDURE ImportMarkRelsProcessAll";
whetherReject_tDBRow_7 = false;
globalMap.put("tDBRow_7_QUERY",query_tDBRow_7);
try {
		stmt_tDBRow_7.execute(query_tDBRow_7);
		
	} catch (java.lang.Exception e) {
		whetherReject_tDBRow_7 = true;
		
				row51 = new row51Struct();
				
				row51.errorCode = ((java.sql.SQLException)e).getSQLState();
				row51.errorMessage = e.getMessage() + " - Line: " + tos_count_tDBRow_7;
				
	}
	
	if(!whetherReject_tDBRow_7) {
		
					row50 = new row50Struct();
					
	}
	

 


	tos_count_tDBRow_7++;

/**
 * [tDBRow_7 main ] stop
 */
	
	/**
	 * [tDBRow_7 process_data_begin ] start
	 */

	

	
	
	currentComponent="tDBRow_7";

	

 



/**
 * [tDBRow_7 process_data_begin ] stop
 */
// Start of branch "row50"
if(row50 != null) { 
			row53 = null;



	
	/**
	 * [tDBRow_8 main ] start
	 */

	

	
	
	currentComponent="tDBRow_8";

	
					if(execStat){
						runStat.updateStatOnConnection(iterateId,1,1
						
							,"row50"
						
						);
					}
					

		row53 = null;
		
query_tDBRow_8 = "CREATE PROCEDURE ImportMarkRelsProcessAll\nAS \n	BEGIN\n/* insert forward relationships */\n    insert into ip_file_rel"
+"ationship (row_version, \n                                      file_seq1, file_typ1, file_ser1, file_nbr1, \n          "
+"                            file_seq2, file_typ2, file_ser2, file_nbr2, relationship_typ)\n    select  distinct 1, \n   "
+"         file_seq, file_type, file_series, file_nbr,\n            related_file_seq, related_file_type, related_file_seri"
+"es, related_file_nbr,\n            relationship_type\n    from    ["+ context.intermediateDB + "].[dbo].VW_IMPORT_MARK_RELS\n    where   ind_import = '9' and\n            relationship_role = '1'\n    ;\n\n    /* ins"
+"ert backward relationships */\n    insert into ip_file_relationship (row_version, \n                                    "
+"  file_seq1, file_typ1, file_ser1, file_nbr1, \n                                      file_seq2, file_typ2, file_ser2, f"
+"ile_nbr2, relationship_typ)\n    select  distinct 1, \n            related_file_seq, related_file_type, related_file_ser"
+"ies, related_file_nbr,\n            file_seq, file_type, file_series, file_nbr,\n            relationship_type\n    from"
+"    ["+ context.intermediateDB + "].[dbo].VW_IMPORT_MARK_RELS\n    where   ind_import = '9' and\n            relationship_role = '2'\n    ;\n	END\n";
whetherReject_tDBRow_8 = false;
globalMap.put("tDBRow_8_QUERY",query_tDBRow_8);
try {
		stmt_tDBRow_8.execute(query_tDBRow_8);
		
	} catch (java.lang.Exception e) {
		whetherReject_tDBRow_8 = true;
		
				row53 = new row53Struct();
				
				row53.errorCode = ((java.sql.SQLException)e).getSQLState();
				row53.errorMessage = e.getMessage() + " - Line: " + tos_count_tDBRow_8;
				
	}
	
	if(!whetherReject_tDBRow_8) {
		
	}
	

 


	tos_count_tDBRow_8++;

/**
 * [tDBRow_8 main ] stop
 */
	
	/**
	 * [tDBRow_8 process_data_begin ] start
	 */

	

	
	
	currentComponent="tDBRow_8";

	

 



/**
 * [tDBRow_8 process_data_begin ] stop
 */
// Start of branch "row53"
if(row53 != null) { 



	
	/**
	 * [tLogRow_44 main ] start
	 */

	

	
	
	currentComponent="tLogRow_44";

	
					if(execStat){
						runStat.updateStatOnConnection(iterateId,1,1
						
							,"row53"
						
						);
					}
					
///////////////////////		
						



				strBuffer_tLogRow_44 = new StringBuilder();




   				
	    		if(row53.errorCode != null) { //              
                    							
       
				strBuffer_tLogRow_44.append(
				                String.valueOf(row53.errorCode)							
				);


							
	    		} //  			

    			strBuffer_tLogRow_44.append("|");
    			


   				
	    		if(row53.errorMessage != null) { //              
                    							
       
				strBuffer_tLogRow_44.append(
				                String.valueOf(row53.errorMessage)							
				);


							
	    		} //  			

				
				String[] row_tLogRow_44 = new String[2];
   				
	    		if(row53.errorCode != null) { //              
                 row_tLogRow_44[0]=    						    
				                String.valueOf(row53.errorCode)			
					          ;	
							
	    		} //			
    			   				
	    		if(row53.errorMessage != null) { //              
                 row_tLogRow_44[1]=    						    
				                String.valueOf(row53.errorMessage)			
					          ;	
							
	    		} //			
    			
				nb_line_tLogRow_44++;
                consoleOut_tLogRow_44.println(util_tLogRow_44.print(row_tLogRow_44,nb_line_tLogRow_44));
                consoleOut_tLogRow_44.flush();
//////

//////                    
                    
///////////////////////    			

 


	tos_count_tLogRow_44++;

/**
 * [tLogRow_44 main ] stop
 */
	
	/**
	 * [tLogRow_44 process_data_begin ] start
	 */

	

	
	
	currentComponent="tLogRow_44";

	

 



/**
 * [tLogRow_44 process_data_begin ] stop
 */
	
	/**
	 * [tLogRow_44 process_data_end ] start
	 */

	

	
	
	currentComponent="tLogRow_44";

	

 



/**
 * [tLogRow_44 process_data_end ] stop
 */

} // End of branch "row53"




	
	/**
	 * [tDBRow_8 process_data_end ] start
	 */

	

	
	
	currentComponent="tDBRow_8";

	

 



/**
 * [tDBRow_8 process_data_end ] stop
 */

} // End of branch "row50"




// Start of branch "row51"
if(row51 != null) { 



	
	/**
	 * [tLogRow_43 main ] start
	 */

	

	
	
	currentComponent="tLogRow_43";

	
					if(execStat){
						runStat.updateStatOnConnection(iterateId,1,1
						
							,"row51"
						
						);
					}
					
///////////////////////		
						



				strBuffer_tLogRow_43 = new StringBuilder();




   				
	    		if(row51.errorCode != null) { //              
                    							
       
				strBuffer_tLogRow_43.append(
				                String.valueOf(row51.errorCode)							
				);


							
	    		} //  			

    			strBuffer_tLogRow_43.append("|");
    			


   				
	    		if(row51.errorMessage != null) { //              
                    							
       
				strBuffer_tLogRow_43.append(
				                String.valueOf(row51.errorMessage)							
				);


							
	    		} //  			

				
				String[] row_tLogRow_43 = new String[2];
   				
	    		if(row51.errorCode != null) { //              
                 row_tLogRow_43[0]=    						    
				                String.valueOf(row51.errorCode)			
					          ;	
							
	    		} //			
    			   				
	    		if(row51.errorMessage != null) { //              
                 row_tLogRow_43[1]=    						    
				                String.valueOf(row51.errorMessage)			
					          ;	
							
	    		} //			
    			
				nb_line_tLogRow_43++;
                consoleOut_tLogRow_43.println(util_tLogRow_43.print(row_tLogRow_43,nb_line_tLogRow_43));
                consoleOut_tLogRow_43.flush();
//////

//////                    
                    
///////////////////////    			

 


	tos_count_tLogRow_43++;

/**
 * [tLogRow_43 main ] stop
 */
	
	/**
	 * [tLogRow_43 process_data_begin ] start
	 */

	

	
	
	currentComponent="tLogRow_43";

	

 



/**
 * [tLogRow_43 process_data_begin ] stop
 */
	
	/**
	 * [tLogRow_43 process_data_end ] start
	 */

	

	
	
	currentComponent="tLogRow_43";

	

 



/**
 * [tLogRow_43 process_data_end ] stop
 */

} // End of branch "row51"




	
	/**
	 * [tDBRow_7 process_data_end ] start
	 */

	

	
	
	currentComponent="tDBRow_7";

	

 



/**
 * [tDBRow_7 process_data_end ] stop
 */
	
	/**
	 * [tDBRow_7 end ] start
	 */

	

	
	
	currentComponent="tDBRow_7";

	

	
        stmt_tDBRow_7.close();
        resourceMap.remove("stmt_tDBRow_7");
    resourceMap.put("statementClosed_tDBRow_7", true);
    resourceMap.put("finish_tDBRow_7", true);
 

ok_Hash.put("tDBRow_7", true);
end_Hash.put("tDBRow_7", System.currentTimeMillis());




/**
 * [tDBRow_7 end ] stop
 */

	
	/**
	 * [tDBRow_8 end ] start
	 */

	

	
	
	currentComponent="tDBRow_8";

	

	
        stmt_tDBRow_8.close();
        resourceMap.remove("stmt_tDBRow_8");
    resourceMap.put("statementClosed_tDBRow_8", true);
    resourceMap.put("finish_tDBRow_8", true);
				if(execStat){
			  		runStat.updateStat(resourceMap,iterateId,2,0,"row50");
			  	}
			  	
 

ok_Hash.put("tDBRow_8", true);
end_Hash.put("tDBRow_8", System.currentTimeMillis());




/**
 * [tDBRow_8 end ] stop
 */

	
	/**
	 * [tLogRow_44 end ] start
	 */

	

	
	
	currentComponent="tLogRow_44";

	


//////
//////
globalMap.put("tLogRow_44_NB_LINE",nb_line_tLogRow_44);

///////////////////////    			

				if(execStat){
			  		runStat.updateStat(resourceMap,iterateId,2,0,"row53");
			  	}
			  	
 

ok_Hash.put("tLogRow_44", true);
end_Hash.put("tLogRow_44", System.currentTimeMillis());




/**
 * [tLogRow_44 end ] stop
 */







	
	/**
	 * [tLogRow_43 end ] start
	 */

	

	
	
	currentComponent="tLogRow_43";

	


//////
//////
globalMap.put("tLogRow_43_NB_LINE",nb_line_tLogRow_43);

///////////////////////    			

				if(execStat){
			  		runStat.updateStat(resourceMap,iterateId,2,0,"row51");
			  	}
			  	
 

ok_Hash.put("tLogRow_43", true);
end_Hash.put("tLogRow_43", System.currentTimeMillis());




/**
 * [tLogRow_43 end ] stop
 */



				}//end the resume

				
				    			if(resumeEntryMethodName == null || globalResumeTicket){
				    				resumeUtil.addLog("CHECKPOINT", "CONNECTION:SUBJOB_OK:tDBRow_7:OnSubjobOk", "", Thread.currentThread().getId() + "", "", "", "", "", "");
								}	    				    			
					    	
								if(execStat){    	
									runStat.updateStatOnConnection("OnSubjobOk22", 0, "ok");
								} 
							
							tDBRow_13Process(globalMap); 
						



	
			}catch(java.lang.Exception e){	
				
				TalendException te = new TalendException(e, currentComponent, globalMap);
				
				throw te;
			}catch(java.lang.Error error){	
				
					runStat.stopThreadStat();
				
				throw error;
			}finally{
				
				try{
					
	
	/**
	 * [tDBRow_7 finally ] start
	 */

	

	
	
	currentComponent="tDBRow_7";

	

    if (resourceMap.get("statementClosed_tDBRow_7") == null) {
            java.sql.Statement stmtToClose_tDBRow_7 = null;
            if ((stmtToClose_tDBRow_7 = (java.sql.Statement) resourceMap.remove("stmt_tDBRow_7")) != null) {
                stmtToClose_tDBRow_7.close();
            }
    }
 



/**
 * [tDBRow_7 finally ] stop
 */

	
	/**
	 * [tDBRow_8 finally ] start
	 */

	

	
	
	currentComponent="tDBRow_8";

	

    if (resourceMap.get("statementClosed_tDBRow_8") == null) {
            java.sql.Statement stmtToClose_tDBRow_8 = null;
            if ((stmtToClose_tDBRow_8 = (java.sql.Statement) resourceMap.remove("stmt_tDBRow_8")) != null) {
                stmtToClose_tDBRow_8.close();
            }
    }
 



/**
 * [tDBRow_8 finally ] stop
 */

	
	/**
	 * [tLogRow_44 finally ] start
	 */

	

	
	
	currentComponent="tLogRow_44";

	

 



/**
 * [tLogRow_44 finally ] stop
 */







	
	/**
	 * [tLogRow_43 finally ] start
	 */

	

	
	
	currentComponent="tLogRow_43";

	

 



/**
 * [tLogRow_43 finally ] stop
 */



				}catch(java.lang.Exception e){	
					//ignore
				}catch(java.lang.Error error){
					//ignore
				}
				resourceMap = null;
			}
		

		globalMap.put("tDBRow_7_SUBPROCESS_STATE", 1);
	}
	


public static class row105Struct implements routines.system.IPersistableRow<row105Struct> {
    final static byte[] commonByteArrayLock_WIPO_PROJECTS_F_IPAS_ENV_CRE = new byte[0];
    static byte[] commonByteArray_WIPO_PROJECTS_F_IPAS_ENV_CRE = new byte[0];

	
			    public String errorCode;

				public String getErrorCode () {
					return this.errorCode;
				}
				
			    public String errorMessage;

				public String getErrorMessage () {
					return this.errorMessage;
				}
				



	private String readString(ObjectInputStream dis) throws IOException{
		String strReturn = null;
		int length = 0;
        length = dis.readInt();
		if (length == -1) {
			strReturn = null;
		} else {
			if(length > commonByteArray_WIPO_PROJECTS_F_IPAS_ENV_CRE.length) {
				if(length < 1024 && commonByteArray_WIPO_PROJECTS_F_IPAS_ENV_CRE.length == 0) {
   					commonByteArray_WIPO_PROJECTS_F_IPAS_ENV_CRE = new byte[1024];
				} else {
   					commonByteArray_WIPO_PROJECTS_F_IPAS_ENV_CRE = new byte[2 * length];
   				}
			}
			dis.readFully(commonByteArray_WIPO_PROJECTS_F_IPAS_ENV_CRE, 0, length);
			strReturn = new String(commonByteArray_WIPO_PROJECTS_F_IPAS_ENV_CRE, 0, length, utf8Charset);
		}
		return strReturn;
	}

    private void writeString(String str, ObjectOutputStream dos) throws IOException{
		if(str == null) {
            dos.writeInt(-1);
		} else {
            byte[] byteArray = str.getBytes(utf8Charset);
	    	dos.writeInt(byteArray.length);
			dos.write(byteArray);
    	}
    }

    public void readData(ObjectInputStream dis) {

		synchronized(commonByteArrayLock_WIPO_PROJECTS_F_IPAS_ENV_CRE) {

        	try {

        		int length = 0;
		
					this.errorCode = readString(dis);
					
					this.errorMessage = readString(dis);
					
        	} catch (IOException e) {
	            throw new RuntimeException(e);

		

        }

		

      }


    }

    public void writeData(ObjectOutputStream dos) {
        try {

		
					// String
				
						writeString(this.errorCode,dos);
					
					// String
				
						writeString(this.errorMessage,dos);
					
        	} catch (IOException e) {
	            throw new RuntimeException(e);
        }


    }


    public String toString() {

		StringBuilder sb = new StringBuilder();
		sb.append(super.toString());
		sb.append("[");
		sb.append("errorCode="+errorCode);
		sb.append(",errorMessage="+errorMessage);
	    sb.append("]");

	    return sb.toString();
    }

    /**
     * Compare keys
     */
    public int compareTo(row105Struct other) {

		int returnValue = -1;
		
	    return returnValue;
    }


    private int checkNullsAndCompare(Object object1, Object object2) {
        int returnValue = 0;
		if (object1 instanceof Comparable && object2 instanceof Comparable) {
            returnValue = ((Comparable) object1).compareTo(object2);
        } else if (object1 != null && object2 != null) {
            returnValue = compareStrings(object1.toString(), object2.toString());
        } else if (object1 == null && object2 != null) {
            returnValue = 1;
        } else if (object1 != null && object2 == null) {
            returnValue = -1;
        } else {
            returnValue = 0;
        }

        return returnValue;
    }

    private int compareStrings(String string1, String string2) {
        return string1.compareTo(string2);
    }


}

public static class row102Struct implements routines.system.IPersistableRow<row102Struct> {
    final static byte[] commonByteArrayLock_WIPO_PROJECTS_F_IPAS_ENV_CRE = new byte[0];
    static byte[] commonByteArray_WIPO_PROJECTS_F_IPAS_ENV_CRE = new byte[0];

	



    public void readData(ObjectInputStream dis) {

		synchronized(commonByteArrayLock_WIPO_PROJECTS_F_IPAS_ENV_CRE) {

        	try {

        		int length = 0;
		

		

        }

		
			finally {}
		

      }


    }

    public void writeData(ObjectOutputStream dos) {
        try {

		
        }

			finally {}
		

    }


    public String toString() {

		StringBuilder sb = new StringBuilder();
		sb.append(super.toString());
		sb.append("[");
	    sb.append("]");

	    return sb.toString();
    }

    /**
     * Compare keys
     */
    public int compareTo(row102Struct other) {

		int returnValue = -1;
		
	    return returnValue;
    }


    private int checkNullsAndCompare(Object object1, Object object2) {
        int returnValue = 0;
		if (object1 instanceof Comparable && object2 instanceof Comparable) {
            returnValue = ((Comparable) object1).compareTo(object2);
        } else if (object1 != null && object2 != null) {
            returnValue = compareStrings(object1.toString(), object2.toString());
        } else if (object1 == null && object2 != null) {
            returnValue = 1;
        } else if (object1 != null && object2 == null) {
            returnValue = -1;
        } else {
            returnValue = 0;
        }

        return returnValue;
    }

    private int compareStrings(String string1, String string2) {
        return string1.compareTo(string2);
    }


}

public static class row103Struct implements routines.system.IPersistableRow<row103Struct> {
    final static byte[] commonByteArrayLock_WIPO_PROJECTS_F_IPAS_ENV_CRE = new byte[0];
    static byte[] commonByteArray_WIPO_PROJECTS_F_IPAS_ENV_CRE = new byte[0];

	
			    public String errorCode;

				public String getErrorCode () {
					return this.errorCode;
				}
				
			    public String errorMessage;

				public String getErrorMessage () {
					return this.errorMessage;
				}
				



	private String readString(ObjectInputStream dis) throws IOException{
		String strReturn = null;
		int length = 0;
        length = dis.readInt();
		if (length == -1) {
			strReturn = null;
		} else {
			if(length > commonByteArray_WIPO_PROJECTS_F_IPAS_ENV_CRE.length) {
				if(length < 1024 && commonByteArray_WIPO_PROJECTS_F_IPAS_ENV_CRE.length == 0) {
   					commonByteArray_WIPO_PROJECTS_F_IPAS_ENV_CRE = new byte[1024];
				} else {
   					commonByteArray_WIPO_PROJECTS_F_IPAS_ENV_CRE = new byte[2 * length];
   				}
			}
			dis.readFully(commonByteArray_WIPO_PROJECTS_F_IPAS_ENV_CRE, 0, length);
			strReturn = new String(commonByteArray_WIPO_PROJECTS_F_IPAS_ENV_CRE, 0, length, utf8Charset);
		}
		return strReturn;
	}

    private void writeString(String str, ObjectOutputStream dos) throws IOException{
		if(str == null) {
            dos.writeInt(-1);
		} else {
            byte[] byteArray = str.getBytes(utf8Charset);
	    	dos.writeInt(byteArray.length);
			dos.write(byteArray);
    	}
    }

    public void readData(ObjectInputStream dis) {

		synchronized(commonByteArrayLock_WIPO_PROJECTS_F_IPAS_ENV_CRE) {

        	try {

        		int length = 0;
		
					this.errorCode = readString(dis);
					
					this.errorMessage = readString(dis);
					
        	} catch (IOException e) {
	            throw new RuntimeException(e);

		

        }

		

      }


    }

    public void writeData(ObjectOutputStream dos) {
        try {

		
					// String
				
						writeString(this.errorCode,dos);
					
					// String
				
						writeString(this.errorMessage,dos);
					
        	} catch (IOException e) {
	            throw new RuntimeException(e);
        }


    }


    public String toString() {

		StringBuilder sb = new StringBuilder();
		sb.append(super.toString());
		sb.append("[");
		sb.append("errorCode="+errorCode);
		sb.append(",errorMessage="+errorMessage);
	    sb.append("]");

	    return sb.toString();
    }

    /**
     * Compare keys
     */
    public int compareTo(row103Struct other) {

		int returnValue = -1;
		
	    return returnValue;
    }


    private int checkNullsAndCompare(Object object1, Object object2) {
        int returnValue = 0;
		if (object1 instanceof Comparable && object2 instanceof Comparable) {
            returnValue = ((Comparable) object1).compareTo(object2);
        } else if (object1 != null && object2 != null) {
            returnValue = compareStrings(object1.toString(), object2.toString());
        } else if (object1 == null && object2 != null) {
            returnValue = 1;
        } else if (object1 != null && object2 == null) {
            returnValue = -1;
        } else {
            returnValue = 0;
        }

        return returnValue;
    }

    private int compareStrings(String string1, String string2) {
        return string1.compareTo(string2);
    }


}
public void tDBRow_13Process(final java.util.Map<String, Object> globalMap) throws TalendException {
	globalMap.put("tDBRow_13_SUBPROCESS_STATE", 0);

 final boolean execStat = this.execStat;
	
		String iterateId = "";
	
	
	String currentComponent = "";
	java.util.Map<String, Object> resourceMap = new java.util.HashMap<String, Object>();

	try {
			// TDI-39566 avoid throwing an useless Exception
			boolean resumeIt = true;
			if (globalResumeTicket == false && resumeEntryMethodName != null) {
				String currentMethodName = new java.lang.Exception().getStackTrace()[0].getMethodName();
				resumeIt = resumeEntryMethodName.equals(currentMethodName);
			}
			if (resumeIt || globalResumeTicket) { //start the resume
				globalResumeTicket = true;



		row102Struct row102 = new row102Struct();
row105Struct row105 = new row105Struct();
row103Struct row103 = new row103Struct();





	
	/**
	 * [tLogRow_50 begin ] start
	 */

	

	
		
		ok_Hash.put("tLogRow_50", false);
		start_Hash.put("tLogRow_50", System.currentTimeMillis());
		
	
	currentComponent="tLogRow_50";

	
					if(execStat) {
						runStat.updateStatOnConnection(resourceMap,iterateId,0,0,"row105");
					}
				
		int tos_count_tLogRow_50 = 0;
		

	///////////////////////
		


	class Util_tLogRow_50 {
	
		String[] des_top = { ".", "-" };

        String[] des_data = { "-", "+" };

        String[] des_frame = { "|" }; 
        
        public void printLine(StringBuilder sb, int titleWidth, int dataWidth){
        
        	sb.append("+");
			for(int i=0; i<titleWidth+2; i++)
				sb.append("-");
			sb.append("+");
			for(int i=0; i<dataWidth+2; i++)
				sb.append("-");
        	sb.append("+" + "\n");
        }      

		public String print(String[] row, int nbLine){
			
			StringBuilder sb = new StringBuilder();
			
			    String title = "#" + nbLine + ". " + "tLogRow_50";
			    
		
			//step 1: get the max length of all the row[] member;
			int dataWidth = 5;		//the length of the string "value"	
			for(int i=0;i<row.length;i++) {
				if(row[i] == null && 4 > dataWidth) {
					dataWidth = 4;
				}
				else if(row[i] != null && row[i].length()>dataWidth) 
					dataWidth = row[i].length();
			}			
						
			int titleWidth = 12;
			
			int totalWidth = dataWidth + titleWidth + 5;
			
			//step 2: print the header with line number
			sb.append(".");
			for(int i=0 ; i<totalWidth ; i++)
				sb.append("-");			
			sb.append("." + "\n" + "|");
			
			int emptyCenterWidth = (totalWidth-title.length())/2;
			for(int i=0 ; i<emptyCenterWidth; i++)
				sb.append(" ");	
			sb.append(title);
			for(int i=0 ; i<totalWidth - emptyCenterWidth - title.length() ; i++)
				sb.append(" ");	
			sb.append("|" + "\n");
			
			//step 3: print "key" and "value"			
			printLine(sb,titleWidth,dataWidth);
			
			sb.append("|" + " key");
			for(int i=0; i<titleWidth-2; i++)
				sb.append(" ");
        	sb.append("|" + " value");
			for(int i=0; i<dataWidth-4; i++)
				sb.append(" ");
			sb.append("|" + "\n");
			
			printLine(sb,titleWidth,dataWidth);
			
			//step 4: print dataset
			
			//for(int i=0; i<row.length; i++){
				sb.append("| " + "errorCode");
				for(int i=0; i<titleWidth -"errorCode".length()+ 1 ;i++)
					sb.append(" ");
				sb.append("| " + row[0]);
				for(int i=0; row[0] == null && i<dataWidth - 3 || row[0] != null && i<dataWidth -row[0].length()+ 1 ;i++)
					sb.append(" ");
				sb.append("|" + "\n");
			
			//}

			
			//for(int i=0; i<row.length; i++){
				sb.append("| " + "errorMessage");
				for(int i=0; i<titleWidth -"errorMessage".length()+ 1 ;i++)
					sb.append(" ");
				sb.append("| " + row[1]);
				for(int i=0; row[1] == null && i<dataWidth - 3 || row[1] != null && i<dataWidth -row[1].length()+ 1 ;i++)
					sb.append(" ");
				sb.append("|" + "\n");
			
			//}

			
			//step 5: print a line gap
			printLine(sb,titleWidth,dataWidth);
			return sb.toString();

		}


	}

	Util_tLogRow_50 util_tLogRow_50 = new Util_tLogRow_50();




	java.io.PrintStream consoleOut_tLogRow_50 = null;
	if (globalMap.get("tLogRow_CONSOLE")!=null){
        consoleOut_tLogRow_50 = (java.io.PrintStream) globalMap.get("tLogRow_CONSOLE");
    }else{
        consoleOut_tLogRow_50 = new java.io.PrintStream(new java.io.BufferedOutputStream(System.out));
        globalMap.put("tLogRow_CONSOLE",consoleOut_tLogRow_50);
    }

 		StringBuilder strBuffer_tLogRow_50 = null;
		int nb_line_tLogRow_50 = 0;
///////////////////////    			



 



/**
 * [tLogRow_50 begin ] stop
 */



	
	/**
	 * [tDBRow_14 begin ] start
	 */

	

	
		
		ok_Hash.put("tDBRow_14", false);
		start_Hash.put("tDBRow_14", System.currentTimeMillis());
		
	
	currentComponent="tDBRow_14";

	
					if(execStat) {
						runStat.updateStatOnConnection(resourceMap,iterateId,0,0,"row102");
					}
				
		int tos_count_tDBRow_14 = 0;
		

	java.sql.Connection conn_tDBRow_14 = null;
	String query_tDBRow_14 = "";
	boolean whetherReject_tDBRow_14 = false;
				conn_tDBRow_14 = (java.sql.Connection)globalMap.get("conn_tMSSqlConnection_4");
			
    resourceMap.put("conn_tDBRow_14", conn_tDBRow_14);
        java.sql.Statement stmt_tDBRow_14 = conn_tDBRow_14.createStatement();
        resourceMap.put("stmt_tDBRow_14", stmt_tDBRow_14);

 



/**
 * [tDBRow_14 begin ] stop
 */




	
	/**
	 * [tLogRow_49 begin ] start
	 */

	

	
		
		ok_Hash.put("tLogRow_49", false);
		start_Hash.put("tLogRow_49", System.currentTimeMillis());
		
	
	currentComponent="tLogRow_49";

	
					if(execStat) {
						runStat.updateStatOnConnection(resourceMap,iterateId,0,0,"row103");
					}
				
		int tos_count_tLogRow_49 = 0;
		

	///////////////////////
		


	class Util_tLogRow_49 {
	
		String[] des_top = { ".", "-" };

        String[] des_data = { "-", "+" };

        String[] des_frame = { "|" }; 
        
        public void printLine(StringBuilder sb, int titleWidth, int dataWidth){
        
        	sb.append("+");
			for(int i=0; i<titleWidth+2; i++)
				sb.append("-");
			sb.append("+");
			for(int i=0; i<dataWidth+2; i++)
				sb.append("-");
        	sb.append("+" + "\n");
        }      

		public String print(String[] row, int nbLine){
			
			StringBuilder sb = new StringBuilder();
			
			    String title = "#" + nbLine + ". " + "tLogRow_49";
			    
		
			//step 1: get the max length of all the row[] member;
			int dataWidth = 5;		//the length of the string "value"	
			for(int i=0;i<row.length;i++) {
				if(row[i] == null && 4 > dataWidth) {
					dataWidth = 4;
				}
				else if(row[i] != null && row[i].length()>dataWidth) 
					dataWidth = row[i].length();
			}			
						
			int titleWidth = 12;
			
			int totalWidth = dataWidth + titleWidth + 5;
			
			//step 2: print the header with line number
			sb.append(".");
			for(int i=0 ; i<totalWidth ; i++)
				sb.append("-");			
			sb.append("." + "\n" + "|");
			
			int emptyCenterWidth = (totalWidth-title.length())/2;
			for(int i=0 ; i<emptyCenterWidth; i++)
				sb.append(" ");	
			sb.append(title);
			for(int i=0 ; i<totalWidth - emptyCenterWidth - title.length() ; i++)
				sb.append(" ");	
			sb.append("|" + "\n");
			
			//step 3: print "key" and "value"			
			printLine(sb,titleWidth,dataWidth);
			
			sb.append("|" + " key");
			for(int i=0; i<titleWidth-2; i++)
				sb.append(" ");
        	sb.append("|" + " value");
			for(int i=0; i<dataWidth-4; i++)
				sb.append(" ");
			sb.append("|" + "\n");
			
			printLine(sb,titleWidth,dataWidth);
			
			//step 4: print dataset
			
			//for(int i=0; i<row.length; i++){
				sb.append("| " + "errorCode");
				for(int i=0; i<titleWidth -"errorCode".length()+ 1 ;i++)
					sb.append(" ");
				sb.append("| " + row[0]);
				for(int i=0; row[0] == null && i<dataWidth - 3 || row[0] != null && i<dataWidth -row[0].length()+ 1 ;i++)
					sb.append(" ");
				sb.append("|" + "\n");
			
			//}

			
			//for(int i=0; i<row.length; i++){
				sb.append("| " + "errorMessage");
				for(int i=0; i<titleWidth -"errorMessage".length()+ 1 ;i++)
					sb.append(" ");
				sb.append("| " + row[1]);
				for(int i=0; row[1] == null && i<dataWidth - 3 || row[1] != null && i<dataWidth -row[1].length()+ 1 ;i++)
					sb.append(" ");
				sb.append("|" + "\n");
			
			//}

			
			//step 5: print a line gap
			printLine(sb,titleWidth,dataWidth);
			return sb.toString();

		}


	}

	Util_tLogRow_49 util_tLogRow_49 = new Util_tLogRow_49();




	java.io.PrintStream consoleOut_tLogRow_49 = null;
	if (globalMap.get("tLogRow_CONSOLE")!=null){
        consoleOut_tLogRow_49 = (java.io.PrintStream) globalMap.get("tLogRow_CONSOLE");
    }else{
        consoleOut_tLogRow_49 = new java.io.PrintStream(new java.io.BufferedOutputStream(System.out));
        globalMap.put("tLogRow_CONSOLE",consoleOut_tLogRow_49);
    }

 		StringBuilder strBuffer_tLogRow_49 = null;
		int nb_line_tLogRow_49 = 0;
///////////////////////    			



 



/**
 * [tLogRow_49 begin ] stop
 */



	
	/**
	 * [tDBRow_13 begin ] start
	 */

	

	
		
		ok_Hash.put("tDBRow_13", false);
		start_Hash.put("tDBRow_13", System.currentTimeMillis());
		
	
	currentComponent="tDBRow_13";

	
		int tos_count_tDBRow_13 = 0;
		

	java.sql.Connection conn_tDBRow_13 = null;
	String query_tDBRow_13 = "";
	boolean whetherReject_tDBRow_13 = false;
				conn_tDBRow_13 = (java.sql.Connection)globalMap.get("conn_tMSSqlConnection_4");
			
    resourceMap.put("conn_tDBRow_13", conn_tDBRow_13);
        java.sql.Statement stmt_tDBRow_13 = conn_tDBRow_13.createStatement();
        resourceMap.put("stmt_tDBRow_13", stmt_tDBRow_13);

 



/**
 * [tDBRow_13 begin ] stop
 */
	
	/**
	 * [tDBRow_13 main ] start
	 */

	

	
	
	currentComponent="tDBRow_13";

	

		row102 = null;
		
		row103 = null;
		
query_tDBRow_13 = "If Exists ( SELECT name \n            FROM sysobjects  \n            WHERE name = 'MarkDateValidationPROC'\n           "
+" AND type = 'P')\n	DROP PROCEDURE MarkDateValidationPROC";
whetherReject_tDBRow_13 = false;
globalMap.put("tDBRow_13_QUERY",query_tDBRow_13);
try {
		stmt_tDBRow_13.execute(query_tDBRow_13);
		
	} catch (java.lang.Exception e) {
		whetherReject_tDBRow_13 = true;
		
				row103 = new row103Struct();
				
				row103.errorCode = ((java.sql.SQLException)e).getSQLState();
				row103.errorMessage = e.getMessage() + " - Line: " + tos_count_tDBRow_13;
				
	}
	
	if(!whetherReject_tDBRow_13) {
		
					row102 = new row102Struct();
					
	}
	

 


	tos_count_tDBRow_13++;

/**
 * [tDBRow_13 main ] stop
 */
	
	/**
	 * [tDBRow_13 process_data_begin ] start
	 */

	

	
	
	currentComponent="tDBRow_13";

	

 



/**
 * [tDBRow_13 process_data_begin ] stop
 */
// Start of branch "row102"
if(row102 != null) { 
			row105 = null;



	
	/**
	 * [tDBRow_14 main ] start
	 */

	

	
	
	currentComponent="tDBRow_14";

	
					if(execStat){
						runStat.updateStatOnConnection(iterateId,1,1
						
							,"row102"
						
						);
					}
					

		row105 = null;
		
query_tDBRow_14 = "CREATE PROCEDURE MarkDateValidationPROC\nAS \n	BEGIN\nSET NOCOUNT ON\n		\n		-- 1.	Validate CAPTURE_DATE\n		INSERT INTO "
+" ["+ context.intermediateDB + "].[dbo].VW_IMPORT_MARK_RESULT (file_seq, file_type, file_series, file_nbr, ind_import, msg_import) \n		SELECT T.file_se"
+"q, T.file_type, T.file_series, T.file_nbr, 2, 'Invalid CAPTURE_DATE. CAPTURE_DATE required to be greater than 1700-01-01"
+" and lower than the current date.' \n		FROM  ["+ context.intermediateDB + "].[dbo].VW_IMPORT_MARK T WHERE CAPTURE_DATE > GETDATE() or CAST(DATEPART(YYYY, CAPTURE_DATE) as NUMERIC) < 1700;	\n		\n"
+"		-- 2.	Validate ENTITLEMENT_DATE\n		INSERT INTO  ["+ context.intermediateDB + "].[dbo].VW_IMPORT_MARK_RESULT (file_seq, file_type, file_series, file_nbr, ind_import, msg_import) \n		SELECT T.file_se"
+"q, T.file_type, T.file_series, T.file_nbr, 2, 'Invalid ENTITLEMENT_DATE. ENTITLEMENT_DATE required to be greater than 17"
+"00-01-01 and lower than the current date.' \n		FROM  ["+ context.intermediateDB + "].[dbo].VW_IMPORT_MARK T WHERE ENTITLEMENT_DATE > GETDATE() or CAST(DATEPART(YYYY, ENTITLEMENT_DATE) as NUMERIC) < 1700"
+";	\n		\n		-- 3.	Validate EXHIBITION_DATE\n		INSERT INTO  ["+ context.intermediateDB + "].[dbo].VW_IMPORT_MARK_RESULT (file_seq, file_type, file_series, file_nbr, ind_import, msg_import) \n		SELECT T.file_se"
+"q, T.file_type, T.file_series, T.file_nbr, 2, 'Invalid EXHIBITION_DATE. EXHIBITION_DATE required to be greater than 1700"
+"-01-01 and lower than the current date.' \n		FROM  ["+ context.intermediateDB + "].[dbo].VW_IMPORT_MARK T WHERE EXHIBITION_DATE > GETDATE() or CAST(DATEPART(YYYY, EXHIBITION_DATE) as NUMERIC) < 1700;	"
+"\n		\n		-- 4.	Validate PUBLICATION_DATE\n		INSERT INTO  ["+ context.intermediateDB + "].[dbo].VW_IMPORT_MARK_RESULT (file_seq, file_type, file_series, file_nbr, ind_import, msg_import) \n		SELECT T.file_se"
+"q, T.file_type, T.file_series, T.file_nbr, 2, 'Invalid PUBLICATION_DATE. PUBLICATION_DATE required to be greater than 17"
+"00-01-01 and lower than the current date.' \n		FROM  ["+ context.intermediateDB + "].[dbo].VW_IMPORT_MARK T WHERE PUBLICATION_DATE > GETDATE() or CAST(DATEPART(YYYY, PUBLICATION_DATE) as NUMERIC) < 1700"
+";	\n		\n		-- 5.	Validate RECEPTION_DATE\n		INSERT INTO  ["+ context.intermediateDB + "].[dbo].VW_IMPORT_MARK_RESULT (file_seq, file_type, file_series, file_nbr, ind_import, msg_import) \n		SELECT T.file_se"
+"q, T.file_type, T.file_series, T.file_nbr, 2, 'Invalid RECEPTION_DATE. RECEPTION_DATE required to be greater than 1700-0"
+"1-01 and lower than the current date.' \n		FROM  ["+ context.intermediateDB + "].[dbo].VW_IMPORT_MARK T WHERE RECEPTION_DATE > GETDATE() or CAST(DATEPART(YYYY, RECEPTION_DATE) as NUMERIC) < 1700;	\n"
+"		\n		-- 6.	Validate REGISTRATION_DATE\n		INSERT INTO  ["+ context.intermediateDB + "].[dbo].VW_IMPORT_MARK_RESULT (file_seq, file_type, file_series, file_nbr, ind_import, msg_import) \n		SELECT T.file_se"
+"q, T.file_type, T.file_series, T.file_nbr, 2, 'Invalid REGISTRATION_DATE. REGISTRATION_DATE required to be greater than "
+"1700-01-01 and lower than the current date.' \n		FROM  ["+ context.intermediateDB + "].[dbo].VW_IMPORT_MARK T WHERE REGISTRATION_DATE > GETDATE() or CAST(DATEPART(YYYY, REGISTRATION_DATE) as NUMERIC) < 17"
+"00;	\n		\n		-- 7.	Validate ACTION_DATE\n		INSERT INTO  ["+ context.intermediateDB + "].[dbo].VW_IMPORT_MARK_RESULT (file_seq, file_type, file_series, file_nbr, ind_import, msg_import) \n		SELECT T.file_se"
+"q, T.file_type, T.file_series, T.file_nbr, 2, 'Invalid ACTION_DATE. ACTION_DATE required to be greater than 1700-01-01 a"
+"nd lower than the current date.' \n		FROM  ["+ context.intermediateDB + "].[dbo].VW_IMPORT_MARK_ACTIONS T WHERE ACTION_DATE > GETDATE() or CAST(DATEPART(YYYY, ACTION_DATE) as NUMERIC) < 1700;	"
+"\n		\n		-- 8.	Validate PUBLICATION_DATE\n	--	INSERT INTO  ["+ context.intermediateDB + "].[dbo].VW_IMPORT_MARK_RESULT (file_seq, file_type, file_series, file_nbr, ind_import, msg_import) \n	--	SELECT T.file_"
+"seq, T.file_type, T.file_series, T.file_nbr, 2, 'Invalid PUBLICATION_DATE. PUBLICATION_DATE required to be greater than "
+"1700-01-01 and lower than the current date.' \n	--	FROM  ["+ context.intermediateDB + "].[dbo].VW_IMPORT_MARK_ACTIONS T WHERE PUBLICATION_DATE > GETDATE() or CAST(DATEPART(YYYY, PUBLICATION_DATE) as NUMERIC"
+") < 1700;	\n		\n		-- 9.	Validate RECEIPT_DATE\n		INSERT INTO  ["+ context.intermediateDB + "].[dbo].VW_IMPORT_MARK_RESULT (file_seq, file_type, file_series, file_nbr, ind_import, msg_import) \n		SELECT T.file_se"
+"q, T.file_type, T.file_series, T.file_nbr, 2, 'Invalid RECEIPT_DATE. RECEIPT_DATE required to be greater than 1700-01-01"
+" and lower than the current date.' \n		FROM  ["+ context.intermediateDB + "].[dbo].VW_IMPORT_MARK_PAYMENTS T WHERE RECEIPT_DATE > GETDATE() or CAST(DATEPART(YYYY, RECEIPT_DATE) as NUMERIC) < 170"
+"0;	\n		\n		-- 10.	Validate PRIORITY_DATE\n		INSERT INTO  ["+ context.intermediateDB + "].[dbo].VW_IMPORT_MARK_RESULT (file_seq, file_type, file_series, file_nbr, ind_import, msg_import) \n		SELECT T.file_se"
+"q, T.file_type, T.file_series, T.file_nbr, 2, 'Invalid PRIORITY_DATE. PRIORITY_DATE required to be greater than 1700-01-"
+"01 and lower than the current date.' \n		FROM  ["+ context.intermediateDB + "].[dbo].VW_IMPORT_MARK_PRIORITIES T WHERE PRIORITY_DATE > GETDATE() or CAST(DATEPART(YYYY, PRIORITY_DATE) as NUMERIC) <"
+" 1700;	\n		\n		-- 11.	Validate FILING_DATE \n		INSERT INTO  ["+ context.intermediateDB + "].[dbo].VW_IMPORT_MARK_RESULT (file_seq, file_type, file_series, file_nbr, ind_import, msg_import)\n		SELECT T.file_seq"
+", T.file_type, T.file_series, T.file_nbr, 2, 'Invalid FILING DATE. FILING DATE required to be greater than 1700-01-01 an"
+"d lower than the current date.'\n		FROM  ["+ context.intermediateDB + "].[dbo].VW_import_mark T WHERE FILING_DATE > GETDATE() or CAST(DATEPART(YYYY, FILING_DATE) as NUMERIC) < 1700;	\n		\n		"
+"-----------------------------------------------------\n		-- Can be a Future Date so no check with GETDATE()\n		---------"
+"--------------------------------------------\n		\n		-- 1.	Validate EXPIRATION_DATE\n		INSERT INTO  ["+ context.intermediateDB + "].[dbo].VW_IMPORT_MARK_RESULT (file_seq, file_type, file_series, file_nbr, ind_import, msg_import) \n		SELECT T.file_se"
+"q, T.file_type, T.file_series, T.file_nbr, 2, 'Invalid EXPIRATION_DATE. EXPIRATION_DATE required to be greater than 1700"
+"-01-01 and lower than the current date.' \n		FROM  ["+ context.intermediateDB + "].[dbo].VW_IMPORT_MARK T WHERE CAST(DATEPART(YYYY, EXPIRATION_DATE) as NUMERIC) < 1700;	\n		\n		-- 2.	Validate MANUAL_D"
+"UE_DATE\n		INSERT INTO  ["+ context.intermediateDB + "].[dbo].VW_IMPORT_MARK_RESULT (file_seq, file_type, file_series, file_nbr, ind_import, msg_import) \n		SELECT T.file_se"
+"q, T.file_type, T.file_series, T.file_nbr, 2, 'Invalid MANUAL_DUE_DATE. MANUAL_DUE_DATE required to be greater than 1700"
+"-01-01 and lower than the current date.' \n		FROM  ["+ context.intermediateDB + "].[dbo].VW_IMPORT_MARK_ACTIONS T WHERE CAST(DATEPART(YYYY, MANUAL_DUE_DATE) as NUMERIC) < 1700;	\n		SET NOCOUNT OFF;\n	"
+"END\n";
whetherReject_tDBRow_14 = false;
globalMap.put("tDBRow_14_QUERY",query_tDBRow_14);
try {
		stmt_tDBRow_14.execute(query_tDBRow_14);
		
	} catch (java.lang.Exception e) {
		whetherReject_tDBRow_14 = true;
		
				row105 = new row105Struct();
				
				row105.errorCode = ((java.sql.SQLException)e).getSQLState();
				row105.errorMessage = e.getMessage() + " - Line: " + tos_count_tDBRow_14;
				
	}
	
	if(!whetherReject_tDBRow_14) {
		
	}
	

 


	tos_count_tDBRow_14++;

/**
 * [tDBRow_14 main ] stop
 */
	
	/**
	 * [tDBRow_14 process_data_begin ] start
	 */

	

	
	
	currentComponent="tDBRow_14";

	

 



/**
 * [tDBRow_14 process_data_begin ] stop
 */
// Start of branch "row105"
if(row105 != null) { 



	
	/**
	 * [tLogRow_50 main ] start
	 */

	

	
	
	currentComponent="tLogRow_50";

	
					if(execStat){
						runStat.updateStatOnConnection(iterateId,1,1
						
							,"row105"
						
						);
					}
					
///////////////////////		
						



				strBuffer_tLogRow_50 = new StringBuilder();




   				
	    		if(row105.errorCode != null) { //              
                    							
       
				strBuffer_tLogRow_50.append(
				                String.valueOf(row105.errorCode)							
				);


							
	    		} //  			

    			strBuffer_tLogRow_50.append("|");
    			


   				
	    		if(row105.errorMessage != null) { //              
                    							
       
				strBuffer_tLogRow_50.append(
				                String.valueOf(row105.errorMessage)							
				);


							
	    		} //  			

				
				String[] row_tLogRow_50 = new String[2];
   				
	    		if(row105.errorCode != null) { //              
                 row_tLogRow_50[0]=    						    
				                String.valueOf(row105.errorCode)			
					          ;	
							
	    		} //			
    			   				
	    		if(row105.errorMessage != null) { //              
                 row_tLogRow_50[1]=    						    
				                String.valueOf(row105.errorMessage)			
					          ;	
							
	    		} //			
    			
				nb_line_tLogRow_50++;
                consoleOut_tLogRow_50.println(util_tLogRow_50.print(row_tLogRow_50,nb_line_tLogRow_50));
                consoleOut_tLogRow_50.flush();
//////

//////                    
                    
///////////////////////    			

 


	tos_count_tLogRow_50++;

/**
 * [tLogRow_50 main ] stop
 */
	
	/**
	 * [tLogRow_50 process_data_begin ] start
	 */

	

	
	
	currentComponent="tLogRow_50";

	

 



/**
 * [tLogRow_50 process_data_begin ] stop
 */
	
	/**
	 * [tLogRow_50 process_data_end ] start
	 */

	

	
	
	currentComponent="tLogRow_50";

	

 



/**
 * [tLogRow_50 process_data_end ] stop
 */

} // End of branch "row105"




	
	/**
	 * [tDBRow_14 process_data_end ] start
	 */

	

	
	
	currentComponent="tDBRow_14";

	

 



/**
 * [tDBRow_14 process_data_end ] stop
 */

} // End of branch "row102"




// Start of branch "row103"
if(row103 != null) { 



	
	/**
	 * [tLogRow_49 main ] start
	 */

	

	
	
	currentComponent="tLogRow_49";

	
					if(execStat){
						runStat.updateStatOnConnection(iterateId,1,1
						
							,"row103"
						
						);
					}
					
///////////////////////		
						



				strBuffer_tLogRow_49 = new StringBuilder();




   				
	    		if(row103.errorCode != null) { //              
                    							
       
				strBuffer_tLogRow_49.append(
				                String.valueOf(row103.errorCode)							
				);


							
	    		} //  			

    			strBuffer_tLogRow_49.append("|");
    			


   				
	    		if(row103.errorMessage != null) { //              
                    							
       
				strBuffer_tLogRow_49.append(
				                String.valueOf(row103.errorMessage)							
				);


							
	    		} //  			

				
				String[] row_tLogRow_49 = new String[2];
   				
	    		if(row103.errorCode != null) { //              
                 row_tLogRow_49[0]=    						    
				                String.valueOf(row103.errorCode)			
					          ;	
							
	    		} //			
    			   				
	    		if(row103.errorMessage != null) { //              
                 row_tLogRow_49[1]=    						    
				                String.valueOf(row103.errorMessage)			
					          ;	
							
	    		} //			
    			
				nb_line_tLogRow_49++;
                consoleOut_tLogRow_49.println(util_tLogRow_49.print(row_tLogRow_49,nb_line_tLogRow_49));
                consoleOut_tLogRow_49.flush();
//////

//////                    
                    
///////////////////////    			

 


	tos_count_tLogRow_49++;

/**
 * [tLogRow_49 main ] stop
 */
	
	/**
	 * [tLogRow_49 process_data_begin ] start
	 */

	

	
	
	currentComponent="tLogRow_49";

	

 



/**
 * [tLogRow_49 process_data_begin ] stop
 */
	
	/**
	 * [tLogRow_49 process_data_end ] start
	 */

	

	
	
	currentComponent="tLogRow_49";

	

 



/**
 * [tLogRow_49 process_data_end ] stop
 */

} // End of branch "row103"




	
	/**
	 * [tDBRow_13 process_data_end ] start
	 */

	

	
	
	currentComponent="tDBRow_13";

	

 



/**
 * [tDBRow_13 process_data_end ] stop
 */
	
	/**
	 * [tDBRow_13 end ] start
	 */

	

	
	
	currentComponent="tDBRow_13";

	

	
        stmt_tDBRow_13.close();
        resourceMap.remove("stmt_tDBRow_13");
    resourceMap.put("statementClosed_tDBRow_13", true);
    resourceMap.put("finish_tDBRow_13", true);
 

ok_Hash.put("tDBRow_13", true);
end_Hash.put("tDBRow_13", System.currentTimeMillis());




/**
 * [tDBRow_13 end ] stop
 */

	
	/**
	 * [tDBRow_14 end ] start
	 */

	

	
	
	currentComponent="tDBRow_14";

	

	
        stmt_tDBRow_14.close();
        resourceMap.remove("stmt_tDBRow_14");
    resourceMap.put("statementClosed_tDBRow_14", true);
    resourceMap.put("finish_tDBRow_14", true);
				if(execStat){
			  		runStat.updateStat(resourceMap,iterateId,2,0,"row102");
			  	}
			  	
 

ok_Hash.put("tDBRow_14", true);
end_Hash.put("tDBRow_14", System.currentTimeMillis());




/**
 * [tDBRow_14 end ] stop
 */

	
	/**
	 * [tLogRow_50 end ] start
	 */

	

	
	
	currentComponent="tLogRow_50";

	


//////
//////
globalMap.put("tLogRow_50_NB_LINE",nb_line_tLogRow_50);

///////////////////////    			

				if(execStat){
			  		runStat.updateStat(resourceMap,iterateId,2,0,"row105");
			  	}
			  	
 

ok_Hash.put("tLogRow_50", true);
end_Hash.put("tLogRow_50", System.currentTimeMillis());




/**
 * [tLogRow_50 end ] stop
 */







	
	/**
	 * [tLogRow_49 end ] start
	 */

	

	
	
	currentComponent="tLogRow_49";

	


//////
//////
globalMap.put("tLogRow_49_NB_LINE",nb_line_tLogRow_49);

///////////////////////    			

				if(execStat){
			  		runStat.updateStat(resourceMap,iterateId,2,0,"row103");
			  	}
			  	
 

ok_Hash.put("tLogRow_49", true);
end_Hash.put("tLogRow_49", System.currentTimeMillis());




/**
 * [tLogRow_49 end ] stop
 */



				}//end the resume

				
				    			if(resumeEntryMethodName == null || globalResumeTicket){
				    				resumeUtil.addLog("CHECKPOINT", "CONNECTION:SUBJOB_OK:tDBRow_13:OnSubjobOk", "", Thread.currentThread().getId() + "", "", "", "", "", "");
								}	    				    			
					    	
								if(execStat){    	
									runStat.updateStatOnConnection("OnSubjobOk25", 0, "ok");
								} 
							
							tMSSqlRow_11Process(globalMap); 
						



	
			}catch(java.lang.Exception e){	
				
				TalendException te = new TalendException(e, currentComponent, globalMap);
				
				throw te;
			}catch(java.lang.Error error){	
				
					runStat.stopThreadStat();
				
				throw error;
			}finally{
				
				try{
					
	
	/**
	 * [tDBRow_13 finally ] start
	 */

	

	
	
	currentComponent="tDBRow_13";

	

    if (resourceMap.get("statementClosed_tDBRow_13") == null) {
            java.sql.Statement stmtToClose_tDBRow_13 = null;
            if ((stmtToClose_tDBRow_13 = (java.sql.Statement) resourceMap.remove("stmt_tDBRow_13")) != null) {
                stmtToClose_tDBRow_13.close();
            }
    }
 



/**
 * [tDBRow_13 finally ] stop
 */

	
	/**
	 * [tDBRow_14 finally ] start
	 */

	

	
	
	currentComponent="tDBRow_14";

	

    if (resourceMap.get("statementClosed_tDBRow_14") == null) {
            java.sql.Statement stmtToClose_tDBRow_14 = null;
            if ((stmtToClose_tDBRow_14 = (java.sql.Statement) resourceMap.remove("stmt_tDBRow_14")) != null) {
                stmtToClose_tDBRow_14.close();
            }
    }
 



/**
 * [tDBRow_14 finally ] stop
 */

	
	/**
	 * [tLogRow_50 finally ] start
	 */

	

	
	
	currentComponent="tLogRow_50";

	

 



/**
 * [tLogRow_50 finally ] stop
 */







	
	/**
	 * [tLogRow_49 finally ] start
	 */

	

	
	
	currentComponent="tLogRow_49";

	

 



/**
 * [tLogRow_49 finally ] stop
 */



				}catch(java.lang.Exception e){	
					//ignore
				}catch(java.lang.Error error){
					//ignore
				}
				resourceMap = null;
			}
		

		globalMap.put("tDBRow_13_SUBPROCESS_STATE", 1);
	}
	


public static class row84Struct implements routines.system.IPersistableRow<row84Struct> {
    final static byte[] commonByteArrayLock_WIPO_PROJECTS_F_IPAS_ENV_CRE = new byte[0];
    static byte[] commonByteArray_WIPO_PROJECTS_F_IPAS_ENV_CRE = new byte[0];

	
			    public String errorCode;

				public String getErrorCode () {
					return this.errorCode;
				}
				
			    public String errorMessage;

				public String getErrorMessage () {
					return this.errorMessage;
				}
				



	private String readString(ObjectInputStream dis) throws IOException{
		String strReturn = null;
		int length = 0;
        length = dis.readInt();
		if (length == -1) {
			strReturn = null;
		} else {
			if(length > commonByteArray_WIPO_PROJECTS_F_IPAS_ENV_CRE.length) {
				if(length < 1024 && commonByteArray_WIPO_PROJECTS_F_IPAS_ENV_CRE.length == 0) {
   					commonByteArray_WIPO_PROJECTS_F_IPAS_ENV_CRE = new byte[1024];
				} else {
   					commonByteArray_WIPO_PROJECTS_F_IPAS_ENV_CRE = new byte[2 * length];
   				}
			}
			dis.readFully(commonByteArray_WIPO_PROJECTS_F_IPAS_ENV_CRE, 0, length);
			strReturn = new String(commonByteArray_WIPO_PROJECTS_F_IPAS_ENV_CRE, 0, length, utf8Charset);
		}
		return strReturn;
	}

    private void writeString(String str, ObjectOutputStream dos) throws IOException{
		if(str == null) {
            dos.writeInt(-1);
		} else {
            byte[] byteArray = str.getBytes(utf8Charset);
	    	dos.writeInt(byteArray.length);
			dos.write(byteArray);
    	}
    }

    public void readData(ObjectInputStream dis) {

		synchronized(commonByteArrayLock_WIPO_PROJECTS_F_IPAS_ENV_CRE) {

        	try {

        		int length = 0;
		
					this.errorCode = readString(dis);
					
					this.errorMessage = readString(dis);
					
        	} catch (IOException e) {
	            throw new RuntimeException(e);

		

        }

		

      }


    }

    public void writeData(ObjectOutputStream dos) {
        try {

		
					// String
				
						writeString(this.errorCode,dos);
					
					// String
				
						writeString(this.errorMessage,dos);
					
        	} catch (IOException e) {
	            throw new RuntimeException(e);
        }


    }


    public String toString() {

		StringBuilder sb = new StringBuilder();
		sb.append(super.toString());
		sb.append("[");
		sb.append("errorCode="+errorCode);
		sb.append(",errorMessage="+errorMessage);
	    sb.append("]");

	    return sb.toString();
    }

    /**
     * Compare keys
     */
    public int compareTo(row84Struct other) {

		int returnValue = -1;
		
	    return returnValue;
    }


    private int checkNullsAndCompare(Object object1, Object object2) {
        int returnValue = 0;
		if (object1 instanceof Comparable && object2 instanceof Comparable) {
            returnValue = ((Comparable) object1).compareTo(object2);
        } else if (object1 != null && object2 != null) {
            returnValue = compareStrings(object1.toString(), object2.toString());
        } else if (object1 == null && object2 != null) {
            returnValue = 1;
        } else if (object1 != null && object2 == null) {
            returnValue = -1;
        } else {
            returnValue = 0;
        }

        return returnValue;
    }

    private int compareStrings(String string1, String string2) {
        return string1.compareTo(string2);
    }


}

public static class row28Struct implements routines.system.IPersistableRow<row28Struct> {
    final static byte[] commonByteArrayLock_WIPO_PROJECTS_F_IPAS_ENV_CRE = new byte[0];
    static byte[] commonByteArray_WIPO_PROJECTS_F_IPAS_ENV_CRE = new byte[0];

	



    public void readData(ObjectInputStream dis) {

		synchronized(commonByteArrayLock_WIPO_PROJECTS_F_IPAS_ENV_CRE) {

        	try {

        		int length = 0;
		

		

        }

		
			finally {}
		

      }


    }

    public void writeData(ObjectOutputStream dos) {
        try {

		
        }

			finally {}
		

    }


    public String toString() {

		StringBuilder sb = new StringBuilder();
		sb.append(super.toString());
		sb.append("[");
	    sb.append("]");

	    return sb.toString();
    }

    /**
     * Compare keys
     */
    public int compareTo(row28Struct other) {

		int returnValue = -1;
		
	    return returnValue;
    }


    private int checkNullsAndCompare(Object object1, Object object2) {
        int returnValue = 0;
		if (object1 instanceof Comparable && object2 instanceof Comparable) {
            returnValue = ((Comparable) object1).compareTo(object2);
        } else if (object1 != null && object2 != null) {
            returnValue = compareStrings(object1.toString(), object2.toString());
        } else if (object1 == null && object2 != null) {
            returnValue = 1;
        } else if (object1 != null && object2 == null) {
            returnValue = -1;
        } else {
            returnValue = 0;
        }

        return returnValue;
    }

    private int compareStrings(String string1, String string2) {
        return string1.compareTo(string2);
    }


}

public static class row83Struct implements routines.system.IPersistableRow<row83Struct> {
    final static byte[] commonByteArrayLock_WIPO_PROJECTS_F_IPAS_ENV_CRE = new byte[0];
    static byte[] commonByteArray_WIPO_PROJECTS_F_IPAS_ENV_CRE = new byte[0];

	
			    public String errorCode;

				public String getErrorCode () {
					return this.errorCode;
				}
				
			    public String errorMessage;

				public String getErrorMessage () {
					return this.errorMessage;
				}
				



	private String readString(ObjectInputStream dis) throws IOException{
		String strReturn = null;
		int length = 0;
        length = dis.readInt();
		if (length == -1) {
			strReturn = null;
		} else {
			if(length > commonByteArray_WIPO_PROJECTS_F_IPAS_ENV_CRE.length) {
				if(length < 1024 && commonByteArray_WIPO_PROJECTS_F_IPAS_ENV_CRE.length == 0) {
   					commonByteArray_WIPO_PROJECTS_F_IPAS_ENV_CRE = new byte[1024];
				} else {
   					commonByteArray_WIPO_PROJECTS_F_IPAS_ENV_CRE = new byte[2 * length];
   				}
			}
			dis.readFully(commonByteArray_WIPO_PROJECTS_F_IPAS_ENV_CRE, 0, length);
			strReturn = new String(commonByteArray_WIPO_PROJECTS_F_IPAS_ENV_CRE, 0, length, utf8Charset);
		}
		return strReturn;
	}

    private void writeString(String str, ObjectOutputStream dos) throws IOException{
		if(str == null) {
            dos.writeInt(-1);
		} else {
            byte[] byteArray = str.getBytes(utf8Charset);
	    	dos.writeInt(byteArray.length);
			dos.write(byteArray);
    	}
    }

    public void readData(ObjectInputStream dis) {

		synchronized(commonByteArrayLock_WIPO_PROJECTS_F_IPAS_ENV_CRE) {

        	try {

        		int length = 0;
		
					this.errorCode = readString(dis);
					
					this.errorMessage = readString(dis);
					
        	} catch (IOException e) {
	            throw new RuntimeException(e);

		

        }

		

      }


    }

    public void writeData(ObjectOutputStream dos) {
        try {

		
					// String
				
						writeString(this.errorCode,dos);
					
					// String
				
						writeString(this.errorMessage,dos);
					
        	} catch (IOException e) {
	            throw new RuntimeException(e);
        }


    }


    public String toString() {

		StringBuilder sb = new StringBuilder();
		sb.append(super.toString());
		sb.append("[");
		sb.append("errorCode="+errorCode);
		sb.append(",errorMessage="+errorMessage);
	    sb.append("]");

	    return sb.toString();
    }

    /**
     * Compare keys
     */
    public int compareTo(row83Struct other) {

		int returnValue = -1;
		
	    return returnValue;
    }


    private int checkNullsAndCompare(Object object1, Object object2) {
        int returnValue = 0;
		if (object1 instanceof Comparable && object2 instanceof Comparable) {
            returnValue = ((Comparable) object1).compareTo(object2);
        } else if (object1 != null && object2 != null) {
            returnValue = compareStrings(object1.toString(), object2.toString());
        } else if (object1 == null && object2 != null) {
            returnValue = 1;
        } else if (object1 != null && object2 == null) {
            returnValue = -1;
        } else {
            returnValue = 0;
        }

        return returnValue;
    }

    private int compareStrings(String string1, String string2) {
        return string1.compareTo(string2);
    }


}
public void tMSSqlRow_11Process(final java.util.Map<String, Object> globalMap) throws TalendException {
	globalMap.put("tMSSqlRow_11_SUBPROCESS_STATE", 0);

 final boolean execStat = this.execStat;
	
		String iterateId = "";
	
	
	String currentComponent = "";
	java.util.Map<String, Object> resourceMap = new java.util.HashMap<String, Object>();

	try {
			// TDI-39566 avoid throwing an useless Exception
			boolean resumeIt = true;
			if (globalResumeTicket == false && resumeEntryMethodName != null) {
				String currentMethodName = new java.lang.Exception().getStackTrace()[0].getMethodName();
				resumeIt = resumeEntryMethodName.equals(currentMethodName);
			}
			if (resumeIt || globalResumeTicket) { //start the resume
				globalResumeTicket = true;



		row28Struct row28 = new row28Struct();
row84Struct row84 = new row84Struct();
row83Struct row83 = new row83Struct();





	
	/**
	 * [tLogRow_14 begin ] start
	 */

	

	
		
		ok_Hash.put("tLogRow_14", false);
		start_Hash.put("tLogRow_14", System.currentTimeMillis());
		
	
	currentComponent="tLogRow_14";

	
					if(execStat) {
						runStat.updateStatOnConnection(resourceMap,iterateId,0,0,"row84");
					}
				
		int tos_count_tLogRow_14 = 0;
		

	///////////////////////
		


	class Util_tLogRow_14 {
	
		String[] des_top = { ".", "-" };

        String[] des_data = { "-", "+" };

        String[] des_frame = { "|" }; 
        
        public void printLine(StringBuilder sb, int titleWidth, int dataWidth){
        
        	sb.append("+");
			for(int i=0; i<titleWidth+2; i++)
				sb.append("-");
			sb.append("+");
			for(int i=0; i<dataWidth+2; i++)
				sb.append("-");
        	sb.append("+" + "\n");
        }      

		public String print(String[] row, int nbLine){
			
			StringBuilder sb = new StringBuilder();
			
			    String title = "#" + nbLine + ". " + "tLogRow_14";
			    
		
			//step 1: get the max length of all the row[] member;
			int dataWidth = 5;		//the length of the string "value"	
			for(int i=0;i<row.length;i++) {
				if(row[i] == null && 4 > dataWidth) {
					dataWidth = 4;
				}
				else if(row[i] != null && row[i].length()>dataWidth) 
					dataWidth = row[i].length();
			}			
						
			int titleWidth = 12;
			
			int totalWidth = dataWidth + titleWidth + 5;
			
			//step 2: print the header with line number
			sb.append(".");
			for(int i=0 ; i<totalWidth ; i++)
				sb.append("-");			
			sb.append("." + "\n" + "|");
			
			int emptyCenterWidth = (totalWidth-title.length())/2;
			for(int i=0 ; i<emptyCenterWidth; i++)
				sb.append(" ");	
			sb.append(title);
			for(int i=0 ; i<totalWidth - emptyCenterWidth - title.length() ; i++)
				sb.append(" ");	
			sb.append("|" + "\n");
			
			//step 3: print "key" and "value"			
			printLine(sb,titleWidth,dataWidth);
			
			sb.append("|" + " key");
			for(int i=0; i<titleWidth-2; i++)
				sb.append(" ");
        	sb.append("|" + " value");
			for(int i=0; i<dataWidth-4; i++)
				sb.append(" ");
			sb.append("|" + "\n");
			
			printLine(sb,titleWidth,dataWidth);
			
			//step 4: print dataset
			
			//for(int i=0; i<row.length; i++){
				sb.append("| " + "errorCode");
				for(int i=0; i<titleWidth -"errorCode".length()+ 1 ;i++)
					sb.append(" ");
				sb.append("| " + row[0]);
				for(int i=0; row[0] == null && i<dataWidth - 3 || row[0] != null && i<dataWidth -row[0].length()+ 1 ;i++)
					sb.append(" ");
				sb.append("|" + "\n");
			
			//}

			
			//for(int i=0; i<row.length; i++){
				sb.append("| " + "errorMessage");
				for(int i=0; i<titleWidth -"errorMessage".length()+ 1 ;i++)
					sb.append(" ");
				sb.append("| " + row[1]);
				for(int i=0; row[1] == null && i<dataWidth - 3 || row[1] != null && i<dataWidth -row[1].length()+ 1 ;i++)
					sb.append(" ");
				sb.append("|" + "\n");
			
			//}

			
			//step 5: print a line gap
			printLine(sb,titleWidth,dataWidth);
			return sb.toString();

		}


	}

	Util_tLogRow_14 util_tLogRow_14 = new Util_tLogRow_14();




	java.io.PrintStream consoleOut_tLogRow_14 = null;
	if (globalMap.get("tLogRow_CONSOLE")!=null){
        consoleOut_tLogRow_14 = (java.io.PrintStream) globalMap.get("tLogRow_CONSOLE");
    }else{
        consoleOut_tLogRow_14 = new java.io.PrintStream(new java.io.BufferedOutputStream(System.out));
        globalMap.put("tLogRow_CONSOLE",consoleOut_tLogRow_14);
    }

 		StringBuilder strBuffer_tLogRow_14 = null;
		int nb_line_tLogRow_14 = 0;
///////////////////////    			



 



/**
 * [tLogRow_14 begin ] stop
 */



	
	/**
	 * [tMSSqlRow_12 begin ] start
	 */

	

	
		
		ok_Hash.put("tMSSqlRow_12", false);
		start_Hash.put("tMSSqlRow_12", System.currentTimeMillis());
		
	
	currentComponent="tMSSqlRow_12";

	
					if(execStat) {
						runStat.updateStatOnConnection(resourceMap,iterateId,0,0,"row28");
					}
				
		int tos_count_tMSSqlRow_12 = 0;
		

	java.sql.Connection conn_tMSSqlRow_12 = null;
	String query_tMSSqlRow_12 = "";
	boolean whetherReject_tMSSqlRow_12 = false;
				conn_tMSSqlRow_12 = (java.sql.Connection)globalMap.get("conn_tMSSqlConnection_4");
			
    resourceMap.put("conn_tMSSqlRow_12", conn_tMSSqlRow_12);
        java.sql.Statement stmt_tMSSqlRow_12 = conn_tMSSqlRow_12.createStatement();
        resourceMap.put("stmt_tMSSqlRow_12", stmt_tMSSqlRow_12);

 



/**
 * [tMSSqlRow_12 begin ] stop
 */




	
	/**
	 * [tLogRow_13 begin ] start
	 */

	

	
		
		ok_Hash.put("tLogRow_13", false);
		start_Hash.put("tLogRow_13", System.currentTimeMillis());
		
	
	currentComponent="tLogRow_13";

	
					if(execStat) {
						runStat.updateStatOnConnection(resourceMap,iterateId,0,0,"row83");
					}
				
		int tos_count_tLogRow_13 = 0;
		

	///////////////////////
		


	class Util_tLogRow_13 {
	
		String[] des_top = { ".", "-" };

        String[] des_data = { "-", "+" };

        String[] des_frame = { "|" }; 
        
        public void printLine(StringBuilder sb, int titleWidth, int dataWidth){
        
        	sb.append("+");
			for(int i=0; i<titleWidth+2; i++)
				sb.append("-");
			sb.append("+");
			for(int i=0; i<dataWidth+2; i++)
				sb.append("-");
        	sb.append("+" + "\n");
        }      

		public String print(String[] row, int nbLine){
			
			StringBuilder sb = new StringBuilder();
			
			    String title = "#" + nbLine + ". " + "tLogRow_13";
			    
		
			//step 1: get the max length of all the row[] member;
			int dataWidth = 5;		//the length of the string "value"	
			for(int i=0;i<row.length;i++) {
				if(row[i] == null && 4 > dataWidth) {
					dataWidth = 4;
				}
				else if(row[i] != null && row[i].length()>dataWidth) 
					dataWidth = row[i].length();
			}			
						
			int titleWidth = 12;
			
			int totalWidth = dataWidth + titleWidth + 5;
			
			//step 2: print the header with line number
			sb.append(".");
			for(int i=0 ; i<totalWidth ; i++)
				sb.append("-");			
			sb.append("." + "\n" + "|");
			
			int emptyCenterWidth = (totalWidth-title.length())/2;
			for(int i=0 ; i<emptyCenterWidth; i++)
				sb.append(" ");	
			sb.append(title);
			for(int i=0 ; i<totalWidth - emptyCenterWidth - title.length() ; i++)
				sb.append(" ");	
			sb.append("|" + "\n");
			
			//step 3: print "key" and "value"			
			printLine(sb,titleWidth,dataWidth);
			
			sb.append("|" + " key");
			for(int i=0; i<titleWidth-2; i++)
				sb.append(" ");
        	sb.append("|" + " value");
			for(int i=0; i<dataWidth-4; i++)
				sb.append(" ");
			sb.append("|" + "\n");
			
			printLine(sb,titleWidth,dataWidth);
			
			//step 4: print dataset
			
			//for(int i=0; i<row.length; i++){
				sb.append("| " + "errorCode");
				for(int i=0; i<titleWidth -"errorCode".length()+ 1 ;i++)
					sb.append(" ");
				sb.append("| " + row[0]);
				for(int i=0; row[0] == null && i<dataWidth - 3 || row[0] != null && i<dataWidth -row[0].length()+ 1 ;i++)
					sb.append(" ");
				sb.append("|" + "\n");
			
			//}

			
			//for(int i=0; i<row.length; i++){
				sb.append("| " + "errorMessage");
				for(int i=0; i<titleWidth -"errorMessage".length()+ 1 ;i++)
					sb.append(" ");
				sb.append("| " + row[1]);
				for(int i=0; row[1] == null && i<dataWidth - 3 || row[1] != null && i<dataWidth -row[1].length()+ 1 ;i++)
					sb.append(" ");
				sb.append("|" + "\n");
			
			//}

			
			//step 5: print a line gap
			printLine(sb,titleWidth,dataWidth);
			return sb.toString();

		}


	}

	Util_tLogRow_13 util_tLogRow_13 = new Util_tLogRow_13();




	java.io.PrintStream consoleOut_tLogRow_13 = null;
	if (globalMap.get("tLogRow_CONSOLE")!=null){
        consoleOut_tLogRow_13 = (java.io.PrintStream) globalMap.get("tLogRow_CONSOLE");
    }else{
        consoleOut_tLogRow_13 = new java.io.PrintStream(new java.io.BufferedOutputStream(System.out));
        globalMap.put("tLogRow_CONSOLE",consoleOut_tLogRow_13);
    }

 		StringBuilder strBuffer_tLogRow_13 = null;
		int nb_line_tLogRow_13 = 0;
///////////////////////    			



 



/**
 * [tLogRow_13 begin ] stop
 */



	
	/**
	 * [tMSSqlRow_11 begin ] start
	 */

	

	
		
		ok_Hash.put("tMSSqlRow_11", false);
		start_Hash.put("tMSSqlRow_11", System.currentTimeMillis());
		
	
	currentComponent="tMSSqlRow_11";

	
		int tos_count_tMSSqlRow_11 = 0;
		

	java.sql.Connection conn_tMSSqlRow_11 = null;
	String query_tMSSqlRow_11 = "";
	boolean whetherReject_tMSSqlRow_11 = false;
				conn_tMSSqlRow_11 = (java.sql.Connection)globalMap.get("conn_tMSSqlConnection_4");
			
    resourceMap.put("conn_tMSSqlRow_11", conn_tMSSqlRow_11);
        java.sql.Statement stmt_tMSSqlRow_11 = conn_tMSSqlRow_11.createStatement();
        resourceMap.put("stmt_tMSSqlRow_11", stmt_tMSSqlRow_11);

 



/**
 * [tMSSqlRow_11 begin ] stop
 */
	
	/**
	 * [tMSSqlRow_11 main ] start
	 */

	

	
	
	currentComponent="tMSSqlRow_11";

	

		row28 = null;
		
		row83 = null;
		
query_tMSSqlRow_11 = "If Exists ( SELECT name \n            FROM sysobjects  \n            WHERE name = 'ImportPateValidate'\n            AND"
+" type = 'P')\n	DROP PROCEDURE ImportPateValidate\n";
whetherReject_tMSSqlRow_11 = false;
globalMap.put("tMSSqlRow_11_QUERY",query_tMSSqlRow_11);
try {
		stmt_tMSSqlRow_11.execute(query_tMSSqlRow_11);
		
	} catch (java.lang.Exception e) {
		whetherReject_tMSSqlRow_11 = true;
		
				row83 = new row83Struct();
				
				row83.errorCode = ((java.sql.SQLException)e).getSQLState();
				row83.errorMessage = e.getMessage() + " - Line: " + tos_count_tMSSqlRow_11;
				
	}
	
	if(!whetherReject_tMSSqlRow_11) {
		
					row28 = new row28Struct();
					
	}
	

 


	tos_count_tMSSqlRow_11++;

/**
 * [tMSSqlRow_11 main ] stop
 */
	
	/**
	 * [tMSSqlRow_11 process_data_begin ] start
	 */

	

	
	
	currentComponent="tMSSqlRow_11";

	

 



/**
 * [tMSSqlRow_11 process_data_begin ] stop
 */
// Start of branch "row28"
if(row28 != null) { 
			row84 = null;



	
	/**
	 * [tMSSqlRow_12 main ] start
	 */

	

	
	
	currentComponent="tMSSqlRow_12";

	
					if(execStat){
						runStat.updateStatOnConnection(iterateId,1,1
						
							,"row28"
						
						);
					}
					

		row84 = null;
		
query_tMSSqlRow_12 = "CREATE PROCEDURE ImportPateValidate\nAS \n	BEGIN\n		SET NOCOUNT ON\n		\n		/* Procedure name: ImportPateValidate\n		Inpu"
+"t:  IPAS database and import tables not imported (i.e. IND_IMPORT not 1)\n		Output: if errors, validation flag set to 2 "
+"and error messages in  ["+ context.intermediateDB + "].[dbo].VW_IMPORT_PATENT_RESULT\n		if OK, validation flag set to 9\n		create or replace procedure ImportPateValidate as"
+"\n		*/\n		\n		/* flag all pending patents as to be validated */\n		UPDATE   ["+ context.intermediateDB + "].[dbo].VW_import_patent   \n		SET	ind_import = 0 \n		WHERE  ind_import  is null\n		 OR	ind_import  not in ( 0  , 1  ) "
+"\n		\n		/* delete prior errors */\n		DELETE FROM    ["+ context.intermediateDB + "].[dbo].VW_IMPORT_PATENT_RESULT    \n		\n		/* 1.1.1  ["+ context.intermediateDB + "].[dbo].VW_IMPORT_PATENT validations */\n		/* 1.1.1.1 Codes validations */\n		/* FILE_SEQ: if not exists in CF_FILE_SEQ"
+"UENCE, insert message ?Invalid file sequence code? */\n		INSERT INTO   ["+ context.intermediateDB + "].[dbo].VW_IMPORT_PATENT_RESULT   \n				( file_seq , \n				file_type , \n				file_series , \n				file_nbr , \n				ind_i"
+"mport , \n				msg_import )  \n		SELECT\n				 file_seq,\n				 file_type,\n				 file_series,\n				 file_nbr,\n				 2,\n			"
+"	 'Invalid file sequence code'\n		FROM   ["+ context.intermediateDB + "].[dbo].VW_import_patent \n		WHERE	 ind_import  = 0\n		 AND	file_seq COLLATE DATABASE_DEFAULT not in\n			(\n		 	SELECT "
+"file_seq\n			FROM  cf_file_sequence \n			)\n		\n		/* FILE_TYPE: if not exists in CF_FILE_TYPE, insert message ?Invalid f"
+"ile type code? */\n		INSERT INTO   ["+ context.intermediateDB + "].[dbo].VW_IMPORT_PATENT_RESULT   \n				( file_seq , \n				file_type , \n				file_series , \n				file_nbr , \n				ind_i"
+"mport , \n				msg_import )  \n		SELECT\n				 file_seq,\n				 file_type,\n				 file_series,\n				 file_nbr,\n				 2,\n			"
+"	 'Invalid file type code'\n		FROM   ["+ context.intermediateDB + "].[dbo].VW_import_patent \n		WHERE	 ind_import  = 0\n		 AND	file_type  not in\n			(\n		 	SELECT file_type\n			FROM  cf_"
+"file_type \n			)\n		\n		/* DOC_ORI: if not null and not exists in CF_DOC_ORIGIN, message ?Invalid document origin code? "
+"*/\n		INSERT INTO   ["+ context.intermediateDB + "].[dbo].VW_IMPORT_PATENT_RESULT   \n				( file_seq , \n				file_type , \n				file_series , \n				file_nbr , \n				ind_i"
+"mport , \n				msg_import )  \n		SELECT\n				 file_seq,\n				 file_type,\n				 file_series,\n				 file_nbr,\n				 2,\n			"
+"	 'Invalid document origin code'\n		FROM   ["+ context.intermediateDB + "].[dbo].VW_import_patent \n		WHERE	 ind_import  = 0\n		 AND	doc_ori  is not null\n		 AND	doc_ori  COLLATE DATABASE_DEFA"
+"ULT not in\n			(\n		 	SELECT doc_ori\n			FROM  CF_DOC_ORIGIN \n			)\n		\n		/* DOC_ORI: if null and not exists config par"
+"am 'MigrationCodOri' message ?Null document origin code but no 'MigrationDocOri' parameter configured? */\n		INSERT INTO"
+"   ["+ context.intermediateDB + "].[dbo].VW_IMPORT_PATENT_RESULT   \n				( file_seq , \n				file_type , \n				file_series , \n				file_nbr , \n				ind_i"
+"mport , \n				msg_import )  \n		SELECT\n				 file_seq,\n				 file_type,\n				 file_series,\n				 file_nbr,\n				 2,\n			"
+"	 'Null document origin code but no [MigrationCodOri] parameter configured'\n		FROM   ["+ context.intermediateDB + "].[dbo].VW_import_patent \n		WHERE	 ind_import  = 0\n		 AND	doc_ori  is null\n		 AND	NOT   exists\n			(\n		 	SELECT *\n"
+"			FROM  CF_CONFIG_PARAM \n			WHERE	 config_code  = 'MigrationCodOri'\n			)\n		\n		/* DOC_ORI: if null and a null value "
+"exists for config param 'MigrationCodOri' message ?Null document origin code but no valid 'MigrationDocOri' parameter co"
+"nfigured? */\n		INSERT INTO   ["+ context.intermediateDB + "].[dbo].VW_IMPORT_PATENT_RESULT   \n				( file_seq , \n				file_type , \n				file_series , \n				file_nbr , \n				ind_i"
+"mport , \n				msg_import )  \n		SELECT\n				 file_seq,\n				 file_type,\n				 file_series,\n				 file_nbr,\n				 2,\n			"
+"	 'Null document origin code but no valid [MigrationCodOri] parameter configured'\n		FROM   ["+ context.intermediateDB + "].[dbo].VW_import_patent \n		WHERE	 ind_import  = 0\n		 AND	doc_ori  is null\n		 AND	  exists\n			(\n		 	SELECT *\n			F"
+"ROM  CF_CONFIG_PARAM \n			WHERE	 config_code  = 'MigrationCodOri'\n			 AND	value  is null\n			)\n		\n		/* APPLICATION_TY"
+"PE: if not exists in CF_APPLICATION_TYPE, message ?Invalid application type code? */\n		INSERT INTO   ["+ context.intermediateDB + "].[dbo].VW_IMPORT_PATENT_RESULT   \n				( file_seq , \n				file_type , \n				file_series , \n				file_nbr , \n				ind_i"
+"mport , \n				msg_import )  \n		SELECT\n				 file_seq,\n				 file_type,\n				 file_series,\n				 file_nbr,\n				 2,\n			"
+"	 'Invalid application type code'\n		FROM   ["+ context.intermediateDB + "].[dbo].VW_import_patent \n		WHERE	 ind_import  = 0\n		 AND	APPLICATION_TYPE  COLLATE DATABASE_DEFAULT not in\n			(\n		"
+" 	SELECT appl_typ\n			FROM  CF_APPLICATION_TYPE \n			)\n		\n		/* APPLICATION_TYPE / APPLICATION_SUBTYPE: if not exists i"
+"n CF_APPLICATION_SUBTYPE, message ?Invalid application type / subtype code? */\n		INSERT INTO   ["+ context.intermediateDB + "].[dbo].VW_IMPORT_PATENT_RESULT   \n				( file_seq , \n				file_type , \n				file_series , \n				file_nbr , \n				ind_i"
+"mport , \n				msg_import )  \n		SELECT\n				 file_seq,\n				 file_type,\n				 file_series,\n				 file_nbr,\n				 2,\n			"
+"	 'Invalid application type / subtype code'\n		FROM   ["+ context.intermediateDB + "].[dbo].VW_import_patent \n		WHERE	 ind_import  = 0\n		 AND	 NOT EXISTS\n			(\n		 	SELECT	\n					 CF_APPLICATION_SUBTYP"
+"E.appl_typ,\n					 CF_APPLICATION_SUBTYPE.appl_subtyp\n			FROM  CF_APPLICATION_SUBTYPE \n			WHERE	 CF_APPLICATION_SUBTYP"
+"E.appl_typ  =  ["+ context.intermediateDB + "].[dbo].VW_import_patent.APPLICATION_TYPE	COLLATE DATABASE_DEFAULT \n			 AND	CF_APPLICATION_SUBTYPE.appl_subtyp  =  ["+ context.intermediateDB + "].[dbo].VW_import_patent.APPLICATION_SUBTYPE	COLLATE DATABASE_DEFAULT \n			)\n		\n		/* LAW_CODE: if not exists in CF_LA"
+"W, message ?Invalid law code? */\n		INSERT INTO   ["+ context.intermediateDB + "].[dbo].VW_IMPORT_PATENT_RESULT   \n				( file_seq , \n				file_type , \n				file_series , \n				file_nbr , \n				ind_i"
+"mport , \n				msg_import )  \n		SELECT\n				 file_seq,\n				 file_type,\n				 file_series,\n				 file_nbr,\n				 2,\n			"
+"	 'Invalid law code'\n		FROM   ["+ context.intermediateDB + "].[dbo].VW_import_patent \n		WHERE	 ind_import  = 0\n		 AND	LAW_CODE  not in\n			(\n		 	SELECT law_code\n			FROM  CF_LA"
+"W \n			)\n		\n		/* Null registration: if IND_REGISTERED = 1 and any of the other registration data items is nut null/0, "
+"\n		       message ?File not flagged as registered but some of the registration data items is not null? */\n		INSERT INT"
+"O   ["+ context.intermediateDB + "].[dbo].VW_IMPORT_PATENT_RESULT   \n				( file_seq , \n				file_type , \n				file_series , \n				file_nbr , \n				ind_i"
+"mport , \n				msg_import )  \n		SELECT\n				 file_seq,\n				 file_type,\n				 file_series,\n				 file_nbr,\n				 2,\n			"
+"	 'File not flagged as registered but some of the registration data items is not null'\n		FROM   ["+ context.intermediateDB + "].[dbo].VW_import_patent \n		WHERE	 ind_import  = 0\n		 AND	IND_REGISTERED  = 0\n		 AND	(REGISTRATION_TYPE  is not null"
+"\n		 OR	(REGISTRATION_SERIES  not in ( 0  )\n		 AND	REGISTRATION_SERIES  IS NOT NULL)\n		 OR	(REGISTRATION_NBR  not in ("
+" 0  )\n		 AND	REGISTRATION_NBR  IS NOT NULL)\n		 OR	REGISTRATION_DUP  is not null\n		 OR	REGISTRATION_DATE  is not null"
+"\n		 OR	REGISTRATION_TYPE  is not null\n		 OR	ENTITLEMENT_DATE  is not null\n		 OR	EXPIRATION_DATE  is not null)\n		\n		/"
+"* Not null registration: if IND_REGISTERED = 1 and any of the other registration data items is null/0 \n		       (except"
+" REGISTRATION_DUP), message ?File flagged as registered but some of the registration data items is null? */\n		INSERT IN"
+"TO   ["+ context.intermediateDB + "].[dbo].VW_IMPORT_PATENT_RESULT   \n				( file_seq , \n				file_type , \n				file_series , \n				file_nbr , \n				ind_i"
+"mport , \n				msg_import )  \n		SELECT\n				 file_seq,\n				 file_type,\n				 file_series,\n				 file_nbr,\n				 2,\n			"
+"	 'File flagged as registered but some of the registration data items is null'\n		FROM   ["+ context.intermediateDB + "].[dbo].VW_import_patent \n		WHERE	 ind_import  = 0\n		 AND	IND_REGISTERED  = 1\n		 AND	(REGISTRATION_TYPE  is null\n		"
+" OR	(REGISTRATION_SERIES  in ( 0  )\n		 OR	REGISTRATION_SERIES  IS NULL)\n		 OR	(REGISTRATION_NBR  in ( 0  )\n		 OR	REGI"
+"STRATION_NBR  IS NULL)\n		 OR	REGISTRATION_DATE  is null\n		 OR	REGISTRATION_TYPE  is null\n		 OR	ENTITLEMENT_DATE  is n"
+"ull\n		 OR	EXPIRATION_DATE  is null)\n		\n		/* EXPIRATION_DATE: if less than ENTITLEMENT_DATE, message ?Expiration date "
+"is less then entitlement date? */\n		INSERT INTO   ["+ context.intermediateDB + "].[dbo].VW_IMPORT_PATENT_RESULT   \n				( file_seq , \n				file_type , \n				file_series , \n				file_nbr , \n				ind_i"
+"mport , \n				msg_import )  \n		SELECT\n				 file_seq,\n				 file_type,\n				 file_series,\n				 file_nbr,\n				 2,\n			"
+"	 'Expiration date is less then entitlement date'\n		FROM   ["+ context.intermediateDB + "].[dbo].VW_import_patent \n		WHERE	 ind_import  = 0\n		 AND	IND_REGISTERED  = 1\n		 AND	EXPIRATION_DATE  < ENTITLEMENT_"
+"DATE\n		\n		/* CAPTURE_USER_ID: if not exists in IP_USER, message ?Invalid capture user code? */\n		INSERT INTO   ["+ context.intermediateDB + "].[dbo].VW_IMPORT_PATENT_RESULT   \n				( file_seq , \n				file_type , \n				file_series , \n				file_nbr , \n				ind_i"
+"mport , \n				msg_import )  \n		SELECT\n				 file_seq,\n				 file_type,\n				 file_series,\n				 file_nbr,\n				 2,\n			"
+"	 'Invalid capture user code'\n		FROM   ["+ context.intermediateDB + "].[dbo].VW_import_patent \n		WHERE	 ind_import  = 0\n		 AND	CAPTURE_USER_ID  is not null\n		 AND	CAPTURE_USER_ID  not i"
+"n\n			(\n		 	SELECT user_id\n			FROM  IP_USER \n			)\n		\n		/* 1.1.1.2 Duplicate keys validations */\n		/* If FILE_SEQ /"
+" FILE_TYPE / FILE_SERIES / FILE_NBR already exists in IP_FILE, \n		       insert message ?File sequence / type / series "
+"/ number already exists in the database? */\n		INSERT INTO   ["+ context.intermediateDB + "].[dbo].VW_IMPORT_PATENT_RESULT   \n				( file_seq , \n				file_type , \n				file_series , \n				file_nbr , \n				ind_i"
+"mport , \n				msg_import )  \n		SELECT\n				 file_seq,\n				 file_type,\n				 file_series,\n				 file_nbr,\n				 2,\n			"
+"	 'File sequence / type / series / number already exists in the database'\n		FROM   ["+ context.intermediateDB + "].[dbo].VW_import_patent M\n		WHERE	 ind_import  = 0\n		 AND	exists\n				(select		*\n				 from		IP_FILE F\n				 where		"
+"M.FILE_SEQ    = F.FILE_SEQ		COLLATE DATABASE_DEFAULT and\n							M.FILE_TYPE   = F.FILE_TYP		COLLATE DATABASE_DEFAULT an"
+"d\n							M.FILE_SERIES = F.FILE_SER	and\n							M.FILE_NBR    = F.FILE_NBR\n				)\n		\n		/* If DOC_NBR is not null and "
+"DOC_ORI / DOC_SERIES / DOC_NBR already exists in IP_DOC, \n		       insert message ?Document origin / series / number al"
+"ready exists in the database? */\n		INSERT INTO   ["+ context.intermediateDB + "].[dbo].VW_IMPORT_PATENT_RESULT   \n				( file_seq , \n				file_type , \n				file_series , \n				file_nbr , \n				ind_i"
+"mport , \n				msg_import )  \n		SELECT\n				 file_seq,\n				 file_type,\n				 file_series,\n				 file_nbr,\n				 2,\n			"
+"	 'Document origin / series / number already exists in the database'\n		FROM   ["+ context.intermediateDB + "].[dbo].VW_import_patent M\n		WHERE	ind_import  = 0\n		 AND	exists\n				(select	*\n				 from	IP_DOC D\n				 where	D.DOC"
+"_ORI	= M.DOC_ORI		COLLATE DATABASE_DEFAULT and		\n						D.DOC_LOG	= 'E'			and	\n						D.DOC_SER	= M.DOC_SERIES	and\n				"
+"		D.DOC_NBR	= M.DOC_NBR\n				)\n		\n		/* If DOC_NBR is not null and DOC_ORI / DOC_SERIES / DOC_NBR is repeated in  ["+ context.intermediateDB + "].[dbo].VW_IMPORT_PATENT,\n		insert message ?Document origin / series / number duplicated in intermediate table? */\n		"
+"/* Generate work table with repeated DOC_ORI / DOC_SERIES / DOC_NBR */\n				\n		TRUNCATE TABLE wrk_doc_key\n\n		INSERT I"
+"NTO  wrk_doc_key    \n		SELECT\n				 DOC_ORI,\n				 DOC_SERIES,\n				 DOC_NBR\n		FROM   ["+ context.intermediateDB + "].[dbo].VW_IMPORT_PATENT \n		WHERE	 DOC_NBR  is not null\n		GROUP BY DOC_ORI,\n			 DOC_SERIES,\n			  DOC_NBR \n		HAVING"
+" COUNT(*)  > 1  \n		\n		INSERT INTO   ["+ context.intermediateDB + "].[dbo].VW_IMPORT_PATENT_RESULT   \n				( file_seq , \n				file_type , \n				file_series , \n				file_nbr , \n				ind_i"
+"mport , \n				msg_import )  \n		SELECT\n				 file_seq,\n				 file_type,\n				 file_series,\n				 file_nbr,\n				 2,\n			"
+"	 'Document origin / series / number duplicated in intermediate table'\n		FROM   ["+ context.intermediateDB + "].[dbo].VW_import_patent M\n		WHERE	 ind_import  = 0\n		 AND	DOC_NBR  is not null\n		 AND	exists\n				(select	*\n				 f"
+"rom	wrk_doc_key D\n				 where	D.DOC_ORI	= M.DOC_ORI		and\n						D.DOC_SERIES= M.DOC_SERIES	and\n						D.DOC_NBR	= M.DOC_"
+"NBR\n				)\n		\n		/* If IND_REGISTERED = 1 and REGISTRATION_TYPE / REGISTRATION_SERIES / REGISTRATION_NBR / REGISTRATION"
+"_DUP \n		       already exists in IP_FILE, insert message ?Registration type / series / number / duplicate already exist"
+"s in the database? */\n		INSERT INTO   ["+ context.intermediateDB + "].[dbo].VW_IMPORT_PATENT_RESULT   \n				( file_seq , \n				file_type , \n				file_series , \n				file_nbr , \n				ind_i"
+"mport , \n				msg_import )  \n		SELECT\n				 file_seq,\n				 file_type,\n				 file_series,\n				 file_nbr,\n				 2,\n			"
+"	 'Registration type / series / number / duplicate already exists in the database'\n		FROM   ["+ context.intermediateDB + "].[dbo].VW_import_patent M\n		WHERE	 ind_import  = 0\n		 AND	IND_REGISTERED  = 1\n		 AND	exists\n				(select	*\n				 fr"
+"om	IP_FILE F\n				 where	F.REGISTRATION_TYP	= M.REGISTRATION_TYPE	COLLATE DATABASE_DEFAULT AND\n						F.REGISTRATION_SER"
+"	= M.REGISTRATION_SERIES AND\n						F.REGISTRATION_NBR	= M.REGISTRATION_NBR 	AND\n						F.REGISTRATION_DUP	= M.REGISTRAT"
+"ION_DUP	COLLATE DATABASE_DEFAULT \n				)\n		\n		/* 1.1.2  ["+ context.intermediateDB + "].[dbo].VW_IMPORT_PATENT_OWNERS validations */\n		/* 1.1.2.1 Owner validations */\n		/* Generate work table with FILE_S"
+"EQ, FILE_TYPE, FILE_SERIES, FILE_NBR, IND_SERVICE and COUNT(*) */\n		DELETE FROM   wrk_file_service_count    \n		\n		INS"
+"ERT INTO  wrk_file_service_count    \n		SELECT\n				 FILE_SEQ,\n				 FILE_TYPE,\n				 FILE_SERIES,\n				 FILE_NBR,\n				"
+" IND_SERVICE,\n				 COUNT(*) count1\n		FROM   ["+ context.intermediateDB + "].[dbo].VW_IMPORT_PATENT_OWNERS \n		GROUP BY FILE_SEQ,\n			 FILE_TYPE,\n			 FILE_SERIES,\n			 FILE_NBR,\n			  IND_SERVI"
+"CE \n		\n		/* No service address: where not exists corresponding tuple in the work table with IND_SERVICE = 1, \n		     "
+"  message ?No owner flagged as service address? */\n		INSERT INTO   ["+ context.intermediateDB + "].[dbo].VW_IMPORT_PATENT_RESULT   \n				( file_seq , \n				file_type , \n				file_series , \n				file_nbr , \n				ind_i"
+"mport , \n				msg_import )  \n		SELECT\n				 file_seq,\n				 file_type,\n				 file_series,\n				 file_nbr,\n				 2,\n			"
+"	 'No owner flagged as service address'\n		FROM   ["+ context.intermediateDB + "].[dbo].VW_import_patent M \n		WHERE	 ind_import  = 0\n		 AND	NOT   exists\n			(\n		 	SELECT *\n			FROM  wrk_file_servi"
+"ce_count W \n			WHERE	 M.file_seq  = W.file_seq\n			 AND	M.file_type  = W.file_type\n			 AND	M.file_series  = W.file_ser"
+"ies\n			 AND	M.file_nbr  = W.file_nbr\n			 AND	ind_service  = 1\n			)\n		\n		/* Several service addresses: where exists "
+"corresponding tuple in the work table with \n		      IND_SERVICE = 1 and with count column > 1, message ?Several owners "
+"flagged as service addresses? */\n		INSERT INTO   ["+ context.intermediateDB + "].[dbo].VW_IMPORT_PATENT_RESULT   \n				( file_seq , \n				file_type , \n				file_series , \n				file_nbr , \n				ind_i"
+"mport , \n				msg_import )  \n		SELECT\n				 M.file_seq,\n				 M.file_type,\n				 M.file_series,\n				 M.file_nbr,\n				"
+" 2,\n				 'Several owners flagged as service addresses'\n		FROM   ["+ context.intermediateDB + "].[dbo].VW_import_patent M \n		 JOIN wrk_file_service_count W ON M.file_seq  = W.file_seq\n			 AND	M.file_type  = W.fil"
+"e_type\n			 AND	M.file_series  = W.file_series\n			 AND	M.file_nbr  = W.file_nbr  \n		WHERE	 ind_import  = 0\n		 AND	ind"
+"_service  = 1\n		 AND	count1  > 1\n		\n		/* 1.1.2.2 Person validations */\n		/* NATIONALITY_COUNTRY_CODE: if not exists "
+"in CF_GEO_COUNTRY, message ?Invalid owner nationality country code? */\n		INSERT INTO   ["+ context.intermediateDB + "].[dbo].VW_IMPORT_PATENT_RESULT   \n				( file_seq , \n				file_type , \n				file_series , \n				file_nbr , \n				ind_i"
+"mport , \n				msg_import )  \n		SELECT\n				 T.file_seq,\n				 T.file_type,\n				 T.file_series,\n				 T.file_nbr,\n				"
+" 2,\n				 'Invalid owner nationality country code'\n		FROM   ["+ context.intermediateDB + "].[dbo].VW_import_patent_owners T \n		 JOIN  ["+ context.intermediateDB + "].[dbo].VW_import_patent M ON T.file_seq  = M.file_seq\n			 AND	T.file_type  = M.file_type\n			 AND	T.file_series  = M."
+"file_series\n			 AND	T.file_nbr  = M.file_nbr  \n		WHERE	 ind_import  = 0\n		 AND	not exists\n			(\n		 	SELECT  *\n			FR"
+"OM    cf_geo_country \n                        WHERE   COUNTRY_CODE = NATIONALITY_COUNTRY_CODE  COLLATE DATABASE_DEFAULT"
+"\n			)\n		\n		/* LEGAL_NATURE: if not null and IND_COMPANY = 0, message ?Owner legal nature only applies when the person"
+" is a company? */\n		INSERT INTO   ["+ context.intermediateDB + "].[dbo].VW_IMPORT_PATENT_RESULT   \n				( file_seq , \n				file_type , \n				file_series , \n				file_nbr , \n				ind_i"
+"mport , \n				msg_import )  \n		SELECT\n				 T.file_seq,\n				 T.file_type,\n				 T.file_series,\n				 T.file_nbr,\n				"
+" 2,\n				 'Owner legal nature only applies when the person is a company'\n		FROM   ["+ context.intermediateDB + "].[dbo].VW_import_patent_owners T \n		 JOIN  ["+ context.intermediateDB + "].[dbo].VW_import_patent M ON T.file_seq  = M.file_seq\n			 AND	T.file_type  = M.file_type\n			 AND	T.file_series  = M."
+"file_series\n			 AND	T.file_nbr  = M.file_nbr  \n		WHERE	 ind_import  = 0\n		 AND	LEGAL_NATURE  is not null\n		 AND	IND_"
+"COMPANY  = 0\n		\n		/* LEGAL_ID_TYPE: if not null and not exists if CF_PERSON_ID_TYPE with IND_GENERAL_ID = ?S?, \n		   "
+"    message ?Invalid owner legal id type? */\n		INSERT INTO   ["+ context.intermediateDB + "].[dbo].VW_IMPORT_PATENT_RESULT   \n				( file_seq , \n				file_type , \n				file_series , \n				file_nbr , \n				ind_i"
+"mport , \n				msg_import )  \n		SELECT\n				 T.file_seq,\n				 T.file_type,\n				 T.file_series,\n				 T.file_nbr,\n				"
+" 2,\n				 'Invalid owner legal id type'\n		FROM   ["+ context.intermediateDB + "].[dbo].VW_import_patent_owners T \n		 JOIN  ["+ context.intermediateDB + "].[dbo].VW_import_patent M ON T.file_seq  = M.file_seq\n			 AND	T.file_type  = M.file_type\n			 AND	T.file_series  = M."
+"file_series\n			 AND	T.file_nbr  = M.file_nbr  \n		WHERE	 ind_import  = 0\n		 AND	LEGAL_ID_TYPE  is not null\n		 AND	LEG"
+"AL_ID_TYPE  COLLATE DATABASE_DEFAULT not in\n			(\n		 	SELECT PERSON_ID_TYP\n			FROM  CF_PERSON_ID_TYPE \n			WHERE	 IND_"
+"GENERAL_ID  = 'S'\n			)\n		\n		/* INDIVIDUAL_ID_TYPE: if not null and not exists if CF_PERSON_ID_TYPE with IND_INDIVIDUA"
+"L_ID = ?S?, \n		       message ?Invalid owner individual id type? */\n		INSERT INTO   ["+ context.intermediateDB + "].[dbo].VW_IMPORT_PATENT_RESULT   \n				( file_seq , \n				file_type , \n				file_series , \n				file_nbr , \n				ind_i"
+"mport , \n				msg_import )  \n		SELECT\n				 T.file_seq,\n				 T.file_type,\n				 T.file_series,\n				 T.file_nbr,\n				"
+" 2,\n				 'Invalid owner individual id type'\n		FROM   ["+ context.intermediateDB + "].[dbo].VW_import_patent_owners T \n		 JOIN  ["+ context.intermediateDB + "].[dbo].VW_import_patent M ON T.file_seq  = M.file_seq\n			 AND	T.file_type  = M.file_type\n			 AND	T.file_series  = M."
+"file_series\n			 AND	T.file_nbr  = M.file_nbr  \n		WHERE	 ind_import  = 0\n		 AND	INDIVIDUAL_ID_TYPE  is not null\n		 AN"
+"D	INDIVIDUAL_ID_TYPE  COLLATE DATABASE_DEFAULT not in\n			(\n		 	SELECT PERSON_ID_TYP\n			FROM  CF_PERSON_ID_TYPE \n			W"
+"HERE	 IND_INDIVIDUAL_ID  = 'S'\n			)\n		\n		/* If LEGAL_ID_TYPE is not null and LEGAL_ID_NBR is null, message ?Missing o"
+"wner legal id number? */\n		INSERT INTO   ["+ context.intermediateDB + "].[dbo].VW_IMPORT_PATENT_RESULT   \n				( file_seq , \n				file_type , \n				file_series , \n				file_nbr , \n				ind_i"
+"mport , \n				msg_import )  \n		SELECT\n				 T.file_seq,\n				 T.file_type,\n				 T.file_series,\n				 T.file_nbr,\n				"
+" 2,\n				 'Missing owner legal id number'\n		FROM   ["+ context.intermediateDB + "].[dbo].VW_import_patent_owners T \n		 JOIN  ["+ context.intermediateDB + "].[dbo].VW_import_patent M ON T.file_seq  = M.file_seq\n			 AND	T.file_type  = M.file_type\n			 AND	T.file_series  = M."
+"file_series\n			 AND	T.file_nbr  = M.file_nbr  \n		WHERE	 ind_import  = 0\n		 AND	LEGAL_ID_TYPE  is not null\n		 AND	LEG"
+"AL_ID_NBR  is null\n		\n		/* If LEGAL_ID_TYPE is null and LEGAL_ID_NBR is not null, message ?Missing owner legal id type"
+"? */\n		INSERT INTO   ["+ context.intermediateDB + "].[dbo].VW_IMPORT_PATENT_RESULT   \n				( file_seq , \n				file_type , \n				file_series , \n				file_nbr , \n				ind_i"
+"mport , \n				msg_import )  \n		SELECT\n				 T.file_seq,\n				 T.file_type,\n				 T.file_series,\n				 T.file_nbr,\n				"
+" 2,\n				 'Missing owner legal id type'\n		FROM   ["+ context.intermediateDB + "].[dbo].VW_import_patent_owners T \n		 JOIN  ["+ context.intermediateDB + "].[dbo].VW_import_patent M ON T.file_seq  = M.file_seq\n			 AND	T.file_type  = M.file_type\n			 AND	T.file_series  = M."
+"file_series\n			 AND	T.file_nbr  = M.file_nbr  \n		WHERE	 ind_import  = 0\n		 AND	LEGAL_ID_TYPE  is null\n		 AND	LEGAL_I"
+"D_NBR  is not null\n		\n		/* If INDIVIDUAL_ID_TYPE is not null and INDIVIDUAL_ID_NBR is null, message ?Missing owner ind"
+"ividual id number? */\n		INSERT INTO   ["+ context.intermediateDB + "].[dbo].VW_IMPORT_PATENT_RESULT   \n				( file_seq , \n				file_type , \n				file_series , \n				file_nbr , \n				ind_i"
+"mport , \n				msg_import )  \n		SELECT\n				 T.file_seq,\n				 T.file_type,\n				 T.file_series,\n				 T.file_nbr,\n				"
+" 2,\n				 'Missing owner individual id number'\n		FROM   ["+ context.intermediateDB + "].[dbo].VW_import_patent_owners T \n		 JOIN  ["+ context.intermediateDB + "].[dbo].VW_import_patent M ON T.file_seq  = M.file_seq\n			 AND	T.file_type  = M.file_type\n			 AND	T.file_series  = M."
+"file_series\n			 AND	T.file_nbr  = M.file_nbr  \n		WHERE	 ind_import  = 0\n		 AND	INDIVIDUAL_ID_TYPE  is not null\n		 AN"
+"D	INDIVIDUAL_ID_NBR  is null\n		\n		/* If INDIVIDUAL_ID_TYPE is null and INDIVIDUAL_ID_NBR is not null, message ?Missing"
+" owner individual id type? */\n		INSERT INTO   ["+ context.intermediateDB + "].[dbo].VW_IMPORT_PATENT_RESULT   \n				( file_seq , \n				file_type , \n				file_series , \n				file_nbr , \n				ind_i"
+"mport , \n				msg_import )  \n		SELECT\n				 T.file_seq,\n				 T.file_type,\n				 T.file_series,\n				 T.file_nbr,\n				"
+" 2,\n				 'Missing owner individual id type'\n		FROM   ["+ context.intermediateDB + "].[dbo].VW_import_patent_owners T \n		 JOIN  ["+ context.intermediateDB + "].[dbo].VW_import_patent M ON T.file_seq  = M.file_seq\n			 AND	T.file_type  = M.file_type\n			 AND	T.file_series  = M."
+"file_series\n			 AND	T.file_nbr  = M.file_nbr  \n		WHERE	 ind_import  = 0\n		 AND	INDIVIDUAL_ID_TYPE  is null\n		 AND	IN"
+"DIVIDUAL_ID_NBR  is not null\n		\n		/* RESIDENCE_COUNTRY_CODE: if not exists in CF_GEO_COUNTRY, message ?Invalid owner r"
+"esidence country code? */\n		INSERT INTO   ["+ context.intermediateDB + "].[dbo].VW_IMPORT_PATENT_RESULT   \n				( file_seq , \n				file_type , \n				file_series , \n				file_nbr , \n				ind_i"
+"mport , \n				msg_import )  \n		SELECT\n				 T.file_seq,\n				 T.file_type,\n				 T.file_series,\n				 T.file_nbr,\n				"
+" 2,\n				 'Invalid owner residence country code'\n		FROM   ["+ context.intermediateDB + "].[dbo].VW_import_patent_owners T \n		 JOIN  ["+ context.intermediateDB + "].[dbo].VW_import_patent M ON T.file_seq  = M.file_seq\n			 AND	T.file_type  = M.file_type\n			 AND	T.file_series  = M."
+"file_series\n			 AND	T.file_nbr  = M.file_nbr  \n		WHERE	 ind_import  = 0\n		 AND	RESIDENCE_COUNTRY_CODE  COLLATE DATABA"
+"SE_DEFAULT not in\n			(\n		 	SELECT COUNTRY_CODE\n			FROM  cf_geo_country \n			)\n		\n		/* STATE_CODE: if not null and n"
+"ot exists RESIDENCE_COUNTRY_CODE / STATE_CODE in CF_GEO_STATE, \n		       message ?Invalid owner residence state code? *"
+"/\n		INSERT INTO   ["+ context.intermediateDB + "].[dbo].VW_IMPORT_PATENT_RESULT   \n				( file_seq , \n				file_type , \n				file_series , \n				file_nbr , \n				ind_i"
+"mport , \n				msg_import )  \n		SELECT\n				 T.file_seq,\n				 T.file_type,\n				 T.file_series,\n				 T.file_nbr,\n				"
+" 2,\n				 'Invalid owner residence state code'\n		FROM   ["+ context.intermediateDB + "].[dbo].VW_import_patent_owners T \n		 JOIN  ["+ context.intermediateDB + "].[dbo].VW_import_patent M ON T.file_seq  = M.file_seq\n			 AND	T.file_type  = M.file_type\n			 AND	T.file_series  = M."
+"file_series\n			 AND	T.file_nbr  = M.file_nbr  \n		WHERE	 ind_import  = 0\n		 AND	STATE_CODE  is not null\n		 AND	 NOT E"
+"XISTS\n			(\n		 	SELECT\n					 cf_geo_state.COUNTRY_CODE,\n					 cf_geo_state.STATE_CODE\n			FROM  cf_geo_state \n			WHE"
+"RE	 cf_geo_state.COUNTRY_CODE  = T.RESIDENCE_COUNTRY_CODE		COLLATE DATABASE_DEFAULT \n			 AND	cf_geo_state.STATE_CODE		="
+" T.STATE_CODE					COLLATE DATABASE_DEFAULT \n			)\n		\n		/* If STATE_CODE Is null and exist any CF_GEO_STATE with the RE"
+"SIDENCE_COUNTRY_CODE, \n		       message ?A state code is required for the specified owner residence country? */\n		INSE"
+"RT INTO   ["+ context.intermediateDB + "].[dbo].VW_IMPORT_PATENT_RESULT   \n				( file_seq , \n				file_type , \n				file_series , \n				file_nbr , \n				ind_i"
+"mport , \n				msg_import )  \n		SELECT\n				 T.file_seq,\n				 T.file_type,\n				 T.file_series,\n				 T.file_nbr,\n				"
+" 2,\n				 'A state code is required for the specified owner residence country'\n		FROM   ["+ context.intermediateDB + "].[dbo].VW_import_patent_owners T \n		 JOIN  ["+ context.intermediateDB + "].[dbo].VW_import_patent M ON T.file_seq  = M.file_seq\n			 AND	T.file_type  = M.file_type\n			 AND	T.file_series  = M."
+"file_series\n			 AND	T.file_nbr  = M.file_nbr  \n		WHERE	 ind_import  = 0\n		 AND	STATE_CODE  is null\n		 AND	RESIDENCE_"
+"COUNTRY_CODE  COLLATE DATABASE_DEFAULT in\n			(\n		 	SELECT country_code\n			FROM  cf_geo_state S \n			)\n		\n		/* If PE"
+"RSON_GROUP_CODE is not null and not exists in IP_PERSON_GROUP, message ?Invalid owner person group code? */\n		INSERT IN"
+"TO   ["+ context.intermediateDB + "].[dbo].VW_IMPORT_PATENT_RESULT   \n				( file_seq , \n				file_type , \n				file_series , \n				file_nbr , \n				ind_i"
+"mport , \n				msg_import )  \n		SELECT\n				 T.file_seq,\n				 T.file_type,\n				 T.file_series,\n				 T.file_nbr,\n				"
+" 2,\n				 'Invalid owner person group code'\n		FROM   ["+ context.intermediateDB + "].[dbo].VW_import_patent_owners T \n		 JOIN  ["+ context.intermediateDB + "].[dbo].VW_import_patent M ON T.file_seq  = M.file_seq\n			 AND	T.file_type  = M.file_type\n			 AND	T.file_series  = M."
+"file_series\n			 AND	T.file_nbr  = M.file_nbr  \n		WHERE	 ind_import  = 0\n		 AND	PERSON_GROUP_CODE  is not null\n		 AND"
+"	PERSON_GROUP_CODE  COLLATE DATABASE_DEFAULT not in\n			(\n		 	SELECT PERSON_GROUP_NBR\n			FROM  IP_PERSON_GROUP \n			)"
+"\n		\n		/* 1.1.2A  ["+ context.intermediateDB + "].[dbo].VW_IMPORT_PATENT_INVENTORS validations */\n\n		/* AUTHOR_SEQ: if > 99, message ?Inventor sequence nbr cannot be"
+" greater than 99? */\n		INSERT INTO   ["+ context.intermediateDB + "].[dbo].VW_IMPORT_PATENT_RESULT   \n				( file_seq , \n				file_type , \n				file_series , \n				file_nbr , \n				ind_i"
+"mport , \n				msg_import )  \n		SELECT\n				 T.file_seq,\n				 T.file_type,\n				 T.file_series,\n				 T.file_nbr,\n				"
+" 2,\n				 'Inventor sequence nbr cannot be greater than 99'\n		FROM   ["+ context.intermediateDB + "].[dbo].VW_import_patent_inventors T \n		 JOIN  ["+ context.intermediateDB + "].[dbo].VW_import_patent M ON T.file_seq  = M.file_seq\n			 AND	T.file_type  = M.file_type\n			 AND	T.file_series  = M."
+"file_series\n			 AND	T.file_nbr  = M.file_nbr  \n		WHERE	 ind_import  = 0\n		 AND	AUTHOR_SEQ > 99\n				\n		/* 1.1.2A.2 P"
+"erson validations */\n		/* NATIONALITY_COUNTRY_CODE: if not exists in CF_GEO_COUNTRY, message ?Invalid inventor national"
+"ity country code? */\n		INSERT INTO   ["+ context.intermediateDB + "].[dbo].VW_IMPORT_PATENT_RESULT   \n				( file_seq , \n				file_type , \n				file_series , \n				file_nbr , \n				ind_i"
+"mport , \n				msg_import )  \n		SELECT\n				 T.file_seq,\n				 T.file_type,\n				 T.file_series,\n				 T.file_nbr,\n				"
+" 2,\n				 'Invalid inventor nationality country code'\n		FROM   ["+ context.intermediateDB + "].[dbo].VW_import_patent_inventors T \n		 JOIN  ["+ context.intermediateDB + "].[dbo].VW_import_patent M ON T.file_seq  = M.file_seq\n			 AND	T.file_type  = M.file_type\n			 AND	T.file_series  = M."
+"file_series\n			 AND	T.file_nbr  = M.file_nbr  \n		WHERE	 ind_import  = 0\n		 AND	NATIONALITY_COUNTRY_CODE  COLLATE DATA"
+"BASE_DEFAULT not in\n			(\n		 	SELECT COUNTRY_CODE\n			FROM  cf_geo_country \n			)\n		\n		/* IND_COMPANY and LEGAL_NATUR"
+"E: if a legal person is specified and IND_COMPANY = 0, message ?Inventor must be a natural person, not a company? */\n		"
+"INSERT INTO   ["+ context.intermediateDB + "].[dbo].VW_IMPORT_PATENT_RESULT   \n				( file_seq , \n				file_type , \n				file_series , \n				file_nbr , \n				ind_i"
+"mport , \n				msg_import )  \n		SELECT\n				 T.file_seq,\n				 T.file_type,\n				 T.file_series,\n				 T.file_nbr,\n				"
+" 2,\n				 'Inventor must be a natural person, not a company'\n		FROM   ["+ context.intermediateDB + "].[dbo].VW_import_patent_inventors T \n		 JOIN  ["+ context.intermediateDB + "].[dbo].VW_import_patent M ON T.file_seq  = M.file_seq\n			 AND	T.file_type  = M.file_type\n			 AND	T.file_series  = M."
+"file_series\n			 AND	T.file_nbr  = M.file_nbr  \n		WHERE	 ind_import  = 0\n		 AND	(LEGAL_NATURE  is not null\n		 OR	IND_"
+"COMPANY  = 1)\n		\n		/* LEGAL_ID_TYPE: if not null and not exists if CF_PERSON_ID_TYPE with IND_GENERAL_ID = ?S?, \n		  "
+"     message ?Invalid inventor legal id type? */\n		INSERT INTO   ["+ context.intermediateDB + "].[dbo].VW_IMPORT_PATENT_RESULT   \n				( file_seq , \n				file_type , \n				file_series , \n				file_nbr , \n				ind_i"
+"mport , \n				msg_import )  \n		SELECT\n				 T.file_seq,\n				 T.file_type,\n				 T.file_series,\n				 T.file_nbr,\n				"
+" 2,\n				 'Invalid inventor legal id type'\n		FROM   ["+ context.intermediateDB + "].[dbo].VW_import_patent_inventors T \n		 JOIN  ["+ context.intermediateDB + "].[dbo].VW_import_patent M ON T.file_seq  = M.file_seq\n			 AND	T.file_type  = M.file_type\n			 AND	T.file_series  = M."
+"file_series\n			 AND	T.file_nbr  = M.file_nbr  \n		WHERE	 ind_import  = 0\n		 AND	LEGAL_ID_TYPE  is not null\n		 AND	LEG"
+"AL_ID_TYPE  COLLATE DATABASE_DEFAULT not in\n			(\n		 	SELECT PERSON_ID_TYP\n			FROM  CF_PERSON_ID_TYPE \n			WHERE	 IND_"
+"GENERAL_ID  = 'S'\n			)\n		\n		/* INDIVIDUAL_ID_TYPE: if not null and not exists if CF_PERSON_ID_TYPE with IND_INDIVIDUA"
+"L_ID = ?S?, \n		       message ?Invalid inventor individual id type? */\n		INSERT INTO   ["+ context.intermediateDB + "].[dbo].VW_IMPORT_PATENT_RESULT   \n				( file_seq , \n				file_type , \n				file_series , \n				file_nbr , \n				ind_i"
+"mport , \n				msg_import )  \n		SELECT\n				 T.file_seq,\n				 T.file_type,\n				 T.file_series,\n				 T.file_nbr,\n				"
+" 2,\n				 'Invalid inventor individual id type'\n		FROM   ["+ context.intermediateDB + "].[dbo].VW_import_patent_inventors T \n		 JOIN  ["+ context.intermediateDB + "].[dbo].VW_import_patent M ON T.file_seq  = M.file_seq\n			 AND	T.file_type  = M.file_type\n			 AND	T.file_series  = M."
+"file_series\n			 AND	T.file_nbr  = M.file_nbr  \n		WHERE	 ind_import  = 0\n		 AND	INDIVIDUAL_ID_TYPE  is not null\n		 AN"
+"D	INDIVIDUAL_ID_TYPE  COLLATE DATABASE_DEFAULT not in\n			(\n		 	SELECT PERSON_ID_TYP\n			FROM  CF_PERSON_ID_TYPE \n			W"
+"HERE	 IND_INDIVIDUAL_ID  = 'S'\n			)\n		\n		/* If LEGAL_ID_TYPE is not null and LEGAL_ID_NBR is null, message ?Missing i"
+"nventor legal id number? */\n		INSERT INTO   ["+ context.intermediateDB + "].[dbo].VW_IMPORT_PATENT_RESULT   \n				( file_seq , \n				file_type , \n				file_series , \n				file_nbr , \n				ind_i"
+"mport , \n				msg_import )  \n		SELECT\n				 T.file_seq,\n				 T.file_type,\n				 T.file_series,\n				 T.file_nbr,\n				"
+" 2,\n				 'Missing inventor legal id number'\n		FROM   ["+ context.intermediateDB + "].[dbo].VW_import_patent_inventors T \n		 JOIN  ["+ context.intermediateDB + "].[dbo].VW_import_patent M ON T.file_seq  = M.file_seq\n			 AND	T.file_type  = M.file_type\n			 AND	T.file_series  = M."
+"file_series\n			 AND	T.file_nbr  = M.file_nbr  \n		WHERE	 ind_import  = 0\n		 AND	LEGAL_ID_TYPE  is not null\n		 AND	LEG"
+"AL_ID_NBR  is null\n		\n		/* If LEGAL_ID_TYPE is null and LEGAL_ID_NBR is not null, message ?Missing inventor legal id t"
+"ype? */\n		INSERT INTO   ["+ context.intermediateDB + "].[dbo].VW_IMPORT_PATENT_RESULT   \n				( file_seq , \n				file_type , \n				file_series , \n				file_nbr , \n				ind_i"
+"mport , \n				msg_import )  \n		SELECT\n				 T.file_seq,\n				 T.file_type,\n				 T.file_series,\n				 T.file_nbr,\n				"
+" 2,\n				 'Missing inventor legal id type'\n		FROM   ["+ context.intermediateDB + "].[dbo].VW_import_patent_inventors T \n		 JOIN  ["+ context.intermediateDB + "].[dbo].VW_import_patent M ON T.file_seq  = M.file_seq\n			 AND	T.file_type  = M.file_type\n			 AND	T.file_series  = M."
+"file_series\n			 AND	T.file_nbr  = M.file_nbr  \n		WHERE	 ind_import  = 0\n		 AND	LEGAL_ID_TYPE  is null\n		 AND	LEGAL_I"
+"D_NBR  is not null\n		\n		/* If INDIVIDUAL_ID_TYPE is not null and INDIVIDUAL_ID_NBR is null, message ?Missing inventor "
+"individual id number? */\n		INSERT INTO   ["+ context.intermediateDB + "].[dbo].VW_IMPORT_PATENT_RESULT   \n				( file_seq , \n				file_type , \n				file_series , \n				file_nbr , \n				ind_i"
+"mport , \n				msg_import )  \n		SELECT\n				 T.file_seq,\n				 T.file_type,\n				 T.file_series,\n				 T.file_nbr,\n				"
+" 2,\n				 'Missing inventor individual id number'\n		FROM   ["+ context.intermediateDB + "].[dbo].VW_import_patent_inventors T \n		 JOIN  ["+ context.intermediateDB + "].[dbo].VW_import_patent M ON T.file_seq  = M.file_seq\n			 AND	T.file_type  = M.file_type\n			 AND	T.file_series  = M."
+"file_series\n			 AND	T.file_nbr  = M.file_nbr  \n		WHERE	 ind_import  = 0\n		 AND	INDIVIDUAL_ID_TYPE  is not null\n		 AN"
+"D	INDIVIDUAL_ID_NBR  is null\n		\n		/* If INDIVIDUAL_ID_TYPE is null and INDIVIDUAL_ID_NBR is not null, message ?Missing"
+" inventor individual id type? */\n		INSERT INTO   ["+ context.intermediateDB + "].[dbo].VW_IMPORT_PATENT_RESULT   \n				( file_seq , \n				file_type , \n				file_series , \n				file_nbr , \n				ind_i"
+"mport , \n				msg_import )  \n		SELECT\n				 T.file_seq,\n				 T.file_type,\n				 T.file_series,\n				 T.file_nbr,\n				"
+" 2,\n				 'Missing inventor individual id type'\n		FROM   ["+ context.intermediateDB + "].[dbo].VW_import_patent_inventors T \n		 JOIN  ["+ context.intermediateDB + "].[dbo].VW_import_patent M ON T.file_seq  = M.file_seq\n			 AND	T.file_type  = M.file_type\n			 AND	T.file_series  = M."
+"file_series\n			 AND	T.file_nbr  = M.file_nbr  \n		WHERE	 ind_import  = 0\n		 AND	INDIVIDUAL_ID_TYPE  is null\n		 AND	IN"
+"DIVIDUAL_ID_NBR  is not null\n		\n		/* RESIDENCE_COUNTRY_CODE: if not exists in CF_GEO_COUNTRY, message ?Invalid invento"
+"r residence country code? */\n		INSERT INTO   ["+ context.intermediateDB + "].[dbo].VW_IMPORT_PATENT_RESULT   \n				( file_seq , \n				file_type , \n				file_series , \n				file_nbr , \n				ind_i"
+"mport , \n				msg_import )  \n		SELECT\n				 T.file_seq,\n				 T.file_type,\n				 T.file_series,\n				 T.file_nbr,\n				"
+" 2,\n				 'Invalid inventor residence country code'\n		FROM   ["+ context.intermediateDB + "].[dbo].VW_import_patent_inventors T \n		 JOIN  ["+ context.intermediateDB + "].[dbo].VW_import_patent M ON T.file_seq  = M.file_seq\n			 AND	T.file_type  = M.file_type\n			 AND	T.file_series  = M."
+"file_series\n			 AND	T.file_nbr  = M.file_nbr  \n		WHERE	 ind_import  = 0\n		 AND	RESIDENCE_COUNTRY_CODE  COLLATE DATABA"
+"SE_DEFAULT not in\n			(\n		 	SELECT COUNTRY_CODE\n			FROM  cf_geo_country \n			)\n		\n		/* STATE_CODE: if not null and n"
+"ot exists RESIDENCE_COUNTRY_CODE / STATE_CODE in CF_GEO_STATE, \n		       message ?Invalid inventor residence state code"
+"? */\n		INSERT INTO   ["+ context.intermediateDB + "].[dbo].VW_IMPORT_PATENT_RESULT   \n				( file_seq , \n				file_type , \n				file_series , \n				file_nbr , \n				ind_i"
+"mport , \n				msg_import )  \n		SELECT\n				 T.file_seq,\n				 T.file_type,\n				 T.file_series,\n				 T.file_nbr,\n				"
+" 2,\n				 'Invalid inventor residence state code'\n		FROM   ["+ context.intermediateDB + "].[dbo].VW_import_patent_inventors T \n		 JOIN  ["+ context.intermediateDB + "].[dbo].VW_import_patent M ON T.file_seq  = M.file_seq\n			 AND	T.file_type  = M.file_type\n			 AND	T.file_series  = M."
+"file_series\n			 AND	T.file_nbr  = M.file_nbr  \n		WHERE	 ind_import  = 0\n		 AND	STATE_CODE  is not null\n		 AND	 NOT E"
+"XISTS\n			(\n		 	SELECT\n					 cf_geo_state.COUNTRY_CODE,\n					 cf_geo_state.STATE_CODE\n			FROM  cf_geo_state \n			WHE"
+"RE	 cf_geo_state.COUNTRY_CODE  = T.RESIDENCE_COUNTRY_CODE	COLLATE DATABASE_DEFAULT \n			 AND	cf_geo_state.STATE_CODE		= "
+"T.STATE_CODE				COLLATE DATABASE_DEFAULT \n			)\n		\n		/* If STATE_CODE Is null and exist any CF_GEO_STATE with the RESI"
+"DENCE_COUNTRY_CODE, \n		       message ?A state code is required for the specified inventor residence country? */\n		INS"
+"ERT INTO   ["+ context.intermediateDB + "].[dbo].VW_IMPORT_PATENT_RESULT   \n				( file_seq , \n				file_type , \n				file_series , \n				file_nbr , \n				ind_i"
+"mport , \n				msg_import )  \n		SELECT\n				 T.file_seq,\n				 T.file_type,\n				 T.file_series,\n				 T.file_nbr,\n				"
+" 2,\n				 'A state code is required for the specified inventor residence country'\n		FROM   ["+ context.intermediateDB + "].[dbo].VW_import_patent_inventors T \n		 JOIN  ["+ context.intermediateDB + "].[dbo].VW_import_patent M ON T.file_seq  = M.file_seq\n			 AND	T.file_type  = M.file_type\n			 AND	T.file_series  = M."
+"file_series\n			 AND	T.file_nbr  = M.file_nbr  \n		WHERE	 ind_import  = 0\n		 AND	STATE_CODE  is null\n		 AND	RESIDENCE_"
+"COUNTRY_CODE  COLLATE DATABASE_DEFAULT in\n			(\n		 	SELECT country_code\n			FROM  cf_geo_state S \n			)\n		\n		/* If PE"
+"RSON_GROUP_CODE is not null and not exists in IP_PERSON_GROUP, message ?Invalid inventor person group code? */\n		INSERT"
+" INTO   ["+ context.intermediateDB + "].[dbo].VW_IMPORT_PATENT_RESULT   \n				( file_seq , \n				file_type , \n				file_series , \n				file_nbr , \n				ind_i"
+"mport , \n				msg_import )  \n		SELECT\n				 T.file_seq,\n				 T.file_type,\n				 T.file_series,\n				 T.file_nbr,\n				"
+" 2,\n				 'Invalid inventor person group code'\n		FROM   ["+ context.intermediateDB + "].[dbo].VW_import_patent_inventors T \n		 JOIN  ["+ context.intermediateDB + "].[dbo].VW_import_patent M ON T.file_seq  = M.file_seq\n			 AND	T.file_type  = M.file_type\n			 AND	T.file_series  = M."
+"file_series\n			 AND	T.file_nbr  = M.file_nbr  \n		WHERE	 ind_import  = 0\n		 AND	PERSON_GROUP_CODE  is not null\n		 AND"
+"	PERSON_GROUP_CODE  COLLATE DATABASE_DEFAULT not in\n			(\n		 	SELECT PERSON_GROUP_NBR\n			FROM  IP_PERSON_GROUP \n			)"
+"\n		\n		/* 1.1.3  ["+ context.intermediateDB + "].[dbo].VW_IMPORT_PATENT_REPRS validations */\n		/* 1.1.3.1 Representative validations */\n		/* Generate work table wit"
+"h FILE_SEQ, FILE_TYPE, FILE_SERIES, FILE_NBR, IND_SERVICE and COUNT(*) */\n		\n		\n		TRUNCATE TABLE wrk_file_service_cou"
+"nt\n\n		INSERT INTO  wrk_file_service_count    \n		SELECT\n				 FILE_SEQ,\n				 FILE_TYPE,\n				 FILE_SERIES,\n				 FILE"
+"_NBR,\n				 IND_SERVICE,\n				 COUNT(*) count1\n		FROM   ["+ context.intermediateDB + "].[dbo].VW_IMPORT_PATENT_REPRS \n		GROUP BY FILE_SEQ,\n			 FILE_TYPE,\n			 FILE_SERIES,\n			 FILE_NBR,\n			  IND_SERVIC"
+"E \n		\n		/* No service address: where a representative exists but no one has IND_SERVICE = 1, \n		       message ?No re"
+"presentative flagged as service address? */\n		INSERT INTO   ["+ context.intermediateDB + "].[dbo].VW_IMPORT_PATENT_RESULT   \n				( file_seq , \n				file_type , \n				file_series , \n				file_nbr , \n				ind_i"
+"mport , \n				msg_import )  \n		SELECT\n				 file_seq,\n				 file_type,\n				 file_series,\n				 file_nbr,\n				 2,\n			"
+"	 'No representative flagged as service address'\n		FROM   ["+ context.intermediateDB + "].[dbo].VW_import_patent M \n		WHERE	 ind_import  = 0\n		 AND	  exists\n			(\n		 	SELECT *\n			FROM  wrk_file_service_c"
+"ount W \n			WHERE	 M.file_seq  = W.file_seq\n			 AND	M.file_type  = W.file_type\n			 AND	M.file_series  = W.file_series"
+"\n			 AND	M.file_nbr  = W.file_nbr\n			)\n		 AND	NOT   exists\n			(\n		 	SELECT *\n			FROM  wrk_file_service_count W \n		"
+"	WHERE	 M.file_seq  = W.file_seq\n			 AND	M.file_type  = W.file_type\n			 AND	M.file_series  = W.file_series\n			 AND	M."
+"file_nbr  = W.file_nbr\n			 AND	ind_service  = 1\n			)\n		\n		/* Several service addresses: where exists corresponding t"
+"uple in the work table with IND_SERVICE = 1 and with count column > 1, \n		       message ?Several representatives flagg"
+"ed as service addresses? */\n		INSERT INTO   ["+ context.intermediateDB + "].[dbo].VW_IMPORT_PATENT_RESULT   \n				( file_seq , \n				file_type , \n				file_series , \n				file_nbr , \n				ind_i"
+"mport , \n				msg_import )  \n		SELECT\n				 M.file_seq,\n				 M.file_type,\n				 M.file_series,\n				 M.file_nbr,\n				"
+" 2,\n				 'Several representatives flagged as service addresses'\n		FROM   ["+ context.intermediateDB + "].[dbo].VW_import_patent M \n		 JOIN wrk_file_service_count W ON M.file_seq  = W.file_seq\n			 AND	M.file_type  = W.fil"
+"e_type\n			 AND	M.file_series  = W.file_series\n			 AND	M.file_nbr  = W.file_nbr  \n		WHERE	 ind_import  = 0\n		 AND	ind"
+"_service  = 1\n		 AND	count1  > 1\n		\n		/* REPRESENTATIVE_TYPE: if null, message ?Null representative type? */\n		INSER"
+"T INTO   ["+ context.intermediateDB + "].[dbo].VW_IMPORT_PATENT_RESULT   \n				( file_seq , \n				file_type , \n				file_series , \n				file_nbr , \n				ind_i"
+"mport , \n				msg_import )  \n		SELECT\n				 T.file_seq,\n				 T.file_type,\n				 T.file_series,\n				 T.file_nbr,\n				"
+" 2,\n				 'Null representative type'\n		FROM   ["+ context.intermediateDB + "].[dbo].VW_import_patent_reprs T \n		 JOIN  ["+ context.intermediateDB + "].[dbo].VW_import_patent M ON T.file_seq  = M.file_seq\n			 AND	T.file_type  = M.file_type\n			 AND	T.file_series  = M."
+"file_series\n			 AND	T.file_nbr  = M.file_nbr  \n		WHERE	 ind_import  = 0\n		 AND	REPRESENTATIVE_TYPE  is null\n		\n		/*"
+" REPRESENTATIVE_TYPE: if not exists in CF_REPRESENTATIVE_TYPE, message ?Invalid representative type? */\n		INSERT INTO  "
+" ["+ context.intermediateDB + "].[dbo].VW_IMPORT_PATENT_RESULT   \n				( file_seq , \n				file_type , \n				file_series , \n				file_nbr , \n				ind_i"
+"mport , \n				msg_import )  \n		SELECT\n				 T.file_seq,\n				 T.file_type,\n				 T.file_series,\n				 T.file_nbr,\n				"
+" 2,\n				 'Invalid representative type'\n		FROM   ["+ context.intermediateDB + "].[dbo].VW_import_patent_reprs T \n		 JOIN  ["+ context.intermediateDB + "].[dbo].VW_import_patent M ON T.file_seq  = M.file_seq\n			 AND	T.file_type  = M.file_type\n			 AND	T.file_series  = M."
+"file_series\n			 AND	T.file_nbr  = M.file_nbr  \n		WHERE	 ind_import  = 0\n		 AND	REPRESENTATIVE_TYPE  not in\n			(\n		 "
+"	SELECT REPRESENTATIVE_TYPE\n			FROM  CF_REPRESENTATIVE_TYPE \n			)\n		\n		/* AGENT_CODE: if not null and not exists in "
+"IF_AGENT, message ?Invalid agent code? */\n		INSERT INTO   ["+ context.intermediateDB + "].[dbo].VW_IMPORT_PATENT_RESULT   \n				( file_seq , \n				file_type , \n				file_series , \n				file_nbr , \n				ind_i"
+"mport , \n				msg_import )  \n		SELECT\n				 T.file_seq,\n				 T.file_type,\n				 T.file_series,\n				 T.file_nbr,\n				"
+" 2,\n				 'Invalid agent code'\n		FROM   ["+ context.intermediateDB + "].[dbo].VW_import_patent_reprs T \n		 JOIN  ["+ context.intermediateDB + "].[dbo].VW_import_patent M ON T.file_seq  = M.file_seq\n			 AND	T.file_type  = M.file_type\n			 AND	T.file_series  = M."
+"file_series\n			 AND	T.file_nbr  = M.file_nbr  \n		WHERE	 ind_import  = 0\n		 AND	AGENT_CODE  is not null\n		 AND	AGENT_"
+"CODE  not in\n			(\n		 	SELECT AGENT_CODE\n			FROM  IP_AGENT \n			)\n		\n		/* 1.1.3.2 Person validations */\n		/* NATION"
+"ALITY_COUNTRY_CODE: if not exists in CF_GEO_COUNTRY, message ?Invalid representative nationality country code? */\n		INS"
+"ERT INTO   ["+ context.intermediateDB + "].[dbo].VW_IMPORT_PATENT_RESULT   \n				( file_seq , \n				file_type , \n				file_series , \n				file_nbr , \n				ind_i"
+"mport , \n				msg_import )  \n		SELECT\n				 T.file_seq,\n				 T.file_type,\n				 T.file_series,\n				 T.file_nbr,\n				"
+" 2,\n				 'Invalid representative nationality country code'\n		FROM   ["+ context.intermediateDB + "].[dbo].VW_import_patent_reprs T \n		 JOIN  ["+ context.intermediateDB + "].[dbo].VW_import_patent M ON T.file_seq  = M.file_seq\n			 AND	T.file_type  = M.file_type\n			 AND	T.file_series  = M."
+"file_series\n			 AND	T.file_nbr  = M.file_nbr  \n		WHERE	 ind_import  = 0\n		 AND	NATIONALITY_COUNTRY_CODE  COLLATE DATA"
+"BASE_DEFAULT not in\n			(\n		 	SELECT COUNTRY_CODE\n			FROM  cf_geo_country \n			)\n		\n		/* LEGAL_NATURE: if not null a"
+"nd IND_COMPANY = 0, message ?Representative legal nature only applies when the person is a company? */\n		INSERT INTO   "
+"["+ context.intermediateDB + "].[dbo].VW_IMPORT_PATENT_RESULT   \n				( file_seq , \n				file_type , \n				file_series , \n				file_nbr , \n				ind_i"
+"mport , \n				msg_import )  \n		SELECT\n				 T.file_seq,\n				 T.file_type,\n				 T.file_series,\n				 T.file_nbr,\n				"
+" 2,\n				 'Representative legal nature only applies when the person is a company'\n		FROM   ["+ context.intermediateDB + "].[dbo].VW_import_patent_reprs T \n		 JOIN  ["+ context.intermediateDB + "].[dbo].VW_import_patent M ON T.file_seq  = M.file_seq\n			 AND	T.file_type  = M.file_type\n			 AND	T.file_series  = M."
+"file_series\n			 AND	T.file_nbr  = M.file_nbr  \n		WHERE	 ind_import  = 0\n		 AND	LEGAL_NATURE  is not null\n		 AND	IND_"
+"COMPANY  = 0\n		\n		/* LEGAL_ID_TYPE: if not null and not exists if CF_PERSON_ID_TYPE with IND_GENERAL_ID = ?S?, \n		   "
+"    message ?Invalid Representative legal id type? */\n		INSERT INTO   ["+ context.intermediateDB + "].[dbo].VW_IMPORT_PATENT_RESULT   \n				( file_seq , \n				file_type , \n				file_series , \n				file_nbr , \n				ind_i"
+"mport , \n				msg_import )  \n		SELECT\n				 T.file_seq,\n				 T.file_type,\n				 T.file_series,\n				 T.file_nbr,\n				"
+" 2,\n				 'Invalid representative legal id type'\n		FROM   ["+ context.intermediateDB + "].[dbo].VW_import_patent_reprs T \n		 JOIN  ["+ context.intermediateDB + "].[dbo].VW_import_patent M ON T.file_seq  = M.file_seq\n			 AND	T.file_type  = M.file_type\n			 AND	T.file_series  = M."
+"file_series\n			 AND	T.file_nbr  = M.file_nbr  \n		WHERE	 ind_import  = 0\n		 AND	LEGAL_ID_TYPE  is not null\n		 AND	LEG"
+"AL_ID_TYPE  COLLATE DATABASE_DEFAULT not in\n			(\n		 	SELECT PERSON_ID_TYP\n			FROM  CF_PERSON_ID_TYPE \n			WHERE	 IND_"
+"GENERAL_ID  = 'S'\n			)\n		\n		/* INDIVIDUAL_ID_TYPE: if not null and not exists if CF_PERSON_ID_TYPE with IND_INDIVIDUA"
+"L_ID = ?S?, \n		       message ?Invalid representative individual id type? */\n		INSERT INTO   ["+ context.intermediateDB + "].[dbo].VW_IMPORT_PATENT_RESULT   \n				( file_seq , \n				file_type , \n				file_series , \n				file_nbr , \n				ind_i"
+"mport , \n				msg_import )  \n		SELECT\n				 T.file_seq,\n				 T.file_type,\n				 T.file_series,\n				 T.file_nbr,\n				"
+" 2,\n				 'Invalid representative individual id type'\n		FROM   ["+ context.intermediateDB + "].[dbo].VW_import_patent_reprs T \n		 JOIN  ["+ context.intermediateDB + "].[dbo].VW_import_patent M ON T.file_seq  = M.file_seq\n			 AND	T.file_type  = M.file_type\n			 AND	T.file_series  = M."
+"file_series\n			 AND	T.file_nbr  = M.file_nbr  \n		WHERE	 ind_import  = 0\n		 AND	INDIVIDUAL_ID_TYPE  is not null\n		 AN"
+"D	INDIVIDUAL_ID_TYPE  COLLATE DATABASE_DEFAULT not in\n			(\n		 	SELECT PERSON_ID_TYP\n			FROM  CF_PERSON_ID_TYPE \n			W"
+"HERE	 IND_INDIVIDUAL_ID  = 'S'\n			)\n		\n		/* If LEGAL_ID_TYPE is not null and LEGAL_ID_NBR is null, message ?Missing r"
+"epresentative legal id number? */\n		INSERT INTO   ["+ context.intermediateDB + "].[dbo].VW_IMPORT_PATENT_RESULT   \n				( file_seq , \n				file_type , \n				file_series , \n				file_nbr , \n				ind_i"
+"mport , \n				msg_import )  \n		SELECT\n				 T.file_seq,\n				 T.file_type,\n				 T.file_series,\n				 T.file_nbr,\n				"
+" 2,\n				 'Missing representative legal id number'\n		FROM   ["+ context.intermediateDB + "].[dbo].VW_import_patent_reprs T \n		 JOIN  ["+ context.intermediateDB + "].[dbo].VW_import_patent M ON T.file_seq  = M.file_seq\n			 AND	T.file_type  = M.file_type\n			 AND	T.file_series  = M."
+"file_series\n			 AND	T.file_nbr  = M.file_nbr  \n		WHERE	 ind_import  = 0\n		 AND	LEGAL_ID_TYPE  is not null\n		 AND	LEG"
+"AL_ID_NBR  is null\n		\n		/* If LEGAL_ID_TYPE is null and LEGAL_ID_NBR is not null, message ?Missing representative lega"
+"l id type? */\n		INSERT INTO   ["+ context.intermediateDB + "].[dbo].VW_IMPORT_PATENT_RESULT   \n				( file_seq , \n				file_type , \n				file_series , \n				file_nbr , \n				ind_i"
+"mport , \n				msg_import )  \n		SELECT\n				 T.file_seq,\n				 T.file_type,\n				 T.file_series,\n				 T.file_nbr,\n				"
+" 2,\n				 'Missing representative legal id type'\n		FROM   ["+ context.intermediateDB + "].[dbo].VW_import_patent_reprs T \n		 JOIN  ["+ context.intermediateDB + "].[dbo].VW_import_patent M ON T.file_seq  = M.file_seq\n			 AND	T.file_type  = M.file_type\n			 AND	T.file_series  = M."
+"file_series\n			 AND	T.file_nbr  = M.file_nbr  \n		WHERE	 ind_import  = 0\n		 AND	LEGAL_ID_TYPE  is null\n		 AND	LEGAL_I"
+"D_NBR  is not null\n		\n		/* If INDIVIDUAL_ID_TYPE is not null and INDIVIDUAL_ID_NBR is null, message ?Missing represent"
+"ative individual id number? */\n		INSERT INTO   ["+ context.intermediateDB + "].[dbo].VW_IMPORT_PATENT_RESULT   \n				( file_seq , \n				file_type , \n				file_series , \n				file_nbr , \n				ind_i"
+"mport , \n				msg_import )  \n		SELECT\n				 T.file_seq,\n				 T.file_type,\n				 T.file_series,\n				 T.file_nbr,\n				"
+" 2,\n				 'Missing representative individual id number'\n		FROM   ["+ context.intermediateDB + "].[dbo].VW_import_patent_reprs T \n		 JOIN  ["+ context.intermediateDB + "].[dbo].VW_import_patent M ON T.file_seq  = M.file_seq\n			 AND	T.file_type  = M.file_type\n			 AND	T.file_series  = M."
+"file_series\n			 AND	T.file_nbr  = M.file_nbr  \n		WHERE	 ind_import  = 0\n		 AND	INDIVIDUAL_ID_TYPE  is not null\n		 AN"
+"D	INDIVIDUAL_ID_NBR  is null\n		\n		/* If INDIVIDUAL_ID_TYPE is null and INDIVIDUAL_ID_NBR is not null, message ?Missing"
+" representative individual id type? */\n		INSERT INTO   ["+ context.intermediateDB + "].[dbo].VW_IMPORT_PATENT_RESULT   \n				( file_seq , \n				file_type , \n				file_series , \n				file_nbr , \n				ind_i"
+"mport , \n				msg_import )  \n		SELECT\n				 T.file_seq,\n				 T.file_type,\n				 T.file_series,\n				 T.file_nbr,\n				"
+" 2,\n				 'Missing representative individual id type'\n		FROM   ["+ context.intermediateDB + "].[dbo].VW_import_patent_reprs T \n		 JOIN  ["+ context.intermediateDB + "].[dbo].VW_import_patent M ON T.file_seq  = M.file_seq\n			 AND	T.file_type  = M.file_type\n			 AND	T.file_series  = M."
+"file_series\n			 AND	T.file_nbr  = M.file_nbr  \n		WHERE	 ind_import  = 0\n		 AND	INDIVIDUAL_ID_TYPE  is null\n		 AND	IN"
+"DIVIDUAL_ID_NBR  is not null\n		\n		/* RESIDENCE_COUNTRY_CODE: if not exists in CF_GEO_COUNTRY, message ?Invalid represe"
+"ntative residence country code? */\n		INSERT INTO   ["+ context.intermediateDB + "].[dbo].VW_IMPORT_PATENT_RESULT   \n				( file_seq , \n				file_type , \n				file_series , \n				file_nbr , \n				ind_i"
+"mport , \n				msg_import )  \n		SELECT\n				 T.file_seq,\n				 T.file_type,\n				 T.file_series,\n				 T.file_nbr,\n				"
+" 2,\n				 'Invalid representative residence country code'\n		FROM   ["+ context.intermediateDB + "].[dbo].VW_import_patent_reprs T  \n		 JOIN  ["+ context.intermediateDB + "].[dbo].VW_import_patent M ON T.file_seq  = M.file_seq\n			 AND	T.file_type  = M.file_type\n			 AND	T.file_series  = M."
+"file_series\n			 AND	T.file_nbr  = M.file_nbr  \n		WHERE	 ind_import  = 0\n		 AND	RESIDENCE_COUNTRY_CODE  COLLATE DATABA"
+"SE_DEFAULT not in\n			(\n		 	SELECT COUNTRY_CODE\n			FROM  cf_geo_country \n			)\n		\n		/* STATE_CODE: if not null and n"
+"ot exists RESIDENCE_COUNTRY_CODE / STATE_CODE in CF_GEO_STATE, \n		       message ?Invalid representative residence stat"
+"e code? */\n		INSERT INTO   ["+ context.intermediateDB + "].[dbo].VW_IMPORT_PATENT_RESULT   \n				( file_seq , \n				file_type , \n				file_series , \n				file_nbr , \n				ind_i"
+"mport , \n				msg_import )  \n		SELECT\n				 T.file_seq,\n				 T.file_type,\n				 T.file_series,\n				 T.file_nbr,\n				"
+" 2,\n				 'Invalid representative residence state code'\n		FROM   ["+ context.intermediateDB + "].[dbo].VW_import_patent_reprs T \n		 JOIN  ["+ context.intermediateDB + "].[dbo].VW_import_patent M ON T.file_seq  = M.file_seq\n			 AND	T.file_type  = M.file_type\n			 AND	T.file_series  = M."
+"file_series\n			 AND	T.file_nbr  = M.file_nbr  \n		WHERE	 ind_import  = 0\n		 AND	STATE_CODE  is not null\n		 AND	 NOT E"
+"XISTS\n			(\n		 	SELECT\n					 cf_geo_state.COUNTRY_CODE,\n					 cf_geo_state.STATE_CODE\n			FROM  cf_geo_state \n			WHE"
+"RE	 cf_geo_state.COUNTRY_CODE  = T.RESIDENCE_COUNTRY_CODE	COLLATE DATABASE_DEFAULT \n			 AND	cf_geo_state.STATE_CODE		= "
+"T.STATE_CODE				COLLATE DATABASE_DEFAULT \n			)\n		\n		/* If STATE_CODE Is null and exist any CF_GEO_STATE with the RESI"
+"DENCE_COUNTRY_CODE, \n		       message ?A state code is required for the specified representative residence country? */"
+"\n		INSERT INTO   ["+ context.intermediateDB + "].[dbo].VW_IMPORT_PATENT_RESULT   \n				( file_seq , \n				file_type , \n				file_series , \n				file_nbr , \n				ind_i"
+"mport , \n				msg_import )  \n		SELECT\n				 T.file_seq,\n				 T.file_type,\n				 T.file_series,\n				 T.file_nbr,\n				"
+" 2,\n				 'A state code is required for the specified representative residence country'\n		FROM   ["+ context.intermediateDB + "].[dbo].VW_import_patent_reprs T \n		 JOIN  ["+ context.intermediateDB + "].[dbo].VW_import_patent M ON T.file_seq  = M.file_seq\n			 AND	T.file_type  = M.file_type\n			 AND	T.file_series  = M."
+"file_series\n			 AND	T.file_nbr  = M.file_nbr  \n		WHERE	 ind_import  = 0\n		 AND	STATE_CODE  is null\n		 AND	RESIDENCE_"
+"COUNTRY_CODE COLLATE DATABASE_DEFAULT  in\n			(\n		 	SELECT country_code\n			FROM  cf_geo_state \n			)\n		\n		/* If PERS"
+"ON_GROUP_CODE is not null and not exists in IP_PERSON_GROUP, message ?Invalid representative person group code? */\n		IN"
+"SERT INTO   ["+ context.intermediateDB + "].[dbo].VW_IMPORT_PATENT_RESULT   \n				( file_seq , \n				file_type , \n				file_series , \n				file_nbr , \n				ind_i"
+"mport , \n				msg_import )  \n		SELECT\n				 T.file_seq,\n				 T.file_type,\n				 T.file_series,\n				 T.file_nbr,\n				"
+" 2,\n				 'Invalid representative person group code'\n		FROM   ["+ context.intermediateDB + "].[dbo].VW_import_patent_reprs T \n		 JOIN  ["+ context.intermediateDB + "].[dbo].VW_import_patent M ON T.file_seq  = M.file_seq\n			 AND	T.file_type  = M.file_type\n			 AND	T.file_series  = M."
+"file_series\n			 AND	T.file_nbr  = M.file_nbr  \n		WHERE	 ind_import  = 0\n		 AND	PERSON_GROUP_CODE  is not null\n		 AND"
+"	PERSON_GROUP_CODE  COLLATE DATABASE_DEFAULT not in\n			(\n		 	SELECT PERSON_GROUP_NBR\n			FROM  IP_PERSON_GROUP \n			)"
+"\n		\n		/* 1.1.4  ["+ context.intermediateDB + "].[dbo].VW_IMPORT_PATENT_PRIORITIES validations */\n		/* COUNTRY_CODE: if not exists in CF_GEO_COUNTRY, message ?Invali"
+"d priority country code? */\n		INSERT INTO   ["+ context.intermediateDB + "].[dbo].VW_IMPORT_PATENT_RESULT   \n				( file_seq , \n				file_type , \n				file_series , \n				file_nbr , \n				ind_i"
+"mport , \n				msg_import )  \n		SELECT\n				 T.file_seq,\n				 T.file_type,\n				 T.file_series,\n				 T.file_nbr,\n				"
+" 2,\n				 'Invalid priority country code'\n		FROM   ["+ context.intermediateDB + "].[dbo].VW_import_patent_priorities T \n		 JOIN  ["+ context.intermediateDB + "].[dbo].VW_import_patent M ON T.file_seq  = M.file_seq\n			 AND	T.file_type  = M.file_type\n			 AND	T.file_series  = M."
+"file_series\n			 AND	T.file_nbr  = M.file_nbr  \n		WHERE	 ind_import  = 0\n		 AND	COUNTRY_CODE  COLLATE DATABASE_DEFAULT"
+" not in\n			(\n		 	SELECT COUNTRY_CODE\n			FROM  CF_GEO_COUNTRY \n			)\n		\n		/* Generate work table with FILE_SEQ, FILE"
+"_TYPE, FILE_SERIES, FILE_NBR, APPLICATION_ID and COUNT(*) */\n		\n		\n		TRUNCATE TABLE wrk_file_priority_count\n\n		INSE"
+"RT INTO  wrk_file_priority_count    \n		SELECT\n				 FILE_SEQ,\n				 FILE_TYPE,\n				 FILE_SERIES,\n				 FILE_NBR,\n				"
+" APPLICATION_ID,\n				 COUNT(*) count1\n		FROM   ["+ context.intermediateDB + "].[dbo].VW_IMPORT_PATENT_PRIORITIES \n		GROUP BY FILE_SEQ,\n			 FILE_TYPE,\n			 FILE_SERIES,\n			 FILE_NBR,\n			  APPLI"
+"CATION_ID \n		\n		/* Duplicate application id: where exists corresponding tuple in the work table with the same APPLICAT"
+"ION_ID \n		       and with count column > 1, message ?Several priorities use the same application id? */\n		INSERT INTO "
+"  ["+ context.intermediateDB + "].[dbo].VW_IMPORT_PATENT_RESULT   \n				( file_seq , \n				file_type , \n				file_series , \n				file_nbr , \n				ind_i"
+"mport , \n				msg_import )  \n		SELECT\n				 M.file_seq,\n				 M.file_type,\n				 M.file_series,\n				 M.file_nbr,\n				"
+" 2,\n				 'Several priorities use the same application id'\n		FROM   ["+ context.intermediateDB + "].[dbo].VW_import_patent_priorities T \n		 JOIN  ["+ context.intermediateDB + "].[dbo].VW_import_patent M ON T.file_seq  = M.file_seq\n			 AND	T.file_type  = M.file_type\n			 AND	T.file_series  = M."
+"file_series\n			 AND	T.file_nbr  = M.file_nbr  \n		 JOIN wrk_file_priority_count W ON T.file_seq  = W.file_seq\n			 AND	"
+"T.file_type  = W.file_type\n			 AND	T.file_series  = W.file_series\n			 AND	T.file_nbr  = W.file_nbr\n			 AND	T.applicat"
+"ion_id  = W.application_id  \n		WHERE	 ind_import  = 0\n		 AND	count1  > 1\n		\n		/* 1.1.5  ["+ context.intermediateDB + "].[dbo].VW_IMPORT_PATENT_IPC_CLASSES validations */\n		/* If IPC not exists in CF_CLASS_IPC, message ?Invalid IPC class"
+"? */\n		INSERT INTO   ["+ context.intermediateDB + "].[dbo].VW_IMPORT_PATENT_RESULT   \n				( file_seq , \n				file_type , \n				file_series , \n				file_nbr , \n				ind_i"
+"mport , \n				msg_import )  \n		SELECT\n				 T.file_seq,\n				 T.file_type,\n				 T.file_series,\n				 T.file_nbr,\n				"
+" 2,\n				 'Invalid IPC class'\n		FROM   ["+ context.intermediateDB + "].[dbo].VW_import_patent_ipc_classes T \n		 JOIN  ["+ context.intermediateDB + "].[dbo].VW_import_patent M ON T.file_seq  = M.file_seq\n			 AND	T.file_type  = M.file_type\n			 AND	T.file_series  = M."
+"file_series\n			 AND	T.file_nbr  = M.file_nbr  \n		WHERE	 ind_import  = 0\n		 AND	 NOT EXISTS\n			(\n		 	SELECT\n					 C"
+"F_CLASS_IPC.ipc_edition_code,\n					 CF_CLASS_IPC.ipc_section_code,\n					 CF_CLASS_IPC.ipc_class_code,\n					 CF_CLASS_"
+"IPC.ipc_subclass_code,\n					 CF_CLASS_IPC.ipc_group_code,\n					 CF_CLASS_IPC.ipc_subgroup_code\n			FROM  CF_CLASS_IPC "
+"\n			WHERE	 CF_CLASS_IPC.ipc_edition_code  = T.IPC_EDITION		COLLATE DATABASE_DEFAULT \n			 AND	CF_CLASS_IPC.ipc_section_"
+"code  = T.IPC_SECTION		COLLATE DATABASE_DEFAULT \n			 AND	CF_CLASS_IPC.ipc_class_code  = T.IPC_CLASS			COLLATE DATABASE_"
+"DEFAULT \n			 AND	CF_CLASS_IPC.ipc_subclass_code  = T.IPC_SUBCLASS	COLLATE DATABASE_DEFAULT \n			 AND	CF_CLASS_IPC.ipc_g"
+"roup_code  = T.IPC_GROUP			COLLATE DATABASE_DEFAULT \n			 AND	CF_CLASS_IPC.ipc_subgroup_code  = T.IPC_SUBGROUP	COLLATE D"
+"ATABASE_DEFAULT \n			)\n		\n		/* Generate work table with IPC class and COUNT(*) */\n		TRUNCATE TABLE wrk_file_detail_co"
+"unt\n\n		INSERT INTO  wrk_file_detail_count    \n		SELECT\n				 FILE_SEQ,\n				 FILE_TYPE,\n				 FILE_SERIES,\n				 FILE"
+"_NBR,\n				 CAST(IPC_EDITION AS VARCHAR) + CAST(IPC_SECTION AS VARCHAR) + CAST(IPC_CLASS AS VARCHAR) + CAST(IPC_SUBCLASS"
+" AS VARCHAR) + CAST(IPC_GROUP AS VARCHAR) + CAST(IPC_SUBGROUP AS VARCHAR),\n				 COUNT(*) count1\n		FROM   ["+ context.intermediateDB + "].[dbo].VW_IMPORT_PATENT_IPC_CLASSES \n		GROUP BY FILE_SEQ,\n			 FILE_TYPE,\n			 FILE_SERIES,\n			 FILE_NBR,\n			  CAST"
+"(IPC_EDITION AS VARCHAR) + CAST(IPC_SECTION AS VARCHAR) + CAST(IPC_CLASS AS VARCHAR) + CAST(IPC_SUBCLASS AS VARCHAR) + C"
+"AST(IPC_GROUP AS VARCHAR) + CAST(IPC_SUBGROUP AS VARCHAR) \n		\n		/* If several tuples exist for the same IPC class, mes"
+"sage ?Several IPC classes with the same number? */\n		INSERT INTO   ["+ context.intermediateDB + "].[dbo].VW_IMPORT_PATENT_RESULT   \n				( file_seq , \n				file_type , \n				file_series , \n				file_nbr , \n				ind_i"
+"mport , \n				msg_import )  \n		SELECT\n				 M.file_seq,\n				 M.file_type,\n				 M.file_series,\n				 M.file_nbr,\n				"
+" 2,\n				 'Several IPC classes with the same number'\n		FROM   ["+ context.intermediateDB + "].[dbo].VW_import_patent M \n		 JOIN wrk_file_detail_count W ON M.file_seq  = W.file_seq\n			 AND	M.file_type  = W.file"
+"_type\n			 AND	M.file_series  = W.file_series\n			 AND	M.file_nbr  = W.file_nbr  \n		WHERE	 ind_import  = 0\n		 AND	coun"
+"t1  > 1\n		\n		/* 1.1.6  ["+ context.intermediateDB + "].[dbo].VW_IMPORT_PATENT_LOCAR_CLASSES validations */\n		/* If Locarno is null, message ?Locarno class/subclass is null"
+"? */\n		INSERT INTO   ["+ context.intermediateDB + "].[dbo].VW_IMPORT_PATENT_RESULT   \n				( file_seq , \n				file_type , \n				file_series , \n				file_nbr , \n				ind_i"
+"mport , \n				msg_import )  \n		SELECT\n				 T.file_seq,\n				 T.file_type,\n				 T.file_series,\n				 T.file_nbr,\n				"
+" 2,\n				 'Locarno class/subclass is null'\n		FROM   ["+ context.intermediateDB + "].[dbo].VW_import_patent_locar_classes T \n		 JOIN  ["+ context.intermediateDB + "].[dbo].VW_import_patent M ON T.file_seq  = M.file_seq\n			 AND	T.file_type  = M.file_type\n			 AND	T.file_series  = M."
+"file_series\n			 AND	T.file_nbr  = M.file_nbr  \n		WHERE	 ind_import  = 0\n		 AND	( (LOCARNO_CLASS_NBR is null or\n     "
+"                    LOCARNO_SUBCLASS_NBR is null) and  ( LOCARNO_EDITION_CODE NOT In (select LOCARNO_EDITION_CODE from  "
+" CF_CLASS_LOCARNO) ) )\n                         \n		\n		/* If Locarno not exists in CF_CLASS_LOCARNO, message ?Invalid "
+"Locarno class? */\n		INSERT INTO   ["+ context.intermediateDB + "].[dbo].VW_IMPORT_PATENT_RESULT   \n				( file_seq , \n				file_type , \n				file_series , \n				file_nbr , \n				ind_i"
+"mport , \n				msg_import )  \n		SELECT\n				 T.file_seq,\n				 T.file_type,\n				 T.file_series,\n				 T.file_nbr,\n				"
+" 2,\n				 'Invalid Locarno class'\n		FROM   ["+ context.intermediateDB + "].[dbo].VW_import_patent_locar_classes T \n		 JOIN  ["+ context.intermediateDB + "].[dbo].VW_import_patent M ON T.file_seq  = M.file_seq\n			 AND	T.file_type  = M.file_type\n			 AND	T.file_series  = M."
+"file_series\n			 AND	T.file_nbr  = M.file_nbr  \n		WHERE	 ind_import  = 0\n		 AND	(right('0' + CONVERT(varchar, LOCARNO_"
+"CLASS_NBR), 2) + '-' + right('0' + CONVERT(varchar, LOCARNO_SUBCLASS_NBR), 2))  not in\n			(\n		 	SELECT locarno_class_c"
+"ode\n			FROM  CF_CLASS_LOCARNO \n			)\n		\n		/* Generate work table with FILE_SEQ, FILE_TYPE, FILE_SERIES, FILE_NBR, Loc"
+"arno class and COUNT(*) */\n		TRUNCATE TABLE wrk_file_detail_count\n\n		INSERT INTO  wrk_file_detail_count    \n		SELECT"
+"\n				 FILE_SEQ,\n				 FILE_TYPE,\n				 FILE_SERIES,\n				 FILE_NBR,\n				 CAST(CONVERT(VARCHAR(23), LOCARNO_CLASS_NBR) "
+"AS VARCHAR) + '-' + CAST(CONVERT(VARCHAR(23), LOCARNO_SUBCLASS_NBR) AS VARCHAR),\n				 COUNT(*)\n		FROM   ["+ context.intermediateDB + "].[dbo].VW_IMPORT_PATENT_LOCAR_CLASSES \n		GROUP BY FILE_SEQ,\n				 FILE_TYPE,\n				 FILE_SERIES,\n				 FILE_NBR,\n				"
+" CAST(CONVERT(VARCHAR(23), LOCARNO_CLASS_NBR) AS VARCHAR) + '-' + CAST(CONVERT(VARCHAR(23), LOCARNO_SUBCLASS_NBR) AS VAR"
+"CHAR)\n		\n		/* If several tuples exist for the same Locarno class, message ?Several Locarno classes with the same numbe"
+"r? */\n		INSERT INTO   ["+ context.intermediateDB + "].[dbo].VW_IMPORT_PATENT_RESULT   \n				( file_seq , \n				file_type , \n				file_series , \n				file_nbr , \n				ind_i"
+"mport , \n				msg_import )  \n		SELECT\n				 M.file_seq,\n				 M.file_type,\n				 M.file_series,\n				 M.file_nbr,\n				"
+" 2,\n				 'Several Locarno classes with the same number'\n		FROM   ["+ context.intermediateDB + "].[dbo].VW_import_patent M \n		 JOIN wrk_file_detail_count W ON M.file_seq  = W.file_seq\n			 AND	M.file_type  = W.file"
+"_type\n			 AND	M.file_series  = W.file_series\n			 AND	M.file_nbr  = W.file_nbr  \n		WHERE	 ind_import  = 0\n		 AND	coun"
+"t1  > 1\n		\n		/* 1.1.7  ["+ context.intermediateDB + "].[dbo].VW_IMPORT_PATENT_DRAWINGS validations */\n		/* Generate work table with drawing nbr and COUNT(*) */\n		TRUNCATE"
+" TABLE wrk_file_detail_count\n\n		INSERT INTO  wrk_file_detail_count    \n		SELECT\n				 FILE_SEQ,\n				 FILE_TYPE,\n			"
+"	 FILE_SERIES,\n				 FILE_NBR,\n				 CAST(DRAWING_NBR AS VARCHAR),\n				 COUNT(*) count1\n		FROM   ["+ context.intermediateDB + "].[dbo].VW_IMPORT_PATENT_DRAWINGS \n		GROUP BY FILE_SEQ,\n			 FILE_TYPE,\n			 FILE_SERIES,\n			 FILE_NBR,\n			 CAST(DRA"
+"WING_NBR AS VARCHAR)\n		\n		/* If several tuples exist for the same drawing nbr, message ?Several drawings with the same"
+" number? */\n		INSERT INTO   ["+ context.intermediateDB + "].[dbo].VW_IMPORT_PATENT_RESULT   \n				( file_seq , \n				file_type , \n				file_series , \n				file_nbr , \n				ind_i"
+"mport , \n				msg_import )  \n		SELECT\n				 M.file_seq,\n				 M.file_type,\n				 M.file_series,\n				 M.file_nbr,\n				"
+" 2,\n				 'Several drawings with the same number'\n		FROM   ["+ context.intermediateDB + "].[dbo].VW_import_patent M \n		 JOIN wrk_file_detail_count W ON M.file_seq  = W.file_seq\n			 AND	M.file_type  = W.file"
+"_type\n			 AND	M.file_series  = W.file_series\n			 AND	M.file_nbr  = W.file_nbr  \n		WHERE	 ind_import  = 0\n		 AND	coun"
+"t1  > 1\n		\n		/* 1.1.8  ["+ context.intermediateDB + "].[dbo].VW_IMPORT_PATENT_PAYMENTS validations */\n		/* RECEIPT_TYPE: if not exists in CF_RECEIPT_TYPE, message ?Invalid"
+" receipt type? */\n		INSERT INTO   ["+ context.intermediateDB + "].[dbo].VW_IMPORT_PATENT_RESULT   \n				( file_seq , \n				file_type , \n				file_series , \n				file_nbr , \n				ind_i"
+"mport , \n				msg_import )  \n		SELECT\n				 T.file_seq,\n				 T.file_type,\n				 T.file_series,\n				 T.file_nbr,\n				"
+" 2,\n				 'Invalid receipt type'\n		FROM   ["+ context.intermediateDB + "].[dbo].VW_import_patent_payments T \n		 JOIN  ["+ context.intermediateDB + "].[dbo].VW_import_patent M ON T.file_seq  = M.file_seq\n			 AND	T.file_type  = M.file_type\n			 AND	T.file_series  = M."
+"file_series\n			 AND	T.file_nbr  = M.file_nbr  \n		WHERE	 ind_import  = 0\n		 AND	RECEIPT_TYPE  COLLATE DATABASE_DEFAULT"
+" not in\n			(\n		 	SELECT RECEIPT_TYP\n			FROM  CF_RECEIPT_TYPE \n			)\n		\n		/* CURRENCY_TYPE: if not exists in CF_CURR"
+"ENCY_TYPE, message ?Invalid currency type? */\n		INSERT INTO   ["+ context.intermediateDB + "].[dbo].VW_IMPORT_PATENT_RESULT   \n				( file_seq , \n				file_type , \n				file_series , \n				file_nbr , \n				ind_i"
+"mport , \n				msg_import )  \n		SELECT\n				 T.file_seq,\n				 T.file_type,\n				 T.file_series,\n				 T.file_nbr,\n				"
+" 2,\n				 'Invalid currency type'\n		FROM   ["+ context.intermediateDB + "].[dbo].VW_import_patent_payments T \n		 JOIN  ["+ context.intermediateDB + "].[dbo].VW_import_patent M ON T.file_seq  = M.file_seq\n			 AND	T.file_type  = M.file_type\n			 AND	T.file_series  = M."
+"file_series\n			 AND	T.file_nbr  = M.file_nbr  \n		WHERE	 ind_import  = 0\n		 AND	CURRENCY_TYPE  COLLATE DATABASE_DEFAUL"
+"T not in\n			(\n		 	SELECT CURRENCY_TYP\n			FROM  CF_CURRENCY_TYPE \n			)\n		\n		/* Generate work table with FILE_SEQ / "
+"TYPE / SERIES / NBR, RECEIPT_NBR and COUNT(*) */\n		TRUNCATE TABLE wrk_file_payment_count\n\n		INSERT INTO  wrk_file_pay"
+"ment_count    \n		SELECT\n				 FILE_SEQ,\n				 FILE_TYPE,\n				 FILE_SERIES,\n				 FILE_NBR,\n				 RECEIPT_NBR,\n				 CO"
+"UNT(*) count1\n		FROM   ["+ context.intermediateDB + "].[dbo].VW_IMPORT_PATENT_PAYMENTS \n		GROUP BY FILE_SEQ,\n			 FILE_TYPE,\n			 FILE_SERIES,\n			 FILE_NBR,\n			  RECEIPT"
+"_NBR \n		\n		/* Several payments with same receipt nbr: where exists corresponding tuple in the work table with \n		    "
+"  count column > 1, message ?Several payments with the same receipt number? */\n		INSERT INTO   ["+ context.intermediateDB + "].[dbo].VW_IMPORT_PATENT_RESULT   \n				( file_seq , \n				file_type , \n				file_series , \n				file_nbr , \n				ind_i"
+"mport , \n				msg_import )  \n		SELECT\n				 T.file_seq,\n				 T.file_type,\n				 T.file_series,\n				 T.file_nbr,\n				"
+" 2,\n				 'Several payments with the same receipt number'\n		FROM   ["+ context.intermediateDB + "].[dbo].VW_import_patent_payments T \n		 JOIN  ["+ context.intermediateDB + "].[dbo].VW_import_patent M ON T.file_seq  = M.file_seq\n			 AND	T.file_type  = M.file_type\n			 AND	T.file_series  = M."
+"file_series\n			 AND	T.file_nbr  = M.file_nbr  \n		 JOIN wrk_file_payment_count W ON T.file_seq  = W.file_seq\n			 AND	T"
+".file_type  = W.file_type\n			 AND	T.file_series  = W.file_series\n			 AND	T.file_nbr  = W.file_nbr  \n		WHERE	 ind_impo"
+"rt  = 0\n		 AND	count1  > 1\n		\n		/* 1.1.9  ["+ context.intermediateDB + "].[dbo].VW_IMPORT_PATENT_ACTIONS validations */\n		/* If CF_APPLICATION_TYPE.GENERATE_PROC_TYP is null, message ?The ap"
+"plication type is not configured so as to generate a process? */\n		INSERT INTO   ["+ context.intermediateDB + "].[dbo].VW_IMPORT_PATENT_RESULT   \n				( file_seq , \n				file_type , \n				file_series , \n				file_nbr , \n				ind_i"
+"mport , \n				msg_import )  \n		SELECT\n				 T.file_seq,\n				 T.file_type,\n				 T.file_series,\n				 T.file_nbr,\n				"
+" 2,\n				 'The application type is not configured so as to generate a process'\n		FROM   ["+ context.intermediateDB + "].[dbo].VW_import_patent_actions T \n		 JOIN  ["+ context.intermediateDB + "].[dbo].VW_import_patent M ON T.file_seq  = M.file_seq\n			 AND	T.file_type  = M.file_type\n			 AND	T.file_series  = M."
+"file_series\n			 AND	T.file_nbr  = M.file_nbr  \n		 JOIN cf_application_type AT ON M.application_type  = AT.appl_typ	COL"
+"LATE DATABASE_DEFAULT  \n		WHERE	 GENERATE_PROC_TYP  is null\n		\n		/* ACTION_TYPE: if not exists in CF_ACTION_TYPE, mes"
+"sage ?Invalid action type? */\n		/* Performace note: join with  ["+ context.intermediateDB + "].[dbo].VW_IMPORT_PATENT to select patents with IND_IMPORT = 0 */\n		INSERT INTO   ["+ context.intermediateDB + "].[dbo].VW_IMPORT_PATENT_RESULT   \n				( file_seq , \n				file_type , \n				file_series , \n				file_nbr , \n				ind_i"
+"mport , \n				msg_import )  \n		SELECT\n				 T.file_seq,\n				 T.file_type,\n				 T.file_series,\n				 T.file_nbr,\n				"
+" 2,\n				 'Invalid action type'\n		FROM   ["+ context.intermediateDB + "].[dbo].VW_import_patent_actions T \n		WHERE	 ACTION_TYPE  COLLATE DATABASE_DEFAULT not in\n			(\n		 	SELECT action_typ"
+"\n			FROM  cf_action_type \n			)\n		\n		/* SPECIAL_FINAL_STATUS: if not null and ACTION_CATEGORY in A / N, message ?Spec"
+"ial final status is only applicable for special actions? */\n		INSERT INTO   ["+ context.intermediateDB + "].[dbo].VW_IMPORT_PATENT_RESULT   \n				( file_seq , \n				file_type , \n				file_series , \n				file_nbr , \n				ind_i"
+"mport , \n				msg_import )  \n		SELECT\n				 T.file_seq,\n				 T.file_type,\n				 T.file_series,\n				 T.file_nbr,\n				"
+" 2,\n				 'Special final status is only applicable for special actions'\n		FROM   ["+ context.intermediateDB + "].[dbo].VW_import_patent_actions T \n		WHERE	 SPECIAL_FINAL_STATUS  is not null\n		 AND	ACTION_CATEGORY  in ( 'A'  , 'N"
+"'  )\n		\n		/* If ACTION_CATEGORY is S and SPECIAL_FINAL_STATUS is null, message ?Special final status is required? */\n"
+"		INSERT INTO   ["+ context.intermediateDB + "].[dbo].VW_IMPORT_PATENT_RESULT   \n				( file_seq , \n				file_type , \n				file_series , \n				file_nbr , \n				ind_i"
+"mport , \n				msg_import )  \n		SELECT\n				 T.file_seq,\n				 T.file_type,\n				 T.file_series,\n				 T.file_nbr,\n				"
+" 2,\n				 'Special final status is required'\n		FROM   ["+ context.intermediateDB + "].[dbo].VW_import_patent_actions T \n		WHERE	 SPECIAL_FINAL_STATUS  is null\n		 AND	ACTION_CATEGORY  = 'S'\n		\n		/* If"
+" SPECIAL_FINAL_STATUS is not null and proc_typ / SPECIAL_FINAL_STATUS not exists in CF_STATUS \n		       (where proc_typ"
+" is CF_APPLICATION_TYPE.GENERATE_PROC_TYP for the corresponding application type), \n		       message ?Special final sta"
+"tus is not a valid status in the process type associated to the application type? */\n		INSERT INTO   ["+ context.intermediateDB + "].[dbo].VW_IMPORT_PATENT_RESULT   \n				( file_seq , \n				file_type , \n				file_series , \n				file_nbr , \n				ind_i"
+"mport , \n				msg_import )  \n		SELECT\n				 T.file_seq,\n				 T.file_type,\n				 T.file_series,\n				 T.file_nbr,\n				"
+" 2,\n				 'Special final status is not a valid status in the process type associated to the application type'\n		FROM   "
+"["+ context.intermediateDB + "].[dbo].VW_import_patent_actions T \n		 JOIN  ["+ context.intermediateDB + "].[dbo].VW_import_patent M ON T.file_seq  = M.file_seq\n			 AND	T.file_type  = M.file_type\n			 AND	T.file_series  = M."
+"file_series\n			 AND	T.file_nbr  = M.file_nbr  \n		 JOIN cf_application_type AT ON M.application_type  = AT.appl_typ	COL"
+"LATE DATABASE_DEFAULT \n		WHERE	 SPECIAL_FINAL_STATUS  is not null\n		 AND	 NOT EXISTS\n			(\n		 	SELECT\n					 cf_statu"
+"s.proc_typ,\n					 cf_status.status_code\n			FROM  cf_status \n			WHERE	 cf_status.proc_typ		= AT.GENERATE_PROC_TYP		COL"
+"LATE DATABASE_DEFAULT \n			 AND	cf_status.status_code	= T.SPECIAL_FINAL_STATUS	COLLATE DATABASE_DEFAULT \n			)\n		\n		/*"
+" If SPECIAL_FINAL_STATUS is not null and proc_typ / SPECIAL_FINAL_STATUS is origin for \n		       a due date automatic a"
+"ction, then MANUAL_DUE_DATE must not be null. \n		       Otherwise, message ?Special final status is origin for a 'date "
+"is due' automatic action, but manual due date is null? */\n		INSERT INTO   ["+ context.intermediateDB + "].[dbo].VW_IMPORT_PATENT_RESULT   \n				( file_seq , \n				file_type , \n				file_series , \n				file_nbr , \n				ind_i"
+"mport , \n				msg_import )  \n		SELECT\n				 T.file_seq,\n				 T.file_type,\n				 T.file_series,\n				 T.file_nbr,\n				"
+" 2,\n				 'Special final status is origin for a date is due automatic action, but manual due date is null'\n		FROM   ["+ context.intermediateDB + "].[dbo].VW_import_patent_actions T \n		 JOIN  ["+ context.intermediateDB + "].[dbo].VW_import_patent M ON T.file_seq  = M.file_seq\n			 AND	T.file_type  = M.file_type\n			 AND	T.file_series  = M."
+"file_series\n			 AND	T.file_nbr  = M.file_nbr  \n		 JOIN cf_application_type AT ON M.application_type  = AT.appl_typ	COL"
+"LATE DATABASE_DEFAULT \n	WHERE	SPECIAL_FINAL_STATUS  is not null\n	 AND	EXISTS\n			(SELECT	 cf_migration.proc_typ,\n				"
+"	 cf_migration.initial_status_code\n			 FROM  cf_migration \n			 WHERE	 action_typ  in\n				(SELECT action_typ\n				 FRO"
+"M  cf_action_type \n				 WHERE	 automatic_action_wcode  = 1\n				)\n			 AND	cf_migration.proc_typ			  = AT.GENERATE_PROC"
+"_TYP	COLLATE DATABASE_DEFAULT \n			 AND	cf_migration.initial_status_code  = T.SPECIAL_FINAL_STATUS	COLLATE DATABASE_DEFA"
+"ULT \n			)\n	 AND	manual_due_date  is null\n		\n		/* If SPECIAL_FINAL_STATUS is not null and proc_typ / SPECIAL_FINAL_ST"
+"ATUS is not origin for \n		       a due date automatic action, then MANUAL_DUE_DATE must be null. \n		       Otherwise, "
+"message ?Special final status is not origin for a 'date is due' automatic action, but manual due date is not null? */\n	"
+"	INSERT INTO   ["+ context.intermediateDB + "].[dbo].VW_IMPORT_PATENT_RESULT   \n				( file_seq , \n				file_type , \n				file_series , \n				file_nbr , \n				ind_i"
+"mport , \n				msg_import )  \n		SELECT\n				 T.file_seq,\n				 T.file_type,\n				 T.file_series,\n				 T.file_nbr,\n				"
+" 2,\n				 'Special final status is not origin for a date is due automatic action, but manual due date is not null'\n		FR"
+"OM   ["+ context.intermediateDB + "].[dbo].VW_import_patent_actions T \n		 JOIN  ["+ context.intermediateDB + "].[dbo].VW_import_patent M ON T.file_seq  = M.file_seq\n			 AND	T.file_type  = M.file_type\n			 AND	T.file_series  = M."
+"file_series\n			 AND	T.file_nbr  = M.file_nbr  \n		 JOIN cf_application_type AT ON M.application_type  = AT.appl_typ	COL"
+"LATE DATABASE_DEFAULT \n		WHERE	 SPECIAL_FINAL_STATUS  is not null\n		 AND	 NOT EXISTS\n			(SELECT	 cf_migration.proc_ty"
+"p,\n					 cf_migration.initial_status_code\n			 FROM  cf_migration \n			 WHERE	 action_typ  in\n				(SELECT action_typ\n"
+"				 FROM  cf_action_type \n				 WHERE	 automatic_action_wcode  = 1\n				)\n			 AND	cf_migration.proc_typ			  = AT.GENER"
+"ATE_PROC_TYP\n			 AND	cf_migration.initial_status_code  = T.SPECIAL_FINAL_STATUS	COLLATE DATABASE_DEFAULT \n			)\n		 AND"
+"	manual_due_date  is not null\n		\n		/* If SPECIAL_FINAL_STATUS is not null and proc_typ / SPECIAL_FINAL_STATUS requires"
+" a\n		       responsible user, then RESPONSIBLE_USER must not be null. \n		       Otherwise, message ?Special final stat"
+"us requires a responsible user to be assigned? */\n		INSERT INTO   ["+ context.intermediateDB + "].[dbo].VW_IMPORT_PATENT_RESULT   \n				( file_seq , \n				file_type , \n				file_series , \n				file_nbr , \n				ind_i"
+"mport , \n				msg_import )  \n		SELECT\n				 T.file_seq,\n				 T.file_type,\n				 T.file_series,\n				 T.file_nbr,\n				"
+" 2,\n				 'Special final status requires a responsible user to be assigned'\n		FROM   ["+ context.intermediateDB + "].[dbo].VW_import_patent_actions T \n		 JOIN  ["+ context.intermediateDB + "].[dbo].VW_import_patent M ON T.file_seq  = M.file_seq\n			 AND	T.file_type  = M.file_type\n			 AND	T.file_series  = M."
+"file_series\n			 AND	T.file_nbr  = M.file_nbr  \n		 JOIN cf_application_type AT ON M.application_type  = AT.appl_typ		CO"
+"LLATE DATABASE_DEFAULT \n	WHERE	 SPECIAL_FINAL_STATUS  is not null\n	 AND	(GENERATE_PROC_TYP COLLATE DATABASE_DEFAULT + "
+"SPECIAL_FINAL_STATUS COLLATE DATABASE_DEFAULT ) COLLATE DATABASE_DEFAULT  IN\n		(\n	 	SELECT proc_typ + status_code\n		F"
+"ROM  cf_status \n		WHERE	 ind_responsible_req  = 'S'\n		)\n	 AND	responsible_user  is null\n		\n		/* If SPECIAL_FINAL_ST"
+"ATUS is not null and proc_typ / SPECIAL_FINAL_STATUS requires no\n		       responsible user, then RESPONSIBLE_USER must "
+"be null. \n		       Otherwise, message ?Special final status requires no responsible user to be assigned? \n		INSERT INT"
+"O   ["+ context.intermediateDB + "].[dbo].VW_IMPORT_PATENT_RESULT   \n				( file_seq , \n				file_type , \n				file_series , \n				file_nbr , \n				ind_i"
+"mport , \n				msg_import )  \n		SELECT\n				 T.file_seq,\n				 T.file_type,\n				 T.file_series,\n				 T.file_nbr,\n				"
+" 2,\n				 'Special final status requires no responsible user to be assigned'\n		FROM   ["+ context.intermediateDB + "].[dbo].VW_import_patent_actions T \n		 JOIN  ["+ context.intermediateDB + "].[dbo].VW_import_patent M ON T.file_seq  = M.file_seq\n			 AND	T.file_type  = M.file_type\n			 AND	T.file_series  = M."
+"file_series\n			 AND	T.file_nbr  = M.file_nbr  \n		 JOIN cf_application_type AT ON M.application_type  = AT.appl_typ	COL"
+"LATE DATABASE_DEFAULT \n	WHERE	 SPECIAL_FINAL_STATUS  is not null\n	 AND	 (GENERATE_PROC_TYP + SPECIAL_FINAL_STATUS COLL"
+"ATE DATABASE_DEFAULT ) NOT IN\n		(\n	 	SELECT	proc_typ + status_code\n		FROM  cf_status \n		WHERE	 ind_responsible_req  "
+"= 'S'\n		)\n	 AND	responsible_user  is not null\n		*/\n		/* If SPECIAL_FINAL_STATUS is not null and proc_typ / SPECIAL_F"
+"INAL_STATUS is origin for \n		       a end of freezing automatic action, then a freezing document must be specified in t"
+"ables\n		        ["+ context.intermediateDB + "].[dbo].VW_IMPORT_PATENT_FREEZE_FILE or  ["+ context.intermediateDB + "].[dbo].VW_IMPORT_PATENT_FREEZE_UDOC.\n		       Otherwise, message ?Special final status is origin for an 'end of freez"
+"ing' automatic action, but no freezings exist in  ["+ context.intermediateDB + "].[dbo].VW_IMPORT_PATENT_FREEZE_FILE / UDOC? */\n		INSERT INTO   ["+ context.intermediateDB + "].[dbo].VW_IMPORT_PATENT_RESULT   \n				( file_seq , \n				file_type , \n				file_series , \n				file_nbr , \n				ind_i"
+"mport , \n				msg_import )  \n		SELECT\n				 T.file_seq,\n				 T.file_type,\n				 T.file_series,\n				 T.file_nbr,\n				"
+" 2,\n				 'Special final status is origin for an end of freezing automatic action, but no freezings exist in  ["+ context.intermediateDB + "].[dbo].VW_IMPORT_PATENT_FREEZE_FILE / UDOC'\n		FROM   ["+ context.intermediateDB + "].[dbo].VW_import_patent_actions T \n		 JOIN  ["+ context.intermediateDB + "].[dbo].VW_import_patent M ON T.file_seq  = M.file_seq\n			 AND	T.file_type  = M.file_type\n			 AND	T.file_series  = M."
+"file_series\n			 AND	T.file_nbr  = M.file_nbr  \n	     JOIN cf_application_type AT ON M.application_type  = AT.appl_typ	"
+"	COLLATE DATABASE_DEFAULT \n	WHERE	 SPECIAL_FINAL_STATUS  is not null\n	 AND	(GENERATE_PROC_TYP + SPECIAL_FINAL_STATUS C"
+"OLLATE DATABASE_DEFAULT ) IN\n		(\n	 	SELECT proc_typ + initial_status_code\n		FROM  cf_migration \n		WHERE	 action_typ "
+" in\n			(\n	 		SELECT action_typ\n			FROM  cf_action_type \n			WHERE	 automatic_action_wcode  = 2\n			)\n		)\n	 AND	NOT "
+"  exists\n		(\n	 	SELECT *\n		FROM   ["+ context.intermediateDB + "].[dbo].VW_import_mark_file_freezes ff \n		WHERE	 ff.file_type  = T.file_type\n		 AND	ff.file_seq  = T.file_seq\n		 AND"
+"	ff.file_series  = T.file_series\n		 AND	ff.file_nbr  = T.file_nbr\n		)\n	 AND	NOT   exists\n		(\n	 	SELECT *\n		FROM   "
+"["+ context.intermediateDB + "].[dbo].VW_import_mark_udoc_freezes uf \n		WHERE	 uf.file_type  = T.file_type\n		 AND	uf.file_seq  = T.file_seq\n		 AND"
+"	uf.file_series  = T.file_series\n		 AND	uf.file_nbr  = T.file_nbr\n		)\n		\n		/* If SPECIAL_FINAL_STATUS is not null an"
+"d proc_typ / SPECIAL_FINAL_STATUS is not origin for \n		       a end of freezing automatic action, then no freezing docu"
+"ment must be specified in tables\n		        ["+ context.intermediateDB + "].[dbo].VW_IMPORT_PATENT_FREEZE_FILE or  ["+ context.intermediateDB + "].[dbo].VW_IMPORT_PATENT_FREEZE_UDOC.\n		       Otherwise, message ?Special final status is not origin for an 'end of f"
+"reezing' automatic action, but a freezings exist in  ["+ context.intermediateDB + "].[dbo].VW_IMPORT_PATENT_FREEZE_FILE / UDOC? */\n		INSERT INTO   ["+ context.intermediateDB + "].[dbo].VW_IMPORT_PATENT_RESULT   \n				( file_seq , \n				file_type , \n				file_series , \n				file_nbr , \n				ind_i"
+"mport , \n				msg_import )  \n		SELECT\n				 T.file_seq,\n				 T.file_type,\n				 T.file_series,\n				 T.file_nbr,\n				"
+" 2,\n				 'Special final status is not origin for an end of freezing automatic action, but a freezings exist in  ["+ context.intermediateDB + "].[dbo].VW_IMPORT_PATENT_FREEZE_FILE / UDOC'\n		FROM   ["+ context.intermediateDB + "].[dbo].VW_import_patent_actions T \n		 JOIN  ["+ context.intermediateDB + "].[dbo].VW_import_patent M ON T.file_seq  = M.file_seq\n			 AND	T.file_type  = M.file_type\n			 AND	T.file_series  = M."
+"file_series\n			 AND	T.file_nbr  = M.file_nbr  \n		 JOIN cf_application_type AT ON M.application_type  = AT.appl_typ		CO"
+"LLATE DATABASE_DEFAULT \n	WHERE	 SPECIAL_FINAL_STATUS  is not null\n	 AND	 (GENERATE_PROC_TYP + SPECIAL_FINAL_STATUS COL"
+"LATE DATABASE_DEFAULT ) NOT IN\n		(\n	 	SELECT	proc_typ + initial_status_code\n		FROM  cf_migration \n		WHERE	 action_ty"
+"p  in\n			(\n	 		SELECT action_typ\n			FROM  cf_action_type \n			WHERE	 automatic_action_wcode  = 2\n			)\n		)\n	 AND	( "
+" exists\n		(\n	 	SELECT *\n		FROM   ["+ context.intermediateDB + "].[dbo].VW_import_mark_file_freezes ff \n		WHERE	 ff.file_type  = T.file_type\n		 AND	ff.file_seq  = T.file_seq\n		 AND"
+"	ff.file_series  = T.file_series\n		 AND	ff.file_nbr  = T.file_nbr\n		)\n	 OR	  exists\n		(\n	 	SELECT *\n		FROM   ["+ context.intermediateDB + "].[dbo].VW_import_mark_udoc_freezes uf \n		WHERE	 uf.file_type  = T.file_type\n		 AND	uf.file_seq  = T.file_seq\n		 AND"
+"	uf.file_series  = T.file_series\n		 AND	uf.file_nbr  = T.file_nbr\n		))\n		\n		/* If ACTION_NOTES1 is not null and CF_A"
+"CTION_TYPE.NOTES1_PROMPT is null, \n		       message ?Current configuration indicates that this action type does not acc"
+"ept an action notes 1? */\n		/* Performace note: join with  ["+ context.intermediateDB + "].[dbo].VW_IMPORT_PATENT to select patents with IND_IMPORT = 0 */\n		/* OJO ignorar por ahora \n		    insert  into  ["+ context.intermediateDB + "].[dbo].VW_IMPORT_PATENT_RESULT (file_seq, file_type, file_series, file_nbr, ind_import, msg_import)\n		    select  T.f"
+"ile_seq, T.file_type, T.file_series, T.file_nbr,\n		            2, 'Current configuration indicates that this action typ"
+"e does not accept an action notes 1'\n		    from     ["+ context.intermediateDB + "].[dbo].VW_import_patent_actions T\n		            join cf_action_type AT on\n		                T.action_type   = AT.act"
+"ion_typ\n		    where   length(ACTION_NOTES1)   > 1   and\n		            NOTES1_PROMPT           is null\n		    ;\n		*/\n"
+"		/* If ACTION_NOTES2 is not null and CF_ACTION_TYPE.NOTES2_PROMPT is null, \n		       message ?Current configuration in"
+"dicates that this action type does not accept an action notes 2? */\n		/* Performace note: join with  ["+ context.intermediateDB + "].[dbo].VW_IMPORT_PATENT to select patents with IND_IMPORT = 0 */\n		/* OJO ignorar por ahora\n		    insert  into  ["+ context.intermediateDB + "].[dbo].VW_IMPORT_PATENT_RESULT (file_seq, file_type, file_series, file_nbr, ind_import, msg_import)\n		    select  T.f"
+"ile_seq, T.file_type, T.file_series, T.file_nbr,\n		            2, 'Current configuration indicates that this action typ"
+"e does not accept an action notes 2'\n		    from     ["+ context.intermediateDB + "].[dbo].VW_import_patent_actions T\n		            join cf_action_type AT on\n		                T.action_type   = AT.act"
+"ion_typ\n		    where   length(ACTION_NOTES2)   > 1   and\n		            NOTES2_PROMPT           is null\n		    ;\n		*/\n"
+"		/* If ACTION_NOTES3 is not null and CF_ACTION_TYPE.NOTES3_PROMPT is null, \n		       message ?Current configuration in"
+"dicates that this action type does not accept an action notes 3? */\n		/* Performace note: join with  ["+ context.intermediateDB + "].[dbo].VW_IMPORT_PATENT to select patents with IND_IMPORT = 0 */\n		/* OJO ignorar por ahora\n		    insert  into  ["+ context.intermediateDB + "].[dbo].VW_IMPORT_PATENT_RESULT (file_seq, file_type, file_series, file_nbr, ind_import, msg_import)\n		    select  T.f"
+"ile_seq, T.file_type, T.file_series, T.file_nbr,\n		            2, 'Current configuration indicates that this action typ"
+"e does not accept an action notes 3'\n		    from     ["+ context.intermediateDB + "].[dbo].VW_import_patent_actions T\n		            join cf_action_type AT on\n		                T.action_type   = AT.act"
+"ion_typ\n		    where   length(ACTION_NOTES3)   > 1   and\n		            NOTES3_PROMPT           is null\n		    ;\n		*/\n"
+"		/* If ACTION_NOTES4 is not null and CF_ACTION_TYPE.NOTES4_PROMPT is null, \n		       message ?Current configuration in"
+"dicates that this action type does not accept an action notes 4? */\n		/* Performace note: join with  ["+ context.intermediateDB + "].[dbo].VW_IMPORT_PATENT to select patents with IND_IMPORT = 0 */\n		/* OJO ignorar por ahora\n		    insert  into  ["+ context.intermediateDB + "].[dbo].VW_IMPORT_PATENT_RESULT (file_seq, file_type, file_series, file_nbr, ind_import, msg_import)\n		    select  T.f"
+"ile_seq, T.file_type, T.file_series, T.file_nbr,\n		            2, 'Current configuration indicates that this action typ"
+"e does not accept an action notes 4'\n		    from     ["+ context.intermediateDB + "].[dbo].VW_import_patent_actions T\n		            join cf_action_type AT on\n		                T.action_type   = AT.act"
+"ion_typ\n		    where   length(ACTION_NOTES4)   > 1   and\n		            NOTES4_PROMPT           is null\n		    ;\n		*/\n"
+"		/* If ACTION_NOTES5 is not null and CF_ACTION_TYPE.NOTES5_PROMPT is null, \n		       message ?Current configuration in"
+"dicates that this action type does not accept an action notes 5? */\n		/* Performace note: join with  ["+ context.intermediateDB + "].[dbo].VW_IMPORT_PATENT to select patents with IND_IMPORT = 0 */\n		/* OJO ignorar por ahora\n		    insert  into  ["+ context.intermediateDB + "].[dbo].VW_IMPORT_PATENT_RESULT (file_seq, file_type, file_series, file_nbr, ind_import, msg_import)\n		    select  T.f"
+"ile_seq, T.file_type, T.file_series, T.file_nbr,\n		            2, 'Current configuration indicates that this action typ"
+"e does not accept an action notes 5'\n		    from     ["+ context.intermediateDB + "].[dbo].VW_import_patent_actions T\n		            join cf_action_type AT on\n		                T.action_type   = AT.act"
+"ion_typ\n		    where   length(ACTION_NOTES5)   > 1   and\n		            NOTES5_PROMPT           is null\n		    ;\n		*/\n"
+"		/* ACTION_USER: if not exists in IP_USER, message ?Invalid action user? */\n		/* Performace note: join with  ["+ context.intermediateDB + "].[dbo].VW_IMPORT_PATENT to select patents with IND_IMPORT = 0 */\n		INSERT INTO   ["+ context.intermediateDB + "].[dbo].VW_IMPORT_PATENT_RESULT   \n				( file_seq , \n				file_type , \n				file_series , \n				file_nbr , \n				ind_i"
+"mport , \n				msg_import )  \n		SELECT\n				 T.file_seq,\n				 T.file_type,\n				 T.file_series,\n				 T.file_nbr,\n				"
+" 2,\n				 'Invalid action user'\n		FROM   ["+ context.intermediateDB + "].[dbo].VW_import_patent_actions T \n		WHERE	 (ACTION_USER  is null\n		 OR	ACTION_USER  not in\n			(\n		 	SELECT user_i"
+"d\n			FROM  ip_user \n			))\n		\n			-- Move below check into CallToDateValidationPROC --> MarkDateValidationPROC SP\n		/"
+"* IPAS-375 Added validation for filing date */\n	--	insert  into  ["+ context.intermediateDB + "].[dbo].VW_IMPORT_PATENT_RESULT (file_seq, file_type, file_series, file_nbr, ind_import, msg_import)\n	--	select  P.fil"
+"e_seq, P.file_type, P.file_series, P.file_nbr, 2, 'Invalid Filing date. Filing date required to be greater than 1700-01-"
+"01 and lower than the current date.' \n	--	from   ["+ context.intermediateDB + "].[dbo].VW_import_patent P where filing_date > GETDATE() or CAST(DATEPART(YYYY, filing_date) as NUMERIC) < 1700\n\n			/"
+"* IPAS-623 FIX \n			Call to Mark Date validation \n		*/\n			exec CallToDateValidationPROC 'PATENT';		\n		/* FIX IPAS-623"
+" Ends here*/\n\n		/* *************** END OF VALIDATIONS *************** */\n		/* set import indicator to error, for thos"
+"e cases with error messages */\n		UPDATE  M   \n		SET	ind_import = 2 \n		FROM   ["+ context.intermediateDB + "].[dbo].VW_IMPORT_PATENT M \n		WHERE    exists\n			(\n		 	SELECT *\n			FROM   ["+ context.intermediateDB + "].[dbo].VW_IMPORT_PATENT_RESULT R \n			WHERE	 M.file_seq  = R.file_seq\n			 AND	M.file_type  = R.file_type\n			 AND	M.f"
+"ile_series  = R.file_series\n			 AND	M.file_nbr  = R.file_nbr\n			) \n		\n		/* set import indicator to validated, for th"
+"ose cases with no error messages */\n		UPDATE  M   \n		SET	ind_import = 9 \n		FROM   ["+ context.intermediateDB + "].[dbo].VW_IMPORT_PATENT M \n		WHERE  ind_import  = 0 \n		\n\n		SET NOCOUNT OFF\n\n	END";
whetherReject_tMSSqlRow_12 = false;
globalMap.put("tMSSqlRow_12_QUERY",query_tMSSqlRow_12);
try {
		stmt_tMSSqlRow_12.execute(query_tMSSqlRow_12);
		
	} catch (java.lang.Exception e) {
		whetherReject_tMSSqlRow_12 = true;
		
				row84 = new row84Struct();
				
				row84.errorCode = ((java.sql.SQLException)e).getSQLState();
				row84.errorMessage = e.getMessage() + " - Line: " + tos_count_tMSSqlRow_12;
				
	}
	
	if(!whetherReject_tMSSqlRow_12) {
		
	}
	

 


	tos_count_tMSSqlRow_12++;

/**
 * [tMSSqlRow_12 main ] stop
 */
	
	/**
	 * [tMSSqlRow_12 process_data_begin ] start
	 */

	

	
	
	currentComponent="tMSSqlRow_12";

	

 



/**
 * [tMSSqlRow_12 process_data_begin ] stop
 */
// Start of branch "row84"
if(row84 != null) { 



	
	/**
	 * [tLogRow_14 main ] start
	 */

	

	
	
	currentComponent="tLogRow_14";

	
					if(execStat){
						runStat.updateStatOnConnection(iterateId,1,1
						
							,"row84"
						
						);
					}
					
///////////////////////		
						



				strBuffer_tLogRow_14 = new StringBuilder();




   				
	    		if(row84.errorCode != null) { //              
                    							
       
				strBuffer_tLogRow_14.append(
				                String.valueOf(row84.errorCode)							
				);


							
	    		} //  			

    			strBuffer_tLogRow_14.append("|");
    			


   				
	    		if(row84.errorMessage != null) { //              
                    							
       
				strBuffer_tLogRow_14.append(
				                String.valueOf(row84.errorMessage)							
				);


							
	    		} //  			

				
				String[] row_tLogRow_14 = new String[2];
   				
	    		if(row84.errorCode != null) { //              
                 row_tLogRow_14[0]=    						    
				                String.valueOf(row84.errorCode)			
					          ;	
							
	    		} //			
    			   				
	    		if(row84.errorMessage != null) { //              
                 row_tLogRow_14[1]=    						    
				                String.valueOf(row84.errorMessage)			
					          ;	
							
	    		} //			
    			
				nb_line_tLogRow_14++;
                consoleOut_tLogRow_14.println(util_tLogRow_14.print(row_tLogRow_14,nb_line_tLogRow_14));
                consoleOut_tLogRow_14.flush();
//////

//////                    
                    
///////////////////////    			

 


	tos_count_tLogRow_14++;

/**
 * [tLogRow_14 main ] stop
 */
	
	/**
	 * [tLogRow_14 process_data_begin ] start
	 */

	

	
	
	currentComponent="tLogRow_14";

	

 



/**
 * [tLogRow_14 process_data_begin ] stop
 */
	
	/**
	 * [tLogRow_14 process_data_end ] start
	 */

	

	
	
	currentComponent="tLogRow_14";

	

 



/**
 * [tLogRow_14 process_data_end ] stop
 */

} // End of branch "row84"




	
	/**
	 * [tMSSqlRow_12 process_data_end ] start
	 */

	

	
	
	currentComponent="tMSSqlRow_12";

	

 



/**
 * [tMSSqlRow_12 process_data_end ] stop
 */

} // End of branch "row28"




// Start of branch "row83"
if(row83 != null) { 



	
	/**
	 * [tLogRow_13 main ] start
	 */

	

	
	
	currentComponent="tLogRow_13";

	
					if(execStat){
						runStat.updateStatOnConnection(iterateId,1,1
						
							,"row83"
						
						);
					}
					
///////////////////////		
						



				strBuffer_tLogRow_13 = new StringBuilder();




   				
	    		if(row83.errorCode != null) { //              
                    							
       
				strBuffer_tLogRow_13.append(
				                String.valueOf(row83.errorCode)							
				);


							
	    		} //  			

    			strBuffer_tLogRow_13.append("|");
    			


   				
	    		if(row83.errorMessage != null) { //              
                    							
       
				strBuffer_tLogRow_13.append(
				                String.valueOf(row83.errorMessage)							
				);


							
	    		} //  			

				
				String[] row_tLogRow_13 = new String[2];
   				
	    		if(row83.errorCode != null) { //              
                 row_tLogRow_13[0]=    						    
				                String.valueOf(row83.errorCode)			
					          ;	
							
	    		} //			
    			   				
	    		if(row83.errorMessage != null) { //              
                 row_tLogRow_13[1]=    						    
				                String.valueOf(row83.errorMessage)			
					          ;	
							
	    		} //			
    			
				nb_line_tLogRow_13++;
                consoleOut_tLogRow_13.println(util_tLogRow_13.print(row_tLogRow_13,nb_line_tLogRow_13));
                consoleOut_tLogRow_13.flush();
//////

//////                    
                    
///////////////////////    			

 


	tos_count_tLogRow_13++;

/**
 * [tLogRow_13 main ] stop
 */
	
	/**
	 * [tLogRow_13 process_data_begin ] start
	 */

	

	
	
	currentComponent="tLogRow_13";

	

 



/**
 * [tLogRow_13 process_data_begin ] stop
 */
	
	/**
	 * [tLogRow_13 process_data_end ] start
	 */

	

	
	
	currentComponent="tLogRow_13";

	

 



/**
 * [tLogRow_13 process_data_end ] stop
 */

} // End of branch "row83"




	
	/**
	 * [tMSSqlRow_11 process_data_end ] start
	 */

	

	
	
	currentComponent="tMSSqlRow_11";

	

 



/**
 * [tMSSqlRow_11 process_data_end ] stop
 */
	
	/**
	 * [tMSSqlRow_11 end ] start
	 */

	

	
	
	currentComponent="tMSSqlRow_11";

	

	
        stmt_tMSSqlRow_11.close();
        resourceMap.remove("stmt_tMSSqlRow_11");
    resourceMap.put("statementClosed_tMSSqlRow_11", true);
    resourceMap.put("finish_tMSSqlRow_11", true);
 

ok_Hash.put("tMSSqlRow_11", true);
end_Hash.put("tMSSqlRow_11", System.currentTimeMillis());




/**
 * [tMSSqlRow_11 end ] stop
 */

	
	/**
	 * [tMSSqlRow_12 end ] start
	 */

	

	
	
	currentComponent="tMSSqlRow_12";

	

	
        stmt_tMSSqlRow_12.close();
        resourceMap.remove("stmt_tMSSqlRow_12");
    resourceMap.put("statementClosed_tMSSqlRow_12", true);
    resourceMap.put("finish_tMSSqlRow_12", true);
				if(execStat){
			  		runStat.updateStat(resourceMap,iterateId,2,0,"row28");
			  	}
			  	
 

ok_Hash.put("tMSSqlRow_12", true);
end_Hash.put("tMSSqlRow_12", System.currentTimeMillis());




/**
 * [tMSSqlRow_12 end ] stop
 */

	
	/**
	 * [tLogRow_14 end ] start
	 */

	

	
	
	currentComponent="tLogRow_14";

	


//////
//////
globalMap.put("tLogRow_14_NB_LINE",nb_line_tLogRow_14);

///////////////////////    			

				if(execStat){
			  		runStat.updateStat(resourceMap,iterateId,2,0,"row84");
			  	}
			  	
 

ok_Hash.put("tLogRow_14", true);
end_Hash.put("tLogRow_14", System.currentTimeMillis());




/**
 * [tLogRow_14 end ] stop
 */







	
	/**
	 * [tLogRow_13 end ] start
	 */

	

	
	
	currentComponent="tLogRow_13";

	


//////
//////
globalMap.put("tLogRow_13_NB_LINE",nb_line_tLogRow_13);

///////////////////////    			

				if(execStat){
			  		runStat.updateStat(resourceMap,iterateId,2,0,"row83");
			  	}
			  	
 

ok_Hash.put("tLogRow_13", true);
end_Hash.put("tLogRow_13", System.currentTimeMillis());




/**
 * [tLogRow_13 end ] stop
 */



				}//end the resume

				
				    			if(resumeEntryMethodName == null || globalResumeTicket){
				    				resumeUtil.addLog("CHECKPOINT", "CONNECTION:SUBJOB_OK:tMSSqlRow_11:OnSubjobOk", "", Thread.currentThread().getId() + "", "", "", "", "", "");
								}	    				    			
					    	
								if(execStat){    	
									runStat.updateStatOnConnection("OnSubjobOk9", 0, "ok");
								} 
							
							tMSSqlRow_13Process(globalMap); 
						



	
			}catch(java.lang.Exception e){	
				
				TalendException te = new TalendException(e, currentComponent, globalMap);
				
				throw te;
			}catch(java.lang.Error error){	
				
					runStat.stopThreadStat();
				
				throw error;
			}finally{
				
				try{
					
	
	/**
	 * [tMSSqlRow_11 finally ] start
	 */

	

	
	
	currentComponent="tMSSqlRow_11";

	

    if (resourceMap.get("statementClosed_tMSSqlRow_11") == null) {
            java.sql.Statement stmtToClose_tMSSqlRow_11 = null;
            if ((stmtToClose_tMSSqlRow_11 = (java.sql.Statement) resourceMap.remove("stmt_tMSSqlRow_11")) != null) {
                stmtToClose_tMSSqlRow_11.close();
            }
    }
 



/**
 * [tMSSqlRow_11 finally ] stop
 */

	
	/**
	 * [tMSSqlRow_12 finally ] start
	 */

	

	
	
	currentComponent="tMSSqlRow_12";

	

    if (resourceMap.get("statementClosed_tMSSqlRow_12") == null) {
            java.sql.Statement stmtToClose_tMSSqlRow_12 = null;
            if ((stmtToClose_tMSSqlRow_12 = (java.sql.Statement) resourceMap.remove("stmt_tMSSqlRow_12")) != null) {
                stmtToClose_tMSSqlRow_12.close();
            }
    }
 



/**
 * [tMSSqlRow_12 finally ] stop
 */

	
	/**
	 * [tLogRow_14 finally ] start
	 */

	

	
	
	currentComponent="tLogRow_14";

	

 



/**
 * [tLogRow_14 finally ] stop
 */







	
	/**
	 * [tLogRow_13 finally ] start
	 */

	

	
	
	currentComponent="tLogRow_13";

	

 



/**
 * [tLogRow_13 finally ] stop
 */



				}catch(java.lang.Exception e){	
					//ignore
				}catch(java.lang.Error error){
					//ignore
				}
				resourceMap = null;
			}
		

		globalMap.put("tMSSqlRow_11_SUBPROCESS_STATE", 1);
	}
	


public static class row89Struct implements routines.system.IPersistableRow<row89Struct> {
    final static byte[] commonByteArrayLock_WIPO_PROJECTS_F_IPAS_ENV_CRE = new byte[0];
    static byte[] commonByteArray_WIPO_PROJECTS_F_IPAS_ENV_CRE = new byte[0];

	
			    public String errorCode;

				public String getErrorCode () {
					return this.errorCode;
				}
				
			    public String errorMessage;

				public String getErrorMessage () {
					return this.errorMessage;
				}
				



	private String readString(ObjectInputStream dis) throws IOException{
		String strReturn = null;
		int length = 0;
        length = dis.readInt();
		if (length == -1) {
			strReturn = null;
		} else {
			if(length > commonByteArray_WIPO_PROJECTS_F_IPAS_ENV_CRE.length) {
				if(length < 1024 && commonByteArray_WIPO_PROJECTS_F_IPAS_ENV_CRE.length == 0) {
   					commonByteArray_WIPO_PROJECTS_F_IPAS_ENV_CRE = new byte[1024];
				} else {
   					commonByteArray_WIPO_PROJECTS_F_IPAS_ENV_CRE = new byte[2 * length];
   				}
			}
			dis.readFully(commonByteArray_WIPO_PROJECTS_F_IPAS_ENV_CRE, 0, length);
			strReturn = new String(commonByteArray_WIPO_PROJECTS_F_IPAS_ENV_CRE, 0, length, utf8Charset);
		}
		return strReturn;
	}

    private void writeString(String str, ObjectOutputStream dos) throws IOException{
		if(str == null) {
            dos.writeInt(-1);
		} else {
            byte[] byteArray = str.getBytes(utf8Charset);
	    	dos.writeInt(byteArray.length);
			dos.write(byteArray);
    	}
    }

    public void readData(ObjectInputStream dis) {

		synchronized(commonByteArrayLock_WIPO_PROJECTS_F_IPAS_ENV_CRE) {

        	try {

        		int length = 0;
		
					this.errorCode = readString(dis);
					
					this.errorMessage = readString(dis);
					
        	} catch (IOException e) {
	            throw new RuntimeException(e);

		

        }

		

      }


    }

    public void writeData(ObjectOutputStream dos) {
        try {

		
					// String
				
						writeString(this.errorCode,dos);
					
					// String
				
						writeString(this.errorMessage,dos);
					
        	} catch (IOException e) {
	            throw new RuntimeException(e);
        }


    }


    public String toString() {

		StringBuilder sb = new StringBuilder();
		sb.append(super.toString());
		sb.append("[");
		sb.append("errorCode="+errorCode);
		sb.append(",errorMessage="+errorMessage);
	    sb.append("]");

	    return sb.toString();
    }

    /**
     * Compare keys
     */
    public int compareTo(row89Struct other) {

		int returnValue = -1;
		
	    return returnValue;
    }


    private int checkNullsAndCompare(Object object1, Object object2) {
        int returnValue = 0;
		if (object1 instanceof Comparable && object2 instanceof Comparable) {
            returnValue = ((Comparable) object1).compareTo(object2);
        } else if (object1 != null && object2 != null) {
            returnValue = compareStrings(object1.toString(), object2.toString());
        } else if (object1 == null && object2 != null) {
            returnValue = 1;
        } else if (object1 != null && object2 == null) {
            returnValue = -1;
        } else {
            returnValue = 0;
        }

        return returnValue;
    }

    private int compareStrings(String string1, String string2) {
        return string1.compareTo(string2);
    }


}

public static class row33Struct implements routines.system.IPersistableRow<row33Struct> {
    final static byte[] commonByteArrayLock_WIPO_PROJECTS_F_IPAS_ENV_CRE = new byte[0];
    static byte[] commonByteArray_WIPO_PROJECTS_F_IPAS_ENV_CRE = new byte[0];

	



    public void readData(ObjectInputStream dis) {

		synchronized(commonByteArrayLock_WIPO_PROJECTS_F_IPAS_ENV_CRE) {

        	try {

        		int length = 0;
		

		

        }

		
			finally {}
		

      }


    }

    public void writeData(ObjectOutputStream dos) {
        try {

		
        }

			finally {}
		

    }


    public String toString() {

		StringBuilder sb = new StringBuilder();
		sb.append(super.toString());
		sb.append("[");
	    sb.append("]");

	    return sb.toString();
    }

    /**
     * Compare keys
     */
    public int compareTo(row33Struct other) {

		int returnValue = -1;
		
	    return returnValue;
    }


    private int checkNullsAndCompare(Object object1, Object object2) {
        int returnValue = 0;
		if (object1 instanceof Comparable && object2 instanceof Comparable) {
            returnValue = ((Comparable) object1).compareTo(object2);
        } else if (object1 != null && object2 != null) {
            returnValue = compareStrings(object1.toString(), object2.toString());
        } else if (object1 == null && object2 != null) {
            returnValue = 1;
        } else if (object1 != null && object2 == null) {
            returnValue = -1;
        } else {
            returnValue = 0;
        }

        return returnValue;
    }

    private int compareStrings(String string1, String string2) {
        return string1.compareTo(string2);
    }


}

public static class row88Struct implements routines.system.IPersistableRow<row88Struct> {
    final static byte[] commonByteArrayLock_WIPO_PROJECTS_F_IPAS_ENV_CRE = new byte[0];
    static byte[] commonByteArray_WIPO_PROJECTS_F_IPAS_ENV_CRE = new byte[0];

	
			    public String errorCode;

				public String getErrorCode () {
					return this.errorCode;
				}
				
			    public String errorMessage;

				public String getErrorMessage () {
					return this.errorMessage;
				}
				



	private String readString(ObjectInputStream dis) throws IOException{
		String strReturn = null;
		int length = 0;
        length = dis.readInt();
		if (length == -1) {
			strReturn = null;
		} else {
			if(length > commonByteArray_WIPO_PROJECTS_F_IPAS_ENV_CRE.length) {
				if(length < 1024 && commonByteArray_WIPO_PROJECTS_F_IPAS_ENV_CRE.length == 0) {
   					commonByteArray_WIPO_PROJECTS_F_IPAS_ENV_CRE = new byte[1024];
				} else {
   					commonByteArray_WIPO_PROJECTS_F_IPAS_ENV_CRE = new byte[2 * length];
   				}
			}
			dis.readFully(commonByteArray_WIPO_PROJECTS_F_IPAS_ENV_CRE, 0, length);
			strReturn = new String(commonByteArray_WIPO_PROJECTS_F_IPAS_ENV_CRE, 0, length, utf8Charset);
		}
		return strReturn;
	}

    private void writeString(String str, ObjectOutputStream dos) throws IOException{
		if(str == null) {
            dos.writeInt(-1);
		} else {
            byte[] byteArray = str.getBytes(utf8Charset);
	    	dos.writeInt(byteArray.length);
			dos.write(byteArray);
    	}
    }

    public void readData(ObjectInputStream dis) {

		synchronized(commonByteArrayLock_WIPO_PROJECTS_F_IPAS_ENV_CRE) {

        	try {

        		int length = 0;
		
					this.errorCode = readString(dis);
					
					this.errorMessage = readString(dis);
					
        	} catch (IOException e) {
	            throw new RuntimeException(e);

		

        }

		

      }


    }

    public void writeData(ObjectOutputStream dos) {
        try {

		
					// String
				
						writeString(this.errorCode,dos);
					
					// String
				
						writeString(this.errorMessage,dos);
					
        	} catch (IOException e) {
	            throw new RuntimeException(e);
        }


    }


    public String toString() {

		StringBuilder sb = new StringBuilder();
		sb.append(super.toString());
		sb.append("[");
		sb.append("errorCode="+errorCode);
		sb.append(",errorMessage="+errorMessage);
	    sb.append("]");

	    return sb.toString();
    }

    /**
     * Compare keys
     */
    public int compareTo(row88Struct other) {

		int returnValue = -1;
		
	    return returnValue;
    }


    private int checkNullsAndCompare(Object object1, Object object2) {
        int returnValue = 0;
		if (object1 instanceof Comparable && object2 instanceof Comparable) {
            returnValue = ((Comparable) object1).compareTo(object2);
        } else if (object1 != null && object2 != null) {
            returnValue = compareStrings(object1.toString(), object2.toString());
        } else if (object1 == null && object2 != null) {
            returnValue = 1;
        } else if (object1 != null && object2 == null) {
            returnValue = -1;
        } else {
            returnValue = 0;
        }

        return returnValue;
    }

    private int compareStrings(String string1, String string2) {
        return string1.compareTo(string2);
    }


}
public void tMSSqlRow_13Process(final java.util.Map<String, Object> globalMap) throws TalendException {
	globalMap.put("tMSSqlRow_13_SUBPROCESS_STATE", 0);

 final boolean execStat = this.execStat;
	
		String iterateId = "";
	
	
	String currentComponent = "";
	java.util.Map<String, Object> resourceMap = new java.util.HashMap<String, Object>();

	try {
			// TDI-39566 avoid throwing an useless Exception
			boolean resumeIt = true;
			if (globalResumeTicket == false && resumeEntryMethodName != null) {
				String currentMethodName = new java.lang.Exception().getStackTrace()[0].getMethodName();
				resumeIt = resumeEntryMethodName.equals(currentMethodName);
			}
			if (resumeIt || globalResumeTicket) { //start the resume
				globalResumeTicket = true;



		row33Struct row33 = new row33Struct();
row89Struct row89 = new row89Struct();
row88Struct row88 = new row88Struct();





	
	/**
	 * [tLogRow_16 begin ] start
	 */

	

	
		
		ok_Hash.put("tLogRow_16", false);
		start_Hash.put("tLogRow_16", System.currentTimeMillis());
		
	
	currentComponent="tLogRow_16";

	
					if(execStat) {
						runStat.updateStatOnConnection(resourceMap,iterateId,0,0,"row89");
					}
				
		int tos_count_tLogRow_16 = 0;
		

	///////////////////////
		


	class Util_tLogRow_16 {
	
		String[] des_top = { ".", "-" };

        String[] des_data = { "-", "+" };

        String[] des_frame = { "|" }; 
        
        public void printLine(StringBuilder sb, int titleWidth, int dataWidth){
        
        	sb.append("+");
			for(int i=0; i<titleWidth+2; i++)
				sb.append("-");
			sb.append("+");
			for(int i=0; i<dataWidth+2; i++)
				sb.append("-");
        	sb.append("+" + "\n");
        }      

		public String print(String[] row, int nbLine){
			
			StringBuilder sb = new StringBuilder();
			
			    String title = "#" + nbLine + ". " + "tLogRow_16";
			    
		
			//step 1: get the max length of all the row[] member;
			int dataWidth = 5;		//the length of the string "value"	
			for(int i=0;i<row.length;i++) {
				if(row[i] == null && 4 > dataWidth) {
					dataWidth = 4;
				}
				else if(row[i] != null && row[i].length()>dataWidth) 
					dataWidth = row[i].length();
			}			
						
			int titleWidth = 12;
			
			int totalWidth = dataWidth + titleWidth + 5;
			
			//step 2: print the header with line number
			sb.append(".");
			for(int i=0 ; i<totalWidth ; i++)
				sb.append("-");			
			sb.append("." + "\n" + "|");
			
			int emptyCenterWidth = (totalWidth-title.length())/2;
			for(int i=0 ; i<emptyCenterWidth; i++)
				sb.append(" ");	
			sb.append(title);
			for(int i=0 ; i<totalWidth - emptyCenterWidth - title.length() ; i++)
				sb.append(" ");	
			sb.append("|" + "\n");
			
			//step 3: print "key" and "value"			
			printLine(sb,titleWidth,dataWidth);
			
			sb.append("|" + " key");
			for(int i=0; i<titleWidth-2; i++)
				sb.append(" ");
        	sb.append("|" + " value");
			for(int i=0; i<dataWidth-4; i++)
				sb.append(" ");
			sb.append("|" + "\n");
			
			printLine(sb,titleWidth,dataWidth);
			
			//step 4: print dataset
			
			//for(int i=0; i<row.length; i++){
				sb.append("| " + "errorCode");
				for(int i=0; i<titleWidth -"errorCode".length()+ 1 ;i++)
					sb.append(" ");
				sb.append("| " + row[0]);
				for(int i=0; row[0] == null && i<dataWidth - 3 || row[0] != null && i<dataWidth -row[0].length()+ 1 ;i++)
					sb.append(" ");
				sb.append("|" + "\n");
			
			//}

			
			//for(int i=0; i<row.length; i++){
				sb.append("| " + "errorMessage");
				for(int i=0; i<titleWidth -"errorMessage".length()+ 1 ;i++)
					sb.append(" ");
				sb.append("| " + row[1]);
				for(int i=0; row[1] == null && i<dataWidth - 3 || row[1] != null && i<dataWidth -row[1].length()+ 1 ;i++)
					sb.append(" ");
				sb.append("|" + "\n");
			
			//}

			
			//step 5: print a line gap
			printLine(sb,titleWidth,dataWidth);
			return sb.toString();

		}


	}

	Util_tLogRow_16 util_tLogRow_16 = new Util_tLogRow_16();




	java.io.PrintStream consoleOut_tLogRow_16 = null;
	if (globalMap.get("tLogRow_CONSOLE")!=null){
        consoleOut_tLogRow_16 = (java.io.PrintStream) globalMap.get("tLogRow_CONSOLE");
    }else{
        consoleOut_tLogRow_16 = new java.io.PrintStream(new java.io.BufferedOutputStream(System.out));
        globalMap.put("tLogRow_CONSOLE",consoleOut_tLogRow_16);
    }

 		StringBuilder strBuffer_tLogRow_16 = null;
		int nb_line_tLogRow_16 = 0;
///////////////////////    			



 



/**
 * [tLogRow_16 begin ] stop
 */



	
	/**
	 * [tMSSqlRow_14 begin ] start
	 */

	

	
		
		ok_Hash.put("tMSSqlRow_14", false);
		start_Hash.put("tMSSqlRow_14", System.currentTimeMillis());
		
	
	currentComponent="tMSSqlRow_14";

	
					if(execStat) {
						runStat.updateStatOnConnection(resourceMap,iterateId,0,0,"row33");
					}
				
		int tos_count_tMSSqlRow_14 = 0;
		

	java.sql.Connection conn_tMSSqlRow_14 = null;
	String query_tMSSqlRow_14 = "";
	boolean whetherReject_tMSSqlRow_14 = false;
				conn_tMSSqlRow_14 = (java.sql.Connection)globalMap.get("conn_tMSSqlConnection_4");
			
    resourceMap.put("conn_tMSSqlRow_14", conn_tMSSqlRow_14);
        java.sql.Statement stmt_tMSSqlRow_14 = conn_tMSSqlRow_14.createStatement();
        resourceMap.put("stmt_tMSSqlRow_14", stmt_tMSSqlRow_14);

 



/**
 * [tMSSqlRow_14 begin ] stop
 */




	
	/**
	 * [tLogRow_15 begin ] start
	 */

	

	
		
		ok_Hash.put("tLogRow_15", false);
		start_Hash.put("tLogRow_15", System.currentTimeMillis());
		
	
	currentComponent="tLogRow_15";

	
					if(execStat) {
						runStat.updateStatOnConnection(resourceMap,iterateId,0,0,"row88");
					}
				
		int tos_count_tLogRow_15 = 0;
		

	///////////////////////
		


	class Util_tLogRow_15 {
	
		String[] des_top = { ".", "-" };

        String[] des_data = { "-", "+" };

        String[] des_frame = { "|" }; 
        
        public void printLine(StringBuilder sb, int titleWidth, int dataWidth){
        
        	sb.append("+");
			for(int i=0; i<titleWidth+2; i++)
				sb.append("-");
			sb.append("+");
			for(int i=0; i<dataWidth+2; i++)
				sb.append("-");
        	sb.append("+" + "\n");
        }      

		public String print(String[] row, int nbLine){
			
			StringBuilder sb = new StringBuilder();
			
			    String title = "#" + nbLine + ". " + "tLogRow_15";
			    
		
			//step 1: get the max length of all the row[] member;
			int dataWidth = 5;		//the length of the string "value"	
			for(int i=0;i<row.length;i++) {
				if(row[i] == null && 4 > dataWidth) {
					dataWidth = 4;
				}
				else if(row[i] != null && row[i].length()>dataWidth) 
					dataWidth = row[i].length();
			}			
						
			int titleWidth = 12;
			
			int totalWidth = dataWidth + titleWidth + 5;
			
			//step 2: print the header with line number
			sb.append(".");
			for(int i=0 ; i<totalWidth ; i++)
				sb.append("-");			
			sb.append("." + "\n" + "|");
			
			int emptyCenterWidth = (totalWidth-title.length())/2;
			for(int i=0 ; i<emptyCenterWidth; i++)
				sb.append(" ");	
			sb.append(title);
			for(int i=0 ; i<totalWidth - emptyCenterWidth - title.length() ; i++)
				sb.append(" ");	
			sb.append("|" + "\n");
			
			//step 3: print "key" and "value"			
			printLine(sb,titleWidth,dataWidth);
			
			sb.append("|" + " key");
			for(int i=0; i<titleWidth-2; i++)
				sb.append(" ");
        	sb.append("|" + " value");
			for(int i=0; i<dataWidth-4; i++)
				sb.append(" ");
			sb.append("|" + "\n");
			
			printLine(sb,titleWidth,dataWidth);
			
			//step 4: print dataset
			
			//for(int i=0; i<row.length; i++){
				sb.append("| " + "errorCode");
				for(int i=0; i<titleWidth -"errorCode".length()+ 1 ;i++)
					sb.append(" ");
				sb.append("| " + row[0]);
				for(int i=0; row[0] == null && i<dataWidth - 3 || row[0] != null && i<dataWidth -row[0].length()+ 1 ;i++)
					sb.append(" ");
				sb.append("|" + "\n");
			
			//}

			
			//for(int i=0; i<row.length; i++){
				sb.append("| " + "errorMessage");
				for(int i=0; i<titleWidth -"errorMessage".length()+ 1 ;i++)
					sb.append(" ");
				sb.append("| " + row[1]);
				for(int i=0; row[1] == null && i<dataWidth - 3 || row[1] != null && i<dataWidth -row[1].length()+ 1 ;i++)
					sb.append(" ");
				sb.append("|" + "\n");
			
			//}

			
			//step 5: print a line gap
			printLine(sb,titleWidth,dataWidth);
			return sb.toString();

		}


	}

	Util_tLogRow_15 util_tLogRow_15 = new Util_tLogRow_15();




	java.io.PrintStream consoleOut_tLogRow_15 = null;
	if (globalMap.get("tLogRow_CONSOLE")!=null){
        consoleOut_tLogRow_15 = (java.io.PrintStream) globalMap.get("tLogRow_CONSOLE");
    }else{
        consoleOut_tLogRow_15 = new java.io.PrintStream(new java.io.BufferedOutputStream(System.out));
        globalMap.put("tLogRow_CONSOLE",consoleOut_tLogRow_15);
    }

 		StringBuilder strBuffer_tLogRow_15 = null;
		int nb_line_tLogRow_15 = 0;
///////////////////////    			



 



/**
 * [tLogRow_15 begin ] stop
 */



	
	/**
	 * [tMSSqlRow_13 begin ] start
	 */

	

	
		
		ok_Hash.put("tMSSqlRow_13", false);
		start_Hash.put("tMSSqlRow_13", System.currentTimeMillis());
		
	
	currentComponent="tMSSqlRow_13";

	
		int tos_count_tMSSqlRow_13 = 0;
		

	java.sql.Connection conn_tMSSqlRow_13 = null;
	String query_tMSSqlRow_13 = "";
	boolean whetherReject_tMSSqlRow_13 = false;
				conn_tMSSqlRow_13 = (java.sql.Connection)globalMap.get("conn_tMSSqlConnection_4");
			
    resourceMap.put("conn_tMSSqlRow_13", conn_tMSSqlRow_13);
        java.sql.Statement stmt_tMSSqlRow_13 = conn_tMSSqlRow_13.createStatement();
        resourceMap.put("stmt_tMSSqlRow_13", stmt_tMSSqlRow_13);

 



/**
 * [tMSSqlRow_13 begin ] stop
 */
	
	/**
	 * [tMSSqlRow_13 main ] start
	 */

	

	
	
	currentComponent="tMSSqlRow_13";

	

		row33 = null;
		
		row88 = null;
		
query_tMSSqlRow_13 = "If Exists ( SELECT name \n            FROM sysobjects  \n            WHERE name = 'ImportPateRelsValidate'\n           "
+" AND type = 'P')\n	DROP PROCEDURE ImportPateRelsValidate;\n";
whetherReject_tMSSqlRow_13 = false;
globalMap.put("tMSSqlRow_13_QUERY",query_tMSSqlRow_13);
try {
		stmt_tMSSqlRow_13.execute(query_tMSSqlRow_13);
		
	} catch (java.lang.Exception e) {
		whetherReject_tMSSqlRow_13 = true;
		
				row88 = new row88Struct();
				
				row88.errorCode = ((java.sql.SQLException)e).getSQLState();
				row88.errorMessage = e.getMessage() + " - Line: " + tos_count_tMSSqlRow_13;
				
	}
	
	if(!whetherReject_tMSSqlRow_13) {
		
					row33 = new row33Struct();
					
	}
	

 


	tos_count_tMSSqlRow_13++;

/**
 * [tMSSqlRow_13 main ] stop
 */
	
	/**
	 * [tMSSqlRow_13 process_data_begin ] start
	 */

	

	
	
	currentComponent="tMSSqlRow_13";

	

 



/**
 * [tMSSqlRow_13 process_data_begin ] stop
 */
// Start of branch "row33"
if(row33 != null) { 
			row89 = null;



	
	/**
	 * [tMSSqlRow_14 main ] start
	 */

	

	
	
	currentComponent="tMSSqlRow_14";

	
					if(execStat){
						runStat.updateStatOnConnection(iterateId,1,1
						
							,"row33"
						
						);
					}
					

		row89 = null;
		
query_tMSSqlRow_14 = "CREATE PROCEDURE ImportPateRelsValidate\nAS \n	BEGIN\n		SET NOCOUNT ON\n		\n		/* Procedure name: ImportPateRelsValidate"
+"\n		Input:  IPAS database and import tables not imported (i.e. IND_IMPORT not 1)\n		Output: if errors, validation flag s"
+"et to 2 and error messages in ["+ context.intermediateDB + "].[dbo].VW_IMPORT_patent__RELS_RESULT\n		if OK, validation flag set to 9\n		*/\n		\n		/* flag all pending patents rels "
+"as to be validated */\n		UPDATE  ["+ context.intermediateDB + "].[dbo].VW_import_patent_rels   \n		SET	ind_import = 0 \n		WHERE  ind_import  is null\n		 OR	ind_import  not in ( 0  , "
+"1  ) \n		\n		/* delete prior errors */\n		DELETE FROM   ["+ context.intermediateDB + "].[dbo].VW_IMPORT_patent_RELS_RESULT    \n		\n		/* 2.1.1 ["+ context.intermediateDB + "].[dbo].VW_IMPORT_patent_RELS validations */\n		/* RELATIONSHIP_TYPE: if not exists in CF_RELATIONSHIP_TYPE, message ?I"
+"nvalid relationship type? */\n		INSERT INTO  ["+ context.intermediateDB + "].[dbo].VW_IMPORT_patent_RELS_RESULT   \n				( file_seq , \n				file_type , \n				file_series , \n				file_nbr , \n				"
+"relationship_type , \n				relationship_role , \n				related_file_seq , \n				related_file_type , \n				related_file_seri"
+"es , \n				related_file_nbr , \n				ind_import , \n				msg_import )  \n		SELECT\n				 file_seq,\n				 file_type,\n				 f"
+"ile_series,\n				 file_nbr,\n				 relationship_type,\n				 relationship_role,\n				 related_file_seq,\n				 related_file"
+"_type,\n				 related_file_series,\n				 related_file_nbr,\n				 2,\n				 'Invalid relationship type'\n		FROM  ["+ context.intermediateDB + "].[dbo].VW_import_patent_rels \n		WHERE	 ind_import  = 0\n		 AND	relationship_type COLLATE DATABASE_DEFAULT not in\n			"
+"(\n		 	SELECT relationship_typ\n			FROM  cf_relationship_type \n			)\n		\n		/* RELATIONSHIP_ROLE: if not in 1 / 2, messa"
+"ge ?Invalid relationship role? */\n		INSERT INTO  ["+ context.intermediateDB + "].[dbo].VW_IMPORT_patent_RELS_RESULT   \n				( file_seq , \n				file_type , \n				file_series , \n				file_nbr , \n				"
+"relationship_type , \n				relationship_role , \n				related_file_seq , \n				related_file_type , \n				related_file_seri"
+"es , \n				related_file_nbr , \n				ind_import , \n				msg_import )  \n		SELECT\n				 file_seq,\n				 file_type,\n				 f"
+"ile_series,\n				 file_nbr,\n				 relationship_type,\n				 relationship_role,\n				 related_file_seq,\n				 related_file"
+"_type,\n				 related_file_series,\n				 related_file_nbr,\n				 2,\n				 'Invalid relationship role'\n		FROM  ["+ context.intermediateDB + "].[dbo].VW_import_patent_rels \n		WHERE	 ind_import  = 0\n		 AND	relationship_role  not in ( '1'  , '2'  )\n		\n		/* If"
+" FILE_SEQ / FILE_TYPE / FILE_SERIES / FILE_NBR already exists in IP_FILE, insert message ?File sequence / type / series "
+"/ number is invalid? */\n		INSERT INTO  ["+ context.intermediateDB + "].[dbo].VW_IMPORT_patent_RELS_RESULT   \n				( file_seq , \n				file_type , \n				file_series , \n				file_nbr , \n				"
+"relationship_type , \n				relationship_role , \n				related_file_seq , \n				related_file_type , \n				related_file_seri"
+"es , \n				related_file_nbr , \n				ind_import , \n				msg_import )  \n		SELECT\n				 file_seq,\n				 file_type,\n				 f"
+"ile_series,\n				 file_nbr,\n				 relationship_type,\n				 relationship_role,\n				 related_file_seq,\n				 related_file"
+"_type,\n				 related_file_series,\n				 related_file_nbr,\n				 2,\n				 'File sequence / type / series / number is inva"
+"lid'\n		FROM  ["+ context.intermediateDB + "].[dbo].VW_import_patent_rels \n		WHERE	 ind_import  = 0\n		 AND	 NOT EXISTS\n			(\n		 	SELECT\n					 IP_FILE.file_seq,"
+"\n					 IP_FILE.file_typ,\n					 IP_FILE.file_ser,\n					 IP_FILE.file_nbr\n			FROM  IP_FILE \n			WHERE	 IP_FILE.file_se"
+"q  = ["+ context.intermediateDB + "].[dbo].VW_import_patent_rels.file_seq		COLLATE DATABASE_DEFAULT\n			 AND	IP_FILE.file_typ  = ["+ context.intermediateDB + "].[dbo].VW_import_patent_rels.file_type		COLLATE DATABASE_DEFAULT\n			 AND	IP_FILE.file_ser  = ["+ context.intermediateDB + "].[dbo].VW_import_patent_rels.file_series\n			 AND	IP_FILE.file_nbr  = ["+ context.intermediateDB + "].[dbo].VW_import_patent_rels.file_nbr\n			)\n		\n		/* If RELATED_FILE_SEQ / RELATED_FILE_TYPE / RELATED_FILE_SERIES / "
+"RELATED_FILE_NBR already exists in IP_FILE, insert message ?Related file sequence / type / series / number is invalid? *"
+"/\n		INSERT INTO  ["+ context.intermediateDB + "].[dbo].VW_IMPORT_patent_RELS_RESULT   \n				( file_seq , \n				file_type , \n				file_series , \n				file_nbr , \n				"
+"relationship_type , \n				relationship_role , \n				related_file_seq , \n				related_file_type , \n				related_file_seri"
+"es , \n				related_file_nbr , \n				ind_import , \n				msg_import )  \n		SELECT\n				 file_seq,\n				 file_type,\n				 f"
+"ile_series,\n				 file_nbr,\n				 relationship_type,\n				 relationship_role,\n				 related_file_seq,\n				 related_file"
+"_type,\n				 related_file_series,\n				 related_file_nbr,\n				 2,\n				 'Related file sequence / type / series / number"
+" is invalid'\n		FROM  ["+ context.intermediateDB + "].[dbo].VW_import_patent_rels \n		WHERE	 ind_import  = 0\n		 AND	 NOT EXISTS\n			(\n		 	SELECT\n					 IP_FILE.file_seq,"
+"\n					 IP_FILE.file_typ,\n					 IP_FILE.file_ser,\n					 IP_FILE.file_nbr\n			FROM  IP_FILE \n			WHERE	 IP_FILE.file_se"
+"q  = ["+ context.intermediateDB + "].[dbo].VW_import_patent_rels.related_file_seq		COLLATE DATABASE_DEFAULT\n			 AND	IP_FILE.file_typ  = ["+ context.intermediateDB + "].[dbo].VW_import_patent_rels.related_file_type		COLLATE DATABASE_DEFAULT\n			 AND	IP_FILE.file_ser  = ["+ context.intermediateDB + "].[dbo].VW_import_patent_rels.related_file_series\n			 AND	IP_FILE.file_nbr  = ["+ context.intermediateDB + "].[dbo].VW_import_patent_rels.related_file_nbr\n			)\n		\n		/* *************** END OF VALIDATIONS *************** */\n	"
+"	/* set import indicator to error, for those cases with error messages */\n		UPDATE  M   \n		SET	ind_import = 2 \n		FROM"
+"  ["+ context.intermediateDB + "].[dbo].VW_IMPORT_patent_RELS M \n		WHERE    exists\n			(\n		 	SELECT *\n			FROM  ["+ context.intermediateDB + "].[dbo].VW_IMPORT_patent_RELS_RESULT R \n			WHERE	 M.file_seq  = R.file_seq\n			 AND	M.file_type  = R.file_type\n			 AN"
+"D	M.file_series  = R.file_series\n			 AND	M.file_nbr  = R.file_nbr\n			) \n		\n		/* set import indicator to validated, f"
+"or those cases with no error messages */\n		UPDATE  M   \n		SET	ind_import = 9 \n		FROM  ["+ context.intermediateDB + "].[dbo].VW_IMPORT_patent_RELS M \n		WHERE  ind_import  = 0 \n		\n\n		SET NOCOUNT OFF\n\n	END";
whetherReject_tMSSqlRow_14 = false;
globalMap.put("tMSSqlRow_14_QUERY",query_tMSSqlRow_14);
try {
		stmt_tMSSqlRow_14.execute(query_tMSSqlRow_14);
		
	} catch (java.lang.Exception e) {
		whetherReject_tMSSqlRow_14 = true;
		
				row89 = new row89Struct();
				
				row89.errorCode = ((java.sql.SQLException)e).getSQLState();
				row89.errorMessage = e.getMessage() + " - Line: " + tos_count_tMSSqlRow_14;
				
	}
	
	if(!whetherReject_tMSSqlRow_14) {
		
	}
	

 


	tos_count_tMSSqlRow_14++;

/**
 * [tMSSqlRow_14 main ] stop
 */
	
	/**
	 * [tMSSqlRow_14 process_data_begin ] start
	 */

	

	
	
	currentComponent="tMSSqlRow_14";

	

 



/**
 * [tMSSqlRow_14 process_data_begin ] stop
 */
// Start of branch "row89"
if(row89 != null) { 



	
	/**
	 * [tLogRow_16 main ] start
	 */

	

	
	
	currentComponent="tLogRow_16";

	
					if(execStat){
						runStat.updateStatOnConnection(iterateId,1,1
						
							,"row89"
						
						);
					}
					
///////////////////////		
						



				strBuffer_tLogRow_16 = new StringBuilder();




   				
	    		if(row89.errorCode != null) { //              
                    							
       
				strBuffer_tLogRow_16.append(
				                String.valueOf(row89.errorCode)							
				);


							
	    		} //  			

    			strBuffer_tLogRow_16.append("|");
    			


   				
	    		if(row89.errorMessage != null) { //              
                    							
       
				strBuffer_tLogRow_16.append(
				                String.valueOf(row89.errorMessage)							
				);


							
	    		} //  			

				
				String[] row_tLogRow_16 = new String[2];
   				
	    		if(row89.errorCode != null) { //              
                 row_tLogRow_16[0]=    						    
				                String.valueOf(row89.errorCode)			
					          ;	
							
	    		} //			
    			   				
	    		if(row89.errorMessage != null) { //              
                 row_tLogRow_16[1]=    						    
				                String.valueOf(row89.errorMessage)			
					          ;	
							
	    		} //			
    			
				nb_line_tLogRow_16++;
                consoleOut_tLogRow_16.println(util_tLogRow_16.print(row_tLogRow_16,nb_line_tLogRow_16));
                consoleOut_tLogRow_16.flush();
//////

//////                    
                    
///////////////////////    			

 


	tos_count_tLogRow_16++;

/**
 * [tLogRow_16 main ] stop
 */
	
	/**
	 * [tLogRow_16 process_data_begin ] start
	 */

	

	
	
	currentComponent="tLogRow_16";

	

 



/**
 * [tLogRow_16 process_data_begin ] stop
 */
	
	/**
	 * [tLogRow_16 process_data_end ] start
	 */

	

	
	
	currentComponent="tLogRow_16";

	

 



/**
 * [tLogRow_16 process_data_end ] stop
 */

} // End of branch "row89"




	
	/**
	 * [tMSSqlRow_14 process_data_end ] start
	 */

	

	
	
	currentComponent="tMSSqlRow_14";

	

 



/**
 * [tMSSqlRow_14 process_data_end ] stop
 */

} // End of branch "row33"




// Start of branch "row88"
if(row88 != null) { 



	
	/**
	 * [tLogRow_15 main ] start
	 */

	

	
	
	currentComponent="tLogRow_15";

	
					if(execStat){
						runStat.updateStatOnConnection(iterateId,1,1
						
							,"row88"
						
						);
					}
					
///////////////////////		
						



				strBuffer_tLogRow_15 = new StringBuilder();




   				
	    		if(row88.errorCode != null) { //              
                    							
       
				strBuffer_tLogRow_15.append(
				                String.valueOf(row88.errorCode)							
				);


							
	    		} //  			

    			strBuffer_tLogRow_15.append("|");
    			


   				
	    		if(row88.errorMessage != null) { //              
                    							
       
				strBuffer_tLogRow_15.append(
				                String.valueOf(row88.errorMessage)							
				);


							
	    		} //  			

				
				String[] row_tLogRow_15 = new String[2];
   				
	    		if(row88.errorCode != null) { //              
                 row_tLogRow_15[0]=    						    
				                String.valueOf(row88.errorCode)			
					          ;	
							
	    		} //			
    			   				
	    		if(row88.errorMessage != null) { //              
                 row_tLogRow_15[1]=    						    
				                String.valueOf(row88.errorMessage)			
					          ;	
							
	    		} //			
    			
				nb_line_tLogRow_15++;
                consoleOut_tLogRow_15.println(util_tLogRow_15.print(row_tLogRow_15,nb_line_tLogRow_15));
                consoleOut_tLogRow_15.flush();
//////

//////                    
                    
///////////////////////    			

 


	tos_count_tLogRow_15++;

/**
 * [tLogRow_15 main ] stop
 */
	
	/**
	 * [tLogRow_15 process_data_begin ] start
	 */

	

	
	
	currentComponent="tLogRow_15";

	

 



/**
 * [tLogRow_15 process_data_begin ] stop
 */
	
	/**
	 * [tLogRow_15 process_data_end ] start
	 */

	

	
	
	currentComponent="tLogRow_15";

	

 



/**
 * [tLogRow_15 process_data_end ] stop
 */

} // End of branch "row88"




	
	/**
	 * [tMSSqlRow_13 process_data_end ] start
	 */

	

	
	
	currentComponent="tMSSqlRow_13";

	

 



/**
 * [tMSSqlRow_13 process_data_end ] stop
 */
	
	/**
	 * [tMSSqlRow_13 end ] start
	 */

	

	
	
	currentComponent="tMSSqlRow_13";

	

	
        stmt_tMSSqlRow_13.close();
        resourceMap.remove("stmt_tMSSqlRow_13");
    resourceMap.put("statementClosed_tMSSqlRow_13", true);
    resourceMap.put("finish_tMSSqlRow_13", true);
 

ok_Hash.put("tMSSqlRow_13", true);
end_Hash.put("tMSSqlRow_13", System.currentTimeMillis());




/**
 * [tMSSqlRow_13 end ] stop
 */

	
	/**
	 * [tMSSqlRow_14 end ] start
	 */

	

	
	
	currentComponent="tMSSqlRow_14";

	

	
        stmt_tMSSqlRow_14.close();
        resourceMap.remove("stmt_tMSSqlRow_14");
    resourceMap.put("statementClosed_tMSSqlRow_14", true);
    resourceMap.put("finish_tMSSqlRow_14", true);
				if(execStat){
			  		runStat.updateStat(resourceMap,iterateId,2,0,"row33");
			  	}
			  	
 

ok_Hash.put("tMSSqlRow_14", true);
end_Hash.put("tMSSqlRow_14", System.currentTimeMillis());




/**
 * [tMSSqlRow_14 end ] stop
 */

	
	/**
	 * [tLogRow_16 end ] start
	 */

	

	
	
	currentComponent="tLogRow_16";

	


//////
//////
globalMap.put("tLogRow_16_NB_LINE",nb_line_tLogRow_16);

///////////////////////    			

				if(execStat){
			  		runStat.updateStat(resourceMap,iterateId,2,0,"row89");
			  	}
			  	
 

ok_Hash.put("tLogRow_16", true);
end_Hash.put("tLogRow_16", System.currentTimeMillis());




/**
 * [tLogRow_16 end ] stop
 */







	
	/**
	 * [tLogRow_15 end ] start
	 */

	

	
	
	currentComponent="tLogRow_15";

	


//////
//////
globalMap.put("tLogRow_15_NB_LINE",nb_line_tLogRow_15);

///////////////////////    			

				if(execStat){
			  		runStat.updateStat(resourceMap,iterateId,2,0,"row88");
			  	}
			  	
 

ok_Hash.put("tLogRow_15", true);
end_Hash.put("tLogRow_15", System.currentTimeMillis());




/**
 * [tLogRow_15 end ] stop
 */



				}//end the resume

				
				    			if(resumeEntryMethodName == null || globalResumeTicket){
				    				resumeUtil.addLog("CHECKPOINT", "CONNECTION:SUBJOB_OK:tMSSqlRow_13:OnSubjobOk", "", Thread.currentThread().getId() + "", "", "", "", "", "");
								}	    				    			
					    	
								if(execStat){    	
									runStat.updateStatOnConnection("OnSubjobOk10", 0, "ok");
								} 
							
							tMSSqlRow_15Process(globalMap); 
						



	
			}catch(java.lang.Exception e){	
				
				TalendException te = new TalendException(e, currentComponent, globalMap);
				
				throw te;
			}catch(java.lang.Error error){	
				
					runStat.stopThreadStat();
				
				throw error;
			}finally{
				
				try{
					
	
	/**
	 * [tMSSqlRow_13 finally ] start
	 */

	

	
	
	currentComponent="tMSSqlRow_13";

	

    if (resourceMap.get("statementClosed_tMSSqlRow_13") == null) {
            java.sql.Statement stmtToClose_tMSSqlRow_13 = null;
            if ((stmtToClose_tMSSqlRow_13 = (java.sql.Statement) resourceMap.remove("stmt_tMSSqlRow_13")) != null) {
                stmtToClose_tMSSqlRow_13.close();
            }
    }
 



/**
 * [tMSSqlRow_13 finally ] stop
 */

	
	/**
	 * [tMSSqlRow_14 finally ] start
	 */

	

	
	
	currentComponent="tMSSqlRow_14";

	

    if (resourceMap.get("statementClosed_tMSSqlRow_14") == null) {
            java.sql.Statement stmtToClose_tMSSqlRow_14 = null;
            if ((stmtToClose_tMSSqlRow_14 = (java.sql.Statement) resourceMap.remove("stmt_tMSSqlRow_14")) != null) {
                stmtToClose_tMSSqlRow_14.close();
            }
    }
 



/**
 * [tMSSqlRow_14 finally ] stop
 */

	
	/**
	 * [tLogRow_16 finally ] start
	 */

	

	
	
	currentComponent="tLogRow_16";

	

 



/**
 * [tLogRow_16 finally ] stop
 */







	
	/**
	 * [tLogRow_15 finally ] start
	 */

	

	
	
	currentComponent="tLogRow_15";

	

 



/**
 * [tLogRow_15 finally ] stop
 */



				}catch(java.lang.Exception e){	
					//ignore
				}catch(java.lang.Error error){
					//ignore
				}
				resourceMap = null;
			}
		

		globalMap.put("tMSSqlRow_13_SUBPROCESS_STATE", 1);
	}
	


public static class row91Struct implements routines.system.IPersistableRow<row91Struct> {
    final static byte[] commonByteArrayLock_WIPO_PROJECTS_F_IPAS_ENV_CRE = new byte[0];
    static byte[] commonByteArray_WIPO_PROJECTS_F_IPAS_ENV_CRE = new byte[0];

	
			    public String errorCode;

				public String getErrorCode () {
					return this.errorCode;
				}
				
			    public String errorMessage;

				public String getErrorMessage () {
					return this.errorMessage;
				}
				



	private String readString(ObjectInputStream dis) throws IOException{
		String strReturn = null;
		int length = 0;
        length = dis.readInt();
		if (length == -1) {
			strReturn = null;
		} else {
			if(length > commonByteArray_WIPO_PROJECTS_F_IPAS_ENV_CRE.length) {
				if(length < 1024 && commonByteArray_WIPO_PROJECTS_F_IPAS_ENV_CRE.length == 0) {
   					commonByteArray_WIPO_PROJECTS_F_IPAS_ENV_CRE = new byte[1024];
				} else {
   					commonByteArray_WIPO_PROJECTS_F_IPAS_ENV_CRE = new byte[2 * length];
   				}
			}
			dis.readFully(commonByteArray_WIPO_PROJECTS_F_IPAS_ENV_CRE, 0, length);
			strReturn = new String(commonByteArray_WIPO_PROJECTS_F_IPAS_ENV_CRE, 0, length, utf8Charset);
		}
		return strReturn;
	}

    private void writeString(String str, ObjectOutputStream dos) throws IOException{
		if(str == null) {
            dos.writeInt(-1);
		} else {
            byte[] byteArray = str.getBytes(utf8Charset);
	    	dos.writeInt(byteArray.length);
			dos.write(byteArray);
    	}
    }

    public void readData(ObjectInputStream dis) {

		synchronized(commonByteArrayLock_WIPO_PROJECTS_F_IPAS_ENV_CRE) {

        	try {

        		int length = 0;
		
					this.errorCode = readString(dis);
					
					this.errorMessage = readString(dis);
					
        	} catch (IOException e) {
	            throw new RuntimeException(e);

		

        }

		

      }


    }

    public void writeData(ObjectOutputStream dos) {
        try {

		
					// String
				
						writeString(this.errorCode,dos);
					
					// String
				
						writeString(this.errorMessage,dos);
					
        	} catch (IOException e) {
	            throw new RuntimeException(e);
        }


    }


    public String toString() {

		StringBuilder sb = new StringBuilder();
		sb.append(super.toString());
		sb.append("[");
		sb.append("errorCode="+errorCode);
		sb.append(",errorMessage="+errorMessage);
	    sb.append("]");

	    return sb.toString();
    }

    /**
     * Compare keys
     */
    public int compareTo(row91Struct other) {

		int returnValue = -1;
		
	    return returnValue;
    }


    private int checkNullsAndCompare(Object object1, Object object2) {
        int returnValue = 0;
		if (object1 instanceof Comparable && object2 instanceof Comparable) {
            returnValue = ((Comparable) object1).compareTo(object2);
        } else if (object1 != null && object2 != null) {
            returnValue = compareStrings(object1.toString(), object2.toString());
        } else if (object1 == null && object2 != null) {
            returnValue = 1;
        } else if (object1 != null && object2 == null) {
            returnValue = -1;
        } else {
            returnValue = 0;
        }

        return returnValue;
    }

    private int compareStrings(String string1, String string2) {
        return string1.compareTo(string2);
    }


}

public static class row35Struct implements routines.system.IPersistableRow<row35Struct> {
    final static byte[] commonByteArrayLock_WIPO_PROJECTS_F_IPAS_ENV_CRE = new byte[0];
    static byte[] commonByteArray_WIPO_PROJECTS_F_IPAS_ENV_CRE = new byte[0];

	



    public void readData(ObjectInputStream dis) {

		synchronized(commonByteArrayLock_WIPO_PROJECTS_F_IPAS_ENV_CRE) {

        	try {

        		int length = 0;
		

		

        }

		
			finally {}
		

      }


    }

    public void writeData(ObjectOutputStream dos) {
        try {

		
        }

			finally {}
		

    }


    public String toString() {

		StringBuilder sb = new StringBuilder();
		sb.append(super.toString());
		sb.append("[");
	    sb.append("]");

	    return sb.toString();
    }

    /**
     * Compare keys
     */
    public int compareTo(row35Struct other) {

		int returnValue = -1;
		
	    return returnValue;
    }


    private int checkNullsAndCompare(Object object1, Object object2) {
        int returnValue = 0;
		if (object1 instanceof Comparable && object2 instanceof Comparable) {
            returnValue = ((Comparable) object1).compareTo(object2);
        } else if (object1 != null && object2 != null) {
            returnValue = compareStrings(object1.toString(), object2.toString());
        } else if (object1 == null && object2 != null) {
            returnValue = 1;
        } else if (object1 != null && object2 == null) {
            returnValue = -1;
        } else {
            returnValue = 0;
        }

        return returnValue;
    }

    private int compareStrings(String string1, String string2) {
        return string1.compareTo(string2);
    }


}

public static class row90Struct implements routines.system.IPersistableRow<row90Struct> {
    final static byte[] commonByteArrayLock_WIPO_PROJECTS_F_IPAS_ENV_CRE = new byte[0];
    static byte[] commonByteArray_WIPO_PROJECTS_F_IPAS_ENV_CRE = new byte[0];

	
			    public String errorCode;

				public String getErrorCode () {
					return this.errorCode;
				}
				
			    public String errorMessage;

				public String getErrorMessage () {
					return this.errorMessage;
				}
				



	private String readString(ObjectInputStream dis) throws IOException{
		String strReturn = null;
		int length = 0;
        length = dis.readInt();
		if (length == -1) {
			strReturn = null;
		} else {
			if(length > commonByteArray_WIPO_PROJECTS_F_IPAS_ENV_CRE.length) {
				if(length < 1024 && commonByteArray_WIPO_PROJECTS_F_IPAS_ENV_CRE.length == 0) {
   					commonByteArray_WIPO_PROJECTS_F_IPAS_ENV_CRE = new byte[1024];
				} else {
   					commonByteArray_WIPO_PROJECTS_F_IPAS_ENV_CRE = new byte[2 * length];
   				}
			}
			dis.readFully(commonByteArray_WIPO_PROJECTS_F_IPAS_ENV_CRE, 0, length);
			strReturn = new String(commonByteArray_WIPO_PROJECTS_F_IPAS_ENV_CRE, 0, length, utf8Charset);
		}
		return strReturn;
	}

    private void writeString(String str, ObjectOutputStream dos) throws IOException{
		if(str == null) {
            dos.writeInt(-1);
		} else {
            byte[] byteArray = str.getBytes(utf8Charset);
	    	dos.writeInt(byteArray.length);
			dos.write(byteArray);
    	}
    }

    public void readData(ObjectInputStream dis) {

		synchronized(commonByteArrayLock_WIPO_PROJECTS_F_IPAS_ENV_CRE) {

        	try {

        		int length = 0;
		
					this.errorCode = readString(dis);
					
					this.errorMessage = readString(dis);
					
        	} catch (IOException e) {
	            throw new RuntimeException(e);

		

        }

		

      }


    }

    public void writeData(ObjectOutputStream dos) {
        try {

		
					// String
				
						writeString(this.errorCode,dos);
					
					// String
				
						writeString(this.errorMessage,dos);
					
        	} catch (IOException e) {
	            throw new RuntimeException(e);
        }


    }


    public String toString() {

		StringBuilder sb = new StringBuilder();
		sb.append(super.toString());
		sb.append("[");
		sb.append("errorCode="+errorCode);
		sb.append(",errorMessage="+errorMessage);
	    sb.append("]");

	    return sb.toString();
    }

    /**
     * Compare keys
     */
    public int compareTo(row90Struct other) {

		int returnValue = -1;
		
	    return returnValue;
    }


    private int checkNullsAndCompare(Object object1, Object object2) {
        int returnValue = 0;
		if (object1 instanceof Comparable && object2 instanceof Comparable) {
            returnValue = ((Comparable) object1).compareTo(object2);
        } else if (object1 != null && object2 != null) {
            returnValue = compareStrings(object1.toString(), object2.toString());
        } else if (object1 == null && object2 != null) {
            returnValue = 1;
        } else if (object1 != null && object2 == null) {
            returnValue = -1;
        } else {
            returnValue = 0;
        }

        return returnValue;
    }

    private int compareStrings(String string1, String string2) {
        return string1.compareTo(string2);
    }


}
public void tMSSqlRow_15Process(final java.util.Map<String, Object> globalMap) throws TalendException {
	globalMap.put("tMSSqlRow_15_SUBPROCESS_STATE", 0);

 final boolean execStat = this.execStat;
	
		String iterateId = "";
	
	
	String currentComponent = "";
	java.util.Map<String, Object> resourceMap = new java.util.HashMap<String, Object>();

	try {
			// TDI-39566 avoid throwing an useless Exception
			boolean resumeIt = true;
			if (globalResumeTicket == false && resumeEntryMethodName != null) {
				String currentMethodName = new java.lang.Exception().getStackTrace()[0].getMethodName();
				resumeIt = resumeEntryMethodName.equals(currentMethodName);
			}
			if (resumeIt || globalResumeTicket) { //start the resume
				globalResumeTicket = true;



		row35Struct row35 = new row35Struct();
row91Struct row91 = new row91Struct();
row90Struct row90 = new row90Struct();





	
	/**
	 * [tLogRow_18 begin ] start
	 */

	

	
		
		ok_Hash.put("tLogRow_18", false);
		start_Hash.put("tLogRow_18", System.currentTimeMillis());
		
	
	currentComponent="tLogRow_18";

	
					if(execStat) {
						runStat.updateStatOnConnection(resourceMap,iterateId,0,0,"row91");
					}
				
		int tos_count_tLogRow_18 = 0;
		

	///////////////////////
		


	class Util_tLogRow_18 {
	
		String[] des_top = { ".", "-" };

        String[] des_data = { "-", "+" };

        String[] des_frame = { "|" }; 
        
        public void printLine(StringBuilder sb, int titleWidth, int dataWidth){
        
        	sb.append("+");
			for(int i=0; i<titleWidth+2; i++)
				sb.append("-");
			sb.append("+");
			for(int i=0; i<dataWidth+2; i++)
				sb.append("-");
        	sb.append("+" + "\n");
        }      

		public String print(String[] row, int nbLine){
			
			StringBuilder sb = new StringBuilder();
			
			    String title = "#" + nbLine + ". " + "tLogRow_18";
			    
		
			//step 1: get the max length of all the row[] member;
			int dataWidth = 5;		//the length of the string "value"	
			for(int i=0;i<row.length;i++) {
				if(row[i] == null && 4 > dataWidth) {
					dataWidth = 4;
				}
				else if(row[i] != null && row[i].length()>dataWidth) 
					dataWidth = row[i].length();
			}			
						
			int titleWidth = 12;
			
			int totalWidth = dataWidth + titleWidth + 5;
			
			//step 2: print the header with line number
			sb.append(".");
			for(int i=0 ; i<totalWidth ; i++)
				sb.append("-");			
			sb.append("." + "\n" + "|");
			
			int emptyCenterWidth = (totalWidth-title.length())/2;
			for(int i=0 ; i<emptyCenterWidth; i++)
				sb.append(" ");	
			sb.append(title);
			for(int i=0 ; i<totalWidth - emptyCenterWidth - title.length() ; i++)
				sb.append(" ");	
			sb.append("|" + "\n");
			
			//step 3: print "key" and "value"			
			printLine(sb,titleWidth,dataWidth);
			
			sb.append("|" + " key");
			for(int i=0; i<titleWidth-2; i++)
				sb.append(" ");
        	sb.append("|" + " value");
			for(int i=0; i<dataWidth-4; i++)
				sb.append(" ");
			sb.append("|" + "\n");
			
			printLine(sb,titleWidth,dataWidth);
			
			//step 4: print dataset
			
			//for(int i=0; i<row.length; i++){
				sb.append("| " + "errorCode");
				for(int i=0; i<titleWidth -"errorCode".length()+ 1 ;i++)
					sb.append(" ");
				sb.append("| " + row[0]);
				for(int i=0; row[0] == null && i<dataWidth - 3 || row[0] != null && i<dataWidth -row[0].length()+ 1 ;i++)
					sb.append(" ");
				sb.append("|" + "\n");
			
			//}

			
			//for(int i=0; i<row.length; i++){
				sb.append("| " + "errorMessage");
				for(int i=0; i<titleWidth -"errorMessage".length()+ 1 ;i++)
					sb.append(" ");
				sb.append("| " + row[1]);
				for(int i=0; row[1] == null && i<dataWidth - 3 || row[1] != null && i<dataWidth -row[1].length()+ 1 ;i++)
					sb.append(" ");
				sb.append("|" + "\n");
			
			//}

			
			//step 5: print a line gap
			printLine(sb,titleWidth,dataWidth);
			return sb.toString();

		}


	}

	Util_tLogRow_18 util_tLogRow_18 = new Util_tLogRow_18();




	java.io.PrintStream consoleOut_tLogRow_18 = null;
	if (globalMap.get("tLogRow_CONSOLE")!=null){
        consoleOut_tLogRow_18 = (java.io.PrintStream) globalMap.get("tLogRow_CONSOLE");
    }else{
        consoleOut_tLogRow_18 = new java.io.PrintStream(new java.io.BufferedOutputStream(System.out));
        globalMap.put("tLogRow_CONSOLE",consoleOut_tLogRow_18);
    }

 		StringBuilder strBuffer_tLogRow_18 = null;
		int nb_line_tLogRow_18 = 0;
///////////////////////    			



 



/**
 * [tLogRow_18 begin ] stop
 */



	
	/**
	 * [tMSSqlRow_16 begin ] start
	 */

	

	
		
		ok_Hash.put("tMSSqlRow_16", false);
		start_Hash.put("tMSSqlRow_16", System.currentTimeMillis());
		
	
	currentComponent="tMSSqlRow_16";

	
					if(execStat) {
						runStat.updateStatOnConnection(resourceMap,iterateId,0,0,"row35");
					}
				
		int tos_count_tMSSqlRow_16 = 0;
		

	java.sql.Connection conn_tMSSqlRow_16 = null;
	String query_tMSSqlRow_16 = "";
	boolean whetherReject_tMSSqlRow_16 = false;
				conn_tMSSqlRow_16 = (java.sql.Connection)globalMap.get("conn_tMSSqlConnection_4");
			
    resourceMap.put("conn_tMSSqlRow_16", conn_tMSSqlRow_16);
        java.sql.Statement stmt_tMSSqlRow_16 = conn_tMSSqlRow_16.createStatement();
        resourceMap.put("stmt_tMSSqlRow_16", stmt_tMSSqlRow_16);

 



/**
 * [tMSSqlRow_16 begin ] stop
 */




	
	/**
	 * [tLogRow_17 begin ] start
	 */

	

	
		
		ok_Hash.put("tLogRow_17", false);
		start_Hash.put("tLogRow_17", System.currentTimeMillis());
		
	
	currentComponent="tLogRow_17";

	
					if(execStat) {
						runStat.updateStatOnConnection(resourceMap,iterateId,0,0,"row90");
					}
				
		int tos_count_tLogRow_17 = 0;
		

	///////////////////////
		


	class Util_tLogRow_17 {
	
		String[] des_top = { ".", "-" };

        String[] des_data = { "-", "+" };

        String[] des_frame = { "|" }; 
        
        public void printLine(StringBuilder sb, int titleWidth, int dataWidth){
        
        	sb.append("+");
			for(int i=0; i<titleWidth+2; i++)
				sb.append("-");
			sb.append("+");
			for(int i=0; i<dataWidth+2; i++)
				sb.append("-");
        	sb.append("+" + "\n");
        }      

		public String print(String[] row, int nbLine){
			
			StringBuilder sb = new StringBuilder();
			
			    String title = "#" + nbLine + ". " + "tLogRow_17";
			    
		
			//step 1: get the max length of all the row[] member;
			int dataWidth = 5;		//the length of the string "value"	
			for(int i=0;i<row.length;i++) {
				if(row[i] == null && 4 > dataWidth) {
					dataWidth = 4;
				}
				else if(row[i] != null && row[i].length()>dataWidth) 
					dataWidth = row[i].length();
			}			
						
			int titleWidth = 12;
			
			int totalWidth = dataWidth + titleWidth + 5;
			
			//step 2: print the header with line number
			sb.append(".");
			for(int i=0 ; i<totalWidth ; i++)
				sb.append("-");			
			sb.append("." + "\n" + "|");
			
			int emptyCenterWidth = (totalWidth-title.length())/2;
			for(int i=0 ; i<emptyCenterWidth; i++)
				sb.append(" ");	
			sb.append(title);
			for(int i=0 ; i<totalWidth - emptyCenterWidth - title.length() ; i++)
				sb.append(" ");	
			sb.append("|" + "\n");
			
			//step 3: print "key" and "value"			
			printLine(sb,titleWidth,dataWidth);
			
			sb.append("|" + " key");
			for(int i=0; i<titleWidth-2; i++)
				sb.append(" ");
        	sb.append("|" + " value");
			for(int i=0; i<dataWidth-4; i++)
				sb.append(" ");
			sb.append("|" + "\n");
			
			printLine(sb,titleWidth,dataWidth);
			
			//step 4: print dataset
			
			//for(int i=0; i<row.length; i++){
				sb.append("| " + "errorCode");
				for(int i=0; i<titleWidth -"errorCode".length()+ 1 ;i++)
					sb.append(" ");
				sb.append("| " + row[0]);
				for(int i=0; row[0] == null && i<dataWidth - 3 || row[0] != null && i<dataWidth -row[0].length()+ 1 ;i++)
					sb.append(" ");
				sb.append("|" + "\n");
			
			//}

			
			//for(int i=0; i<row.length; i++){
				sb.append("| " + "errorMessage");
				for(int i=0; i<titleWidth -"errorMessage".length()+ 1 ;i++)
					sb.append(" ");
				sb.append("| " + row[1]);
				for(int i=0; row[1] == null && i<dataWidth - 3 || row[1] != null && i<dataWidth -row[1].length()+ 1 ;i++)
					sb.append(" ");
				sb.append("|" + "\n");
			
			//}

			
			//step 5: print a line gap
			printLine(sb,titleWidth,dataWidth);
			return sb.toString();

		}


	}

	Util_tLogRow_17 util_tLogRow_17 = new Util_tLogRow_17();




	java.io.PrintStream consoleOut_tLogRow_17 = null;
	if (globalMap.get("tLogRow_CONSOLE")!=null){
        consoleOut_tLogRow_17 = (java.io.PrintStream) globalMap.get("tLogRow_CONSOLE");
    }else{
        consoleOut_tLogRow_17 = new java.io.PrintStream(new java.io.BufferedOutputStream(System.out));
        globalMap.put("tLogRow_CONSOLE",consoleOut_tLogRow_17);
    }

 		StringBuilder strBuffer_tLogRow_17 = null;
		int nb_line_tLogRow_17 = 0;
///////////////////////    			



 



/**
 * [tLogRow_17 begin ] stop
 */



	
	/**
	 * [tMSSqlRow_15 begin ] start
	 */

	

	
		
		ok_Hash.put("tMSSqlRow_15", false);
		start_Hash.put("tMSSqlRow_15", System.currentTimeMillis());
		
	
	currentComponent="tMSSqlRow_15";

	
		int tos_count_tMSSqlRow_15 = 0;
		

	java.sql.Connection conn_tMSSqlRow_15 = null;
	String query_tMSSqlRow_15 = "";
	boolean whetherReject_tMSSqlRow_15 = false;
				conn_tMSSqlRow_15 = (java.sql.Connection)globalMap.get("conn_tMSSqlConnection_4");
			
    resourceMap.put("conn_tMSSqlRow_15", conn_tMSSqlRow_15);
        java.sql.Statement stmt_tMSSqlRow_15 = conn_tMSSqlRow_15.createStatement();
        resourceMap.put("stmt_tMSSqlRow_15", stmt_tMSSqlRow_15);

 



/**
 * [tMSSqlRow_15 begin ] stop
 */
	
	/**
	 * [tMSSqlRow_15 main ] start
	 */

	

	
	
	currentComponent="tMSSqlRow_15";

	

		row35 = null;
		
		row90 = null;
		
query_tMSSqlRow_15 = "If Exists ( SELECT name \n            FROM sysobjects  \n            WHERE name = 'ImportPateRelsProcessAll'\n         "
+"   AND type = 'P')\n	DROP PROCEDURE ImportPateRelsProcessAll;\n";
whetherReject_tMSSqlRow_15 = false;
globalMap.put("tMSSqlRow_15_QUERY",query_tMSSqlRow_15);
try {
		stmt_tMSSqlRow_15.execute(query_tMSSqlRow_15);
		
	} catch (java.lang.Exception e) {
		whetherReject_tMSSqlRow_15 = true;
		
				row90 = new row90Struct();
				
				row90.errorCode = ((java.sql.SQLException)e).getSQLState();
				row90.errorMessage = e.getMessage() + " - Line: " + tos_count_tMSSqlRow_15;
				
	}
	
	if(!whetherReject_tMSSqlRow_15) {
		
					row35 = new row35Struct();
					
	}
	

 


	tos_count_tMSSqlRow_15++;

/**
 * [tMSSqlRow_15 main ] stop
 */
	
	/**
	 * [tMSSqlRow_15 process_data_begin ] start
	 */

	

	
	
	currentComponent="tMSSqlRow_15";

	

 



/**
 * [tMSSqlRow_15 process_data_begin ] stop
 */
// Start of branch "row35"
if(row35 != null) { 
			row91 = null;



	
	/**
	 * [tMSSqlRow_16 main ] start
	 */

	

	
	
	currentComponent="tMSSqlRow_16";

	
					if(execStat){
						runStat.updateStatOnConnection(iterateId,1,1
						
							,"row35"
						
						);
					}
					

		row91 = null;
		
query_tMSSqlRow_16 = "CREATE PROCEDURE ImportPateRelsProcessAll\nAS \n	BEGIN\n		SET NOCOUNT ON\n		\n		/* Procedure name: ImportPateRelsProces"
+"s\n		Input:  import tables with IND_IMPORT = 9\n		Output: IPAS database updated and import tables updated with IND_IMPOR"
+"T = 1\n		*/\n		\n		/* insert forward relationships */\n		INSERT INTO  ip_file_relationship   \n				( row_version , \n			"
+"	file_seq1 , \n				file_typ1 , \n				file_ser1 , \n				file_nbr1 , \n				file_seq2 , \n				file_typ2 , \n				file_ser2 ,"
+" \n				file_nbr2 , \n				relationship_typ )  \n		SELECT DISTINCT\n				 1,\n				 file_seq,\n				 file_type,\n				 file_se"
+"ries,\n				 file_nbr,\n				 related_file_seq,\n				 related_file_type,\n				 related_file_series,\n				 related_file_nbr"
+",\n				 relationship_type\n		FROM  ["+ context.intermediateDB + "].[dbo].VW_IMPORT_patent_RELS \n		WHERE	 ind_import  = '9'\n		 AND	relationship_role  = '1'\n		\n		/* insert backward r"
+"elationships */\n		INSERT INTO  ip_file_relationship   \n				( row_version , \n				file_seq1 , \n				file_typ1 , \n				f"
+"ile_ser1 , \n				file_nbr1 , \n				file_seq2 , \n				file_typ2 , \n				file_ser2 , \n				file_nbr2 , \n				relationship_"
+"typ )  \n		SELECT DISTINCT\n				 1,\n				 related_file_seq,\n				 related_file_type,\n				 related_file_series,\n				 re"
+"lated_file_nbr,\n				 file_seq,\n				 file_type,\n				 file_series,\n				 file_nbr,\n				 relationship_type\n		FROM  ["+ context.intermediateDB + "].[dbo].VW_IMPORT_patent_RELS \n		WHERE	 ind_import  = '9'\n		 AND	relationship_role  = '2'\n		\n\n		SET NOCOUNT OFF\n"
+"\n	END";
whetherReject_tMSSqlRow_16 = false;
globalMap.put("tMSSqlRow_16_QUERY",query_tMSSqlRow_16);
try {
		stmt_tMSSqlRow_16.execute(query_tMSSqlRow_16);
		
	} catch (java.lang.Exception e) {
		whetherReject_tMSSqlRow_16 = true;
		
				row91 = new row91Struct();
				
				row91.errorCode = ((java.sql.SQLException)e).getSQLState();
				row91.errorMessage = e.getMessage() + " - Line: " + tos_count_tMSSqlRow_16;
				
	}
	
	if(!whetherReject_tMSSqlRow_16) {
		
	}
	

 


	tos_count_tMSSqlRow_16++;

/**
 * [tMSSqlRow_16 main ] stop
 */
	
	/**
	 * [tMSSqlRow_16 process_data_begin ] start
	 */

	

	
	
	currentComponent="tMSSqlRow_16";

	

 



/**
 * [tMSSqlRow_16 process_data_begin ] stop
 */
// Start of branch "row91"
if(row91 != null) { 



	
	/**
	 * [tLogRow_18 main ] start
	 */

	

	
	
	currentComponent="tLogRow_18";

	
					if(execStat){
						runStat.updateStatOnConnection(iterateId,1,1
						
							,"row91"
						
						);
					}
					
///////////////////////		
						



				strBuffer_tLogRow_18 = new StringBuilder();




   				
	    		if(row91.errorCode != null) { //              
                    							
       
				strBuffer_tLogRow_18.append(
				                String.valueOf(row91.errorCode)							
				);


							
	    		} //  			

    			strBuffer_tLogRow_18.append("|");
    			


   				
	    		if(row91.errorMessage != null) { //              
                    							
       
				strBuffer_tLogRow_18.append(
				                String.valueOf(row91.errorMessage)							
				);


							
	    		} //  			

				
				String[] row_tLogRow_18 = new String[2];
   				
	    		if(row91.errorCode != null) { //              
                 row_tLogRow_18[0]=    						    
				                String.valueOf(row91.errorCode)			
					          ;	
							
	    		} //			
    			   				
	    		if(row91.errorMessage != null) { //              
                 row_tLogRow_18[1]=    						    
				                String.valueOf(row91.errorMessage)			
					          ;	
							
	    		} //			
    			
				nb_line_tLogRow_18++;
                consoleOut_tLogRow_18.println(util_tLogRow_18.print(row_tLogRow_18,nb_line_tLogRow_18));
                consoleOut_tLogRow_18.flush();
//////

//////                    
                    
///////////////////////    			

 


	tos_count_tLogRow_18++;

/**
 * [tLogRow_18 main ] stop
 */
	
	/**
	 * [tLogRow_18 process_data_begin ] start
	 */

	

	
	
	currentComponent="tLogRow_18";

	

 



/**
 * [tLogRow_18 process_data_begin ] stop
 */
	
	/**
	 * [tLogRow_18 process_data_end ] start
	 */

	

	
	
	currentComponent="tLogRow_18";

	

 



/**
 * [tLogRow_18 process_data_end ] stop
 */

} // End of branch "row91"




	
	/**
	 * [tMSSqlRow_16 process_data_end ] start
	 */

	

	
	
	currentComponent="tMSSqlRow_16";

	

 



/**
 * [tMSSqlRow_16 process_data_end ] stop
 */

} // End of branch "row35"




// Start of branch "row90"
if(row90 != null) { 



	
	/**
	 * [tLogRow_17 main ] start
	 */

	

	
	
	currentComponent="tLogRow_17";

	
					if(execStat){
						runStat.updateStatOnConnection(iterateId,1,1
						
							,"row90"
						
						);
					}
					
///////////////////////		
						



				strBuffer_tLogRow_17 = new StringBuilder();




   				
	    		if(row90.errorCode != null) { //              
                    							
       
				strBuffer_tLogRow_17.append(
				                String.valueOf(row90.errorCode)							
				);


							
	    		} //  			

    			strBuffer_tLogRow_17.append("|");
    			


   				
	    		if(row90.errorMessage != null) { //              
                    							
       
				strBuffer_tLogRow_17.append(
				                String.valueOf(row90.errorMessage)							
				);


							
	    		} //  			

				
				String[] row_tLogRow_17 = new String[2];
   				
	    		if(row90.errorCode != null) { //              
                 row_tLogRow_17[0]=    						    
				                String.valueOf(row90.errorCode)			
					          ;	
							
	    		} //			
    			   				
	    		if(row90.errorMessage != null) { //              
                 row_tLogRow_17[1]=    						    
				                String.valueOf(row90.errorMessage)			
					          ;	
							
	    		} //			
    			
				nb_line_tLogRow_17++;
                consoleOut_tLogRow_17.println(util_tLogRow_17.print(row_tLogRow_17,nb_line_tLogRow_17));
                consoleOut_tLogRow_17.flush();
//////

//////                    
                    
///////////////////////    			

 


	tos_count_tLogRow_17++;

/**
 * [tLogRow_17 main ] stop
 */
	
	/**
	 * [tLogRow_17 process_data_begin ] start
	 */

	

	
	
	currentComponent="tLogRow_17";

	

 



/**
 * [tLogRow_17 process_data_begin ] stop
 */
	
	/**
	 * [tLogRow_17 process_data_end ] start
	 */

	

	
	
	currentComponent="tLogRow_17";

	

 



/**
 * [tLogRow_17 process_data_end ] stop
 */

} // End of branch "row90"




	
	/**
	 * [tMSSqlRow_15 process_data_end ] start
	 */

	

	
	
	currentComponent="tMSSqlRow_15";

	

 



/**
 * [tMSSqlRow_15 process_data_end ] stop
 */
	
	/**
	 * [tMSSqlRow_15 end ] start
	 */

	

	
	
	currentComponent="tMSSqlRow_15";

	

	
        stmt_tMSSqlRow_15.close();
        resourceMap.remove("stmt_tMSSqlRow_15");
    resourceMap.put("statementClosed_tMSSqlRow_15", true);
    resourceMap.put("finish_tMSSqlRow_15", true);
 

ok_Hash.put("tMSSqlRow_15", true);
end_Hash.put("tMSSqlRow_15", System.currentTimeMillis());




/**
 * [tMSSqlRow_15 end ] stop
 */

	
	/**
	 * [tMSSqlRow_16 end ] start
	 */

	

	
	
	currentComponent="tMSSqlRow_16";

	

	
        stmt_tMSSqlRow_16.close();
        resourceMap.remove("stmt_tMSSqlRow_16");
    resourceMap.put("statementClosed_tMSSqlRow_16", true);
    resourceMap.put("finish_tMSSqlRow_16", true);
				if(execStat){
			  		runStat.updateStat(resourceMap,iterateId,2,0,"row35");
			  	}
			  	
 

ok_Hash.put("tMSSqlRow_16", true);
end_Hash.put("tMSSqlRow_16", System.currentTimeMillis());




/**
 * [tMSSqlRow_16 end ] stop
 */

	
	/**
	 * [tLogRow_18 end ] start
	 */

	

	
	
	currentComponent="tLogRow_18";

	


//////
//////
globalMap.put("tLogRow_18_NB_LINE",nb_line_tLogRow_18);

///////////////////////    			

				if(execStat){
			  		runStat.updateStat(resourceMap,iterateId,2,0,"row91");
			  	}
			  	
 

ok_Hash.put("tLogRow_18", true);
end_Hash.put("tLogRow_18", System.currentTimeMillis());




/**
 * [tLogRow_18 end ] stop
 */







	
	/**
	 * [tLogRow_17 end ] start
	 */

	

	
	
	currentComponent="tLogRow_17";

	


//////
//////
globalMap.put("tLogRow_17_NB_LINE",nb_line_tLogRow_17);

///////////////////////    			

				if(execStat){
			  		runStat.updateStat(resourceMap,iterateId,2,0,"row90");
			  	}
			  	
 

ok_Hash.put("tLogRow_17", true);
end_Hash.put("tLogRow_17", System.currentTimeMillis());




/**
 * [tLogRow_17 end ] stop
 */



				}//end the resume

				
				    			if(resumeEntryMethodName == null || globalResumeTicket){
				    				resumeUtil.addLog("CHECKPOINT", "CONNECTION:SUBJOB_OK:tMSSqlRow_15:OnSubjobOk", "", Thread.currentThread().getId() + "", "", "", "", "", "");
								}	    				    			
					    	
								if(execStat){    	
									runStat.updateStatOnConnection("OnSubjobOk11", 0, "ok");
								} 
							
							tMSSqlRow_17Process(globalMap); 
						



	
			}catch(java.lang.Exception e){	
				
				TalendException te = new TalendException(e, currentComponent, globalMap);
				
				throw te;
			}catch(java.lang.Error error){	
				
					runStat.stopThreadStat();
				
				throw error;
			}finally{
				
				try{
					
	
	/**
	 * [tMSSqlRow_15 finally ] start
	 */

	

	
	
	currentComponent="tMSSqlRow_15";

	

    if (resourceMap.get("statementClosed_tMSSqlRow_15") == null) {
            java.sql.Statement stmtToClose_tMSSqlRow_15 = null;
            if ((stmtToClose_tMSSqlRow_15 = (java.sql.Statement) resourceMap.remove("stmt_tMSSqlRow_15")) != null) {
                stmtToClose_tMSSqlRow_15.close();
            }
    }
 



/**
 * [tMSSqlRow_15 finally ] stop
 */

	
	/**
	 * [tMSSqlRow_16 finally ] start
	 */

	

	
	
	currentComponent="tMSSqlRow_16";

	

    if (resourceMap.get("statementClosed_tMSSqlRow_16") == null) {
            java.sql.Statement stmtToClose_tMSSqlRow_16 = null;
            if ((stmtToClose_tMSSqlRow_16 = (java.sql.Statement) resourceMap.remove("stmt_tMSSqlRow_16")) != null) {
                stmtToClose_tMSSqlRow_16.close();
            }
    }
 



/**
 * [tMSSqlRow_16 finally ] stop
 */

	
	/**
	 * [tLogRow_18 finally ] start
	 */

	

	
	
	currentComponent="tLogRow_18";

	

 



/**
 * [tLogRow_18 finally ] stop
 */







	
	/**
	 * [tLogRow_17 finally ] start
	 */

	

	
	
	currentComponent="tLogRow_17";

	

 



/**
 * [tLogRow_17 finally ] stop
 */



				}catch(java.lang.Exception e){	
					//ignore
				}catch(java.lang.Error error){
					//ignore
				}
				resourceMap = null;
			}
		

		globalMap.put("tMSSqlRow_15_SUBPROCESS_STATE", 1);
	}
	


public static class row94Struct implements routines.system.IPersistableRow<row94Struct> {
    final static byte[] commonByteArrayLock_WIPO_PROJECTS_F_IPAS_ENV_CRE = new byte[0];
    static byte[] commonByteArray_WIPO_PROJECTS_F_IPAS_ENV_CRE = new byte[0];

	
			    public String errorCode;

				public String getErrorCode () {
					return this.errorCode;
				}
				
			    public String errorMessage;

				public String getErrorMessage () {
					return this.errorMessage;
				}
				



	private String readString(ObjectInputStream dis) throws IOException{
		String strReturn = null;
		int length = 0;
        length = dis.readInt();
		if (length == -1) {
			strReturn = null;
		} else {
			if(length > commonByteArray_WIPO_PROJECTS_F_IPAS_ENV_CRE.length) {
				if(length < 1024 && commonByteArray_WIPO_PROJECTS_F_IPAS_ENV_CRE.length == 0) {
   					commonByteArray_WIPO_PROJECTS_F_IPAS_ENV_CRE = new byte[1024];
				} else {
   					commonByteArray_WIPO_PROJECTS_F_IPAS_ENV_CRE = new byte[2 * length];
   				}
			}
			dis.readFully(commonByteArray_WIPO_PROJECTS_F_IPAS_ENV_CRE, 0, length);
			strReturn = new String(commonByteArray_WIPO_PROJECTS_F_IPAS_ENV_CRE, 0, length, utf8Charset);
		}
		return strReturn;
	}

    private void writeString(String str, ObjectOutputStream dos) throws IOException{
		if(str == null) {
            dos.writeInt(-1);
		} else {
            byte[] byteArray = str.getBytes(utf8Charset);
	    	dos.writeInt(byteArray.length);
			dos.write(byteArray);
    	}
    }

    public void readData(ObjectInputStream dis) {

		synchronized(commonByteArrayLock_WIPO_PROJECTS_F_IPAS_ENV_CRE) {

        	try {

        		int length = 0;
		
					this.errorCode = readString(dis);
					
					this.errorMessage = readString(dis);
					
        	} catch (IOException e) {
	            throw new RuntimeException(e);

		

        }

		

      }


    }

    public void writeData(ObjectOutputStream dos) {
        try {

		
					// String
				
						writeString(this.errorCode,dos);
					
					// String
				
						writeString(this.errorMessage,dos);
					
        	} catch (IOException e) {
	            throw new RuntimeException(e);
        }


    }


    public String toString() {

		StringBuilder sb = new StringBuilder();
		sb.append(super.toString());
		sb.append("[");
		sb.append("errorCode="+errorCode);
		sb.append(",errorMessage="+errorMessage);
	    sb.append("]");

	    return sb.toString();
    }

    /**
     * Compare keys
     */
    public int compareTo(row94Struct other) {

		int returnValue = -1;
		
	    return returnValue;
    }


    private int checkNullsAndCompare(Object object1, Object object2) {
        int returnValue = 0;
		if (object1 instanceof Comparable && object2 instanceof Comparable) {
            returnValue = ((Comparable) object1).compareTo(object2);
        } else if (object1 != null && object2 != null) {
            returnValue = compareStrings(object1.toString(), object2.toString());
        } else if (object1 == null && object2 != null) {
            returnValue = 1;
        } else if (object1 != null && object2 == null) {
            returnValue = -1;
        } else {
            returnValue = 0;
        }

        return returnValue;
    }

    private int compareStrings(String string1, String string2) {
        return string1.compareTo(string2);
    }


}

public static class row39Struct implements routines.system.IPersistableRow<row39Struct> {
    final static byte[] commonByteArrayLock_WIPO_PROJECTS_F_IPAS_ENV_CRE = new byte[0];
    static byte[] commonByteArray_WIPO_PROJECTS_F_IPAS_ENV_CRE = new byte[0];

	



    public void readData(ObjectInputStream dis) {

		synchronized(commonByteArrayLock_WIPO_PROJECTS_F_IPAS_ENV_CRE) {

        	try {

        		int length = 0;
		

		

        }

		
			finally {}
		

      }


    }

    public void writeData(ObjectOutputStream dos) {
        try {

		
        }

			finally {}
		

    }


    public String toString() {

		StringBuilder sb = new StringBuilder();
		sb.append(super.toString());
		sb.append("[");
	    sb.append("]");

	    return sb.toString();
    }

    /**
     * Compare keys
     */
    public int compareTo(row39Struct other) {

		int returnValue = -1;
		
	    return returnValue;
    }


    private int checkNullsAndCompare(Object object1, Object object2) {
        int returnValue = 0;
		if (object1 instanceof Comparable && object2 instanceof Comparable) {
            returnValue = ((Comparable) object1).compareTo(object2);
        } else if (object1 != null && object2 != null) {
            returnValue = compareStrings(object1.toString(), object2.toString());
        } else if (object1 == null && object2 != null) {
            returnValue = 1;
        } else if (object1 != null && object2 == null) {
            returnValue = -1;
        } else {
            returnValue = 0;
        }

        return returnValue;
    }

    private int compareStrings(String string1, String string2) {
        return string1.compareTo(string2);
    }


}

public static class row93Struct implements routines.system.IPersistableRow<row93Struct> {
    final static byte[] commonByteArrayLock_WIPO_PROJECTS_F_IPAS_ENV_CRE = new byte[0];
    static byte[] commonByteArray_WIPO_PROJECTS_F_IPAS_ENV_CRE = new byte[0];

	
			    public String errorCode;

				public String getErrorCode () {
					return this.errorCode;
				}
				
			    public String errorMessage;

				public String getErrorMessage () {
					return this.errorMessage;
				}
				



	private String readString(ObjectInputStream dis) throws IOException{
		String strReturn = null;
		int length = 0;
        length = dis.readInt();
		if (length == -1) {
			strReturn = null;
		} else {
			if(length > commonByteArray_WIPO_PROJECTS_F_IPAS_ENV_CRE.length) {
				if(length < 1024 && commonByteArray_WIPO_PROJECTS_F_IPAS_ENV_CRE.length == 0) {
   					commonByteArray_WIPO_PROJECTS_F_IPAS_ENV_CRE = new byte[1024];
				} else {
   					commonByteArray_WIPO_PROJECTS_F_IPAS_ENV_CRE = new byte[2 * length];
   				}
			}
			dis.readFully(commonByteArray_WIPO_PROJECTS_F_IPAS_ENV_CRE, 0, length);
			strReturn = new String(commonByteArray_WIPO_PROJECTS_F_IPAS_ENV_CRE, 0, length, utf8Charset);
		}
		return strReturn;
	}

    private void writeString(String str, ObjectOutputStream dos) throws IOException{
		if(str == null) {
            dos.writeInt(-1);
		} else {
            byte[] byteArray = str.getBytes(utf8Charset);
	    	dos.writeInt(byteArray.length);
			dos.write(byteArray);
    	}
    }

    public void readData(ObjectInputStream dis) {

		synchronized(commonByteArrayLock_WIPO_PROJECTS_F_IPAS_ENV_CRE) {

        	try {

        		int length = 0;
		
					this.errorCode = readString(dis);
					
					this.errorMessage = readString(dis);
					
        	} catch (IOException e) {
	            throw new RuntimeException(e);

		

        }

		

      }


    }

    public void writeData(ObjectOutputStream dos) {
        try {

		
					// String
				
						writeString(this.errorCode,dos);
					
					// String
				
						writeString(this.errorMessage,dos);
					
        	} catch (IOException e) {
	            throw new RuntimeException(e);
        }


    }


    public String toString() {

		StringBuilder sb = new StringBuilder();
		sb.append(super.toString());
		sb.append("[");
		sb.append("errorCode="+errorCode);
		sb.append(",errorMessage="+errorMessage);
	    sb.append("]");

	    return sb.toString();
    }

    /**
     * Compare keys
     */
    public int compareTo(row93Struct other) {

		int returnValue = -1;
		
	    return returnValue;
    }


    private int checkNullsAndCompare(Object object1, Object object2) {
        int returnValue = 0;
		if (object1 instanceof Comparable && object2 instanceof Comparable) {
            returnValue = ((Comparable) object1).compareTo(object2);
        } else if (object1 != null && object2 != null) {
            returnValue = compareStrings(object1.toString(), object2.toString());
        } else if (object1 == null && object2 != null) {
            returnValue = 1;
        } else if (object1 != null && object2 == null) {
            returnValue = -1;
        } else {
            returnValue = 0;
        }

        return returnValue;
    }

    private int compareStrings(String string1, String string2) {
        return string1.compareTo(string2);
    }


}
public void tMSSqlRow_17Process(final java.util.Map<String, Object> globalMap) throws TalendException {
	globalMap.put("tMSSqlRow_17_SUBPROCESS_STATE", 0);

 final boolean execStat = this.execStat;
	
		String iterateId = "";
	
	
	String currentComponent = "";
	java.util.Map<String, Object> resourceMap = new java.util.HashMap<String, Object>();

	try {
			// TDI-39566 avoid throwing an useless Exception
			boolean resumeIt = true;
			if (globalResumeTicket == false && resumeEntryMethodName != null) {
				String currentMethodName = new java.lang.Exception().getStackTrace()[0].getMethodName();
				resumeIt = resumeEntryMethodName.equals(currentMethodName);
			}
			if (resumeIt || globalResumeTicket) { //start the resume
				globalResumeTicket = true;



		row39Struct row39 = new row39Struct();
row94Struct row94 = new row94Struct();
row93Struct row93 = new row93Struct();





	
	/**
	 * [tLogRow_20 begin ] start
	 */

	

	
		
		ok_Hash.put("tLogRow_20", false);
		start_Hash.put("tLogRow_20", System.currentTimeMillis());
		
	
	currentComponent="tLogRow_20";

	
					if(execStat) {
						runStat.updateStatOnConnection(resourceMap,iterateId,0,0,"row94");
					}
				
		int tos_count_tLogRow_20 = 0;
		

	///////////////////////
		


	class Util_tLogRow_20 {
	
		String[] des_top = { ".", "-" };

        String[] des_data = { "-", "+" };

        String[] des_frame = { "|" }; 
        
        public void printLine(StringBuilder sb, int titleWidth, int dataWidth){
        
        	sb.append("+");
			for(int i=0; i<titleWidth+2; i++)
				sb.append("-");
			sb.append("+");
			for(int i=0; i<dataWidth+2; i++)
				sb.append("-");
        	sb.append("+" + "\n");
        }      

		public String print(String[] row, int nbLine){
			
			StringBuilder sb = new StringBuilder();
			
			    String title = "#" + nbLine + ". " + "tLogRow_20";
			    
		
			//step 1: get the max length of all the row[] member;
			int dataWidth = 5;		//the length of the string "value"	
			for(int i=0;i<row.length;i++) {
				if(row[i] == null && 4 > dataWidth) {
					dataWidth = 4;
				}
				else if(row[i] != null && row[i].length()>dataWidth) 
					dataWidth = row[i].length();
			}			
						
			int titleWidth = 12;
			
			int totalWidth = dataWidth + titleWidth + 5;
			
			//step 2: print the header with line number
			sb.append(".");
			for(int i=0 ; i<totalWidth ; i++)
				sb.append("-");			
			sb.append("." + "\n" + "|");
			
			int emptyCenterWidth = (totalWidth-title.length())/2;
			for(int i=0 ; i<emptyCenterWidth; i++)
				sb.append(" ");	
			sb.append(title);
			for(int i=0 ; i<totalWidth - emptyCenterWidth - title.length() ; i++)
				sb.append(" ");	
			sb.append("|" + "\n");
			
			//step 3: print "key" and "value"			
			printLine(sb,titleWidth,dataWidth);
			
			sb.append("|" + " key");
			for(int i=0; i<titleWidth-2; i++)
				sb.append(" ");
        	sb.append("|" + " value");
			for(int i=0; i<dataWidth-4; i++)
				sb.append(" ");
			sb.append("|" + "\n");
			
			printLine(sb,titleWidth,dataWidth);
			
			//step 4: print dataset
			
			//for(int i=0; i<row.length; i++){
				sb.append("| " + "errorCode");
				for(int i=0; i<titleWidth -"errorCode".length()+ 1 ;i++)
					sb.append(" ");
				sb.append("| " + row[0]);
				for(int i=0; row[0] == null && i<dataWidth - 3 || row[0] != null && i<dataWidth -row[0].length()+ 1 ;i++)
					sb.append(" ");
				sb.append("|" + "\n");
			
			//}

			
			//for(int i=0; i<row.length; i++){
				sb.append("| " + "errorMessage");
				for(int i=0; i<titleWidth -"errorMessage".length()+ 1 ;i++)
					sb.append(" ");
				sb.append("| " + row[1]);
				for(int i=0; row[1] == null && i<dataWidth - 3 || row[1] != null && i<dataWidth -row[1].length()+ 1 ;i++)
					sb.append(" ");
				sb.append("|" + "\n");
			
			//}

			
			//step 5: print a line gap
			printLine(sb,titleWidth,dataWidth);
			return sb.toString();

		}


	}

	Util_tLogRow_20 util_tLogRow_20 = new Util_tLogRow_20();




	java.io.PrintStream consoleOut_tLogRow_20 = null;
	if (globalMap.get("tLogRow_CONSOLE")!=null){
        consoleOut_tLogRow_20 = (java.io.PrintStream) globalMap.get("tLogRow_CONSOLE");
    }else{
        consoleOut_tLogRow_20 = new java.io.PrintStream(new java.io.BufferedOutputStream(System.out));
        globalMap.put("tLogRow_CONSOLE",consoleOut_tLogRow_20);
    }

 		StringBuilder strBuffer_tLogRow_20 = null;
		int nb_line_tLogRow_20 = 0;
///////////////////////    			



 



/**
 * [tLogRow_20 begin ] stop
 */



	
	/**
	 * [tMSSqlRow_18 begin ] start
	 */

	

	
		
		ok_Hash.put("tMSSqlRow_18", false);
		start_Hash.put("tMSSqlRow_18", System.currentTimeMillis());
		
	
	currentComponent="tMSSqlRow_18";

	
					if(execStat) {
						runStat.updateStatOnConnection(resourceMap,iterateId,0,0,"row39");
					}
				
		int tos_count_tMSSqlRow_18 = 0;
		

	java.sql.Connection conn_tMSSqlRow_18 = null;
	String query_tMSSqlRow_18 = "";
	boolean whetherReject_tMSSqlRow_18 = false;
				conn_tMSSqlRow_18 = (java.sql.Connection)globalMap.get("conn_tMSSqlConnection_4");
			
    resourceMap.put("conn_tMSSqlRow_18", conn_tMSSqlRow_18);
        java.sql.Statement stmt_tMSSqlRow_18 = conn_tMSSqlRow_18.createStatement();
        resourceMap.put("stmt_tMSSqlRow_18", stmt_tMSSqlRow_18);

 



/**
 * [tMSSqlRow_18 begin ] stop
 */




	
	/**
	 * [tLogRow_19 begin ] start
	 */

	

	
		
		ok_Hash.put("tLogRow_19", false);
		start_Hash.put("tLogRow_19", System.currentTimeMillis());
		
	
	currentComponent="tLogRow_19";

	
					if(execStat) {
						runStat.updateStatOnConnection(resourceMap,iterateId,0,0,"row93");
					}
				
		int tos_count_tLogRow_19 = 0;
		

	///////////////////////
		


	class Util_tLogRow_19 {
	
		String[] des_top = { ".", "-" };

        String[] des_data = { "-", "+" };

        String[] des_frame = { "|" }; 
        
        public void printLine(StringBuilder sb, int titleWidth, int dataWidth){
        
        	sb.append("+");
			for(int i=0; i<titleWidth+2; i++)
				sb.append("-");
			sb.append("+");
			for(int i=0; i<dataWidth+2; i++)
				sb.append("-");
        	sb.append("+" + "\n");
        }      

		public String print(String[] row, int nbLine){
			
			StringBuilder sb = new StringBuilder();
			
			    String title = "#" + nbLine + ". " + "tLogRow_19";
			    
		
			//step 1: get the max length of all the row[] member;
			int dataWidth = 5;		//the length of the string "value"	
			for(int i=0;i<row.length;i++) {
				if(row[i] == null && 4 > dataWidth) {
					dataWidth = 4;
				}
				else if(row[i] != null && row[i].length()>dataWidth) 
					dataWidth = row[i].length();
			}			
						
			int titleWidth = 12;
			
			int totalWidth = dataWidth + titleWidth + 5;
			
			//step 2: print the header with line number
			sb.append(".");
			for(int i=0 ; i<totalWidth ; i++)
				sb.append("-");			
			sb.append("." + "\n" + "|");
			
			int emptyCenterWidth = (totalWidth-title.length())/2;
			for(int i=0 ; i<emptyCenterWidth; i++)
				sb.append(" ");	
			sb.append(title);
			for(int i=0 ; i<totalWidth - emptyCenterWidth - title.length() ; i++)
				sb.append(" ");	
			sb.append("|" + "\n");
			
			//step 3: print "key" and "value"			
			printLine(sb,titleWidth,dataWidth);
			
			sb.append("|" + " key");
			for(int i=0; i<titleWidth-2; i++)
				sb.append(" ");
        	sb.append("|" + " value");
			for(int i=0; i<dataWidth-4; i++)
				sb.append(" ");
			sb.append("|" + "\n");
			
			printLine(sb,titleWidth,dataWidth);
			
			//step 4: print dataset
			
			//for(int i=0; i<row.length; i++){
				sb.append("| " + "errorCode");
				for(int i=0; i<titleWidth -"errorCode".length()+ 1 ;i++)
					sb.append(" ");
				sb.append("| " + row[0]);
				for(int i=0; row[0] == null && i<dataWidth - 3 || row[0] != null && i<dataWidth -row[0].length()+ 1 ;i++)
					sb.append(" ");
				sb.append("|" + "\n");
			
			//}

			
			//for(int i=0; i<row.length; i++){
				sb.append("| " + "errorMessage");
				for(int i=0; i<titleWidth -"errorMessage".length()+ 1 ;i++)
					sb.append(" ");
				sb.append("| " + row[1]);
				for(int i=0; row[1] == null && i<dataWidth - 3 || row[1] != null && i<dataWidth -row[1].length()+ 1 ;i++)
					sb.append(" ");
				sb.append("|" + "\n");
			
			//}

			
			//step 5: print a line gap
			printLine(sb,titleWidth,dataWidth);
			return sb.toString();

		}


	}

	Util_tLogRow_19 util_tLogRow_19 = new Util_tLogRow_19();




	java.io.PrintStream consoleOut_tLogRow_19 = null;
	if (globalMap.get("tLogRow_CONSOLE")!=null){
        consoleOut_tLogRow_19 = (java.io.PrintStream) globalMap.get("tLogRow_CONSOLE");
    }else{
        consoleOut_tLogRow_19 = new java.io.PrintStream(new java.io.BufferedOutputStream(System.out));
        globalMap.put("tLogRow_CONSOLE",consoleOut_tLogRow_19);
    }

 		StringBuilder strBuffer_tLogRow_19 = null;
		int nb_line_tLogRow_19 = 0;
///////////////////////    			



 



/**
 * [tLogRow_19 begin ] stop
 */



	
	/**
	 * [tMSSqlRow_17 begin ] start
	 */

	

	
		
		ok_Hash.put("tMSSqlRow_17", false);
		start_Hash.put("tMSSqlRow_17", System.currentTimeMillis());
		
	
	currentComponent="tMSSqlRow_17";

	
		int tos_count_tMSSqlRow_17 = 0;
		

	java.sql.Connection conn_tMSSqlRow_17 = null;
	String query_tMSSqlRow_17 = "";
	boolean whetherReject_tMSSqlRow_17 = false;
				conn_tMSSqlRow_17 = (java.sql.Connection)globalMap.get("conn_tMSSqlConnection_4");
			
    resourceMap.put("conn_tMSSqlRow_17", conn_tMSSqlRow_17);
        java.sql.Statement stmt_tMSSqlRow_17 = conn_tMSSqlRow_17.createStatement();
        resourceMap.put("stmt_tMSSqlRow_17", stmt_tMSSqlRow_17);

 



/**
 * [tMSSqlRow_17 begin ] stop
 */
	
	/**
	 * [tMSSqlRow_17 main ] start
	 */

	

	
	
	currentComponent="tMSSqlRow_17";

	

		row39 = null;
		
		row93 = null;
		
query_tMSSqlRow_17 = "If Exists ( SELECT name \n            FROM sysobjects  \n            WHERE name = 'ImportUserdocValidate'\n            "
+"AND type = 'P')\n	DROP PROCEDURE ImportUserdocValidate;\n";
whetherReject_tMSSqlRow_17 = false;
globalMap.put("tMSSqlRow_17_QUERY",query_tMSSqlRow_17);
try {
		stmt_tMSSqlRow_17.execute(query_tMSSqlRow_17);
		
	} catch (java.lang.Exception e) {
		whetherReject_tMSSqlRow_17 = true;
		
				row93 = new row93Struct();
				
				row93.errorCode = ((java.sql.SQLException)e).getSQLState();
				row93.errorMessage = e.getMessage() + " - Line: " + tos_count_tMSSqlRow_17;
				
	}
	
	if(!whetherReject_tMSSqlRow_17) {
		
					row39 = new row39Struct();
					
	}
	

 


	tos_count_tMSSqlRow_17++;

/**
 * [tMSSqlRow_17 main ] stop
 */
	
	/**
	 * [tMSSqlRow_17 process_data_begin ] start
	 */

	

	
	
	currentComponent="tMSSqlRow_17";

	

 



/**
 * [tMSSqlRow_17 process_data_begin ] stop
 */
// Start of branch "row39"
if(row39 != null) { 
			row94 = null;



	
	/**
	 * [tMSSqlRow_18 main ] start
	 */

	

	
	
	currentComponent="tMSSqlRow_18";

	
					if(execStat){
						runStat.updateStatOnConnection(iterateId,1,1
						
							,"row39"
						
						);
					}
					

		row94 = null;
		
query_tMSSqlRow_18 = "CREATE PROCEDURE ImportUserdocValidate\nAS \nBEGIN\n		SET NOCOUNT ON\n		\n		/* Procedure name: ImportUserdocValidate\n	"
+"	Input:  IPAS database and import tables not imported (i.e. IND_IMPORT not 1)\n		Output: if errors, validation flag set "
+"to 2 and error messages in ["+ context.intermediateDB + "].[dbo].VW_IMPORT_USERDOC_RESULT\n		if OK, validation flag set to 9\n		create or replace procedure ImportUserdocValidat"
+"e as\n		*/\n		\n		/* flag all pending marks as to be validated */\n		UPDATE  ["+ context.intermediateDB + "].[dbo].VW_import_userdoc   \n		SET	ind_import = 0 \n		WHERE  ind_import  is null\n		 OR	ind_import  not in ( 0  , 1  )"
+" \n		\n		/* delete errors from prior executions */\n		DELETE FROM   ["+ context.intermediateDB + "].[dbo].VW_IMPORT_USERDOC_RESULT    \n		\n		/* 4.1.1 ["+ context.intermediateDB + "].[dbo].VW_IMPORT_USERDOC validations */\n		/* 4.1.1.1 Codes validations */\n		/* DOC_ORI: if not null and not exists i"
+"n CF_DOC_ORIGIN, message ?Invalid document origin code? */\n		INSERT INTO  ["+ context.intermediateDB + "].[dbo].VW_IMPORT_USERDOC_RESULT   \n				( userdoc_seq , \n				userdoc_series , \n				userdoc_nbr , \n				ind_import , "
+"\n				msg_import )  \n		SELECT\n				 userdoc_seq,\n				 userdoc_series,\n				 userdoc_nbr,\n				 2,\n				 'Invalid docum"
+"ent origin code'\n		FROM  ["+ context.intermediateDB + "].[dbo].VW_import_userdoc \n		WHERE	 ind_import  = 0\n		 AND	doc_ori  is not null\n		 AND	doc_ori  COLLATE database_def"
+"ault not in\n			(\n		 	SELECT doc_ori\n			FROM  CF_DOC_ORIGIN \n			)\n		\n		/* DOC_ORI: if null and not exists config pa"
+"ram 'MigrationCodOri' message ?Null document origin code but no 'MigrationDocOri' parameter configured? */\n		INSERT INT"
+"O  ["+ context.intermediateDB + "].[dbo].VW_IMPORT_USERDOC_RESULT   \n				( userdoc_seq , \n				userdoc_series , \n				userdoc_nbr , \n				ind_import , "
+"\n				msg_import )  \n		SELECT\n				 userdoc_seq,\n				 userdoc_series,\n				 userdoc_nbr,\n				 2,\n				 'Null document"
+" origin code but no [MigrationCodOri] parameter configured'\n		FROM  ["+ context.intermediateDB + "].[dbo].VW_import_userdoc \n		WHERE	 ind_import  = 0\n		 AND	doc_ori  is null\n		 AND	NOT   exists\n			(\n		 	SELECT *"
+"\n			FROM  CF_CONFIG_PARAM \n			WHERE	 config_code  = 'MigrationCodOri'\n			)\n		\n		/* USERDOC_SEQ: if not exists in CF_"
+"DOC_SEQUENCE, message ?Invalid document sequence code? */\n		INSERT INTO  ["+ context.intermediateDB + "].[dbo].VW_IMPORT_USERDOC_RESULT   \n				( userdoc_seq , \n				userdoc_series , \n				userdoc_nbr , \n				ind_import , "
+"\n				msg_import )  \n		SELECT\n				 userdoc_seq,\n				 userdoc_series,\n				 userdoc_nbr,\n				 2,\n				 'Invalid docum"
+"ent sequence code'\n		FROM  ["+ context.intermediateDB + "].[dbo].VW_import_userdoc \n		WHERE	 ind_import  = 0\n		 AND	userdoc_seq  COLLATE database_default not in\n			(\n		 	SE"
+"LECT doc_seq_typ\n			FROM  CF_DOC_SEQUENCE \n			)\n		\n		/* USERDOC_TYPE: if not exists in CF_USERDOC_TYPE, message ?Inv"
+"alid user document type? */\n		INSERT INTO  ["+ context.intermediateDB + "].[dbo].VW_IMPORT_USERDOC_RESULT   \n				( userdoc_seq , \n				userdoc_series , \n				userdoc_nbr , \n				ind_import , "
+"\n				msg_import )  \n		SELECT\n				 userdoc_seq,\n				 userdoc_series,\n				 userdoc_nbr,\n				 2,\n				 'Invalid user "
+"document type'\n		FROM  ["+ context.intermediateDB + "].[dbo].VW_import_userdoc \n		WHERE	 ind_import  = 0\n		 AND	USERDOC_TYPE COLLATE database_default not in\n			(\n		 	SE"
+"LECT userdoc_typ\n			FROM  CF_USERDOC_TYPE \n			)\n		\n		/* LAW_CODE: if not exists in CF_LAW, message ?Invalid law code"
+"? */\n		INSERT INTO  ["+ context.intermediateDB + "].[dbo].VW_IMPORT_USERDOC_RESULT   \n				( userdoc_seq , \n				userdoc_series , \n				userdoc_nbr , \n				ind_import , "
+"\n				msg_import )  \n		SELECT\n				 userdoc_seq,\n				 userdoc_series,\n				 userdoc_nbr,\n				 2,\n				 'Invalid law c"
+"ode'\n		FROM  ["+ context.intermediateDB + "].[dbo].VW_import_userdoc \n		WHERE	 ind_import  = 0\n		 AND	LAW_CODE  not in\n			(\n		 	SELECT law_code\n			FROM  CF_L"
+"AW \n			)\n		\n		/* CAPTURE_USER_ID: if not null and does not exist in IP_USER, message ?Invalid capture user code? */\n"
+"		INSERT INTO  ["+ context.intermediateDB + "].[dbo].VW_IMPORT_USERDOC_RESULT   \n				( userdoc_seq , \n				userdoc_series , \n				userdoc_nbr , \n				ind_import , "
+"\n				msg_import )  \n		SELECT\n				 userdoc_seq,\n				 userdoc_series,\n				 userdoc_nbr,\n				 2,\n				 'Invalid captu"
+"re user code'\n		FROM  ["+ context.intermediateDB + "].[dbo].VW_import_userdoc \n		WHERE	 ind_import  = 0\n		 AND	CAPTURE_USER_ID  is not null\n		 AND	CAPTURE_USER_ID  not "
+"in\n			(\n		 	SELECT user_id\n			FROM  IP_USER \n			)\n		\n		/* 4.1.1.2 Duplicate keys validations */\n		/* If USERDOC_S"
+"EQ / SERIES / NBR already exists in IP_DOC (doc_seq_typ, doc_seq_series, doc_seq_nbr), \n		       insert message ?Userdo"
+"c sequence / series / number already exists in the database? */\n		INSERT INTO  ["+ context.intermediateDB + "].[dbo].VW_IMPORT_USERDOC_RESULT   \n				( userdoc_seq , \n				userdoc_series , \n				userdoc_nbr , \n				ind_import , "
+"\n				msg_import )  \n		SELECT\n				 userdoc_seq,\n				 userdoc_series,\n				 userdoc_nbr,\n				 2,\n				 'Userdoc seque"
+"nce / series / number already exists in the database'\n		FROM	["+ context.intermediateDB + "].[dbo].VW_import_userdoc \n		WHERE	ind_import  = 0\n		 AND	exists\n				(select	*\n				 from	IP_DOC D\n				 where	USERD"
+"OC_SEQ		= doc_seq_typ COLLATE database_default\n				  and	USERDOC_SERIES	= doc_seq_series\n				  and	USERDOC_NBR		= doc_"
+"seq_nbr\n				)\n\n		/* If DOC_NBR is not null and DOC_ORI / DOC_SERIES / DOC_NBR already exists in IP_DOC, \n		       in"
+"sert message ?Document origin / series / number already exists in the database? */\n		INSERT INTO  ["+ context.intermediateDB + "].[dbo].VW_IMPORT_USERDOC_RESULT   \n				( userdoc_seq , \n				userdoc_series , \n				userdoc_nbr , \n				ind_import , "
+"\n				msg_import )  \n		SELECT\n				 userdoc_seq,\n				 userdoc_series,\n				 userdoc_nbr,\n				 2,\n				 'Document orig"
+"in / series / number already exists in the database'\n		FROM  ["+ context.intermediateDB + "].[dbo].VW_import_userdoc \n		WHERE	 ind_import  = 0\n		 AND	DOC_NBR  is not null\n		 AND	DOC_ORI  COLLATE database_def"
+"ault IN\n			(\n		 	SELECT doc_ori\n			FROM  IP_DOC \n			)\n		 AND	'E'  IN\n			(\n		 	SELECT doc_log\n			FROM  IP_DOC \n	"
+"		)\n		 AND	DOC_SERIES  IN\n			(\n		 	SELECT doc_ser\n			FROM  IP_DOC \n			)\n		 AND	DOC_NBR  IN\n			(\n		 	SELECT doc_n"
+"br\n			FROM  IP_DOC \n			)\n		\n		/* If DOC_NBR is not null and DOC_ORI / DOC_SERIES / DOC_NBR is repeated in ["+ context.intermediateDB + "].[dbo].VW_IMPORT_USERDOC,\n		insert message ?Document origin / series / number duplicated in intermediate table? */\n	"
+"	/* Generate work table with repeated DOC_ORI / DOC_SERIES / DOC_NBR */\n		\n		\n		DECLARE @EXEC_IMMEDIATE_VAR VARCHAR ("
+"4000)\n		SELECT @EXEC_IMMEDIATE_VAR  = 'TRUNCATE TABLE wrk_doc_key' \n\n		EXECUTE (@EXEC_IMMEDIATE_VAR)\n		INSERT INTO  "
+"wrk_doc_key    \n		SELECT\n				 DOC_ORI,\n				 DOC_SERIES,\n				 DOC_NBR\n		FROM  ["+ context.intermediateDB + "].[dbo].VW_IMPORT_USERDOC \n		WHERE	 DOC_NBR  is not null\n		GROUP BY DOC_ORI,\n			 DOC_SERIES,\n			  DOC_NBR \n		HAVIN"
+"G COUNT(*)  > 1  \n		\n		INSERT INTO  ["+ context.intermediateDB + "].[dbo].VW_IMPORT_USERDOC_RESULT   \n				( userdoc_seq , \n				userdoc_series , \n				userdoc_nbr , \n				ind_import , "
+"\n				msg_import )  \n		SELECT\n				 userdoc_seq,\n				 userdoc_series,\n				 userdoc_nbr,\n				 2,\n				 'Document orig"
+"in / series / number duplicated in intermediate table'\n		FROM  ["+ context.intermediateDB + "].[dbo].VW_import_userdoc \n		WHERE	 ind_import  = 0\n		 AND	DOC_NBR  is not null\n		 AND	DOC_ORI  IN\n			(\n		 	SELECT"
+" doc_ori\n			FROM  wrk_doc_key \n			)\n		 AND	DOC_SERIES  IN\n			(\n		 	SELECT doc_series\n			FROM  wrk_doc_key \n			)\n"
+"		 AND	DOC_NBR  IN\n			(\n		 	SELECT doc_nbr\n			FROM  wrk_doc_key \n			)\n		\n		/* 4.1.1.3 Applicant person validations"
+" */\n		/* PERSON_NAME: if null and any of the other applicant person columns are not null, \n		       message ?Applicant"
+" name not specified but other person data is specified? */\n		INSERT INTO  ["+ context.intermediateDB + "].[dbo].VW_IMPORT_USERDOC_RESULT   \n				( userdoc_seq , \n				userdoc_series , \n				userdoc_nbr , \n				ind_import , "
+"\n				msg_import )  \n		SELECT\n				 userdoc_seq,\n				 userdoc_series,\n				 userdoc_nbr,\n				 2,\n				 'Applicant nam"
+"e not specified but other person data is specified'\n		FROM  ["+ context.intermediateDB + "].[dbo].VW_import_userdoc \n		WHERE	 ind_import  = 0\n		 AND	PERSON_NAME  is null\n		 AND	(NATIONALITY_COUNTRY_CODE  is"
+" not null\n		 OR	IND_COMPANY  is not null\n		 OR	LEGAL_NATURE  is not null\n		 OR	LEGAL_ID_TYPE  is not null\n		 OR	LEGA"
+"L_ID_NBR  is not null\n		 OR	INDIVIDUAL_ID_TYPE  is not null\n		 OR	INDIVIDUAL_ID_NBR  is not null\n		 OR	RESIDENCE_COUN"
+"TRY_CODE  is not null\n		 OR	STATE_NAME  is not null\n		 OR	STATE_CODE  is not null\n		 OR	CITY_NAME  is not null\n		 OR"
+"	ADDRESS_ZONE  is not null\n		 OR	ADDRESS_STREET  is not null\n		 OR	ZIP_CODE  is not null\n		 OR	EMAIL  is not null\n		"
+" OR	TELEPHONE  is not null\n		 OR	PERSON_GROUP_CODE  is not null)\n		\n		/* ADDRESS_STREET: if null, message ?Address st"
+"reet is required? */\n		INSERT INTO  ["+ context.intermediateDB + "].[dbo].VW_IMPORT_USERDOC_RESULT   \n				( userdoc_seq , \n				userdoc_series , \n				userdoc_nbr , \n				ind_import , "
+"\n				msg_import )  \n		SELECT\n				 userdoc_seq,\n				 userdoc_series,\n				 userdoc_nbr,\n				 2,\n				 'Address stree"
+"t is required'\n		FROM  ["+ context.intermediateDB + "].[dbo].VW_import_userdoc \n		WHERE	 ind_import  = 0\n		 AND	PERSON_NAME  is not null\n		 AND	ADDRESS_STREET  is null\n"
+"		\n		/* NATIONALITY_COUNTRY_CODE: if not null or exists in CF_GEO_COUNTRY, message ?Invalid applicant nationality count"
+"ry code? */\n		INSERT INTO  ["+ context.intermediateDB + "].[dbo].VW_IMPORT_USERDOC_RESULT   \n				( userdoc_seq , \n				userdoc_series , \n				userdoc_nbr , \n				ind_import , "
+"\n				msg_import )  \n		SELECT\n				 userdoc_seq,\n				 userdoc_series,\n				 userdoc_nbr,\n				 2,\n				 'Null or inval"
+"id applicant nationality country code'\n		FROM  ["+ context.intermediateDB + "].[dbo].VW_import_userdoc \n		WHERE	 ind_import  = 0\n		 AND	PERSON_NAME  is not null\n		 AND	(NATIONALITY_COUNTRY_CODE"
+"  is null\n		 OR	NATIONALITY_COUNTRY_CODE COLLATE database_default not in\n			(\n		 	SELECT COUNTRY_CODE\n			FROM  cf_ge"
+"o_country \n			))\n		\n		/* RESIDENCE_COUNTRY_CODE: if not null or exists in CF_GEO_COUNTRY, message ?Invalid applicant "
+"nationality country code? */\n		INSERT INTO  ["+ context.intermediateDB + "].[dbo].VW_IMPORT_USERDOC_RESULT   \n				( userdoc_seq , \n				userdoc_series , \n				userdoc_nbr , \n				ind_import , "
+"\n				msg_import )  \n		SELECT\n				 userdoc_seq,\n				 userdoc_series,\n				 userdoc_nbr,\n				 2,\n				 'Null or inval"
+"id applicant residence country code'\n		FROM  ["+ context.intermediateDB + "].[dbo].VW_import_userdoc \n		WHERE	 ind_import  = 0\n		 AND	PERSON_NAME  is not null\n		 AND	(RESIDENCE_COUNTRY_CODE  "
+"is null\n		 OR	RESIDENCE_COUNTRY_CODE COLLATE database_default not in\n			(\n		 	SELECT COUNTRY_CODE\n			FROM  cf_geo_co"
+"untry \n			))\n		\n		/* LEGAL_NATURE: if not null and IND_COMPANY = 0, message ?Applicant legal nature only applies when"
+" the person is a company? */\n		INSERT INTO  ["+ context.intermediateDB + "].[dbo].VW_IMPORT_USERDOC_RESULT   \n				( userdoc_seq , \n				userdoc_series , \n				userdoc_nbr , \n				ind_import , "
+"\n				msg_import )  \n		SELECT\n				 userdoc_seq,\n				 userdoc_series,\n				 userdoc_nbr,\n				 2,\n				 'Applicant leg"
+"al nature only applies when the person is a company'\n		FROM  ["+ context.intermediateDB + "].[dbo].VW_import_userdoc \n		WHERE	 ind_import  = 0\n		 AND	PERSON_NAME  is not null\n		 AND	LEGAL_NATURE  is not null"
+"\n		 AND	IND_COMPANY  = 0\n		\n		/* LEGAL_ID_TYPE: if not null and not exists if CF_PERSON_ID_TYPE with IND_GENERAL_ID ="
+" ?S?, \n		       message ?Invalid applicant legal id type? */\n		INSERT INTO  ["+ context.intermediateDB + "].[dbo].VW_IMPORT_USERDOC_RESULT   \n				( userdoc_seq , \n				userdoc_series , \n				userdoc_nbr , \n				ind_import , "
+"\n				msg_import )  \n		SELECT\n				 userdoc_seq,\n				 userdoc_series,\n				 userdoc_nbr,\n				 2,\n				 'Invalid owner"
+" legal id type'\n		FROM  ["+ context.intermediateDB + "].[dbo].VW_import_userdoc \n		WHERE	 ind_import  = 0\n		 AND	PERSON_NAME  is not null\n		 AND	LEGAL_ID_TYPE  is not nul"
+"l\n		 AND	LEGAL_ID_TYPE  COLLATE database_default not in\n			(\n		 	SELECT PERSON_ID_TYP\n			FROM  CF_PERSON_ID_TYPE \n	"
+"		WHERE	 IND_GENERAL_ID  = 'S'\n			)\n		\n		/* INDIVIDUAL_ID_TYPE: if not null and not exists if CF_PERSON_ID_TYPE with "
+"IND_INDIVIDUAL_ID = ?S?, \n		       message ?Invalid applicant individual id type? */\n		INSERT INTO  ["+ context.intermediateDB + "].[dbo].VW_IMPORT_USERDOC_RESULT   \n				( userdoc_seq , \n				userdoc_series , \n				userdoc_nbr , \n				ind_import , "
+"\n				msg_import )  \n		SELECT\n				 userdoc_seq,\n				 userdoc_series,\n				 userdoc_nbr,\n				 2,\n				 'Invalid owner"
+" individual id type'\n		FROM  ["+ context.intermediateDB + "].[dbo].VW_import_userdoc \n		WHERE	 ind_import  = 0\n		 AND	PERSON_NAME  is not null\n		 AND	INDIVIDUAL_ID_TYPE  is no"
+"t null\n		 AND	INDIVIDUAL_ID_TYPE  COLLATE database_default not in\n			(\n		 	SELECT PERSON_ID_TYP\n			FROM  CF_PERSON_I"
+"D_TYPE \n			WHERE	 IND_INDIVIDUAL_ID  = 'S'\n			)\n		\n		/* If LEGAL_ID_TYPE is not null and LEGAL_ID_NBR is null, messa"
+"ge ?Missing applicant legal id number? */\n		INSERT INTO  ["+ context.intermediateDB + "].[dbo].VW_IMPORT_USERDOC_RESULT   \n				( userdoc_seq , \n				userdoc_series , \n				userdoc_nbr , \n				ind_import , "
+"\n				msg_import )  \n		SELECT\n				 userdoc_seq,\n				 userdoc_series,\n				 userdoc_nbr,\n				 2,\n				 'Missing appli"
+"cant legal id number'\n		FROM  ["+ context.intermediateDB + "].[dbo].VW_import_userdoc \n		WHERE	 ind_import  = 0\n		 AND	PERSON_NAME  is not null\n		 AND	LEGAL_ID_TYPE  is not nul"
+"l\n		 AND	LEGAL_ID_NBR  is null\n		\n		/* If LEGAL_ID_TYPE is null and LEGAL_ID_NBR is not null, message ?Missing applic"
+"ant legal id type? */\n		INSERT INTO  ["+ context.intermediateDB + "].[dbo].VW_IMPORT_USERDOC_RESULT   \n				( userdoc_seq , \n				userdoc_series , \n				userdoc_nbr , \n				ind_import , "
+"\n				msg_import )  \n		SELECT\n				 userdoc_seq,\n				 userdoc_series,\n				 userdoc_nbr,\n				 2,\n				 'Missing appli"
+"cant legal id type'\n		FROM  ["+ context.intermediateDB + "].[dbo].VW_import_userdoc \n		WHERE	 ind_import  = 0\n		 AND	PERSON_NAME  is not null\n		 AND	LEGAL_ID_TYPE  is null\n	"
+"	 AND	LEGAL_ID_NBR  is not null\n		\n		/* If INDIVIDUAL_ID_TYPE is not null and INDIVIDUAL_ID_NBR is null, message ?Miss"
+"ing applicant individual id number? */\n		INSERT INTO  ["+ context.intermediateDB + "].[dbo].VW_IMPORT_USERDOC_RESULT   \n				( userdoc_seq , \n				userdoc_series , \n				userdoc_nbr , \n				ind_import , "
+"\n				msg_import )  \n		SELECT\n				 userdoc_seq,\n				 userdoc_series,\n				 userdoc_nbr,\n				 2,\n				 'Missing appli"
+"cant individual id number'\n		FROM  ["+ context.intermediateDB + "].[dbo].VW_import_userdoc \n		WHERE	 ind_import  = 0\n		 AND	PERSON_NAME  is not null\n		 AND	INDIVIDUAL_ID_TYPE  is no"
+"t null\n		 AND	INDIVIDUAL_ID_NBR  is null\n		\n		/* If INDIVIDUAL_ID_TYPE is null and INDIVIDUAL_ID_NBR is not null, mes"
+"sage ?Missing applicant individual id type? */\n		INSERT INTO  ["+ context.intermediateDB + "].[dbo].VW_IMPORT_USERDOC_RESULT   \n				( userdoc_seq , \n				userdoc_series , \n				userdoc_nbr , \n				ind_import , "
+"\n				msg_import )  \n		SELECT\n				 userdoc_seq,\n				 userdoc_series,\n				 userdoc_nbr,\n				 2,\n				 'Missing appli"
+"cant individual id type'\n		FROM  ["+ context.intermediateDB + "].[dbo].VW_import_userdoc \n		WHERE	 ind_import  = 0\n		 AND	PERSON_NAME  is not null\n		 AND	INDIVIDUAL_ID_TYPE  is nu"
+"ll\n		 AND	INDIVIDUAL_ID_NBR  is not null\n		\n		/* RESIDENCE_COUNTRY_CODE: if not exists in CF_GEO_COUNTRY, message ?In"
+"valid applicant residence country code? */\n		INSERT INTO  ["+ context.intermediateDB + "].[dbo].VW_IMPORT_USERDOC_RESULT   \n				( userdoc_seq , \n				userdoc_series , \n				userdoc_nbr , \n				ind_import , "
+"\n				msg_import )  \n		SELECT\n				 userdoc_seq,\n				 userdoc_series,\n				 userdoc_nbr,\n				 2,\n				 'Invalid appli"
+"cant residence country code'\n		FROM  ["+ context.intermediateDB + "].[dbo].VW_import_userdoc \n		WHERE	 ind_import  = 0\n		 AND	PERSON_NAME  is not null\n		 AND	RESIDENCE_COUNTRY_CODE CO"
+"LLATE database_default not in\n			(\n		 	SELECT COUNTRY_CODE\n			FROM  cf_geo_country \n			)\n		\n		/* STATE_CODE: if no"
+"t null and not exists RESIDENCE_COUNTRY_CODE / STATE_CODE in CF_GEO_STATE, \n		       message ?Invalid applicant residen"
+"ce state code? */\n		INSERT INTO  ["+ context.intermediateDB + "].[dbo].VW_IMPORT_USERDOC_RESULT   \n				( userdoc_seq , \n				userdoc_series , \n				userdoc_nbr , \n				ind_import , "
+"\n				msg_import )  \n		SELECT\n				 userdoc_seq,\n				 userdoc_series,\n				 userdoc_nbr,\n				 2,\n				 'Invalid appli"
+"cant residence state code'\n		FROM  ["+ context.intermediateDB + "].[dbo].VW_import_userdoc \n		WHERE	 ind_import  = 0\n		 AND	PERSON_NAME  is not null\n		 AND	STATE_CODE  is not null\n"
+"		 AND	 NOT EXISTS\n			(\n		 	SELECT\n					 cf_geo_state.COUNTRY_CODE,\n					 cf_geo_state.STATE_CODE\n			FROM  cf_geo_s"
+"tate \n			WHERE	 cf_geo_state.COUNTRY_CODE  = ["+ context.intermediateDB + "].[dbo].VW_import_userdoc.RESIDENCE_COUNTRY_CODE COLLATE database_default\n			 AND	cf_geo_state.STATE_CODE  = ["+ context.intermediateDB + "].[dbo].VW_import_userdoc.STATE_CODE COLLATE database_default\n			)\n		\n		/* If STATE_CODE Is null and exist any CF_GE"
+"O_STATE with the RESIDENCE_COUNTRY_CODE, \n		       message ?A state code is required for the specified applicant reside"
+"nce country? */\n		INSERT INTO  ["+ context.intermediateDB + "].[dbo].VW_IMPORT_USERDOC_RESULT   \n				( userdoc_seq , \n				userdoc_series , \n				userdoc_nbr , \n				ind_import , "
+"\n				msg_import )  \n		SELECT\n				 userdoc_seq,\n				 userdoc_series,\n				 userdoc_nbr,\n				 2,\n				 'A state code "
+"is required for the specified applicant residence country'\n		FROM  ["+ context.intermediateDB + "].[dbo].VW_import_userdoc \n		WHERE	 ind_import  = 0\n		 AND	PERSON_NAME  is not null\n		 AND	STATE_CODE  is null\n		 A"
+"ND	RESIDENCE_COUNTRY_CODE COLLATE database_default in\n			(\n		 	SELECT country_code\n			FROM  cf_geo_state S \n			)\n\n"
+"\n		/* CITY_CODE: if not null and not exists RESIDENCE_COUNTRY_CODE / STATE_CODE/CITY_CODE in CF_GEO_CITY, \n		       me"
+"ssage ?Invalid applicant residence state code? */\n		INSERT INTO  ["+ context.intermediateDB + "].[dbo].VW_IMPORT_USERDOC_RESULT   \n				( userdoc_seq , \n				userdoc_series , \n				userdoc_nbr , \n				ind_import , "
+"\n				msg_import )  \n		SELECT\n				 userdoc_seq,\n				 userdoc_series,\n				 userdoc_nbr,\n				 2,\n				 'Invalid appli"
+"cant city code'\n		FROM  ["+ context.intermediateDB + "].[dbo].VW_import_userdoc \n		WHERE	 ind_import  = 0\n		 AND	PERSON_NAME  is not null\n		 AND	CITY_CODE  is not null\n	"
+"	 AND	 NOT EXISTS\n			(\n		 	SELECT\n					 cf_geo_city.COUNTRY_CODE,\n					 cf_geo_city.STATE_CODE\n			FROM  cf_geo_city"
+" \n			WHERE	 cf_geo_city.COUNTRY_CODE  = ["+ context.intermediateDB + "].[dbo].VW_import_userdoc.RESIDENCE_COUNTRY_CODE COLLATE database_default\n			 AND	cf_geo_city.STATE_CODE  = ["+ context.intermediateDB + "].[dbo].VW_import_userdoc.STATE_CODE COLLATE database_default\n			 AND	cf_geo_city.CITY_CODE  = ["+ context.intermediateDB + "].[dbo].VW_import_userdoc.CITY_CODE COLLATE database_default\n			)\n\n\n\n\n\n\n		\n		/* If PERSON_GROUP_CODE is not nu"
+"ll and not exists in IP_PERSON_GROUP, message ?Invalid applicant person group code? */\n		INSERT INTO  ["+ context.intermediateDB + "].[dbo].VW_IMPORT_USERDOC_RESULT   \n				( userdoc_seq , \n				userdoc_series , \n				userdoc_nbr , \n				ind_import , "
+"\n				msg_import )  \n		SELECT\n				 userdoc_seq,\n				 userdoc_series,\n				 userdoc_nbr,\n				 2,\n				 'Invalid appli"
+"cant person group code'\n		FROM  ["+ context.intermediateDB + "].[dbo].VW_import_userdoc \n		WHERE	 ind_import  = 0\n		 AND	PERSON_NAME  is not null\n		 AND	PERSON_GROUP_CODE  is not"
+" null\n		 AND	PERSON_GROUP_CODE  COLLATE database_default not in\n			(\n		 	SELECT PERSON_GROUP_NBR\n			FROM  IP_PERSON_"
+"GROUP \n			)\n		\n		/* 4.1.2 ["+ context.intermediateDB + "].[dbo].VW_IMPORT_USERDOC_FILES validations */\n		/* If FILE_SEQ / FILE_TYP / FILE_SER / FILE_NBR not exists in IP_FILE"
+", message ?Affected file does not exist? */\n		INSERT INTO  ["+ context.intermediateDB + "].[dbo].VW_IMPORT_USERDOC_RESULT   \n				( userdoc_seq , \n				userdoc_series , \n				userdoc_nbr , \n				ind_import , "
+"\n				msg_import )  \n		SELECT\n				 T.userdoc_seq,\n				 T.userdoc_series,\n				 T.userdoc_nbr,\n				 2,\n				 'Affecte"
+"d file does not exist'\n		FROM  ["+ context.intermediateDB + "].[dbo].VW_import_userdoc_files T JOIN ["+ context.intermediateDB + "].[dbo].VW_import_userdoc U ON U.userdoc_seq  = T.userdoc_seq\n			 AND	U.userdoc_series  = T.userdoc_series\n			 AND	U."
+"userdoc_nbr  = T.userdoc_nbr  \n		WHERE	 ind_import  = 0\n		 AND	 NOT EXISTS\n			(\n		 	SELECT\n					 ip_file.file_seq,"
+"\n					 ip_file.file_typ,\n					 ip_file.file_ser,\n					 ip_file.file_nbr\n			FROM  ip_file \n			WHERE	 ip_file.file_seq"
+"  = T.FILE_SEQ COLLATE database_default\n			 AND	ip_file.file_typ  = T.FILE_TYPE COLLATE database_default\n			 AND	ip_fi"
+"le.file_ser  = T.FILE_SERIES\n			 AND	ip_file.file_nbr  = T.FILE_NBR\n			)\n		\n		/* If the userdoc type configuration i"
+"ndicates no association with files, \n		       message ?The type of the userdoc indicates that no association to files i"
+"s possible? */\n		INSERT INTO  ["+ context.intermediateDB + "].[dbo].VW_IMPORT_USERDOC_RESULT   \n				( userdoc_seq , \n				userdoc_series , \n				userdoc_nbr , \n				ind_import , "
+"\n				msg_import )  \n		SELECT\n				 T.userdoc_seq,\n				 T.userdoc_series,\n				 T.userdoc_nbr,\n				 2,\n				 'The typ"
+"e of the userdoc indicates that no association to files is possible'\n		FROM  ["+ context.intermediateDB + "].[dbo].VW_import_userdoc_files T JOIN ["+ context.intermediateDB + "].[dbo].VW_import_userdoc U ON U.userdoc_seq  = T.userdoc_seq\n			 AND	U.userdoc_series  = T.userdoc_series\n			 AND	U."
+"userdoc_nbr  = T.userdoc_nbr  \n		WHERE	 ind_import  = 0\n		 AND	userdoc_type COLLATE database_default not in\n			(\n		 "
+"	SELECT userdoc_typ\n			FROM  CF_USERDOC_TYPE \n			WHERE	 ind_affects_file  = 'S'\n			)\n		\n		/* 4.1.3 ["+ context.intermediateDB + "].[dbo].VW_IMPORT_USERDOC_OWNERS validations */\n		/* 4.1.3.1 New owner validations */\n		/* Generate work table with U"
+"SERDOC_SEQ / SERIES / NBR, IND_SERVICE and COUNT(*) */\n		\n		\n		DECLARE @EXEC_IMMEDIATE_VAR1 VARCHAR (4000)\n		SELECT "
+"@EXEC_IMMEDIATE_VAR1  = 'TRUNCATE TABLE wrk_userdoc_service_count' \n\n		EXECUTE (@EXEC_IMMEDIATE_VAR1)\n		INSERT INTO  "
+"wrk_userdoc_service_count    \n		SELECT\n				 USERDOC_SEQ,\n				 USERDOC_SERIES,\n				 USERDOC_NBR,\n				 IND_SERVICE,\n"
+"				 COUNT(*) count1\n		FROM  ["+ context.intermediateDB + "].[dbo].VW_IMPORT_USERDOC_OWNERS \n		GROUP BY USERDOC_SEQ,\n			 USERDOC_SERIES,\n			 USERDOC_NBR,\n			  IND_SERVICE \n	"
+"	\n		 /* check for duplicated owners*/\n		 \n		INSERT INTO  ["+ context.intermediateDB + "].[dbo].VW_IMPORT_USERDOC_RESULT   \n						( userdoc_seq , \n						userdoc_series , \n						userdoc_nbr , \n						ind_i"
+"mport , \n						msg_import )  \n		SELECT DISTINCT USERDOC_SEQ,USERDOC_SERIES,USERDOC_NBR,\n					2,	'Duplicated userdoc o"
+"wner'\n\n	    FROM ["+ context.intermediateDB + "].[dbo].VW_IMPORT_USERDOC M\n		WHERE IND_IMPORT=0 and\n			EXISTS(    \n		\n			SELECT  USERDOC_SEQ,USERDOC_SERIES,USERDO"
+"C_NBR,PERSON_NAME,NATIONALITY_COUNTRY_CODE,\n					coalesce(IND_COMPANY,0),coalesce(LEGAL_NATURE,''),\n					coalesce(LEGA"
+"L_ID_TYPE,''),coalesce(LEGAL_ID_NBR,0),coalesce(INDIVIDUAL_ID_TYPE,''),coalesce(INDIVIDUAL_ID_NBR,0), \n					RESIDENCE_C"
+"OUNTRY_CODE,coalesce(STATE_NAME,''),coalesce(STATE_CODE,''),coalesce(CITY_CODE,''),coalesce(CITY_NAME,''),coalesce(CITY_"
+"CODE,''),\n					coalesce(ADDRESS_ZONE,''),coalesce(ADDRESS_STREET,''),coalesce(ZIP_CODE,''),coalesce(EMAIL,''),\n					co"
+"alesce(TELEPHONE,''),	coalesce(PERSON_GROUP_CODE,'')\n			FROM ["+ context.intermediateDB + "].[dbo].VW_IMPORT_USERDOC_OWNERS T \n			WHERE	M.USERDOC_SEQ=T.USERDOC_SEQ and\n					M.USERDOC_SERIES=T.USERDOC_SERIES a"
+"nd\n					M.USERDOC_NBR=T.USERDOC_NBR\n			GROUP BY \n					USERDOC_SEQ,USERDOC_SERIES,USERDOC_NBR,PERSON_NAME,NATIONALITY_"
+"COUNTRY_CODE,\n					coalesce(IND_COMPANY,0),coalesce(LEGAL_NATURE,''),\n					coalesce(LEGAL_ID_TYPE,''),coalesce(LEGAL_I"
+"D_NBR,0),coalesce(INDIVIDUAL_ID_TYPE,''),coalesce(INDIVIDUAL_ID_NBR,0), \n					RESIDENCE_COUNTRY_CODE,coalesce(STATE_NAM"
+"E,''),coalesce(STATE_CODE,''),coalesce(CITY_CODE,''),coalesce(CITY_NAME,''),coalesce(CITY_CODE,''),\n					coalesce(ADDRE"
+"SS_ZONE,''),coalesce(ADDRESS_STREET,''),coalesce(ZIP_CODE,''),coalesce(EMAIL,''),\n					coalesce(TELEPHONE,''),	coalesce"
+"(PERSON_GROUP_CODE,'')			\n			HAVING COUNT(*)>1   \n			)\n		 \n		\n		\n		\n		 /* check for duplicated owners*/\n		 \n		I"
+"NSERT INTO  ["+ context.intermediateDB + "].[dbo].VW_IMPORT_USERDOC_RESULT   \n						( userdoc_seq , \n						userdoc_series , \n						userdoc_nbr , \n						ind_i"
+"mport , \n						msg_import )  \n		SELECT DISTINCT USERDOC_SEQ,USERDOC_SERIES,USERDOC_NBR,\n					2,	'Duplicated userdoc o"
+"wner'\n\n	    FROM ["+ context.intermediateDB + "].[dbo].VW_IMPORT_USERDOC M\n		WHERE IND_IMPORT=0 and\n			EXISTS(    \n		\n			SELECT  USERDOC_SEQ,USERDOC_SERIES,USERDO"
+"C_NBR,PERSON_NAME,NATIONALITY_COUNTRY_CODE,\n					coalesce(IND_COMPANY,0),coalesce(LEGAL_NATURE,''),\n					coalesce(LEGA"
+"L_ID_TYPE,''),coalesce(LEGAL_ID_NBR,0),coalesce(INDIVIDUAL_ID_TYPE,''),coalesce(INDIVIDUAL_ID_NBR,0), \n					RESIDENCE_C"
+"OUNTRY_CODE,coalesce(STATE_NAME,''),coalesce(STATE_CODE,''),coalesce(CITY_CODE,''),coalesce(CITY_NAME,''),coalesce(CITY_"
+"CODE,''),\n					coalesce(ADDRESS_ZONE,''),coalesce(ADDRESS_STREET,''),coalesce(ZIP_CODE,''),coalesce(EMAIL,''),\n					co"
+"alesce(TELEPHONE,''),	coalesce(PERSON_GROUP_CODE,'')\n			FROM ["+ context.intermediateDB + "].[dbo].VW_IMPORT_USERDOC_OWNERS T \n			WHERE	M.USERDOC_SEQ=T.USERDOC_SEQ and\n					M.USERDOC_SERIES=T.USERDOC_SERIES a"
+"nd\n					M.USERDOC_NBR=T.USERDOC_NBR\n			GROUP BY \n					USERDOC_SEQ,USERDOC_SERIES,USERDOC_NBR,PERSON_NAME,NATIONALITY_"
+"COUNTRY_CODE,\n					coalesce(IND_COMPANY,0),coalesce(LEGAL_NATURE,''),\n					coalesce(LEGAL_ID_TYPE,''),coalesce(LEGAL_I"
+"D_NBR,0),coalesce(INDIVIDUAL_ID_TYPE,''),coalesce(INDIVIDUAL_ID_NBR,0), \n					RESIDENCE_COUNTRY_CODE,coalesce(STATE_NAM"
+"E,''),coalesce(STATE_CODE,''),coalesce(CITY_CODE,''),coalesce(CITY_NAME,''),coalesce(CITY_CODE,''),\n					coalesce(ADDRE"
+"SS_ZONE,''),coalesce(ADDRESS_STREET,''),coalesce(ZIP_CODE,''),coalesce(EMAIL,''),\n					coalesce(TELEPHONE,''),	coalesce"
+"(PERSON_GROUP_CODE,'')			\n			HAVING COUNT(*)>1   \n			)\n		 \n		\n		\n		\n		/* No service address: where a new owner ex"
+"ists but none has IND_SERVICE = 1, \n		       message ?No new owner flagged as service address? */\n		INSERT INTO  ["+ context.intermediateDB + "].[dbo].VW_IMPORT_USERDOC_RESULT   \n				( userdoc_seq , \n				userdoc_series , \n				userdoc_nbr , \n				ind_import , "
+"\n				msg_import )  \n		SELECT\n				 userdoc_seq,\n				 userdoc_series,\n				 userdoc_nbr,\n				 2,\n				 'No new owner "
+"flagged as service address'\n		FROM  ["+ context.intermediateDB + "].[dbo].VW_import_userdoc U \n		WHERE	 ind_import  = 0\n		 AND	  exists\n			(\n		 	SELECT *\n			FROM  wrk_userdoc_servi"
+"ce_count W \n			WHERE	 U.userdoc_seq  = W.userdoc_seq\n			 AND	U.userdoc_series  = W.userdoc_series\n			 AND	U.userdoc_n"
+"br  = W.userdoc_nbr\n			)\n		 AND	NOT   exists\n			(\n		 	SELECT *\n			FROM  wrk_userdoc_service_count W \n			WHERE	 U.u"
+"serdoc_seq  = W.userdoc_seq\n			 AND	U.userdoc_series  = W.userdoc_series\n			 AND	U.userdoc_nbr  = W.userdoc_nbr\n			 A"
+"ND	ind_service  = 1\n			)\n		\n		/* Several service addresses: where exists corresponding tuple in the work table with "
+"\n		      IND_SERVICE = 1 and with count column > 1, message ?Several new owners flagged as service addresses? */\n		INSE"
+"RT INTO  ["+ context.intermediateDB + "].[dbo].VW_IMPORT_USERDOC_RESULT   \n				( userdoc_seq , \n				userdoc_series , \n				userdoc_nbr , \n				ind_import , "
+"\n				msg_import )  \n		SELECT\n				 U.userdoc_seq,\n				 U.userdoc_series,\n				 U.userdoc_nbr,\n				 2,\n				 'Several"
+" new owners flagged as service addresses'\n		FROM  ["+ context.intermediateDB + "].[dbo].VW_import_userdoc U JOIN wrk_userdoc_service_count W ON U.userdoc_seq  = W.userdoc_seq\n			 AND	U.userdoc_serie"
+"s  = W.userdoc_series\n			 AND	U.userdoc_nbr  = W.userdoc_nbr  \n		WHERE	 ind_import  = 0\n		 AND	ind_service  = 1\n		 A"
+"ND	count1  > 1\n		\n		/* 4.1.3.2 Person validations */\n		/* NATIONALITY_COUNTRY_CODE: if not exists in CF_GEO_COUNTRY, "
+"message ?Invalid new owner nationality country code? */\n		INSERT INTO  ["+ context.intermediateDB + "].[dbo].VW_IMPORT_USERDOC_RESULT   \n				( userdoc_seq , \n				userdoc_series , \n				userdoc_nbr , \n				ind_import , "
+"\n				msg_import )  \n		SELECT\n				 T.userdoc_seq,\n				 T.userdoc_series,\n				 T.userdoc_nbr,\n				 2,\n				 'Invalid"
+" new owner nationality country code'\n		FROM  ["+ context.intermediateDB + "].[dbo].VW_import_userdoc_owners T JOIN ["+ context.intermediateDB + "].[dbo].VW_import_userdoc U ON U.userdoc_seq  = T.userdoc_seq\n			 AND	U.userdoc_series  = T.userdoc_series\n			 AND	U."
+"userdoc_nbr  = T.userdoc_nbr  \n		WHERE	 ind_import  = 0\n		 AND	T.NATIONALITY_COUNTRY_CODE COLLATE database_default not"
+" in\n			(\n		 	SELECT COUNTRY_CODE\n			FROM  cf_geo_country \n			)\n		\n		/* LEGAL_NATURE: if not null and IND_COMPANY ="
+" 0, message ?New owner legal nature only applies when the person is a company? */\n		INSERT INTO  ["+ context.intermediateDB + "].[dbo].VW_IMPORT_USERDOC_RESULT   \n				( userdoc_seq , \n				userdoc_series , \n				userdoc_nbr , \n				ind_import , "
+"\n				msg_import )  \n		SELECT\n				 T.userdoc_seq,\n				 T.userdoc_series,\n				 T.userdoc_nbr,\n				 2,\n				 'New own"
+"er legal nature only applies when the person is a company'\n		FROM  ["+ context.intermediateDB + "].[dbo].VW_import_userdoc_owners T JOIN ["+ context.intermediateDB + "].[dbo].VW_import_userdoc U ON U.userdoc_seq  = T.userdoc_seq\n			 AND	U.userdoc_series  = T.userdoc_series\n			 AND	U."
+"userdoc_nbr  = T.userdoc_nbr  \n		WHERE	 ind_import  = 0\n		 AND	T.LEGAL_NATURE  is not null\n		 AND	T.IND_COMPANY  = 0"
+"\n		\n		/* LEGAL_ID_TYPE: if not null and not exists if CF_PERSON_ID_TYPE with IND_GENERAL_ID = ?S?, \n		       message ?"
+"Invalid new owner legal id type? */\n		INSERT INTO  ["+ context.intermediateDB + "].[dbo].VW_IMPORT_USERDOC_RESULT   \n				( userdoc_seq , \n				userdoc_series , \n				userdoc_nbr , \n				ind_import , "
+"\n				msg_import )  \n		SELECT\n				 T.userdoc_seq,\n				 T.userdoc_series,\n				 T.userdoc_nbr,\n				 2,\n				 'Invalid"
+" new owner legal id type'\n		FROM  ["+ context.intermediateDB + "].[dbo].VW_import_userdoc_owners T JOIN ["+ context.intermediateDB + "].[dbo].VW_import_userdoc U ON U.userdoc_seq  = T.userdoc_seq\n			 AND	U.userdoc_series  = T.userdoc_series\n			 AND	U."
+"userdoc_nbr  = T.userdoc_nbr  \n		WHERE	 ind_import  = 0\n		 AND	T.LEGAL_ID_TYPE  is not null\n		 AND	T.LEGAL_ID_TYPE CO"
+"LLATE database_default not in\n			(\n		 	SELECT PERSON_ID_TYP\n			FROM  CF_PERSON_ID_TYPE \n			WHERE	 IND_GENERAL_ID  = "
+"'S'\n			)\n		\n		/* INDIVIDUAL_ID_TYPE: if not null and not exists if CF_PERSON_ID_TYPE with IND_INDIVIDUAL_ID = ?S?, \n"
+"		       message ?Invalid new owner individual id type? */\n		INSERT INTO  ["+ context.intermediateDB + "].[dbo].VW_IMPORT_USERDOC_RESULT   \n				( userdoc_seq , \n				userdoc_series , \n				userdoc_nbr , \n				ind_import , "
+"\n				msg_import )  \n		SELECT\n				 T.userdoc_seq,\n				 T.userdoc_series,\n				 T.userdoc_nbr,\n				 2,\n				 'Invalid"
+" new owner individual id type'\n		FROM  ["+ context.intermediateDB + "].[dbo].VW_import_userdoc_owners T JOIN ["+ context.intermediateDB + "].[dbo].VW_import_userdoc U ON U.userdoc_seq  = T.userdoc_seq\n			 AND	U.userdoc_series  = T.userdoc_series\n			 AND	U."
+"userdoc_nbr  = T.userdoc_nbr  \n		WHERE	 ind_import  = 0\n		 AND	T.INDIVIDUAL_ID_TYPE  is not null\n		 AND	T.INDIVIDUAL_"
+"ID_TYPE  COLLATE database_default not in\n			(\n		 	SELECT PERSON_ID_TYP\n			FROM  CF_PERSON_ID_TYPE \n			WHERE	 IND_IND"
+"IVIDUAL_ID  = 'S'\n			)\n		\n		/* If LEGAL_ID_TYPE is not null and LEGAL_ID_NBR is null, message ?Missing new owner lega"
+"l id number? */\n		INSERT INTO  ["+ context.intermediateDB + "].[dbo].VW_IMPORT_USERDOC_RESULT   \n				( userdoc_seq , \n				userdoc_series , \n				userdoc_nbr , \n				ind_import , "
+"\n				msg_import )  \n		SELECT\n				 T.userdoc_seq,\n				 T.userdoc_series,\n				 T.userdoc_nbr,\n				 2,\n				 'Missing"
+" new owner legal id number'\n		FROM  ["+ context.intermediateDB + "].[dbo].VW_import_userdoc_owners T JOIN ["+ context.intermediateDB + "].[dbo].VW_import_userdoc U ON U.userdoc_seq  = T.userdoc_seq\n			 AND	U.userdoc_series  = T.userdoc_series\n			 AND	U."
+"userdoc_nbr  = T.userdoc_nbr  \n		WHERE	 ind_import  = 0\n		 AND	T.LEGAL_ID_TYPE  is not null\n		 AND	T.LEGAL_ID_NBR  is"
+" null\n		\n		/* If LEGAL_ID_TYPE is null and LEGAL_ID_NBR is not null, message ?Missing new owner legal id type? */\n		I"
+"NSERT INTO  ["+ context.intermediateDB + "].[dbo].VW_IMPORT_USERDOC_RESULT   \n				( userdoc_seq , \n				userdoc_series , \n				userdoc_nbr , \n				ind_import , "
+"\n				msg_import )  \n		SELECT\n				 T.userdoc_seq,\n				 T.userdoc_series,\n				 T.userdoc_nbr,\n				 2,\n				 'Missing"
+" new owner legal id type'\n		FROM  ["+ context.intermediateDB + "].[dbo].VW_import_userdoc_owners T JOIN ["+ context.intermediateDB + "].[dbo].VW_import_userdoc U ON U.userdoc_seq  = T.userdoc_seq\n			 AND	U.userdoc_series  = T.userdoc_series\n			 AND	U."
+"userdoc_nbr  = T.userdoc_nbr  \n		WHERE	 ind_import  = 0\n		 AND	T.LEGAL_ID_TYPE  is null\n		 AND	T.LEGAL_ID_NBR  is not"
+" null\n		\n		/* If INDIVIDUAL_ID_TYPE is not null and INDIVIDUAL_ID_NBR is null, message ?Missing new owner individual i"
+"d number? */\n		INSERT INTO  ["+ context.intermediateDB + "].[dbo].VW_IMPORT_USERDOC_RESULT   \n				( userdoc_seq , \n				userdoc_series , \n				userdoc_nbr , \n				ind_import , "
+"\n				msg_import )  \n		SELECT\n				 T.userdoc_seq,\n				 T.userdoc_series,\n				 T.userdoc_nbr,\n				 2,\n				 'Missing"
+" new owner individual id number'\n		FROM  ["+ context.intermediateDB + "].[dbo].VW_import_userdoc_owners T JOIN ["+ context.intermediateDB + "].[dbo].VW_import_userdoc U ON U.userdoc_seq  = T.userdoc_seq\n			 AND	U.userdoc_series  = T.userdoc_series\n			 AND	U."
+"userdoc_nbr  = T.userdoc_nbr  \n		WHERE	 ind_import  = 0\n		 AND	T.INDIVIDUAL_ID_TYPE  is not null\n		 AND	T.INDIVIDUAL_"
+"ID_NBR  is null\n		\n		/* If INDIVIDUAL_ID_TYPE is null and INDIVIDUAL_ID_NBR is not null, message ?Missing new owner in"
+"dividual id type? */\n		INSERT INTO  ["+ context.intermediateDB + "].[dbo].VW_IMPORT_USERDOC_RESULT   \n				( userdoc_seq , \n				userdoc_series , \n				userdoc_nbr , \n				ind_import , "
+"\n				msg_import )  \n		SELECT\n				 T.userdoc_seq,\n				 T.userdoc_series,\n				 T.userdoc_nbr,\n				 2,\n				 'Missing"
+" new owner individual id type'\n		FROM  ["+ context.intermediateDB + "].[dbo].VW_import_userdoc_owners T JOIN ["+ context.intermediateDB + "].[dbo].VW_import_userdoc U ON U.userdoc_seq  = T.userdoc_seq\n			 AND	U.userdoc_series  = T.userdoc_series\n			 AND	U."
+"userdoc_nbr  = T.userdoc_nbr  \n		WHERE	 ind_import  = 0\n		 AND	T.INDIVIDUAL_ID_TYPE  is null\n		 AND	T.INDIVIDUAL_ID_N"
+"BR  is not null\n		\n		/* RESIDENCE_COUNTRY_CODE: if not exists in CF_GEO_COUNTRY, message ?Invalid new owner residence "
+"country code? */\n		INSERT INTO  ["+ context.intermediateDB + "].[dbo].VW_IMPORT_USERDOC_RESULT   \n				( userdoc_seq , \n				userdoc_series , \n				userdoc_nbr , \n				ind_import , "
+"\n				msg_import )  \n		SELECT\n				 T.userdoc_seq,\n				 T.userdoc_series,\n				 T.userdoc_nbr,\n				 2,\n				 'Invalid"
+" new owner residence country code'\n		FROM  ["+ context.intermediateDB + "].[dbo].VW_import_userdoc_owners T JOIN ["+ context.intermediateDB + "].[dbo].VW_import_userdoc U ON U.userdoc_seq  = T.userdoc_seq\n			 AND	U.userdoc_series  = T.userdoc_series\n			 AND	U."
+"userdoc_nbr  = T.userdoc_nbr  \n		WHERE	 ind_import  = 0\n		 AND	T.RESIDENCE_COUNTRY_CODE COLLATE database_default not i"
+"n\n			(\n		 	SELECT COUNTRY_CODE\n			FROM  cf_geo_country \n			)\n		\n		/* STATE_CODE: if not null and not exists RESIDE"
+"NCE_COUNTRY_CODE / STATE_CODE in CF_GEO_STATE, \n		       message ?Invalid new owner residence state code? */\n		INSERT "
+"INTO  ["+ context.intermediateDB + "].[dbo].VW_IMPORT_USERDOC_RESULT   \n				( userdoc_seq , \n				userdoc_series , \n				userdoc_nbr , \n				ind_import , "
+"\n				msg_import )  \n		SELECT\n				 T.userdoc_seq,\n				 T.userdoc_series,\n				 T.userdoc_nbr,\n				 2,\n				 'Invalid"
+" new owner residence state code'\n		FROM  ["+ context.intermediateDB + "].[dbo].VW_import_userdoc_owners T JOIN ["+ context.intermediateDB + "].[dbo].VW_import_userdoc U ON U.userdoc_seq  = T.userdoc_seq\n			 AND	U.userdoc_series  = T.userdoc_series\n			 AND	U."
+"userdoc_nbr  = T.userdoc_nbr  \n		WHERE	 ind_import  = 0\n		 AND	T.STATE_CODE  is not null\n		 AND	 NOT EXISTS\n			(\n		"
+" 	SELECT\n					 cf_geo_state.COUNTRY_CODE,\n					 cf_geo_state.STATE_CODE\n			FROM  cf_geo_state \n			WHERE	 cf_geo_stat"
+"e.COUNTRY_CODE  = T.RESIDENCE_COUNTRY_CODE COLLATE database_default\n			 AND	cf_geo_state.STATE_CODE  = T.STATE_CODE COL"
+"LATE database_default\n			)\n		\n		/* If STATE_CODE Is null and exist any CF_GEO_STATE with the RESIDENCE_COUNTRY_CODE, "
+"\n		       message ?A state code is required for the specified new owner residence country? */\n		INSERT INTO  ["+ context.intermediateDB + "].[dbo].VW_IMPORT_USERDOC_RESULT   \n				( userdoc_seq , \n				userdoc_series , \n				userdoc_nbr , \n				ind_import , "
+"\n				msg_import )  \n		SELECT\n				 T.userdoc_seq,\n				 T.userdoc_series,\n				 T.userdoc_nbr,\n				 2,\n				 'A state"
+" code is required for the specified new owner residence country'\n		FROM  ["+ context.intermediateDB + "].[dbo].VW_import_userdoc_owners T JOIN ["+ context.intermediateDB + "].[dbo].VW_import_userdoc U ON U.userdoc_seq  = T.userdoc_seq\n			 AND	U.userdoc_series  = T.userdoc_series\n			 AND	U."
+"userdoc_nbr  = T.userdoc_nbr  \n		WHERE	 ind_import  = 0\n		 AND	T.STATE_CODE  is null\n		 AND	T.RESIDENCE_COUNTRY_CODE "
+"COLLATE database_default in\n			(\n		 	SELECT country_code\n			FROM  cf_geo_state S \n			)\n\n\n		/* CITY_CODE: if not n"
+"ull and not exists RESIDENCE_COUNTRY_CODE / STATE_CODE /CITY_CODE in CF_GEO_CITY, \n		       message ?Invalid new owner "
+"residence state code? */\n		INSERT INTO  ["+ context.intermediateDB + "].[dbo].VW_IMPORT_USERDOC_RESULT   \n				( userdoc_seq , \n				userdoc_series , \n				userdoc_nbr , \n				ind_import , "
+"\n				msg_import )  \n		SELECT\n				 T.userdoc_seq,\n				 T.userdoc_series,\n				 T.userdoc_nbr,\n				 2,\n				 'Invalid"
+" new owner city code'\n		FROM  ["+ context.intermediateDB + "].[dbo].VW_import_userdoc_owners T JOIN ["+ context.intermediateDB + "].[dbo].VW_import_userdoc U ON U.userdoc_seq  = T.userdoc_seq\n			 AND	U.userdoc_series  = T.userdoc_series\n			 AND	U."
+"userdoc_nbr  = T.userdoc_nbr  \n		WHERE	 ind_import  = 0\n		 AND	T.CITY_CODE  is not null\n		 AND	 NOT EXISTS\n			(\n		 "
+"	SELECT\n					 cf_geo_city.COUNTRY_CODE,\n					 cf_geo_city.STATE_CODE\n			FROM  cf_geo_city \n			WHERE	 cf_geo_city.COU"
+"NTRY_CODE  = T.RESIDENCE_COUNTRY_CODE COLLATE database_default\n			 AND	cf_geo_city.STATE_CODE  = T.STATE_CODE COLLATE d"
+"atabase_default\n 			 AND	cf_geo_city.CITY_CODE  = T.CITY_CODE COLLATE database_default\n			)\n		\n\n\n		\n		/* If PERSO"
+"N_GROUP_CODE is not null and not exists in IP_PERSON_GROUP, message ?Invalid new owner person group code? */\n		INSERT I"
+"NTO  ["+ context.intermediateDB + "].[dbo].VW_IMPORT_USERDOC_RESULT   \n				( userdoc_seq , \n				userdoc_series , \n				userdoc_nbr , \n				ind_import , "
+"\n				msg_import )  \n		SELECT\n				 T.userdoc_seq,\n				 T.userdoc_series,\n				 T.userdoc_nbr,\n				 2,\n				 'Invalid"
+" new owner person group code'\n		FROM  ["+ context.intermediateDB + "].[dbo].VW_import_userdoc_owners T JOIN ["+ context.intermediateDB + "].[dbo].VW_import_userdoc U ON U.userdoc_seq  = T.userdoc_seq\n			 AND	U.userdoc_series  = T.userdoc_series\n			 AND	U."
+"userdoc_nbr  = T.userdoc_nbr  \n		WHERE	 ind_import  = 0\n		 AND	T.PERSON_GROUP_CODE  is not null\n		 AND	T.PERSON_GROUP"
+"_CODE  COLLATE database_default not in\n			(\n		 	SELECT PERSON_GROUP_NBR\n			FROM  IP_PERSON_GROUP \n			)\n		\n		/* 4.1"
+".4 ["+ context.intermediateDB + "].[dbo].VW_IMPORT_USERDOC_REPRS validations */\n		/* 4.1.4.1 Representative validations */\n		/* Generate work table wi"
+"th USERDOC_SEQ / SERIES / NBR, IND_SERVICE and COUNT(*) */\n		\n		\n		DECLARE @EXEC_IMMEDIATE_VAR2 VARCHAR (4000)\n		SEL"
+"ECT @EXEC_IMMEDIATE_VAR2  = 'TRUNCATE TABLE wrk_userdoc_service_count' \n\n		EXECUTE (@EXEC_IMMEDIATE_VAR2)\n		INSERT IN"
+"TO  wrk_userdoc_service_count    \n		SELECT\n				 USERDOC_SEQ,\n				 USERDOC_SERIES,\n				 USERDOC_NBR,\n				 IND_SERVIC"
+"E,\n				 COUNT(*) count1\n		FROM  ["+ context.intermediateDB + "].[dbo].VW_import_userdoc_reprs \n		GROUP BY USERDOC_SEQ,\n			 USERDOC_SERIES,\n			 USERDOC_NBR,\n			  IND_SERVICE \n		"
+"\n		/* No service address: where a representative exists but no-one has IND_SERVICE = 1, \n		       message ?No represen"
+"tative flagged as service address? */\n		INSERT INTO  ["+ context.intermediateDB + "].[dbo].VW_IMPORT_USERDOC_RESULT   \n				( userdoc_seq , \n				userdoc_series , \n				userdoc_nbr , \n				ind_import , "
+"\n				msg_import )  \n		SELECT\n				 userdoc_seq,\n				 userdoc_series,\n				 userdoc_nbr,\n				 2,\n				 'No representa"
+"tive flagged as service address' ojo\n		FROM  ["+ context.intermediateDB + "].[dbo].VW_import_userdoc U \n		WHERE	 ind_import  = 0\n		 AND	  exists\n			(\n		 	SELECT *\n			FROM  wrk_userdoc_servi"
+"ce_count W \n			WHERE	 U.userdoc_seq  = W.userdoc_seq\n			 AND	U.userdoc_series  = W.userdoc_series\n			 AND	U.userdoc_n"
+"br  = W.userdoc_nbr\n			)\n		 AND	NOT   exists\n			(\n		 	SELECT *\n			FROM  wrk_userdoc_service_count W \n			WHERE	 U.u"
+"serdoc_seq  = W.userdoc_seq\n			 AND	U.userdoc_series  = W.userdoc_series\n			 AND	U.userdoc_nbr  = W.userdoc_nbr\n			 A"
+"ND	ind_service  = 1\n			)\n		\n		/* Several service addresses: where exists corresponding tuple in the work table with "
+"\n		      IND_SERVICE = 1 and with count column > 1, message ?Several representatives flagged as service addresses? */\n	"
+"	INSERT INTO  ["+ context.intermediateDB + "].[dbo].VW_IMPORT_USERDOC_RESULT   \n				( userdoc_seq , \n				userdoc_series , \n				userdoc_nbr , \n				ind_import , "
+"\n				msg_import )  \n		SELECT\n				 U.userdoc_seq,\n				 U.userdoc_series,\n				 U.userdoc_nbr,\n				 2,\n				 'Several"
+" representatives flagged as service addresses'\n		FROM  ["+ context.intermediateDB + "].[dbo].VW_import_userdoc U JOIN wrk_userdoc_service_count W ON U.userdoc_seq  = W.userdoc_seq\n			 AND	U.userdoc_serie"
+"s  = W.userdoc_series\n			 AND	U.userdoc_nbr  = W.userdoc_nbr  \n		WHERE	 ind_import  = 0\n		 AND	ind_service  = 1\n		 A"
+"ND	count1  > 1\n		\n		/* REPRESENTATIVE_TYPE: if not exists in CF_REPRESENTATIVE_TYPE, message ?Invalid representative t"
+"ype? */\n		INSERT INTO  ["+ context.intermediateDB + "].[dbo].VW_IMPORT_USERDOC_RESULT   \n				( userdoc_seq , \n				userdoc_series , \n				userdoc_nbr , \n				ind_import , "
+"\n				msg_import )  \n		SELECT\n				 U.userdoc_seq,\n				 U.userdoc_series,\n				 U.userdoc_nbr,\n				 2,\n				 'Invalid"
+" representative type'\n		FROM  ["+ context.intermediateDB + "].[dbo].VW_import_userdoc_reprs T JOIN ["+ context.intermediateDB + "].[dbo].VW_import_userdoc U ON U.userdoc_seq  = T.userdoc_seq\n			 AND	U.userdoc_series  = T.userdoc_series\n			 AND	U."
+"userdoc_nbr  = T.userdoc_nbr  \n		WHERE	 ind_import  = 0\n		 AND	REPRESENTATIVE_TYPE  not in\n			(\n		 	SELECT REPRESENT"
+"ATIVE_TYPE\n			FROM  CF_REPRESENTATIVE_TYPE \n			)\n		\n		/* AGENT_CODE: if not null and not exists in IF_AGENT, message"
+" ?Invalid agent code? */\n		INSERT INTO  ["+ context.intermediateDB + "].[dbo].VW_IMPORT_USERDOC_RESULT   \n				( userdoc_seq , \n				userdoc_series , \n				userdoc_nbr , \n				ind_import , "
+"\n				msg_import )  \n		SELECT\n				 U.userdoc_seq,\n				 U.userdoc_series,\n				 U.userdoc_nbr,\n				 2,\n				 'Invalid"
+" agent code'\n		FROM  ["+ context.intermediateDB + "].[dbo].VW_import_userdoc_reprs T JOIN ["+ context.intermediateDB + "].[dbo].VW_import_userdoc U ON U.userdoc_seq  = T.userdoc_seq\n			 AND	U.userdoc_series  = T.userdoc_series\n			 AND	U."
+"userdoc_nbr  = T.userdoc_nbr  \n		WHERE	 ind_import  = 0\n		 AND	AGENT_CODE  is not null\n		 AND	AGENT_CODE  not in\n			"
+"(\n		 	SELECT AGENT_CODE\n			FROM  IP_AGENT \n			)\n		\n		/* 4.1.4.2 Person validations */\n		/* NATIONALITY_COUNTRY_COD"
+"E: if not exists in CF_GEO_COUNTRY, message ?Invalid representative nationality country code? */\n		INSERT INTO  ["+ context.intermediateDB + "].[dbo].VW_IMPORT_USERDOC_RESULT   \n				( userdoc_seq , \n				userdoc_series , \n				userdoc_nbr , \n				ind_import , "
+"\n				msg_import )  \n		SELECT\n				 T.userdoc_seq,\n				 T.userdoc_series,\n				 T.userdoc_nbr,\n				 2,\n				 'Invalid"
+" representative nationality country code'\n		FROM  ["+ context.intermediateDB + "].[dbo].VW_import_userdoc_reprs T JOIN ["+ context.intermediateDB + "].[dbo].VW_import_userdoc U ON U.userdoc_seq  = T.userdoc_seq\n			 AND	U.userdoc_series  = T.userdoc_series\n			 AND	U."
+"userdoc_nbr  = T.userdoc_nbr  \n		WHERE	 ind_import  = 0\n		 AND	T.NATIONALITY_COUNTRY_CODE COLLATE database_default not"
+" in\n			(\n		 	SELECT COUNTRY_CODE\n			FROM  cf_geo_country \n			)\n		\n		/* LEGAL_NATURE: if not null and IND_COMPANY ="
+" 0, message ?New representative nature only applies when the person is a company? */\n		INSERT INTO  ["+ context.intermediateDB + "].[dbo].VW_IMPORT_USERDOC_RESULT   \n				( userdoc_seq , \n				userdoc_series , \n				userdoc_nbr , \n				ind_import , "
+"\n				msg_import )  \n		SELECT\n				 T.userdoc_seq,\n				 T.userdoc_series,\n				 T.userdoc_nbr,\n				 2,\n				 'Represe"
+"ntative legal nature only applies when the person is a company'\n		FROM  ["+ context.intermediateDB + "].[dbo].VW_import_userdoc_reprs T JOIN ["+ context.intermediateDB + "].[dbo].VW_import_userdoc U ON U.userdoc_seq  = T.userdoc_seq\n			 AND	U.userdoc_series  = T.userdoc_series\n			 AND	U."
+"userdoc_nbr  = T.userdoc_nbr  \n		WHERE	 ind_import  = 0\n		 AND	T.LEGAL_NATURE  is not null\n		 AND	T.IND_COMPANY  = 0"
+"\n		\n		/* LEGAL_ID_TYPE: if not null and not exists if CF_PERSON_ID_TYPE with IND_GENERAL_ID = ?S?, \n		       message ?"
+"Invalid representative legal id type? */\n		INSERT INTO  ["+ context.intermediateDB + "].[dbo].VW_IMPORT_USERDOC_RESULT   \n				( userdoc_seq , \n				userdoc_series , \n				userdoc_nbr , \n				ind_import , "
+"\n				msg_import )  \n		SELECT\n				 T.userdoc_seq,\n				 T.userdoc_series,\n				 T.userdoc_nbr,\n				 2,\n				 'Invalid"
+" representative legal id type'\n		FROM  ["+ context.intermediateDB + "].[dbo].VW_import_userdoc_reprs T JOIN ["+ context.intermediateDB + "].[dbo].VW_import_userdoc U ON U.userdoc_seq  = T.userdoc_seq\n			 AND	U.userdoc_series  = T.userdoc_series\n			 AND	U."
+"userdoc_nbr  = T.userdoc_nbr  \n		WHERE	 ind_import  = 0\n		 AND	T.LEGAL_ID_TYPE  is not null\n		 AND	T.LEGAL_ID_TYPE  C"
+"OLLATE database_default not in\n			(\n		 	SELECT PERSON_ID_TYP\n			FROM  CF_PERSON_ID_TYPE \n			WHERE	 IND_GENERAL_ID  ="
+" 'S'\n			)\n		\n		/* INDIVIDUAL_ID_TYPE: if not null and not exists if CF_PERSON_ID_TYPE with IND_INDIVIDUAL_ID = ?S?, "
+"\n		       message ?Invalid representative individual id type? */\n		INSERT INTO  ["+ context.intermediateDB + "].[dbo].VW_IMPORT_USERDOC_RESULT   \n				( userdoc_seq , \n				userdoc_series , \n				userdoc_nbr , \n				ind_import , "
+"\n				msg_import )  \n		SELECT\n				 T.userdoc_seq,\n				 T.userdoc_series,\n				 T.userdoc_nbr,\n				 2,\n				 'Invalid"
+" representative individual id type'\n		FROM  ["+ context.intermediateDB + "].[dbo].VW_import_userdoc_reprs T JOIN ["+ context.intermediateDB + "].[dbo].VW_import_userdoc U ON U.userdoc_seq  = T.userdoc_seq\n			 AND	U.userdoc_series  = T.userdoc_series\n			 AND	U."
+"userdoc_nbr  = T.userdoc_nbr  \n		WHERE	 ind_import  = 0\n		 AND	T.INDIVIDUAL_ID_TYPE  is not null\n		 AND	T.INDIVIDUAL_"
+"ID_TYPE  COLLATE database_default not in\n			(\n		 	SELECT PERSON_ID_TYP\n			FROM  CF_PERSON_ID_TYPE \n			WHERE	 IND_IND"
+"IVIDUAL_ID  = 'S'\n			)\n		\n		/* If LEGAL_ID_TYPE is not null and LEGAL_ID_NBR is null, message ?Missing representative"
+" legal id number? */\n		INSERT INTO  ["+ context.intermediateDB + "].[dbo].VW_IMPORT_USERDOC_RESULT   \n				( userdoc_seq , \n				userdoc_series , \n				userdoc_nbr , \n				ind_import , "
+"\n				msg_import )  \n		SELECT\n				 T.userdoc_seq,\n				 T.userdoc_series,\n				 T.userdoc_nbr,\n				 2,\n				 'Missing"
+" representative legal id number'\n		FROM  ["+ context.intermediateDB + "].[dbo].VW_import_userdoc_reprs T JOIN ["+ context.intermediateDB + "].[dbo].VW_import_userdoc U ON U.userdoc_seq  = T.userdoc_seq\n			 AND	U.userdoc_series  = T.userdoc_series\n			 AND	U."
+"userdoc_nbr  = T.userdoc_nbr  \n		WHERE	 ind_import  = 0\n		 AND	T.LEGAL_ID_TYPE  is not null\n		 AND	T.LEGAL_ID_NBR  is"
+" null\n		\n		/* If LEGAL_ID_TYPE is null and LEGAL_ID_NBR is not null, message ?Missing representative legal id type? */"
+"\n		INSERT INTO  ["+ context.intermediateDB + "].[dbo].VW_IMPORT_USERDOC_RESULT   \n				( userdoc_seq , \n				userdoc_series , \n				userdoc_nbr , \n				ind_import , "
+"\n				msg_import )  \n		SELECT\n				 T.userdoc_seq,\n				 T.userdoc_series,\n				 T.userdoc_nbr,\n				 2,\n				 'Missing"
+" representative legal id type'\n		FROM  ["+ context.intermediateDB + "].[dbo].VW_import_userdoc_reprs T JOIN ["+ context.intermediateDB + "].[dbo].VW_import_userdoc U ON U.userdoc_seq  = T.userdoc_seq\n			 AND	U.userdoc_series  = T.userdoc_series\n			 AND	U."
+"userdoc_nbr  = T.userdoc_nbr  \n		WHERE	 ind_import  = 0\n		 AND	T.LEGAL_ID_TYPE  is null\n		 AND	T.LEGAL_ID_NBR  is not"
+" null\n		\n		/* If INDIVIDUAL_ID_TYPE is not null and INDIVIDUAL_ID_NBR is null, message ?Missing representative individ"
+"ual id number? */\n		INSERT INTO  ["+ context.intermediateDB + "].[dbo].VW_IMPORT_USERDOC_RESULT   \n				( userdoc_seq , \n				userdoc_series , \n				userdoc_nbr , \n				ind_import , "
+"\n				msg_import )  \n		SELECT\n				 T.userdoc_seq,\n				 T.userdoc_series,\n				 T.userdoc_nbr,\n				 2,\n				 'Missing"
+" representative individual id number'\n		FROM  ["+ context.intermediateDB + "].[dbo].VW_import_userdoc_reprs T JOIN ["+ context.intermediateDB + "].[dbo].VW_import_userdoc U ON U.userdoc_seq  = T.userdoc_seq\n			 AND	U.userdoc_series  = T.userdoc_series\n			 AND	U."
+"userdoc_nbr  = T.userdoc_nbr  \n		WHERE	 ind_import  = 0\n		 AND	T.INDIVIDUAL_ID_TYPE  is not null\n		 AND	T.INDIVIDUAL_"
+"ID_NBR  is null\n		\n		/* If INDIVIDUAL_ID_TYPE is null and INDIVIDUAL_ID_NBR is not null, message ?Missing representati"
+"ve individual id type? */\n		INSERT INTO  ["+ context.intermediateDB + "].[dbo].VW_IMPORT_USERDOC_RESULT   \n				( userdoc_seq , \n				userdoc_series , \n				userdoc_nbr , \n				ind_import , "
+"\n				msg_import )  \n		SELECT\n				 T.userdoc_seq,\n				 T.userdoc_series,\n				 T.userdoc_nbr,\n				 2,\n				 'Missing"
+" representative individual id type'\n		FROM  ["+ context.intermediateDB + "].[dbo].VW_import_userdoc_reprs T JOIN ["+ context.intermediateDB + "].[dbo].VW_import_userdoc U ON U.userdoc_seq  = T.userdoc_seq\n			 AND	U.userdoc_series  = T.userdoc_series\n			 AND	U."
+"userdoc_nbr  = T.userdoc_nbr  \n		WHERE	 ind_import  = 0\n		 AND	T.INDIVIDUAL_ID_TYPE  is null\n		 AND	T.INDIVIDUAL_ID_N"
+"BR  is not null\n		\n		/* RESIDENCE_COUNTRY_CODE: if not exists in CF_GEO_COUNTRY, message ?Invalid representative resid"
+"ence country code? */\n		INSERT INTO  ["+ context.intermediateDB + "].[dbo].VW_IMPORT_USERDOC_RESULT   \n				( userdoc_seq , \n				userdoc_series , \n				userdoc_nbr , \n				ind_import , "
+"\n				msg_import )  \n		SELECT\n				 T.userdoc_seq,\n				 T.userdoc_series,\n				 T.userdoc_nbr,\n				 2,\n				 'Invalid"
+" representative residence country code'\n		FROM  ["+ context.intermediateDB + "].[dbo].VW_import_userdoc_reprs T JOIN ["+ context.intermediateDB + "].[dbo].VW_import_userdoc U ON U.userdoc_seq  = T.userdoc_seq\n			 AND	U.userdoc_series  = T.userdoc_series\n			 AND	U."
+"userdoc_nbr  = T.userdoc_nbr  \n		WHERE	 ind_import  = 0\n		 AND	T.RESIDENCE_COUNTRY_CODE COLLATE database_default not i"
+"n\n			(\n		 	SELECT COUNTRY_CODE\n			FROM  cf_geo_country \n			)\n		\n		/* STATE_CODE: if not null and not exists RESIDE"
+"NCE_COUNTRY_CODE / STATE_CODE in CF_GEO_STATE, \n		       message ?Invalid representative residence state code? */\n		IN"
+"SERT INTO  ["+ context.intermediateDB + "].[dbo].VW_IMPORT_USERDOC_RESULT   \n				( userdoc_seq , \n				userdoc_series , \n				userdoc_nbr , \n				ind_import , "
+"\n				msg_import )  \n		SELECT\n				 T.userdoc_seq,\n				 T.userdoc_series,\n				 T.userdoc_nbr,\n				 2,\n				 'Invalid"
+" representative residence state code'\n		FROM  ["+ context.intermediateDB + "].[dbo].VW_import_userdoc_reprs T JOIN ["+ context.intermediateDB + "].[dbo].VW_import_userdoc U ON U.userdoc_seq  = T.userdoc_seq\n			 AND	U.userdoc_series  = T.userdoc_series\n			 AND	U."
+"userdoc_nbr  = T.userdoc_nbr  \n		WHERE	 ind_import  = 0\n		 AND	T.STATE_CODE  is not null\n		 AND	 NOT EXISTS\n			(\n		"
+" 	SELECT\n					 cf_geo_state.COUNTRY_CODE,\n					 cf_geo_state.STATE_CODE\n			FROM  cf_geo_state \n			WHERE	 cf_geo_stat"
+"e.COUNTRY_CODE  = T.RESIDENCE_COUNTRY_CODE COLLATE database_default\n			 AND	cf_geo_state.STATE_CODE  = T.STATE_CODE COL"
+"LATE database_default\n			)\n		\n		/* If STATE_CODE Is null and exist any CF_GEO_STATE with the RESIDENCE_COUNTRY_CODE, "
+"\n		       message ?A state code is required for the specified representative residence country? */\n		INSERT INTO  ["+ context.intermediateDB + "].[dbo].VW_IMPORT_USERDOC_RESULT   \n				( userdoc_seq , \n				userdoc_series , \n				userdoc_nbr , \n				ind_import , "
+"\n				msg_import )  \n		SELECT\n				 T.userdoc_seq,\n				 T.userdoc_series,\n				 T.userdoc_nbr,\n				 2,\n				 'A state"
+" code is required for the specified representative residence country'\n		FROM  ["+ context.intermediateDB + "].[dbo].VW_import_userdoc_reprs T JOIN ["+ context.intermediateDB + "].[dbo].VW_import_userdoc U ON U.userdoc_seq  = T.userdoc_seq\n			 AND	U.userdoc_series  = T.userdoc_series\n			 AND	U."
+"userdoc_nbr  = T.userdoc_nbr  \n		WHERE	 ind_import  = 0\n		 AND	T.STATE_CODE  is null\n		 AND	T.RESIDENCE_COUNTRY_CODE "
+"COLLATE database_default in\n			(\n		 	SELECT country_code\n			FROM  cf_geo_state S \n			)\n\n\n\n		/* CITY_CODE: if not"
+" null and not exists RESIDENCE_COUNTRY_CODE / STATE_CODE/CITY_CODE in CF_GEO_CITY, \n		       message ?Invalid represent"
+"ative residence state code? */\n		INSERT INTO  ["+ context.intermediateDB + "].[dbo].VW_IMPORT_USERDOC_RESULT   \n				( userdoc_seq , \n				userdoc_series , \n				userdoc_nbr , \n				ind_import , "
+"\n				msg_import )  \n		SELECT\n				 T.userdoc_seq,\n				 T.userdoc_series,\n				 T.userdoc_nbr,\n				 2,\n				 'Invalid"
+" representative city code'\n		FROM  ["+ context.intermediateDB + "].[dbo].VW_import_userdoc_reprs T JOIN ["+ context.intermediateDB + "].[dbo].VW_import_userdoc U ON U.userdoc_seq  = T.userdoc_seq\n			 AND	U.userdoc_series  = T.userdoc_series\n			 AND	U."
+"userdoc_nbr  = T.userdoc_nbr  \n		WHERE	 ind_import  = 0\n		 AND	T.CITY_CODE  is not null\n		 AND	 NOT EXISTS\n			(\n		 "
+"	SELECT\n					 cf_geo_city.COUNTRY_CODE,\n					 cf_geo_city.STATE_CODE\n			FROM  cf_geo_city \n			WHERE	 cf_geo_city.COU"
+"NTRY_CODE  = T.RESIDENCE_COUNTRY_CODE COLLATE database_default\n			 AND	cf_geo_city.STATE_CODE  = T.STATE_CODE COLLATE d"
+"atabase_default\n			 AND	cf_geo_city.CITY_CODE  = T.CITY_CODE COLLATE database_default\n			)\n\n\n\n		\n		/* If PERSON_G"
+"ROUP_CODE is not null and not exists in IP_PERSON_GROUP, message ?Invalid representative person group code? */\n		INSERT"
+" INTO  ["+ context.intermediateDB + "].[dbo].VW_IMPORT_USERDOC_RESULT   \n				( userdoc_seq , \n				userdoc_series , \n				userdoc_nbr , \n				ind_import , "
+"\n				msg_import )  \n		SELECT\n				 T.userdoc_seq,\n				 T.userdoc_series,\n				 T.userdoc_nbr,\n				 2,\n				 'Invalid"
+" representative person group code'\n		FROM  ["+ context.intermediateDB + "].[dbo].VW_import_userdoc_reprs T JOIN ["+ context.intermediateDB + "].[dbo].VW_import_userdoc U ON U.userdoc_seq  = T.userdoc_seq\n			 AND	U.userdoc_series  = T.userdoc_series\n			 AND	U."
+"userdoc_nbr  = T.userdoc_nbr  \n		WHERE	 ind_import  = 0\n		 AND	T.PERSON_GROUP_CODE  is not null\n		 AND	T.PERSON_GROUP"
+"_CODE  COLLATE database_default not in\n			(\n		 	SELECT PERSON_GROUP_NBR\n			FROM  IP_PERSON_GROUP \n			)\n		\n		/* 4.1"
+".5 ["+ context.intermediateDB + "].[dbo].VW_IMPORT_USERDOC_PAYMENTS validations */\n		/* RECEIPT_TYPE: if not exists in CF_RECEIPT_TYPE, message ?Invali"
+"d receipt type? */\n		INSERT INTO  ["+ context.intermediateDB + "].[dbo].VW_IMPORT_USERDOC_RESULT   \n				( userdoc_seq , \n				userdoc_series , \n				userdoc_nbr , \n				ind_import , "
+"\n				msg_import )  \n		SELECT\n				 T.userdoc_seq,\n				 T.userdoc_series,\n				 T.userdoc_nbr,\n				 2,\n				 'Invalid"
+" receipt type'\n		FROM  ["+ context.intermediateDB + "].[dbo].VW_import_userdoc_payments T JOIN ["+ context.intermediateDB + "].[dbo].VW_import_userdoc U ON U.userdoc_seq  = T.userdoc_seq\n			 AND	U.userdoc_series  = T.userdoc_series\n			 AND	U."
+"userdoc_nbr  = T.userdoc_nbr  \n		WHERE	 ind_import  = 0\n		 AND	RECEIPT_TYPE COLLATE database_default not in\n			(\n		 "
+"	SELECT RECEIPT_TYP\n			FROM  CF_RECEIPT_TYPE \n			)\n		\n		/* CURRENCY_TYPE: if not exists in CF_CURRENCY_TYPE, message"
+" ?Invalid currency type? */\n		INSERT INTO  ["+ context.intermediateDB + "].[dbo].VW_IMPORT_USERDOC_RESULT   \n				( userdoc_seq , \n				userdoc_series , \n				userdoc_nbr , \n				ind_import , "
+"\n				msg_import )  \n		SELECT\n				 T.userdoc_seq,\n				 T.userdoc_series,\n				 T.userdoc_nbr,\n				 2,\n				 'Invalid"
+" currency type'\n		FROM  ["+ context.intermediateDB + "].[dbo].VW_import_userdoc_payments T JOIN ["+ context.intermediateDB + "].[dbo].VW_import_userdoc U ON U.userdoc_seq  = T.userdoc_seq\n			 AND	U.userdoc_series  = T.userdoc_series\n			 AND	U."
+"userdoc_nbr  = T.userdoc_nbr  \n		WHERE	 ind_import  = 0\n		 AND	CURRENCY_TYPE COLLATE database_default not in\n			(\n		"
+" 	SELECT CURRENCY_TYP\n			FROM  CF_CURRENCY_TYPE \n			)\n		\n		/* 4.1.6 ["+ context.intermediateDB + "].[dbo].VW_IMPORT_USERDOC_ACTIONS validations */\n		/* If CF_USERDOC_TYPE.GENERATE_PROC_TYP is null, message ?The user "
+"document type is not configured so as to generate a process? */\n		\n		INSERT INTO  ["+ context.intermediateDB + "].[dbo].VW_IMPORT_USERDOC_RESULT   \n				( userdoc_seq , \n				userdoc_series , \n				userdoc_nbr , \n				ind_import , "
+"\n				msg_import )  \n		SELECT\n				 T.userdoc_seq,\n				 T.userdoc_series,\n				 T.userdoc_nbr,\n				 2,\n				 'Duplica"
+"te action date and type'\n		FROM  ["+ context.intermediateDB + "].[dbo].VW_import_userdoc_actions T \n		GROUP	BY userdoc_seq,  userdoc_series, userdoc_nbr, action_date, action_type\n	"
+"	HAVING	COUNT(*) > 1\n		\n		\n		\n		\n		\n		INSERT INTO  ["+ context.intermediateDB + "].[dbo].VW_IMPORT_USERDOC_RESULT   \n				( userdoc_seq , \n				userdoc_series , \n				userdoc_nbr , \n				ind_import , "
+"\n				msg_import )  \n		SELECT\n				 T.userdoc_seq,\n				 T.userdoc_series,\n				 T.userdoc_nbr,\n				 2,\n				 'The app"
+"lication type is not configured so as to generate a process'\n		FROM  ["+ context.intermediateDB + "].[dbo].VW_import_userdoc_actions T JOIN ["+ context.intermediateDB + "].[dbo].VW_import_userdoc U ON U.userdoc_seq  = T.userdoc_seq\n			 AND	U.userdoc_series  = T.userdoc_series\n			 AND	U."
+"userdoc_nbr  = T.userdoc_nbr  JOIN cf_userdoc_type UT ON U.userdoc_type  = UT.userdoc_typ  COLLATE database_default\n		W"
+"HERE	 GENERATE_PROC_TYP  is null\n		\n		/* If PROCESS_FILE_SEQ / PROCESS_FILE_TYPE / PROCESS_FILE_SERIES / PROCESS_FILE_"
+"NBR is not null and \n		       the CF_PROCESS_TYPE identified by CF_USERDOC_TYPE.GENERATE_PROC_TYP has column \n		      "
+" RELATED_TO_WCODE <> 2 (related to user doc / file), \n		       message ?The file identifying one of the processes for t"
+"he user document, is only applicable if the type of the process to be generated for the user doc is related both to a us"
+"er doc and a file? */\n		INSERT INTO  ["+ context.intermediateDB + "].[dbo].VW_IMPORT_USERDOC_RESULT   \n				( userdoc_seq , \n				userdoc_series , \n				userdoc_nbr , \n				ind_import , "
+"\n				msg_import )  \n		SELECT\n				 T.userdoc_seq,\n				 T.userdoc_series,\n				 T.userdoc_nbr,\n				 2,\n				 'The fil"
+"e identifying one of the processes for the user document, is only applicable if the type of the process to be generated "
+"for the user doc is related both to a user doc and a file'\n		FROM  ["+ context.intermediateDB + "].[dbo].VW_import_userdoc_actions T \n		 JOIN ["+ context.intermediateDB + "].[dbo].VW_import_userdoc U ON \n				U.userdoc_seq  = T.userdoc_seq COLLATE database_default\n			 AND	U.userdoc_series "
+" = T.userdoc_series\n			 AND	U.userdoc_nbr  = T.userdoc_nbr  \n			 JOIN cf_userdoc_type UT ON U.userdoc_type  = UT.userd"
+"oc_typ  COLLATE database_default\n		 JOIN cf_process_type PT ON PT.proc_typ  = UT.generate_proc_typ  COLLATE database_de"
+"fault\n		WHERE	 (PROCESS_FILE_SEQ  is not null\n		 OR	PROCESS_FILE_TYPE  is not null\n		 OR	PROCESS_FILE_SERIES  is not "
+"null\n		 OR	PROCESS_FILE_NBR  is not null)\n		 AND	RELATED_TO_WCODE  <> 2\n		\n		/* If PROCESS_FILE_SEQ / PROCESS_FILE_T"
+"YPE / PROCESS_FILE_SERIES / PROCESS_FILE_NBR is not null and \n		       not exists in ["+ context.intermediateDB + "].[dbo].VW_IMPORT_USERDOC_FILES, \n		       message ?The file identifying one of the processes for the user document, i"
+"s not related to the user document? */\n		INSERT INTO  ["+ context.intermediateDB + "].[dbo].VW_IMPORT_USERDOC_RESULT   \n				( userdoc_seq , \n				userdoc_series , \n				userdoc_nbr , \n				ind_import , "
+"\n				msg_import )  \n		SELECT\n				 T.userdoc_seq,\n				 T.userdoc_series,\n				 T.userdoc_nbr,\n				 2,\n				 'The fil"
+"e identifying one of the processes for the user document, is not related to the user document'\n		FROM  ["+ context.intermediateDB + "].[dbo].VW_import_userdoc_actions T JOIN ["+ context.intermediateDB + "].[dbo].VW_import_userdoc U ON U.userdoc_seq  = T.userdoc_seq\n			 AND	U.userdoc_series  = T.userdoc_series\n			 AND	U."
+"userdoc_nbr  = T.userdoc_nbr  \n		WHERE	 (PROCESS_FILE_SEQ  is not null\n		 OR	PROCESS_FILE_TYPE  is not null\n		 OR	PRO"
+"CESS_FILE_SERIES  is not null\n		 OR	PROCESS_FILE_NBR  is not null)\n		 AND	 NOT EXISTS\n			(\n		 	SELECT\n					 F.FILE_"
+"SEQ,\n					 F.FILE_TYPE,\n					 F.FILE_SERIES,\n					 F.FILE_NBR\n			FROM  ["+ context.intermediateDB + "].[dbo].VW_import_userdoc_files F \n			WHERE	 U.userdoc_seq  = F.userdoc_seq\n			 AND	U.userdoc_series  = T.userdoc_ser"
+"ies\n			 AND	U.userdoc_nbr  = T.userdoc_nbr\n			 AND	F.FILE_SEQ  = T.PROCESS_FILE_SEQ\n			 AND	F.FILE_TYPE  = T.PROCESS_"
+"FILE_TYPE\n			 AND	F.FILE_SERIES  = T.PROCESS_FILE_SERIES\n			 AND	F.FILE_NBR  = T.PROCESS_FILE_NBR\n			)\n		\n		/* ACTI"
+"ON_TYPE: if not exists in CF_ACTION_TYPE, message ?Invalid action type? */\n		/* Performace note: join with ["+ context.intermediateDB + "].[dbo].VW_IMPORT_USERDOC to select userdocs with IND_IMPORT = 0 */\n		INSERT INTO  ["+ context.intermediateDB + "].[dbo].VW_IMPORT_USERDOC_RESULT   \n				( userdoc_seq , \n				userdoc_series , \n				userdoc_nbr , \n				ind_import , "
+"\n				msg_import )  \n		SELECT\n				 T.userdoc_seq,\n				 T.userdoc_series,\n				 T.userdoc_nbr,\n				 2,\n				 'Invalid"
+" action type'\n		FROM  ["+ context.intermediateDB + "].[dbo].VW_import_userdoc_actions T \n		WHERE	 ACTION_TYPE COLLATE database_default not in\n			(\n		 	SELECT action_typ"
+"\n			FROM  cf_action_type \n			)\n		\n		/* SPECIAL_FINAL_STATUS: if not null and ACTION_CATEGORY in A / N, message ?Spec"
+"ial final status is only applicable for special actions? */\n		INSERT INTO  ["+ context.intermediateDB + "].[dbo].VW_IMPORT_USERDOC_RESULT   \n				( userdoc_seq , \n				userdoc_series , \n				userdoc_nbr , \n				ind_import , "
+"\n				msg_import )  \n		SELECT\n				 T.userdoc_seq,\n				 T.userdoc_series,\n				 T.userdoc_nbr,\n				 2,\n				 'Special"
+" final status is only applicable for special actions'\n		FROM  ["+ context.intermediateDB + "].[dbo].VW_import_userdoc_actions T \n		WHERE	 SPECIAL_FINAL_STATUS  is not null\n		 AND	ACTION_CATEGORY  in ( 'A'  , '"
+"N'  )\n		\n		/* If ACTION_CATEGORY is S and SPECIAL_FINAL_STATUS is null, message ?Special final status is required? */"
+"\n		/* Performace note: join with ["+ context.intermediateDB + "].[dbo].VW_IMPORT_USERDOC to select userdocs with IND_IMPORT = 0 */\n		INSERT INTO  ["+ context.intermediateDB + "].[dbo].VW_IMPORT_USERDOC_RESULT   \n				( userdoc_seq , \n				userdoc_series , \n				userdoc_nbr , \n				ind_import , "
+"\n				msg_import )  \n		SELECT\n				 T.userdoc_seq,\n				 T.userdoc_series,\n				 T.userdoc_nbr,\n				 2,\n				 'Special"
+" final status is required'\n		FROM  ["+ context.intermediateDB + "].[dbo].VW_import_userdoc_actions T \n		WHERE	 SPECIAL_FINAL_STATUS  is null\n		 AND	ACTION_CATEGORY  = 'S'\n		\n		/* I"
+"f SPECIAL_FINAL_STATUS is not null and proc_typ / SPECIAL_FINAL_STATUS not exists in CF_STATUS \n		       (where proc_ty"
+"p is CF_APPLICATION_TYPE.GENERATE_PROC_TYP for the corresponding application type), \n		       message ?Special final st"
+"atus is not a valid status in the process type associated to the userdoc type? */\n		INSERT INTO  ["+ context.intermediateDB + "].[dbo].VW_IMPORT_USERDOC_RESULT   \n				( userdoc_seq , \n				userdoc_series , \n				userdoc_nbr , \n				ind_import , "
+"\n				msg_import )  \n		SELECT\n				 T.userdoc_seq,\n				 T.userdoc_series,\n				 T.userdoc_nbr,\n				 2,\n				 'Special"
+" final status is not a valid status in the process type associated to the userdoc type'\n		FROM  ["+ context.intermediateDB + "].[dbo].VW_import_userdoc_actions T JOIN ["+ context.intermediateDB + "].[dbo].VW_import_userdoc U ON U.userdoc_seq  = T.userdoc_seq\n			 AND	U.userdoc_series  = T.userdoc_series\n			 AND	U."
+"userdoc_nbr  = T.userdoc_nbr  JOIN cf_userdoc_type UT ON U.userdoc_type  = UT.userdoc_typ COLLATE database_default \n		W"
+"HERE	 SPECIAL_FINAL_STATUS  is not null\n		 AND	 NOT EXISTS\n			(\n		 	SELECT	*\n			FROM  cf_status \n			WHERE	 cf_statu"
+"s.proc_typ  = UT.GENERATE_PROC_TYP\n			 AND	cf_status.status_code  = T.SPECIAL_FINAL_STATUS COLLATE database_default\n		"
+"	)\n		\n		/* If ACTION_NOTES1 is not null and CF_ACTION_TYPE.NOTES1_PROMPT is null, \n		       message ?Current configur"
+"ation indicates that this action type does not accept an action notes 1? */\n		/* Performace note: join with ["+ context.intermediateDB + "].[dbo].VW_IMPORT_USERDOC to select userdocs with IND_IMPORT = 0 */\n		/* OJO ignorar por ahora\n		INSERT INTO  ["+ context.intermediateDB + "].[dbo].VW_IMPORT_USERDOC_RESULT   \n				( userdoc_seq , \n				userdoc_series , \n				userdoc_nbr , \n				ind_import , "
+"\n				msg_import )  \n		SELECT\n				 T.userdoc_seq,\n				 T.userdoc_series,\n				 T.userdoc_nbr,\n				 2,\n				 'Current"
+" configuration indicates that this action type does not accept an action notes 1'\n		FROM  ["+ context.intermediateDB + "].[dbo].VW_import_userdoc_actions T JOIN cf_action_type AT ON T.action_type  = AT.action_typ  \n		WHERE	 LEN(ACTION_NOT"
+"ES1)  > 1\n		 AND	NOTES1_PROMPT  is null\n		\n		/* If ACTION_NOTES2 is not null and CF_ACTION_TYPE.NOTES2_PROMPT is null"
+", \n		       message ?Current configuration indicates that this action type does not accept an action notes 2? */\n		/* "
+"Performace note: join with ["+ context.intermediateDB + "].[dbo].VW_IMPORT_USERDOC to select userdocs with IND_IMPORT = 0 */\n		INSERT INTO  ["+ context.intermediateDB + "].[dbo].VW_IMPORT_USERDOC_RESULT   \n				( userdoc_seq , \n				userdoc_series , \n				userdoc_nbr , \n				ind_import , "
+"\n				msg_import )  \n		SELECT\n				 T.userdoc_seq,\n				 T.userdoc_series,\n				 T.userdoc_nbr,\n				 2,\n				 'Current"
+" configuration indicates that this action type does not accept an action notes 2'\n		FROM  ["+ context.intermediateDB + "].[dbo].VW_import_userdoc_actions T JOIN cf_action_type AT ON T.action_type  = AT.action_typ  \n		WHERE	 LEN(ACTION_NOT"
+"ES2)  > 1\n		 AND	NOTES2_PROMPT  is null\n		\n		/* If ACTION_NOTES3 is not null and CF_ACTION_TYPE.NOTES3_PROMPT is null"
+", \n		       message ?Current configuration indicates that this action type does not accept an action notes 3? */\n		/* "
+"Performace note: join with ["+ context.intermediateDB + "].[dbo].VW_IMPORT_USERDOC to select userdocs with IND_IMPORT = 0 */\n		INSERT INTO  ["+ context.intermediateDB + "].[dbo].VW_IMPORT_USERDOC_RESULT   \n				( userdoc_seq , \n				userdoc_series , \n				userdoc_nbr , \n				ind_import , "
+"\n				msg_import )  \n		SELECT\n				 T.userdoc_seq,\n				 T.userdoc_series,\n				 T.userdoc_nbr,\n				 2,\n				 'Current"
+" configuration indicates that this action type does not accept an action notes 3'\n		FROM  ["+ context.intermediateDB + "].[dbo].VW_import_userdoc_actions T JOIN cf_action_type AT ON T.action_type  = AT.action_typ  \n		WHERE	 LEN(ACTION_NOT"
+"ES3)  > 1\n		 AND	NOTES3_PROMPT  is null\n		\n		/* If ACTION_NOTES4 is not null and CF_ACTION_TYPE.NOTES4_PROMPT is null"
+", \n		       message ?Current configuration indicates that this action type does not accept an action notes 4? */\n		/* "
+"Performace note: join with ["+ context.intermediateDB + "].[dbo].VW_IMPORT_USERDOC to select userdocs with IND_IMPORT = 0 */\n		INSERT INTO  ["+ context.intermediateDB + "].[dbo].VW_IMPORT_USERDOC_RESULT   \n				( userdoc_seq , \n				userdoc_series , \n				userdoc_nbr , \n				ind_import , "
+"\n				msg_import )  \n		SELECT\n				 T.userdoc_seq,\n				 T.userdoc_series,\n				 T.userdoc_nbr,\n				 2,\n				 'Current"
+" configuration indicates that this action type does not accept an action notes 4'\n		FROM  ["+ context.intermediateDB + "].[dbo].VW_import_userdoc_actions T JOIN cf_action_type AT ON T.action_type  = AT.action_typ  \n		WHERE	 LEN(ACTION_NOT"
+"ES4)  > 1\n		 AND	NOTES4_PROMPT  is null\n		\n		/* If ACTION_NOTES5 is not null and CF_ACTION_TYPE.NOTES5_PROMPT is null"
+", \n		       message ?Current configuration indicates that this action type does not accept an action notes 5? */\n		/* "
+"Performace note: join with ["+ context.intermediateDB + "].[dbo].VW_IMPORT_USERDOC to select userdocs with IND_IMPORT = 0 */\n		INSERT INTO  ["+ context.intermediateDB + "].[dbo].VW_IMPORT_USERDOC_RESULT   \n				( userdoc_seq , \n				userdoc_series , \n				userdoc_nbr , \n				ind_import , "
+"\n				msg_import )  \n		SELECT\n				 T.userdoc_seq,\n				 T.userdoc_series,\n				 T.userdoc_nbr,\n				 2,\n				 'Current"
+" configuration indicates that this action type does not accept an action notes 5'\n		FROM  ["+ context.intermediateDB + "].[dbo].VW_import_userdoc_actions T JOIN cf_action_type AT ON T.action_type  = AT.action_typ  \n		WHERE	 LEN(ACTION_NOT"
+"ES5)  > 1\n		 AND	NOTES5_PROMPT  is null\n		*/\n\n		/* ACTION_USER: if not exists in IP_USER, message ?Invalid action us"
+"er? */\n		/* Performace note: join with ["+ context.intermediateDB + "].[dbo].VW_IMPORT_USERDOC to select userdocs with IND_IMPORT = 0 */\n		INSERT INTO  ["+ context.intermediateDB + "].[dbo].VW_IMPORT_USERDOC_RESULT   \n				( userdoc_seq , \n				userdoc_series , \n				userdoc_nbr , \n				ind_import , "
+"\n				msg_import )  \n		SELECT\n				 T.userdoc_seq,\n				 T.userdoc_series,\n				 T.userdoc_nbr,\n				 2,\n				 'Invalid"
+" action user'\n		FROM  ["+ context.intermediateDB + "].[dbo].VW_import_userdoc_actions T \n		WHERE	 (ACTION_USER  is null\n		 OR	ACTION_USER  not in\n			(\n		 	SELECT user_"
+"id\n			FROM  ip_user \n			))\n		\n			-- Move below check into CallToDateValidationPROC --> MarkDateValidationPROC SP\n		"
+"/* IPAS-375 Added validation for filing date */\n	--	insert  into ["+ context.intermediateDB + "].[dbo].VW_IMPORT_USERDOC_RESULT (userdoc_seq,userdoc_series, userdoc_nbr, ind_import, msg_import)\n	--	select  U.userd"
+"oc_seq, U.userdoc_series, U.userdoc_nbr, 2, 'Invalid Filing date. Filing date required to be greater than 1700-01-01 and"
+" lower than the current date.' \n	--	from  ["+ context.intermediateDB + "].[dbo].VW_import_userdoc U where filing_date > GETDATE() or CAST(DATEPART(YYYY, filing_date) as NUMERIC) < 1700\n\n			"
+"/* IPAS-623 FIX \n			Call to Mark Date validation \n		*/\n			exec CallToDateValidationPROC 'USERDOC';		\n		/* FIX IPAS-6"
+"23 Ends here*/\n\n		/* *************** END OF VALIDATIONS *************** */\n		/* update error indicator in ["+ context.intermediateDB + "].[dbo].VW_IMPORT_USERDOC */\n		UPDATE  U   \n		SET	ind_import = 2 \n		FROM  ["+ context.intermediateDB + "].[dbo].VW_IMPORT_USERDOC U \n		WHERE    exists\n			(\n		 	SELECT *\n			FROM  ["+ context.intermediateDB + "].[dbo].VW_IMPORT_USERDOC_RESULT T \n			WHERE	 U.userdoc_seq  = T.userdoc_seq\n			 AND	U.userdoc_series  = T.userdoc_se"
+"ries\n			 AND	U.userdoc_nbr  = T.userdoc_nbr\n			) \n		\n		/* set import indicator to validated, for those cases with no"
+" error messages */\n		UPDATE  ["+ context.intermediateDB + "].[dbo].VW_IMPORT_USERDOC   \n		SET	ind_import = 9 \n		WHERE  ind_import  = 0 \n		\n\n		SET NOCOUNT OFF\n\n	END";
whetherReject_tMSSqlRow_18 = false;
globalMap.put("tMSSqlRow_18_QUERY",query_tMSSqlRow_18);
try {
		stmt_tMSSqlRow_18.execute(query_tMSSqlRow_18);
		
	} catch (java.lang.Exception e) {
		whetherReject_tMSSqlRow_18 = true;
		
				row94 = new row94Struct();
				
				row94.errorCode = ((java.sql.SQLException)e).getSQLState();
				row94.errorMessage = e.getMessage() + " - Line: " + tos_count_tMSSqlRow_18;
				
	}
	
	if(!whetherReject_tMSSqlRow_18) {
		
	}
	

 


	tos_count_tMSSqlRow_18++;

/**
 * [tMSSqlRow_18 main ] stop
 */
	
	/**
	 * [tMSSqlRow_18 process_data_begin ] start
	 */

	

	
	
	currentComponent="tMSSqlRow_18";

	

 



/**
 * [tMSSqlRow_18 process_data_begin ] stop
 */
// Start of branch "row94"
if(row94 != null) { 



	
	/**
	 * [tLogRow_20 main ] start
	 */

	

	
	
	currentComponent="tLogRow_20";

	
					if(execStat){
						runStat.updateStatOnConnection(iterateId,1,1
						
							,"row94"
						
						);
					}
					
///////////////////////		
						



				strBuffer_tLogRow_20 = new StringBuilder();




   				
	    		if(row94.errorCode != null) { //              
                    							
       
				strBuffer_tLogRow_20.append(
				                String.valueOf(row94.errorCode)							
				);


							
	    		} //  			

    			strBuffer_tLogRow_20.append("|");
    			


   				
	    		if(row94.errorMessage != null) { //              
                    							
       
				strBuffer_tLogRow_20.append(
				                String.valueOf(row94.errorMessage)							
				);


							
	    		} //  			

				
				String[] row_tLogRow_20 = new String[2];
   				
	    		if(row94.errorCode != null) { //              
                 row_tLogRow_20[0]=    						    
				                String.valueOf(row94.errorCode)			
					          ;	
							
	    		} //			
    			   				
	    		if(row94.errorMessage != null) { //              
                 row_tLogRow_20[1]=    						    
				                String.valueOf(row94.errorMessage)			
					          ;	
							
	    		} //			
    			
				nb_line_tLogRow_20++;
                consoleOut_tLogRow_20.println(util_tLogRow_20.print(row_tLogRow_20,nb_line_tLogRow_20));
                consoleOut_tLogRow_20.flush();
//////

//////                    
                    
///////////////////////    			

 


	tos_count_tLogRow_20++;

/**
 * [tLogRow_20 main ] stop
 */
	
	/**
	 * [tLogRow_20 process_data_begin ] start
	 */

	

	
	
	currentComponent="tLogRow_20";

	

 



/**
 * [tLogRow_20 process_data_begin ] stop
 */
	
	/**
	 * [tLogRow_20 process_data_end ] start
	 */

	

	
	
	currentComponent="tLogRow_20";

	

 



/**
 * [tLogRow_20 process_data_end ] stop
 */

} // End of branch "row94"




	
	/**
	 * [tMSSqlRow_18 process_data_end ] start
	 */

	

	
	
	currentComponent="tMSSqlRow_18";

	

 



/**
 * [tMSSqlRow_18 process_data_end ] stop
 */

} // End of branch "row39"




// Start of branch "row93"
if(row93 != null) { 



	
	/**
	 * [tLogRow_19 main ] start
	 */

	

	
	
	currentComponent="tLogRow_19";

	
					if(execStat){
						runStat.updateStatOnConnection(iterateId,1,1
						
							,"row93"
						
						);
					}
					
///////////////////////		
						



				strBuffer_tLogRow_19 = new StringBuilder();




   				
	    		if(row93.errorCode != null) { //              
                    							
       
				strBuffer_tLogRow_19.append(
				                String.valueOf(row93.errorCode)							
				);


							
	    		} //  			

    			strBuffer_tLogRow_19.append("|");
    			


   				
	    		if(row93.errorMessage != null) { //              
                    							
       
				strBuffer_tLogRow_19.append(
				                String.valueOf(row93.errorMessage)							
				);


							
	    		} //  			

				
				String[] row_tLogRow_19 = new String[2];
   				
	    		if(row93.errorCode != null) { //              
                 row_tLogRow_19[0]=    						    
				                String.valueOf(row93.errorCode)			
					          ;	
							
	    		} //			
    			   				
	    		if(row93.errorMessage != null) { //              
                 row_tLogRow_19[1]=    						    
				                String.valueOf(row93.errorMessage)			
					          ;	
							
	    		} //			
    			
				nb_line_tLogRow_19++;
                consoleOut_tLogRow_19.println(util_tLogRow_19.print(row_tLogRow_19,nb_line_tLogRow_19));
                consoleOut_tLogRow_19.flush();
//////

//////                    
                    
///////////////////////    			

 


	tos_count_tLogRow_19++;

/**
 * [tLogRow_19 main ] stop
 */
	
	/**
	 * [tLogRow_19 process_data_begin ] start
	 */

	

	
	
	currentComponent="tLogRow_19";

	

 



/**
 * [tLogRow_19 process_data_begin ] stop
 */
	
	/**
	 * [tLogRow_19 process_data_end ] start
	 */

	

	
	
	currentComponent="tLogRow_19";

	

 



/**
 * [tLogRow_19 process_data_end ] stop
 */

} // End of branch "row93"




	
	/**
	 * [tMSSqlRow_17 process_data_end ] start
	 */

	

	
	
	currentComponent="tMSSqlRow_17";

	

 



/**
 * [tMSSqlRow_17 process_data_end ] stop
 */
	
	/**
	 * [tMSSqlRow_17 end ] start
	 */

	

	
	
	currentComponent="tMSSqlRow_17";

	

	
        stmt_tMSSqlRow_17.close();
        resourceMap.remove("stmt_tMSSqlRow_17");
    resourceMap.put("statementClosed_tMSSqlRow_17", true);
    resourceMap.put("finish_tMSSqlRow_17", true);
 

ok_Hash.put("tMSSqlRow_17", true);
end_Hash.put("tMSSqlRow_17", System.currentTimeMillis());




/**
 * [tMSSqlRow_17 end ] stop
 */

	
	/**
	 * [tMSSqlRow_18 end ] start
	 */

	

	
	
	currentComponent="tMSSqlRow_18";

	

	
        stmt_tMSSqlRow_18.close();
        resourceMap.remove("stmt_tMSSqlRow_18");
    resourceMap.put("statementClosed_tMSSqlRow_18", true);
    resourceMap.put("finish_tMSSqlRow_18", true);
				if(execStat){
			  		runStat.updateStat(resourceMap,iterateId,2,0,"row39");
			  	}
			  	
 

ok_Hash.put("tMSSqlRow_18", true);
end_Hash.put("tMSSqlRow_18", System.currentTimeMillis());




/**
 * [tMSSqlRow_18 end ] stop
 */

	
	/**
	 * [tLogRow_20 end ] start
	 */

	

	
	
	currentComponent="tLogRow_20";

	


//////
//////
globalMap.put("tLogRow_20_NB_LINE",nb_line_tLogRow_20);

///////////////////////    			

				if(execStat){
			  		runStat.updateStat(resourceMap,iterateId,2,0,"row94");
			  	}
			  	
 

ok_Hash.put("tLogRow_20", true);
end_Hash.put("tLogRow_20", System.currentTimeMillis());




/**
 * [tLogRow_20 end ] stop
 */







	
	/**
	 * [tLogRow_19 end ] start
	 */

	

	
	
	currentComponent="tLogRow_19";

	


//////
//////
globalMap.put("tLogRow_19_NB_LINE",nb_line_tLogRow_19);

///////////////////////    			

				if(execStat){
			  		runStat.updateStat(resourceMap,iterateId,2,0,"row93");
			  	}
			  	
 

ok_Hash.put("tLogRow_19", true);
end_Hash.put("tLogRow_19", System.currentTimeMillis());




/**
 * [tLogRow_19 end ] stop
 */



				}//end the resume

				
				    			if(resumeEntryMethodName == null || globalResumeTicket){
				    				resumeUtil.addLog("CHECKPOINT", "CONNECTION:SUBJOB_OK:tMSSqlRow_17:OnSubjobOk", "", Thread.currentThread().getId() + "", "", "", "", "", "");
								}	    				    			
					    	
								if(execStat){    	
									runStat.updateStatOnConnection("OnSubjobOk12", 0, "ok");
								} 
							
							tMSSqlRow_19Process(globalMap); 
						



	
			}catch(java.lang.Exception e){	
				
				TalendException te = new TalendException(e, currentComponent, globalMap);
				
				throw te;
			}catch(java.lang.Error error){	
				
					runStat.stopThreadStat();
				
				throw error;
			}finally{
				
				try{
					
	
	/**
	 * [tMSSqlRow_17 finally ] start
	 */

	

	
	
	currentComponent="tMSSqlRow_17";

	

    if (resourceMap.get("statementClosed_tMSSqlRow_17") == null) {
            java.sql.Statement stmtToClose_tMSSqlRow_17 = null;
            if ((stmtToClose_tMSSqlRow_17 = (java.sql.Statement) resourceMap.remove("stmt_tMSSqlRow_17")) != null) {
                stmtToClose_tMSSqlRow_17.close();
            }
    }
 



/**
 * [tMSSqlRow_17 finally ] stop
 */

	
	/**
	 * [tMSSqlRow_18 finally ] start
	 */

	

	
	
	currentComponent="tMSSqlRow_18";

	

    if (resourceMap.get("statementClosed_tMSSqlRow_18") == null) {
            java.sql.Statement stmtToClose_tMSSqlRow_18 = null;
            if ((stmtToClose_tMSSqlRow_18 = (java.sql.Statement) resourceMap.remove("stmt_tMSSqlRow_18")) != null) {
                stmtToClose_tMSSqlRow_18.close();
            }
    }
 



/**
 * [tMSSqlRow_18 finally ] stop
 */

	
	/**
	 * [tLogRow_20 finally ] start
	 */

	

	
	
	currentComponent="tLogRow_20";

	

 



/**
 * [tLogRow_20 finally ] stop
 */







	
	/**
	 * [tLogRow_19 finally ] start
	 */

	

	
	
	currentComponent="tLogRow_19";

	

 



/**
 * [tLogRow_19 finally ] stop
 */



				}catch(java.lang.Exception e){	
					//ignore
				}catch(java.lang.Error error){
					//ignore
				}
				resourceMap = null;
			}
		

		globalMap.put("tMSSqlRow_17_SUBPROCESS_STATE", 1);
	}
	


public static class row72Struct implements routines.system.IPersistableRow<row72Struct> {
    final static byte[] commonByteArrayLock_WIPO_PROJECTS_F_IPAS_ENV_CRE = new byte[0];
    static byte[] commonByteArray_WIPO_PROJECTS_F_IPAS_ENV_CRE = new byte[0];

	
			    public String errorCode;

				public String getErrorCode () {
					return this.errorCode;
				}
				
			    public String errorMessage;

				public String getErrorMessage () {
					return this.errorMessage;
				}
				



	private String readString(ObjectInputStream dis) throws IOException{
		String strReturn = null;
		int length = 0;
        length = dis.readInt();
		if (length == -1) {
			strReturn = null;
		} else {
			if(length > commonByteArray_WIPO_PROJECTS_F_IPAS_ENV_CRE.length) {
				if(length < 1024 && commonByteArray_WIPO_PROJECTS_F_IPAS_ENV_CRE.length == 0) {
   					commonByteArray_WIPO_PROJECTS_F_IPAS_ENV_CRE = new byte[1024];
				} else {
   					commonByteArray_WIPO_PROJECTS_F_IPAS_ENV_CRE = new byte[2 * length];
   				}
			}
			dis.readFully(commonByteArray_WIPO_PROJECTS_F_IPAS_ENV_CRE, 0, length);
			strReturn = new String(commonByteArray_WIPO_PROJECTS_F_IPAS_ENV_CRE, 0, length, utf8Charset);
		}
		return strReturn;
	}

    private void writeString(String str, ObjectOutputStream dos) throws IOException{
		if(str == null) {
            dos.writeInt(-1);
		} else {
            byte[] byteArray = str.getBytes(utf8Charset);
	    	dos.writeInt(byteArray.length);
			dos.write(byteArray);
    	}
    }

    public void readData(ObjectInputStream dis) {

		synchronized(commonByteArrayLock_WIPO_PROJECTS_F_IPAS_ENV_CRE) {

        	try {

        		int length = 0;
		
					this.errorCode = readString(dis);
					
					this.errorMessage = readString(dis);
					
        	} catch (IOException e) {
	            throw new RuntimeException(e);

		

        }

		

      }


    }

    public void writeData(ObjectOutputStream dos) {
        try {

		
					// String
				
						writeString(this.errorCode,dos);
					
					// String
				
						writeString(this.errorMessage,dos);
					
        	} catch (IOException e) {
	            throw new RuntimeException(e);
        }


    }


    public String toString() {

		StringBuilder sb = new StringBuilder();
		sb.append(super.toString());
		sb.append("[");
		sb.append("errorCode="+errorCode);
		sb.append(",errorMessage="+errorMessage);
	    sb.append("]");

	    return sb.toString();
    }

    /**
     * Compare keys
     */
    public int compareTo(row72Struct other) {

		int returnValue = -1;
		
	    return returnValue;
    }


    private int checkNullsAndCompare(Object object1, Object object2) {
        int returnValue = 0;
		if (object1 instanceof Comparable && object2 instanceof Comparable) {
            returnValue = ((Comparable) object1).compareTo(object2);
        } else if (object1 != null && object2 != null) {
            returnValue = compareStrings(object1.toString(), object2.toString());
        } else if (object1 == null && object2 != null) {
            returnValue = 1;
        } else if (object1 != null && object2 == null) {
            returnValue = -1;
        } else {
            returnValue = 0;
        }

        return returnValue;
    }

    private int compareStrings(String string1, String string2) {
        return string1.compareTo(string2);
    }


}

public static class row12Struct implements routines.system.IPersistableRow<row12Struct> {
    final static byte[] commonByteArrayLock_WIPO_PROJECTS_F_IPAS_ENV_CRE = new byte[0];
    static byte[] commonByteArray_WIPO_PROJECTS_F_IPAS_ENV_CRE = new byte[0];

	



    public void readData(ObjectInputStream dis) {

		synchronized(commonByteArrayLock_WIPO_PROJECTS_F_IPAS_ENV_CRE) {

        	try {

        		int length = 0;
		

		

        }

		
			finally {}
		

      }


    }

    public void writeData(ObjectOutputStream dos) {
        try {

		
        }

			finally {}
		

    }


    public String toString() {

		StringBuilder sb = new StringBuilder();
		sb.append(super.toString());
		sb.append("[");
	    sb.append("]");

	    return sb.toString();
    }

    /**
     * Compare keys
     */
    public int compareTo(row12Struct other) {

		int returnValue = -1;
		
	    return returnValue;
    }


    private int checkNullsAndCompare(Object object1, Object object2) {
        int returnValue = 0;
		if (object1 instanceof Comparable && object2 instanceof Comparable) {
            returnValue = ((Comparable) object1).compareTo(object2);
        } else if (object1 != null && object2 != null) {
            returnValue = compareStrings(object1.toString(), object2.toString());
        } else if (object1 == null && object2 != null) {
            returnValue = 1;
        } else if (object1 != null && object2 == null) {
            returnValue = -1;
        } else {
            returnValue = 0;
        }

        return returnValue;
    }

    private int compareStrings(String string1, String string2) {
        return string1.compareTo(string2);
    }


}

public static class row71Struct implements routines.system.IPersistableRow<row71Struct> {
    final static byte[] commonByteArrayLock_WIPO_PROJECTS_F_IPAS_ENV_CRE = new byte[0];
    static byte[] commonByteArray_WIPO_PROJECTS_F_IPAS_ENV_CRE = new byte[0];

	
			    public String errorCode;

				public String getErrorCode () {
					return this.errorCode;
				}
				
			    public String errorMessage;

				public String getErrorMessage () {
					return this.errorMessage;
				}
				



	private String readString(ObjectInputStream dis) throws IOException{
		String strReturn = null;
		int length = 0;
        length = dis.readInt();
		if (length == -1) {
			strReturn = null;
		} else {
			if(length > commonByteArray_WIPO_PROJECTS_F_IPAS_ENV_CRE.length) {
				if(length < 1024 && commonByteArray_WIPO_PROJECTS_F_IPAS_ENV_CRE.length == 0) {
   					commonByteArray_WIPO_PROJECTS_F_IPAS_ENV_CRE = new byte[1024];
				} else {
   					commonByteArray_WIPO_PROJECTS_F_IPAS_ENV_CRE = new byte[2 * length];
   				}
			}
			dis.readFully(commonByteArray_WIPO_PROJECTS_F_IPAS_ENV_CRE, 0, length);
			strReturn = new String(commonByteArray_WIPO_PROJECTS_F_IPAS_ENV_CRE, 0, length, utf8Charset);
		}
		return strReturn;
	}

    private void writeString(String str, ObjectOutputStream dos) throws IOException{
		if(str == null) {
            dos.writeInt(-1);
		} else {
            byte[] byteArray = str.getBytes(utf8Charset);
	    	dos.writeInt(byteArray.length);
			dos.write(byteArray);
    	}
    }

    public void readData(ObjectInputStream dis) {

		synchronized(commonByteArrayLock_WIPO_PROJECTS_F_IPAS_ENV_CRE) {

        	try {

        		int length = 0;
		
					this.errorCode = readString(dis);
					
					this.errorMessage = readString(dis);
					
        	} catch (IOException e) {
	            throw new RuntimeException(e);

		

        }

		

      }


    }

    public void writeData(ObjectOutputStream dos) {
        try {

		
					// String
				
						writeString(this.errorCode,dos);
					
					// String
				
						writeString(this.errorMessage,dos);
					
        	} catch (IOException e) {
	            throw new RuntimeException(e);
        }


    }


    public String toString() {

		StringBuilder sb = new StringBuilder();
		sb.append(super.toString());
		sb.append("[");
		sb.append("errorCode="+errorCode);
		sb.append(",errorMessage="+errorMessage);
	    sb.append("]");

	    return sb.toString();
    }

    /**
     * Compare keys
     */
    public int compareTo(row71Struct other) {

		int returnValue = -1;
		
	    return returnValue;
    }


    private int checkNullsAndCompare(Object object1, Object object2) {
        int returnValue = 0;
		if (object1 instanceof Comparable && object2 instanceof Comparable) {
            returnValue = ((Comparable) object1).compareTo(object2);
        } else if (object1 != null && object2 != null) {
            returnValue = compareStrings(object1.toString(), object2.toString());
        } else if (object1 == null && object2 != null) {
            returnValue = 1;
        } else if (object1 != null && object2 == null) {
            returnValue = -1;
        } else {
            returnValue = 0;
        }

        return returnValue;
    }

    private int compareStrings(String string1, String string2) {
        return string1.compareTo(string2);
    }


}
public void tMSSqlRow_19Process(final java.util.Map<String, Object> globalMap) throws TalendException {
	globalMap.put("tMSSqlRow_19_SUBPROCESS_STATE", 0);

 final boolean execStat = this.execStat;
	
		String iterateId = "";
	
	
	String currentComponent = "";
	java.util.Map<String, Object> resourceMap = new java.util.HashMap<String, Object>();

	try {
			// TDI-39566 avoid throwing an useless Exception
			boolean resumeIt = true;
			if (globalResumeTicket == false && resumeEntryMethodName != null) {
				String currentMethodName = new java.lang.Exception().getStackTrace()[0].getMethodName();
				resumeIt = resumeEntryMethodName.equals(currentMethodName);
			}
			if (resumeIt || globalResumeTicket) { //start the resume
				globalResumeTicket = true;



		row12Struct row12 = new row12Struct();
row72Struct row72 = new row72Struct();
row71Struct row71 = new row71Struct();





	
	/**
	 * [tLogRow_22 begin ] start
	 */

	

	
		
		ok_Hash.put("tLogRow_22", false);
		start_Hash.put("tLogRow_22", System.currentTimeMillis());
		
	
	currentComponent="tLogRow_22";

	
					if(execStat) {
						runStat.updateStatOnConnection(resourceMap,iterateId,0,0,"row72");
					}
				
		int tos_count_tLogRow_22 = 0;
		

	///////////////////////
		


	class Util_tLogRow_22 {
	
		String[] des_top = { ".", "-" };

        String[] des_data = { "-", "+" };

        String[] des_frame = { "|" }; 
        
        public void printLine(StringBuilder sb, int titleWidth, int dataWidth){
        
        	sb.append("+");
			for(int i=0; i<titleWidth+2; i++)
				sb.append("-");
			sb.append("+");
			for(int i=0; i<dataWidth+2; i++)
				sb.append("-");
        	sb.append("+" + "\n");
        }      

		public String print(String[] row, int nbLine){
			
			StringBuilder sb = new StringBuilder();
			
			    String title = "#" + nbLine + ". " + "tLogRow_22";
			    
		
			//step 1: get the max length of all the row[] member;
			int dataWidth = 5;		//the length of the string "value"	
			for(int i=0;i<row.length;i++) {
				if(row[i] == null && 4 > dataWidth) {
					dataWidth = 4;
				}
				else if(row[i] != null && row[i].length()>dataWidth) 
					dataWidth = row[i].length();
			}			
						
			int titleWidth = 12;
			
			int totalWidth = dataWidth + titleWidth + 5;
			
			//step 2: print the header with line number
			sb.append(".");
			for(int i=0 ; i<totalWidth ; i++)
				sb.append("-");			
			sb.append("." + "\n" + "|");
			
			int emptyCenterWidth = (totalWidth-title.length())/2;
			for(int i=0 ; i<emptyCenterWidth; i++)
				sb.append(" ");	
			sb.append(title);
			for(int i=0 ; i<totalWidth - emptyCenterWidth - title.length() ; i++)
				sb.append(" ");	
			sb.append("|" + "\n");
			
			//step 3: print "key" and "value"			
			printLine(sb,titleWidth,dataWidth);
			
			sb.append("|" + " key");
			for(int i=0; i<titleWidth-2; i++)
				sb.append(" ");
        	sb.append("|" + " value");
			for(int i=0; i<dataWidth-4; i++)
				sb.append(" ");
			sb.append("|" + "\n");
			
			printLine(sb,titleWidth,dataWidth);
			
			//step 4: print dataset
			
			//for(int i=0; i<row.length; i++){
				sb.append("| " + "errorCode");
				for(int i=0; i<titleWidth -"errorCode".length()+ 1 ;i++)
					sb.append(" ");
				sb.append("| " + row[0]);
				for(int i=0; row[0] == null && i<dataWidth - 3 || row[0] != null && i<dataWidth -row[0].length()+ 1 ;i++)
					sb.append(" ");
				sb.append("|" + "\n");
			
			//}

			
			//for(int i=0; i<row.length; i++){
				sb.append("| " + "errorMessage");
				for(int i=0; i<titleWidth -"errorMessage".length()+ 1 ;i++)
					sb.append(" ");
				sb.append("| " + row[1]);
				for(int i=0; row[1] == null && i<dataWidth - 3 || row[1] != null && i<dataWidth -row[1].length()+ 1 ;i++)
					sb.append(" ");
				sb.append("|" + "\n");
			
			//}

			
			//step 5: print a line gap
			printLine(sb,titleWidth,dataWidth);
			return sb.toString();

		}


	}

	Util_tLogRow_22 util_tLogRow_22 = new Util_tLogRow_22();




	java.io.PrintStream consoleOut_tLogRow_22 = null;
	if (globalMap.get("tLogRow_CONSOLE")!=null){
        consoleOut_tLogRow_22 = (java.io.PrintStream) globalMap.get("tLogRow_CONSOLE");
    }else{
        consoleOut_tLogRow_22 = new java.io.PrintStream(new java.io.BufferedOutputStream(System.out));
        globalMap.put("tLogRow_CONSOLE",consoleOut_tLogRow_22);
    }

 		StringBuilder strBuffer_tLogRow_22 = null;
		int nb_line_tLogRow_22 = 0;
///////////////////////    			



 



/**
 * [tLogRow_22 begin ] stop
 */



	
	/**
	 * [tMSSqlRow_20 begin ] start
	 */

	

	
		
		ok_Hash.put("tMSSqlRow_20", false);
		start_Hash.put("tMSSqlRow_20", System.currentTimeMillis());
		
	
	currentComponent="tMSSqlRow_20";

	
					if(execStat) {
						runStat.updateStatOnConnection(resourceMap,iterateId,0,0,"row12");
					}
				
		int tos_count_tMSSqlRow_20 = 0;
		

	java.sql.Connection conn_tMSSqlRow_20 = null;
	String query_tMSSqlRow_20 = "";
	boolean whetherReject_tMSSqlRow_20 = false;
				conn_tMSSqlRow_20 = (java.sql.Connection)globalMap.get("conn_tMSSqlConnection_4");
			
    resourceMap.put("conn_tMSSqlRow_20", conn_tMSSqlRow_20);
        java.sql.Statement stmt_tMSSqlRow_20 = conn_tMSSqlRow_20.createStatement();
        resourceMap.put("stmt_tMSSqlRow_20", stmt_tMSSqlRow_20);

 



/**
 * [tMSSqlRow_20 begin ] stop
 */




	
	/**
	 * [tLogRow_21 begin ] start
	 */

	

	
		
		ok_Hash.put("tLogRow_21", false);
		start_Hash.put("tLogRow_21", System.currentTimeMillis());
		
	
	currentComponent="tLogRow_21";

	
					if(execStat) {
						runStat.updateStatOnConnection(resourceMap,iterateId,0,0,"row71");
					}
				
		int tos_count_tLogRow_21 = 0;
		

	///////////////////////
		


	class Util_tLogRow_21 {
	
		String[] des_top = { ".", "-" };

        String[] des_data = { "-", "+" };

        String[] des_frame = { "|" }; 
        
        public void printLine(StringBuilder sb, int titleWidth, int dataWidth){
        
        	sb.append("+");
			for(int i=0; i<titleWidth+2; i++)
				sb.append("-");
			sb.append("+");
			for(int i=0; i<dataWidth+2; i++)
				sb.append("-");
        	sb.append("+" + "\n");
        }      

		public String print(String[] row, int nbLine){
			
			StringBuilder sb = new StringBuilder();
			
			    String title = "#" + nbLine + ". " + "tLogRow_21";
			    
		
			//step 1: get the max length of all the row[] member;
			int dataWidth = 5;		//the length of the string "value"	
			for(int i=0;i<row.length;i++) {
				if(row[i] == null && 4 > dataWidth) {
					dataWidth = 4;
				}
				else if(row[i] != null && row[i].length()>dataWidth) 
					dataWidth = row[i].length();
			}			
						
			int titleWidth = 12;
			
			int totalWidth = dataWidth + titleWidth + 5;
			
			//step 2: print the header with line number
			sb.append(".");
			for(int i=0 ; i<totalWidth ; i++)
				sb.append("-");			
			sb.append("." + "\n" + "|");
			
			int emptyCenterWidth = (totalWidth-title.length())/2;
			for(int i=0 ; i<emptyCenterWidth; i++)
				sb.append(" ");	
			sb.append(title);
			for(int i=0 ; i<totalWidth - emptyCenterWidth - title.length() ; i++)
				sb.append(" ");	
			sb.append("|" + "\n");
			
			//step 3: print "key" and "value"			
			printLine(sb,titleWidth,dataWidth);
			
			sb.append("|" + " key");
			for(int i=0; i<titleWidth-2; i++)
				sb.append(" ");
        	sb.append("|" + " value");
			for(int i=0; i<dataWidth-4; i++)
				sb.append(" ");
			sb.append("|" + "\n");
			
			printLine(sb,titleWidth,dataWidth);
			
			//step 4: print dataset
			
			//for(int i=0; i<row.length; i++){
				sb.append("| " + "errorCode");
				for(int i=0; i<titleWidth -"errorCode".length()+ 1 ;i++)
					sb.append(" ");
				sb.append("| " + row[0]);
				for(int i=0; row[0] == null && i<dataWidth - 3 || row[0] != null && i<dataWidth -row[0].length()+ 1 ;i++)
					sb.append(" ");
				sb.append("|" + "\n");
			
			//}

			
			//for(int i=0; i<row.length; i++){
				sb.append("| " + "errorMessage");
				for(int i=0; i<titleWidth -"errorMessage".length()+ 1 ;i++)
					sb.append(" ");
				sb.append("| " + row[1]);
				for(int i=0; row[1] == null && i<dataWidth - 3 || row[1] != null && i<dataWidth -row[1].length()+ 1 ;i++)
					sb.append(" ");
				sb.append("|" + "\n");
			
			//}

			
			//step 5: print a line gap
			printLine(sb,titleWidth,dataWidth);
			return sb.toString();

		}


	}

	Util_tLogRow_21 util_tLogRow_21 = new Util_tLogRow_21();




	java.io.PrintStream consoleOut_tLogRow_21 = null;
	if (globalMap.get("tLogRow_CONSOLE")!=null){
        consoleOut_tLogRow_21 = (java.io.PrintStream) globalMap.get("tLogRow_CONSOLE");
    }else{
        consoleOut_tLogRow_21 = new java.io.PrintStream(new java.io.BufferedOutputStream(System.out));
        globalMap.put("tLogRow_CONSOLE",consoleOut_tLogRow_21);
    }

 		StringBuilder strBuffer_tLogRow_21 = null;
		int nb_line_tLogRow_21 = 0;
///////////////////////    			



 



/**
 * [tLogRow_21 begin ] stop
 */



	
	/**
	 * [tMSSqlRow_19 begin ] start
	 */

	

	
		
		ok_Hash.put("tMSSqlRow_19", false);
		start_Hash.put("tMSSqlRow_19", System.currentTimeMillis());
		
	
	currentComponent="tMSSqlRow_19";

	
		int tos_count_tMSSqlRow_19 = 0;
		

	java.sql.Connection conn_tMSSqlRow_19 = null;
	String query_tMSSqlRow_19 = "";
	boolean whetherReject_tMSSqlRow_19 = false;
				conn_tMSSqlRow_19 = (java.sql.Connection)globalMap.get("conn_tMSSqlConnection_4");
			
    resourceMap.put("conn_tMSSqlRow_19", conn_tMSSqlRow_19);
        java.sql.Statement stmt_tMSSqlRow_19 = conn_tMSSqlRow_19.createStatement();
        resourceMap.put("stmt_tMSSqlRow_19", stmt_tMSSqlRow_19);

 



/**
 * [tMSSqlRow_19 begin ] stop
 */
	
	/**
	 * [tMSSqlRow_19 main ] start
	 */

	

	
	
	currentComponent="tMSSqlRow_19";

	

		row12 = null;
		
		row71 = null;
		
query_tMSSqlRow_19 = "IF OBJECT_ID('CallToDateValidationPROC', 'P') IS NOT NULL\n  DROP PROCEDURE CallToDateValidationPROC";
whetherReject_tMSSqlRow_19 = false;
globalMap.put("tMSSqlRow_19_QUERY",query_tMSSqlRow_19);
try {
		stmt_tMSSqlRow_19.execute(query_tMSSqlRow_19);
		
	} catch (java.lang.Exception e) {
		whetherReject_tMSSqlRow_19 = true;
		
				row71 = new row71Struct();
				
				row71.errorCode = ((java.sql.SQLException)e).getSQLState();
				row71.errorMessage = e.getMessage() + " - Line: " + tos_count_tMSSqlRow_19;
				
	}
	
	if(!whetherReject_tMSSqlRow_19) {
		
					row12 = new row12Struct();
					
	}
	

 


	tos_count_tMSSqlRow_19++;

/**
 * [tMSSqlRow_19 main ] stop
 */
	
	/**
	 * [tMSSqlRow_19 process_data_begin ] start
	 */

	

	
	
	currentComponent="tMSSqlRow_19";

	

 



/**
 * [tMSSqlRow_19 process_data_begin ] stop
 */
// Start of branch "row12"
if(row12 != null) { 
			row72 = null;



	
	/**
	 * [tMSSqlRow_20 main ] start
	 */

	

	
	
	currentComponent="tMSSqlRow_20";

	
					if(execStat){
						runStat.updateStatOnConnection(iterateId,1,1
						
							,"row12"
						
						);
					}
					

		row72 = null;
		
query_tMSSqlRow_20 = "CREATE PROCEDURE CallToDateValidationPROC \n(\n  @APPLICATIONTYPE VARCHAR(4000) \n) \nAS \nBEGIN\nSET NOCOUNT ON;\n  \n"
+"  IF @APPLICATIONTYPE = 'MARK' BEGIN	   \n	exec MarkDateValidationPROC;	\n  END     \n  	\n  IF @APPLICATIONTYPE = 'PATE"
+"NT' BEGIN	  \n	exec PatentDateValidationPROC;		\n  END     \n  \n  IF @APPLICATIONTYPE = 'USERDOC' BEGIN	  	\n	exec User"
+"DocDateValidationPROC;	\n  END \n  SET NOCOUNT OFF;\nEND\n";
whetherReject_tMSSqlRow_20 = false;
globalMap.put("tMSSqlRow_20_QUERY",query_tMSSqlRow_20);
try {
		stmt_tMSSqlRow_20.execute(query_tMSSqlRow_20);
		
	} catch (java.lang.Exception e) {
		whetherReject_tMSSqlRow_20 = true;
		
				row72 = new row72Struct();
				
				row72.errorCode = ((java.sql.SQLException)e).getSQLState();
				row72.errorMessage = e.getMessage() + " - Line: " + tos_count_tMSSqlRow_20;
				
	}
	
	if(!whetherReject_tMSSqlRow_20) {
		
	}
	

 


	tos_count_tMSSqlRow_20++;

/**
 * [tMSSqlRow_20 main ] stop
 */
	
	/**
	 * [tMSSqlRow_20 process_data_begin ] start
	 */

	

	
	
	currentComponent="tMSSqlRow_20";

	

 



/**
 * [tMSSqlRow_20 process_data_begin ] stop
 */
// Start of branch "row72"
if(row72 != null) { 



	
	/**
	 * [tLogRow_22 main ] start
	 */

	

	
	
	currentComponent="tLogRow_22";

	
					if(execStat){
						runStat.updateStatOnConnection(iterateId,1,1
						
							,"row72"
						
						);
					}
					
///////////////////////		
						



				strBuffer_tLogRow_22 = new StringBuilder();




   				
	    		if(row72.errorCode != null) { //              
                    							
       
				strBuffer_tLogRow_22.append(
				                String.valueOf(row72.errorCode)							
				);


							
	    		} //  			

    			strBuffer_tLogRow_22.append("|");
    			


   				
	    		if(row72.errorMessage != null) { //              
                    							
       
				strBuffer_tLogRow_22.append(
				                String.valueOf(row72.errorMessage)							
				);


							
	    		} //  			

				
				String[] row_tLogRow_22 = new String[2];
   				
	    		if(row72.errorCode != null) { //              
                 row_tLogRow_22[0]=    						    
				                String.valueOf(row72.errorCode)			
					          ;	
							
	    		} //			
    			   				
	    		if(row72.errorMessage != null) { //              
                 row_tLogRow_22[1]=    						    
				                String.valueOf(row72.errorMessage)			
					          ;	
							
	    		} //			
    			
				nb_line_tLogRow_22++;
                consoleOut_tLogRow_22.println(util_tLogRow_22.print(row_tLogRow_22,nb_line_tLogRow_22));
                consoleOut_tLogRow_22.flush();
//////

//////                    
                    
///////////////////////    			

 


	tos_count_tLogRow_22++;

/**
 * [tLogRow_22 main ] stop
 */
	
	/**
	 * [tLogRow_22 process_data_begin ] start
	 */

	

	
	
	currentComponent="tLogRow_22";

	

 



/**
 * [tLogRow_22 process_data_begin ] stop
 */
	
	/**
	 * [tLogRow_22 process_data_end ] start
	 */

	

	
	
	currentComponent="tLogRow_22";

	

 



/**
 * [tLogRow_22 process_data_end ] stop
 */

} // End of branch "row72"




	
	/**
	 * [tMSSqlRow_20 process_data_end ] start
	 */

	

	
	
	currentComponent="tMSSqlRow_20";

	

 



/**
 * [tMSSqlRow_20 process_data_end ] stop
 */

} // End of branch "row12"




// Start of branch "row71"
if(row71 != null) { 



	
	/**
	 * [tLogRow_21 main ] start
	 */

	

	
	
	currentComponent="tLogRow_21";

	
					if(execStat){
						runStat.updateStatOnConnection(iterateId,1,1
						
							,"row71"
						
						);
					}
					
///////////////////////		
						



				strBuffer_tLogRow_21 = new StringBuilder();




   				
	    		if(row71.errorCode != null) { //              
                    							
       
				strBuffer_tLogRow_21.append(
				                String.valueOf(row71.errorCode)							
				);


							
	    		} //  			

    			strBuffer_tLogRow_21.append("|");
    			


   				
	    		if(row71.errorMessage != null) { //              
                    							
       
				strBuffer_tLogRow_21.append(
				                String.valueOf(row71.errorMessage)							
				);


							
	    		} //  			

				
				String[] row_tLogRow_21 = new String[2];
   				
	    		if(row71.errorCode != null) { //              
                 row_tLogRow_21[0]=    						    
				                String.valueOf(row71.errorCode)			
					          ;	
							
	    		} //			
    			   				
	    		if(row71.errorMessage != null) { //              
                 row_tLogRow_21[1]=    						    
				                String.valueOf(row71.errorMessage)			
					          ;	
							
	    		} //			
    			
				nb_line_tLogRow_21++;
                consoleOut_tLogRow_21.println(util_tLogRow_21.print(row_tLogRow_21,nb_line_tLogRow_21));
                consoleOut_tLogRow_21.flush();
//////

//////                    
                    
///////////////////////    			

 


	tos_count_tLogRow_21++;

/**
 * [tLogRow_21 main ] stop
 */
	
	/**
	 * [tLogRow_21 process_data_begin ] start
	 */

	

	
	
	currentComponent="tLogRow_21";

	

 



/**
 * [tLogRow_21 process_data_begin ] stop
 */
	
	/**
	 * [tLogRow_21 process_data_end ] start
	 */

	

	
	
	currentComponent="tLogRow_21";

	

 



/**
 * [tLogRow_21 process_data_end ] stop
 */

} // End of branch "row71"




	
	/**
	 * [tMSSqlRow_19 process_data_end ] start
	 */

	

	
	
	currentComponent="tMSSqlRow_19";

	

 



/**
 * [tMSSqlRow_19 process_data_end ] stop
 */
	
	/**
	 * [tMSSqlRow_19 end ] start
	 */

	

	
	
	currentComponent="tMSSqlRow_19";

	

	
        stmt_tMSSqlRow_19.close();
        resourceMap.remove("stmt_tMSSqlRow_19");
    resourceMap.put("statementClosed_tMSSqlRow_19", true);
    resourceMap.put("finish_tMSSqlRow_19", true);
 

ok_Hash.put("tMSSqlRow_19", true);
end_Hash.put("tMSSqlRow_19", System.currentTimeMillis());




/**
 * [tMSSqlRow_19 end ] stop
 */

	
	/**
	 * [tMSSqlRow_20 end ] start
	 */

	

	
	
	currentComponent="tMSSqlRow_20";

	

	
        stmt_tMSSqlRow_20.close();
        resourceMap.remove("stmt_tMSSqlRow_20");
    resourceMap.put("statementClosed_tMSSqlRow_20", true);
    resourceMap.put("finish_tMSSqlRow_20", true);
				if(execStat){
			  		runStat.updateStat(resourceMap,iterateId,2,0,"row12");
			  	}
			  	
 

ok_Hash.put("tMSSqlRow_20", true);
end_Hash.put("tMSSqlRow_20", System.currentTimeMillis());




/**
 * [tMSSqlRow_20 end ] stop
 */

	
	/**
	 * [tLogRow_22 end ] start
	 */

	

	
	
	currentComponent="tLogRow_22";

	


//////
//////
globalMap.put("tLogRow_22_NB_LINE",nb_line_tLogRow_22);

///////////////////////    			

				if(execStat){
			  		runStat.updateStat(resourceMap,iterateId,2,0,"row72");
			  	}
			  	
 

ok_Hash.put("tLogRow_22", true);
end_Hash.put("tLogRow_22", System.currentTimeMillis());




/**
 * [tLogRow_22 end ] stop
 */







	
	/**
	 * [tLogRow_21 end ] start
	 */

	

	
	
	currentComponent="tLogRow_21";

	


//////
//////
globalMap.put("tLogRow_21_NB_LINE",nb_line_tLogRow_21);

///////////////////////    			

				if(execStat){
			  		runStat.updateStat(resourceMap,iterateId,2,0,"row71");
			  	}
			  	
 

ok_Hash.put("tLogRow_21", true);
end_Hash.put("tLogRow_21", System.currentTimeMillis());




/**
 * [tLogRow_21 end ] stop
 */



				}//end the resume

				
				    			if(resumeEntryMethodName == null || globalResumeTicket){
				    				resumeUtil.addLog("CHECKPOINT", "CONNECTION:SUBJOB_OK:tMSSqlRow_19:OnSubjobOk", "", Thread.currentThread().getId() + "", "", "", "", "", "");
								}	    				    			
					    	
								if(execStat){    	
									runStat.updateStatOnConnection("OnSubjobOk13", 0, "ok");
								} 
							
							tMSSqlRow_21Process(globalMap); 
						



	
			}catch(java.lang.Exception e){	
				
				TalendException te = new TalendException(e, currentComponent, globalMap);
				
				throw te;
			}catch(java.lang.Error error){	
				
					runStat.stopThreadStat();
				
				throw error;
			}finally{
				
				try{
					
	
	/**
	 * [tMSSqlRow_19 finally ] start
	 */

	

	
	
	currentComponent="tMSSqlRow_19";

	

    if (resourceMap.get("statementClosed_tMSSqlRow_19") == null) {
            java.sql.Statement stmtToClose_tMSSqlRow_19 = null;
            if ((stmtToClose_tMSSqlRow_19 = (java.sql.Statement) resourceMap.remove("stmt_tMSSqlRow_19")) != null) {
                stmtToClose_tMSSqlRow_19.close();
            }
    }
 



/**
 * [tMSSqlRow_19 finally ] stop
 */

	
	/**
	 * [tMSSqlRow_20 finally ] start
	 */

	

	
	
	currentComponent="tMSSqlRow_20";

	

    if (resourceMap.get("statementClosed_tMSSqlRow_20") == null) {
            java.sql.Statement stmtToClose_tMSSqlRow_20 = null;
            if ((stmtToClose_tMSSqlRow_20 = (java.sql.Statement) resourceMap.remove("stmt_tMSSqlRow_20")) != null) {
                stmtToClose_tMSSqlRow_20.close();
            }
    }
 



/**
 * [tMSSqlRow_20 finally ] stop
 */

	
	/**
	 * [tLogRow_22 finally ] start
	 */

	

	
	
	currentComponent="tLogRow_22";

	

 



/**
 * [tLogRow_22 finally ] stop
 */







	
	/**
	 * [tLogRow_21 finally ] start
	 */

	

	
	
	currentComponent="tLogRow_21";

	

 



/**
 * [tLogRow_21 finally ] stop
 */



				}catch(java.lang.Exception e){	
					//ignore
				}catch(java.lang.Error error){
					//ignore
				}
				resourceMap = null;
			}
		

		globalMap.put("tMSSqlRow_19_SUBPROCESS_STATE", 1);
	}
	


public static class row86Struct implements routines.system.IPersistableRow<row86Struct> {
    final static byte[] commonByteArrayLock_WIPO_PROJECTS_F_IPAS_ENV_CRE = new byte[0];
    static byte[] commonByteArray_WIPO_PROJECTS_F_IPAS_ENV_CRE = new byte[0];

	
			    public String errorCode;

				public String getErrorCode () {
					return this.errorCode;
				}
				
			    public String errorMessage;

				public String getErrorMessage () {
					return this.errorMessage;
				}
				



	private String readString(ObjectInputStream dis) throws IOException{
		String strReturn = null;
		int length = 0;
        length = dis.readInt();
		if (length == -1) {
			strReturn = null;
		} else {
			if(length > commonByteArray_WIPO_PROJECTS_F_IPAS_ENV_CRE.length) {
				if(length < 1024 && commonByteArray_WIPO_PROJECTS_F_IPAS_ENV_CRE.length == 0) {
   					commonByteArray_WIPO_PROJECTS_F_IPAS_ENV_CRE = new byte[1024];
				} else {
   					commonByteArray_WIPO_PROJECTS_F_IPAS_ENV_CRE = new byte[2 * length];
   				}
			}
			dis.readFully(commonByteArray_WIPO_PROJECTS_F_IPAS_ENV_CRE, 0, length);
			strReturn = new String(commonByteArray_WIPO_PROJECTS_F_IPAS_ENV_CRE, 0, length, utf8Charset);
		}
		return strReturn;
	}

    private void writeString(String str, ObjectOutputStream dos) throws IOException{
		if(str == null) {
            dos.writeInt(-1);
		} else {
            byte[] byteArray = str.getBytes(utf8Charset);
	    	dos.writeInt(byteArray.length);
			dos.write(byteArray);
    	}
    }

    public void readData(ObjectInputStream dis) {

		synchronized(commonByteArrayLock_WIPO_PROJECTS_F_IPAS_ENV_CRE) {

        	try {

        		int length = 0;
		
					this.errorCode = readString(dis);
					
					this.errorMessage = readString(dis);
					
        	} catch (IOException e) {
	            throw new RuntimeException(e);

		

        }

		

      }


    }

    public void writeData(ObjectOutputStream dos) {
        try {

		
					// String
				
						writeString(this.errorCode,dos);
					
					// String
				
						writeString(this.errorMessage,dos);
					
        	} catch (IOException e) {
	            throw new RuntimeException(e);
        }


    }


    public String toString() {

		StringBuilder sb = new StringBuilder();
		sb.append(super.toString());
		sb.append("[");
		sb.append("errorCode="+errorCode);
		sb.append(",errorMessage="+errorMessage);
	    sb.append("]");

	    return sb.toString();
    }

    /**
     * Compare keys
     */
    public int compareTo(row86Struct other) {

		int returnValue = -1;
		
	    return returnValue;
    }


    private int checkNullsAndCompare(Object object1, Object object2) {
        int returnValue = 0;
		if (object1 instanceof Comparable && object2 instanceof Comparable) {
            returnValue = ((Comparable) object1).compareTo(object2);
        } else if (object1 != null && object2 != null) {
            returnValue = compareStrings(object1.toString(), object2.toString());
        } else if (object1 == null && object2 != null) {
            returnValue = 1;
        } else if (object1 != null && object2 == null) {
            returnValue = -1;
        } else {
            returnValue = 0;
        }

        return returnValue;
    }

    private int compareStrings(String string1, String string2) {
        return string1.compareTo(string2);
    }


}

public static class row30Struct implements routines.system.IPersistableRow<row30Struct> {
    final static byte[] commonByteArrayLock_WIPO_PROJECTS_F_IPAS_ENV_CRE = new byte[0];
    static byte[] commonByteArray_WIPO_PROJECTS_F_IPAS_ENV_CRE = new byte[0];

	



    public void readData(ObjectInputStream dis) {

		synchronized(commonByteArrayLock_WIPO_PROJECTS_F_IPAS_ENV_CRE) {

        	try {

        		int length = 0;
		

		

        }

		
			finally {}
		

      }


    }

    public void writeData(ObjectOutputStream dos) {
        try {

		
        }

			finally {}
		

    }


    public String toString() {

		StringBuilder sb = new StringBuilder();
		sb.append(super.toString());
		sb.append("[");
	    sb.append("]");

	    return sb.toString();
    }

    /**
     * Compare keys
     */
    public int compareTo(row30Struct other) {

		int returnValue = -1;
		
	    return returnValue;
    }


    private int checkNullsAndCompare(Object object1, Object object2) {
        int returnValue = 0;
		if (object1 instanceof Comparable && object2 instanceof Comparable) {
            returnValue = ((Comparable) object1).compareTo(object2);
        } else if (object1 != null && object2 != null) {
            returnValue = compareStrings(object1.toString(), object2.toString());
        } else if (object1 == null && object2 != null) {
            returnValue = 1;
        } else if (object1 != null && object2 == null) {
            returnValue = -1;
        } else {
            returnValue = 0;
        }

        return returnValue;
    }

    private int compareStrings(String string1, String string2) {
        return string1.compareTo(string2);
    }


}

public static class row85Struct implements routines.system.IPersistableRow<row85Struct> {
    final static byte[] commonByteArrayLock_WIPO_PROJECTS_F_IPAS_ENV_CRE = new byte[0];
    static byte[] commonByteArray_WIPO_PROJECTS_F_IPAS_ENV_CRE = new byte[0];

	
			    public String errorCode;

				public String getErrorCode () {
					return this.errorCode;
				}
				
			    public String errorMessage;

				public String getErrorMessage () {
					return this.errorMessage;
				}
				



	private String readString(ObjectInputStream dis) throws IOException{
		String strReturn = null;
		int length = 0;
        length = dis.readInt();
		if (length == -1) {
			strReturn = null;
		} else {
			if(length > commonByteArray_WIPO_PROJECTS_F_IPAS_ENV_CRE.length) {
				if(length < 1024 && commonByteArray_WIPO_PROJECTS_F_IPAS_ENV_CRE.length == 0) {
   					commonByteArray_WIPO_PROJECTS_F_IPAS_ENV_CRE = new byte[1024];
				} else {
   					commonByteArray_WIPO_PROJECTS_F_IPAS_ENV_CRE = new byte[2 * length];
   				}
			}
			dis.readFully(commonByteArray_WIPO_PROJECTS_F_IPAS_ENV_CRE, 0, length);
			strReturn = new String(commonByteArray_WIPO_PROJECTS_F_IPAS_ENV_CRE, 0, length, utf8Charset);
		}
		return strReturn;
	}

    private void writeString(String str, ObjectOutputStream dos) throws IOException{
		if(str == null) {
            dos.writeInt(-1);
		} else {
            byte[] byteArray = str.getBytes(utf8Charset);
	    	dos.writeInt(byteArray.length);
			dos.write(byteArray);
    	}
    }

    public void readData(ObjectInputStream dis) {

		synchronized(commonByteArrayLock_WIPO_PROJECTS_F_IPAS_ENV_CRE) {

        	try {

        		int length = 0;
		
					this.errorCode = readString(dis);
					
					this.errorMessage = readString(dis);
					
        	} catch (IOException e) {
	            throw new RuntimeException(e);

		

        }

		

      }


    }

    public void writeData(ObjectOutputStream dos) {
        try {

		
					// String
				
						writeString(this.errorCode,dos);
					
					// String
				
						writeString(this.errorMessage,dos);
					
        	} catch (IOException e) {
	            throw new RuntimeException(e);
        }


    }


    public String toString() {

		StringBuilder sb = new StringBuilder();
		sb.append(super.toString());
		sb.append("[");
		sb.append("errorCode="+errorCode);
		sb.append(",errorMessage="+errorMessage);
	    sb.append("]");

	    return sb.toString();
    }

    /**
     * Compare keys
     */
    public int compareTo(row85Struct other) {

		int returnValue = -1;
		
	    return returnValue;
    }


    private int checkNullsAndCompare(Object object1, Object object2) {
        int returnValue = 0;
		if (object1 instanceof Comparable && object2 instanceof Comparable) {
            returnValue = ((Comparable) object1).compareTo(object2);
        } else if (object1 != null && object2 != null) {
            returnValue = compareStrings(object1.toString(), object2.toString());
        } else if (object1 == null && object2 != null) {
            returnValue = 1;
        } else if (object1 != null && object2 == null) {
            returnValue = -1;
        } else {
            returnValue = 0;
        }

        return returnValue;
    }

    private int compareStrings(String string1, String string2) {
        return string1.compareTo(string2);
    }


}
public void tMSSqlRow_21Process(final java.util.Map<String, Object> globalMap) throws TalendException {
	globalMap.put("tMSSqlRow_21_SUBPROCESS_STATE", 0);

 final boolean execStat = this.execStat;
	
		String iterateId = "";
	
	
	String currentComponent = "";
	java.util.Map<String, Object> resourceMap = new java.util.HashMap<String, Object>();

	try {
			// TDI-39566 avoid throwing an useless Exception
			boolean resumeIt = true;
			if (globalResumeTicket == false && resumeEntryMethodName != null) {
				String currentMethodName = new java.lang.Exception().getStackTrace()[0].getMethodName();
				resumeIt = resumeEntryMethodName.equals(currentMethodName);
			}
			if (resumeIt || globalResumeTicket) { //start the resume
				globalResumeTicket = true;



		row30Struct row30 = new row30Struct();
row86Struct row86 = new row86Struct();
row85Struct row85 = new row85Struct();





	
	/**
	 * [tLogRow_24 begin ] start
	 */

	

	
		
		ok_Hash.put("tLogRow_24", false);
		start_Hash.put("tLogRow_24", System.currentTimeMillis());
		
	
	currentComponent="tLogRow_24";

	
					if(execStat) {
						runStat.updateStatOnConnection(resourceMap,iterateId,0,0,"row86");
					}
				
		int tos_count_tLogRow_24 = 0;
		

	///////////////////////
		


	class Util_tLogRow_24 {
	
		String[] des_top = { ".", "-" };

        String[] des_data = { "-", "+" };

        String[] des_frame = { "|" }; 
        
        public void printLine(StringBuilder sb, int titleWidth, int dataWidth){
        
        	sb.append("+");
			for(int i=0; i<titleWidth+2; i++)
				sb.append("-");
			sb.append("+");
			for(int i=0; i<dataWidth+2; i++)
				sb.append("-");
        	sb.append("+" + "\n");
        }      

		public String print(String[] row, int nbLine){
			
			StringBuilder sb = new StringBuilder();
			
			    String title = "#" + nbLine + ". " + "tLogRow_24";
			    
		
			//step 1: get the max length of all the row[] member;
			int dataWidth = 5;		//the length of the string "value"	
			for(int i=0;i<row.length;i++) {
				if(row[i] == null && 4 > dataWidth) {
					dataWidth = 4;
				}
				else if(row[i] != null && row[i].length()>dataWidth) 
					dataWidth = row[i].length();
			}			
						
			int titleWidth = 12;
			
			int totalWidth = dataWidth + titleWidth + 5;
			
			//step 2: print the header with line number
			sb.append(".");
			for(int i=0 ; i<totalWidth ; i++)
				sb.append("-");			
			sb.append("." + "\n" + "|");
			
			int emptyCenterWidth = (totalWidth-title.length())/2;
			for(int i=0 ; i<emptyCenterWidth; i++)
				sb.append(" ");	
			sb.append(title);
			for(int i=0 ; i<totalWidth - emptyCenterWidth - title.length() ; i++)
				sb.append(" ");	
			sb.append("|" + "\n");
			
			//step 3: print "key" and "value"			
			printLine(sb,titleWidth,dataWidth);
			
			sb.append("|" + " key");
			for(int i=0; i<titleWidth-2; i++)
				sb.append(" ");
        	sb.append("|" + " value");
			for(int i=0; i<dataWidth-4; i++)
				sb.append(" ");
			sb.append("|" + "\n");
			
			printLine(sb,titleWidth,dataWidth);
			
			//step 4: print dataset
			
			//for(int i=0; i<row.length; i++){
				sb.append("| " + "errorCode");
				for(int i=0; i<titleWidth -"errorCode".length()+ 1 ;i++)
					sb.append(" ");
				sb.append("| " + row[0]);
				for(int i=0; row[0] == null && i<dataWidth - 3 || row[0] != null && i<dataWidth -row[0].length()+ 1 ;i++)
					sb.append(" ");
				sb.append("|" + "\n");
			
			//}

			
			//for(int i=0; i<row.length; i++){
				sb.append("| " + "errorMessage");
				for(int i=0; i<titleWidth -"errorMessage".length()+ 1 ;i++)
					sb.append(" ");
				sb.append("| " + row[1]);
				for(int i=0; row[1] == null && i<dataWidth - 3 || row[1] != null && i<dataWidth -row[1].length()+ 1 ;i++)
					sb.append(" ");
				sb.append("|" + "\n");
			
			//}

			
			//step 5: print a line gap
			printLine(sb,titleWidth,dataWidth);
			return sb.toString();

		}


	}

	Util_tLogRow_24 util_tLogRow_24 = new Util_tLogRow_24();




	java.io.PrintStream consoleOut_tLogRow_24 = null;
	if (globalMap.get("tLogRow_CONSOLE")!=null){
        consoleOut_tLogRow_24 = (java.io.PrintStream) globalMap.get("tLogRow_CONSOLE");
    }else{
        consoleOut_tLogRow_24 = new java.io.PrintStream(new java.io.BufferedOutputStream(System.out));
        globalMap.put("tLogRow_CONSOLE",consoleOut_tLogRow_24);
    }

 		StringBuilder strBuffer_tLogRow_24 = null;
		int nb_line_tLogRow_24 = 0;
///////////////////////    			



 



/**
 * [tLogRow_24 begin ] stop
 */



	
	/**
	 * [tMSSqlRow_22 begin ] start
	 */

	

	
		
		ok_Hash.put("tMSSqlRow_22", false);
		start_Hash.put("tMSSqlRow_22", System.currentTimeMillis());
		
	
	currentComponent="tMSSqlRow_22";

	
					if(execStat) {
						runStat.updateStatOnConnection(resourceMap,iterateId,0,0,"row30");
					}
				
		int tos_count_tMSSqlRow_22 = 0;
		

	java.sql.Connection conn_tMSSqlRow_22 = null;
	String query_tMSSqlRow_22 = "";
	boolean whetherReject_tMSSqlRow_22 = false;
				conn_tMSSqlRow_22 = (java.sql.Connection)globalMap.get("conn_tMSSqlConnection_4");
			
    resourceMap.put("conn_tMSSqlRow_22", conn_tMSSqlRow_22);
        java.sql.Statement stmt_tMSSqlRow_22 = conn_tMSSqlRow_22.createStatement();
        resourceMap.put("stmt_tMSSqlRow_22", stmt_tMSSqlRow_22);

 



/**
 * [tMSSqlRow_22 begin ] stop
 */




	
	/**
	 * [tLogRow_23 begin ] start
	 */

	

	
		
		ok_Hash.put("tLogRow_23", false);
		start_Hash.put("tLogRow_23", System.currentTimeMillis());
		
	
	currentComponent="tLogRow_23";

	
					if(execStat) {
						runStat.updateStatOnConnection(resourceMap,iterateId,0,0,"row85");
					}
				
		int tos_count_tLogRow_23 = 0;
		

	///////////////////////
		


	class Util_tLogRow_23 {
	
		String[] des_top = { ".", "-" };

        String[] des_data = { "-", "+" };

        String[] des_frame = { "|" }; 
        
        public void printLine(StringBuilder sb, int titleWidth, int dataWidth){
        
        	sb.append("+");
			for(int i=0; i<titleWidth+2; i++)
				sb.append("-");
			sb.append("+");
			for(int i=0; i<dataWidth+2; i++)
				sb.append("-");
        	sb.append("+" + "\n");
        }      

		public String print(String[] row, int nbLine){
			
			StringBuilder sb = new StringBuilder();
			
			    String title = "#" + nbLine + ". " + "tLogRow_23";
			    
		
			//step 1: get the max length of all the row[] member;
			int dataWidth = 5;		//the length of the string "value"	
			for(int i=0;i<row.length;i++) {
				if(row[i] == null && 4 > dataWidth) {
					dataWidth = 4;
				}
				else if(row[i] != null && row[i].length()>dataWidth) 
					dataWidth = row[i].length();
			}			
						
			int titleWidth = 12;
			
			int totalWidth = dataWidth + titleWidth + 5;
			
			//step 2: print the header with line number
			sb.append(".");
			for(int i=0 ; i<totalWidth ; i++)
				sb.append("-");			
			sb.append("." + "\n" + "|");
			
			int emptyCenterWidth = (totalWidth-title.length())/2;
			for(int i=0 ; i<emptyCenterWidth; i++)
				sb.append(" ");	
			sb.append(title);
			for(int i=0 ; i<totalWidth - emptyCenterWidth - title.length() ; i++)
				sb.append(" ");	
			sb.append("|" + "\n");
			
			//step 3: print "key" and "value"			
			printLine(sb,titleWidth,dataWidth);
			
			sb.append("|" + " key");
			for(int i=0; i<titleWidth-2; i++)
				sb.append(" ");
        	sb.append("|" + " value");
			for(int i=0; i<dataWidth-4; i++)
				sb.append(" ");
			sb.append("|" + "\n");
			
			printLine(sb,titleWidth,dataWidth);
			
			//step 4: print dataset
			
			//for(int i=0; i<row.length; i++){
				sb.append("| " + "errorCode");
				for(int i=0; i<titleWidth -"errorCode".length()+ 1 ;i++)
					sb.append(" ");
				sb.append("| " + row[0]);
				for(int i=0; row[0] == null && i<dataWidth - 3 || row[0] != null && i<dataWidth -row[0].length()+ 1 ;i++)
					sb.append(" ");
				sb.append("|" + "\n");
			
			//}

			
			//for(int i=0; i<row.length; i++){
				sb.append("| " + "errorMessage");
				for(int i=0; i<titleWidth -"errorMessage".length()+ 1 ;i++)
					sb.append(" ");
				sb.append("| " + row[1]);
				for(int i=0; row[1] == null && i<dataWidth - 3 || row[1] != null && i<dataWidth -row[1].length()+ 1 ;i++)
					sb.append(" ");
				sb.append("|" + "\n");
			
			//}

			
			//step 5: print a line gap
			printLine(sb,titleWidth,dataWidth);
			return sb.toString();

		}


	}

	Util_tLogRow_23 util_tLogRow_23 = new Util_tLogRow_23();




	java.io.PrintStream consoleOut_tLogRow_23 = null;
	if (globalMap.get("tLogRow_CONSOLE")!=null){
        consoleOut_tLogRow_23 = (java.io.PrintStream) globalMap.get("tLogRow_CONSOLE");
    }else{
        consoleOut_tLogRow_23 = new java.io.PrintStream(new java.io.BufferedOutputStream(System.out));
        globalMap.put("tLogRow_CONSOLE",consoleOut_tLogRow_23);
    }

 		StringBuilder strBuffer_tLogRow_23 = null;
		int nb_line_tLogRow_23 = 0;
///////////////////////    			



 



/**
 * [tLogRow_23 begin ] stop
 */



	
	/**
	 * [tMSSqlRow_21 begin ] start
	 */

	

	
		
		ok_Hash.put("tMSSqlRow_21", false);
		start_Hash.put("tMSSqlRow_21", System.currentTimeMillis());
		
	
	currentComponent="tMSSqlRow_21";

	
		int tos_count_tMSSqlRow_21 = 0;
		

	java.sql.Connection conn_tMSSqlRow_21 = null;
	String query_tMSSqlRow_21 = "";
	boolean whetherReject_tMSSqlRow_21 = false;
				conn_tMSSqlRow_21 = (java.sql.Connection)globalMap.get("conn_tMSSqlConnection_4");
			
    resourceMap.put("conn_tMSSqlRow_21", conn_tMSSqlRow_21);
        java.sql.Statement stmt_tMSSqlRow_21 = conn_tMSSqlRow_21.createStatement();
        resourceMap.put("stmt_tMSSqlRow_21", stmt_tMSSqlRow_21);

 



/**
 * [tMSSqlRow_21 begin ] stop
 */
	
	/**
	 * [tMSSqlRow_21 main ] start
	 */

	

	
	
	currentComponent="tMSSqlRow_21";

	

		row30 = null;
		
		row85 = null;
		
query_tMSSqlRow_21 = "IF OBJECT_ID('PatentDateValidationPROC', 'P') IS NOT NULL\n  DROP PROCEDURE PatentDateValidationPROC;\n";
whetherReject_tMSSqlRow_21 = false;
globalMap.put("tMSSqlRow_21_QUERY",query_tMSSqlRow_21);
try {
		stmt_tMSSqlRow_21.execute(query_tMSSqlRow_21);
		
	} catch (java.lang.Exception e) {
		whetherReject_tMSSqlRow_21 = true;
		
				row85 = new row85Struct();
				
				row85.errorCode = ((java.sql.SQLException)e).getSQLState();
				row85.errorMessage = e.getMessage() + " - Line: " + tos_count_tMSSqlRow_21;
				
	}
	
	if(!whetherReject_tMSSqlRow_21) {
		
					row30 = new row30Struct();
					
	}
	

 


	tos_count_tMSSqlRow_21++;

/**
 * [tMSSqlRow_21 main ] stop
 */
	
	/**
	 * [tMSSqlRow_21 process_data_begin ] start
	 */

	

	
	
	currentComponent="tMSSqlRow_21";

	

 



/**
 * [tMSSqlRow_21 process_data_begin ] stop
 */
// Start of branch "row30"
if(row30 != null) { 
			row86 = null;



	
	/**
	 * [tMSSqlRow_22 main ] start
	 */

	

	
	
	currentComponent="tMSSqlRow_22";

	
					if(execStat){
						runStat.updateStatOnConnection(iterateId,1,1
						
							,"row30"
						
						);
					}
					

		row86 = null;
		
query_tMSSqlRow_22 = "CREATE PROCEDURE PatentDateValidationPROC\n	AS\n	BEGIN\n		SET NOCOUNT ON\n		-- 1.	Validate CAPTURE_DATE\n		INSERT INTO "
+" ["+ context.intermediateDB + "].[dbo].VW_IMPORT_PATENT_RESULT (file_seq, file_type, file_series, file_nbr, ind_import, msg_import) \n		SELECT T.file_"
+"seq, T.file_type, T.file_series, T.file_nbr, 2, 'Invalid CAPTURE_DATE. CAPTURE_DATE required to be greater than 1700-01-"
+"01 and lower than the current date.' \n		FROM  ["+ context.intermediateDB + "].[dbo].VW_IMPORT_PATENT T WHERE CAPTURE_DATE > GETDATE() or CAST(DATEPART(YYYY, CAPTURE_DATE) as NUMERIC) < 1700;	\n		"
+"\n		-- 2.	Validate ENTITLEMENT_DATE\n		INSERT INTO  ["+ context.intermediateDB + "].[dbo].VW_IMPORT_PATENT_RESULT (file_seq, file_type, file_series, file_nbr, ind_import, msg_import) \n		SELECT T.file_"
+"seq, T.file_type, T.file_series, T.file_nbr, 2, 'Invalid ENTITLEMENT_DATE. ENTITLEMENT_DATE required to be greater than "
+"1700-01-01 and lower than the current date.' \n		FROM  ["+ context.intermediateDB + "].[dbo].VW_IMPORT_PATENT T WHERE ENTITLEMENT_DATE > GETDATE() or CAST(DATEPART(YYYY, ENTITLEMENT_DATE) as NUMERIC) < 17"
+"00;	\n		\n		-- 3.	Validate EXHIBITION_DATE\n		INSERT INTO  ["+ context.intermediateDB + "].[dbo].VW_IMPORT_PATENT_RESULT (file_seq, file_type, file_series, file_nbr, ind_import, msg_import) \n		SELECT T.file_"
+"seq, T.file_type, T.file_series, T.file_nbr, 2, 'Invalid EXHIBITION_DATE. EXHIBITION_DATE required to be greater than 17"
+"00-01-01 and lower than the current date.' \n		FROM  ["+ context.intermediateDB + "].[dbo].VW_IMPORT_PATENT T WHERE EXHIBITION_DATE > GETDATE() or CAST(DATEPART(YYYY, EXHIBITION_DATE) as NUMERIC) < 1700"
+";	\n		\n		\n		-- 4.	Validate FILING_DATE\n		INSERT INTO  ["+ context.intermediateDB + "].[dbo].VW_IMPORT_PATENT_RESULT (file_seq, file_type, file_series, file_nbr, ind_import, msg_import) \n		SELECT T.file_"
+"seq, T.file_type, T.file_series, T.file_nbr, 2, 'Invalid FILING_DATE. FILING_DATE required to be greater than 1700-01-01"
+" and lower than the current date.' \n		FROM  ["+ context.intermediateDB + "].[dbo].VW_IMPORT_PATENT T WHERE FILING_DATE > GETDATE() or CAST(DATEPART(YYYY, FILING_DATE) as NUMERIC) < 1700;	\n		\n"
+"		-- 5.	Validate PCT_APPLICATION_DATE\n		INSERT INTO  ["+ context.intermediateDB + "].[dbo].VW_IMPORT_PATENT_RESULT (file_seq, file_type, file_series, file_nbr, ind_import, msg_import) \n		SELECT T.file_"
+"seq, T.file_type, T.file_series, T.file_nbr, 2, 'Invalid PCT_APPLICATION_DATE. PCT_APPLICATION_DATE required to be great"
+"er than 1700-01-01 and lower than the current date.' \n		FROM  ["+ context.intermediateDB + "].[dbo].VW_IMPORT_PATENT T WHERE PCT_APPLICATION_DATE > GETDATE() or CAST(DATEPART(YYYY, PCT_APPLICATION_DATE) as NUMER"
+"IC) < 1700;	\n		\n		-- 6.	Validate PCT_PUBLICATION_DATE\n		INSERT INTO  ["+ context.intermediateDB + "].[dbo].VW_IMPORT_PATENT_RESULT (file_seq, file_type, file_series, file_nbr, ind_import, msg_import) \n		SELECT T.file_"
+"seq, T.file_type, T.file_series, T.file_nbr, 2, 'Invalid PCT_PUBLICATION_DATE. PCT_PUBLICATION_DATE required to be great"
+"er than 1700-01-01 and lower than the current date.' \n		FROM  ["+ context.intermediateDB + "].[dbo].VW_IMPORT_PATENT T WHERE PCT_PUBLICATION_DATE > GETDATE() or CAST(DATEPART(YYYY, PCT_PUBLICATION_DATE) as NUMER"
+"IC) < 1700;	\n		\n		\n		-- 7.	Validate PUBLICATION_DATE\n		INSERT INTO  ["+ context.intermediateDB + "].[dbo].VW_IMPORT_PATENT_RESULT (file_seq, file_type, file_series, file_nbr, ind_import, msg_import) \n		SELECT T.file_"
+"seq, T.file_type, T.file_series, T.file_nbr, 2, 'Invalid PUBLICATION_DATE. PUBLICATION_DATE required to be greater than "
+"1700-01-01 and lower than the current date.' \n		FROM  ["+ context.intermediateDB + "].[dbo].VW_IMPORT_PATENT T WHERE PUBLICATION_DATE > GETDATE() or CAST(DATEPART(YYYY, PUBLICATION_DATE) as NUMERIC) < 17"
+"00;	\n		\n		-- 8.	Validate RECEPTION_DATE\n		INSERT INTO  ["+ context.intermediateDB + "].[dbo].VW_IMPORT_PATENT_RESULT (file_seq, file_type, file_series, file_nbr, ind_import, msg_import) \n		SELECT T.file_"
+"seq, T.file_type, T.file_series, T.file_nbr, 2, 'Invalid RECEPTION_DATE. RECEPTION_DATE required to be greater than 1700"
+"-01-01 and lower than the current date.' \n		FROM  ["+ context.intermediateDB + "].[dbo].VW_IMPORT_PATENT T WHERE RECEPTION_DATE > GETDATE() or CAST(DATEPART(YYYY, RECEPTION_DATE) as NUMERIC) < 1700;	"
+"	\n		\n		-- 9.	Validate REGIONAL_APPL_DATE\n		INSERT INTO  ["+ context.intermediateDB + "].[dbo].VW_IMPORT_PATENT_RESULT (file_seq, file_type, file_series, file_nbr, ind_import, msg_import) \n		SELECT T.file_"
+"seq, T.file_type, T.file_series, T.file_nbr, 2, 'Invalid REGIONAL_APPL_DATE. REGIONAL_APPL_DATE required to be greater t"
+"han 1700-01-01 and lower than the current date.' \n		FROM  ["+ context.intermediateDB + "].[dbo].VW_IMPORT_PATENT T WHERE REGIONAL_APPL_DATE > GETDATE() or CAST(DATEPART(YYYY, REGIONAL_APPL_DATE) as NUMERIC) "
+"< 1700;	\n		\n		-- 10.	Validate REGIONAL_PUBL_DATE\n		INSERT INTO  ["+ context.intermediateDB + "].[dbo].VW_IMPORT_PATENT_RESULT (file_seq, file_type, file_series, file_nbr, ind_import, msg_import) \n		SELECT T.file_"
+"seq, T.file_type, T.file_series, T.file_nbr, 2, 'Invalid REGIONAL_PUBL_DATE. REGIONAL_PUBL_DATE required to be greater t"
+"han 1700-01-01 and lower than the current date.' \n		FROM  ["+ context.intermediateDB + "].[dbo].VW_IMPORT_PATENT T WHERE REGIONAL_PUBL_DATE > GETDATE() or CAST(DATEPART(YYYY, REGIONAL_PUBL_DATE) as NUMERIC) "
+"< 1700;	\n		\n		-- 11.	Validate REGISTRATION_DATE\n		INSERT INTO  ["+ context.intermediateDB + "].[dbo].VW_IMPORT_PATENT_RESULT (file_seq, file_type, file_series, file_nbr, ind_import, msg_import) \n		SELECT T.file_"
+"seq, T.file_type, T.file_series, T.file_nbr, 2, 'Invalid REGISTRATION_DATE. REGISTRATION_DATE required to be greater tha"
+"n 1700-01-01 and lower than the current date.' \n		FROM  ["+ context.intermediateDB + "].[dbo].VW_IMPORT_PATENT T WHERE REGISTRATION_DATE > GETDATE() or CAST(DATEPART(YYYY, REGISTRATION_DATE) as NUMERIC) < "
+"1700;	\n		\n		-- 12.	Validate SPECIAL_PUBL_APPL_DATE\n		INSERT INTO  ["+ context.intermediateDB + "].[dbo].VW_IMPORT_PATENT_RESULT (file_seq, file_type, file_series, file_nbr, ind_import, msg_import) \n		SELECT T.file_"
+"seq, T.file_type, T.file_series, T.file_nbr, 2, 'Invalid SPECIAL_PUBL_APPL_DATE. SPECIAL_PUBL_APPL_DATE required to be g"
+"reater than 1700-01-01 and lower than the current date.' \n		FROM  ["+ context.intermediateDB + "].[dbo].VW_IMPORT_PATENT T WHERE SPECIAL_PUBL_APPL_DATE > GETDATE() or CAST(DATEPART(YYYY, SPECIAL_PUBL_APPL_DATE) as N"
+"UMERIC) < 1700;	\n			\n		-- 13.	Validate SPECIAL_PUBL_REQU_DATE\n		INSERT INTO  ["+ context.intermediateDB + "].[dbo].VW_IMPORT_PATENT_RESULT (file_seq, file_type, file_series, file_nbr, ind_import, msg_import) \n		SELECT T.file_"
+"seq, T.file_type, T.file_series, T.file_nbr, 2, 'Invalid SPECIAL_PUBL_REQU_DATE. SPECIAL_PUBL_REQU_DATE required to be g"
+"reater than 1700-01-01 and lower than the current date.' \n		FROM  ["+ context.intermediateDB + "].[dbo].VW_IMPORT_PATENT T WHERE SPECIAL_PUBL_REQU_DATE > GETDATE() or CAST(DATEPART(YYYY, SPECIAL_PUBL_REQU_DATE) as N"
+"UMERIC) < 1700;	\n		\n		-- 14.	Validate ACTION_DATE\n		INSERT INTO  ["+ context.intermediateDB + "].[dbo].VW_IMPORT_PATENT_RESULT (file_seq, file_type, file_series, file_nbr, ind_import, msg_import) \n		SELECT T.file_"
+"seq, T.file_type, T.file_series, T.file_nbr, 2, 'Invalid ACTION_DATE. ACTION_DATE required to be greater than 1700-01-01"
+" and lower than the current date.' \n		FROM  ["+ context.intermediateDB + "].[dbo].VW_IMPORT_PATENT_ACTIONS T WHERE ACTION_DATE > GETDATE() or CAST(DATEPART(YYYY, ACTION_DATE) as NUMERIC) < 1700"
+";	\n		\n		-- 15.	Validate PUBLICATION_DATE\n	--	INSERT INTO  ["+ context.intermediateDB + "].[dbo].VW_IMPORT_PATENT_RESULT (file_seq, file_type, file_series, file_nbr, ind_import, msg_import) \n	--	SELECT T.fil"
+"e_seq, T.file_type, T.file_series, T.file_nbr, 2, 'Invalid PUBLICATION_DATE. PUBLICATION_DATE required to be greater tha"
+"n 1700-01-01 and lower than the current date.' \n	--	FROM  ["+ context.intermediateDB + "].[dbo].VW_IMPORT_PATENT_ACTIONS T WHERE PUBLICATION_DATE > GETDATE() or CAST(DATEPART(YYYY, PUBLICATION_DATE) as NUMER"
+"IC) < 1700;	\n		\n		-- 16.	Validate RECEIPT_DATE\n		INSERT INTO  ["+ context.intermediateDB + "].[dbo].VW_IMPORT_PATENT_RESULT (file_seq, file_type, file_series, file_nbr, ind_import, msg_import) \n		SELECT T.file_"
+"seq, T.file_type, T.file_series, T.file_nbr, 2, 'Invalid RECEIPT_DATE. RECEIPT_DATE required to be greater than 1700-01-"
+"01 and lower than the current date.' \n		FROM  ["+ context.intermediateDB + "].[dbo].VW_IMPORT_PATENT_PAYMENTS T WHERE RECEIPT_DATE > GETDATE() or CAST(DATEPART(YYYY, RECEIPT_DATE) as NUMERIC) < 1"
+"700;	\n			\n		-- 17.	Validate PRIORITY_DATE\n		INSERT INTO  ["+ context.intermediateDB + "].[dbo].VW_IMPORT_PATENT_RESULT (file_seq, file_type, file_series, file_nbr, ind_import, msg_import) \n		SELECT T.file_"
+"seq, T.file_type, T.file_series, T.file_nbr, 2, 'Invalid PRIORITY_DATE. PRIORITY_DATE required to be greater than 1700-0"
+"1-01 and lower than the current date.' \n		FROM  ["+ context.intermediateDB + "].[dbo].VW_IMPORT_PATENT_PRIORITIES T WHERE PRIORITY_DATE > GETDATE() or CAST(DATEPART(YYYY, PRIORITY_DATE) as NUMERIC)"
+" < 1700;	\n		\n		-- Can be a Future Date so no check with GETDATE()\n		\n		-- 1.	Validate EXPIRATION_DATE\n		INSERT INTO"
+"  ["+ context.intermediateDB + "].[dbo].VW_IMPORT_PATENT_RESULT (file_seq, file_type, file_series, file_nbr, ind_import, msg_import) \n		SELECT T.file_"
+"seq, T.file_type, T.file_series, T.file_nbr, 2, 'Invalid EXPIRATION_DATE. EXPIRATION_DATE required to be greater than 17"
+"00-01-01 and lower than the current date.' \n		FROM  ["+ context.intermediateDB + "].[dbo].VW_IMPORT_PATENT T WHERE CAST(DATEPART(YYYY, EXPIRATION_DATE) as NUMERIC) < 1700;	\n		\n		-- 2.	Validate MANUAL"
+"_DUE_DATE\n		INSERT INTO  ["+ context.intermediateDB + "].[dbo].VW_IMPORT_PATENT_RESULT (file_seq, file_type, file_series, file_nbr, ind_import, msg_import) \n		SELECT T.file_"
+"seq, T.file_type, T.file_series, T.file_nbr, 2, 'Invalid MANUAL_DUE_DATE. MANUAL_DUE_DATE required to be greater than 17"
+"00-01-01 and lower than the current date.' \n		FROM  ["+ context.intermediateDB + "].[dbo].VW_IMPORT_PATENT_ACTIONS T WHERE CAST(DATEPART(YYYY, MANUAL_DUE_DATE) as NUMERIC) < 1700;	\n		\n		-- 3.	Validat"
+"e EXPIRATION_DATE\n		INSERT INTO  ["+ context.intermediateDB + "].[dbo].VW_IMPORT_PATENT_RESULT (file_seq, file_type, file_series, file_nbr, ind_import, msg_import) \n		SELECT T.file_"
+"seq, T.file_type, T.file_series, T.file_nbr, 2, 'Invalid EXPIRATION_DATE. EXPIRATION_DATE required to be greater than 17"
+"00-01-01 and lower than the current date.' \n		FROM  ["+ context.intermediateDB + "].[dbo].VW_IMPORT_PATENT_ANNUITIES T WHERE CAST(DATEPART(YYYY, EXPIRATION_DATE) as NUMERIC) < 1700;\n\n		-- 4.	Validate"
+" GRACE_DATE\n		INSERT INTO  ["+ context.intermediateDB + "].[dbo].VW_IMPORT_PATENT_RESULT (file_seq, file_type, file_series, file_nbr, ind_import, msg_import) \n		SELECT T.file_"
+"seq, T.file_type, T.file_series, T.file_nbr, 2, 'Invalid GRACE_DATE. GRACE_DATE required to be greater than 1700-01-01 a"
+"nd lower than the current date.' \n		FROM  ["+ context.intermediateDB + "].[dbo].VW_IMPORT_PATENT_ANNUITIES T WHERE CAST(DATEPART(YYYY, GRACE_DATE) as NUMERIC) < 1700;	\n		\n		SET NOCOUNT OFF"
+"\n\n	END\n";
whetherReject_tMSSqlRow_22 = false;
globalMap.put("tMSSqlRow_22_QUERY",query_tMSSqlRow_22);
try {
		stmt_tMSSqlRow_22.execute(query_tMSSqlRow_22);
		
	} catch (java.lang.Exception e) {
		whetherReject_tMSSqlRow_22 = true;
		
				row86 = new row86Struct();
				
				row86.errorCode = ((java.sql.SQLException)e).getSQLState();
				row86.errorMessage = e.getMessage() + " - Line: " + tos_count_tMSSqlRow_22;
				
	}
	
	if(!whetherReject_tMSSqlRow_22) {
		
	}
	

 


	tos_count_tMSSqlRow_22++;

/**
 * [tMSSqlRow_22 main ] stop
 */
	
	/**
	 * [tMSSqlRow_22 process_data_begin ] start
	 */

	

	
	
	currentComponent="tMSSqlRow_22";

	

 



/**
 * [tMSSqlRow_22 process_data_begin ] stop
 */
// Start of branch "row86"
if(row86 != null) { 



	
	/**
	 * [tLogRow_24 main ] start
	 */

	

	
	
	currentComponent="tLogRow_24";

	
					if(execStat){
						runStat.updateStatOnConnection(iterateId,1,1
						
							,"row86"
						
						);
					}
					
///////////////////////		
						



				strBuffer_tLogRow_24 = new StringBuilder();




   				
	    		if(row86.errorCode != null) { //              
                    							
       
				strBuffer_tLogRow_24.append(
				                String.valueOf(row86.errorCode)							
				);


							
	    		} //  			

    			strBuffer_tLogRow_24.append("|");
    			


   				
	    		if(row86.errorMessage != null) { //              
                    							
       
				strBuffer_tLogRow_24.append(
				                String.valueOf(row86.errorMessage)							
				);


							
	    		} //  			

				
				String[] row_tLogRow_24 = new String[2];
   				
	    		if(row86.errorCode != null) { //              
                 row_tLogRow_24[0]=    						    
				                String.valueOf(row86.errorCode)			
					          ;	
							
	    		} //			
    			   				
	    		if(row86.errorMessage != null) { //              
                 row_tLogRow_24[1]=    						    
				                String.valueOf(row86.errorMessage)			
					          ;	
							
	    		} //			
    			
				nb_line_tLogRow_24++;
                consoleOut_tLogRow_24.println(util_tLogRow_24.print(row_tLogRow_24,nb_line_tLogRow_24));
                consoleOut_tLogRow_24.flush();
//////

//////                    
                    
///////////////////////    			

 


	tos_count_tLogRow_24++;

/**
 * [tLogRow_24 main ] stop
 */
	
	/**
	 * [tLogRow_24 process_data_begin ] start
	 */

	

	
	
	currentComponent="tLogRow_24";

	

 



/**
 * [tLogRow_24 process_data_begin ] stop
 */
	
	/**
	 * [tLogRow_24 process_data_end ] start
	 */

	

	
	
	currentComponent="tLogRow_24";

	

 



/**
 * [tLogRow_24 process_data_end ] stop
 */

} // End of branch "row86"




	
	/**
	 * [tMSSqlRow_22 process_data_end ] start
	 */

	

	
	
	currentComponent="tMSSqlRow_22";

	

 



/**
 * [tMSSqlRow_22 process_data_end ] stop
 */

} // End of branch "row30"




// Start of branch "row85"
if(row85 != null) { 



	
	/**
	 * [tLogRow_23 main ] start
	 */

	

	
	
	currentComponent="tLogRow_23";

	
					if(execStat){
						runStat.updateStatOnConnection(iterateId,1,1
						
							,"row85"
						
						);
					}
					
///////////////////////		
						



				strBuffer_tLogRow_23 = new StringBuilder();




   				
	    		if(row85.errorCode != null) { //              
                    							
       
				strBuffer_tLogRow_23.append(
				                String.valueOf(row85.errorCode)							
				);


							
	    		} //  			

    			strBuffer_tLogRow_23.append("|");
    			


   				
	    		if(row85.errorMessage != null) { //              
                    							
       
				strBuffer_tLogRow_23.append(
				                String.valueOf(row85.errorMessage)							
				);


							
	    		} //  			

				
				String[] row_tLogRow_23 = new String[2];
   				
	    		if(row85.errorCode != null) { //              
                 row_tLogRow_23[0]=    						    
				                String.valueOf(row85.errorCode)			
					          ;	
							
	    		} //			
    			   				
	    		if(row85.errorMessage != null) { //              
                 row_tLogRow_23[1]=    						    
				                String.valueOf(row85.errorMessage)			
					          ;	
							
	    		} //			
    			
				nb_line_tLogRow_23++;
                consoleOut_tLogRow_23.println(util_tLogRow_23.print(row_tLogRow_23,nb_line_tLogRow_23));
                consoleOut_tLogRow_23.flush();
//////

//////                    
                    
///////////////////////    			

 


	tos_count_tLogRow_23++;

/**
 * [tLogRow_23 main ] stop
 */
	
	/**
	 * [tLogRow_23 process_data_begin ] start
	 */

	

	
	
	currentComponent="tLogRow_23";

	

 



/**
 * [tLogRow_23 process_data_begin ] stop
 */
	
	/**
	 * [tLogRow_23 process_data_end ] start
	 */

	

	
	
	currentComponent="tLogRow_23";

	

 



/**
 * [tLogRow_23 process_data_end ] stop
 */

} // End of branch "row85"




	
	/**
	 * [tMSSqlRow_21 process_data_end ] start
	 */

	

	
	
	currentComponent="tMSSqlRow_21";

	

 



/**
 * [tMSSqlRow_21 process_data_end ] stop
 */
	
	/**
	 * [tMSSqlRow_21 end ] start
	 */

	

	
	
	currentComponent="tMSSqlRow_21";

	

	
        stmt_tMSSqlRow_21.close();
        resourceMap.remove("stmt_tMSSqlRow_21");
    resourceMap.put("statementClosed_tMSSqlRow_21", true);
    resourceMap.put("finish_tMSSqlRow_21", true);
 

ok_Hash.put("tMSSqlRow_21", true);
end_Hash.put("tMSSqlRow_21", System.currentTimeMillis());




/**
 * [tMSSqlRow_21 end ] stop
 */

	
	/**
	 * [tMSSqlRow_22 end ] start
	 */

	

	
	
	currentComponent="tMSSqlRow_22";

	

	
        stmt_tMSSqlRow_22.close();
        resourceMap.remove("stmt_tMSSqlRow_22");
    resourceMap.put("statementClosed_tMSSqlRow_22", true);
    resourceMap.put("finish_tMSSqlRow_22", true);
				if(execStat){
			  		runStat.updateStat(resourceMap,iterateId,2,0,"row30");
			  	}
			  	
 

ok_Hash.put("tMSSqlRow_22", true);
end_Hash.put("tMSSqlRow_22", System.currentTimeMillis());




/**
 * [tMSSqlRow_22 end ] stop
 */

	
	/**
	 * [tLogRow_24 end ] start
	 */

	

	
	
	currentComponent="tLogRow_24";

	


//////
//////
globalMap.put("tLogRow_24_NB_LINE",nb_line_tLogRow_24);

///////////////////////    			

				if(execStat){
			  		runStat.updateStat(resourceMap,iterateId,2,0,"row86");
			  	}
			  	
 

ok_Hash.put("tLogRow_24", true);
end_Hash.put("tLogRow_24", System.currentTimeMillis());




/**
 * [tLogRow_24 end ] stop
 */







	
	/**
	 * [tLogRow_23 end ] start
	 */

	

	
	
	currentComponent="tLogRow_23";

	


//////
//////
globalMap.put("tLogRow_23_NB_LINE",nb_line_tLogRow_23);

///////////////////////    			

				if(execStat){
			  		runStat.updateStat(resourceMap,iterateId,2,0,"row85");
			  	}
			  	
 

ok_Hash.put("tLogRow_23", true);
end_Hash.put("tLogRow_23", System.currentTimeMillis());




/**
 * [tLogRow_23 end ] stop
 */



				}//end the resume

				
				    			if(resumeEntryMethodName == null || globalResumeTicket){
				    				resumeUtil.addLog("CHECKPOINT", "CONNECTION:SUBJOB_OK:tMSSqlRow_21:OnSubjobOk", "", Thread.currentThread().getId() + "", "", "", "", "", "");
								}	    				    			
					    	
								if(execStat){    	
									runStat.updateStatOnConnection("OnSubjobOk28", 0, "ok");
								} 
							
							tMSSqlRow_23Process(globalMap); 
						



	
			}catch(java.lang.Exception e){	
				
				TalendException te = new TalendException(e, currentComponent, globalMap);
				
				throw te;
			}catch(java.lang.Error error){	
				
					runStat.stopThreadStat();
				
				throw error;
			}finally{
				
				try{
					
	
	/**
	 * [tMSSqlRow_21 finally ] start
	 */

	

	
	
	currentComponent="tMSSqlRow_21";

	

    if (resourceMap.get("statementClosed_tMSSqlRow_21") == null) {
            java.sql.Statement stmtToClose_tMSSqlRow_21 = null;
            if ((stmtToClose_tMSSqlRow_21 = (java.sql.Statement) resourceMap.remove("stmt_tMSSqlRow_21")) != null) {
                stmtToClose_tMSSqlRow_21.close();
            }
    }
 



/**
 * [tMSSqlRow_21 finally ] stop
 */

	
	/**
	 * [tMSSqlRow_22 finally ] start
	 */

	

	
	
	currentComponent="tMSSqlRow_22";

	

    if (resourceMap.get("statementClosed_tMSSqlRow_22") == null) {
            java.sql.Statement stmtToClose_tMSSqlRow_22 = null;
            if ((stmtToClose_tMSSqlRow_22 = (java.sql.Statement) resourceMap.remove("stmt_tMSSqlRow_22")) != null) {
                stmtToClose_tMSSqlRow_22.close();
            }
    }
 



/**
 * [tMSSqlRow_22 finally ] stop
 */

	
	/**
	 * [tLogRow_24 finally ] start
	 */

	

	
	
	currentComponent="tLogRow_24";

	

 



/**
 * [tLogRow_24 finally ] stop
 */







	
	/**
	 * [tLogRow_23 finally ] start
	 */

	

	
	
	currentComponent="tLogRow_23";

	

 



/**
 * [tLogRow_23 finally ] stop
 */



				}catch(java.lang.Exception e){	
					//ignore
				}catch(java.lang.Error error){
					//ignore
				}
				resourceMap = null;
			}
		

		globalMap.put("tMSSqlRow_21_SUBPROCESS_STATE", 1);
	}
	


public static class row74Struct implements routines.system.IPersistableRow<row74Struct> {
    final static byte[] commonByteArrayLock_WIPO_PROJECTS_F_IPAS_ENV_CRE = new byte[0];
    static byte[] commonByteArray_WIPO_PROJECTS_F_IPAS_ENV_CRE = new byte[0];

	
			    public String errorCode;

				public String getErrorCode () {
					return this.errorCode;
				}
				
			    public String errorMessage;

				public String getErrorMessage () {
					return this.errorMessage;
				}
				



	private String readString(ObjectInputStream dis) throws IOException{
		String strReturn = null;
		int length = 0;
        length = dis.readInt();
		if (length == -1) {
			strReturn = null;
		} else {
			if(length > commonByteArray_WIPO_PROJECTS_F_IPAS_ENV_CRE.length) {
				if(length < 1024 && commonByteArray_WIPO_PROJECTS_F_IPAS_ENV_CRE.length == 0) {
   					commonByteArray_WIPO_PROJECTS_F_IPAS_ENV_CRE = new byte[1024];
				} else {
   					commonByteArray_WIPO_PROJECTS_F_IPAS_ENV_CRE = new byte[2 * length];
   				}
			}
			dis.readFully(commonByteArray_WIPO_PROJECTS_F_IPAS_ENV_CRE, 0, length);
			strReturn = new String(commonByteArray_WIPO_PROJECTS_F_IPAS_ENV_CRE, 0, length, utf8Charset);
		}
		return strReturn;
	}

    private void writeString(String str, ObjectOutputStream dos) throws IOException{
		if(str == null) {
            dos.writeInt(-1);
		} else {
            byte[] byteArray = str.getBytes(utf8Charset);
	    	dos.writeInt(byteArray.length);
			dos.write(byteArray);
    	}
    }

    public void readData(ObjectInputStream dis) {

		synchronized(commonByteArrayLock_WIPO_PROJECTS_F_IPAS_ENV_CRE) {

        	try {

        		int length = 0;
		
					this.errorCode = readString(dis);
					
					this.errorMessage = readString(dis);
					
        	} catch (IOException e) {
	            throw new RuntimeException(e);

		

        }

		

      }


    }

    public void writeData(ObjectOutputStream dos) {
        try {

		
					// String
				
						writeString(this.errorCode,dos);
					
					// String
				
						writeString(this.errorMessage,dos);
					
        	} catch (IOException e) {
	            throw new RuntimeException(e);
        }


    }


    public String toString() {

		StringBuilder sb = new StringBuilder();
		sb.append(super.toString());
		sb.append("[");
		sb.append("errorCode="+errorCode);
		sb.append(",errorMessage="+errorMessage);
	    sb.append("]");

	    return sb.toString();
    }

    /**
     * Compare keys
     */
    public int compareTo(row74Struct other) {

		int returnValue = -1;
		
	    return returnValue;
    }


    private int checkNullsAndCompare(Object object1, Object object2) {
        int returnValue = 0;
		if (object1 instanceof Comparable && object2 instanceof Comparable) {
            returnValue = ((Comparable) object1).compareTo(object2);
        } else if (object1 != null && object2 != null) {
            returnValue = compareStrings(object1.toString(), object2.toString());
        } else if (object1 == null && object2 != null) {
            returnValue = 1;
        } else if (object1 != null && object2 == null) {
            returnValue = -1;
        } else {
            returnValue = 0;
        }

        return returnValue;
    }

    private int compareStrings(String string1, String string2) {
        return string1.compareTo(string2);
    }


}

public static class row14Struct implements routines.system.IPersistableRow<row14Struct> {
    final static byte[] commonByteArrayLock_WIPO_PROJECTS_F_IPAS_ENV_CRE = new byte[0];
    static byte[] commonByteArray_WIPO_PROJECTS_F_IPAS_ENV_CRE = new byte[0];

	



    public void readData(ObjectInputStream dis) {

		synchronized(commonByteArrayLock_WIPO_PROJECTS_F_IPAS_ENV_CRE) {

        	try {

        		int length = 0;
		

		

        }

		
			finally {}
		

      }


    }

    public void writeData(ObjectOutputStream dos) {
        try {

		
        }

			finally {}
		

    }


    public String toString() {

		StringBuilder sb = new StringBuilder();
		sb.append(super.toString());
		sb.append("[");
	    sb.append("]");

	    return sb.toString();
    }

    /**
     * Compare keys
     */
    public int compareTo(row14Struct other) {

		int returnValue = -1;
		
	    return returnValue;
    }


    private int checkNullsAndCompare(Object object1, Object object2) {
        int returnValue = 0;
		if (object1 instanceof Comparable && object2 instanceof Comparable) {
            returnValue = ((Comparable) object1).compareTo(object2);
        } else if (object1 != null && object2 != null) {
            returnValue = compareStrings(object1.toString(), object2.toString());
        } else if (object1 == null && object2 != null) {
            returnValue = 1;
        } else if (object1 != null && object2 == null) {
            returnValue = -1;
        } else {
            returnValue = 0;
        }

        return returnValue;
    }

    private int compareStrings(String string1, String string2) {
        return string1.compareTo(string2);
    }


}

public static class row73Struct implements routines.system.IPersistableRow<row73Struct> {
    final static byte[] commonByteArrayLock_WIPO_PROJECTS_F_IPAS_ENV_CRE = new byte[0];
    static byte[] commonByteArray_WIPO_PROJECTS_F_IPAS_ENV_CRE = new byte[0];

	
			    public String errorCode;

				public String getErrorCode () {
					return this.errorCode;
				}
				
			    public String errorMessage;

				public String getErrorMessage () {
					return this.errorMessage;
				}
				



	private String readString(ObjectInputStream dis) throws IOException{
		String strReturn = null;
		int length = 0;
        length = dis.readInt();
		if (length == -1) {
			strReturn = null;
		} else {
			if(length > commonByteArray_WIPO_PROJECTS_F_IPAS_ENV_CRE.length) {
				if(length < 1024 && commonByteArray_WIPO_PROJECTS_F_IPAS_ENV_CRE.length == 0) {
   					commonByteArray_WIPO_PROJECTS_F_IPAS_ENV_CRE = new byte[1024];
				} else {
   					commonByteArray_WIPO_PROJECTS_F_IPAS_ENV_CRE = new byte[2 * length];
   				}
			}
			dis.readFully(commonByteArray_WIPO_PROJECTS_F_IPAS_ENV_CRE, 0, length);
			strReturn = new String(commonByteArray_WIPO_PROJECTS_F_IPAS_ENV_CRE, 0, length, utf8Charset);
		}
		return strReturn;
	}

    private void writeString(String str, ObjectOutputStream dos) throws IOException{
		if(str == null) {
            dos.writeInt(-1);
		} else {
            byte[] byteArray = str.getBytes(utf8Charset);
	    	dos.writeInt(byteArray.length);
			dos.write(byteArray);
    	}
    }

    public void readData(ObjectInputStream dis) {

		synchronized(commonByteArrayLock_WIPO_PROJECTS_F_IPAS_ENV_CRE) {

        	try {

        		int length = 0;
		
					this.errorCode = readString(dis);
					
					this.errorMessage = readString(dis);
					
        	} catch (IOException e) {
	            throw new RuntimeException(e);

		

        }

		

      }


    }

    public void writeData(ObjectOutputStream dos) {
        try {

		
					// String
				
						writeString(this.errorCode,dos);
					
					// String
				
						writeString(this.errorMessage,dos);
					
        	} catch (IOException e) {
	            throw new RuntimeException(e);
        }


    }


    public String toString() {

		StringBuilder sb = new StringBuilder();
		sb.append(super.toString());
		sb.append("[");
		sb.append("errorCode="+errorCode);
		sb.append(",errorMessage="+errorMessage);
	    sb.append("]");

	    return sb.toString();
    }

    /**
     * Compare keys
     */
    public int compareTo(row73Struct other) {

		int returnValue = -1;
		
	    return returnValue;
    }


    private int checkNullsAndCompare(Object object1, Object object2) {
        int returnValue = 0;
		if (object1 instanceof Comparable && object2 instanceof Comparable) {
            returnValue = ((Comparable) object1).compareTo(object2);
        } else if (object1 != null && object2 != null) {
            returnValue = compareStrings(object1.toString(), object2.toString());
        } else if (object1 == null && object2 != null) {
            returnValue = 1;
        } else if (object1 != null && object2 == null) {
            returnValue = -1;
        } else {
            returnValue = 0;
        }

        return returnValue;
    }

    private int compareStrings(String string1, String string2) {
        return string1.compareTo(string2);
    }


}
public void tMSSqlRow_23Process(final java.util.Map<String, Object> globalMap) throws TalendException {
	globalMap.put("tMSSqlRow_23_SUBPROCESS_STATE", 0);

 final boolean execStat = this.execStat;
	
		String iterateId = "";
	
	
	String currentComponent = "";
	java.util.Map<String, Object> resourceMap = new java.util.HashMap<String, Object>();

	try {
			// TDI-39566 avoid throwing an useless Exception
			boolean resumeIt = true;
			if (globalResumeTicket == false && resumeEntryMethodName != null) {
				String currentMethodName = new java.lang.Exception().getStackTrace()[0].getMethodName();
				resumeIt = resumeEntryMethodName.equals(currentMethodName);
			}
			if (resumeIt || globalResumeTicket) { //start the resume
				globalResumeTicket = true;



		row14Struct row14 = new row14Struct();
row74Struct row74 = new row74Struct();
row73Struct row73 = new row73Struct();





	
	/**
	 * [tLogRow_26 begin ] start
	 */

	

	
		
		ok_Hash.put("tLogRow_26", false);
		start_Hash.put("tLogRow_26", System.currentTimeMillis());
		
	
	currentComponent="tLogRow_26";

	
					if(execStat) {
						runStat.updateStatOnConnection(resourceMap,iterateId,0,0,"row74");
					}
				
		int tos_count_tLogRow_26 = 0;
		

	///////////////////////
		


	class Util_tLogRow_26 {
	
		String[] des_top = { ".", "-" };

        String[] des_data = { "-", "+" };

        String[] des_frame = { "|" }; 
        
        public void printLine(StringBuilder sb, int titleWidth, int dataWidth){
        
        	sb.append("+");
			for(int i=0; i<titleWidth+2; i++)
				sb.append("-");
			sb.append("+");
			for(int i=0; i<dataWidth+2; i++)
				sb.append("-");
        	sb.append("+" + "\n");
        }      

		public String print(String[] row, int nbLine){
			
			StringBuilder sb = new StringBuilder();
			
			    String title = "#" + nbLine + ". " + "tLogRow_26";
			    
		
			//step 1: get the max length of all the row[] member;
			int dataWidth = 5;		//the length of the string "value"	
			for(int i=0;i<row.length;i++) {
				if(row[i] == null && 4 > dataWidth) {
					dataWidth = 4;
				}
				else if(row[i] != null && row[i].length()>dataWidth) 
					dataWidth = row[i].length();
			}			
						
			int titleWidth = 12;
			
			int totalWidth = dataWidth + titleWidth + 5;
			
			//step 2: print the header with line number
			sb.append(".");
			for(int i=0 ; i<totalWidth ; i++)
				sb.append("-");			
			sb.append("." + "\n" + "|");
			
			int emptyCenterWidth = (totalWidth-title.length())/2;
			for(int i=0 ; i<emptyCenterWidth; i++)
				sb.append(" ");	
			sb.append(title);
			for(int i=0 ; i<totalWidth - emptyCenterWidth - title.length() ; i++)
				sb.append(" ");	
			sb.append("|" + "\n");
			
			//step 3: print "key" and "value"			
			printLine(sb,titleWidth,dataWidth);
			
			sb.append("|" + " key");
			for(int i=0; i<titleWidth-2; i++)
				sb.append(" ");
        	sb.append("|" + " value");
			for(int i=0; i<dataWidth-4; i++)
				sb.append(" ");
			sb.append("|" + "\n");
			
			printLine(sb,titleWidth,dataWidth);
			
			//step 4: print dataset
			
			//for(int i=0; i<row.length; i++){
				sb.append("| " + "errorCode");
				for(int i=0; i<titleWidth -"errorCode".length()+ 1 ;i++)
					sb.append(" ");
				sb.append("| " + row[0]);
				for(int i=0; row[0] == null && i<dataWidth - 3 || row[0] != null && i<dataWidth -row[0].length()+ 1 ;i++)
					sb.append(" ");
				sb.append("|" + "\n");
			
			//}

			
			//for(int i=0; i<row.length; i++){
				sb.append("| " + "errorMessage");
				for(int i=0; i<titleWidth -"errorMessage".length()+ 1 ;i++)
					sb.append(" ");
				sb.append("| " + row[1]);
				for(int i=0; row[1] == null && i<dataWidth - 3 || row[1] != null && i<dataWidth -row[1].length()+ 1 ;i++)
					sb.append(" ");
				sb.append("|" + "\n");
			
			//}

			
			//step 5: print a line gap
			printLine(sb,titleWidth,dataWidth);
			return sb.toString();

		}


	}

	Util_tLogRow_26 util_tLogRow_26 = new Util_tLogRow_26();




	java.io.PrintStream consoleOut_tLogRow_26 = null;
	if (globalMap.get("tLogRow_CONSOLE")!=null){
        consoleOut_tLogRow_26 = (java.io.PrintStream) globalMap.get("tLogRow_CONSOLE");
    }else{
        consoleOut_tLogRow_26 = new java.io.PrintStream(new java.io.BufferedOutputStream(System.out));
        globalMap.put("tLogRow_CONSOLE",consoleOut_tLogRow_26);
    }

 		StringBuilder strBuffer_tLogRow_26 = null;
		int nb_line_tLogRow_26 = 0;
///////////////////////    			



 



/**
 * [tLogRow_26 begin ] stop
 */



	
	/**
	 * [tMSSqlRow_24 begin ] start
	 */

	

	
		
		ok_Hash.put("tMSSqlRow_24", false);
		start_Hash.put("tMSSqlRow_24", System.currentTimeMillis());
		
	
	currentComponent="tMSSqlRow_24";

	
					if(execStat) {
						runStat.updateStatOnConnection(resourceMap,iterateId,0,0,"row14");
					}
				
		int tos_count_tMSSqlRow_24 = 0;
		

	java.sql.Connection conn_tMSSqlRow_24 = null;
	String query_tMSSqlRow_24 = "";
	boolean whetherReject_tMSSqlRow_24 = false;
				conn_tMSSqlRow_24 = (java.sql.Connection)globalMap.get("conn_tMSSqlConnection_4");
			
    resourceMap.put("conn_tMSSqlRow_24", conn_tMSSqlRow_24);
        java.sql.Statement stmt_tMSSqlRow_24 = conn_tMSSqlRow_24.createStatement();
        resourceMap.put("stmt_tMSSqlRow_24", stmt_tMSSqlRow_24);

 



/**
 * [tMSSqlRow_24 begin ] stop
 */




	
	/**
	 * [tLogRow_25 begin ] start
	 */

	

	
		
		ok_Hash.put("tLogRow_25", false);
		start_Hash.put("tLogRow_25", System.currentTimeMillis());
		
	
	currentComponent="tLogRow_25";

	
					if(execStat) {
						runStat.updateStatOnConnection(resourceMap,iterateId,0,0,"row73");
					}
				
		int tos_count_tLogRow_25 = 0;
		

	///////////////////////
		


	class Util_tLogRow_25 {
	
		String[] des_top = { ".", "-" };

        String[] des_data = { "-", "+" };

        String[] des_frame = { "|" }; 
        
        public void printLine(StringBuilder sb, int titleWidth, int dataWidth){
        
        	sb.append("+");
			for(int i=0; i<titleWidth+2; i++)
				sb.append("-");
			sb.append("+");
			for(int i=0; i<dataWidth+2; i++)
				sb.append("-");
        	sb.append("+" + "\n");
        }      

		public String print(String[] row, int nbLine){
			
			StringBuilder sb = new StringBuilder();
			
			    String title = "#" + nbLine + ". " + "tLogRow_25";
			    
		
			//step 1: get the max length of all the row[] member;
			int dataWidth = 5;		//the length of the string "value"	
			for(int i=0;i<row.length;i++) {
				if(row[i] == null && 4 > dataWidth) {
					dataWidth = 4;
				}
				else if(row[i] != null && row[i].length()>dataWidth) 
					dataWidth = row[i].length();
			}			
						
			int titleWidth = 12;
			
			int totalWidth = dataWidth + titleWidth + 5;
			
			//step 2: print the header with line number
			sb.append(".");
			for(int i=0 ; i<totalWidth ; i++)
				sb.append("-");			
			sb.append("." + "\n" + "|");
			
			int emptyCenterWidth = (totalWidth-title.length())/2;
			for(int i=0 ; i<emptyCenterWidth; i++)
				sb.append(" ");	
			sb.append(title);
			for(int i=0 ; i<totalWidth - emptyCenterWidth - title.length() ; i++)
				sb.append(" ");	
			sb.append("|" + "\n");
			
			//step 3: print "key" and "value"			
			printLine(sb,titleWidth,dataWidth);
			
			sb.append("|" + " key");
			for(int i=0; i<titleWidth-2; i++)
				sb.append(" ");
        	sb.append("|" + " value");
			for(int i=0; i<dataWidth-4; i++)
				sb.append(" ");
			sb.append("|" + "\n");
			
			printLine(sb,titleWidth,dataWidth);
			
			//step 4: print dataset
			
			//for(int i=0; i<row.length; i++){
				sb.append("| " + "errorCode");
				for(int i=0; i<titleWidth -"errorCode".length()+ 1 ;i++)
					sb.append(" ");
				sb.append("| " + row[0]);
				for(int i=0; row[0] == null && i<dataWidth - 3 || row[0] != null && i<dataWidth -row[0].length()+ 1 ;i++)
					sb.append(" ");
				sb.append("|" + "\n");
			
			//}

			
			//for(int i=0; i<row.length; i++){
				sb.append("| " + "errorMessage");
				for(int i=0; i<titleWidth -"errorMessage".length()+ 1 ;i++)
					sb.append(" ");
				sb.append("| " + row[1]);
				for(int i=0; row[1] == null && i<dataWidth - 3 || row[1] != null && i<dataWidth -row[1].length()+ 1 ;i++)
					sb.append(" ");
				sb.append("|" + "\n");
			
			//}

			
			//step 5: print a line gap
			printLine(sb,titleWidth,dataWidth);
			return sb.toString();

		}


	}

	Util_tLogRow_25 util_tLogRow_25 = new Util_tLogRow_25();




	java.io.PrintStream consoleOut_tLogRow_25 = null;
	if (globalMap.get("tLogRow_CONSOLE")!=null){
        consoleOut_tLogRow_25 = (java.io.PrintStream) globalMap.get("tLogRow_CONSOLE");
    }else{
        consoleOut_tLogRow_25 = new java.io.PrintStream(new java.io.BufferedOutputStream(System.out));
        globalMap.put("tLogRow_CONSOLE",consoleOut_tLogRow_25);
    }

 		StringBuilder strBuffer_tLogRow_25 = null;
		int nb_line_tLogRow_25 = 0;
///////////////////////    			



 



/**
 * [tLogRow_25 begin ] stop
 */



	
	/**
	 * [tMSSqlRow_23 begin ] start
	 */

	

	
		
		ok_Hash.put("tMSSqlRow_23", false);
		start_Hash.put("tMSSqlRow_23", System.currentTimeMillis());
		
	
	currentComponent="tMSSqlRow_23";

	
		int tos_count_tMSSqlRow_23 = 0;
		

	java.sql.Connection conn_tMSSqlRow_23 = null;
	String query_tMSSqlRow_23 = "";
	boolean whetherReject_tMSSqlRow_23 = false;
				conn_tMSSqlRow_23 = (java.sql.Connection)globalMap.get("conn_tMSSqlConnection_4");
			
    resourceMap.put("conn_tMSSqlRow_23", conn_tMSSqlRow_23);
        java.sql.Statement stmt_tMSSqlRow_23 = conn_tMSSqlRow_23.createStatement();
        resourceMap.put("stmt_tMSSqlRow_23", stmt_tMSSqlRow_23);

 



/**
 * [tMSSqlRow_23 begin ] stop
 */
	
	/**
	 * [tMSSqlRow_23 main ] start
	 */

	

	
	
	currentComponent="tMSSqlRow_23";

	

		row14 = null;
		
		row73 = null;
		
query_tMSSqlRow_23 = "If Exists ( SELECT name \n            FROM sysobjects  \n            WHERE name = 'ImportAgentProcessAll'\n            "
+"AND type = 'P')\n	DROP PROCEDURE ImportAgentProcessAll";
whetherReject_tMSSqlRow_23 = false;
globalMap.put("tMSSqlRow_23_QUERY",query_tMSSqlRow_23);
try {
		stmt_tMSSqlRow_23.execute(query_tMSSqlRow_23);
		
	} catch (java.lang.Exception e) {
		whetherReject_tMSSqlRow_23 = true;
		
				row73 = new row73Struct();
				
				row73.errorCode = ((java.sql.SQLException)e).getSQLState();
				row73.errorMessage = e.getMessage() + " - Line: " + tos_count_tMSSqlRow_23;
				
	}
	
	if(!whetherReject_tMSSqlRow_23) {
		
					row14 = new row14Struct();
					
	}
	

 


	tos_count_tMSSqlRow_23++;

/**
 * [tMSSqlRow_23 main ] stop
 */
	
	/**
	 * [tMSSqlRow_23 process_data_begin ] start
	 */

	

	
	
	currentComponent="tMSSqlRow_23";

	

 



/**
 * [tMSSqlRow_23 process_data_begin ] stop
 */
// Start of branch "row14"
if(row14 != null) { 
			row74 = null;



	
	/**
	 * [tMSSqlRow_24 main ] start
	 */

	

	
	
	currentComponent="tMSSqlRow_24";

	
					if(execStat){
						runStat.updateStatOnConnection(iterateId,1,1
						
							,"row14"
						
						);
					}
					

		row74 = null;
		
query_tMSSqlRow_24 = "CREATE PROCEDURE ImportAgentProcessAll\nAS \n	BEGIN\n		SET NOCOUNT ON\n		\n		/* Procedure name: ImportAgentProcessAll\n"
+"		Input:  import tables with IND_IMPORT = 9\n		Output: IPAS database updated and import tables updated with IND_IMPORT ="
+" 1\n		*/\n\n		/* insert agents */\n		INSERT INTO  IP_AGENT   \n				( ROW_VERSION , \n				AGENT_CODE , \n				AGENT_NAME ,"
+" \n				NOTIFICATION_WCODE ,\n				IND_INACTIVE)  \n		SELECT\n				 1,\n				 AGENT_CODE,\n				 substring(AGENT_NAME,1,60),"
+"\n				 'C',\n				case when IND_INACTIVE=0 then 'N' else 'S' end\n\n		FROM   ["+ context.intermediateDB + "].[dbo].VW_import_agent \n		WHERE	IND_IMPORT = 9\n		\n		/* Load WRK_PERSON_ADDR from  ["+ context.intermediateDB + "].[dbo].VW_IMPORT_AGENT_PERSONS */\n		DELETE FROM   wrk_person_addr    \n		\n		INSERT INTO  wrk_person_addr   \n				( P"
+"ERSON_GROUP_CODE , \n				AGENT_CODE , \n				PERSON_NAME , \n				PERSON_NAME_LANG2 ,\n				NATIONALITY_COUNTRY_CODE , \n		"
+"		IND_COMPANY , \n				LEGAL_NATURE , \n				LEGAL_NATURE_LANG2 , \n				LEGAL_ID_TYPE , \n				LEGAL_ID_NBR , \n				INDIVID"
+"UAL_ID_TYPE , \n				INDIVIDUAL_ID_NBR , \n				EMAIL , \n				TELEPHONE , \n				RESIDENCE_COUNTRY_CODE , \n				STATE_NAME "
+", \n				STATE_CODE , \n				CITY_NAME , \n				ADDRESS_ZONE , \n				ADDRESS_STREET , \n				ADDRESS_STREET_LANG2 ,\n				ZIP"
+"_CODE , \n				PERSON_NBR , \n				ADDR_NBR , \n				REF_NBR )  \n		SELECT\n				 PERSON_GROUP_CODE,\n				 T.AGENT_CODE,\n		"
+"		 PERSON_NAME,\n				 PERSON_NAME_LANG2,\n				 NATIONALITY_COUNTRY_CODE,\n				 IND_COMPANY,\n				 LEGAL_NATURE,\n				 LE"
+"GAL_NATURE_LANG2,\n				 LEGAL_ID_TYPE,\n				 LEGAL_ID_NBR,\n				 INDIVIDUAL_ID_TYPE,\n				 INDIVIDUAL_ID_NBR,\n				 EMAI"
+"L,\n				 TELEPHONE,\n				 RESIDENCE_COUNTRY_CODE,\n				 STATE_NAME,\n				 STATE_CODE,\n				 CITY_NAME,\n				 ADDRESS_ZON"
+"E,\n				 ADDRESS_STREET,\n				 ADDRESS_STREET_LANG2,\n				 ZIP_CODE,\n				 null,\n				 null,\n				 1\n		FROM   ["+ context.intermediateDB + "].[dbo].VW_import_agent_persons T\n		 JOIN  ["+ context.intermediateDB + "].[dbo].VW_import_agent A on A.AGENT_CODE = T.AGENT_CODE\n		\n		/* Call procedure ImportSetPersonNbr() to set PERSON_NB"
+"R and ADDR_NBR.\n		This procedure will already insert persons linked to the agent, so there's no need to\n		further proc"
+"ess ther generated person numbers */\n		EXEC IMPORTSETPERSONNBR\n\n		\n\n		SET NOCOUNT OFF\n\n	END";
whetherReject_tMSSqlRow_24 = false;
globalMap.put("tMSSqlRow_24_QUERY",query_tMSSqlRow_24);
try {
		stmt_tMSSqlRow_24.execute(query_tMSSqlRow_24);
		
	} catch (java.lang.Exception e) {
		whetherReject_tMSSqlRow_24 = true;
		
				row74 = new row74Struct();
				
				row74.errorCode = ((java.sql.SQLException)e).getSQLState();
				row74.errorMessage = e.getMessage() + " - Line: " + tos_count_tMSSqlRow_24;
				
	}
	
	if(!whetherReject_tMSSqlRow_24) {
		
	}
	

 


	tos_count_tMSSqlRow_24++;

/**
 * [tMSSqlRow_24 main ] stop
 */
	
	/**
	 * [tMSSqlRow_24 process_data_begin ] start
	 */

	

	
	
	currentComponent="tMSSqlRow_24";

	

 



/**
 * [tMSSqlRow_24 process_data_begin ] stop
 */
// Start of branch "row74"
if(row74 != null) { 



	
	/**
	 * [tLogRow_26 main ] start
	 */

	

	
	
	currentComponent="tLogRow_26";

	
					if(execStat){
						runStat.updateStatOnConnection(iterateId,1,1
						
							,"row74"
						
						);
					}
					
///////////////////////		
						



				strBuffer_tLogRow_26 = new StringBuilder();




   				
	    		if(row74.errorCode != null) { //              
                    							
       
				strBuffer_tLogRow_26.append(
				                String.valueOf(row74.errorCode)							
				);


							
	    		} //  			

    			strBuffer_tLogRow_26.append("|");
    			


   				
	    		if(row74.errorMessage != null) { //              
                    							
       
				strBuffer_tLogRow_26.append(
				                String.valueOf(row74.errorMessage)							
				);


							
	    		} //  			

				
				String[] row_tLogRow_26 = new String[2];
   				
	    		if(row74.errorCode != null) { //              
                 row_tLogRow_26[0]=    						    
				                String.valueOf(row74.errorCode)			
					          ;	
							
	    		} //			
    			   				
	    		if(row74.errorMessage != null) { //              
                 row_tLogRow_26[1]=    						    
				                String.valueOf(row74.errorMessage)			
					          ;	
							
	    		} //			
    			
				nb_line_tLogRow_26++;
                consoleOut_tLogRow_26.println(util_tLogRow_26.print(row_tLogRow_26,nb_line_tLogRow_26));
                consoleOut_tLogRow_26.flush();
//////

//////                    
                    
///////////////////////    			

 


	tos_count_tLogRow_26++;

/**
 * [tLogRow_26 main ] stop
 */
	
	/**
	 * [tLogRow_26 process_data_begin ] start
	 */

	

	
	
	currentComponent="tLogRow_26";

	

 



/**
 * [tLogRow_26 process_data_begin ] stop
 */
	
	/**
	 * [tLogRow_26 process_data_end ] start
	 */

	

	
	
	currentComponent="tLogRow_26";

	

 



/**
 * [tLogRow_26 process_data_end ] stop
 */

} // End of branch "row74"




	
	/**
	 * [tMSSqlRow_24 process_data_end ] start
	 */

	

	
	
	currentComponent="tMSSqlRow_24";

	

 



/**
 * [tMSSqlRow_24 process_data_end ] stop
 */

} // End of branch "row14"




// Start of branch "row73"
if(row73 != null) { 



	
	/**
	 * [tLogRow_25 main ] start
	 */

	

	
	
	currentComponent="tLogRow_25";

	
					if(execStat){
						runStat.updateStatOnConnection(iterateId,1,1
						
							,"row73"
						
						);
					}
					
///////////////////////		
						



				strBuffer_tLogRow_25 = new StringBuilder();




   				
	    		if(row73.errorCode != null) { //              
                    							
       
				strBuffer_tLogRow_25.append(
				                String.valueOf(row73.errorCode)							
				);


							
	    		} //  			

    			strBuffer_tLogRow_25.append("|");
    			


   				
	    		if(row73.errorMessage != null) { //              
                    							
       
				strBuffer_tLogRow_25.append(
				                String.valueOf(row73.errorMessage)							
				);


							
	    		} //  			

				
				String[] row_tLogRow_25 = new String[2];
   				
	    		if(row73.errorCode != null) { //              
                 row_tLogRow_25[0]=    						    
				                String.valueOf(row73.errorCode)			
					          ;	
							
	    		} //			
    			   				
	    		if(row73.errorMessage != null) { //              
                 row_tLogRow_25[1]=    						    
				                String.valueOf(row73.errorMessage)			
					          ;	
							
	    		} //			
    			
				nb_line_tLogRow_25++;
                consoleOut_tLogRow_25.println(util_tLogRow_25.print(row_tLogRow_25,nb_line_tLogRow_25));
                consoleOut_tLogRow_25.flush();
//////

//////                    
                    
///////////////////////    			

 


	tos_count_tLogRow_25++;

/**
 * [tLogRow_25 main ] stop
 */
	
	/**
	 * [tLogRow_25 process_data_begin ] start
	 */

	

	
	
	currentComponent="tLogRow_25";

	

 



/**
 * [tLogRow_25 process_data_begin ] stop
 */
	
	/**
	 * [tLogRow_25 process_data_end ] start
	 */

	

	
	
	currentComponent="tLogRow_25";

	

 



/**
 * [tLogRow_25 process_data_end ] stop
 */

} // End of branch "row73"




	
	/**
	 * [tMSSqlRow_23 process_data_end ] start
	 */

	

	
	
	currentComponent="tMSSqlRow_23";

	

 



/**
 * [tMSSqlRow_23 process_data_end ] stop
 */
	
	/**
	 * [tMSSqlRow_23 end ] start
	 */

	

	
	
	currentComponent="tMSSqlRow_23";

	

	
        stmt_tMSSqlRow_23.close();
        resourceMap.remove("stmt_tMSSqlRow_23");
    resourceMap.put("statementClosed_tMSSqlRow_23", true);
    resourceMap.put("finish_tMSSqlRow_23", true);
 

ok_Hash.put("tMSSqlRow_23", true);
end_Hash.put("tMSSqlRow_23", System.currentTimeMillis());




/**
 * [tMSSqlRow_23 end ] stop
 */

	
	/**
	 * [tMSSqlRow_24 end ] start
	 */

	

	
	
	currentComponent="tMSSqlRow_24";

	

	
        stmt_tMSSqlRow_24.close();
        resourceMap.remove("stmt_tMSSqlRow_24");
    resourceMap.put("statementClosed_tMSSqlRow_24", true);
    resourceMap.put("finish_tMSSqlRow_24", true);
				if(execStat){
			  		runStat.updateStat(resourceMap,iterateId,2,0,"row14");
			  	}
			  	
 

ok_Hash.put("tMSSqlRow_24", true);
end_Hash.put("tMSSqlRow_24", System.currentTimeMillis());




/**
 * [tMSSqlRow_24 end ] stop
 */

	
	/**
	 * [tLogRow_26 end ] start
	 */

	

	
	
	currentComponent="tLogRow_26";

	


//////
//////
globalMap.put("tLogRow_26_NB_LINE",nb_line_tLogRow_26);

///////////////////////    			

				if(execStat){
			  		runStat.updateStat(resourceMap,iterateId,2,0,"row74");
			  	}
			  	
 

ok_Hash.put("tLogRow_26", true);
end_Hash.put("tLogRow_26", System.currentTimeMillis());




/**
 * [tLogRow_26 end ] stop
 */







	
	/**
	 * [tLogRow_25 end ] start
	 */

	

	
	
	currentComponent="tLogRow_25";

	


//////
//////
globalMap.put("tLogRow_25_NB_LINE",nb_line_tLogRow_25);

///////////////////////    			

				if(execStat){
			  		runStat.updateStat(resourceMap,iterateId,2,0,"row73");
			  	}
			  	
 

ok_Hash.put("tLogRow_25", true);
end_Hash.put("tLogRow_25", System.currentTimeMillis());




/**
 * [tLogRow_25 end ] stop
 */



				}//end the resume

				
				    			if(resumeEntryMethodName == null || globalResumeTicket){
				    				resumeUtil.addLog("CHECKPOINT", "CONNECTION:SUBJOB_OK:tMSSqlRow_23:OnSubjobOk", "", Thread.currentThread().getId() + "", "", "", "", "", "");
								}	    				    			
					    	
								if(execStat){    	
									runStat.updateStatOnConnection("OnSubjobOk14", 0, "ok");
								} 
							
							tMSSqlRow_25Process(globalMap); 
						



	
			}catch(java.lang.Exception e){	
				
				TalendException te = new TalendException(e, currentComponent, globalMap);
				
				throw te;
			}catch(java.lang.Error error){	
				
					runStat.stopThreadStat();
				
				throw error;
			}finally{
				
				try{
					
	
	/**
	 * [tMSSqlRow_23 finally ] start
	 */

	

	
	
	currentComponent="tMSSqlRow_23";

	

    if (resourceMap.get("statementClosed_tMSSqlRow_23") == null) {
            java.sql.Statement stmtToClose_tMSSqlRow_23 = null;
            if ((stmtToClose_tMSSqlRow_23 = (java.sql.Statement) resourceMap.remove("stmt_tMSSqlRow_23")) != null) {
                stmtToClose_tMSSqlRow_23.close();
            }
    }
 



/**
 * [tMSSqlRow_23 finally ] stop
 */

	
	/**
	 * [tMSSqlRow_24 finally ] start
	 */

	

	
	
	currentComponent="tMSSqlRow_24";

	

    if (resourceMap.get("statementClosed_tMSSqlRow_24") == null) {
            java.sql.Statement stmtToClose_tMSSqlRow_24 = null;
            if ((stmtToClose_tMSSqlRow_24 = (java.sql.Statement) resourceMap.remove("stmt_tMSSqlRow_24")) != null) {
                stmtToClose_tMSSqlRow_24.close();
            }
    }
 



/**
 * [tMSSqlRow_24 finally ] stop
 */

	
	/**
	 * [tLogRow_26 finally ] start
	 */

	

	
	
	currentComponent="tLogRow_26";

	

 



/**
 * [tLogRow_26 finally ] stop
 */







	
	/**
	 * [tLogRow_25 finally ] start
	 */

	

	
	
	currentComponent="tLogRow_25";

	

 



/**
 * [tLogRow_25 finally ] stop
 */



				}catch(java.lang.Exception e){	
					//ignore
				}catch(java.lang.Error error){
					//ignore
				}
				resourceMap = null;
			}
		

		globalMap.put("tMSSqlRow_23_SUBPROCESS_STATE", 1);
	}
	


public static class row76Struct implements routines.system.IPersistableRow<row76Struct> {
    final static byte[] commonByteArrayLock_WIPO_PROJECTS_F_IPAS_ENV_CRE = new byte[0];
    static byte[] commonByteArray_WIPO_PROJECTS_F_IPAS_ENV_CRE = new byte[0];

	
			    public String errorCode;

				public String getErrorCode () {
					return this.errorCode;
				}
				
			    public String errorMessage;

				public String getErrorMessage () {
					return this.errorMessage;
				}
				



	private String readString(ObjectInputStream dis) throws IOException{
		String strReturn = null;
		int length = 0;
        length = dis.readInt();
		if (length == -1) {
			strReturn = null;
		} else {
			if(length > commonByteArray_WIPO_PROJECTS_F_IPAS_ENV_CRE.length) {
				if(length < 1024 && commonByteArray_WIPO_PROJECTS_F_IPAS_ENV_CRE.length == 0) {
   					commonByteArray_WIPO_PROJECTS_F_IPAS_ENV_CRE = new byte[1024];
				} else {
   					commonByteArray_WIPO_PROJECTS_F_IPAS_ENV_CRE = new byte[2 * length];
   				}
			}
			dis.readFully(commonByteArray_WIPO_PROJECTS_F_IPAS_ENV_CRE, 0, length);
			strReturn = new String(commonByteArray_WIPO_PROJECTS_F_IPAS_ENV_CRE, 0, length, utf8Charset);
		}
		return strReturn;
	}

    private void writeString(String str, ObjectOutputStream dos) throws IOException{
		if(str == null) {
            dos.writeInt(-1);
		} else {
            byte[] byteArray = str.getBytes(utf8Charset);
	    	dos.writeInt(byteArray.length);
			dos.write(byteArray);
    	}
    }

    public void readData(ObjectInputStream dis) {

		synchronized(commonByteArrayLock_WIPO_PROJECTS_F_IPAS_ENV_CRE) {

        	try {

        		int length = 0;
		
					this.errorCode = readString(dis);
					
					this.errorMessage = readString(dis);
					
        	} catch (IOException e) {
	            throw new RuntimeException(e);

		

        }

		

      }


    }

    public void writeData(ObjectOutputStream dos) {
        try {

		
					// String
				
						writeString(this.errorCode,dos);
					
					// String
				
						writeString(this.errorMessage,dos);
					
        	} catch (IOException e) {
	            throw new RuntimeException(e);
        }


    }


    public String toString() {

		StringBuilder sb = new StringBuilder();
		sb.append(super.toString());
		sb.append("[");
		sb.append("errorCode="+errorCode);
		sb.append(",errorMessage="+errorMessage);
	    sb.append("]");

	    return sb.toString();
    }

    /**
     * Compare keys
     */
    public int compareTo(row76Struct other) {

		int returnValue = -1;
		
	    return returnValue;
    }


    private int checkNullsAndCompare(Object object1, Object object2) {
        int returnValue = 0;
		if (object1 instanceof Comparable && object2 instanceof Comparable) {
            returnValue = ((Comparable) object1).compareTo(object2);
        } else if (object1 != null && object2 != null) {
            returnValue = compareStrings(object1.toString(), object2.toString());
        } else if (object1 == null && object2 != null) {
            returnValue = 1;
        } else if (object1 != null && object2 == null) {
            returnValue = -1;
        } else {
            returnValue = 0;
        }

        return returnValue;
    }

    private int compareStrings(String string1, String string2) {
        return string1.compareTo(string2);
    }


}

public static class row16Struct implements routines.system.IPersistableRow<row16Struct> {
    final static byte[] commonByteArrayLock_WIPO_PROJECTS_F_IPAS_ENV_CRE = new byte[0];
    static byte[] commonByteArray_WIPO_PROJECTS_F_IPAS_ENV_CRE = new byte[0];

	



    public void readData(ObjectInputStream dis) {

		synchronized(commonByteArrayLock_WIPO_PROJECTS_F_IPAS_ENV_CRE) {

        	try {

        		int length = 0;
		

		

        }

		
			finally {}
		

      }


    }

    public void writeData(ObjectOutputStream dos) {
        try {

		
        }

			finally {}
		

    }


    public String toString() {

		StringBuilder sb = new StringBuilder();
		sb.append(super.toString());
		sb.append("[");
	    sb.append("]");

	    return sb.toString();
    }

    /**
     * Compare keys
     */
    public int compareTo(row16Struct other) {

		int returnValue = -1;
		
	    return returnValue;
    }


    private int checkNullsAndCompare(Object object1, Object object2) {
        int returnValue = 0;
		if (object1 instanceof Comparable && object2 instanceof Comparable) {
            returnValue = ((Comparable) object1).compareTo(object2);
        } else if (object1 != null && object2 != null) {
            returnValue = compareStrings(object1.toString(), object2.toString());
        } else if (object1 == null && object2 != null) {
            returnValue = 1;
        } else if (object1 != null && object2 == null) {
            returnValue = -1;
        } else {
            returnValue = 0;
        }

        return returnValue;
    }

    private int compareStrings(String string1, String string2) {
        return string1.compareTo(string2);
    }


}

public static class row75Struct implements routines.system.IPersistableRow<row75Struct> {
    final static byte[] commonByteArrayLock_WIPO_PROJECTS_F_IPAS_ENV_CRE = new byte[0];
    static byte[] commonByteArray_WIPO_PROJECTS_F_IPAS_ENV_CRE = new byte[0];

	
			    public String errorCode;

				public String getErrorCode () {
					return this.errorCode;
				}
				
			    public String errorMessage;

				public String getErrorMessage () {
					return this.errorMessage;
				}
				



	private String readString(ObjectInputStream dis) throws IOException{
		String strReturn = null;
		int length = 0;
        length = dis.readInt();
		if (length == -1) {
			strReturn = null;
		} else {
			if(length > commonByteArray_WIPO_PROJECTS_F_IPAS_ENV_CRE.length) {
				if(length < 1024 && commonByteArray_WIPO_PROJECTS_F_IPAS_ENV_CRE.length == 0) {
   					commonByteArray_WIPO_PROJECTS_F_IPAS_ENV_CRE = new byte[1024];
				} else {
   					commonByteArray_WIPO_PROJECTS_F_IPAS_ENV_CRE = new byte[2 * length];
   				}
			}
			dis.readFully(commonByteArray_WIPO_PROJECTS_F_IPAS_ENV_CRE, 0, length);
			strReturn = new String(commonByteArray_WIPO_PROJECTS_F_IPAS_ENV_CRE, 0, length, utf8Charset);
		}
		return strReturn;
	}

    private void writeString(String str, ObjectOutputStream dos) throws IOException{
		if(str == null) {
            dos.writeInt(-1);
		} else {
            byte[] byteArray = str.getBytes(utf8Charset);
	    	dos.writeInt(byteArray.length);
			dos.write(byteArray);
    	}
    }

    public void readData(ObjectInputStream dis) {

		synchronized(commonByteArrayLock_WIPO_PROJECTS_F_IPAS_ENV_CRE) {

        	try {

        		int length = 0;
		
					this.errorCode = readString(dis);
					
					this.errorMessage = readString(dis);
					
        	} catch (IOException e) {
	            throw new RuntimeException(e);

		

        }

		

      }


    }

    public void writeData(ObjectOutputStream dos) {
        try {

		
					// String
				
						writeString(this.errorCode,dos);
					
					// String
				
						writeString(this.errorMessage,dos);
					
        	} catch (IOException e) {
	            throw new RuntimeException(e);
        }


    }


    public String toString() {

		StringBuilder sb = new StringBuilder();
		sb.append(super.toString());
		sb.append("[");
		sb.append("errorCode="+errorCode);
		sb.append(",errorMessage="+errorMessage);
	    sb.append("]");

	    return sb.toString();
    }

    /**
     * Compare keys
     */
    public int compareTo(row75Struct other) {

		int returnValue = -1;
		
	    return returnValue;
    }


    private int checkNullsAndCompare(Object object1, Object object2) {
        int returnValue = 0;
		if (object1 instanceof Comparable && object2 instanceof Comparable) {
            returnValue = ((Comparable) object1).compareTo(object2);
        } else if (object1 != null && object2 != null) {
            returnValue = compareStrings(object1.toString(), object2.toString());
        } else if (object1 == null && object2 != null) {
            returnValue = 1;
        } else if (object1 != null && object2 == null) {
            returnValue = -1;
        } else {
            returnValue = 0;
        }

        return returnValue;
    }

    private int compareStrings(String string1, String string2) {
        return string1.compareTo(string2);
    }


}
public void tMSSqlRow_25Process(final java.util.Map<String, Object> globalMap) throws TalendException {
	globalMap.put("tMSSqlRow_25_SUBPROCESS_STATE", 0);

 final boolean execStat = this.execStat;
	
		String iterateId = "";
	
	
	String currentComponent = "";
	java.util.Map<String, Object> resourceMap = new java.util.HashMap<String, Object>();

	try {
			// TDI-39566 avoid throwing an useless Exception
			boolean resumeIt = true;
			if (globalResumeTicket == false && resumeEntryMethodName != null) {
				String currentMethodName = new java.lang.Exception().getStackTrace()[0].getMethodName();
				resumeIt = resumeEntryMethodName.equals(currentMethodName);
			}
			if (resumeIt || globalResumeTicket) { //start the resume
				globalResumeTicket = true;



		row16Struct row16 = new row16Struct();
row76Struct row76 = new row76Struct();
row75Struct row75 = new row75Struct();





	
	/**
	 * [tLogRow_28 begin ] start
	 */

	

	
		
		ok_Hash.put("tLogRow_28", false);
		start_Hash.put("tLogRow_28", System.currentTimeMillis());
		
	
	currentComponent="tLogRow_28";

	
					if(execStat) {
						runStat.updateStatOnConnection(resourceMap,iterateId,0,0,"row76");
					}
				
		int tos_count_tLogRow_28 = 0;
		

	///////////////////////
		


	class Util_tLogRow_28 {
	
		String[] des_top = { ".", "-" };

        String[] des_data = { "-", "+" };

        String[] des_frame = { "|" }; 
        
        public void printLine(StringBuilder sb, int titleWidth, int dataWidth){
        
        	sb.append("+");
			for(int i=0; i<titleWidth+2; i++)
				sb.append("-");
			sb.append("+");
			for(int i=0; i<dataWidth+2; i++)
				sb.append("-");
        	sb.append("+" + "\n");
        }      

		public String print(String[] row, int nbLine){
			
			StringBuilder sb = new StringBuilder();
			
			    String title = "#" + nbLine + ". " + "tLogRow_28";
			    
		
			//step 1: get the max length of all the row[] member;
			int dataWidth = 5;		//the length of the string "value"	
			for(int i=0;i<row.length;i++) {
				if(row[i] == null && 4 > dataWidth) {
					dataWidth = 4;
				}
				else if(row[i] != null && row[i].length()>dataWidth) 
					dataWidth = row[i].length();
			}			
						
			int titleWidth = 12;
			
			int totalWidth = dataWidth + titleWidth + 5;
			
			//step 2: print the header with line number
			sb.append(".");
			for(int i=0 ; i<totalWidth ; i++)
				sb.append("-");			
			sb.append("." + "\n" + "|");
			
			int emptyCenterWidth = (totalWidth-title.length())/2;
			for(int i=0 ; i<emptyCenterWidth; i++)
				sb.append(" ");	
			sb.append(title);
			for(int i=0 ; i<totalWidth - emptyCenterWidth - title.length() ; i++)
				sb.append(" ");	
			sb.append("|" + "\n");
			
			//step 3: print "key" and "value"			
			printLine(sb,titleWidth,dataWidth);
			
			sb.append("|" + " key");
			for(int i=0; i<titleWidth-2; i++)
				sb.append(" ");
        	sb.append("|" + " value");
			for(int i=0; i<dataWidth-4; i++)
				sb.append(" ");
			sb.append("|" + "\n");
			
			printLine(sb,titleWidth,dataWidth);
			
			//step 4: print dataset
			
			//for(int i=0; i<row.length; i++){
				sb.append("| " + "errorCode");
				for(int i=0; i<titleWidth -"errorCode".length()+ 1 ;i++)
					sb.append(" ");
				sb.append("| " + row[0]);
				for(int i=0; row[0] == null && i<dataWidth - 3 || row[0] != null && i<dataWidth -row[0].length()+ 1 ;i++)
					sb.append(" ");
				sb.append("|" + "\n");
			
			//}

			
			//for(int i=0; i<row.length; i++){
				sb.append("| " + "errorMessage");
				for(int i=0; i<titleWidth -"errorMessage".length()+ 1 ;i++)
					sb.append(" ");
				sb.append("| " + row[1]);
				for(int i=0; row[1] == null && i<dataWidth - 3 || row[1] != null && i<dataWidth -row[1].length()+ 1 ;i++)
					sb.append(" ");
				sb.append("|" + "\n");
			
			//}

			
			//step 5: print a line gap
			printLine(sb,titleWidth,dataWidth);
			return sb.toString();

		}


	}

	Util_tLogRow_28 util_tLogRow_28 = new Util_tLogRow_28();




	java.io.PrintStream consoleOut_tLogRow_28 = null;
	if (globalMap.get("tLogRow_CONSOLE")!=null){
        consoleOut_tLogRow_28 = (java.io.PrintStream) globalMap.get("tLogRow_CONSOLE");
    }else{
        consoleOut_tLogRow_28 = new java.io.PrintStream(new java.io.BufferedOutputStream(System.out));
        globalMap.put("tLogRow_CONSOLE",consoleOut_tLogRow_28);
    }

 		StringBuilder strBuffer_tLogRow_28 = null;
		int nb_line_tLogRow_28 = 0;
///////////////////////    			



 



/**
 * [tLogRow_28 begin ] stop
 */



	
	/**
	 * [tMSSqlRow_26 begin ] start
	 */

	

	
		
		ok_Hash.put("tMSSqlRow_26", false);
		start_Hash.put("tMSSqlRow_26", System.currentTimeMillis());
		
	
	currentComponent="tMSSqlRow_26";

	
					if(execStat) {
						runStat.updateStatOnConnection(resourceMap,iterateId,0,0,"row16");
					}
				
		int tos_count_tMSSqlRow_26 = 0;
		

	java.sql.Connection conn_tMSSqlRow_26 = null;
	String query_tMSSqlRow_26 = "";
	boolean whetherReject_tMSSqlRow_26 = false;
				conn_tMSSqlRow_26 = (java.sql.Connection)globalMap.get("conn_tMSSqlConnection_4");
			
    resourceMap.put("conn_tMSSqlRow_26", conn_tMSSqlRow_26);
        java.sql.Statement stmt_tMSSqlRow_26 = conn_tMSSqlRow_26.createStatement();
        resourceMap.put("stmt_tMSSqlRow_26", stmt_tMSSqlRow_26);

 



/**
 * [tMSSqlRow_26 begin ] stop
 */




	
	/**
	 * [tLogRow_27 begin ] start
	 */

	

	
		
		ok_Hash.put("tLogRow_27", false);
		start_Hash.put("tLogRow_27", System.currentTimeMillis());
		
	
	currentComponent="tLogRow_27";

	
					if(execStat) {
						runStat.updateStatOnConnection(resourceMap,iterateId,0,0,"row75");
					}
				
		int tos_count_tLogRow_27 = 0;
		

	///////////////////////
		


	class Util_tLogRow_27 {
	
		String[] des_top = { ".", "-" };

        String[] des_data = { "-", "+" };

        String[] des_frame = { "|" }; 
        
        public void printLine(StringBuilder sb, int titleWidth, int dataWidth){
        
        	sb.append("+");
			for(int i=0; i<titleWidth+2; i++)
				sb.append("-");
			sb.append("+");
			for(int i=0; i<dataWidth+2; i++)
				sb.append("-");
        	sb.append("+" + "\n");
        }      

		public String print(String[] row, int nbLine){
			
			StringBuilder sb = new StringBuilder();
			
			    String title = "#" + nbLine + ". " + "tLogRow_27";
			    
		
			//step 1: get the max length of all the row[] member;
			int dataWidth = 5;		//the length of the string "value"	
			for(int i=0;i<row.length;i++) {
				if(row[i] == null && 4 > dataWidth) {
					dataWidth = 4;
				}
				else if(row[i] != null && row[i].length()>dataWidth) 
					dataWidth = row[i].length();
			}			
						
			int titleWidth = 12;
			
			int totalWidth = dataWidth + titleWidth + 5;
			
			//step 2: print the header with line number
			sb.append(".");
			for(int i=0 ; i<totalWidth ; i++)
				sb.append("-");			
			sb.append("." + "\n" + "|");
			
			int emptyCenterWidth = (totalWidth-title.length())/2;
			for(int i=0 ; i<emptyCenterWidth; i++)
				sb.append(" ");	
			sb.append(title);
			for(int i=0 ; i<totalWidth - emptyCenterWidth - title.length() ; i++)
				sb.append(" ");	
			sb.append("|" + "\n");
			
			//step 3: print "key" and "value"			
			printLine(sb,titleWidth,dataWidth);
			
			sb.append("|" + " key");
			for(int i=0; i<titleWidth-2; i++)
				sb.append(" ");
        	sb.append("|" + " value");
			for(int i=0; i<dataWidth-4; i++)
				sb.append(" ");
			sb.append("|" + "\n");
			
			printLine(sb,titleWidth,dataWidth);
			
			//step 4: print dataset
			
			//for(int i=0; i<row.length; i++){
				sb.append("| " + "errorCode");
				for(int i=0; i<titleWidth -"errorCode".length()+ 1 ;i++)
					sb.append(" ");
				sb.append("| " + row[0]);
				for(int i=0; row[0] == null && i<dataWidth - 3 || row[0] != null && i<dataWidth -row[0].length()+ 1 ;i++)
					sb.append(" ");
				sb.append("|" + "\n");
			
			//}

			
			//for(int i=0; i<row.length; i++){
				sb.append("| " + "errorMessage");
				for(int i=0; i<titleWidth -"errorMessage".length()+ 1 ;i++)
					sb.append(" ");
				sb.append("| " + row[1]);
				for(int i=0; row[1] == null && i<dataWidth - 3 || row[1] != null && i<dataWidth -row[1].length()+ 1 ;i++)
					sb.append(" ");
				sb.append("|" + "\n");
			
			//}

			
			//step 5: print a line gap
			printLine(sb,titleWidth,dataWidth);
			return sb.toString();

		}


	}

	Util_tLogRow_27 util_tLogRow_27 = new Util_tLogRow_27();




	java.io.PrintStream consoleOut_tLogRow_27 = null;
	if (globalMap.get("tLogRow_CONSOLE")!=null){
        consoleOut_tLogRow_27 = (java.io.PrintStream) globalMap.get("tLogRow_CONSOLE");
    }else{
        consoleOut_tLogRow_27 = new java.io.PrintStream(new java.io.BufferedOutputStream(System.out));
        globalMap.put("tLogRow_CONSOLE",consoleOut_tLogRow_27);
    }

 		StringBuilder strBuffer_tLogRow_27 = null;
		int nb_line_tLogRow_27 = 0;
///////////////////////    			



 



/**
 * [tLogRow_27 begin ] stop
 */



	
	/**
	 * [tMSSqlRow_25 begin ] start
	 */

	

	
		
		ok_Hash.put("tMSSqlRow_25", false);
		start_Hash.put("tMSSqlRow_25", System.currentTimeMillis());
		
	
	currentComponent="tMSSqlRow_25";

	
		int tos_count_tMSSqlRow_25 = 0;
		

	java.sql.Connection conn_tMSSqlRow_25 = null;
	String query_tMSSqlRow_25 = "";
	boolean whetherReject_tMSSqlRow_25 = false;
				conn_tMSSqlRow_25 = (java.sql.Connection)globalMap.get("conn_tMSSqlConnection_4");
			
    resourceMap.put("conn_tMSSqlRow_25", conn_tMSSqlRow_25);
        java.sql.Statement stmt_tMSSqlRow_25 = conn_tMSSqlRow_25.createStatement();
        resourceMap.put("stmt_tMSSqlRow_25", stmt_tMSSqlRow_25);

 



/**
 * [tMSSqlRow_25 begin ] stop
 */
	
	/**
	 * [tMSSqlRow_25 main ] start
	 */

	

	
	
	currentComponent="tMSSqlRow_25";

	

		row16 = null;
		
		row75 = null;
		
query_tMSSqlRow_25 = "If Exists ( SELECT name \n            FROM sysobjects  \n            WHERE name = 'ImportSetPersonNbr'\n            AND"
+" type = 'P')\n	DROP PROCEDURE ImportSetPersonNbr\n";
whetherReject_tMSSqlRow_25 = false;
globalMap.put("tMSSqlRow_25_QUERY",query_tMSSqlRow_25);
try {
		stmt_tMSSqlRow_25.execute(query_tMSSqlRow_25);
		
	} catch (java.lang.Exception e) {
		whetherReject_tMSSqlRow_25 = true;
		
				row75 = new row75Struct();
				
				row75.errorCode = ((java.sql.SQLException)e).getSQLState();
				row75.errorMessage = e.getMessage() + " - Line: " + tos_count_tMSSqlRow_25;
				
	}
	
	if(!whetherReject_tMSSqlRow_25) {
		
					row16 = new row16Struct();
					
	}
	

 


	tos_count_tMSSqlRow_25++;

/**
 * [tMSSqlRow_25 main ] stop
 */
	
	/**
	 * [tMSSqlRow_25 process_data_begin ] start
	 */

	

	
	
	currentComponent="tMSSqlRow_25";

	

 



/**
 * [tMSSqlRow_25 process_data_begin ] stop
 */
// Start of branch "row16"
if(row16 != null) { 
			row76 = null;



	
	/**
	 * [tMSSqlRow_26 main ] start
	 */

	

	
	
	currentComponent="tMSSqlRow_26";

	
					if(execStat){
						runStat.updateStatOnConnection(iterateId,1,1
						
							,"row16"
						
						);
					}
					

		row76 = null;
		
query_tMSSqlRow_26 = "CREATE PROCEDURE ImportSetPersonNbr\nAS \n	BEGIN\n		SET NOCOUNT ON\n		\n		/* Procedure name: ImportSetPersonNbr\n		Inpu"
+"t: work table WRK_PERSON_ADDR with null PERSON_NBR / ADDR_NBR,\n		Output: assigned values for PERSON_NBR / ADDR_NBR, fro"
+"m existing data if possible,\n		otherwise new data is created in IP_PERSON and IP_PERSON_ADDRESSES.\n		create or replace"
+" procedure ImportSetPersonNbr as\n		*/\n		\n		DECLARE @time1                                    DATETIME \n		DECLARE @Nu"
+"mPERSON_NBR                            FLOAT \n\n		DECLARE cur1 cursor LOCAL FOR \n		SELECT DISTINCT\n				 PERSON_NAME,"
+"\n				 PERSON_NAME_LANG2,\n				 \n				CASE IND_COMPANY \n					WHEN 1 THEN 'M' \n					ELSE 'F' \n				END PERSON_WCODE,\n		"
+"		 NATIONALITY_COUNTRY_CODE,\n				 AGENT_CODE,\n				 LEGAL_NATURE,\n				 LEGAL_NATURE_LANG2,\n				 TELEPHONE,\n				 EMAI"
+"L,\n				 PERSON_GROUP_CODE,\n				 LEGAL_ID_TYPE,\n				 LEGAL_ID_NBR,\n				 INDIVIDUAL_ID_TYPE,\n				 INDIVIDUAL_ID_NBR\n"
+"		FROM  wrk_person_addr \n		WHERE	 person_nbr  is null\n		\n		DECLARE @rec1_PERSON_NAME					VARCHAR(2000)\n		DECLARE @re"
+"c1_PERSON_NAME_LANG2				VARCHAR(2000)\n		DECLARE @rec1_PERSON_WCODE					VARCHAR(200)	\n		DECLARE @rec1_NATIONALITY_COUNT"
+"RY_CODE		VARCHAR(200)\n		DECLARE @rec1_AGENT_CODE					NUMERIC\n		DECLARE @rec1_LEGAL_NATURE					VARCHAR(2000)\n		DECLARE"
+" @rec1_LEGAL_NATURE_LANG2			VARCHAR(2000)\n		DECLARE @rec1_TELEPHONE						VARCHAR(200)\n		DECLARE @rec1_EMAIL							VARC"
+"HAR(200)\n		DECLARE @rec1_PERSON_GROUP_CODE				NUMERIC\n		DECLARE @rec1_LEGAL_ID_TYPE					VARCHAR(200)\n		DECLARE @rec1_"
+"LEGAL_ID_NBR					NUMERIC\n		DECLARE @rec1_INDIVIDUAL_ID_TYPE			VARCHAR(200)\n		DECLARE @rec1_INDIVIDUAL_ID_NBR				NUMERI"
+"C\n\n		DECLARE @NumADDR_NBR                        FLOAT \n\n		DECLARE cur2 cursor LOCAL FOR \n		SELECT DISTINCT\n				 P"
+"ERSON_NBR,\n				 ADDRESS_STREET,\n				 ADDRESS_STREET_LANG2,\n				 ADDRESS_ZONE,\n				 CITY_NAME,\n				 RESIDENCE_COUNTR"
+"Y_CODE,\n				 STATE_CODE,\n				 CITY_CODE,\n				 STATE_NAME,\n				 ZIP_CODE\n		FROM  wrk_person_addr \n		WHERE	 addr_nbr"
+"  is null\n		\n		DECLARE @rec2_PERSON_NBR				NUMERIC\n		DECLARE @rec2_ADDRESS_STREET			VARCHAR(2000)\n		DECLARE @rec2_AD"
+"DRESS_STREET_LANG2		VARCHAR(2000)\n		DECLARE @rec2_ADDRESS_ZONE				VARCHAR(2000)\n		DECLARE @rec2_CITY_NAME					VARCHAR("
+"2000)\n		DECLARE @rec2_RESIDENCE_COUNTRY_CODE	VARCHAR(200)\n		DECLARE @rec2_STATE_CODE				VARCHAR(200)\n		DECLARE @rec2_"
+"CITY_CODE				VARCHAR(200)\n		DECLARE @rec2_STATE_NAME				VARCHAR(200)\n		DECLARE @rec2_ZIP_CODE					VARCHAR(200)\n\n		/*"
+" In order to use existing tuples in IP_PERSON, a massive update of WRK_PERSON_ADDR.PERSON_NBR is done,\n		       taking "
+"into account the possibility of NULL values */\n		SELECT @time1  =  GETDATE()\n		\n		UPDATE  T   \n		SET	person_nbr = (	"
+"SELECT min(person_nbr)\n			FROM  IP_PERSON P \n			WHERE	 P.PERSON_NAME  = T.PERSON_NAME COLLATE DATABASE_DEFAULT\n			 AN"
+"D	P.PERSON_WCODE  = \n				CASE T.IND_COMPANY \n					WHEN 1 THEN 'M' \n					ELSE 'F' \n				END\n			 AND	ISNULL(P.PERSON_N"
+"AME_LANG2, '')  = ISNULL(T.PERSON_NAME_LANG2, '')			COLLATE DATABASE_DEFAULT	\n			 AND	P.NATIONALITY_COUNTRY_CODE  = T.N"
+"ATIONALITY_COUNTRY_CODE			COLLATE DATABASE_DEFAULT\n			 AND	ISNULL(P.PERSON_GROUP_NBR, '')  = ISNULL(T.PERSON_GROUP_CODE"
+", '') COLLATE DATABASE_DEFAULT\n			 AND	ISNULL(P.LEGAL_NATURE, '')  = ISNULL(T.LEGAL_NATURE, '')			COLLATE DATABASE_DEFA"
+"ULT\n			 AND	ISNULL(P.LEGAL_NATURE_LANG2, '')  = ISNULL(T.LEGAL_NATURE_LANG2, '')			COLLATE DATABASE_DEFAULT\n			 AND	IS"
+"NULL(P.AGENT_CODE, 0)  = ISNULL(T.AGENT_CODE, 0)\n			 AND	ISNULL(P.GRAL_PERSON_ID_TYP, '')  = ISNULL(T.LEGAL_ID_TYPE, ''"
+")	COLLATE DATABASE_DEFAULT\n			 AND	ISNULL(P.GRAL_PERSON_ID_NBR, 0)  = ISNULL(T.LEGAL_ID_NBR, 0)\n			 AND	ISNULL(P.INDI_"
+"PERSON_ID_TYP, '')  = ISNULL(T.INDIVIDUAL_ID_TYPE, '')	COLLATE DATABASE_DEFAULT\n			 AND	ISNULL(P.INDI_PERSON_ID_NBR, 0)"
+"  = ISNULL(T.INDIVIDUAL_ID_NBR, 0)\n			 AND	ISNULL(P.EMAIL, '')  = ISNULL(T.EMAIL, '')							COLLATE DATABASE_DEFAULT\n	"
+"		 AND	ISNULL(P.TELEPHONE, '')  = ISNULL(T.TELEPHONE, '')					COLLATE DATABASE_DEFAULT\n		) \n		FROM  wrk_person_addr T;"
+" \n		\n		INSERT INTO  wrk_log    \n		 VALUES 		( 'First massive update of PERSON_NBR' , \n				@time1 , datediff(ss, @tim"
+"e1, getdate()));\n		\n		/* now the new persons are added individually to IP_PERSON */\n		SELECT @time1  =  GETDATE()\n		"
+"\n		/* initilize numbering valriable */\n		SELECT @NumPERSON_NBR  =  maxnumber\n		FROM  CF_THIS_CONTROL \n		WHERE	 TABLE"
+"NAME  = 'PERSONA'\n		\n		/* process WRK_PERSON_ADDR with no matching IP_PERSON (i.e. with null PERSON_NBR), taking into"
+"\n		account that the same person may appear several times */\n		\n		\n		OPEN cur1 \n		DECLARE @count		 INT \n		SELECT @co"
+"unt = 1 \n		WHILE (0 = 0) \n		BEGIN --( \n			\n			fetch NEXT FROM cur1 INTO @rec1_PERSON_NAME,@rec1_PERSON_NAME_LANG2, @"
+"rec1_PERSON_WCODE, @rec1_NATIONALITY_COUNTRY_CODE, @rec1_AGENT_CODE, @rec1_LEGAL_NATURE,@rec1_LEGAL_NATURE_LANG2, @rec1_"
+"TELEPHONE, @rec1_EMAIL, @rec1_PERSON_GROUP_CODE, @rec1_LEGAL_ID_TYPE, @rec1_LEGAL_ID_NBR, @rec1_INDIVIDUAL_ID_TYPE, @rec"
+"1_INDIVIDUAL_ID_NBR\n			IF (@@FETCH_STATUS = -1) \n			BREAK\n\n			/* Increment the variable with the last person number "
+"*/\n			\n			SELECT @NumPERSON_NBR  = @NumPERSON_NBR + 1 \n			/* Insert a new tuple in IP_PERSON with the generated code "
+"and the data from WRK_PERSON_ADDR */\n			INSERT INTO  IP_PERSON   \n					( ROW_VERSION , \n					PERSON_NBR , \n					PERS"
+"ON_NAME , \n					PERSON_NAME_LANG2 ,\n					PERSON_WCODE , \n					NATIONALITY_COUNTRY_CODE , \n					AGENT_CODE , \n					L"
+"EGAL_NATURE , \n					LEGAL_NATURE_LANG2 ,\n					TELEPHONE , \n					EMAIL , \n					PERSON_GROUP_NBR , \n					GRAL_PERSON_"
+"ID_TYP , \n					GRAL_PERSON_ID_NBR , \n					GRAL_PERSON_ID_TXT , \n					INDI_PERSON_ID_TYP , \n					INDI_PERSON_ID_NBR ,"
+" \n					INDI_PERSON_ID_TXT )  \n			 VALUES 		( 1 , \n					@NumPERSON_NBR , \n					@rec1_PERSON_NAME , \n					@rec1_PERSO"
+"N_NAME_LANG2 ,\n					@rec1_PERSON_WCODE , \n					@rec1_NATIONALITY_COUNTRY_CODE , \n					@rec1_AGENT_CODE , \n					@rec1"
+"_LEGAL_NATURE , \n					@rec1_LEGAL_NATURE_LANG2 , \n					@rec1_TELEPHONE , \n					@rec1_EMAIL , \n					@rec1_PERSON_GROU"
+"P_CODE , \n					@rec1_LEGAL_ID_TYPE , \n					@rec1_LEGAL_ID_NBR , \n					CAST(@rec1_LEGAL_ID_NBR as VARCHAR (15)) , \n		"
+"			@rec1_INDIVIDUAL_ID_TYPE , \n					@rec1_INDIVIDUAL_ID_NBR , \n					CAST(@rec1_INDIVIDUAL_ID_NBR as VARCHAR (15)) )  "
+"\n			\n			SELECT @count=@count +1\n		END --) \n		\n		\n		close cur1\n		\n		INSERT INTO  wrk_log    \n		 VALUES 		( 'Add n"
+"ew persons' , \n				@time1 , datediff(ss, @time1, getdate()));\n		\n		/* In order to use the just-inserted tuples in IP_"
+"PERSON, the same massive update of WRK_PERSON_ADDR.PERSON_NBR \n		       is done again*/\n		SELECT @time1  =  GETDATE()"
+"\n		\n		UPDATE  T   \n		SET	person_nbr = (	SELECT min (person_nbr)\n			FROM  IP_PERSON P \n			WHERE	 P.PERSON_NAME  = T.P"
+"ERSON_NAME COLLATE DATABASE_DEFAULT\n			AND	ISNULL(P.PERSON_NAME_LANG2, '')  = ISNULL(T.PERSON_NAME_LANG2, '')			COLLATE"
+" DATABASE_DEFAULT\n			 AND	P.PERSON_WCODE  = \n				CASE T.IND_COMPANY \n					WHEN 1 THEN 'M' \n					ELSE 'F' \n				END\n"
+"			 AND	P.NATIONALITY_COUNTRY_CODE  = T.NATIONALITY_COUNTRY_CODE			COLLATE DATABASE_DEFAULT\n			 AND	ISNULL(P.PERSON_GRO"
+"UP_NBR, '')  = ISNULL(T.PERSON_GROUP_CODE, '') COLLATE DATABASE_DEFAULT\n			 AND	ISNULL(P.LEGAL_NATURE_LANG2, '')  = ISN"
+"ULL(T.LEGAL_NATURE_LANG2, '')			COLLATE DATABASE_DEFAULT\n			 AND	ISNULL(P.LEGAL_NATURE, '')  = ISNULL(T.LEGAL_NATURE, '"
+"')			COLLATE DATABASE_DEFAULT\n			 AND	ISNULL(P.AGENT_CODE, 0)  = ISNULL(T.AGENT_CODE, 0)\n			 AND	ISNULL(P.GRAL_PERSON_"
+"ID_TYP, '')  = ISNULL(T.LEGAL_ID_TYPE, '')	COLLATE DATABASE_DEFAULT\n			 AND	ISNULL(P.GRAL_PERSON_ID_NBR, 0)  = ISNULL(T"
+".LEGAL_ID_NBR, 0)\n			 AND	ISNULL(P.INDI_PERSON_ID_TYP, '')  = ISNULL(T.INDIVIDUAL_ID_TYPE, '') COLLATE DATABASE_DEFAULT"
+"\n			 AND	ISNULL(P.INDI_PERSON_ID_NBR, 0)  = ISNULL(T.INDIVIDUAL_ID_NBR, 0)\n			 AND	ISNULL(P.EMAIL, '')  = ISNULL(T.EMA"
+"IL, '')						COLLATE DATABASE_DEFAULT\n			 AND	ISNULL(P.TELEPHONE, '')  = ISNULL(T.TELEPHONE, '')				COLLATE DATABASE_DE"
+"FAULT\n		) \n		FROM  wrk_person_addr T \n		WHERE  person_nbr  is null \n		\n		INSERT INTO  wrk_log    \n		 VALUES 		( 'S"
+"econd massive update of PERSON_NBR' , \n				@time1 , datediff(ss, @time1, getdate()));\n		\n		/* Use the variable with t"
+"he last person number to update CF_THIS_CONTROL */\n		UPDATE  CF_THIS_CONTROL   \n		SET	maxnumber = @NumPERSON_NBR \n		W"
+"HERE  TABLENAME  = 'PERSONA' \n		\n		/* In order to use existing tuples in IP_PERSON_ADDRESSES, a massive update of WRK_"
+"PERSON_ADDR.ADDR_NBR is done \n		       taking into account the possibility of NULL values */\n		SELECT @time1  =  GETDA"
+"TE()\n		\n		UPDATE  T   \n		SET	addr_nbr = (	SELECT min(addr_nbr)\n			FROM  IP_PERSON_ADDRESSES A \n			WHERE	 A.PERSON_N"
+"BR  = T.PERSON_NBR\n			 AND	A.RESIDENCE_COUNTRY_CODE	= T.RESIDENCE_COUNTRY_CODE		COLLATE DATABASE_DEFAULT\n			 AND	ISNUL"
+"L(A.ADDR_STREET, '')  = ISNULL(T.ADDRESS_STREET, '')	COLLATE DATABASE_DEFAULT\n			 AND	ISNULL(A.ADDR_STREET_LANG2, '')  "
+"= ISNULL(T.ADDRESS_STREET_LANG2, '')	COLLATE DATABASE_DEFAULT\n			 AND	ISNULL(A.STATE_NAME, '')	= ISNULL(T.STATE_NAME, '"
+"')		COLLATE DATABASE_DEFAULT\n			 AND	ISNULL(A.STATE_CODE, '')	= ISNULL(T.STATE_CODE, '')		COLLATE DATABASE_DEFAULT\n			"
+" AND	ISNULL(A.CITY_CODE, '')	= ISNULL(T.CITY_CODE, '')		COLLATE DATABASE_DEFAULT\n			 AND	ISNULL(A.CITY_NAME, '')	= ISNU"
+"LL(T.CITY_NAME, '')		COLLATE DATABASE_DEFAULT\n			 AND	ISNULL(A.ADDR_ZONE, '')	= ISNULL(T.ADDRESS_ZONE, '')	COLLATE DATA"
+"BASE_DEFAULT\n			 AND	ISNULL(A.ZIPCODE, '')		= ISNULL(T.ZIP_CODE, '')		COLLATE DATABASE_DEFAULT\n		) \n		FROM  wrk_perso"
+"n_addr T \n		\n		INSERT INTO  wrk_log    \n		 VALUES 		( 'First massive update of ADDR_NBR' , \n				@time1 , datediff(ss"
+", @time1, getdate()));\n		\n		/* now the new addresses are added individually to IP_PERSON_ADDRESSES */\n		SELECT @time1"
+"  =  GETDATE()\n		\n		/* process those WRK_PERSON_ADDR with no matching IP_PERSON_ADDRESSES (i.e. with null ADDR_NBR) */"
+"\n		\n		\n		OPEN cur2 \n				SELECT @count = 1 \n		WHILE (0 = 0) \n		BEGIN --( \n			\n			fetch NEXT FROM cur2 INTO @rec2_"
+"PERSON_NBR, @rec2_ADDRESS_STREET,@rec2_ADDRESS_STREET_LANG2, @rec2_ADDRESS_ZONE, @rec2_CITY_NAME, @rec2_RESIDENCE_COUNTR"
+"Y_CODE, @rec2_STATE_CODE,@rec2_CITY_CODE, @rec2_STATE_NAME, @rec2_ZIP_CODE\n			IF (@@FETCH_STATUS = -1) \n			BREAK\n\n		"
+"	/* initilize numbering variable */\n			SELECT @NumADDR_NBR  =  MAX(addr_nbr)\n			FROM  IP_PERSON_ADDRESSES \n			WHERE	 "
+"person_nbr  = @rec2_PERSON_NBR\n			\n			/* Increment the variable with the last address number */\n			\n			SELECT @NumAD"
+"DR_NBR  = ISNULL(@NumADDR_NBR, 0)\n			SELECT @NumADDR_NBR  = @NumADDR_NBR + 1 \n			/* Insert a new tuple in IP_PERSON_AD"
+"DRESSES with the generated code and the data from WRK_PERSON_ADDR */\n			INSERT INTO  IP_PERSON_ADDRESSES   \n					( ROW"
+"_VERSION , \n					PERSON_NBR , \n					ADDR_NBR , \n					ADDR_STREET , \n					ADDR_STREET_LANG2 ,\n					ADDR_ZONE , \n			"
+"		CITY_NAME , \n					RESIDENCE_COUNTRY_CODE , \n					STATE_CODE , \n					CITY_CODE,\n					STATE_NAME , \n					ZIPCODE ) "
+" \n			 VALUES 		( 1 , \n					@rec2_PERSON_NBR , \n					@NumADDR_NBR , \n					@rec2_ADDRESS_STREET , \n					@rec2_ADDRESS"
+"_STREET_LANG2 , \n					@rec2_ADDRESS_ZONE , \n					@rec2_CITY_NAME , \n					@rec2_RESIDENCE_COUNTRY_CODE , \n					@rec2_"
+"STATE_CODE , \n					@rec2_CITY_CODE ,\n					@rec2_STATE_NAME , \n					@rec2_ZIP_CODE )  \n			\n			SELECT @count=@count +"
+"1\n		END --) \n		\n		\n		close cur2\n		\n		INSERT INTO  wrk_log    \n		 VALUES 		( 'Add new addresses' , \n				@time1 , "
+"datediff(ss, @time1, getdate()));\n		\n		/* In order to use the just-inserted IP_PERSON_ADDRESSES, the same massive upda"
+"te of WRK_PERSON_ADDR.ADDR_NBR \n		       is done again */\n		SELECT @time1  =  GETDATE()\n		\n		UPDATE  T   \n		SET	add"
+"r_nbr = (	SELECT min(addr_nbr)\n			FROM  IP_PERSON_ADDRESSES A \n			WHERE	 A.PERSON_NBR  = T.PERSON_NBR\n			 AND	A.RESID"
+"ENCE_COUNTRY_CODE	= T.RESIDENCE_COUNTRY_CODE		COLLATE DATABASE_DEFAULT\n			 AND	ISNULL(A.ADDR_STREET, '')  = ISNULL(T.AD"
+"DRESS_STREET, '')	COLLATE DATABASE_DEFAULT\n			 AND	ISNULL(A.ADDR_STREET_LANG2, '')  = ISNULL(T.ADDRESS_STREET_LANG2, ''"
+")	COLLATE DATABASE_DEFAULT\n			 AND	ISNULL(A.STATE_NAME, '')	= ISNULL(T.STATE_NAME, '')		COLLATE DATABASE_DEFAULT\n			 A"
+"ND	ISNULL(A.STATE_CODE, '')	= ISNULL(T.STATE_CODE, '')		COLLATE DATABASE_DEFAULT\n			 AND	ISNULL(A.CITY_NAME, '')	= ISNU"
+"LL(T.CITY_NAME, '')		COLLATE DATABASE_DEFAULT\n			 AND	ISNULL(A.ADDR_ZONE, '')	= ISNULL(T.ADDRESS_ZONE, '')	COLLATE DATA"
+"BASE_DEFAULT\n			 AND	ISNULL(A.ZIPCODE, '')		= ISNULL(T.ZIP_CODE, '')		COLLATE DATABASE_DEFAULT\n		) \n		FROM  wrk_perso"
+"n_addr T \n		WHERE  addr_nbr  is null \n		\n		INSERT INTO  wrk_log    \n		 VALUES 		( 'First massive update of ADDR_NBR'"
+" , \n				@time1 , datediff(ss, @time1, getdate()));\n		\n DEALLOCATE cur1\n DEALLOCATE cur2\n\n		SET NOCOUNT OFF\n\n	END"
+"\n";
whetherReject_tMSSqlRow_26 = false;
globalMap.put("tMSSqlRow_26_QUERY",query_tMSSqlRow_26);
try {
		stmt_tMSSqlRow_26.execute(query_tMSSqlRow_26);
		
	} catch (java.lang.Exception e) {
		whetherReject_tMSSqlRow_26 = true;
		
				row76 = new row76Struct();
				
				row76.errorCode = ((java.sql.SQLException)e).getSQLState();
				row76.errorMessage = e.getMessage() + " - Line: " + tos_count_tMSSqlRow_26;
				
	}
	
	if(!whetherReject_tMSSqlRow_26) {
		
	}
	

 


	tos_count_tMSSqlRow_26++;

/**
 * [tMSSqlRow_26 main ] stop
 */
	
	/**
	 * [tMSSqlRow_26 process_data_begin ] start
	 */

	

	
	
	currentComponent="tMSSqlRow_26";

	

 



/**
 * [tMSSqlRow_26 process_data_begin ] stop
 */
// Start of branch "row76"
if(row76 != null) { 



	
	/**
	 * [tLogRow_28 main ] start
	 */

	

	
	
	currentComponent="tLogRow_28";

	
					if(execStat){
						runStat.updateStatOnConnection(iterateId,1,1
						
							,"row76"
						
						);
					}
					
///////////////////////		
						



				strBuffer_tLogRow_28 = new StringBuilder();




   				
	    		if(row76.errorCode != null) { //              
                    							
       
				strBuffer_tLogRow_28.append(
				                String.valueOf(row76.errorCode)							
				);


							
	    		} //  			

    			strBuffer_tLogRow_28.append("|");
    			


   				
	    		if(row76.errorMessage != null) { //              
                    							
       
				strBuffer_tLogRow_28.append(
				                String.valueOf(row76.errorMessage)							
				);


							
	    		} //  			

				
				String[] row_tLogRow_28 = new String[2];
   				
	    		if(row76.errorCode != null) { //              
                 row_tLogRow_28[0]=    						    
				                String.valueOf(row76.errorCode)			
					          ;	
							
	    		} //			
    			   				
	    		if(row76.errorMessage != null) { //              
                 row_tLogRow_28[1]=    						    
				                String.valueOf(row76.errorMessage)			
					          ;	
							
	    		} //			
    			
				nb_line_tLogRow_28++;
                consoleOut_tLogRow_28.println(util_tLogRow_28.print(row_tLogRow_28,nb_line_tLogRow_28));
                consoleOut_tLogRow_28.flush();
//////

//////                    
                    
///////////////////////    			

 


	tos_count_tLogRow_28++;

/**
 * [tLogRow_28 main ] stop
 */
	
	/**
	 * [tLogRow_28 process_data_begin ] start
	 */

	

	
	
	currentComponent="tLogRow_28";

	

 



/**
 * [tLogRow_28 process_data_begin ] stop
 */
	
	/**
	 * [tLogRow_28 process_data_end ] start
	 */

	

	
	
	currentComponent="tLogRow_28";

	

 



/**
 * [tLogRow_28 process_data_end ] stop
 */

} // End of branch "row76"




	
	/**
	 * [tMSSqlRow_26 process_data_end ] start
	 */

	

	
	
	currentComponent="tMSSqlRow_26";

	

 



/**
 * [tMSSqlRow_26 process_data_end ] stop
 */

} // End of branch "row16"




// Start of branch "row75"
if(row75 != null) { 



	
	/**
	 * [tLogRow_27 main ] start
	 */

	

	
	
	currentComponent="tLogRow_27";

	
					if(execStat){
						runStat.updateStatOnConnection(iterateId,1,1
						
							,"row75"
						
						);
					}
					
///////////////////////		
						



				strBuffer_tLogRow_27 = new StringBuilder();




   				
	    		if(row75.errorCode != null) { //              
                    							
       
				strBuffer_tLogRow_27.append(
				                String.valueOf(row75.errorCode)							
				);


							
	    		} //  			

    			strBuffer_tLogRow_27.append("|");
    			


   				
	    		if(row75.errorMessage != null) { //              
                    							
       
				strBuffer_tLogRow_27.append(
				                String.valueOf(row75.errorMessage)							
				);


							
	    		} //  			

				
				String[] row_tLogRow_27 = new String[2];
   				
	    		if(row75.errorCode != null) { //              
                 row_tLogRow_27[0]=    						    
				                String.valueOf(row75.errorCode)			
					          ;	
							
	    		} //			
    			   				
	    		if(row75.errorMessage != null) { //              
                 row_tLogRow_27[1]=    						    
				                String.valueOf(row75.errorMessage)			
					          ;	
							
	    		} //			
    			
				nb_line_tLogRow_27++;
                consoleOut_tLogRow_27.println(util_tLogRow_27.print(row_tLogRow_27,nb_line_tLogRow_27));
                consoleOut_tLogRow_27.flush();
//////

//////                    
                    
///////////////////////    			

 


	tos_count_tLogRow_27++;

/**
 * [tLogRow_27 main ] stop
 */
	
	/**
	 * [tLogRow_27 process_data_begin ] start
	 */

	

	
	
	currentComponent="tLogRow_27";

	

 



/**
 * [tLogRow_27 process_data_begin ] stop
 */
	
	/**
	 * [tLogRow_27 process_data_end ] start
	 */

	

	
	
	currentComponent="tLogRow_27";

	

 



/**
 * [tLogRow_27 process_data_end ] stop
 */

} // End of branch "row75"




	
	/**
	 * [tMSSqlRow_25 process_data_end ] start
	 */

	

	
	
	currentComponent="tMSSqlRow_25";

	

 



/**
 * [tMSSqlRow_25 process_data_end ] stop
 */
	
	/**
	 * [tMSSqlRow_25 end ] start
	 */

	

	
	
	currentComponent="tMSSqlRow_25";

	

	
        stmt_tMSSqlRow_25.close();
        resourceMap.remove("stmt_tMSSqlRow_25");
    resourceMap.put("statementClosed_tMSSqlRow_25", true);
    resourceMap.put("finish_tMSSqlRow_25", true);
 

ok_Hash.put("tMSSqlRow_25", true);
end_Hash.put("tMSSqlRow_25", System.currentTimeMillis());




/**
 * [tMSSqlRow_25 end ] stop
 */

	
	/**
	 * [tMSSqlRow_26 end ] start
	 */

	

	
	
	currentComponent="tMSSqlRow_26";

	

	
        stmt_tMSSqlRow_26.close();
        resourceMap.remove("stmt_tMSSqlRow_26");
    resourceMap.put("statementClosed_tMSSqlRow_26", true);
    resourceMap.put("finish_tMSSqlRow_26", true);
				if(execStat){
			  		runStat.updateStat(resourceMap,iterateId,2,0,"row16");
			  	}
			  	
 

ok_Hash.put("tMSSqlRow_26", true);
end_Hash.put("tMSSqlRow_26", System.currentTimeMillis());




/**
 * [tMSSqlRow_26 end ] stop
 */

	
	/**
	 * [tLogRow_28 end ] start
	 */

	

	
	
	currentComponent="tLogRow_28";

	


//////
//////
globalMap.put("tLogRow_28_NB_LINE",nb_line_tLogRow_28);

///////////////////////    			

				if(execStat){
			  		runStat.updateStat(resourceMap,iterateId,2,0,"row76");
			  	}
			  	
 

ok_Hash.put("tLogRow_28", true);
end_Hash.put("tLogRow_28", System.currentTimeMillis());




/**
 * [tLogRow_28 end ] stop
 */







	
	/**
	 * [tLogRow_27 end ] start
	 */

	

	
	
	currentComponent="tLogRow_27";

	


//////
//////
globalMap.put("tLogRow_27_NB_LINE",nb_line_tLogRow_27);

///////////////////////    			

				if(execStat){
			  		runStat.updateStat(resourceMap,iterateId,2,0,"row75");
			  	}
			  	
 

ok_Hash.put("tLogRow_27", true);
end_Hash.put("tLogRow_27", System.currentTimeMillis());




/**
 * [tLogRow_27 end ] stop
 */



				}//end the resume

				
				    			if(resumeEntryMethodName == null || globalResumeTicket){
				    				resumeUtil.addLog("CHECKPOINT", "CONNECTION:SUBJOB_OK:tMSSqlRow_25:OnSubjobOk", "", Thread.currentThread().getId() + "", "", "", "", "", "");
								}	    				    			
					    	
								if(execStat){    	
									runStat.updateStatOnConnection("OnSubjobOk29", 0, "ok");
								} 
							
							tMSSqlRow_27Process(globalMap); 
						



	
			}catch(java.lang.Exception e){	
				
				TalendException te = new TalendException(e, currentComponent, globalMap);
				
				throw te;
			}catch(java.lang.Error error){	
				
					runStat.stopThreadStat();
				
				throw error;
			}finally{
				
				try{
					
	
	/**
	 * [tMSSqlRow_25 finally ] start
	 */

	

	
	
	currentComponent="tMSSqlRow_25";

	

    if (resourceMap.get("statementClosed_tMSSqlRow_25") == null) {
            java.sql.Statement stmtToClose_tMSSqlRow_25 = null;
            if ((stmtToClose_tMSSqlRow_25 = (java.sql.Statement) resourceMap.remove("stmt_tMSSqlRow_25")) != null) {
                stmtToClose_tMSSqlRow_25.close();
            }
    }
 



/**
 * [tMSSqlRow_25 finally ] stop
 */

	
	/**
	 * [tMSSqlRow_26 finally ] start
	 */

	

	
	
	currentComponent="tMSSqlRow_26";

	

    if (resourceMap.get("statementClosed_tMSSqlRow_26") == null) {
            java.sql.Statement stmtToClose_tMSSqlRow_26 = null;
            if ((stmtToClose_tMSSqlRow_26 = (java.sql.Statement) resourceMap.remove("stmt_tMSSqlRow_26")) != null) {
                stmtToClose_tMSSqlRow_26.close();
            }
    }
 



/**
 * [tMSSqlRow_26 finally ] stop
 */

	
	/**
	 * [tLogRow_28 finally ] start
	 */

	

	
	
	currentComponent="tLogRow_28";

	

 



/**
 * [tLogRow_28 finally ] stop
 */







	
	/**
	 * [tLogRow_27 finally ] start
	 */

	

	
	
	currentComponent="tLogRow_27";

	

 



/**
 * [tLogRow_27 finally ] stop
 */



				}catch(java.lang.Exception e){	
					//ignore
				}catch(java.lang.Error error){
					//ignore
				}
				resourceMap = null;
			}
		

		globalMap.put("tMSSqlRow_25_SUBPROCESS_STATE", 1);
	}
	


public static class row78Struct implements routines.system.IPersistableRow<row78Struct> {
    final static byte[] commonByteArrayLock_WIPO_PROJECTS_F_IPAS_ENV_CRE = new byte[0];
    static byte[] commonByteArray_WIPO_PROJECTS_F_IPAS_ENV_CRE = new byte[0];

	
			    public String errorCode;

				public String getErrorCode () {
					return this.errorCode;
				}
				
			    public String errorMessage;

				public String getErrorMessage () {
					return this.errorMessage;
				}
				



	private String readString(ObjectInputStream dis) throws IOException{
		String strReturn = null;
		int length = 0;
        length = dis.readInt();
		if (length == -1) {
			strReturn = null;
		} else {
			if(length > commonByteArray_WIPO_PROJECTS_F_IPAS_ENV_CRE.length) {
				if(length < 1024 && commonByteArray_WIPO_PROJECTS_F_IPAS_ENV_CRE.length == 0) {
   					commonByteArray_WIPO_PROJECTS_F_IPAS_ENV_CRE = new byte[1024];
				} else {
   					commonByteArray_WIPO_PROJECTS_F_IPAS_ENV_CRE = new byte[2 * length];
   				}
			}
			dis.readFully(commonByteArray_WIPO_PROJECTS_F_IPAS_ENV_CRE, 0, length);
			strReturn = new String(commonByteArray_WIPO_PROJECTS_F_IPAS_ENV_CRE, 0, length, utf8Charset);
		}
		return strReturn;
	}

    private void writeString(String str, ObjectOutputStream dos) throws IOException{
		if(str == null) {
            dos.writeInt(-1);
		} else {
            byte[] byteArray = str.getBytes(utf8Charset);
	    	dos.writeInt(byteArray.length);
			dos.write(byteArray);
    	}
    }

    public void readData(ObjectInputStream dis) {

		synchronized(commonByteArrayLock_WIPO_PROJECTS_F_IPAS_ENV_CRE) {

        	try {

        		int length = 0;
		
					this.errorCode = readString(dis);
					
					this.errorMessage = readString(dis);
					
        	} catch (IOException e) {
	            throw new RuntimeException(e);

		

        }

		

      }


    }

    public void writeData(ObjectOutputStream dos) {
        try {

		
					// String
				
						writeString(this.errorCode,dos);
					
					// String
				
						writeString(this.errorMessage,dos);
					
        	} catch (IOException e) {
	            throw new RuntimeException(e);
        }


    }


    public String toString() {

		StringBuilder sb = new StringBuilder();
		sb.append(super.toString());
		sb.append("[");
		sb.append("errorCode="+errorCode);
		sb.append(",errorMessage="+errorMessage);
	    sb.append("]");

	    return sb.toString();
    }

    /**
     * Compare keys
     */
    public int compareTo(row78Struct other) {

		int returnValue = -1;
		
	    return returnValue;
    }


    private int checkNullsAndCompare(Object object1, Object object2) {
        int returnValue = 0;
		if (object1 instanceof Comparable && object2 instanceof Comparable) {
            returnValue = ((Comparable) object1).compareTo(object2);
        } else if (object1 != null && object2 != null) {
            returnValue = compareStrings(object1.toString(), object2.toString());
        } else if (object1 == null && object2 != null) {
            returnValue = 1;
        } else if (object1 != null && object2 == null) {
            returnValue = -1;
        } else {
            returnValue = 0;
        }

        return returnValue;
    }

    private int compareStrings(String string1, String string2) {
        return string1.compareTo(string2);
    }


}

public static class row18Struct implements routines.system.IPersistableRow<row18Struct> {
    final static byte[] commonByteArrayLock_WIPO_PROJECTS_F_IPAS_ENV_CRE = new byte[0];
    static byte[] commonByteArray_WIPO_PROJECTS_F_IPAS_ENV_CRE = new byte[0];

	



    public void readData(ObjectInputStream dis) {

		synchronized(commonByteArrayLock_WIPO_PROJECTS_F_IPAS_ENV_CRE) {

        	try {

        		int length = 0;
		

		

        }

		
			finally {}
		

      }


    }

    public void writeData(ObjectOutputStream dos) {
        try {

		
        }

			finally {}
		

    }


    public String toString() {

		StringBuilder sb = new StringBuilder();
		sb.append(super.toString());
		sb.append("[");
	    sb.append("]");

	    return sb.toString();
    }

    /**
     * Compare keys
     */
    public int compareTo(row18Struct other) {

		int returnValue = -1;
		
	    return returnValue;
    }


    private int checkNullsAndCompare(Object object1, Object object2) {
        int returnValue = 0;
		if (object1 instanceof Comparable && object2 instanceof Comparable) {
            returnValue = ((Comparable) object1).compareTo(object2);
        } else if (object1 != null && object2 != null) {
            returnValue = compareStrings(object1.toString(), object2.toString());
        } else if (object1 == null && object2 != null) {
            returnValue = 1;
        } else if (object1 != null && object2 == null) {
            returnValue = -1;
        } else {
            returnValue = 0;
        }

        return returnValue;
    }

    private int compareStrings(String string1, String string2) {
        return string1.compareTo(string2);
    }


}

public static class row77Struct implements routines.system.IPersistableRow<row77Struct> {
    final static byte[] commonByteArrayLock_WIPO_PROJECTS_F_IPAS_ENV_CRE = new byte[0];
    static byte[] commonByteArray_WIPO_PROJECTS_F_IPAS_ENV_CRE = new byte[0];

	
			    public String errorCode;

				public String getErrorCode () {
					return this.errorCode;
				}
				
			    public String errorMessage;

				public String getErrorMessage () {
					return this.errorMessage;
				}
				



	private String readString(ObjectInputStream dis) throws IOException{
		String strReturn = null;
		int length = 0;
        length = dis.readInt();
		if (length == -1) {
			strReturn = null;
		} else {
			if(length > commonByteArray_WIPO_PROJECTS_F_IPAS_ENV_CRE.length) {
				if(length < 1024 && commonByteArray_WIPO_PROJECTS_F_IPAS_ENV_CRE.length == 0) {
   					commonByteArray_WIPO_PROJECTS_F_IPAS_ENV_CRE = new byte[1024];
				} else {
   					commonByteArray_WIPO_PROJECTS_F_IPAS_ENV_CRE = new byte[2 * length];
   				}
			}
			dis.readFully(commonByteArray_WIPO_PROJECTS_F_IPAS_ENV_CRE, 0, length);
			strReturn = new String(commonByteArray_WIPO_PROJECTS_F_IPAS_ENV_CRE, 0, length, utf8Charset);
		}
		return strReturn;
	}

    private void writeString(String str, ObjectOutputStream dos) throws IOException{
		if(str == null) {
            dos.writeInt(-1);
		} else {
            byte[] byteArray = str.getBytes(utf8Charset);
	    	dos.writeInt(byteArray.length);
			dos.write(byteArray);
    	}
    }

    public void readData(ObjectInputStream dis) {

		synchronized(commonByteArrayLock_WIPO_PROJECTS_F_IPAS_ENV_CRE) {

        	try {

        		int length = 0;
		
					this.errorCode = readString(dis);
					
					this.errorMessage = readString(dis);
					
        	} catch (IOException e) {
	            throw new RuntimeException(e);

		

        }

		

      }


    }

    public void writeData(ObjectOutputStream dos) {
        try {

		
					// String
				
						writeString(this.errorCode,dos);
					
					// String
				
						writeString(this.errorMessage,dos);
					
        	} catch (IOException e) {
	            throw new RuntimeException(e);
        }


    }


    public String toString() {

		StringBuilder sb = new StringBuilder();
		sb.append(super.toString());
		sb.append("[");
		sb.append("errorCode="+errorCode);
		sb.append(",errorMessage="+errorMessage);
	    sb.append("]");

	    return sb.toString();
    }

    /**
     * Compare keys
     */
    public int compareTo(row77Struct other) {

		int returnValue = -1;
		
	    return returnValue;
    }


    private int checkNullsAndCompare(Object object1, Object object2) {
        int returnValue = 0;
		if (object1 instanceof Comparable && object2 instanceof Comparable) {
            returnValue = ((Comparable) object1).compareTo(object2);
        } else if (object1 != null && object2 != null) {
            returnValue = compareStrings(object1.toString(), object2.toString());
        } else if (object1 == null && object2 != null) {
            returnValue = 1;
        } else if (object1 != null && object2 == null) {
            returnValue = -1;
        } else {
            returnValue = 0;
        }

        return returnValue;
    }

    private int compareStrings(String string1, String string2) {
        return string1.compareTo(string2);
    }


}
public void tMSSqlRow_27Process(final java.util.Map<String, Object> globalMap) throws TalendException {
	globalMap.put("tMSSqlRow_27_SUBPROCESS_STATE", 0);

 final boolean execStat = this.execStat;
	
		String iterateId = "";
	
	
	String currentComponent = "";
	java.util.Map<String, Object> resourceMap = new java.util.HashMap<String, Object>();

	try {
			// TDI-39566 avoid throwing an useless Exception
			boolean resumeIt = true;
			if (globalResumeTicket == false && resumeEntryMethodName != null) {
				String currentMethodName = new java.lang.Exception().getStackTrace()[0].getMethodName();
				resumeIt = resumeEntryMethodName.equals(currentMethodName);
			}
			if (resumeIt || globalResumeTicket) { //start the resume
				globalResumeTicket = true;



		row18Struct row18 = new row18Struct();
row78Struct row78 = new row78Struct();
row77Struct row77 = new row77Struct();





	
	/**
	 * [tLogRow_30 begin ] start
	 */

	

	
		
		ok_Hash.put("tLogRow_30", false);
		start_Hash.put("tLogRow_30", System.currentTimeMillis());
		
	
	currentComponent="tLogRow_30";

	
					if(execStat) {
						runStat.updateStatOnConnection(resourceMap,iterateId,0,0,"row78");
					}
				
		int tos_count_tLogRow_30 = 0;
		

	///////////////////////
		


	class Util_tLogRow_30 {
	
		String[] des_top = { ".", "-" };

        String[] des_data = { "-", "+" };

        String[] des_frame = { "|" }; 
        
        public void printLine(StringBuilder sb, int titleWidth, int dataWidth){
        
        	sb.append("+");
			for(int i=0; i<titleWidth+2; i++)
				sb.append("-");
			sb.append("+");
			for(int i=0; i<dataWidth+2; i++)
				sb.append("-");
        	sb.append("+" + "\n");
        }      

		public String print(String[] row, int nbLine){
			
			StringBuilder sb = new StringBuilder();
			
			    String title = "#" + nbLine + ". " + "tLogRow_30";
			    
		
			//step 1: get the max length of all the row[] member;
			int dataWidth = 5;		//the length of the string "value"	
			for(int i=0;i<row.length;i++) {
				if(row[i] == null && 4 > dataWidth) {
					dataWidth = 4;
				}
				else if(row[i] != null && row[i].length()>dataWidth) 
					dataWidth = row[i].length();
			}			
						
			int titleWidth = 12;
			
			int totalWidth = dataWidth + titleWidth + 5;
			
			//step 2: print the header with line number
			sb.append(".");
			for(int i=0 ; i<totalWidth ; i++)
				sb.append("-");			
			sb.append("." + "\n" + "|");
			
			int emptyCenterWidth = (totalWidth-title.length())/2;
			for(int i=0 ; i<emptyCenterWidth; i++)
				sb.append(" ");	
			sb.append(title);
			for(int i=0 ; i<totalWidth - emptyCenterWidth - title.length() ; i++)
				sb.append(" ");	
			sb.append("|" + "\n");
			
			//step 3: print "key" and "value"			
			printLine(sb,titleWidth,dataWidth);
			
			sb.append("|" + " key");
			for(int i=0; i<titleWidth-2; i++)
				sb.append(" ");
        	sb.append("|" + " value");
			for(int i=0; i<dataWidth-4; i++)
				sb.append(" ");
			sb.append("|" + "\n");
			
			printLine(sb,titleWidth,dataWidth);
			
			//step 4: print dataset
			
			//for(int i=0; i<row.length; i++){
				sb.append("| " + "errorCode");
				for(int i=0; i<titleWidth -"errorCode".length()+ 1 ;i++)
					sb.append(" ");
				sb.append("| " + row[0]);
				for(int i=0; row[0] == null && i<dataWidth - 3 || row[0] != null && i<dataWidth -row[0].length()+ 1 ;i++)
					sb.append(" ");
				sb.append("|" + "\n");
			
			//}

			
			//for(int i=0; i<row.length; i++){
				sb.append("| " + "errorMessage");
				for(int i=0; i<titleWidth -"errorMessage".length()+ 1 ;i++)
					sb.append(" ");
				sb.append("| " + row[1]);
				for(int i=0; row[1] == null && i<dataWidth - 3 || row[1] != null && i<dataWidth -row[1].length()+ 1 ;i++)
					sb.append(" ");
				sb.append("|" + "\n");
			
			//}

			
			//step 5: print a line gap
			printLine(sb,titleWidth,dataWidth);
			return sb.toString();

		}


	}

	Util_tLogRow_30 util_tLogRow_30 = new Util_tLogRow_30();




	java.io.PrintStream consoleOut_tLogRow_30 = null;
	if (globalMap.get("tLogRow_CONSOLE")!=null){
        consoleOut_tLogRow_30 = (java.io.PrintStream) globalMap.get("tLogRow_CONSOLE");
    }else{
        consoleOut_tLogRow_30 = new java.io.PrintStream(new java.io.BufferedOutputStream(System.out));
        globalMap.put("tLogRow_CONSOLE",consoleOut_tLogRow_30);
    }

 		StringBuilder strBuffer_tLogRow_30 = null;
		int nb_line_tLogRow_30 = 0;
///////////////////////    			



 



/**
 * [tLogRow_30 begin ] stop
 */



	
	/**
	 * [tMSSqlRow_28 begin ] start
	 */

	

	
		
		ok_Hash.put("tMSSqlRow_28", false);
		start_Hash.put("tMSSqlRow_28", System.currentTimeMillis());
		
	
	currentComponent="tMSSqlRow_28";

	
					if(execStat) {
						runStat.updateStatOnConnection(resourceMap,iterateId,0,0,"row18");
					}
				
		int tos_count_tMSSqlRow_28 = 0;
		

	java.sql.Connection conn_tMSSqlRow_28 = null;
	String query_tMSSqlRow_28 = "";
	boolean whetherReject_tMSSqlRow_28 = false;
				conn_tMSSqlRow_28 = (java.sql.Connection)globalMap.get("conn_tMSSqlConnection_4");
			
    resourceMap.put("conn_tMSSqlRow_28", conn_tMSSqlRow_28);
        java.sql.Statement stmt_tMSSqlRow_28 = conn_tMSSqlRow_28.createStatement();
        resourceMap.put("stmt_tMSSqlRow_28", stmt_tMSSqlRow_28);

 



/**
 * [tMSSqlRow_28 begin ] stop
 */




	
	/**
	 * [tLogRow_29 begin ] start
	 */

	

	
		
		ok_Hash.put("tLogRow_29", false);
		start_Hash.put("tLogRow_29", System.currentTimeMillis());
		
	
	currentComponent="tLogRow_29";

	
					if(execStat) {
						runStat.updateStatOnConnection(resourceMap,iterateId,0,0,"row77");
					}
				
		int tos_count_tLogRow_29 = 0;
		

	///////////////////////
		


	class Util_tLogRow_29 {
	
		String[] des_top = { ".", "-" };

        String[] des_data = { "-", "+" };

        String[] des_frame = { "|" }; 
        
        public void printLine(StringBuilder sb, int titleWidth, int dataWidth){
        
        	sb.append("+");
			for(int i=0; i<titleWidth+2; i++)
				sb.append("-");
			sb.append("+");
			for(int i=0; i<dataWidth+2; i++)
				sb.append("-");
        	sb.append("+" + "\n");
        }      

		public String print(String[] row, int nbLine){
			
			StringBuilder sb = new StringBuilder();
			
			    String title = "#" + nbLine + ". " + "tLogRow_29";
			    
		
			//step 1: get the max length of all the row[] member;
			int dataWidth = 5;		//the length of the string "value"	
			for(int i=0;i<row.length;i++) {
				if(row[i] == null && 4 > dataWidth) {
					dataWidth = 4;
				}
				else if(row[i] != null && row[i].length()>dataWidth) 
					dataWidth = row[i].length();
			}			
						
			int titleWidth = 12;
			
			int totalWidth = dataWidth + titleWidth + 5;
			
			//step 2: print the header with line number
			sb.append(".");
			for(int i=0 ; i<totalWidth ; i++)
				sb.append("-");			
			sb.append("." + "\n" + "|");
			
			int emptyCenterWidth = (totalWidth-title.length())/2;
			for(int i=0 ; i<emptyCenterWidth; i++)
				sb.append(" ");	
			sb.append(title);
			for(int i=0 ; i<totalWidth - emptyCenterWidth - title.length() ; i++)
				sb.append(" ");	
			sb.append("|" + "\n");
			
			//step 3: print "key" and "value"			
			printLine(sb,titleWidth,dataWidth);
			
			sb.append("|" + " key");
			for(int i=0; i<titleWidth-2; i++)
				sb.append(" ");
        	sb.append("|" + " value");
			for(int i=0; i<dataWidth-4; i++)
				sb.append(" ");
			sb.append("|" + "\n");
			
			printLine(sb,titleWidth,dataWidth);
			
			//step 4: print dataset
			
			//for(int i=0; i<row.length; i++){
				sb.append("| " + "errorCode");
				for(int i=0; i<titleWidth -"errorCode".length()+ 1 ;i++)
					sb.append(" ");
				sb.append("| " + row[0]);
				for(int i=0; row[0] == null && i<dataWidth - 3 || row[0] != null && i<dataWidth -row[0].length()+ 1 ;i++)
					sb.append(" ");
				sb.append("|" + "\n");
			
			//}

			
			//for(int i=0; i<row.length; i++){
				sb.append("| " + "errorMessage");
				for(int i=0; i<titleWidth -"errorMessage".length()+ 1 ;i++)
					sb.append(" ");
				sb.append("| " + row[1]);
				for(int i=0; row[1] == null && i<dataWidth - 3 || row[1] != null && i<dataWidth -row[1].length()+ 1 ;i++)
					sb.append(" ");
				sb.append("|" + "\n");
			
			//}

			
			//step 5: print a line gap
			printLine(sb,titleWidth,dataWidth);
			return sb.toString();

		}


	}

	Util_tLogRow_29 util_tLogRow_29 = new Util_tLogRow_29();




	java.io.PrintStream consoleOut_tLogRow_29 = null;
	if (globalMap.get("tLogRow_CONSOLE")!=null){
        consoleOut_tLogRow_29 = (java.io.PrintStream) globalMap.get("tLogRow_CONSOLE");
    }else{
        consoleOut_tLogRow_29 = new java.io.PrintStream(new java.io.BufferedOutputStream(System.out));
        globalMap.put("tLogRow_CONSOLE",consoleOut_tLogRow_29);
    }

 		StringBuilder strBuffer_tLogRow_29 = null;
		int nb_line_tLogRow_29 = 0;
///////////////////////    			



 



/**
 * [tLogRow_29 begin ] stop
 */



	
	/**
	 * [tMSSqlRow_27 begin ] start
	 */

	

	
		
		ok_Hash.put("tMSSqlRow_27", false);
		start_Hash.put("tMSSqlRow_27", System.currentTimeMillis());
		
	
	currentComponent="tMSSqlRow_27";

	
		int tos_count_tMSSqlRow_27 = 0;
		

	java.sql.Connection conn_tMSSqlRow_27 = null;
	String query_tMSSqlRow_27 = "";
	boolean whetherReject_tMSSqlRow_27 = false;
				conn_tMSSqlRow_27 = (java.sql.Connection)globalMap.get("conn_tMSSqlConnection_4");
			
    resourceMap.put("conn_tMSSqlRow_27", conn_tMSSqlRow_27);
        java.sql.Statement stmt_tMSSqlRow_27 = conn_tMSSqlRow_27.createStatement();
        resourceMap.put("stmt_tMSSqlRow_27", stmt_tMSSqlRow_27);

 



/**
 * [tMSSqlRow_27 begin ] stop
 */
	
	/**
	 * [tMSSqlRow_27 main ] start
	 */

	

	
	
	currentComponent="tMSSqlRow_27";

	

		row18 = null;
		
		row77 = null;
		
query_tMSSqlRow_27 = "\nIf Exists ( SELECT name \n            FROM sysobjects  \n            WHERE name = 'getOptionsListText'\n)\n\n\nDROP F"
+"UNCTION getOptionsListText";
whetherReject_tMSSqlRow_27 = false;
globalMap.put("tMSSqlRow_27_QUERY",query_tMSSqlRow_27);
try {
		stmt_tMSSqlRow_27.execute(query_tMSSqlRow_27);
		
	} catch (java.lang.Exception e) {
		whetherReject_tMSSqlRow_27 = true;
		
				row77 = new row77Struct();
				
				row77.errorCode = ((java.sql.SQLException)e).getSQLState();
				row77.errorMessage = e.getMessage() + " - Line: " + tos_count_tMSSqlRow_27;
				
	}
	
	if(!whetherReject_tMSSqlRow_27) {
		
					row18 = new row18Struct();
					
	}
	

 


	tos_count_tMSSqlRow_27++;

/**
 * [tMSSqlRow_27 main ] stop
 */
	
	/**
	 * [tMSSqlRow_27 process_data_begin ] start
	 */

	

	
	
	currentComponent="tMSSqlRow_27";

	

 



/**
 * [tMSSqlRow_27 process_data_begin ] stop
 */
// Start of branch "row18"
if(row18 != null) { 
			row78 = null;



	
	/**
	 * [tMSSqlRow_28 main ] start
	 */

	

	
	
	currentComponent="tMSSqlRow_28";

	
					if(execStat){
						runStat.updateStatOnConnection(iterateId,1,1
						
							,"row18"
						
						);
					}
					

		row78 = null;
		
query_tMSSqlRow_28 = "\nCREATE FUNCTION getOptionsListText(@procTyp varchar(10),@procNbr numeric(10),@sec numeric(10) ) returns VARCHAR(MAX)"
+"\nAS\nBEGIN\n\n    declare @buffer varchar(max)\n    declare @item varchar(max)\n    declare @options varchar(max)\n    d"
+"eclare @obs1 varchar(max)\n    \n    declare @i1 int,@i2 int,@i3 int\n    \n    declare @variable varchar(30)\n    decla"
+"re @text varchar(max)\n    declare @remaining varchar(max)\n	set @buffer=''\n	DECLARE cur1 cursor FOR\n	select notes1 fr"
+"om IP_ACTION where proc_typ=@procTyp and proc_nbr=@procNbr and action_nbr=@sec\n		\n	\n    DECLARE cur3 cursor FOR \n   "
+" select  action_option_text,option_long_name from ip_action_options ao , cf_list_options lo where ao.list_code=lo.list_c"
+"ode and ao.option_nbr=lo.option_nbr\n    and proc_typ=@procTyp and proc_nbr=@procNbr and action_nbr=@sec\n    order by a"
+"o.option_nbr\n\n	--load notes1 from ip_action\n	OPEN cur1\n	fetch NEXT FROM cur1 INTO @obs1\n	IF (@@FETCH_STATUS <> -1) "
+" \n	begin\n		set @buffer=@obs1\n		\n		close cur1\n		deallocate cur1\n\n		OPEN cur3  \n		WHILE (0 = 0)  \n		 BEGIN\n			fe"
+"tch NEXT FROM cur3 INTO @options, @item\n			IF (@@FETCH_STATUS = -1)  \n			BREAK\n			\n			set @text=@item\n			--PRINT '-"
+"-------------'\n			--PRINT @TEXT\n			--PRINT @OPTIONS\n			set @i1=patindex('%<{%',@text)\n			\n			while @i1>0\n			begin"
+"\n			\n				set @i2=patindex('%}>%',@TEXT)\n				if @i2>0\n					begin \n						set @variable=substring(@text,@i1,@i2-@i1+2)"
+"\n						--print @variable		\n						\n						set @i3=patindex('%'+@variable+'%',@options)\n						if (@i3>0)\n						begin\n	"
+"						\n							set @remaining = substring(@options,@i3+LEN(@variable)+2,LEN(@options))\n							set @i3=patindex('%}>%',@"
+"remaining)\n							set @remaining=LEFT(@remaining,@i3-1)\n							set @item=REPLACE(@item,@variable,@remaining)						\n		"
+"					\n						end			\n								\n						set @text=SUBSTRING(@text,@i2+2,LEN(@TEXT))\n					end\n					\n				\n				set @i1=pat"
+"index('%<{%',@text)\n				\n			end\n		\n			set @buffer = @buffer+char(13)+char(10)+@item\n\n		END  \n		 \n		 \n		--print "
+"@buffer \n		close cur3 \n		deallocate cur3\n	end\n	return @buffer \nEND\n";
whetherReject_tMSSqlRow_28 = false;
globalMap.put("tMSSqlRow_28_QUERY",query_tMSSqlRow_28);
try {
		stmt_tMSSqlRow_28.execute(query_tMSSqlRow_28);
		
	} catch (java.lang.Exception e) {
		whetherReject_tMSSqlRow_28 = true;
		
				row78 = new row78Struct();
				
				row78.errorCode = ((java.sql.SQLException)e).getSQLState();
				row78.errorMessage = e.getMessage() + " - Line: " + tos_count_tMSSqlRow_28;
				
	}
	
	if(!whetherReject_tMSSqlRow_28) {
		
	}
	

 


	tos_count_tMSSqlRow_28++;

/**
 * [tMSSqlRow_28 main ] stop
 */
	
	/**
	 * [tMSSqlRow_28 process_data_begin ] start
	 */

	

	
	
	currentComponent="tMSSqlRow_28";

	

 



/**
 * [tMSSqlRow_28 process_data_begin ] stop
 */
// Start of branch "row78"
if(row78 != null) { 



	
	/**
	 * [tLogRow_30 main ] start
	 */

	

	
	
	currentComponent="tLogRow_30";

	
					if(execStat){
						runStat.updateStatOnConnection(iterateId,1,1
						
							,"row78"
						
						);
					}
					
///////////////////////		
						



				strBuffer_tLogRow_30 = new StringBuilder();




   				
	    		if(row78.errorCode != null) { //              
                    							
       
				strBuffer_tLogRow_30.append(
				                String.valueOf(row78.errorCode)							
				);


							
	    		} //  			

    			strBuffer_tLogRow_30.append("|");
    			


   				
	    		if(row78.errorMessage != null) { //              
                    							
       
				strBuffer_tLogRow_30.append(
				                String.valueOf(row78.errorMessage)							
				);


							
	    		} //  			

				
				String[] row_tLogRow_30 = new String[2];
   				
	    		if(row78.errorCode != null) { //              
                 row_tLogRow_30[0]=    						    
				                String.valueOf(row78.errorCode)			
					          ;	
							
	    		} //			
    			   				
	    		if(row78.errorMessage != null) { //              
                 row_tLogRow_30[1]=    						    
				                String.valueOf(row78.errorMessage)			
					          ;	
							
	    		} //			
    			
				nb_line_tLogRow_30++;
                consoleOut_tLogRow_30.println(util_tLogRow_30.print(row_tLogRow_30,nb_line_tLogRow_30));
                consoleOut_tLogRow_30.flush();
//////

//////                    
                    
///////////////////////    			

 


	tos_count_tLogRow_30++;

/**
 * [tLogRow_30 main ] stop
 */
	
	/**
	 * [tLogRow_30 process_data_begin ] start
	 */

	

	
	
	currentComponent="tLogRow_30";

	

 



/**
 * [tLogRow_30 process_data_begin ] stop
 */
	
	/**
	 * [tLogRow_30 process_data_end ] start
	 */

	

	
	
	currentComponent="tLogRow_30";

	

 



/**
 * [tLogRow_30 process_data_end ] stop
 */

} // End of branch "row78"




	
	/**
	 * [tMSSqlRow_28 process_data_end ] start
	 */

	

	
	
	currentComponent="tMSSqlRow_28";

	

 



/**
 * [tMSSqlRow_28 process_data_end ] stop
 */

} // End of branch "row18"




// Start of branch "row77"
if(row77 != null) { 



	
	/**
	 * [tLogRow_29 main ] start
	 */

	

	
	
	currentComponent="tLogRow_29";

	
					if(execStat){
						runStat.updateStatOnConnection(iterateId,1,1
						
							,"row77"
						
						);
					}
					
///////////////////////		
						



				strBuffer_tLogRow_29 = new StringBuilder();




   				
	    		if(row77.errorCode != null) { //              
                    							
       
				strBuffer_tLogRow_29.append(
				                String.valueOf(row77.errorCode)							
				);


							
	    		} //  			

    			strBuffer_tLogRow_29.append("|");
    			


   				
	    		if(row77.errorMessage != null) { //              
                    							
       
				strBuffer_tLogRow_29.append(
				                String.valueOf(row77.errorMessage)							
				);


							
	    		} //  			

				
				String[] row_tLogRow_29 = new String[2];
   				
	    		if(row77.errorCode != null) { //              
                 row_tLogRow_29[0]=    						    
				                String.valueOf(row77.errorCode)			
					          ;	
							
	    		} //			
    			   				
	    		if(row77.errorMessage != null) { //              
                 row_tLogRow_29[1]=    						    
				                String.valueOf(row77.errorMessage)			
					          ;	
							
	    		} //			
    			
				nb_line_tLogRow_29++;
                consoleOut_tLogRow_29.println(util_tLogRow_29.print(row_tLogRow_29,nb_line_tLogRow_29));
                consoleOut_tLogRow_29.flush();
//////

//////                    
                    
///////////////////////    			

 


	tos_count_tLogRow_29++;

/**
 * [tLogRow_29 main ] stop
 */
	
	/**
	 * [tLogRow_29 process_data_begin ] start
	 */

	

	
	
	currentComponent="tLogRow_29";

	

 



/**
 * [tLogRow_29 process_data_begin ] stop
 */
	
	/**
	 * [tLogRow_29 process_data_end ] start
	 */

	

	
	
	currentComponent="tLogRow_29";

	

 



/**
 * [tLogRow_29 process_data_end ] stop
 */

} // End of branch "row77"




	
	/**
	 * [tMSSqlRow_27 process_data_end ] start
	 */

	

	
	
	currentComponent="tMSSqlRow_27";

	

 



/**
 * [tMSSqlRow_27 process_data_end ] stop
 */
	
	/**
	 * [tMSSqlRow_27 end ] start
	 */

	

	
	
	currentComponent="tMSSqlRow_27";

	

	
        stmt_tMSSqlRow_27.close();
        resourceMap.remove("stmt_tMSSqlRow_27");
    resourceMap.put("statementClosed_tMSSqlRow_27", true);
    resourceMap.put("finish_tMSSqlRow_27", true);
 

ok_Hash.put("tMSSqlRow_27", true);
end_Hash.put("tMSSqlRow_27", System.currentTimeMillis());




/**
 * [tMSSqlRow_27 end ] stop
 */

	
	/**
	 * [tMSSqlRow_28 end ] start
	 */

	

	
	
	currentComponent="tMSSqlRow_28";

	

	
        stmt_tMSSqlRow_28.close();
        resourceMap.remove("stmt_tMSSqlRow_28");
    resourceMap.put("statementClosed_tMSSqlRow_28", true);
    resourceMap.put("finish_tMSSqlRow_28", true);
				if(execStat){
			  		runStat.updateStat(resourceMap,iterateId,2,0,"row18");
			  	}
			  	
 

ok_Hash.put("tMSSqlRow_28", true);
end_Hash.put("tMSSqlRow_28", System.currentTimeMillis());




/**
 * [tMSSqlRow_28 end ] stop
 */

	
	/**
	 * [tLogRow_30 end ] start
	 */

	

	
	
	currentComponent="tLogRow_30";

	


//////
//////
globalMap.put("tLogRow_30_NB_LINE",nb_line_tLogRow_30);

///////////////////////    			

				if(execStat){
			  		runStat.updateStat(resourceMap,iterateId,2,0,"row78");
			  	}
			  	
 

ok_Hash.put("tLogRow_30", true);
end_Hash.put("tLogRow_30", System.currentTimeMillis());




/**
 * [tLogRow_30 end ] stop
 */







	
	/**
	 * [tLogRow_29 end ] start
	 */

	

	
	
	currentComponent="tLogRow_29";

	


//////
//////
globalMap.put("tLogRow_29_NB_LINE",nb_line_tLogRow_29);

///////////////////////    			

				if(execStat){
			  		runStat.updateStat(resourceMap,iterateId,2,0,"row77");
			  	}
			  	
 

ok_Hash.put("tLogRow_29", true);
end_Hash.put("tLogRow_29", System.currentTimeMillis());




/**
 * [tLogRow_29 end ] stop
 */



				}//end the resume

				
				    			if(resumeEntryMethodName == null || globalResumeTicket){
				    				resumeUtil.addLog("CHECKPOINT", "CONNECTION:SUBJOB_OK:tMSSqlRow_27:OnSubjobOk", "", Thread.currentThread().getId() + "", "", "", "", "", "");
								}	    				    			
					    	
								if(execStat){    	
									runStat.updateStatOnConnection("OnSubjobOk16", 0, "ok");
								} 
							
							tMSSqlRow_29Process(globalMap); 
						



	
			}catch(java.lang.Exception e){	
				
				TalendException te = new TalendException(e, currentComponent, globalMap);
				
				throw te;
			}catch(java.lang.Error error){	
				
					runStat.stopThreadStat();
				
				throw error;
			}finally{
				
				try{
					
	
	/**
	 * [tMSSqlRow_27 finally ] start
	 */

	

	
	
	currentComponent="tMSSqlRow_27";

	

    if (resourceMap.get("statementClosed_tMSSqlRow_27") == null) {
            java.sql.Statement stmtToClose_tMSSqlRow_27 = null;
            if ((stmtToClose_tMSSqlRow_27 = (java.sql.Statement) resourceMap.remove("stmt_tMSSqlRow_27")) != null) {
                stmtToClose_tMSSqlRow_27.close();
            }
    }
 



/**
 * [tMSSqlRow_27 finally ] stop
 */

	
	/**
	 * [tMSSqlRow_28 finally ] start
	 */

	

	
	
	currentComponent="tMSSqlRow_28";

	

    if (resourceMap.get("statementClosed_tMSSqlRow_28") == null) {
            java.sql.Statement stmtToClose_tMSSqlRow_28 = null;
            if ((stmtToClose_tMSSqlRow_28 = (java.sql.Statement) resourceMap.remove("stmt_tMSSqlRow_28")) != null) {
                stmtToClose_tMSSqlRow_28.close();
            }
    }
 



/**
 * [tMSSqlRow_28 finally ] stop
 */

	
	/**
	 * [tLogRow_30 finally ] start
	 */

	

	
	
	currentComponent="tLogRow_30";

	

 



/**
 * [tLogRow_30 finally ] stop
 */







	
	/**
	 * [tLogRow_29 finally ] start
	 */

	

	
	
	currentComponent="tLogRow_29";

	

 



/**
 * [tLogRow_29 finally ] stop
 */



				}catch(java.lang.Exception e){	
					//ignore
				}catch(java.lang.Error error){
					//ignore
				}
				resourceMap = null;
			}
		

		globalMap.put("tMSSqlRow_27_SUBPROCESS_STATE", 1);
	}
	


public static class row80Struct implements routines.system.IPersistableRow<row80Struct> {
    final static byte[] commonByteArrayLock_WIPO_PROJECTS_F_IPAS_ENV_CRE = new byte[0];
    static byte[] commonByteArray_WIPO_PROJECTS_F_IPAS_ENV_CRE = new byte[0];

	
			    public String errorCode;

				public String getErrorCode () {
					return this.errorCode;
				}
				
			    public String errorMessage;

				public String getErrorMessage () {
					return this.errorMessage;
				}
				



	private String readString(ObjectInputStream dis) throws IOException{
		String strReturn = null;
		int length = 0;
        length = dis.readInt();
		if (length == -1) {
			strReturn = null;
		} else {
			if(length > commonByteArray_WIPO_PROJECTS_F_IPAS_ENV_CRE.length) {
				if(length < 1024 && commonByteArray_WIPO_PROJECTS_F_IPAS_ENV_CRE.length == 0) {
   					commonByteArray_WIPO_PROJECTS_F_IPAS_ENV_CRE = new byte[1024];
				} else {
   					commonByteArray_WIPO_PROJECTS_F_IPAS_ENV_CRE = new byte[2 * length];
   				}
			}
			dis.readFully(commonByteArray_WIPO_PROJECTS_F_IPAS_ENV_CRE, 0, length);
			strReturn = new String(commonByteArray_WIPO_PROJECTS_F_IPAS_ENV_CRE, 0, length, utf8Charset);
		}
		return strReturn;
	}

    private void writeString(String str, ObjectOutputStream dos) throws IOException{
		if(str == null) {
            dos.writeInt(-1);
		} else {
            byte[] byteArray = str.getBytes(utf8Charset);
	    	dos.writeInt(byteArray.length);
			dos.write(byteArray);
    	}
    }

    public void readData(ObjectInputStream dis) {

		synchronized(commonByteArrayLock_WIPO_PROJECTS_F_IPAS_ENV_CRE) {

        	try {

        		int length = 0;
		
					this.errorCode = readString(dis);
					
					this.errorMessage = readString(dis);
					
        	} catch (IOException e) {
	            throw new RuntimeException(e);

		

        }

		

      }


    }

    public void writeData(ObjectOutputStream dos) {
        try {

		
					// String
				
						writeString(this.errorCode,dos);
					
					// String
				
						writeString(this.errorMessage,dos);
					
        	} catch (IOException e) {
	            throw new RuntimeException(e);
        }


    }


    public String toString() {

		StringBuilder sb = new StringBuilder();
		sb.append(super.toString());
		sb.append("[");
		sb.append("errorCode="+errorCode);
		sb.append(",errorMessage="+errorMessage);
	    sb.append("]");

	    return sb.toString();
    }

    /**
     * Compare keys
     */
    public int compareTo(row80Struct other) {

		int returnValue = -1;
		
	    return returnValue;
    }


    private int checkNullsAndCompare(Object object1, Object object2) {
        int returnValue = 0;
		if (object1 instanceof Comparable && object2 instanceof Comparable) {
            returnValue = ((Comparable) object1).compareTo(object2);
        } else if (object1 != null && object2 != null) {
            returnValue = compareStrings(object1.toString(), object2.toString());
        } else if (object1 == null && object2 != null) {
            returnValue = 1;
        } else if (object1 != null && object2 == null) {
            returnValue = -1;
        } else {
            returnValue = 0;
        }

        return returnValue;
    }

    private int compareStrings(String string1, String string2) {
        return string1.compareTo(string2);
    }


}

public static class row23Struct implements routines.system.IPersistableRow<row23Struct> {
    final static byte[] commonByteArrayLock_WIPO_PROJECTS_F_IPAS_ENV_CRE = new byte[0];
    static byte[] commonByteArray_WIPO_PROJECTS_F_IPAS_ENV_CRE = new byte[0];

	



    public void readData(ObjectInputStream dis) {

		synchronized(commonByteArrayLock_WIPO_PROJECTS_F_IPAS_ENV_CRE) {

        	try {

        		int length = 0;
		

		

        }

		
			finally {}
		

      }


    }

    public void writeData(ObjectOutputStream dos) {
        try {

		
        }

			finally {}
		

    }


    public String toString() {

		StringBuilder sb = new StringBuilder();
		sb.append(super.toString());
		sb.append("[");
	    sb.append("]");

	    return sb.toString();
    }

    /**
     * Compare keys
     */
    public int compareTo(row23Struct other) {

		int returnValue = -1;
		
	    return returnValue;
    }


    private int checkNullsAndCompare(Object object1, Object object2) {
        int returnValue = 0;
		if (object1 instanceof Comparable && object2 instanceof Comparable) {
            returnValue = ((Comparable) object1).compareTo(object2);
        } else if (object1 != null && object2 != null) {
            returnValue = compareStrings(object1.toString(), object2.toString());
        } else if (object1 == null && object2 != null) {
            returnValue = 1;
        } else if (object1 != null && object2 == null) {
            returnValue = -1;
        } else {
            returnValue = 0;
        }

        return returnValue;
    }

    private int compareStrings(String string1, String string2) {
        return string1.compareTo(string2);
    }


}

public static class row79Struct implements routines.system.IPersistableRow<row79Struct> {
    final static byte[] commonByteArrayLock_WIPO_PROJECTS_F_IPAS_ENV_CRE = new byte[0];
    static byte[] commonByteArray_WIPO_PROJECTS_F_IPAS_ENV_CRE = new byte[0];

	
			    public String errorCode;

				public String getErrorCode () {
					return this.errorCode;
				}
				
			    public String errorMessage;

				public String getErrorMessage () {
					return this.errorMessage;
				}
				



	private String readString(ObjectInputStream dis) throws IOException{
		String strReturn = null;
		int length = 0;
        length = dis.readInt();
		if (length == -1) {
			strReturn = null;
		} else {
			if(length > commonByteArray_WIPO_PROJECTS_F_IPAS_ENV_CRE.length) {
				if(length < 1024 && commonByteArray_WIPO_PROJECTS_F_IPAS_ENV_CRE.length == 0) {
   					commonByteArray_WIPO_PROJECTS_F_IPAS_ENV_CRE = new byte[1024];
				} else {
   					commonByteArray_WIPO_PROJECTS_F_IPAS_ENV_CRE = new byte[2 * length];
   				}
			}
			dis.readFully(commonByteArray_WIPO_PROJECTS_F_IPAS_ENV_CRE, 0, length);
			strReturn = new String(commonByteArray_WIPO_PROJECTS_F_IPAS_ENV_CRE, 0, length, utf8Charset);
		}
		return strReturn;
	}

    private void writeString(String str, ObjectOutputStream dos) throws IOException{
		if(str == null) {
            dos.writeInt(-1);
		} else {
            byte[] byteArray = str.getBytes(utf8Charset);
	    	dos.writeInt(byteArray.length);
			dos.write(byteArray);
    	}
    }

    public void readData(ObjectInputStream dis) {

		synchronized(commonByteArrayLock_WIPO_PROJECTS_F_IPAS_ENV_CRE) {

        	try {

        		int length = 0;
		
					this.errorCode = readString(dis);
					
					this.errorMessage = readString(dis);
					
        	} catch (IOException e) {
	            throw new RuntimeException(e);

		

        }

		

      }


    }

    public void writeData(ObjectOutputStream dos) {
        try {

		
					// String
				
						writeString(this.errorCode,dos);
					
					// String
				
						writeString(this.errorMessage,dos);
					
        	} catch (IOException e) {
	            throw new RuntimeException(e);
        }


    }


    public String toString() {

		StringBuilder sb = new StringBuilder();
		sb.append(super.toString());
		sb.append("[");
		sb.append("errorCode="+errorCode);
		sb.append(",errorMessage="+errorMessage);
	    sb.append("]");

	    return sb.toString();
    }

    /**
     * Compare keys
     */
    public int compareTo(row79Struct other) {

		int returnValue = -1;
		
	    return returnValue;
    }


    private int checkNullsAndCompare(Object object1, Object object2) {
        int returnValue = 0;
		if (object1 instanceof Comparable && object2 instanceof Comparable) {
            returnValue = ((Comparable) object1).compareTo(object2);
        } else if (object1 != null && object2 != null) {
            returnValue = compareStrings(object1.toString(), object2.toString());
        } else if (object1 == null && object2 != null) {
            returnValue = 1;
        } else if (object1 != null && object2 == null) {
            returnValue = -1;
        } else {
            returnValue = 0;
        }

        return returnValue;
    }

    private int compareStrings(String string1, String string2) {
        return string1.compareTo(string2);
    }


}
public void tMSSqlRow_29Process(final java.util.Map<String, Object> globalMap) throws TalendException {
	globalMap.put("tMSSqlRow_29_SUBPROCESS_STATE", 0);

 final boolean execStat = this.execStat;
	
		String iterateId = "";
	
	
	String currentComponent = "";
	java.util.Map<String, Object> resourceMap = new java.util.HashMap<String, Object>();

	try {
			// TDI-39566 avoid throwing an useless Exception
			boolean resumeIt = true;
			if (globalResumeTicket == false && resumeEntryMethodName != null) {
				String currentMethodName = new java.lang.Exception().getStackTrace()[0].getMethodName();
				resumeIt = resumeEntryMethodName.equals(currentMethodName);
			}
			if (resumeIt || globalResumeTicket) { //start the resume
				globalResumeTicket = true;



		row23Struct row23 = new row23Struct();
row80Struct row80 = new row80Struct();
row79Struct row79 = new row79Struct();





	
	/**
	 * [tLogRow_32 begin ] start
	 */

	

	
		
		ok_Hash.put("tLogRow_32", false);
		start_Hash.put("tLogRow_32", System.currentTimeMillis());
		
	
	currentComponent="tLogRow_32";

	
					if(execStat) {
						runStat.updateStatOnConnection(resourceMap,iterateId,0,0,"row80");
					}
				
		int tos_count_tLogRow_32 = 0;
		

	///////////////////////
		


	class Util_tLogRow_32 {
	
		String[] des_top = { ".", "-" };

        String[] des_data = { "-", "+" };

        String[] des_frame = { "|" }; 
        
        public void printLine(StringBuilder sb, int titleWidth, int dataWidth){
        
        	sb.append("+");
			for(int i=0; i<titleWidth+2; i++)
				sb.append("-");
			sb.append("+");
			for(int i=0; i<dataWidth+2; i++)
				sb.append("-");
        	sb.append("+" + "\n");
        }      

		public String print(String[] row, int nbLine){
			
			StringBuilder sb = new StringBuilder();
			
			    String title = "#" + nbLine + ". " + "tLogRow_32";
			    
		
			//step 1: get the max length of all the row[] member;
			int dataWidth = 5;		//the length of the string "value"	
			for(int i=0;i<row.length;i++) {
				if(row[i] == null && 4 > dataWidth) {
					dataWidth = 4;
				}
				else if(row[i] != null && row[i].length()>dataWidth) 
					dataWidth = row[i].length();
			}			
						
			int titleWidth = 12;
			
			int totalWidth = dataWidth + titleWidth + 5;
			
			//step 2: print the header with line number
			sb.append(".");
			for(int i=0 ; i<totalWidth ; i++)
				sb.append("-");			
			sb.append("." + "\n" + "|");
			
			int emptyCenterWidth = (totalWidth-title.length())/2;
			for(int i=0 ; i<emptyCenterWidth; i++)
				sb.append(" ");	
			sb.append(title);
			for(int i=0 ; i<totalWidth - emptyCenterWidth - title.length() ; i++)
				sb.append(" ");	
			sb.append("|" + "\n");
			
			//step 3: print "key" and "value"			
			printLine(sb,titleWidth,dataWidth);
			
			sb.append("|" + " key");
			for(int i=0; i<titleWidth-2; i++)
				sb.append(" ");
        	sb.append("|" + " value");
			for(int i=0; i<dataWidth-4; i++)
				sb.append(" ");
			sb.append("|" + "\n");
			
			printLine(sb,titleWidth,dataWidth);
			
			//step 4: print dataset
			
			//for(int i=0; i<row.length; i++){
				sb.append("| " + "errorCode");
				for(int i=0; i<titleWidth -"errorCode".length()+ 1 ;i++)
					sb.append(" ");
				sb.append("| " + row[0]);
				for(int i=0; row[0] == null && i<dataWidth - 3 || row[0] != null && i<dataWidth -row[0].length()+ 1 ;i++)
					sb.append(" ");
				sb.append("|" + "\n");
			
			//}

			
			//for(int i=0; i<row.length; i++){
				sb.append("| " + "errorMessage");
				for(int i=0; i<titleWidth -"errorMessage".length()+ 1 ;i++)
					sb.append(" ");
				sb.append("| " + row[1]);
				for(int i=0; row[1] == null && i<dataWidth - 3 || row[1] != null && i<dataWidth -row[1].length()+ 1 ;i++)
					sb.append(" ");
				sb.append("|" + "\n");
			
			//}

			
			//step 5: print a line gap
			printLine(sb,titleWidth,dataWidth);
			return sb.toString();

		}


	}

	Util_tLogRow_32 util_tLogRow_32 = new Util_tLogRow_32();




	java.io.PrintStream consoleOut_tLogRow_32 = null;
	if (globalMap.get("tLogRow_CONSOLE")!=null){
        consoleOut_tLogRow_32 = (java.io.PrintStream) globalMap.get("tLogRow_CONSOLE");
    }else{
        consoleOut_tLogRow_32 = new java.io.PrintStream(new java.io.BufferedOutputStream(System.out));
        globalMap.put("tLogRow_CONSOLE",consoleOut_tLogRow_32);
    }

 		StringBuilder strBuffer_tLogRow_32 = null;
		int nb_line_tLogRow_32 = 0;
///////////////////////    			



 



/**
 * [tLogRow_32 begin ] stop
 */



	
	/**
	 * [tMSSqlRow_30 begin ] start
	 */

	

	
		
		ok_Hash.put("tMSSqlRow_30", false);
		start_Hash.put("tMSSqlRow_30", System.currentTimeMillis());
		
	
	currentComponent="tMSSqlRow_30";

	
					if(execStat) {
						runStat.updateStatOnConnection(resourceMap,iterateId,0,0,"row23");
					}
				
		int tos_count_tMSSqlRow_30 = 0;
		

	java.sql.Connection conn_tMSSqlRow_30 = null;
	String query_tMSSqlRow_30 = "";
	boolean whetherReject_tMSSqlRow_30 = false;
				conn_tMSSqlRow_30 = (java.sql.Connection)globalMap.get("conn_tMSSqlConnection_4");
			
    resourceMap.put("conn_tMSSqlRow_30", conn_tMSSqlRow_30);
        java.sql.Statement stmt_tMSSqlRow_30 = conn_tMSSqlRow_30.createStatement();
        resourceMap.put("stmt_tMSSqlRow_30", stmt_tMSSqlRow_30);

 



/**
 * [tMSSqlRow_30 begin ] stop
 */




	
	/**
	 * [tLogRow_31 begin ] start
	 */

	

	
		
		ok_Hash.put("tLogRow_31", false);
		start_Hash.put("tLogRow_31", System.currentTimeMillis());
		
	
	currentComponent="tLogRow_31";

	
					if(execStat) {
						runStat.updateStatOnConnection(resourceMap,iterateId,0,0,"row79");
					}
				
		int tos_count_tLogRow_31 = 0;
		

	///////////////////////
		


	class Util_tLogRow_31 {
	
		String[] des_top = { ".", "-" };

        String[] des_data = { "-", "+" };

        String[] des_frame = { "|" }; 
        
        public void printLine(StringBuilder sb, int titleWidth, int dataWidth){
        
        	sb.append("+");
			for(int i=0; i<titleWidth+2; i++)
				sb.append("-");
			sb.append("+");
			for(int i=0; i<dataWidth+2; i++)
				sb.append("-");
        	sb.append("+" + "\n");
        }      

		public String print(String[] row, int nbLine){
			
			StringBuilder sb = new StringBuilder();
			
			    String title = "#" + nbLine + ". " + "tLogRow_31";
			    
		
			//step 1: get the max length of all the row[] member;
			int dataWidth = 5;		//the length of the string "value"	
			for(int i=0;i<row.length;i++) {
				if(row[i] == null && 4 > dataWidth) {
					dataWidth = 4;
				}
				else if(row[i] != null && row[i].length()>dataWidth) 
					dataWidth = row[i].length();
			}			
						
			int titleWidth = 12;
			
			int totalWidth = dataWidth + titleWidth + 5;
			
			//step 2: print the header with line number
			sb.append(".");
			for(int i=0 ; i<totalWidth ; i++)
				sb.append("-");			
			sb.append("." + "\n" + "|");
			
			int emptyCenterWidth = (totalWidth-title.length())/2;
			for(int i=0 ; i<emptyCenterWidth; i++)
				sb.append(" ");	
			sb.append(title);
			for(int i=0 ; i<totalWidth - emptyCenterWidth - title.length() ; i++)
				sb.append(" ");	
			sb.append("|" + "\n");
			
			//step 3: print "key" and "value"			
			printLine(sb,titleWidth,dataWidth);
			
			sb.append("|" + " key");
			for(int i=0; i<titleWidth-2; i++)
				sb.append(" ");
        	sb.append("|" + " value");
			for(int i=0; i<dataWidth-4; i++)
				sb.append(" ");
			sb.append("|" + "\n");
			
			printLine(sb,titleWidth,dataWidth);
			
			//step 4: print dataset
			
			//for(int i=0; i<row.length; i++){
				sb.append("| " + "errorCode");
				for(int i=0; i<titleWidth -"errorCode".length()+ 1 ;i++)
					sb.append(" ");
				sb.append("| " + row[0]);
				for(int i=0; row[0] == null && i<dataWidth - 3 || row[0] != null && i<dataWidth -row[0].length()+ 1 ;i++)
					sb.append(" ");
				sb.append("|" + "\n");
			
			//}

			
			//for(int i=0; i<row.length; i++){
				sb.append("| " + "errorMessage");
				for(int i=0; i<titleWidth -"errorMessage".length()+ 1 ;i++)
					sb.append(" ");
				sb.append("| " + row[1]);
				for(int i=0; row[1] == null && i<dataWidth - 3 || row[1] != null && i<dataWidth -row[1].length()+ 1 ;i++)
					sb.append(" ");
				sb.append("|" + "\n");
			
			//}

			
			//step 5: print a line gap
			printLine(sb,titleWidth,dataWidth);
			return sb.toString();

		}


	}

	Util_tLogRow_31 util_tLogRow_31 = new Util_tLogRow_31();




	java.io.PrintStream consoleOut_tLogRow_31 = null;
	if (globalMap.get("tLogRow_CONSOLE")!=null){
        consoleOut_tLogRow_31 = (java.io.PrintStream) globalMap.get("tLogRow_CONSOLE");
    }else{
        consoleOut_tLogRow_31 = new java.io.PrintStream(new java.io.BufferedOutputStream(System.out));
        globalMap.put("tLogRow_CONSOLE",consoleOut_tLogRow_31);
    }

 		StringBuilder strBuffer_tLogRow_31 = null;
		int nb_line_tLogRow_31 = 0;
///////////////////////    			



 



/**
 * [tLogRow_31 begin ] stop
 */



	
	/**
	 * [tMSSqlRow_29 begin ] start
	 */

	

	
		
		ok_Hash.put("tMSSqlRow_29", false);
		start_Hash.put("tMSSqlRow_29", System.currentTimeMillis());
		
	
	currentComponent="tMSSqlRow_29";

	
		int tos_count_tMSSqlRow_29 = 0;
		

	java.sql.Connection conn_tMSSqlRow_29 = null;
	String query_tMSSqlRow_29 = "";
	boolean whetherReject_tMSSqlRow_29 = false;
				conn_tMSSqlRow_29 = (java.sql.Connection)globalMap.get("conn_tMSSqlConnection_4");
			
    resourceMap.put("conn_tMSSqlRow_29", conn_tMSSqlRow_29);
        java.sql.Statement stmt_tMSSqlRow_29 = conn_tMSSqlRow_29.createStatement();
        resourceMap.put("stmt_tMSSqlRow_29", stmt_tMSSqlRow_29);

 



/**
 * [tMSSqlRow_29 begin ] stop
 */
	
	/**
	 * [tMSSqlRow_29 main ] start
	 */

	

	
	
	currentComponent="tMSSqlRow_29";

	

		row23 = null;
		
		row79 = null;
		
query_tMSSqlRow_29 = "If Exists ( SELECT name \n            FROM sysobjects  \n            WHERE name = 'ImportPateProcessByBatches'\n       "
+"     AND type = 'P')\n	DROP PROCEDURE ImportPateProcessByBatches\n";
whetherReject_tMSSqlRow_29 = false;
globalMap.put("tMSSqlRow_29_QUERY",query_tMSSqlRow_29);
try {
		stmt_tMSSqlRow_29.execute(query_tMSSqlRow_29);
		
	} catch (java.lang.Exception e) {
		whetherReject_tMSSqlRow_29 = true;
		
				row79 = new row79Struct();
				
				row79.errorCode = ((java.sql.SQLException)e).getSQLState();
				row79.errorMessage = e.getMessage() + " - Line: " + tos_count_tMSSqlRow_29;
				
	}
	
	if(!whetherReject_tMSSqlRow_29) {
		
					row23 = new row23Struct();
					
	}
	

 


	tos_count_tMSSqlRow_29++;

/**
 * [tMSSqlRow_29 main ] stop
 */
	
	/**
	 * [tMSSqlRow_29 process_data_begin ] start
	 */

	

	
	
	currentComponent="tMSSqlRow_29";

	

 



/**
 * [tMSSqlRow_29 process_data_begin ] stop
 */
// Start of branch "row23"
if(row23 != null) { 
			row80 = null;



	
	/**
	 * [tMSSqlRow_30 main ] start
	 */

	

	
	
	currentComponent="tMSSqlRow_30";

	
					if(execStat){
						runStat.updateStatOnConnection(iterateId,1,1
						
							,"row23"
						
						);
					}
					

		row80 = null;
		
query_tMSSqlRow_30 = "CREATE PROCEDURE ImportPateProcessByBatches\nAS \n	BEGIN\n		SET NOCOUNT ON\n		\n		/* Procedure name: ImportPateProcessB"
+"yBatches\n		Input:  validated patents (with IND_IMPORT = 9)\n		Output:\n		create or replace procedure ImportPateProcessB"
+"yBatches as\n		*/\n		\n		DECLARE @time1                                    DATETIME \n\n		DECLARE cur1 cursor LOCAL FOR "
+"\n		SELECT 1\n		FROM   ["+ context.intermediateDB + "].[dbo].VW_import_patent (UPDLOCK)  \n		WHERE	 ind_import  = 9\n		\n		DECLARE @rec1                                    "
+" VARCHAR(200) /* SwisSQL (Oracle To SQL Server) : Table used in Cursor referenced here is not found in Metadata or Metad"
+"ata not Updated*/ \n		DECLARE @qty                                      FLOAT \n		DECLARE @stop                         "
+"            FLOAT \n		SET @stop  = 0 /* a new batch of patents is flagged as pending (from IND_IMPORT 9 to 0) */\n		\n		"
+"DECLARE @dummy									INT\n		\n		DECLARE @count		 INT \n		SET @count = 1 \n		WHILE (0 = 0) \n		BEGIN --( \n			IF @stop "
+"= 1 \n			BREAK\n\n			SET @qty  = 0 \n			\n			OPEN cur1 \n					SELECT @count = 1 \n		WHILE (0 = 0) \n			BEGIN --( \n				"
+"\n				fetch NEXT FROM cur1 INTO @dummy\n				IF (@@FETCH_STATUS = -1) or @qty = 100000 \n				BREAK\n\n				UPDATE   ["+ context.intermediateDB + "].[dbo].VW_import_patent   \n				SET	ind_import = 0 \n				 where current of cur1  \n				\n				SET @qty  = @qty + 1 \n		"
+"		SET @count=@count +1\n			END --) \n			\n			/* the stop condition is a batch ending in notfound */\n			\n			IF (@@FETCH"
+"_STATUS = -1) \n			BEGIN \n				SET @stop  = 1 \n			END\n   \n			/* close cursor to prepare for commit */\n			\n			\n			c"
+"lose cur1\n			\n			/* the batch is processed */\n			\n			EXEC IMPORTPATEPROCESS\n			\n			-- IMPLICIT_TRANSACTIONS is set"
+" to OFF\n			SELECT @count=@count +1\n		END --) \n		\n DEALLOCATE cur1\n\n		SET NOCOUNT OFF\n\n	END";
whetherReject_tMSSqlRow_30 = false;
globalMap.put("tMSSqlRow_30_QUERY",query_tMSSqlRow_30);
try {
		stmt_tMSSqlRow_30.execute(query_tMSSqlRow_30);
		
	} catch (java.lang.Exception e) {
		whetherReject_tMSSqlRow_30 = true;
		
				row80 = new row80Struct();
				
				row80.errorCode = ((java.sql.SQLException)e).getSQLState();
				row80.errorMessage = e.getMessage() + " - Line: " + tos_count_tMSSqlRow_30;
				
	}
	
	if(!whetherReject_tMSSqlRow_30) {
		
	}
	

 


	tos_count_tMSSqlRow_30++;

/**
 * [tMSSqlRow_30 main ] stop
 */
	
	/**
	 * [tMSSqlRow_30 process_data_begin ] start
	 */

	

	
	
	currentComponent="tMSSqlRow_30";

	

 



/**
 * [tMSSqlRow_30 process_data_begin ] stop
 */
// Start of branch "row80"
if(row80 != null) { 



	
	/**
	 * [tLogRow_32 main ] start
	 */

	

	
	
	currentComponent="tLogRow_32";

	
					if(execStat){
						runStat.updateStatOnConnection(iterateId,1,1
						
							,"row80"
						
						);
					}
					
///////////////////////		
						



				strBuffer_tLogRow_32 = new StringBuilder();




   				
	    		if(row80.errorCode != null) { //              
                    							
       
				strBuffer_tLogRow_32.append(
				                String.valueOf(row80.errorCode)							
				);


							
	    		} //  			

    			strBuffer_tLogRow_32.append("|");
    			


   				
	    		if(row80.errorMessage != null) { //              
                    							
       
				strBuffer_tLogRow_32.append(
				                String.valueOf(row80.errorMessage)							
				);


							
	    		} //  			

				
				String[] row_tLogRow_32 = new String[2];
   				
	    		if(row80.errorCode != null) { //              
                 row_tLogRow_32[0]=    						    
				                String.valueOf(row80.errorCode)			
					          ;	
							
	    		} //			
    			   				
	    		if(row80.errorMessage != null) { //              
                 row_tLogRow_32[1]=    						    
				                String.valueOf(row80.errorMessage)			
					          ;	
							
	    		} //			
    			
				nb_line_tLogRow_32++;
                consoleOut_tLogRow_32.println(util_tLogRow_32.print(row_tLogRow_32,nb_line_tLogRow_32));
                consoleOut_tLogRow_32.flush();
//////

//////                    
                    
///////////////////////    			

 


	tos_count_tLogRow_32++;

/**
 * [tLogRow_32 main ] stop
 */
	
	/**
	 * [tLogRow_32 process_data_begin ] start
	 */

	

	
	
	currentComponent="tLogRow_32";

	

 



/**
 * [tLogRow_32 process_data_begin ] stop
 */
	
	/**
	 * [tLogRow_32 process_data_end ] start
	 */

	

	
	
	currentComponent="tLogRow_32";

	

 



/**
 * [tLogRow_32 process_data_end ] stop
 */

} // End of branch "row80"




	
	/**
	 * [tMSSqlRow_30 process_data_end ] start
	 */

	

	
	
	currentComponent="tMSSqlRow_30";

	

 



/**
 * [tMSSqlRow_30 process_data_end ] stop
 */

} // End of branch "row23"




// Start of branch "row79"
if(row79 != null) { 



	
	/**
	 * [tLogRow_31 main ] start
	 */

	

	
	
	currentComponent="tLogRow_31";

	
					if(execStat){
						runStat.updateStatOnConnection(iterateId,1,1
						
							,"row79"
						
						);
					}
					
///////////////////////		
						



				strBuffer_tLogRow_31 = new StringBuilder();




   				
	    		if(row79.errorCode != null) { //              
                    							
       
				strBuffer_tLogRow_31.append(
				                String.valueOf(row79.errorCode)							
				);


							
	    		} //  			

    			strBuffer_tLogRow_31.append("|");
    			


   				
	    		if(row79.errorMessage != null) { //              
                    							
       
				strBuffer_tLogRow_31.append(
				                String.valueOf(row79.errorMessage)							
				);


							
	    		} //  			

				
				String[] row_tLogRow_31 = new String[2];
   				
	    		if(row79.errorCode != null) { //              
                 row_tLogRow_31[0]=    						    
				                String.valueOf(row79.errorCode)			
					          ;	
							
	    		} //			
    			   				
	    		if(row79.errorMessage != null) { //              
                 row_tLogRow_31[1]=    						    
				                String.valueOf(row79.errorMessage)			
					          ;	
							
	    		} //			
    			
				nb_line_tLogRow_31++;
                consoleOut_tLogRow_31.println(util_tLogRow_31.print(row_tLogRow_31,nb_line_tLogRow_31));
                consoleOut_tLogRow_31.flush();
//////

//////                    
                    
///////////////////////    			

 


	tos_count_tLogRow_31++;

/**
 * [tLogRow_31 main ] stop
 */
	
	/**
	 * [tLogRow_31 process_data_begin ] start
	 */

	

	
	
	currentComponent="tLogRow_31";

	

 



/**
 * [tLogRow_31 process_data_begin ] stop
 */
	
	/**
	 * [tLogRow_31 process_data_end ] start
	 */

	

	
	
	currentComponent="tLogRow_31";

	

 



/**
 * [tLogRow_31 process_data_end ] stop
 */

} // End of branch "row79"




	
	/**
	 * [tMSSqlRow_29 process_data_end ] start
	 */

	

	
	
	currentComponent="tMSSqlRow_29";

	

 



/**
 * [tMSSqlRow_29 process_data_end ] stop
 */
	
	/**
	 * [tMSSqlRow_29 end ] start
	 */

	

	
	
	currentComponent="tMSSqlRow_29";

	

	
        stmt_tMSSqlRow_29.close();
        resourceMap.remove("stmt_tMSSqlRow_29");
    resourceMap.put("statementClosed_tMSSqlRow_29", true);
    resourceMap.put("finish_tMSSqlRow_29", true);
 

ok_Hash.put("tMSSqlRow_29", true);
end_Hash.put("tMSSqlRow_29", System.currentTimeMillis());




/**
 * [tMSSqlRow_29 end ] stop
 */

	
	/**
	 * [tMSSqlRow_30 end ] start
	 */

	

	
	
	currentComponent="tMSSqlRow_30";

	

	
        stmt_tMSSqlRow_30.close();
        resourceMap.remove("stmt_tMSSqlRow_30");
    resourceMap.put("statementClosed_tMSSqlRow_30", true);
    resourceMap.put("finish_tMSSqlRow_30", true);
				if(execStat){
			  		runStat.updateStat(resourceMap,iterateId,2,0,"row23");
			  	}
			  	
 

ok_Hash.put("tMSSqlRow_30", true);
end_Hash.put("tMSSqlRow_30", System.currentTimeMillis());




/**
 * [tMSSqlRow_30 end ] stop
 */

	
	/**
	 * [tLogRow_32 end ] start
	 */

	

	
	
	currentComponent="tLogRow_32";

	


//////
//////
globalMap.put("tLogRow_32_NB_LINE",nb_line_tLogRow_32);

///////////////////////    			

				if(execStat){
			  		runStat.updateStat(resourceMap,iterateId,2,0,"row80");
			  	}
			  	
 

ok_Hash.put("tLogRow_32", true);
end_Hash.put("tLogRow_32", System.currentTimeMillis());




/**
 * [tLogRow_32 end ] stop
 */







	
	/**
	 * [tLogRow_31 end ] start
	 */

	

	
	
	currentComponent="tLogRow_31";

	


//////
//////
globalMap.put("tLogRow_31_NB_LINE",nb_line_tLogRow_31);

///////////////////////    			

				if(execStat){
			  		runStat.updateStat(resourceMap,iterateId,2,0,"row79");
			  	}
			  	
 

ok_Hash.put("tLogRow_31", true);
end_Hash.put("tLogRow_31", System.currentTimeMillis());




/**
 * [tLogRow_31 end ] stop
 */



				}//end the resume

				
				    			if(resumeEntryMethodName == null || globalResumeTicket){
				    				resumeUtil.addLog("CHECKPOINT", "CONNECTION:SUBJOB_OK:tMSSqlRow_29:OnSubjobOk", "", Thread.currentThread().getId() + "", "", "", "", "", "");
								}	    				    			
					    	
								if(execStat){    	
									runStat.updateStatOnConnection("OnSubjobOk30", 0, "ok");
								} 
							
							tMSSqlRow_31Process(globalMap); 
						



	
			}catch(java.lang.Exception e){	
				
				TalendException te = new TalendException(e, currentComponent, globalMap);
				
				throw te;
			}catch(java.lang.Error error){	
				
					runStat.stopThreadStat();
				
				throw error;
			}finally{
				
				try{
					
	
	/**
	 * [tMSSqlRow_29 finally ] start
	 */

	

	
	
	currentComponent="tMSSqlRow_29";

	

    if (resourceMap.get("statementClosed_tMSSqlRow_29") == null) {
            java.sql.Statement stmtToClose_tMSSqlRow_29 = null;
            if ((stmtToClose_tMSSqlRow_29 = (java.sql.Statement) resourceMap.remove("stmt_tMSSqlRow_29")) != null) {
                stmtToClose_tMSSqlRow_29.close();
            }
    }
 



/**
 * [tMSSqlRow_29 finally ] stop
 */

	
	/**
	 * [tMSSqlRow_30 finally ] start
	 */

	

	
	
	currentComponent="tMSSqlRow_30";

	

    if (resourceMap.get("statementClosed_tMSSqlRow_30") == null) {
            java.sql.Statement stmtToClose_tMSSqlRow_30 = null;
            if ((stmtToClose_tMSSqlRow_30 = (java.sql.Statement) resourceMap.remove("stmt_tMSSqlRow_30")) != null) {
                stmtToClose_tMSSqlRow_30.close();
            }
    }
 



/**
 * [tMSSqlRow_30 finally ] stop
 */

	
	/**
	 * [tLogRow_32 finally ] start
	 */

	

	
	
	currentComponent="tLogRow_32";

	

 



/**
 * [tLogRow_32 finally ] stop
 */







	
	/**
	 * [tLogRow_31 finally ] start
	 */

	

	
	
	currentComponent="tLogRow_31";

	

 



/**
 * [tLogRow_31 finally ] stop
 */



				}catch(java.lang.Exception e){	
					//ignore
				}catch(java.lang.Error error){
					//ignore
				}
				resourceMap = null;
			}
		

		globalMap.put("tMSSqlRow_29_SUBPROCESS_STATE", 1);
	}
	


public static class row82Struct implements routines.system.IPersistableRow<row82Struct> {
    final static byte[] commonByteArrayLock_WIPO_PROJECTS_F_IPAS_ENV_CRE = new byte[0];
    static byte[] commonByteArray_WIPO_PROJECTS_F_IPAS_ENV_CRE = new byte[0];

	
			    public String errorCode;

				public String getErrorCode () {
					return this.errorCode;
				}
				
			    public String errorMessage;

				public String getErrorMessage () {
					return this.errorMessage;
				}
				



	private String readString(ObjectInputStream dis) throws IOException{
		String strReturn = null;
		int length = 0;
        length = dis.readInt();
		if (length == -1) {
			strReturn = null;
		} else {
			if(length > commonByteArray_WIPO_PROJECTS_F_IPAS_ENV_CRE.length) {
				if(length < 1024 && commonByteArray_WIPO_PROJECTS_F_IPAS_ENV_CRE.length == 0) {
   					commonByteArray_WIPO_PROJECTS_F_IPAS_ENV_CRE = new byte[1024];
				} else {
   					commonByteArray_WIPO_PROJECTS_F_IPAS_ENV_CRE = new byte[2 * length];
   				}
			}
			dis.readFully(commonByteArray_WIPO_PROJECTS_F_IPAS_ENV_CRE, 0, length);
			strReturn = new String(commonByteArray_WIPO_PROJECTS_F_IPAS_ENV_CRE, 0, length, utf8Charset);
		}
		return strReturn;
	}

    private void writeString(String str, ObjectOutputStream dos) throws IOException{
		if(str == null) {
            dos.writeInt(-1);
		} else {
            byte[] byteArray = str.getBytes(utf8Charset);
	    	dos.writeInt(byteArray.length);
			dos.write(byteArray);
    	}
    }

    public void readData(ObjectInputStream dis) {

		synchronized(commonByteArrayLock_WIPO_PROJECTS_F_IPAS_ENV_CRE) {

        	try {

        		int length = 0;
		
					this.errorCode = readString(dis);
					
					this.errorMessage = readString(dis);
					
        	} catch (IOException e) {
	            throw new RuntimeException(e);

		

        }

		

      }


    }

    public void writeData(ObjectOutputStream dos) {
        try {

		
					// String
				
						writeString(this.errorCode,dos);
					
					// String
				
						writeString(this.errorMessage,dos);
					
        	} catch (IOException e) {
	            throw new RuntimeException(e);
        }


    }


    public String toString() {

		StringBuilder sb = new StringBuilder();
		sb.append(super.toString());
		sb.append("[");
		sb.append("errorCode="+errorCode);
		sb.append(",errorMessage="+errorMessage);
	    sb.append("]");

	    return sb.toString();
    }

    /**
     * Compare keys
     */
    public int compareTo(row82Struct other) {

		int returnValue = -1;
		
	    return returnValue;
    }


    private int checkNullsAndCompare(Object object1, Object object2) {
        int returnValue = 0;
		if (object1 instanceof Comparable && object2 instanceof Comparable) {
            returnValue = ((Comparable) object1).compareTo(object2);
        } else if (object1 != null && object2 != null) {
            returnValue = compareStrings(object1.toString(), object2.toString());
        } else if (object1 == null && object2 != null) {
            returnValue = 1;
        } else if (object1 != null && object2 == null) {
            returnValue = -1;
        } else {
            returnValue = 0;
        }

        return returnValue;
    }

    private int compareStrings(String string1, String string2) {
        return string1.compareTo(string2);
    }


}

public static class row25Struct implements routines.system.IPersistableRow<row25Struct> {
    final static byte[] commonByteArrayLock_WIPO_PROJECTS_F_IPAS_ENV_CRE = new byte[0];
    static byte[] commonByteArray_WIPO_PROJECTS_F_IPAS_ENV_CRE = new byte[0];

	



    public void readData(ObjectInputStream dis) {

		synchronized(commonByteArrayLock_WIPO_PROJECTS_F_IPAS_ENV_CRE) {

        	try {

        		int length = 0;
		

		

        }

		
			finally {}
		

      }


    }

    public void writeData(ObjectOutputStream dos) {
        try {

		
        }

			finally {}
		

    }


    public String toString() {

		StringBuilder sb = new StringBuilder();
		sb.append(super.toString());
		sb.append("[");
	    sb.append("]");

	    return sb.toString();
    }

    /**
     * Compare keys
     */
    public int compareTo(row25Struct other) {

		int returnValue = -1;
		
	    return returnValue;
    }


    private int checkNullsAndCompare(Object object1, Object object2) {
        int returnValue = 0;
		if (object1 instanceof Comparable && object2 instanceof Comparable) {
            returnValue = ((Comparable) object1).compareTo(object2);
        } else if (object1 != null && object2 != null) {
            returnValue = compareStrings(object1.toString(), object2.toString());
        } else if (object1 == null && object2 != null) {
            returnValue = 1;
        } else if (object1 != null && object2 == null) {
            returnValue = -1;
        } else {
            returnValue = 0;
        }

        return returnValue;
    }

    private int compareStrings(String string1, String string2) {
        return string1.compareTo(string2);
    }


}

public static class row81Struct implements routines.system.IPersistableRow<row81Struct> {
    final static byte[] commonByteArrayLock_WIPO_PROJECTS_F_IPAS_ENV_CRE = new byte[0];
    static byte[] commonByteArray_WIPO_PROJECTS_F_IPAS_ENV_CRE = new byte[0];

	
			    public String errorCode;

				public String getErrorCode () {
					return this.errorCode;
				}
				
			    public String errorMessage;

				public String getErrorMessage () {
					return this.errorMessage;
				}
				



	private String readString(ObjectInputStream dis) throws IOException{
		String strReturn = null;
		int length = 0;
        length = dis.readInt();
		if (length == -1) {
			strReturn = null;
		} else {
			if(length > commonByteArray_WIPO_PROJECTS_F_IPAS_ENV_CRE.length) {
				if(length < 1024 && commonByteArray_WIPO_PROJECTS_F_IPAS_ENV_CRE.length == 0) {
   					commonByteArray_WIPO_PROJECTS_F_IPAS_ENV_CRE = new byte[1024];
				} else {
   					commonByteArray_WIPO_PROJECTS_F_IPAS_ENV_CRE = new byte[2 * length];
   				}
			}
			dis.readFully(commonByteArray_WIPO_PROJECTS_F_IPAS_ENV_CRE, 0, length);
			strReturn = new String(commonByteArray_WIPO_PROJECTS_F_IPAS_ENV_CRE, 0, length, utf8Charset);
		}
		return strReturn;
	}

    private void writeString(String str, ObjectOutputStream dos) throws IOException{
		if(str == null) {
            dos.writeInt(-1);
		} else {
            byte[] byteArray = str.getBytes(utf8Charset);
	    	dos.writeInt(byteArray.length);
			dos.write(byteArray);
    	}
    }

    public void readData(ObjectInputStream dis) {

		synchronized(commonByteArrayLock_WIPO_PROJECTS_F_IPAS_ENV_CRE) {

        	try {

        		int length = 0;
		
					this.errorCode = readString(dis);
					
					this.errorMessage = readString(dis);
					
        	} catch (IOException e) {
	            throw new RuntimeException(e);

		

        }

		

      }


    }

    public void writeData(ObjectOutputStream dos) {
        try {

		
					// String
				
						writeString(this.errorCode,dos);
					
					// String
				
						writeString(this.errorMessage,dos);
					
        	} catch (IOException e) {
	            throw new RuntimeException(e);
        }


    }


    public String toString() {

		StringBuilder sb = new StringBuilder();
		sb.append(super.toString());
		sb.append("[");
		sb.append("errorCode="+errorCode);
		sb.append(",errorMessage="+errorMessage);
	    sb.append("]");

	    return sb.toString();
    }

    /**
     * Compare keys
     */
    public int compareTo(row81Struct other) {

		int returnValue = -1;
		
	    return returnValue;
    }


    private int checkNullsAndCompare(Object object1, Object object2) {
        int returnValue = 0;
		if (object1 instanceof Comparable && object2 instanceof Comparable) {
            returnValue = ((Comparable) object1).compareTo(object2);
        } else if (object1 != null && object2 != null) {
            returnValue = compareStrings(object1.toString(), object2.toString());
        } else if (object1 == null && object2 != null) {
            returnValue = 1;
        } else if (object1 != null && object2 == null) {
            returnValue = -1;
        } else {
            returnValue = 0;
        }

        return returnValue;
    }

    private int compareStrings(String string1, String string2) {
        return string1.compareTo(string2);
    }


}
public void tMSSqlRow_31Process(final java.util.Map<String, Object> globalMap) throws TalendException {
	globalMap.put("tMSSqlRow_31_SUBPROCESS_STATE", 0);

 final boolean execStat = this.execStat;
	
		String iterateId = "";
	
	
	String currentComponent = "";
	java.util.Map<String, Object> resourceMap = new java.util.HashMap<String, Object>();

	try {
			// TDI-39566 avoid throwing an useless Exception
			boolean resumeIt = true;
			if (globalResumeTicket == false && resumeEntryMethodName != null) {
				String currentMethodName = new java.lang.Exception().getStackTrace()[0].getMethodName();
				resumeIt = resumeEntryMethodName.equals(currentMethodName);
			}
			if (resumeIt || globalResumeTicket) { //start the resume
				globalResumeTicket = true;



		row25Struct row25 = new row25Struct();
row82Struct row82 = new row82Struct();
row81Struct row81 = new row81Struct();





	
	/**
	 * [tLogRow_34 begin ] start
	 */

	

	
		
		ok_Hash.put("tLogRow_34", false);
		start_Hash.put("tLogRow_34", System.currentTimeMillis());
		
	
	currentComponent="tLogRow_34";

	
					if(execStat) {
						runStat.updateStatOnConnection(resourceMap,iterateId,0,0,"row82");
					}
				
		int tos_count_tLogRow_34 = 0;
		

	///////////////////////
		


	class Util_tLogRow_34 {
	
		String[] des_top = { ".", "-" };

        String[] des_data = { "-", "+" };

        String[] des_frame = { "|" }; 
        
        public void printLine(StringBuilder sb, int titleWidth, int dataWidth){
        
        	sb.append("+");
			for(int i=0; i<titleWidth+2; i++)
				sb.append("-");
			sb.append("+");
			for(int i=0; i<dataWidth+2; i++)
				sb.append("-");
        	sb.append("+" + "\n");
        }      

		public String print(String[] row, int nbLine){
			
			StringBuilder sb = new StringBuilder();
			
			    String title = "#" + nbLine + ". " + "tLogRow_34";
			    
		
			//step 1: get the max length of all the row[] member;
			int dataWidth = 5;		//the length of the string "value"	
			for(int i=0;i<row.length;i++) {
				if(row[i] == null && 4 > dataWidth) {
					dataWidth = 4;
				}
				else if(row[i] != null && row[i].length()>dataWidth) 
					dataWidth = row[i].length();
			}			
						
			int titleWidth = 12;
			
			int totalWidth = dataWidth + titleWidth + 5;
			
			//step 2: print the header with line number
			sb.append(".");
			for(int i=0 ; i<totalWidth ; i++)
				sb.append("-");			
			sb.append("." + "\n" + "|");
			
			int emptyCenterWidth = (totalWidth-title.length())/2;
			for(int i=0 ; i<emptyCenterWidth; i++)
				sb.append(" ");	
			sb.append(title);
			for(int i=0 ; i<totalWidth - emptyCenterWidth - title.length() ; i++)
				sb.append(" ");	
			sb.append("|" + "\n");
			
			//step 3: print "key" and "value"			
			printLine(sb,titleWidth,dataWidth);
			
			sb.append("|" + " key");
			for(int i=0; i<titleWidth-2; i++)
				sb.append(" ");
        	sb.append("|" + " value");
			for(int i=0; i<dataWidth-4; i++)
				sb.append(" ");
			sb.append("|" + "\n");
			
			printLine(sb,titleWidth,dataWidth);
			
			//step 4: print dataset
			
			//for(int i=0; i<row.length; i++){
				sb.append("| " + "errorCode");
				for(int i=0; i<titleWidth -"errorCode".length()+ 1 ;i++)
					sb.append(" ");
				sb.append("| " + row[0]);
				for(int i=0; row[0] == null && i<dataWidth - 3 || row[0] != null && i<dataWidth -row[0].length()+ 1 ;i++)
					sb.append(" ");
				sb.append("|" + "\n");
			
			//}

			
			//for(int i=0; i<row.length; i++){
				sb.append("| " + "errorMessage");
				for(int i=0; i<titleWidth -"errorMessage".length()+ 1 ;i++)
					sb.append(" ");
				sb.append("| " + row[1]);
				for(int i=0; row[1] == null && i<dataWidth - 3 || row[1] != null && i<dataWidth -row[1].length()+ 1 ;i++)
					sb.append(" ");
				sb.append("|" + "\n");
			
			//}

			
			//step 5: print a line gap
			printLine(sb,titleWidth,dataWidth);
			return sb.toString();

		}


	}

	Util_tLogRow_34 util_tLogRow_34 = new Util_tLogRow_34();




	java.io.PrintStream consoleOut_tLogRow_34 = null;
	if (globalMap.get("tLogRow_CONSOLE")!=null){
        consoleOut_tLogRow_34 = (java.io.PrintStream) globalMap.get("tLogRow_CONSOLE");
    }else{
        consoleOut_tLogRow_34 = new java.io.PrintStream(new java.io.BufferedOutputStream(System.out));
        globalMap.put("tLogRow_CONSOLE",consoleOut_tLogRow_34);
    }

 		StringBuilder strBuffer_tLogRow_34 = null;
		int nb_line_tLogRow_34 = 0;
///////////////////////    			



 



/**
 * [tLogRow_34 begin ] stop
 */



	
	/**
	 * [tMSSqlRow_32 begin ] start
	 */

	

	
		
		ok_Hash.put("tMSSqlRow_32", false);
		start_Hash.put("tMSSqlRow_32", System.currentTimeMillis());
		
	
	currentComponent="tMSSqlRow_32";

	
					if(execStat) {
						runStat.updateStatOnConnection(resourceMap,iterateId,0,0,"row25");
					}
				
		int tos_count_tMSSqlRow_32 = 0;
		

	java.sql.Connection conn_tMSSqlRow_32 = null;
	String query_tMSSqlRow_32 = "";
	boolean whetherReject_tMSSqlRow_32 = false;
				conn_tMSSqlRow_32 = (java.sql.Connection)globalMap.get("conn_tMSSqlConnection_4");
			
    resourceMap.put("conn_tMSSqlRow_32", conn_tMSSqlRow_32);
        java.sql.Statement stmt_tMSSqlRow_32 = conn_tMSSqlRow_32.createStatement();
        resourceMap.put("stmt_tMSSqlRow_32", stmt_tMSSqlRow_32);

 



/**
 * [tMSSqlRow_32 begin ] stop
 */




	
	/**
	 * [tLogRow_33 begin ] start
	 */

	

	
		
		ok_Hash.put("tLogRow_33", false);
		start_Hash.put("tLogRow_33", System.currentTimeMillis());
		
	
	currentComponent="tLogRow_33";

	
					if(execStat) {
						runStat.updateStatOnConnection(resourceMap,iterateId,0,0,"row81");
					}
				
		int tos_count_tLogRow_33 = 0;
		

	///////////////////////
		


	class Util_tLogRow_33 {
	
		String[] des_top = { ".", "-" };

        String[] des_data = { "-", "+" };

        String[] des_frame = { "|" }; 
        
        public void printLine(StringBuilder sb, int titleWidth, int dataWidth){
        
        	sb.append("+");
			for(int i=0; i<titleWidth+2; i++)
				sb.append("-");
			sb.append("+");
			for(int i=0; i<dataWidth+2; i++)
				sb.append("-");
        	sb.append("+" + "\n");
        }      

		public String print(String[] row, int nbLine){
			
			StringBuilder sb = new StringBuilder();
			
			    String title = "#" + nbLine + ". " + "tLogRow_33";
			    
		
			//step 1: get the max length of all the row[] member;
			int dataWidth = 5;		//the length of the string "value"	
			for(int i=0;i<row.length;i++) {
				if(row[i] == null && 4 > dataWidth) {
					dataWidth = 4;
				}
				else if(row[i] != null && row[i].length()>dataWidth) 
					dataWidth = row[i].length();
			}			
						
			int titleWidth = 12;
			
			int totalWidth = dataWidth + titleWidth + 5;
			
			//step 2: print the header with line number
			sb.append(".");
			for(int i=0 ; i<totalWidth ; i++)
				sb.append("-");			
			sb.append("." + "\n" + "|");
			
			int emptyCenterWidth = (totalWidth-title.length())/2;
			for(int i=0 ; i<emptyCenterWidth; i++)
				sb.append(" ");	
			sb.append(title);
			for(int i=0 ; i<totalWidth - emptyCenterWidth - title.length() ; i++)
				sb.append(" ");	
			sb.append("|" + "\n");
			
			//step 3: print "key" and "value"			
			printLine(sb,titleWidth,dataWidth);
			
			sb.append("|" + " key");
			for(int i=0; i<titleWidth-2; i++)
				sb.append(" ");
        	sb.append("|" + " value");
			for(int i=0; i<dataWidth-4; i++)
				sb.append(" ");
			sb.append("|" + "\n");
			
			printLine(sb,titleWidth,dataWidth);
			
			//step 4: print dataset
			
			//for(int i=0; i<row.length; i++){
				sb.append("| " + "errorCode");
				for(int i=0; i<titleWidth -"errorCode".length()+ 1 ;i++)
					sb.append(" ");
				sb.append("| " + row[0]);
				for(int i=0; row[0] == null && i<dataWidth - 3 || row[0] != null && i<dataWidth -row[0].length()+ 1 ;i++)
					sb.append(" ");
				sb.append("|" + "\n");
			
			//}

			
			//for(int i=0; i<row.length; i++){
				sb.append("| " + "errorMessage");
				for(int i=0; i<titleWidth -"errorMessage".length()+ 1 ;i++)
					sb.append(" ");
				sb.append("| " + row[1]);
				for(int i=0; row[1] == null && i<dataWidth - 3 || row[1] != null && i<dataWidth -row[1].length()+ 1 ;i++)
					sb.append(" ");
				sb.append("|" + "\n");
			
			//}

			
			//step 5: print a line gap
			printLine(sb,titleWidth,dataWidth);
			return sb.toString();

		}


	}

	Util_tLogRow_33 util_tLogRow_33 = new Util_tLogRow_33();




	java.io.PrintStream consoleOut_tLogRow_33 = null;
	if (globalMap.get("tLogRow_CONSOLE")!=null){
        consoleOut_tLogRow_33 = (java.io.PrintStream) globalMap.get("tLogRow_CONSOLE");
    }else{
        consoleOut_tLogRow_33 = new java.io.PrintStream(new java.io.BufferedOutputStream(System.out));
        globalMap.put("tLogRow_CONSOLE",consoleOut_tLogRow_33);
    }

 		StringBuilder strBuffer_tLogRow_33 = null;
		int nb_line_tLogRow_33 = 0;
///////////////////////    			



 



/**
 * [tLogRow_33 begin ] stop
 */



	
	/**
	 * [tMSSqlRow_31 begin ] start
	 */

	

	
		
		ok_Hash.put("tMSSqlRow_31", false);
		start_Hash.put("tMSSqlRow_31", System.currentTimeMillis());
		
	
	currentComponent="tMSSqlRow_31";

	
		int tos_count_tMSSqlRow_31 = 0;
		

	java.sql.Connection conn_tMSSqlRow_31 = null;
	String query_tMSSqlRow_31 = "";
	boolean whetherReject_tMSSqlRow_31 = false;
				conn_tMSSqlRow_31 = (java.sql.Connection)globalMap.get("conn_tMSSqlConnection_4");
			
    resourceMap.put("conn_tMSSqlRow_31", conn_tMSSqlRow_31);
        java.sql.Statement stmt_tMSSqlRow_31 = conn_tMSSqlRow_31.createStatement();
        resourceMap.put("stmt_tMSSqlRow_31", stmt_tMSSqlRow_31);

 



/**
 * [tMSSqlRow_31 begin ] stop
 */
	
	/**
	 * [tMSSqlRow_31 main ] start
	 */

	

	
	
	currentComponent="tMSSqlRow_31";

	

		row25 = null;
		
		row81 = null;
		
query_tMSSqlRow_31 = "If Exists ( SELECT name \n            FROM sysobjects  \n            WHERE name = 'ImportPateProcess'\n            AND "
+"type = 'P')\n	DROP PROCEDURE ImportPateProcess\n";
whetherReject_tMSSqlRow_31 = false;
globalMap.put("tMSSqlRow_31_QUERY",query_tMSSqlRow_31);
try {
		stmt_tMSSqlRow_31.execute(query_tMSSqlRow_31);
		
	} catch (java.lang.Exception e) {
		whetherReject_tMSSqlRow_31 = true;
		
				row81 = new row81Struct();
				
				row81.errorCode = ((java.sql.SQLException)e).getSQLState();
				row81.errorMessage = e.getMessage() + " - Line: " + tos_count_tMSSqlRow_31;
				
	}
	
	if(!whetherReject_tMSSqlRow_31) {
		
					row25 = new row25Struct();
					
	}
	

 


	tos_count_tMSSqlRow_31++;

/**
 * [tMSSqlRow_31 main ] stop
 */
	
	/**
	 * [tMSSqlRow_31 process_data_begin ] start
	 */

	

	
	
	currentComponent="tMSSqlRow_31";

	

 



/**
 * [tMSSqlRow_31 process_data_begin ] stop
 */
// Start of branch "row25"
if(row25 != null) { 
			row82 = null;



	
	/**
	 * [tMSSqlRow_32 main ] start
	 */

	

	
	
	currentComponent="tMSSqlRow_32";

	
					if(execStat){
						runStat.updateStatOnConnection(iterateId,1,1
						
							,"row25"
						
						);
					}
					

		row82 = null;
		
query_tMSSqlRow_32 = "CREATE PROCEDURE ImportPateProcess\nAS \n	BEGIN\n		SET NOCOUNT ON\n		\n		/* Procedure name: ImportPateProcess\n		Input:"
+"  import tables with IND_IMPORT = 0\n		Output: IPAS database updated and import tables updated with IND_IMPORT = 1\n		cr"
+"eate or replace procedure ImportPateProcess as\n		*/\n		\n		DECLARE @time1                                    DATETIME "
+"\n\n		DECLARE @Numpatent_CODE                           FLOAT \n		\n\n		/* 1.2.1 Step 1A: populate work tables (just pate"
+"nts) to add additional required data */\n		SELECT @time1  =  GETDATE()\n		\n		/* truncate data */\n		TRUNCATE TABLE WRK_"
+"patent\n		\n		INSERT INTO  WRK_patent   \n				( FILE_SEQ , \n				FILE_TYPE , \n				FILE_SERIES , \n				FILE_NBR , \n				"
+"DOC_ORI , \n				DOC_SERIES , \n				DOC_NBR , \n				IND_IMPORT , \n				APPLICATION_TYPE , \n				APPLICATION_SUBTYPE , \n	"
+"			LAW_CODE , \n				FILING_DATE , \n				RECEPTION_DATE , \n				PUBLICATION_DATE , \n				PUBLICATION_NOTES , \n				IND_RE"
+"GISTERED , \n				REGISTRATION_TYPE , \n				REGISTRATION_SERIES , \n				REGISTRATION_NBR , \n				REGISTRATION_DUP , \n			"
+"	REGISTRATION_DATE , \n				ENTITLEMENT_DATE , \n				EXPIRATION_DATE , \n				EXHIBITION_DATE , \n				EXHIBITION_NOTES , "
+"\n				PCT_PHASE , \n				PCT_APPLICATION_ID , \n				PCT_APPLICATION_DATE , \n				PCT_PUBLICATION_COUNTRY_CODE , \n				PCT_"
+"PUBLICATION_DATE , \n				PCT_PUBLICATION_TYPE , \n				PCT_PUBLICATION_ID , \n				TITLE , \n				ABSTRACT , \n				ENGLISH_"
+"TITLE , \n				ENGLISH_ABSTRACT , \n				LAST_CLAIMS_PAGE_REF , \n				LAST_DESCRIPTION_PAGE_REF , \n				USED_IPC_DESCRIPTI"
+"ON , \n				USED_KEYWORD_DESCRIPTION , \n				IND_EXAM_INDUSTRIAL , \n				IND_EXAM_INVENTIVE , \n				IND_EXAM_NOVELTY , \n"
+"				EXAM_RESULT , \n				CAPTURE_USER_ID , \n				CAPTURE_DATE , \n				FIRST_PRIORITY_DATE , \n				NOVELTY_DATE , \n				MA"
+"IN_OWNER_ADDR_NBR , \n				MAIN_OWNER_PERSON_NBR , \n				SERVICE_ADDR_NBR , \n				SERVICE_PERSON_NBR , \n				PROC_TYP , "
+"\n				PROC_NBR , \n				STATUS_CODE,PUBLICATION_NBR,PUBLICATION_SER,PUBLICATION_TYP )  \n		SELECT\n				 FILE_SEQ,\n				 FI"
+"LE_TYPE,\n				 FILE_SERIES,\n				 FILE_NBR,\n				 DOC_ORI,\n				 DOC_SERIES,\n				 DOC_NBR,\n				 IND_IMPORT,\n				 APPL"
+"ICATION_TYPE,\n				 APPLICATION_SUBTYPE,\n				 LAW_CODE,\n				 FILING_DATE,\n				 RECEPTION_DATE,\n				 PUBLICATION_DATE"
+",\n				 PUBLICATION_NOTES,\n				 IND_REGISTERED,\n				 REGISTRATION_TYPE,\n				 REGISTRATION_SERIES,\n				 REGISTRATION_"
+"NBR,\n				 REGISTRATION_DUP,\n				 REGISTRATION_DATE,\n				 ENTITLEMENT_DATE,\n				 EXPIRATION_DATE,\n				 EXHIBITION_DA"
+"TE,\n				 EXHIBITION_NOTES,\n				 PCT_PHASE,\n				 PCT_APPLICATION_ID,\n				 PCT_APPLICATION_DATE,\n				 PCT_PUBLICATION"
+"_COUNTRY_CODE,\n				 PCT_PUBLICATION_DATE,\n				 PCT_PUBLICATION_TYPE,\n				 PCT_PUBLICATION_ID,\n				 TITLE,\n				 ABST"
+"RACT,\n				 ENGLISH_TITLE,\n				 ENGLISH_ABSTRACT,\n				 LAST_CLAIMS_PAGE_REF,\n				 LAST_DESCRIPTION_PAGE_REF,\n				 US"
+"ED_IPC_DESCRIPTION,\n				 USED_KEYWORD_DESCRIPTION,\n				 IND_EXAM_INDUSTRIAL,\n				 IND_EXAM_INVENTIVE,\n				 IND_EXAM_"
+"NOVELTY,\n				 EXAM_RESULT,\n				 CAPTURE_USER_ID,\n				 CAPTURE_DATE,\n				 CAST(null as DATETIME) FIRST_PRIORITY_DATE,"
+"\n				 CAST(null as DATETIME) NOVELTY1_DATE,\n				 CAST(null as NUMERIC (4)) MAIN_OWNER_ADDR_NBR,\n				 CAST(null as NUM"
+"ERIC (10)) MAIN_OWNER_PERSON_NBR,\n				 CAST(null as NUMERIC (4)) SERVICE_ADDR_NBR,\n				 CAST(null as NUMERIC (10)) SER"
+"VICE_PERSON_NBR,\n				 CAST(null as VARCHAR (8)) PROC_TYP,\n				 CAST(null as NUMERIC (10)) PROC_NBR,\n				 CAST(null as"
+" VARCHAR (8)) STATUS_CODE,PUBLICATION_NBR,PUBLICATION_SER,PUBLICATION_TYP\n		FROM   ["+ context.intermediateDB + "].[dbo].VW_IMPORT_patent M \n		WHERE	 IND_IMPORT  = 0\n		\n		-- IMPLICIT_TRANSACTIONS is set to OFF\n		INSERT INTO  wrk"
+"_log    \n		 SELECT '1.2.1 Step 1A: populate work tables (just patents) to add additional required data' , \n				@time1 "
+", datediff(ss, @time1, getdate());\n		\n		/* 1.2.1 Step 1B: populate work tables (not actions) to add additional require"
+"d data */\n		SELECT @time1  =  GETDATE()\n		\n		/* truncate data */\n		TRUNCATE TABLE WRK_patent_OWNERS\n		TRUNCATE TABL"
+"E WRK_patent_REPRS\n		TRUNCATE TABLE WRK_patent_INVENTORS\n		TRUNCATE TABLE WRK_patent_PRIORITIES\n\n		INSERT INTO  WRK_"
+"patent_OWNERS    \n		SELECT\n				 T.*,\n				 CAST(null as NUMERIC (10)) PERSON_NBR,\n				 CAST(null as NUMERIC (4)) ADDR"
+"_NBR\n		FROM   ["+ context.intermediateDB + "].[dbo].VW_IMPORT_patent_OWNERS T JOIN wrk_patent M ON M.file_seq  = T.file_seq\n			 AND	M.file_type  = T.file_type\n		"
+"	 AND	M.file_series  = T.file_series\n			 AND	M.file_nbr  = T.file_nbr  \n		\n		INSERT INTO  WRK_patent_REPRS    \n		SEL"
+"ECT\n				 T.*,\n				 CAST(null as NUMERIC (10)) PERSON_NBR,\n				 CAST(null as NUMERIC (4)) ADDR_NBR\n		FROM   ["+ context.intermediateDB + "].[dbo].VW_IMPORT_patent_REPRS T JOIN wrk_patent M ON M.file_seq  = T.file_seq\n			 AND	M.file_type  = T.file_type\n			"
+" AND	M.file_series  = T.file_series\n			 AND	M.file_nbr  = T.file_nbr  \n		\n		INSERT INTO  WRK_patent_INVENTORS    \n		"
+"SELECT\n				 T.*,\n				 CAST(null as NUMERIC (10)) PERSON_NBR,\n				 CAST(null as NUMERIC (4)) ADDR_NBR\n		FROM   ["+ context.intermediateDB + "].[dbo].VW_IMPORT_patent_INVENTORS T JOIN wrk_patent M ON M.file_seq  = T.file_seq\n			 AND	M.file_type  = T.file_type"
+"\n			 AND	M.file_series  = T.file_series\n			 AND	M.file_nbr  = T.file_nbr  \n		\n		INSERT INTO  WRK_patent_PRIORITIES   "
+" \n		SELECT\n				 T.*,\n				 CAST(null as NUMERIC (22)) PRIORITY_APPL_ID_ALT\n		FROM   ["+ context.intermediateDB + "].[dbo].VW_IMPORT_patent_PRIORITIES T JOIN wrk_patent M ON M.file_seq  = T.file_seq\n			 AND	M.file_type  = T.file_type"
+"\n			 AND	M.file_series  = T.file_series\n			 AND	M.file_nbr  = T.file_nbr  \n		\n		INSERT INTO  wrk_log    \n		 SELECT "
+"'1.2.1 Step 1B: populate work tables (not actions) to add additional required data' , \n				@time1 , datediff(ss, @time1"
+", getdate());\n		\n		/* 1.2.1 Step 1C: populate work tables (just actions) to add additional required data */\n		SELECT "
+"@time1  =  GETDATE()\n		\n		/* truncate data */\n		TRUNCATE TABLE WRK_patent_ACTIONS\n		\n		INSERT INTO  WRK_patent_ACTI"
+"ONS    \n		SELECT\n				 T.*,\n				 /* ACTION_NBR is incremented from 1 for each batch to speed-up\n		               the "
+"process. In the next batch, numbering will start with 1\n		               but this works since the key is process nbr + "
+"action nbr */ /* ACTION_NBR is incremented from 1 for each batch to speed-up\n		               the process. In the next "
+"batch, numbering will start with 1\n		               but this works since the key is process nbr + action nbr */ \n		   "
+"           ROW_NUMBER() OVER(ORDER BY T.FILE_SEQ, T.FILE_TYPE, T.FILE_SERIES, T.FILE_NBR) ACTION_NBR\n		FROM   ["+ context.intermediateDB + "].[dbo].VW_IMPORT_patent_ACTIONS T \n		 JOIN wrk_patent M ON M.file_seq  = T.file_seq\n			 AND	M.file_type  = T.file_ty"
+"pe\n			 AND	M.file_series  = T.file_series\n			 AND	M.file_nbr  = T.file_nbr  \n		\n		/* postpone due date if Saturday/S"
+"unday */\n                set datefirst 7;        /* set Sunday = 1 */\n                update  wrk_patent_actions\n    "
+"            set     manual_due_date = dateadd(dd, 2, manual_due_date)\n                where   datepart(dw, manual_due_d"
+"ate) = 7 /* Saturday */\n                ;\n                update  wrk_patent_actions\n                set     manual_d"
+"ue_date = dateadd(dd, 1, manual_due_date)\n                where   datepart(dw, manual_due_date) = 1 /* Sunday */\n     "
+"           ;\n\n		INSERT INTO  wrk_log    \n		 SELECT '1.2.1 Step 1C: populate work tables (just actions) to add additio"
+"nal required data' , \n				@time1 , datediff(ss, @time1, getdate());\n		\n		\n		/* 1.2.2 Step 2: prepare additional data"
+" in auxiliary tables */\n		/* Step 2a: prepare additional data in WRK_patent_OWNERS */\n		/* Load WRK_PERSON_ADDR from W"
+"RK_patent_OWNERS, setting REF_NBR from WRK_patent_OWNERS.ROWNUM */\n		SELECT @time1  =  GETDATE()\n		\n		DELETE FROM   w"
+"rk_person_addr    \n		\n		INSERT INTO  wrk_person_addr   \n				( PERSON_GROUP_CODE , \n				AGENT_CODE , \n				PERSON_NAM"
+"E , \n				PERSON_NAME_LANG2 ,\n				NATIONALITY_COUNTRY_CODE , \n				IND_COMPANY , \n				LEGAL_NATURE , \n				LEGAL_NATUR"
+"E_LANG2 ,\n				LEGAL_ID_TYPE , \n				LEGAL_ID_NBR , \n				INDIVIDUAL_ID_TYPE , \n				INDIVIDUAL_ID_NBR , \n				EMAIL , "
+"\n				TELEPHONE , \n				RESIDENCE_COUNTRY_CODE , \n				STATE_NAME , \n				STATE_CODE ,\n				CITY_CODE , \n				CITY_NAME ,"
+" \n				ADDRESS_ZONE , \n				ADDRESS_STREET , \n				ADDRESS_STREET_LANG2 ,\n				ZIP_CODE , \n				PERSON_NBR , \n				ADDR_"
+"NBR , \n				REF_NBR )  \n		SELECT\n				 PERSON_GROUP_CODE,\n				 CAST(null as NUMERIC (4)),\n				 PERSON_NAME,\n				 PER"
+"SON_NAME_LANG2,\n				 NATIONALITY_COUNTRY_CODE,\n				 IND_COMPANY,\n				 LEGAL_NATURE,\n				 LEGAL_NATURE_LANG2,\n				 L"
+"EGAL_ID_TYPE,\n				 LEGAL_ID_NBR,\n				 INDIVIDUAL_ID_TYPE,\n				 INDIVIDUAL_ID_NBR,\n				 EMAIL,\n				 TELEPHONE,\n				"
+" RESIDENCE_COUNTRY_CODE,\n				 STATE_NAME,\n				 STATE_CODE,\n				 CITY_CODE,\n				 CITY_NAME,\n				 ADDRESS_ZONE,\n				"
+" ADDRESS_STREET,\n				 ADDRESS_STREET_LANG2,\n				 ZIP_CODE,\n				 PERSON_NBR,\n				 ADDR_NBR,\n				 ROWID\n		FROM  wrk_"
+"patent_owners T \n		\n		INSERT INTO  wrk_log    \n		 SELECT 'Load WRK_PERSON_ADDR from WRK_patent_OWNERS' , \n				@time1"
+" , datediff(ss, @time1, getdate());\n		\n		/* Call procedure ImportSetPersonNbr() to set PERSON_NBR and ADDR_NBR */\n		E"
+"XEC IMPORTSETPERSONNBR\n\n		/* Update WRK_patent_OWNERS, setting PERSON_NBR and ADDR_NBR \n		       from WRK_PERSON_ADDR"
+" using the ROWNUM as join condition */\n		SELECT @time1  =  GETDATE()\n		\n		UPDATE  T   \n		SET	person_nbr = \n			(SELE"
+"CT person_nbr\n			 FROM  WRK_PERSON_ADDR \n			 WHERE	 ref_nbr  = T.rowid\n			),	\n		    addr_nbr = \n		    (SELECT addr_"
+"nbr\n			 FROM  WRK_PERSON_ADDR \n			 WHERE	 ref_nbr  = T.rowid\n			) \n		FROM  WRK_patent_OWNERS T \n		\n		INSERT INTO  "
+"wrk_log    \n		 SELECT 'Update WRK_patent_OWNERS from WRK_PERSON_ADDR' , \n				@time1 , datediff(ss, @time1, getdate());"
+"\n		\n		/* Step 2b: prepare additional data in WRK_patent_REPRS */\n		/* Load WRK_PERSON_ADDR from WRK_patent_REPRS, set"
+"ting REF_NBR from WRK_patent_REPRS.ROWNUM */\n		SELECT @time1  =  GETDATE()\n		\n		DELETE FROM   wrk_person_addr    \n		"
+"\n		INSERT INTO  wrk_person_addr   \n				( PERSON_GROUP_CODE , \n				AGENT_CODE , \n				PERSON_NAME , \n				PERSON_NAME_"
+"LANG2 ,\n				NATIONALITY_COUNTRY_CODE , \n				IND_COMPANY , \n				LEGAL_NATURE , \n				LEGAL_NATURE_LANG2 ,\n				LEGAL_I"
+"D_TYPE , \n				LEGAL_ID_NBR , \n				INDIVIDUAL_ID_TYPE , \n				INDIVIDUAL_ID_NBR , \n				EMAIL , \n				TELEPHONE , \n			"
+"	RESIDENCE_COUNTRY_CODE , \n				STATE_NAME , \n				STATE_CODE , \n				CITY_CODE ,\n				CITY_NAME , \n				ADDRESS_ZONE , "
+"\n				ADDRESS_STREET , \n				ADDRESS_STREET_LANG2 ,\n				ZIP_CODE , \n				PERSON_NBR , \n				ADDR_NBR , \n				REF_NBR ) "
+" \n		SELECT\n				 PERSON_GROUP_CODE,\n				 AGENT_CODE,\n				 PERSON_NAME,\n				 PERSON_NAME_LANG2,\n				 NATIONALITY_COU"
+"NTRY_CODE,\n				 IND_COMPANY,\n				 LEGAL_NATURE,\n				 LEGAL_NATURE_LANG2,\n				 LEGAL_ID_TYPE,\n				 LEGAL_ID_NBR,\n		"
+"		 INDIVIDUAL_ID_TYPE,\n				 INDIVIDUAL_ID_NBR,\n				 EMAIL,\n				 TELEPHONE,\n				 RESIDENCE_COUNTRY_CODE,\n				 STATE_"
+"NAME,\n				 STATE_CODE,\n				 CITY_CODE,\n				 CITY_NAME,\n				 ADDRESS_ZONE,\n				 ADDRESS_STREET,\n				 ADDRESS_STREET"
+"_LANG2,\n				 ZIP_CODE,\n				 PERSON_NBR,\n				 ADDR_NBR,\n				 ROWID\n		FROM  wrk_patent_reprs T \n		\n		INSERT INTO  w"
+"rk_log    \n		 SELECT 'Load WRK_PERSON_ADDR from WRK_patent_REPRS' , \n				@time1 , datediff(ss, @time1, getdate());\n		"
+"\n		/* Call procedure ImportSetPersonNbr() to set PERSON_NBR and ADDR_NBR */\n		EXEC IMPORTSETPERSONNBR\n\n		/* Update W"
+"RK_patent_REPRS, setting PERSON_NBR and ADDR_NBR \n		       from WRK_PERSON_ADDR using the ROWNUM as join condition */\n"
+"		SELECT @time1  =  GETDATE()\n		\n		UPDATE  T   \n		SET	person_nbr = (	SELECT person_nbr\n			FROM  WRK_PERSON_ADDR \n		"
+"	WHERE	 ref_nbr  = T.rowid\n		),	\n		    addr_nbr = (	SELECT addr_nbr\n			FROM  WRK_PERSON_ADDR \n			WHERE	 ref_nbr  = T"
+".rowid\n		) \n		FROM  WRK_patent_REPRS T \n		\n		INSERT INTO  wrk_log    \n		 SELECT 'Update WRK_patent_REPRS from WRK_P"
+"ERSON_ADDR' , \n				@time1 , datediff(ss, @time1, getdate());\n		\n		/* Step 2c: prepare additional data in WRK_patent_I"
+"NVENTORS */\n		/* Load WRK_PERSON_ADDR from WRK_patent_OWNERS, setting REF_NBR from WRK_patent_OWNERS.ROWNUM */\n		SELEC"
+"T @time1  =  GETDATE()\n		\n		DELETE FROM   wrk_person_addr    \n		\n		INSERT INTO  wrk_person_addr   \n				( PERSON_GRO"
+"UP_CODE , \n				AGENT_CODE , \n				PERSON_NAME , \n				PERSON_NAME_LANG2 ,\n				NATIONALITY_COUNTRY_CODE , \n				IND_COM"
+"PANY , \n				LEGAL_NATURE , \n				LEGAL_NATURE_LANG2 ,\n				LEGAL_ID_TYPE , \n				LEGAL_ID_NBR , \n				INDIVIDUAL_ID_TYP"
+"E , \n				INDIVIDUAL_ID_NBR , \n				EMAIL , \n				TELEPHONE , \n				RESIDENCE_COUNTRY_CODE , \n				STATE_NAME , \n				ST"
+"ATE_CODE , \n				CITY_CODE ,\n				CITY_NAME , \n				ADDRESS_ZONE , \n				ADDRESS_STREET , \n				ADDRESS_STREET_LANG2 ,\n"
+"				ZIP_CODE , \n				PERSON_NBR , \n				ADDR_NBR , \n				REF_NBR )  \n		SELECT\n				 PERSON_GROUP_CODE,\n				 CAST(null "
+"as NUMERIC (4)),\n				 PERSON_NAME,\n				 PERSON_NAME_LANG2,\n				 NATIONALITY_COUNTRY_CODE,\n				 IND_COMPANY,\n				 LE"
+"GAL_NATURE,\n				 LEGAL_NATURE_LANG2,\n				 LEGAL_ID_TYPE,\n				 LEGAL_ID_NBR,\n				 INDIVIDUAL_ID_TYPE,\n				 INDIVIDUA"
+"L_ID_NBR,\n				 EMAIL,\n				 TELEPHONE,\n				 RESIDENCE_COUNTRY_CODE,\n				 STATE_NAME,\n				 STATE_CODE,\n				 CITY_COD"
+"E,\n				 CITY_NAME,\n				 ADDRESS_ZONE,\n				 ADDRESS_STREET,\n				 ADDRESS_STREET_LANG2,\n				 ZIP_CODE,\n				 PERSON_N"
+"BR,\n				 ADDR_NBR,\n				 ROWID\n		FROM  wrk_patent_inventors T \n		\n		INSERT INTO  wrk_log    \n		 SELECT 'Load WRK_PE"
+"RSON_ADDR from WRK_patent_INVENTORS' , \n				@time1 , datediff(ss, @time1, getdate());\n		\n		/* Call procedure ImportSe"
+"tPersonNbr() to set PERSON_NBR and ADDR_NBR */\n		EXEC IMPORTSETPERSONNBR\n\n		/* Update WRK_patent_INVENTORS, setting P"
+"ERSON_NBR and ADDR_NBR \n		       from WRK_PERSON_ADDR using the ROWNUM as join condition */\n		SELECT @time1  =  GETDAT"
+"E()\n		\n		UPDATE  T   \n		SET	person_nbr = (	SELECT person_nbr\n			FROM  WRK_PERSON_ADDR \n			WHERE	 ref_nbr  = T.rowid"
+"\n		),	\n		    addr_nbr = (	SELECT addr_nbr\n			FROM  WRK_PERSON_ADDR \n			WHERE	 ref_nbr  = T.rowid\n		) \n		FROM  WRK_"
+"patent_INVENTORS T \n		\n		INSERT INTO  wrk_log    \n		 SELECT 'Update WRK_patent_INVENTORS from WRK_PERSON_ADDR' , \n		"
+"		@time1 , datediff(ss, @time1, getdate());\n		\n		/* Step 2d: update PRIORITY_APPL_ID_ALT in WRK_patent_PRIORITIES */\n"
+"		SELECT @time1  =  GETDATE()\n\n		/* Browse WRK_patent_PRIORITIES */\n		DECLARE curPrio cursor LOCAL FOR \n		SELECT app"
+"lication_id\n		FROM  wrk_patent_priorities (UPDLOCK)  \n		\n		DECLARE @recPrio_APPLICATION_ID	VARCHAR(200)\n		DECLARE @V"
+"arPRIORITY_APPL_ID_ALT                  VARCHAR(254) \n		\n		OPEN curPrio \n		DECLARE @count INT \n		SET @count = 1 \n		"
+"WHILE (0 = 0) \n		BEGIN --( \n			\n			fetch NEXT FROM curPrio INTO @recPrio_APPLICATION_ID\n			IF (@@FETCH_STATUS = -1) "
+"\n			BREAK\n\n			/* Build VarPRIORITY_APPL_ID_ALT by removing the non-numeric characters from PRIORITY_APPL_ID */\n			\n"
+"			SELECT @VarPRIORITY_APPL_ID_ALT  = '' \n			DECLARE @i INTEGER\n\n			SELECT @i  = 1 \n\n			WHILE @i <= len(@recPrio_AP"
+"PLICATION_ID)\n\n			BEGIN\n\n\n			\n				IF SUBSTRING(@recPrio_APPLICATION_ID, @i, 1)between '0' and '9' \n				BEGIN \n		"
+"			SELECT @VarPRIORITY_APPL_ID_ALT  = @VarPRIORITY_APPL_ID_ALT + SUBSTRING(@recPrio_APPLICATION_ID, @i, 1)\n				END\n   "
+"\n\n				SELECT @i = @i + 1\n\n			END\n\n			 IF ( @VarPRIORITY_APPL_ID_ALT='')\n				 SET @VarPRIORITY_APPL_ID_ALT='0'\n\n"
+"			\n			/* update PRIORITY_APPL_ID_ALT from cast(PRIORITY_APPL_ID_ALT as number) with last 14 digits */\n			UPDATE  wrk_"
+"patent_priorities   \n			SET	PRIORITY_APPL_ID_ALT = (( CAST(@VarPRIORITY_APPL_ID_ALT as NUMERIC) ) % ( 100000000000000 )"
+") \n			 where current of curPrio  \n			\n			SELECT @count=@count +1\n		END --) \n		close curPrio\n		\n		INSERT INTO  wrk"
+"_log    \n		 SELECT 'Step 2d: update PRIORITY_APPL_ID_ALT in WRK_patent_PRIORITIES' , \n				@time1 , datediff(ss, @time1"
+", getdate());\n		\n		/* 1.2.3 Step 3: update additional data in WRK_patent */\n		SELECT @time1  =  GETDATE()\n		\n		/* U"
+"pdate FIRST_PRIORITY_DATE from min(PRIORITY_DATE) from  ["+ context.intermediateDB + "].[dbo].VW_IMPORT_patent_PRIORITIES where IND_ACCEPTED = 1 */\n		UPDATE  M   \n		SET	FIRST_PRIORITY_DATE = (	SELECT MIN"
+"(PRIORITY_DATE)\n			FROM   ["+ context.intermediateDB + "].[dbo].VW_IMPORT_patent_PRIORITIES T \n			WHERE	 M.file_seq  = T.file_seq\n			 AND	M.file_type  = T.file_type\n			 AND"
+"	M.file_series  = T.file_series\n			 AND	M.file_nbr  = T.file_nbr\n			 AND	IND_ACCEPTED  = 1\n		) \n		FROM  wrk_patent M"
+" \n		\n		/* Update NOVELTY1_DATE from minimum between FILING_DATE, PCT_APPLICATION_DATE and FIRST_PRIORITY_DATE (provide"
+"d not null) */\n		UPDATE  M   \n		SET	NOVELTY_DATE = \n		CASE WHEN \n		CASE WHEN FILING_DATE < COALESCE(FIRST_PRIORITY_D"
+"ATE, CONVERT(DATETIME, '31/12/2099', 103)) THEN FILING_DATE ELSE COALESCE(FIRST_PRIORITY_DATE, CONVERT(DATETIME, '31/12/"
+"2099', 103)) END < COALESCE(PCT_APPLICATION_DATE, CONVERT(DATETIME, '31/12/2099', 103)) THEN \n		CASE WHEN FILING_DATE <"
+" COALESCE(FIRST_PRIORITY_DATE, CONVERT(DATETIME, '31/12/2099', 103)) THEN FILING_DATE ELSE COALESCE(FIRST_PRIORITY_DATE,"
+" CONVERT(DATETIME, '31/12/2099', 103)) END ELSE COALESCE(PCT_APPLICATION_DATE, CONVERT(DATETIME, '31/12/2099', 103)) END"
+" \n		FROM  wrk_patent M \n		\n		/* Update MAIN_OWNER_PERSON_NBR, MAIN_OWNER_ADDR_NBR,  \n		       from WRK_patent_OWNERS"
+" where the file is the same and IND_SERVICE = 1 */\n		UPDATE  M   \n		SET	MAIN_OWNER_PERSON_NBR = (	SELECT person_nbr\n	"
+"		FROM  wrk_patent_owners T \n			WHERE	 M.file_seq  = T.file_seq\n			 AND	M.file_type  = T.file_type\n			 AND	M.file_ser"
+"ies  = T.file_series\n			 AND	M.file_nbr  = T.file_nbr\n			 AND	ind_service  = 1\n		),	\n		    MAIN_OWNER_ADDR_NBR = (	S"
+"ELECT addr_nbr\n			FROM  wrk_patent_owners T \n			WHERE	 M.file_seq  = T.file_seq\n			 AND	M.file_type  = T.file_type\n	"
+"		 AND	M.file_series  = T.file_series\n			 AND	M.file_nbr  = T.file_nbr\n			 AND	ind_service  = 1\n		) \n		FROM  wrk_pat"
+"ent M \n		\n		/* Initialize SERVICE_PERSON_NBR and SERVICE_ADDR_NBR,  \n		       from WRK_patent_OWNERS where the file i"
+"s the same and IND_SERVICE = 1 */\n		UPDATE  M   \n		SET	SERVICE_PERSON_NBR = (	SELECT person_nbr\n			FROM  wrk_patent_o"
+"wners T \n			WHERE	 M.file_seq  = T.file_seq\n			 AND	M.file_type  = T.file_type\n			 AND	M.file_series  = T.file_series"
+"\n			 AND	M.file_nbr  = T.file_nbr\n			 AND	ind_service  = 1\n		),	\n		    SERVICE_ADDR_NBR = (	SELECT addr_nbr\n			FROM"
+"  wrk_patent_owners T \n			WHERE	 M.file_seq  = T.file_seq\n			 AND	M.file_type  = T.file_type\n			 AND	M.file_series  ="
+" T.file_series\n			 AND	M.file_nbr  = T.file_nbr\n			 AND	ind_service  = 1\n		) \n		FROM  wrk_patent M \n		\n		/* Update"
+" SERVICE_PERSON_NBR and SERVICE_ADDR_NBR for those files with a\n		       matching WRK_patent_REPRS where the file is th"
+"e same and IND_SERVICE = 1 */\n		UPDATE  M   \n		SET	SERVICE_PERSON_NBR = (	SELECT person_nbr\n			FROM  wrk_patent_reprs"
+" T \n			WHERE	 M.file_seq  = T.file_seq\n			 AND	M.file_type  = T.file_type\n			 AND	M.file_series  = T.file_series\n			"
+" AND	M.file_nbr  = T.file_nbr\n			 AND	ind_service  = 1\n		),	\n		    SERVICE_ADDR_NBR = (	SELECT addr_nbr\n			FROM  wrk"
+"_patent_reprs T \n			WHERE	 M.file_seq  = T.file_seq\n			 AND	M.file_type  = T.file_type\n			 AND	M.file_series  = T.fil"
+"e_series\n			 AND	M.file_nbr  = T.file_nbr\n			 AND	ind_service  = 1\n		) \n		FROM  wrk_patent M \n		WHERE    exists\n		"
+"	(\n		 	SELECT *\n			FROM  wrk_patent_reprs T \n			WHERE	 M.file_seq  = T.file_seq\n			 AND	M.file_type  = T.file_type\n"
+"			 AND	M.file_series  = T.file_series\n			 AND	M.file_nbr  = T.file_nbr\n			 AND	ind_service  = 1\n			) \n		\n		/* Upda"
+"te PROC_TYP from CF_LAW_APPLICATION_TYPE.GENERATE_PROC_TYP */\n		UPDATE  M   \n		SET	proc_typ = (	SELECT generate_proc_t"
+"yp\n			FROM  CF_APPLICATION_TYPE T \n			WHERE	 appl_typ  = application_type	COLLATE DATABASE_DEFAULT\n		) \n		FROM  wrk_"
+"patent M \n		\n		/* Update STATUS_CODE from CF_PROCESS_TYPE.SECONDARY_INI_STATUS_CODE */\n		UPDATE  M   \n		SET	status_c"
+"ode = (	SELECT SECONDARY_INI_STATUS_CODE\n			FROM  CF_PROCESS_TYPE T \n			WHERE	 T.proc_typ  = M.proc_typ\n		) \n		FROM "
+" wrk_patent M \n		\n		INSERT INTO  wrk_log    \n		 SELECT 'Step 3: update additional data in WRK_patent' , \n				@time1 "
+", datediff(ss, @time1, getdate());\n		\n		/* Other WRK_patent updates which require a tuple by tuple processing */\n		SE"
+"LECT @time1  =  GETDATE()\n\n		DECLARE @ConfigDOC_ORI                            VARCHAR(8) \n		DECLARE @NumDOC_NBR     "
+"                          FLOAT \n		DECLARE @NumPROC_NBR                              FLOAT \n		DECLARE @VarDOC_ORI     "
+"                          VARCHAR(8) \n		DECLARE @VarDOC_SER                               FLOAT \n		DECLARE @VarDOC_NBR"
+"                               FLOAT \n		\n		SELECT	@ConfigDOC_ORI  =  value\n		FROM	cf_config_param \n		WHERE	config_co"
+"de  = 'MigrationCodOri'\n		\n		SELECT	@NumDOC_NBR  =  ISNULL(MAX(DOC_NBR), 0)\n		FROM	IP_DOC \n		WHERE	DOC_ORI  = @Confi"
+"gDOC_ORI\n		\n		SELECT @NumPROC_NBR  =  ISNULL(MAX(PROC_NBR), 0)\n		FROM  IP_PROC \n		\n		/* process all WRK_patent */\n"
+"		DECLARE cur4 cursor LOCAL FOR \n		SELECT	file_seq, file_type, file_series, file_nbr, doc_ori, doc_series, doc_nbr\n		F"
+"ROM	wrk_patent (UPDLOCK)  \n		\n		DECLARE @rec4_file_seq		VARCHAR(200)\n		DECLARE @rec4_file_type		VARCHAR(200)\n		DECLA"
+"RE @rec4_file_series	NUMERIC\n		DECLARE @rec4_file_nbr		NUMERIC\n		DECLARE @rec4_doc_ori		VARCHAR(200)\n		DECLARE @rec4_"
+"doc_series	NUMERIC\n		DECLARE @rec4_doc_nbr		NUMERIC\n	\n		OPEN cur4 \n		WHILE (0 = 0) \n		BEGIN --( \n			\n			fetch NEX"
+"T FROM cur4 INTO @rec4_file_seq, @rec4_file_type, @rec4_file_series, @rec4_file_nbr, @rec4_doc_ori, @rec4_doc_series, @r"
+"ec4_doc_nbr\n			IF (@@FETCH_STATUS = -1) \n			BREAK\n\n			/* if DOC_NBR is null, increment numbering, else set from curr"
+"ent values */\n			\n			IF @rec4_DOC_NBR is null \n			BEGIN \n				SET @NumDOC_NBR  = @NumDOC_NBR + 1 \n				SET @VarDOC_OR"
+"I  = @ConfigDOC_ORI \n				SET @VarDOC_SER  = 1 \n				SET @VarDOC_NBR  = @NumDOC_NBR \n			END\n			ELSE\n			BEGIN \n				SE"
+"T @VarDOC_ORI  = @rec4_DOC_ORI \n				SET @VarDOC_SER  = @rec4_DOC_SERIES \n				SET @VarDOC_NBR  = @rec4_DOC_NBR \n			END"
+"\n   \n			/* Increment NumPROC_NBR but do not insert IP_PROC yet since there is a FK */\n			SET @NumPROC_NBR  = @NumPROC"
+"_NBR + 1 \n			/* update WRK_patent with the updated fields */\n			UPDATE  wrk_patent   \n			SET	DOC_ORI		= @VarDOC_ORI,	"
+"\n			    DOC_SERIES	= @VarDOC_SER,	\n			    DOC_NBR		= @VarDOC_NBR,	\n			    PROC_NBR	= @NumPROC_NBR \n			 where current"
+" of cur4  \n		END --) \n		close cur4\n		\n		INSERT INTO  wrk_log    \n		 SELECT 'Other WRK_patent updates which require "
+"a tuple by tuple processing' , \n				@time1 , datediff(ss, @time1, getdate());\n		\n		/* 1.2.4 Step 4: prepare other tab"
+"les */\n		SELECT @time1  =  GETDATE()\n		\n		/* Insert into CF_DOC_SERIES from distinct FILE_SER from WRK_patent (only n"
+"ew tuples) */\n		INSERT INTO  CF_DOC_SERIES   \n				( row_version , \n				doc_ser , \n				ind_active )  \n		SELECT DISTI"
+"NCT\n				 1,\n				 file_series,\n				 'N'\n		FROM  wrk_patent \n		WHERE	 file_series  not in\n			(\n		 	SELECT doc_ser\n"
+"			FROM  CF_DOC_SERIES \n			)\n		\n		/* Insert into CF_DOC_SERIES from distinct year(reception_date) from WRK_patent (on"
+"ly new tuples) */\n		INSERT INTO  CF_DOC_SERIES   \n				( row_version , \n				doc_ser , \n				ind_active )  \n		SELECT D"
+"ISTINCT\n				 1,\n				 CAST(DATEPART(YYYY, reception_date) as NUMERIC),\n				 'N'\n		FROM  wrk_patent \n		WHERE	 CAST(DA"
+"TEPART(YYYY, reception_date) as NUMERIC)  not in\n			(\n		 	SELECT doc_ser\n			FROM  CF_DOC_SERIES \n			)\n		\n		/* Inse"
+"rt into IP_DAY from distinct RECEPTION_DATE from WRK_patent (only new tuples) */\n		INSERT INTO  IP_DAY   \n				( row_ve"
+"rsion , \n				daily_date , \n				doc_ser ,\n				next_working_date)  \n		SELECT DISTINCT\n				 1,\n				 cast(reception_da"
+"te as DATE),\n				 CAST(DATEPART(YYYY, reception_date) as NUMERIC),\n				 case\n				    when datepart(dw, cast(reception"
+"_date as DATE)) = 7 /* Saturday */\n				            then dateadd(dd, 2, cast(reception_date as DATE))\n				    when date"
+"part(dw, cast(reception_date as DATE)) = 1 /* Sunday */\n				            then dateadd(dd, 1, cast(reception_date as DATE"
+"))\n				    else null\n				 end\n		FROM  wrk_patent \n		WHERE	 cast(reception_date as DATE) not in\n			(\n		 	SELECT dai"
+"ly_date\n			FROM  IP_DAY \n			)\n		\n		/* Insert into IP_DAILY_LOG from distinct DOC_ORI, DOC_LOG, FILING_DATE from WRK_"
+"patent (only new tuples) */\n		INSERT INTO  IP_DAILY_LOG   \n				( row_version , \n				doc_ori , \n				doc_log , \n				d"
+"aily_log_date )  \n		SELECT DISTINCT\n				 1,\n				 DOC_ORI,\n				 'E',\n				 cast(reception_date as DATE)\n		FROM  wrk_"
+"patent M \n		WHERE	 NOT   exists\n			(\n		 	SELECT *\n			FROM  IP_DAILY_LOG L \n			WHERE	 L.DOC_ORI  = M.DOC_ORI		COLLAT"
+"E DATABASE_DEFAULT\n			 AND	DOC_LOG  = 'E'\n			 AND	DAILY_LOG_DATE  = cast(reception_date as DATE)\n			)\n		\n		INSERT I"
+"NTO  wrk_log    \n		 SELECT '1.2.4 Step 4: prepare other tables' , \n				@time1 , datediff(ss, @time1, getdate());\n		\n"
+"		/* 1.2.5 Step 5: insert data */\n		/* Insert into IP_DOC */\n		SELECT @time1  =  GETDATE()\n		\n		INSERT INTO  IP_DOC "
+"  \n				( ROW_VERSION , \n				DOC_ORI , \n				DOC_LOG , \n				DOC_SER , \n				DOC_NBR , \n				FILE_SEQ , \n				FILE_TYP "
+", \n				FILE_SER , \n				FILE_NBR , \n				DOC_SEQ_TYP , \n				DOC_SEQ_SERIES , \n				DOC_SEQ_NBR , \n				DAILY_LOG_DATE "
+",\n				RECEPTION_DATE , \n				FILING_DATE , \n				RECEPTION_WCODE , \n				APPL_TYP , \n				APPL_SUBTYP )  \n		SELECT\n		"
+"		 1,\n				 DOC_ORI,\n				 'E',\n				 DOC_SERIES,\n				 DOC_NBR,\n				 FILE_SEQ,\n				 FILE_TYPE,\n				 FILE_SERIES,\n		"
+"		 FILE_NBR,\n				 FT.DOC_SEQ_TYP,\n				 FILE_SERIES,\n				 FILE_NBR,\n				 cast(RECEPTION_DATE as DATE),\n				 RECEPTIO"
+"N_DATE,\n				 FILING_DATE,\n				 'SC',\n				 APPLICATION_TYPE,\n				 APPLICATION_SUBTYPE\n		FROM  WRK_patent M \n		 JOIN"
+" CF_FILE_TYPE FT ON FT.file_typ  = M.file_type			COLLATE DATABASE_DEFAULT\n		\n		INSERT INTO  wrk_log    \n		 SELECT 'In"
+"sert into IP_DOC' , \n				@time1 , datediff(ss, @time1, getdate());\n		\n		/* Insert into IP_FILE from WRK_patent settin"
+"g only columns not loaded by the trigger in IP_patent */\n		SELECT @time1  =  GETDATE()\n		\n		INSERT INTO  IP_FILE   \n"
+"				( ROW_VERSION , \n				FILE_SEQ , \n				FILE_TYP , \n				FILE_SER , \n				FILE_NBR , \n				DOC_ORI , \n				DOC_LOG , "
+"\n				DOC_SER , \n				DOC_NBR , \n				FILE_SOURCE_WCODE , \n				APPL_TYP )  \n		SELECT\n				 1,\n				 FILE_SEQ,\n				 FI"
+"LE_TYPE,\n				 FILE_SERIES,\n				 FILE_NBR,\n				 DOC_ORI,\n				 'E',\n				 DOC_SERIES,\n				 DOC_NBR,\n				 2,\n				 AP"
+"PLICATION_TYPE\n		FROM  WRK_patent \n		\n		INSERT INTO  wrk_log    \n		 SELECT 'Insert into IP_FILE from WRK_patent' , "
+"\n				@time1 , datediff(ss, @time1, getdate());\n		\n		/* Insert into IP_FILE_SECTIONS */\n		SELECT @time1  =  GETDATE()"
+"\n		\n		INSERT INTO  IP_FILE_SECTIONS   \n				( ROW_VERSION , \n				FILE_SEQ , \n				FILE_TYP , \n				FILE_SER , \n				FI"
+"LE_NBR , \n				FILE_SECTION_NBR , \n				FILE_SECTION_DESCRIPTION )  \n		SELECT\n				 1,\n				 FILE_SEQ,\n				 FILE_TYPE,"
+"\n				 FILE_SERIES,\n				 FILE_NBR,\n				 1,\n				 'Dummy description'\n		FROM  WRK_patent \n		\n		INSERT INTO  wrk_log "
+"   \n		 SELECT 'Insert into IP_FILE_SECTIONS' , \n				@time1 , datediff(ss, @time1, getdate());\n		\n		/* Insert into IP"
+"_patent */\n		SELECT @time1  =  GETDATE()\n		\n		INSERT INTO  IP_patent    \n		  		( ROW_VERSION , \n				FILE_SEQ , \n		"
+"		FILE_TYP , \n				FILE_SER , \n				FILE_NBR , \n				DOC_ORI , \n				DOC_LOG , \n				DOC_SER , \n				DOC_NBR , \n				APP"
+"L_TYP , \n				APPL_SUBTYP , \n				LAW_CODE , \n				FILING_DATE , \n				RECEPTION_DATE , \n				PUBLICATION_DATE , \n				P"
+"UBLICATION_NOTES , \n				SPECIAL_PUBL_APPL_DATE , \n				SPECIAL_PUBL_DATE , \n				IND_REGISTERED , \n				REGISTRATION_TY"
+"P , \n				REGISTRATION_SER , \n				REGISTRATION_NBR , \n				REGISTRATION_DUP , \n				REGISTRATION_DATE , \n				ENTITLEME"
+"NT_DATE , \n				EXPIRATION_DATE , \n				EXHIBITION_DATE , \n				EXHIBITION_NOTES , \n				PCT_PHASE , \n				PCT_APPL_ID ,"
+" \n				PCT_APPL_DATE , \n				PCT_PUBL_COUNTRY , \n				PCT_PUBL_DATE , \n				PCT_PUBL_TYP , \n				PCT_PUBL_ID , \n				REG"
+"IONAL_APPL_ID , \n				REGIONAL_APPL_DATE , \n				REGIONAL_PUBL_COUNTRY , \n				REGIONAL_PUBL_DATE , \n				REGIONAL_PUBL_"
+"TYP , \n				REGIONAL_PUBL_ID , \n				TITLE , \n				ENGLISH_TITLE , \n				LAST_CLAIMS_PAGE_REF , \n				LAST_DESCRIPTION_P"
+"AGE_REF , \n				EXAM_IPC_USED , \n				EXAM_KEYWORDS_USED , \n				IND_EXAM_INDUSTRIAL , \n				IND_EXAM_NOVELTY , \n				IN"
+"D_EXAM_INVENTIVE , \n				EXAM_RESULT , \n				NOVELTY1_DATE , \n				FIRST_PRIORITY_DATE , \n				MAIN_OWNER_PERSON_NBR , "
+"\n				MAIN_OWNER_ADDR_NBR , \n				SERVICE_PERSON_NBR , \n				SERVICE_ADDR_NBR , \n				CAPTURE_USER_ID , \n				CAPTURE_DAT"
+"E , PUBLICATION_NBR,PUBLICATION_SER,PUBLICATION_TYP )  \n		    -- data not loaded from import tables\n            -- IND"
+"_MANUAL_INTERPRETATION\n            -- IND_OWNER_SAMEAS_INVENTOR\n            -- APPLICANT_TYP\n    select  	1, \n		FILE"
+"_SEQ, \n		FILE_TYPE, \n		FILE_SERIES, \n		FILE_NBR, \n		DOC_ORI, \n		'E', \n		DOC_SERIES, \n		DOC_NBR,\n            	APP"
+"LICATION_TYPE, \n		APPLICATION_SUBTYPE, \n		LAW_CODE,\n            	FILING_DATE, \n		RECEPTION_DATE, \n            	PUBL"
+"ICATION_DATE, \n		PUBLICATION_NOTES, \n		SPECIAL_PUBL_APPL_DATE, \n		SPECIAL_PUBL_REQU_DATE, \n	    	CASE IND_REGISTERED"
+" \n		   WHEN 1 THEN 'S' \n		   ELSE 'N' \n	    	END,\n            	REGISTRATION_TYPE, \n		REGISTRATION_SERIES, \n		REGIS"
+"TRATION_NBR, \n		REGISTRATION_DUP,\n            	REGISTRATION_DATE, \n		ENTITLEMENT_DATE, \n		EXPIRATION_DATE, \n       "
+"     	EXHIBITION_DATE, \n		EXHIBITION_NOTES,\n            	PCT_PHASE, \n		PCT_APPLICATION_ID, \n		PCT_APPLICATION_DATE, "
+"\n		PCT_PUBLICATION_COUNTRY_CODE, \n		PCT_PUBLICATION_DATE, \n		PCT_PUBLICATION_TYPE, \n		PCT_PUBLICATION_ID,\n         "
+"   	REGIONAL_APPL_ID, \n		REGIONAL_APPL_DATE, \n		REGIONAL_PUBL_COUNTRY_CODE, \n		REGIONAL_PUBL_DATE, \n		REGIONAL_PUBL_"
+"TYPE, \n		REGIONAL_PUBL_ID, \n            	TITLE, \n		ENGLISH_TITLE, \n		LAST_CLAIMS_PAGE_REF, \n		LAST_DESCRIPTION_PAGE"
+"_REF,\n            	USED_IPC_DESCRIPTION, \n		USED_KEYWORD_DESCRIPTION, \n	    	CASE IND_EXAM_INDUSTRIAL\n		   WHEN 1 TH"
+"EN 'S' \n		   ELSE 'N' \n	    	END,\n	    	CASE IND_EXAM_NOVELTY \n		   WHEN 1 THEN 'S' \n		   ELSE 'N' \n	    	END,\n	 "
+"   	CASE IND_EXAM_INVENTIVE \n		   WHEN 1 THEN 'S' \n		   ELSE 'N' \n	    	END,\n		EXAM_RESULT,\n            	NOVELTY_DA"
+"TE, \n		FIRST_PRIORITY_DATE,\n            	MAIN_OWNER_PERSON_NBR, \n		MAIN_OWNER_ADDR_NBR,\n            	SERVICE_PERSON_"
+"NBR, \n		SERVICE_ADDR_NBR,\n            	CAPTURE_USER_ID, \n		CAPTURE_DATE,PUBLICATION_NBR,PUBLICATION_SER,PUBLICATION_T"
+"YP\n    from    WRK_patent\n    ;\n\n		INSERT INTO  wrk_log    \n		 SELECT 'Insert into IP_patent' , \n				@time1 , date"
+"diff(ss, @time1, getdate());\n		\n		/* Insert into IP_patent_OWNERS from WRK_patent_OWNERS */\n		SELECT @time1  =  GETDA"
+"TE()\n		\n		/* the same person may be repeated several times, so groups are used */\n		INSERT INTO  IP_patent_OWNERS   "
+"\n				( ROW_VERSION , \n				FILE_SEQ , \n				FILE_TYP , \n				FILE_SER , \n				FILE_NBR , \n				PERSON_NBR , \n				ADDR_N"
+"BR , \n				NOTES )  \n		SELECT\n				 1,\n				 FILE_SEQ,\n				 FILE_TYPE,\n				 FILE_SERIES,\n				 FILE_NBR,\n				 PERSON"
+"_NBR,\n				 ADDR_NBR,\n				 min(OWNERSHIP_NOTES)\n		FROM  WRK_patent_OWNERS \n		GROUP BY FILE_SEQ, FILE_TYPE, FILE_SERIE"
+"S, FILE_NBR, PERSON_NBR, ADDR_NBR\n		\n		INSERT INTO  wrk_log    \n		 SELECT 'Insert into IP_patent_OWNERS' , \n				@tim"
+"e1 , datediff(ss, @time1, getdate());\n		\n		/* Insert into IP_patent_REPRS from WRK_patent_REPRS */\n		SELECT @time1  ="
+"  GETDATE()\n		\n		/* the same person may be repeated several times, so groups are used */\n		INSERT INTO  IP_patent_REP"
+"RS   \n				( ROW_VERSION , \n				FILE_SEQ , \n				FILE_TYP , \n				FILE_SER , \n				FILE_NBR , \n				PERSON_NBR , \n				"
+"ADDR_NBR , \n				REPRESENTATIVE_TYP )  \n		SELECT\n				 1,\n				 FILE_SEQ,\n				 FILE_TYPE,\n				 FILE_SERIES,\n				 FIL"
+"E_NBR,\n				 PERSON_NBR,\n				 ADDR_NBR,\n				 min(REPRESENTATIVE_TYPE)\n		FROM  WRK_patent_REPRS \n		GROUP BY FILE_SEQ,"
+" FILE_TYPE, FILE_SERIES, FILE_NBR, PERSON_NBR, ADDR_NBR\n		\n		INSERT INTO  wrk_log    \n		 SELECT 'Insert into IP_paten"
+"t_REPRS' , \n				@time1 , datediff(ss, @time1, getdate());\n		\n		/* Insert into IP_patent_INVENTORS from WRK_patent_INV"
+"ENTORS */\n		SELECT @time1  =  GETDATE()\n		\n		/* the same person may be repeated several times, so groups are used */"
+"\n		INSERT INTO  IP_patent_INVENTORS   \n				( ROW_VERSION , \n				FILE_SEQ , \n				FILE_TYP , \n				FILE_SER , \n				FIL"
+"E_NBR , \n				PERSON_NBR , \n				ADDR_NBR , \n				SEQ_NBR )  \n		SELECT	\n				 1,\n				 FILE_SEQ,\n				 FILE_TYPE,\n				"
+" FILE_SERIES,\n				 FILE_NBR,\n				 PERSON_NBR,\n				 ADDR_NBR,\n				 min(AUTHOR_SEQ)\n		FROM  WRK_patent_INVENTORS \n		"
+"GROUP BY FILE_SEQ, FILE_TYPE, FILE_SERIES, FILE_NBR, PERSON_NBR, ADDR_NBR\n		\n		INSERT INTO  wrk_log    \n		 SELECT 'In"
+"sert into IP_patent_INVENTORS' , \n				@time1 , datediff(ss, @time1, getdate());\n		\n		/* Insert into IP_patent_PRIORIT"
+"IES from WRK_patent_PRIORITIES */\n		SELECT @time1  =  GETDATE()\n		\n		INSERT INTO  IP_patent_PRIORITIES   \n				( ROW_"
+"VERSION , \n				FILE_SEQ , \n				FILE_TYP , \n				FILE_SER , \n				FILE_NBR , \n				COUNTRY_CODE , \n				PRIORITY_APPL_I"
+"D , \n				PRIORITY_DATE , \n				IND_ACCEPTED , \n				NOTES , \n				PRIORITY_APPL_ID_ALT )  \n		SELECT\n				 1,\n				 FIL"
+"E_SEQ,\n				 FILE_TYPE,\n				 FILE_SERIES,\n				 FILE_NBR,\n				 COUNTRY_CODE,\n				 APPLICATION_ID,\n				 PRIORITY_DATE"
+",\n			    	 CASE IND_ACCEPTED\n				    WHEN 1 THEN 'S' \n				    ELSE 'N' \n	    			 END,\n				 NOTES,\n				 PRIORITY_AP"
+"PL_ID_ALT\n		FROM  wrk_patent_priorities \n		\n		INSERT INTO  wrk_log    \n		 SELECT 'Insert into IP_patent_PRIORITIES' "
+", \n				@time1 , datediff(ss, @time1, getdate());\n		\n		/* Insert into IP_DOC_PAYMENTS from  ["+ context.intermediateDB + "].[dbo].VW_IMPORT_patent_PAYMENTS (joining WRK_patent to use DOC_*** columns) */\n		SELECT @time1  =  GETDATE()\n		\n		"
+"INSERT INTO  IP_DOC_PAYMENTS   \n				( ROW_VERSION , \n				DOC_ORI , \n				DOC_LOG , \n				DOC_SER , \n				DOC_NBR , \n	"
+"			RECEIPT_NBR , \n				RECEIPT_DATE , \n				RECEIPT_AMOUNT , \n				RECEIPT_TYP , \n				CURRENCY_TYP )  \n		SELECT\n				 "
+"1,\n				 DOC_ORI,\n				 'E',\n				 DOC_SERIES,\n				 DOC_NBR,\n				 RECEIPT_NBR,\n				 RECEIPT_DATE,\n				 RECEIPT_AMOUN"
+"T,\n				 RECEIPT_TYPE,\n				 CURRENCY_TYPE\n		FROM   ["+ context.intermediateDB + "].[dbo].VW_import_patent_payments T JOIN wrk_patent M ON T.file_seq  = M.file_seq\n			 AND	T.file_type  = M.file_type\n"
+"			 AND	T.file_series  = M.file_series\n			 AND	T.file_nbr  = M.file_nbr  \n		WHERE	 ind_import  = 0\n		\n		INSERT INTO "
+" wrk_log    \n		 SELECT 'Insert into IP_DOC_PAYMENTS' , \n				@time1 , datediff(ss, @time1, getdate());\n		\n		/* Insert"
+" into IP_PATENT_FIGU_SECTIONS from  ["+ context.intermediateDB + "].[dbo].VW_IMPORT_PATENT_DRAWINGS (only with  ["+ context.intermediateDB + "].[dbo].VW_IMPORT_patent.IND_IMPORT = 0) */\n		/* The binary is loaded into a single section in the BLOB column SECTOR_"
+"DATA2, which will then be transferred\n		       to SECTOR_DATA (which is LONG) during the finalization of the import mod"
+"e for the environment */\n		SELECT @time1  =  GETDATE()\n		\n		INSERT INTO  IP_PATENT_DRAWINGS   \n				( ROW_VERSION , "
+"\n				FILE_SEQ , \n				FILE_TYP , \n				FILE_SER , \n				FILE_NBR , \n				DRAWING_NBR , \n				IMAGE_FORMAT_WCODE , \n				"
+"DRAWING_DATA )  \n		SELECT\n				 1,\n				 T.FILE_SEQ,\n				 T.FILE_TYPE,\n				 T.FILE_SERIES,\n				 T.FILE_NBR,\n				 DR"
+"AWING_NBR,\n				 \n				CASE DRAWING_IMAGE_TYPE \n					WHEN 'TIF' THEN 1 \n					ELSE 2 \n				END,\n				 DRAWING_IMAGE_DAT"
+"A\n		FROM   ["+ context.intermediateDB + "].[dbo].VW_import_patent_drawings T JOIN wrk_patent M ON T.file_seq  = M.file_seq\n			 AND	T.file_type  = M.file_type\n"
+"			 AND	T.file_series  = M.file_series\n			 AND	T.file_nbr  = M.file_nbr  \n		\n		INSERT INTO  wrk_log    \n		 SELECT 'I"
+"nsert into IP_PATENT_DRAWINGS' , \n				@time1 , datediff(ss, @time1, getdate());\n		\n		/* Insert into IP_PATENT_ANNUITI"
+"ES (only with  ["+ context.intermediateDB + "].[dbo].VW_IMPORT_patent.IND_IMPORT = 0) */\n		SELECT @time1  =  GETDATE()\n		\n		INSERT INTO  IP_PATENT_ANNUITIES   \n"
+"				( ROW_VERSION , \n				FILE_SEQ , \n				FILE_TYP , \n				FILE_SER , \n				FILE_NBR , \n				ANNUITY_NBR , \n				EXPIRA"
+"TION_DATE , \n				GRACE_DATE , \n				IND_IGNORE , \n				COMPLETE_PAYMENT_DATE , \n				IND_PAYED )  \n		SELECT\n				 1,\n"
+"				 T.FILE_SEQ,\n				 T.FILE_TYPE,\n				 T.FILE_SERIES,\n				 T.FILE_NBR,\n				 ANNUITY_NBR,\n				 T.EXPIRATION_DATE,\n"
+"				 GRACE_DATE,\n			    	 CASE IND_IGNORE\n				    WHEN 1 THEN 'S' \n				    ELSE 'N' \n	    			 END,\n				 COMPLETE_PA"
+"YMENT_DATE,\n			    	 CASE IND_PAID\n				    WHEN 1 THEN 'S' \n				    ELSE 'N' \n	    			 END\n		FROM   ["+ context.intermediateDB + "].[dbo].VW_import_patent_annuities T JOIN wrk_patent M ON T.file_seq  = M.file_seq\n			 AND	T.file_type  = M.file_type"
+"\n			 AND	T.file_series  = M.file_series\n			 AND	T.file_nbr  = M.file_nbr  \n		\n		INSERT INTO  wrk_log    \n		 SELECT '"
+"Insert into IP_PATENT_ANNUITIES' , \n				@time1 , datediff(ss, @time1, getdate());\n		\n		/* Insert into IP_PATENT_CLAIM"
+"S (only with  ["+ context.intermediateDB + "].[dbo].VW_IMPORT_patent.IND_IMPORT = 0) */\n		SELECT @time1  =  GETDATE()\n		\n		/* insert for local language */\n		IN"
+"SERT INTO  IP_PATENT_CLAIMS   \n				( ROW_VERSION , \n				FILE_SEQ , \n				FILE_TYP , \n				FILE_SER , \n				FILE_NBR , "
+"\n				CLAIM_NBR , \n				LANGUAGE_CODE , \n				CLAIM_DESCRIPTION )  \n		SELECT\n				 1,\n				 T.FILE_SEQ,\n				 T.FILE_TY"
+"PE,\n				 T.FILE_SERIES,\n				 T.FILE_NBR,\n				 CLAIM_NBR,\n				 'MX',\n				 CLAIM_DESCRIPTION\n		FROM   ["+ context.intermediateDB + "].[dbo].VW_import_patent_claims T JOIN wrk_patent M ON T.file_seq  = M.file_seq\n			 AND	T.file_type  = M.file_type\n		"
+"	 AND	T.file_series  = M.file_series\n			 AND	T.file_nbr  = M.file_nbr  \n		WHERE	 CLAIM_DESCRIPTION  is not null\n		\n	"
+"	/* insert for English language */\n		INSERT INTO  IP_PATENT_CLAIMS   \n				( ROW_VERSION , \n				FILE_SEQ , \n				FILE_"
+"TYP , \n				FILE_SER , \n				FILE_NBR , \n				CLAIM_NBR , \n				LANGUAGE_CODE , \n				CLAIM_DESCRIPTION )  \n		SELECT\n	"
+"			 1,\n				 T.FILE_SEQ,\n				 T.FILE_TYPE,\n				 T.FILE_SERIES,\n				 T.FILE_NBR,\n				 CLAIM_NBR,\n				 'US',\n				 CL"
+"AIM_ENGLISH_DESCRIPTION\n		FROM   ["+ context.intermediateDB + "].[dbo].VW_import_patent_claims T JOIN wrk_patent M ON T.file_seq  = M.file_seq\n			 AND	T.file_type  = M.file_type\n		"
+"	 AND	T.file_series  = M.file_series\n			 AND	T.file_nbr  = M.file_nbr  \n		WHERE	 CLAIM_ENGLISH_DESCRIPTION  is not nul"
+"l\n		\n		INSERT INTO  wrk_log    \n		 SELECT 'Insert into IP_PATENT_CLAIMS' , \n				@time1 , datediff(ss, @time1, getdat"
+"e());\n		\n		/* Insert into IP_PATENT_SUMMARY (only with  ["+ context.intermediateDB + "].[dbo].VW_IMPORT_patent.IND_IMPORT = 0) */\n		SELECT @time1  =  GETDATE()\n		\n		/* insert for local language */\n		IN"
+"SERT INTO  IP_PATENT_SUMMARY   \n				( ROW_VERSION , \n				FILE_SEQ , \n				FILE_TYP , \n				FILE_SER , \n				FILE_NBR ,"
+" \n				LANGUAGE_CODE , \n				SUMMARY )  \n		SELECT\n				 1,\n				 T.FILE_SEQ,\n				 T.FILE_TYPE,\n				 T.FILE_SERIES,\n	"
+"			 T.FILE_NBR,\n				 'MX',\n				 T.ABSTRACT\n		FROM   ["+ context.intermediateDB + "].[dbo].VW_import_patent T JOIN wrk_patent M ON T.file_seq  = M.file_seq\n			 AND	T.file_type  = M.file_type\n			 AND	T"
+".file_series  = M.file_series\n			 AND	T.file_nbr  = M.file_nbr  \n		WHERE	 T.ABSTRACT  is not null\n		\n		/* insert for"
+" English language */\n		INSERT INTO  IP_PATENT_SUMMARY   \n				( ROW_VERSION , \n				FILE_SEQ , \n				FILE_TYP , \n				F"
+"ILE_SER , \n				FILE_NBR , \n				LANGUAGE_CODE , \n				SUMMARY )  \n		SELECT\n				 1,\n				 T.FILE_SEQ,\n				 T.FILE_TYP"
+"E,\n				 T.FILE_SERIES,\n				 T.FILE_NBR,\n				 'US',\n				 T.ENGLISH_ABSTRACT\n		FROM   ["+ context.intermediateDB + "].[dbo].VW_import_patent T JOIN wrk_patent M ON T.file_seq  = M.file_seq\n			 AND	T.file_type  = M.file_type\n			 AND	T"
+".file_series  = M.file_series\n			 AND	T.file_nbr  = M.file_nbr  \n		WHERE	 T.ENGLISH_ABSTRACT  is not null\n		\n		INSER"
+"T INTO  wrk_log    \n		 SELECT 'Insert into IP_PATENT_SUMMARY' , \n				@time1 , datediff(ss, @time1, getdate());\n		\n		"
+"/* Insert into IP_PATENT_IPC_CLASSES (only with  ["+ context.intermediateDB + "].[dbo].VW_IMPORT_patent.IND_IMPORT = 0) */\n		SELECT @time1  =  GETDATE()\n		\n		INSERT INTO  IP_PATENT_IPC_CLASSES   "
+"\n				( ROW_VERSION , \n				FILE_SEQ , \n				FILE_TYP , \n				FILE_SER , \n				FILE_NBR , \n				IPC_EDITION_CODE , \n			"
+"	IPC_SECTION_CODE , \n				IPC_CLASS_CODE , \n				IPC_SUBCLASS_CODE , \n				IPC_GROUP_CODE , \n				IPC_SUBGROUP_CODE , \n"
+"				IPC_QUALIFICATION_CODE )  \n		SELECT\n				 1,\n				 T.FILE_SEQ,\n				 T.FILE_TYPE,\n				 T.FILE_SERIES,\n				 T.FILE"
+"_NBR,\n				 IPC_EDITION,\n				 IPC_SECTION,\n				 IPC_CLASS,\n				 IPC_SUBCLASS,\n				 IPC_GROUP,\n				 IPC_SUBGROUP,\n	"
+"			 ISNULL(IPC_QUALIFICATION, 'A')\n		FROM   ["+ context.intermediateDB + "].[dbo].VW_import_patent_ipc_classes T \n		 JOIN wrk_patent M ON T.file_seq  = M.file_seq\n			 AND	T.file_type  = M.fil"
+"e_type\n			 AND	T.file_series  = M.file_series\n			 AND	T.file_nbr  = M.file_nbr  \n		\n		INSERT INTO  wrk_log    \n		 S"
+"ELECT 'Insert into IP_PATENT_IPC_CLASSES' , \n				@time1 , datediff(ss, @time1, getdate());\n		\n		/* Insert into IP_PAT"
+"ENT_LOCARNO_CLASSES (only with  ["+ context.intermediateDB + "].[dbo].VW_IMPORT_patent.IND_IMPORT = 0) */\n		SELECT @time1  =  GETDATE()\n		/* Added LOCARNO_EDITION_CODE Field :IPAS"
+"-1273 */\n		INSERT INTO  IP_PATENT_LOCARNO_CLASSES   \n				( ROW_VERSION , \n				FILE_SEQ , \n				FILE_TYP , \n				FILE_"
+"SER , \n				FILE_NBR , \n				LOCARNO_CLASS_CODE ,LOCARNO_EDITION_CODE)  \n		SELECT\n				 1,\n				 T.FILE_SEQ,\n				 T.FI"
+"LE_TYPE,\n				 T.FILE_SERIES,\n				 T.FILE_NBR,\n				 right('0' + CONVERT(varchar, LOCARNO_CLASS_NBR), 2) + '-' + right("
+"'0' + CONVERT(varchar, LOCARNO_SUBCLASS_NBR), 2),\n				 LOCARNO_EDITION_CODE\n		FROM   ["+ context.intermediateDB + "].[dbo].VW_import_patent_locar_classes T JOIN wrk_patent M ON T.file_seq  = M.file_seq\n			 AND	T.file_type  = M.file_t"
+"ype\n			 AND	T.file_series  = M.file_series\n			 AND	T.file_nbr  = M.file_nbr  \n		\n		INSERT INTO  wrk_log    \n		 SELE"
+"CT 'Insert into IP_PATENT_LOCARNO_CLASSES' , \n				@time1 , datediff(ss, @time1, getdate());\n		\n		/* Insert into IP_PA"
+"TENT_NOTES (only with  ["+ context.intermediateDB + "].[dbo].VW_IMPORT_patent.IND_IMPORT = 0) */\n		SELECT @time1  =  GETDATE()\n		\n		INSERT INTO  IP_PATENT_NOTES   \n				"
+"( ROW_VERSION , \n				FILE_SEQ , \n				FILE_TYP , \n				FILE_SER , \n				FILE_NBR , \n				NOTES )  \n		SELECT\n				 1,\n"
+"				 T.FILE_SEQ,\n				 T.FILE_TYPE,\n				 T.FILE_SERIES,\n				 T.FILE_NBR,\n				 T.NOTES\n		FROM   ["+ context.intermediateDB + "].[dbo].VW_import_patent T JOIN wrk_patent M ON T.file_seq  = M.file_seq\n			 AND	T.file_type  = M.file_type\n			 AND	T"
+".file_series  = M.file_series\n			 AND	T.file_nbr  = M.file_nbr  \n		WHERE	 T.notes  is not null\n		\n		INSERT INTO  wrk"
+"_log    \n		 SELECT 'Insert into IP_PATENT_LOCARNO_CLASSES' , \n				@time1 , datediff(ss, @time1, getdate());\n		\n		/* "
+"Insert into IP_PATENT_REF_EXAM (only with  ["+ context.intermediateDB + "].[dbo].VW_IMPORT_patent.IND_IMPORT = 0) */\n		SELECT @time1  =  GETDATE()\n		\n		INSERT INTO  IP_PATENT_REF_EXAM   \n	"
+"			( ROW_VERSION , \n				FILE_SEQ , \n				FILE_TYP , \n				FILE_SER , \n				FILE_NBR , \n				REF_NBR , \n				REF_CATEG ,"
+" \n				REF_DESC , \n				REF_CLAIMS )  \n		SELECT\n				 1,\n				 T.FILE_SEQ,\n				 T.FILE_TYPE,\n				 T.FILE_SERIES,\n			"
+"	 T.FILE_NBR,\n				 REF_NBR,\n				 REF_CATEG_CODE,\n				 REF_DESCRIPTION,\n				 REF_AFFECTS_CLAIMS\n		FROM   ["+ context.intermediateDB + "].[dbo].VW_import_patent_examdocs T JOIN wrk_patent M ON T.file_seq  = M.file_seq\n			 AND	T.file_type  = M.file_type\n"
+"			 AND	T.file_series  = M.file_series\n			 AND	T.file_nbr  = M.file_nbr  \n		\n		INSERT INTO  wrk_log    \n		 SELECT 'I"
+"nsert into IP_PATENT_LOCARNO_CLASSES' , \n				@time1 , datediff(ss, @time1, getdate());\n		\n		/* 1.2.6 Step 6: insert p"
+"rocess and actions */\n		/* Insert into IP_PROC from WRK_patent */\n		SELECT @time1  =  GETDATE()\n		\n		INSERT INTO  IP"
+"_PROC   \n				( ROW_VERSION , \n				PROC_TYP , \n				PROC_NBR , \n				FILE_SEQ , \n				FILE_TYP , \n				FILE_SER , \n			"
+"	FILE_NBR , \n				APPL_TYP , \n				CREATION_DATE , \n				STATUS_CODE , \n				STATUS_DATE , \n				FILE_PROC_TYP , \n				F"
+"ILE_PROC_NBR )  \n		SELECT\n				 1,\n				 PROC_TYP,\n				 PROC_NBR,\n				 FILE_SEQ,\n				 FILE_TYPE,\n				 FILE_SERIES,"
+"\n				 FILE_NBR,\n				 APPLICATION_TYPE,\n				 RECEPTION_DATE,\n				 STATUS_CODE,\n				 RECEPTION_DATE,\n				 PROC_TYP,\n"
+"				 PROC_NBR\n		FROM  wrk_patent \n		\n		INSERT INTO  wrk_log    \n		 SELECT 'Insert into IP_PROC' , \n				@time1 , dat"
+"ediff(ss, @time1, getdate());\n		\n		/* Insert note actions from WRK_patent_ACTIONS where ACTION_CATEGORY = N, joining w"
+"ith WRK_patent */\n		/* long field longer than 3000 is inserted in paired CLOB column */\n		/* Also insert special actio"
+"ns from WRK_patent_ACTIONS where ACTION_CATEGORY = S */\n		SELECT @time1  =  GETDATE()\n		\n		INSERT INTO  IP_ACTION   "
+"\n				( ROW_VERSION , \n				PROC_TYP , \n				PROC_NBR , \n				ACTION_NBR , \n				ACTION_TYP , \n				ACTION_DATE , \n				C"
+"APTURE_DATE , \n				SIGNATURE_DATE , \n				CAPTURE_USER_ID , \n				AUTHORISING_USER_ID , \n				NOTES2 , \n				NOTES3 , "
+"\n				NOTES4 , \n				NOTES5 , \n				ACTION_NOTES , \n				IND_CHANGES_STATUS , \n				NEW_STATUS_CODE , \n				PRIOR_STATUS_"
+"CODE , \n				PRIOR_STATUS_DATE , \n				PRIOR_DUE_DATE , \n				NOTES1)  \n		SELECT\n				 1,\n				 M.PROC_TYP,\n				 M.PRO"
+"C_NBR,\n				 T.ACTION_NBR,\n				 T.ACTION_TYPE,\n				 T.ACTION_DATE,\n				 T.ACTION_DATE,\n				 T.ACTION_DATE,\n				 T.A"
+"CTION_USER,\n				 T.ACTION_USER,\n				 T.ACTION_NOTES2,\n				 T.ACTION_NOTES3,\n				 T.ACTION_NOTES4,\n				 T.ACTION_NOT"
+"ES5,\n				 T.GENERAL_NOTES,\n				 'N',\n				 null,\n				 null,\n				 null,\n				 null,\n				 T.ACTION_NOTES1\n		FROM  wr"
+"k_patent_actions T \n		 JOIN wrk_patent M ON T.file_seq  = M.file_seq\n			 AND	T.file_type  = M.file_type\n			 AND	T.fil"
+"e_series  = M.file_series\n			 AND	T.file_nbr  = M.file_nbr  \n		WHERE	 T.ACTION_CATEGORY  = 'N'\n		UNION ALL\n		 SELECT"
+"\n				 1,\n				 M.PROC_TYP,\n				 M.PROC_NBR,\n				 T.ACTION_NBR,\n				 T.ACTION_TYPE,\n				 T.ACTION_DATE,\n				 T.ACTI"
+"ON_DATE,\n				 T.ACTION_DATE,\n				 T.ACTION_USER,\n				 T.ACTION_USER,\n				 T.ACTION_NOTES2,\n				 T.ACTION_NOTES3,\n	"
+"			 T.ACTION_NOTES4,\n				 T.ACTION_NOTES5,\n				 T.GENERAL_NOTES,\n				 'S',\n				 T.SPECIAL_FINAL_STATUS,\n				 P.STAT"
+"US_CODE,\n				 P.STATUS_DATE,\n				 P.EXPIRATION_DATE,\n				 T.ACTION_NOTES1\n		FROM  wrk_patent_actions T JOIN wrk_pate"
+"nt M ON T.file_seq  = M.file_seq\n			 AND	T.file_type  = M.file_type\n			 AND	T.file_series  = M.file_series\n			 AND	T."
+"file_nbr  = M.file_nbr  JOIN IP_PROC P ON P.proc_typ  = M.proc_typ\n			 AND	P.proc_nbr  = M.proc_nbr  \n		WHERE	 T.ACTIO"
+"N_CATEGORY  = 'S'\n		 \n		\n		INSERT INTO  wrk_log    \n		 SELECT 'Insert note and special actions' , \n				@time1 , dat"
+"ediff(ss, @time1, getdate());\n		\n		/* For each special action, update the status of the process */\n		SELECT @time1  ="
+"  GETDATE()\n		\n		/* Browse special actions */\n		\n		DECLARE curActi cursor LOCAL FOR \n		SELECT	SPECIAL_FINAL_STATUS,"
+" ACTION_DATE, MANUAL_DUE_DATE, RESPONSIBLE_USER, proc_typ, proc_nbr\n		FROM  WRK_patent_ACTIONS T \n		 JOIN wrk_patent M"
+" ON T.file_seq  = M.file_seq\n			 AND	T.file_type  = M.file_type\n			 AND	T.file_series  = M.file_series\n			 AND	T.file"
+"_nbr  = M.file_nbr  \n		WHERE	 ACTION_CATEGORY  = 'S'\n		ORDER BY ACTION_DATE \n		\n		DECLARE @recActi_SPECIAL_FINAL_STA"
+"TUS	VARCHAR(200)\n		DECLARE	@recActi_ACTION_DATE		DATETIME\n		DECLARE	@recActi_MANUAL_DUE_DATE	DATETIME\n		DECLARE	@recA"
+"cti_RESPONSIBLE_USER	NUMERIC\n		DECLARE	@recActi_proc_typ		VARCHAR(200)\n		DECLARE	@recActi_proc_nbr		NUMERIC\n		\n		OPE"
+"N curActi \n		WHILE (0 = 0) \n		BEGIN --( \n			\n			fetch NEXT FROM curActi INTO @recActi_SPECIAL_FINAL_STATUS, @recActi"
+"_ACTION_DATE, @recActi_MANUAL_DUE_DATE, @recActi_RESPONSIBLE_USER, @recActi_proc_typ, @recActi_proc_nbr\n			IF (@@FETCH_"
+"STATUS = -1) \n			BREAK\n\n			/* update IP_PROC */\n			UPDATE  IP_PROC   \n			SET	STATUS_CODE = @recActi_SPECIAL_FINAL_S"
+"TATUS,	\n			    STATUS_DATE = @recActi_ACTION_DATE,	\n			    EXPIRATION_DATE = @recActi_MANUAL_DUE_DATE, \n			    RESPON"
+"SIBLE_USER_ID = @recActi_RESPONSIBLE_USER \n			WHERE  proc_typ  = @recActi_proc_typ\n			 AND	proc_nbr  = @recActi_proc_n"
+"br \n			\n		END --) \n		close curActi\n		\n		INSERT INTO  wrk_log    \n		 SELECT 'For each special action, update the st"
+"atus of the process' , \n				@time1 , datediff(ss, @time1, getdate());\n		\n		/* Update the file to refer to the inserte"
+"d process */\n		SELECT @time1  =  GETDATE()\n		\n		/* Browse patents  */\n\n		DECLARE curpatent cursor LOCAL FOR \n		SEL"
+"ECT	proc_typ, proc_nbr, file_seq, file_type, file_series, file_nbr \n		FROM	WRK_patent \n		\n		DECLARE @recPatent_proc_t"
+"yp		VARCHAR(200)\n		DECLARE @recPatent_proc_nbr		NUMERIC\n		DECLARE @recPatent_file_seq		VARCHAR(200)\n		DECLARE @recPat"
+"ent_file_type	        VARCHAR(200)\n		DECLARE @recPatent_file_series	        NUMERIC\n		DECLARE @recPatent_file_nbr		NUM"
+"ERIC\n\n		\n		OPEN curPatent \n		WHILE (0 = 0) \n		BEGIN --( \n			\n			fetch NEXT FROM curPatent INTO @recPatent_proc_ty"
+"p, @recPatent_proc_nbr, @recPatent_file_seq, @recPatent_file_type, @recPatent_file_series, @recPatent_file_nbr \n			IF ("
+"@@FETCH_STATUS = -1) \n			BREAK\n\n			/* update IP_PROC */\n			UPDATE  IP_FILE   \n			SET	proc_typ = @recPatent_proc_typ"
+",	\n			        proc_nbr = @recPatent_proc_nbr \n			WHERE   file_seq  = @recPatent_file_seq\n			 AND	file_typ  = @recPate"
+"nt_file_type\n			 AND	file_ser  = @recPatent_file_series\n			 AND	file_nbr  = @recPatent_file_nbr \n			\n		END --) \n		c"
+"lose curPatent\n		\n		INSERT INTO  wrk_log    \n		 SELECT 'Update the file to refer to the inserted process' , \n				@ti"
+"me1 , datediff(ss, @time1, getdate());\n		\n		/* *************** FINAL STEP: all imported patents are flagged **********"
+"***** */\n		SELECT @time1  =  GETDATE()\n		\n		UPDATE   ["+ context.intermediateDB + "].[dbo].VW_IMPORT_patent   \n		SET	IND_IMPORT = 1 \n		WHERE  IND_IMPORT  = 9 \n		\n		INSERT INTO  wrk_log    \n		 SELEC"
+"T 'All imported patents are flagged' , \n				@time1 , datediff(ss, @time1, getdate());\n		\n DEALLOCATE curPrio\n DEALLO"
+"CATE cur4\n DEALLOCATE curActi\n DEALLOCATE curpatent\n\n		SET NOCOUNT OFF\n\n	END\n";
whetherReject_tMSSqlRow_32 = false;
globalMap.put("tMSSqlRow_32_QUERY",query_tMSSqlRow_32);
try {
		stmt_tMSSqlRow_32.execute(query_tMSSqlRow_32);
		
	} catch (java.lang.Exception e) {
		whetherReject_tMSSqlRow_32 = true;
		
				row82 = new row82Struct();
				
				row82.errorCode = ((java.sql.SQLException)e).getSQLState();
				row82.errorMessage = e.getMessage() + " - Line: " + tos_count_tMSSqlRow_32;
				
	}
	
	if(!whetherReject_tMSSqlRow_32) {
		
	}
	

 


	tos_count_tMSSqlRow_32++;

/**
 * [tMSSqlRow_32 main ] stop
 */
	
	/**
	 * [tMSSqlRow_32 process_data_begin ] start
	 */

	

	
	
	currentComponent="tMSSqlRow_32";

	

 



/**
 * [tMSSqlRow_32 process_data_begin ] stop
 */
// Start of branch "row82"
if(row82 != null) { 



	
	/**
	 * [tLogRow_34 main ] start
	 */

	

	
	
	currentComponent="tLogRow_34";

	
					if(execStat){
						runStat.updateStatOnConnection(iterateId,1,1
						
							,"row82"
						
						);
					}
					
///////////////////////		
						



				strBuffer_tLogRow_34 = new StringBuilder();




   				
	    		if(row82.errorCode != null) { //              
                    							
       
				strBuffer_tLogRow_34.append(
				                String.valueOf(row82.errorCode)							
				);


							
	    		} //  			

    			strBuffer_tLogRow_34.append("|");
    			


   				
	    		if(row82.errorMessage != null) { //              
                    							
       
				strBuffer_tLogRow_34.append(
				                String.valueOf(row82.errorMessage)							
				);


							
	    		} //  			

				
				String[] row_tLogRow_34 = new String[2];
   				
	    		if(row82.errorCode != null) { //              
                 row_tLogRow_34[0]=    						    
				                String.valueOf(row82.errorCode)			
					          ;	
							
	    		} //			
    			   				
	    		if(row82.errorMessage != null) { //              
                 row_tLogRow_34[1]=    						    
				                String.valueOf(row82.errorMessage)			
					          ;	
							
	    		} //			
    			
				nb_line_tLogRow_34++;
                consoleOut_tLogRow_34.println(util_tLogRow_34.print(row_tLogRow_34,nb_line_tLogRow_34));
                consoleOut_tLogRow_34.flush();
//////

//////                    
                    
///////////////////////    			

 


	tos_count_tLogRow_34++;

/**
 * [tLogRow_34 main ] stop
 */
	
	/**
	 * [tLogRow_34 process_data_begin ] start
	 */

	

	
	
	currentComponent="tLogRow_34";

	

 



/**
 * [tLogRow_34 process_data_begin ] stop
 */
	
	/**
	 * [tLogRow_34 process_data_end ] start
	 */

	

	
	
	currentComponent="tLogRow_34";

	

 



/**
 * [tLogRow_34 process_data_end ] stop
 */

} // End of branch "row82"




	
	/**
	 * [tMSSqlRow_32 process_data_end ] start
	 */

	

	
	
	currentComponent="tMSSqlRow_32";

	

 



/**
 * [tMSSqlRow_32 process_data_end ] stop
 */

} // End of branch "row25"




// Start of branch "row81"
if(row81 != null) { 



	
	/**
	 * [tLogRow_33 main ] start
	 */

	

	
	
	currentComponent="tLogRow_33";

	
					if(execStat){
						runStat.updateStatOnConnection(iterateId,1,1
						
							,"row81"
						
						);
					}
					
///////////////////////		
						



				strBuffer_tLogRow_33 = new StringBuilder();




   				
	    		if(row81.errorCode != null) { //              
                    							
       
				strBuffer_tLogRow_33.append(
				                String.valueOf(row81.errorCode)							
				);


							
	    		} //  			

    			strBuffer_tLogRow_33.append("|");
    			


   				
	    		if(row81.errorMessage != null) { //              
                    							
       
				strBuffer_tLogRow_33.append(
				                String.valueOf(row81.errorMessage)							
				);


							
	    		} //  			

				
				String[] row_tLogRow_33 = new String[2];
   				
	    		if(row81.errorCode != null) { //              
                 row_tLogRow_33[0]=    						    
				                String.valueOf(row81.errorCode)			
					          ;	
							
	    		} //			
    			   				
	    		if(row81.errorMessage != null) { //              
                 row_tLogRow_33[1]=    						    
				                String.valueOf(row81.errorMessage)			
					          ;	
							
	    		} //			
    			
				nb_line_tLogRow_33++;
                consoleOut_tLogRow_33.println(util_tLogRow_33.print(row_tLogRow_33,nb_line_tLogRow_33));
                consoleOut_tLogRow_33.flush();
//////

//////                    
                    
///////////////////////    			

 


	tos_count_tLogRow_33++;

/**
 * [tLogRow_33 main ] stop
 */
	
	/**
	 * [tLogRow_33 process_data_begin ] start
	 */

	

	
	
	currentComponent="tLogRow_33";

	

 



/**
 * [tLogRow_33 process_data_begin ] stop
 */
	
	/**
	 * [tLogRow_33 process_data_end ] start
	 */

	

	
	
	currentComponent="tLogRow_33";

	

 



/**
 * [tLogRow_33 process_data_end ] stop
 */

} // End of branch "row81"




	
	/**
	 * [tMSSqlRow_31 process_data_end ] start
	 */

	

	
	
	currentComponent="tMSSqlRow_31";

	

 



/**
 * [tMSSqlRow_31 process_data_end ] stop
 */
	
	/**
	 * [tMSSqlRow_31 end ] start
	 */

	

	
	
	currentComponent="tMSSqlRow_31";

	

	
        stmt_tMSSqlRow_31.close();
        resourceMap.remove("stmt_tMSSqlRow_31");
    resourceMap.put("statementClosed_tMSSqlRow_31", true);
    resourceMap.put("finish_tMSSqlRow_31", true);
 

ok_Hash.put("tMSSqlRow_31", true);
end_Hash.put("tMSSqlRow_31", System.currentTimeMillis());




/**
 * [tMSSqlRow_31 end ] stop
 */

	
	/**
	 * [tMSSqlRow_32 end ] start
	 */

	

	
	
	currentComponent="tMSSqlRow_32";

	

	
        stmt_tMSSqlRow_32.close();
        resourceMap.remove("stmt_tMSSqlRow_32");
    resourceMap.put("statementClosed_tMSSqlRow_32", true);
    resourceMap.put("finish_tMSSqlRow_32", true);
				if(execStat){
			  		runStat.updateStat(resourceMap,iterateId,2,0,"row25");
			  	}
			  	
 

ok_Hash.put("tMSSqlRow_32", true);
end_Hash.put("tMSSqlRow_32", System.currentTimeMillis());




/**
 * [tMSSqlRow_32 end ] stop
 */

	
	/**
	 * [tLogRow_34 end ] start
	 */

	

	
	
	currentComponent="tLogRow_34";

	


//////
//////
globalMap.put("tLogRow_34_NB_LINE",nb_line_tLogRow_34);

///////////////////////    			

				if(execStat){
			  		runStat.updateStat(resourceMap,iterateId,2,0,"row82");
			  	}
			  	
 

ok_Hash.put("tLogRow_34", true);
end_Hash.put("tLogRow_34", System.currentTimeMillis());




/**
 * [tLogRow_34 end ] stop
 */







	
	/**
	 * [tLogRow_33 end ] start
	 */

	

	
	
	currentComponent="tLogRow_33";

	


//////
//////
globalMap.put("tLogRow_33_NB_LINE",nb_line_tLogRow_33);

///////////////////////    			

				if(execStat){
			  		runStat.updateStat(resourceMap,iterateId,2,0,"row81");
			  	}
			  	
 

ok_Hash.put("tLogRow_33", true);
end_Hash.put("tLogRow_33", System.currentTimeMillis());




/**
 * [tLogRow_33 end ] stop
 */



				}//end the resume

				
				    			if(resumeEntryMethodName == null || globalResumeTicket){
				    				resumeUtil.addLog("CHECKPOINT", "CONNECTION:SUBJOB_OK:tMSSqlRow_31:OnSubjobOk", "", Thread.currentThread().getId() + "", "", "", "", "", "");
								}	    				    			
					    	
								if(execStat){    	
									runStat.updateStatOnConnection("OnSubjobOk17", 0, "ok");
								} 
							
							tMSSqlRow_33Process(globalMap); 
						



	
			}catch(java.lang.Exception e){	
				
				TalendException te = new TalendException(e, currentComponent, globalMap);
				
				throw te;
			}catch(java.lang.Error error){	
				
					runStat.stopThreadStat();
				
				throw error;
			}finally{
				
				try{
					
	
	/**
	 * [tMSSqlRow_31 finally ] start
	 */

	

	
	
	currentComponent="tMSSqlRow_31";

	

    if (resourceMap.get("statementClosed_tMSSqlRow_31") == null) {
            java.sql.Statement stmtToClose_tMSSqlRow_31 = null;
            if ((stmtToClose_tMSSqlRow_31 = (java.sql.Statement) resourceMap.remove("stmt_tMSSqlRow_31")) != null) {
                stmtToClose_tMSSqlRow_31.close();
            }
    }
 



/**
 * [tMSSqlRow_31 finally ] stop
 */

	
	/**
	 * [tMSSqlRow_32 finally ] start
	 */

	

	
	
	currentComponent="tMSSqlRow_32";

	

    if (resourceMap.get("statementClosed_tMSSqlRow_32") == null) {
            java.sql.Statement stmtToClose_tMSSqlRow_32 = null;
            if ((stmtToClose_tMSSqlRow_32 = (java.sql.Statement) resourceMap.remove("stmt_tMSSqlRow_32")) != null) {
                stmtToClose_tMSSqlRow_32.close();
            }
    }
 



/**
 * [tMSSqlRow_32 finally ] stop
 */

	
	/**
	 * [tLogRow_34 finally ] start
	 */

	

	
	
	currentComponent="tLogRow_34";

	

 



/**
 * [tLogRow_34 finally ] stop
 */







	
	/**
	 * [tLogRow_33 finally ] start
	 */

	

	
	
	currentComponent="tLogRow_33";

	

 



/**
 * [tLogRow_33 finally ] stop
 */



				}catch(java.lang.Exception e){	
					//ignore
				}catch(java.lang.Error error){
					//ignore
				}
				resourceMap = null;
			}
		

		globalMap.put("tMSSqlRow_31_SUBPROCESS_STATE", 1);
	}
	


public static class row100Struct implements routines.system.IPersistableRow<row100Struct> {
    final static byte[] commonByteArrayLock_WIPO_PROJECTS_F_IPAS_ENV_CRE = new byte[0];
    static byte[] commonByteArray_WIPO_PROJECTS_F_IPAS_ENV_CRE = new byte[0];

	
			    public String errorCode;

				public String getErrorCode () {
					return this.errorCode;
				}
				
			    public String errorMessage;

				public String getErrorMessage () {
					return this.errorMessage;
				}
				



	private String readString(ObjectInputStream dis) throws IOException{
		String strReturn = null;
		int length = 0;
        length = dis.readInt();
		if (length == -1) {
			strReturn = null;
		} else {
			if(length > commonByteArray_WIPO_PROJECTS_F_IPAS_ENV_CRE.length) {
				if(length < 1024 && commonByteArray_WIPO_PROJECTS_F_IPAS_ENV_CRE.length == 0) {
   					commonByteArray_WIPO_PROJECTS_F_IPAS_ENV_CRE = new byte[1024];
				} else {
   					commonByteArray_WIPO_PROJECTS_F_IPAS_ENV_CRE = new byte[2 * length];
   				}
			}
			dis.readFully(commonByteArray_WIPO_PROJECTS_F_IPAS_ENV_CRE, 0, length);
			strReturn = new String(commonByteArray_WIPO_PROJECTS_F_IPAS_ENV_CRE, 0, length, utf8Charset);
		}
		return strReturn;
	}

    private void writeString(String str, ObjectOutputStream dos) throws IOException{
		if(str == null) {
            dos.writeInt(-1);
		} else {
            byte[] byteArray = str.getBytes(utf8Charset);
	    	dos.writeInt(byteArray.length);
			dos.write(byteArray);
    	}
    }

    public void readData(ObjectInputStream dis) {

		synchronized(commonByteArrayLock_WIPO_PROJECTS_F_IPAS_ENV_CRE) {

        	try {

        		int length = 0;
		
					this.errorCode = readString(dis);
					
					this.errorMessage = readString(dis);
					
        	} catch (IOException e) {
	            throw new RuntimeException(e);

		

        }

		

      }


    }

    public void writeData(ObjectOutputStream dos) {
        try {

		
					// String
				
						writeString(this.errorCode,dos);
					
					// String
				
						writeString(this.errorMessage,dos);
					
        	} catch (IOException e) {
	            throw new RuntimeException(e);
        }


    }


    public String toString() {

		StringBuilder sb = new StringBuilder();
		sb.append(super.toString());
		sb.append("[");
		sb.append("errorCode="+errorCode);
		sb.append(",errorMessage="+errorMessage);
	    sb.append("]");

	    return sb.toString();
    }

    /**
     * Compare keys
     */
    public int compareTo(row100Struct other) {

		int returnValue = -1;
		
	    return returnValue;
    }


    private int checkNullsAndCompare(Object object1, Object object2) {
        int returnValue = 0;
		if (object1 instanceof Comparable && object2 instanceof Comparable) {
            returnValue = ((Comparable) object1).compareTo(object2);
        } else if (object1 != null && object2 != null) {
            returnValue = compareStrings(object1.toString(), object2.toString());
        } else if (object1 == null && object2 != null) {
            returnValue = 1;
        } else if (object1 != null && object2 == null) {
            returnValue = -1;
        } else {
            returnValue = 0;
        }

        return returnValue;
    }

    private int compareStrings(String string1, String string2) {
        return string1.compareTo(string2);
    }


}

public static class row22Struct implements routines.system.IPersistableRow<row22Struct> {
    final static byte[] commonByteArrayLock_WIPO_PROJECTS_F_IPAS_ENV_CRE = new byte[0];
    static byte[] commonByteArray_WIPO_PROJECTS_F_IPAS_ENV_CRE = new byte[0];

	



    public void readData(ObjectInputStream dis) {

		synchronized(commonByteArrayLock_WIPO_PROJECTS_F_IPAS_ENV_CRE) {

        	try {

        		int length = 0;
		

		

        }

		
			finally {}
		

      }


    }

    public void writeData(ObjectOutputStream dos) {
        try {

		
        }

			finally {}
		

    }


    public String toString() {

		StringBuilder sb = new StringBuilder();
		sb.append(super.toString());
		sb.append("[");
	    sb.append("]");

	    return sb.toString();
    }

    /**
     * Compare keys
     */
    public int compareTo(row22Struct other) {

		int returnValue = -1;
		
	    return returnValue;
    }


    private int checkNullsAndCompare(Object object1, Object object2) {
        int returnValue = 0;
		if (object1 instanceof Comparable && object2 instanceof Comparable) {
            returnValue = ((Comparable) object1).compareTo(object2);
        } else if (object1 != null && object2 != null) {
            returnValue = compareStrings(object1.toString(), object2.toString());
        } else if (object1 == null && object2 != null) {
            returnValue = 1;
        } else if (object1 != null && object2 == null) {
            returnValue = -1;
        } else {
            returnValue = 0;
        }

        return returnValue;
    }

    private int compareStrings(String string1, String string2) {
        return string1.compareTo(string2);
    }


}

public static class row99Struct implements routines.system.IPersistableRow<row99Struct> {
    final static byte[] commonByteArrayLock_WIPO_PROJECTS_F_IPAS_ENV_CRE = new byte[0];
    static byte[] commonByteArray_WIPO_PROJECTS_F_IPAS_ENV_CRE = new byte[0];

	
			    public String errorCode;

				public String getErrorCode () {
					return this.errorCode;
				}
				
			    public String errorMessage;

				public String getErrorMessage () {
					return this.errorMessage;
				}
				



	private String readString(ObjectInputStream dis) throws IOException{
		String strReturn = null;
		int length = 0;
        length = dis.readInt();
		if (length == -1) {
			strReturn = null;
		} else {
			if(length > commonByteArray_WIPO_PROJECTS_F_IPAS_ENV_CRE.length) {
				if(length < 1024 && commonByteArray_WIPO_PROJECTS_F_IPAS_ENV_CRE.length == 0) {
   					commonByteArray_WIPO_PROJECTS_F_IPAS_ENV_CRE = new byte[1024];
				} else {
   					commonByteArray_WIPO_PROJECTS_F_IPAS_ENV_CRE = new byte[2 * length];
   				}
			}
			dis.readFully(commonByteArray_WIPO_PROJECTS_F_IPAS_ENV_CRE, 0, length);
			strReturn = new String(commonByteArray_WIPO_PROJECTS_F_IPAS_ENV_CRE, 0, length, utf8Charset);
		}
		return strReturn;
	}

    private void writeString(String str, ObjectOutputStream dos) throws IOException{
		if(str == null) {
            dos.writeInt(-1);
		} else {
            byte[] byteArray = str.getBytes(utf8Charset);
	    	dos.writeInt(byteArray.length);
			dos.write(byteArray);
    	}
    }

    public void readData(ObjectInputStream dis) {

		synchronized(commonByteArrayLock_WIPO_PROJECTS_F_IPAS_ENV_CRE) {

        	try {

        		int length = 0;
		
					this.errorCode = readString(dis);
					
					this.errorMessage = readString(dis);
					
        	} catch (IOException e) {
	            throw new RuntimeException(e);

		

        }

		

      }


    }

    public void writeData(ObjectOutputStream dos) {
        try {

		
					// String
				
						writeString(this.errorCode,dos);
					
					// String
				
						writeString(this.errorMessage,dos);
					
        	} catch (IOException e) {
	            throw new RuntimeException(e);
        }


    }


    public String toString() {

		StringBuilder sb = new StringBuilder();
		sb.append(super.toString());
		sb.append("[");
		sb.append("errorCode="+errorCode);
		sb.append(",errorMessage="+errorMessage);
	    sb.append("]");

	    return sb.toString();
    }

    /**
     * Compare keys
     */
    public int compareTo(row99Struct other) {

		int returnValue = -1;
		
	    return returnValue;
    }


    private int checkNullsAndCompare(Object object1, Object object2) {
        int returnValue = 0;
		if (object1 instanceof Comparable && object2 instanceof Comparable) {
            returnValue = ((Comparable) object1).compareTo(object2);
        } else if (object1 != null && object2 != null) {
            returnValue = compareStrings(object1.toString(), object2.toString());
        } else if (object1 == null && object2 != null) {
            returnValue = 1;
        } else if (object1 != null && object2 == null) {
            returnValue = -1;
        } else {
            returnValue = 0;
        }

        return returnValue;
    }

    private int compareStrings(String string1, String string2) {
        return string1.compareTo(string2);
    }


}
public void tMSSqlRow_33Process(final java.util.Map<String, Object> globalMap) throws TalendException {
	globalMap.put("tMSSqlRow_33_SUBPROCESS_STATE", 0);

 final boolean execStat = this.execStat;
	
		String iterateId = "";
	
	
	String currentComponent = "";
	java.util.Map<String, Object> resourceMap = new java.util.HashMap<String, Object>();

	try {
			// TDI-39566 avoid throwing an useless Exception
			boolean resumeIt = true;
			if (globalResumeTicket == false && resumeEntryMethodName != null) {
				String currentMethodName = new java.lang.Exception().getStackTrace()[0].getMethodName();
				resumeIt = resumeEntryMethodName.equals(currentMethodName);
			}
			if (resumeIt || globalResumeTicket) { //start the resume
				globalResumeTicket = true;



		row22Struct row22 = new row22Struct();
row100Struct row100 = new row100Struct();
row99Struct row99 = new row99Struct();





	
	/**
	 * [tLogRow_36 begin ] start
	 */

	

	
		
		ok_Hash.put("tLogRow_36", false);
		start_Hash.put("tLogRow_36", System.currentTimeMillis());
		
	
	currentComponent="tLogRow_36";

	
					if(execStat) {
						runStat.updateStatOnConnection(resourceMap,iterateId,0,0,"row100");
					}
				
		int tos_count_tLogRow_36 = 0;
		

	///////////////////////
		


	class Util_tLogRow_36 {
	
		String[] des_top = { ".", "-" };

        String[] des_data = { "-", "+" };

        String[] des_frame = { "|" }; 
        
        public void printLine(StringBuilder sb, int titleWidth, int dataWidth){
        
        	sb.append("+");
			for(int i=0; i<titleWidth+2; i++)
				sb.append("-");
			sb.append("+");
			for(int i=0; i<dataWidth+2; i++)
				sb.append("-");
        	sb.append("+" + "\n");
        }      

		public String print(String[] row, int nbLine){
			
			StringBuilder sb = new StringBuilder();
			
			    String title = "#" + nbLine + ". " + "tLogRow_36";
			    
		
			//step 1: get the max length of all the row[] member;
			int dataWidth = 5;		//the length of the string "value"	
			for(int i=0;i<row.length;i++) {
				if(row[i] == null && 4 > dataWidth) {
					dataWidth = 4;
				}
				else if(row[i] != null && row[i].length()>dataWidth) 
					dataWidth = row[i].length();
			}			
						
			int titleWidth = 12;
			
			int totalWidth = dataWidth + titleWidth + 5;
			
			//step 2: print the header with line number
			sb.append(".");
			for(int i=0 ; i<totalWidth ; i++)
				sb.append("-");			
			sb.append("." + "\n" + "|");
			
			int emptyCenterWidth = (totalWidth-title.length())/2;
			for(int i=0 ; i<emptyCenterWidth; i++)
				sb.append(" ");	
			sb.append(title);
			for(int i=0 ; i<totalWidth - emptyCenterWidth - title.length() ; i++)
				sb.append(" ");	
			sb.append("|" + "\n");
			
			//step 3: print "key" and "value"			
			printLine(sb,titleWidth,dataWidth);
			
			sb.append("|" + " key");
			for(int i=0; i<titleWidth-2; i++)
				sb.append(" ");
        	sb.append("|" + " value");
			for(int i=0; i<dataWidth-4; i++)
				sb.append(" ");
			sb.append("|" + "\n");
			
			printLine(sb,titleWidth,dataWidth);
			
			//step 4: print dataset
			
			//for(int i=0; i<row.length; i++){
				sb.append("| " + "errorCode");
				for(int i=0; i<titleWidth -"errorCode".length()+ 1 ;i++)
					sb.append(" ");
				sb.append("| " + row[0]);
				for(int i=0; row[0] == null && i<dataWidth - 3 || row[0] != null && i<dataWidth -row[0].length()+ 1 ;i++)
					sb.append(" ");
				sb.append("|" + "\n");
			
			//}

			
			//for(int i=0; i<row.length; i++){
				sb.append("| " + "errorMessage");
				for(int i=0; i<titleWidth -"errorMessage".length()+ 1 ;i++)
					sb.append(" ");
				sb.append("| " + row[1]);
				for(int i=0; row[1] == null && i<dataWidth - 3 || row[1] != null && i<dataWidth -row[1].length()+ 1 ;i++)
					sb.append(" ");
				sb.append("|" + "\n");
			
			//}

			
			//step 5: print a line gap
			printLine(sb,titleWidth,dataWidth);
			return sb.toString();

		}


	}

	Util_tLogRow_36 util_tLogRow_36 = new Util_tLogRow_36();




	java.io.PrintStream consoleOut_tLogRow_36 = null;
	if (globalMap.get("tLogRow_CONSOLE")!=null){
        consoleOut_tLogRow_36 = (java.io.PrintStream) globalMap.get("tLogRow_CONSOLE");
    }else{
        consoleOut_tLogRow_36 = new java.io.PrintStream(new java.io.BufferedOutputStream(System.out));
        globalMap.put("tLogRow_CONSOLE",consoleOut_tLogRow_36);
    }

 		StringBuilder strBuffer_tLogRow_36 = null;
		int nb_line_tLogRow_36 = 0;
///////////////////////    			



 



/**
 * [tLogRow_36 begin ] stop
 */



	
	/**
	 * [tMSSqlRow_34 begin ] start
	 */

	

	
		
		ok_Hash.put("tMSSqlRow_34", false);
		start_Hash.put("tMSSqlRow_34", System.currentTimeMillis());
		
	
	currentComponent="tMSSqlRow_34";

	
					if(execStat) {
						runStat.updateStatOnConnection(resourceMap,iterateId,0,0,"row22");
					}
				
		int tos_count_tMSSqlRow_34 = 0;
		

	java.sql.Connection conn_tMSSqlRow_34 = null;
	String query_tMSSqlRow_34 = "";
	boolean whetherReject_tMSSqlRow_34 = false;
				conn_tMSSqlRow_34 = (java.sql.Connection)globalMap.get("conn_tMSSqlConnection_4");
			
    resourceMap.put("conn_tMSSqlRow_34", conn_tMSSqlRow_34);
        java.sql.Statement stmt_tMSSqlRow_34 = conn_tMSSqlRow_34.createStatement();
        resourceMap.put("stmt_tMSSqlRow_34", stmt_tMSSqlRow_34);

 



/**
 * [tMSSqlRow_34 begin ] stop
 */




	
	/**
	 * [tLogRow_35 begin ] start
	 */

	

	
		
		ok_Hash.put("tLogRow_35", false);
		start_Hash.put("tLogRow_35", System.currentTimeMillis());
		
	
	currentComponent="tLogRow_35";

	
					if(execStat) {
						runStat.updateStatOnConnection(resourceMap,iterateId,0,0,"row99");
					}
				
		int tos_count_tLogRow_35 = 0;
		

	///////////////////////
		


	class Util_tLogRow_35 {
	
		String[] des_top = { ".", "-" };

        String[] des_data = { "-", "+" };

        String[] des_frame = { "|" }; 
        
        public void printLine(StringBuilder sb, int titleWidth, int dataWidth){
        
        	sb.append("+");
			for(int i=0; i<titleWidth+2; i++)
				sb.append("-");
			sb.append("+");
			for(int i=0; i<dataWidth+2; i++)
				sb.append("-");
        	sb.append("+" + "\n");
        }      

		public String print(String[] row, int nbLine){
			
			StringBuilder sb = new StringBuilder();
			
			    String title = "#" + nbLine + ". " + "tLogRow_35";
			    
		
			//step 1: get the max length of all the row[] member;
			int dataWidth = 5;		//the length of the string "value"	
			for(int i=0;i<row.length;i++) {
				if(row[i] == null && 4 > dataWidth) {
					dataWidth = 4;
				}
				else if(row[i] != null && row[i].length()>dataWidth) 
					dataWidth = row[i].length();
			}			
						
			int titleWidth = 12;
			
			int totalWidth = dataWidth + titleWidth + 5;
			
			//step 2: print the header with line number
			sb.append(".");
			for(int i=0 ; i<totalWidth ; i++)
				sb.append("-");			
			sb.append("." + "\n" + "|");
			
			int emptyCenterWidth = (totalWidth-title.length())/2;
			for(int i=0 ; i<emptyCenterWidth; i++)
				sb.append(" ");	
			sb.append(title);
			for(int i=0 ; i<totalWidth - emptyCenterWidth - title.length() ; i++)
				sb.append(" ");	
			sb.append("|" + "\n");
			
			//step 3: print "key" and "value"			
			printLine(sb,titleWidth,dataWidth);
			
			sb.append("|" + " key");
			for(int i=0; i<titleWidth-2; i++)
				sb.append(" ");
        	sb.append("|" + " value");
			for(int i=0; i<dataWidth-4; i++)
				sb.append(" ");
			sb.append("|" + "\n");
			
			printLine(sb,titleWidth,dataWidth);
			
			//step 4: print dataset
			
			//for(int i=0; i<row.length; i++){
				sb.append("| " + "errorCode");
				for(int i=0; i<titleWidth -"errorCode".length()+ 1 ;i++)
					sb.append(" ");
				sb.append("| " + row[0]);
				for(int i=0; row[0] == null && i<dataWidth - 3 || row[0] != null && i<dataWidth -row[0].length()+ 1 ;i++)
					sb.append(" ");
				sb.append("|" + "\n");
			
			//}

			
			//for(int i=0; i<row.length; i++){
				sb.append("| " + "errorMessage");
				for(int i=0; i<titleWidth -"errorMessage".length()+ 1 ;i++)
					sb.append(" ");
				sb.append("| " + row[1]);
				for(int i=0; row[1] == null && i<dataWidth - 3 || row[1] != null && i<dataWidth -row[1].length()+ 1 ;i++)
					sb.append(" ");
				sb.append("|" + "\n");
			
			//}

			
			//step 5: print a line gap
			printLine(sb,titleWidth,dataWidth);
			return sb.toString();

		}


	}

	Util_tLogRow_35 util_tLogRow_35 = new Util_tLogRow_35();




	java.io.PrintStream consoleOut_tLogRow_35 = null;
	if (globalMap.get("tLogRow_CONSOLE")!=null){
        consoleOut_tLogRow_35 = (java.io.PrintStream) globalMap.get("tLogRow_CONSOLE");
    }else{
        consoleOut_tLogRow_35 = new java.io.PrintStream(new java.io.BufferedOutputStream(System.out));
        globalMap.put("tLogRow_CONSOLE",consoleOut_tLogRow_35);
    }

 		StringBuilder strBuffer_tLogRow_35 = null;
		int nb_line_tLogRow_35 = 0;
///////////////////////    			



 



/**
 * [tLogRow_35 begin ] stop
 */



	
	/**
	 * [tMSSqlRow_33 begin ] start
	 */

	

	
		
		ok_Hash.put("tMSSqlRow_33", false);
		start_Hash.put("tMSSqlRow_33", System.currentTimeMillis());
		
	
	currentComponent="tMSSqlRow_33";

	
		int tos_count_tMSSqlRow_33 = 0;
		

	java.sql.Connection conn_tMSSqlRow_33 = null;
	String query_tMSSqlRow_33 = "";
	boolean whetherReject_tMSSqlRow_33 = false;
				conn_tMSSqlRow_33 = (java.sql.Connection)globalMap.get("conn_tMSSqlConnection_4");
			
    resourceMap.put("conn_tMSSqlRow_33", conn_tMSSqlRow_33);
        java.sql.Statement stmt_tMSSqlRow_33 = conn_tMSSqlRow_33.createStatement();
        resourceMap.put("stmt_tMSSqlRow_33", stmt_tMSSqlRow_33);

 



/**
 * [tMSSqlRow_33 begin ] stop
 */
	
	/**
	 * [tMSSqlRow_33 main ] start
	 */

	

	
	
	currentComponent="tMSSqlRow_33";

	

		row22 = null;
		
		row99 = null;
		
query_tMSSqlRow_33 = "\nIF OBJECT_ID('UserDocDateValidationPROC', 'P') IS NOT NULL\n  DROP PROCEDURE UserDocDateValidationPROC;\n";
whetherReject_tMSSqlRow_33 = false;
globalMap.put("tMSSqlRow_33_QUERY",query_tMSSqlRow_33);
try {
		stmt_tMSSqlRow_33.execute(query_tMSSqlRow_33);
		
	} catch (java.lang.Exception e) {
		whetherReject_tMSSqlRow_33 = true;
		
				row99 = new row99Struct();
				
				row99.errorCode = ((java.sql.SQLException)e).getSQLState();
				row99.errorMessage = e.getMessage() + " - Line: " + tos_count_tMSSqlRow_33;
				
	}
	
	if(!whetherReject_tMSSqlRow_33) {
		
					row22 = new row22Struct();
					
	}
	

 


	tos_count_tMSSqlRow_33++;

/**
 * [tMSSqlRow_33 main ] stop
 */
	
	/**
	 * [tMSSqlRow_33 process_data_begin ] start
	 */

	

	
	
	currentComponent="tMSSqlRow_33";

	

 



/**
 * [tMSSqlRow_33 process_data_begin ] stop
 */
// Start of branch "row22"
if(row22 != null) { 
			row100 = null;



	
	/**
	 * [tMSSqlRow_34 main ] start
	 */

	

	
	
	currentComponent="tMSSqlRow_34";

	
					if(execStat){
						runStat.updateStatOnConnection(iterateId,1,1
						
							,"row22"
						
						);
					}
					

		row100 = null;
		
query_tMSSqlRow_34 = "CREATE PROCEDURE UserDocDateValidationPROC\n	AS\n	BEGIN\n		SET NOCOUNT ON	\n		-- 1.	Validate CAPTURE_DATE\n		INSERT INT"
+"O  ["+ context.intermediateDB + "].[dbo].VW_IMPORT_USERDOC_RESULT (userdoc_seq,userdoc_series, userdoc_nbr, ind_import, msg_import) \n		SELECT U.userdoc"
+"_seq, U.userdoc_series, U.userdoc_nbr, 2, 'Invalid CAPTURE_DATE. CAPTURE_DATE required to be greater than 1700-01-01 and"
+" lower than the current date.' \n		FROM  ["+ context.intermediateDB + "].[dbo].VW_IMPORT_USERDOC U WHERE CAPTURE_DATE > GETDATE() or CAST(DATEPART(YYYY, CAPTURE_DATE) as NUMERIC) < 1700;	\n	"
+"	\n		-- 2.	Validate FILING_DATE\n		INSERT INTO  ["+ context.intermediateDB + "].[dbo].VW_IMPORT_USERDOC_RESULT (userdoc_seq,userdoc_series, userdoc_nbr, ind_import, msg_import) \n		SELECT U.userdoc"
+"_seq, U.userdoc_series, U.userdoc_nbr, 2, 'Invalid FILING_DATE. FILING_DATE required to be greater than 1700-01-01 and l"
+"ower than the current date.' \n		FROM  ["+ context.intermediateDB + "].[dbo].VW_IMPORT_USERDOC U WHERE FILING_DATE > GETDATE() or CAST(DATEPART(YYYY, FILING_DATE) as NUMERIC) < 1700;	\n		"
+"\n		-- 3.	Validate RECEPTION_DATE\n		INSERT INTO  ["+ context.intermediateDB + "].[dbo].VW_IMPORT_USERDOC_RESULT (userdoc_seq,userdoc_series, userdoc_nbr, ind_import, msg_import) \n		SELECT U.userdoc"
+"_seq, U.userdoc_series, U.userdoc_nbr, 2, 'Invalid RECEPTION_DATE. RECEPTION_DATE required to be greater than 1700-01-01"
+" and lower than the current date.' \n		FROM  ["+ context.intermediateDB + "].[dbo].VW_IMPORT_USERDOC U WHERE RECEPTION_DATE > GETDATE() or CAST(DATEPART(YYYY, RECEPTION_DATE) as NUMERIC) < 1700;"
+"	\n		\n		\n		-- 4.	Validate ACTION_DATE\n		INSERT INTO  ["+ context.intermediateDB + "].[dbo].VW_IMPORT_USERDOC_RESULT (userdoc_seq,userdoc_series, userdoc_nbr, ind_import, msg_import) \n		SELECT U.userdoc"
+"_seq, U.userdoc_series, U.userdoc_nbr, 2, 'Invalid ACTION_DATE. ACTION_DATE required to be greater than 1700-01-01 and l"
+"ower than the current date.' \n		FROM  ["+ context.intermediateDB + "].[dbo].VW_IMPORT_USERDOC_ACTIONS U WHERE ACTION_DATE > GETDATE() or CAST(DATEPART(YYYY, ACTION_DATE) as NUMERIC) < 170"
+"0;	\n		\n		-- 5.	Validate PUBLICATION_DATE\n	--	INSERT INTO  ["+ context.intermediateDB + "].[dbo].VW_IMPORT_USERDOC_RESULT (userdoc_seq,userdoc_series, userdoc_nbr, ind_import, msg_import) \n	--	SELECT U.userd"
+"oc_seq, U.userdoc_series, U.userdoc_nbr, 2, 'Invalid PUBLICATION_DATE. PUBLICATION_DATE required to be greater than 1700"
+"-01-01 and lower than the current date.' \n	--	FROM  ["+ context.intermediateDB + "].[dbo].VW_IMPORT_USERDOC_ACTIONS U WHERE PUBLICATION_DATE > GETDATE() or CAST(DATEPART(YYYY, PUBLICATION_DATE) as NUME"
+"RIC) < 1700;	\n		\n		-- 6.	Validate RECEIPT_DATE\n		INSERT INTO  ["+ context.intermediateDB + "].[dbo].VW_IMPORT_USERDOC_RESULT (userdoc_seq,userdoc_series, userdoc_nbr, ind_import, msg_import) \n		SELECT U.userdoc"
+"_seq, U.userdoc_series, U.userdoc_nbr, 2, 'Invalid RECEIPT_DATE. RECEIPT_DATE required to be greater than 1700-01-01 and"
+" lower than the current date.' \n		FROM  ["+ context.intermediateDB + "].[dbo].VW_IMPORT_USERDOC_PAYMENTS U WHERE RECEIPT_DATE > GETDATE() or CAST(DATEPART(YYYY, RECEIPT_DATE) as NUMERIC) < "
+"1700;	\n		\n		-- Can be a Future Date so no check with GETDATE()\n		-- 1.	Validate MANUAL_DUE_DATE\n		INSERT INTO  ["+ context.intermediateDB + "].[dbo].VW_IMPORT_USERDOC_RESULT (userdoc_seq,userdoc_series, userdoc_nbr, ind_import, msg_import) \n		SELECT U.userdoc"
+"_seq, U.userdoc_series, U.userdoc_nbr, 2, 'Invalid MANUAL_DUE_DATE. MANUAL_DUE_DATE required to be greater than 1700-01-"
+"01 and lower than the current date.' \n		FROM  ["+ context.intermediateDB + "].[dbo].VW_IMPORT_USERDOC_ACTIONS U WHERE CAST(DATEPART(YYYY, MANUAL_DUE_DATE) as NUMERIC) < 1700;	\n		SET NOCOUNT OFF"
+"\n	END";
whetherReject_tMSSqlRow_34 = false;
globalMap.put("tMSSqlRow_34_QUERY",query_tMSSqlRow_34);
try {
		stmt_tMSSqlRow_34.execute(query_tMSSqlRow_34);
		
	} catch (java.lang.Exception e) {
		whetherReject_tMSSqlRow_34 = true;
		
				row100 = new row100Struct();
				
				row100.errorCode = ((java.sql.SQLException)e).getSQLState();
				row100.errorMessage = e.getMessage() + " - Line: " + tos_count_tMSSqlRow_34;
				
	}
	
	if(!whetherReject_tMSSqlRow_34) {
		
	}
	

 


	tos_count_tMSSqlRow_34++;

/**
 * [tMSSqlRow_34 main ] stop
 */
	
	/**
	 * [tMSSqlRow_34 process_data_begin ] start
	 */

	

	
	
	currentComponent="tMSSqlRow_34";

	

 



/**
 * [tMSSqlRow_34 process_data_begin ] stop
 */
// Start of branch "row100"
if(row100 != null) { 



	
	/**
	 * [tLogRow_36 main ] start
	 */

	

	
	
	currentComponent="tLogRow_36";

	
					if(execStat){
						runStat.updateStatOnConnection(iterateId,1,1
						
							,"row100"
						
						);
					}
					
///////////////////////		
						



				strBuffer_tLogRow_36 = new StringBuilder();




   				
	    		if(row100.errorCode != null) { //              
                    							
       
				strBuffer_tLogRow_36.append(
				                String.valueOf(row100.errorCode)							
				);


							
	    		} //  			

    			strBuffer_tLogRow_36.append("|");
    			


   				
	    		if(row100.errorMessage != null) { //              
                    							
       
				strBuffer_tLogRow_36.append(
				                String.valueOf(row100.errorMessage)							
				);


							
	    		} //  			

				
				String[] row_tLogRow_36 = new String[2];
   				
	    		if(row100.errorCode != null) { //              
                 row_tLogRow_36[0]=    						    
				                String.valueOf(row100.errorCode)			
					          ;	
							
	    		} //			
    			   				
	    		if(row100.errorMessage != null) { //              
                 row_tLogRow_36[1]=    						    
				                String.valueOf(row100.errorMessage)			
					          ;	
							
	    		} //			
    			
				nb_line_tLogRow_36++;
                consoleOut_tLogRow_36.println(util_tLogRow_36.print(row_tLogRow_36,nb_line_tLogRow_36));
                consoleOut_tLogRow_36.flush();
//////

//////                    
                    
///////////////////////    			

 


	tos_count_tLogRow_36++;

/**
 * [tLogRow_36 main ] stop
 */
	
	/**
	 * [tLogRow_36 process_data_begin ] start
	 */

	

	
	
	currentComponent="tLogRow_36";

	

 



/**
 * [tLogRow_36 process_data_begin ] stop
 */
	
	/**
	 * [tLogRow_36 process_data_end ] start
	 */

	

	
	
	currentComponent="tLogRow_36";

	

 



/**
 * [tLogRow_36 process_data_end ] stop
 */

} // End of branch "row100"




	
	/**
	 * [tMSSqlRow_34 process_data_end ] start
	 */

	

	
	
	currentComponent="tMSSqlRow_34";

	

 



/**
 * [tMSSqlRow_34 process_data_end ] stop
 */

} // End of branch "row22"




// Start of branch "row99"
if(row99 != null) { 



	
	/**
	 * [tLogRow_35 main ] start
	 */

	

	
	
	currentComponent="tLogRow_35";

	
					if(execStat){
						runStat.updateStatOnConnection(iterateId,1,1
						
							,"row99"
						
						);
					}
					
///////////////////////		
						



				strBuffer_tLogRow_35 = new StringBuilder();




   				
	    		if(row99.errorCode != null) { //              
                    							
       
				strBuffer_tLogRow_35.append(
				                String.valueOf(row99.errorCode)							
				);


							
	    		} //  			

    			strBuffer_tLogRow_35.append("|");
    			


   				
	    		if(row99.errorMessage != null) { //              
                    							
       
				strBuffer_tLogRow_35.append(
				                String.valueOf(row99.errorMessage)							
				);


							
	    		} //  			

				
				String[] row_tLogRow_35 = new String[2];
   				
	    		if(row99.errorCode != null) { //              
                 row_tLogRow_35[0]=    						    
				                String.valueOf(row99.errorCode)			
					          ;	
							
	    		} //			
    			   				
	    		if(row99.errorMessage != null) { //              
                 row_tLogRow_35[1]=    						    
				                String.valueOf(row99.errorMessage)			
					          ;	
							
	    		} //			
    			
				nb_line_tLogRow_35++;
                consoleOut_tLogRow_35.println(util_tLogRow_35.print(row_tLogRow_35,nb_line_tLogRow_35));
                consoleOut_tLogRow_35.flush();
//////

//////                    
                    
///////////////////////    			

 


	tos_count_tLogRow_35++;

/**
 * [tLogRow_35 main ] stop
 */
	
	/**
	 * [tLogRow_35 process_data_begin ] start
	 */

	

	
	
	currentComponent="tLogRow_35";

	

 



/**
 * [tLogRow_35 process_data_begin ] stop
 */
	
	/**
	 * [tLogRow_35 process_data_end ] start
	 */

	

	
	
	currentComponent="tLogRow_35";

	

 



/**
 * [tLogRow_35 process_data_end ] stop
 */

} // End of branch "row99"




	
	/**
	 * [tMSSqlRow_33 process_data_end ] start
	 */

	

	
	
	currentComponent="tMSSqlRow_33";

	

 



/**
 * [tMSSqlRow_33 process_data_end ] stop
 */
	
	/**
	 * [tMSSqlRow_33 end ] start
	 */

	

	
	
	currentComponent="tMSSqlRow_33";

	

	
        stmt_tMSSqlRow_33.close();
        resourceMap.remove("stmt_tMSSqlRow_33");
    resourceMap.put("statementClosed_tMSSqlRow_33", true);
    resourceMap.put("finish_tMSSqlRow_33", true);
 

ok_Hash.put("tMSSqlRow_33", true);
end_Hash.put("tMSSqlRow_33", System.currentTimeMillis());




/**
 * [tMSSqlRow_33 end ] stop
 */

	
	/**
	 * [tMSSqlRow_34 end ] start
	 */

	

	
	
	currentComponent="tMSSqlRow_34";

	

	
        stmt_tMSSqlRow_34.close();
        resourceMap.remove("stmt_tMSSqlRow_34");
    resourceMap.put("statementClosed_tMSSqlRow_34", true);
    resourceMap.put("finish_tMSSqlRow_34", true);
				if(execStat){
			  		runStat.updateStat(resourceMap,iterateId,2,0,"row22");
			  	}
			  	
 

ok_Hash.put("tMSSqlRow_34", true);
end_Hash.put("tMSSqlRow_34", System.currentTimeMillis());




/**
 * [tMSSqlRow_34 end ] stop
 */

	
	/**
	 * [tLogRow_36 end ] start
	 */

	

	
	
	currentComponent="tLogRow_36";

	


//////
//////
globalMap.put("tLogRow_36_NB_LINE",nb_line_tLogRow_36);

///////////////////////    			

				if(execStat){
			  		runStat.updateStat(resourceMap,iterateId,2,0,"row100");
			  	}
			  	
 

ok_Hash.put("tLogRow_36", true);
end_Hash.put("tLogRow_36", System.currentTimeMillis());




/**
 * [tLogRow_36 end ] stop
 */







	
	/**
	 * [tLogRow_35 end ] start
	 */

	

	
	
	currentComponent="tLogRow_35";

	


//////
//////
globalMap.put("tLogRow_35_NB_LINE",nb_line_tLogRow_35);

///////////////////////    			

				if(execStat){
			  		runStat.updateStat(resourceMap,iterateId,2,0,"row99");
			  	}
			  	
 

ok_Hash.put("tLogRow_35", true);
end_Hash.put("tLogRow_35", System.currentTimeMillis());




/**
 * [tLogRow_35 end ] stop
 */



				}//end the resume

				
				    			if(resumeEntryMethodName == null || globalResumeTicket){
				    				resumeUtil.addLog("CHECKPOINT", "CONNECTION:SUBJOB_OK:tMSSqlRow_33:OnSubjobOk", "", Thread.currentThread().getId() + "", "", "", "", "", "");
								}	    				    			
					    	
								if(execStat){    	
									runStat.updateStatOnConnection("OnSubjobOk19", 0, "ok");
								} 
							
							tMSSqlRow_35Process(globalMap); 
						



	
			}catch(java.lang.Exception e){	
				
				TalendException te = new TalendException(e, currentComponent, globalMap);
				
				throw te;
			}catch(java.lang.Error error){	
				
					runStat.stopThreadStat();
				
				throw error;
			}finally{
				
				try{
					
	
	/**
	 * [tMSSqlRow_33 finally ] start
	 */

	

	
	
	currentComponent="tMSSqlRow_33";

	

    if (resourceMap.get("statementClosed_tMSSqlRow_33") == null) {
            java.sql.Statement stmtToClose_tMSSqlRow_33 = null;
            if ((stmtToClose_tMSSqlRow_33 = (java.sql.Statement) resourceMap.remove("stmt_tMSSqlRow_33")) != null) {
                stmtToClose_tMSSqlRow_33.close();
            }
    }
 



/**
 * [tMSSqlRow_33 finally ] stop
 */

	
	/**
	 * [tMSSqlRow_34 finally ] start
	 */

	

	
	
	currentComponent="tMSSqlRow_34";

	

    if (resourceMap.get("statementClosed_tMSSqlRow_34") == null) {
            java.sql.Statement stmtToClose_tMSSqlRow_34 = null;
            if ((stmtToClose_tMSSqlRow_34 = (java.sql.Statement) resourceMap.remove("stmt_tMSSqlRow_34")) != null) {
                stmtToClose_tMSSqlRow_34.close();
            }
    }
 



/**
 * [tMSSqlRow_34 finally ] stop
 */

	
	/**
	 * [tLogRow_36 finally ] start
	 */

	

	
	
	currentComponent="tLogRow_36";

	

 



/**
 * [tLogRow_36 finally ] stop
 */







	
	/**
	 * [tLogRow_35 finally ] start
	 */

	

	
	
	currentComponent="tLogRow_35";

	

 



/**
 * [tLogRow_35 finally ] stop
 */



				}catch(java.lang.Exception e){	
					//ignore
				}catch(java.lang.Error error){
					//ignore
				}
				resourceMap = null;
			}
		

		globalMap.put("tMSSqlRow_33_SUBPROCESS_STATE", 1);
	}
	

public void tMSSqlRow_35Process(final java.util.Map<String, Object> globalMap) throws TalendException {
	globalMap.put("tMSSqlRow_35_SUBPROCESS_STATE", 0);

 final boolean execStat = this.execStat;
	
		String iterateId = "";
	
	
	String currentComponent = "";
	java.util.Map<String, Object> resourceMap = new java.util.HashMap<String, Object>();

	try {
			// TDI-39566 avoid throwing an useless Exception
			boolean resumeIt = true;
			if (globalResumeTicket == false && resumeEntryMethodName != null) {
				String currentMethodName = new java.lang.Exception().getStackTrace()[0].getMethodName();
				resumeIt = resumeEntryMethodName.equals(currentMethodName);
			}
			if (resumeIt || globalResumeTicket) { //start the resume
				globalResumeTicket = true;





	
	/**
	 * [tMSSqlRow_35 begin ] start
	 */

	

	
		
		ok_Hash.put("tMSSqlRow_35", false);
		start_Hash.put("tMSSqlRow_35", System.currentTimeMillis());
		
				tStatCatcher_1.addMessage("begin","tMSSqlRow_35");
				tStatCatcher_1Process(globalMap);
			
	
	currentComponent="tMSSqlRow_35";

	
		int tos_count_tMSSqlRow_35 = 0;
		

	java.sql.Connection conn_tMSSqlRow_35 = null;
	String query_tMSSqlRow_35 = "";
	boolean whetherReject_tMSSqlRow_35 = false;
				conn_tMSSqlRow_35 = (java.sql.Connection)globalMap.get("conn_tMSSqlConnection_4");
			
    resourceMap.put("conn_tMSSqlRow_35", conn_tMSSqlRow_35);
        java.sql.Statement stmt_tMSSqlRow_35 = conn_tMSSqlRow_35.createStatement();
        resourceMap.put("stmt_tMSSqlRow_35", stmt_tMSSqlRow_35);

 



/**
 * [tMSSqlRow_35 begin ] stop
 */
	
	/**
	 * [tMSSqlRow_35 main ] start
	 */

	

	
	
	currentComponent="tMSSqlRow_35";

	

query_tMSSqlRow_35 = "\nupdate "+ context.intermediateDB + ".dbo.vw_import_patent  set ind_import=null;\nupdate "+ context.intermediateDB + ".dbo.vw_import_userdoc  set ind_import=null;\n";
whetherReject_tMSSqlRow_35 = false;
globalMap.put("tMSSqlRow_35_QUERY",query_tMSSqlRow_35);
try {
		stmt_tMSSqlRow_35.execute(query_tMSSqlRow_35);
		
	} catch (java.lang.Exception e) {
		whetherReject_tMSSqlRow_35 = true;
		
				System.err.print(e.getMessage());
				
	}
	

 


	tos_count_tMSSqlRow_35++;

/**
 * [tMSSqlRow_35 main ] stop
 */
	
	/**
	 * [tMSSqlRow_35 process_data_begin ] start
	 */

	

	
	
	currentComponent="tMSSqlRow_35";

	

 



/**
 * [tMSSqlRow_35 process_data_begin ] stop
 */
	
	/**
	 * [tMSSqlRow_35 process_data_end ] start
	 */

	

	
	
	currentComponent="tMSSqlRow_35";

	

 



/**
 * [tMSSqlRow_35 process_data_end ] stop
 */
	
	/**
	 * [tMSSqlRow_35 end ] start
	 */

	

	
	
	currentComponent="tMSSqlRow_35";

	

	
        stmt_tMSSqlRow_35.close();
        resourceMap.remove("stmt_tMSSqlRow_35");
    resourceMap.put("statementClosed_tMSSqlRow_35", true);
    resourceMap.put("finish_tMSSqlRow_35", true);
 

ok_Hash.put("tMSSqlRow_35", true);
end_Hash.put("tMSSqlRow_35", System.currentTimeMillis());

tStatCatcher_1.addMessage("end","tMSSqlRow_35", end_Hash.get("tMSSqlRow_35")-start_Hash.get("tMSSqlRow_35"));
tStatCatcher_1Process(globalMap);



/**
 * [tMSSqlRow_35 end ] stop
 */
				}//end the resume

				



	
			}catch(java.lang.Exception e){	
				
				TalendException te = new TalendException(e, currentComponent, globalMap);
				
				throw te;
			}catch(java.lang.Error error){	
				
					runStat.stopThreadStat();
				
				throw error;
			}finally{
				
				try{
					
	
	/**
	 * [tMSSqlRow_35 finally ] start
	 */

	

	
	
	currentComponent="tMSSqlRow_35";

	

    if (resourceMap.get("statementClosed_tMSSqlRow_35") == null) {
            java.sql.Statement stmtToClose_tMSSqlRow_35 = null;
            if ((stmtToClose_tMSSqlRow_35 = (java.sql.Statement) resourceMap.remove("stmt_tMSSqlRow_35")) != null) {
                stmtToClose_tMSSqlRow_35.close();
            }
    }
 



/**
 * [tMSSqlRow_35 finally ] stop
 */
				}catch(java.lang.Exception e){	
					//ignore
				}catch(java.lang.Error error){
					//ignore
				}
				resourceMap = null;
			}
		

		globalMap.put("tMSSqlRow_35_SUBPROCESS_STATE", 1);
	}
	


public static class row108Struct implements routines.system.IPersistableRow<row108Struct> {
    final static byte[] commonByteArrayLock_WIPO_PROJECTS_F_IPAS_ENV_CRE = new byte[0];
    static byte[] commonByteArray_WIPO_PROJECTS_F_IPAS_ENV_CRE = new byte[0];

	
			    public java.util.Date moment;

				public java.util.Date getMoment () {
					return this.moment;
				}
				
			    public String pid;

				public String getPid () {
					return this.pid;
				}
				
			    public String father_pid;

				public String getFather_pid () {
					return this.father_pid;
				}
				
			    public String root_pid;

				public String getRoot_pid () {
					return this.root_pid;
				}
				
			    public Long system_pid;

				public Long getSystem_pid () {
					return this.system_pid;
				}
				
			    public String project;

				public String getProject () {
					return this.project;
				}
				
			    public String job;

				public String getJob () {
					return this.job;
				}
				
			    public String job_repository_id;

				public String getJob_repository_id () {
					return this.job_repository_id;
				}
				
			    public String job_version;

				public String getJob_version () {
					return this.job_version;
				}
				
			    public String context;

				public String getContext () {
					return this.context;
				}
				
			    public String origin;

				public String getOrigin () {
					return this.origin;
				}
				
			    public String message_type;

				public String getMessage_type () {
					return this.message_type;
				}
				
			    public String message;

				public String getMessage () {
					return this.message;
				}
				
			    public Long duration;

				public Long getDuration () {
					return this.duration;
				}
				



	private java.util.Date readDate(ObjectInputStream dis) throws IOException{
		java.util.Date dateReturn = null;
        int length = 0;
        length = dis.readByte();
		if (length == -1) {
			dateReturn = null;
		} else {
	    	dateReturn = new Date(dis.readLong());
		}
		return dateReturn;
	}

    private void writeDate(java.util.Date date1, ObjectOutputStream dos) throws IOException{
		if(date1 == null) {
            dos.writeByte(-1);
		} else {
			dos.writeByte(0);
	    	dos.writeLong(date1.getTime());
    	}
    }

	private String readString(ObjectInputStream dis) throws IOException{
		String strReturn = null;
		int length = 0;
        length = dis.readInt();
		if (length == -1) {
			strReturn = null;
		} else {
			if(length > commonByteArray_WIPO_PROJECTS_F_IPAS_ENV_CRE.length) {
				if(length < 1024 && commonByteArray_WIPO_PROJECTS_F_IPAS_ENV_CRE.length == 0) {
   					commonByteArray_WIPO_PROJECTS_F_IPAS_ENV_CRE = new byte[1024];
				} else {
   					commonByteArray_WIPO_PROJECTS_F_IPAS_ENV_CRE = new byte[2 * length];
   				}
			}
			dis.readFully(commonByteArray_WIPO_PROJECTS_F_IPAS_ENV_CRE, 0, length);
			strReturn = new String(commonByteArray_WIPO_PROJECTS_F_IPAS_ENV_CRE, 0, length, utf8Charset);
		}
		return strReturn;
	}

    private void writeString(String str, ObjectOutputStream dos) throws IOException{
		if(str == null) {
            dos.writeInt(-1);
		} else {
            byte[] byteArray = str.getBytes(utf8Charset);
	    	dos.writeInt(byteArray.length);
			dos.write(byteArray);
    	}
    }

    public void readData(ObjectInputStream dis) {

		synchronized(commonByteArrayLock_WIPO_PROJECTS_F_IPAS_ENV_CRE) {

        	try {

        		int length = 0;
		
					this.moment = readDate(dis);
					
					this.pid = readString(dis);
					
					this.father_pid = readString(dis);
					
					this.root_pid = readString(dis);
					
			            length = dis.readByte();
           				if (length == -1) {
           	    			this.system_pid = null;
           				} else {
           			    	this.system_pid = dis.readLong();
           				}
					
					this.project = readString(dis);
					
					this.job = readString(dis);
					
					this.job_repository_id = readString(dis);
					
					this.job_version = readString(dis);
					
					this.context = readString(dis);
					
					this.origin = readString(dis);
					
					this.message_type = readString(dis);
					
					this.message = readString(dis);
					
			            length = dis.readByte();
           				if (length == -1) {
           	    			this.duration = null;
           				} else {
           			    	this.duration = dis.readLong();
           				}
					
        	} catch (IOException e) {
	            throw new RuntimeException(e);

		

        }

		

      }


    }

    public void writeData(ObjectOutputStream dos) {
        try {

		
					// java.util.Date
				
						writeDate(this.moment,dos);
					
					// String
				
						writeString(this.pid,dos);
					
					// String
				
						writeString(this.father_pid,dos);
					
					// String
				
						writeString(this.root_pid,dos);
					
					// Long
				
						if(this.system_pid == null) {
			                dos.writeByte(-1);
						} else {
               				dos.writeByte(0);
           			    	dos.writeLong(this.system_pid);
		            	}
					
					// String
				
						writeString(this.project,dos);
					
					// String
				
						writeString(this.job,dos);
					
					// String
				
						writeString(this.job_repository_id,dos);
					
					// String
				
						writeString(this.job_version,dos);
					
					// String
				
						writeString(this.context,dos);
					
					// String
				
						writeString(this.origin,dos);
					
					// String
				
						writeString(this.message_type,dos);
					
					// String
				
						writeString(this.message,dos);
					
					// Long
				
						if(this.duration == null) {
			                dos.writeByte(-1);
						} else {
               				dos.writeByte(0);
           			    	dos.writeLong(this.duration);
		            	}
					
        	} catch (IOException e) {
	            throw new RuntimeException(e);
        }


    }


    public String toString() {

		StringBuilder sb = new StringBuilder();
		sb.append(super.toString());
		sb.append("[");
		sb.append("moment="+String.valueOf(moment));
		sb.append(",pid="+pid);
		sb.append(",father_pid="+father_pid);
		sb.append(",root_pid="+root_pid);
		sb.append(",system_pid="+String.valueOf(system_pid));
		sb.append(",project="+project);
		sb.append(",job="+job);
		sb.append(",job_repository_id="+job_repository_id);
		sb.append(",job_version="+job_version);
		sb.append(",context="+context);
		sb.append(",origin="+origin);
		sb.append(",message_type="+message_type);
		sb.append(",message="+message);
		sb.append(",duration="+String.valueOf(duration));
	    sb.append("]");

	    return sb.toString();
    }

    /**
     * Compare keys
     */
    public int compareTo(row108Struct other) {

		int returnValue = -1;
		
	    return returnValue;
    }


    private int checkNullsAndCompare(Object object1, Object object2) {
        int returnValue = 0;
		if (object1 instanceof Comparable && object2 instanceof Comparable) {
            returnValue = ((Comparable) object1).compareTo(object2);
        } else if (object1 != null && object2 != null) {
            returnValue = compareStrings(object1.toString(), object2.toString());
        } else if (object1 == null && object2 != null) {
            returnValue = 1;
        } else if (object1 != null && object2 == null) {
            returnValue = -1;
        } else {
            returnValue = 0;
        }

        return returnValue;
    }

    private int compareStrings(String string1, String string2) {
        return string1.compareTo(string2);
    }


}
public void tStatCatcher_1Process(final java.util.Map<String, Object> globalMap) throws TalendException {
	globalMap.put("tStatCatcher_1_SUBPROCESS_STATE", 0);

 final boolean execStat = this.execStat;
	
		String iterateId = "";
	
	
	String currentComponent = "";
	java.util.Map<String, Object> resourceMap = new java.util.HashMap<String, Object>();

	try {
			// TDI-39566 avoid throwing an useless Exception
			boolean resumeIt = true;
			if (globalResumeTicket == false && resumeEntryMethodName != null) {
				String currentMethodName = new java.lang.Exception().getStackTrace()[0].getMethodName();
				resumeIt = resumeEntryMethodName.equals(currentMethodName);
			}
			if (resumeIt || globalResumeTicket) { //start the resume
				globalResumeTicket = true;



		row108Struct row108 = new row108Struct();




	
	/**
	 * [tLogRow_52 begin ] start
	 */

	

	
		
		ok_Hash.put("tLogRow_52", false);
		start_Hash.put("tLogRow_52", System.currentTimeMillis());
		
	
	currentComponent="tLogRow_52";

	
					if(execStat) {
						runStat.updateStatOnConnection(resourceMap,iterateId,0,0,"row108");
					}
				
		int tos_count_tLogRow_52 = 0;
		

	///////////////////////
	
		final String OUTPUT_FIELD_SEPARATOR_tLogRow_52 = "|";
		java.io.PrintStream consoleOut_tLogRow_52 = null;	

 		StringBuilder strBuffer_tLogRow_52 = null;
		int nb_line_tLogRow_52 = 0;
///////////////////////    			



 



/**
 * [tLogRow_52 begin ] stop
 */



	
	/**
	 * [tStatCatcher_1 begin ] start
	 */

	

	
		
		ok_Hash.put("tStatCatcher_1", false);
		start_Hash.put("tStatCatcher_1", System.currentTimeMillis());
		
	
	currentComponent="tStatCatcher_1";

	
		int tos_count_tStatCatcher_1 = 0;
		

	for (StatCatcherUtils.StatCatcherMessage scm : tStatCatcher_1.getMessages()) {
		row108.pid = pid;
		row108.root_pid = rootPid;
		row108.father_pid = fatherPid;	
    	row108.project = projectName;
    	row108.job = jobName;
    	row108.context = contextStr;
		row108.origin = (scm.getOrigin()==null || scm.getOrigin().length()<1 ? null : scm.getOrigin());
		row108.message = scm.getMessage();
		row108.duration = scm.getDuration();
		row108.moment = scm.getMoment();
		row108.message_type = scm.getMessageType();
		row108.job_version = scm.getJobVersion();
		row108.job_repository_id = scm.getJobId();
		row108.system_pid = scm.getSystemPid();

 



/**
 * [tStatCatcher_1 begin ] stop
 */
	
	/**
	 * [tStatCatcher_1 main ] start
	 */

	

	
	
	currentComponent="tStatCatcher_1";

	

 


	tos_count_tStatCatcher_1++;

/**
 * [tStatCatcher_1 main ] stop
 */
	
	/**
	 * [tStatCatcher_1 process_data_begin ] start
	 */

	

	
	
	currentComponent="tStatCatcher_1";

	

 



/**
 * [tStatCatcher_1 process_data_begin ] stop
 */

	
	/**
	 * [tLogRow_52 main ] start
	 */

	

	
	
	currentComponent="tLogRow_52";

	
					if(execStat){
						runStat.updateStatOnConnection(iterateId,1,1
						
							,"row108"
						
						);
					}
					
///////////////////////		
						



				strBuffer_tLogRow_52 = new StringBuilder();




   				
	    		if(row108.moment != null) { //              
                    							
       
				strBuffer_tLogRow_52.append(
								FormatterUtils.format_Date(row108.moment, "yyyy-MM-dd HH:mm:ss")				
				);


							
	    		} //  			

    			strBuffer_tLogRow_52.append("|");
    			


   				
	    		if(row108.job != null) { //              
                    							
       
				strBuffer_tLogRow_52.append(
				                String.valueOf(row108.job)							
				);


							
	    		} //  			

    			strBuffer_tLogRow_52.append("|");
    			


   				
	    		if(row108.origin != null) { //              
                    							
       
				strBuffer_tLogRow_52.append(
				                String.valueOf(row108.origin)							
				);


							
	    		} //  			

    			strBuffer_tLogRow_52.append("|");
    			


   				
	    		if(row108.message_type != null) { //              
                    							
       
				strBuffer_tLogRow_52.append(
				                String.valueOf(row108.message_type)							
				);


							
	    		} //  			

    			strBuffer_tLogRow_52.append("|");
    			


   				
	    		if(row108.message != null) { //              
                    							
       
				strBuffer_tLogRow_52.append(
				                String.valueOf(row108.message)							
				);


							
	    		} //  			

    			strBuffer_tLogRow_52.append("|");
    			


   				
	    		if(row108.duration != null) { //              
                    							
       
				strBuffer_tLogRow_52.append(
				                String.valueOf(row108.duration)							
				);


							
	    		} //  			
 

                    if (globalMap.get("tLogRow_CONSOLE")!=null)
                    {
                    	consoleOut_tLogRow_52 = (java.io.PrintStream) globalMap.get("tLogRow_CONSOLE");
                    }
                    else
                    {
                    	consoleOut_tLogRow_52 = new java.io.PrintStream(new java.io.BufferedOutputStream(System.out));
                    	globalMap.put("tLogRow_CONSOLE",consoleOut_tLogRow_52);
                    }
                    consoleOut_tLogRow_52.println(strBuffer_tLogRow_52.toString());
                    consoleOut_tLogRow_52.flush();
                    nb_line_tLogRow_52++;
//////

//////                    
                    
///////////////////////    			

 


	tos_count_tLogRow_52++;

/**
 * [tLogRow_52 main ] stop
 */
	
	/**
	 * [tLogRow_52 process_data_begin ] start
	 */

	

	
	
	currentComponent="tLogRow_52";

	

 



/**
 * [tLogRow_52 process_data_begin ] stop
 */
	
	/**
	 * [tLogRow_52 process_data_end ] start
	 */

	

	
	
	currentComponent="tLogRow_52";

	

 



/**
 * [tLogRow_52 process_data_end ] stop
 */



	
	/**
	 * [tStatCatcher_1 process_data_end ] start
	 */

	

	
	
	currentComponent="tStatCatcher_1";

	

 



/**
 * [tStatCatcher_1 process_data_end ] stop
 */
	
	/**
	 * [tStatCatcher_1 end ] start
	 */

	

	
	
	currentComponent="tStatCatcher_1";

	

	}


 

ok_Hash.put("tStatCatcher_1", true);
end_Hash.put("tStatCatcher_1", System.currentTimeMillis());




/**
 * [tStatCatcher_1 end ] stop
 */

	
	/**
	 * [tLogRow_52 end ] start
	 */

	

	
	
	currentComponent="tLogRow_52";

	


//////
//////
globalMap.put("tLogRow_52_NB_LINE",nb_line_tLogRow_52);

///////////////////////    			

				if(execStat){
			  		runStat.updateStat(resourceMap,iterateId,2,0,"row108");
			  	}
			  	
 

ok_Hash.put("tLogRow_52", true);
end_Hash.put("tLogRow_52", System.currentTimeMillis());




/**
 * [tLogRow_52 end ] stop
 */



				}//end the resume

				



	
			}catch(java.lang.Exception e){	
				
				TalendException te = new TalendException(e, currentComponent, globalMap);
				
				throw te;
			}catch(java.lang.Error error){	
				
					runStat.stopThreadStat();
				
				throw error;
			}finally{
				
				try{
					
	
	/**
	 * [tStatCatcher_1 finally ] start
	 */

	

	
	
	currentComponent="tStatCatcher_1";

	

 



/**
 * [tStatCatcher_1 finally ] stop
 */

	
	/**
	 * [tLogRow_52 finally ] start
	 */

	

	
	
	currentComponent="tLogRow_52";

	

 



/**
 * [tLogRow_52 finally ] stop
 */



				}catch(java.lang.Exception e){	
					//ignore
				}catch(java.lang.Error error){
					//ignore
				}
				resourceMap = null;
			}
		

		globalMap.put("tStatCatcher_1_SUBPROCESS_STATE", 1);
	}
	
    public String resuming_logs_dir_path = null;
    public String resuming_checkpoint_path = null;
    public String parent_part_launcher = null;
    private String resumeEntryMethodName = null;
    private boolean globalResumeTicket = false;

    public boolean watch = false;
    // portStats is null, it means don't execute the statistics
    public Integer portStats = null;
    public int portTraces = 4334;
    public String clientHost;
    public String defaultClientHost = "localhost";
    public String contextStr = "Default";
    public boolean isDefaultContext = true;
    public String pid = "0";
    public String rootPid = null;
    public String fatherPid = null;
    public String fatherNode = null;
    public long startTime = 0;
    public boolean isChildJob = false;
    public String log4jLevel = "";
    
    private boolean enableLogStash;

    private boolean execStat = true;

    private ThreadLocal<java.util.Map<String, String>> threadLocal = new ThreadLocal<java.util.Map<String, String>>() {
        protected java.util.Map<String, String> initialValue() {
            java.util.Map<String,String> threadRunResultMap = new java.util.HashMap<String, String>();
            threadRunResultMap.put("errorCode", null);
            threadRunResultMap.put("status", "");
            return threadRunResultMap;
        };
    };


    protected PropertiesWithType context_param = new PropertiesWithType();
    public java.util.Map<String, Object> parentContextMap = new java.util.HashMap<String, Object>();

    public String status= "";
    

    public static void main(String[] args){
        final F_IPAS_ENV_CRE F_IPAS_ENV_CREClass = new F_IPAS_ENV_CRE();

        int exitCode = F_IPAS_ENV_CREClass.runJobInTOS(args);

        System.exit(exitCode);
    }


    public String[][] runJob(String[] args) {

        int exitCode = runJobInTOS(args);
        String[][] bufferValue = new String[][] { { Integer.toString(exitCode) } };

        return bufferValue;
    }

    public boolean hastBufferOutputComponent() {
		boolean hastBufferOutput = false;
    	
        return hastBufferOutput;
    }

    public int runJobInTOS(String[] args) {
	   	// reset status
	   	status = "";
	   	
        String lastStr = "";
        for (String arg : args) {
            if (arg.equalsIgnoreCase("--context_param")) {
                lastStr = arg;
            } else if (lastStr.equals("")) {
                evalParam(arg);
            } else {
                evalParam(lastStr + " " + arg);
                lastStr = "";
            }
        }
        enableLogStash = "true".equalsIgnoreCase(System.getProperty("audit.enabled"));

    	
    	

        if(clientHost == null) {
            clientHost = defaultClientHost;
        }

        if(pid == null || "0".equals(pid)) {
            pid = TalendString.getAsciiRandomString(6);
        }

        if (rootPid==null) {
            rootPid = pid;
        }
        if (fatherPid==null) {
            fatherPid = pid;
        }else{
            isChildJob = true;
        }

        if (portStats != null) {
            // portStats = -1; //for testing
            if (portStats < 0 || portStats > 65535) {
                // issue:10869, the portStats is invalid, so this client socket can't open
                System.err.println("The statistics socket port " + portStats + " is invalid.");
                execStat = false;
            }
        } else {
            execStat = false;
        }

        try {
            //call job/subjob with an existing context, like: --context=production. if without this parameter, there will use the default context instead.
            java.io.InputStream inContext = F_IPAS_ENV_CRE.class.getClassLoader().getResourceAsStream("wipo_projects/f_ipas_env_cre_0_1/contexts/" + contextStr + ".properties");
            if (inContext == null) {
                inContext = F_IPAS_ENV_CRE.class.getClassLoader().getResourceAsStream("config/contexts/" + contextStr + ".properties");
            }
            if (inContext != null) {
                try {
                    //defaultProps is in order to keep the original context value
                    if(context != null && context.isEmpty()) {
	                defaultProps.load(inContext);
	                context = new ContextProperties(defaultProps);
                    }
                } finally {
                    inContext.close();
                }
            } else if (!isDefaultContext) {
                //print info and job continue to run, for case: context_param is not empty.
                System.err.println("Could not find the context " + contextStr);
            }

            if(!context_param.isEmpty()) {
                context.putAll(context_param);
				//set types for params from parentJobs
				for (Object key: context_param.keySet()){
					String context_key = key.toString();
					String context_type = context_param.getContextType(context_key);
					context.setContextType(context_key, context_type);

				}
            }
            class ContextProcessing {
                private void processContext_0() {
                        context.setContextType("intermediateHost", "id_String");
                        if(context.getStringValue("intermediateHost") == null) {
                            context.intermediateHost = null;
                        } else {
                            context.intermediateHost=(String) context.getProperty("intermediateHost");
                        }
                        context.setContextType("intermediatePort", "id_String");
                        if(context.getStringValue("intermediatePort") == null) {
                            context.intermediatePort = null;
                        } else {
                            context.intermediatePort=(String) context.getProperty("intermediatePort");
                        }
                        context.setContextType("intermediateDB", "id_String");
                        if(context.getStringValue("intermediateDB") == null) {
                            context.intermediateDB = null;
                        } else {
                            context.intermediateDB=(String) context.getProperty("intermediateDB");
                        }
                        context.setContextType("intermediateUser", "id_String");
                        if(context.getStringValue("intermediateUser") == null) {
                            context.intermediateUser = null;
                        } else {
                            context.intermediateUser=(String) context.getProperty("intermediateUser");
                        }
                        context.setContextType("intermediatePassword", "id_String");
                        if(context.getStringValue("intermediatePassword") == null) {
                            context.intermediatePassword = null;
                        } else {
                            context.intermediatePassword=(String) context.getProperty("intermediatePassword");
                        }
                        context.setContextType("ipasHost", "id_String");
                        if(context.getStringValue("ipasHost") == null) {
                            context.ipasHost = null;
                        } else {
                            context.ipasHost=(String) context.getProperty("ipasHost");
                        }
                        context.setContextType("ipasPort", "id_String");
                        if(context.getStringValue("ipasPort") == null) {
                            context.ipasPort = null;
                        } else {
                            context.ipasPort=(String) context.getProperty("ipasPort");
                        }
                        context.setContextType("ipasDB", "id_String");
                        if(context.getStringValue("ipasDB") == null) {
                            context.ipasDB = null;
                        } else {
                            context.ipasDB=(String) context.getProperty("ipasDB");
                        }
                        context.setContextType("ipasUser", "id_String");
                        if(context.getStringValue("ipasUser") == null) {
                            context.ipasUser = null;
                        } else {
                            context.ipasUser=(String) context.getProperty("ipasUser");
                        }
                        context.setContextType("ipasPassword", "id_String");
                        if(context.getStringValue("ipasPassword") == null) {
                            context.ipasPassword = null;
                        } else {
                            context.ipasPassword=(String) context.getProperty("ipasPassword");
                        }
                        context.setContextType("ipasSaPassword", "id_String");
                        if(context.getStringValue("ipasSaPassword") == null) {
                            context.ipasSaPassword = null;
                        } else {
                            context.ipasSaPassword=(String) context.getProperty("ipasSaPassword");
                        }
                        context.setContextType("dumpBaseIpasLocation", "id_String");
                        if(context.getStringValue("dumpBaseIpasLocation") == null) {
                            context.dumpBaseIpasLocation = null;
                        } else {
                            context.dumpBaseIpasLocation=(String) context.getProperty("dumpBaseIpasLocation");
                        }
                        context.setContextType("sqlLocation", "id_String");
                        if(context.getStringValue("sqlLocation") == null) {
                            context.sqlLocation = null;
                        } else {
                            context.sqlLocation=(String) context.getProperty("sqlLocation");
                        }
                } 
                public void processAllContext() {
                        processContext_0();
                }
            }

            new ContextProcessing().processAllContext();
        } catch (java.io.IOException ie) {
            System.err.println("Could not load context "+contextStr);
            ie.printStackTrace();
        }

        // get context value from parent directly
        if (parentContextMap != null && !parentContextMap.isEmpty()) {if (parentContextMap.containsKey("intermediateHost")) {
                context.intermediateHost = (String) parentContextMap.get("intermediateHost");
            }if (parentContextMap.containsKey("intermediatePort")) {
                context.intermediatePort = (String) parentContextMap.get("intermediatePort");
            }if (parentContextMap.containsKey("intermediateDB")) {
                context.intermediateDB = (String) parentContextMap.get("intermediateDB");
            }if (parentContextMap.containsKey("intermediateUser")) {
                context.intermediateUser = (String) parentContextMap.get("intermediateUser");
            }if (parentContextMap.containsKey("intermediatePassword")) {
                context.intermediatePassword = (String) parentContextMap.get("intermediatePassword");
            }if (parentContextMap.containsKey("ipasHost")) {
                context.ipasHost = (String) parentContextMap.get("ipasHost");
            }if (parentContextMap.containsKey("ipasPort")) {
                context.ipasPort = (String) parentContextMap.get("ipasPort");
            }if (parentContextMap.containsKey("ipasDB")) {
                context.ipasDB = (String) parentContextMap.get("ipasDB");
            }if (parentContextMap.containsKey("ipasUser")) {
                context.ipasUser = (String) parentContextMap.get("ipasUser");
            }if (parentContextMap.containsKey("ipasPassword")) {
                context.ipasPassword = (String) parentContextMap.get("ipasPassword");
            }if (parentContextMap.containsKey("ipasSaPassword")) {
                context.ipasSaPassword = (String) parentContextMap.get("ipasSaPassword");
            }if (parentContextMap.containsKey("dumpBaseIpasLocation")) {
                context.dumpBaseIpasLocation = (String) parentContextMap.get("dumpBaseIpasLocation");
            }if (parentContextMap.containsKey("sqlLocation")) {
                context.sqlLocation = (String) parentContextMap.get("sqlLocation");
            }
        }

        //Resume: init the resumeUtil
        resumeEntryMethodName = ResumeUtil.getResumeEntryMethodName(resuming_checkpoint_path);
        resumeUtil = new ResumeUtil(resuming_logs_dir_path, isChildJob, rootPid);
        resumeUtil.initCommonInfo(pid, rootPid, fatherPid, projectName, jobName, contextStr, jobVersion);

		List<String> parametersToEncrypt = new java.util.ArrayList<String>();
        //Resume: jobStart
        resumeUtil.addLog("JOB_STARTED", "JOB:" + jobName, parent_part_launcher, Thread.currentThread().getId() + "", "","","","",resumeUtil.convertToJsonText(context,parametersToEncrypt));

if(execStat) {
    try {
        runStat.openSocket(!isChildJob);
        runStat.setAllPID(rootPid, fatherPid, pid, jobName);
        runStat.startThreadStat(clientHost, portStats);
        runStat.updateStatOnJob(RunStat.JOBSTART, fatherNode);
    } catch (java.io.IOException ioException) {
        ioException.printStackTrace();
    }
}



	
	    java.util.concurrent.ConcurrentHashMap<Object, Object> concurrentHashMap = new java.util.concurrent.ConcurrentHashMap<Object, Object>();
	    globalMap.put("concurrentHashMap", concurrentHashMap);
	

    long startUsedMemory = Runtime.getRuntime().totalMemory() - Runtime.getRuntime().freeMemory();
    long endUsedMemory = 0;
    long end = 0;

    startTime = System.currentTimeMillis();
        tStatCatcher_1.addMessage("begin");


this.globalResumeTicket = true;//to run tPreJob




        try {
            tStatCatcher_1Process(globalMap);
        } catch (java.lang.Exception e) {
            e.printStackTrace();
        }

this.globalResumeTicket = false;//to run others jobs

try {
errorCode = null;tMSSqlConnection_1Process(globalMap);
if(!"failure".equals(status)) { status = "end"; }
}catch (TalendException e_tMSSqlConnection_1) {
globalMap.put("tMSSqlConnection_1_SUBPROCESS_STATE", -1);

e_tMSSqlConnection_1.printStackTrace();

}

this.globalResumeTicket = true;//to run tPostJob




        end = System.currentTimeMillis();

        if (watch) {
            System.out.println((end-startTime)+" milliseconds");
        }

        endUsedMemory = Runtime.getRuntime().totalMemory() - Runtime.getRuntime().freeMemory();
        if (false) {
            System.out.println((endUsedMemory - startUsedMemory) + " bytes memory increase when running : F_IPAS_ENV_CRE");
        }
        tStatCatcher_1.addMessage(status==""?"end":status, (end-startTime));
        try {
            tStatCatcher_1Process(globalMap);
        } catch (java.lang.Exception e) {
            e.printStackTrace();
        }



if (execStat) {
    runStat.updateStatOnJob(RunStat.JOBEND, fatherNode);
    runStat.stopThreadStat();
}
    int returnCode = 0;


    if(errorCode == null) {
         returnCode = status != null && status.equals("failure") ? 1 : 0;
    } else {
         returnCode = errorCode.intValue();
    }
    resumeUtil.addLog("JOB_ENDED", "JOB:" + jobName, parent_part_launcher, Thread.currentThread().getId() + "", "","" + returnCode,"","","");

    return returnCode;

  }

    // only for OSGi env
    public void destroy() {
    closeSqlDbConnections();


    }



    private void closeSqlDbConnections() {
        try {
            Object obj_conn;
            obj_conn = globalMap.remove("conn_tMSSqlConnection_1");
            if (null != obj_conn) {
                ((java.sql.Connection) obj_conn).close();
            }
            obj_conn = globalMap.remove("conn_tMSSqlConnection_2");
            if (null != obj_conn) {
                ((java.sql.Connection) obj_conn).close();
            }
            obj_conn = globalMap.remove("conn_tMSSqlConnection_3");
            if (null != obj_conn) {
                ((java.sql.Connection) obj_conn).close();
            }
            obj_conn = globalMap.remove("conn_tMSSqlConnection_4");
            if (null != obj_conn) {
                ((java.sql.Connection) obj_conn).close();
            }
        } catch (java.lang.Exception e) {
        }
    }











    private java.util.Map<String, Object> getSharedConnections4REST() {
        java.util.Map<String, Object> connections = new java.util.HashMap<String, Object>();
            connections.put("conn_tMSSqlConnection_1", globalMap.get("conn_tMSSqlConnection_1"));
            connections.put("conn_tMSSqlConnection_2", globalMap.get("conn_tMSSqlConnection_2"));
            connections.put("conn_tMSSqlConnection_3", globalMap.get("conn_tMSSqlConnection_3"));
            connections.put("conn_tMSSqlConnection_4", globalMap.get("conn_tMSSqlConnection_4"));






        return connections;
    }

    private void evalParam(String arg) {
        if (arg.startsWith("--resuming_logs_dir_path")) {
            resuming_logs_dir_path = arg.substring(25);
        } else if (arg.startsWith("--resuming_checkpoint_path")) {
            resuming_checkpoint_path = arg.substring(27);
        } else if (arg.startsWith("--parent_part_launcher")) {
            parent_part_launcher = arg.substring(23);
        } else if (arg.startsWith("--watch")) {
            watch = true;
        } else if (arg.startsWith("--stat_port=")) {
            String portStatsStr = arg.substring(12);
            if (portStatsStr != null && !portStatsStr.equals("null")) {
                portStats = Integer.parseInt(portStatsStr);
            }
        } else if (arg.startsWith("--trace_port=")) {
            portTraces = Integer.parseInt(arg.substring(13));
        } else if (arg.startsWith("--client_host=")) {
            clientHost = arg.substring(14);
        } else if (arg.startsWith("--context=")) {
            contextStr = arg.substring(10);
            isDefaultContext = false;
        } else if (arg.startsWith("--father_pid=")) {
            fatherPid = arg.substring(13);
        } else if (arg.startsWith("--root_pid=")) {
            rootPid = arg.substring(11);
        } else if (arg.startsWith("--father_node=")) {
            fatherNode = arg.substring(14);
        } else if (arg.startsWith("--pid=")) {
            pid = arg.substring(6);
        } else if (arg.startsWith("--context_type")) {
            String keyValue = arg.substring(15);
			int index = -1;
            if (keyValue != null && (index = keyValue.indexOf('=')) > -1) {
                if (fatherPid==null) {
                    context_param.setContextType(keyValue.substring(0, index), replaceEscapeChars(keyValue.substring(index + 1)));
                } else { // the subjob won't escape the especial chars
                    context_param.setContextType(keyValue.substring(0, index), keyValue.substring(index + 1) );
                }

            }

		} else if (arg.startsWith("--context_param")) {
            String keyValue = arg.substring(16);
            int index = -1;
            if (keyValue != null && (index = keyValue.indexOf('=')) > -1) {
                if (fatherPid==null) {
                    context_param.put(keyValue.substring(0, index), replaceEscapeChars(keyValue.substring(index + 1)));
                } else { // the subjob won't escape the especial chars
                    context_param.put(keyValue.substring(0, index), keyValue.substring(index + 1) );
                }
            }
        } else if (arg.startsWith("--log4jLevel=")) {
            log4jLevel = arg.substring(13);
		} else if (arg.startsWith("--audit.enabled") && arg.contains("=")) {//for trunjob call
		    final int equal = arg.indexOf('=');
			final String key = arg.substring("--".length(), equal);
			System.setProperty(key, arg.substring(equal + 1));
		}
    }
    
    private static final String NULL_VALUE_EXPRESSION_IN_COMMAND_STRING_FOR_CHILD_JOB_ONLY = "<TALEND_NULL>";

    private final String[][] escapeChars = {
        {"\\\\","\\"},{"\\n","\n"},{"\\'","\'"},{"\\r","\r"},
        {"\\f","\f"},{"\\b","\b"},{"\\t","\t"}
        };
    private String replaceEscapeChars (String keyValue) {

		if (keyValue == null || ("").equals(keyValue.trim())) {
			return keyValue;
		}

		StringBuilder result = new StringBuilder();
		int currIndex = 0;
		while (currIndex < keyValue.length()) {
			int index = -1;
			// judege if the left string includes escape chars
			for (String[] strArray : escapeChars) {
				index = keyValue.indexOf(strArray[0],currIndex);
				if (index>=0) {

					result.append(keyValue.substring(currIndex, index + strArray[0].length()).replace(strArray[0], strArray[1]));
					currIndex = index + strArray[0].length();
					break;
				}
			}
			// if the left string doesn't include escape chars, append the left into the result
			if (index < 0) {
				result.append(keyValue.substring(currIndex));
				currIndex = currIndex + keyValue.length();
			}
		}

		return result.toString();
    }

    public Integer getErrorCode() {
        return errorCode;
    }


    public String getStatus() {
        return status;
    }

    ResumeUtil resumeUtil = null;
}
/************************************************************************************************
 *     1191086 characters generated by Talend Open Studio for Data Integration 
 *     on the November 25, 2020 at 2:42:46 PM CET
 ************************************************************************************************/