// ============================================================================
//
// Copyright (c) 2006-2015, Talend Inc.
//
// This source code has been automatically generated by_Talend Open Studio for Data Integration
// / Licensed under the Apache License, Version 2.0 (the "License");
// you may not use this file except in compliance with the License.
// You may obtain a copy of the License at
// http://www.apache.org/licenses/LICENSE-2.0
// 
// Unless required by applicable law or agreed to in writing, software
// distributed under the License is distributed on an "AS IS" BASIS,
// WITHOUT WARRANTIES OR CONDITIONS OF ANY KIND, either express or implied.
// See the License for the specific language governing permissions and
// limitations under the License.

package wipo_projects.g3b_mig_ud_0_1;

import routines.Numeric;
import routines.DataOperation;
import routines.TalendDataGenerator;
import routines.TalendStringUtil;
import routines.test;
import routines.TalendString;
import routines.StringHandling;
import routines.Relational;
import routines.TalendDate;
import routines.Mathematical;
import routines.IPAS;
import routines.system.*;
import routines.system.api.*;
import java.text.ParseException;
import java.text.SimpleDateFormat;
import java.util.Date;
import java.util.List;
import java.math.BigDecimal;
import java.io.ByteArrayOutputStream;
import java.io.ByteArrayInputStream;
import java.io.DataInputStream;
import java.io.DataOutputStream;
import java.io.ObjectOutputStream;
import java.io.ObjectInputStream;
import java.io.IOException;
import java.util.Comparator;

@SuppressWarnings("unused")

/**
 * Job: G3b_Mig_UD Purpose: alternative to store procedure using talend<br>
 * Description: <br>
 * 
 * @author user@talend.com
 * @version 7.4.1.20201110_1014-M4
 * @status
 */
public class G3b_Mig_UD implements TalendJob {

	protected static void logIgnoredError(String message, Throwable cause) {
		System.err.println(message);
		if (cause != null) {
			cause.printStackTrace();
		}

	}

	public final Object obj = new Object();

	// for transmiting parameters purpose
	private Object valueObject = null;

	public Object getValueObject() {
		return this.valueObject;
	}

	public void setValueObject(Object valueObject) {
		this.valueObject = valueObject;
	}

	private final static String defaultCharset = java.nio.charset.Charset.defaultCharset().name();

	private final static String utf8Charset = "UTF-8";

	// contains type for every context property
	public class PropertiesWithType extends java.util.Properties {
		private static final long serialVersionUID = 1L;
		private java.util.Map<String, String> propertyTypes = new java.util.HashMap<>();

		public PropertiesWithType(java.util.Properties properties) {
			super(properties);
		}

		public PropertiesWithType() {
			super();
		}

		public void setContextType(String key, String type) {
			propertyTypes.put(key, type);
		}

		public String getContextType(String key) {
			return propertyTypes.get(key);
		}
	}

	// create and load default properties
	private java.util.Properties defaultProps = new java.util.Properties();

	// create application properties with default
	public class ContextProperties extends PropertiesWithType {

		private static final long serialVersionUID = 1L;

		public ContextProperties(java.util.Properties properties) {
			super(properties);
		}

		public ContextProperties() {
			super();
		}

		public void synchronizeContext() {

			if (intermediateHost != null) {

				this.setProperty("intermediateHost", intermediateHost.toString());

			}

			if (intermediatePort != null) {

				this.setProperty("intermediatePort", intermediatePort.toString());

			}

			if (intermediateDB != null) {

				this.setProperty("intermediateDB", intermediateDB.toString());

			}

			if (intermediateUser != null) {

				this.setProperty("intermediateUser", intermediateUser.toString());

			}

			if (intermediatePassword != null) {

				this.setProperty("intermediatePassword", intermediatePassword.toString());

			}

			if (ipasHost != null) {

				this.setProperty("ipasHost", ipasHost.toString());

			}

			if (ipasPort != null) {

				this.setProperty("ipasPort", ipasPort.toString());

			}

			if (ipasDB != null) {

				this.setProperty("ipasDB", ipasDB.toString());

			}

			if (ipasUser != null) {

				this.setProperty("ipasUser", ipasUser.toString());

			}

			if (ipasPassword != null) {

				this.setProperty("ipasPassword", ipasPassword.toString());

			}

			if (ipasSaPassword != null) {

				this.setProperty("ipasSaPassword", ipasSaPassword.toString());

			}

			if (processAll != null) {

				this.setProperty("processAll", processAll.toString());

			}

		}

		// if the stored or passed value is "<TALEND_NULL>" string, it mean null
		public String getStringValue(String key) {
			String origin_value = this.getProperty(key);
			if (NULL_VALUE_EXPRESSION_IN_COMMAND_STRING_FOR_CHILD_JOB_ONLY.equals(origin_value)) {
				return null;
			}
			return origin_value;
		}

		public String intermediateHost;

		public String getIntermediateHost() {
			return this.intermediateHost;
		}

		public String intermediatePort;

		public String getIntermediatePort() {
			return this.intermediatePort;
		}

		public String intermediateDB;

		public String getIntermediateDB() {
			return this.intermediateDB;
		}

		public String intermediateUser;

		public String getIntermediateUser() {
			return this.intermediateUser;
		}

		public String intermediatePassword;

		public String getIntermediatePassword() {
			return this.intermediatePassword;
		}

		public String ipasHost;

		public String getIpasHost() {
			return this.ipasHost;
		}

		public String ipasPort;

		public String getIpasPort() {
			return this.ipasPort;
		}

		public String ipasDB;

		public String getIpasDB() {
			return this.ipasDB;
		}

		public String ipasUser;

		public String getIpasUser() {
			return this.ipasUser;
		}

		public String ipasPassword;

		public String getIpasPassword() {
			return this.ipasPassword;
		}

		public String ipasSaPassword;

		public String getIpasSaPassword() {
			return this.ipasSaPassword;
		}

		public String processAll;

		public String getProcessAll() {
			return this.processAll;
		}
	}

	protected ContextProperties context = new ContextProperties(); // will be instanciated by MS.

	public ContextProperties getContext() {
		return this.context;
	}

	private final String jobVersion = "0.1";
	private final String jobName = "G3b_Mig_UD";
	private final String projectName = "WIPO_PROJECTS";
	public Integer errorCode = null;
	private String currentComponent = "";

	private final java.util.Map<String, Object> globalMap = new java.util.HashMap<String, Object>();
	private final static java.util.Map<String, Object> junitGlobalMap = new java.util.HashMap<String, Object>();

	private final java.util.Map<String, Long> start_Hash = new java.util.HashMap<String, Long>();
	private final java.util.Map<String, Long> end_Hash = new java.util.HashMap<String, Long>();
	private final java.util.Map<String, Boolean> ok_Hash = new java.util.HashMap<String, Boolean>();
	public final java.util.List<String[]> globalBuffer = new java.util.ArrayList<String[]>();

	private RunStat runStat = new RunStat();

	// OSGi DataSource
	private final static String KEY_DB_DATASOURCES = "KEY_DB_DATASOURCES";

	private final static String KEY_DB_DATASOURCES_RAW = "KEY_DB_DATASOURCES_RAW";

	public void setDataSources(java.util.Map<String, javax.sql.DataSource> dataSources) {
		java.util.Map<String, routines.system.TalendDataSource> talendDataSources = new java.util.HashMap<String, routines.system.TalendDataSource>();
		for (java.util.Map.Entry<String, javax.sql.DataSource> dataSourceEntry : dataSources.entrySet()) {
			talendDataSources.put(dataSourceEntry.getKey(),
					new routines.system.TalendDataSource(dataSourceEntry.getValue()));
		}
		globalMap.put(KEY_DB_DATASOURCES, talendDataSources);
		globalMap.put(KEY_DB_DATASOURCES_RAW, new java.util.HashMap<String, javax.sql.DataSource>(dataSources));
	}

	StatCatcherUtils tStatCatcher_1 = new StatCatcherUtils("_XosCwHcjEems4uT2DBR07Q", "0.1");

	private final java.io.ByteArrayOutputStream baos = new java.io.ByteArrayOutputStream();
	private final java.io.PrintStream errorMessagePS = new java.io.PrintStream(new java.io.BufferedOutputStream(baos));

	public String getExceptionStackTrace() {
		if ("failure".equals(this.getStatus())) {
			errorMessagePS.flush();
			return baos.toString();
		}
		return null;
	}

	private Exception exception;

	public Exception getException() {
		if ("failure".equals(this.getStatus())) {
			return this.exception;
		}
		return null;
	}

	private class TalendException extends Exception {

		private static final long serialVersionUID = 1L;

		private java.util.Map<String, Object> globalMap = null;
		private Exception e = null;
		private String currentComponent = null;
		private String virtualComponentName = null;

		public void setVirtualComponentName(String virtualComponentName) {
			this.virtualComponentName = virtualComponentName;
		}

		private TalendException(Exception e, String errorComponent, final java.util.Map<String, Object> globalMap) {
			this.currentComponent = errorComponent;
			this.globalMap = globalMap;
			this.e = e;
		}

		public Exception getException() {
			return this.e;
		}

		public String getCurrentComponent() {
			return this.currentComponent;
		}

		public String getExceptionCauseMessage(Exception e) {
			Throwable cause = e;
			String message = null;
			int i = 10;
			while (null != cause && 0 < i--) {
				message = cause.getMessage();
				if (null == message) {
					cause = cause.getCause();
				} else {
					break;
				}
			}
			if (null == message) {
				message = e.getClass().getName();
			}
			return message;
		}

		@Override
		public void printStackTrace() {
			if (!(e instanceof TalendException || e instanceof TDieException)) {
				if (virtualComponentName != null && currentComponent.indexOf(virtualComponentName + "_") == 0) {
					globalMap.put(virtualComponentName + "_ERROR_MESSAGE", getExceptionCauseMessage(e));
				}
				globalMap.put(currentComponent + "_ERROR_MESSAGE", getExceptionCauseMessage(e));
				System.err.println("Exception in component " + currentComponent + " (" + jobName + ")");
			}
			if (!(e instanceof TDieException)) {
				if (e instanceof TalendException) {
					e.printStackTrace();
				} else {
					e.printStackTrace();
					e.printStackTrace(errorMessagePS);
					G3b_Mig_UD.this.exception = e;
				}
			}
			if (!(e instanceof TalendException)) {
				try {
					for (java.lang.reflect.Method m : this.getClass().getEnclosingClass().getMethods()) {
						if (m.getName().compareTo(currentComponent + "_error") == 0) {
							m.invoke(G3b_Mig_UD.this, new Object[] { e, currentComponent, globalMap });
							break;
						}
					}

					if (!(e instanceof TDieException)) {
					}
				} catch (Exception e) {
					this.e.printStackTrace();
				}
			}
		}
	}

	public void tMSSqlConnection_3_error(Exception exception, String errorComponent,
			final java.util.Map<String, Object> globalMap) throws TalendException {

		end_Hash.put(errorComponent, System.currentTimeMillis());

		status = "failure";

		tMSSqlConnection_3_onSubJobError(exception, errorComponent, globalMap);
	}

	public void tDBRow_10_error(Exception exception, String errorComponent,
			final java.util.Map<String, Object> globalMap) throws TalendException {

		end_Hash.put(errorComponent, System.currentTimeMillis());

		tStatCatcher_1.addMessage("failure", errorComponent,
				end_Hash.get(errorComponent) - start_Hash.get(errorComponent));
		tStatCatcher_1Process(globalMap);

		status = "failure";

		tDBRow_10_onSubJobError(exception, errorComponent, globalMap);
	}

	public void tDBCommit_10_error(Exception exception, String errorComponent,
			final java.util.Map<String, Object> globalMap) throws TalendException {

		end_Hash.put(errorComponent, System.currentTimeMillis());

		status = "failure";

		tDBRow_10_onSubJobError(exception, errorComponent, globalMap);
	}

	public void tLogRow_22_error(Exception exception, String errorComponent,
			final java.util.Map<String, Object> globalMap) throws TalendException {

		end_Hash.put(errorComponent, System.currentTimeMillis());

		status = "failure";

		tDBRow_10_onSubJobError(exception, errorComponent, globalMap);
	}

	public void tDBRow_7_error(Exception exception, String errorComponent,
			final java.util.Map<String, Object> globalMap) throws TalendException {

		end_Hash.put(errorComponent, System.currentTimeMillis());

		tStatCatcher_1.addMessage("failure", errorComponent,
				end_Hash.get(errorComponent) - start_Hash.get(errorComponent));
		tStatCatcher_1Process(globalMap);

		status = "failure";

		tDBRow_7_onSubJobError(exception, errorComponent, globalMap);
	}

	public void tDBCommit_8_error(Exception exception, String errorComponent,
			final java.util.Map<String, Object> globalMap) throws TalendException {

		end_Hash.put(errorComponent, System.currentTimeMillis());

		status = "failure";

		tDBRow_7_onSubJobError(exception, errorComponent, globalMap);
	}

	public void tLogRow_12_error(Exception exception, String errorComponent,
			final java.util.Map<String, Object> globalMap) throws TalendException {

		end_Hash.put(errorComponent, System.currentTimeMillis());

		status = "failure";

		tDBRow_7_onSubJobError(exception, errorComponent, globalMap);
	}

	public void tDBRow_12_error(Exception exception, String errorComponent,
			final java.util.Map<String, Object> globalMap) throws TalendException {

		end_Hash.put(errorComponent, System.currentTimeMillis());

		tStatCatcher_1.addMessage("failure", errorComponent,
				end_Hash.get(errorComponent) - start_Hash.get(errorComponent));
		tStatCatcher_1Process(globalMap);

		status = "failure";

		tDBRow_12_onSubJobError(exception, errorComponent, globalMap);
	}

	public void tDBCommit_12_error(Exception exception, String errorComponent,
			final java.util.Map<String, Object> globalMap) throws TalendException {

		end_Hash.put(errorComponent, System.currentTimeMillis());

		status = "failure";

		tDBRow_12_onSubJobError(exception, errorComponent, globalMap);
	}

	public void tLogRow_11_error(Exception exception, String errorComponent,
			final java.util.Map<String, Object> globalMap) throws TalendException {

		end_Hash.put(errorComponent, System.currentTimeMillis());

		status = "failure";

		tDBRow_12_onSubJobError(exception, errorComponent, globalMap);
	}

	public void tDBRow_13_error(Exception exception, String errorComponent,
			final java.util.Map<String, Object> globalMap) throws TalendException {

		end_Hash.put(errorComponent, System.currentTimeMillis());

		tStatCatcher_1.addMessage("failure", errorComponent,
				end_Hash.get(errorComponent) - start_Hash.get(errorComponent));
		tStatCatcher_1Process(globalMap);

		status = "failure";

		tDBRow_13_onSubJobError(exception, errorComponent, globalMap);
	}

	public void tDBCommit_13_error(Exception exception, String errorComponent,
			final java.util.Map<String, Object> globalMap) throws TalendException {

		end_Hash.put(errorComponent, System.currentTimeMillis());

		status = "failure";

		tDBRow_13_onSubJobError(exception, errorComponent, globalMap);
	}

	public void tLogRow_13_error(Exception exception, String errorComponent,
			final java.util.Map<String, Object> globalMap) throws TalendException {

		end_Hash.put(errorComponent, System.currentTimeMillis());

		status = "failure";

		tDBRow_13_onSubJobError(exception, errorComponent, globalMap);
	}

	public void tDBRow_14_error(Exception exception, String errorComponent,
			final java.util.Map<String, Object> globalMap) throws TalendException {

		end_Hash.put(errorComponent, System.currentTimeMillis());

		tStatCatcher_1.addMessage("failure", errorComponent,
				end_Hash.get(errorComponent) - start_Hash.get(errorComponent));
		tStatCatcher_1Process(globalMap);

		status = "failure";

		tDBRow_14_onSubJobError(exception, errorComponent, globalMap);
	}

	public void tDBCommit_14_error(Exception exception, String errorComponent,
			final java.util.Map<String, Object> globalMap) throws TalendException {

		end_Hash.put(errorComponent, System.currentTimeMillis());

		status = "failure";

		tDBRow_14_onSubJobError(exception, errorComponent, globalMap);
	}

	public void tLogRow_1_error(Exception exception, String errorComponent,
			final java.util.Map<String, Object> globalMap) throws TalendException {

		end_Hash.put(errorComponent, System.currentTimeMillis());

		status = "failure";

		tDBRow_14_onSubJobError(exception, errorComponent, globalMap);
	}

	public void tDBRow_15_error(Exception exception, String errorComponent,
			final java.util.Map<String, Object> globalMap) throws TalendException {

		end_Hash.put(errorComponent, System.currentTimeMillis());

		tStatCatcher_1.addMessage("failure", errorComponent,
				end_Hash.get(errorComponent) - start_Hash.get(errorComponent));
		tStatCatcher_1Process(globalMap);

		status = "failure";

		tDBRow_15_onSubJobError(exception, errorComponent, globalMap);
	}

	public void tDBCommit_15_error(Exception exception, String errorComponent,
			final java.util.Map<String, Object> globalMap) throws TalendException {

		end_Hash.put(errorComponent, System.currentTimeMillis());

		status = "failure";

		tDBRow_15_onSubJobError(exception, errorComponent, globalMap);
	}

	public void tLogRow_14_error(Exception exception, String errorComponent,
			final java.util.Map<String, Object> globalMap) throws TalendException {

		end_Hash.put(errorComponent, System.currentTimeMillis());

		status = "failure";

		tDBRow_15_onSubJobError(exception, errorComponent, globalMap);
	}

	public void tDBRow_16_error(Exception exception, String errorComponent,
			final java.util.Map<String, Object> globalMap) throws TalendException {

		end_Hash.put(errorComponent, System.currentTimeMillis());

		tStatCatcher_1.addMessage("failure", errorComponent,
				end_Hash.get(errorComponent) - start_Hash.get(errorComponent));
		tStatCatcher_1Process(globalMap);

		status = "failure";

		tDBRow_16_onSubJobError(exception, errorComponent, globalMap);
	}

	public void tDBCommit_16_error(Exception exception, String errorComponent,
			final java.util.Map<String, Object> globalMap) throws TalendException {

		end_Hash.put(errorComponent, System.currentTimeMillis());

		status = "failure";

		tDBRow_16_onSubJobError(exception, errorComponent, globalMap);
	}

	public void tLogRow_17_error(Exception exception, String errorComponent,
			final java.util.Map<String, Object> globalMap) throws TalendException {

		end_Hash.put(errorComponent, System.currentTimeMillis());

		status = "failure";

		tDBRow_16_onSubJobError(exception, errorComponent, globalMap);
	}

	public void tDBInput_15_error(Exception exception, String errorComponent,
			final java.util.Map<String, Object> globalMap) throws TalendException {

		end_Hash.put(errorComponent, System.currentTimeMillis());

		status = "failure";

		tDBInput_15_onSubJobError(exception, errorComponent, globalMap);
	}

	public void tLogRow_15_error(Exception exception, String errorComponent,
			final java.util.Map<String, Object> globalMap) throws TalendException {

		end_Hash.put(errorComponent, System.currentTimeMillis());

		status = "failure";

		tDBInput_15_onSubJobError(exception, errorComponent, globalMap);
	}

	public void tDBRow_1_error(Exception exception, String errorComponent,
			final java.util.Map<String, Object> globalMap) throws TalendException {

		end_Hash.put(errorComponent, System.currentTimeMillis());

		tStatCatcher_1.addMessage("failure", errorComponent,
				end_Hash.get(errorComponent) - start_Hash.get(errorComponent));
		tStatCatcher_1Process(globalMap);

		status = "failure";

		tDBRow_1_onSubJobError(exception, errorComponent, globalMap);
	}

	public void tDBCommit_1_error(Exception exception, String errorComponent,
			final java.util.Map<String, Object> globalMap) throws TalendException {

		end_Hash.put(errorComponent, System.currentTimeMillis());

		status = "failure";

		tDBRow_1_onSubJobError(exception, errorComponent, globalMap);
	}

	public void tDBInput_2_error(Exception exception, String errorComponent,
			final java.util.Map<String, Object> globalMap) throws TalendException {

		end_Hash.put(errorComponent, System.currentTimeMillis());

		status = "failure";

		tDBInput_2_onSubJobError(exception, errorComponent, globalMap);
	}

	public void tLogRow_2_error(Exception exception, String errorComponent,
			final java.util.Map<String, Object> globalMap) throws TalendException {

		end_Hash.put(errorComponent, System.currentTimeMillis());

		status = "failure";

		tDBInput_2_onSubJobError(exception, errorComponent, globalMap);
	}

	public void tDBRow_11_error(Exception exception, String errorComponent,
			final java.util.Map<String, Object> globalMap) throws TalendException {

		end_Hash.put(errorComponent, System.currentTimeMillis());

		tStatCatcher_1.addMessage("failure", errorComponent,
				end_Hash.get(errorComponent) - start_Hash.get(errorComponent));
		tStatCatcher_1Process(globalMap);

		status = "failure";

		tDBRow_11_onSubJobError(exception, errorComponent, globalMap);
	}

	public void tDBCommit_11_error(Exception exception, String errorComponent,
			final java.util.Map<String, Object> globalMap) throws TalendException {

		end_Hash.put(errorComponent, System.currentTimeMillis());

		status = "failure";

		tDBRow_11_onSubJobError(exception, errorComponent, globalMap);
	}

	public void tLogRow_18_error(Exception exception, String errorComponent,
			final java.util.Map<String, Object> globalMap) throws TalendException {

		end_Hash.put(errorComponent, System.currentTimeMillis());

		status = "failure";

		tDBRow_11_onSubJobError(exception, errorComponent, globalMap);
	}

	public void tDBRow_17_error(Exception exception, String errorComponent,
			final java.util.Map<String, Object> globalMap) throws TalendException {

		end_Hash.put(errorComponent, System.currentTimeMillis());

		tStatCatcher_1.addMessage("failure", errorComponent,
				end_Hash.get(errorComponent) - start_Hash.get(errorComponent));
		tStatCatcher_1Process(globalMap);

		status = "failure";

		tDBRow_17_onSubJobError(exception, errorComponent, globalMap);
	}

	public void tDBCommit_17_error(Exception exception, String errorComponent,
			final java.util.Map<String, Object> globalMap) throws TalendException {

		end_Hash.put(errorComponent, System.currentTimeMillis());

		status = "failure";

		tDBRow_17_onSubJobError(exception, errorComponent, globalMap);
	}

	public void tLogRow_19_error(Exception exception, String errorComponent,
			final java.util.Map<String, Object> globalMap) throws TalendException {

		end_Hash.put(errorComponent, System.currentTimeMillis());

		status = "failure";

		tDBRow_17_onSubJobError(exception, errorComponent, globalMap);
	}

	public void tDBInput_3_error(Exception exception, String errorComponent,
			final java.util.Map<String, Object> globalMap) throws TalendException {

		end_Hash.put(errorComponent, System.currentTimeMillis());

		status = "failure";

		tDBInput_3_onSubJobError(exception, errorComponent, globalMap);
	}

	public void tLogRow_3_error(Exception exception, String errorComponent,
			final java.util.Map<String, Object> globalMap) throws TalendException {

		end_Hash.put(errorComponent, System.currentTimeMillis());

		status = "failure";

		tDBInput_3_onSubJobError(exception, errorComponent, globalMap);
	}

	public void tDBRow_3_error(Exception exception, String errorComponent,
			final java.util.Map<String, Object> globalMap) throws TalendException {

		end_Hash.put(errorComponent, System.currentTimeMillis());

		status = "failure";

		tDBRow_3_onSubJobError(exception, errorComponent, globalMap);
	}

	public void tDBCommit_3_error(Exception exception, String errorComponent,
			final java.util.Map<String, Object> globalMap) throws TalendException {

		end_Hash.put(errorComponent, System.currentTimeMillis());

		status = "failure";

		tDBRow_3_onSubJobError(exception, errorComponent, globalMap);
	}

	public void tDBInput_4_error(Exception exception, String errorComponent,
			final java.util.Map<String, Object> globalMap) throws TalendException {

		end_Hash.put(errorComponent, System.currentTimeMillis());

		status = "failure";

		tDBInput_4_onSubJobError(exception, errorComponent, globalMap);
	}

	public void tLogRow_4_error(Exception exception, String errorComponent,
			final java.util.Map<String, Object> globalMap) throws TalendException {

		end_Hash.put(errorComponent, System.currentTimeMillis());

		status = "failure";

		tDBInput_4_onSubJobError(exception, errorComponent, globalMap);
	}

	public void tDBRow_2_error(Exception exception, String errorComponent,
			final java.util.Map<String, Object> globalMap) throws TalendException {

		end_Hash.put(errorComponent, System.currentTimeMillis());

		tStatCatcher_1.addMessage("failure", errorComponent,
				end_Hash.get(errorComponent) - start_Hash.get(errorComponent));
		tStatCatcher_1Process(globalMap);

		status = "failure";

		tDBRow_2_onSubJobError(exception, errorComponent, globalMap);
	}

	public void tDBCommit_2_error(Exception exception, String errorComponent,
			final java.util.Map<String, Object> globalMap) throws TalendException {

		end_Hash.put(errorComponent, System.currentTimeMillis());

		status = "failure";

		tDBRow_2_onSubJobError(exception, errorComponent, globalMap);
	}

	public void tLogRow_20_error(Exception exception, String errorComponent,
			final java.util.Map<String, Object> globalMap) throws TalendException {

		end_Hash.put(errorComponent, System.currentTimeMillis());

		status = "failure";

		tDBRow_2_onSubJobError(exception, errorComponent, globalMap);
	}

	public void tDBRow_18_error(Exception exception, String errorComponent,
			final java.util.Map<String, Object> globalMap) throws TalendException {

		end_Hash.put(errorComponent, System.currentTimeMillis());

		tStatCatcher_1.addMessage("failure", errorComponent,
				end_Hash.get(errorComponent) - start_Hash.get(errorComponent));
		tStatCatcher_1Process(globalMap);

		status = "failure";

		tDBRow_18_onSubJobError(exception, errorComponent, globalMap);
	}

	public void tDBCommit_18_error(Exception exception, String errorComponent,
			final java.util.Map<String, Object> globalMap) throws TalendException {

		end_Hash.put(errorComponent, System.currentTimeMillis());

		status = "failure";

		tDBRow_18_onSubJobError(exception, errorComponent, globalMap);
	}

	public void tLogRow_21_error(Exception exception, String errorComponent,
			final java.util.Map<String, Object> globalMap) throws TalendException {

		end_Hash.put(errorComponent, System.currentTimeMillis());

		status = "failure";

		tDBRow_18_onSubJobError(exception, errorComponent, globalMap);
	}

	public void tDBRow_19_error(Exception exception, String errorComponent,
			final java.util.Map<String, Object> globalMap) throws TalendException {

		end_Hash.put(errorComponent, System.currentTimeMillis());

		tStatCatcher_1.addMessage("failure", errorComponent,
				end_Hash.get(errorComponent) - start_Hash.get(errorComponent));
		tStatCatcher_1Process(globalMap);

		status = "failure";

		tDBRow_19_onSubJobError(exception, errorComponent, globalMap);
	}

	public void tDBCommit_19_error(Exception exception, String errorComponent,
			final java.util.Map<String, Object> globalMap) throws TalendException {

		end_Hash.put(errorComponent, System.currentTimeMillis());

		status = "failure";

		tDBRow_19_onSubJobError(exception, errorComponent, globalMap);
	}

	public void tLogRow_23_error(Exception exception, String errorComponent,
			final java.util.Map<String, Object> globalMap) throws TalendException {

		end_Hash.put(errorComponent, System.currentTimeMillis());

		status = "failure";

		tDBRow_19_onSubJobError(exception, errorComponent, globalMap);
	}

	public void tDBRow_20_error(Exception exception, String errorComponent,
			final java.util.Map<String, Object> globalMap) throws TalendException {

		end_Hash.put(errorComponent, System.currentTimeMillis());

		tStatCatcher_1.addMessage("failure", errorComponent,
				end_Hash.get(errorComponent) - start_Hash.get(errorComponent));
		tStatCatcher_1Process(globalMap);

		status = "failure";

		tDBRow_20_onSubJobError(exception, errorComponent, globalMap);
	}

	public void tDBCommit_20_error(Exception exception, String errorComponent,
			final java.util.Map<String, Object> globalMap) throws TalendException {

		end_Hash.put(errorComponent, System.currentTimeMillis());

		status = "failure";

		tDBRow_20_onSubJobError(exception, errorComponent, globalMap);
	}

	public void tLogRow_24_error(Exception exception, String errorComponent,
			final java.util.Map<String, Object> globalMap) throws TalendException {

		end_Hash.put(errorComponent, System.currentTimeMillis());

		status = "failure";

		tDBRow_20_onSubJobError(exception, errorComponent, globalMap);
	}

	public void tDBRow_21_error(Exception exception, String errorComponent,
			final java.util.Map<String, Object> globalMap) throws TalendException {

		end_Hash.put(errorComponent, System.currentTimeMillis());

		tStatCatcher_1.addMessage("failure", errorComponent,
				end_Hash.get(errorComponent) - start_Hash.get(errorComponent));
		tStatCatcher_1Process(globalMap);

		status = "failure";

		tDBRow_21_onSubJobError(exception, errorComponent, globalMap);
	}

	public void tDBCommit_21_error(Exception exception, String errorComponent,
			final java.util.Map<String, Object> globalMap) throws TalendException {

		end_Hash.put(errorComponent, System.currentTimeMillis());

		status = "failure";

		tDBRow_21_onSubJobError(exception, errorComponent, globalMap);
	}

	public void tLogRow_25_error(Exception exception, String errorComponent,
			final java.util.Map<String, Object> globalMap) throws TalendException {

		end_Hash.put(errorComponent, System.currentTimeMillis());

		status = "failure";

		tDBRow_21_onSubJobError(exception, errorComponent, globalMap);
	}

	public void tDBInput_5_error(Exception exception, String errorComponent,
			final java.util.Map<String, Object> globalMap) throws TalendException {

		end_Hash.put(errorComponent, System.currentTimeMillis());

		status = "failure";

		tDBInput_5_onSubJobError(exception, errorComponent, globalMap);
	}

	public void tLogRow_5_error(Exception exception, String errorComponent,
			final java.util.Map<String, Object> globalMap) throws TalendException {

		end_Hash.put(errorComponent, System.currentTimeMillis());

		status = "failure";

		tDBInput_5_onSubJobError(exception, errorComponent, globalMap);
	}

	public void tDBRow_5_error(Exception exception, String errorComponent,
			final java.util.Map<String, Object> globalMap) throws TalendException {

		end_Hash.put(errorComponent, System.currentTimeMillis());

		status = "failure";

		tDBRow_5_onSubJobError(exception, errorComponent, globalMap);
	}

	public void tDBCommit_5_error(Exception exception, String errorComponent,
			final java.util.Map<String, Object> globalMap) throws TalendException {

		end_Hash.put(errorComponent, System.currentTimeMillis());

		status = "failure";

		tDBRow_5_onSubJobError(exception, errorComponent, globalMap);
	}

	public void tDBInput_6_error(Exception exception, String errorComponent,
			final java.util.Map<String, Object> globalMap) throws TalendException {

		end_Hash.put(errorComponent, System.currentTimeMillis());

		status = "failure";

		tDBInput_6_onSubJobError(exception, errorComponent, globalMap);
	}

	public void tLogRow_6_error(Exception exception, String errorComponent,
			final java.util.Map<String, Object> globalMap) throws TalendException {

		end_Hash.put(errorComponent, System.currentTimeMillis());

		status = "failure";

		tDBInput_6_onSubJobError(exception, errorComponent, globalMap);
	}

	public void tDBRow_4_error(Exception exception, String errorComponent,
			final java.util.Map<String, Object> globalMap) throws TalendException {

		end_Hash.put(errorComponent, System.currentTimeMillis());

		tStatCatcher_1.addMessage("failure", errorComponent,
				end_Hash.get(errorComponent) - start_Hash.get(errorComponent));
		tStatCatcher_1Process(globalMap);

		status = "failure";

		tDBRow_4_onSubJobError(exception, errorComponent, globalMap);
	}

	public void tDBCommit_4_error(Exception exception, String errorComponent,
			final java.util.Map<String, Object> globalMap) throws TalendException {

		end_Hash.put(errorComponent, System.currentTimeMillis());

		status = "failure";

		tDBRow_4_onSubJobError(exception, errorComponent, globalMap);
	}

	public void tLogRow_26_error(Exception exception, String errorComponent,
			final java.util.Map<String, Object> globalMap) throws TalendException {

		end_Hash.put(errorComponent, System.currentTimeMillis());

		status = "failure";

		tDBRow_4_onSubJobError(exception, errorComponent, globalMap);
	}

	public void tDBRow_22_error(Exception exception, String errorComponent,
			final java.util.Map<String, Object> globalMap) throws TalendException {

		end_Hash.put(errorComponent, System.currentTimeMillis());

		tStatCatcher_1.addMessage("failure", errorComponent,
				end_Hash.get(errorComponent) - start_Hash.get(errorComponent));
		tStatCatcher_1Process(globalMap);

		status = "failure";

		tDBRow_22_onSubJobError(exception, errorComponent, globalMap);
	}

	public void tDBCommit_22_error(Exception exception, String errorComponent,
			final java.util.Map<String, Object> globalMap) throws TalendException {

		end_Hash.put(errorComponent, System.currentTimeMillis());

		status = "failure";

		tDBRow_22_onSubJobError(exception, errorComponent, globalMap);
	}

	public void tLogRow_27_error(Exception exception, String errorComponent,
			final java.util.Map<String, Object> globalMap) throws TalendException {

		end_Hash.put(errorComponent, System.currentTimeMillis());

		status = "failure";

		tDBRow_22_onSubJobError(exception, errorComponent, globalMap);
	}

	public void tDBRow_23_error(Exception exception, String errorComponent,
			final java.util.Map<String, Object> globalMap) throws TalendException {

		end_Hash.put(errorComponent, System.currentTimeMillis());

		tStatCatcher_1.addMessage("failure", errorComponent,
				end_Hash.get(errorComponent) - start_Hash.get(errorComponent));
		tStatCatcher_1Process(globalMap);

		status = "failure";

		tDBRow_23_onSubJobError(exception, errorComponent, globalMap);
	}

	public void tDBCommit_23_error(Exception exception, String errorComponent,
			final java.util.Map<String, Object> globalMap) throws TalendException {

		end_Hash.put(errorComponent, System.currentTimeMillis());

		status = "failure";

		tDBRow_23_onSubJobError(exception, errorComponent, globalMap);
	}

	public void tLogRow_28_error(Exception exception, String errorComponent,
			final java.util.Map<String, Object> globalMap) throws TalendException {

		end_Hash.put(errorComponent, System.currentTimeMillis());

		status = "failure";

		tDBRow_23_onSubJobError(exception, errorComponent, globalMap);
	}

	public void tDBRow_24_error(Exception exception, String errorComponent,
			final java.util.Map<String, Object> globalMap) throws TalendException {

		end_Hash.put(errorComponent, System.currentTimeMillis());

		tStatCatcher_1.addMessage("failure", errorComponent,
				end_Hash.get(errorComponent) - start_Hash.get(errorComponent));
		tStatCatcher_1Process(globalMap);

		status = "failure";

		tDBRow_24_onSubJobError(exception, errorComponent, globalMap);
	}

	public void tDBCommit_24_error(Exception exception, String errorComponent,
			final java.util.Map<String, Object> globalMap) throws TalendException {

		end_Hash.put(errorComponent, System.currentTimeMillis());

		status = "failure";

		tDBRow_24_onSubJobError(exception, errorComponent, globalMap);
	}

	public void tLogRow_29_error(Exception exception, String errorComponent,
			final java.util.Map<String, Object> globalMap) throws TalendException {

		end_Hash.put(errorComponent, System.currentTimeMillis());

		status = "failure";

		tDBRow_24_onSubJobError(exception, errorComponent, globalMap);
	}

	public void tDBInput_7_error(Exception exception, String errorComponent,
			final java.util.Map<String, Object> globalMap) throws TalendException {

		end_Hash.put(errorComponent, System.currentTimeMillis());

		status = "failure";

		tDBInput_7_onSubJobError(exception, errorComponent, globalMap);
	}

	public void tLogRow_7_error(Exception exception, String errorComponent,
			final java.util.Map<String, Object> globalMap) throws TalendException {

		end_Hash.put(errorComponent, System.currentTimeMillis());

		status = "failure";

		tDBInput_7_onSubJobError(exception, errorComponent, globalMap);
	}

	public void tDBRow_6_error(Exception exception, String errorComponent,
			final java.util.Map<String, Object> globalMap) throws TalendException {

		end_Hash.put(errorComponent, System.currentTimeMillis());

		tStatCatcher_1.addMessage("failure", errorComponent,
				end_Hash.get(errorComponent) - start_Hash.get(errorComponent));
		tStatCatcher_1Process(globalMap);

		status = "failure";

		tDBRow_6_onSubJobError(exception, errorComponent, globalMap);
	}

	public void tDBCommit_6_error(Exception exception, String errorComponent,
			final java.util.Map<String, Object> globalMap) throws TalendException {

		end_Hash.put(errorComponent, System.currentTimeMillis());

		status = "failure";

		tDBRow_6_onSubJobError(exception, errorComponent, globalMap);
	}

	public void tLogRow_30_error(Exception exception, String errorComponent,
			final java.util.Map<String, Object> globalMap) throws TalendException {

		end_Hash.put(errorComponent, System.currentTimeMillis());

		status = "failure";

		tDBRow_6_onSubJobError(exception, errorComponent, globalMap);
	}

	public void tDBInput_8_error(Exception exception, String errorComponent,
			final java.util.Map<String, Object> globalMap) throws TalendException {

		end_Hash.put(errorComponent, System.currentTimeMillis());

		status = "failure";

		tDBInput_8_onSubJobError(exception, errorComponent, globalMap);
	}

	public void tLogRow_8_error(Exception exception, String errorComponent,
			final java.util.Map<String, Object> globalMap) throws TalendException {

		end_Hash.put(errorComponent, System.currentTimeMillis());

		status = "failure";

		tDBInput_8_onSubJobError(exception, errorComponent, globalMap);
	}

	public void tDBRow_25_error(Exception exception, String errorComponent,
			final java.util.Map<String, Object> globalMap) throws TalendException {

		end_Hash.put(errorComponent, System.currentTimeMillis());

		tStatCatcher_1.addMessage("failure", errorComponent,
				end_Hash.get(errorComponent) - start_Hash.get(errorComponent));
		tStatCatcher_1Process(globalMap);

		status = "failure";

		tDBRow_25_onSubJobError(exception, errorComponent, globalMap);
	}

	public void tDBCommit_25_error(Exception exception, String errorComponent,
			final java.util.Map<String, Object> globalMap) throws TalendException {

		end_Hash.put(errorComponent, System.currentTimeMillis());

		status = "failure";

		tDBRow_25_onSubJobError(exception, errorComponent, globalMap);
	}

	public void tLogRow_31_error(Exception exception, String errorComponent,
			final java.util.Map<String, Object> globalMap) throws TalendException {

		end_Hash.put(errorComponent, System.currentTimeMillis());

		status = "failure";

		tDBRow_25_onSubJobError(exception, errorComponent, globalMap);
	}

	public void tDBRow_8_error(Exception exception, String errorComponent,
			final java.util.Map<String, Object> globalMap) throws TalendException {

		end_Hash.put(errorComponent, System.currentTimeMillis());

		tStatCatcher_1.addMessage("failure", errorComponent,
				end_Hash.get(errorComponent) - start_Hash.get(errorComponent));
		tStatCatcher_1Process(globalMap);

		status = "failure";

		tDBRow_8_onSubJobError(exception, errorComponent, globalMap);
	}

	public void tDBCommit_7_error(Exception exception, String errorComponent,
			final java.util.Map<String, Object> globalMap) throws TalendException {

		end_Hash.put(errorComponent, System.currentTimeMillis());

		status = "failure";

		tDBRow_8_onSubJobError(exception, errorComponent, globalMap);
	}

	public void tLogRow_32_error(Exception exception, String errorComponent,
			final java.util.Map<String, Object> globalMap) throws TalendException {

		end_Hash.put(errorComponent, System.currentTimeMillis());

		status = "failure";

		tDBRow_8_onSubJobError(exception, errorComponent, globalMap);
	}

	public void tDBRow_26_error(Exception exception, String errorComponent,
			final java.util.Map<String, Object> globalMap) throws TalendException {

		end_Hash.put(errorComponent, System.currentTimeMillis());

		tStatCatcher_1.addMessage("failure", errorComponent,
				end_Hash.get(errorComponent) - start_Hash.get(errorComponent));
		tStatCatcher_1Process(globalMap);

		status = "failure";

		tDBRow_26_onSubJobError(exception, errorComponent, globalMap);
	}

	public void tDBCommit_26_error(Exception exception, String errorComponent,
			final java.util.Map<String, Object> globalMap) throws TalendException {

		end_Hash.put(errorComponent, System.currentTimeMillis());

		status = "failure";

		tDBRow_26_onSubJobError(exception, errorComponent, globalMap);
	}

	public void tLogRow_33_error(Exception exception, String errorComponent,
			final java.util.Map<String, Object> globalMap) throws TalendException {

		end_Hash.put(errorComponent, System.currentTimeMillis());

		status = "failure";

		tDBRow_26_onSubJobError(exception, errorComponent, globalMap);
	}

	public void tDBRow_27_error(Exception exception, String errorComponent,
			final java.util.Map<String, Object> globalMap) throws TalendException {

		end_Hash.put(errorComponent, System.currentTimeMillis());

		tStatCatcher_1.addMessage("failure", errorComponent,
				end_Hash.get(errorComponent) - start_Hash.get(errorComponent));
		tStatCatcher_1Process(globalMap);

		status = "failure";

		tDBRow_27_onSubJobError(exception, errorComponent, globalMap);
	}

	public void tDBCommit_27_error(Exception exception, String errorComponent,
			final java.util.Map<String, Object> globalMap) throws TalendException {

		end_Hash.put(errorComponent, System.currentTimeMillis());

		status = "failure";

		tDBRow_27_onSubJobError(exception, errorComponent, globalMap);
	}

	public void tLogRow_34_error(Exception exception, String errorComponent,
			final java.util.Map<String, Object> globalMap) throws TalendException {

		end_Hash.put(errorComponent, System.currentTimeMillis());

		status = "failure";

		tDBRow_27_onSubJobError(exception, errorComponent, globalMap);
	}

	public void tDBRow_28_error(Exception exception, String errorComponent,
			final java.util.Map<String, Object> globalMap) throws TalendException {

		end_Hash.put(errorComponent, System.currentTimeMillis());

		tStatCatcher_1.addMessage("failure", errorComponent,
				end_Hash.get(errorComponent) - start_Hash.get(errorComponent));
		tStatCatcher_1Process(globalMap);

		status = "failure";

		tDBRow_28_onSubJobError(exception, errorComponent, globalMap);
	}

	public void tDBCommit_28_error(Exception exception, String errorComponent,
			final java.util.Map<String, Object> globalMap) throws TalendException {

		end_Hash.put(errorComponent, System.currentTimeMillis());

		status = "failure";

		tDBRow_28_onSubJobError(exception, errorComponent, globalMap);
	}

	public void tLogRow_35_error(Exception exception, String errorComponent,
			final java.util.Map<String, Object> globalMap) throws TalendException {

		end_Hash.put(errorComponent, System.currentTimeMillis());

		status = "failure";

		tDBRow_28_onSubJobError(exception, errorComponent, globalMap);
	}

	public void tDBRow_29_error(Exception exception, String errorComponent,
			final java.util.Map<String, Object> globalMap) throws TalendException {

		end_Hash.put(errorComponent, System.currentTimeMillis());

		tStatCatcher_1.addMessage("failure", errorComponent,
				end_Hash.get(errorComponent) - start_Hash.get(errorComponent));
		tStatCatcher_1Process(globalMap);

		status = "failure";

		tDBRow_29_onSubJobError(exception, errorComponent, globalMap);
	}

	public void tDBCommit_29_error(Exception exception, String errorComponent,
			final java.util.Map<String, Object> globalMap) throws TalendException {

		end_Hash.put(errorComponent, System.currentTimeMillis());

		status = "failure";

		tDBRow_29_onSubJobError(exception, errorComponent, globalMap);
	}

	public void tLogRow_36_error(Exception exception, String errorComponent,
			final java.util.Map<String, Object> globalMap) throws TalendException {

		end_Hash.put(errorComponent, System.currentTimeMillis());

		status = "failure";

		tDBRow_29_onSubJobError(exception, errorComponent, globalMap);
	}

	public void tDBRow_30_error(Exception exception, String errorComponent,
			final java.util.Map<String, Object> globalMap) throws TalendException {

		end_Hash.put(errorComponent, System.currentTimeMillis());

		tStatCatcher_1.addMessage("failure", errorComponent,
				end_Hash.get(errorComponent) - start_Hash.get(errorComponent));
		tStatCatcher_1Process(globalMap);

		status = "failure";

		tDBRow_30_onSubJobError(exception, errorComponent, globalMap);
	}

	public void tDBCommit_30_error(Exception exception, String errorComponent,
			final java.util.Map<String, Object> globalMap) throws TalendException {

		end_Hash.put(errorComponent, System.currentTimeMillis());

		status = "failure";

		tDBRow_30_onSubJobError(exception, errorComponent, globalMap);
	}

	public void tLogRow_37_error(Exception exception, String errorComponent,
			final java.util.Map<String, Object> globalMap) throws TalendException {

		end_Hash.put(errorComponent, System.currentTimeMillis());

		status = "failure";

		tDBRow_30_onSubJobError(exception, errorComponent, globalMap);
	}

	public void tDBRow_31_error(Exception exception, String errorComponent,
			final java.util.Map<String, Object> globalMap) throws TalendException {

		end_Hash.put(errorComponent, System.currentTimeMillis());

		tStatCatcher_1.addMessage("failure", errorComponent,
				end_Hash.get(errorComponent) - start_Hash.get(errorComponent));
		tStatCatcher_1Process(globalMap);

		status = "failure";

		tDBRow_31_onSubJobError(exception, errorComponent, globalMap);
	}

	public void tDBCommit_31_error(Exception exception, String errorComponent,
			final java.util.Map<String, Object> globalMap) throws TalendException {

		end_Hash.put(errorComponent, System.currentTimeMillis());

		status = "failure";

		tDBRow_31_onSubJobError(exception, errorComponent, globalMap);
	}

	public void tLogRow_38_error(Exception exception, String errorComponent,
			final java.util.Map<String, Object> globalMap) throws TalendException {

		end_Hash.put(errorComponent, System.currentTimeMillis());

		status = "failure";

		tDBRow_31_onSubJobError(exception, errorComponent, globalMap);
	}

	public void tDBRow_32_error(Exception exception, String errorComponent,
			final java.util.Map<String, Object> globalMap) throws TalendException {

		end_Hash.put(errorComponent, System.currentTimeMillis());

		tStatCatcher_1.addMessage("failure", errorComponent,
				end_Hash.get(errorComponent) - start_Hash.get(errorComponent));
		tStatCatcher_1Process(globalMap);

		status = "failure";

		tDBRow_32_onSubJobError(exception, errorComponent, globalMap);
	}

	public void tDBCommit_32_error(Exception exception, String errorComponent,
			final java.util.Map<String, Object> globalMap) throws TalendException {

		end_Hash.put(errorComponent, System.currentTimeMillis());

		status = "failure";

		tDBRow_32_onSubJobError(exception, errorComponent, globalMap);
	}

	public void tLogRow_39_error(Exception exception, String errorComponent,
			final java.util.Map<String, Object> globalMap) throws TalendException {

		end_Hash.put(errorComponent, System.currentTimeMillis());

		status = "failure";

		tDBRow_32_onSubJobError(exception, errorComponent, globalMap);
	}

	public void tDBInput_9_error(Exception exception, String errorComponent,
			final java.util.Map<String, Object> globalMap) throws TalendException {

		end_Hash.put(errorComponent, System.currentTimeMillis());

		status = "failure";

		tDBInput_9_onSubJobError(exception, errorComponent, globalMap);
	}

	public void tLogRow_9_error(Exception exception, String errorComponent,
			final java.util.Map<String, Object> globalMap) throws TalendException {

		end_Hash.put(errorComponent, System.currentTimeMillis());

		status = "failure";

		tDBInput_9_onSubJobError(exception, errorComponent, globalMap);
	}

	public void tDBRow_33_error(Exception exception, String errorComponent,
			final java.util.Map<String, Object> globalMap) throws TalendException {

		end_Hash.put(errorComponent, System.currentTimeMillis());

		tStatCatcher_1.addMessage("failure", errorComponent,
				end_Hash.get(errorComponent) - start_Hash.get(errorComponent));
		tStatCatcher_1Process(globalMap);

		status = "failure";

		tDBRow_33_onSubJobError(exception, errorComponent, globalMap);
	}

	public void tDBCommit_33_error(Exception exception, String errorComponent,
			final java.util.Map<String, Object> globalMap) throws TalendException {

		end_Hash.put(errorComponent, System.currentTimeMillis());

		status = "failure";

		tDBRow_33_onSubJobError(exception, errorComponent, globalMap);
	}

	public void tLogRow_40_error(Exception exception, String errorComponent,
			final java.util.Map<String, Object> globalMap) throws TalendException {

		end_Hash.put(errorComponent, System.currentTimeMillis());

		status = "failure";

		tDBRow_33_onSubJobError(exception, errorComponent, globalMap);
	}

	public void tDBRow_9_error(Exception exception, String errorComponent,
			final java.util.Map<String, Object> globalMap) throws TalendException {

		end_Hash.put(errorComponent, System.currentTimeMillis());

		tStatCatcher_1.addMessage("failure", errorComponent,
				end_Hash.get(errorComponent) - start_Hash.get(errorComponent));
		tStatCatcher_1Process(globalMap);

		status = "failure";

		tDBRow_9_onSubJobError(exception, errorComponent, globalMap);
	}

	public void tDBCommit_9_error(Exception exception, String errorComponent,
			final java.util.Map<String, Object> globalMap) throws TalendException {

		end_Hash.put(errorComponent, System.currentTimeMillis());

		status = "failure";

		tDBRow_9_onSubJobError(exception, errorComponent, globalMap);
	}

	public void tLogRow_41_error(Exception exception, String errorComponent,
			final java.util.Map<String, Object> globalMap) throws TalendException {

		end_Hash.put(errorComponent, System.currentTimeMillis());

		status = "failure";

		tDBRow_9_onSubJobError(exception, errorComponent, globalMap);
	}

	public void tDBRow_34_error(Exception exception, String errorComponent,
			final java.util.Map<String, Object> globalMap) throws TalendException {

		end_Hash.put(errorComponent, System.currentTimeMillis());

		tStatCatcher_1.addMessage("failure", errorComponent,
				end_Hash.get(errorComponent) - start_Hash.get(errorComponent));
		tStatCatcher_1Process(globalMap);

		status = "failure";

		tDBRow_34_onSubJobError(exception, errorComponent, globalMap);
	}

	public void tDBCommit_34_error(Exception exception, String errorComponent,
			final java.util.Map<String, Object> globalMap) throws TalendException {

		end_Hash.put(errorComponent, System.currentTimeMillis());

		status = "failure";

		tDBRow_34_onSubJobError(exception, errorComponent, globalMap);
	}

	public void tLogRow_42_error(Exception exception, String errorComponent,
			final java.util.Map<String, Object> globalMap) throws TalendException {

		end_Hash.put(errorComponent, System.currentTimeMillis());

		status = "failure";

		tDBRow_34_onSubJobError(exception, errorComponent, globalMap);
	}

	public void tDBRow_35_error(Exception exception, String errorComponent,
			final java.util.Map<String, Object> globalMap) throws TalendException {

		end_Hash.put(errorComponent, System.currentTimeMillis());

		tStatCatcher_1.addMessage("failure", errorComponent,
				end_Hash.get(errorComponent) - start_Hash.get(errorComponent));
		tStatCatcher_1Process(globalMap);

		status = "failure";

		tDBRow_35_onSubJobError(exception, errorComponent, globalMap);
	}

	public void tDBCommit_35_error(Exception exception, String errorComponent,
			final java.util.Map<String, Object> globalMap) throws TalendException {

		end_Hash.put(errorComponent, System.currentTimeMillis());

		status = "failure";

		tDBRow_35_onSubJobError(exception, errorComponent, globalMap);
	}

	public void tLogRow_43_error(Exception exception, String errorComponent,
			final java.util.Map<String, Object> globalMap) throws TalendException {

		end_Hash.put(errorComponent, System.currentTimeMillis());

		status = "failure";

		tDBRow_35_onSubJobError(exception, errorComponent, globalMap);
	}

	public void tDBRow_36_error(Exception exception, String errorComponent,
			final java.util.Map<String, Object> globalMap) throws TalendException {

		end_Hash.put(errorComponent, System.currentTimeMillis());

		tStatCatcher_1.addMessage("failure", errorComponent,
				end_Hash.get(errorComponent) - start_Hash.get(errorComponent));
		tStatCatcher_1Process(globalMap);

		status = "failure";

		tDBRow_36_onSubJobError(exception, errorComponent, globalMap);
	}

	public void tDBCommit_36_error(Exception exception, String errorComponent,
			final java.util.Map<String, Object> globalMap) throws TalendException {

		end_Hash.put(errorComponent, System.currentTimeMillis());

		status = "failure";

		tDBRow_36_onSubJobError(exception, errorComponent, globalMap);
	}

	public void tLogRow_44_error(Exception exception, String errorComponent,
			final java.util.Map<String, Object> globalMap) throws TalendException {

		end_Hash.put(errorComponent, System.currentTimeMillis());

		status = "failure";

		tDBRow_36_onSubJobError(exception, errorComponent, globalMap);
	}

	public void tDBRow_37_error(Exception exception, String errorComponent,
			final java.util.Map<String, Object> globalMap) throws TalendException {

		end_Hash.put(errorComponent, System.currentTimeMillis());

		tStatCatcher_1.addMessage("failure", errorComponent,
				end_Hash.get(errorComponent) - start_Hash.get(errorComponent));
		tStatCatcher_1Process(globalMap);

		status = "failure";

		tDBRow_37_onSubJobError(exception, errorComponent, globalMap);
	}

	public void tDBCommit_37_error(Exception exception, String errorComponent,
			final java.util.Map<String, Object> globalMap) throws TalendException {

		end_Hash.put(errorComponent, System.currentTimeMillis());

		status = "failure";

		tDBRow_37_onSubJobError(exception, errorComponent, globalMap);
	}

	public void tLogRow_45_error(Exception exception, String errorComponent,
			final java.util.Map<String, Object> globalMap) throws TalendException {

		end_Hash.put(errorComponent, System.currentTimeMillis());

		status = "failure";

		tDBRow_37_onSubJobError(exception, errorComponent, globalMap);
	}

	public void tDBRow_38_error(Exception exception, String errorComponent,
			final java.util.Map<String, Object> globalMap) throws TalendException {

		end_Hash.put(errorComponent, System.currentTimeMillis());

		tStatCatcher_1.addMessage("failure", errorComponent,
				end_Hash.get(errorComponent) - start_Hash.get(errorComponent));
		tStatCatcher_1Process(globalMap);

		status = "failure";

		tDBRow_38_onSubJobError(exception, errorComponent, globalMap);
	}

	public void tDBCommit_38_error(Exception exception, String errorComponent,
			final java.util.Map<String, Object> globalMap) throws TalendException {

		end_Hash.put(errorComponent, System.currentTimeMillis());

		status = "failure";

		tDBRow_38_onSubJobError(exception, errorComponent, globalMap);
	}

	public void tLogRow_46_error(Exception exception, String errorComponent,
			final java.util.Map<String, Object> globalMap) throws TalendException {

		end_Hash.put(errorComponent, System.currentTimeMillis());

		status = "failure";

		tDBRow_38_onSubJobError(exception, errorComponent, globalMap);
	}

	public void tDBRow_39_error(Exception exception, String errorComponent,
			final java.util.Map<String, Object> globalMap) throws TalendException {

		end_Hash.put(errorComponent, System.currentTimeMillis());

		status = "failure";

		tDBRow_39_onSubJobError(exception, errorComponent, globalMap);
	}

	public void tDBCommit_40_error(Exception exception, String errorComponent,
			final java.util.Map<String, Object> globalMap) throws TalendException {

		end_Hash.put(errorComponent, System.currentTimeMillis());

		status = "failure";

		tDBRow_39_onSubJobError(exception, errorComponent, globalMap);
	}

	public void tDBInput_10_error(Exception exception, String errorComponent,
			final java.util.Map<String, Object> globalMap) throws TalendException {

		end_Hash.put(errorComponent, System.currentTimeMillis());

		status = "failure";

		tDBInput_10_onSubJobError(exception, errorComponent, globalMap);
	}

	public void tLogRow_10_error(Exception exception, String errorComponent,
			final java.util.Map<String, Object> globalMap) throws TalendException {

		end_Hash.put(errorComponent, System.currentTimeMillis());

		status = "failure";

		tDBInput_10_onSubJobError(exception, errorComponent, globalMap);
	}

	public void tDBClose_1_error(Exception exception, String errorComponent,
			final java.util.Map<String, Object> globalMap) throws TalendException {

		end_Hash.put(errorComponent, System.currentTimeMillis());

		status = "failure";

		tDBClose_1_onSubJobError(exception, errorComponent, globalMap);
	}

	public void tStatCatcher_1_error(Exception exception, String errorComponent,
			final java.util.Map<String, Object> globalMap) throws TalendException {

		end_Hash.put(errorComponent, System.currentTimeMillis());

		status = "failure";

		tStatCatcher_1_onSubJobError(exception, errorComponent, globalMap);
	}

	public void tLogRow_16_error(Exception exception, String errorComponent,
			final java.util.Map<String, Object> globalMap) throws TalendException {

		end_Hash.put(errorComponent, System.currentTimeMillis());

		status = "failure";

		tStatCatcher_1_onSubJobError(exception, errorComponent, globalMap);
	}

	public void tMSSqlConnection_3_onSubJobError(Exception exception, String errorComponent,
			final java.util.Map<String, Object> globalMap) throws TalendException {

		resumeUtil.addLog("SYSTEM_LOG", "NODE:" + errorComponent, "", Thread.currentThread().getId() + "", "FATAL", "",
				exception.getMessage(), ResumeUtil.getExceptionStackTrace(exception), "");

	}

	public void tDBRow_10_onSubJobError(Exception exception, String errorComponent,
			final java.util.Map<String, Object> globalMap) throws TalendException {

		resumeUtil.addLog("SYSTEM_LOG", "NODE:" + errorComponent, "", Thread.currentThread().getId() + "", "FATAL", "",
				exception.getMessage(), ResumeUtil.getExceptionStackTrace(exception), "");

	}

	public void tDBRow_7_onSubJobError(Exception exception, String errorComponent,
			final java.util.Map<String, Object> globalMap) throws TalendException {

		resumeUtil.addLog("SYSTEM_LOG", "NODE:" + errorComponent, "", Thread.currentThread().getId() + "", "FATAL", "",
				exception.getMessage(), ResumeUtil.getExceptionStackTrace(exception), "");

	}

	public void tDBRow_12_onSubJobError(Exception exception, String errorComponent,
			final java.util.Map<String, Object> globalMap) throws TalendException {

		resumeUtil.addLog("SYSTEM_LOG", "NODE:" + errorComponent, "", Thread.currentThread().getId() + "", "FATAL", "",
				exception.getMessage(), ResumeUtil.getExceptionStackTrace(exception), "");

	}

	public void tDBRow_13_onSubJobError(Exception exception, String errorComponent,
			final java.util.Map<String, Object> globalMap) throws TalendException {

		resumeUtil.addLog("SYSTEM_LOG", "NODE:" + errorComponent, "", Thread.currentThread().getId() + "", "FATAL", "",
				exception.getMessage(), ResumeUtil.getExceptionStackTrace(exception), "");

	}

	public void tDBRow_14_onSubJobError(Exception exception, String errorComponent,
			final java.util.Map<String, Object> globalMap) throws TalendException {

		resumeUtil.addLog("SYSTEM_LOG", "NODE:" + errorComponent, "", Thread.currentThread().getId() + "", "FATAL", "",
				exception.getMessage(), ResumeUtil.getExceptionStackTrace(exception), "");

	}

	public void tDBRow_15_onSubJobError(Exception exception, String errorComponent,
			final java.util.Map<String, Object> globalMap) throws TalendException {

		resumeUtil.addLog("SYSTEM_LOG", "NODE:" + errorComponent, "", Thread.currentThread().getId() + "", "FATAL", "",
				exception.getMessage(), ResumeUtil.getExceptionStackTrace(exception), "");

	}

	public void tDBRow_16_onSubJobError(Exception exception, String errorComponent,
			final java.util.Map<String, Object> globalMap) throws TalendException {

		resumeUtil.addLog("SYSTEM_LOG", "NODE:" + errorComponent, "", Thread.currentThread().getId() + "", "FATAL", "",
				exception.getMessage(), ResumeUtil.getExceptionStackTrace(exception), "");

	}

	public void tDBInput_15_onSubJobError(Exception exception, String errorComponent,
			final java.util.Map<String, Object> globalMap) throws TalendException {

		resumeUtil.addLog("SYSTEM_LOG", "NODE:" + errorComponent, "", Thread.currentThread().getId() + "", "FATAL", "",
				exception.getMessage(), ResumeUtil.getExceptionStackTrace(exception), "");

	}

	public void tDBRow_1_onSubJobError(Exception exception, String errorComponent,
			final java.util.Map<String, Object> globalMap) throws TalendException {

		resumeUtil.addLog("SYSTEM_LOG", "NODE:" + errorComponent, "", Thread.currentThread().getId() + "", "FATAL", "",
				exception.getMessage(), ResumeUtil.getExceptionStackTrace(exception), "");

	}

	public void tDBInput_2_onSubJobError(Exception exception, String errorComponent,
			final java.util.Map<String, Object> globalMap) throws TalendException {

		resumeUtil.addLog("SYSTEM_LOG", "NODE:" + errorComponent, "", Thread.currentThread().getId() + "", "FATAL", "",
				exception.getMessage(), ResumeUtil.getExceptionStackTrace(exception), "");

	}

	public void tDBRow_11_onSubJobError(Exception exception, String errorComponent,
			final java.util.Map<String, Object> globalMap) throws TalendException {

		resumeUtil.addLog("SYSTEM_LOG", "NODE:" + errorComponent, "", Thread.currentThread().getId() + "", "FATAL", "",
				exception.getMessage(), ResumeUtil.getExceptionStackTrace(exception), "");

	}

	public void tDBRow_17_onSubJobError(Exception exception, String errorComponent,
			final java.util.Map<String, Object> globalMap) throws TalendException {

		resumeUtil.addLog("SYSTEM_LOG", "NODE:" + errorComponent, "", Thread.currentThread().getId() + "", "FATAL", "",
				exception.getMessage(), ResumeUtil.getExceptionStackTrace(exception), "");

	}

	public void tDBInput_3_onSubJobError(Exception exception, String errorComponent,
			final java.util.Map<String, Object> globalMap) throws TalendException {

		resumeUtil.addLog("SYSTEM_LOG", "NODE:" + errorComponent, "", Thread.currentThread().getId() + "", "FATAL", "",
				exception.getMessage(), ResumeUtil.getExceptionStackTrace(exception), "");

	}

	public void tDBRow_3_onSubJobError(Exception exception, String errorComponent,
			final java.util.Map<String, Object> globalMap) throws TalendException {

		resumeUtil.addLog("SYSTEM_LOG", "NODE:" + errorComponent, "", Thread.currentThread().getId() + "", "FATAL", "",
				exception.getMessage(), ResumeUtil.getExceptionStackTrace(exception), "");

	}

	public void tDBInput_4_onSubJobError(Exception exception, String errorComponent,
			final java.util.Map<String, Object> globalMap) throws TalendException {

		resumeUtil.addLog("SYSTEM_LOG", "NODE:" + errorComponent, "", Thread.currentThread().getId() + "", "FATAL", "",
				exception.getMessage(), ResumeUtil.getExceptionStackTrace(exception), "");

	}

	public void tDBRow_2_onSubJobError(Exception exception, String errorComponent,
			final java.util.Map<String, Object> globalMap) throws TalendException {

		resumeUtil.addLog("SYSTEM_LOG", "NODE:" + errorComponent, "", Thread.currentThread().getId() + "", "FATAL", "",
				exception.getMessage(), ResumeUtil.getExceptionStackTrace(exception), "");

	}

	public void tDBRow_18_onSubJobError(Exception exception, String errorComponent,
			final java.util.Map<String, Object> globalMap) throws TalendException {

		resumeUtil.addLog("SYSTEM_LOG", "NODE:" + errorComponent, "", Thread.currentThread().getId() + "", "FATAL", "",
				exception.getMessage(), ResumeUtil.getExceptionStackTrace(exception), "");

	}

	public void tDBRow_19_onSubJobError(Exception exception, String errorComponent,
			final java.util.Map<String, Object> globalMap) throws TalendException {

		resumeUtil.addLog("SYSTEM_LOG", "NODE:" + errorComponent, "", Thread.currentThread().getId() + "", "FATAL", "",
				exception.getMessage(), ResumeUtil.getExceptionStackTrace(exception), "");

	}

	public void tDBRow_20_onSubJobError(Exception exception, String errorComponent,
			final java.util.Map<String, Object> globalMap) throws TalendException {

		resumeUtil.addLog("SYSTEM_LOG", "NODE:" + errorComponent, "", Thread.currentThread().getId() + "", "FATAL", "",
				exception.getMessage(), ResumeUtil.getExceptionStackTrace(exception), "");

	}

	public void tDBRow_21_onSubJobError(Exception exception, String errorComponent,
			final java.util.Map<String, Object> globalMap) throws TalendException {

		resumeUtil.addLog("SYSTEM_LOG", "NODE:" + errorComponent, "", Thread.currentThread().getId() + "", "FATAL", "",
				exception.getMessage(), ResumeUtil.getExceptionStackTrace(exception), "");

	}

	public void tDBInput_5_onSubJobError(Exception exception, String errorComponent,
			final java.util.Map<String, Object> globalMap) throws TalendException {

		resumeUtil.addLog("SYSTEM_LOG", "NODE:" + errorComponent, "", Thread.currentThread().getId() + "", "FATAL", "",
				exception.getMessage(), ResumeUtil.getExceptionStackTrace(exception), "");

	}

	public void tDBRow_5_onSubJobError(Exception exception, String errorComponent,
			final java.util.Map<String, Object> globalMap) throws TalendException {

		resumeUtil.addLog("SYSTEM_LOG", "NODE:" + errorComponent, "", Thread.currentThread().getId() + "", "FATAL", "",
				exception.getMessage(), ResumeUtil.getExceptionStackTrace(exception), "");

	}

	public void tDBInput_6_onSubJobError(Exception exception, String errorComponent,
			final java.util.Map<String, Object> globalMap) throws TalendException {

		resumeUtil.addLog("SYSTEM_LOG", "NODE:" + errorComponent, "", Thread.currentThread().getId() + "", "FATAL", "",
				exception.getMessage(), ResumeUtil.getExceptionStackTrace(exception), "");

	}

	public void tDBRow_4_onSubJobError(Exception exception, String errorComponent,
			final java.util.Map<String, Object> globalMap) throws TalendException {

		resumeUtil.addLog("SYSTEM_LOG", "NODE:" + errorComponent, "", Thread.currentThread().getId() + "", "FATAL", "",
				exception.getMessage(), ResumeUtil.getExceptionStackTrace(exception), "");

	}

	public void tDBRow_22_onSubJobError(Exception exception, String errorComponent,
			final java.util.Map<String, Object> globalMap) throws TalendException {

		resumeUtil.addLog("SYSTEM_LOG", "NODE:" + errorComponent, "", Thread.currentThread().getId() + "", "FATAL", "",
				exception.getMessage(), ResumeUtil.getExceptionStackTrace(exception), "");

	}

	public void tDBRow_23_onSubJobError(Exception exception, String errorComponent,
			final java.util.Map<String, Object> globalMap) throws TalendException {

		resumeUtil.addLog("SYSTEM_LOG", "NODE:" + errorComponent, "", Thread.currentThread().getId() + "", "FATAL", "",
				exception.getMessage(), ResumeUtil.getExceptionStackTrace(exception), "");

	}

	public void tDBRow_24_onSubJobError(Exception exception, String errorComponent,
			final java.util.Map<String, Object> globalMap) throws TalendException {

		resumeUtil.addLog("SYSTEM_LOG", "NODE:" + errorComponent, "", Thread.currentThread().getId() + "", "FATAL", "",
				exception.getMessage(), ResumeUtil.getExceptionStackTrace(exception), "");

	}

	public void tDBInput_7_onSubJobError(Exception exception, String errorComponent,
			final java.util.Map<String, Object> globalMap) throws TalendException {

		resumeUtil.addLog("SYSTEM_LOG", "NODE:" + errorComponent, "", Thread.currentThread().getId() + "", "FATAL", "",
				exception.getMessage(), ResumeUtil.getExceptionStackTrace(exception), "");

	}

	public void tDBRow_6_onSubJobError(Exception exception, String errorComponent,
			final java.util.Map<String, Object> globalMap) throws TalendException {

		resumeUtil.addLog("SYSTEM_LOG", "NODE:" + errorComponent, "", Thread.currentThread().getId() + "", "FATAL", "",
				exception.getMessage(), ResumeUtil.getExceptionStackTrace(exception), "");

	}

	public void tDBInput_8_onSubJobError(Exception exception, String errorComponent,
			final java.util.Map<String, Object> globalMap) throws TalendException {

		resumeUtil.addLog("SYSTEM_LOG", "NODE:" + errorComponent, "", Thread.currentThread().getId() + "", "FATAL", "",
				exception.getMessage(), ResumeUtil.getExceptionStackTrace(exception), "");

	}

	public void tDBRow_25_onSubJobError(Exception exception, String errorComponent,
			final java.util.Map<String, Object> globalMap) throws TalendException {

		resumeUtil.addLog("SYSTEM_LOG", "NODE:" + errorComponent, "", Thread.currentThread().getId() + "", "FATAL", "",
				exception.getMessage(), ResumeUtil.getExceptionStackTrace(exception), "");

	}

	public void tDBRow_8_onSubJobError(Exception exception, String errorComponent,
			final java.util.Map<String, Object> globalMap) throws TalendException {

		resumeUtil.addLog("SYSTEM_LOG", "NODE:" + errorComponent, "", Thread.currentThread().getId() + "", "FATAL", "",
				exception.getMessage(), ResumeUtil.getExceptionStackTrace(exception), "");

	}

	public void tDBRow_26_onSubJobError(Exception exception, String errorComponent,
			final java.util.Map<String, Object> globalMap) throws TalendException {

		resumeUtil.addLog("SYSTEM_LOG", "NODE:" + errorComponent, "", Thread.currentThread().getId() + "", "FATAL", "",
				exception.getMessage(), ResumeUtil.getExceptionStackTrace(exception), "");

	}

	public void tDBRow_27_onSubJobError(Exception exception, String errorComponent,
			final java.util.Map<String, Object> globalMap) throws TalendException {

		resumeUtil.addLog("SYSTEM_LOG", "NODE:" + errorComponent, "", Thread.currentThread().getId() + "", "FATAL", "",
				exception.getMessage(), ResumeUtil.getExceptionStackTrace(exception), "");

	}

	public void tDBRow_28_onSubJobError(Exception exception, String errorComponent,
			final java.util.Map<String, Object> globalMap) throws TalendException {

		resumeUtil.addLog("SYSTEM_LOG", "NODE:" + errorComponent, "", Thread.currentThread().getId() + "", "FATAL", "",
				exception.getMessage(), ResumeUtil.getExceptionStackTrace(exception), "");

	}

	public void tDBRow_29_onSubJobError(Exception exception, String errorComponent,
			final java.util.Map<String, Object> globalMap) throws TalendException {

		resumeUtil.addLog("SYSTEM_LOG", "NODE:" + errorComponent, "", Thread.currentThread().getId() + "", "FATAL", "",
				exception.getMessage(), ResumeUtil.getExceptionStackTrace(exception), "");

	}

	public void tDBRow_30_onSubJobError(Exception exception, String errorComponent,
			final java.util.Map<String, Object> globalMap) throws TalendException {

		resumeUtil.addLog("SYSTEM_LOG", "NODE:" + errorComponent, "", Thread.currentThread().getId() + "", "FATAL", "",
				exception.getMessage(), ResumeUtil.getExceptionStackTrace(exception), "");

	}

	public void tDBRow_31_onSubJobError(Exception exception, String errorComponent,
			final java.util.Map<String, Object> globalMap) throws TalendException {

		resumeUtil.addLog("SYSTEM_LOG", "NODE:" + errorComponent, "", Thread.currentThread().getId() + "", "FATAL", "",
				exception.getMessage(), ResumeUtil.getExceptionStackTrace(exception), "");

	}

	public void tDBRow_32_onSubJobError(Exception exception, String errorComponent,
			final java.util.Map<String, Object> globalMap) throws TalendException {

		resumeUtil.addLog("SYSTEM_LOG", "NODE:" + errorComponent, "", Thread.currentThread().getId() + "", "FATAL", "",
				exception.getMessage(), ResumeUtil.getExceptionStackTrace(exception), "");

	}

	public void tDBInput_9_onSubJobError(Exception exception, String errorComponent,
			final java.util.Map<String, Object> globalMap) throws TalendException {

		resumeUtil.addLog("SYSTEM_LOG", "NODE:" + errorComponent, "", Thread.currentThread().getId() + "", "FATAL", "",
				exception.getMessage(), ResumeUtil.getExceptionStackTrace(exception), "");

	}

	public void tDBRow_33_onSubJobError(Exception exception, String errorComponent,
			final java.util.Map<String, Object> globalMap) throws TalendException {

		resumeUtil.addLog("SYSTEM_LOG", "NODE:" + errorComponent, "", Thread.currentThread().getId() + "", "FATAL", "",
				exception.getMessage(), ResumeUtil.getExceptionStackTrace(exception), "");

	}

	public void tDBRow_9_onSubJobError(Exception exception, String errorComponent,
			final java.util.Map<String, Object> globalMap) throws TalendException {

		resumeUtil.addLog("SYSTEM_LOG", "NODE:" + errorComponent, "", Thread.currentThread().getId() + "", "FATAL", "",
				exception.getMessage(), ResumeUtil.getExceptionStackTrace(exception), "");

	}

	public void tDBRow_34_onSubJobError(Exception exception, String errorComponent,
			final java.util.Map<String, Object> globalMap) throws TalendException {

		resumeUtil.addLog("SYSTEM_LOG", "NODE:" + errorComponent, "", Thread.currentThread().getId() + "", "FATAL", "",
				exception.getMessage(), ResumeUtil.getExceptionStackTrace(exception), "");

	}

	public void tDBRow_35_onSubJobError(Exception exception, String errorComponent,
			final java.util.Map<String, Object> globalMap) throws TalendException {

		resumeUtil.addLog("SYSTEM_LOG", "NODE:" + errorComponent, "", Thread.currentThread().getId() + "", "FATAL", "",
				exception.getMessage(), ResumeUtil.getExceptionStackTrace(exception), "");

	}

	public void tDBRow_36_onSubJobError(Exception exception, String errorComponent,
			final java.util.Map<String, Object> globalMap) throws TalendException {

		resumeUtil.addLog("SYSTEM_LOG", "NODE:" + errorComponent, "", Thread.currentThread().getId() + "", "FATAL", "",
				exception.getMessage(), ResumeUtil.getExceptionStackTrace(exception), "");

	}

	public void tDBRow_37_onSubJobError(Exception exception, String errorComponent,
			final java.util.Map<String, Object> globalMap) throws TalendException {

		resumeUtil.addLog("SYSTEM_LOG", "NODE:" + errorComponent, "", Thread.currentThread().getId() + "", "FATAL", "",
				exception.getMessage(), ResumeUtil.getExceptionStackTrace(exception), "");

	}

	public void tDBRow_38_onSubJobError(Exception exception, String errorComponent,
			final java.util.Map<String, Object> globalMap) throws TalendException {

		resumeUtil.addLog("SYSTEM_LOG", "NODE:" + errorComponent, "", Thread.currentThread().getId() + "", "FATAL", "",
				exception.getMessage(), ResumeUtil.getExceptionStackTrace(exception), "");

	}

	public void tDBRow_39_onSubJobError(Exception exception, String errorComponent,
			final java.util.Map<String, Object> globalMap) throws TalendException {

		resumeUtil.addLog("SYSTEM_LOG", "NODE:" + errorComponent, "", Thread.currentThread().getId() + "", "FATAL", "",
				exception.getMessage(), ResumeUtil.getExceptionStackTrace(exception), "");

	}

	public void tDBInput_10_onSubJobError(Exception exception, String errorComponent,
			final java.util.Map<String, Object> globalMap) throws TalendException {

		resumeUtil.addLog("SYSTEM_LOG", "NODE:" + errorComponent, "", Thread.currentThread().getId() + "", "FATAL", "",
				exception.getMessage(), ResumeUtil.getExceptionStackTrace(exception), "");

	}

	public void tDBClose_1_onSubJobError(Exception exception, String errorComponent,
			final java.util.Map<String, Object> globalMap) throws TalendException {

		resumeUtil.addLog("SYSTEM_LOG", "NODE:" + errorComponent, "", Thread.currentThread().getId() + "", "FATAL", "",
				exception.getMessage(), ResumeUtil.getExceptionStackTrace(exception), "");

	}

	public void tStatCatcher_1_onSubJobError(Exception exception, String errorComponent,
			final java.util.Map<String, Object> globalMap) throws TalendException {

		resumeUtil.addLog("SYSTEM_LOG", "NODE:" + errorComponent, "", Thread.currentThread().getId() + "", "FATAL", "",
				exception.getMessage(), ResumeUtil.getExceptionStackTrace(exception), "");

	}

	public void tMSSqlConnection_3Process(final java.util.Map<String, Object> globalMap) throws TalendException {
		globalMap.put("tMSSqlConnection_3_SUBPROCESS_STATE", 0);

		final boolean execStat = this.execStat;

		String iterateId = "";

		String currentComponent = "";
		java.util.Map<String, Object> resourceMap = new java.util.HashMap<String, Object>();

		try {
			// TDI-39566 avoid throwing an useless Exception
			boolean resumeIt = true;
			if (globalResumeTicket == false && resumeEntryMethodName != null) {
				String currentMethodName = new java.lang.Exception().getStackTrace()[0].getMethodName();
				resumeIt = resumeEntryMethodName.equals(currentMethodName);
			}
			if (resumeIt || globalResumeTicket) { // start the resume
				globalResumeTicket = true;

				/**
				 * [tMSSqlConnection_3 begin ] start
				 */

				ok_Hash.put("tMSSqlConnection_3", false);
				start_Hash.put("tMSSqlConnection_3", System.currentTimeMillis());

				currentComponent = "tMSSqlConnection_3";

				int tos_count_tMSSqlConnection_3 = 0;

				String url_tMSSqlConnection_3 = "jdbc:jtds:sqlserver://" + context.ipasHost;
				String port_tMSSqlConnection_3 = context.ipasPort;
				String dbname_tMSSqlConnection_3 = context.ipasDB;
				if (!"".equals(port_tMSSqlConnection_3)) {
					url_tMSSqlConnection_3 += ":" + context.ipasPort;
				}
				if (!"".equals(dbname_tMSSqlConnection_3)) {

					url_tMSSqlConnection_3 += "//" + context.ipasDB;
				}

				url_tMSSqlConnection_3 += ";appName=" + projectName + ";" + "allowMultiQueries=true";
				String dbUser_tMSSqlConnection_3 = context.ipasUser;

				final String decryptedPassword_tMSSqlConnection_3 = context.ipasPassword;
				String dbPwd_tMSSqlConnection_3 = decryptedPassword_tMSSqlConnection_3;

				java.sql.Connection conn_tMSSqlConnection_3 = null;

				String driverClass_tMSSqlConnection_3 = "net.sourceforge.jtds.jdbc.Driver";
				java.lang.Class jdbcclazz_tMSSqlConnection_3 = java.lang.Class.forName(driverClass_tMSSqlConnection_3);
				globalMap.put("driverClass_tMSSqlConnection_3", driverClass_tMSSqlConnection_3);

				conn_tMSSqlConnection_3 = java.sql.DriverManager.getConnection(url_tMSSqlConnection_3,
						dbUser_tMSSqlConnection_3, dbPwd_tMSSqlConnection_3);

				globalMap.put("conn_tMSSqlConnection_3", conn_tMSSqlConnection_3);
				if (null != conn_tMSSqlConnection_3) {

					conn_tMSSqlConnection_3.setAutoCommit(false);
				}

				globalMap.put("dbschema_tMSSqlConnection_3", "");

				globalMap.put("db_tMSSqlConnection_3", context.ipasDB);

				globalMap.put("shareIdentitySetting_tMSSqlConnection_3", false);

				globalMap.put("driver_tMSSqlConnection_3", "JTDS");

				/**
				 * [tMSSqlConnection_3 begin ] stop
				 */

				/**
				 * [tMSSqlConnection_3 main ] start
				 */

				currentComponent = "tMSSqlConnection_3";

				tos_count_tMSSqlConnection_3++;

				/**
				 * [tMSSqlConnection_3 main ] stop
				 */

				/**
				 * [tMSSqlConnection_3 process_data_begin ] start
				 */

				currentComponent = "tMSSqlConnection_3";

				/**
				 * [tMSSqlConnection_3 process_data_begin ] stop
				 */

				/**
				 * [tMSSqlConnection_3 process_data_end ] start
				 */

				currentComponent = "tMSSqlConnection_3";

				/**
				 * [tMSSqlConnection_3 process_data_end ] stop
				 */

				/**
				 * [tMSSqlConnection_3 end ] start
				 */

				currentComponent = "tMSSqlConnection_3";

				ok_Hash.put("tMSSqlConnection_3", true);
				end_Hash.put("tMSSqlConnection_3", System.currentTimeMillis());

				/**
				 * [tMSSqlConnection_3 end ] stop
				 */
			} // end the resume

			if (resumeEntryMethodName == null || globalResumeTicket) {
				resumeUtil.addLog("CHECKPOINT", "CONNECTION:SUBJOB_OK:tMSSqlConnection_3:OnSubjobOk", "",
						Thread.currentThread().getId() + "", "", "", "", "", "");
			}

			if (execStat) {
				runStat.updateStatOnConnection("OnSubjobOk53", 0, "ok");
			}

			tDBRow_10Process(globalMap);

		} catch (java.lang.Exception e) {

			TalendException te = new TalendException(e, currentComponent, globalMap);

			throw te;
		} catch (java.lang.Error error) {

			runStat.stopThreadStat();

			throw error;
		} finally {

			try {

				/**
				 * [tMSSqlConnection_3 finally ] start
				 */

				currentComponent = "tMSSqlConnection_3";

				/**
				 * [tMSSqlConnection_3 finally ] stop
				 */
			} catch (java.lang.Exception e) {
				// ignore
			} catch (java.lang.Error error) {
				// ignore
			}
			resourceMap = null;
		}

		globalMap.put("tMSSqlConnection_3_SUBPROCESS_STATE", 1);
	}

	public static class row20Struct implements routines.system.IPersistableRow<row20Struct> {
		final static byte[] commonByteArrayLock_WIPO_PROJECTS_G3b_Mig_UD = new byte[0];
		static byte[] commonByteArray_WIPO_PROJECTS_G3b_Mig_UD = new byte[0];

		public void readData(ObjectInputStream dis) {

			synchronized (commonByteArrayLock_WIPO_PROJECTS_G3b_Mig_UD) {

				try {

					int length = 0;

				}

				finally {
				}

			}

		}

		public void writeData(ObjectOutputStream dos) {
			try {

			}

			finally {
			}

		}

		public String toString() {

			StringBuilder sb = new StringBuilder();
			sb.append(super.toString());
			sb.append("[");
			sb.append("]");

			return sb.toString();
		}

		/**
		 * Compare keys
		 */
		public int compareTo(row20Struct other) {

			int returnValue = -1;

			return returnValue;
		}

		private int checkNullsAndCompare(Object object1, Object object2) {
			int returnValue = 0;
			if (object1 instanceof Comparable && object2 instanceof Comparable) {
				returnValue = ((Comparable) object1).compareTo(object2);
			} else if (object1 != null && object2 != null) {
				returnValue = compareStrings(object1.toString(), object2.toString());
			} else if (object1 == null && object2 != null) {
				returnValue = 1;
			} else if (object1 != null && object2 == null) {
				returnValue = -1;
			} else {
				returnValue = 0;
			}

			return returnValue;
		}

		private int compareStrings(String string1, String string2) {
			return string1.compareTo(string2);
		}

	}

	public static class row84Struct implements routines.system.IPersistableRow<row84Struct> {
		final static byte[] commonByteArrayLock_WIPO_PROJECTS_G3b_Mig_UD = new byte[0];
		static byte[] commonByteArray_WIPO_PROJECTS_G3b_Mig_UD = new byte[0];

		public String errorCode;

		public String getErrorCode() {
			return this.errorCode;
		}

		public String errorMessage;

		public String getErrorMessage() {
			return this.errorMessage;
		}

		private String readString(ObjectInputStream dis) throws IOException {
			String strReturn = null;
			int length = 0;
			length = dis.readInt();
			if (length == -1) {
				strReturn = null;
			} else {
				if (length > commonByteArray_WIPO_PROJECTS_G3b_Mig_UD.length) {
					if (length < 1024 && commonByteArray_WIPO_PROJECTS_G3b_Mig_UD.length == 0) {
						commonByteArray_WIPO_PROJECTS_G3b_Mig_UD = new byte[1024];
					} else {
						commonByteArray_WIPO_PROJECTS_G3b_Mig_UD = new byte[2 * length];
					}
				}
				dis.readFully(commonByteArray_WIPO_PROJECTS_G3b_Mig_UD, 0, length);
				strReturn = new String(commonByteArray_WIPO_PROJECTS_G3b_Mig_UD, 0, length, utf8Charset);
			}
			return strReturn;
		}

		private void writeString(String str, ObjectOutputStream dos) throws IOException {
			if (str == null) {
				dos.writeInt(-1);
			} else {
				byte[] byteArray = str.getBytes(utf8Charset);
				dos.writeInt(byteArray.length);
				dos.write(byteArray);
			}
		}

		public void readData(ObjectInputStream dis) {

			synchronized (commonByteArrayLock_WIPO_PROJECTS_G3b_Mig_UD) {

				try {

					int length = 0;

					this.errorCode = readString(dis);

					this.errorMessage = readString(dis);

				} catch (IOException e) {
					throw new RuntimeException(e);

				}

			}

		}

		public void writeData(ObjectOutputStream dos) {
			try {

				// String

				writeString(this.errorCode, dos);

				// String

				writeString(this.errorMessage, dos);

			} catch (IOException e) {
				throw new RuntimeException(e);
			}

		}

		public String toString() {

			StringBuilder sb = new StringBuilder();
			sb.append(super.toString());
			sb.append("[");
			sb.append("errorCode=" + errorCode);
			sb.append(",errorMessage=" + errorMessage);
			sb.append("]");

			return sb.toString();
		}

		/**
		 * Compare keys
		 */
		public int compareTo(row84Struct other) {

			int returnValue = -1;

			return returnValue;
		}

		private int checkNullsAndCompare(Object object1, Object object2) {
			int returnValue = 0;
			if (object1 instanceof Comparable && object2 instanceof Comparable) {
				returnValue = ((Comparable) object1).compareTo(object2);
			} else if (object1 != null && object2 != null) {
				returnValue = compareStrings(object1.toString(), object2.toString());
			} else if (object1 == null && object2 != null) {
				returnValue = 1;
			} else if (object1 != null && object2 == null) {
				returnValue = -1;
			} else {
				returnValue = 0;
			}

			return returnValue;
		}

		private int compareStrings(String string1, String string2) {
			return string1.compareTo(string2);
		}

	}

	public void tDBRow_10Process(final java.util.Map<String, Object> globalMap) throws TalendException {
		globalMap.put("tDBRow_10_SUBPROCESS_STATE", 0);

		final boolean execStat = this.execStat;

		String iterateId = "";

		String currentComponent = "";
		java.util.Map<String, Object> resourceMap = new java.util.HashMap<String, Object>();

		try {
			// TDI-39566 avoid throwing an useless Exception
			boolean resumeIt = true;
			if (globalResumeTicket == false && resumeEntryMethodName != null) {
				String currentMethodName = new java.lang.Exception().getStackTrace()[0].getMethodName();
				resumeIt = resumeEntryMethodName.equals(currentMethodName);
			}
			if (resumeIt || globalResumeTicket) { // start the resume
				globalResumeTicket = true;

				row20Struct row20 = new row20Struct();
				row84Struct row84 = new row84Struct();

				/**
				 * [tDBCommit_10 begin ] start
				 */

				ok_Hash.put("tDBCommit_10", false);
				start_Hash.put("tDBCommit_10", System.currentTimeMillis());

				currentComponent = "tDBCommit_10";

				if (execStat) {
					runStat.updateStatOnConnection(resourceMap, iterateId, 0, 0, "row20");
				}

				int tos_count_tDBCommit_10 = 0;

				/**
				 * [tDBCommit_10 begin ] stop
				 */

				/**
				 * [tLogRow_22 begin ] start
				 */

				ok_Hash.put("tLogRow_22", false);
				start_Hash.put("tLogRow_22", System.currentTimeMillis());

				currentComponent = "tLogRow_22";

				if (execStat) {
					runStat.updateStatOnConnection(resourceMap, iterateId, 0, 0, "row84");
				}

				int tos_count_tLogRow_22 = 0;

				///////////////////////

				final String OUTPUT_FIELD_SEPARATOR_tLogRow_22 = "|";
				java.io.PrintStream consoleOut_tLogRow_22 = null;

				StringBuilder strBuffer_tLogRow_22 = null;
				int nb_line_tLogRow_22 = 0;
///////////////////////    			

				/**
				 * [tLogRow_22 begin ] stop
				 */

				/**
				 * [tDBRow_10 begin ] start
				 */

				ok_Hash.put("tDBRow_10", false);
				start_Hash.put("tDBRow_10", System.currentTimeMillis());

				tStatCatcher_1.addMessage("begin", "tDBRow_10");
				tStatCatcher_1Process(globalMap);

				currentComponent = "tDBRow_10";

				int tos_count_tDBRow_10 = 0;

				java.sql.Connection conn_tDBRow_10 = null;
				String query_tDBRow_10 = "";
				boolean whetherReject_tDBRow_10 = false;
				conn_tDBRow_10 = (java.sql.Connection) globalMap.get("conn_tMSSqlConnection_3");

				resourceMap.put("conn_tDBRow_10", conn_tDBRow_10);
				java.sql.Statement stmt_tDBRow_10 = conn_tDBRow_10.createStatement();
				resourceMap.put("stmt_tDBRow_10", stmt_tDBRow_10);

				/**
				 * [tDBRow_10 begin ] stop
				 */

				/**
				 * [tDBRow_10 main ] start
				 */

				currentComponent = "tDBRow_10";

				row20 = null;

				row84 = null;

				query_tDBRow_10 = "TRUNCATE TABLE WRK_USERDOC;\nTRUNCATE TABLE WRK_USERDOC_ACTIONS;\nTRUNCATE TABLE WRK_USERDOC_FILES;\nTRUNCATE TABLE WRK"
						+ "_USERDOC_OWNERS;\nTRUNCATE TABLE WRK_USERDOC_REPRS; ;\n";
				whetherReject_tDBRow_10 = false;
				globalMap.put("tDBRow_10_QUERY", query_tDBRow_10);
				try {
					stmt_tDBRow_10.execute(query_tDBRow_10);

				} catch (java.lang.Exception e) {
					whetherReject_tDBRow_10 = true;

					row84 = new row84Struct();

					row84.errorCode = ((java.sql.SQLException) e).getSQLState();
					row84.errorMessage = e.getMessage() + " - Line: " + tos_count_tDBRow_10;

				}

				if (!whetherReject_tDBRow_10) {

					row20 = new row20Struct();

				}

				tos_count_tDBRow_10++;

				/**
				 * [tDBRow_10 main ] stop
				 */

				/**
				 * [tDBRow_10 process_data_begin ] start
				 */

				currentComponent = "tDBRow_10";

				/**
				 * [tDBRow_10 process_data_begin ] stop
				 */
// Start of branch "row20"
				if (row20 != null) {

					/**
					 * [tDBCommit_10 main ] start
					 */

					currentComponent = "tDBCommit_10";

					if (execStat) {
						runStat.updateStatOnConnection(iterateId, 1, 1

								, "row20"

						);
					}

					java.sql.Connection conn_tDBCommit_10 = (java.sql.Connection) globalMap
							.get("conn_tMSSqlConnection_3");
					if (conn_tDBCommit_10 != null && !conn_tDBCommit_10.isClosed()) {

						conn_tDBCommit_10.commit();

					}

					tos_count_tDBCommit_10++;

					/**
					 * [tDBCommit_10 main ] stop
					 */

					/**
					 * [tDBCommit_10 process_data_begin ] start
					 */

					currentComponent = "tDBCommit_10";

					/**
					 * [tDBCommit_10 process_data_begin ] stop
					 */

					/**
					 * [tDBCommit_10 process_data_end ] start
					 */

					currentComponent = "tDBCommit_10";

					/**
					 * [tDBCommit_10 process_data_end ] stop
					 */

				} // End of branch "row20"

// Start of branch "row84"
				if (row84 != null) {

					/**
					 * [tLogRow_22 main ] start
					 */

					currentComponent = "tLogRow_22";

					if (execStat) {
						runStat.updateStatOnConnection(iterateId, 1, 1

								, "row84"

						);
					}

///////////////////////		

					strBuffer_tLogRow_22 = new StringBuilder();

					if (row84.errorCode != null) { //

						strBuffer_tLogRow_22.append(String.valueOf(row84.errorCode));

					} //

					strBuffer_tLogRow_22.append("|");

					if (row84.errorMessage != null) { //

						strBuffer_tLogRow_22.append(String.valueOf(row84.errorMessage));

					} //

					if (globalMap.get("tLogRow_CONSOLE") != null) {
						consoleOut_tLogRow_22 = (java.io.PrintStream) globalMap.get("tLogRow_CONSOLE");
					} else {
						consoleOut_tLogRow_22 = new java.io.PrintStream(new java.io.BufferedOutputStream(System.out));
						globalMap.put("tLogRow_CONSOLE", consoleOut_tLogRow_22);
					}
					consoleOut_tLogRow_22.println(strBuffer_tLogRow_22.toString());
					consoleOut_tLogRow_22.flush();
					nb_line_tLogRow_22++;
//////

//////                    

///////////////////////    			

					tos_count_tLogRow_22++;

					/**
					 * [tLogRow_22 main ] stop
					 */

					/**
					 * [tLogRow_22 process_data_begin ] start
					 */

					currentComponent = "tLogRow_22";

					/**
					 * [tLogRow_22 process_data_begin ] stop
					 */

					/**
					 * [tLogRow_22 process_data_end ] start
					 */

					currentComponent = "tLogRow_22";

					/**
					 * [tLogRow_22 process_data_end ] stop
					 */

				} // End of branch "row84"

				/**
				 * [tDBRow_10 process_data_end ] start
				 */

				currentComponent = "tDBRow_10";

				/**
				 * [tDBRow_10 process_data_end ] stop
				 */

				/**
				 * [tDBRow_10 end ] start
				 */

				currentComponent = "tDBRow_10";

				stmt_tDBRow_10.close();
				resourceMap.remove("stmt_tDBRow_10");
				resourceMap.put("statementClosed_tDBRow_10", true);
				resourceMap.put("finish_tDBRow_10", true);

				ok_Hash.put("tDBRow_10", true);
				end_Hash.put("tDBRow_10", System.currentTimeMillis());

				tStatCatcher_1.addMessage("end", "tDBRow_10", end_Hash.get("tDBRow_10") - start_Hash.get("tDBRow_10"));
				tStatCatcher_1Process(globalMap);

				/**
				 * [tDBRow_10 end ] stop
				 */

				/**
				 * [tDBCommit_10 end ] start
				 */

				currentComponent = "tDBCommit_10";

				if (execStat) {
					runStat.updateStat(resourceMap, iterateId, 2, 0, "row20");
				}

				ok_Hash.put("tDBCommit_10", true);
				end_Hash.put("tDBCommit_10", System.currentTimeMillis());

				/**
				 * [tDBCommit_10 end ] stop
				 */

				/**
				 * [tLogRow_22 end ] start
				 */

				currentComponent = "tLogRow_22";

//////
//////
				globalMap.put("tLogRow_22_NB_LINE", nb_line_tLogRow_22);

///////////////////////    			

				if (execStat) {
					runStat.updateStat(resourceMap, iterateId, 2, 0, "row84");
				}

				ok_Hash.put("tLogRow_22", true);
				end_Hash.put("tLogRow_22", System.currentTimeMillis());

				/**
				 * [tLogRow_22 end ] stop
				 */

			} // end the resume

			if (resumeEntryMethodName == null || globalResumeTicket) {
				resumeUtil.addLog("CHECKPOINT", "CONNECTION:SUBJOB_OK:tDBRow_10:OnSubjobOk", "",
						Thread.currentThread().getId() + "", "", "", "", "", "");
			}

			if (execStat) {
				runStat.updateStatOnConnection("OnSubjobOk50", 0, "ok");
			}

			tDBRow_7Process(globalMap);

		} catch (java.lang.Exception e) {

			TalendException te = new TalendException(e, currentComponent, globalMap);

			throw te;
		} catch (java.lang.Error error) {

			runStat.stopThreadStat();

			throw error;
		} finally {

			try {

				/**
				 * [tDBRow_10 finally ] start
				 */

				currentComponent = "tDBRow_10";

				if (resourceMap.get("statementClosed_tDBRow_10") == null) {
					java.sql.Statement stmtToClose_tDBRow_10 = null;
					if ((stmtToClose_tDBRow_10 = (java.sql.Statement) resourceMap.remove("stmt_tDBRow_10")) != null) {
						stmtToClose_tDBRow_10.close();
					}
				}

				/**
				 * [tDBRow_10 finally ] stop
				 */

				/**
				 * [tDBCommit_10 finally ] start
				 */

				currentComponent = "tDBCommit_10";

				/**
				 * [tDBCommit_10 finally ] stop
				 */

				/**
				 * [tLogRow_22 finally ] start
				 */

				currentComponent = "tLogRow_22";

				/**
				 * [tLogRow_22 finally ] stop
				 */

			} catch (java.lang.Exception e) {
				// ignore
			} catch (java.lang.Error error) {
				// ignore
			}
			resourceMap = null;
		}

		globalMap.put("tDBRow_10_SUBPROCESS_STATE", 1);
	}

	public static class row9Struct implements routines.system.IPersistableRow<row9Struct> {
		final static byte[] commonByteArrayLock_WIPO_PROJECTS_G3b_Mig_UD = new byte[0];
		static byte[] commonByteArray_WIPO_PROJECTS_G3b_Mig_UD = new byte[0];

		public void readData(ObjectInputStream dis) {

			synchronized (commonByteArrayLock_WIPO_PROJECTS_G3b_Mig_UD) {

				try {

					int length = 0;

				}

				finally {
				}

			}

		}

		public void writeData(ObjectOutputStream dos) {
			try {

			}

			finally {
			}

		}

		public String toString() {

			StringBuilder sb = new StringBuilder();
			sb.append(super.toString());
			sb.append("[");
			sb.append("]");

			return sb.toString();
		}

		/**
		 * Compare keys
		 */
		public int compareTo(row9Struct other) {

			int returnValue = -1;

			return returnValue;
		}

		private int checkNullsAndCompare(Object object1, Object object2) {
			int returnValue = 0;
			if (object1 instanceof Comparable && object2 instanceof Comparable) {
				returnValue = ((Comparable) object1).compareTo(object2);
			} else if (object1 != null && object2 != null) {
				returnValue = compareStrings(object1.toString(), object2.toString());
			} else if (object1 == null && object2 != null) {
				returnValue = 1;
			} else if (object1 != null && object2 == null) {
				returnValue = -1;
			} else {
				returnValue = 0;
			}

			return returnValue;
		}

		private int compareStrings(String string1, String string2) {
			return string1.compareTo(string2);
		}

	}

	public static class row23Struct implements routines.system.IPersistableRow<row23Struct> {
		final static byte[] commonByteArrayLock_WIPO_PROJECTS_G3b_Mig_UD = new byte[0];
		static byte[] commonByteArray_WIPO_PROJECTS_G3b_Mig_UD = new byte[0];

		public String errorCode;

		public String getErrorCode() {
			return this.errorCode;
		}

		public String errorMessage;

		public String getErrorMessage() {
			return this.errorMessage;
		}

		private String readString(ObjectInputStream dis) throws IOException {
			String strReturn = null;
			int length = 0;
			length = dis.readInt();
			if (length == -1) {
				strReturn = null;
			} else {
				if (length > commonByteArray_WIPO_PROJECTS_G3b_Mig_UD.length) {
					if (length < 1024 && commonByteArray_WIPO_PROJECTS_G3b_Mig_UD.length == 0) {
						commonByteArray_WIPO_PROJECTS_G3b_Mig_UD = new byte[1024];
					} else {
						commonByteArray_WIPO_PROJECTS_G3b_Mig_UD = new byte[2 * length];
					}
				}
				dis.readFully(commonByteArray_WIPO_PROJECTS_G3b_Mig_UD, 0, length);
				strReturn = new String(commonByteArray_WIPO_PROJECTS_G3b_Mig_UD, 0, length, utf8Charset);
			}
			return strReturn;
		}

		private void writeString(String str, ObjectOutputStream dos) throws IOException {
			if (str == null) {
				dos.writeInt(-1);
			} else {
				byte[] byteArray = str.getBytes(utf8Charset);
				dos.writeInt(byteArray.length);
				dos.write(byteArray);
			}
		}

		public void readData(ObjectInputStream dis) {

			synchronized (commonByteArrayLock_WIPO_PROJECTS_G3b_Mig_UD) {

				try {

					int length = 0;

					this.errorCode = readString(dis);

					this.errorMessage = readString(dis);

				} catch (IOException e) {
					throw new RuntimeException(e);

				}

			}

		}

		public void writeData(ObjectOutputStream dos) {
			try {

				// String

				writeString(this.errorCode, dos);

				// String

				writeString(this.errorMessage, dos);

			} catch (IOException e) {
				throw new RuntimeException(e);
			}

		}

		public String toString() {

			StringBuilder sb = new StringBuilder();
			sb.append(super.toString());
			sb.append("[");
			sb.append("errorCode=" + errorCode);
			sb.append(",errorMessage=" + errorMessage);
			sb.append("]");

			return sb.toString();
		}

		/**
		 * Compare keys
		 */
		public int compareTo(row23Struct other) {

			int returnValue = -1;

			return returnValue;
		}

		private int checkNullsAndCompare(Object object1, Object object2) {
			int returnValue = 0;
			if (object1 instanceof Comparable && object2 instanceof Comparable) {
				returnValue = ((Comparable) object1).compareTo(object2);
			} else if (object1 != null && object2 != null) {
				returnValue = compareStrings(object1.toString(), object2.toString());
			} else if (object1 == null && object2 != null) {
				returnValue = 1;
			} else if (object1 != null && object2 == null) {
				returnValue = -1;
			} else {
				returnValue = 0;
			}

			return returnValue;
		}

		private int compareStrings(String string1, String string2) {
			return string1.compareTo(string2);
		}

	}

	public void tDBRow_7Process(final java.util.Map<String, Object> globalMap) throws TalendException {
		globalMap.put("tDBRow_7_SUBPROCESS_STATE", 0);

		final boolean execStat = this.execStat;

		String iterateId = "";

		String currentComponent = "";
		java.util.Map<String, Object> resourceMap = new java.util.HashMap<String, Object>();

		try {
			// TDI-39566 avoid throwing an useless Exception
			boolean resumeIt = true;
			if (globalResumeTicket == false && resumeEntryMethodName != null) {
				String currentMethodName = new java.lang.Exception().getStackTrace()[0].getMethodName();
				resumeIt = resumeEntryMethodName.equals(currentMethodName);
			}
			if (resumeIt || globalResumeTicket) { // start the resume
				globalResumeTicket = true;

				row9Struct row9 = new row9Struct();
				row23Struct row23 = new row23Struct();

				/**
				 * [tDBCommit_8 begin ] start
				 */

				ok_Hash.put("tDBCommit_8", false);
				start_Hash.put("tDBCommit_8", System.currentTimeMillis());

				currentComponent = "tDBCommit_8";

				if (execStat) {
					runStat.updateStatOnConnection(resourceMap, iterateId, 0, 0, "row9");
				}

				int tos_count_tDBCommit_8 = 0;

				/**
				 * [tDBCommit_8 begin ] stop
				 */

				/**
				 * [tLogRow_12 begin ] start
				 */

				ok_Hash.put("tLogRow_12", false);
				start_Hash.put("tLogRow_12", System.currentTimeMillis());

				currentComponent = "tLogRow_12";

				if (execStat) {
					runStat.updateStatOnConnection(resourceMap, iterateId, 0, 0, "row23");
				}

				int tos_count_tLogRow_12 = 0;

				///////////////////////

				final String OUTPUT_FIELD_SEPARATOR_tLogRow_12 = "|";
				java.io.PrintStream consoleOut_tLogRow_12 = null;

				StringBuilder strBuffer_tLogRow_12 = null;
				int nb_line_tLogRow_12 = 0;
///////////////////////    			

				/**
				 * [tLogRow_12 begin ] stop
				 */

				/**
				 * [tDBRow_7 begin ] start
				 */

				ok_Hash.put("tDBRow_7", false);
				start_Hash.put("tDBRow_7", System.currentTimeMillis());

				tStatCatcher_1.addMessage("begin", "tDBRow_7");
				tStatCatcher_1Process(globalMap);

				currentComponent = "tDBRow_7";

				int tos_count_tDBRow_7 = 0;

				java.sql.Connection conn_tDBRow_7 = null;
				String query_tDBRow_7 = "";
				boolean whetherReject_tDBRow_7 = false;
				conn_tDBRow_7 = (java.sql.Connection) globalMap.get("conn_tMSSqlConnection_3");

				resourceMap.put("conn_tDBRow_7", conn_tDBRow_7);
				java.sql.Statement stmt_tDBRow_7 = conn_tDBRow_7.createStatement();
				resourceMap.put("stmt_tDBRow_7", stmt_tDBRow_7);

				/**
				 * [tDBRow_7 begin ] stop
				 */

				/**
				 * [tDBRow_7 main ] start
				 */

				currentComponent = "tDBRow_7";

				row9 = null;

				row23 = null;

				query_tDBRow_7 = " \n		INSERT INTO  WRK_USERDOC   \n				( USERDOC_SEQ , \n				USERDOC_SERIES , \n				USERDOC_NBR , \n				DOC_ORI , \n				"
						+ "DOC_SERIES , \n				DOC_NBR , \n				USERDOC_TYPE , \n				LAW_CODE , \n				FILING_DATE , \n				RECEPTION_DATE , \n				NOTE"
						+ "S , \n				APPLICANT_NOTES , \n				PERSON_NAME , \n				PERSON_NAME_LANG2 , \n				NATIONALITY_COUNTRY_CODE , \n				IND_COM"
						+ "PANY , \n				LEGAL_NATURE , \n				LEGAL_NATURE_LANG2 ,\n				LEGAL_ID_TYPE , \n				LEGAL_ID_NBR , \n				INDIVIDUAL_ID_TYP"
						+ "E , \n				INDIVIDUAL_ID_NBR , \n				RESIDENCE_COUNTRY_CODE , \n				STATE_NAME , \n				STATE_CODE , \n				CITY_CODE ,\n		"
						+ "		CITY_NAME , \n				ADDRESS_ZONE , \n				ADDRESS_STREET , \n				ADDRESS_STREET_LANG2 ,\n				ZIP_CODE , \n				EMAIL , \n	"
						+ "			TELEPHONE , \n				CAPTURE_USER_ID , \n				CAPTURE_DATE , \n				PERSON_GROUP_CODE , \n				APPLICANT_PERSON_NBR , \n			"
						+ "	APPLICANT_ADDR_NBR , \n				USERDOC_PROC_TYP , \n				USERDOC_PROC_NBR , \n				USERDOC_STATUS_CODE )  \n		SELECT\n				 US"
						+ "ERDOC_SEQ,\n				 USERDOC_SERIES,\n				 USERDOC_NBR,\n				 DOC_ORI,\n				 DOC_SERIES,\n				 DOC_NBR,\n				 USERDOC_TYPE,"
						+ "\n				 LAW_CODE,\n				 FILING_DATE,\n				 RECEPTION_DATE,\n				 NOTES,\n				 APPLICANT_NOTES,\n				 PERSON_NAME,\n				 PE"
						+ "RSON_NAME_LANG2,\n				 NATIONALITY_COUNTRY_CODE,\n				 IND_COMPANY,\n				 LEGAL_NATURE,\n				 LEGAL_NATURE_LANG2,\n				 "
						+ "LEGAL_ID_TYPE,\n				 LEGAL_ID_NBR,\n				 INDIVIDUAL_ID_TYPE,\n				 INDIVIDUAL_ID_NBR,\n				 RESIDENCE_COUNTRY_CODE,\n			"
						+ "	 STATE_NAME,\n				 STATE_CODE,\n				 CITY_CODE,\n				 CITY_NAME,\n				 ADDRESS_ZONE,\n				 ADDRESS_STREET,\n				 ADDRES"
						+ "S_STREET_LANG2,\n				 ZIP_CODE,\n				 EMAIL,\n				 TELEPHONE,\n				 CAPTURE_USER_ID,\n				 CAPTURE_DATE,\n				 PERSON_GR"
						+ "OUP_CODE,\n				 CAST(null as NUMERIC (10)) APPLICANT_PERSON_NBR,\n				 CAST(null as NUMERIC (4)) APPLICANT_ADDR_NBR,\n		"
						+ "		 CAST(null as VARCHAR (8)) USERDOC_PROC_TYP,\n				 CAST(null as NUMERIC (10)) USERDOC_PROC_NBR,\n				 CAST(null as VAR"
						+ "CHAR (8)) USERDOC_STATUS_CODE\n		FROM   [" + context.intermediateDB
						+ "].[dbo].VW_IMPORT_USERDOC M \n		WHERE	 IND_IMPORT =9;\n";
				whetherReject_tDBRow_7 = false;
				globalMap.put("tDBRow_7_QUERY", query_tDBRow_7);
				try {
					stmt_tDBRow_7.execute(query_tDBRow_7);

				} catch (java.lang.Exception e) {
					whetherReject_tDBRow_7 = true;

					row23 = new row23Struct();

					row23.errorCode = ((java.sql.SQLException) e).getSQLState();
					row23.errorMessage = e.getMessage() + " - Line: " + tos_count_tDBRow_7;

				}

				if (!whetherReject_tDBRow_7) {

					row9 = new row9Struct();

				}

				tos_count_tDBRow_7++;

				/**
				 * [tDBRow_7 main ] stop
				 */

				/**
				 * [tDBRow_7 process_data_begin ] start
				 */

				currentComponent = "tDBRow_7";

				/**
				 * [tDBRow_7 process_data_begin ] stop
				 */
// Start of branch "row9"
				if (row9 != null) {

					/**
					 * [tDBCommit_8 main ] start
					 */

					currentComponent = "tDBCommit_8";

					if (execStat) {
						runStat.updateStatOnConnection(iterateId, 1, 1

								, "row9"

						);
					}

					java.sql.Connection conn_tDBCommit_8 = (java.sql.Connection) globalMap
							.get("conn_tMSSqlConnection_3");
					if (conn_tDBCommit_8 != null && !conn_tDBCommit_8.isClosed()) {

						conn_tDBCommit_8.commit();

					}

					tos_count_tDBCommit_8++;

					/**
					 * [tDBCommit_8 main ] stop
					 */

					/**
					 * [tDBCommit_8 process_data_begin ] start
					 */

					currentComponent = "tDBCommit_8";

					/**
					 * [tDBCommit_8 process_data_begin ] stop
					 */

					/**
					 * [tDBCommit_8 process_data_end ] start
					 */

					currentComponent = "tDBCommit_8";

					/**
					 * [tDBCommit_8 process_data_end ] stop
					 */

				} // End of branch "row9"

// Start of branch "row23"
				if (row23 != null) {

					/**
					 * [tLogRow_12 main ] start
					 */

					currentComponent = "tLogRow_12";

					if (execStat) {
						runStat.updateStatOnConnection(iterateId, 1, 1

								, "row23"

						);
					}

///////////////////////		

					strBuffer_tLogRow_12 = new StringBuilder();

					if (row23.errorCode != null) { //

						strBuffer_tLogRow_12.append(String.valueOf(row23.errorCode));

					} //

					strBuffer_tLogRow_12.append("|");

					if (row23.errorMessage != null) { //

						strBuffer_tLogRow_12.append(String.valueOf(row23.errorMessage));

					} //

					if (globalMap.get("tLogRow_CONSOLE") != null) {
						consoleOut_tLogRow_12 = (java.io.PrintStream) globalMap.get("tLogRow_CONSOLE");
					} else {
						consoleOut_tLogRow_12 = new java.io.PrintStream(new java.io.BufferedOutputStream(System.out));
						globalMap.put("tLogRow_CONSOLE", consoleOut_tLogRow_12);
					}
					consoleOut_tLogRow_12.println(strBuffer_tLogRow_12.toString());
					consoleOut_tLogRow_12.flush();
					nb_line_tLogRow_12++;
//////

//////                    

///////////////////////    			

					tos_count_tLogRow_12++;

					/**
					 * [tLogRow_12 main ] stop
					 */

					/**
					 * [tLogRow_12 process_data_begin ] start
					 */

					currentComponent = "tLogRow_12";

					/**
					 * [tLogRow_12 process_data_begin ] stop
					 */

					/**
					 * [tLogRow_12 process_data_end ] start
					 */

					currentComponent = "tLogRow_12";

					/**
					 * [tLogRow_12 process_data_end ] stop
					 */

				} // End of branch "row23"

				/**
				 * [tDBRow_7 process_data_end ] start
				 */

				currentComponent = "tDBRow_7";

				/**
				 * [tDBRow_7 process_data_end ] stop
				 */

				/**
				 * [tDBRow_7 end ] start
				 */

				currentComponent = "tDBRow_7";

				stmt_tDBRow_7.close();
				resourceMap.remove("stmt_tDBRow_7");
				resourceMap.put("statementClosed_tDBRow_7", true);
				resourceMap.put("finish_tDBRow_7", true);

				ok_Hash.put("tDBRow_7", true);
				end_Hash.put("tDBRow_7", System.currentTimeMillis());

				tStatCatcher_1.addMessage("end", "tDBRow_7", end_Hash.get("tDBRow_7") - start_Hash.get("tDBRow_7"));
				tStatCatcher_1Process(globalMap);

				/**
				 * [tDBRow_7 end ] stop
				 */

				/**
				 * [tDBCommit_8 end ] start
				 */

				currentComponent = "tDBCommit_8";

				if (execStat) {
					runStat.updateStat(resourceMap, iterateId, 2, 0, "row9");
				}

				ok_Hash.put("tDBCommit_8", true);
				end_Hash.put("tDBCommit_8", System.currentTimeMillis());

				/**
				 * [tDBCommit_8 end ] stop
				 */

				/**
				 * [tLogRow_12 end ] start
				 */

				currentComponent = "tLogRow_12";

//////
//////
				globalMap.put("tLogRow_12_NB_LINE", nb_line_tLogRow_12);

///////////////////////    			

				if (execStat) {
					runStat.updateStat(resourceMap, iterateId, 2, 0, "row23");
				}

				ok_Hash.put("tLogRow_12", true);
				end_Hash.put("tLogRow_12", System.currentTimeMillis());

				/**
				 * [tLogRow_12 end ] stop
				 */

			} // end the resume

			if (resumeEntryMethodName == null || globalResumeTicket) {
				resumeUtil.addLog("CHECKPOINT", "CONNECTION:SUBJOB_OK:tDBRow_7:OnSubjobOk", "",
						Thread.currentThread().getId() + "", "", "", "", "", "");
			}

			if (execStat) {
				runStat.updateStatOnConnection("OnSubjobOk11", 0, "ok");
			}

			tDBRow_12Process(globalMap);

		} catch (java.lang.Exception e) {

			TalendException te = new TalendException(e, currentComponent, globalMap);

			throw te;
		} catch (java.lang.Error error) {

			runStat.stopThreadStat();

			throw error;
		} finally {

			try {

				/**
				 * [tDBRow_7 finally ] start
				 */

				currentComponent = "tDBRow_7";

				if (resourceMap.get("statementClosed_tDBRow_7") == null) {
					java.sql.Statement stmtToClose_tDBRow_7 = null;
					if ((stmtToClose_tDBRow_7 = (java.sql.Statement) resourceMap.remove("stmt_tDBRow_7")) != null) {
						stmtToClose_tDBRow_7.close();
					}
				}

				/**
				 * [tDBRow_7 finally ] stop
				 */

				/**
				 * [tDBCommit_8 finally ] start
				 */

				currentComponent = "tDBCommit_8";

				/**
				 * [tDBCommit_8 finally ] stop
				 */

				/**
				 * [tLogRow_12 finally ] start
				 */

				currentComponent = "tLogRow_12";

				/**
				 * [tLogRow_12 finally ] stop
				 */

			} catch (java.lang.Exception e) {
				// ignore
			} catch (java.lang.Error error) {
				// ignore
			}
			resourceMap = null;
		}

		globalMap.put("tDBRow_7_SUBPROCESS_STATE", 1);
	}

	public static class row24Struct implements routines.system.IPersistableRow<row24Struct> {
		final static byte[] commonByteArrayLock_WIPO_PROJECTS_G3b_Mig_UD = new byte[0];
		static byte[] commonByteArray_WIPO_PROJECTS_G3b_Mig_UD = new byte[0];

		public void readData(ObjectInputStream dis) {

			synchronized (commonByteArrayLock_WIPO_PROJECTS_G3b_Mig_UD) {

				try {

					int length = 0;

				}

				finally {
				}

			}

		}

		public void writeData(ObjectOutputStream dos) {
			try {

			}

			finally {
			}

		}

		public String toString() {

			StringBuilder sb = new StringBuilder();
			sb.append(super.toString());
			sb.append("[");
			sb.append("]");

			return sb.toString();
		}

		/**
		 * Compare keys
		 */
		public int compareTo(row24Struct other) {

			int returnValue = -1;

			return returnValue;
		}

		private int checkNullsAndCompare(Object object1, Object object2) {
			int returnValue = 0;
			if (object1 instanceof Comparable && object2 instanceof Comparable) {
				returnValue = ((Comparable) object1).compareTo(object2);
			} else if (object1 != null && object2 != null) {
				returnValue = compareStrings(object1.toString(), object2.toString());
			} else if (object1 == null && object2 != null) {
				returnValue = 1;
			} else if (object1 != null && object2 == null) {
				returnValue = -1;
			} else {
				returnValue = 0;
			}

			return returnValue;
		}

		private int compareStrings(String string1, String string2) {
			return string1.compareTo(string2);
		}

	}

	public static class row25Struct implements routines.system.IPersistableRow<row25Struct> {
		final static byte[] commonByteArrayLock_WIPO_PROJECTS_G3b_Mig_UD = new byte[0];
		static byte[] commonByteArray_WIPO_PROJECTS_G3b_Mig_UD = new byte[0];

		public String errorCode;

		public String getErrorCode() {
			return this.errorCode;
		}

		public String errorMessage;

		public String getErrorMessage() {
			return this.errorMessage;
		}

		private String readString(ObjectInputStream dis) throws IOException {
			String strReturn = null;
			int length = 0;
			length = dis.readInt();
			if (length == -1) {
				strReturn = null;
			} else {
				if (length > commonByteArray_WIPO_PROJECTS_G3b_Mig_UD.length) {
					if (length < 1024 && commonByteArray_WIPO_PROJECTS_G3b_Mig_UD.length == 0) {
						commonByteArray_WIPO_PROJECTS_G3b_Mig_UD = new byte[1024];
					} else {
						commonByteArray_WIPO_PROJECTS_G3b_Mig_UD = new byte[2 * length];
					}
				}
				dis.readFully(commonByteArray_WIPO_PROJECTS_G3b_Mig_UD, 0, length);
				strReturn = new String(commonByteArray_WIPO_PROJECTS_G3b_Mig_UD, 0, length, utf8Charset);
			}
			return strReturn;
		}

		private void writeString(String str, ObjectOutputStream dos) throws IOException {
			if (str == null) {
				dos.writeInt(-1);
			} else {
				byte[] byteArray = str.getBytes(utf8Charset);
				dos.writeInt(byteArray.length);
				dos.write(byteArray);
			}
		}

		public void readData(ObjectInputStream dis) {

			synchronized (commonByteArrayLock_WIPO_PROJECTS_G3b_Mig_UD) {

				try {

					int length = 0;

					this.errorCode = readString(dis);

					this.errorMessage = readString(dis);

				} catch (IOException e) {
					throw new RuntimeException(e);

				}

			}

		}

		public void writeData(ObjectOutputStream dos) {
			try {

				// String

				writeString(this.errorCode, dos);

				// String

				writeString(this.errorMessage, dos);

			} catch (IOException e) {
				throw new RuntimeException(e);
			}

		}

		public String toString() {

			StringBuilder sb = new StringBuilder();
			sb.append(super.toString());
			sb.append("[");
			sb.append("errorCode=" + errorCode);
			sb.append(",errorMessage=" + errorMessage);
			sb.append("]");

			return sb.toString();
		}

		/**
		 * Compare keys
		 */
		public int compareTo(row25Struct other) {

			int returnValue = -1;

			return returnValue;
		}

		private int checkNullsAndCompare(Object object1, Object object2) {
			int returnValue = 0;
			if (object1 instanceof Comparable && object2 instanceof Comparable) {
				returnValue = ((Comparable) object1).compareTo(object2);
			} else if (object1 != null && object2 != null) {
				returnValue = compareStrings(object1.toString(), object2.toString());
			} else if (object1 == null && object2 != null) {
				returnValue = 1;
			} else if (object1 != null && object2 == null) {
				returnValue = -1;
			} else {
				returnValue = 0;
			}

			return returnValue;
		}

		private int compareStrings(String string1, String string2) {
			return string1.compareTo(string2);
		}

	}

	public void tDBRow_12Process(final java.util.Map<String, Object> globalMap) throws TalendException {
		globalMap.put("tDBRow_12_SUBPROCESS_STATE", 0);

		final boolean execStat = this.execStat;

		String iterateId = "";

		String currentComponent = "";
		java.util.Map<String, Object> resourceMap = new java.util.HashMap<String, Object>();

		try {
			// TDI-39566 avoid throwing an useless Exception
			boolean resumeIt = true;
			if (globalResumeTicket == false && resumeEntryMethodName != null) {
				String currentMethodName = new java.lang.Exception().getStackTrace()[0].getMethodName();
				resumeIt = resumeEntryMethodName.equals(currentMethodName);
			}
			if (resumeIt || globalResumeTicket) { // start the resume
				globalResumeTicket = true;

				row24Struct row24 = new row24Struct();
				row25Struct row25 = new row25Struct();

				/**
				 * [tDBCommit_12 begin ] start
				 */

				ok_Hash.put("tDBCommit_12", false);
				start_Hash.put("tDBCommit_12", System.currentTimeMillis());

				currentComponent = "tDBCommit_12";

				if (execStat) {
					runStat.updateStatOnConnection(resourceMap, iterateId, 0, 0, "row24");
				}

				int tos_count_tDBCommit_12 = 0;

				/**
				 * [tDBCommit_12 begin ] stop
				 */

				/**
				 * [tLogRow_11 begin ] start
				 */

				ok_Hash.put("tLogRow_11", false);
				start_Hash.put("tLogRow_11", System.currentTimeMillis());

				currentComponent = "tLogRow_11";

				if (execStat) {
					runStat.updateStatOnConnection(resourceMap, iterateId, 0, 0, "row25");
				}

				int tos_count_tLogRow_11 = 0;

				///////////////////////

				final String OUTPUT_FIELD_SEPARATOR_tLogRow_11 = "|";
				java.io.PrintStream consoleOut_tLogRow_11 = null;

				StringBuilder strBuffer_tLogRow_11 = null;
				int nb_line_tLogRow_11 = 0;
///////////////////////    			

				/**
				 * [tLogRow_11 begin ] stop
				 */

				/**
				 * [tDBRow_12 begin ] start
				 */

				ok_Hash.put("tDBRow_12", false);
				start_Hash.put("tDBRow_12", System.currentTimeMillis());

				tStatCatcher_1.addMessage("begin", "tDBRow_12");
				tStatCatcher_1Process(globalMap);

				currentComponent = "tDBRow_12";

				int tos_count_tDBRow_12 = 0;

				java.sql.Connection conn_tDBRow_12 = null;
				String query_tDBRow_12 = "";
				boolean whetherReject_tDBRow_12 = false;
				conn_tDBRow_12 = (java.sql.Connection) globalMap.get("conn_tMSSqlConnection_3");

				resourceMap.put("conn_tDBRow_12", conn_tDBRow_12);
				java.sql.Statement stmt_tDBRow_12 = conn_tDBRow_12.createStatement();
				resourceMap.put("stmt_tDBRow_12", stmt_tDBRow_12);

				/**
				 * [tDBRow_12 begin ] stop
				 */

				/**
				 * [tDBRow_12 main ] start
				 */

				currentComponent = "tDBRow_12";

				row24 = null;

				row25 = null;

				query_tDBRow_12 = "  \n		\nINSERT INTO  WRK_USERDOC_FILES    \n		SELECT		DISTINCT\n				 T.*,\n				 CAST(null as VARCHAR (8)) USERDOC_FILE_"
						+ "PROC_TYP,\n				 CAST(null as NUMERIC (10)) USERDOC_FILE_PROC_NBR,\n				 CAST(null as VARCHAR (8)) USERDOC_FILE_STATUS_CO"
						+ "DE\n		FROM   [" + context.intermediateDB + "].[dbo].VW_IMPORT_USERDOC_FILES T JOIN  ["
						+ context.intermediateDB
						+ "].[dbo].VW_import_userdoc M ON M.userdoc_seq  = T.userdoc_seq\n			 AND	M.userdoc_series  = T.userdoc_series\n			 AND	M."
						+ "userdoc_nbr  = T.userdoc_nbr  \n		WHERE	 IND_IMPORT =9;\n";
				whetherReject_tDBRow_12 = false;
				globalMap.put("tDBRow_12_QUERY", query_tDBRow_12);
				try {
					stmt_tDBRow_12.execute(query_tDBRow_12);

				} catch (java.lang.Exception e) {
					whetherReject_tDBRow_12 = true;

					row25 = new row25Struct();

					row25.errorCode = ((java.sql.SQLException) e).getSQLState();
					row25.errorMessage = e.getMessage() + " - Line: " + tos_count_tDBRow_12;

				}

				if (!whetherReject_tDBRow_12) {

					row24 = new row24Struct();

				}

				tos_count_tDBRow_12++;

				/**
				 * [tDBRow_12 main ] stop
				 */

				/**
				 * [tDBRow_12 process_data_begin ] start
				 */

				currentComponent = "tDBRow_12";

				/**
				 * [tDBRow_12 process_data_begin ] stop
				 */
// Start of branch "row24"
				if (row24 != null) {

					/**
					 * [tDBCommit_12 main ] start
					 */

					currentComponent = "tDBCommit_12";

					if (execStat) {
						runStat.updateStatOnConnection(iterateId, 1, 1

								, "row24"

						);
					}

					java.sql.Connection conn_tDBCommit_12 = (java.sql.Connection) globalMap
							.get("conn_tMSSqlConnection_3");
					if (conn_tDBCommit_12 != null && !conn_tDBCommit_12.isClosed()) {

						conn_tDBCommit_12.commit();

					}

					tos_count_tDBCommit_12++;

					/**
					 * [tDBCommit_12 main ] stop
					 */

					/**
					 * [tDBCommit_12 process_data_begin ] start
					 */

					currentComponent = "tDBCommit_12";

					/**
					 * [tDBCommit_12 process_data_begin ] stop
					 */

					/**
					 * [tDBCommit_12 process_data_end ] start
					 */

					currentComponent = "tDBCommit_12";

					/**
					 * [tDBCommit_12 process_data_end ] stop
					 */

				} // End of branch "row24"

// Start of branch "row25"
				if (row25 != null) {

					/**
					 * [tLogRow_11 main ] start
					 */

					currentComponent = "tLogRow_11";

					if (execStat) {
						runStat.updateStatOnConnection(iterateId, 1, 1

								, "row25"

						);
					}

///////////////////////		

					strBuffer_tLogRow_11 = new StringBuilder();

					if (row25.errorCode != null) { //

						strBuffer_tLogRow_11.append(String.valueOf(row25.errorCode));

					} //

					strBuffer_tLogRow_11.append("|");

					if (row25.errorMessage != null) { //

						strBuffer_tLogRow_11.append(String.valueOf(row25.errorMessage));

					} //

					if (globalMap.get("tLogRow_CONSOLE") != null) {
						consoleOut_tLogRow_11 = (java.io.PrintStream) globalMap.get("tLogRow_CONSOLE");
					} else {
						consoleOut_tLogRow_11 = new java.io.PrintStream(new java.io.BufferedOutputStream(System.out));
						globalMap.put("tLogRow_CONSOLE", consoleOut_tLogRow_11);
					}
					consoleOut_tLogRow_11.println(strBuffer_tLogRow_11.toString());
					consoleOut_tLogRow_11.flush();
					nb_line_tLogRow_11++;
//////

//////                    

///////////////////////    			

					tos_count_tLogRow_11++;

					/**
					 * [tLogRow_11 main ] stop
					 */

					/**
					 * [tLogRow_11 process_data_begin ] start
					 */

					currentComponent = "tLogRow_11";

					/**
					 * [tLogRow_11 process_data_begin ] stop
					 */

					/**
					 * [tLogRow_11 process_data_end ] start
					 */

					currentComponent = "tLogRow_11";

					/**
					 * [tLogRow_11 process_data_end ] stop
					 */

				} // End of branch "row25"

				/**
				 * [tDBRow_12 process_data_end ] start
				 */

				currentComponent = "tDBRow_12";

				/**
				 * [tDBRow_12 process_data_end ] stop
				 */

				/**
				 * [tDBRow_12 end ] start
				 */

				currentComponent = "tDBRow_12";

				stmt_tDBRow_12.close();
				resourceMap.remove("stmt_tDBRow_12");
				resourceMap.put("statementClosed_tDBRow_12", true);
				resourceMap.put("finish_tDBRow_12", true);

				ok_Hash.put("tDBRow_12", true);
				end_Hash.put("tDBRow_12", System.currentTimeMillis());

				tStatCatcher_1.addMessage("end", "tDBRow_12", end_Hash.get("tDBRow_12") - start_Hash.get("tDBRow_12"));
				tStatCatcher_1Process(globalMap);

				/**
				 * [tDBRow_12 end ] stop
				 */

				/**
				 * [tDBCommit_12 end ] start
				 */

				currentComponent = "tDBCommit_12";

				if (execStat) {
					runStat.updateStat(resourceMap, iterateId, 2, 0, "row24");
				}

				ok_Hash.put("tDBCommit_12", true);
				end_Hash.put("tDBCommit_12", System.currentTimeMillis());

				/**
				 * [tDBCommit_12 end ] stop
				 */

				/**
				 * [tLogRow_11 end ] start
				 */

				currentComponent = "tLogRow_11";

//////
//////
				globalMap.put("tLogRow_11_NB_LINE", nb_line_tLogRow_11);

///////////////////////    			

				if (execStat) {
					runStat.updateStat(resourceMap, iterateId, 2, 0, "row25");
				}

				ok_Hash.put("tLogRow_11", true);
				end_Hash.put("tLogRow_11", System.currentTimeMillis());

				/**
				 * [tLogRow_11 end ] stop
				 */

			} // end the resume

			if (resumeEntryMethodName == null || globalResumeTicket) {
				resumeUtil.addLog("CHECKPOINT", "CONNECTION:SUBJOB_OK:tDBRow_12:OnSubjobOk", "",
						Thread.currentThread().getId() + "", "", "", "", "", "");
			}

			if (execStat) {
				runStat.updateStatOnConnection("OnSubjobOk1", 0, "ok");
			}

			tDBRow_13Process(globalMap);

		} catch (java.lang.Exception e) {

			TalendException te = new TalendException(e, currentComponent, globalMap);

			throw te;
		} catch (java.lang.Error error) {

			runStat.stopThreadStat();

			throw error;
		} finally {

			try {

				/**
				 * [tDBRow_12 finally ] start
				 */

				currentComponent = "tDBRow_12";

				if (resourceMap.get("statementClosed_tDBRow_12") == null) {
					java.sql.Statement stmtToClose_tDBRow_12 = null;
					if ((stmtToClose_tDBRow_12 = (java.sql.Statement) resourceMap.remove("stmt_tDBRow_12")) != null) {
						stmtToClose_tDBRow_12.close();
					}
				}

				/**
				 * [tDBRow_12 finally ] stop
				 */

				/**
				 * [tDBCommit_12 finally ] start
				 */

				currentComponent = "tDBCommit_12";

				/**
				 * [tDBCommit_12 finally ] stop
				 */

				/**
				 * [tLogRow_11 finally ] start
				 */

				currentComponent = "tLogRow_11";

				/**
				 * [tLogRow_11 finally ] stop
				 */

			} catch (java.lang.Exception e) {
				// ignore
			} catch (java.lang.Error error) {
				// ignore
			}
			resourceMap = null;
		}

		globalMap.put("tDBRow_12_SUBPROCESS_STATE", 1);
	}

	public static class row26Struct implements routines.system.IPersistableRow<row26Struct> {
		final static byte[] commonByteArrayLock_WIPO_PROJECTS_G3b_Mig_UD = new byte[0];
		static byte[] commonByteArray_WIPO_PROJECTS_G3b_Mig_UD = new byte[0];

		public void readData(ObjectInputStream dis) {

			synchronized (commonByteArrayLock_WIPO_PROJECTS_G3b_Mig_UD) {

				try {

					int length = 0;

				}

				finally {
				}

			}

		}

		public void writeData(ObjectOutputStream dos) {
			try {

			}

			finally {
			}

		}

		public String toString() {

			StringBuilder sb = new StringBuilder();
			sb.append(super.toString());
			sb.append("[");
			sb.append("]");

			return sb.toString();
		}

		/**
		 * Compare keys
		 */
		public int compareTo(row26Struct other) {

			int returnValue = -1;

			return returnValue;
		}

		private int checkNullsAndCompare(Object object1, Object object2) {
			int returnValue = 0;
			if (object1 instanceof Comparable && object2 instanceof Comparable) {
				returnValue = ((Comparable) object1).compareTo(object2);
			} else if (object1 != null && object2 != null) {
				returnValue = compareStrings(object1.toString(), object2.toString());
			} else if (object1 == null && object2 != null) {
				returnValue = 1;
			} else if (object1 != null && object2 == null) {
				returnValue = -1;
			} else {
				returnValue = 0;
			}

			return returnValue;
		}

		private int compareStrings(String string1, String string2) {
			return string1.compareTo(string2);
		}

	}

	public static class row27Struct implements routines.system.IPersistableRow<row27Struct> {
		final static byte[] commonByteArrayLock_WIPO_PROJECTS_G3b_Mig_UD = new byte[0];
		static byte[] commonByteArray_WIPO_PROJECTS_G3b_Mig_UD = new byte[0];

		public String errorCode;

		public String getErrorCode() {
			return this.errorCode;
		}

		public String errorMessage;

		public String getErrorMessage() {
			return this.errorMessage;
		}

		private String readString(ObjectInputStream dis) throws IOException {
			String strReturn = null;
			int length = 0;
			length = dis.readInt();
			if (length == -1) {
				strReturn = null;
			} else {
				if (length > commonByteArray_WIPO_PROJECTS_G3b_Mig_UD.length) {
					if (length < 1024 && commonByteArray_WIPO_PROJECTS_G3b_Mig_UD.length == 0) {
						commonByteArray_WIPO_PROJECTS_G3b_Mig_UD = new byte[1024];
					} else {
						commonByteArray_WIPO_PROJECTS_G3b_Mig_UD = new byte[2 * length];
					}
				}
				dis.readFully(commonByteArray_WIPO_PROJECTS_G3b_Mig_UD, 0, length);
				strReturn = new String(commonByteArray_WIPO_PROJECTS_G3b_Mig_UD, 0, length, utf8Charset);
			}
			return strReturn;
		}

		private void writeString(String str, ObjectOutputStream dos) throws IOException {
			if (str == null) {
				dos.writeInt(-1);
			} else {
				byte[] byteArray = str.getBytes(utf8Charset);
				dos.writeInt(byteArray.length);
				dos.write(byteArray);
			}
		}

		public void readData(ObjectInputStream dis) {

			synchronized (commonByteArrayLock_WIPO_PROJECTS_G3b_Mig_UD) {

				try {

					int length = 0;

					this.errorCode = readString(dis);

					this.errorMessage = readString(dis);

				} catch (IOException e) {
					throw new RuntimeException(e);

				}

			}

		}

		public void writeData(ObjectOutputStream dos) {
			try {

				// String

				writeString(this.errorCode, dos);

				// String

				writeString(this.errorMessage, dos);

			} catch (IOException e) {
				throw new RuntimeException(e);
			}

		}

		public String toString() {

			StringBuilder sb = new StringBuilder();
			sb.append(super.toString());
			sb.append("[");
			sb.append("errorCode=" + errorCode);
			sb.append(",errorMessage=" + errorMessage);
			sb.append("]");

			return sb.toString();
		}

		/**
		 * Compare keys
		 */
		public int compareTo(row27Struct other) {

			int returnValue = -1;

			return returnValue;
		}

		private int checkNullsAndCompare(Object object1, Object object2) {
			int returnValue = 0;
			if (object1 instanceof Comparable && object2 instanceof Comparable) {
				returnValue = ((Comparable) object1).compareTo(object2);
			} else if (object1 != null && object2 != null) {
				returnValue = compareStrings(object1.toString(), object2.toString());
			} else if (object1 == null && object2 != null) {
				returnValue = 1;
			} else if (object1 != null && object2 == null) {
				returnValue = -1;
			} else {
				returnValue = 0;
			}

			return returnValue;
		}

		private int compareStrings(String string1, String string2) {
			return string1.compareTo(string2);
		}

	}

	public void tDBRow_13Process(final java.util.Map<String, Object> globalMap) throws TalendException {
		globalMap.put("tDBRow_13_SUBPROCESS_STATE", 0);

		final boolean execStat = this.execStat;

		String iterateId = "";

		String currentComponent = "";
		java.util.Map<String, Object> resourceMap = new java.util.HashMap<String, Object>();

		try {
			// TDI-39566 avoid throwing an useless Exception
			boolean resumeIt = true;
			if (globalResumeTicket == false && resumeEntryMethodName != null) {
				String currentMethodName = new java.lang.Exception().getStackTrace()[0].getMethodName();
				resumeIt = resumeEntryMethodName.equals(currentMethodName);
			}
			if (resumeIt || globalResumeTicket) { // start the resume
				globalResumeTicket = true;

				row26Struct row26 = new row26Struct();
				row27Struct row27 = new row27Struct();

				/**
				 * [tDBCommit_13 begin ] start
				 */

				ok_Hash.put("tDBCommit_13", false);
				start_Hash.put("tDBCommit_13", System.currentTimeMillis());

				currentComponent = "tDBCommit_13";

				if (execStat) {
					runStat.updateStatOnConnection(resourceMap, iterateId, 0, 0, "row26");
				}

				int tos_count_tDBCommit_13 = 0;

				/**
				 * [tDBCommit_13 begin ] stop
				 */

				/**
				 * [tLogRow_13 begin ] start
				 */

				ok_Hash.put("tLogRow_13", false);
				start_Hash.put("tLogRow_13", System.currentTimeMillis());

				currentComponent = "tLogRow_13";

				if (execStat) {
					runStat.updateStatOnConnection(resourceMap, iterateId, 0, 0, "row27");
				}

				int tos_count_tLogRow_13 = 0;

				///////////////////////

				final String OUTPUT_FIELD_SEPARATOR_tLogRow_13 = "|";
				java.io.PrintStream consoleOut_tLogRow_13 = null;

				StringBuilder strBuffer_tLogRow_13 = null;
				int nb_line_tLogRow_13 = 0;
///////////////////////    			

				/**
				 * [tLogRow_13 begin ] stop
				 */

				/**
				 * [tDBRow_13 begin ] start
				 */

				ok_Hash.put("tDBRow_13", false);
				start_Hash.put("tDBRow_13", System.currentTimeMillis());

				tStatCatcher_1.addMessage("begin", "tDBRow_13");
				tStatCatcher_1Process(globalMap);

				currentComponent = "tDBRow_13";

				int tos_count_tDBRow_13 = 0;

				java.sql.Connection conn_tDBRow_13 = null;
				String query_tDBRow_13 = "";
				boolean whetherReject_tDBRow_13 = false;
				conn_tDBRow_13 = (java.sql.Connection) globalMap.get("conn_tMSSqlConnection_3");

				resourceMap.put("conn_tDBRow_13", conn_tDBRow_13);
				java.sql.Statement stmt_tDBRow_13 = conn_tDBRow_13.createStatement();
				resourceMap.put("stmt_tDBRow_13", stmt_tDBRow_13);

				/**
				 * [tDBRow_13 begin ] stop
				 */

				/**
				 * [tDBRow_13 main ] start
				 */

				currentComponent = "tDBRow_13";

				row26 = null;

				row27 = null;

				query_tDBRow_13 = "  \n\nINSERT INTO  WRK_USERDOC_OWNERS    \n		SELECT\n				 T.*,\n				 CAST(null as NUMERIC (10)) PERSON_NBR,\n				 CAST("
						+ "null as NUMERIC (4)) ADDR_NBR\n		FROM   [" + context.intermediateDB
						+ "].[dbo].VW_IMPORT_USERDOC_OWNERS T JOIN  [" + context.intermediateDB
						+ "].[dbo].VW_import_userdoc M ON M.userdoc_seq  = T.userdoc_seq\n			 AND	M.userdoc_series  = T.userdoc_series\n			 AND	M."
						+ "userdoc_nbr  = T.userdoc_nbr  \n		WHERE	 IND_IMPORT =9;\n";
				whetherReject_tDBRow_13 = false;
				globalMap.put("tDBRow_13_QUERY", query_tDBRow_13);
				try {
					stmt_tDBRow_13.execute(query_tDBRow_13);

				} catch (java.lang.Exception e) {
					whetherReject_tDBRow_13 = true;

					row27 = new row27Struct();

					row27.errorCode = ((java.sql.SQLException) e).getSQLState();
					row27.errorMessage = e.getMessage() + " - Line: " + tos_count_tDBRow_13;

				}

				if (!whetherReject_tDBRow_13) {

					row26 = new row26Struct();

				}

				tos_count_tDBRow_13++;

				/**
				 * [tDBRow_13 main ] stop
				 */

				/**
				 * [tDBRow_13 process_data_begin ] start
				 */

				currentComponent = "tDBRow_13";

				/**
				 * [tDBRow_13 process_data_begin ] stop
				 */
// Start of branch "row26"
				if (row26 != null) {

					/**
					 * [tDBCommit_13 main ] start
					 */

					currentComponent = "tDBCommit_13";

					if (execStat) {
						runStat.updateStatOnConnection(iterateId, 1, 1

								, "row26"

						);
					}

					java.sql.Connection conn_tDBCommit_13 = (java.sql.Connection) globalMap
							.get("conn_tMSSqlConnection_3");
					if (conn_tDBCommit_13 != null && !conn_tDBCommit_13.isClosed()) {

						conn_tDBCommit_13.commit();

					}

					tos_count_tDBCommit_13++;

					/**
					 * [tDBCommit_13 main ] stop
					 */

					/**
					 * [tDBCommit_13 process_data_begin ] start
					 */

					currentComponent = "tDBCommit_13";

					/**
					 * [tDBCommit_13 process_data_begin ] stop
					 */

					/**
					 * [tDBCommit_13 process_data_end ] start
					 */

					currentComponent = "tDBCommit_13";

					/**
					 * [tDBCommit_13 process_data_end ] stop
					 */

				} // End of branch "row26"

// Start of branch "row27"
				if (row27 != null) {

					/**
					 * [tLogRow_13 main ] start
					 */

					currentComponent = "tLogRow_13";

					if (execStat) {
						runStat.updateStatOnConnection(iterateId, 1, 1

								, "row27"

						);
					}

///////////////////////		

					strBuffer_tLogRow_13 = new StringBuilder();

					if (row27.errorCode != null) { //

						strBuffer_tLogRow_13.append(String.valueOf(row27.errorCode));

					} //

					strBuffer_tLogRow_13.append("|");

					if (row27.errorMessage != null) { //

						strBuffer_tLogRow_13.append(String.valueOf(row27.errorMessage));

					} //

					if (globalMap.get("tLogRow_CONSOLE") != null) {
						consoleOut_tLogRow_13 = (java.io.PrintStream) globalMap.get("tLogRow_CONSOLE");
					} else {
						consoleOut_tLogRow_13 = new java.io.PrintStream(new java.io.BufferedOutputStream(System.out));
						globalMap.put("tLogRow_CONSOLE", consoleOut_tLogRow_13);
					}
					consoleOut_tLogRow_13.println(strBuffer_tLogRow_13.toString());
					consoleOut_tLogRow_13.flush();
					nb_line_tLogRow_13++;
//////

//////                    

///////////////////////    			

					tos_count_tLogRow_13++;

					/**
					 * [tLogRow_13 main ] stop
					 */

					/**
					 * [tLogRow_13 process_data_begin ] start
					 */

					currentComponent = "tLogRow_13";

					/**
					 * [tLogRow_13 process_data_begin ] stop
					 */

					/**
					 * [tLogRow_13 process_data_end ] start
					 */

					currentComponent = "tLogRow_13";

					/**
					 * [tLogRow_13 process_data_end ] stop
					 */

				} // End of branch "row27"

				/**
				 * [tDBRow_13 process_data_end ] start
				 */

				currentComponent = "tDBRow_13";

				/**
				 * [tDBRow_13 process_data_end ] stop
				 */

				/**
				 * [tDBRow_13 end ] start
				 */

				currentComponent = "tDBRow_13";

				stmt_tDBRow_13.close();
				resourceMap.remove("stmt_tDBRow_13");
				resourceMap.put("statementClosed_tDBRow_13", true);
				resourceMap.put("finish_tDBRow_13", true);

				ok_Hash.put("tDBRow_13", true);
				end_Hash.put("tDBRow_13", System.currentTimeMillis());

				tStatCatcher_1.addMessage("end", "tDBRow_13", end_Hash.get("tDBRow_13") - start_Hash.get("tDBRow_13"));
				tStatCatcher_1Process(globalMap);

				/**
				 * [tDBRow_13 end ] stop
				 */

				/**
				 * [tDBCommit_13 end ] start
				 */

				currentComponent = "tDBCommit_13";

				if (execStat) {
					runStat.updateStat(resourceMap, iterateId, 2, 0, "row26");
				}

				ok_Hash.put("tDBCommit_13", true);
				end_Hash.put("tDBCommit_13", System.currentTimeMillis());

				/**
				 * [tDBCommit_13 end ] stop
				 */

				/**
				 * [tLogRow_13 end ] start
				 */

				currentComponent = "tLogRow_13";

//////
//////
				globalMap.put("tLogRow_13_NB_LINE", nb_line_tLogRow_13);

///////////////////////    			

				if (execStat) {
					runStat.updateStat(resourceMap, iterateId, 2, 0, "row27");
				}

				ok_Hash.put("tLogRow_13", true);
				end_Hash.put("tLogRow_13", System.currentTimeMillis());

				/**
				 * [tLogRow_13 end ] stop
				 */

			} // end the resume

			if (resumeEntryMethodName == null || globalResumeTicket) {
				resumeUtil.addLog("CHECKPOINT", "CONNECTION:SUBJOB_OK:tDBRow_13:OnSubjobOk", "",
						Thread.currentThread().getId() + "", "", "", "", "", "");
			}

			if (execStat) {
				runStat.updateStatOnConnection("OnSubjobOk12", 0, "ok");
			}

			tDBRow_14Process(globalMap);

		} catch (java.lang.Exception e) {

			TalendException te = new TalendException(e, currentComponent, globalMap);

			throw te;
		} catch (java.lang.Error error) {

			runStat.stopThreadStat();

			throw error;
		} finally {

			try {

				/**
				 * [tDBRow_13 finally ] start
				 */

				currentComponent = "tDBRow_13";

				if (resourceMap.get("statementClosed_tDBRow_13") == null) {
					java.sql.Statement stmtToClose_tDBRow_13 = null;
					if ((stmtToClose_tDBRow_13 = (java.sql.Statement) resourceMap.remove("stmt_tDBRow_13")) != null) {
						stmtToClose_tDBRow_13.close();
					}
				}

				/**
				 * [tDBRow_13 finally ] stop
				 */

				/**
				 * [tDBCommit_13 finally ] start
				 */

				currentComponent = "tDBCommit_13";

				/**
				 * [tDBCommit_13 finally ] stop
				 */

				/**
				 * [tLogRow_13 finally ] start
				 */

				currentComponent = "tLogRow_13";

				/**
				 * [tLogRow_13 finally ] stop
				 */

			} catch (java.lang.Exception e) {
				// ignore
			} catch (java.lang.Error error) {
				// ignore
			}
			resourceMap = null;
		}

		globalMap.put("tDBRow_13_SUBPROCESS_STATE", 1);
	}

	public static class row1Struct implements routines.system.IPersistableRow<row1Struct> {
		final static byte[] commonByteArrayLock_WIPO_PROJECTS_G3b_Mig_UD = new byte[0];
		static byte[] commonByteArray_WIPO_PROJECTS_G3b_Mig_UD = new byte[0];

		public void readData(ObjectInputStream dis) {

			synchronized (commonByteArrayLock_WIPO_PROJECTS_G3b_Mig_UD) {

				try {

					int length = 0;

				}

				finally {
				}

			}

		}

		public void writeData(ObjectOutputStream dos) {
			try {

			}

			finally {
			}

		}

		public String toString() {

			StringBuilder sb = new StringBuilder();
			sb.append(super.toString());
			sb.append("[");
			sb.append("]");

			return sb.toString();
		}

		/**
		 * Compare keys
		 */
		public int compareTo(row1Struct other) {

			int returnValue = -1;

			return returnValue;
		}

		private int checkNullsAndCompare(Object object1, Object object2) {
			int returnValue = 0;
			if (object1 instanceof Comparable && object2 instanceof Comparable) {
				returnValue = ((Comparable) object1).compareTo(object2);
			} else if (object1 != null && object2 != null) {
				returnValue = compareStrings(object1.toString(), object2.toString());
			} else if (object1 == null && object2 != null) {
				returnValue = 1;
			} else if (object1 != null && object2 == null) {
				returnValue = -1;
			} else {
				returnValue = 0;
			}

			return returnValue;
		}

		private int compareStrings(String string1, String string2) {
			return string1.compareTo(string2);
		}

	}

	public static class row2Struct implements routines.system.IPersistableRow<row2Struct> {
		final static byte[] commonByteArrayLock_WIPO_PROJECTS_G3b_Mig_UD = new byte[0];
		static byte[] commonByteArray_WIPO_PROJECTS_G3b_Mig_UD = new byte[0];

		public String errorCode;

		public String getErrorCode() {
			return this.errorCode;
		}

		public String errorMessage;

		public String getErrorMessage() {
			return this.errorMessage;
		}

		private String readString(ObjectInputStream dis) throws IOException {
			String strReturn = null;
			int length = 0;
			length = dis.readInt();
			if (length == -1) {
				strReturn = null;
			} else {
				if (length > commonByteArray_WIPO_PROJECTS_G3b_Mig_UD.length) {
					if (length < 1024 && commonByteArray_WIPO_PROJECTS_G3b_Mig_UD.length == 0) {
						commonByteArray_WIPO_PROJECTS_G3b_Mig_UD = new byte[1024];
					} else {
						commonByteArray_WIPO_PROJECTS_G3b_Mig_UD = new byte[2 * length];
					}
				}
				dis.readFully(commonByteArray_WIPO_PROJECTS_G3b_Mig_UD, 0, length);
				strReturn = new String(commonByteArray_WIPO_PROJECTS_G3b_Mig_UD, 0, length, utf8Charset);
			}
			return strReturn;
		}

		private void writeString(String str, ObjectOutputStream dos) throws IOException {
			if (str == null) {
				dos.writeInt(-1);
			} else {
				byte[] byteArray = str.getBytes(utf8Charset);
				dos.writeInt(byteArray.length);
				dos.write(byteArray);
			}
		}

		public void readData(ObjectInputStream dis) {

			synchronized (commonByteArrayLock_WIPO_PROJECTS_G3b_Mig_UD) {

				try {

					int length = 0;

					this.errorCode = readString(dis);

					this.errorMessage = readString(dis);

				} catch (IOException e) {
					throw new RuntimeException(e);

				}

			}

		}

		public void writeData(ObjectOutputStream dos) {
			try {

				// String

				writeString(this.errorCode, dos);

				// String

				writeString(this.errorMessage, dos);

			} catch (IOException e) {
				throw new RuntimeException(e);
			}

		}

		public String toString() {

			StringBuilder sb = new StringBuilder();
			sb.append(super.toString());
			sb.append("[");
			sb.append("errorCode=" + errorCode);
			sb.append(",errorMessage=" + errorMessage);
			sb.append("]");

			return sb.toString();
		}

		/**
		 * Compare keys
		 */
		public int compareTo(row2Struct other) {

			int returnValue = -1;

			return returnValue;
		}

		private int checkNullsAndCompare(Object object1, Object object2) {
			int returnValue = 0;
			if (object1 instanceof Comparable && object2 instanceof Comparable) {
				returnValue = ((Comparable) object1).compareTo(object2);
			} else if (object1 != null && object2 != null) {
				returnValue = compareStrings(object1.toString(), object2.toString());
			} else if (object1 == null && object2 != null) {
				returnValue = 1;
			} else if (object1 != null && object2 == null) {
				returnValue = -1;
			} else {
				returnValue = 0;
			}

			return returnValue;
		}

		private int compareStrings(String string1, String string2) {
			return string1.compareTo(string2);
		}

	}

	public void tDBRow_14Process(final java.util.Map<String, Object> globalMap) throws TalendException {
		globalMap.put("tDBRow_14_SUBPROCESS_STATE", 0);

		final boolean execStat = this.execStat;

		String iterateId = "";

		String currentComponent = "";
		java.util.Map<String, Object> resourceMap = new java.util.HashMap<String, Object>();

		try {
			// TDI-39566 avoid throwing an useless Exception
			boolean resumeIt = true;
			if (globalResumeTicket == false && resumeEntryMethodName != null) {
				String currentMethodName = new java.lang.Exception().getStackTrace()[0].getMethodName();
				resumeIt = resumeEntryMethodName.equals(currentMethodName);
			}
			if (resumeIt || globalResumeTicket) { // start the resume
				globalResumeTicket = true;

				row1Struct row1 = new row1Struct();
				row2Struct row2 = new row2Struct();

				/**
				 * [tDBCommit_14 begin ] start
				 */

				ok_Hash.put("tDBCommit_14", false);
				start_Hash.put("tDBCommit_14", System.currentTimeMillis());

				currentComponent = "tDBCommit_14";

				if (execStat) {
					runStat.updateStatOnConnection(resourceMap, iterateId, 0, 0, "row1");
				}

				int tos_count_tDBCommit_14 = 0;

				/**
				 * [tDBCommit_14 begin ] stop
				 */

				/**
				 * [tLogRow_1 begin ] start
				 */

				ok_Hash.put("tLogRow_1", false);
				start_Hash.put("tLogRow_1", System.currentTimeMillis());

				currentComponent = "tLogRow_1";

				if (execStat) {
					runStat.updateStatOnConnection(resourceMap, iterateId, 0, 0, "row2");
				}

				int tos_count_tLogRow_1 = 0;

				///////////////////////

				final String OUTPUT_FIELD_SEPARATOR_tLogRow_1 = "|";
				java.io.PrintStream consoleOut_tLogRow_1 = null;

				StringBuilder strBuffer_tLogRow_1 = null;
				int nb_line_tLogRow_1 = 0;
///////////////////////    			

				/**
				 * [tLogRow_1 begin ] stop
				 */

				/**
				 * [tDBRow_14 begin ] start
				 */

				ok_Hash.put("tDBRow_14", false);
				start_Hash.put("tDBRow_14", System.currentTimeMillis());

				tStatCatcher_1.addMessage("begin", "tDBRow_14");
				tStatCatcher_1Process(globalMap);

				currentComponent = "tDBRow_14";

				int tos_count_tDBRow_14 = 0;

				java.sql.Connection conn_tDBRow_14 = null;
				String query_tDBRow_14 = "";
				boolean whetherReject_tDBRow_14 = false;
				conn_tDBRow_14 = (java.sql.Connection) globalMap.get("conn_tMSSqlConnection_3");

				resourceMap.put("conn_tDBRow_14", conn_tDBRow_14);
				java.sql.Statement stmt_tDBRow_14 = conn_tDBRow_14.createStatement();
				resourceMap.put("stmt_tDBRow_14", stmt_tDBRow_14);

				/**
				 * [tDBRow_14 begin ] stop
				 */

				/**
				 * [tDBRow_14 main ] start
				 */

				currentComponent = "tDBRow_14";

				row1 = null;

				row2 = null;

				query_tDBRow_14 = "    \n\nINSERT INTO  WRK_USERDOC_REPRS    \n		SELECT\n				 T.*,\n				 CAST(null as NUMERIC (10)) PERSON_NBR,\n				 CAST"
						+ "(null as NUMERIC (4)) ADDR_NBR\n		FROM   [" + context.intermediateDB
						+ "].[dbo].VW_IMPORT_USERDOC_REPRS T JOIN  [" + context.intermediateDB
						+ "].[dbo].VW_import_userdoc M ON M.userdoc_seq  = T.userdoc_seq\n			 AND	M.userdoc_series  = T.userdoc_series\n			 AND	M."
						+ "userdoc_nbr  = T.userdoc_nbr  \n		WHERE	 IND_IMPORT =9;\n";
				whetherReject_tDBRow_14 = false;
				globalMap.put("tDBRow_14_QUERY", query_tDBRow_14);
				try {
					stmt_tDBRow_14.execute(query_tDBRow_14);

				} catch (java.lang.Exception e) {
					whetherReject_tDBRow_14 = true;

					row2 = new row2Struct();

					row2.errorCode = ((java.sql.SQLException) e).getSQLState();
					row2.errorMessage = e.getMessage() + " - Line: " + tos_count_tDBRow_14;

				}

				if (!whetherReject_tDBRow_14) {

					row1 = new row1Struct();

				}

				tos_count_tDBRow_14++;

				/**
				 * [tDBRow_14 main ] stop
				 */

				/**
				 * [tDBRow_14 process_data_begin ] start
				 */

				currentComponent = "tDBRow_14";

				/**
				 * [tDBRow_14 process_data_begin ] stop
				 */
// Start of branch "row1"
				if (row1 != null) {

					/**
					 * [tDBCommit_14 main ] start
					 */

					currentComponent = "tDBCommit_14";

					if (execStat) {
						runStat.updateStatOnConnection(iterateId, 1, 1

								, "row1"

						);
					}

					java.sql.Connection conn_tDBCommit_14 = (java.sql.Connection) globalMap
							.get("conn_tMSSqlConnection_3");
					if (conn_tDBCommit_14 != null && !conn_tDBCommit_14.isClosed()) {

						conn_tDBCommit_14.commit();

					}

					tos_count_tDBCommit_14++;

					/**
					 * [tDBCommit_14 main ] stop
					 */

					/**
					 * [tDBCommit_14 process_data_begin ] start
					 */

					currentComponent = "tDBCommit_14";

					/**
					 * [tDBCommit_14 process_data_begin ] stop
					 */

					/**
					 * [tDBCommit_14 process_data_end ] start
					 */

					currentComponent = "tDBCommit_14";

					/**
					 * [tDBCommit_14 process_data_end ] stop
					 */

				} // End of branch "row1"

// Start of branch "row2"
				if (row2 != null) {

					/**
					 * [tLogRow_1 main ] start
					 */

					currentComponent = "tLogRow_1";

					if (execStat) {
						runStat.updateStatOnConnection(iterateId, 1, 1

								, "row2"

						);
					}

///////////////////////		

					strBuffer_tLogRow_1 = new StringBuilder();

					if (row2.errorCode != null) { //

						strBuffer_tLogRow_1.append(String.valueOf(row2.errorCode));

					} //

					strBuffer_tLogRow_1.append("|");

					if (row2.errorMessage != null) { //

						strBuffer_tLogRow_1.append(String.valueOf(row2.errorMessage));

					} //

					if (globalMap.get("tLogRow_CONSOLE") != null) {
						consoleOut_tLogRow_1 = (java.io.PrintStream) globalMap.get("tLogRow_CONSOLE");
					} else {
						consoleOut_tLogRow_1 = new java.io.PrintStream(new java.io.BufferedOutputStream(System.out));
						globalMap.put("tLogRow_CONSOLE", consoleOut_tLogRow_1);
					}
					consoleOut_tLogRow_1.println(strBuffer_tLogRow_1.toString());
					consoleOut_tLogRow_1.flush();
					nb_line_tLogRow_1++;
//////

//////                    

///////////////////////    			

					tos_count_tLogRow_1++;

					/**
					 * [tLogRow_1 main ] stop
					 */

					/**
					 * [tLogRow_1 process_data_begin ] start
					 */

					currentComponent = "tLogRow_1";

					/**
					 * [tLogRow_1 process_data_begin ] stop
					 */

					/**
					 * [tLogRow_1 process_data_end ] start
					 */

					currentComponent = "tLogRow_1";

					/**
					 * [tLogRow_1 process_data_end ] stop
					 */

				} // End of branch "row2"

				/**
				 * [tDBRow_14 process_data_end ] start
				 */

				currentComponent = "tDBRow_14";

				/**
				 * [tDBRow_14 process_data_end ] stop
				 */

				/**
				 * [tDBRow_14 end ] start
				 */

				currentComponent = "tDBRow_14";

				stmt_tDBRow_14.close();
				resourceMap.remove("stmt_tDBRow_14");
				resourceMap.put("statementClosed_tDBRow_14", true);
				resourceMap.put("finish_tDBRow_14", true);

				ok_Hash.put("tDBRow_14", true);
				end_Hash.put("tDBRow_14", System.currentTimeMillis());

				tStatCatcher_1.addMessage("end", "tDBRow_14", end_Hash.get("tDBRow_14") - start_Hash.get("tDBRow_14"));
				tStatCatcher_1Process(globalMap);

				/**
				 * [tDBRow_14 end ] stop
				 */

				/**
				 * [tDBCommit_14 end ] start
				 */

				currentComponent = "tDBCommit_14";

				if (execStat) {
					runStat.updateStat(resourceMap, iterateId, 2, 0, "row1");
				}

				ok_Hash.put("tDBCommit_14", true);
				end_Hash.put("tDBCommit_14", System.currentTimeMillis());

				/**
				 * [tDBCommit_14 end ] stop
				 */

				/**
				 * [tLogRow_1 end ] start
				 */

				currentComponent = "tLogRow_1";

//////
//////
				globalMap.put("tLogRow_1_NB_LINE", nb_line_tLogRow_1);

///////////////////////    			

				if (execStat) {
					runStat.updateStat(resourceMap, iterateId, 2, 0, "row2");
				}

				ok_Hash.put("tLogRow_1", true);
				end_Hash.put("tLogRow_1", System.currentTimeMillis());

				/**
				 * [tLogRow_1 end ] stop
				 */

			} // end the resume

			if (resumeEntryMethodName == null || globalResumeTicket) {
				resumeUtil.addLog("CHECKPOINT", "CONNECTION:SUBJOB_OK:tDBRow_14:OnSubjobOk", "",
						Thread.currentThread().getId() + "", "", "", "", "", "");
			}

			if (execStat) {
				runStat.updateStatOnConnection("OnSubjobOk13", 0, "ok");
			}

			tDBRow_15Process(globalMap);

		} catch (java.lang.Exception e) {

			TalendException te = new TalendException(e, currentComponent, globalMap);

			throw te;
		} catch (java.lang.Error error) {

			runStat.stopThreadStat();

			throw error;
		} finally {

			try {

				/**
				 * [tDBRow_14 finally ] start
				 */

				currentComponent = "tDBRow_14";

				if (resourceMap.get("statementClosed_tDBRow_14") == null) {
					java.sql.Statement stmtToClose_tDBRow_14 = null;
					if ((stmtToClose_tDBRow_14 = (java.sql.Statement) resourceMap.remove("stmt_tDBRow_14")) != null) {
						stmtToClose_tDBRow_14.close();
					}
				}

				/**
				 * [tDBRow_14 finally ] stop
				 */

				/**
				 * [tDBCommit_14 finally ] start
				 */

				currentComponent = "tDBCommit_14";

				/**
				 * [tDBCommit_14 finally ] stop
				 */

				/**
				 * [tLogRow_1 finally ] start
				 */

				currentComponent = "tLogRow_1";

				/**
				 * [tLogRow_1 finally ] stop
				 */

			} catch (java.lang.Exception e) {
				// ignore
			} catch (java.lang.Error error) {
				// ignore
			}
			resourceMap = null;
		}

		globalMap.put("tDBRow_14_SUBPROCESS_STATE", 1);
	}

	public static class row28Struct implements routines.system.IPersistableRow<row28Struct> {
		final static byte[] commonByteArrayLock_WIPO_PROJECTS_G3b_Mig_UD = new byte[0];
		static byte[] commonByteArray_WIPO_PROJECTS_G3b_Mig_UD = new byte[0];

		public void readData(ObjectInputStream dis) {

			synchronized (commonByteArrayLock_WIPO_PROJECTS_G3b_Mig_UD) {

				try {

					int length = 0;

				}

				finally {
				}

			}

		}

		public void writeData(ObjectOutputStream dos) {
			try {

			}

			finally {
			}

		}

		public String toString() {

			StringBuilder sb = new StringBuilder();
			sb.append(super.toString());
			sb.append("[");
			sb.append("]");

			return sb.toString();
		}

		/**
		 * Compare keys
		 */
		public int compareTo(row28Struct other) {

			int returnValue = -1;

			return returnValue;
		}

		private int checkNullsAndCompare(Object object1, Object object2) {
			int returnValue = 0;
			if (object1 instanceof Comparable && object2 instanceof Comparable) {
				returnValue = ((Comparable) object1).compareTo(object2);
			} else if (object1 != null && object2 != null) {
				returnValue = compareStrings(object1.toString(), object2.toString());
			} else if (object1 == null && object2 != null) {
				returnValue = 1;
			} else if (object1 != null && object2 == null) {
				returnValue = -1;
			} else {
				returnValue = 0;
			}

			return returnValue;
		}

		private int compareStrings(String string1, String string2) {
			return string1.compareTo(string2);
		}

	}

	public static class row29Struct implements routines.system.IPersistableRow<row29Struct> {
		final static byte[] commonByteArrayLock_WIPO_PROJECTS_G3b_Mig_UD = new byte[0];
		static byte[] commonByteArray_WIPO_PROJECTS_G3b_Mig_UD = new byte[0];

		public String errorCode;

		public String getErrorCode() {
			return this.errorCode;
		}

		public String errorMessage;

		public String getErrorMessage() {
			return this.errorMessage;
		}

		private String readString(ObjectInputStream dis) throws IOException {
			String strReturn = null;
			int length = 0;
			length = dis.readInt();
			if (length == -1) {
				strReturn = null;
			} else {
				if (length > commonByteArray_WIPO_PROJECTS_G3b_Mig_UD.length) {
					if (length < 1024 && commonByteArray_WIPO_PROJECTS_G3b_Mig_UD.length == 0) {
						commonByteArray_WIPO_PROJECTS_G3b_Mig_UD = new byte[1024];
					} else {
						commonByteArray_WIPO_PROJECTS_G3b_Mig_UD = new byte[2 * length];
					}
				}
				dis.readFully(commonByteArray_WIPO_PROJECTS_G3b_Mig_UD, 0, length);
				strReturn = new String(commonByteArray_WIPO_PROJECTS_G3b_Mig_UD, 0, length, utf8Charset);
			}
			return strReturn;
		}

		private void writeString(String str, ObjectOutputStream dos) throws IOException {
			if (str == null) {
				dos.writeInt(-1);
			} else {
				byte[] byteArray = str.getBytes(utf8Charset);
				dos.writeInt(byteArray.length);
				dos.write(byteArray);
			}
		}

		public void readData(ObjectInputStream dis) {

			synchronized (commonByteArrayLock_WIPO_PROJECTS_G3b_Mig_UD) {

				try {

					int length = 0;

					this.errorCode = readString(dis);

					this.errorMessage = readString(dis);

				} catch (IOException e) {
					throw new RuntimeException(e);

				}

			}

		}

		public void writeData(ObjectOutputStream dos) {
			try {

				// String

				writeString(this.errorCode, dos);

				// String

				writeString(this.errorMessage, dos);

			} catch (IOException e) {
				throw new RuntimeException(e);
			}

		}

		public String toString() {

			StringBuilder sb = new StringBuilder();
			sb.append(super.toString());
			sb.append("[");
			sb.append("errorCode=" + errorCode);
			sb.append(",errorMessage=" + errorMessage);
			sb.append("]");

			return sb.toString();
		}

		/**
		 * Compare keys
		 */
		public int compareTo(row29Struct other) {

			int returnValue = -1;

			return returnValue;
		}

		private int checkNullsAndCompare(Object object1, Object object2) {
			int returnValue = 0;
			if (object1 instanceof Comparable && object2 instanceof Comparable) {
				returnValue = ((Comparable) object1).compareTo(object2);
			} else if (object1 != null && object2 != null) {
				returnValue = compareStrings(object1.toString(), object2.toString());
			} else if (object1 == null && object2 != null) {
				returnValue = 1;
			} else if (object1 != null && object2 == null) {
				returnValue = -1;
			} else {
				returnValue = 0;
			}

			return returnValue;
		}

		private int compareStrings(String string1, String string2) {
			return string1.compareTo(string2);
		}

	}

	public void tDBRow_15Process(final java.util.Map<String, Object> globalMap) throws TalendException {
		globalMap.put("tDBRow_15_SUBPROCESS_STATE", 0);

		final boolean execStat = this.execStat;

		String iterateId = "";

		String currentComponent = "";
		java.util.Map<String, Object> resourceMap = new java.util.HashMap<String, Object>();

		try {
			// TDI-39566 avoid throwing an useless Exception
			boolean resumeIt = true;
			if (globalResumeTicket == false && resumeEntryMethodName != null) {
				String currentMethodName = new java.lang.Exception().getStackTrace()[0].getMethodName();
				resumeIt = resumeEntryMethodName.equals(currentMethodName);
			}
			if (resumeIt || globalResumeTicket) { // start the resume
				globalResumeTicket = true;

				row28Struct row28 = new row28Struct();
				row29Struct row29 = new row29Struct();

				/**
				 * [tDBCommit_15 begin ] start
				 */

				ok_Hash.put("tDBCommit_15", false);
				start_Hash.put("tDBCommit_15", System.currentTimeMillis());

				currentComponent = "tDBCommit_15";

				if (execStat) {
					runStat.updateStatOnConnection(resourceMap, iterateId, 0, 0, "row28");
				}

				int tos_count_tDBCommit_15 = 0;

				/**
				 * [tDBCommit_15 begin ] stop
				 */

				/**
				 * [tLogRow_14 begin ] start
				 */

				ok_Hash.put("tLogRow_14", false);
				start_Hash.put("tLogRow_14", System.currentTimeMillis());

				currentComponent = "tLogRow_14";

				if (execStat) {
					runStat.updateStatOnConnection(resourceMap, iterateId, 0, 0, "row29");
				}

				int tos_count_tLogRow_14 = 0;

				///////////////////////

				final String OUTPUT_FIELD_SEPARATOR_tLogRow_14 = "|";
				java.io.PrintStream consoleOut_tLogRow_14 = null;

				StringBuilder strBuffer_tLogRow_14 = null;
				int nb_line_tLogRow_14 = 0;
///////////////////////    			

				/**
				 * [tLogRow_14 begin ] stop
				 */

				/**
				 * [tDBRow_15 begin ] start
				 */

				ok_Hash.put("tDBRow_15", false);
				start_Hash.put("tDBRow_15", System.currentTimeMillis());

				tStatCatcher_1.addMessage("begin", "tDBRow_15");
				tStatCatcher_1Process(globalMap);

				currentComponent = "tDBRow_15";

				int tos_count_tDBRow_15 = 0;

				java.sql.Connection conn_tDBRow_15 = null;
				String query_tDBRow_15 = "";
				boolean whetherReject_tDBRow_15 = false;
				conn_tDBRow_15 = (java.sql.Connection) globalMap.get("conn_tMSSqlConnection_3");

				resourceMap.put("conn_tDBRow_15", conn_tDBRow_15);
				java.sql.Statement stmt_tDBRow_15 = conn_tDBRow_15.createStatement();
				resourceMap.put("stmt_tDBRow_15", stmt_tDBRow_15);

				/**
				 * [tDBRow_15 begin ] stop
				 */

				/**
				 * [tDBRow_15 main ] start
				 */

				currentComponent = "tDBRow_15";

				row28 = null;

				row29 = null;

				query_tDBRow_15 = "\nINSERT INTO  WRK_USERDOC_ACTIONS    \n		SELECT\n				 T.*,\n				 CAST(null as NUMERIC (4)) ACTION_NBR\n		FROM   ["
						+ context.intermediateDB + "].[dbo].VW_IMPORT_USERDOC_ACTIONS T JOIN  ["
						+ context.intermediateDB
						+ "].[dbo].VW_import_userdoc M ON M.userdoc_seq  = T.userdoc_seq\n			 AND	M.userdoc_series  = T.userdoc_series\n			 AND	M."
						+ "userdoc_nbr  = T.userdoc_nbr  \n		WHERE	 IND_IMPORT =9;\n\n update  wrk_userdoc_actions\n                set     manual_"
						+ "due_date = dateadd(dd, 1, manual_due_date)\n                where   datepart(dw, manual_due_date) = 1 /* Sunday */\n\n";
				whetherReject_tDBRow_15 = false;
				globalMap.put("tDBRow_15_QUERY", query_tDBRow_15);
				try {
					stmt_tDBRow_15.execute(query_tDBRow_15);

				} catch (java.lang.Exception e) {
					whetherReject_tDBRow_15 = true;

					row29 = new row29Struct();

					row29.errorCode = ((java.sql.SQLException) e).getSQLState();
					row29.errorMessage = e.getMessage() + " - Line: " + tos_count_tDBRow_15;

				}

				if (!whetherReject_tDBRow_15) {

					row28 = new row28Struct();

				}

				tos_count_tDBRow_15++;

				/**
				 * [tDBRow_15 main ] stop
				 */

				/**
				 * [tDBRow_15 process_data_begin ] start
				 */

				currentComponent = "tDBRow_15";

				/**
				 * [tDBRow_15 process_data_begin ] stop
				 */
// Start of branch "row28"
				if (row28 != null) {

					/**
					 * [tDBCommit_15 main ] start
					 */

					currentComponent = "tDBCommit_15";

					if (execStat) {
						runStat.updateStatOnConnection(iterateId, 1, 1

								, "row28"

						);
					}

					java.sql.Connection conn_tDBCommit_15 = (java.sql.Connection) globalMap
							.get("conn_tMSSqlConnection_3");
					if (conn_tDBCommit_15 != null && !conn_tDBCommit_15.isClosed()) {

						conn_tDBCommit_15.commit();

					}

					tos_count_tDBCommit_15++;

					/**
					 * [tDBCommit_15 main ] stop
					 */

					/**
					 * [tDBCommit_15 process_data_begin ] start
					 */

					currentComponent = "tDBCommit_15";

					/**
					 * [tDBCommit_15 process_data_begin ] stop
					 */

					/**
					 * [tDBCommit_15 process_data_end ] start
					 */

					currentComponent = "tDBCommit_15";

					/**
					 * [tDBCommit_15 process_data_end ] stop
					 */

				} // End of branch "row28"

// Start of branch "row29"
				if (row29 != null) {

					/**
					 * [tLogRow_14 main ] start
					 */

					currentComponent = "tLogRow_14";

					if (execStat) {
						runStat.updateStatOnConnection(iterateId, 1, 1

								, "row29"

						);
					}

///////////////////////		

					strBuffer_tLogRow_14 = new StringBuilder();

					if (row29.errorCode != null) { //

						strBuffer_tLogRow_14.append(String.valueOf(row29.errorCode));

					} //

					strBuffer_tLogRow_14.append("|");

					if (row29.errorMessage != null) { //

						strBuffer_tLogRow_14.append(String.valueOf(row29.errorMessage));

					} //

					if (globalMap.get("tLogRow_CONSOLE") != null) {
						consoleOut_tLogRow_14 = (java.io.PrintStream) globalMap.get("tLogRow_CONSOLE");
					} else {
						consoleOut_tLogRow_14 = new java.io.PrintStream(new java.io.BufferedOutputStream(System.out));
						globalMap.put("tLogRow_CONSOLE", consoleOut_tLogRow_14);
					}
					consoleOut_tLogRow_14.println(strBuffer_tLogRow_14.toString());
					consoleOut_tLogRow_14.flush();
					nb_line_tLogRow_14++;
//////

//////                    

///////////////////////    			

					tos_count_tLogRow_14++;

					/**
					 * [tLogRow_14 main ] stop
					 */

					/**
					 * [tLogRow_14 process_data_begin ] start
					 */

					currentComponent = "tLogRow_14";

					/**
					 * [tLogRow_14 process_data_begin ] stop
					 */

					/**
					 * [tLogRow_14 process_data_end ] start
					 */

					currentComponent = "tLogRow_14";

					/**
					 * [tLogRow_14 process_data_end ] stop
					 */

				} // End of branch "row29"

				/**
				 * [tDBRow_15 process_data_end ] start
				 */

				currentComponent = "tDBRow_15";

				/**
				 * [tDBRow_15 process_data_end ] stop
				 */

				/**
				 * [tDBRow_15 end ] start
				 */

				currentComponent = "tDBRow_15";

				stmt_tDBRow_15.close();
				resourceMap.remove("stmt_tDBRow_15");
				resourceMap.put("statementClosed_tDBRow_15", true);
				resourceMap.put("finish_tDBRow_15", true);

				ok_Hash.put("tDBRow_15", true);
				end_Hash.put("tDBRow_15", System.currentTimeMillis());

				tStatCatcher_1.addMessage("end", "tDBRow_15", end_Hash.get("tDBRow_15") - start_Hash.get("tDBRow_15"));
				tStatCatcher_1Process(globalMap);

				/**
				 * [tDBRow_15 end ] stop
				 */

				/**
				 * [tDBCommit_15 end ] start
				 */

				currentComponent = "tDBCommit_15";

				if (execStat) {
					runStat.updateStat(resourceMap, iterateId, 2, 0, "row28");
				}

				ok_Hash.put("tDBCommit_15", true);
				end_Hash.put("tDBCommit_15", System.currentTimeMillis());

				/**
				 * [tDBCommit_15 end ] stop
				 */

				/**
				 * [tLogRow_14 end ] start
				 */

				currentComponent = "tLogRow_14";

//////
//////
				globalMap.put("tLogRow_14_NB_LINE", nb_line_tLogRow_14);

///////////////////////    			

				if (execStat) {
					runStat.updateStat(resourceMap, iterateId, 2, 0, "row29");
				}

				ok_Hash.put("tLogRow_14", true);
				end_Hash.put("tLogRow_14", System.currentTimeMillis());

				/**
				 * [tLogRow_14 end ] stop
				 */

			} // end the resume

			if (resumeEntryMethodName == null || globalResumeTicket) {
				resumeUtil.addLog("CHECKPOINT", "CONNECTION:SUBJOB_OK:tDBRow_15:OnSubjobOk", "",
						Thread.currentThread().getId() + "", "", "", "", "", "");
			}

			if (execStat) {
				runStat.updateStatOnConnection("OnSubjobOk14", 0, "ok");
			}

			tDBRow_16Process(globalMap);

		} catch (java.lang.Exception e) {

			TalendException te = new TalendException(e, currentComponent, globalMap);

			throw te;
		} catch (java.lang.Error error) {

			runStat.stopThreadStat();

			throw error;
		} finally {

			try {

				/**
				 * [tDBRow_15 finally ] start
				 */

				currentComponent = "tDBRow_15";

				if (resourceMap.get("statementClosed_tDBRow_15") == null) {
					java.sql.Statement stmtToClose_tDBRow_15 = null;
					if ((stmtToClose_tDBRow_15 = (java.sql.Statement) resourceMap.remove("stmt_tDBRow_15")) != null) {
						stmtToClose_tDBRow_15.close();
					}
				}

				/**
				 * [tDBRow_15 finally ] stop
				 */

				/**
				 * [tDBCommit_15 finally ] start
				 */

				currentComponent = "tDBCommit_15";

				/**
				 * [tDBCommit_15 finally ] stop
				 */

				/**
				 * [tLogRow_14 finally ] start
				 */

				currentComponent = "tLogRow_14";

				/**
				 * [tLogRow_14 finally ] stop
				 */

			} catch (java.lang.Exception e) {
				// ignore
			} catch (java.lang.Error error) {
				// ignore
			}
			resourceMap = null;
		}

		globalMap.put("tDBRow_15_SUBPROCESS_STATE", 1);
	}

	public static class row31Struct implements routines.system.IPersistableRow<row31Struct> {
		final static byte[] commonByteArrayLock_WIPO_PROJECTS_G3b_Mig_UD = new byte[0];
		static byte[] commonByteArray_WIPO_PROJECTS_G3b_Mig_UD = new byte[0];

		public void readData(ObjectInputStream dis) {

			synchronized (commonByteArrayLock_WIPO_PROJECTS_G3b_Mig_UD) {

				try {

					int length = 0;

				}

				finally {
				}

			}

		}

		public void writeData(ObjectOutputStream dos) {
			try {

			}

			finally {
			}

		}

		public String toString() {

			StringBuilder sb = new StringBuilder();
			sb.append(super.toString());
			sb.append("[");
			sb.append("]");

			return sb.toString();
		}

		/**
		 * Compare keys
		 */
		public int compareTo(row31Struct other) {

			int returnValue = -1;

			return returnValue;
		}

		private int checkNullsAndCompare(Object object1, Object object2) {
			int returnValue = 0;
			if (object1 instanceof Comparable && object2 instanceof Comparable) {
				returnValue = ((Comparable) object1).compareTo(object2);
			} else if (object1 != null && object2 != null) {
				returnValue = compareStrings(object1.toString(), object2.toString());
			} else if (object1 == null && object2 != null) {
				returnValue = 1;
			} else if (object1 != null && object2 == null) {
				returnValue = -1;
			} else {
				returnValue = 0;
			}

			return returnValue;
		}

		private int compareStrings(String string1, String string2) {
			return string1.compareTo(string2);
		}

	}

	public static class row32Struct implements routines.system.IPersistableRow<row32Struct> {
		final static byte[] commonByteArrayLock_WIPO_PROJECTS_G3b_Mig_UD = new byte[0];
		static byte[] commonByteArray_WIPO_PROJECTS_G3b_Mig_UD = new byte[0];

		public String errorCode;

		public String getErrorCode() {
			return this.errorCode;
		}

		public String errorMessage;

		public String getErrorMessage() {
			return this.errorMessage;
		}

		private String readString(ObjectInputStream dis) throws IOException {
			String strReturn = null;
			int length = 0;
			length = dis.readInt();
			if (length == -1) {
				strReturn = null;
			} else {
				if (length > commonByteArray_WIPO_PROJECTS_G3b_Mig_UD.length) {
					if (length < 1024 && commonByteArray_WIPO_PROJECTS_G3b_Mig_UD.length == 0) {
						commonByteArray_WIPO_PROJECTS_G3b_Mig_UD = new byte[1024];
					} else {
						commonByteArray_WIPO_PROJECTS_G3b_Mig_UD = new byte[2 * length];
					}
				}
				dis.readFully(commonByteArray_WIPO_PROJECTS_G3b_Mig_UD, 0, length);
				strReturn = new String(commonByteArray_WIPO_PROJECTS_G3b_Mig_UD, 0, length, utf8Charset);
			}
			return strReturn;
		}

		private void writeString(String str, ObjectOutputStream dos) throws IOException {
			if (str == null) {
				dos.writeInt(-1);
			} else {
				byte[] byteArray = str.getBytes(utf8Charset);
				dos.writeInt(byteArray.length);
				dos.write(byteArray);
			}
		}

		public void readData(ObjectInputStream dis) {

			synchronized (commonByteArrayLock_WIPO_PROJECTS_G3b_Mig_UD) {

				try {

					int length = 0;

					this.errorCode = readString(dis);

					this.errorMessage = readString(dis);

				} catch (IOException e) {
					throw new RuntimeException(e);

				}

			}

		}

		public void writeData(ObjectOutputStream dos) {
			try {

				// String

				writeString(this.errorCode, dos);

				// String

				writeString(this.errorMessage, dos);

			} catch (IOException e) {
				throw new RuntimeException(e);
			}

		}

		public String toString() {

			StringBuilder sb = new StringBuilder();
			sb.append(super.toString());
			sb.append("[");
			sb.append("errorCode=" + errorCode);
			sb.append(",errorMessage=" + errorMessage);
			sb.append("]");

			return sb.toString();
		}

		/**
		 * Compare keys
		 */
		public int compareTo(row32Struct other) {

			int returnValue = -1;

			return returnValue;
		}

		private int checkNullsAndCompare(Object object1, Object object2) {
			int returnValue = 0;
			if (object1 instanceof Comparable && object2 instanceof Comparable) {
				returnValue = ((Comparable) object1).compareTo(object2);
			} else if (object1 != null && object2 != null) {
				returnValue = compareStrings(object1.toString(), object2.toString());
			} else if (object1 == null && object2 != null) {
				returnValue = 1;
			} else if (object1 != null && object2 == null) {
				returnValue = -1;
			} else {
				returnValue = 0;
			}

			return returnValue;
		}

		private int compareStrings(String string1, String string2) {
			return string1.compareTo(string2);
		}

	}

	public void tDBRow_16Process(final java.util.Map<String, Object> globalMap) throws TalendException {
		globalMap.put("tDBRow_16_SUBPROCESS_STATE", 0);

		final boolean execStat = this.execStat;

		String iterateId = "";

		String currentComponent = "";
		java.util.Map<String, Object> resourceMap = new java.util.HashMap<String, Object>();

		try {
			// TDI-39566 avoid throwing an useless Exception
			boolean resumeIt = true;
			if (globalResumeTicket == false && resumeEntryMethodName != null) {
				String currentMethodName = new java.lang.Exception().getStackTrace()[0].getMethodName();
				resumeIt = resumeEntryMethodName.equals(currentMethodName);
			}
			if (resumeIt || globalResumeTicket) { // start the resume
				globalResumeTicket = true;

				row31Struct row31 = new row31Struct();
				row32Struct row32 = new row32Struct();

				/**
				 * [tDBCommit_16 begin ] start
				 */

				ok_Hash.put("tDBCommit_16", false);
				start_Hash.put("tDBCommit_16", System.currentTimeMillis());

				currentComponent = "tDBCommit_16";

				if (execStat) {
					runStat.updateStatOnConnection(resourceMap, iterateId, 0, 0, "row31");
				}

				int tos_count_tDBCommit_16 = 0;

				/**
				 * [tDBCommit_16 begin ] stop
				 */

				/**
				 * [tLogRow_17 begin ] start
				 */

				ok_Hash.put("tLogRow_17", false);
				start_Hash.put("tLogRow_17", System.currentTimeMillis());

				currentComponent = "tLogRow_17";

				if (execStat) {
					runStat.updateStatOnConnection(resourceMap, iterateId, 0, 0, "row32");
				}

				int tos_count_tLogRow_17 = 0;

				///////////////////////

				final String OUTPUT_FIELD_SEPARATOR_tLogRow_17 = "|";
				java.io.PrintStream consoleOut_tLogRow_17 = null;

				StringBuilder strBuffer_tLogRow_17 = null;
				int nb_line_tLogRow_17 = 0;
///////////////////////    			

				/**
				 * [tLogRow_17 begin ] stop
				 */

				/**
				 * [tDBRow_16 begin ] start
				 */

				ok_Hash.put("tDBRow_16", false);
				start_Hash.put("tDBRow_16", System.currentTimeMillis());

				tStatCatcher_1.addMessage("begin", "tDBRow_16");
				tStatCatcher_1Process(globalMap);

				currentComponent = "tDBRow_16";

				int tos_count_tDBRow_16 = 0;

				java.sql.Connection conn_tDBRow_16 = null;
				String query_tDBRow_16 = "";
				boolean whetherReject_tDBRow_16 = false;
				conn_tDBRow_16 = (java.sql.Connection) globalMap.get("conn_tMSSqlConnection_3");

				resourceMap.put("conn_tDBRow_16", conn_tDBRow_16);
				java.sql.Statement stmt_tDBRow_16 = conn_tDBRow_16.createStatement();
				resourceMap.put("stmt_tDBRow_16", stmt_tDBRow_16);

				/**
				 * [tDBRow_16 begin ] stop
				 */

				/**
				 * [tDBRow_16 main ] start
				 */

				currentComponent = "tDBRow_16";

				row31 = null;

				row32 = null;

				query_tDBRow_16 = "TRUNCATE TABLE   wrk_person_addr;    \n\nINSERT INTO  wrk_person_addr   \n				( PERSON_GROUP_CODE , \n				AGENT_CODE , "
						+ "\n				PERSON_NAME , \n				PERSON_NAME_LANG2 ,\n				NATIONALITY_COUNTRY_CODE , \n				IND_COMPANY , \n				LEGAL_NATURE , "
						+ "\n				LEGAL_NATURE_LANG2 ,\n				LEGAL_ID_TYPE , \n				LEGAL_ID_NBR , \n				INDIVIDUAL_ID_TYPE , \n				INDIVIDUAL_ID_NBR ,"
						+ " \n				EMAIL , \n				TELEPHONE , \n				RESIDENCE_COUNTRY_CODE , \n				STATE_NAME , \n				STATE_CODE , \n				CITY_CODE ,"
						+ "\n				CITY_NAME , \n				ADDRESS_ZONE , \n				ADDRESS_STREET , \n				ADDRESS_STREET_LANG2 ,\n				ZIP_CODE , \n				PERSON_N"
						+ "BR , \n				ADDR_NBR , \n				REF_NBR )  \n		SELECT\n				 PERSON_GROUP_CODE,\n				 CAST(null as NUMERIC (4)),\n				 PERSON"
						+ "_NAME,\n				 PERSON_NAME_LANG2,\n				 NATIONALITY_COUNTRY_CODE,\n				 IND_COMPANY,\n				 LEGAL_NATURE,\n				 LEGAL_NATUR"
						+ "E_LANG2,\n				 LEGAL_ID_TYPE,\n				 LEGAL_ID_NBR,\n				 INDIVIDUAL_ID_TYPE,\n				 INDIVIDUAL_ID_NBR,\n				 EMAIL,\n				 "
						+ "TELEPHONE,\n				 RESIDENCE_COUNTRY_CODE,\n				 STATE_NAME,\n				 STATE_CODE,\n				 CITY_CODE,\n				 CITY_NAME,\n				 ADD"
						+ "RESS_ZONE,\n				 ADDRESS_STREET,\n				 ADDRESS_STREET_LANG2,\n				 ZIP_CODE,\n				 PERSON_NBR,\n				 ADDR_NBR,\n				 row"
						+ "id\n		FROM  wrk_userdoc_owners T;\n";
				whetherReject_tDBRow_16 = false;
				globalMap.put("tDBRow_16_QUERY", query_tDBRow_16);
				try {
					stmt_tDBRow_16.execute(query_tDBRow_16);

				} catch (java.lang.Exception e) {
					whetherReject_tDBRow_16 = true;

					row32 = new row32Struct();

					row32.errorCode = ((java.sql.SQLException) e).getSQLState();
					row32.errorMessage = e.getMessage() + " - Line: " + tos_count_tDBRow_16;

				}

				if (!whetherReject_tDBRow_16) {

					row31 = new row31Struct();

				}

				tos_count_tDBRow_16++;

				/**
				 * [tDBRow_16 main ] stop
				 */

				/**
				 * [tDBRow_16 process_data_begin ] start
				 */

				currentComponent = "tDBRow_16";

				/**
				 * [tDBRow_16 process_data_begin ] stop
				 */
// Start of branch "row31"
				if (row31 != null) {

					/**
					 * [tDBCommit_16 main ] start
					 */

					currentComponent = "tDBCommit_16";

					if (execStat) {
						runStat.updateStatOnConnection(iterateId, 1, 1

								, "row31"

						);
					}

					java.sql.Connection conn_tDBCommit_16 = (java.sql.Connection) globalMap
							.get("conn_tMSSqlConnection_3");
					if (conn_tDBCommit_16 != null && !conn_tDBCommit_16.isClosed()) {

						conn_tDBCommit_16.commit();

					}

					tos_count_tDBCommit_16++;

					/**
					 * [tDBCommit_16 main ] stop
					 */

					/**
					 * [tDBCommit_16 process_data_begin ] start
					 */

					currentComponent = "tDBCommit_16";

					/**
					 * [tDBCommit_16 process_data_begin ] stop
					 */

					/**
					 * [tDBCommit_16 process_data_end ] start
					 */

					currentComponent = "tDBCommit_16";

					/**
					 * [tDBCommit_16 process_data_end ] stop
					 */

				} // End of branch "row31"

// Start of branch "row32"
				if (row32 != null) {

					/**
					 * [tLogRow_17 main ] start
					 */

					currentComponent = "tLogRow_17";

					if (execStat) {
						runStat.updateStatOnConnection(iterateId, 1, 1

								, "row32"

						);
					}

///////////////////////		

					strBuffer_tLogRow_17 = new StringBuilder();

					if (row32.errorCode != null) { //

						strBuffer_tLogRow_17.append(String.valueOf(row32.errorCode));

					} //

					strBuffer_tLogRow_17.append("|");

					if (row32.errorMessage != null) { //

						strBuffer_tLogRow_17.append(String.valueOf(row32.errorMessage));

					} //

					if (globalMap.get("tLogRow_CONSOLE") != null) {
						consoleOut_tLogRow_17 = (java.io.PrintStream) globalMap.get("tLogRow_CONSOLE");
					} else {
						consoleOut_tLogRow_17 = new java.io.PrintStream(new java.io.BufferedOutputStream(System.out));
						globalMap.put("tLogRow_CONSOLE", consoleOut_tLogRow_17);
					}
					consoleOut_tLogRow_17.println(strBuffer_tLogRow_17.toString());
					consoleOut_tLogRow_17.flush();
					nb_line_tLogRow_17++;
//////

//////                    

///////////////////////    			

					tos_count_tLogRow_17++;

					/**
					 * [tLogRow_17 main ] stop
					 */

					/**
					 * [tLogRow_17 process_data_begin ] start
					 */

					currentComponent = "tLogRow_17";

					/**
					 * [tLogRow_17 process_data_begin ] stop
					 */

					/**
					 * [tLogRow_17 process_data_end ] start
					 */

					currentComponent = "tLogRow_17";

					/**
					 * [tLogRow_17 process_data_end ] stop
					 */

				} // End of branch "row32"

				/**
				 * [tDBRow_16 process_data_end ] start
				 */

				currentComponent = "tDBRow_16";

				/**
				 * [tDBRow_16 process_data_end ] stop
				 */

				/**
				 * [tDBRow_16 end ] start
				 */

				currentComponent = "tDBRow_16";

				stmt_tDBRow_16.close();
				resourceMap.remove("stmt_tDBRow_16");
				resourceMap.put("statementClosed_tDBRow_16", true);
				resourceMap.put("finish_tDBRow_16", true);

				ok_Hash.put("tDBRow_16", true);
				end_Hash.put("tDBRow_16", System.currentTimeMillis());

				tStatCatcher_1.addMessage("end", "tDBRow_16", end_Hash.get("tDBRow_16") - start_Hash.get("tDBRow_16"));
				tStatCatcher_1Process(globalMap);

				/**
				 * [tDBRow_16 end ] stop
				 */

				/**
				 * [tDBCommit_16 end ] start
				 */

				currentComponent = "tDBCommit_16";

				if (execStat) {
					runStat.updateStat(resourceMap, iterateId, 2, 0, "row31");
				}

				ok_Hash.put("tDBCommit_16", true);
				end_Hash.put("tDBCommit_16", System.currentTimeMillis());

				/**
				 * [tDBCommit_16 end ] stop
				 */

				/**
				 * [tLogRow_17 end ] start
				 */

				currentComponent = "tLogRow_17";

//////
//////
				globalMap.put("tLogRow_17_NB_LINE", nb_line_tLogRow_17);

///////////////////////    			

				if (execStat) {
					runStat.updateStat(resourceMap, iterateId, 2, 0, "row32");
				}

				ok_Hash.put("tLogRow_17", true);
				end_Hash.put("tLogRow_17", System.currentTimeMillis());

				/**
				 * [tLogRow_17 end ] stop
				 */

			} // end the resume

			if (resumeEntryMethodName == null || globalResumeTicket) {
				resumeUtil.addLog("CHECKPOINT", "CONNECTION:SUBJOB_OK:tDBRow_16:OnSubjobOk1", "",
						Thread.currentThread().getId() + "", "", "", "", "", "");
			}

			if (execStat) {
				runStat.updateStatOnConnection("OnSubjobOk17", 0, "ok");
			}

			tDBInput_15Process(globalMap);

			if (resumeEntryMethodName == null || globalResumeTicket) {
				resumeUtil.addLog("CHECKPOINT", "CONNECTION:SUBJOB_OK:tDBRow_16:OnSubjobOk2", "",
						Thread.currentThread().getId() + "", "", "", "", "", "");
			}

			if (execStat) {
				runStat.updateStatOnConnection("OnSubjobOk3", 0, "ok");
			}

			tDBRow_1Process(globalMap);

		} catch (java.lang.Exception e) {

			TalendException te = new TalendException(e, currentComponent, globalMap);

			throw te;
		} catch (java.lang.Error error) {

			runStat.stopThreadStat();

			throw error;
		} finally {

			try {

				/**
				 * [tDBRow_16 finally ] start
				 */

				currentComponent = "tDBRow_16";

				if (resourceMap.get("statementClosed_tDBRow_16") == null) {
					java.sql.Statement stmtToClose_tDBRow_16 = null;
					if ((stmtToClose_tDBRow_16 = (java.sql.Statement) resourceMap.remove("stmt_tDBRow_16")) != null) {
						stmtToClose_tDBRow_16.close();
					}
				}

				/**
				 * [tDBRow_16 finally ] stop
				 */

				/**
				 * [tDBCommit_16 finally ] start
				 */

				currentComponent = "tDBCommit_16";

				/**
				 * [tDBCommit_16 finally ] stop
				 */

				/**
				 * [tLogRow_17 finally ] start
				 */

				currentComponent = "tLogRow_17";

				/**
				 * [tLogRow_17 finally ] stop
				 */

			} catch (java.lang.Exception e) {
				// ignore
			} catch (java.lang.Error error) {
				// ignore
			}
			resourceMap = null;
		}

		globalMap.put("tDBRow_16_SUBPROCESS_STATE", 1);
	}

	public static class row67Struct implements routines.system.IPersistableRow<row67Struct> {
		final static byte[] commonByteArrayLock_WIPO_PROJECTS_G3b_Mig_UD = new byte[0];
		static byte[] commonByteArray_WIPO_PROJECTS_G3b_Mig_UD = new byte[0];

		public String Message;

		public String getMessage() {
			return this.Message;
		}

		public java.util.Date Time;

		public java.util.Date getTime() {
			return this.Time;
		}

		private String readString(ObjectInputStream dis) throws IOException {
			String strReturn = null;
			int length = 0;
			length = dis.readInt();
			if (length == -1) {
				strReturn = null;
			} else {
				if (length > commonByteArray_WIPO_PROJECTS_G3b_Mig_UD.length) {
					if (length < 1024 && commonByteArray_WIPO_PROJECTS_G3b_Mig_UD.length == 0) {
						commonByteArray_WIPO_PROJECTS_G3b_Mig_UD = new byte[1024];
					} else {
						commonByteArray_WIPO_PROJECTS_G3b_Mig_UD = new byte[2 * length];
					}
				}
				dis.readFully(commonByteArray_WIPO_PROJECTS_G3b_Mig_UD, 0, length);
				strReturn = new String(commonByteArray_WIPO_PROJECTS_G3b_Mig_UD, 0, length, utf8Charset);
			}
			return strReturn;
		}

		private void writeString(String str, ObjectOutputStream dos) throws IOException {
			if (str == null) {
				dos.writeInt(-1);
			} else {
				byte[] byteArray = str.getBytes(utf8Charset);
				dos.writeInt(byteArray.length);
				dos.write(byteArray);
			}
		}

		private java.util.Date readDate(ObjectInputStream dis) throws IOException {
			java.util.Date dateReturn = null;
			int length = 0;
			length = dis.readByte();
			if (length == -1) {
				dateReturn = null;
			} else {
				dateReturn = new Date(dis.readLong());
			}
			return dateReturn;
		}

		private void writeDate(java.util.Date date1, ObjectOutputStream dos) throws IOException {
			if (date1 == null) {
				dos.writeByte(-1);
			} else {
				dos.writeByte(0);
				dos.writeLong(date1.getTime());
			}
		}

		public void readData(ObjectInputStream dis) {

			synchronized (commonByteArrayLock_WIPO_PROJECTS_G3b_Mig_UD) {

				try {

					int length = 0;

					this.Message = readString(dis);

					this.Time = readDate(dis);

				} catch (IOException e) {
					throw new RuntimeException(e);

				}

			}

		}

		public void writeData(ObjectOutputStream dos) {
			try {

				// String

				writeString(this.Message, dos);

				// java.util.Date

				writeDate(this.Time, dos);

			} catch (IOException e) {
				throw new RuntimeException(e);
			}

		}

		public String toString() {

			StringBuilder sb = new StringBuilder();
			sb.append(super.toString());
			sb.append("[");
			sb.append("Message=" + Message);
			sb.append(",Time=" + String.valueOf(Time));
			sb.append("]");

			return sb.toString();
		}

		/**
		 * Compare keys
		 */
		public int compareTo(row67Struct other) {

			int returnValue = -1;

			return returnValue;
		}

		private int checkNullsAndCompare(Object object1, Object object2) {
			int returnValue = 0;
			if (object1 instanceof Comparable && object2 instanceof Comparable) {
				returnValue = ((Comparable) object1).compareTo(object2);
			} else if (object1 != null && object2 != null) {
				returnValue = compareStrings(object1.toString(), object2.toString());
			} else if (object1 == null && object2 != null) {
				returnValue = 1;
			} else if (object1 != null && object2 == null) {
				returnValue = -1;
			} else {
				returnValue = 0;
			}

			return returnValue;
		}

		private int compareStrings(String string1, String string2) {
			return string1.compareTo(string2);
		}

	}

	public void tDBInput_15Process(final java.util.Map<String, Object> globalMap) throws TalendException {
		globalMap.put("tDBInput_15_SUBPROCESS_STATE", 0);

		final boolean execStat = this.execStat;

		String iterateId = "";

		String currentComponent = "";
		java.util.Map<String, Object> resourceMap = new java.util.HashMap<String, Object>();

		try {
			// TDI-39566 avoid throwing an useless Exception
			boolean resumeIt = true;
			if (globalResumeTicket == false && resumeEntryMethodName != null) {
				String currentMethodName = new java.lang.Exception().getStackTrace()[0].getMethodName();
				resumeIt = resumeEntryMethodName.equals(currentMethodName);
			}
			if (resumeIt || globalResumeTicket) { // start the resume
				globalResumeTicket = true;

				row67Struct row67 = new row67Struct();

				/**
				 * [tLogRow_15 begin ] start
				 */

				ok_Hash.put("tLogRow_15", false);
				start_Hash.put("tLogRow_15", System.currentTimeMillis());

				currentComponent = "tLogRow_15";

				if (execStat) {
					runStat.updateStatOnConnection(resourceMap, iterateId, 0, 0, "row67");
				}

				int tos_count_tLogRow_15 = 0;

				///////////////////////

				final String OUTPUT_FIELD_SEPARATOR_tLogRow_15 = "|";
				java.io.PrintStream consoleOut_tLogRow_15 = null;

				StringBuilder strBuffer_tLogRow_15 = null;
				int nb_line_tLogRow_15 = 0;
///////////////////////    			

				/**
				 * [tLogRow_15 begin ] stop
				 */

				/**
				 * [tDBInput_15 begin ] start
				 */

				ok_Hash.put("tDBInput_15", false);
				start_Hash.put("tDBInput_15", System.currentTimeMillis());

				currentComponent = "tDBInput_15";

				int tos_count_tDBInput_15 = 0;

				org.talend.designer.components.util.mssql.MSSqlGenerateTimestampUtil mssqlGTU_tDBInput_15 = org.talend.designer.components.util.mssql.MSSqlUtilFactory
						.getMSSqlGenerateTimestampUtil();

				java.util.List<String> talendToDBList_tDBInput_15 = new java.util.ArrayList();
				String[] talendToDBArray_tDBInput_15 = new String[] { "FLOAT", "NUMERIC", "NUMERIC IDENTITY", "DECIMAL",
						"DECIMAL IDENTITY", "REAL" };
				java.util.Collections.addAll(talendToDBList_tDBInput_15, talendToDBArray_tDBInput_15);
				int nb_line_tDBInput_15 = 0;
				java.sql.Connection conn_tDBInput_15 = null;
				conn_tDBInput_15 = (java.sql.Connection) globalMap.get("conn_tMSSqlConnection_3");

				String dbschema_tDBInput_15 = (String) globalMap.get("dbschema_tMSSqlConnection_3");

				java.sql.Statement stmt_tDBInput_15 = conn_tDBInput_15.createStatement();

				String dbquery_tDBInput_15 = "SELECT 'Step 1: populate work tables  to add  required data' ,GETDATE();";

				globalMap.put("tDBInput_15_QUERY", dbquery_tDBInput_15);
				java.sql.ResultSet rs_tDBInput_15 = null;

				try {
					rs_tDBInput_15 = stmt_tDBInput_15.executeQuery(dbquery_tDBInput_15);
					java.sql.ResultSetMetaData rsmd_tDBInput_15 = rs_tDBInput_15.getMetaData();
					int colQtyInRs_tDBInput_15 = rsmd_tDBInput_15.getColumnCount();

					String tmpContent_tDBInput_15 = null;

					while (rs_tDBInput_15.next()) {
						nb_line_tDBInput_15++;

						if (colQtyInRs_tDBInput_15 < 1) {
							row67.Message = null;
						} else {

							tmpContent_tDBInput_15 = rs_tDBInput_15.getString(1);
							if (tmpContent_tDBInput_15 != null) {
								if (talendToDBList_tDBInput_15.contains(
										rsmd_tDBInput_15.getColumnTypeName(1).toUpperCase(java.util.Locale.ENGLISH))) {
									row67.Message = FormatterUtils.formatUnwithE(tmpContent_tDBInput_15);
								} else {
									row67.Message = tmpContent_tDBInput_15;
								}
							} else {
								row67.Message = null;
							}
						}
						if (colQtyInRs_tDBInput_15 < 2) {
							row67.Time = null;
						} else {

							row67.Time = mssqlGTU_tDBInput_15.getDate(rsmd_tDBInput_15, rs_tDBInput_15, 2);

						}

						/**
						 * [tDBInput_15 begin ] stop
						 */

						/**
						 * [tDBInput_15 main ] start
						 */

						currentComponent = "tDBInput_15";

						tos_count_tDBInput_15++;

						/**
						 * [tDBInput_15 main ] stop
						 */

						/**
						 * [tDBInput_15 process_data_begin ] start
						 */

						currentComponent = "tDBInput_15";

						/**
						 * [tDBInput_15 process_data_begin ] stop
						 */

						/**
						 * [tLogRow_15 main ] start
						 */

						currentComponent = "tLogRow_15";

						if (execStat) {
							runStat.updateStatOnConnection(iterateId, 1, 1

									, "row67"

							);
						}

///////////////////////		

						strBuffer_tLogRow_15 = new StringBuilder();

						if (row67.Message != null) { //

							strBuffer_tLogRow_15.append(String.valueOf(row67.Message));

						} //

						strBuffer_tLogRow_15.append("|");

						if (row67.Time != null) { //

							strBuffer_tLogRow_15.append(FormatterUtils.format_Date(row67.Time, "yyyy-MM-dd HH:mm:ss"));

						} //

						if (globalMap.get("tLogRow_CONSOLE") != null) {
							consoleOut_tLogRow_15 = (java.io.PrintStream) globalMap.get("tLogRow_CONSOLE");
						} else {
							consoleOut_tLogRow_15 = new java.io.PrintStream(
									new java.io.BufferedOutputStream(System.out));
							globalMap.put("tLogRow_CONSOLE", consoleOut_tLogRow_15);
						}
						consoleOut_tLogRow_15.println(strBuffer_tLogRow_15.toString());
						consoleOut_tLogRow_15.flush();
						nb_line_tLogRow_15++;
//////

//////                    

///////////////////////    			

						tos_count_tLogRow_15++;

						/**
						 * [tLogRow_15 main ] stop
						 */

						/**
						 * [tLogRow_15 process_data_begin ] start
						 */

						currentComponent = "tLogRow_15";

						/**
						 * [tLogRow_15 process_data_begin ] stop
						 */

						/**
						 * [tLogRow_15 process_data_end ] start
						 */

						currentComponent = "tLogRow_15";

						/**
						 * [tLogRow_15 process_data_end ] stop
						 */

						/**
						 * [tDBInput_15 process_data_end ] start
						 */

						currentComponent = "tDBInput_15";

						/**
						 * [tDBInput_15 process_data_end ] stop
						 */

						/**
						 * [tDBInput_15 end ] start
						 */

						currentComponent = "tDBInput_15";

					}
				} finally {
					if (rs_tDBInput_15 != null) {
						rs_tDBInput_15.close();
					}
					if (stmt_tDBInput_15 != null) {
						stmt_tDBInput_15.close();
					}
				}
				globalMap.put("tDBInput_15_NB_LINE", nb_line_tDBInput_15);

				ok_Hash.put("tDBInput_15", true);
				end_Hash.put("tDBInput_15", System.currentTimeMillis());

				/**
				 * [tDBInput_15 end ] stop
				 */

				/**
				 * [tLogRow_15 end ] start
				 */

				currentComponent = "tLogRow_15";

//////
//////
				globalMap.put("tLogRow_15_NB_LINE", nb_line_tLogRow_15);

///////////////////////    			

				if (execStat) {
					runStat.updateStat(resourceMap, iterateId, 2, 0, "row67");
				}

				ok_Hash.put("tLogRow_15", true);
				end_Hash.put("tLogRow_15", System.currentTimeMillis());

				/**
				 * [tLogRow_15 end ] stop
				 */

			} // end the resume

		} catch (java.lang.Exception e) {

			TalendException te = new TalendException(e, currentComponent, globalMap);

			throw te;
		} catch (java.lang.Error error) {

			runStat.stopThreadStat();

			throw error;
		} finally {

			try {

				/**
				 * [tDBInput_15 finally ] start
				 */

				currentComponent = "tDBInput_15";

				/**
				 * [tDBInput_15 finally ] stop
				 */

				/**
				 * [tLogRow_15 finally ] start
				 */

				currentComponent = "tLogRow_15";

				/**
				 * [tLogRow_15 finally ] stop
				 */

			} catch (java.lang.Exception e) {
				// ignore
			} catch (java.lang.Error error) {
				// ignore
			}
			resourceMap = null;
		}

		globalMap.put("tDBInput_15_SUBPROCESS_STATE", 1);
	}

	public static class row3Struct implements routines.system.IPersistableRow<row3Struct> {
		final static byte[] commonByteArrayLock_WIPO_PROJECTS_G3b_Mig_UD = new byte[0];
		static byte[] commonByteArray_WIPO_PROJECTS_G3b_Mig_UD = new byte[0];

		public void readData(ObjectInputStream dis) {

			synchronized (commonByteArrayLock_WIPO_PROJECTS_G3b_Mig_UD) {

				try {

					int length = 0;

				}

				finally {
				}

			}

		}

		public void writeData(ObjectOutputStream dos) {
			try {

			}

			finally {
			}

		}

		public String toString() {

			StringBuilder sb = new StringBuilder();
			sb.append(super.toString());
			sb.append("[");
			sb.append("]");

			return sb.toString();
		}

		/**
		 * Compare keys
		 */
		public int compareTo(row3Struct other) {

			int returnValue = -1;

			return returnValue;
		}

		private int checkNullsAndCompare(Object object1, Object object2) {
			int returnValue = 0;
			if (object1 instanceof Comparable && object2 instanceof Comparable) {
				returnValue = ((Comparable) object1).compareTo(object2);
			} else if (object1 != null && object2 != null) {
				returnValue = compareStrings(object1.toString(), object2.toString());
			} else if (object1 == null && object2 != null) {
				returnValue = 1;
			} else if (object1 != null && object2 == null) {
				returnValue = -1;
			} else {
				returnValue = 0;
			}

			return returnValue;
		}

		private int compareStrings(String string1, String string2) {
			return string1.compareTo(string2);
		}

	}

	public void tDBRow_1Process(final java.util.Map<String, Object> globalMap) throws TalendException {
		globalMap.put("tDBRow_1_SUBPROCESS_STATE", 0);

		final boolean execStat = this.execStat;

		String iterateId = "";

		String currentComponent = "";
		java.util.Map<String, Object> resourceMap = new java.util.HashMap<String, Object>();

		try {
			// TDI-39566 avoid throwing an useless Exception
			boolean resumeIt = true;
			if (globalResumeTicket == false && resumeEntryMethodName != null) {
				String currentMethodName = new java.lang.Exception().getStackTrace()[0].getMethodName();
				resumeIt = resumeEntryMethodName.equals(currentMethodName);
			}
			if (resumeIt || globalResumeTicket) { // start the resume
				globalResumeTicket = true;

				row3Struct row3 = new row3Struct();

				/**
				 * [tDBCommit_1 begin ] start
				 */

				ok_Hash.put("tDBCommit_1", false);
				start_Hash.put("tDBCommit_1", System.currentTimeMillis());

				currentComponent = "tDBCommit_1";

				if (execStat) {
					runStat.updateStatOnConnection(resourceMap, iterateId, 0, 0, "row3");
				}

				int tos_count_tDBCommit_1 = 0;

				/**
				 * [tDBCommit_1 begin ] stop
				 */

				/**
				 * [tDBRow_1 begin ] start
				 */

				ok_Hash.put("tDBRow_1", false);
				start_Hash.put("tDBRow_1", System.currentTimeMillis());

				tStatCatcher_1.addMessage("begin", "tDBRow_1");
				tStatCatcher_1Process(globalMap);

				currentComponent = "tDBRow_1";

				int tos_count_tDBRow_1 = 0;

				java.sql.Connection conn_tDBRow_1 = null;
				String query_tDBRow_1 = "";
				boolean whetherReject_tDBRow_1 = false;
				conn_tDBRow_1 = (java.sql.Connection) globalMap.get("conn_tMSSqlConnection_3");

				resourceMap.put("conn_tDBRow_1", conn_tDBRow_1);
				java.sql.Statement stmt_tDBRow_1 = conn_tDBRow_1.createStatement();
				resourceMap.put("stmt_tDBRow_1", stmt_tDBRow_1);

				/**
				 * [tDBRow_1 begin ] stop
				 */

				/**
				 * [tDBRow_1 main ] start
				 */

				currentComponent = "tDBRow_1";

				row3 = null;

				query_tDBRow_1 = "EXEC IMPORTSETPERSONNBR;";
				whetherReject_tDBRow_1 = false;
				globalMap.put("tDBRow_1_QUERY", query_tDBRow_1);
				try {
					stmt_tDBRow_1.execute(query_tDBRow_1);

				} catch (java.lang.Exception e) {
					whetherReject_tDBRow_1 = true;

					System.err.print(e.getMessage());

				}

				if (!whetherReject_tDBRow_1) {

					row3 = new row3Struct();

				}

				tos_count_tDBRow_1++;

				/**
				 * [tDBRow_1 main ] stop
				 */

				/**
				 * [tDBRow_1 process_data_begin ] start
				 */

				currentComponent = "tDBRow_1";

				/**
				 * [tDBRow_1 process_data_begin ] stop
				 */
// Start of branch "row3"
				if (row3 != null) {

					/**
					 * [tDBCommit_1 main ] start
					 */

					currentComponent = "tDBCommit_1";

					if (execStat) {
						runStat.updateStatOnConnection(iterateId, 1, 1

								, "row3"

						);
					}

					java.sql.Connection conn_tDBCommit_1 = (java.sql.Connection) globalMap
							.get("conn_tMSSqlConnection_3");
					if (conn_tDBCommit_1 != null && !conn_tDBCommit_1.isClosed()) {

						conn_tDBCommit_1.commit();

					}

					tos_count_tDBCommit_1++;

					/**
					 * [tDBCommit_1 main ] stop
					 */

					/**
					 * [tDBCommit_1 process_data_begin ] start
					 */

					currentComponent = "tDBCommit_1";

					/**
					 * [tDBCommit_1 process_data_begin ] stop
					 */

					/**
					 * [tDBCommit_1 process_data_end ] start
					 */

					currentComponent = "tDBCommit_1";

					/**
					 * [tDBCommit_1 process_data_end ] stop
					 */

				} // End of branch "row3"

				/**
				 * [tDBRow_1 process_data_end ] start
				 */

				currentComponent = "tDBRow_1";

				/**
				 * [tDBRow_1 process_data_end ] stop
				 */

				/**
				 * [tDBRow_1 end ] start
				 */

				currentComponent = "tDBRow_1";

				stmt_tDBRow_1.close();
				resourceMap.remove("stmt_tDBRow_1");
				resourceMap.put("statementClosed_tDBRow_1", true);
				resourceMap.put("finish_tDBRow_1", true);

				ok_Hash.put("tDBRow_1", true);
				end_Hash.put("tDBRow_1", System.currentTimeMillis());

				tStatCatcher_1.addMessage("end", "tDBRow_1", end_Hash.get("tDBRow_1") - start_Hash.get("tDBRow_1"));
				tStatCatcher_1Process(globalMap);

				/**
				 * [tDBRow_1 end ] stop
				 */

				/**
				 * [tDBCommit_1 end ] start
				 */

				currentComponent = "tDBCommit_1";

				if (execStat) {
					runStat.updateStat(resourceMap, iterateId, 2, 0, "row3");
				}

				ok_Hash.put("tDBCommit_1", true);
				end_Hash.put("tDBCommit_1", System.currentTimeMillis());

				if (execStat) {
					runStat.updateStatOnConnection("OnComponentOk2", 0, "ok");
				}
				tDBInput_2Process(globalMap);

				/**
				 * [tDBCommit_1 end ] stop
				 */

			} // end the resume

			if (resumeEntryMethodName == null || globalResumeTicket) {
				resumeUtil.addLog("CHECKPOINT", "CONNECTION:SUBJOB_OK:tDBRow_1:OnSubjobOk", "",
						Thread.currentThread().getId() + "", "", "", "", "", "");
			}

			if (execStat) {
				runStat.updateStatOnConnection("OnSubjobOk4", 0, "ok");
			}

			tDBRow_11Process(globalMap);

		} catch (java.lang.Exception e) {

			TalendException te = new TalendException(e, currentComponent, globalMap);

			throw te;
		} catch (java.lang.Error error) {

			runStat.stopThreadStat();

			throw error;
		} finally {

			try {

				/**
				 * [tDBRow_1 finally ] start
				 */

				currentComponent = "tDBRow_1";

				if (resourceMap.get("statementClosed_tDBRow_1") == null) {
					java.sql.Statement stmtToClose_tDBRow_1 = null;
					if ((stmtToClose_tDBRow_1 = (java.sql.Statement) resourceMap.remove("stmt_tDBRow_1")) != null) {
						stmtToClose_tDBRow_1.close();
					}
				}

				/**
				 * [tDBRow_1 finally ] stop
				 */

				/**
				 * [tDBCommit_1 finally ] start
				 */

				currentComponent = "tDBCommit_1";

				/**
				 * [tDBCommit_1 finally ] stop
				 */

			} catch (java.lang.Exception e) {
				// ignore
			} catch (java.lang.Error error) {
				// ignore
			}
			resourceMap = null;
		}

		globalMap.put("tDBRow_1_SUBPROCESS_STATE", 1);
	}

	public static class row4Struct implements routines.system.IPersistableRow<row4Struct> {
		final static byte[] commonByteArrayLock_WIPO_PROJECTS_G3b_Mig_UD = new byte[0];
		static byte[] commonByteArray_WIPO_PROJECTS_G3b_Mig_UD = new byte[0];

		public String Message;

		public String getMessage() {
			return this.Message;
		}

		public java.util.Date Time;

		public java.util.Date getTime() {
			return this.Time;
		}

		private String readString(ObjectInputStream dis) throws IOException {
			String strReturn = null;
			int length = 0;
			length = dis.readInt();
			if (length == -1) {
				strReturn = null;
			} else {
				if (length > commonByteArray_WIPO_PROJECTS_G3b_Mig_UD.length) {
					if (length < 1024 && commonByteArray_WIPO_PROJECTS_G3b_Mig_UD.length == 0) {
						commonByteArray_WIPO_PROJECTS_G3b_Mig_UD = new byte[1024];
					} else {
						commonByteArray_WIPO_PROJECTS_G3b_Mig_UD = new byte[2 * length];
					}
				}
				dis.readFully(commonByteArray_WIPO_PROJECTS_G3b_Mig_UD, 0, length);
				strReturn = new String(commonByteArray_WIPO_PROJECTS_G3b_Mig_UD, 0, length, utf8Charset);
			}
			return strReturn;
		}

		private void writeString(String str, ObjectOutputStream dos) throws IOException {
			if (str == null) {
				dos.writeInt(-1);
			} else {
				byte[] byteArray = str.getBytes(utf8Charset);
				dos.writeInt(byteArray.length);
				dos.write(byteArray);
			}
		}

		private java.util.Date readDate(ObjectInputStream dis) throws IOException {
			java.util.Date dateReturn = null;
			int length = 0;
			length = dis.readByte();
			if (length == -1) {
				dateReturn = null;
			} else {
				dateReturn = new Date(dis.readLong());
			}
			return dateReturn;
		}

		private void writeDate(java.util.Date date1, ObjectOutputStream dos) throws IOException {
			if (date1 == null) {
				dos.writeByte(-1);
			} else {
				dos.writeByte(0);
				dos.writeLong(date1.getTime());
			}
		}

		public void readData(ObjectInputStream dis) {

			synchronized (commonByteArrayLock_WIPO_PROJECTS_G3b_Mig_UD) {

				try {

					int length = 0;

					this.Message = readString(dis);

					this.Time = readDate(dis);

				} catch (IOException e) {
					throw new RuntimeException(e);

				}

			}

		}

		public void writeData(ObjectOutputStream dos) {
			try {

				// String

				writeString(this.Message, dos);

				// java.util.Date

				writeDate(this.Time, dos);

			} catch (IOException e) {
				throw new RuntimeException(e);
			}

		}

		public String toString() {

			StringBuilder sb = new StringBuilder();
			sb.append(super.toString());
			sb.append("[");
			sb.append("Message=" + Message);
			sb.append(",Time=" + String.valueOf(Time));
			sb.append("]");

			return sb.toString();
		}

		/**
		 * Compare keys
		 */
		public int compareTo(row4Struct other) {

			int returnValue = -1;

			return returnValue;
		}

		private int checkNullsAndCompare(Object object1, Object object2) {
			int returnValue = 0;
			if (object1 instanceof Comparable && object2 instanceof Comparable) {
				returnValue = ((Comparable) object1).compareTo(object2);
			} else if (object1 != null && object2 != null) {
				returnValue = compareStrings(object1.toString(), object2.toString());
			} else if (object1 == null && object2 != null) {
				returnValue = 1;
			} else if (object1 != null && object2 == null) {
				returnValue = -1;
			} else {
				returnValue = 0;
			}

			return returnValue;
		}

		private int compareStrings(String string1, String string2) {
			return string1.compareTo(string2);
		}

	}

	public void tDBInput_2Process(final java.util.Map<String, Object> globalMap) throws TalendException {
		globalMap.put("tDBInput_2_SUBPROCESS_STATE", 0);

		final boolean execStat = this.execStat;

		String iterateId = "";

		String currentComponent = "";
		java.util.Map<String, Object> resourceMap = new java.util.HashMap<String, Object>();

		try {
			// TDI-39566 avoid throwing an useless Exception
			boolean resumeIt = true;
			if (globalResumeTicket == false && resumeEntryMethodName != null) {
				String currentMethodName = new java.lang.Exception().getStackTrace()[0].getMethodName();
				resumeIt = resumeEntryMethodName.equals(currentMethodName);
			}
			if (resumeIt || globalResumeTicket) { // start the resume
				globalResumeTicket = true;

				row4Struct row4 = new row4Struct();

				/**
				 * [tLogRow_2 begin ] start
				 */

				ok_Hash.put("tLogRow_2", false);
				start_Hash.put("tLogRow_2", System.currentTimeMillis());

				currentComponent = "tLogRow_2";

				if (execStat) {
					runStat.updateStatOnConnection(resourceMap, iterateId, 0, 0, "row4");
				}

				int tos_count_tLogRow_2 = 0;

				///////////////////////

				final String OUTPUT_FIELD_SEPARATOR_tLogRow_2 = "|";
				java.io.PrintStream consoleOut_tLogRow_2 = null;

				StringBuilder strBuffer_tLogRow_2 = null;
				int nb_line_tLogRow_2 = 0;
///////////////////////    			

				/**
				 * [tLogRow_2 begin ] stop
				 */

				/**
				 * [tDBInput_2 begin ] start
				 */

				ok_Hash.put("tDBInput_2", false);
				start_Hash.put("tDBInput_2", System.currentTimeMillis());

				currentComponent = "tDBInput_2";

				int tos_count_tDBInput_2 = 0;

				org.talend.designer.components.util.mssql.MSSqlGenerateTimestampUtil mssqlGTU_tDBInput_2 = org.talend.designer.components.util.mssql.MSSqlUtilFactory
						.getMSSqlGenerateTimestampUtil();

				java.util.List<String> talendToDBList_tDBInput_2 = new java.util.ArrayList();
				String[] talendToDBArray_tDBInput_2 = new String[] { "FLOAT", "NUMERIC", "NUMERIC IDENTITY", "DECIMAL",
						"DECIMAL IDENTITY", "REAL" };
				java.util.Collections.addAll(talendToDBList_tDBInput_2, talendToDBArray_tDBInput_2);
				int nb_line_tDBInput_2 = 0;
				java.sql.Connection conn_tDBInput_2 = null;
				conn_tDBInput_2 = (java.sql.Connection) globalMap.get("conn_tMSSqlConnection_3");

				String dbschema_tDBInput_2 = (String) globalMap.get("dbschema_tMSSqlConnection_3");

				java.sql.Statement stmt_tDBInput_2 = conn_tDBInput_2.createStatement();

				String dbquery_tDBInput_2 = "SELECT 'Step 2: set person nbr owners' ,GETDATE();";

				globalMap.put("tDBInput_2_QUERY", dbquery_tDBInput_2);
				java.sql.ResultSet rs_tDBInput_2 = null;

				try {
					rs_tDBInput_2 = stmt_tDBInput_2.executeQuery(dbquery_tDBInput_2);
					java.sql.ResultSetMetaData rsmd_tDBInput_2 = rs_tDBInput_2.getMetaData();
					int colQtyInRs_tDBInput_2 = rsmd_tDBInput_2.getColumnCount();

					String tmpContent_tDBInput_2 = null;

					while (rs_tDBInput_2.next()) {
						nb_line_tDBInput_2++;

						if (colQtyInRs_tDBInput_2 < 1) {
							row4.Message = null;
						} else {

							tmpContent_tDBInput_2 = rs_tDBInput_2.getString(1);
							if (tmpContent_tDBInput_2 != null) {
								if (talendToDBList_tDBInput_2.contains(
										rsmd_tDBInput_2.getColumnTypeName(1).toUpperCase(java.util.Locale.ENGLISH))) {
									row4.Message = FormatterUtils.formatUnwithE(tmpContent_tDBInput_2);
								} else {
									row4.Message = tmpContent_tDBInput_2;
								}
							} else {
								row4.Message = null;
							}
						}
						if (colQtyInRs_tDBInput_2 < 2) {
							row4.Time = null;
						} else {

							row4.Time = mssqlGTU_tDBInput_2.getDate(rsmd_tDBInput_2, rs_tDBInput_2, 2);

						}

						/**
						 * [tDBInput_2 begin ] stop
						 */

						/**
						 * [tDBInput_2 main ] start
						 */

						currentComponent = "tDBInput_2";

						tos_count_tDBInput_2++;

						/**
						 * [tDBInput_2 main ] stop
						 */

						/**
						 * [tDBInput_2 process_data_begin ] start
						 */

						currentComponent = "tDBInput_2";

						/**
						 * [tDBInput_2 process_data_begin ] stop
						 */

						/**
						 * [tLogRow_2 main ] start
						 */

						currentComponent = "tLogRow_2";

						if (execStat) {
							runStat.updateStatOnConnection(iterateId, 1, 1

									, "row4"

							);
						}

///////////////////////		

						strBuffer_tLogRow_2 = new StringBuilder();

						if (row4.Message != null) { //

							strBuffer_tLogRow_2.append(String.valueOf(row4.Message));

						} //

						strBuffer_tLogRow_2.append("|");

						if (row4.Time != null) { //

							strBuffer_tLogRow_2.append(FormatterUtils.format_Date(row4.Time, "yyyy-MM-dd HH:mm:ss"));

						} //

						if (globalMap.get("tLogRow_CONSOLE") != null) {
							consoleOut_tLogRow_2 = (java.io.PrintStream) globalMap.get("tLogRow_CONSOLE");
						} else {
							consoleOut_tLogRow_2 = new java.io.PrintStream(
									new java.io.BufferedOutputStream(System.out));
							globalMap.put("tLogRow_CONSOLE", consoleOut_tLogRow_2);
						}
						consoleOut_tLogRow_2.println(strBuffer_tLogRow_2.toString());
						consoleOut_tLogRow_2.flush();
						nb_line_tLogRow_2++;
//////

//////                    

///////////////////////    			

						tos_count_tLogRow_2++;

						/**
						 * [tLogRow_2 main ] stop
						 */

						/**
						 * [tLogRow_2 process_data_begin ] start
						 */

						currentComponent = "tLogRow_2";

						/**
						 * [tLogRow_2 process_data_begin ] stop
						 */

						/**
						 * [tLogRow_2 process_data_end ] start
						 */

						currentComponent = "tLogRow_2";

						/**
						 * [tLogRow_2 process_data_end ] stop
						 */

						/**
						 * [tDBInput_2 process_data_end ] start
						 */

						currentComponent = "tDBInput_2";

						/**
						 * [tDBInput_2 process_data_end ] stop
						 */

						/**
						 * [tDBInput_2 end ] start
						 */

						currentComponent = "tDBInput_2";

					}
				} finally {
					if (rs_tDBInput_2 != null) {
						rs_tDBInput_2.close();
					}
					if (stmt_tDBInput_2 != null) {
						stmt_tDBInput_2.close();
					}
				}
				globalMap.put("tDBInput_2_NB_LINE", nb_line_tDBInput_2);

				ok_Hash.put("tDBInput_2", true);
				end_Hash.put("tDBInput_2", System.currentTimeMillis());

				/**
				 * [tDBInput_2 end ] stop
				 */

				/**
				 * [tLogRow_2 end ] start
				 */

				currentComponent = "tLogRow_2";

//////
//////
				globalMap.put("tLogRow_2_NB_LINE", nb_line_tLogRow_2);

///////////////////////    			

				if (execStat) {
					runStat.updateStat(resourceMap, iterateId, 2, 0, "row4");
				}

				ok_Hash.put("tLogRow_2", true);
				end_Hash.put("tLogRow_2", System.currentTimeMillis());

				/**
				 * [tLogRow_2 end ] stop
				 */

			} // end the resume

		} catch (java.lang.Exception e) {

			TalendException te = new TalendException(e, currentComponent, globalMap);

			throw te;
		} catch (java.lang.Error error) {

			runStat.stopThreadStat();

			throw error;
		} finally {

			try {

				/**
				 * [tDBInput_2 finally ] start
				 */

				currentComponent = "tDBInput_2";

				/**
				 * [tDBInput_2 finally ] stop
				 */

				/**
				 * [tLogRow_2 finally ] start
				 */

				currentComponent = "tLogRow_2";

				/**
				 * [tLogRow_2 finally ] stop
				 */

			} catch (java.lang.Exception e) {
				// ignore
			} catch (java.lang.Error error) {
				// ignore
			}
			resourceMap = null;
		}

		globalMap.put("tDBInput_2_SUBPROCESS_STATE", 1);
	}

	public static class row22Struct implements routines.system.IPersistableRow<row22Struct> {
		final static byte[] commonByteArrayLock_WIPO_PROJECTS_G3b_Mig_UD = new byte[0];
		static byte[] commonByteArray_WIPO_PROJECTS_G3b_Mig_UD = new byte[0];

		public void readData(ObjectInputStream dis) {

			synchronized (commonByteArrayLock_WIPO_PROJECTS_G3b_Mig_UD) {

				try {

					int length = 0;

				}

				finally {
				}

			}

		}

		public void writeData(ObjectOutputStream dos) {
			try {

			}

			finally {
			}

		}

		public String toString() {

			StringBuilder sb = new StringBuilder();
			sb.append(super.toString());
			sb.append("[");
			sb.append("]");

			return sb.toString();
		}

		/**
		 * Compare keys
		 */
		public int compareTo(row22Struct other) {

			int returnValue = -1;

			return returnValue;
		}

		private int checkNullsAndCompare(Object object1, Object object2) {
			int returnValue = 0;
			if (object1 instanceof Comparable && object2 instanceof Comparable) {
				returnValue = ((Comparable) object1).compareTo(object2);
			} else if (object1 != null && object2 != null) {
				returnValue = compareStrings(object1.toString(), object2.toString());
			} else if (object1 == null && object2 != null) {
				returnValue = 1;
			} else if (object1 != null && object2 == null) {
				returnValue = -1;
			} else {
				returnValue = 0;
			}

			return returnValue;
		}

		private int compareStrings(String string1, String string2) {
			return string1.compareTo(string2);
		}

	}

	public static class row33Struct implements routines.system.IPersistableRow<row33Struct> {
		final static byte[] commonByteArrayLock_WIPO_PROJECTS_G3b_Mig_UD = new byte[0];
		static byte[] commonByteArray_WIPO_PROJECTS_G3b_Mig_UD = new byte[0];

		public String errorCode;

		public String getErrorCode() {
			return this.errorCode;
		}

		public String errorMessage;

		public String getErrorMessage() {
			return this.errorMessage;
		}

		private String readString(ObjectInputStream dis) throws IOException {
			String strReturn = null;
			int length = 0;
			length = dis.readInt();
			if (length == -1) {
				strReturn = null;
			} else {
				if (length > commonByteArray_WIPO_PROJECTS_G3b_Mig_UD.length) {
					if (length < 1024 && commonByteArray_WIPO_PROJECTS_G3b_Mig_UD.length == 0) {
						commonByteArray_WIPO_PROJECTS_G3b_Mig_UD = new byte[1024];
					} else {
						commonByteArray_WIPO_PROJECTS_G3b_Mig_UD = new byte[2 * length];
					}
				}
				dis.readFully(commonByteArray_WIPO_PROJECTS_G3b_Mig_UD, 0, length);
				strReturn = new String(commonByteArray_WIPO_PROJECTS_G3b_Mig_UD, 0, length, utf8Charset);
			}
			return strReturn;
		}

		private void writeString(String str, ObjectOutputStream dos) throws IOException {
			if (str == null) {
				dos.writeInt(-1);
			} else {
				byte[] byteArray = str.getBytes(utf8Charset);
				dos.writeInt(byteArray.length);
				dos.write(byteArray);
			}
		}

		public void readData(ObjectInputStream dis) {

			synchronized (commonByteArrayLock_WIPO_PROJECTS_G3b_Mig_UD) {

				try {

					int length = 0;

					this.errorCode = readString(dis);

					this.errorMessage = readString(dis);

				} catch (IOException e) {
					throw new RuntimeException(e);

				}

			}

		}

		public void writeData(ObjectOutputStream dos) {
			try {

				// String

				writeString(this.errorCode, dos);

				// String

				writeString(this.errorMessage, dos);

			} catch (IOException e) {
				throw new RuntimeException(e);
			}

		}

		public String toString() {

			StringBuilder sb = new StringBuilder();
			sb.append(super.toString());
			sb.append("[");
			sb.append("errorCode=" + errorCode);
			sb.append(",errorMessage=" + errorMessage);
			sb.append("]");

			return sb.toString();
		}

		/**
		 * Compare keys
		 */
		public int compareTo(row33Struct other) {

			int returnValue = -1;

			return returnValue;
		}

		private int checkNullsAndCompare(Object object1, Object object2) {
			int returnValue = 0;
			if (object1 instanceof Comparable && object2 instanceof Comparable) {
				returnValue = ((Comparable) object1).compareTo(object2);
			} else if (object1 != null && object2 != null) {
				returnValue = compareStrings(object1.toString(), object2.toString());
			} else if (object1 == null && object2 != null) {
				returnValue = 1;
			} else if (object1 != null && object2 == null) {
				returnValue = -1;
			} else {
				returnValue = 0;
			}

			return returnValue;
		}

		private int compareStrings(String string1, String string2) {
			return string1.compareTo(string2);
		}

	}

	public void tDBRow_11Process(final java.util.Map<String, Object> globalMap) throws TalendException {
		globalMap.put("tDBRow_11_SUBPROCESS_STATE", 0);

		final boolean execStat = this.execStat;

		String iterateId = "";

		String currentComponent = "";
		java.util.Map<String, Object> resourceMap = new java.util.HashMap<String, Object>();

		try {
			// TDI-39566 avoid throwing an useless Exception
			boolean resumeIt = true;
			if (globalResumeTicket == false && resumeEntryMethodName != null) {
				String currentMethodName = new java.lang.Exception().getStackTrace()[0].getMethodName();
				resumeIt = resumeEntryMethodName.equals(currentMethodName);
			}
			if (resumeIt || globalResumeTicket) { // start the resume
				globalResumeTicket = true;

				row22Struct row22 = new row22Struct();
				row33Struct row33 = new row33Struct();

				/**
				 * [tDBCommit_11 begin ] start
				 */

				ok_Hash.put("tDBCommit_11", false);
				start_Hash.put("tDBCommit_11", System.currentTimeMillis());

				currentComponent = "tDBCommit_11";

				if (execStat) {
					runStat.updateStatOnConnection(resourceMap, iterateId, 0, 0, "row22");
				}

				int tos_count_tDBCommit_11 = 0;

				/**
				 * [tDBCommit_11 begin ] stop
				 */

				/**
				 * [tLogRow_18 begin ] start
				 */

				ok_Hash.put("tLogRow_18", false);
				start_Hash.put("tLogRow_18", System.currentTimeMillis());

				currentComponent = "tLogRow_18";

				if (execStat) {
					runStat.updateStatOnConnection(resourceMap, iterateId, 0, 0, "row33");
				}

				int tos_count_tLogRow_18 = 0;

				///////////////////////

				final String OUTPUT_FIELD_SEPARATOR_tLogRow_18 = "|";
				java.io.PrintStream consoleOut_tLogRow_18 = null;

				StringBuilder strBuffer_tLogRow_18 = null;
				int nb_line_tLogRow_18 = 0;
///////////////////////    			

				/**
				 * [tLogRow_18 begin ] stop
				 */

				/**
				 * [tDBRow_11 begin ] start
				 */

				ok_Hash.put("tDBRow_11", false);
				start_Hash.put("tDBRow_11", System.currentTimeMillis());

				tStatCatcher_1.addMessage("begin", "tDBRow_11");
				tStatCatcher_1Process(globalMap);

				currentComponent = "tDBRow_11";

				int tos_count_tDBRow_11 = 0;

				java.sql.Connection conn_tDBRow_11 = null;
				String query_tDBRow_11 = "";
				boolean whetherReject_tDBRow_11 = false;
				conn_tDBRow_11 = (java.sql.Connection) globalMap.get("conn_tMSSqlConnection_3");

				resourceMap.put("conn_tDBRow_11", conn_tDBRow_11);
				java.sql.Statement stmt_tDBRow_11 = conn_tDBRow_11.createStatement();
				resourceMap.put("stmt_tDBRow_11", stmt_tDBRow_11);

				/**
				 * [tDBRow_11 begin ] stop
				 */

				/**
				 * [tDBRow_11 main ] start
				 */

				currentComponent = "tDBRow_11";

				row22 = null;

				row33 = null;

				query_tDBRow_11 = "UPDATE  T   \n		SET	person_nbr = (	SELECT person_nbr\n			FROM  WRK_PERSON_ADDR \n			WHERE	 ref_nbr  = T.rowid\n		),	\n	"
						+ "	    addr_nbr = (	SELECT addr_nbr\n			FROM  WRK_PERSON_ADDR \n			WHERE	 ref_nbr  = T.rowid\n		) \n		FROM  WRK_USERDOC_OW"
						+ "NERS T;\n";
				whetherReject_tDBRow_11 = false;
				globalMap.put("tDBRow_11_QUERY", query_tDBRow_11);
				try {
					stmt_tDBRow_11.execute(query_tDBRow_11);

				} catch (java.lang.Exception e) {
					whetherReject_tDBRow_11 = true;

					row33 = new row33Struct();

					row33.errorCode = ((java.sql.SQLException) e).getSQLState();
					row33.errorMessage = e.getMessage() + " - Line: " + tos_count_tDBRow_11;

				}

				if (!whetherReject_tDBRow_11) {

					row22 = new row22Struct();

				}

				tos_count_tDBRow_11++;

				/**
				 * [tDBRow_11 main ] stop
				 */

				/**
				 * [tDBRow_11 process_data_begin ] start
				 */

				currentComponent = "tDBRow_11";

				/**
				 * [tDBRow_11 process_data_begin ] stop
				 */
// Start of branch "row22"
				if (row22 != null) {

					/**
					 * [tDBCommit_11 main ] start
					 */

					currentComponent = "tDBCommit_11";

					if (execStat) {
						runStat.updateStatOnConnection(iterateId, 1, 1

								, "row22"

						);
					}

					java.sql.Connection conn_tDBCommit_11 = (java.sql.Connection) globalMap
							.get("conn_tMSSqlConnection_3");
					if (conn_tDBCommit_11 != null && !conn_tDBCommit_11.isClosed()) {

						conn_tDBCommit_11.commit();

					}

					tos_count_tDBCommit_11++;

					/**
					 * [tDBCommit_11 main ] stop
					 */

					/**
					 * [tDBCommit_11 process_data_begin ] start
					 */

					currentComponent = "tDBCommit_11";

					/**
					 * [tDBCommit_11 process_data_begin ] stop
					 */

					/**
					 * [tDBCommit_11 process_data_end ] start
					 */

					currentComponent = "tDBCommit_11";

					/**
					 * [tDBCommit_11 process_data_end ] stop
					 */

				} // End of branch "row22"

// Start of branch "row33"
				if (row33 != null) {

					/**
					 * [tLogRow_18 main ] start
					 */

					currentComponent = "tLogRow_18";

					if (execStat) {
						runStat.updateStatOnConnection(iterateId, 1, 1

								, "row33"

						);
					}

///////////////////////		

					strBuffer_tLogRow_18 = new StringBuilder();

					if (row33.errorCode != null) { //

						strBuffer_tLogRow_18.append(String.valueOf(row33.errorCode));

					} //

					strBuffer_tLogRow_18.append("|");

					if (row33.errorMessage != null) { //

						strBuffer_tLogRow_18.append(String.valueOf(row33.errorMessage));

					} //

					if (globalMap.get("tLogRow_CONSOLE") != null) {
						consoleOut_tLogRow_18 = (java.io.PrintStream) globalMap.get("tLogRow_CONSOLE");
					} else {
						consoleOut_tLogRow_18 = new java.io.PrintStream(new java.io.BufferedOutputStream(System.out));
						globalMap.put("tLogRow_CONSOLE", consoleOut_tLogRow_18);
					}
					consoleOut_tLogRow_18.println(strBuffer_tLogRow_18.toString());
					consoleOut_tLogRow_18.flush();
					nb_line_tLogRow_18++;
//////

//////                    

///////////////////////    			

					tos_count_tLogRow_18++;

					/**
					 * [tLogRow_18 main ] stop
					 */

					/**
					 * [tLogRow_18 process_data_begin ] start
					 */

					currentComponent = "tLogRow_18";

					/**
					 * [tLogRow_18 process_data_begin ] stop
					 */

					/**
					 * [tLogRow_18 process_data_end ] start
					 */

					currentComponent = "tLogRow_18";

					/**
					 * [tLogRow_18 process_data_end ] stop
					 */

				} // End of branch "row33"

				/**
				 * [tDBRow_11 process_data_end ] start
				 */

				currentComponent = "tDBRow_11";

				/**
				 * [tDBRow_11 process_data_end ] stop
				 */

				/**
				 * [tDBRow_11 end ] start
				 */

				currentComponent = "tDBRow_11";

				stmt_tDBRow_11.close();
				resourceMap.remove("stmt_tDBRow_11");
				resourceMap.put("statementClosed_tDBRow_11", true);
				resourceMap.put("finish_tDBRow_11", true);

				ok_Hash.put("tDBRow_11", true);
				end_Hash.put("tDBRow_11", System.currentTimeMillis());

				tStatCatcher_1.addMessage("end", "tDBRow_11", end_Hash.get("tDBRow_11") - start_Hash.get("tDBRow_11"));
				tStatCatcher_1Process(globalMap);

				/**
				 * [tDBRow_11 end ] stop
				 */

				/**
				 * [tDBCommit_11 end ] start
				 */

				currentComponent = "tDBCommit_11";

				if (execStat) {
					runStat.updateStat(resourceMap, iterateId, 2, 0, "row22");
				}

				ok_Hash.put("tDBCommit_11", true);
				end_Hash.put("tDBCommit_11", System.currentTimeMillis());

				/**
				 * [tDBCommit_11 end ] stop
				 */

				/**
				 * [tLogRow_18 end ] start
				 */

				currentComponent = "tLogRow_18";

//////
//////
				globalMap.put("tLogRow_18_NB_LINE", nb_line_tLogRow_18);

///////////////////////    			

				if (execStat) {
					runStat.updateStat(resourceMap, iterateId, 2, 0, "row33");
				}

				ok_Hash.put("tLogRow_18", true);
				end_Hash.put("tLogRow_18", System.currentTimeMillis());

				/**
				 * [tLogRow_18 end ] stop
				 */

			} // end the resume

			if (resumeEntryMethodName == null || globalResumeTicket) {
				resumeUtil.addLog("CHECKPOINT", "CONNECTION:SUBJOB_OK:tDBRow_11:OnSubjobOk1", "",
						Thread.currentThread().getId() + "", "", "", "", "", "");
			}

			if (execStat) {
				runStat.updateStatOnConnection("OnSubjobOk18", 0, "ok");
			}

			tDBRow_17Process(globalMap);

			if (resumeEntryMethodName == null || globalResumeTicket) {
				resumeUtil.addLog("CHECKPOINT", "CONNECTION:SUBJOB_OK:tDBRow_11:OnSubjobOk2", "",
						Thread.currentThread().getId() + "", "", "", "", "", "");
			}

			if (execStat) {
				runStat.updateStatOnConnection("OnSubjobOk5", 0, "ok");
			}

			tDBRow_3Process(globalMap);

		} catch (java.lang.Exception e) {

			TalendException te = new TalendException(e, currentComponent, globalMap);

			throw te;
		} catch (java.lang.Error error) {

			runStat.stopThreadStat();

			throw error;
		} finally {

			try {

				/**
				 * [tDBRow_11 finally ] start
				 */

				currentComponent = "tDBRow_11";

				if (resourceMap.get("statementClosed_tDBRow_11") == null) {
					java.sql.Statement stmtToClose_tDBRow_11 = null;
					if ((stmtToClose_tDBRow_11 = (java.sql.Statement) resourceMap.remove("stmt_tDBRow_11")) != null) {
						stmtToClose_tDBRow_11.close();
					}
				}

				/**
				 * [tDBRow_11 finally ] stop
				 */

				/**
				 * [tDBCommit_11 finally ] start
				 */

				currentComponent = "tDBCommit_11";

				/**
				 * [tDBCommit_11 finally ] stop
				 */

				/**
				 * [tLogRow_18 finally ] start
				 */

				currentComponent = "tLogRow_18";

				/**
				 * [tLogRow_18 finally ] stop
				 */

			} catch (java.lang.Exception e) {
				// ignore
			} catch (java.lang.Error error) {
				// ignore
			}
			resourceMap = null;
		}

		globalMap.put("tDBRow_11_SUBPROCESS_STATE", 1);
	}

	public static class row34Struct implements routines.system.IPersistableRow<row34Struct> {
		final static byte[] commonByteArrayLock_WIPO_PROJECTS_G3b_Mig_UD = new byte[0];
		static byte[] commonByteArray_WIPO_PROJECTS_G3b_Mig_UD = new byte[0];

		public void readData(ObjectInputStream dis) {

			synchronized (commonByteArrayLock_WIPO_PROJECTS_G3b_Mig_UD) {

				try {

					int length = 0;

				}

				finally {
				}

			}

		}

		public void writeData(ObjectOutputStream dos) {
			try {

			}

			finally {
			}

		}

		public String toString() {

			StringBuilder sb = new StringBuilder();
			sb.append(super.toString());
			sb.append("[");
			sb.append("]");

			return sb.toString();
		}

		/**
		 * Compare keys
		 */
		public int compareTo(row34Struct other) {

			int returnValue = -1;

			return returnValue;
		}

		private int checkNullsAndCompare(Object object1, Object object2) {
			int returnValue = 0;
			if (object1 instanceof Comparable && object2 instanceof Comparable) {
				returnValue = ((Comparable) object1).compareTo(object2);
			} else if (object1 != null && object2 != null) {
				returnValue = compareStrings(object1.toString(), object2.toString());
			} else if (object1 == null && object2 != null) {
				returnValue = 1;
			} else if (object1 != null && object2 == null) {
				returnValue = -1;
			} else {
				returnValue = 0;
			}

			return returnValue;
		}

		private int compareStrings(String string1, String string2) {
			return string1.compareTo(string2);
		}

	}

	public static class row35Struct implements routines.system.IPersistableRow<row35Struct> {
		final static byte[] commonByteArrayLock_WIPO_PROJECTS_G3b_Mig_UD = new byte[0];
		static byte[] commonByteArray_WIPO_PROJECTS_G3b_Mig_UD = new byte[0];

		public String errorCode;

		public String getErrorCode() {
			return this.errorCode;
		}

		public String errorMessage;

		public String getErrorMessage() {
			return this.errorMessage;
		}

		private String readString(ObjectInputStream dis) throws IOException {
			String strReturn = null;
			int length = 0;
			length = dis.readInt();
			if (length == -1) {
				strReturn = null;
			} else {
				if (length > commonByteArray_WIPO_PROJECTS_G3b_Mig_UD.length) {
					if (length < 1024 && commonByteArray_WIPO_PROJECTS_G3b_Mig_UD.length == 0) {
						commonByteArray_WIPO_PROJECTS_G3b_Mig_UD = new byte[1024];
					} else {
						commonByteArray_WIPO_PROJECTS_G3b_Mig_UD = new byte[2 * length];
					}
				}
				dis.readFully(commonByteArray_WIPO_PROJECTS_G3b_Mig_UD, 0, length);
				strReturn = new String(commonByteArray_WIPO_PROJECTS_G3b_Mig_UD, 0, length, utf8Charset);
			}
			return strReturn;
		}

		private void writeString(String str, ObjectOutputStream dos) throws IOException {
			if (str == null) {
				dos.writeInt(-1);
			} else {
				byte[] byteArray = str.getBytes(utf8Charset);
				dos.writeInt(byteArray.length);
				dos.write(byteArray);
			}
		}

		public void readData(ObjectInputStream dis) {

			synchronized (commonByteArrayLock_WIPO_PROJECTS_G3b_Mig_UD) {

				try {

					int length = 0;

					this.errorCode = readString(dis);

					this.errorMessage = readString(dis);

				} catch (IOException e) {
					throw new RuntimeException(e);

				}

			}

		}

		public void writeData(ObjectOutputStream dos) {
			try {

				// String

				writeString(this.errorCode, dos);

				// String

				writeString(this.errorMessage, dos);

			} catch (IOException e) {
				throw new RuntimeException(e);
			}

		}

		public String toString() {

			StringBuilder sb = new StringBuilder();
			sb.append(super.toString());
			sb.append("[");
			sb.append("errorCode=" + errorCode);
			sb.append(",errorMessage=" + errorMessage);
			sb.append("]");

			return sb.toString();
		}

		/**
		 * Compare keys
		 */
		public int compareTo(row35Struct other) {

			int returnValue = -1;

			return returnValue;
		}

		private int checkNullsAndCompare(Object object1, Object object2) {
			int returnValue = 0;
			if (object1 instanceof Comparable && object2 instanceof Comparable) {
				returnValue = ((Comparable) object1).compareTo(object2);
			} else if (object1 != null && object2 != null) {
				returnValue = compareStrings(object1.toString(), object2.toString());
			} else if (object1 == null && object2 != null) {
				returnValue = 1;
			} else if (object1 != null && object2 == null) {
				returnValue = -1;
			} else {
				returnValue = 0;
			}

			return returnValue;
		}

		private int compareStrings(String string1, String string2) {
			return string1.compareTo(string2);
		}

	}

	public void tDBRow_17Process(final java.util.Map<String, Object> globalMap) throws TalendException {
		globalMap.put("tDBRow_17_SUBPROCESS_STATE", 0);

		final boolean execStat = this.execStat;

		String iterateId = "";

		String currentComponent = "";
		java.util.Map<String, Object> resourceMap = new java.util.HashMap<String, Object>();

		try {
			// TDI-39566 avoid throwing an useless Exception
			boolean resumeIt = true;
			if (globalResumeTicket == false && resumeEntryMethodName != null) {
				String currentMethodName = new java.lang.Exception().getStackTrace()[0].getMethodName();
				resumeIt = resumeEntryMethodName.equals(currentMethodName);
			}
			if (resumeIt || globalResumeTicket) { // start the resume
				globalResumeTicket = true;

				row34Struct row34 = new row34Struct();
				row35Struct row35 = new row35Struct();

				/**
				 * [tDBCommit_17 begin ] start
				 */

				ok_Hash.put("tDBCommit_17", false);
				start_Hash.put("tDBCommit_17", System.currentTimeMillis());

				currentComponent = "tDBCommit_17";

				if (execStat) {
					runStat.updateStatOnConnection(resourceMap, iterateId, 0, 0, "row34");
				}

				int tos_count_tDBCommit_17 = 0;

				/**
				 * [tDBCommit_17 begin ] stop
				 */

				/**
				 * [tLogRow_19 begin ] start
				 */

				ok_Hash.put("tLogRow_19", false);
				start_Hash.put("tLogRow_19", System.currentTimeMillis());

				currentComponent = "tLogRow_19";

				if (execStat) {
					runStat.updateStatOnConnection(resourceMap, iterateId, 0, 0, "row35");
				}

				int tos_count_tLogRow_19 = 0;

				///////////////////////

				final String OUTPUT_FIELD_SEPARATOR_tLogRow_19 = "|";
				java.io.PrintStream consoleOut_tLogRow_19 = null;

				StringBuilder strBuffer_tLogRow_19 = null;
				int nb_line_tLogRow_19 = 0;
///////////////////////    			

				/**
				 * [tLogRow_19 begin ] stop
				 */

				/**
				 * [tDBRow_17 begin ] start
				 */

				ok_Hash.put("tDBRow_17", false);
				start_Hash.put("tDBRow_17", System.currentTimeMillis());

				tStatCatcher_1.addMessage("begin", "tDBRow_17");
				tStatCatcher_1Process(globalMap);

				currentComponent = "tDBRow_17";

				int tos_count_tDBRow_17 = 0;

				java.sql.Connection conn_tDBRow_17 = null;
				String query_tDBRow_17 = "";
				boolean whetherReject_tDBRow_17 = false;
				conn_tDBRow_17 = (java.sql.Connection) globalMap.get("conn_tMSSqlConnection_3");

				resourceMap.put("conn_tDBRow_17", conn_tDBRow_17);
				java.sql.Statement stmt_tDBRow_17 = conn_tDBRow_17.createStatement();
				resourceMap.put("stmt_tDBRow_17", stmt_tDBRow_17);

				/**
				 * [tDBRow_17 begin ] stop
				 */

				/**
				 * [tDBRow_17 main ] start
				 */

				currentComponent = "tDBRow_17";

				row34 = null;

				row35 = null;

				query_tDBRow_17 = "TRUNCATE TABLE   wrk_person_addr;  \n\nINSERT INTO  wrk_person_addr   \n				( PERSON_GROUP_CODE , \n				AGENT_CODE , \n"
						+ "				PERSON_NAME , \n				PERSON_NAME_LANG2 ,\n				NATIONALITY_COUNTRY_CODE , \n				IND_COMPANY , \n				LEGAL_NATURE , \n	"
						+ "			LEGAL_NATURE_LANG2,\n				LEGAL_ID_TYPE , \n				LEGAL_ID_NBR , \n				INDIVIDUAL_ID_TYPE , \n				INDIVIDUAL_ID_NBR , \n"
						+ "				EMAIL , \n				TELEPHONE , \n				RESIDENCE_COUNTRY_CODE , \n				STATE_NAME , \n				STATE_CODE , \n				CITY_CODE ,\n		"
						+ "		CITY_NAME , \n				ADDRESS_ZONE , \n				ADDRESS_STREET , \n				ADDRESS_STREET_LANG2 , \n				ZIP_CODE , \n				PERSON_NBR"
						+ " , \n				ADDR_NBR , \n				REF_NBR )  \n		SELECT\n				 PERSON_GROUP_CODE,\n				 AGENT_CODE,\n				 PERSON_NAME,\n				 PERS"
						+ "ON_NAME_LANG2,\n				 NATIONALITY_COUNTRY_CODE,\n				 IND_COMPANY,\n				 LEGAL_NATURE,\n				 LEGAL_NATURE_LANG2,\n				 LE"
						+ "GAL_ID_TYPE,\n				 LEGAL_ID_NBR,\n				 INDIVIDUAL_ID_TYPE,\n				 INDIVIDUAL_ID_NBR,\n				 EMAIL,\n				 TELEPHONE,\n				 "
						+ "RESIDENCE_COUNTRY_CODE,\n				 STATE_NAME,\n				 STATE_CODE,\n				 CITY_CODE,\n				 CITY_NAME,\n				 ADDRESS_ZONE,\n				 "
						+ "ADDRESS_STREET,\n				 ADDRESS_STREET_LANG2,\n				 ZIP_CODE,\n				 PERSON_NBR,\n				 ADDR_NBR,\n				 T.rowid\n		FROM  wrk"
						+ "_userdoc_reprs T;\n";
				whetherReject_tDBRow_17 = false;
				globalMap.put("tDBRow_17_QUERY", query_tDBRow_17);
				try {
					stmt_tDBRow_17.execute(query_tDBRow_17);

				} catch (java.lang.Exception e) {
					whetherReject_tDBRow_17 = true;

					row35 = new row35Struct();

					row35.errorCode = ((java.sql.SQLException) e).getSQLState();
					row35.errorMessage = e.getMessage() + " - Line: " + tos_count_tDBRow_17;

				}

				if (!whetherReject_tDBRow_17) {

					row34 = new row34Struct();

				}

				tos_count_tDBRow_17++;

				/**
				 * [tDBRow_17 main ] stop
				 */

				/**
				 * [tDBRow_17 process_data_begin ] start
				 */

				currentComponent = "tDBRow_17";

				/**
				 * [tDBRow_17 process_data_begin ] stop
				 */
// Start of branch "row34"
				if (row34 != null) {

					/**
					 * [tDBCommit_17 main ] start
					 */

					currentComponent = "tDBCommit_17";

					if (execStat) {
						runStat.updateStatOnConnection(iterateId, 1, 1

								, "row34"

						);
					}

					java.sql.Connection conn_tDBCommit_17 = (java.sql.Connection) globalMap
							.get("conn_tMSSqlConnection_3");
					if (conn_tDBCommit_17 != null && !conn_tDBCommit_17.isClosed()) {

						conn_tDBCommit_17.commit();

					}

					tos_count_tDBCommit_17++;

					/**
					 * [tDBCommit_17 main ] stop
					 */

					/**
					 * [tDBCommit_17 process_data_begin ] start
					 */

					currentComponent = "tDBCommit_17";

					/**
					 * [tDBCommit_17 process_data_begin ] stop
					 */

					/**
					 * [tDBCommit_17 process_data_end ] start
					 */

					currentComponent = "tDBCommit_17";

					/**
					 * [tDBCommit_17 process_data_end ] stop
					 */

				} // End of branch "row34"

// Start of branch "row35"
				if (row35 != null) {

					/**
					 * [tLogRow_19 main ] start
					 */

					currentComponent = "tLogRow_19";

					if (execStat) {
						runStat.updateStatOnConnection(iterateId, 1, 1

								, "row35"

						);
					}

///////////////////////		

					strBuffer_tLogRow_19 = new StringBuilder();

					if (row35.errorCode != null) { //

						strBuffer_tLogRow_19.append(String.valueOf(row35.errorCode));

					} //

					strBuffer_tLogRow_19.append("|");

					if (row35.errorMessage != null) { //

						strBuffer_tLogRow_19.append(String.valueOf(row35.errorMessage));

					} //

					if (globalMap.get("tLogRow_CONSOLE") != null) {
						consoleOut_tLogRow_19 = (java.io.PrintStream) globalMap.get("tLogRow_CONSOLE");
					} else {
						consoleOut_tLogRow_19 = new java.io.PrintStream(new java.io.BufferedOutputStream(System.out));
						globalMap.put("tLogRow_CONSOLE", consoleOut_tLogRow_19);
					}
					consoleOut_tLogRow_19.println(strBuffer_tLogRow_19.toString());
					consoleOut_tLogRow_19.flush();
					nb_line_tLogRow_19++;
//////

//////                    

///////////////////////    			

					tos_count_tLogRow_19++;

					/**
					 * [tLogRow_19 main ] stop
					 */

					/**
					 * [tLogRow_19 process_data_begin ] start
					 */

					currentComponent = "tLogRow_19";

					/**
					 * [tLogRow_19 process_data_begin ] stop
					 */

					/**
					 * [tLogRow_19 process_data_end ] start
					 */

					currentComponent = "tLogRow_19";

					/**
					 * [tLogRow_19 process_data_end ] stop
					 */

				} // End of branch "row35"

				/**
				 * [tDBRow_17 process_data_end ] start
				 */

				currentComponent = "tDBRow_17";

				/**
				 * [tDBRow_17 process_data_end ] stop
				 */

				/**
				 * [tDBRow_17 end ] start
				 */

				currentComponent = "tDBRow_17";

				stmt_tDBRow_17.close();
				resourceMap.remove("stmt_tDBRow_17");
				resourceMap.put("statementClosed_tDBRow_17", true);
				resourceMap.put("finish_tDBRow_17", true);

				ok_Hash.put("tDBRow_17", true);
				end_Hash.put("tDBRow_17", System.currentTimeMillis());

				tStatCatcher_1.addMessage("end", "tDBRow_17", end_Hash.get("tDBRow_17") - start_Hash.get("tDBRow_17"));
				tStatCatcher_1Process(globalMap);

				/**
				 * [tDBRow_17 end ] stop
				 */

				/**
				 * [tDBCommit_17 end ] start
				 */

				currentComponent = "tDBCommit_17";

				if (execStat) {
					runStat.updateStat(resourceMap, iterateId, 2, 0, "row34");
				}

				ok_Hash.put("tDBCommit_17", true);
				end_Hash.put("tDBCommit_17", System.currentTimeMillis());

				/**
				 * [tDBCommit_17 end ] stop
				 */

				/**
				 * [tLogRow_19 end ] start
				 */

				currentComponent = "tLogRow_19";

//////
//////
				globalMap.put("tLogRow_19_NB_LINE", nb_line_tLogRow_19);

///////////////////////    			

				if (execStat) {
					runStat.updateStat(resourceMap, iterateId, 2, 0, "row35");
				}

				ok_Hash.put("tLogRow_19", true);
				end_Hash.put("tLogRow_19", System.currentTimeMillis());

				/**
				 * [tLogRow_19 end ] stop
				 */

			} // end the resume

			if (resumeEntryMethodName == null || globalResumeTicket) {
				resumeUtil.addLog("CHECKPOINT", "CONNECTION:SUBJOB_OK:tDBRow_17:OnSubjobOk", "",
						Thread.currentThread().getId() + "", "", "", "", "", "");
			}

			if (execStat) {
				runStat.updateStatOnConnection("OnSubjobOk19", 0, "ok");
			}

			tDBInput_3Process(globalMap);

		} catch (java.lang.Exception e) {

			TalendException te = new TalendException(e, currentComponent, globalMap);

			throw te;
		} catch (java.lang.Error error) {

			runStat.stopThreadStat();

			throw error;
		} finally {

			try {

				/**
				 * [tDBRow_17 finally ] start
				 */

				currentComponent = "tDBRow_17";

				if (resourceMap.get("statementClosed_tDBRow_17") == null) {
					java.sql.Statement stmtToClose_tDBRow_17 = null;
					if ((stmtToClose_tDBRow_17 = (java.sql.Statement) resourceMap.remove("stmt_tDBRow_17")) != null) {
						stmtToClose_tDBRow_17.close();
					}
				}

				/**
				 * [tDBRow_17 finally ] stop
				 */

				/**
				 * [tDBCommit_17 finally ] start
				 */

				currentComponent = "tDBCommit_17";

				/**
				 * [tDBCommit_17 finally ] stop
				 */

				/**
				 * [tLogRow_19 finally ] start
				 */

				currentComponent = "tLogRow_19";

				/**
				 * [tLogRow_19 finally ] stop
				 */

			} catch (java.lang.Exception e) {
				// ignore
			} catch (java.lang.Error error) {
				// ignore
			}
			resourceMap = null;
		}

		globalMap.put("tDBRow_17_SUBPROCESS_STATE", 1);
	}

	public static class row6Struct implements routines.system.IPersistableRow<row6Struct> {
		final static byte[] commonByteArrayLock_WIPO_PROJECTS_G3b_Mig_UD = new byte[0];
		static byte[] commonByteArray_WIPO_PROJECTS_G3b_Mig_UD = new byte[0];

		public String Message;

		public String getMessage() {
			return this.Message;
		}

		public java.util.Date Time;

		public java.util.Date getTime() {
			return this.Time;
		}

		private String readString(ObjectInputStream dis) throws IOException {
			String strReturn = null;
			int length = 0;
			length = dis.readInt();
			if (length == -1) {
				strReturn = null;
			} else {
				if (length > commonByteArray_WIPO_PROJECTS_G3b_Mig_UD.length) {
					if (length < 1024 && commonByteArray_WIPO_PROJECTS_G3b_Mig_UD.length == 0) {
						commonByteArray_WIPO_PROJECTS_G3b_Mig_UD = new byte[1024];
					} else {
						commonByteArray_WIPO_PROJECTS_G3b_Mig_UD = new byte[2 * length];
					}
				}
				dis.readFully(commonByteArray_WIPO_PROJECTS_G3b_Mig_UD, 0, length);
				strReturn = new String(commonByteArray_WIPO_PROJECTS_G3b_Mig_UD, 0, length, utf8Charset);
			}
			return strReturn;
		}

		private void writeString(String str, ObjectOutputStream dos) throws IOException {
			if (str == null) {
				dos.writeInt(-1);
			} else {
				byte[] byteArray = str.getBytes(utf8Charset);
				dos.writeInt(byteArray.length);
				dos.write(byteArray);
			}
		}

		private java.util.Date readDate(ObjectInputStream dis) throws IOException {
			java.util.Date dateReturn = null;
			int length = 0;
			length = dis.readByte();
			if (length == -1) {
				dateReturn = null;
			} else {
				dateReturn = new Date(dis.readLong());
			}
			return dateReturn;
		}

		private void writeDate(java.util.Date date1, ObjectOutputStream dos) throws IOException {
			if (date1 == null) {
				dos.writeByte(-1);
			} else {
				dos.writeByte(0);
				dos.writeLong(date1.getTime());
			}
		}

		public void readData(ObjectInputStream dis) {

			synchronized (commonByteArrayLock_WIPO_PROJECTS_G3b_Mig_UD) {

				try {

					int length = 0;

					this.Message = readString(dis);

					this.Time = readDate(dis);

				} catch (IOException e) {
					throw new RuntimeException(e);

				}

			}

		}

		public void writeData(ObjectOutputStream dos) {
			try {

				// String

				writeString(this.Message, dos);

				// java.util.Date

				writeDate(this.Time, dos);

			} catch (IOException e) {
				throw new RuntimeException(e);
			}

		}

		public String toString() {

			StringBuilder sb = new StringBuilder();
			sb.append(super.toString());
			sb.append("[");
			sb.append("Message=" + Message);
			sb.append(",Time=" + String.valueOf(Time));
			sb.append("]");

			return sb.toString();
		}

		/**
		 * Compare keys
		 */
		public int compareTo(row6Struct other) {

			int returnValue = -1;

			return returnValue;
		}

		private int checkNullsAndCompare(Object object1, Object object2) {
			int returnValue = 0;
			if (object1 instanceof Comparable && object2 instanceof Comparable) {
				returnValue = ((Comparable) object1).compareTo(object2);
			} else if (object1 != null && object2 != null) {
				returnValue = compareStrings(object1.toString(), object2.toString());
			} else if (object1 == null && object2 != null) {
				returnValue = 1;
			} else if (object1 != null && object2 == null) {
				returnValue = -1;
			} else {
				returnValue = 0;
			}

			return returnValue;
		}

		private int compareStrings(String string1, String string2) {
			return string1.compareTo(string2);
		}

	}

	public void tDBInput_3Process(final java.util.Map<String, Object> globalMap) throws TalendException {
		globalMap.put("tDBInput_3_SUBPROCESS_STATE", 0);

		final boolean execStat = this.execStat;

		String iterateId = "";

		String currentComponent = "";
		java.util.Map<String, Object> resourceMap = new java.util.HashMap<String, Object>();

		try {
			// TDI-39566 avoid throwing an useless Exception
			boolean resumeIt = true;
			if (globalResumeTicket == false && resumeEntryMethodName != null) {
				String currentMethodName = new java.lang.Exception().getStackTrace()[0].getMethodName();
				resumeIt = resumeEntryMethodName.equals(currentMethodName);
			}
			if (resumeIt || globalResumeTicket) { // start the resume
				globalResumeTicket = true;

				row6Struct row6 = new row6Struct();

				/**
				 * [tLogRow_3 begin ] start
				 */

				ok_Hash.put("tLogRow_3", false);
				start_Hash.put("tLogRow_3", System.currentTimeMillis());

				currentComponent = "tLogRow_3";

				if (execStat) {
					runStat.updateStatOnConnection(resourceMap, iterateId, 0, 0, "row6");
				}

				int tos_count_tLogRow_3 = 0;

				///////////////////////

				final String OUTPUT_FIELD_SEPARATOR_tLogRow_3 = "|";
				java.io.PrintStream consoleOut_tLogRow_3 = null;

				StringBuilder strBuffer_tLogRow_3 = null;
				int nb_line_tLogRow_3 = 0;
///////////////////////    			

				/**
				 * [tLogRow_3 begin ] stop
				 */

				/**
				 * [tDBInput_3 begin ] start
				 */

				ok_Hash.put("tDBInput_3", false);
				start_Hash.put("tDBInput_3", System.currentTimeMillis());

				currentComponent = "tDBInput_3";

				int tos_count_tDBInput_3 = 0;

				org.talend.designer.components.util.mssql.MSSqlGenerateTimestampUtil mssqlGTU_tDBInput_3 = org.talend.designer.components.util.mssql.MSSqlUtilFactory
						.getMSSqlGenerateTimestampUtil();

				java.util.List<String> talendToDBList_tDBInput_3 = new java.util.ArrayList();
				String[] talendToDBArray_tDBInput_3 = new String[] { "FLOAT", "NUMERIC", "NUMERIC IDENTITY", "DECIMAL",
						"DECIMAL IDENTITY", "REAL" };
				java.util.Collections.addAll(talendToDBList_tDBInput_3, talendToDBArray_tDBInput_3);
				int nb_line_tDBInput_3 = 0;
				java.sql.Connection conn_tDBInput_3 = null;
				conn_tDBInput_3 = (java.sql.Connection) globalMap.get("conn_tMSSqlConnection_3");

				String dbschema_tDBInput_3 = (String) globalMap.get("dbschema_tMSSqlConnection_3");

				java.sql.Statement stmt_tDBInput_3 = conn_tDBInput_3.createStatement();

				String dbquery_tDBInput_3 = "SELECT 'Step 3: populate work tables  to add  required data' ,GETDATE();";

				globalMap.put("tDBInput_3_QUERY", dbquery_tDBInput_3);
				java.sql.ResultSet rs_tDBInput_3 = null;

				try {
					rs_tDBInput_3 = stmt_tDBInput_3.executeQuery(dbquery_tDBInput_3);
					java.sql.ResultSetMetaData rsmd_tDBInput_3 = rs_tDBInput_3.getMetaData();
					int colQtyInRs_tDBInput_3 = rsmd_tDBInput_3.getColumnCount();

					String tmpContent_tDBInput_3 = null;

					while (rs_tDBInput_3.next()) {
						nb_line_tDBInput_3++;

						if (colQtyInRs_tDBInput_3 < 1) {
							row6.Message = null;
						} else {

							tmpContent_tDBInput_3 = rs_tDBInput_3.getString(1);
							if (tmpContent_tDBInput_3 != null) {
								if (talendToDBList_tDBInput_3.contains(
										rsmd_tDBInput_3.getColumnTypeName(1).toUpperCase(java.util.Locale.ENGLISH))) {
									row6.Message = FormatterUtils.formatUnwithE(tmpContent_tDBInput_3);
								} else {
									row6.Message = tmpContent_tDBInput_3;
								}
							} else {
								row6.Message = null;
							}
						}
						if (colQtyInRs_tDBInput_3 < 2) {
							row6.Time = null;
						} else {

							row6.Time = mssqlGTU_tDBInput_3.getDate(rsmd_tDBInput_3, rs_tDBInput_3, 2);

						}

						/**
						 * [tDBInput_3 begin ] stop
						 */

						/**
						 * [tDBInput_3 main ] start
						 */

						currentComponent = "tDBInput_3";

						tos_count_tDBInput_3++;

						/**
						 * [tDBInput_3 main ] stop
						 */

						/**
						 * [tDBInput_3 process_data_begin ] start
						 */

						currentComponent = "tDBInput_3";

						/**
						 * [tDBInput_3 process_data_begin ] stop
						 */

						/**
						 * [tLogRow_3 main ] start
						 */

						currentComponent = "tLogRow_3";

						if (execStat) {
							runStat.updateStatOnConnection(iterateId, 1, 1

									, "row6"

							);
						}

///////////////////////		

						strBuffer_tLogRow_3 = new StringBuilder();

						if (row6.Message != null) { //

							strBuffer_tLogRow_3.append(String.valueOf(row6.Message));

						} //

						strBuffer_tLogRow_3.append("|");

						if (row6.Time != null) { //

							strBuffer_tLogRow_3.append(FormatterUtils.format_Date(row6.Time, "yyyy-MM-dd HH:mm:ss"));

						} //

						if (globalMap.get("tLogRow_CONSOLE") != null) {
							consoleOut_tLogRow_3 = (java.io.PrintStream) globalMap.get("tLogRow_CONSOLE");
						} else {
							consoleOut_tLogRow_3 = new java.io.PrintStream(
									new java.io.BufferedOutputStream(System.out));
							globalMap.put("tLogRow_CONSOLE", consoleOut_tLogRow_3);
						}
						consoleOut_tLogRow_3.println(strBuffer_tLogRow_3.toString());
						consoleOut_tLogRow_3.flush();
						nb_line_tLogRow_3++;
//////

//////                    

///////////////////////    			

						tos_count_tLogRow_3++;

						/**
						 * [tLogRow_3 main ] stop
						 */

						/**
						 * [tLogRow_3 process_data_begin ] start
						 */

						currentComponent = "tLogRow_3";

						/**
						 * [tLogRow_3 process_data_begin ] stop
						 */

						/**
						 * [tLogRow_3 process_data_end ] start
						 */

						currentComponent = "tLogRow_3";

						/**
						 * [tLogRow_3 process_data_end ] stop
						 */

						/**
						 * [tDBInput_3 process_data_end ] start
						 */

						currentComponent = "tDBInput_3";

						/**
						 * [tDBInput_3 process_data_end ] stop
						 */

						/**
						 * [tDBInput_3 end ] start
						 */

						currentComponent = "tDBInput_3";

					}
				} finally {
					if (rs_tDBInput_3 != null) {
						rs_tDBInput_3.close();
					}
					if (stmt_tDBInput_3 != null) {
						stmt_tDBInput_3.close();
					}
				}
				globalMap.put("tDBInput_3_NB_LINE", nb_line_tDBInput_3);

				ok_Hash.put("tDBInput_3", true);
				end_Hash.put("tDBInput_3", System.currentTimeMillis());

				/**
				 * [tDBInput_3 end ] stop
				 */

				/**
				 * [tLogRow_3 end ] start
				 */

				currentComponent = "tLogRow_3";

//////
//////
				globalMap.put("tLogRow_3_NB_LINE", nb_line_tLogRow_3);

///////////////////////    			

				if (execStat) {
					runStat.updateStat(resourceMap, iterateId, 2, 0, "row6");
				}

				ok_Hash.put("tLogRow_3", true);
				end_Hash.put("tLogRow_3", System.currentTimeMillis());

				/**
				 * [tLogRow_3 end ] stop
				 */

			} // end the resume

		} catch (java.lang.Exception e) {

			TalendException te = new TalendException(e, currentComponent, globalMap);

			throw te;
		} catch (java.lang.Error error) {

			runStat.stopThreadStat();

			throw error;
		} finally {

			try {

				/**
				 * [tDBInput_3 finally ] start
				 */

				currentComponent = "tDBInput_3";

				/**
				 * [tDBInput_3 finally ] stop
				 */

				/**
				 * [tLogRow_3 finally ] start
				 */

				currentComponent = "tLogRow_3";

				/**
				 * [tLogRow_3 finally ] stop
				 */

			} catch (java.lang.Exception e) {
				// ignore
			} catch (java.lang.Error error) {
				// ignore
			}
			resourceMap = null;
		}

		globalMap.put("tDBInput_3_SUBPROCESS_STATE", 1);
	}

	public static class row7Struct implements routines.system.IPersistableRow<row7Struct> {
		final static byte[] commonByteArrayLock_WIPO_PROJECTS_G3b_Mig_UD = new byte[0];
		static byte[] commonByteArray_WIPO_PROJECTS_G3b_Mig_UD = new byte[0];

		public void readData(ObjectInputStream dis) {

			synchronized (commonByteArrayLock_WIPO_PROJECTS_G3b_Mig_UD) {

				try {

					int length = 0;

				}

				finally {
				}

			}

		}

		public void writeData(ObjectOutputStream dos) {
			try {

			}

			finally {
			}

		}

		public String toString() {

			StringBuilder sb = new StringBuilder();
			sb.append(super.toString());
			sb.append("[");
			sb.append("]");

			return sb.toString();
		}

		/**
		 * Compare keys
		 */
		public int compareTo(row7Struct other) {

			int returnValue = -1;

			return returnValue;
		}

		private int checkNullsAndCompare(Object object1, Object object2) {
			int returnValue = 0;
			if (object1 instanceof Comparable && object2 instanceof Comparable) {
				returnValue = ((Comparable) object1).compareTo(object2);
			} else if (object1 != null && object2 != null) {
				returnValue = compareStrings(object1.toString(), object2.toString());
			} else if (object1 == null && object2 != null) {
				returnValue = 1;
			} else if (object1 != null && object2 == null) {
				returnValue = -1;
			} else {
				returnValue = 0;
			}

			return returnValue;
		}

		private int compareStrings(String string1, String string2) {
			return string1.compareTo(string2);
		}

	}

	public void tDBRow_3Process(final java.util.Map<String, Object> globalMap) throws TalendException {
		globalMap.put("tDBRow_3_SUBPROCESS_STATE", 0);

		final boolean execStat = this.execStat;

		String iterateId = "";

		String currentComponent = "";
		java.util.Map<String, Object> resourceMap = new java.util.HashMap<String, Object>();

		try {
			// TDI-39566 avoid throwing an useless Exception
			boolean resumeIt = true;
			if (globalResumeTicket == false && resumeEntryMethodName != null) {
				String currentMethodName = new java.lang.Exception().getStackTrace()[0].getMethodName();
				resumeIt = resumeEntryMethodName.equals(currentMethodName);
			}
			if (resumeIt || globalResumeTicket) { // start the resume
				globalResumeTicket = true;

				row7Struct row7 = new row7Struct();

				/**
				 * [tDBCommit_3 begin ] start
				 */

				ok_Hash.put("tDBCommit_3", false);
				start_Hash.put("tDBCommit_3", System.currentTimeMillis());

				currentComponent = "tDBCommit_3";

				if (execStat) {
					runStat.updateStatOnConnection(resourceMap, iterateId, 0, 0, "row7");
				}

				int tos_count_tDBCommit_3 = 0;

				/**
				 * [tDBCommit_3 begin ] stop
				 */

				/**
				 * [tDBRow_3 begin ] start
				 */

				ok_Hash.put("tDBRow_3", false);
				start_Hash.put("tDBRow_3", System.currentTimeMillis());

				currentComponent = "tDBRow_3";

				int tos_count_tDBRow_3 = 0;

				java.sql.Connection conn_tDBRow_3 = null;
				String query_tDBRow_3 = "";
				boolean whetherReject_tDBRow_3 = false;
				conn_tDBRow_3 = (java.sql.Connection) globalMap.get("conn_tMSSqlConnection_3");

				resourceMap.put("conn_tDBRow_3", conn_tDBRow_3);
				java.sql.Statement stmt_tDBRow_3 = conn_tDBRow_3.createStatement();
				resourceMap.put("stmt_tDBRow_3", stmt_tDBRow_3);

				/**
				 * [tDBRow_3 begin ] stop
				 */

				/**
				 * [tDBRow_3 main ] start
				 */

				currentComponent = "tDBRow_3";

				row7 = null;

				query_tDBRow_3 = "EXEC IMPORTSETPERSONNBR;";
				whetherReject_tDBRow_3 = false;
				globalMap.put("tDBRow_3_QUERY", query_tDBRow_3);
				try {
					stmt_tDBRow_3.execute(query_tDBRow_3);

				} catch (java.lang.Exception e) {
					whetherReject_tDBRow_3 = true;

					System.err.print(e.getMessage());

				}

				if (!whetherReject_tDBRow_3) {

					row7 = new row7Struct();

				}

				tos_count_tDBRow_3++;

				/**
				 * [tDBRow_3 main ] stop
				 */

				/**
				 * [tDBRow_3 process_data_begin ] start
				 */

				currentComponent = "tDBRow_3";

				/**
				 * [tDBRow_3 process_data_begin ] stop
				 */
// Start of branch "row7"
				if (row7 != null) {

					/**
					 * [tDBCommit_3 main ] start
					 */

					currentComponent = "tDBCommit_3";

					if (execStat) {
						runStat.updateStatOnConnection(iterateId, 1, 1

								, "row7"

						);
					}

					java.sql.Connection conn_tDBCommit_3 = (java.sql.Connection) globalMap
							.get("conn_tMSSqlConnection_3");
					if (conn_tDBCommit_3 != null && !conn_tDBCommit_3.isClosed()) {

						conn_tDBCommit_3.commit();

					}

					tos_count_tDBCommit_3++;

					/**
					 * [tDBCommit_3 main ] stop
					 */

					/**
					 * [tDBCommit_3 process_data_begin ] start
					 */

					currentComponent = "tDBCommit_3";

					/**
					 * [tDBCommit_3 process_data_begin ] stop
					 */

					/**
					 * [tDBCommit_3 process_data_end ] start
					 */

					currentComponent = "tDBCommit_3";

					/**
					 * [tDBCommit_3 process_data_end ] stop
					 */

				} // End of branch "row7"

				/**
				 * [tDBRow_3 process_data_end ] start
				 */

				currentComponent = "tDBRow_3";

				/**
				 * [tDBRow_3 process_data_end ] stop
				 */

				/**
				 * [tDBRow_3 end ] start
				 */

				currentComponent = "tDBRow_3";

				stmt_tDBRow_3.close();
				resourceMap.remove("stmt_tDBRow_3");
				resourceMap.put("statementClosed_tDBRow_3", true);
				resourceMap.put("finish_tDBRow_3", true);

				ok_Hash.put("tDBRow_3", true);
				end_Hash.put("tDBRow_3", System.currentTimeMillis());

				/**
				 * [tDBRow_3 end ] stop
				 */

				/**
				 * [tDBCommit_3 end ] start
				 */

				currentComponent = "tDBCommit_3";

				if (execStat) {
					runStat.updateStat(resourceMap, iterateId, 2, 0, "row7");
				}

				ok_Hash.put("tDBCommit_3", true);
				end_Hash.put("tDBCommit_3", System.currentTimeMillis());

				if (execStat) {
					runStat.updateStatOnConnection("OnComponentOk4", 0, "ok");
				}
				tDBInput_4Process(globalMap);

				/**
				 * [tDBCommit_3 end ] stop
				 */

			} // end the resume

			if (resumeEntryMethodName == null || globalResumeTicket) {
				resumeUtil.addLog("CHECKPOINT", "CONNECTION:SUBJOB_OK:tDBRow_3:OnSubjobOk", "",
						Thread.currentThread().getId() + "", "", "", "", "", "");
			}

			if (execStat) {
				runStat.updateStatOnConnection("OnSubjobOk6", 0, "ok");
			}

			tDBRow_2Process(globalMap);

		} catch (java.lang.Exception e) {

			TalendException te = new TalendException(e, currentComponent, globalMap);

			throw te;
		} catch (java.lang.Error error) {

			runStat.stopThreadStat();

			throw error;
		} finally {

			try {

				/**
				 * [tDBRow_3 finally ] start
				 */

				currentComponent = "tDBRow_3";

				if (resourceMap.get("statementClosed_tDBRow_3") == null) {
					java.sql.Statement stmtToClose_tDBRow_3 = null;
					if ((stmtToClose_tDBRow_3 = (java.sql.Statement) resourceMap.remove("stmt_tDBRow_3")) != null) {
						stmtToClose_tDBRow_3.close();
					}
				}

				/**
				 * [tDBRow_3 finally ] stop
				 */

				/**
				 * [tDBCommit_3 finally ] start
				 */

				currentComponent = "tDBCommit_3";

				/**
				 * [tDBCommit_3 finally ] stop
				 */

			} catch (java.lang.Exception e) {
				// ignore
			} catch (java.lang.Error error) {
				// ignore
			}
			resourceMap = null;
		}

		globalMap.put("tDBRow_3_SUBPROCESS_STATE", 1);
	}

	public static class row8Struct implements routines.system.IPersistableRow<row8Struct> {
		final static byte[] commonByteArrayLock_WIPO_PROJECTS_G3b_Mig_UD = new byte[0];
		static byte[] commonByteArray_WIPO_PROJECTS_G3b_Mig_UD = new byte[0];

		public String Message;

		public String getMessage() {
			return this.Message;
		}

		public java.util.Date Time;

		public java.util.Date getTime() {
			return this.Time;
		}

		private String readString(ObjectInputStream dis) throws IOException {
			String strReturn = null;
			int length = 0;
			length = dis.readInt();
			if (length == -1) {
				strReturn = null;
			} else {
				if (length > commonByteArray_WIPO_PROJECTS_G3b_Mig_UD.length) {
					if (length < 1024 && commonByteArray_WIPO_PROJECTS_G3b_Mig_UD.length == 0) {
						commonByteArray_WIPO_PROJECTS_G3b_Mig_UD = new byte[1024];
					} else {
						commonByteArray_WIPO_PROJECTS_G3b_Mig_UD = new byte[2 * length];
					}
				}
				dis.readFully(commonByteArray_WIPO_PROJECTS_G3b_Mig_UD, 0, length);
				strReturn = new String(commonByteArray_WIPO_PROJECTS_G3b_Mig_UD, 0, length, utf8Charset);
			}
			return strReturn;
		}

		private void writeString(String str, ObjectOutputStream dos) throws IOException {
			if (str == null) {
				dos.writeInt(-1);
			} else {
				byte[] byteArray = str.getBytes(utf8Charset);
				dos.writeInt(byteArray.length);
				dos.write(byteArray);
			}
		}

		private java.util.Date readDate(ObjectInputStream dis) throws IOException {
			java.util.Date dateReturn = null;
			int length = 0;
			length = dis.readByte();
			if (length == -1) {
				dateReturn = null;
			} else {
				dateReturn = new Date(dis.readLong());
			}
			return dateReturn;
		}

		private void writeDate(java.util.Date date1, ObjectOutputStream dos) throws IOException {
			if (date1 == null) {
				dos.writeByte(-1);
			} else {
				dos.writeByte(0);
				dos.writeLong(date1.getTime());
			}
		}

		public void readData(ObjectInputStream dis) {

			synchronized (commonByteArrayLock_WIPO_PROJECTS_G3b_Mig_UD) {

				try {

					int length = 0;

					this.Message = readString(dis);

					this.Time = readDate(dis);

				} catch (IOException e) {
					throw new RuntimeException(e);

				}

			}

		}

		public void writeData(ObjectOutputStream dos) {
			try {

				// String

				writeString(this.Message, dos);

				// java.util.Date

				writeDate(this.Time, dos);

			} catch (IOException e) {
				throw new RuntimeException(e);
			}

		}

		public String toString() {

			StringBuilder sb = new StringBuilder();
			sb.append(super.toString());
			sb.append("[");
			sb.append("Message=" + Message);
			sb.append(",Time=" + String.valueOf(Time));
			sb.append("]");

			return sb.toString();
		}

		/**
		 * Compare keys
		 */
		public int compareTo(row8Struct other) {

			int returnValue = -1;

			return returnValue;
		}

		private int checkNullsAndCompare(Object object1, Object object2) {
			int returnValue = 0;
			if (object1 instanceof Comparable && object2 instanceof Comparable) {
				returnValue = ((Comparable) object1).compareTo(object2);
			} else if (object1 != null && object2 != null) {
				returnValue = compareStrings(object1.toString(), object2.toString());
			} else if (object1 == null && object2 != null) {
				returnValue = 1;
			} else if (object1 != null && object2 == null) {
				returnValue = -1;
			} else {
				returnValue = 0;
			}

			return returnValue;
		}

		private int compareStrings(String string1, String string2) {
			return string1.compareTo(string2);
		}

	}

	public void tDBInput_4Process(final java.util.Map<String, Object> globalMap) throws TalendException {
		globalMap.put("tDBInput_4_SUBPROCESS_STATE", 0);

		final boolean execStat = this.execStat;

		String iterateId = "";

		String currentComponent = "";
		java.util.Map<String, Object> resourceMap = new java.util.HashMap<String, Object>();

		try {
			// TDI-39566 avoid throwing an useless Exception
			boolean resumeIt = true;
			if (globalResumeTicket == false && resumeEntryMethodName != null) {
				String currentMethodName = new java.lang.Exception().getStackTrace()[0].getMethodName();
				resumeIt = resumeEntryMethodName.equals(currentMethodName);
			}
			if (resumeIt || globalResumeTicket) { // start the resume
				globalResumeTicket = true;

				row8Struct row8 = new row8Struct();

				/**
				 * [tLogRow_4 begin ] start
				 */

				ok_Hash.put("tLogRow_4", false);
				start_Hash.put("tLogRow_4", System.currentTimeMillis());

				currentComponent = "tLogRow_4";

				if (execStat) {
					runStat.updateStatOnConnection(resourceMap, iterateId, 0, 0, "row8");
				}

				int tos_count_tLogRow_4 = 0;

				///////////////////////

				final String OUTPUT_FIELD_SEPARATOR_tLogRow_4 = "|";
				java.io.PrintStream consoleOut_tLogRow_4 = null;

				StringBuilder strBuffer_tLogRow_4 = null;
				int nb_line_tLogRow_4 = 0;
///////////////////////    			

				/**
				 * [tLogRow_4 begin ] stop
				 */

				/**
				 * [tDBInput_4 begin ] start
				 */

				ok_Hash.put("tDBInput_4", false);
				start_Hash.put("tDBInput_4", System.currentTimeMillis());

				currentComponent = "tDBInput_4";

				int tos_count_tDBInput_4 = 0;

				org.talend.designer.components.util.mssql.MSSqlGenerateTimestampUtil mssqlGTU_tDBInput_4 = org.talend.designer.components.util.mssql.MSSqlUtilFactory
						.getMSSqlGenerateTimestampUtil();

				java.util.List<String> talendToDBList_tDBInput_4 = new java.util.ArrayList();
				String[] talendToDBArray_tDBInput_4 = new String[] { "FLOAT", "NUMERIC", "NUMERIC IDENTITY", "DECIMAL",
						"DECIMAL IDENTITY", "REAL" };
				java.util.Collections.addAll(talendToDBList_tDBInput_4, talendToDBArray_tDBInput_4);
				int nb_line_tDBInput_4 = 0;
				java.sql.Connection conn_tDBInput_4 = null;
				conn_tDBInput_4 = (java.sql.Connection) globalMap.get("conn_tMSSqlConnection_3");

				String dbschema_tDBInput_4 = (String) globalMap.get("dbschema_tMSSqlConnection_3");

				java.sql.Statement stmt_tDBInput_4 = conn_tDBInput_4.createStatement();

				String dbquery_tDBInput_4 = "SELECT 'Step 4: set person nbr reprs' ,GETDATE();";

				globalMap.put("tDBInput_4_QUERY", dbquery_tDBInput_4);
				java.sql.ResultSet rs_tDBInput_4 = null;

				try {
					rs_tDBInput_4 = stmt_tDBInput_4.executeQuery(dbquery_tDBInput_4);
					java.sql.ResultSetMetaData rsmd_tDBInput_4 = rs_tDBInput_4.getMetaData();
					int colQtyInRs_tDBInput_4 = rsmd_tDBInput_4.getColumnCount();

					String tmpContent_tDBInput_4 = null;

					while (rs_tDBInput_4.next()) {
						nb_line_tDBInput_4++;

						if (colQtyInRs_tDBInput_4 < 1) {
							row8.Message = null;
						} else {

							tmpContent_tDBInput_4 = rs_tDBInput_4.getString(1);
							if (tmpContent_tDBInput_4 != null) {
								if (talendToDBList_tDBInput_4.contains(
										rsmd_tDBInput_4.getColumnTypeName(1).toUpperCase(java.util.Locale.ENGLISH))) {
									row8.Message = FormatterUtils.formatUnwithE(tmpContent_tDBInput_4);
								} else {
									row8.Message = tmpContent_tDBInput_4;
								}
							} else {
								row8.Message = null;
							}
						}
						if (colQtyInRs_tDBInput_4 < 2) {
							row8.Time = null;
						} else {

							row8.Time = mssqlGTU_tDBInput_4.getDate(rsmd_tDBInput_4, rs_tDBInput_4, 2);

						}

						/**
						 * [tDBInput_4 begin ] stop
						 */

						/**
						 * [tDBInput_4 main ] start
						 */

						currentComponent = "tDBInput_4";

						tos_count_tDBInput_4++;

						/**
						 * [tDBInput_4 main ] stop
						 */

						/**
						 * [tDBInput_4 process_data_begin ] start
						 */

						currentComponent = "tDBInput_4";

						/**
						 * [tDBInput_4 process_data_begin ] stop
						 */

						/**
						 * [tLogRow_4 main ] start
						 */

						currentComponent = "tLogRow_4";

						if (execStat) {
							runStat.updateStatOnConnection(iterateId, 1, 1

									, "row8"

							);
						}

///////////////////////		

						strBuffer_tLogRow_4 = new StringBuilder();

						if (row8.Message != null) { //

							strBuffer_tLogRow_4.append(String.valueOf(row8.Message));

						} //

						strBuffer_tLogRow_4.append("|");

						if (row8.Time != null) { //

							strBuffer_tLogRow_4.append(FormatterUtils.format_Date(row8.Time, "yyyy-MM-dd HH:mm:ss"));

						} //

						if (globalMap.get("tLogRow_CONSOLE") != null) {
							consoleOut_tLogRow_4 = (java.io.PrintStream) globalMap.get("tLogRow_CONSOLE");
						} else {
							consoleOut_tLogRow_4 = new java.io.PrintStream(
									new java.io.BufferedOutputStream(System.out));
							globalMap.put("tLogRow_CONSOLE", consoleOut_tLogRow_4);
						}
						consoleOut_tLogRow_4.println(strBuffer_tLogRow_4.toString());
						consoleOut_tLogRow_4.flush();
						nb_line_tLogRow_4++;
//////

//////                    

///////////////////////    			

						tos_count_tLogRow_4++;

						/**
						 * [tLogRow_4 main ] stop
						 */

						/**
						 * [tLogRow_4 process_data_begin ] start
						 */

						currentComponent = "tLogRow_4";

						/**
						 * [tLogRow_4 process_data_begin ] stop
						 */

						/**
						 * [tLogRow_4 process_data_end ] start
						 */

						currentComponent = "tLogRow_4";

						/**
						 * [tLogRow_4 process_data_end ] stop
						 */

						/**
						 * [tDBInput_4 process_data_end ] start
						 */

						currentComponent = "tDBInput_4";

						/**
						 * [tDBInput_4 process_data_end ] stop
						 */

						/**
						 * [tDBInput_4 end ] start
						 */

						currentComponent = "tDBInput_4";

					}
				} finally {
					if (rs_tDBInput_4 != null) {
						rs_tDBInput_4.close();
					}
					if (stmt_tDBInput_4 != null) {
						stmt_tDBInput_4.close();
					}
				}
				globalMap.put("tDBInput_4_NB_LINE", nb_line_tDBInput_4);

				ok_Hash.put("tDBInput_4", true);
				end_Hash.put("tDBInput_4", System.currentTimeMillis());

				/**
				 * [tDBInput_4 end ] stop
				 */

				/**
				 * [tLogRow_4 end ] start
				 */

				currentComponent = "tLogRow_4";

//////
//////
				globalMap.put("tLogRow_4_NB_LINE", nb_line_tLogRow_4);

///////////////////////    			

				if (execStat) {
					runStat.updateStat(resourceMap, iterateId, 2, 0, "row8");
				}

				ok_Hash.put("tLogRow_4", true);
				end_Hash.put("tLogRow_4", System.currentTimeMillis());

				/**
				 * [tLogRow_4 end ] stop
				 */

			} // end the resume

		} catch (java.lang.Exception e) {

			TalendException te = new TalendException(e, currentComponent, globalMap);

			throw te;
		} catch (java.lang.Error error) {

			runStat.stopThreadStat();

			throw error;
		} finally {

			try {

				/**
				 * [tDBInput_4 finally ] start
				 */

				currentComponent = "tDBInput_4";

				/**
				 * [tDBInput_4 finally ] stop
				 */

				/**
				 * [tLogRow_4 finally ] start
				 */

				currentComponent = "tLogRow_4";

				/**
				 * [tLogRow_4 finally ] stop
				 */

			} catch (java.lang.Exception e) {
				// ignore
			} catch (java.lang.Error error) {
				// ignore
			}
			resourceMap = null;
		}

		globalMap.put("tDBInput_4_SUBPROCESS_STATE", 1);
	}

	public static class row5Struct implements routines.system.IPersistableRow<row5Struct> {
		final static byte[] commonByteArrayLock_WIPO_PROJECTS_G3b_Mig_UD = new byte[0];
		static byte[] commonByteArray_WIPO_PROJECTS_G3b_Mig_UD = new byte[0];

		public void readData(ObjectInputStream dis) {

			synchronized (commonByteArrayLock_WIPO_PROJECTS_G3b_Mig_UD) {

				try {

					int length = 0;

				}

				finally {
				}

			}

		}

		public void writeData(ObjectOutputStream dos) {
			try {

			}

			finally {
			}

		}

		public String toString() {

			StringBuilder sb = new StringBuilder();
			sb.append(super.toString());
			sb.append("[");
			sb.append("]");

			return sb.toString();
		}

		/**
		 * Compare keys
		 */
		public int compareTo(row5Struct other) {

			int returnValue = -1;

			return returnValue;
		}

		private int checkNullsAndCompare(Object object1, Object object2) {
			int returnValue = 0;
			if (object1 instanceof Comparable && object2 instanceof Comparable) {
				returnValue = ((Comparable) object1).compareTo(object2);
			} else if (object1 != null && object2 != null) {
				returnValue = compareStrings(object1.toString(), object2.toString());
			} else if (object1 == null && object2 != null) {
				returnValue = 1;
			} else if (object1 != null && object2 == null) {
				returnValue = -1;
			} else {
				returnValue = 0;
			}

			return returnValue;
		}

		private int compareStrings(String string1, String string2) {
			return string1.compareTo(string2);
		}

	}

	public static class row36Struct implements routines.system.IPersistableRow<row36Struct> {
		final static byte[] commonByteArrayLock_WIPO_PROJECTS_G3b_Mig_UD = new byte[0];
		static byte[] commonByteArray_WIPO_PROJECTS_G3b_Mig_UD = new byte[0];

		public String errorCode;

		public String getErrorCode() {
			return this.errorCode;
		}

		public String errorMessage;

		public String getErrorMessage() {
			return this.errorMessage;
		}

		private String readString(ObjectInputStream dis) throws IOException {
			String strReturn = null;
			int length = 0;
			length = dis.readInt();
			if (length == -1) {
				strReturn = null;
			} else {
				if (length > commonByteArray_WIPO_PROJECTS_G3b_Mig_UD.length) {
					if (length < 1024 && commonByteArray_WIPO_PROJECTS_G3b_Mig_UD.length == 0) {
						commonByteArray_WIPO_PROJECTS_G3b_Mig_UD = new byte[1024];
					} else {
						commonByteArray_WIPO_PROJECTS_G3b_Mig_UD = new byte[2 * length];
					}
				}
				dis.readFully(commonByteArray_WIPO_PROJECTS_G3b_Mig_UD, 0, length);
				strReturn = new String(commonByteArray_WIPO_PROJECTS_G3b_Mig_UD, 0, length, utf8Charset);
			}
			return strReturn;
		}

		private void writeString(String str, ObjectOutputStream dos) throws IOException {
			if (str == null) {
				dos.writeInt(-1);
			} else {
				byte[] byteArray = str.getBytes(utf8Charset);
				dos.writeInt(byteArray.length);
				dos.write(byteArray);
			}
		}

		public void readData(ObjectInputStream dis) {

			synchronized (commonByteArrayLock_WIPO_PROJECTS_G3b_Mig_UD) {

				try {

					int length = 0;

					this.errorCode = readString(dis);

					this.errorMessage = readString(dis);

				} catch (IOException e) {
					throw new RuntimeException(e);

				}

			}

		}

		public void writeData(ObjectOutputStream dos) {
			try {

				// String

				writeString(this.errorCode, dos);

				// String

				writeString(this.errorMessage, dos);

			} catch (IOException e) {
				throw new RuntimeException(e);
			}

		}

		public String toString() {

			StringBuilder sb = new StringBuilder();
			sb.append(super.toString());
			sb.append("[");
			sb.append("errorCode=" + errorCode);
			sb.append(",errorMessage=" + errorMessage);
			sb.append("]");

			return sb.toString();
		}

		/**
		 * Compare keys
		 */
		public int compareTo(row36Struct other) {

			int returnValue = -1;

			return returnValue;
		}

		private int checkNullsAndCompare(Object object1, Object object2) {
			int returnValue = 0;
			if (object1 instanceof Comparable && object2 instanceof Comparable) {
				returnValue = ((Comparable) object1).compareTo(object2);
			} else if (object1 != null && object2 != null) {
				returnValue = compareStrings(object1.toString(), object2.toString());
			} else if (object1 == null && object2 != null) {
				returnValue = 1;
			} else if (object1 != null && object2 == null) {
				returnValue = -1;
			} else {
				returnValue = 0;
			}

			return returnValue;
		}

		private int compareStrings(String string1, String string2) {
			return string1.compareTo(string2);
		}

	}

	public void tDBRow_2Process(final java.util.Map<String, Object> globalMap) throws TalendException {
		globalMap.put("tDBRow_2_SUBPROCESS_STATE", 0);

		final boolean execStat = this.execStat;

		String iterateId = "";

		String currentComponent = "";
		java.util.Map<String, Object> resourceMap = new java.util.HashMap<String, Object>();

		try {
			// TDI-39566 avoid throwing an useless Exception
			boolean resumeIt = true;
			if (globalResumeTicket == false && resumeEntryMethodName != null) {
				String currentMethodName = new java.lang.Exception().getStackTrace()[0].getMethodName();
				resumeIt = resumeEntryMethodName.equals(currentMethodName);
			}
			if (resumeIt || globalResumeTicket) { // start the resume
				globalResumeTicket = true;

				row5Struct row5 = new row5Struct();
				row36Struct row36 = new row36Struct();

				/**
				 * [tDBCommit_2 begin ] start
				 */

				ok_Hash.put("tDBCommit_2", false);
				start_Hash.put("tDBCommit_2", System.currentTimeMillis());

				currentComponent = "tDBCommit_2";

				if (execStat) {
					runStat.updateStatOnConnection(resourceMap, iterateId, 0, 0, "row5");
				}

				int tos_count_tDBCommit_2 = 0;

				/**
				 * [tDBCommit_2 begin ] stop
				 */

				/**
				 * [tLogRow_20 begin ] start
				 */

				ok_Hash.put("tLogRow_20", false);
				start_Hash.put("tLogRow_20", System.currentTimeMillis());

				currentComponent = "tLogRow_20";

				if (execStat) {
					runStat.updateStatOnConnection(resourceMap, iterateId, 0, 0, "row36");
				}

				int tos_count_tLogRow_20 = 0;

				///////////////////////

				final String OUTPUT_FIELD_SEPARATOR_tLogRow_20 = "|";
				java.io.PrintStream consoleOut_tLogRow_20 = null;

				StringBuilder strBuffer_tLogRow_20 = null;
				int nb_line_tLogRow_20 = 0;
///////////////////////    			

				/**
				 * [tLogRow_20 begin ] stop
				 */

				/**
				 * [tDBRow_2 begin ] start
				 */

				ok_Hash.put("tDBRow_2", false);
				start_Hash.put("tDBRow_2", System.currentTimeMillis());

				tStatCatcher_1.addMessage("begin", "tDBRow_2");
				tStatCatcher_1Process(globalMap);

				currentComponent = "tDBRow_2";

				int tos_count_tDBRow_2 = 0;

				java.sql.Connection conn_tDBRow_2 = null;
				String query_tDBRow_2 = "";
				boolean whetherReject_tDBRow_2 = false;
				conn_tDBRow_2 = (java.sql.Connection) globalMap.get("conn_tMSSqlConnection_3");

				resourceMap.put("conn_tDBRow_2", conn_tDBRow_2);
				java.sql.Statement stmt_tDBRow_2 = conn_tDBRow_2.createStatement();
				resourceMap.put("stmt_tDBRow_2", stmt_tDBRow_2);

				/**
				 * [tDBRow_2 begin ] stop
				 */

				/**
				 * [tDBRow_2 main ] start
				 */

				currentComponent = "tDBRow_2";

				row5 = null;

				row36 = null;

				query_tDBRow_2 = "UPDATE  T   \n		SET	person_nbr = (	SELECT person_nbr\n			FROM  WRK_PERSON_ADDR \n			WHERE	 ref_nbr  = T.rowid\n		),	\n	"
						+ "	    addr_nbr = (	SELECT addr_nbr\n			FROM  WRK_PERSON_ADDR \n			WHERE	 ref_nbr  = T.rowid\n		) \n		FROM  WRK_USERDOC_RE"
						+ "PRS T ;\n\n";
				whetherReject_tDBRow_2 = false;
				globalMap.put("tDBRow_2_QUERY", query_tDBRow_2);
				try {
					stmt_tDBRow_2.execute(query_tDBRow_2);

				} catch (java.lang.Exception e) {
					whetherReject_tDBRow_2 = true;

					row36 = new row36Struct();

					row36.errorCode = ((java.sql.SQLException) e).getSQLState();
					row36.errorMessage = e.getMessage() + " - Line: " + tos_count_tDBRow_2;

				}

				if (!whetherReject_tDBRow_2) {

					row5 = new row5Struct();

				}

				tos_count_tDBRow_2++;

				/**
				 * [tDBRow_2 main ] stop
				 */

				/**
				 * [tDBRow_2 process_data_begin ] start
				 */

				currentComponent = "tDBRow_2";

				/**
				 * [tDBRow_2 process_data_begin ] stop
				 */
// Start of branch "row5"
				if (row5 != null) {

					/**
					 * [tDBCommit_2 main ] start
					 */

					currentComponent = "tDBCommit_2";

					if (execStat) {
						runStat.updateStatOnConnection(iterateId, 1, 1

								, "row5"

						);
					}

					java.sql.Connection conn_tDBCommit_2 = (java.sql.Connection) globalMap
							.get("conn_tMSSqlConnection_3");
					if (conn_tDBCommit_2 != null && !conn_tDBCommit_2.isClosed()) {

						conn_tDBCommit_2.commit();

					}

					tos_count_tDBCommit_2++;

					/**
					 * [tDBCommit_2 main ] stop
					 */

					/**
					 * [tDBCommit_2 process_data_begin ] start
					 */

					currentComponent = "tDBCommit_2";

					/**
					 * [tDBCommit_2 process_data_begin ] stop
					 */

					/**
					 * [tDBCommit_2 process_data_end ] start
					 */

					currentComponent = "tDBCommit_2";

					/**
					 * [tDBCommit_2 process_data_end ] stop
					 */

				} // End of branch "row5"

// Start of branch "row36"
				if (row36 != null) {

					/**
					 * [tLogRow_20 main ] start
					 */

					currentComponent = "tLogRow_20";

					if (execStat) {
						runStat.updateStatOnConnection(iterateId, 1, 1

								, "row36"

						);
					}

///////////////////////		

					strBuffer_tLogRow_20 = new StringBuilder();

					if (row36.errorCode != null) { //

						strBuffer_tLogRow_20.append(String.valueOf(row36.errorCode));

					} //

					strBuffer_tLogRow_20.append("|");

					if (row36.errorMessage != null) { //

						strBuffer_tLogRow_20.append(String.valueOf(row36.errorMessage));

					} //

					if (globalMap.get("tLogRow_CONSOLE") != null) {
						consoleOut_tLogRow_20 = (java.io.PrintStream) globalMap.get("tLogRow_CONSOLE");
					} else {
						consoleOut_tLogRow_20 = new java.io.PrintStream(new java.io.BufferedOutputStream(System.out));
						globalMap.put("tLogRow_CONSOLE", consoleOut_tLogRow_20);
					}
					consoleOut_tLogRow_20.println(strBuffer_tLogRow_20.toString());
					consoleOut_tLogRow_20.flush();
					nb_line_tLogRow_20++;
//////

//////                    

///////////////////////    			

					tos_count_tLogRow_20++;

					/**
					 * [tLogRow_20 main ] stop
					 */

					/**
					 * [tLogRow_20 process_data_begin ] start
					 */

					currentComponent = "tLogRow_20";

					/**
					 * [tLogRow_20 process_data_begin ] stop
					 */

					/**
					 * [tLogRow_20 process_data_end ] start
					 */

					currentComponent = "tLogRow_20";

					/**
					 * [tLogRow_20 process_data_end ] stop
					 */

				} // End of branch "row36"

				/**
				 * [tDBRow_2 process_data_end ] start
				 */

				currentComponent = "tDBRow_2";

				/**
				 * [tDBRow_2 process_data_end ] stop
				 */

				/**
				 * [tDBRow_2 end ] start
				 */

				currentComponent = "tDBRow_2";

				stmt_tDBRow_2.close();
				resourceMap.remove("stmt_tDBRow_2");
				resourceMap.put("statementClosed_tDBRow_2", true);
				resourceMap.put("finish_tDBRow_2", true);

				ok_Hash.put("tDBRow_2", true);
				end_Hash.put("tDBRow_2", System.currentTimeMillis());

				tStatCatcher_1.addMessage("end", "tDBRow_2", end_Hash.get("tDBRow_2") - start_Hash.get("tDBRow_2"));
				tStatCatcher_1Process(globalMap);

				/**
				 * [tDBRow_2 end ] stop
				 */

				/**
				 * [tDBCommit_2 end ] start
				 */

				currentComponent = "tDBCommit_2";

				if (execStat) {
					runStat.updateStat(resourceMap, iterateId, 2, 0, "row5");
				}

				ok_Hash.put("tDBCommit_2", true);
				end_Hash.put("tDBCommit_2", System.currentTimeMillis());

				/**
				 * [tDBCommit_2 end ] stop
				 */

				/**
				 * [tLogRow_20 end ] start
				 */

				currentComponent = "tLogRow_20";

//////
//////
				globalMap.put("tLogRow_20_NB_LINE", nb_line_tLogRow_20);

///////////////////////    			

				if (execStat) {
					runStat.updateStat(resourceMap, iterateId, 2, 0, "row36");
				}

				ok_Hash.put("tLogRow_20", true);
				end_Hash.put("tLogRow_20", System.currentTimeMillis());

				/**
				 * [tLogRow_20 end ] stop
				 */

			} // end the resume

			if (resumeEntryMethodName == null || globalResumeTicket) {
				resumeUtil.addLog("CHECKPOINT", "CONNECTION:SUBJOB_OK:tDBRow_2:OnSubjobOk", "",
						Thread.currentThread().getId() + "", "", "", "", "", "");
			}

			if (execStat) {
				runStat.updateStatOnConnection("OnSubjobOk20", 0, "ok");
			}

			tDBRow_18Process(globalMap);

		} catch (java.lang.Exception e) {

			TalendException te = new TalendException(e, currentComponent, globalMap);

			throw te;
		} catch (java.lang.Error error) {

			runStat.stopThreadStat();

			throw error;
		} finally {

			try {

				/**
				 * [tDBRow_2 finally ] start
				 */

				currentComponent = "tDBRow_2";

				if (resourceMap.get("statementClosed_tDBRow_2") == null) {
					java.sql.Statement stmtToClose_tDBRow_2 = null;
					if ((stmtToClose_tDBRow_2 = (java.sql.Statement) resourceMap.remove("stmt_tDBRow_2")) != null) {
						stmtToClose_tDBRow_2.close();
					}
				}

				/**
				 * [tDBRow_2 finally ] stop
				 */

				/**
				 * [tDBCommit_2 finally ] start
				 */

				currentComponent = "tDBCommit_2";

				/**
				 * [tDBCommit_2 finally ] stop
				 */

				/**
				 * [tLogRow_20 finally ] start
				 */

				currentComponent = "tLogRow_20";

				/**
				 * [tLogRow_20 finally ] stop
				 */

			} catch (java.lang.Exception e) {
				// ignore
			} catch (java.lang.Error error) {
				// ignore
			}
			resourceMap = null;
		}

		globalMap.put("tDBRow_2_SUBPROCESS_STATE", 1);
	}

	public static class row37Struct implements routines.system.IPersistableRow<row37Struct> {
		final static byte[] commonByteArrayLock_WIPO_PROJECTS_G3b_Mig_UD = new byte[0];
		static byte[] commonByteArray_WIPO_PROJECTS_G3b_Mig_UD = new byte[0];

		public void readData(ObjectInputStream dis) {

			synchronized (commonByteArrayLock_WIPO_PROJECTS_G3b_Mig_UD) {

				try {

					int length = 0;

				}

				finally {
				}

			}

		}

		public void writeData(ObjectOutputStream dos) {
			try {

			}

			finally {
			}

		}

		public String toString() {

			StringBuilder sb = new StringBuilder();
			sb.append(super.toString());
			sb.append("[");
			sb.append("]");

			return sb.toString();
		}

		/**
		 * Compare keys
		 */
		public int compareTo(row37Struct other) {

			int returnValue = -1;

			return returnValue;
		}

		private int checkNullsAndCompare(Object object1, Object object2) {
			int returnValue = 0;
			if (object1 instanceof Comparable && object2 instanceof Comparable) {
				returnValue = ((Comparable) object1).compareTo(object2);
			} else if (object1 != null && object2 != null) {
				returnValue = compareStrings(object1.toString(), object2.toString());
			} else if (object1 == null && object2 != null) {
				returnValue = 1;
			} else if (object1 != null && object2 == null) {
				returnValue = -1;
			} else {
				returnValue = 0;
			}

			return returnValue;
		}

		private int compareStrings(String string1, String string2) {
			return string1.compareTo(string2);
		}

	}

	public static class row38Struct implements routines.system.IPersistableRow<row38Struct> {
		final static byte[] commonByteArrayLock_WIPO_PROJECTS_G3b_Mig_UD = new byte[0];
		static byte[] commonByteArray_WIPO_PROJECTS_G3b_Mig_UD = new byte[0];

		public String errorCode;

		public String getErrorCode() {
			return this.errorCode;
		}

		public String errorMessage;

		public String getErrorMessage() {
			return this.errorMessage;
		}

		private String readString(ObjectInputStream dis) throws IOException {
			String strReturn = null;
			int length = 0;
			length = dis.readInt();
			if (length == -1) {
				strReturn = null;
			} else {
				if (length > commonByteArray_WIPO_PROJECTS_G3b_Mig_UD.length) {
					if (length < 1024 && commonByteArray_WIPO_PROJECTS_G3b_Mig_UD.length == 0) {
						commonByteArray_WIPO_PROJECTS_G3b_Mig_UD = new byte[1024];
					} else {
						commonByteArray_WIPO_PROJECTS_G3b_Mig_UD = new byte[2 * length];
					}
				}
				dis.readFully(commonByteArray_WIPO_PROJECTS_G3b_Mig_UD, 0, length);
				strReturn = new String(commonByteArray_WIPO_PROJECTS_G3b_Mig_UD, 0, length, utf8Charset);
			}
			return strReturn;
		}

		private void writeString(String str, ObjectOutputStream dos) throws IOException {
			if (str == null) {
				dos.writeInt(-1);
			} else {
				byte[] byteArray = str.getBytes(utf8Charset);
				dos.writeInt(byteArray.length);
				dos.write(byteArray);
			}
		}

		public void readData(ObjectInputStream dis) {

			synchronized (commonByteArrayLock_WIPO_PROJECTS_G3b_Mig_UD) {

				try {

					int length = 0;

					this.errorCode = readString(dis);

					this.errorMessage = readString(dis);

				} catch (IOException e) {
					throw new RuntimeException(e);

				}

			}

		}

		public void writeData(ObjectOutputStream dos) {
			try {

				// String

				writeString(this.errorCode, dos);

				// String

				writeString(this.errorMessage, dos);

			} catch (IOException e) {
				throw new RuntimeException(e);
			}

		}

		public String toString() {

			StringBuilder sb = new StringBuilder();
			sb.append(super.toString());
			sb.append("[");
			sb.append("errorCode=" + errorCode);
			sb.append(",errorMessage=" + errorMessage);
			sb.append("]");

			return sb.toString();
		}

		/**
		 * Compare keys
		 */
		public int compareTo(row38Struct other) {

			int returnValue = -1;

			return returnValue;
		}

		private int checkNullsAndCompare(Object object1, Object object2) {
			int returnValue = 0;
			if (object1 instanceof Comparable && object2 instanceof Comparable) {
				returnValue = ((Comparable) object1).compareTo(object2);
			} else if (object1 != null && object2 != null) {
				returnValue = compareStrings(object1.toString(), object2.toString());
			} else if (object1 == null && object2 != null) {
				returnValue = 1;
			} else if (object1 != null && object2 == null) {
				returnValue = -1;
			} else {
				returnValue = 0;
			}

			return returnValue;
		}

		private int compareStrings(String string1, String string2) {
			return string1.compareTo(string2);
		}

	}

	public void tDBRow_18Process(final java.util.Map<String, Object> globalMap) throws TalendException {
		globalMap.put("tDBRow_18_SUBPROCESS_STATE", 0);

		final boolean execStat = this.execStat;

		String iterateId = "";

		String currentComponent = "";
		java.util.Map<String, Object> resourceMap = new java.util.HashMap<String, Object>();

		try {
			// TDI-39566 avoid throwing an useless Exception
			boolean resumeIt = true;
			if (globalResumeTicket == false && resumeEntryMethodName != null) {
				String currentMethodName = new java.lang.Exception().getStackTrace()[0].getMethodName();
				resumeIt = resumeEntryMethodName.equals(currentMethodName);
			}
			if (resumeIt || globalResumeTicket) { // start the resume
				globalResumeTicket = true;

				row37Struct row37 = new row37Struct();
				row38Struct row38 = new row38Struct();

				/**
				 * [tDBCommit_18 begin ] start
				 */

				ok_Hash.put("tDBCommit_18", false);
				start_Hash.put("tDBCommit_18", System.currentTimeMillis());

				currentComponent = "tDBCommit_18";

				if (execStat) {
					runStat.updateStatOnConnection(resourceMap, iterateId, 0, 0, "row37");
				}

				int tos_count_tDBCommit_18 = 0;

				/**
				 * [tDBCommit_18 begin ] stop
				 */

				/**
				 * [tLogRow_21 begin ] start
				 */

				ok_Hash.put("tLogRow_21", false);
				start_Hash.put("tLogRow_21", System.currentTimeMillis());

				currentComponent = "tLogRow_21";

				if (execStat) {
					runStat.updateStatOnConnection(resourceMap, iterateId, 0, 0, "row38");
				}

				int tos_count_tLogRow_21 = 0;

				///////////////////////

				final String OUTPUT_FIELD_SEPARATOR_tLogRow_21 = "|";
				java.io.PrintStream consoleOut_tLogRow_21 = null;

				StringBuilder strBuffer_tLogRow_21 = null;
				int nb_line_tLogRow_21 = 0;
///////////////////////    			

				/**
				 * [tLogRow_21 begin ] stop
				 */

				/**
				 * [tDBRow_18 begin ] start
				 */

				ok_Hash.put("tDBRow_18", false);
				start_Hash.put("tDBRow_18", System.currentTimeMillis());

				tStatCatcher_1.addMessage("begin", "tDBRow_18");
				tStatCatcher_1Process(globalMap);

				currentComponent = "tDBRow_18";

				int tos_count_tDBRow_18 = 0;

				java.sql.Connection conn_tDBRow_18 = null;
				String query_tDBRow_18 = "";
				boolean whetherReject_tDBRow_18 = false;
				conn_tDBRow_18 = (java.sql.Connection) globalMap.get("conn_tMSSqlConnection_3");

				resourceMap.put("conn_tDBRow_18", conn_tDBRow_18);
				java.sql.Statement stmt_tDBRow_18 = conn_tDBRow_18.createStatement();
				resourceMap.put("stmt_tDBRow_18", stmt_tDBRow_18);

				/**
				 * [tDBRow_18 begin ] stop
				 */

				/**
				 * [tDBRow_18 main ] start
				 */

				currentComponent = "tDBRow_18";

				row37 = null;

				row38 = null;

				query_tDBRow_18 = "\nwith cte as (\n		select  USERDOC_SEQ,USERDOC_SERIES,USERDOC_NBR,ACTION_NBR,\n		 ROW_NUMBER () OVER(order by USERDOC_N"
						+ "BR) as ri\n		from wrk_userdoc_actions\n)\n\nupdate cte set ACTION_NBR=(select ISNULL(MAX(ACTION_NBR), 0) from ip_action)"
						+ "+ri;\n\n\n";
				whetherReject_tDBRow_18 = false;
				globalMap.put("tDBRow_18_QUERY", query_tDBRow_18);
				try {
					stmt_tDBRow_18.execute(query_tDBRow_18);

				} catch (java.lang.Exception e) {
					whetherReject_tDBRow_18 = true;

					row38 = new row38Struct();

					row38.errorCode = ((java.sql.SQLException) e).getSQLState();
					row38.errorMessage = e.getMessage() + " - Line: " + tos_count_tDBRow_18;

				}

				if (!whetherReject_tDBRow_18) {

					row37 = new row37Struct();

				}

				tos_count_tDBRow_18++;

				/**
				 * [tDBRow_18 main ] stop
				 */

				/**
				 * [tDBRow_18 process_data_begin ] start
				 */

				currentComponent = "tDBRow_18";

				/**
				 * [tDBRow_18 process_data_begin ] stop
				 */
// Start of branch "row37"
				if (row37 != null) {

					/**
					 * [tDBCommit_18 main ] start
					 */

					currentComponent = "tDBCommit_18";

					if (execStat) {
						runStat.updateStatOnConnection(iterateId, 1, 1

								, "row37"

						);
					}

					java.sql.Connection conn_tDBCommit_18 = (java.sql.Connection) globalMap
							.get("conn_tMSSqlConnection_3");
					if (conn_tDBCommit_18 != null && !conn_tDBCommit_18.isClosed()) {

						conn_tDBCommit_18.commit();

					}

					tos_count_tDBCommit_18++;

					/**
					 * [tDBCommit_18 main ] stop
					 */

					/**
					 * [tDBCommit_18 process_data_begin ] start
					 */

					currentComponent = "tDBCommit_18";

					/**
					 * [tDBCommit_18 process_data_begin ] stop
					 */

					/**
					 * [tDBCommit_18 process_data_end ] start
					 */

					currentComponent = "tDBCommit_18";

					/**
					 * [tDBCommit_18 process_data_end ] stop
					 */

				} // End of branch "row37"

// Start of branch "row38"
				if (row38 != null) {

					/**
					 * [tLogRow_21 main ] start
					 */

					currentComponent = "tLogRow_21";

					if (execStat) {
						runStat.updateStatOnConnection(iterateId, 1, 1

								, "row38"

						);
					}

///////////////////////		

					strBuffer_tLogRow_21 = new StringBuilder();

					if (row38.errorCode != null) { //

						strBuffer_tLogRow_21.append(String.valueOf(row38.errorCode));

					} //

					strBuffer_tLogRow_21.append("|");

					if (row38.errorMessage != null) { //

						strBuffer_tLogRow_21.append(String.valueOf(row38.errorMessage));

					} //

					if (globalMap.get("tLogRow_CONSOLE") != null) {
						consoleOut_tLogRow_21 = (java.io.PrintStream) globalMap.get("tLogRow_CONSOLE");
					} else {
						consoleOut_tLogRow_21 = new java.io.PrintStream(new java.io.BufferedOutputStream(System.out));
						globalMap.put("tLogRow_CONSOLE", consoleOut_tLogRow_21);
					}
					consoleOut_tLogRow_21.println(strBuffer_tLogRow_21.toString());
					consoleOut_tLogRow_21.flush();
					nb_line_tLogRow_21++;
//////

//////                    

///////////////////////    			

					tos_count_tLogRow_21++;

					/**
					 * [tLogRow_21 main ] stop
					 */

					/**
					 * [tLogRow_21 process_data_begin ] start
					 */

					currentComponent = "tLogRow_21";

					/**
					 * [tLogRow_21 process_data_begin ] stop
					 */

					/**
					 * [tLogRow_21 process_data_end ] start
					 */

					currentComponent = "tLogRow_21";

					/**
					 * [tLogRow_21 process_data_end ] stop
					 */

				} // End of branch "row38"

				/**
				 * [tDBRow_18 process_data_end ] start
				 */

				currentComponent = "tDBRow_18";

				/**
				 * [tDBRow_18 process_data_end ] stop
				 */

				/**
				 * [tDBRow_18 end ] start
				 */

				currentComponent = "tDBRow_18";

				stmt_tDBRow_18.close();
				resourceMap.remove("stmt_tDBRow_18");
				resourceMap.put("statementClosed_tDBRow_18", true);
				resourceMap.put("finish_tDBRow_18", true);

				ok_Hash.put("tDBRow_18", true);
				end_Hash.put("tDBRow_18", System.currentTimeMillis());

				tStatCatcher_1.addMessage("end", "tDBRow_18", end_Hash.get("tDBRow_18") - start_Hash.get("tDBRow_18"));
				tStatCatcher_1Process(globalMap);

				/**
				 * [tDBRow_18 end ] stop
				 */

				/**
				 * [tDBCommit_18 end ] start
				 */

				currentComponent = "tDBCommit_18";

				if (execStat) {
					runStat.updateStat(resourceMap, iterateId, 2, 0, "row37");
				}

				ok_Hash.put("tDBCommit_18", true);
				end_Hash.put("tDBCommit_18", System.currentTimeMillis());

				/**
				 * [tDBCommit_18 end ] stop
				 */

				/**
				 * [tLogRow_21 end ] start
				 */

				currentComponent = "tLogRow_21";

//////
//////
				globalMap.put("tLogRow_21_NB_LINE", nb_line_tLogRow_21);

///////////////////////    			

				if (execStat) {
					runStat.updateStat(resourceMap, iterateId, 2, 0, "row38");
				}

				ok_Hash.put("tLogRow_21", true);
				end_Hash.put("tLogRow_21", System.currentTimeMillis());

				/**
				 * [tLogRow_21 end ] stop
				 */

			} // end the resume

			if (resumeEntryMethodName == null || globalResumeTicket) {
				resumeUtil.addLog("CHECKPOINT", "CONNECTION:SUBJOB_OK:tDBRow_18:OnSubjobOk", "",
						Thread.currentThread().getId() + "", "", "", "", "", "");
			}

			if (execStat) {
				runStat.updateStatOnConnection("OnSubjobOk21", 0, "ok");
			}

			tDBRow_19Process(globalMap);

		} catch (java.lang.Exception e) {

			TalendException te = new TalendException(e, currentComponent, globalMap);

			throw te;
		} catch (java.lang.Error error) {

			runStat.stopThreadStat();

			throw error;
		} finally {

			try {

				/**
				 * [tDBRow_18 finally ] start
				 */

				currentComponent = "tDBRow_18";

				if (resourceMap.get("statementClosed_tDBRow_18") == null) {
					java.sql.Statement stmtToClose_tDBRow_18 = null;
					if ((stmtToClose_tDBRow_18 = (java.sql.Statement) resourceMap.remove("stmt_tDBRow_18")) != null) {
						stmtToClose_tDBRow_18.close();
					}
				}

				/**
				 * [tDBRow_18 finally ] stop
				 */

				/**
				 * [tDBCommit_18 finally ] start
				 */

				currentComponent = "tDBCommit_18";

				/**
				 * [tDBCommit_18 finally ] stop
				 */

				/**
				 * [tLogRow_21 finally ] start
				 */

				currentComponent = "tLogRow_21";

				/**
				 * [tLogRow_21 finally ] stop
				 */

			} catch (java.lang.Exception e) {
				// ignore
			} catch (java.lang.Error error) {
				// ignore
			}
			resourceMap = null;
		}

		globalMap.put("tDBRow_18_SUBPROCESS_STATE", 1);
	}

	public static class row39Struct implements routines.system.IPersistableRow<row39Struct> {
		final static byte[] commonByteArrayLock_WIPO_PROJECTS_G3b_Mig_UD = new byte[0];
		static byte[] commonByteArray_WIPO_PROJECTS_G3b_Mig_UD = new byte[0];

		public void readData(ObjectInputStream dis) {

			synchronized (commonByteArrayLock_WIPO_PROJECTS_G3b_Mig_UD) {

				try {

					int length = 0;

				}

				finally {
				}

			}

		}

		public void writeData(ObjectOutputStream dos) {
			try {

			}

			finally {
			}

		}

		public String toString() {

			StringBuilder sb = new StringBuilder();
			sb.append(super.toString());
			sb.append("[");
			sb.append("]");

			return sb.toString();
		}

		/**
		 * Compare keys
		 */
		public int compareTo(row39Struct other) {

			int returnValue = -1;

			return returnValue;
		}

		private int checkNullsAndCompare(Object object1, Object object2) {
			int returnValue = 0;
			if (object1 instanceof Comparable && object2 instanceof Comparable) {
				returnValue = ((Comparable) object1).compareTo(object2);
			} else if (object1 != null && object2 != null) {
				returnValue = compareStrings(object1.toString(), object2.toString());
			} else if (object1 == null && object2 != null) {
				returnValue = 1;
			} else if (object1 != null && object2 == null) {
				returnValue = -1;
			} else {
				returnValue = 0;
			}

			return returnValue;
		}

		private int compareStrings(String string1, String string2) {
			return string1.compareTo(string2);
		}

	}

	public static class row40Struct implements routines.system.IPersistableRow<row40Struct> {
		final static byte[] commonByteArrayLock_WIPO_PROJECTS_G3b_Mig_UD = new byte[0];
		static byte[] commonByteArray_WIPO_PROJECTS_G3b_Mig_UD = new byte[0];

		public String errorCode;

		public String getErrorCode() {
			return this.errorCode;
		}

		public String errorMessage;

		public String getErrorMessage() {
			return this.errorMessage;
		}

		private String readString(ObjectInputStream dis) throws IOException {
			String strReturn = null;
			int length = 0;
			length = dis.readInt();
			if (length == -1) {
				strReturn = null;
			} else {
				if (length > commonByteArray_WIPO_PROJECTS_G3b_Mig_UD.length) {
					if (length < 1024 && commonByteArray_WIPO_PROJECTS_G3b_Mig_UD.length == 0) {
						commonByteArray_WIPO_PROJECTS_G3b_Mig_UD = new byte[1024];
					} else {
						commonByteArray_WIPO_PROJECTS_G3b_Mig_UD = new byte[2 * length];
					}
				}
				dis.readFully(commonByteArray_WIPO_PROJECTS_G3b_Mig_UD, 0, length);
				strReturn = new String(commonByteArray_WIPO_PROJECTS_G3b_Mig_UD, 0, length, utf8Charset);
			}
			return strReturn;
		}

		private void writeString(String str, ObjectOutputStream dos) throws IOException {
			if (str == null) {
				dos.writeInt(-1);
			} else {
				byte[] byteArray = str.getBytes(utf8Charset);
				dos.writeInt(byteArray.length);
				dos.write(byteArray);
			}
		}

		public void readData(ObjectInputStream dis) {

			synchronized (commonByteArrayLock_WIPO_PROJECTS_G3b_Mig_UD) {

				try {

					int length = 0;

					this.errorCode = readString(dis);

					this.errorMessage = readString(dis);

				} catch (IOException e) {
					throw new RuntimeException(e);

				}

			}

		}

		public void writeData(ObjectOutputStream dos) {
			try {

				// String

				writeString(this.errorCode, dos);

				// String

				writeString(this.errorMessage, dos);

			} catch (IOException e) {
				throw new RuntimeException(e);
			}

		}

		public String toString() {

			StringBuilder sb = new StringBuilder();
			sb.append(super.toString());
			sb.append("[");
			sb.append("errorCode=" + errorCode);
			sb.append(",errorMessage=" + errorMessage);
			sb.append("]");

			return sb.toString();
		}

		/**
		 * Compare keys
		 */
		public int compareTo(row40Struct other) {

			int returnValue = -1;

			return returnValue;
		}

		private int checkNullsAndCompare(Object object1, Object object2) {
			int returnValue = 0;
			if (object1 instanceof Comparable && object2 instanceof Comparable) {
				returnValue = ((Comparable) object1).compareTo(object2);
			} else if (object1 != null && object2 != null) {
				returnValue = compareStrings(object1.toString(), object2.toString());
			} else if (object1 == null && object2 != null) {
				returnValue = 1;
			} else if (object1 != null && object2 == null) {
				returnValue = -1;
			} else {
				returnValue = 0;
			}

			return returnValue;
		}

		private int compareStrings(String string1, String string2) {
			return string1.compareTo(string2);
		}

	}

	public void tDBRow_19Process(final java.util.Map<String, Object> globalMap) throws TalendException {
		globalMap.put("tDBRow_19_SUBPROCESS_STATE", 0);

		final boolean execStat = this.execStat;

		String iterateId = "";

		String currentComponent = "";
		java.util.Map<String, Object> resourceMap = new java.util.HashMap<String, Object>();

		try {
			// TDI-39566 avoid throwing an useless Exception
			boolean resumeIt = true;
			if (globalResumeTicket == false && resumeEntryMethodName != null) {
				String currentMethodName = new java.lang.Exception().getStackTrace()[0].getMethodName();
				resumeIt = resumeEntryMethodName.equals(currentMethodName);
			}
			if (resumeIt || globalResumeTicket) { // start the resume
				globalResumeTicket = true;

				row39Struct row39 = new row39Struct();
				row40Struct row40 = new row40Struct();

				/**
				 * [tDBCommit_19 begin ] start
				 */

				ok_Hash.put("tDBCommit_19", false);
				start_Hash.put("tDBCommit_19", System.currentTimeMillis());

				currentComponent = "tDBCommit_19";

				if (execStat) {
					runStat.updateStatOnConnection(resourceMap, iterateId, 0, 0, "row39");
				}

				int tos_count_tDBCommit_19 = 0;

				/**
				 * [tDBCommit_19 begin ] stop
				 */

				/**
				 * [tLogRow_23 begin ] start
				 */

				ok_Hash.put("tLogRow_23", false);
				start_Hash.put("tLogRow_23", System.currentTimeMillis());

				currentComponent = "tLogRow_23";

				if (execStat) {
					runStat.updateStatOnConnection(resourceMap, iterateId, 0, 0, "row40");
				}

				int tos_count_tLogRow_23 = 0;

				///////////////////////

				final String OUTPUT_FIELD_SEPARATOR_tLogRow_23 = "|";
				java.io.PrintStream consoleOut_tLogRow_23 = null;

				StringBuilder strBuffer_tLogRow_23 = null;
				int nb_line_tLogRow_23 = 0;
///////////////////////    			

				/**
				 * [tLogRow_23 begin ] stop
				 */

				/**
				 * [tDBRow_19 begin ] start
				 */

				ok_Hash.put("tDBRow_19", false);
				start_Hash.put("tDBRow_19", System.currentTimeMillis());

				tStatCatcher_1.addMessage("begin", "tDBRow_19");
				tStatCatcher_1Process(globalMap);

				currentComponent = "tDBRow_19";

				int tos_count_tDBRow_19 = 0;

				java.sql.Connection conn_tDBRow_19 = null;
				String query_tDBRow_19 = "";
				boolean whetherReject_tDBRow_19 = false;
				conn_tDBRow_19 = (java.sql.Connection) globalMap.get("conn_tMSSqlConnection_3");

				resourceMap.put("conn_tDBRow_19", conn_tDBRow_19);
				java.sql.Statement stmt_tDBRow_19 = conn_tDBRow_19.createStatement();
				resourceMap.put("stmt_tDBRow_19", stmt_tDBRow_19);

				/**
				 * [tDBRow_19 begin ] stop
				 */

				/**
				 * [tDBRow_19 main ] start
				 */

				currentComponent = "tDBRow_19";

				row39 = null;

				row40 = null;

				query_tDBRow_19 = "\nUPDATE  T   \n		SET	USERDOC_FILE_PROC_TYP = (	SELECT GENERATE_PROC_TYP\n			FROM  WRK_USERDOC M,\n				 CF_USERDOC_TYPE"
						+ " UT,\n				 CF_PROCESS_TYPE PT \n			WHERE	 M.userdoc_seq  = T.userdoc_seq\n			 AND	M.userdoc_series  = T.userdoc_series\n"
						+ "			 AND	M.userdoc_nbr  = T.userdoc_nbr\n			 AND	M.userdoc_type  = UT.userdoc_typ COLLATE DATABASE_DEFAULT\n			 AND	UT.ge"
						+ "nerate_proc_typ  = PT.proc_typ\n			 AND	RELATED_TO_WCODE  = 2\n		),	\n		    USERDOC_FILE_STATUS_CODE = (	SELECT SECONDAR"
						+ "Y_INI_STATUS_CODE\n			FROM  WRK_USERDOC M,\n				 CF_USERDOC_TYPE UT,\n				 CF_PROCESS_TYPE PT \n			WHERE	 M.userdoc_seq "
						+ " = T.userdoc_seq\n			 AND	M.userdoc_series  = T.userdoc_series\n			 AND	M.userdoc_nbr  = T.userdoc_nbr\n			 AND	M.userdo"
						+ "c_type  = UT.userdoc_typ COLLATE DATABASE_DEFAULT\n			 AND	UT.generate_proc_typ  = PT.proc_typ\n			 AND	RELATED_TO_WCODE"
						+ "  = 2\n		) \n		FROM  WRK_USERDOC_FILES T;\n\n";
				whetherReject_tDBRow_19 = false;
				globalMap.put("tDBRow_19_QUERY", query_tDBRow_19);
				try {
					stmt_tDBRow_19.execute(query_tDBRow_19);

				} catch (java.lang.Exception e) {
					whetherReject_tDBRow_19 = true;

					row40 = new row40Struct();

					row40.errorCode = ((java.sql.SQLException) e).getSQLState();
					row40.errorMessage = e.getMessage() + " - Line: " + tos_count_tDBRow_19;

				}

				if (!whetherReject_tDBRow_19) {

					row39 = new row39Struct();

				}

				tos_count_tDBRow_19++;

				/**
				 * [tDBRow_19 main ] stop
				 */

				/**
				 * [tDBRow_19 process_data_begin ] start
				 */

				currentComponent = "tDBRow_19";

				/**
				 * [tDBRow_19 process_data_begin ] stop
				 */
// Start of branch "row39"
				if (row39 != null) {

					/**
					 * [tDBCommit_19 main ] start
					 */

					currentComponent = "tDBCommit_19";

					if (execStat) {
						runStat.updateStatOnConnection(iterateId, 1, 1

								, "row39"

						);
					}

					java.sql.Connection conn_tDBCommit_19 = (java.sql.Connection) globalMap
							.get("conn_tMSSqlConnection_3");
					if (conn_tDBCommit_19 != null && !conn_tDBCommit_19.isClosed()) {

						conn_tDBCommit_19.commit();

					}

					tos_count_tDBCommit_19++;

					/**
					 * [tDBCommit_19 main ] stop
					 */

					/**
					 * [tDBCommit_19 process_data_begin ] start
					 */

					currentComponent = "tDBCommit_19";

					/**
					 * [tDBCommit_19 process_data_begin ] stop
					 */

					/**
					 * [tDBCommit_19 process_data_end ] start
					 */

					currentComponent = "tDBCommit_19";

					/**
					 * [tDBCommit_19 process_data_end ] stop
					 */

				} // End of branch "row39"

// Start of branch "row40"
				if (row40 != null) {

					/**
					 * [tLogRow_23 main ] start
					 */

					currentComponent = "tLogRow_23";

					if (execStat) {
						runStat.updateStatOnConnection(iterateId, 1, 1

								, "row40"

						);
					}

///////////////////////		

					strBuffer_tLogRow_23 = new StringBuilder();

					if (row40.errorCode != null) { //

						strBuffer_tLogRow_23.append(String.valueOf(row40.errorCode));

					} //

					strBuffer_tLogRow_23.append("|");

					if (row40.errorMessage != null) { //

						strBuffer_tLogRow_23.append(String.valueOf(row40.errorMessage));

					} //

					if (globalMap.get("tLogRow_CONSOLE") != null) {
						consoleOut_tLogRow_23 = (java.io.PrintStream) globalMap.get("tLogRow_CONSOLE");
					} else {
						consoleOut_tLogRow_23 = new java.io.PrintStream(new java.io.BufferedOutputStream(System.out));
						globalMap.put("tLogRow_CONSOLE", consoleOut_tLogRow_23);
					}
					consoleOut_tLogRow_23.println(strBuffer_tLogRow_23.toString());
					consoleOut_tLogRow_23.flush();
					nb_line_tLogRow_23++;
//////

//////                    

///////////////////////    			

					tos_count_tLogRow_23++;

					/**
					 * [tLogRow_23 main ] stop
					 */

					/**
					 * [tLogRow_23 process_data_begin ] start
					 */

					currentComponent = "tLogRow_23";

					/**
					 * [tLogRow_23 process_data_begin ] stop
					 */

					/**
					 * [tLogRow_23 process_data_end ] start
					 */

					currentComponent = "tLogRow_23";

					/**
					 * [tLogRow_23 process_data_end ] stop
					 */

				} // End of branch "row40"

				/**
				 * [tDBRow_19 process_data_end ] start
				 */

				currentComponent = "tDBRow_19";

				/**
				 * [tDBRow_19 process_data_end ] stop
				 */

				/**
				 * [tDBRow_19 end ] start
				 */

				currentComponent = "tDBRow_19";

				stmt_tDBRow_19.close();
				resourceMap.remove("stmt_tDBRow_19");
				resourceMap.put("statementClosed_tDBRow_19", true);
				resourceMap.put("finish_tDBRow_19", true);

				ok_Hash.put("tDBRow_19", true);
				end_Hash.put("tDBRow_19", System.currentTimeMillis());

				tStatCatcher_1.addMessage("end", "tDBRow_19", end_Hash.get("tDBRow_19") - start_Hash.get("tDBRow_19"));
				tStatCatcher_1Process(globalMap);

				/**
				 * [tDBRow_19 end ] stop
				 */

				/**
				 * [tDBCommit_19 end ] start
				 */

				currentComponent = "tDBCommit_19";

				if (execStat) {
					runStat.updateStat(resourceMap, iterateId, 2, 0, "row39");
				}

				ok_Hash.put("tDBCommit_19", true);
				end_Hash.put("tDBCommit_19", System.currentTimeMillis());

				/**
				 * [tDBCommit_19 end ] stop
				 */

				/**
				 * [tLogRow_23 end ] start
				 */

				currentComponent = "tLogRow_23";

//////
//////
				globalMap.put("tLogRow_23_NB_LINE", nb_line_tLogRow_23);

///////////////////////    			

				if (execStat) {
					runStat.updateStat(resourceMap, iterateId, 2, 0, "row40");
				}

				ok_Hash.put("tLogRow_23", true);
				end_Hash.put("tLogRow_23", System.currentTimeMillis());

				/**
				 * [tLogRow_23 end ] stop
				 */

			} // end the resume

			if (resumeEntryMethodName == null || globalResumeTicket) {
				resumeUtil.addLog("CHECKPOINT", "CONNECTION:SUBJOB_OK:tDBRow_19:OnSubjobOk", "",
						Thread.currentThread().getId() + "", "", "", "", "", "");
			}

			if (execStat) {
				runStat.updateStatOnConnection("OnSubjobOk22", 0, "ok");
			}

			tDBRow_20Process(globalMap);

		} catch (java.lang.Exception e) {

			TalendException te = new TalendException(e, currentComponent, globalMap);

			throw te;
		} catch (java.lang.Error error) {

			runStat.stopThreadStat();

			throw error;
		} finally {

			try {

				/**
				 * [tDBRow_19 finally ] start
				 */

				currentComponent = "tDBRow_19";

				if (resourceMap.get("statementClosed_tDBRow_19") == null) {
					java.sql.Statement stmtToClose_tDBRow_19 = null;
					if ((stmtToClose_tDBRow_19 = (java.sql.Statement) resourceMap.remove("stmt_tDBRow_19")) != null) {
						stmtToClose_tDBRow_19.close();
					}
				}

				/**
				 * [tDBRow_19 finally ] stop
				 */

				/**
				 * [tDBCommit_19 finally ] start
				 */

				currentComponent = "tDBCommit_19";

				/**
				 * [tDBCommit_19 finally ] stop
				 */

				/**
				 * [tLogRow_23 finally ] start
				 */

				currentComponent = "tLogRow_23";

				/**
				 * [tLogRow_23 finally ] stop
				 */

			} catch (java.lang.Exception e) {
				// ignore
			} catch (java.lang.Error error) {
				// ignore
			}
			resourceMap = null;
		}

		globalMap.put("tDBRow_19_SUBPROCESS_STATE", 1);
	}

	public static class row41Struct implements routines.system.IPersistableRow<row41Struct> {
		final static byte[] commonByteArrayLock_WIPO_PROJECTS_G3b_Mig_UD = new byte[0];
		static byte[] commonByteArray_WIPO_PROJECTS_G3b_Mig_UD = new byte[0];

		public void readData(ObjectInputStream dis) {

			synchronized (commonByteArrayLock_WIPO_PROJECTS_G3b_Mig_UD) {

				try {

					int length = 0;

				}

				finally {
				}

			}

		}

		public void writeData(ObjectOutputStream dos) {
			try {

			}

			finally {
			}

		}

		public String toString() {

			StringBuilder sb = new StringBuilder();
			sb.append(super.toString());
			sb.append("[");
			sb.append("]");

			return sb.toString();
		}

		/**
		 * Compare keys
		 */
		public int compareTo(row41Struct other) {

			int returnValue = -1;

			return returnValue;
		}

		private int checkNullsAndCompare(Object object1, Object object2) {
			int returnValue = 0;
			if (object1 instanceof Comparable && object2 instanceof Comparable) {
				returnValue = ((Comparable) object1).compareTo(object2);
			} else if (object1 != null && object2 != null) {
				returnValue = compareStrings(object1.toString(), object2.toString());
			} else if (object1 == null && object2 != null) {
				returnValue = 1;
			} else if (object1 != null && object2 == null) {
				returnValue = -1;
			} else {
				returnValue = 0;
			}

			return returnValue;
		}

		private int compareStrings(String string1, String string2) {
			return string1.compareTo(string2);
		}

	}

	public static class row42Struct implements routines.system.IPersistableRow<row42Struct> {
		final static byte[] commonByteArrayLock_WIPO_PROJECTS_G3b_Mig_UD = new byte[0];
		static byte[] commonByteArray_WIPO_PROJECTS_G3b_Mig_UD = new byte[0];

		public String errorCode;

		public String getErrorCode() {
			return this.errorCode;
		}

		public String errorMessage;

		public String getErrorMessage() {
			return this.errorMessage;
		}

		private String readString(ObjectInputStream dis) throws IOException {
			String strReturn = null;
			int length = 0;
			length = dis.readInt();
			if (length == -1) {
				strReturn = null;
			} else {
				if (length > commonByteArray_WIPO_PROJECTS_G3b_Mig_UD.length) {
					if (length < 1024 && commonByteArray_WIPO_PROJECTS_G3b_Mig_UD.length == 0) {
						commonByteArray_WIPO_PROJECTS_G3b_Mig_UD = new byte[1024];
					} else {
						commonByteArray_WIPO_PROJECTS_G3b_Mig_UD = new byte[2 * length];
					}
				}
				dis.readFully(commonByteArray_WIPO_PROJECTS_G3b_Mig_UD, 0, length);
				strReturn = new String(commonByteArray_WIPO_PROJECTS_G3b_Mig_UD, 0, length, utf8Charset);
			}
			return strReturn;
		}

		private void writeString(String str, ObjectOutputStream dos) throws IOException {
			if (str == null) {
				dos.writeInt(-1);
			} else {
				byte[] byteArray = str.getBytes(utf8Charset);
				dos.writeInt(byteArray.length);
				dos.write(byteArray);
			}
		}

		public void readData(ObjectInputStream dis) {

			synchronized (commonByteArrayLock_WIPO_PROJECTS_G3b_Mig_UD) {

				try {

					int length = 0;

					this.errorCode = readString(dis);

					this.errorMessage = readString(dis);

				} catch (IOException e) {
					throw new RuntimeException(e);

				}

			}

		}

		public void writeData(ObjectOutputStream dos) {
			try {

				// String

				writeString(this.errorCode, dos);

				// String

				writeString(this.errorMessage, dos);

			} catch (IOException e) {
				throw new RuntimeException(e);
			}

		}

		public String toString() {

			StringBuilder sb = new StringBuilder();
			sb.append(super.toString());
			sb.append("[");
			sb.append("errorCode=" + errorCode);
			sb.append(",errorMessage=" + errorMessage);
			sb.append("]");

			return sb.toString();
		}

		/**
		 * Compare keys
		 */
		public int compareTo(row42Struct other) {

			int returnValue = -1;

			return returnValue;
		}

		private int checkNullsAndCompare(Object object1, Object object2) {
			int returnValue = 0;
			if (object1 instanceof Comparable && object2 instanceof Comparable) {
				returnValue = ((Comparable) object1).compareTo(object2);
			} else if (object1 != null && object2 != null) {
				returnValue = compareStrings(object1.toString(), object2.toString());
			} else if (object1 == null && object2 != null) {
				returnValue = 1;
			} else if (object1 != null && object2 == null) {
				returnValue = -1;
			} else {
				returnValue = 0;
			}

			return returnValue;
		}

		private int compareStrings(String string1, String string2) {
			return string1.compareTo(string2);
		}

	}

	public void tDBRow_20Process(final java.util.Map<String, Object> globalMap) throws TalendException {
		globalMap.put("tDBRow_20_SUBPROCESS_STATE", 0);

		final boolean execStat = this.execStat;

		String iterateId = "";

		String currentComponent = "";
		java.util.Map<String, Object> resourceMap = new java.util.HashMap<String, Object>();

		try {
			// TDI-39566 avoid throwing an useless Exception
			boolean resumeIt = true;
			if (globalResumeTicket == false && resumeEntryMethodName != null) {
				String currentMethodName = new java.lang.Exception().getStackTrace()[0].getMethodName();
				resumeIt = resumeEntryMethodName.equals(currentMethodName);
			}
			if (resumeIt || globalResumeTicket) { // start the resume
				globalResumeTicket = true;

				row41Struct row41 = new row41Struct();
				row42Struct row42 = new row42Struct();

				/**
				 * [tDBCommit_20 begin ] start
				 */

				ok_Hash.put("tDBCommit_20", false);
				start_Hash.put("tDBCommit_20", System.currentTimeMillis());

				currentComponent = "tDBCommit_20";

				if (execStat) {
					runStat.updateStatOnConnection(resourceMap, iterateId, 0, 0, "row41");
				}

				int tos_count_tDBCommit_20 = 0;

				/**
				 * [tDBCommit_20 begin ] stop
				 */

				/**
				 * [tLogRow_24 begin ] start
				 */

				ok_Hash.put("tLogRow_24", false);
				start_Hash.put("tLogRow_24", System.currentTimeMillis());

				currentComponent = "tLogRow_24";

				if (execStat) {
					runStat.updateStatOnConnection(resourceMap, iterateId, 0, 0, "row42");
				}

				int tos_count_tLogRow_24 = 0;

				///////////////////////

				final String OUTPUT_FIELD_SEPARATOR_tLogRow_24 = "|";
				java.io.PrintStream consoleOut_tLogRow_24 = null;

				StringBuilder strBuffer_tLogRow_24 = null;
				int nb_line_tLogRow_24 = 0;
///////////////////////    			

				/**
				 * [tLogRow_24 begin ] stop
				 */

				/**
				 * [tDBRow_20 begin ] start
				 */

				ok_Hash.put("tDBRow_20", false);
				start_Hash.put("tDBRow_20", System.currentTimeMillis());

				tStatCatcher_1.addMessage("begin", "tDBRow_20");
				tStatCatcher_1Process(globalMap);

				currentComponent = "tDBRow_20";

				int tos_count_tDBRow_20 = 0;

				java.sql.Connection conn_tDBRow_20 = null;
				String query_tDBRow_20 = "";
				boolean whetherReject_tDBRow_20 = false;
				conn_tDBRow_20 = (java.sql.Connection) globalMap.get("conn_tMSSqlConnection_3");

				resourceMap.put("conn_tDBRow_20", conn_tDBRow_20);
				java.sql.Statement stmt_tDBRow_20 = conn_tDBRow_20.createStatement();
				resourceMap.put("stmt_tDBRow_20", stmt_tDBRow_20);

				/**
				 * [tDBRow_20 begin ] stop
				 */

				/**
				 * [tDBRow_20 main ] start
				 */

				currentComponent = "tDBRow_20";

				row41 = null;

				row42 = null;

				query_tDBRow_20 = "\n\nwith cte as (\n		select *, ROW_NUMBER () OVER(order by USERDOC_NBR) as ri\n		from wrk_userdoc_files where USERDOC_F"
						+ "ILE_PROC_TYP is not null\n)\nupdate cte set USERDOC_FILE_PROC_NBR=(SELECT ISNULL(MAX(PROC_NBR), 0) FROM  IP_PROC)+ri\n\n"
						+ "\n\n";
				whetherReject_tDBRow_20 = false;
				globalMap.put("tDBRow_20_QUERY", query_tDBRow_20);
				try {
					stmt_tDBRow_20.execute(query_tDBRow_20);

				} catch (java.lang.Exception e) {
					whetherReject_tDBRow_20 = true;

					row42 = new row42Struct();

					row42.errorCode = ((java.sql.SQLException) e).getSQLState();
					row42.errorMessage = e.getMessage() + " - Line: " + tos_count_tDBRow_20;

				}

				if (!whetherReject_tDBRow_20) {

					row41 = new row41Struct();

				}

				tos_count_tDBRow_20++;

				/**
				 * [tDBRow_20 main ] stop
				 */

				/**
				 * [tDBRow_20 process_data_begin ] start
				 */

				currentComponent = "tDBRow_20";

				/**
				 * [tDBRow_20 process_data_begin ] stop
				 */
// Start of branch "row41"
				if (row41 != null) {

					/**
					 * [tDBCommit_20 main ] start
					 */

					currentComponent = "tDBCommit_20";

					if (execStat) {
						runStat.updateStatOnConnection(iterateId, 1, 1

								, "row41"

						);
					}

					java.sql.Connection conn_tDBCommit_20 = (java.sql.Connection) globalMap
							.get("conn_tMSSqlConnection_3");
					if (conn_tDBCommit_20 != null && !conn_tDBCommit_20.isClosed()) {

						conn_tDBCommit_20.commit();

					}

					tos_count_tDBCommit_20++;

					/**
					 * [tDBCommit_20 main ] stop
					 */

					/**
					 * [tDBCommit_20 process_data_begin ] start
					 */

					currentComponent = "tDBCommit_20";

					/**
					 * [tDBCommit_20 process_data_begin ] stop
					 */

					/**
					 * [tDBCommit_20 process_data_end ] start
					 */

					currentComponent = "tDBCommit_20";

					/**
					 * [tDBCommit_20 process_data_end ] stop
					 */

				} // End of branch "row41"

// Start of branch "row42"
				if (row42 != null) {

					/**
					 * [tLogRow_24 main ] start
					 */

					currentComponent = "tLogRow_24";

					if (execStat) {
						runStat.updateStatOnConnection(iterateId, 1, 1

								, "row42"

						);
					}

///////////////////////		

					strBuffer_tLogRow_24 = new StringBuilder();

					if (row42.errorCode != null) { //

						strBuffer_tLogRow_24.append(String.valueOf(row42.errorCode));

					} //

					strBuffer_tLogRow_24.append("|");

					if (row42.errorMessage != null) { //

						strBuffer_tLogRow_24.append(String.valueOf(row42.errorMessage));

					} //

					if (globalMap.get("tLogRow_CONSOLE") != null) {
						consoleOut_tLogRow_24 = (java.io.PrintStream) globalMap.get("tLogRow_CONSOLE");
					} else {
						consoleOut_tLogRow_24 = new java.io.PrintStream(new java.io.BufferedOutputStream(System.out));
						globalMap.put("tLogRow_CONSOLE", consoleOut_tLogRow_24);
					}
					consoleOut_tLogRow_24.println(strBuffer_tLogRow_24.toString());
					consoleOut_tLogRow_24.flush();
					nb_line_tLogRow_24++;
//////

//////                    

///////////////////////    			

					tos_count_tLogRow_24++;

					/**
					 * [tLogRow_24 main ] stop
					 */

					/**
					 * [tLogRow_24 process_data_begin ] start
					 */

					currentComponent = "tLogRow_24";

					/**
					 * [tLogRow_24 process_data_begin ] stop
					 */

					/**
					 * [tLogRow_24 process_data_end ] start
					 */

					currentComponent = "tLogRow_24";

					/**
					 * [tLogRow_24 process_data_end ] stop
					 */

				} // End of branch "row42"

				/**
				 * [tDBRow_20 process_data_end ] start
				 */

				currentComponent = "tDBRow_20";

				/**
				 * [tDBRow_20 process_data_end ] stop
				 */

				/**
				 * [tDBRow_20 end ] start
				 */

				currentComponent = "tDBRow_20";

				stmt_tDBRow_20.close();
				resourceMap.remove("stmt_tDBRow_20");
				resourceMap.put("statementClosed_tDBRow_20", true);
				resourceMap.put("finish_tDBRow_20", true);

				ok_Hash.put("tDBRow_20", true);
				end_Hash.put("tDBRow_20", System.currentTimeMillis());

				tStatCatcher_1.addMessage("end", "tDBRow_20", end_Hash.get("tDBRow_20") - start_Hash.get("tDBRow_20"));
				tStatCatcher_1Process(globalMap);

				/**
				 * [tDBRow_20 end ] stop
				 */

				/**
				 * [tDBCommit_20 end ] start
				 */

				currentComponent = "tDBCommit_20";

				if (execStat) {
					runStat.updateStat(resourceMap, iterateId, 2, 0, "row41");
				}

				ok_Hash.put("tDBCommit_20", true);
				end_Hash.put("tDBCommit_20", System.currentTimeMillis());

				/**
				 * [tDBCommit_20 end ] stop
				 */

				/**
				 * [tLogRow_24 end ] start
				 */

				currentComponent = "tLogRow_24";

//////
//////
				globalMap.put("tLogRow_24_NB_LINE", nb_line_tLogRow_24);

///////////////////////    			

				if (execStat) {
					runStat.updateStat(resourceMap, iterateId, 2, 0, "row42");
				}

				ok_Hash.put("tLogRow_24", true);
				end_Hash.put("tLogRow_24", System.currentTimeMillis());

				/**
				 * [tLogRow_24 end ] stop
				 */

			} // end the resume

			if (resumeEntryMethodName == null || globalResumeTicket) {
				resumeUtil.addLog("CHECKPOINT", "CONNECTION:SUBJOB_OK:tDBRow_20:OnSubjobOk", "",
						Thread.currentThread().getId() + "", "", "", "", "", "");
			}

			if (execStat) {
				runStat.updateStatOnConnection("OnSubjobOk23", 0, "ok");
			}

			tDBRow_21Process(globalMap);

		} catch (java.lang.Exception e) {

			TalendException te = new TalendException(e, currentComponent, globalMap);

			throw te;
		} catch (java.lang.Error error) {

			runStat.stopThreadStat();

			throw error;
		} finally {

			try {

				/**
				 * [tDBRow_20 finally ] start
				 */

				currentComponent = "tDBRow_20";

				if (resourceMap.get("statementClosed_tDBRow_20") == null) {
					java.sql.Statement stmtToClose_tDBRow_20 = null;
					if ((stmtToClose_tDBRow_20 = (java.sql.Statement) resourceMap.remove("stmt_tDBRow_20")) != null) {
						stmtToClose_tDBRow_20.close();
					}
				}

				/**
				 * [tDBRow_20 finally ] stop
				 */

				/**
				 * [tDBCommit_20 finally ] start
				 */

				currentComponent = "tDBCommit_20";

				/**
				 * [tDBCommit_20 finally ] stop
				 */

				/**
				 * [tLogRow_24 finally ] start
				 */

				currentComponent = "tLogRow_24";

				/**
				 * [tLogRow_24 finally ] stop
				 */

			} catch (java.lang.Exception e) {
				// ignore
			} catch (java.lang.Error error) {
				// ignore
			}
			resourceMap = null;
		}

		globalMap.put("tDBRow_20_SUBPROCESS_STATE", 1);
	}

	public static class row43Struct implements routines.system.IPersistableRow<row43Struct> {
		final static byte[] commonByteArrayLock_WIPO_PROJECTS_G3b_Mig_UD = new byte[0];
		static byte[] commonByteArray_WIPO_PROJECTS_G3b_Mig_UD = new byte[0];

		public void readData(ObjectInputStream dis) {

			synchronized (commonByteArrayLock_WIPO_PROJECTS_G3b_Mig_UD) {

				try {

					int length = 0;

				}

				finally {
				}

			}

		}

		public void writeData(ObjectOutputStream dos) {
			try {

			}

			finally {
			}

		}

		public String toString() {

			StringBuilder sb = new StringBuilder();
			sb.append(super.toString());
			sb.append("[");
			sb.append("]");

			return sb.toString();
		}

		/**
		 * Compare keys
		 */
		public int compareTo(row43Struct other) {

			int returnValue = -1;

			return returnValue;
		}

		private int checkNullsAndCompare(Object object1, Object object2) {
			int returnValue = 0;
			if (object1 instanceof Comparable && object2 instanceof Comparable) {
				returnValue = ((Comparable) object1).compareTo(object2);
			} else if (object1 != null && object2 != null) {
				returnValue = compareStrings(object1.toString(), object2.toString());
			} else if (object1 == null && object2 != null) {
				returnValue = 1;
			} else if (object1 != null && object2 == null) {
				returnValue = -1;
			} else {
				returnValue = 0;
			}

			return returnValue;
		}

		private int compareStrings(String string1, String string2) {
			return string1.compareTo(string2);
		}

	}

	public static class row44Struct implements routines.system.IPersistableRow<row44Struct> {
		final static byte[] commonByteArrayLock_WIPO_PROJECTS_G3b_Mig_UD = new byte[0];
		static byte[] commonByteArray_WIPO_PROJECTS_G3b_Mig_UD = new byte[0];

		public String errorCode;

		public String getErrorCode() {
			return this.errorCode;
		}

		public String errorMessage;

		public String getErrorMessage() {
			return this.errorMessage;
		}

		private String readString(ObjectInputStream dis) throws IOException {
			String strReturn = null;
			int length = 0;
			length = dis.readInt();
			if (length == -1) {
				strReturn = null;
			} else {
				if (length > commonByteArray_WIPO_PROJECTS_G3b_Mig_UD.length) {
					if (length < 1024 && commonByteArray_WIPO_PROJECTS_G3b_Mig_UD.length == 0) {
						commonByteArray_WIPO_PROJECTS_G3b_Mig_UD = new byte[1024];
					} else {
						commonByteArray_WIPO_PROJECTS_G3b_Mig_UD = new byte[2 * length];
					}
				}
				dis.readFully(commonByteArray_WIPO_PROJECTS_G3b_Mig_UD, 0, length);
				strReturn = new String(commonByteArray_WIPO_PROJECTS_G3b_Mig_UD, 0, length, utf8Charset);
			}
			return strReturn;
		}

		private void writeString(String str, ObjectOutputStream dos) throws IOException {
			if (str == null) {
				dos.writeInt(-1);
			} else {
				byte[] byteArray = str.getBytes(utf8Charset);
				dos.writeInt(byteArray.length);
				dos.write(byteArray);
			}
		}

		public void readData(ObjectInputStream dis) {

			synchronized (commonByteArrayLock_WIPO_PROJECTS_G3b_Mig_UD) {

				try {

					int length = 0;

					this.errorCode = readString(dis);

					this.errorMessage = readString(dis);

				} catch (IOException e) {
					throw new RuntimeException(e);

				}

			}

		}

		public void writeData(ObjectOutputStream dos) {
			try {

				// String

				writeString(this.errorCode, dos);

				// String

				writeString(this.errorMessage, dos);

			} catch (IOException e) {
				throw new RuntimeException(e);
			}

		}

		public String toString() {

			StringBuilder sb = new StringBuilder();
			sb.append(super.toString());
			sb.append("[");
			sb.append("errorCode=" + errorCode);
			sb.append(",errorMessage=" + errorMessage);
			sb.append("]");

			return sb.toString();
		}

		/**
		 * Compare keys
		 */
		public int compareTo(row44Struct other) {

			int returnValue = -1;

			return returnValue;
		}

		private int checkNullsAndCompare(Object object1, Object object2) {
			int returnValue = 0;
			if (object1 instanceof Comparable && object2 instanceof Comparable) {
				returnValue = ((Comparable) object1).compareTo(object2);
			} else if (object1 != null && object2 != null) {
				returnValue = compareStrings(object1.toString(), object2.toString());
			} else if (object1 == null && object2 != null) {
				returnValue = 1;
			} else if (object1 != null && object2 == null) {
				returnValue = -1;
			} else {
				returnValue = 0;
			}

			return returnValue;
		}

		private int compareStrings(String string1, String string2) {
			return string1.compareTo(string2);
		}

	}

	public void tDBRow_21Process(final java.util.Map<String, Object> globalMap) throws TalendException {
		globalMap.put("tDBRow_21_SUBPROCESS_STATE", 0);

		final boolean execStat = this.execStat;

		String iterateId = "";

		String currentComponent = "";
		java.util.Map<String, Object> resourceMap = new java.util.HashMap<String, Object>();

		try {
			// TDI-39566 avoid throwing an useless Exception
			boolean resumeIt = true;
			if (globalResumeTicket == false && resumeEntryMethodName != null) {
				String currentMethodName = new java.lang.Exception().getStackTrace()[0].getMethodName();
				resumeIt = resumeEntryMethodName.equals(currentMethodName);
			}
			if (resumeIt || globalResumeTicket) { // start the resume
				globalResumeTicket = true;

				row43Struct row43 = new row43Struct();
				row44Struct row44 = new row44Struct();

				/**
				 * [tDBCommit_21 begin ] start
				 */

				ok_Hash.put("tDBCommit_21", false);
				start_Hash.put("tDBCommit_21", System.currentTimeMillis());

				currentComponent = "tDBCommit_21";

				if (execStat) {
					runStat.updateStatOnConnection(resourceMap, iterateId, 0, 0, "row43");
				}

				int tos_count_tDBCommit_21 = 0;

				/**
				 * [tDBCommit_21 begin ] stop
				 */

				/**
				 * [tLogRow_25 begin ] start
				 */

				ok_Hash.put("tLogRow_25", false);
				start_Hash.put("tLogRow_25", System.currentTimeMillis());

				currentComponent = "tLogRow_25";

				if (execStat) {
					runStat.updateStatOnConnection(resourceMap, iterateId, 0, 0, "row44");
				}

				int tos_count_tLogRow_25 = 0;

				///////////////////////

				final String OUTPUT_FIELD_SEPARATOR_tLogRow_25 = "|";
				java.io.PrintStream consoleOut_tLogRow_25 = null;

				StringBuilder strBuffer_tLogRow_25 = null;
				int nb_line_tLogRow_25 = 0;
///////////////////////    			

				/**
				 * [tLogRow_25 begin ] stop
				 */

				/**
				 * [tDBRow_21 begin ] start
				 */

				ok_Hash.put("tDBRow_21", false);
				start_Hash.put("tDBRow_21", System.currentTimeMillis());

				tStatCatcher_1.addMessage("begin", "tDBRow_21");
				tStatCatcher_1Process(globalMap);

				currentComponent = "tDBRow_21";

				int tos_count_tDBRow_21 = 0;

				java.sql.Connection conn_tDBRow_21 = null;
				String query_tDBRow_21 = "";
				boolean whetherReject_tDBRow_21 = false;
				conn_tDBRow_21 = (java.sql.Connection) globalMap.get("conn_tMSSqlConnection_3");

				resourceMap.put("conn_tDBRow_21", conn_tDBRow_21);
				java.sql.Statement stmt_tDBRow_21 = conn_tDBRow_21.createStatement();
				resourceMap.put("stmt_tDBRow_21", stmt_tDBRow_21);

				/**
				 * [tDBRow_21 begin ] stop
				 */

				/**
				 * [tDBRow_21 main ] start
				 */

				currentComponent = "tDBRow_21";

				row43 = null;

				row44 = null;

				query_tDBRow_21 = "\nTRUNCATE TABLE   wrk_person_addr; \n \n\nINSERT INTO  wrk_person_addr   \n		( PERSON_GROUP_CODE , \n		AGENT_CODE , \n"
						+ "		PERSON_NAME , \n		PERSON_NAME_LANG2 , \n		NATIONALITY_COUNTRY_CODE , \n		IND_COMPANY , \n		LEGAL_NATURE , \n		LEGAL_NA"
						+ "TURE_LANG2 ,\n		LEGAL_ID_TYPE , \n		LEGAL_ID_NBR , \n		INDIVIDUAL_ID_TYPE , \n		INDIVIDUAL_ID_NBR , \n		EMAIL , \n		TELE"
						+ "PHONE , \n		RESIDENCE_COUNTRY_CODE , \n		STATE_NAME , \n		STATE_CODE , \n		CITY_CODE ,\n		CITY_NAME , \n		ADDRESS_ZONE ,"
						+ " \n		ADDRESS_STREET , \n		ADDRESS_STREET_LANG2 ,\n		ZIP_CODE , \n		PERSON_NBR , \n		ADDR_NBR , \n		REF_NBR )  \nSELECT\n"
						+ "		 PERSON_GROUP_CODE,\n		 null,\n		 PERSON_NAME,\n		 PERSON_NAME_LANG2,\n		 NATIONALITY_COUNTRY_CODE,\n		 IND_COMPANY,\n"
						+ "		 LEGAL_NATURE,\n		 LEGAL_NATURE_LANG2,\n		 LEGAL_ID_TYPE,\n		 LEGAL_ID_NBR,\n		 INDIVIDUAL_ID_TYPE,\n		 INDIVIDUAL_ID_"
						+ "NBR,\n		 EMAIL,\n		 TELEPHONE,\n		 RESIDENCE_COUNTRY_CODE,\n		 STATE_NAME,\n		 STATE_CODE,\n		 CITY_CODE,\n		 CITY_NAME,"
						+ "\n		 ADDRESS_ZONE,\n		 ADDRESS_STREET,\n		 ADDRESS_STREET_LANG2,\n		 ZIP_CODE,\n		 APPLICANT_PERSON_NBR,\n		 APPLICANT_A"
						+ "DDR_NBR,\n		 T.rowid\nFROM  wrk_userdoc T \nWHERE	 PERSON_NAME  is not null;\n\n";
				whetherReject_tDBRow_21 = false;
				globalMap.put("tDBRow_21_QUERY", query_tDBRow_21);
				try {
					stmt_tDBRow_21.execute(query_tDBRow_21);

				} catch (java.lang.Exception e) {
					whetherReject_tDBRow_21 = true;

					row44 = new row44Struct();

					row44.errorCode = ((java.sql.SQLException) e).getSQLState();
					row44.errorMessage = e.getMessage() + " - Line: " + tos_count_tDBRow_21;

				}

				if (!whetherReject_tDBRow_21) {

					row43 = new row43Struct();

				}

				tos_count_tDBRow_21++;

				/**
				 * [tDBRow_21 main ] stop
				 */

				/**
				 * [tDBRow_21 process_data_begin ] start
				 */

				currentComponent = "tDBRow_21";

				/**
				 * [tDBRow_21 process_data_begin ] stop
				 */
// Start of branch "row43"
				if (row43 != null) {

					/**
					 * [tDBCommit_21 main ] start
					 */

					currentComponent = "tDBCommit_21";

					if (execStat) {
						runStat.updateStatOnConnection(iterateId, 1, 1

								, "row43"

						);
					}

					java.sql.Connection conn_tDBCommit_21 = (java.sql.Connection) globalMap
							.get("conn_tMSSqlConnection_3");
					if (conn_tDBCommit_21 != null && !conn_tDBCommit_21.isClosed()) {

						conn_tDBCommit_21.commit();

					}

					tos_count_tDBCommit_21++;

					/**
					 * [tDBCommit_21 main ] stop
					 */

					/**
					 * [tDBCommit_21 process_data_begin ] start
					 */

					currentComponent = "tDBCommit_21";

					/**
					 * [tDBCommit_21 process_data_begin ] stop
					 */

					/**
					 * [tDBCommit_21 process_data_end ] start
					 */

					currentComponent = "tDBCommit_21";

					/**
					 * [tDBCommit_21 process_data_end ] stop
					 */

				} // End of branch "row43"

// Start of branch "row44"
				if (row44 != null) {

					/**
					 * [tLogRow_25 main ] start
					 */

					currentComponent = "tLogRow_25";

					if (execStat) {
						runStat.updateStatOnConnection(iterateId, 1, 1

								, "row44"

						);
					}

///////////////////////		

					strBuffer_tLogRow_25 = new StringBuilder();

					if (row44.errorCode != null) { //

						strBuffer_tLogRow_25.append(String.valueOf(row44.errorCode));

					} //

					strBuffer_tLogRow_25.append("|");

					if (row44.errorMessage != null) { //

						strBuffer_tLogRow_25.append(String.valueOf(row44.errorMessage));

					} //

					if (globalMap.get("tLogRow_CONSOLE") != null) {
						consoleOut_tLogRow_25 = (java.io.PrintStream) globalMap.get("tLogRow_CONSOLE");
					} else {
						consoleOut_tLogRow_25 = new java.io.PrintStream(new java.io.BufferedOutputStream(System.out));
						globalMap.put("tLogRow_CONSOLE", consoleOut_tLogRow_25);
					}
					consoleOut_tLogRow_25.println(strBuffer_tLogRow_25.toString());
					consoleOut_tLogRow_25.flush();
					nb_line_tLogRow_25++;
//////

//////                    

///////////////////////    			

					tos_count_tLogRow_25++;

					/**
					 * [tLogRow_25 main ] stop
					 */

					/**
					 * [tLogRow_25 process_data_begin ] start
					 */

					currentComponent = "tLogRow_25";

					/**
					 * [tLogRow_25 process_data_begin ] stop
					 */

					/**
					 * [tLogRow_25 process_data_end ] start
					 */

					currentComponent = "tLogRow_25";

					/**
					 * [tLogRow_25 process_data_end ] stop
					 */

				} // End of branch "row44"

				/**
				 * [tDBRow_21 process_data_end ] start
				 */

				currentComponent = "tDBRow_21";

				/**
				 * [tDBRow_21 process_data_end ] stop
				 */

				/**
				 * [tDBRow_21 end ] start
				 */

				currentComponent = "tDBRow_21";

				stmt_tDBRow_21.close();
				resourceMap.remove("stmt_tDBRow_21");
				resourceMap.put("statementClosed_tDBRow_21", true);
				resourceMap.put("finish_tDBRow_21", true);

				ok_Hash.put("tDBRow_21", true);
				end_Hash.put("tDBRow_21", System.currentTimeMillis());

				tStatCatcher_1.addMessage("end", "tDBRow_21", end_Hash.get("tDBRow_21") - start_Hash.get("tDBRow_21"));
				tStatCatcher_1Process(globalMap);

				/**
				 * [tDBRow_21 end ] stop
				 */

				/**
				 * [tDBCommit_21 end ] start
				 */

				currentComponent = "tDBCommit_21";

				if (execStat) {
					runStat.updateStat(resourceMap, iterateId, 2, 0, "row43");
				}

				ok_Hash.put("tDBCommit_21", true);
				end_Hash.put("tDBCommit_21", System.currentTimeMillis());

				/**
				 * [tDBCommit_21 end ] stop
				 */

				/**
				 * [tLogRow_25 end ] start
				 */

				currentComponent = "tLogRow_25";

//////
//////
				globalMap.put("tLogRow_25_NB_LINE", nb_line_tLogRow_25);

///////////////////////    			

				if (execStat) {
					runStat.updateStat(resourceMap, iterateId, 2, 0, "row44");
				}

				ok_Hash.put("tLogRow_25", true);
				end_Hash.put("tLogRow_25", System.currentTimeMillis());

				/**
				 * [tLogRow_25 end ] stop
				 */

			} // end the resume

			if (resumeEntryMethodName == null || globalResumeTicket) {
				resumeUtil.addLog("CHECKPOINT", "CONNECTION:SUBJOB_OK:tDBRow_21:OnSubjobOk", "",
						Thread.currentThread().getId() + "", "", "", "", "", "");
			}

			if (execStat) {
				runStat.updateStatOnConnection("OnSubjobOk24", 0, "ok");
			}

			tDBInput_5Process(globalMap);

		} catch (java.lang.Exception e) {

			TalendException te = new TalendException(e, currentComponent, globalMap);

			throw te;
		} catch (java.lang.Error error) {

			runStat.stopThreadStat();

			throw error;
		} finally {

			try {

				/**
				 * [tDBRow_21 finally ] start
				 */

				currentComponent = "tDBRow_21";

				if (resourceMap.get("statementClosed_tDBRow_21") == null) {
					java.sql.Statement stmtToClose_tDBRow_21 = null;
					if ((stmtToClose_tDBRow_21 = (java.sql.Statement) resourceMap.remove("stmt_tDBRow_21")) != null) {
						stmtToClose_tDBRow_21.close();
					}
				}

				/**
				 * [tDBRow_21 finally ] stop
				 */

				/**
				 * [tDBCommit_21 finally ] start
				 */

				currentComponent = "tDBCommit_21";

				/**
				 * [tDBCommit_21 finally ] stop
				 */

				/**
				 * [tLogRow_25 finally ] start
				 */

				currentComponent = "tLogRow_25";

				/**
				 * [tLogRow_25 finally ] stop
				 */

			} catch (java.lang.Exception e) {
				// ignore
			} catch (java.lang.Error error) {
				// ignore
			}
			resourceMap = null;
		}

		globalMap.put("tDBRow_21_SUBPROCESS_STATE", 1);
	}

	public static class row11Struct implements routines.system.IPersistableRow<row11Struct> {
		final static byte[] commonByteArrayLock_WIPO_PROJECTS_G3b_Mig_UD = new byte[0];
		static byte[] commonByteArray_WIPO_PROJECTS_G3b_Mig_UD = new byte[0];

		public String Message;

		public String getMessage() {
			return this.Message;
		}

		public java.util.Date Time;

		public java.util.Date getTime() {
			return this.Time;
		}

		private String readString(ObjectInputStream dis) throws IOException {
			String strReturn = null;
			int length = 0;
			length = dis.readInt();
			if (length == -1) {
				strReturn = null;
			} else {
				if (length > commonByteArray_WIPO_PROJECTS_G3b_Mig_UD.length) {
					if (length < 1024 && commonByteArray_WIPO_PROJECTS_G3b_Mig_UD.length == 0) {
						commonByteArray_WIPO_PROJECTS_G3b_Mig_UD = new byte[1024];
					} else {
						commonByteArray_WIPO_PROJECTS_G3b_Mig_UD = new byte[2 * length];
					}
				}
				dis.readFully(commonByteArray_WIPO_PROJECTS_G3b_Mig_UD, 0, length);
				strReturn = new String(commonByteArray_WIPO_PROJECTS_G3b_Mig_UD, 0, length, utf8Charset);
			}
			return strReturn;
		}

		private void writeString(String str, ObjectOutputStream dos) throws IOException {
			if (str == null) {
				dos.writeInt(-1);
			} else {
				byte[] byteArray = str.getBytes(utf8Charset);
				dos.writeInt(byteArray.length);
				dos.write(byteArray);
			}
		}

		private java.util.Date readDate(ObjectInputStream dis) throws IOException {
			java.util.Date dateReturn = null;
			int length = 0;
			length = dis.readByte();
			if (length == -1) {
				dateReturn = null;
			} else {
				dateReturn = new Date(dis.readLong());
			}
			return dateReturn;
		}

		private void writeDate(java.util.Date date1, ObjectOutputStream dos) throws IOException {
			if (date1 == null) {
				dos.writeByte(-1);
			} else {
				dos.writeByte(0);
				dos.writeLong(date1.getTime());
			}
		}

		public void readData(ObjectInputStream dis) {

			synchronized (commonByteArrayLock_WIPO_PROJECTS_G3b_Mig_UD) {

				try {

					int length = 0;

					this.Message = readString(dis);

					this.Time = readDate(dis);

				} catch (IOException e) {
					throw new RuntimeException(e);

				}

			}

		}

		public void writeData(ObjectOutputStream dos) {
			try {

				// String

				writeString(this.Message, dos);

				// java.util.Date

				writeDate(this.Time, dos);

			} catch (IOException e) {
				throw new RuntimeException(e);
			}

		}

		public String toString() {

			StringBuilder sb = new StringBuilder();
			sb.append(super.toString());
			sb.append("[");
			sb.append("Message=" + Message);
			sb.append(",Time=" + String.valueOf(Time));
			sb.append("]");

			return sb.toString();
		}

		/**
		 * Compare keys
		 */
		public int compareTo(row11Struct other) {

			int returnValue = -1;

			return returnValue;
		}

		private int checkNullsAndCompare(Object object1, Object object2) {
			int returnValue = 0;
			if (object1 instanceof Comparable && object2 instanceof Comparable) {
				returnValue = ((Comparable) object1).compareTo(object2);
			} else if (object1 != null && object2 != null) {
				returnValue = compareStrings(object1.toString(), object2.toString());
			} else if (object1 == null && object2 != null) {
				returnValue = 1;
			} else if (object1 != null && object2 == null) {
				returnValue = -1;
			} else {
				returnValue = 0;
			}

			return returnValue;
		}

		private int compareStrings(String string1, String string2) {
			return string1.compareTo(string2);
		}

	}

	public void tDBInput_5Process(final java.util.Map<String, Object> globalMap) throws TalendException {
		globalMap.put("tDBInput_5_SUBPROCESS_STATE", 0);

		final boolean execStat = this.execStat;

		String iterateId = "";

		String currentComponent = "";
		java.util.Map<String, Object> resourceMap = new java.util.HashMap<String, Object>();

		try {
			// TDI-39566 avoid throwing an useless Exception
			boolean resumeIt = true;
			if (globalResumeTicket == false && resumeEntryMethodName != null) {
				String currentMethodName = new java.lang.Exception().getStackTrace()[0].getMethodName();
				resumeIt = resumeEntryMethodName.equals(currentMethodName);
			}
			if (resumeIt || globalResumeTicket) { // start the resume
				globalResumeTicket = true;

				row11Struct row11 = new row11Struct();

				/**
				 * [tLogRow_5 begin ] start
				 */

				ok_Hash.put("tLogRow_5", false);
				start_Hash.put("tLogRow_5", System.currentTimeMillis());

				currentComponent = "tLogRow_5";

				if (execStat) {
					runStat.updateStatOnConnection(resourceMap, iterateId, 0, 0, "row11");
				}

				int tos_count_tLogRow_5 = 0;

				///////////////////////

				final String OUTPUT_FIELD_SEPARATOR_tLogRow_5 = "|";
				java.io.PrintStream consoleOut_tLogRow_5 = null;

				StringBuilder strBuffer_tLogRow_5 = null;
				int nb_line_tLogRow_5 = 0;
///////////////////////    			

				/**
				 * [tLogRow_5 begin ] stop
				 */

				/**
				 * [tDBInput_5 begin ] start
				 */

				ok_Hash.put("tDBInput_5", false);
				start_Hash.put("tDBInput_5", System.currentTimeMillis());

				currentComponent = "tDBInput_5";

				int tos_count_tDBInput_5 = 0;

				org.talend.designer.components.util.mssql.MSSqlGenerateTimestampUtil mssqlGTU_tDBInput_5 = org.talend.designer.components.util.mssql.MSSqlUtilFactory
						.getMSSqlGenerateTimestampUtil();

				java.util.List<String> talendToDBList_tDBInput_5 = new java.util.ArrayList();
				String[] talendToDBArray_tDBInput_5 = new String[] { "FLOAT", "NUMERIC", "NUMERIC IDENTITY", "DECIMAL",
						"DECIMAL IDENTITY", "REAL" };
				java.util.Collections.addAll(talendToDBList_tDBInput_5, talendToDBArray_tDBInput_5);
				int nb_line_tDBInput_5 = 0;
				java.sql.Connection conn_tDBInput_5 = null;
				conn_tDBInput_5 = (java.sql.Connection) globalMap.get("conn_tMSSqlConnection_3");

				String dbschema_tDBInput_5 = (String) globalMap.get("dbschema_tMSSqlConnection_3");

				java.sql.Statement stmt_tDBInput_5 = conn_tDBInput_5.createStatement();

				String dbquery_tDBInput_5 = "SELECT 'Step 5: first updates' ,GETDATE();";

				globalMap.put("tDBInput_5_QUERY", dbquery_tDBInput_5);
				java.sql.ResultSet rs_tDBInput_5 = null;

				try {
					rs_tDBInput_5 = stmt_tDBInput_5.executeQuery(dbquery_tDBInput_5);
					java.sql.ResultSetMetaData rsmd_tDBInput_5 = rs_tDBInput_5.getMetaData();
					int colQtyInRs_tDBInput_5 = rsmd_tDBInput_5.getColumnCount();

					String tmpContent_tDBInput_5 = null;

					while (rs_tDBInput_5.next()) {
						nb_line_tDBInput_5++;

						if (colQtyInRs_tDBInput_5 < 1) {
							row11.Message = null;
						} else {

							tmpContent_tDBInput_5 = rs_tDBInput_5.getString(1);
							if (tmpContent_tDBInput_5 != null) {
								if (talendToDBList_tDBInput_5.contains(
										rsmd_tDBInput_5.getColumnTypeName(1).toUpperCase(java.util.Locale.ENGLISH))) {
									row11.Message = FormatterUtils.formatUnwithE(tmpContent_tDBInput_5);
								} else {
									row11.Message = tmpContent_tDBInput_5;
								}
							} else {
								row11.Message = null;
							}
						}
						if (colQtyInRs_tDBInput_5 < 2) {
							row11.Time = null;
						} else {

							row11.Time = mssqlGTU_tDBInput_5.getDate(rsmd_tDBInput_5, rs_tDBInput_5, 2);

						}

						/**
						 * [tDBInput_5 begin ] stop
						 */

						/**
						 * [tDBInput_5 main ] start
						 */

						currentComponent = "tDBInput_5";

						tos_count_tDBInput_5++;

						/**
						 * [tDBInput_5 main ] stop
						 */

						/**
						 * [tDBInput_5 process_data_begin ] start
						 */

						currentComponent = "tDBInput_5";

						/**
						 * [tDBInput_5 process_data_begin ] stop
						 */

						/**
						 * [tLogRow_5 main ] start
						 */

						currentComponent = "tLogRow_5";

						if (execStat) {
							runStat.updateStatOnConnection(iterateId, 1, 1

									, "row11"

							);
						}

///////////////////////		

						strBuffer_tLogRow_5 = new StringBuilder();

						if (row11.Message != null) { //

							strBuffer_tLogRow_5.append(String.valueOf(row11.Message));

						} //

						strBuffer_tLogRow_5.append("|");

						if (row11.Time != null) { //

							strBuffer_tLogRow_5.append(FormatterUtils.format_Date(row11.Time, "yyyy-MM-dd HH:mm:ss"));

						} //

						if (globalMap.get("tLogRow_CONSOLE") != null) {
							consoleOut_tLogRow_5 = (java.io.PrintStream) globalMap.get("tLogRow_CONSOLE");
						} else {
							consoleOut_tLogRow_5 = new java.io.PrintStream(
									new java.io.BufferedOutputStream(System.out));
							globalMap.put("tLogRow_CONSOLE", consoleOut_tLogRow_5);
						}
						consoleOut_tLogRow_5.println(strBuffer_tLogRow_5.toString());
						consoleOut_tLogRow_5.flush();
						nb_line_tLogRow_5++;
//////

//////                    

///////////////////////    			

						tos_count_tLogRow_5++;

						/**
						 * [tLogRow_5 main ] stop
						 */

						/**
						 * [tLogRow_5 process_data_begin ] start
						 */

						currentComponent = "tLogRow_5";

						/**
						 * [tLogRow_5 process_data_begin ] stop
						 */

						/**
						 * [tLogRow_5 process_data_end ] start
						 */

						currentComponent = "tLogRow_5";

						/**
						 * [tLogRow_5 process_data_end ] stop
						 */

						/**
						 * [tDBInput_5 process_data_end ] start
						 */

						currentComponent = "tDBInput_5";

						/**
						 * [tDBInput_5 process_data_end ] stop
						 */

						/**
						 * [tDBInput_5 end ] start
						 */

						currentComponent = "tDBInput_5";

					}
				} finally {
					if (rs_tDBInput_5 != null) {
						rs_tDBInput_5.close();
					}
					if (stmt_tDBInput_5 != null) {
						stmt_tDBInput_5.close();
					}
				}
				globalMap.put("tDBInput_5_NB_LINE", nb_line_tDBInput_5);

				ok_Hash.put("tDBInput_5", true);
				end_Hash.put("tDBInput_5", System.currentTimeMillis());

				/**
				 * [tDBInput_5 end ] stop
				 */

				/**
				 * [tLogRow_5 end ] start
				 */

				currentComponent = "tLogRow_5";

//////
//////
				globalMap.put("tLogRow_5_NB_LINE", nb_line_tLogRow_5);

///////////////////////    			

				if (execStat) {
					runStat.updateStat(resourceMap, iterateId, 2, 0, "row11");
				}

				ok_Hash.put("tLogRow_5", true);
				end_Hash.put("tLogRow_5", System.currentTimeMillis());

				/**
				 * [tLogRow_5 end ] stop
				 */

			} // end the resume

			if (resumeEntryMethodName == null || globalResumeTicket) {
				resumeUtil.addLog("CHECKPOINT", "CONNECTION:SUBJOB_OK:tDBInput_5:OnSubjobOk", "",
						Thread.currentThread().getId() + "", "", "", "", "", "");
			}

			if (execStat) {
				runStat.updateStatOnConnection("OnSubjobOk25", 0, "ok");
			}

			tDBRow_5Process(globalMap);

		} catch (java.lang.Exception e) {

			TalendException te = new TalendException(e, currentComponent, globalMap);

			throw te;
		} catch (java.lang.Error error) {

			runStat.stopThreadStat();

			throw error;
		} finally {

			try {

				/**
				 * [tDBInput_5 finally ] start
				 */

				currentComponent = "tDBInput_5";

				/**
				 * [tDBInput_5 finally ] stop
				 */

				/**
				 * [tLogRow_5 finally ] start
				 */

				currentComponent = "tLogRow_5";

				/**
				 * [tLogRow_5 finally ] stop
				 */

			} catch (java.lang.Exception e) {
				// ignore
			} catch (java.lang.Error error) {
				// ignore
			}
			resourceMap = null;
		}

		globalMap.put("tDBInput_5_SUBPROCESS_STATE", 1);
	}

	public static class row12Struct implements routines.system.IPersistableRow<row12Struct> {
		final static byte[] commonByteArrayLock_WIPO_PROJECTS_G3b_Mig_UD = new byte[0];
		static byte[] commonByteArray_WIPO_PROJECTS_G3b_Mig_UD = new byte[0];

		public void readData(ObjectInputStream dis) {

			synchronized (commonByteArrayLock_WIPO_PROJECTS_G3b_Mig_UD) {

				try {

					int length = 0;

				}

				finally {
				}

			}

		}

		public void writeData(ObjectOutputStream dos) {
			try {

			}

			finally {
			}

		}

		public String toString() {

			StringBuilder sb = new StringBuilder();
			sb.append(super.toString());
			sb.append("[");
			sb.append("]");

			return sb.toString();
		}

		/**
		 * Compare keys
		 */
		public int compareTo(row12Struct other) {

			int returnValue = -1;

			return returnValue;
		}

		private int checkNullsAndCompare(Object object1, Object object2) {
			int returnValue = 0;
			if (object1 instanceof Comparable && object2 instanceof Comparable) {
				returnValue = ((Comparable) object1).compareTo(object2);
			} else if (object1 != null && object2 != null) {
				returnValue = compareStrings(object1.toString(), object2.toString());
			} else if (object1 == null && object2 != null) {
				returnValue = 1;
			} else if (object1 != null && object2 == null) {
				returnValue = -1;
			} else {
				returnValue = 0;
			}

			return returnValue;
		}

		private int compareStrings(String string1, String string2) {
			return string1.compareTo(string2);
		}

	}

	public void tDBRow_5Process(final java.util.Map<String, Object> globalMap) throws TalendException {
		globalMap.put("tDBRow_5_SUBPROCESS_STATE", 0);

		final boolean execStat = this.execStat;

		String iterateId = "";

		String currentComponent = "";
		java.util.Map<String, Object> resourceMap = new java.util.HashMap<String, Object>();

		try {
			// TDI-39566 avoid throwing an useless Exception
			boolean resumeIt = true;
			if (globalResumeTicket == false && resumeEntryMethodName != null) {
				String currentMethodName = new java.lang.Exception().getStackTrace()[0].getMethodName();
				resumeIt = resumeEntryMethodName.equals(currentMethodName);
			}
			if (resumeIt || globalResumeTicket) { // start the resume
				globalResumeTicket = true;

				row12Struct row12 = new row12Struct();

				/**
				 * [tDBCommit_5 begin ] start
				 */

				ok_Hash.put("tDBCommit_5", false);
				start_Hash.put("tDBCommit_5", System.currentTimeMillis());

				currentComponent = "tDBCommit_5";

				if (execStat) {
					runStat.updateStatOnConnection(resourceMap, iterateId, 0, 0, "row12");
				}

				int tos_count_tDBCommit_5 = 0;

				/**
				 * [tDBCommit_5 begin ] stop
				 */

				/**
				 * [tDBRow_5 begin ] start
				 */

				ok_Hash.put("tDBRow_5", false);
				start_Hash.put("tDBRow_5", System.currentTimeMillis());

				currentComponent = "tDBRow_5";

				int tos_count_tDBRow_5 = 0;

				java.sql.Connection conn_tDBRow_5 = null;
				String query_tDBRow_5 = "";
				boolean whetherReject_tDBRow_5 = false;
				conn_tDBRow_5 = (java.sql.Connection) globalMap.get("conn_tMSSqlConnection_3");

				resourceMap.put("conn_tDBRow_5", conn_tDBRow_5);
				java.sql.Statement stmt_tDBRow_5 = conn_tDBRow_5.createStatement();
				resourceMap.put("stmt_tDBRow_5", stmt_tDBRow_5);

				/**
				 * [tDBRow_5 begin ] stop
				 */

				/**
				 * [tDBRow_5 main ] start
				 */

				currentComponent = "tDBRow_5";

				row12 = null;

				query_tDBRow_5 = "EXEC IMPORTSETPERSONNBR;";
				whetherReject_tDBRow_5 = false;
				globalMap.put("tDBRow_5_QUERY", query_tDBRow_5);
				try {
					stmt_tDBRow_5.execute(query_tDBRow_5);

				} catch (java.lang.Exception e) {
					whetherReject_tDBRow_5 = true;

					System.err.print(e.getMessage());

				}

				if (!whetherReject_tDBRow_5) {

					row12 = new row12Struct();

				}

				tos_count_tDBRow_5++;

				/**
				 * [tDBRow_5 main ] stop
				 */

				/**
				 * [tDBRow_5 process_data_begin ] start
				 */

				currentComponent = "tDBRow_5";

				/**
				 * [tDBRow_5 process_data_begin ] stop
				 */
// Start of branch "row12"
				if (row12 != null) {

					/**
					 * [tDBCommit_5 main ] start
					 */

					currentComponent = "tDBCommit_5";

					if (execStat) {
						runStat.updateStatOnConnection(iterateId, 1, 1

								, "row12"

						);
					}

					java.sql.Connection conn_tDBCommit_5 = (java.sql.Connection) globalMap
							.get("conn_tMSSqlConnection_3");
					if (conn_tDBCommit_5 != null && !conn_tDBCommit_5.isClosed()) {

						conn_tDBCommit_5.commit();

					}

					tos_count_tDBCommit_5++;

					/**
					 * [tDBCommit_5 main ] stop
					 */

					/**
					 * [tDBCommit_5 process_data_begin ] start
					 */

					currentComponent = "tDBCommit_5";

					/**
					 * [tDBCommit_5 process_data_begin ] stop
					 */

					/**
					 * [tDBCommit_5 process_data_end ] start
					 */

					currentComponent = "tDBCommit_5";

					/**
					 * [tDBCommit_5 process_data_end ] stop
					 */

				} // End of branch "row12"

				/**
				 * [tDBRow_5 process_data_end ] start
				 */

				currentComponent = "tDBRow_5";

				/**
				 * [tDBRow_5 process_data_end ] stop
				 */

				/**
				 * [tDBRow_5 end ] start
				 */

				currentComponent = "tDBRow_5";

				stmt_tDBRow_5.close();
				resourceMap.remove("stmt_tDBRow_5");
				resourceMap.put("statementClosed_tDBRow_5", true);
				resourceMap.put("finish_tDBRow_5", true);

				ok_Hash.put("tDBRow_5", true);
				end_Hash.put("tDBRow_5", System.currentTimeMillis());

				/**
				 * [tDBRow_5 end ] stop
				 */

				/**
				 * [tDBCommit_5 end ] start
				 */

				currentComponent = "tDBCommit_5";

				if (execStat) {
					runStat.updateStat(resourceMap, iterateId, 2, 0, "row12");
				}

				ok_Hash.put("tDBCommit_5", true);
				end_Hash.put("tDBCommit_5", System.currentTimeMillis());

				if (execStat) {
					runStat.updateStatOnConnection("OnComponentOk6", 0, "ok");
				}
				tDBInput_6Process(globalMap);

				/**
				 * [tDBCommit_5 end ] stop
				 */

			} // end the resume

			if (resumeEntryMethodName == null || globalResumeTicket) {
				resumeUtil.addLog("CHECKPOINT", "CONNECTION:SUBJOB_OK:tDBRow_5:OnSubjobOk", "",
						Thread.currentThread().getId() + "", "", "", "", "", "");
			}

			if (execStat) {
				runStat.updateStatOnConnection("OnSubjobOk7", 0, "ok");
			}

			tDBRow_4Process(globalMap);

		} catch (java.lang.Exception e) {

			TalendException te = new TalendException(e, currentComponent, globalMap);

			throw te;
		} catch (java.lang.Error error) {

			runStat.stopThreadStat();

			throw error;
		} finally {

			try {

				/**
				 * [tDBRow_5 finally ] start
				 */

				currentComponent = "tDBRow_5";

				if (resourceMap.get("statementClosed_tDBRow_5") == null) {
					java.sql.Statement stmtToClose_tDBRow_5 = null;
					if ((stmtToClose_tDBRow_5 = (java.sql.Statement) resourceMap.remove("stmt_tDBRow_5")) != null) {
						stmtToClose_tDBRow_5.close();
					}
				}

				/**
				 * [tDBRow_5 finally ] stop
				 */

				/**
				 * [tDBCommit_5 finally ] start
				 */

				currentComponent = "tDBCommit_5";

				/**
				 * [tDBCommit_5 finally ] stop
				 */

			} catch (java.lang.Exception e) {
				// ignore
			} catch (java.lang.Error error) {
				// ignore
			}
			resourceMap = null;
		}

		globalMap.put("tDBRow_5_SUBPROCESS_STATE", 1);
	}

	public static class row13Struct implements routines.system.IPersistableRow<row13Struct> {
		final static byte[] commonByteArrayLock_WIPO_PROJECTS_G3b_Mig_UD = new byte[0];
		static byte[] commonByteArray_WIPO_PROJECTS_G3b_Mig_UD = new byte[0];

		public String Message;

		public String getMessage() {
			return this.Message;
		}

		public java.util.Date Time;

		public java.util.Date getTime() {
			return this.Time;
		}

		private String readString(ObjectInputStream dis) throws IOException {
			String strReturn = null;
			int length = 0;
			length = dis.readInt();
			if (length == -1) {
				strReturn = null;
			} else {
				if (length > commonByteArray_WIPO_PROJECTS_G3b_Mig_UD.length) {
					if (length < 1024 && commonByteArray_WIPO_PROJECTS_G3b_Mig_UD.length == 0) {
						commonByteArray_WIPO_PROJECTS_G3b_Mig_UD = new byte[1024];
					} else {
						commonByteArray_WIPO_PROJECTS_G3b_Mig_UD = new byte[2 * length];
					}
				}
				dis.readFully(commonByteArray_WIPO_PROJECTS_G3b_Mig_UD, 0, length);
				strReturn = new String(commonByteArray_WIPO_PROJECTS_G3b_Mig_UD, 0, length, utf8Charset);
			}
			return strReturn;
		}

		private void writeString(String str, ObjectOutputStream dos) throws IOException {
			if (str == null) {
				dos.writeInt(-1);
			} else {
				byte[] byteArray = str.getBytes(utf8Charset);
				dos.writeInt(byteArray.length);
				dos.write(byteArray);
			}
		}

		private java.util.Date readDate(ObjectInputStream dis) throws IOException {
			java.util.Date dateReturn = null;
			int length = 0;
			length = dis.readByte();
			if (length == -1) {
				dateReturn = null;
			} else {
				dateReturn = new Date(dis.readLong());
			}
			return dateReturn;
		}

		private void writeDate(java.util.Date date1, ObjectOutputStream dos) throws IOException {
			if (date1 == null) {
				dos.writeByte(-1);
			} else {
				dos.writeByte(0);
				dos.writeLong(date1.getTime());
			}
		}

		public void readData(ObjectInputStream dis) {

			synchronized (commonByteArrayLock_WIPO_PROJECTS_G3b_Mig_UD) {

				try {

					int length = 0;

					this.Message = readString(dis);

					this.Time = readDate(dis);

				} catch (IOException e) {
					throw new RuntimeException(e);

				}

			}

		}

		public void writeData(ObjectOutputStream dos) {
			try {

				// String

				writeString(this.Message, dos);

				// java.util.Date

				writeDate(this.Time, dos);

			} catch (IOException e) {
				throw new RuntimeException(e);
			}

		}

		public String toString() {

			StringBuilder sb = new StringBuilder();
			sb.append(super.toString());
			sb.append("[");
			sb.append("Message=" + Message);
			sb.append(",Time=" + String.valueOf(Time));
			sb.append("]");

			return sb.toString();
		}

		/**
		 * Compare keys
		 */
		public int compareTo(row13Struct other) {

			int returnValue = -1;

			return returnValue;
		}

		private int checkNullsAndCompare(Object object1, Object object2) {
			int returnValue = 0;
			if (object1 instanceof Comparable && object2 instanceof Comparable) {
				returnValue = ((Comparable) object1).compareTo(object2);
			} else if (object1 != null && object2 != null) {
				returnValue = compareStrings(object1.toString(), object2.toString());
			} else if (object1 == null && object2 != null) {
				returnValue = 1;
			} else if (object1 != null && object2 == null) {
				returnValue = -1;
			} else {
				returnValue = 0;
			}

			return returnValue;
		}

		private int compareStrings(String string1, String string2) {
			return string1.compareTo(string2);
		}

	}

	public void tDBInput_6Process(final java.util.Map<String, Object> globalMap) throws TalendException {
		globalMap.put("tDBInput_6_SUBPROCESS_STATE", 0);

		final boolean execStat = this.execStat;

		String iterateId = "";

		String currentComponent = "";
		java.util.Map<String, Object> resourceMap = new java.util.HashMap<String, Object>();

		try {
			// TDI-39566 avoid throwing an useless Exception
			boolean resumeIt = true;
			if (globalResumeTicket == false && resumeEntryMethodName != null) {
				String currentMethodName = new java.lang.Exception().getStackTrace()[0].getMethodName();
				resumeIt = resumeEntryMethodName.equals(currentMethodName);
			}
			if (resumeIt || globalResumeTicket) { // start the resume
				globalResumeTicket = true;

				row13Struct row13 = new row13Struct();

				/**
				 * [tLogRow_6 begin ] start
				 */

				ok_Hash.put("tLogRow_6", false);
				start_Hash.put("tLogRow_6", System.currentTimeMillis());

				currentComponent = "tLogRow_6";

				if (execStat) {
					runStat.updateStatOnConnection(resourceMap, iterateId, 0, 0, "row13");
				}

				int tos_count_tLogRow_6 = 0;

				///////////////////////

				final String OUTPUT_FIELD_SEPARATOR_tLogRow_6 = "|";
				java.io.PrintStream consoleOut_tLogRow_6 = null;

				StringBuilder strBuffer_tLogRow_6 = null;
				int nb_line_tLogRow_6 = 0;
///////////////////////    			

				/**
				 * [tLogRow_6 begin ] stop
				 */

				/**
				 * [tDBInput_6 begin ] start
				 */

				ok_Hash.put("tDBInput_6", false);
				start_Hash.put("tDBInput_6", System.currentTimeMillis());

				currentComponent = "tDBInput_6";

				int tos_count_tDBInput_6 = 0;

				org.talend.designer.components.util.mssql.MSSqlGenerateTimestampUtil mssqlGTU_tDBInput_6 = org.talend.designer.components.util.mssql.MSSqlUtilFactory
						.getMSSqlGenerateTimestampUtil();

				java.util.List<String> talendToDBList_tDBInput_6 = new java.util.ArrayList();
				String[] talendToDBArray_tDBInput_6 = new String[] { "FLOAT", "NUMERIC", "NUMERIC IDENTITY", "DECIMAL",
						"DECIMAL IDENTITY", "REAL" };
				java.util.Collections.addAll(talendToDBList_tDBInput_6, talendToDBArray_tDBInput_6);
				int nb_line_tDBInput_6 = 0;
				java.sql.Connection conn_tDBInput_6 = null;
				conn_tDBInput_6 = (java.sql.Connection) globalMap.get("conn_tMSSqlConnection_3");

				String dbschema_tDBInput_6 = (String) globalMap.get("dbschema_tMSSqlConnection_3");

				java.sql.Statement stmt_tDBInput_6 = conn_tDBInput_6.createStatement();

				String dbquery_tDBInput_6 = "SELECT 'Step 6: set person nbr reprs' ,GETDATE();";

				globalMap.put("tDBInput_6_QUERY", dbquery_tDBInput_6);
				java.sql.ResultSet rs_tDBInput_6 = null;

				try {
					rs_tDBInput_6 = stmt_tDBInput_6.executeQuery(dbquery_tDBInput_6);
					java.sql.ResultSetMetaData rsmd_tDBInput_6 = rs_tDBInput_6.getMetaData();
					int colQtyInRs_tDBInput_6 = rsmd_tDBInput_6.getColumnCount();

					String tmpContent_tDBInput_6 = null;

					while (rs_tDBInput_6.next()) {
						nb_line_tDBInput_6++;

						if (colQtyInRs_tDBInput_6 < 1) {
							row13.Message = null;
						} else {

							tmpContent_tDBInput_6 = rs_tDBInput_6.getString(1);
							if (tmpContent_tDBInput_6 != null) {
								if (talendToDBList_tDBInput_6.contains(
										rsmd_tDBInput_6.getColumnTypeName(1).toUpperCase(java.util.Locale.ENGLISH))) {
									row13.Message = FormatterUtils.formatUnwithE(tmpContent_tDBInput_6);
								} else {
									row13.Message = tmpContent_tDBInput_6;
								}
							} else {
								row13.Message = null;
							}
						}
						if (colQtyInRs_tDBInput_6 < 2) {
							row13.Time = null;
						} else {

							row13.Time = mssqlGTU_tDBInput_6.getDate(rsmd_tDBInput_6, rs_tDBInput_6, 2);

						}

						/**
						 * [tDBInput_6 begin ] stop
						 */

						/**
						 * [tDBInput_6 main ] start
						 */

						currentComponent = "tDBInput_6";

						tos_count_tDBInput_6++;

						/**
						 * [tDBInput_6 main ] stop
						 */

						/**
						 * [tDBInput_6 process_data_begin ] start
						 */

						currentComponent = "tDBInput_6";

						/**
						 * [tDBInput_6 process_data_begin ] stop
						 */

						/**
						 * [tLogRow_6 main ] start
						 */

						currentComponent = "tLogRow_6";

						if (execStat) {
							runStat.updateStatOnConnection(iterateId, 1, 1

									, "row13"

							);
						}

///////////////////////		

						strBuffer_tLogRow_6 = new StringBuilder();

						if (row13.Message != null) { //

							strBuffer_tLogRow_6.append(String.valueOf(row13.Message));

						} //

						strBuffer_tLogRow_6.append("|");

						if (row13.Time != null) { //

							strBuffer_tLogRow_6.append(FormatterUtils.format_Date(row13.Time, "yyyy-MM-dd HH:mm:ss"));

						} //

						if (globalMap.get("tLogRow_CONSOLE") != null) {
							consoleOut_tLogRow_6 = (java.io.PrintStream) globalMap.get("tLogRow_CONSOLE");
						} else {
							consoleOut_tLogRow_6 = new java.io.PrintStream(
									new java.io.BufferedOutputStream(System.out));
							globalMap.put("tLogRow_CONSOLE", consoleOut_tLogRow_6);
						}
						consoleOut_tLogRow_6.println(strBuffer_tLogRow_6.toString());
						consoleOut_tLogRow_6.flush();
						nb_line_tLogRow_6++;
//////

//////                    

///////////////////////    			

						tos_count_tLogRow_6++;

						/**
						 * [tLogRow_6 main ] stop
						 */

						/**
						 * [tLogRow_6 process_data_begin ] start
						 */

						currentComponent = "tLogRow_6";

						/**
						 * [tLogRow_6 process_data_begin ] stop
						 */

						/**
						 * [tLogRow_6 process_data_end ] start
						 */

						currentComponent = "tLogRow_6";

						/**
						 * [tLogRow_6 process_data_end ] stop
						 */

						/**
						 * [tDBInput_6 process_data_end ] start
						 */

						currentComponent = "tDBInput_6";

						/**
						 * [tDBInput_6 process_data_end ] stop
						 */

						/**
						 * [tDBInput_6 end ] start
						 */

						currentComponent = "tDBInput_6";

					}
				} finally {
					if (rs_tDBInput_6 != null) {
						rs_tDBInput_6.close();
					}
					if (stmt_tDBInput_6 != null) {
						stmt_tDBInput_6.close();
					}
				}
				globalMap.put("tDBInput_6_NB_LINE", nb_line_tDBInput_6);

				ok_Hash.put("tDBInput_6", true);
				end_Hash.put("tDBInput_6", System.currentTimeMillis());

				/**
				 * [tDBInput_6 end ] stop
				 */

				/**
				 * [tLogRow_6 end ] start
				 */

				currentComponent = "tLogRow_6";

//////
//////
				globalMap.put("tLogRow_6_NB_LINE", nb_line_tLogRow_6);

///////////////////////    			

				if (execStat) {
					runStat.updateStat(resourceMap, iterateId, 2, 0, "row13");
				}

				ok_Hash.put("tLogRow_6", true);
				end_Hash.put("tLogRow_6", System.currentTimeMillis());

				/**
				 * [tLogRow_6 end ] stop
				 */

			} // end the resume

		} catch (java.lang.Exception e) {

			TalendException te = new TalendException(e, currentComponent, globalMap);

			throw te;
		} catch (java.lang.Error error) {

			runStat.stopThreadStat();

			throw error;
		} finally {

			try {

				/**
				 * [tDBInput_6 finally ] start
				 */

				currentComponent = "tDBInput_6";

				/**
				 * [tDBInput_6 finally ] stop
				 */

				/**
				 * [tLogRow_6 finally ] start
				 */

				currentComponent = "tLogRow_6";

				/**
				 * [tLogRow_6 finally ] stop
				 */

			} catch (java.lang.Exception e) {
				// ignore
			} catch (java.lang.Error error) {
				// ignore
			}
			resourceMap = null;
		}

		globalMap.put("tDBInput_6_SUBPROCESS_STATE", 1);
	}

	public static class row10Struct implements routines.system.IPersistableRow<row10Struct> {
		final static byte[] commonByteArrayLock_WIPO_PROJECTS_G3b_Mig_UD = new byte[0];
		static byte[] commonByteArray_WIPO_PROJECTS_G3b_Mig_UD = new byte[0];

		public void readData(ObjectInputStream dis) {

			synchronized (commonByteArrayLock_WIPO_PROJECTS_G3b_Mig_UD) {

				try {

					int length = 0;

				}

				finally {
				}

			}

		}

		public void writeData(ObjectOutputStream dos) {
			try {

			}

			finally {
			}

		}

		public String toString() {

			StringBuilder sb = new StringBuilder();
			sb.append(super.toString());
			sb.append("[");
			sb.append("]");

			return sb.toString();
		}

		/**
		 * Compare keys
		 */
		public int compareTo(row10Struct other) {

			int returnValue = -1;

			return returnValue;
		}

		private int checkNullsAndCompare(Object object1, Object object2) {
			int returnValue = 0;
			if (object1 instanceof Comparable && object2 instanceof Comparable) {
				returnValue = ((Comparable) object1).compareTo(object2);
			} else if (object1 != null && object2 != null) {
				returnValue = compareStrings(object1.toString(), object2.toString());
			} else if (object1 == null && object2 != null) {
				returnValue = 1;
			} else if (object1 != null && object2 == null) {
				returnValue = -1;
			} else {
				returnValue = 0;
			}

			return returnValue;
		}

		private int compareStrings(String string1, String string2) {
			return string1.compareTo(string2);
		}

	}

	public static class row45Struct implements routines.system.IPersistableRow<row45Struct> {
		final static byte[] commonByteArrayLock_WIPO_PROJECTS_G3b_Mig_UD = new byte[0];
		static byte[] commonByteArray_WIPO_PROJECTS_G3b_Mig_UD = new byte[0];

		public String errorCode;

		public String getErrorCode() {
			return this.errorCode;
		}

		public String errorMessage;

		public String getErrorMessage() {
			return this.errorMessage;
		}

		private String readString(ObjectInputStream dis) throws IOException {
			String strReturn = null;
			int length = 0;
			length = dis.readInt();
			if (length == -1) {
				strReturn = null;
			} else {
				if (length > commonByteArray_WIPO_PROJECTS_G3b_Mig_UD.length) {
					if (length < 1024 && commonByteArray_WIPO_PROJECTS_G3b_Mig_UD.length == 0) {
						commonByteArray_WIPO_PROJECTS_G3b_Mig_UD = new byte[1024];
					} else {
						commonByteArray_WIPO_PROJECTS_G3b_Mig_UD = new byte[2 * length];
					}
				}
				dis.readFully(commonByteArray_WIPO_PROJECTS_G3b_Mig_UD, 0, length);
				strReturn = new String(commonByteArray_WIPO_PROJECTS_G3b_Mig_UD, 0, length, utf8Charset);
			}
			return strReturn;
		}

		private void writeString(String str, ObjectOutputStream dos) throws IOException {
			if (str == null) {
				dos.writeInt(-1);
			} else {
				byte[] byteArray = str.getBytes(utf8Charset);
				dos.writeInt(byteArray.length);
				dos.write(byteArray);
			}
		}

		public void readData(ObjectInputStream dis) {

			synchronized (commonByteArrayLock_WIPO_PROJECTS_G3b_Mig_UD) {

				try {

					int length = 0;

					this.errorCode = readString(dis);

					this.errorMessage = readString(dis);

				} catch (IOException e) {
					throw new RuntimeException(e);

				}

			}

		}

		public void writeData(ObjectOutputStream dos) {
			try {

				// String

				writeString(this.errorCode, dos);

				// String

				writeString(this.errorMessage, dos);

			} catch (IOException e) {
				throw new RuntimeException(e);
			}

		}

		public String toString() {

			StringBuilder sb = new StringBuilder();
			sb.append(super.toString());
			sb.append("[");
			sb.append("errorCode=" + errorCode);
			sb.append(",errorMessage=" + errorMessage);
			sb.append("]");

			return sb.toString();
		}

		/**
		 * Compare keys
		 */
		public int compareTo(row45Struct other) {

			int returnValue = -1;

			return returnValue;
		}

		private int checkNullsAndCompare(Object object1, Object object2) {
			int returnValue = 0;
			if (object1 instanceof Comparable && object2 instanceof Comparable) {
				returnValue = ((Comparable) object1).compareTo(object2);
			} else if (object1 != null && object2 != null) {
				returnValue = compareStrings(object1.toString(), object2.toString());
			} else if (object1 == null && object2 != null) {
				returnValue = 1;
			} else if (object1 != null && object2 == null) {
				returnValue = -1;
			} else {
				returnValue = 0;
			}

			return returnValue;
		}

		private int compareStrings(String string1, String string2) {
			return string1.compareTo(string2);
		}

	}

	public void tDBRow_4Process(final java.util.Map<String, Object> globalMap) throws TalendException {
		globalMap.put("tDBRow_4_SUBPROCESS_STATE", 0);

		final boolean execStat = this.execStat;

		String iterateId = "";

		String currentComponent = "";
		java.util.Map<String, Object> resourceMap = new java.util.HashMap<String, Object>();

		try {
			// TDI-39566 avoid throwing an useless Exception
			boolean resumeIt = true;
			if (globalResumeTicket == false && resumeEntryMethodName != null) {
				String currentMethodName = new java.lang.Exception().getStackTrace()[0].getMethodName();
				resumeIt = resumeEntryMethodName.equals(currentMethodName);
			}
			if (resumeIt || globalResumeTicket) { // start the resume
				globalResumeTicket = true;

				row10Struct row10 = new row10Struct();
				row45Struct row45 = new row45Struct();

				/**
				 * [tDBCommit_4 begin ] start
				 */

				ok_Hash.put("tDBCommit_4", false);
				start_Hash.put("tDBCommit_4", System.currentTimeMillis());

				currentComponent = "tDBCommit_4";

				if (execStat) {
					runStat.updateStatOnConnection(resourceMap, iterateId, 0, 0, "row10");
				}

				int tos_count_tDBCommit_4 = 0;

				/**
				 * [tDBCommit_4 begin ] stop
				 */

				/**
				 * [tLogRow_26 begin ] start
				 */

				ok_Hash.put("tLogRow_26", false);
				start_Hash.put("tLogRow_26", System.currentTimeMillis());

				currentComponent = "tLogRow_26";

				if (execStat) {
					runStat.updateStatOnConnection(resourceMap, iterateId, 0, 0, "row45");
				}

				int tos_count_tLogRow_26 = 0;

				///////////////////////

				final String OUTPUT_FIELD_SEPARATOR_tLogRow_26 = "|";
				java.io.PrintStream consoleOut_tLogRow_26 = null;

				StringBuilder strBuffer_tLogRow_26 = null;
				int nb_line_tLogRow_26 = 0;
///////////////////////    			

				/**
				 * [tLogRow_26 begin ] stop
				 */

				/**
				 * [tDBRow_4 begin ] start
				 */

				ok_Hash.put("tDBRow_4", false);
				start_Hash.put("tDBRow_4", System.currentTimeMillis());

				tStatCatcher_1.addMessage("begin", "tDBRow_4");
				tStatCatcher_1Process(globalMap);

				currentComponent = "tDBRow_4";

				int tos_count_tDBRow_4 = 0;

				java.sql.Connection conn_tDBRow_4 = null;
				String query_tDBRow_4 = "";
				boolean whetherReject_tDBRow_4 = false;
				conn_tDBRow_4 = (java.sql.Connection) globalMap.get("conn_tMSSqlConnection_3");

				resourceMap.put("conn_tDBRow_4", conn_tDBRow_4);
				java.sql.Statement stmt_tDBRow_4 = conn_tDBRow_4.createStatement();
				resourceMap.put("stmt_tDBRow_4", stmt_tDBRow_4);

				/**
				 * [tDBRow_4 begin ] stop
				 */

				/**
				 * [tDBRow_4 main ] start
				 */

				currentComponent = "tDBRow_4";

				row10 = null;

				row45 = null;

				query_tDBRow_4 = "\nUPDATE  T   \nSET	applicant_person_nbr = (	SELECT person_nbr\n	FROM WRK_PERSON_ADDR \n	WHERE	 ref_nbr  = T.rowid\n),	"
						+ "\n	applicant_addr_nbr = (	SELECT addr_nbr\n	FROM WRK_PERSON_ADDR \n	WHERE	 ref_nbr  = T.rowid\n) \nFROM WRK_USERDOC T ;"
						+ "\n";
				whetherReject_tDBRow_4 = false;
				globalMap.put("tDBRow_4_QUERY", query_tDBRow_4);
				try {
					stmt_tDBRow_4.execute(query_tDBRow_4);

				} catch (java.lang.Exception e) {
					whetherReject_tDBRow_4 = true;

					row45 = new row45Struct();

					row45.errorCode = ((java.sql.SQLException) e).getSQLState();
					row45.errorMessage = e.getMessage() + " - Line: " + tos_count_tDBRow_4;

				}

				if (!whetherReject_tDBRow_4) {

					row10 = new row10Struct();

				}

				tos_count_tDBRow_4++;

				/**
				 * [tDBRow_4 main ] stop
				 */

				/**
				 * [tDBRow_4 process_data_begin ] start
				 */

				currentComponent = "tDBRow_4";

				/**
				 * [tDBRow_4 process_data_begin ] stop
				 */
// Start of branch "row10"
				if (row10 != null) {

					/**
					 * [tDBCommit_4 main ] start
					 */

					currentComponent = "tDBCommit_4";

					if (execStat) {
						runStat.updateStatOnConnection(iterateId, 1, 1

								, "row10"

						);
					}

					java.sql.Connection conn_tDBCommit_4 = (java.sql.Connection) globalMap
							.get("conn_tMSSqlConnection_3");
					if (conn_tDBCommit_4 != null && !conn_tDBCommit_4.isClosed()) {

						conn_tDBCommit_4.commit();

					}

					tos_count_tDBCommit_4++;

					/**
					 * [tDBCommit_4 main ] stop
					 */

					/**
					 * [tDBCommit_4 process_data_begin ] start
					 */

					currentComponent = "tDBCommit_4";

					/**
					 * [tDBCommit_4 process_data_begin ] stop
					 */

					/**
					 * [tDBCommit_4 process_data_end ] start
					 */

					currentComponent = "tDBCommit_4";

					/**
					 * [tDBCommit_4 process_data_end ] stop
					 */

				} // End of branch "row10"

// Start of branch "row45"
				if (row45 != null) {

					/**
					 * [tLogRow_26 main ] start
					 */

					currentComponent = "tLogRow_26";

					if (execStat) {
						runStat.updateStatOnConnection(iterateId, 1, 1

								, "row45"

						);
					}

///////////////////////		

					strBuffer_tLogRow_26 = new StringBuilder();

					if (row45.errorCode != null) { //

						strBuffer_tLogRow_26.append(String.valueOf(row45.errorCode));

					} //

					strBuffer_tLogRow_26.append("|");

					if (row45.errorMessage != null) { //

						strBuffer_tLogRow_26.append(String.valueOf(row45.errorMessage));

					} //

					if (globalMap.get("tLogRow_CONSOLE") != null) {
						consoleOut_tLogRow_26 = (java.io.PrintStream) globalMap.get("tLogRow_CONSOLE");
					} else {
						consoleOut_tLogRow_26 = new java.io.PrintStream(new java.io.BufferedOutputStream(System.out));
						globalMap.put("tLogRow_CONSOLE", consoleOut_tLogRow_26);
					}
					consoleOut_tLogRow_26.println(strBuffer_tLogRow_26.toString());
					consoleOut_tLogRow_26.flush();
					nb_line_tLogRow_26++;
//////

//////                    

///////////////////////    			

					tos_count_tLogRow_26++;

					/**
					 * [tLogRow_26 main ] stop
					 */

					/**
					 * [tLogRow_26 process_data_begin ] start
					 */

					currentComponent = "tLogRow_26";

					/**
					 * [tLogRow_26 process_data_begin ] stop
					 */

					/**
					 * [tLogRow_26 process_data_end ] start
					 */

					currentComponent = "tLogRow_26";

					/**
					 * [tLogRow_26 process_data_end ] stop
					 */

				} // End of branch "row45"

				/**
				 * [tDBRow_4 process_data_end ] start
				 */

				currentComponent = "tDBRow_4";

				/**
				 * [tDBRow_4 process_data_end ] stop
				 */

				/**
				 * [tDBRow_4 end ] start
				 */

				currentComponent = "tDBRow_4";

				stmt_tDBRow_4.close();
				resourceMap.remove("stmt_tDBRow_4");
				resourceMap.put("statementClosed_tDBRow_4", true);
				resourceMap.put("finish_tDBRow_4", true);

				ok_Hash.put("tDBRow_4", true);
				end_Hash.put("tDBRow_4", System.currentTimeMillis());

				tStatCatcher_1.addMessage("end", "tDBRow_4", end_Hash.get("tDBRow_4") - start_Hash.get("tDBRow_4"));
				tStatCatcher_1Process(globalMap);

				/**
				 * [tDBRow_4 end ] stop
				 */

				/**
				 * [tDBCommit_4 end ] start
				 */

				currentComponent = "tDBCommit_4";

				if (execStat) {
					runStat.updateStat(resourceMap, iterateId, 2, 0, "row10");
				}

				ok_Hash.put("tDBCommit_4", true);
				end_Hash.put("tDBCommit_4", System.currentTimeMillis());

				/**
				 * [tDBCommit_4 end ] stop
				 */

				/**
				 * [tLogRow_26 end ] start
				 */

				currentComponent = "tLogRow_26";

//////
//////
				globalMap.put("tLogRow_26_NB_LINE", nb_line_tLogRow_26);

///////////////////////    			

				if (execStat) {
					runStat.updateStat(resourceMap, iterateId, 2, 0, "row45");
				}

				ok_Hash.put("tLogRow_26", true);
				end_Hash.put("tLogRow_26", System.currentTimeMillis());

				/**
				 * [tLogRow_26 end ] stop
				 */

			} // end the resume

			if (resumeEntryMethodName == null || globalResumeTicket) {
				resumeUtil.addLog("CHECKPOINT", "CONNECTION:SUBJOB_OK:tDBRow_4:OnSubjobOk", "",
						Thread.currentThread().getId() + "", "", "", "", "", "");
			}

			if (execStat) {
				runStat.updateStatOnConnection("OnSubjobOk26", 0, "ok");
			}

			tDBRow_22Process(globalMap);

		} catch (java.lang.Exception e) {

			TalendException te = new TalendException(e, currentComponent, globalMap);

			throw te;
		} catch (java.lang.Error error) {

			runStat.stopThreadStat();

			throw error;
		} finally {

			try {

				/**
				 * [tDBRow_4 finally ] start
				 */

				currentComponent = "tDBRow_4";

				if (resourceMap.get("statementClosed_tDBRow_4") == null) {
					java.sql.Statement stmtToClose_tDBRow_4 = null;
					if ((stmtToClose_tDBRow_4 = (java.sql.Statement) resourceMap.remove("stmt_tDBRow_4")) != null) {
						stmtToClose_tDBRow_4.close();
					}
				}

				/**
				 * [tDBRow_4 finally ] stop
				 */

				/**
				 * [tDBCommit_4 finally ] start
				 */

				currentComponent = "tDBCommit_4";

				/**
				 * [tDBCommit_4 finally ] stop
				 */

				/**
				 * [tLogRow_26 finally ] start
				 */

				currentComponent = "tLogRow_26";

				/**
				 * [tLogRow_26 finally ] stop
				 */

			} catch (java.lang.Exception e) {
				// ignore
			} catch (java.lang.Error error) {
				// ignore
			}
			resourceMap = null;
		}

		globalMap.put("tDBRow_4_SUBPROCESS_STATE", 1);
	}

	public static class row46Struct implements routines.system.IPersistableRow<row46Struct> {
		final static byte[] commonByteArrayLock_WIPO_PROJECTS_G3b_Mig_UD = new byte[0];
		static byte[] commonByteArray_WIPO_PROJECTS_G3b_Mig_UD = new byte[0];

		public void readData(ObjectInputStream dis) {

			synchronized (commonByteArrayLock_WIPO_PROJECTS_G3b_Mig_UD) {

				try {

					int length = 0;

				}

				finally {
				}

			}

		}

		public void writeData(ObjectOutputStream dos) {
			try {

			}

			finally {
			}

		}

		public String toString() {

			StringBuilder sb = new StringBuilder();
			sb.append(super.toString());
			sb.append("[");
			sb.append("]");

			return sb.toString();
		}

		/**
		 * Compare keys
		 */
		public int compareTo(row46Struct other) {

			int returnValue = -1;

			return returnValue;
		}

		private int checkNullsAndCompare(Object object1, Object object2) {
			int returnValue = 0;
			if (object1 instanceof Comparable && object2 instanceof Comparable) {
				returnValue = ((Comparable) object1).compareTo(object2);
			} else if (object1 != null && object2 != null) {
				returnValue = compareStrings(object1.toString(), object2.toString());
			} else if (object1 == null && object2 != null) {
				returnValue = 1;
			} else if (object1 != null && object2 == null) {
				returnValue = -1;
			} else {
				returnValue = 0;
			}

			return returnValue;
		}

		private int compareStrings(String string1, String string2) {
			return string1.compareTo(string2);
		}

	}

	public static class row47Struct implements routines.system.IPersistableRow<row47Struct> {
		final static byte[] commonByteArrayLock_WIPO_PROJECTS_G3b_Mig_UD = new byte[0];
		static byte[] commonByteArray_WIPO_PROJECTS_G3b_Mig_UD = new byte[0];

		public String errorCode;

		public String getErrorCode() {
			return this.errorCode;
		}

		public String errorMessage;

		public String getErrorMessage() {
			return this.errorMessage;
		}

		private String readString(ObjectInputStream dis) throws IOException {
			String strReturn = null;
			int length = 0;
			length = dis.readInt();
			if (length == -1) {
				strReturn = null;
			} else {
				if (length > commonByteArray_WIPO_PROJECTS_G3b_Mig_UD.length) {
					if (length < 1024 && commonByteArray_WIPO_PROJECTS_G3b_Mig_UD.length == 0) {
						commonByteArray_WIPO_PROJECTS_G3b_Mig_UD = new byte[1024];
					} else {
						commonByteArray_WIPO_PROJECTS_G3b_Mig_UD = new byte[2 * length];
					}
				}
				dis.readFully(commonByteArray_WIPO_PROJECTS_G3b_Mig_UD, 0, length);
				strReturn = new String(commonByteArray_WIPO_PROJECTS_G3b_Mig_UD, 0, length, utf8Charset);
			}
			return strReturn;
		}

		private void writeString(String str, ObjectOutputStream dos) throws IOException {
			if (str == null) {
				dos.writeInt(-1);
			} else {
				byte[] byteArray = str.getBytes(utf8Charset);
				dos.writeInt(byteArray.length);
				dos.write(byteArray);
			}
		}

		public void readData(ObjectInputStream dis) {

			synchronized (commonByteArrayLock_WIPO_PROJECTS_G3b_Mig_UD) {

				try {

					int length = 0;

					this.errorCode = readString(dis);

					this.errorMessage = readString(dis);

				} catch (IOException e) {
					throw new RuntimeException(e);

				}

			}

		}

		public void writeData(ObjectOutputStream dos) {
			try {

				// String

				writeString(this.errorCode, dos);

				// String

				writeString(this.errorMessage, dos);

			} catch (IOException e) {
				throw new RuntimeException(e);
			}

		}

		public String toString() {

			StringBuilder sb = new StringBuilder();
			sb.append(super.toString());
			sb.append("[");
			sb.append("errorCode=" + errorCode);
			sb.append(",errorMessage=" + errorMessage);
			sb.append("]");

			return sb.toString();
		}

		/**
		 * Compare keys
		 */
		public int compareTo(row47Struct other) {

			int returnValue = -1;

			return returnValue;
		}

		private int checkNullsAndCompare(Object object1, Object object2) {
			int returnValue = 0;
			if (object1 instanceof Comparable && object2 instanceof Comparable) {
				returnValue = ((Comparable) object1).compareTo(object2);
			} else if (object1 != null && object2 != null) {
				returnValue = compareStrings(object1.toString(), object2.toString());
			} else if (object1 == null && object2 != null) {
				returnValue = 1;
			} else if (object1 != null && object2 == null) {
				returnValue = -1;
			} else {
				returnValue = 0;
			}

			return returnValue;
		}

		private int compareStrings(String string1, String string2) {
			return string1.compareTo(string2);
		}

	}

	public void tDBRow_22Process(final java.util.Map<String, Object> globalMap) throws TalendException {
		globalMap.put("tDBRow_22_SUBPROCESS_STATE", 0);

		final boolean execStat = this.execStat;

		String iterateId = "";

		String currentComponent = "";
		java.util.Map<String, Object> resourceMap = new java.util.HashMap<String, Object>();

		try {
			// TDI-39566 avoid throwing an useless Exception
			boolean resumeIt = true;
			if (globalResumeTicket == false && resumeEntryMethodName != null) {
				String currentMethodName = new java.lang.Exception().getStackTrace()[0].getMethodName();
				resumeIt = resumeEntryMethodName.equals(currentMethodName);
			}
			if (resumeIt || globalResumeTicket) { // start the resume
				globalResumeTicket = true;

				row46Struct row46 = new row46Struct();
				row47Struct row47 = new row47Struct();

				/**
				 * [tDBCommit_22 begin ] start
				 */

				ok_Hash.put("tDBCommit_22", false);
				start_Hash.put("tDBCommit_22", System.currentTimeMillis());

				currentComponent = "tDBCommit_22";

				if (execStat) {
					runStat.updateStatOnConnection(resourceMap, iterateId, 0, 0, "row46");
				}

				int tos_count_tDBCommit_22 = 0;

				/**
				 * [tDBCommit_22 begin ] stop
				 */

				/**
				 * [tLogRow_27 begin ] start
				 */

				ok_Hash.put("tLogRow_27", false);
				start_Hash.put("tLogRow_27", System.currentTimeMillis());

				currentComponent = "tLogRow_27";

				if (execStat) {
					runStat.updateStatOnConnection(resourceMap, iterateId, 0, 0, "row47");
				}

				int tos_count_tLogRow_27 = 0;

				///////////////////////

				final String OUTPUT_FIELD_SEPARATOR_tLogRow_27 = "|";
				java.io.PrintStream consoleOut_tLogRow_27 = null;

				StringBuilder strBuffer_tLogRow_27 = null;
				int nb_line_tLogRow_27 = 0;
///////////////////////    			

				/**
				 * [tLogRow_27 begin ] stop
				 */

				/**
				 * [tDBRow_22 begin ] start
				 */

				ok_Hash.put("tDBRow_22", false);
				start_Hash.put("tDBRow_22", System.currentTimeMillis());

				tStatCatcher_1.addMessage("begin", "tDBRow_22");
				tStatCatcher_1Process(globalMap);

				currentComponent = "tDBRow_22";

				int tos_count_tDBRow_22 = 0;

				java.sql.Connection conn_tDBRow_22 = null;
				String query_tDBRow_22 = "";
				boolean whetherReject_tDBRow_22 = false;
				conn_tDBRow_22 = (java.sql.Connection) globalMap.get("conn_tMSSqlConnection_3");

				resourceMap.put("conn_tDBRow_22", conn_tDBRow_22);
				java.sql.Statement stmt_tDBRow_22 = conn_tDBRow_22.createStatement();
				resourceMap.put("stmt_tDBRow_22", stmt_tDBRow_22);

				/**
				 * [tDBRow_22 begin ] stop
				 */

				/**
				 * [tDBRow_22 main ] start
				 */

				currentComponent = "tDBRow_22";

				row46 = null;

				row47 = null;

				query_tDBRow_22 = "\nUPDATE  T   \nSET	USERDOC_PROC_TYP = (	SELECT GENERATE_PROC_TYP\n	FROM WRK_USERDOC M,\n		CF_USERDOC_TYPE UT,\n		CF_PR"
						+ "OCESS_TYPE PT \n	WHERE	 M.userdoc_seq  = T.userdoc_seq\n	 AND	M.userdoc_series  = T.userdoc_series\n	 AND	M.userdoc_nbr "
						+ " = T.userdoc_nbr\n	 AND	M.userdoc_type  = UT.userdoc_typ COLLATE DATABASE_DEFAULT\n	 AND	UT.generate_proc_typ  = PT.proc"
						+ "_typ\n	 AND	RELATED_TO_WCODE  = 5\n),	\n	USERDOC_STATUS_CODE = (	SELECT SECONDARY_INI_STATUS_CODE\n	FROM WRK_USERDOC M,"
						+ "\n		CF_USERDOC_TYPE UT,\n		CF_PROCESS_TYPE PT \n	WHERE	 M.userdoc_seq  = T.userdoc_seq\n	 AND	M.userdoc_series  = T.userd"
						+ "oc_series\n	 AND	M.userdoc_nbr  = T.userdoc_nbr\n	 AND	M.userdoc_type  = UT.userdoc_typ COLLATE DATABASE_DEFAULT\n	 AND	"
						+ "UT.generate_proc_typ  = PT.proc_typ\n	 AND	RELATED_TO_WCODE  = 5\n) \nFROM WRK_USERDOC T;\n";
				whetherReject_tDBRow_22 = false;
				globalMap.put("tDBRow_22_QUERY", query_tDBRow_22);
				try {
					stmt_tDBRow_22.execute(query_tDBRow_22);

				} catch (java.lang.Exception e) {
					whetherReject_tDBRow_22 = true;

					row47 = new row47Struct();

					row47.errorCode = ((java.sql.SQLException) e).getSQLState();
					row47.errorMessage = e.getMessage() + " - Line: " + tos_count_tDBRow_22;

				}

				if (!whetherReject_tDBRow_22) {

					row46 = new row46Struct();

				}

				tos_count_tDBRow_22++;

				/**
				 * [tDBRow_22 main ] stop
				 */

				/**
				 * [tDBRow_22 process_data_begin ] start
				 */

				currentComponent = "tDBRow_22";

				/**
				 * [tDBRow_22 process_data_begin ] stop
				 */
// Start of branch "row46"
				if (row46 != null) {

					/**
					 * [tDBCommit_22 main ] start
					 */

					currentComponent = "tDBCommit_22";

					if (execStat) {
						runStat.updateStatOnConnection(iterateId, 1, 1

								, "row46"

						);
					}

					java.sql.Connection conn_tDBCommit_22 = (java.sql.Connection) globalMap
							.get("conn_tMSSqlConnection_3");
					if (conn_tDBCommit_22 != null && !conn_tDBCommit_22.isClosed()) {

						conn_tDBCommit_22.commit();

					}

					tos_count_tDBCommit_22++;

					/**
					 * [tDBCommit_22 main ] stop
					 */

					/**
					 * [tDBCommit_22 process_data_begin ] start
					 */

					currentComponent = "tDBCommit_22";

					/**
					 * [tDBCommit_22 process_data_begin ] stop
					 */

					/**
					 * [tDBCommit_22 process_data_end ] start
					 */

					currentComponent = "tDBCommit_22";

					/**
					 * [tDBCommit_22 process_data_end ] stop
					 */

				} // End of branch "row46"

// Start of branch "row47"
				if (row47 != null) {

					/**
					 * [tLogRow_27 main ] start
					 */

					currentComponent = "tLogRow_27";

					if (execStat) {
						runStat.updateStatOnConnection(iterateId, 1, 1

								, "row47"

						);
					}

///////////////////////		

					strBuffer_tLogRow_27 = new StringBuilder();

					if (row47.errorCode != null) { //

						strBuffer_tLogRow_27.append(String.valueOf(row47.errorCode));

					} //

					strBuffer_tLogRow_27.append("|");

					if (row47.errorMessage != null) { //

						strBuffer_tLogRow_27.append(String.valueOf(row47.errorMessage));

					} //

					if (globalMap.get("tLogRow_CONSOLE") != null) {
						consoleOut_tLogRow_27 = (java.io.PrintStream) globalMap.get("tLogRow_CONSOLE");
					} else {
						consoleOut_tLogRow_27 = new java.io.PrintStream(new java.io.BufferedOutputStream(System.out));
						globalMap.put("tLogRow_CONSOLE", consoleOut_tLogRow_27);
					}
					consoleOut_tLogRow_27.println(strBuffer_tLogRow_27.toString());
					consoleOut_tLogRow_27.flush();
					nb_line_tLogRow_27++;
//////

//////                    

///////////////////////    			

					tos_count_tLogRow_27++;

					/**
					 * [tLogRow_27 main ] stop
					 */

					/**
					 * [tLogRow_27 process_data_begin ] start
					 */

					currentComponent = "tLogRow_27";

					/**
					 * [tLogRow_27 process_data_begin ] stop
					 */

					/**
					 * [tLogRow_27 process_data_end ] start
					 */

					currentComponent = "tLogRow_27";

					/**
					 * [tLogRow_27 process_data_end ] stop
					 */

				} // End of branch "row47"

				/**
				 * [tDBRow_22 process_data_end ] start
				 */

				currentComponent = "tDBRow_22";

				/**
				 * [tDBRow_22 process_data_end ] stop
				 */

				/**
				 * [tDBRow_22 end ] start
				 */

				currentComponent = "tDBRow_22";

				stmt_tDBRow_22.close();
				resourceMap.remove("stmt_tDBRow_22");
				resourceMap.put("statementClosed_tDBRow_22", true);
				resourceMap.put("finish_tDBRow_22", true);

				ok_Hash.put("tDBRow_22", true);
				end_Hash.put("tDBRow_22", System.currentTimeMillis());

				tStatCatcher_1.addMessage("end", "tDBRow_22", end_Hash.get("tDBRow_22") - start_Hash.get("tDBRow_22"));
				tStatCatcher_1Process(globalMap);

				/**
				 * [tDBRow_22 end ] stop
				 */

				/**
				 * [tDBCommit_22 end ] start
				 */

				currentComponent = "tDBCommit_22";

				if (execStat) {
					runStat.updateStat(resourceMap, iterateId, 2, 0, "row46");
				}

				ok_Hash.put("tDBCommit_22", true);
				end_Hash.put("tDBCommit_22", System.currentTimeMillis());

				/**
				 * [tDBCommit_22 end ] stop
				 */

				/**
				 * [tLogRow_27 end ] start
				 */

				currentComponent = "tLogRow_27";

//////
//////
				globalMap.put("tLogRow_27_NB_LINE", nb_line_tLogRow_27);

///////////////////////    			

				if (execStat) {
					runStat.updateStat(resourceMap, iterateId, 2, 0, "row47");
				}

				ok_Hash.put("tLogRow_27", true);
				end_Hash.put("tLogRow_27", System.currentTimeMillis());

				/**
				 * [tLogRow_27 end ] stop
				 */

			} // end the resume

			if (resumeEntryMethodName == null || globalResumeTicket) {
				resumeUtil.addLog("CHECKPOINT", "CONNECTION:SUBJOB_OK:tDBRow_22:OnSubjobOk", "",
						Thread.currentThread().getId() + "", "", "", "", "", "");
			}

			if (execStat) {
				runStat.updateStatOnConnection("OnSubjobOk28", 0, "ok");
			}

			tDBRow_23Process(globalMap);

		} catch (java.lang.Exception e) {

			TalendException te = new TalendException(e, currentComponent, globalMap);

			throw te;
		} catch (java.lang.Error error) {

			runStat.stopThreadStat();

			throw error;
		} finally {

			try {

				/**
				 * [tDBRow_22 finally ] start
				 */

				currentComponent = "tDBRow_22";

				if (resourceMap.get("statementClosed_tDBRow_22") == null) {
					java.sql.Statement stmtToClose_tDBRow_22 = null;
					if ((stmtToClose_tDBRow_22 = (java.sql.Statement) resourceMap.remove("stmt_tDBRow_22")) != null) {
						stmtToClose_tDBRow_22.close();
					}
				}

				/**
				 * [tDBRow_22 finally ] stop
				 */

				/**
				 * [tDBCommit_22 finally ] start
				 */

				currentComponent = "tDBCommit_22";

				/**
				 * [tDBCommit_22 finally ] stop
				 */

				/**
				 * [tLogRow_27 finally ] start
				 */

				currentComponent = "tLogRow_27";

				/**
				 * [tLogRow_27 finally ] stop
				 */

			} catch (java.lang.Exception e) {
				// ignore
			} catch (java.lang.Error error) {
				// ignore
			}
			resourceMap = null;
		}

		globalMap.put("tDBRow_22_SUBPROCESS_STATE", 1);
	}

	public static class row48Struct implements routines.system.IPersistableRow<row48Struct> {
		final static byte[] commonByteArrayLock_WIPO_PROJECTS_G3b_Mig_UD = new byte[0];
		static byte[] commonByteArray_WIPO_PROJECTS_G3b_Mig_UD = new byte[0];

		public void readData(ObjectInputStream dis) {

			synchronized (commonByteArrayLock_WIPO_PROJECTS_G3b_Mig_UD) {

				try {

					int length = 0;

				}

				finally {
				}

			}

		}

		public void writeData(ObjectOutputStream dos) {
			try {

			}

			finally {
			}

		}

		public String toString() {

			StringBuilder sb = new StringBuilder();
			sb.append(super.toString());
			sb.append("[");
			sb.append("]");

			return sb.toString();
		}

		/**
		 * Compare keys
		 */
		public int compareTo(row48Struct other) {

			int returnValue = -1;

			return returnValue;
		}

		private int checkNullsAndCompare(Object object1, Object object2) {
			int returnValue = 0;
			if (object1 instanceof Comparable && object2 instanceof Comparable) {
				returnValue = ((Comparable) object1).compareTo(object2);
			} else if (object1 != null && object2 != null) {
				returnValue = compareStrings(object1.toString(), object2.toString());
			} else if (object1 == null && object2 != null) {
				returnValue = 1;
			} else if (object1 != null && object2 == null) {
				returnValue = -1;
			} else {
				returnValue = 0;
			}

			return returnValue;
		}

		private int compareStrings(String string1, String string2) {
			return string1.compareTo(string2);
		}

	}

	public static class row49Struct implements routines.system.IPersistableRow<row49Struct> {
		final static byte[] commonByteArrayLock_WIPO_PROJECTS_G3b_Mig_UD = new byte[0];
		static byte[] commonByteArray_WIPO_PROJECTS_G3b_Mig_UD = new byte[0];

		public String errorCode;

		public String getErrorCode() {
			return this.errorCode;
		}

		public String errorMessage;

		public String getErrorMessage() {
			return this.errorMessage;
		}

		private String readString(ObjectInputStream dis) throws IOException {
			String strReturn = null;
			int length = 0;
			length = dis.readInt();
			if (length == -1) {
				strReturn = null;
			} else {
				if (length > commonByteArray_WIPO_PROJECTS_G3b_Mig_UD.length) {
					if (length < 1024 && commonByteArray_WIPO_PROJECTS_G3b_Mig_UD.length == 0) {
						commonByteArray_WIPO_PROJECTS_G3b_Mig_UD = new byte[1024];
					} else {
						commonByteArray_WIPO_PROJECTS_G3b_Mig_UD = new byte[2 * length];
					}
				}
				dis.readFully(commonByteArray_WIPO_PROJECTS_G3b_Mig_UD, 0, length);
				strReturn = new String(commonByteArray_WIPO_PROJECTS_G3b_Mig_UD, 0, length, utf8Charset);
			}
			return strReturn;
		}

		private void writeString(String str, ObjectOutputStream dos) throws IOException {
			if (str == null) {
				dos.writeInt(-1);
			} else {
				byte[] byteArray = str.getBytes(utf8Charset);
				dos.writeInt(byteArray.length);
				dos.write(byteArray);
			}
		}

		public void readData(ObjectInputStream dis) {

			synchronized (commonByteArrayLock_WIPO_PROJECTS_G3b_Mig_UD) {

				try {

					int length = 0;

					this.errorCode = readString(dis);

					this.errorMessage = readString(dis);

				} catch (IOException e) {
					throw new RuntimeException(e);

				}

			}

		}

		public void writeData(ObjectOutputStream dos) {
			try {

				// String

				writeString(this.errorCode, dos);

				// String

				writeString(this.errorMessage, dos);

			} catch (IOException e) {
				throw new RuntimeException(e);
			}

		}

		public String toString() {

			StringBuilder sb = new StringBuilder();
			sb.append(super.toString());
			sb.append("[");
			sb.append("errorCode=" + errorCode);
			sb.append(",errorMessage=" + errorMessage);
			sb.append("]");

			return sb.toString();
		}

		/**
		 * Compare keys
		 */
		public int compareTo(row49Struct other) {

			int returnValue = -1;

			return returnValue;
		}

		private int checkNullsAndCompare(Object object1, Object object2) {
			int returnValue = 0;
			if (object1 instanceof Comparable && object2 instanceof Comparable) {
				returnValue = ((Comparable) object1).compareTo(object2);
			} else if (object1 != null && object2 != null) {
				returnValue = compareStrings(object1.toString(), object2.toString());
			} else if (object1 == null && object2 != null) {
				returnValue = 1;
			} else if (object1 != null && object2 == null) {
				returnValue = -1;
			} else {
				returnValue = 0;
			}

			return returnValue;
		}

		private int compareStrings(String string1, String string2) {
			return string1.compareTo(string2);
		}

	}

	public void tDBRow_23Process(final java.util.Map<String, Object> globalMap) throws TalendException {
		globalMap.put("tDBRow_23_SUBPROCESS_STATE", 0);

		final boolean execStat = this.execStat;

		String iterateId = "";

		String currentComponent = "";
		java.util.Map<String, Object> resourceMap = new java.util.HashMap<String, Object>();

		try {
			// TDI-39566 avoid throwing an useless Exception
			boolean resumeIt = true;
			if (globalResumeTicket == false && resumeEntryMethodName != null) {
				String currentMethodName = new java.lang.Exception().getStackTrace()[0].getMethodName();
				resumeIt = resumeEntryMethodName.equals(currentMethodName);
			}
			if (resumeIt || globalResumeTicket) { // start the resume
				globalResumeTicket = true;

				row48Struct row48 = new row48Struct();
				row49Struct row49 = new row49Struct();

				/**
				 * [tDBCommit_23 begin ] start
				 */

				ok_Hash.put("tDBCommit_23", false);
				start_Hash.put("tDBCommit_23", System.currentTimeMillis());

				currentComponent = "tDBCommit_23";

				if (execStat) {
					runStat.updateStatOnConnection(resourceMap, iterateId, 0, 0, "row48");
				}

				int tos_count_tDBCommit_23 = 0;

				/**
				 * [tDBCommit_23 begin ] stop
				 */

				/**
				 * [tLogRow_28 begin ] start
				 */

				ok_Hash.put("tLogRow_28", false);
				start_Hash.put("tLogRow_28", System.currentTimeMillis());

				currentComponent = "tLogRow_28";

				if (execStat) {
					runStat.updateStatOnConnection(resourceMap, iterateId, 0, 0, "row49");
				}

				int tos_count_tLogRow_28 = 0;

				///////////////////////

				final String OUTPUT_FIELD_SEPARATOR_tLogRow_28 = "|";
				java.io.PrintStream consoleOut_tLogRow_28 = null;

				StringBuilder strBuffer_tLogRow_28 = null;
				int nb_line_tLogRow_28 = 0;
///////////////////////    			

				/**
				 * [tLogRow_28 begin ] stop
				 */

				/**
				 * [tDBRow_23 begin ] start
				 */

				ok_Hash.put("tDBRow_23", false);
				start_Hash.put("tDBRow_23", System.currentTimeMillis());

				tStatCatcher_1.addMessage("begin", "tDBRow_23");
				tStatCatcher_1Process(globalMap);

				currentComponent = "tDBRow_23";

				int tos_count_tDBRow_23 = 0;

				java.sql.Connection conn_tDBRow_23 = null;
				String query_tDBRow_23 = "";
				boolean whetherReject_tDBRow_23 = false;
				conn_tDBRow_23 = (java.sql.Connection) globalMap.get("conn_tMSSqlConnection_3");

				resourceMap.put("conn_tDBRow_23", conn_tDBRow_23);
				java.sql.Statement stmt_tDBRow_23 = conn_tDBRow_23.createStatement();
				resourceMap.put("stmt_tDBRow_23", stmt_tDBRow_23);

				/**
				 * [tDBRow_23 begin ] stop
				 */

				/**
				 * [tDBRow_23 main ] start
				 */

				currentComponent = "tDBRow_23";

				row48 = null;

				row49 = null;

				query_tDBRow_23 = "\nUPDATE R \nSET R.USERDOC_PROC_NBR = USERDOC_FILE_PROC_NBR,R.USERDOC_PROC_TYP=P.USERDOC_FILE_PROC_TYP,R.USERDOC_STATUS"
						+ "_CODE=P.USERDOC_FILE_STATUS_CODE \nFROM wrk_userdoc AS R\nINNER JOIN wrk_userdoc_files AS P \n	   ON R.USERDOC_SEQ = P.U"
						+ "SERDOC_SEQ and R.USERDOC_SERIES=P.USERDOC_SERIES and R.USERDOC_NBR=P.USERDOC_NBR \nWHERE P.USERDOC_FILE_PROC_TYP is not "
						+ "null;\n \n";
				whetherReject_tDBRow_23 = false;
				globalMap.put("tDBRow_23_QUERY", query_tDBRow_23);
				try {
					stmt_tDBRow_23.execute(query_tDBRow_23);

				} catch (java.lang.Exception e) {
					whetherReject_tDBRow_23 = true;

					row49 = new row49Struct();

					row49.errorCode = ((java.sql.SQLException) e).getSQLState();
					row49.errorMessage = e.getMessage() + " - Line: " + tos_count_tDBRow_23;

				}

				if (!whetherReject_tDBRow_23) {

					row48 = new row48Struct();

				}

				tos_count_tDBRow_23++;

				/**
				 * [tDBRow_23 main ] stop
				 */

				/**
				 * [tDBRow_23 process_data_begin ] start
				 */

				currentComponent = "tDBRow_23";

				/**
				 * [tDBRow_23 process_data_begin ] stop
				 */
// Start of branch "row48"
				if (row48 != null) {

					/**
					 * [tDBCommit_23 main ] start
					 */

					currentComponent = "tDBCommit_23";

					if (execStat) {
						runStat.updateStatOnConnection(iterateId, 1, 1

								, "row48"

						);
					}

					java.sql.Connection conn_tDBCommit_23 = (java.sql.Connection) globalMap
							.get("conn_tMSSqlConnection_3");
					if (conn_tDBCommit_23 != null && !conn_tDBCommit_23.isClosed()) {

						conn_tDBCommit_23.commit();

					}

					tos_count_tDBCommit_23++;

					/**
					 * [tDBCommit_23 main ] stop
					 */

					/**
					 * [tDBCommit_23 process_data_begin ] start
					 */

					currentComponent = "tDBCommit_23";

					/**
					 * [tDBCommit_23 process_data_begin ] stop
					 */

					/**
					 * [tDBCommit_23 process_data_end ] start
					 */

					currentComponent = "tDBCommit_23";

					/**
					 * [tDBCommit_23 process_data_end ] stop
					 */

				} // End of branch "row48"

// Start of branch "row49"
				if (row49 != null) {

					/**
					 * [tLogRow_28 main ] start
					 */

					currentComponent = "tLogRow_28";

					if (execStat) {
						runStat.updateStatOnConnection(iterateId, 1, 1

								, "row49"

						);
					}

///////////////////////		

					strBuffer_tLogRow_28 = new StringBuilder();

					if (row49.errorCode != null) { //

						strBuffer_tLogRow_28.append(String.valueOf(row49.errorCode));

					} //

					strBuffer_tLogRow_28.append("|");

					if (row49.errorMessage != null) { //

						strBuffer_tLogRow_28.append(String.valueOf(row49.errorMessage));

					} //

					if (globalMap.get("tLogRow_CONSOLE") != null) {
						consoleOut_tLogRow_28 = (java.io.PrintStream) globalMap.get("tLogRow_CONSOLE");
					} else {
						consoleOut_tLogRow_28 = new java.io.PrintStream(new java.io.BufferedOutputStream(System.out));
						globalMap.put("tLogRow_CONSOLE", consoleOut_tLogRow_28);
					}
					consoleOut_tLogRow_28.println(strBuffer_tLogRow_28.toString());
					consoleOut_tLogRow_28.flush();
					nb_line_tLogRow_28++;
//////

//////                    

///////////////////////    			

					tos_count_tLogRow_28++;

					/**
					 * [tLogRow_28 main ] stop
					 */

					/**
					 * [tLogRow_28 process_data_begin ] start
					 */

					currentComponent = "tLogRow_28";

					/**
					 * [tLogRow_28 process_data_begin ] stop
					 */

					/**
					 * [tLogRow_28 process_data_end ] start
					 */

					currentComponent = "tLogRow_28";

					/**
					 * [tLogRow_28 process_data_end ] stop
					 */

				} // End of branch "row49"

				/**
				 * [tDBRow_23 process_data_end ] start
				 */

				currentComponent = "tDBRow_23";

				/**
				 * [tDBRow_23 process_data_end ] stop
				 */

				/**
				 * [tDBRow_23 end ] start
				 */

				currentComponent = "tDBRow_23";

				stmt_tDBRow_23.close();
				resourceMap.remove("stmt_tDBRow_23");
				resourceMap.put("statementClosed_tDBRow_23", true);
				resourceMap.put("finish_tDBRow_23", true);

				ok_Hash.put("tDBRow_23", true);
				end_Hash.put("tDBRow_23", System.currentTimeMillis());

				tStatCatcher_1.addMessage("end", "tDBRow_23", end_Hash.get("tDBRow_23") - start_Hash.get("tDBRow_23"));
				tStatCatcher_1Process(globalMap);

				/**
				 * [tDBRow_23 end ] stop
				 */

				/**
				 * [tDBCommit_23 end ] start
				 */

				currentComponent = "tDBCommit_23";

				if (execStat) {
					runStat.updateStat(resourceMap, iterateId, 2, 0, "row48");
				}

				ok_Hash.put("tDBCommit_23", true);
				end_Hash.put("tDBCommit_23", System.currentTimeMillis());

				/**
				 * [tDBCommit_23 end ] stop
				 */

				/**
				 * [tLogRow_28 end ] start
				 */

				currentComponent = "tLogRow_28";

//////
//////
				globalMap.put("tLogRow_28_NB_LINE", nb_line_tLogRow_28);

///////////////////////    			

				if (execStat) {
					runStat.updateStat(resourceMap, iterateId, 2, 0, "row49");
				}

				ok_Hash.put("tLogRow_28", true);
				end_Hash.put("tLogRow_28", System.currentTimeMillis());

				/**
				 * [tLogRow_28 end ] stop
				 */

			} // end the resume

			if (resumeEntryMethodName == null || globalResumeTicket) {
				resumeUtil.addLog("CHECKPOINT", "CONNECTION:SUBJOB_OK:tDBRow_23:OnSubjobOk", "",
						Thread.currentThread().getId() + "", "", "", "", "", "");
			}

			if (execStat) {
				runStat.updateStatOnConnection("OnSubjobOk27", 0, "ok");
			}

			tDBRow_24Process(globalMap);

		} catch (java.lang.Exception e) {

			TalendException te = new TalendException(e, currentComponent, globalMap);

			throw te;
		} catch (java.lang.Error error) {

			runStat.stopThreadStat();

			throw error;
		} finally {

			try {

				/**
				 * [tDBRow_23 finally ] start
				 */

				currentComponent = "tDBRow_23";

				if (resourceMap.get("statementClosed_tDBRow_23") == null) {
					java.sql.Statement stmtToClose_tDBRow_23 = null;
					if ((stmtToClose_tDBRow_23 = (java.sql.Statement) resourceMap.remove("stmt_tDBRow_23")) != null) {
						stmtToClose_tDBRow_23.close();
					}
				}

				/**
				 * [tDBRow_23 finally ] stop
				 */

				/**
				 * [tDBCommit_23 finally ] start
				 */

				currentComponent = "tDBCommit_23";

				/**
				 * [tDBCommit_23 finally ] stop
				 */

				/**
				 * [tLogRow_28 finally ] start
				 */

				currentComponent = "tLogRow_28";

				/**
				 * [tLogRow_28 finally ] stop
				 */

			} catch (java.lang.Exception e) {
				// ignore
			} catch (java.lang.Error error) {
				// ignore
			}
			resourceMap = null;
		}

		globalMap.put("tDBRow_23_SUBPROCESS_STATE", 1);
	}

	public static class row50Struct implements routines.system.IPersistableRow<row50Struct> {
		final static byte[] commonByteArrayLock_WIPO_PROJECTS_G3b_Mig_UD = new byte[0];
		static byte[] commonByteArray_WIPO_PROJECTS_G3b_Mig_UD = new byte[0];

		public void readData(ObjectInputStream dis) {

			synchronized (commonByteArrayLock_WIPO_PROJECTS_G3b_Mig_UD) {

				try {

					int length = 0;

				}

				finally {
				}

			}

		}

		public void writeData(ObjectOutputStream dos) {
			try {

			}

			finally {
			}

		}

		public String toString() {

			StringBuilder sb = new StringBuilder();
			sb.append(super.toString());
			sb.append("[");
			sb.append("]");

			return sb.toString();
		}

		/**
		 * Compare keys
		 */
		public int compareTo(row50Struct other) {

			int returnValue = -1;

			return returnValue;
		}

		private int checkNullsAndCompare(Object object1, Object object2) {
			int returnValue = 0;
			if (object1 instanceof Comparable && object2 instanceof Comparable) {
				returnValue = ((Comparable) object1).compareTo(object2);
			} else if (object1 != null && object2 != null) {
				returnValue = compareStrings(object1.toString(), object2.toString());
			} else if (object1 == null && object2 != null) {
				returnValue = 1;
			} else if (object1 != null && object2 == null) {
				returnValue = -1;
			} else {
				returnValue = 0;
			}

			return returnValue;
		}

		private int compareStrings(String string1, String string2) {
			return string1.compareTo(string2);
		}

	}

	public static class row51Struct implements routines.system.IPersistableRow<row51Struct> {
		final static byte[] commonByteArrayLock_WIPO_PROJECTS_G3b_Mig_UD = new byte[0];
		static byte[] commonByteArray_WIPO_PROJECTS_G3b_Mig_UD = new byte[0];

		public String errorCode;

		public String getErrorCode() {
			return this.errorCode;
		}

		public String errorMessage;

		public String getErrorMessage() {
			return this.errorMessage;
		}

		private String readString(ObjectInputStream dis) throws IOException {
			String strReturn = null;
			int length = 0;
			length = dis.readInt();
			if (length == -1) {
				strReturn = null;
			} else {
				if (length > commonByteArray_WIPO_PROJECTS_G3b_Mig_UD.length) {
					if (length < 1024 && commonByteArray_WIPO_PROJECTS_G3b_Mig_UD.length == 0) {
						commonByteArray_WIPO_PROJECTS_G3b_Mig_UD = new byte[1024];
					} else {
						commonByteArray_WIPO_PROJECTS_G3b_Mig_UD = new byte[2 * length];
					}
				}
				dis.readFully(commonByteArray_WIPO_PROJECTS_G3b_Mig_UD, 0, length);
				strReturn = new String(commonByteArray_WIPO_PROJECTS_G3b_Mig_UD, 0, length, utf8Charset);
			}
			return strReturn;
		}

		private void writeString(String str, ObjectOutputStream dos) throws IOException {
			if (str == null) {
				dos.writeInt(-1);
			} else {
				byte[] byteArray = str.getBytes(utf8Charset);
				dos.writeInt(byteArray.length);
				dos.write(byteArray);
			}
		}

		public void readData(ObjectInputStream dis) {

			synchronized (commonByteArrayLock_WIPO_PROJECTS_G3b_Mig_UD) {

				try {

					int length = 0;

					this.errorCode = readString(dis);

					this.errorMessage = readString(dis);

				} catch (IOException e) {
					throw new RuntimeException(e);

				}

			}

		}

		public void writeData(ObjectOutputStream dos) {
			try {

				// String

				writeString(this.errorCode, dos);

				// String

				writeString(this.errorMessage, dos);

			} catch (IOException e) {
				throw new RuntimeException(e);
			}

		}

		public String toString() {

			StringBuilder sb = new StringBuilder();
			sb.append(super.toString());
			sb.append("[");
			sb.append("errorCode=" + errorCode);
			sb.append(",errorMessage=" + errorMessage);
			sb.append("]");

			return sb.toString();
		}

		/**
		 * Compare keys
		 */
		public int compareTo(row51Struct other) {

			int returnValue = -1;

			return returnValue;
		}

		private int checkNullsAndCompare(Object object1, Object object2) {
			int returnValue = 0;
			if (object1 instanceof Comparable && object2 instanceof Comparable) {
				returnValue = ((Comparable) object1).compareTo(object2);
			} else if (object1 != null && object2 != null) {
				returnValue = compareStrings(object1.toString(), object2.toString());
			} else if (object1 == null && object2 != null) {
				returnValue = 1;
			} else if (object1 != null && object2 == null) {
				returnValue = -1;
			} else {
				returnValue = 0;
			}

			return returnValue;
		}

		private int compareStrings(String string1, String string2) {
			return string1.compareTo(string2);
		}

	}

	public void tDBRow_24Process(final java.util.Map<String, Object> globalMap) throws TalendException {
		globalMap.put("tDBRow_24_SUBPROCESS_STATE", 0);

		final boolean execStat = this.execStat;

		String iterateId = "";

		String currentComponent = "";
		java.util.Map<String, Object> resourceMap = new java.util.HashMap<String, Object>();

		try {
			// TDI-39566 avoid throwing an useless Exception
			boolean resumeIt = true;
			if (globalResumeTicket == false && resumeEntryMethodName != null) {
				String currentMethodName = new java.lang.Exception().getStackTrace()[0].getMethodName();
				resumeIt = resumeEntryMethodName.equals(currentMethodName);
			}
			if (resumeIt || globalResumeTicket) { // start the resume
				globalResumeTicket = true;

				row50Struct row50 = new row50Struct();
				row51Struct row51 = new row51Struct();

				/**
				 * [tDBCommit_24 begin ] start
				 */

				ok_Hash.put("tDBCommit_24", false);
				start_Hash.put("tDBCommit_24", System.currentTimeMillis());

				currentComponent = "tDBCommit_24";

				if (execStat) {
					runStat.updateStatOnConnection(resourceMap, iterateId, 0, 0, "row50");
				}

				int tos_count_tDBCommit_24 = 0;

				/**
				 * [tDBCommit_24 begin ] stop
				 */

				/**
				 * [tLogRow_29 begin ] start
				 */

				ok_Hash.put("tLogRow_29", false);
				start_Hash.put("tLogRow_29", System.currentTimeMillis());

				currentComponent = "tLogRow_29";

				if (execStat) {
					runStat.updateStatOnConnection(resourceMap, iterateId, 0, 0, "row51");
				}

				int tos_count_tLogRow_29 = 0;

				///////////////////////

				final String OUTPUT_FIELD_SEPARATOR_tLogRow_29 = "|";
				java.io.PrintStream consoleOut_tLogRow_29 = null;

				StringBuilder strBuffer_tLogRow_29 = null;
				int nb_line_tLogRow_29 = 0;
///////////////////////    			

				/**
				 * [tLogRow_29 begin ] stop
				 */

				/**
				 * [tDBRow_24 begin ] start
				 */

				ok_Hash.put("tDBRow_24", false);
				start_Hash.put("tDBRow_24", System.currentTimeMillis());

				tStatCatcher_1.addMessage("begin", "tDBRow_24");
				tStatCatcher_1Process(globalMap);

				currentComponent = "tDBRow_24";

				int tos_count_tDBRow_24 = 0;

				java.sql.Connection conn_tDBRow_24 = null;
				String query_tDBRow_24 = "";
				boolean whetherReject_tDBRow_24 = false;
				conn_tDBRow_24 = (java.sql.Connection) globalMap.get("conn_tMSSqlConnection_3");

				resourceMap.put("conn_tDBRow_24", conn_tDBRow_24);
				java.sql.Statement stmt_tDBRow_24 = conn_tDBRow_24.createStatement();
				resourceMap.put("stmt_tDBRow_24", stmt_tDBRow_24);

				/**
				 * [tDBRow_24 begin ] stop
				 */

				/**
				 * [tDBRow_24 main ] start
				 */

				currentComponent = "tDBRow_24";

				row50 = null;

				row51 = null;

				query_tDBRow_24 = "\nwith cte as (\n		select *, ROW_NUMBER () OVER(order by USERDOC_NBR) as ri\n		from WRK_userdoc where USERDOC_PROC_TYP "
						+ "is not null and USERDOC_PROC_NBR is null\n)\nupdate cte set USERDOC_PROC_NBR=(SELECT ISNULL(MAX(userdoc_PROC_NBR), 0) FR"
						+ "OM  wrk_userdoc)+ri;\n";
				whetherReject_tDBRow_24 = false;
				globalMap.put("tDBRow_24_QUERY", query_tDBRow_24);
				try {
					stmt_tDBRow_24.execute(query_tDBRow_24);

				} catch (java.lang.Exception e) {
					whetherReject_tDBRow_24 = true;

					row51 = new row51Struct();

					row51.errorCode = ((java.sql.SQLException) e).getSQLState();
					row51.errorMessage = e.getMessage() + " - Line: " + tos_count_tDBRow_24;

				}

				if (!whetherReject_tDBRow_24) {

					row50 = new row50Struct();

				}

				tos_count_tDBRow_24++;

				/**
				 * [tDBRow_24 main ] stop
				 */

				/**
				 * [tDBRow_24 process_data_begin ] start
				 */

				currentComponent = "tDBRow_24";

				/**
				 * [tDBRow_24 process_data_begin ] stop
				 */
// Start of branch "row50"
				if (row50 != null) {

					/**
					 * [tDBCommit_24 main ] start
					 */

					currentComponent = "tDBCommit_24";

					if (execStat) {
						runStat.updateStatOnConnection(iterateId, 1, 1

								, "row50"

						);
					}

					java.sql.Connection conn_tDBCommit_24 = (java.sql.Connection) globalMap
							.get("conn_tMSSqlConnection_3");
					if (conn_tDBCommit_24 != null && !conn_tDBCommit_24.isClosed()) {

						conn_tDBCommit_24.commit();

					}

					tos_count_tDBCommit_24++;

					/**
					 * [tDBCommit_24 main ] stop
					 */

					/**
					 * [tDBCommit_24 process_data_begin ] start
					 */

					currentComponent = "tDBCommit_24";

					/**
					 * [tDBCommit_24 process_data_begin ] stop
					 */

					/**
					 * [tDBCommit_24 process_data_end ] start
					 */

					currentComponent = "tDBCommit_24";

					/**
					 * [tDBCommit_24 process_data_end ] stop
					 */

				} // End of branch "row50"

// Start of branch "row51"
				if (row51 != null) {

					/**
					 * [tLogRow_29 main ] start
					 */

					currentComponent = "tLogRow_29";

					if (execStat) {
						runStat.updateStatOnConnection(iterateId, 1, 1

								, "row51"

						);
					}

///////////////////////		

					strBuffer_tLogRow_29 = new StringBuilder();

					if (row51.errorCode != null) { //

						strBuffer_tLogRow_29.append(String.valueOf(row51.errorCode));

					} //

					strBuffer_tLogRow_29.append("|");

					if (row51.errorMessage != null) { //

						strBuffer_tLogRow_29.append(String.valueOf(row51.errorMessage));

					} //

					if (globalMap.get("tLogRow_CONSOLE") != null) {
						consoleOut_tLogRow_29 = (java.io.PrintStream) globalMap.get("tLogRow_CONSOLE");
					} else {
						consoleOut_tLogRow_29 = new java.io.PrintStream(new java.io.BufferedOutputStream(System.out));
						globalMap.put("tLogRow_CONSOLE", consoleOut_tLogRow_29);
					}
					consoleOut_tLogRow_29.println(strBuffer_tLogRow_29.toString());
					consoleOut_tLogRow_29.flush();
					nb_line_tLogRow_29++;
//////

//////                    

///////////////////////    			

					tos_count_tLogRow_29++;

					/**
					 * [tLogRow_29 main ] stop
					 */

					/**
					 * [tLogRow_29 process_data_begin ] start
					 */

					currentComponent = "tLogRow_29";

					/**
					 * [tLogRow_29 process_data_begin ] stop
					 */

					/**
					 * [tLogRow_29 process_data_end ] start
					 */

					currentComponent = "tLogRow_29";

					/**
					 * [tLogRow_29 process_data_end ] stop
					 */

				} // End of branch "row51"

				/**
				 * [tDBRow_24 process_data_end ] start
				 */

				currentComponent = "tDBRow_24";

				/**
				 * [tDBRow_24 process_data_end ] stop
				 */

				/**
				 * [tDBRow_24 end ] start
				 */

				currentComponent = "tDBRow_24";

				stmt_tDBRow_24.close();
				resourceMap.remove("stmt_tDBRow_24");
				resourceMap.put("statementClosed_tDBRow_24", true);
				resourceMap.put("finish_tDBRow_24", true);

				ok_Hash.put("tDBRow_24", true);
				end_Hash.put("tDBRow_24", System.currentTimeMillis());

				tStatCatcher_1.addMessage("end", "tDBRow_24", end_Hash.get("tDBRow_24") - start_Hash.get("tDBRow_24"));
				tStatCatcher_1Process(globalMap);

				/**
				 * [tDBRow_24 end ] stop
				 */

				/**
				 * [tDBCommit_24 end ] start
				 */

				currentComponent = "tDBCommit_24";

				if (execStat) {
					runStat.updateStat(resourceMap, iterateId, 2, 0, "row50");
				}

				ok_Hash.put("tDBCommit_24", true);
				end_Hash.put("tDBCommit_24", System.currentTimeMillis());

				/**
				 * [tDBCommit_24 end ] stop
				 */

				/**
				 * [tLogRow_29 end ] start
				 */

				currentComponent = "tLogRow_29";

//////
//////
				globalMap.put("tLogRow_29_NB_LINE", nb_line_tLogRow_29);

///////////////////////    			

				if (execStat) {
					runStat.updateStat(resourceMap, iterateId, 2, 0, "row51");
				}

				ok_Hash.put("tLogRow_29", true);
				end_Hash.put("tLogRow_29", System.currentTimeMillis());

				/**
				 * [tLogRow_29 end ] stop
				 */

			} // end the resume

			if (resumeEntryMethodName == null || globalResumeTicket) {
				resumeUtil.addLog("CHECKPOINT", "CONNECTION:SUBJOB_OK:tDBRow_24:OnSubjobOk", "",
						Thread.currentThread().getId() + "", "", "", "", "", "");
			}

			if (execStat) {
				runStat.updateStatOnConnection("OnSubjobOk8", 0, "ok");
			}

			tDBInput_7Process(globalMap);

		} catch (java.lang.Exception e) {

			TalendException te = new TalendException(e, currentComponent, globalMap);

			throw te;
		} catch (java.lang.Error error) {

			runStat.stopThreadStat();

			throw error;
		} finally {

			try {

				/**
				 * [tDBRow_24 finally ] start
				 */

				currentComponent = "tDBRow_24";

				if (resourceMap.get("statementClosed_tDBRow_24") == null) {
					java.sql.Statement stmtToClose_tDBRow_24 = null;
					if ((stmtToClose_tDBRow_24 = (java.sql.Statement) resourceMap.remove("stmt_tDBRow_24")) != null) {
						stmtToClose_tDBRow_24.close();
					}
				}

				/**
				 * [tDBRow_24 finally ] stop
				 */

				/**
				 * [tDBCommit_24 finally ] start
				 */

				currentComponent = "tDBCommit_24";

				/**
				 * [tDBCommit_24 finally ] stop
				 */

				/**
				 * [tLogRow_29 finally ] start
				 */

				currentComponent = "tLogRow_29";

				/**
				 * [tLogRow_29 finally ] stop
				 */

			} catch (java.lang.Exception e) {
				// ignore
			} catch (java.lang.Error error) {
				// ignore
			}
			resourceMap = null;
		}

		globalMap.put("tDBRow_24_SUBPROCESS_STATE", 1);
	}

	public static class row15Struct implements routines.system.IPersistableRow<row15Struct> {
		final static byte[] commonByteArrayLock_WIPO_PROJECTS_G3b_Mig_UD = new byte[0];
		static byte[] commonByteArray_WIPO_PROJECTS_G3b_Mig_UD = new byte[0];

		public String Message;

		public String getMessage() {
			return this.Message;
		}

		public java.util.Date Time;

		public java.util.Date getTime() {
			return this.Time;
		}

		private String readString(ObjectInputStream dis) throws IOException {
			String strReturn = null;
			int length = 0;
			length = dis.readInt();
			if (length == -1) {
				strReturn = null;
			} else {
				if (length > commonByteArray_WIPO_PROJECTS_G3b_Mig_UD.length) {
					if (length < 1024 && commonByteArray_WIPO_PROJECTS_G3b_Mig_UD.length == 0) {
						commonByteArray_WIPO_PROJECTS_G3b_Mig_UD = new byte[1024];
					} else {
						commonByteArray_WIPO_PROJECTS_G3b_Mig_UD = new byte[2 * length];
					}
				}
				dis.readFully(commonByteArray_WIPO_PROJECTS_G3b_Mig_UD, 0, length);
				strReturn = new String(commonByteArray_WIPO_PROJECTS_G3b_Mig_UD, 0, length, utf8Charset);
			}
			return strReturn;
		}

		private void writeString(String str, ObjectOutputStream dos) throws IOException {
			if (str == null) {
				dos.writeInt(-1);
			} else {
				byte[] byteArray = str.getBytes(utf8Charset);
				dos.writeInt(byteArray.length);
				dos.write(byteArray);
			}
		}

		private java.util.Date readDate(ObjectInputStream dis) throws IOException {
			java.util.Date dateReturn = null;
			int length = 0;
			length = dis.readByte();
			if (length == -1) {
				dateReturn = null;
			} else {
				dateReturn = new Date(dis.readLong());
			}
			return dateReturn;
		}

		private void writeDate(java.util.Date date1, ObjectOutputStream dos) throws IOException {
			if (date1 == null) {
				dos.writeByte(-1);
			} else {
				dos.writeByte(0);
				dos.writeLong(date1.getTime());
			}
		}

		public void readData(ObjectInputStream dis) {

			synchronized (commonByteArrayLock_WIPO_PROJECTS_G3b_Mig_UD) {

				try {

					int length = 0;

					this.Message = readString(dis);

					this.Time = readDate(dis);

				} catch (IOException e) {
					throw new RuntimeException(e);

				}

			}

		}

		public void writeData(ObjectOutputStream dos) {
			try {

				// String

				writeString(this.Message, dos);

				// java.util.Date

				writeDate(this.Time, dos);

			} catch (IOException e) {
				throw new RuntimeException(e);
			}

		}

		public String toString() {

			StringBuilder sb = new StringBuilder();
			sb.append(super.toString());
			sb.append("[");
			sb.append("Message=" + Message);
			sb.append(",Time=" + String.valueOf(Time));
			sb.append("]");

			return sb.toString();
		}

		/**
		 * Compare keys
		 */
		public int compareTo(row15Struct other) {

			int returnValue = -1;

			return returnValue;
		}

		private int checkNullsAndCompare(Object object1, Object object2) {
			int returnValue = 0;
			if (object1 instanceof Comparable && object2 instanceof Comparable) {
				returnValue = ((Comparable) object1).compareTo(object2);
			} else if (object1 != null && object2 != null) {
				returnValue = compareStrings(object1.toString(), object2.toString());
			} else if (object1 == null && object2 != null) {
				returnValue = 1;
			} else if (object1 != null && object2 == null) {
				returnValue = -1;
			} else {
				returnValue = 0;
			}

			return returnValue;
		}

		private int compareStrings(String string1, String string2) {
			return string1.compareTo(string2);
		}

	}

	public void tDBInput_7Process(final java.util.Map<String, Object> globalMap) throws TalendException {
		globalMap.put("tDBInput_7_SUBPROCESS_STATE", 0);

		final boolean execStat = this.execStat;

		String iterateId = "";

		String currentComponent = "";
		java.util.Map<String, Object> resourceMap = new java.util.HashMap<String, Object>();

		try {
			// TDI-39566 avoid throwing an useless Exception
			boolean resumeIt = true;
			if (globalResumeTicket == false && resumeEntryMethodName != null) {
				String currentMethodName = new java.lang.Exception().getStackTrace()[0].getMethodName();
				resumeIt = resumeEntryMethodName.equals(currentMethodName);
			}
			if (resumeIt || globalResumeTicket) { // start the resume
				globalResumeTicket = true;

				row15Struct row15 = new row15Struct();

				/**
				 * [tLogRow_7 begin ] start
				 */

				ok_Hash.put("tLogRow_7", false);
				start_Hash.put("tLogRow_7", System.currentTimeMillis());

				currentComponent = "tLogRow_7";

				if (execStat) {
					runStat.updateStatOnConnection(resourceMap, iterateId, 0, 0, "row15");
				}

				int tos_count_tLogRow_7 = 0;

				///////////////////////

				final String OUTPUT_FIELD_SEPARATOR_tLogRow_7 = "|";
				java.io.PrintStream consoleOut_tLogRow_7 = null;

				StringBuilder strBuffer_tLogRow_7 = null;
				int nb_line_tLogRow_7 = 0;
///////////////////////    			

				/**
				 * [tLogRow_7 begin ] stop
				 */

				/**
				 * [tDBInput_7 begin ] start
				 */

				ok_Hash.put("tDBInput_7", false);
				start_Hash.put("tDBInput_7", System.currentTimeMillis());

				currentComponent = "tDBInput_7";

				int tos_count_tDBInput_7 = 0;

				org.talend.designer.components.util.mssql.MSSqlGenerateTimestampUtil mssqlGTU_tDBInput_7 = org.talend.designer.components.util.mssql.MSSqlUtilFactory
						.getMSSqlGenerateTimestampUtil();

				java.util.List<String> talendToDBList_tDBInput_7 = new java.util.ArrayList();
				String[] talendToDBArray_tDBInput_7 = new String[] { "FLOAT", "NUMERIC", "NUMERIC IDENTITY", "DECIMAL",
						"DECIMAL IDENTITY", "REAL" };
				java.util.Collections.addAll(talendToDBList_tDBInput_7, talendToDBArray_tDBInput_7);
				int nb_line_tDBInput_7 = 0;
				java.sql.Connection conn_tDBInput_7 = null;
				conn_tDBInput_7 = (java.sql.Connection) globalMap.get("conn_tMSSqlConnection_3");

				String dbschema_tDBInput_7 = (String) globalMap.get("dbschema_tMSSqlConnection_3");

				java.sql.Statement stmt_tDBInput_7 = conn_tDBInput_7.createStatement();

				String dbquery_tDBInput_7 = "SELECT 'Step 7: second updates' ,GETDATE();";

				globalMap.put("tDBInput_7_QUERY", dbquery_tDBInput_7);
				java.sql.ResultSet rs_tDBInput_7 = null;

				try {
					rs_tDBInput_7 = stmt_tDBInput_7.executeQuery(dbquery_tDBInput_7);
					java.sql.ResultSetMetaData rsmd_tDBInput_7 = rs_tDBInput_7.getMetaData();
					int colQtyInRs_tDBInput_7 = rsmd_tDBInput_7.getColumnCount();

					String tmpContent_tDBInput_7 = null;

					while (rs_tDBInput_7.next()) {
						nb_line_tDBInput_7++;

						if (colQtyInRs_tDBInput_7 < 1) {
							row15.Message = null;
						} else {

							tmpContent_tDBInput_7 = rs_tDBInput_7.getString(1);
							if (tmpContent_tDBInput_7 != null) {
								if (talendToDBList_tDBInput_7.contains(
										rsmd_tDBInput_7.getColumnTypeName(1).toUpperCase(java.util.Locale.ENGLISH))) {
									row15.Message = FormatterUtils.formatUnwithE(tmpContent_tDBInput_7);
								} else {
									row15.Message = tmpContent_tDBInput_7;
								}
							} else {
								row15.Message = null;
							}
						}
						if (colQtyInRs_tDBInput_7 < 2) {
							row15.Time = null;
						} else {

							row15.Time = mssqlGTU_tDBInput_7.getDate(rsmd_tDBInput_7, rs_tDBInput_7, 2);

						}

						/**
						 * [tDBInput_7 begin ] stop
						 */

						/**
						 * [tDBInput_7 main ] start
						 */

						currentComponent = "tDBInput_7";

						tos_count_tDBInput_7++;

						/**
						 * [tDBInput_7 main ] stop
						 */

						/**
						 * [tDBInput_7 process_data_begin ] start
						 */

						currentComponent = "tDBInput_7";

						/**
						 * [tDBInput_7 process_data_begin ] stop
						 */

						/**
						 * [tLogRow_7 main ] start
						 */

						currentComponent = "tLogRow_7";

						if (execStat) {
							runStat.updateStatOnConnection(iterateId, 1, 1

									, "row15"

							);
						}

///////////////////////		

						strBuffer_tLogRow_7 = new StringBuilder();

						if (row15.Message != null) { //

							strBuffer_tLogRow_7.append(String.valueOf(row15.Message));

						} //

						strBuffer_tLogRow_7.append("|");

						if (row15.Time != null) { //

							strBuffer_tLogRow_7.append(FormatterUtils.format_Date(row15.Time, "yyyy-MM-dd HH:mm:ss"));

						} //

						if (globalMap.get("tLogRow_CONSOLE") != null) {
							consoleOut_tLogRow_7 = (java.io.PrintStream) globalMap.get("tLogRow_CONSOLE");
						} else {
							consoleOut_tLogRow_7 = new java.io.PrintStream(
									new java.io.BufferedOutputStream(System.out));
							globalMap.put("tLogRow_CONSOLE", consoleOut_tLogRow_7);
						}
						consoleOut_tLogRow_7.println(strBuffer_tLogRow_7.toString());
						consoleOut_tLogRow_7.flush();
						nb_line_tLogRow_7++;
//////

//////                    

///////////////////////    			

						tos_count_tLogRow_7++;

						/**
						 * [tLogRow_7 main ] stop
						 */

						/**
						 * [tLogRow_7 process_data_begin ] start
						 */

						currentComponent = "tLogRow_7";

						/**
						 * [tLogRow_7 process_data_begin ] stop
						 */

						/**
						 * [tLogRow_7 process_data_end ] start
						 */

						currentComponent = "tLogRow_7";

						/**
						 * [tLogRow_7 process_data_end ] stop
						 */

						/**
						 * [tDBInput_7 process_data_end ] start
						 */

						currentComponent = "tDBInput_7";

						/**
						 * [tDBInput_7 process_data_end ] stop
						 */

						/**
						 * [tDBInput_7 end ] start
						 */

						currentComponent = "tDBInput_7";

					}
				} finally {
					if (rs_tDBInput_7 != null) {
						rs_tDBInput_7.close();
					}
					if (stmt_tDBInput_7 != null) {
						stmt_tDBInput_7.close();
					}
				}
				globalMap.put("tDBInput_7_NB_LINE", nb_line_tDBInput_7);

				ok_Hash.put("tDBInput_7", true);
				end_Hash.put("tDBInput_7", System.currentTimeMillis());

				/**
				 * [tDBInput_7 end ] stop
				 */

				/**
				 * [tLogRow_7 end ] start
				 */

				currentComponent = "tLogRow_7";

//////
//////
				globalMap.put("tLogRow_7_NB_LINE", nb_line_tLogRow_7);

///////////////////////    			

				if (execStat) {
					runStat.updateStat(resourceMap, iterateId, 2, 0, "row15");
				}

				ok_Hash.put("tLogRow_7", true);
				end_Hash.put("tLogRow_7", System.currentTimeMillis());

				/**
				 * [tLogRow_7 end ] stop
				 */

			} // end the resume

			if (resumeEntryMethodName == null || globalResumeTicket) {
				resumeUtil.addLog("CHECKPOINT", "CONNECTION:SUBJOB_OK:tDBInput_7:OnSubjobOk", "",
						Thread.currentThread().getId() + "", "", "", "", "", "");
			}

			if (execStat) {
				runStat.updateStatOnConnection("OnSubjobOk30", 0, "ok");
			}

			tDBRow_6Process(globalMap);

		} catch (java.lang.Exception e) {

			TalendException te = new TalendException(e, currentComponent, globalMap);

			throw te;
		} catch (java.lang.Error error) {

			runStat.stopThreadStat();

			throw error;
		} finally {

			try {

				/**
				 * [tDBInput_7 finally ] start
				 */

				currentComponent = "tDBInput_7";

				/**
				 * [tDBInput_7 finally ] stop
				 */

				/**
				 * [tLogRow_7 finally ] start
				 */

				currentComponent = "tLogRow_7";

				/**
				 * [tLogRow_7 finally ] stop
				 */

			} catch (java.lang.Exception e) {
				// ignore
			} catch (java.lang.Error error) {
				// ignore
			}
			resourceMap = null;
		}

		globalMap.put("tDBInput_7_SUBPROCESS_STATE", 1);
	}

	public static class row14Struct implements routines.system.IPersistableRow<row14Struct> {
		final static byte[] commonByteArrayLock_WIPO_PROJECTS_G3b_Mig_UD = new byte[0];
		static byte[] commonByteArray_WIPO_PROJECTS_G3b_Mig_UD = new byte[0];

		public void readData(ObjectInputStream dis) {

			synchronized (commonByteArrayLock_WIPO_PROJECTS_G3b_Mig_UD) {

				try {

					int length = 0;

				}

				finally {
				}

			}

		}

		public void writeData(ObjectOutputStream dos) {
			try {

			}

			finally {
			}

		}

		public String toString() {

			StringBuilder sb = new StringBuilder();
			sb.append(super.toString());
			sb.append("[");
			sb.append("]");

			return sb.toString();
		}

		/**
		 * Compare keys
		 */
		public int compareTo(row14Struct other) {

			int returnValue = -1;

			return returnValue;
		}

		private int checkNullsAndCompare(Object object1, Object object2) {
			int returnValue = 0;
			if (object1 instanceof Comparable && object2 instanceof Comparable) {
				returnValue = ((Comparable) object1).compareTo(object2);
			} else if (object1 != null && object2 != null) {
				returnValue = compareStrings(object1.toString(), object2.toString());
			} else if (object1 == null && object2 != null) {
				returnValue = 1;
			} else if (object1 != null && object2 == null) {
				returnValue = -1;
			} else {
				returnValue = 0;
			}

			return returnValue;
		}

		private int compareStrings(String string1, String string2) {
			return string1.compareTo(string2);
		}

	}

	public static class row52Struct implements routines.system.IPersistableRow<row52Struct> {
		final static byte[] commonByteArrayLock_WIPO_PROJECTS_G3b_Mig_UD = new byte[0];
		static byte[] commonByteArray_WIPO_PROJECTS_G3b_Mig_UD = new byte[0];

		public String errorCode;

		public String getErrorCode() {
			return this.errorCode;
		}

		public String errorMessage;

		public String getErrorMessage() {
			return this.errorMessage;
		}

		private String readString(ObjectInputStream dis) throws IOException {
			String strReturn = null;
			int length = 0;
			length = dis.readInt();
			if (length == -1) {
				strReturn = null;
			} else {
				if (length > commonByteArray_WIPO_PROJECTS_G3b_Mig_UD.length) {
					if (length < 1024 && commonByteArray_WIPO_PROJECTS_G3b_Mig_UD.length == 0) {
						commonByteArray_WIPO_PROJECTS_G3b_Mig_UD = new byte[1024];
					} else {
						commonByteArray_WIPO_PROJECTS_G3b_Mig_UD = new byte[2 * length];
					}
				}
				dis.readFully(commonByteArray_WIPO_PROJECTS_G3b_Mig_UD, 0, length);
				strReturn = new String(commonByteArray_WIPO_PROJECTS_G3b_Mig_UD, 0, length, utf8Charset);
			}
			return strReturn;
		}

		private void writeString(String str, ObjectOutputStream dos) throws IOException {
			if (str == null) {
				dos.writeInt(-1);
			} else {
				byte[] byteArray = str.getBytes(utf8Charset);
				dos.writeInt(byteArray.length);
				dos.write(byteArray);
			}
		}

		public void readData(ObjectInputStream dis) {

			synchronized (commonByteArrayLock_WIPO_PROJECTS_G3b_Mig_UD) {

				try {

					int length = 0;

					this.errorCode = readString(dis);

					this.errorMessage = readString(dis);

				} catch (IOException e) {
					throw new RuntimeException(e);

				}

			}

		}

		public void writeData(ObjectOutputStream dos) {
			try {

				// String

				writeString(this.errorCode, dos);

				// String

				writeString(this.errorMessage, dos);

			} catch (IOException e) {
				throw new RuntimeException(e);
			}

		}

		public String toString() {

			StringBuilder sb = new StringBuilder();
			sb.append(super.toString());
			sb.append("[");
			sb.append("errorCode=" + errorCode);
			sb.append(",errorMessage=" + errorMessage);
			sb.append("]");

			return sb.toString();
		}

		/**
		 * Compare keys
		 */
		public int compareTo(row52Struct other) {

			int returnValue = -1;

			return returnValue;
		}

		private int checkNullsAndCompare(Object object1, Object object2) {
			int returnValue = 0;
			if (object1 instanceof Comparable && object2 instanceof Comparable) {
				returnValue = ((Comparable) object1).compareTo(object2);
			} else if (object1 != null && object2 != null) {
				returnValue = compareStrings(object1.toString(), object2.toString());
			} else if (object1 == null && object2 != null) {
				returnValue = 1;
			} else if (object1 != null && object2 == null) {
				returnValue = -1;
			} else {
				returnValue = 0;
			}

			return returnValue;
		}

		private int compareStrings(String string1, String string2) {
			return string1.compareTo(string2);
		}

	}

	public void tDBRow_6Process(final java.util.Map<String, Object> globalMap) throws TalendException {
		globalMap.put("tDBRow_6_SUBPROCESS_STATE", 0);

		final boolean execStat = this.execStat;

		String iterateId = "";

		String currentComponent = "";
		java.util.Map<String, Object> resourceMap = new java.util.HashMap<String, Object>();

		try {
			// TDI-39566 avoid throwing an useless Exception
			boolean resumeIt = true;
			if (globalResumeTicket == false && resumeEntryMethodName != null) {
				String currentMethodName = new java.lang.Exception().getStackTrace()[0].getMethodName();
				resumeIt = resumeEntryMethodName.equals(currentMethodName);
			}
			if (resumeIt || globalResumeTicket) { // start the resume
				globalResumeTicket = true;

				row14Struct row14 = new row14Struct();
				row52Struct row52 = new row52Struct();

				/**
				 * [tDBCommit_6 begin ] start
				 */

				ok_Hash.put("tDBCommit_6", false);
				start_Hash.put("tDBCommit_6", System.currentTimeMillis());

				currentComponent = "tDBCommit_6";

				if (execStat) {
					runStat.updateStatOnConnection(resourceMap, iterateId, 0, 0, "row14");
				}

				int tos_count_tDBCommit_6 = 0;

				/**
				 * [tDBCommit_6 begin ] stop
				 */

				/**
				 * [tLogRow_30 begin ] start
				 */

				ok_Hash.put("tLogRow_30", false);
				start_Hash.put("tLogRow_30", System.currentTimeMillis());

				currentComponent = "tLogRow_30";

				if (execStat) {
					runStat.updateStatOnConnection(resourceMap, iterateId, 0, 0, "row52");
				}

				int tos_count_tLogRow_30 = 0;

				///////////////////////

				final String OUTPUT_FIELD_SEPARATOR_tLogRow_30 = "|";
				java.io.PrintStream consoleOut_tLogRow_30 = null;

				StringBuilder strBuffer_tLogRow_30 = null;
				int nb_line_tLogRow_30 = 0;
///////////////////////    			

				/**
				 * [tLogRow_30 begin ] stop
				 */

				/**
				 * [tDBRow_6 begin ] start
				 */

				ok_Hash.put("tDBRow_6", false);
				start_Hash.put("tDBRow_6", System.currentTimeMillis());

				tStatCatcher_1.addMessage("begin", "tDBRow_6");
				tStatCatcher_1Process(globalMap);

				currentComponent = "tDBRow_6";

				int tos_count_tDBRow_6 = 0;

				java.sql.Connection conn_tDBRow_6 = null;
				String query_tDBRow_6 = "";
				boolean whetherReject_tDBRow_6 = false;
				conn_tDBRow_6 = (java.sql.Connection) globalMap.get("conn_tMSSqlConnection_3");

				resourceMap.put("conn_tDBRow_6", conn_tDBRow_6);
				java.sql.Statement stmt_tDBRow_6 = conn_tDBRow_6.createStatement();
				resourceMap.put("stmt_tDBRow_6", stmt_tDBRow_6);

				/**
				 * [tDBRow_6 begin ] stop
				 */

				/**
				 * [tDBRow_6 main ] start
				 */

				currentComponent = "tDBRow_6";

				row14 = null;

				row52 = null;

				query_tDBRow_6 = "\nINSERT INTO  CF_DOC_SERIES   \n				( row_version , \n				doc_ser , \n				ind_active )  \n		SELECT DISTINCT\n				 1,\n"
						+ "				 userdoc_series,\n				 'N'\n		FROM  wrk_userdoc \n		WHERE	 userdoc_series  not in\n			(\n		 	SELECT doc_ser\n			FROM"
						+ "  CF_DOC_SERIES \n			);\n			 \n			\nINSERT INTO  CF_DOC_SERIES   \n				( row_version , \n				doc_ser , \n				ind_active "
						+ ")  \n		SELECT DISTINCT\n				 1,\n				 CAST(DATEPART(YYYY, reception_date) as NUMERIC),\n				 'N'\n		FROM  wrk_userdoc \n"
						+ "		WHERE	 CAST(DATEPART(YYYY, reception_date) as NUMERIC)  not in\n			(\n		 	SELECT doc_ser\n			FROM  CF_DOC_SERIES \n			"
						+ ");\n			 \n			\nINSERT INTO  IP_DAY   \n				( row_version , \n				daily_date , \n				doc_ser ,\n				next_working_date)  "
						+ "\n		SELECT DISTINCT\n				 1,\n				 cast(reception_date as DATE),\n				 CAST(DATEPART(YYYY, reception_date) as NUMERIC),\n"
						+ "				 case\n				    when datepart(dw, cast(reception_date as DATE)) = 7 /* Saturday */\n				            then dateadd(dd, "
						+ "2, cast(reception_date as DATE))\n				    when datepart(dw, cast(reception_date as DATE)) = 1 /* Sunday */\n				        "
						+ "    then dateadd(dd, 1, cast(reception_date as DATE))\n				    else null\n				 end\n		FROM  wrk_userdoc \n		WHERE	 cast("
						+ "reception_date as DATE)  not in\n			(\n		 	SELECT daily_date\n			FROM  IP_DAY \n			);\nINSERT INTO  IP_DAILY_LOG   \n			"
						+ "	( row_version , \n				doc_ori , \n				doc_log , \n				daily_log_date )  \n		SELECT DISTINCT\n				 1,\n				 DOC_ORI,\n		"
						+ "		 'E',\n				 cast(RECEPTION_DATE as DATE)\n		FROM  wrk_userdoc M \n		WHERE	 NOT   exists\n			(\n		 	SELECT *\n			FROM  "
						+ "IP_DAILY_LOG L \n			WHERE	 L.DOC_ORI  = M.DOC_ORI COLLATE DATABASE_DEFAULT\n			 AND	DOC_LOG  = 'E'\n			 AND	DAILY_LOG_DA"
						+ "TE  = cast(RECEPTION_DATE as DATE)\n			);\n;\n \n";
				whetherReject_tDBRow_6 = false;
				globalMap.put("tDBRow_6_QUERY", query_tDBRow_6);
				try {
					stmt_tDBRow_6.execute(query_tDBRow_6);

				} catch (java.lang.Exception e) {
					whetherReject_tDBRow_6 = true;

					row52 = new row52Struct();

					row52.errorCode = ((java.sql.SQLException) e).getSQLState();
					row52.errorMessage = e.getMessage() + " - Line: " + tos_count_tDBRow_6;

				}

				if (!whetherReject_tDBRow_6) {

					row14 = new row14Struct();

				}

				tos_count_tDBRow_6++;

				/**
				 * [tDBRow_6 main ] stop
				 */

				/**
				 * [tDBRow_6 process_data_begin ] start
				 */

				currentComponent = "tDBRow_6";

				/**
				 * [tDBRow_6 process_data_begin ] stop
				 */
// Start of branch "row14"
				if (row14 != null) {

					/**
					 * [tDBCommit_6 main ] start
					 */

					currentComponent = "tDBCommit_6";

					if (execStat) {
						runStat.updateStatOnConnection(iterateId, 1, 1

								, "row14"

						);
					}

					java.sql.Connection conn_tDBCommit_6 = (java.sql.Connection) globalMap
							.get("conn_tMSSqlConnection_3");
					if (conn_tDBCommit_6 != null && !conn_tDBCommit_6.isClosed()) {

						conn_tDBCommit_6.commit();

					}

					tos_count_tDBCommit_6++;

					/**
					 * [tDBCommit_6 main ] stop
					 */

					/**
					 * [tDBCommit_6 process_data_begin ] start
					 */

					currentComponent = "tDBCommit_6";

					/**
					 * [tDBCommit_6 process_data_begin ] stop
					 */

					/**
					 * [tDBCommit_6 process_data_end ] start
					 */

					currentComponent = "tDBCommit_6";

					/**
					 * [tDBCommit_6 process_data_end ] stop
					 */

				} // End of branch "row14"

// Start of branch "row52"
				if (row52 != null) {

					/**
					 * [tLogRow_30 main ] start
					 */

					currentComponent = "tLogRow_30";

					if (execStat) {
						runStat.updateStatOnConnection(iterateId, 1, 1

								, "row52"

						);
					}

///////////////////////		

					strBuffer_tLogRow_30 = new StringBuilder();

					if (row52.errorCode != null) { //

						strBuffer_tLogRow_30.append(String.valueOf(row52.errorCode));

					} //

					strBuffer_tLogRow_30.append("|");

					if (row52.errorMessage != null) { //

						strBuffer_tLogRow_30.append(String.valueOf(row52.errorMessage));

					} //

					if (globalMap.get("tLogRow_CONSOLE") != null) {
						consoleOut_tLogRow_30 = (java.io.PrintStream) globalMap.get("tLogRow_CONSOLE");
					} else {
						consoleOut_tLogRow_30 = new java.io.PrintStream(new java.io.BufferedOutputStream(System.out));
						globalMap.put("tLogRow_CONSOLE", consoleOut_tLogRow_30);
					}
					consoleOut_tLogRow_30.println(strBuffer_tLogRow_30.toString());
					consoleOut_tLogRow_30.flush();
					nb_line_tLogRow_30++;
//////

//////                    

///////////////////////    			

					tos_count_tLogRow_30++;

					/**
					 * [tLogRow_30 main ] stop
					 */

					/**
					 * [tLogRow_30 process_data_begin ] start
					 */

					currentComponent = "tLogRow_30";

					/**
					 * [tLogRow_30 process_data_begin ] stop
					 */

					/**
					 * [tLogRow_30 process_data_end ] start
					 */

					currentComponent = "tLogRow_30";

					/**
					 * [tLogRow_30 process_data_end ] stop
					 */

				} // End of branch "row52"

				/**
				 * [tDBRow_6 process_data_end ] start
				 */

				currentComponent = "tDBRow_6";

				/**
				 * [tDBRow_6 process_data_end ] stop
				 */

				/**
				 * [tDBRow_6 end ] start
				 */

				currentComponent = "tDBRow_6";

				stmt_tDBRow_6.close();
				resourceMap.remove("stmt_tDBRow_6");
				resourceMap.put("statementClosed_tDBRow_6", true);
				resourceMap.put("finish_tDBRow_6", true);

				ok_Hash.put("tDBRow_6", true);
				end_Hash.put("tDBRow_6", System.currentTimeMillis());

				tStatCatcher_1.addMessage("end", "tDBRow_6", end_Hash.get("tDBRow_6") - start_Hash.get("tDBRow_6"));
				tStatCatcher_1Process(globalMap);

				/**
				 * [tDBRow_6 end ] stop
				 */

				/**
				 * [tDBCommit_6 end ] start
				 */

				currentComponent = "tDBCommit_6";

				if (execStat) {
					runStat.updateStat(resourceMap, iterateId, 2, 0, "row14");
				}

				ok_Hash.put("tDBCommit_6", true);
				end_Hash.put("tDBCommit_6", System.currentTimeMillis());

				/**
				 * [tDBCommit_6 end ] stop
				 */

				/**
				 * [tLogRow_30 end ] start
				 */

				currentComponent = "tLogRow_30";

//////
//////
				globalMap.put("tLogRow_30_NB_LINE", nb_line_tLogRow_30);

///////////////////////    			

				if (execStat) {
					runStat.updateStat(resourceMap, iterateId, 2, 0, "row52");
				}

				ok_Hash.put("tLogRow_30", true);
				end_Hash.put("tLogRow_30", System.currentTimeMillis());

				/**
				 * [tLogRow_30 end ] stop
				 */

			} // end the resume

			if (resumeEntryMethodName == null || globalResumeTicket) {
				resumeUtil.addLog("CHECKPOINT", "CONNECTION:SUBJOB_OK:tDBRow_6:OnSubjobOk", "",
						Thread.currentThread().getId() + "", "", "", "", "", "");
			}

			if (execStat) {
				runStat.updateStatOnConnection("OnSubjobOk29", 0, "ok");
			}

			tDBInput_8Process(globalMap);

		} catch (java.lang.Exception e) {

			TalendException te = new TalendException(e, currentComponent, globalMap);

			throw te;
		} catch (java.lang.Error error) {

			runStat.stopThreadStat();

			throw error;
		} finally {

			try {

				/**
				 * [tDBRow_6 finally ] start
				 */

				currentComponent = "tDBRow_6";

				if (resourceMap.get("statementClosed_tDBRow_6") == null) {
					java.sql.Statement stmtToClose_tDBRow_6 = null;
					if ((stmtToClose_tDBRow_6 = (java.sql.Statement) resourceMap.remove("stmt_tDBRow_6")) != null) {
						stmtToClose_tDBRow_6.close();
					}
				}

				/**
				 * [tDBRow_6 finally ] stop
				 */

				/**
				 * [tDBCommit_6 finally ] start
				 */

				currentComponent = "tDBCommit_6";

				/**
				 * [tDBCommit_6 finally ] stop
				 */

				/**
				 * [tLogRow_30 finally ] start
				 */

				currentComponent = "tLogRow_30";

				/**
				 * [tLogRow_30 finally ] stop
				 */

			} catch (java.lang.Exception e) {
				// ignore
			} catch (java.lang.Error error) {
				// ignore
			}
			resourceMap = null;
		}

		globalMap.put("tDBRow_6_SUBPROCESS_STATE", 1);
	}

	public static class row17Struct implements routines.system.IPersistableRow<row17Struct> {
		final static byte[] commonByteArrayLock_WIPO_PROJECTS_G3b_Mig_UD = new byte[0];
		static byte[] commonByteArray_WIPO_PROJECTS_G3b_Mig_UD = new byte[0];

		public String Message;

		public String getMessage() {
			return this.Message;
		}

		public java.util.Date Time;

		public java.util.Date getTime() {
			return this.Time;
		}

		private String readString(ObjectInputStream dis) throws IOException {
			String strReturn = null;
			int length = 0;
			length = dis.readInt();
			if (length == -1) {
				strReturn = null;
			} else {
				if (length > commonByteArray_WIPO_PROJECTS_G3b_Mig_UD.length) {
					if (length < 1024 && commonByteArray_WIPO_PROJECTS_G3b_Mig_UD.length == 0) {
						commonByteArray_WIPO_PROJECTS_G3b_Mig_UD = new byte[1024];
					} else {
						commonByteArray_WIPO_PROJECTS_G3b_Mig_UD = new byte[2 * length];
					}
				}
				dis.readFully(commonByteArray_WIPO_PROJECTS_G3b_Mig_UD, 0, length);
				strReturn = new String(commonByteArray_WIPO_PROJECTS_G3b_Mig_UD, 0, length, utf8Charset);
			}
			return strReturn;
		}

		private void writeString(String str, ObjectOutputStream dos) throws IOException {
			if (str == null) {
				dos.writeInt(-1);
			} else {
				byte[] byteArray = str.getBytes(utf8Charset);
				dos.writeInt(byteArray.length);
				dos.write(byteArray);
			}
		}

		private java.util.Date readDate(ObjectInputStream dis) throws IOException {
			java.util.Date dateReturn = null;
			int length = 0;
			length = dis.readByte();
			if (length == -1) {
				dateReturn = null;
			} else {
				dateReturn = new Date(dis.readLong());
			}
			return dateReturn;
		}

		private void writeDate(java.util.Date date1, ObjectOutputStream dos) throws IOException {
			if (date1 == null) {
				dos.writeByte(-1);
			} else {
				dos.writeByte(0);
				dos.writeLong(date1.getTime());
			}
		}

		public void readData(ObjectInputStream dis) {

			synchronized (commonByteArrayLock_WIPO_PROJECTS_G3b_Mig_UD) {

				try {

					int length = 0;

					this.Message = readString(dis);

					this.Time = readDate(dis);

				} catch (IOException e) {
					throw new RuntimeException(e);

				}

			}

		}

		public void writeData(ObjectOutputStream dos) {
			try {

				// String

				writeString(this.Message, dos);

				// java.util.Date

				writeDate(this.Time, dos);

			} catch (IOException e) {
				throw new RuntimeException(e);
			}

		}

		public String toString() {

			StringBuilder sb = new StringBuilder();
			sb.append(super.toString());
			sb.append("[");
			sb.append("Message=" + Message);
			sb.append(",Time=" + String.valueOf(Time));
			sb.append("]");

			return sb.toString();
		}

		/**
		 * Compare keys
		 */
		public int compareTo(row17Struct other) {

			int returnValue = -1;

			return returnValue;
		}

		private int checkNullsAndCompare(Object object1, Object object2) {
			int returnValue = 0;
			if (object1 instanceof Comparable && object2 instanceof Comparable) {
				returnValue = ((Comparable) object1).compareTo(object2);
			} else if (object1 != null && object2 != null) {
				returnValue = compareStrings(object1.toString(), object2.toString());
			} else if (object1 == null && object2 != null) {
				returnValue = 1;
			} else if (object1 != null && object2 == null) {
				returnValue = -1;
			} else {
				returnValue = 0;
			}

			return returnValue;
		}

		private int compareStrings(String string1, String string2) {
			return string1.compareTo(string2);
		}

	}

	public void tDBInput_8Process(final java.util.Map<String, Object> globalMap) throws TalendException {
		globalMap.put("tDBInput_8_SUBPROCESS_STATE", 0);

		final boolean execStat = this.execStat;

		String iterateId = "";

		String currentComponent = "";
		java.util.Map<String, Object> resourceMap = new java.util.HashMap<String, Object>();

		try {
			// TDI-39566 avoid throwing an useless Exception
			boolean resumeIt = true;
			if (globalResumeTicket == false && resumeEntryMethodName != null) {
				String currentMethodName = new java.lang.Exception().getStackTrace()[0].getMethodName();
				resumeIt = resumeEntryMethodName.equals(currentMethodName);
			}
			if (resumeIt || globalResumeTicket) { // start the resume
				globalResumeTicket = true;

				row17Struct row17 = new row17Struct();

				/**
				 * [tLogRow_8 begin ] start
				 */

				ok_Hash.put("tLogRow_8", false);
				start_Hash.put("tLogRow_8", System.currentTimeMillis());

				currentComponent = "tLogRow_8";

				if (execStat) {
					runStat.updateStatOnConnection(resourceMap, iterateId, 0, 0, "row17");
				}

				int tos_count_tLogRow_8 = 0;

				///////////////////////

				final String OUTPUT_FIELD_SEPARATOR_tLogRow_8 = "|";
				java.io.PrintStream consoleOut_tLogRow_8 = null;

				StringBuilder strBuffer_tLogRow_8 = null;
				int nb_line_tLogRow_8 = 0;
///////////////////////    			

				/**
				 * [tLogRow_8 begin ] stop
				 */

				/**
				 * [tDBInput_8 begin ] start
				 */

				ok_Hash.put("tDBInput_8", false);
				start_Hash.put("tDBInput_8", System.currentTimeMillis());

				currentComponent = "tDBInput_8";

				int tos_count_tDBInput_8 = 0;

				org.talend.designer.components.util.mssql.MSSqlGenerateTimestampUtil mssqlGTU_tDBInput_8 = org.talend.designer.components.util.mssql.MSSqlUtilFactory
						.getMSSqlGenerateTimestampUtil();

				java.util.List<String> talendToDBList_tDBInput_8 = new java.util.ArrayList();
				String[] talendToDBArray_tDBInput_8 = new String[] { "FLOAT", "NUMERIC", "NUMERIC IDENTITY", "DECIMAL",
						"DECIMAL IDENTITY", "REAL" };
				java.util.Collections.addAll(talendToDBList_tDBInput_8, talendToDBArray_tDBInput_8);
				int nb_line_tDBInput_8 = 0;
				java.sql.Connection conn_tDBInput_8 = null;
				conn_tDBInput_8 = (java.sql.Connection) globalMap.get("conn_tMSSqlConnection_3");

				String dbschema_tDBInput_8 = (String) globalMap.get("dbschema_tMSSqlConnection_3");

				java.sql.Statement stmt_tDBInput_8 = conn_tDBInput_8.createStatement();

				String dbquery_tDBInput_8 = "SELECT 'Step 8: inserts to day and series' ,GETDATE();";

				globalMap.put("tDBInput_8_QUERY", dbquery_tDBInput_8);
				java.sql.ResultSet rs_tDBInput_8 = null;

				try {
					rs_tDBInput_8 = stmt_tDBInput_8.executeQuery(dbquery_tDBInput_8);
					java.sql.ResultSetMetaData rsmd_tDBInput_8 = rs_tDBInput_8.getMetaData();
					int colQtyInRs_tDBInput_8 = rsmd_tDBInput_8.getColumnCount();

					String tmpContent_tDBInput_8 = null;

					while (rs_tDBInput_8.next()) {
						nb_line_tDBInput_8++;

						if (colQtyInRs_tDBInput_8 < 1) {
							row17.Message = null;
						} else {

							tmpContent_tDBInput_8 = rs_tDBInput_8.getString(1);
							if (tmpContent_tDBInput_8 != null) {
								if (talendToDBList_tDBInput_8.contains(
										rsmd_tDBInput_8.getColumnTypeName(1).toUpperCase(java.util.Locale.ENGLISH))) {
									row17.Message = FormatterUtils.formatUnwithE(tmpContent_tDBInput_8);
								} else {
									row17.Message = tmpContent_tDBInput_8;
								}
							} else {
								row17.Message = null;
							}
						}
						if (colQtyInRs_tDBInput_8 < 2) {
							row17.Time = null;
						} else {

							row17.Time = mssqlGTU_tDBInput_8.getDate(rsmd_tDBInput_8, rs_tDBInput_8, 2);

						}

						/**
						 * [tDBInput_8 begin ] stop
						 */

						/**
						 * [tDBInput_8 main ] start
						 */

						currentComponent = "tDBInput_8";

						tos_count_tDBInput_8++;

						/**
						 * [tDBInput_8 main ] stop
						 */

						/**
						 * [tDBInput_8 process_data_begin ] start
						 */

						currentComponent = "tDBInput_8";

						/**
						 * [tDBInput_8 process_data_begin ] stop
						 */

						/**
						 * [tLogRow_8 main ] start
						 */

						currentComponent = "tLogRow_8";

						if (execStat) {
							runStat.updateStatOnConnection(iterateId, 1, 1

									, "row17"

							);
						}

///////////////////////		

						strBuffer_tLogRow_8 = new StringBuilder();

						if (row17.Message != null) { //

							strBuffer_tLogRow_8.append(String.valueOf(row17.Message));

						} //

						strBuffer_tLogRow_8.append("|");

						if (row17.Time != null) { //

							strBuffer_tLogRow_8.append(FormatterUtils.format_Date(row17.Time, "yyyy-MM-dd HH:mm:ss"));

						} //

						if (globalMap.get("tLogRow_CONSOLE") != null) {
							consoleOut_tLogRow_8 = (java.io.PrintStream) globalMap.get("tLogRow_CONSOLE");
						} else {
							consoleOut_tLogRow_8 = new java.io.PrintStream(
									new java.io.BufferedOutputStream(System.out));
							globalMap.put("tLogRow_CONSOLE", consoleOut_tLogRow_8);
						}
						consoleOut_tLogRow_8.println(strBuffer_tLogRow_8.toString());
						consoleOut_tLogRow_8.flush();
						nb_line_tLogRow_8++;
//////

//////                    

///////////////////////    			

						tos_count_tLogRow_8++;

						/**
						 * [tLogRow_8 main ] stop
						 */

						/**
						 * [tLogRow_8 process_data_begin ] start
						 */

						currentComponent = "tLogRow_8";

						/**
						 * [tLogRow_8 process_data_begin ] stop
						 */

						/**
						 * [tLogRow_8 process_data_end ] start
						 */

						currentComponent = "tLogRow_8";

						/**
						 * [tLogRow_8 process_data_end ] stop
						 */

						/**
						 * [tDBInput_8 process_data_end ] start
						 */

						currentComponent = "tDBInput_8";

						/**
						 * [tDBInput_8 process_data_end ] stop
						 */

						/**
						 * [tDBInput_8 end ] start
						 */

						currentComponent = "tDBInput_8";

					}
				} finally {
					if (rs_tDBInput_8 != null) {
						rs_tDBInput_8.close();
					}
					if (stmt_tDBInput_8 != null) {
						stmt_tDBInput_8.close();
					}
				}
				globalMap.put("tDBInput_8_NB_LINE", nb_line_tDBInput_8);

				ok_Hash.put("tDBInput_8", true);
				end_Hash.put("tDBInput_8", System.currentTimeMillis());

				/**
				 * [tDBInput_8 end ] stop
				 */

				/**
				 * [tLogRow_8 end ] start
				 */

				currentComponent = "tLogRow_8";

//////
//////
				globalMap.put("tLogRow_8_NB_LINE", nb_line_tLogRow_8);

///////////////////////    			

				if (execStat) {
					runStat.updateStat(resourceMap, iterateId, 2, 0, "row17");
				}

				ok_Hash.put("tLogRow_8", true);
				end_Hash.put("tLogRow_8", System.currentTimeMillis());

				/**
				 * [tLogRow_8 end ] stop
				 */

			} // end the resume

			if (resumeEntryMethodName == null || globalResumeTicket) {
				resumeUtil.addLog("CHECKPOINT", "CONNECTION:SUBJOB_OK:tDBInput_8:OnSubjobOk", "",
						Thread.currentThread().getId() + "", "", "", "", "", "");
			}

			if (execStat) {
				runStat.updateStatOnConnection("OnSubjobOk9", 0, "ok");
			}

			tDBRow_25Process(globalMap);

		} catch (java.lang.Exception e) {

			TalendException te = new TalendException(e, currentComponent, globalMap);

			throw te;
		} catch (java.lang.Error error) {

			runStat.stopThreadStat();

			throw error;
		} finally {

			try {

				/**
				 * [tDBInput_8 finally ] start
				 */

				currentComponent = "tDBInput_8";

				/**
				 * [tDBInput_8 finally ] stop
				 */

				/**
				 * [tLogRow_8 finally ] start
				 */

				currentComponent = "tLogRow_8";

				/**
				 * [tLogRow_8 finally ] stop
				 */

			} catch (java.lang.Exception e) {
				// ignore
			} catch (java.lang.Error error) {
				// ignore
			}
			resourceMap = null;
		}

		globalMap.put("tDBInput_8_SUBPROCESS_STATE", 1);
	}

	public static class row53Struct implements routines.system.IPersistableRow<row53Struct> {
		final static byte[] commonByteArrayLock_WIPO_PROJECTS_G3b_Mig_UD = new byte[0];
		static byte[] commonByteArray_WIPO_PROJECTS_G3b_Mig_UD = new byte[0];

		public void readData(ObjectInputStream dis) {

			synchronized (commonByteArrayLock_WIPO_PROJECTS_G3b_Mig_UD) {

				try {

					int length = 0;

				}

				finally {
				}

			}

		}

		public void writeData(ObjectOutputStream dos) {
			try {

			}

			finally {
			}

		}

		public String toString() {

			StringBuilder sb = new StringBuilder();
			sb.append(super.toString());
			sb.append("[");
			sb.append("]");

			return sb.toString();
		}

		/**
		 * Compare keys
		 */
		public int compareTo(row53Struct other) {

			int returnValue = -1;

			return returnValue;
		}

		private int checkNullsAndCompare(Object object1, Object object2) {
			int returnValue = 0;
			if (object1 instanceof Comparable && object2 instanceof Comparable) {
				returnValue = ((Comparable) object1).compareTo(object2);
			} else if (object1 != null && object2 != null) {
				returnValue = compareStrings(object1.toString(), object2.toString());
			} else if (object1 == null && object2 != null) {
				returnValue = 1;
			} else if (object1 != null && object2 == null) {
				returnValue = -1;
			} else {
				returnValue = 0;
			}

			return returnValue;
		}

		private int compareStrings(String string1, String string2) {
			return string1.compareTo(string2);
		}

	}

	public static class row54Struct implements routines.system.IPersistableRow<row54Struct> {
		final static byte[] commonByteArrayLock_WIPO_PROJECTS_G3b_Mig_UD = new byte[0];
		static byte[] commonByteArray_WIPO_PROJECTS_G3b_Mig_UD = new byte[0];

		public String errorCode;

		public String getErrorCode() {
			return this.errorCode;
		}

		public String errorMessage;

		public String getErrorMessage() {
			return this.errorMessage;
		}

		private String readString(ObjectInputStream dis) throws IOException {
			String strReturn = null;
			int length = 0;
			length = dis.readInt();
			if (length == -1) {
				strReturn = null;
			} else {
				if (length > commonByteArray_WIPO_PROJECTS_G3b_Mig_UD.length) {
					if (length < 1024 && commonByteArray_WIPO_PROJECTS_G3b_Mig_UD.length == 0) {
						commonByteArray_WIPO_PROJECTS_G3b_Mig_UD = new byte[1024];
					} else {
						commonByteArray_WIPO_PROJECTS_G3b_Mig_UD = new byte[2 * length];
					}
				}
				dis.readFully(commonByteArray_WIPO_PROJECTS_G3b_Mig_UD, 0, length);
				strReturn = new String(commonByteArray_WIPO_PROJECTS_G3b_Mig_UD, 0, length, utf8Charset);
			}
			return strReturn;
		}

		private void writeString(String str, ObjectOutputStream dos) throws IOException {
			if (str == null) {
				dos.writeInt(-1);
			} else {
				byte[] byteArray = str.getBytes(utf8Charset);
				dos.writeInt(byteArray.length);
				dos.write(byteArray);
			}
		}

		public void readData(ObjectInputStream dis) {

			synchronized (commonByteArrayLock_WIPO_PROJECTS_G3b_Mig_UD) {

				try {

					int length = 0;

					this.errorCode = readString(dis);

					this.errorMessage = readString(dis);

				} catch (IOException e) {
					throw new RuntimeException(e);

				}

			}

		}

		public void writeData(ObjectOutputStream dos) {
			try {

				// String

				writeString(this.errorCode, dos);

				// String

				writeString(this.errorMessage, dos);

			} catch (IOException e) {
				throw new RuntimeException(e);
			}

		}

		public String toString() {

			StringBuilder sb = new StringBuilder();
			sb.append(super.toString());
			sb.append("[");
			sb.append("errorCode=" + errorCode);
			sb.append(",errorMessage=" + errorMessage);
			sb.append("]");

			return sb.toString();
		}

		/**
		 * Compare keys
		 */
		public int compareTo(row54Struct other) {

			int returnValue = -1;

			return returnValue;
		}

		private int checkNullsAndCompare(Object object1, Object object2) {
			int returnValue = 0;
			if (object1 instanceof Comparable && object2 instanceof Comparable) {
				returnValue = ((Comparable) object1).compareTo(object2);
			} else if (object1 != null && object2 != null) {
				returnValue = compareStrings(object1.toString(), object2.toString());
			} else if (object1 == null && object2 != null) {
				returnValue = 1;
			} else if (object1 != null && object2 == null) {
				returnValue = -1;
			} else {
				returnValue = 0;
			}

			return returnValue;
		}

		private int compareStrings(String string1, String string2) {
			return string1.compareTo(string2);
		}

	}

	public void tDBRow_25Process(final java.util.Map<String, Object> globalMap) throws TalendException {
		globalMap.put("tDBRow_25_SUBPROCESS_STATE", 0);

		final boolean execStat = this.execStat;

		String iterateId = "";

		String currentComponent = "";
		java.util.Map<String, Object> resourceMap = new java.util.HashMap<String, Object>();

		try {
			// TDI-39566 avoid throwing an useless Exception
			boolean resumeIt = true;
			if (globalResumeTicket == false && resumeEntryMethodName != null) {
				String currentMethodName = new java.lang.Exception().getStackTrace()[0].getMethodName();
				resumeIt = resumeEntryMethodName.equals(currentMethodName);
			}
			if (resumeIt || globalResumeTicket) { // start the resume
				globalResumeTicket = true;

				row53Struct row53 = new row53Struct();
				row54Struct row54 = new row54Struct();

				/**
				 * [tDBCommit_25 begin ] start
				 */

				ok_Hash.put("tDBCommit_25", false);
				start_Hash.put("tDBCommit_25", System.currentTimeMillis());

				currentComponent = "tDBCommit_25";

				if (execStat) {
					runStat.updateStatOnConnection(resourceMap, iterateId, 0, 0, "row53");
				}

				int tos_count_tDBCommit_25 = 0;

				/**
				 * [tDBCommit_25 begin ] stop
				 */

				/**
				 * [tLogRow_31 begin ] start
				 */

				ok_Hash.put("tLogRow_31", false);
				start_Hash.put("tLogRow_31", System.currentTimeMillis());

				currentComponent = "tLogRow_31";

				if (execStat) {
					runStat.updateStatOnConnection(resourceMap, iterateId, 0, 0, "row54");
				}

				int tos_count_tLogRow_31 = 0;

				///////////////////////

				final String OUTPUT_FIELD_SEPARATOR_tLogRow_31 = "|";
				java.io.PrintStream consoleOut_tLogRow_31 = null;

				StringBuilder strBuffer_tLogRow_31 = null;
				int nb_line_tLogRow_31 = 0;
///////////////////////    			

				/**
				 * [tLogRow_31 begin ] stop
				 */

				/**
				 * [tDBRow_25 begin ] start
				 */

				ok_Hash.put("tDBRow_25", false);
				start_Hash.put("tDBRow_25", System.currentTimeMillis());

				tStatCatcher_1.addMessage("begin", "tDBRow_25");
				tStatCatcher_1Process(globalMap);

				currentComponent = "tDBRow_25";

				int tos_count_tDBRow_25 = 0;

				java.sql.Connection conn_tDBRow_25 = null;
				String query_tDBRow_25 = "";
				boolean whetherReject_tDBRow_25 = false;
				conn_tDBRow_25 = (java.sql.Connection) globalMap.get("conn_tMSSqlConnection_3");

				resourceMap.put("conn_tDBRow_25", conn_tDBRow_25);
				java.sql.Statement stmt_tDBRow_25 = conn_tDBRow_25.createStatement();
				resourceMap.put("stmt_tDBRow_25", stmt_tDBRow_25);

				/**
				 * [tDBRow_25 begin ] stop
				 */

				/**
				 * [tDBRow_25 main ] start
				 */

				currentComponent = "tDBRow_25";

				row53 = null;

				row54 = null;

				query_tDBRow_25 = "\nINSERT INTO  IP_DOC   \n				( ROW_VERSION , \n				DOC_ORI , \n				DOC_LOG , \n				DOC_SER , \n				DOC_NBR , \n				DOC"
						+ "_SEQ_TYP , \n				DOC_SEQ_SERIES , \n				DOC_SEQ_NBR , \n				DAILY_LOG_DATE , \n				RECEPTION_DATE ,\n				FILING_DATE , "
						+ "\n				RECEPTION_WCODE )  \n		SELECT\n				 1,\n				 DOC_ORI,\n				 'E',\n				 DOC_SERIES,\n				 DOC_NBR,\n				 USERDOC_SEQ"
						+ ",\n				 USERDOC_SERIES,\n				 USERDOC_NBR,\n				 cast(RECEPTION_DATE as DATE),\n				 RECEPTION_DATE,\n				 FILING_DATE,"
						+ "\n				 'PE'\n		FROM  WRK_USERDOC M ;\n";
				whetherReject_tDBRow_25 = false;
				globalMap.put("tDBRow_25_QUERY", query_tDBRow_25);
				try {
					stmt_tDBRow_25.execute(query_tDBRow_25);

				} catch (java.lang.Exception e) {
					whetherReject_tDBRow_25 = true;

					row54 = new row54Struct();

					row54.errorCode = ((java.sql.SQLException) e).getSQLState();
					row54.errorMessage = e.getMessage() + " - Line: " + tos_count_tDBRow_25;

				}

				if (!whetherReject_tDBRow_25) {

					row53 = new row53Struct();

				}

				tos_count_tDBRow_25++;

				/**
				 * [tDBRow_25 main ] stop
				 */

				/**
				 * [tDBRow_25 process_data_begin ] start
				 */

				currentComponent = "tDBRow_25";

				/**
				 * [tDBRow_25 process_data_begin ] stop
				 */
// Start of branch "row53"
				if (row53 != null) {

					/**
					 * [tDBCommit_25 main ] start
					 */

					currentComponent = "tDBCommit_25";

					if (execStat) {
						runStat.updateStatOnConnection(iterateId, 1, 1

								, "row53"

						);
					}

					java.sql.Connection conn_tDBCommit_25 = (java.sql.Connection) globalMap
							.get("conn_tMSSqlConnection_3");
					if (conn_tDBCommit_25 != null && !conn_tDBCommit_25.isClosed()) {

						conn_tDBCommit_25.commit();

					}

					tos_count_tDBCommit_25++;

					/**
					 * [tDBCommit_25 main ] stop
					 */

					/**
					 * [tDBCommit_25 process_data_begin ] start
					 */

					currentComponent = "tDBCommit_25";

					/**
					 * [tDBCommit_25 process_data_begin ] stop
					 */

					/**
					 * [tDBCommit_25 process_data_end ] start
					 */

					currentComponent = "tDBCommit_25";

					/**
					 * [tDBCommit_25 process_data_end ] stop
					 */

				} // End of branch "row53"

// Start of branch "row54"
				if (row54 != null) {

					/**
					 * [tLogRow_31 main ] start
					 */

					currentComponent = "tLogRow_31";

					if (execStat) {
						runStat.updateStatOnConnection(iterateId, 1, 1

								, "row54"

						);
					}

///////////////////////		

					strBuffer_tLogRow_31 = new StringBuilder();

					if (row54.errorCode != null) { //

						strBuffer_tLogRow_31.append(String.valueOf(row54.errorCode));

					} //

					strBuffer_tLogRow_31.append("|");

					if (row54.errorMessage != null) { //

						strBuffer_tLogRow_31.append(String.valueOf(row54.errorMessage));

					} //

					if (globalMap.get("tLogRow_CONSOLE") != null) {
						consoleOut_tLogRow_31 = (java.io.PrintStream) globalMap.get("tLogRow_CONSOLE");
					} else {
						consoleOut_tLogRow_31 = new java.io.PrintStream(new java.io.BufferedOutputStream(System.out));
						globalMap.put("tLogRow_CONSOLE", consoleOut_tLogRow_31);
					}
					consoleOut_tLogRow_31.println(strBuffer_tLogRow_31.toString());
					consoleOut_tLogRow_31.flush();
					nb_line_tLogRow_31++;
//////

//////                    

///////////////////////    			

					tos_count_tLogRow_31++;

					/**
					 * [tLogRow_31 main ] stop
					 */

					/**
					 * [tLogRow_31 process_data_begin ] start
					 */

					currentComponent = "tLogRow_31";

					/**
					 * [tLogRow_31 process_data_begin ] stop
					 */

					/**
					 * [tLogRow_31 process_data_end ] start
					 */

					currentComponent = "tLogRow_31";

					/**
					 * [tLogRow_31 process_data_end ] stop
					 */

				} // End of branch "row54"

				/**
				 * [tDBRow_25 process_data_end ] start
				 */

				currentComponent = "tDBRow_25";

				/**
				 * [tDBRow_25 process_data_end ] stop
				 */

				/**
				 * [tDBRow_25 end ] start
				 */

				currentComponent = "tDBRow_25";

				stmt_tDBRow_25.close();
				resourceMap.remove("stmt_tDBRow_25");
				resourceMap.put("statementClosed_tDBRow_25", true);
				resourceMap.put("finish_tDBRow_25", true);

				ok_Hash.put("tDBRow_25", true);
				end_Hash.put("tDBRow_25", System.currentTimeMillis());

				tStatCatcher_1.addMessage("end", "tDBRow_25", end_Hash.get("tDBRow_25") - start_Hash.get("tDBRow_25"));
				tStatCatcher_1Process(globalMap);

				/**
				 * [tDBRow_25 end ] stop
				 */

				/**
				 * [tDBCommit_25 end ] start
				 */

				currentComponent = "tDBCommit_25";

				if (execStat) {
					runStat.updateStat(resourceMap, iterateId, 2, 0, "row53");
				}

				ok_Hash.put("tDBCommit_25", true);
				end_Hash.put("tDBCommit_25", System.currentTimeMillis());

				/**
				 * [tDBCommit_25 end ] stop
				 */

				/**
				 * [tLogRow_31 end ] start
				 */

				currentComponent = "tLogRow_31";

//////
//////
				globalMap.put("tLogRow_31_NB_LINE", nb_line_tLogRow_31);

///////////////////////    			

				if (execStat) {
					runStat.updateStat(resourceMap, iterateId, 2, 0, "row54");
				}

				ok_Hash.put("tLogRow_31", true);
				end_Hash.put("tLogRow_31", System.currentTimeMillis());

				/**
				 * [tLogRow_31 end ] stop
				 */

			} // end the resume

			if (resumeEntryMethodName == null || globalResumeTicket) {
				resumeUtil.addLog("CHECKPOINT", "CONNECTION:SUBJOB_OK:tDBRow_25:OnSubjobOk", "",
						Thread.currentThread().getId() + "", "", "", "", "", "");
			}

			if (execStat) {
				runStat.updateStatOnConnection("OnSubjobOk31", 0, "ok");
			}

			tDBRow_8Process(globalMap);

		} catch (java.lang.Exception e) {

			TalendException te = new TalendException(e, currentComponent, globalMap);

			throw te;
		} catch (java.lang.Error error) {

			runStat.stopThreadStat();

			throw error;
		} finally {

			try {

				/**
				 * [tDBRow_25 finally ] start
				 */

				currentComponent = "tDBRow_25";

				if (resourceMap.get("statementClosed_tDBRow_25") == null) {
					java.sql.Statement stmtToClose_tDBRow_25 = null;
					if ((stmtToClose_tDBRow_25 = (java.sql.Statement) resourceMap.remove("stmt_tDBRow_25")) != null) {
						stmtToClose_tDBRow_25.close();
					}
				}

				/**
				 * [tDBRow_25 finally ] stop
				 */

				/**
				 * [tDBCommit_25 finally ] start
				 */

				currentComponent = "tDBCommit_25";

				/**
				 * [tDBCommit_25 finally ] stop
				 */

				/**
				 * [tLogRow_31 finally ] start
				 */

				currentComponent = "tLogRow_31";

				/**
				 * [tLogRow_31 finally ] stop
				 */

			} catch (java.lang.Exception e) {
				// ignore
			} catch (java.lang.Error error) {
				// ignore
			}
			resourceMap = null;
		}

		globalMap.put("tDBRow_25_SUBPROCESS_STATE", 1);
	}

	public static class row16Struct implements routines.system.IPersistableRow<row16Struct> {
		final static byte[] commonByteArrayLock_WIPO_PROJECTS_G3b_Mig_UD = new byte[0];
		static byte[] commonByteArray_WIPO_PROJECTS_G3b_Mig_UD = new byte[0];

		public void readData(ObjectInputStream dis) {

			synchronized (commonByteArrayLock_WIPO_PROJECTS_G3b_Mig_UD) {

				try {

					int length = 0;

				}

				finally {
				}

			}

		}

		public void writeData(ObjectOutputStream dos) {
			try {

			}

			finally {
			}

		}

		public String toString() {

			StringBuilder sb = new StringBuilder();
			sb.append(super.toString());
			sb.append("[");
			sb.append("]");

			return sb.toString();
		}

		/**
		 * Compare keys
		 */
		public int compareTo(row16Struct other) {

			int returnValue = -1;

			return returnValue;
		}

		private int checkNullsAndCompare(Object object1, Object object2) {
			int returnValue = 0;
			if (object1 instanceof Comparable && object2 instanceof Comparable) {
				returnValue = ((Comparable) object1).compareTo(object2);
			} else if (object1 != null && object2 != null) {
				returnValue = compareStrings(object1.toString(), object2.toString());
			} else if (object1 == null && object2 != null) {
				returnValue = 1;
			} else if (object1 != null && object2 == null) {
				returnValue = -1;
			} else {
				returnValue = 0;
			}

			return returnValue;
		}

		private int compareStrings(String string1, String string2) {
			return string1.compareTo(string2);
		}

	}

	public static class row55Struct implements routines.system.IPersistableRow<row55Struct> {
		final static byte[] commonByteArrayLock_WIPO_PROJECTS_G3b_Mig_UD = new byte[0];
		static byte[] commonByteArray_WIPO_PROJECTS_G3b_Mig_UD = new byte[0];

		public String errorCode;

		public String getErrorCode() {
			return this.errorCode;
		}

		public String errorMessage;

		public String getErrorMessage() {
			return this.errorMessage;
		}

		private String readString(ObjectInputStream dis) throws IOException {
			String strReturn = null;
			int length = 0;
			length = dis.readInt();
			if (length == -1) {
				strReturn = null;
			} else {
				if (length > commonByteArray_WIPO_PROJECTS_G3b_Mig_UD.length) {
					if (length < 1024 && commonByteArray_WIPO_PROJECTS_G3b_Mig_UD.length == 0) {
						commonByteArray_WIPO_PROJECTS_G3b_Mig_UD = new byte[1024];
					} else {
						commonByteArray_WIPO_PROJECTS_G3b_Mig_UD = new byte[2 * length];
					}
				}
				dis.readFully(commonByteArray_WIPO_PROJECTS_G3b_Mig_UD, 0, length);
				strReturn = new String(commonByteArray_WIPO_PROJECTS_G3b_Mig_UD, 0, length, utf8Charset);
			}
			return strReturn;
		}

		private void writeString(String str, ObjectOutputStream dos) throws IOException {
			if (str == null) {
				dos.writeInt(-1);
			} else {
				byte[] byteArray = str.getBytes(utf8Charset);
				dos.writeInt(byteArray.length);
				dos.write(byteArray);
			}
		}

		public void readData(ObjectInputStream dis) {

			synchronized (commonByteArrayLock_WIPO_PROJECTS_G3b_Mig_UD) {

				try {

					int length = 0;

					this.errorCode = readString(dis);

					this.errorMessage = readString(dis);

				} catch (IOException e) {
					throw new RuntimeException(e);

				}

			}

		}

		public void writeData(ObjectOutputStream dos) {
			try {

				// String

				writeString(this.errorCode, dos);

				// String

				writeString(this.errorMessage, dos);

			} catch (IOException e) {
				throw new RuntimeException(e);
			}

		}

		public String toString() {

			StringBuilder sb = new StringBuilder();
			sb.append(super.toString());
			sb.append("[");
			sb.append("errorCode=" + errorCode);
			sb.append(",errorMessage=" + errorMessage);
			sb.append("]");

			return sb.toString();
		}

		/**
		 * Compare keys
		 */
		public int compareTo(row55Struct other) {

			int returnValue = -1;

			return returnValue;
		}

		private int checkNullsAndCompare(Object object1, Object object2) {
			int returnValue = 0;
			if (object1 instanceof Comparable && object2 instanceof Comparable) {
				returnValue = ((Comparable) object1).compareTo(object2);
			} else if (object1 != null && object2 != null) {
				returnValue = compareStrings(object1.toString(), object2.toString());
			} else if (object1 == null && object2 != null) {
				returnValue = 1;
			} else if (object1 != null && object2 == null) {
				returnValue = -1;
			} else {
				returnValue = 0;
			}

			return returnValue;
		}

		private int compareStrings(String string1, String string2) {
			return string1.compareTo(string2);
		}

	}

	public void tDBRow_8Process(final java.util.Map<String, Object> globalMap) throws TalendException {
		globalMap.put("tDBRow_8_SUBPROCESS_STATE", 0);

		final boolean execStat = this.execStat;

		String iterateId = "";

		String currentComponent = "";
		java.util.Map<String, Object> resourceMap = new java.util.HashMap<String, Object>();

		try {
			// TDI-39566 avoid throwing an useless Exception
			boolean resumeIt = true;
			if (globalResumeTicket == false && resumeEntryMethodName != null) {
				String currentMethodName = new java.lang.Exception().getStackTrace()[0].getMethodName();
				resumeIt = resumeEntryMethodName.equals(currentMethodName);
			}
			if (resumeIt || globalResumeTicket) { // start the resume
				globalResumeTicket = true;

				row16Struct row16 = new row16Struct();
				row55Struct row55 = new row55Struct();

				/**
				 * [tDBCommit_7 begin ] start
				 */

				ok_Hash.put("tDBCommit_7", false);
				start_Hash.put("tDBCommit_7", System.currentTimeMillis());

				currentComponent = "tDBCommit_7";

				if (execStat) {
					runStat.updateStatOnConnection(resourceMap, iterateId, 0, 0, "row16");
				}

				int tos_count_tDBCommit_7 = 0;

				/**
				 * [tDBCommit_7 begin ] stop
				 */

				/**
				 * [tLogRow_32 begin ] start
				 */

				ok_Hash.put("tLogRow_32", false);
				start_Hash.put("tLogRow_32", System.currentTimeMillis());

				currentComponent = "tLogRow_32";

				if (execStat) {
					runStat.updateStatOnConnection(resourceMap, iterateId, 0, 0, "row55");
				}

				int tos_count_tLogRow_32 = 0;

				///////////////////////

				final String OUTPUT_FIELD_SEPARATOR_tLogRow_32 = "|";
				java.io.PrintStream consoleOut_tLogRow_32 = null;

				StringBuilder strBuffer_tLogRow_32 = null;
				int nb_line_tLogRow_32 = 0;
///////////////////////    			

				/**
				 * [tLogRow_32 begin ] stop
				 */

				/**
				 * [tDBRow_8 begin ] start
				 */

				ok_Hash.put("tDBRow_8", false);
				start_Hash.put("tDBRow_8", System.currentTimeMillis());

				tStatCatcher_1.addMessage("begin", "tDBRow_8");
				tStatCatcher_1Process(globalMap);

				currentComponent = "tDBRow_8";

				int tos_count_tDBRow_8 = 0;

				java.sql.Connection conn_tDBRow_8 = null;
				String query_tDBRow_8 = "";
				boolean whetherReject_tDBRow_8 = false;
				conn_tDBRow_8 = (java.sql.Connection) globalMap.get("conn_tMSSqlConnection_3");

				resourceMap.put("conn_tDBRow_8", conn_tDBRow_8);
				java.sql.Statement stmt_tDBRow_8 = conn_tDBRow_8.createStatement();
				resourceMap.put("stmt_tDBRow_8", stmt_tDBRow_8);

				/**
				 * [tDBRow_8 begin ] stop
				 */

				/**
				 * [tDBRow_8 main ] start
				 */

				currentComponent = "tDBRow_8";

				row16 = null;

				row55 = null;

				query_tDBRow_8 = "\nINSERT INTO  IP_DOC_FILES   \n				( ROW_VERSION , \n				DOC_ORI , \n				DOC_LOG , \n				DOC_SER , \n				DOC_NBR , \n	"
						+ "			FILE_SEQ , \n				FILE_TYP , \n				FILE_SER , \n				FILE_NBR )  \n		SELECT		DISTINCT\n				 1,\n				 DOC_ORI,\n				 'E'"
						+ ",\n				 DOC_SERIES,\n				 DOC_NBR,\n				 FILE_SEQ,\n				 FILE_TYPE,\n				 FILE_SERIES,\n				 FILE_NBR\n		FROM  WRK_USERD"
						+ "OC_FILES T JOIN wrk_userdoc U ON U.userdoc_seq  = T.userdoc_seq\n			 AND	U.userdoc_series  = T.userdoc_series\n			 AND	U"
						+ ".userdoc_nbr  = T.userdoc_nbr  ;\n \n";
				whetherReject_tDBRow_8 = false;
				globalMap.put("tDBRow_8_QUERY", query_tDBRow_8);
				try {
					stmt_tDBRow_8.execute(query_tDBRow_8);

				} catch (java.lang.Exception e) {
					whetherReject_tDBRow_8 = true;

					row55 = new row55Struct();

					row55.errorCode = ((java.sql.SQLException) e).getSQLState();
					row55.errorMessage = e.getMessage() + " - Line: " + tos_count_tDBRow_8;

				}

				if (!whetherReject_tDBRow_8) {

					row16 = new row16Struct();

				}

				tos_count_tDBRow_8++;

				/**
				 * [tDBRow_8 main ] stop
				 */

				/**
				 * [tDBRow_8 process_data_begin ] start
				 */

				currentComponent = "tDBRow_8";

				/**
				 * [tDBRow_8 process_data_begin ] stop
				 */
// Start of branch "row16"
				if (row16 != null) {

					/**
					 * [tDBCommit_7 main ] start
					 */

					currentComponent = "tDBCommit_7";

					if (execStat) {
						runStat.updateStatOnConnection(iterateId, 1, 1

								, "row16"

						);
					}

					java.sql.Connection conn_tDBCommit_7 = (java.sql.Connection) globalMap
							.get("conn_tMSSqlConnection_3");
					if (conn_tDBCommit_7 != null && !conn_tDBCommit_7.isClosed()) {

						conn_tDBCommit_7.commit();

					}

					tos_count_tDBCommit_7++;

					/**
					 * [tDBCommit_7 main ] stop
					 */

					/**
					 * [tDBCommit_7 process_data_begin ] start
					 */

					currentComponent = "tDBCommit_7";

					/**
					 * [tDBCommit_7 process_data_begin ] stop
					 */

					/**
					 * [tDBCommit_7 process_data_end ] start
					 */

					currentComponent = "tDBCommit_7";

					/**
					 * [tDBCommit_7 process_data_end ] stop
					 */

				} // End of branch "row16"

// Start of branch "row55"
				if (row55 != null) {

					/**
					 * [tLogRow_32 main ] start
					 */

					currentComponent = "tLogRow_32";

					if (execStat) {
						runStat.updateStatOnConnection(iterateId, 1, 1

								, "row55"

						);
					}

///////////////////////		

					strBuffer_tLogRow_32 = new StringBuilder();

					if (row55.errorCode != null) { //

						strBuffer_tLogRow_32.append(String.valueOf(row55.errorCode));

					} //

					strBuffer_tLogRow_32.append("|");

					if (row55.errorMessage != null) { //

						strBuffer_tLogRow_32.append(String.valueOf(row55.errorMessage));

					} //

					if (globalMap.get("tLogRow_CONSOLE") != null) {
						consoleOut_tLogRow_32 = (java.io.PrintStream) globalMap.get("tLogRow_CONSOLE");
					} else {
						consoleOut_tLogRow_32 = new java.io.PrintStream(new java.io.BufferedOutputStream(System.out));
						globalMap.put("tLogRow_CONSOLE", consoleOut_tLogRow_32);
					}
					consoleOut_tLogRow_32.println(strBuffer_tLogRow_32.toString());
					consoleOut_tLogRow_32.flush();
					nb_line_tLogRow_32++;
//////

//////                    

///////////////////////    			

					tos_count_tLogRow_32++;

					/**
					 * [tLogRow_32 main ] stop
					 */

					/**
					 * [tLogRow_32 process_data_begin ] start
					 */

					currentComponent = "tLogRow_32";

					/**
					 * [tLogRow_32 process_data_begin ] stop
					 */

					/**
					 * [tLogRow_32 process_data_end ] start
					 */

					currentComponent = "tLogRow_32";

					/**
					 * [tLogRow_32 process_data_end ] stop
					 */

				} // End of branch "row55"

				/**
				 * [tDBRow_8 process_data_end ] start
				 */

				currentComponent = "tDBRow_8";

				/**
				 * [tDBRow_8 process_data_end ] stop
				 */

				/**
				 * [tDBRow_8 end ] start
				 */

				currentComponent = "tDBRow_8";

				stmt_tDBRow_8.close();
				resourceMap.remove("stmt_tDBRow_8");
				resourceMap.put("statementClosed_tDBRow_8", true);
				resourceMap.put("finish_tDBRow_8", true);

				ok_Hash.put("tDBRow_8", true);
				end_Hash.put("tDBRow_8", System.currentTimeMillis());

				tStatCatcher_1.addMessage("end", "tDBRow_8", end_Hash.get("tDBRow_8") - start_Hash.get("tDBRow_8"));
				tStatCatcher_1Process(globalMap);

				/**
				 * [tDBRow_8 end ] stop
				 */

				/**
				 * [tDBCommit_7 end ] start
				 */

				currentComponent = "tDBCommit_7";

				if (execStat) {
					runStat.updateStat(resourceMap, iterateId, 2, 0, "row16");
				}

				ok_Hash.put("tDBCommit_7", true);
				end_Hash.put("tDBCommit_7", System.currentTimeMillis());

				/**
				 * [tDBCommit_7 end ] stop
				 */

				/**
				 * [tLogRow_32 end ] start
				 */

				currentComponent = "tLogRow_32";

//////
//////
				globalMap.put("tLogRow_32_NB_LINE", nb_line_tLogRow_32);

///////////////////////    			

				if (execStat) {
					runStat.updateStat(resourceMap, iterateId, 2, 0, "row55");
				}

				ok_Hash.put("tLogRow_32", true);
				end_Hash.put("tLogRow_32", System.currentTimeMillis());

				/**
				 * [tLogRow_32 end ] stop
				 */

			} // end the resume

			if (resumeEntryMethodName == null || globalResumeTicket) {
				resumeUtil.addLog("CHECKPOINT", "CONNECTION:SUBJOB_OK:tDBRow_8:OnSubjobOk", "",
						Thread.currentThread().getId() + "", "", "", "", "", "");
			}

			if (execStat) {
				runStat.updateStatOnConnection("OnSubjobOk32", 0, "ok");
			}

			tDBRow_26Process(globalMap);

		} catch (java.lang.Exception e) {

			TalendException te = new TalendException(e, currentComponent, globalMap);

			throw te;
		} catch (java.lang.Error error) {

			runStat.stopThreadStat();

			throw error;
		} finally {

			try {

				/**
				 * [tDBRow_8 finally ] start
				 */

				currentComponent = "tDBRow_8";

				if (resourceMap.get("statementClosed_tDBRow_8") == null) {
					java.sql.Statement stmtToClose_tDBRow_8 = null;
					if ((stmtToClose_tDBRow_8 = (java.sql.Statement) resourceMap.remove("stmt_tDBRow_8")) != null) {
						stmtToClose_tDBRow_8.close();
					}
				}

				/**
				 * [tDBRow_8 finally ] stop
				 */

				/**
				 * [tDBCommit_7 finally ] start
				 */

				currentComponent = "tDBCommit_7";

				/**
				 * [tDBCommit_7 finally ] stop
				 */

				/**
				 * [tLogRow_32 finally ] start
				 */

				currentComponent = "tLogRow_32";

				/**
				 * [tLogRow_32 finally ] stop
				 */

			} catch (java.lang.Exception e) {
				// ignore
			} catch (java.lang.Error error) {
				// ignore
			}
			resourceMap = null;
		}

		globalMap.put("tDBRow_8_SUBPROCESS_STATE", 1);
	}

	public static class row56Struct implements routines.system.IPersistableRow<row56Struct> {
		final static byte[] commonByteArrayLock_WIPO_PROJECTS_G3b_Mig_UD = new byte[0];
		static byte[] commonByteArray_WIPO_PROJECTS_G3b_Mig_UD = new byte[0];

		public void readData(ObjectInputStream dis) {

			synchronized (commonByteArrayLock_WIPO_PROJECTS_G3b_Mig_UD) {

				try {

					int length = 0;

				}

				finally {
				}

			}

		}

		public void writeData(ObjectOutputStream dos) {
			try {

			}

			finally {
			}

		}

		public String toString() {

			StringBuilder sb = new StringBuilder();
			sb.append(super.toString());
			sb.append("[");
			sb.append("]");

			return sb.toString();
		}

		/**
		 * Compare keys
		 */
		public int compareTo(row56Struct other) {

			int returnValue = -1;

			return returnValue;
		}

		private int checkNullsAndCompare(Object object1, Object object2) {
			int returnValue = 0;
			if (object1 instanceof Comparable && object2 instanceof Comparable) {
				returnValue = ((Comparable) object1).compareTo(object2);
			} else if (object1 != null && object2 != null) {
				returnValue = compareStrings(object1.toString(), object2.toString());
			} else if (object1 == null && object2 != null) {
				returnValue = 1;
			} else if (object1 != null && object2 == null) {
				returnValue = -1;
			} else {
				returnValue = 0;
			}

			return returnValue;
		}

		private int compareStrings(String string1, String string2) {
			return string1.compareTo(string2);
		}

	}

	public static class row57Struct implements routines.system.IPersistableRow<row57Struct> {
		final static byte[] commonByteArrayLock_WIPO_PROJECTS_G3b_Mig_UD = new byte[0];
		static byte[] commonByteArray_WIPO_PROJECTS_G3b_Mig_UD = new byte[0];

		public String errorCode;

		public String getErrorCode() {
			return this.errorCode;
		}

		public String errorMessage;

		public String getErrorMessage() {
			return this.errorMessage;
		}

		private String readString(ObjectInputStream dis) throws IOException {
			String strReturn = null;
			int length = 0;
			length = dis.readInt();
			if (length == -1) {
				strReturn = null;
			} else {
				if (length > commonByteArray_WIPO_PROJECTS_G3b_Mig_UD.length) {
					if (length < 1024 && commonByteArray_WIPO_PROJECTS_G3b_Mig_UD.length == 0) {
						commonByteArray_WIPO_PROJECTS_G3b_Mig_UD = new byte[1024];
					} else {
						commonByteArray_WIPO_PROJECTS_G3b_Mig_UD = new byte[2 * length];
					}
				}
				dis.readFully(commonByteArray_WIPO_PROJECTS_G3b_Mig_UD, 0, length);
				strReturn = new String(commonByteArray_WIPO_PROJECTS_G3b_Mig_UD, 0, length, utf8Charset);
			}
			return strReturn;
		}

		private void writeString(String str, ObjectOutputStream dos) throws IOException {
			if (str == null) {
				dos.writeInt(-1);
			} else {
				byte[] byteArray = str.getBytes(utf8Charset);
				dos.writeInt(byteArray.length);
				dos.write(byteArray);
			}
		}

		public void readData(ObjectInputStream dis) {

			synchronized (commonByteArrayLock_WIPO_PROJECTS_G3b_Mig_UD) {

				try {

					int length = 0;

					this.errorCode = readString(dis);

					this.errorMessage = readString(dis);

				} catch (IOException e) {
					throw new RuntimeException(e);

				}

			}

		}

		public void writeData(ObjectOutputStream dos) {
			try {

				// String

				writeString(this.errorCode, dos);

				// String

				writeString(this.errorMessage, dos);

			} catch (IOException e) {
				throw new RuntimeException(e);
			}

		}

		public String toString() {

			StringBuilder sb = new StringBuilder();
			sb.append(super.toString());
			sb.append("[");
			sb.append("errorCode=" + errorCode);
			sb.append(",errorMessage=" + errorMessage);
			sb.append("]");

			return sb.toString();
		}

		/**
		 * Compare keys
		 */
		public int compareTo(row57Struct other) {

			int returnValue = -1;

			return returnValue;
		}

		private int checkNullsAndCompare(Object object1, Object object2) {
			int returnValue = 0;
			if (object1 instanceof Comparable && object2 instanceof Comparable) {
				returnValue = ((Comparable) object1).compareTo(object2);
			} else if (object1 != null && object2 != null) {
				returnValue = compareStrings(object1.toString(), object2.toString());
			} else if (object1 == null && object2 != null) {
				returnValue = 1;
			} else if (object1 != null && object2 == null) {
				returnValue = -1;
			} else {
				returnValue = 0;
			}

			return returnValue;
		}

		private int compareStrings(String string1, String string2) {
			return string1.compareTo(string2);
		}

	}

	public void tDBRow_26Process(final java.util.Map<String, Object> globalMap) throws TalendException {
		globalMap.put("tDBRow_26_SUBPROCESS_STATE", 0);

		final boolean execStat = this.execStat;

		String iterateId = "";

		String currentComponent = "";
		java.util.Map<String, Object> resourceMap = new java.util.HashMap<String, Object>();

		try {
			// TDI-39566 avoid throwing an useless Exception
			boolean resumeIt = true;
			if (globalResumeTicket == false && resumeEntryMethodName != null) {
				String currentMethodName = new java.lang.Exception().getStackTrace()[0].getMethodName();
				resumeIt = resumeEntryMethodName.equals(currentMethodName);
			}
			if (resumeIt || globalResumeTicket) { // start the resume
				globalResumeTicket = true;

				row56Struct row56 = new row56Struct();
				row57Struct row57 = new row57Struct();

				/**
				 * [tDBCommit_26 begin ] start
				 */

				ok_Hash.put("tDBCommit_26", false);
				start_Hash.put("tDBCommit_26", System.currentTimeMillis());

				currentComponent = "tDBCommit_26";

				if (execStat) {
					runStat.updateStatOnConnection(resourceMap, iterateId, 0, 0, "row56");
				}

				int tos_count_tDBCommit_26 = 0;

				/**
				 * [tDBCommit_26 begin ] stop
				 */

				/**
				 * [tLogRow_33 begin ] start
				 */

				ok_Hash.put("tLogRow_33", false);
				start_Hash.put("tLogRow_33", System.currentTimeMillis());

				currentComponent = "tLogRow_33";

				if (execStat) {
					runStat.updateStatOnConnection(resourceMap, iterateId, 0, 0, "row57");
				}

				int tos_count_tLogRow_33 = 0;

				///////////////////////

				final String OUTPUT_FIELD_SEPARATOR_tLogRow_33 = "|";
				java.io.PrintStream consoleOut_tLogRow_33 = null;

				StringBuilder strBuffer_tLogRow_33 = null;
				int nb_line_tLogRow_33 = 0;
///////////////////////    			

				/**
				 * [tLogRow_33 begin ] stop
				 */

				/**
				 * [tDBRow_26 begin ] start
				 */

				ok_Hash.put("tDBRow_26", false);
				start_Hash.put("tDBRow_26", System.currentTimeMillis());

				tStatCatcher_1.addMessage("begin", "tDBRow_26");
				tStatCatcher_1Process(globalMap);

				currentComponent = "tDBRow_26";

				int tos_count_tDBRow_26 = 0;

				java.sql.Connection conn_tDBRow_26 = null;
				String query_tDBRow_26 = "";
				boolean whetherReject_tDBRow_26 = false;
				conn_tDBRow_26 = (java.sql.Connection) globalMap.get("conn_tMSSqlConnection_3");

				resourceMap.put("conn_tDBRow_26", conn_tDBRow_26);
				java.sql.Statement stmt_tDBRow_26 = conn_tDBRow_26.createStatement();
				resourceMap.put("stmt_tDBRow_26", stmt_tDBRow_26);

				/**
				 * [tDBRow_26 begin ] stop
				 */

				/**
				 * [tDBRow_26 main ] start
				 */

				currentComponent = "tDBRow_26";

				row56 = null;

				row57 = null;

				query_tDBRow_26 = "\nINSERT INTO  IP_USERDOC   \n				( ROW_VERSION , \n				DOC_ORI , \n				DOC_LOG , \n				DOC_SER , \n				DOC_NBR , \n			"
						+ "	CAPTURE_USER_ID , \n				CAPTURE_DATE , \n				APPLICANT_PERSON_NBR , \n				APPLICANT_ADDR_NBR , \n				APPLICANT_NOTES ) "
						+ " \n		SELECT\n				 1,\n				 DOC_ORI,\n				 'E',\n				 DOC_SERIES,\n				 DOC_NBR,\n				 CAPTURE_USER_ID,\n				 CAPTURE_DAT"
						+ "E,\n				 APPLICANT_PERSON_NBR,\n				 APPLICANT_ADDR_NBR,\n				 APPLICANT_NOTES\n		FROM  WRK_USERDOC;\n\n";
				whetherReject_tDBRow_26 = false;
				globalMap.put("tDBRow_26_QUERY", query_tDBRow_26);
				try {
					stmt_tDBRow_26.execute(query_tDBRow_26);

				} catch (java.lang.Exception e) {
					whetherReject_tDBRow_26 = true;

					row57 = new row57Struct();

					row57.errorCode = ((java.sql.SQLException) e).getSQLState();
					row57.errorMessage = e.getMessage() + " - Line: " + tos_count_tDBRow_26;

				}

				if (!whetherReject_tDBRow_26) {

					row56 = new row56Struct();

				}

				tos_count_tDBRow_26++;

				/**
				 * [tDBRow_26 main ] stop
				 */

				/**
				 * [tDBRow_26 process_data_begin ] start
				 */

				currentComponent = "tDBRow_26";

				/**
				 * [tDBRow_26 process_data_begin ] stop
				 */
// Start of branch "row56"
				if (row56 != null) {

					/**
					 * [tDBCommit_26 main ] start
					 */

					currentComponent = "tDBCommit_26";

					if (execStat) {
						runStat.updateStatOnConnection(iterateId, 1, 1

								, "row56"

						);
					}

					java.sql.Connection conn_tDBCommit_26 = (java.sql.Connection) globalMap
							.get("conn_tMSSqlConnection_3");
					if (conn_tDBCommit_26 != null && !conn_tDBCommit_26.isClosed()) {

						conn_tDBCommit_26.commit();

					}

					tos_count_tDBCommit_26++;

					/**
					 * [tDBCommit_26 main ] stop
					 */

					/**
					 * [tDBCommit_26 process_data_begin ] start
					 */

					currentComponent = "tDBCommit_26";

					/**
					 * [tDBCommit_26 process_data_begin ] stop
					 */

					/**
					 * [tDBCommit_26 process_data_end ] start
					 */

					currentComponent = "tDBCommit_26";

					/**
					 * [tDBCommit_26 process_data_end ] stop
					 */

				} // End of branch "row56"

// Start of branch "row57"
				if (row57 != null) {

					/**
					 * [tLogRow_33 main ] start
					 */

					currentComponent = "tLogRow_33";

					if (execStat) {
						runStat.updateStatOnConnection(iterateId, 1, 1

								, "row57"

						);
					}

///////////////////////		

					strBuffer_tLogRow_33 = new StringBuilder();

					if (row57.errorCode != null) { //

						strBuffer_tLogRow_33.append(String.valueOf(row57.errorCode));

					} //

					strBuffer_tLogRow_33.append("|");

					if (row57.errorMessage != null) { //

						strBuffer_tLogRow_33.append(String.valueOf(row57.errorMessage));

					} //

					if (globalMap.get("tLogRow_CONSOLE") != null) {
						consoleOut_tLogRow_33 = (java.io.PrintStream) globalMap.get("tLogRow_CONSOLE");
					} else {
						consoleOut_tLogRow_33 = new java.io.PrintStream(new java.io.BufferedOutputStream(System.out));
						globalMap.put("tLogRow_CONSOLE", consoleOut_tLogRow_33);
					}
					consoleOut_tLogRow_33.println(strBuffer_tLogRow_33.toString());
					consoleOut_tLogRow_33.flush();
					nb_line_tLogRow_33++;
//////

//////                    

///////////////////////    			

					tos_count_tLogRow_33++;

					/**
					 * [tLogRow_33 main ] stop
					 */

					/**
					 * [tLogRow_33 process_data_begin ] start
					 */

					currentComponent = "tLogRow_33";

					/**
					 * [tLogRow_33 process_data_begin ] stop
					 */

					/**
					 * [tLogRow_33 process_data_end ] start
					 */

					currentComponent = "tLogRow_33";

					/**
					 * [tLogRow_33 process_data_end ] stop
					 */

				} // End of branch "row57"

				/**
				 * [tDBRow_26 process_data_end ] start
				 */

				currentComponent = "tDBRow_26";

				/**
				 * [tDBRow_26 process_data_end ] stop
				 */

				/**
				 * [tDBRow_26 end ] start
				 */

				currentComponent = "tDBRow_26";

				stmt_tDBRow_26.close();
				resourceMap.remove("stmt_tDBRow_26");
				resourceMap.put("statementClosed_tDBRow_26", true);
				resourceMap.put("finish_tDBRow_26", true);

				ok_Hash.put("tDBRow_26", true);
				end_Hash.put("tDBRow_26", System.currentTimeMillis());

				tStatCatcher_1.addMessage("end", "tDBRow_26", end_Hash.get("tDBRow_26") - start_Hash.get("tDBRow_26"));
				tStatCatcher_1Process(globalMap);

				/**
				 * [tDBRow_26 end ] stop
				 */

				/**
				 * [tDBCommit_26 end ] start
				 */

				currentComponent = "tDBCommit_26";

				if (execStat) {
					runStat.updateStat(resourceMap, iterateId, 2, 0, "row56");
				}

				ok_Hash.put("tDBCommit_26", true);
				end_Hash.put("tDBCommit_26", System.currentTimeMillis());

				/**
				 * [tDBCommit_26 end ] stop
				 */

				/**
				 * [tLogRow_33 end ] start
				 */

				currentComponent = "tLogRow_33";

//////
//////
				globalMap.put("tLogRow_33_NB_LINE", nb_line_tLogRow_33);

///////////////////////    			

				if (execStat) {
					runStat.updateStat(resourceMap, iterateId, 2, 0, "row57");
				}

				ok_Hash.put("tLogRow_33", true);
				end_Hash.put("tLogRow_33", System.currentTimeMillis());

				/**
				 * [tLogRow_33 end ] stop
				 */

			} // end the resume

			if (resumeEntryMethodName == null || globalResumeTicket) {
				resumeUtil.addLog("CHECKPOINT", "CONNECTION:SUBJOB_OK:tDBRow_26:OnSubjobOk", "",
						Thread.currentThread().getId() + "", "", "", "", "", "");
			}

			if (execStat) {
				runStat.updateStatOnConnection("OnSubjobOk33", 0, "ok");
			}

			tDBRow_27Process(globalMap);

		} catch (java.lang.Exception e) {

			TalendException te = new TalendException(e, currentComponent, globalMap);

			throw te;
		} catch (java.lang.Error error) {

			runStat.stopThreadStat();

			throw error;
		} finally {

			try {

				/**
				 * [tDBRow_26 finally ] start
				 */

				currentComponent = "tDBRow_26";

				if (resourceMap.get("statementClosed_tDBRow_26") == null) {
					java.sql.Statement stmtToClose_tDBRow_26 = null;
					if ((stmtToClose_tDBRow_26 = (java.sql.Statement) resourceMap.remove("stmt_tDBRow_26")) != null) {
						stmtToClose_tDBRow_26.close();
					}
				}

				/**
				 * [tDBRow_26 finally ] stop
				 */

				/**
				 * [tDBCommit_26 finally ] start
				 */

				currentComponent = "tDBCommit_26";

				/**
				 * [tDBCommit_26 finally ] stop
				 */

				/**
				 * [tLogRow_33 finally ] start
				 */

				currentComponent = "tLogRow_33";

				/**
				 * [tLogRow_33 finally ] stop
				 */

			} catch (java.lang.Exception e) {
				// ignore
			} catch (java.lang.Error error) {
				// ignore
			}
			resourceMap = null;
		}

		globalMap.put("tDBRow_26_SUBPROCESS_STATE", 1);
	}

	public static class row58Struct implements routines.system.IPersistableRow<row58Struct> {
		final static byte[] commonByteArrayLock_WIPO_PROJECTS_G3b_Mig_UD = new byte[0];
		static byte[] commonByteArray_WIPO_PROJECTS_G3b_Mig_UD = new byte[0];

		public void readData(ObjectInputStream dis) {

			synchronized (commonByteArrayLock_WIPO_PROJECTS_G3b_Mig_UD) {

				try {

					int length = 0;

				}

				finally {
				}

			}

		}

		public void writeData(ObjectOutputStream dos) {
			try {

			}

			finally {
			}

		}

		public String toString() {

			StringBuilder sb = new StringBuilder();
			sb.append(super.toString());
			sb.append("[");
			sb.append("]");

			return sb.toString();
		}

		/**
		 * Compare keys
		 */
		public int compareTo(row58Struct other) {

			int returnValue = -1;

			return returnValue;
		}

		private int checkNullsAndCompare(Object object1, Object object2) {
			int returnValue = 0;
			if (object1 instanceof Comparable && object2 instanceof Comparable) {
				returnValue = ((Comparable) object1).compareTo(object2);
			} else if (object1 != null && object2 != null) {
				returnValue = compareStrings(object1.toString(), object2.toString());
			} else if (object1 == null && object2 != null) {
				returnValue = 1;
			} else if (object1 != null && object2 == null) {
				returnValue = -1;
			} else {
				returnValue = 0;
			}

			return returnValue;
		}

		private int compareStrings(String string1, String string2) {
			return string1.compareTo(string2);
		}

	}

	public static class row59Struct implements routines.system.IPersistableRow<row59Struct> {
		final static byte[] commonByteArrayLock_WIPO_PROJECTS_G3b_Mig_UD = new byte[0];
		static byte[] commonByteArray_WIPO_PROJECTS_G3b_Mig_UD = new byte[0];

		public String errorCode;

		public String getErrorCode() {
			return this.errorCode;
		}

		public String errorMessage;

		public String getErrorMessage() {
			return this.errorMessage;
		}

		private String readString(ObjectInputStream dis) throws IOException {
			String strReturn = null;
			int length = 0;
			length = dis.readInt();
			if (length == -1) {
				strReturn = null;
			} else {
				if (length > commonByteArray_WIPO_PROJECTS_G3b_Mig_UD.length) {
					if (length < 1024 && commonByteArray_WIPO_PROJECTS_G3b_Mig_UD.length == 0) {
						commonByteArray_WIPO_PROJECTS_G3b_Mig_UD = new byte[1024];
					} else {
						commonByteArray_WIPO_PROJECTS_G3b_Mig_UD = new byte[2 * length];
					}
				}
				dis.readFully(commonByteArray_WIPO_PROJECTS_G3b_Mig_UD, 0, length);
				strReturn = new String(commonByteArray_WIPO_PROJECTS_G3b_Mig_UD, 0, length, utf8Charset);
			}
			return strReturn;
		}

		private void writeString(String str, ObjectOutputStream dos) throws IOException {
			if (str == null) {
				dos.writeInt(-1);
			} else {
				byte[] byteArray = str.getBytes(utf8Charset);
				dos.writeInt(byteArray.length);
				dos.write(byteArray);
			}
		}

		public void readData(ObjectInputStream dis) {

			synchronized (commonByteArrayLock_WIPO_PROJECTS_G3b_Mig_UD) {

				try {

					int length = 0;

					this.errorCode = readString(dis);

					this.errorMessage = readString(dis);

				} catch (IOException e) {
					throw new RuntimeException(e);

				}

			}

		}

		public void writeData(ObjectOutputStream dos) {
			try {

				// String

				writeString(this.errorCode, dos);

				// String

				writeString(this.errorMessage, dos);

			} catch (IOException e) {
				throw new RuntimeException(e);
			}

		}

		public String toString() {

			StringBuilder sb = new StringBuilder();
			sb.append(super.toString());
			sb.append("[");
			sb.append("errorCode=" + errorCode);
			sb.append(",errorMessage=" + errorMessage);
			sb.append("]");

			return sb.toString();
		}

		/**
		 * Compare keys
		 */
		public int compareTo(row59Struct other) {

			int returnValue = -1;

			return returnValue;
		}

		private int checkNullsAndCompare(Object object1, Object object2) {
			int returnValue = 0;
			if (object1 instanceof Comparable && object2 instanceof Comparable) {
				returnValue = ((Comparable) object1).compareTo(object2);
			} else if (object1 != null && object2 != null) {
				returnValue = compareStrings(object1.toString(), object2.toString());
			} else if (object1 == null && object2 != null) {
				returnValue = 1;
			} else if (object1 != null && object2 == null) {
				returnValue = -1;
			} else {
				returnValue = 0;
			}

			return returnValue;
		}

		private int compareStrings(String string1, String string2) {
			return string1.compareTo(string2);
		}

	}

	public void tDBRow_27Process(final java.util.Map<String, Object> globalMap) throws TalendException {
		globalMap.put("tDBRow_27_SUBPROCESS_STATE", 0);

		final boolean execStat = this.execStat;

		String iterateId = "";

		String currentComponent = "";
		java.util.Map<String, Object> resourceMap = new java.util.HashMap<String, Object>();

		try {
			// TDI-39566 avoid throwing an useless Exception
			boolean resumeIt = true;
			if (globalResumeTicket == false && resumeEntryMethodName != null) {
				String currentMethodName = new java.lang.Exception().getStackTrace()[0].getMethodName();
				resumeIt = resumeEntryMethodName.equals(currentMethodName);
			}
			if (resumeIt || globalResumeTicket) { // start the resume
				globalResumeTicket = true;

				row58Struct row58 = new row58Struct();
				row59Struct row59 = new row59Struct();

				/**
				 * [tDBCommit_27 begin ] start
				 */

				ok_Hash.put("tDBCommit_27", false);
				start_Hash.put("tDBCommit_27", System.currentTimeMillis());

				currentComponent = "tDBCommit_27";

				if (execStat) {
					runStat.updateStatOnConnection(resourceMap, iterateId, 0, 0, "row58");
				}

				int tos_count_tDBCommit_27 = 0;

				/**
				 * [tDBCommit_27 begin ] stop
				 */

				/**
				 * [tLogRow_34 begin ] start
				 */

				ok_Hash.put("tLogRow_34", false);
				start_Hash.put("tLogRow_34", System.currentTimeMillis());

				currentComponent = "tLogRow_34";

				if (execStat) {
					runStat.updateStatOnConnection(resourceMap, iterateId, 0, 0, "row59");
				}

				int tos_count_tLogRow_34 = 0;

				///////////////////////

				final String OUTPUT_FIELD_SEPARATOR_tLogRow_34 = "|";
				java.io.PrintStream consoleOut_tLogRow_34 = null;

				StringBuilder strBuffer_tLogRow_34 = null;
				int nb_line_tLogRow_34 = 0;
///////////////////////    			

				/**
				 * [tLogRow_34 begin ] stop
				 */

				/**
				 * [tDBRow_27 begin ] start
				 */

				ok_Hash.put("tDBRow_27", false);
				start_Hash.put("tDBRow_27", System.currentTimeMillis());

				tStatCatcher_1.addMessage("begin", "tDBRow_27");
				tStatCatcher_1Process(globalMap);

				currentComponent = "tDBRow_27";

				int tos_count_tDBRow_27 = 0;

				java.sql.Connection conn_tDBRow_27 = null;
				String query_tDBRow_27 = "";
				boolean whetherReject_tDBRow_27 = false;
				conn_tDBRow_27 = (java.sql.Connection) globalMap.get("conn_tMSSqlConnection_3");

				resourceMap.put("conn_tDBRow_27", conn_tDBRow_27);
				java.sql.Statement stmt_tDBRow_27 = conn_tDBRow_27.createStatement();
				resourceMap.put("stmt_tDBRow_27", stmt_tDBRow_27);

				/**
				 * [tDBRow_27 begin ] stop
				 */

				/**
				 * [tDBRow_27 main ] start
				 */

				currentComponent = "tDBRow_27";

				row58 = null;

				row59 = null;

				query_tDBRow_27 = "\nALTER TABLE IP_USERDOC_TYPES NOCHECK CONSTRAINT PROMOCION_TIPO_FK_TRAMITE;\n\nINSERT INTO  IP_USERDOC_TYPES   \n					"
						+ "		( ROW_VERSION , \n							DOC_ORI , \n							DOC_LOG , \n							DOC_SER , \n							DOC_NBR , \n							USERDOC_TYP , \n	"
						+ "						PROC_TYP , \n							PROC_NBR )  \n					SELECT\n							 1,\n							 DOC_ORI,\n							 'E',\n							 DOC_SERIES,\n		"
						+ "					 DOC_NBR,\n							 USERDOC_TYPE,\n							 USERDOC_PROC_TYP,\n							 USERDOC_PROC_NBR\n					FROM  WRK_USERDOC;\n\n";
				whetherReject_tDBRow_27 = false;
				globalMap.put("tDBRow_27_QUERY", query_tDBRow_27);
				try {
					stmt_tDBRow_27.execute(query_tDBRow_27);

				} catch (java.lang.Exception e) {
					whetherReject_tDBRow_27 = true;

					row59 = new row59Struct();

					row59.errorCode = ((java.sql.SQLException) e).getSQLState();
					row59.errorMessage = e.getMessage() + " - Line: " + tos_count_tDBRow_27;

				}

				if (!whetherReject_tDBRow_27) {

					row58 = new row58Struct();

				}

				tos_count_tDBRow_27++;

				/**
				 * [tDBRow_27 main ] stop
				 */

				/**
				 * [tDBRow_27 process_data_begin ] start
				 */

				currentComponent = "tDBRow_27";

				/**
				 * [tDBRow_27 process_data_begin ] stop
				 */
// Start of branch "row58"
				if (row58 != null) {

					/**
					 * [tDBCommit_27 main ] start
					 */

					currentComponent = "tDBCommit_27";

					if (execStat) {
						runStat.updateStatOnConnection(iterateId, 1, 1

								, "row58"

						);
					}

					java.sql.Connection conn_tDBCommit_27 = (java.sql.Connection) globalMap
							.get("conn_tMSSqlConnection_3");
					if (conn_tDBCommit_27 != null && !conn_tDBCommit_27.isClosed()) {

						conn_tDBCommit_27.commit();

					}

					tos_count_tDBCommit_27++;

					/**
					 * [tDBCommit_27 main ] stop
					 */

					/**
					 * [tDBCommit_27 process_data_begin ] start
					 */

					currentComponent = "tDBCommit_27";

					/**
					 * [tDBCommit_27 process_data_begin ] stop
					 */

					/**
					 * [tDBCommit_27 process_data_end ] start
					 */

					currentComponent = "tDBCommit_27";

					/**
					 * [tDBCommit_27 process_data_end ] stop
					 */

				} // End of branch "row58"

// Start of branch "row59"
				if (row59 != null) {

					/**
					 * [tLogRow_34 main ] start
					 */

					currentComponent = "tLogRow_34";

					if (execStat) {
						runStat.updateStatOnConnection(iterateId, 1, 1

								, "row59"

						);
					}

///////////////////////		

					strBuffer_tLogRow_34 = new StringBuilder();

					if (row59.errorCode != null) { //

						strBuffer_tLogRow_34.append(String.valueOf(row59.errorCode));

					} //

					strBuffer_tLogRow_34.append("|");

					if (row59.errorMessage != null) { //

						strBuffer_tLogRow_34.append(String.valueOf(row59.errorMessage));

					} //

					if (globalMap.get("tLogRow_CONSOLE") != null) {
						consoleOut_tLogRow_34 = (java.io.PrintStream) globalMap.get("tLogRow_CONSOLE");
					} else {
						consoleOut_tLogRow_34 = new java.io.PrintStream(new java.io.BufferedOutputStream(System.out));
						globalMap.put("tLogRow_CONSOLE", consoleOut_tLogRow_34);
					}
					consoleOut_tLogRow_34.println(strBuffer_tLogRow_34.toString());
					consoleOut_tLogRow_34.flush();
					nb_line_tLogRow_34++;
//////

//////                    

///////////////////////    			

					tos_count_tLogRow_34++;

					/**
					 * [tLogRow_34 main ] stop
					 */

					/**
					 * [tLogRow_34 process_data_begin ] start
					 */

					currentComponent = "tLogRow_34";

					/**
					 * [tLogRow_34 process_data_begin ] stop
					 */

					/**
					 * [tLogRow_34 process_data_end ] start
					 */

					currentComponent = "tLogRow_34";

					/**
					 * [tLogRow_34 process_data_end ] stop
					 */

				} // End of branch "row59"

				/**
				 * [tDBRow_27 process_data_end ] start
				 */

				currentComponent = "tDBRow_27";

				/**
				 * [tDBRow_27 process_data_end ] stop
				 */

				/**
				 * [tDBRow_27 end ] start
				 */

				currentComponent = "tDBRow_27";

				stmt_tDBRow_27.close();
				resourceMap.remove("stmt_tDBRow_27");
				resourceMap.put("statementClosed_tDBRow_27", true);
				resourceMap.put("finish_tDBRow_27", true);

				ok_Hash.put("tDBRow_27", true);
				end_Hash.put("tDBRow_27", System.currentTimeMillis());

				tStatCatcher_1.addMessage("end", "tDBRow_27", end_Hash.get("tDBRow_27") - start_Hash.get("tDBRow_27"));
				tStatCatcher_1Process(globalMap);

				/**
				 * [tDBRow_27 end ] stop
				 */

				/**
				 * [tDBCommit_27 end ] start
				 */

				currentComponent = "tDBCommit_27";

				if (execStat) {
					runStat.updateStat(resourceMap, iterateId, 2, 0, "row58");
				}

				ok_Hash.put("tDBCommit_27", true);
				end_Hash.put("tDBCommit_27", System.currentTimeMillis());

				/**
				 * [tDBCommit_27 end ] stop
				 */

				/**
				 * [tLogRow_34 end ] start
				 */

				currentComponent = "tLogRow_34";

//////
//////
				globalMap.put("tLogRow_34_NB_LINE", nb_line_tLogRow_34);

///////////////////////    			

				if (execStat) {
					runStat.updateStat(resourceMap, iterateId, 2, 0, "row59");
				}

				ok_Hash.put("tLogRow_34", true);
				end_Hash.put("tLogRow_34", System.currentTimeMillis());

				/**
				 * [tLogRow_34 end ] stop
				 */

			} // end the resume

			if (resumeEntryMethodName == null || globalResumeTicket) {
				resumeUtil.addLog("CHECKPOINT", "CONNECTION:SUBJOB_OK:tDBRow_27:OnSubjobOk", "",
						Thread.currentThread().getId() + "", "", "", "", "", "");
			}

			if (execStat) {
				runStat.updateStatOnConnection("OnSubjobOk34", 0, "ok");
			}

			tDBRow_28Process(globalMap);

		} catch (java.lang.Exception e) {

			TalendException te = new TalendException(e, currentComponent, globalMap);

			throw te;
		} catch (java.lang.Error error) {

			runStat.stopThreadStat();

			throw error;
		} finally {

			try {

				/**
				 * [tDBRow_27 finally ] start
				 */

				currentComponent = "tDBRow_27";

				if (resourceMap.get("statementClosed_tDBRow_27") == null) {
					java.sql.Statement stmtToClose_tDBRow_27 = null;
					if ((stmtToClose_tDBRow_27 = (java.sql.Statement) resourceMap.remove("stmt_tDBRow_27")) != null) {
						stmtToClose_tDBRow_27.close();
					}
				}

				/**
				 * [tDBRow_27 finally ] stop
				 */

				/**
				 * [tDBCommit_27 finally ] start
				 */

				currentComponent = "tDBCommit_27";

				/**
				 * [tDBCommit_27 finally ] stop
				 */

				/**
				 * [tLogRow_34 finally ] start
				 */

				currentComponent = "tLogRow_34";

				/**
				 * [tLogRow_34 finally ] stop
				 */

			} catch (java.lang.Exception e) {
				// ignore
			} catch (java.lang.Error error) {
				// ignore
			}
			resourceMap = null;
		}

		globalMap.put("tDBRow_27_SUBPROCESS_STATE", 1);
	}

	public static class row60Struct implements routines.system.IPersistableRow<row60Struct> {
		final static byte[] commonByteArrayLock_WIPO_PROJECTS_G3b_Mig_UD = new byte[0];
		static byte[] commonByteArray_WIPO_PROJECTS_G3b_Mig_UD = new byte[0];

		public void readData(ObjectInputStream dis) {

			synchronized (commonByteArrayLock_WIPO_PROJECTS_G3b_Mig_UD) {

				try {

					int length = 0;

				}

				finally {
				}

			}

		}

		public void writeData(ObjectOutputStream dos) {
			try {

			}

			finally {
			}

		}

		public String toString() {

			StringBuilder sb = new StringBuilder();
			sb.append(super.toString());
			sb.append("[");
			sb.append("]");

			return sb.toString();
		}

		/**
		 * Compare keys
		 */
		public int compareTo(row60Struct other) {

			int returnValue = -1;

			return returnValue;
		}

		private int checkNullsAndCompare(Object object1, Object object2) {
			int returnValue = 0;
			if (object1 instanceof Comparable && object2 instanceof Comparable) {
				returnValue = ((Comparable) object1).compareTo(object2);
			} else if (object1 != null && object2 != null) {
				returnValue = compareStrings(object1.toString(), object2.toString());
			} else if (object1 == null && object2 != null) {
				returnValue = 1;
			} else if (object1 != null && object2 == null) {
				returnValue = -1;
			} else {
				returnValue = 0;
			}

			return returnValue;
		}

		private int compareStrings(String string1, String string2) {
			return string1.compareTo(string2);
		}

	}

	public static class row61Struct implements routines.system.IPersistableRow<row61Struct> {
		final static byte[] commonByteArrayLock_WIPO_PROJECTS_G3b_Mig_UD = new byte[0];
		static byte[] commonByteArray_WIPO_PROJECTS_G3b_Mig_UD = new byte[0];

		public String errorCode;

		public String getErrorCode() {
			return this.errorCode;
		}

		public String errorMessage;

		public String getErrorMessage() {
			return this.errorMessage;
		}

		private String readString(ObjectInputStream dis) throws IOException {
			String strReturn = null;
			int length = 0;
			length = dis.readInt();
			if (length == -1) {
				strReturn = null;
			} else {
				if (length > commonByteArray_WIPO_PROJECTS_G3b_Mig_UD.length) {
					if (length < 1024 && commonByteArray_WIPO_PROJECTS_G3b_Mig_UD.length == 0) {
						commonByteArray_WIPO_PROJECTS_G3b_Mig_UD = new byte[1024];
					} else {
						commonByteArray_WIPO_PROJECTS_G3b_Mig_UD = new byte[2 * length];
					}
				}
				dis.readFully(commonByteArray_WIPO_PROJECTS_G3b_Mig_UD, 0, length);
				strReturn = new String(commonByteArray_WIPO_PROJECTS_G3b_Mig_UD, 0, length, utf8Charset);
			}
			return strReturn;
		}

		private void writeString(String str, ObjectOutputStream dos) throws IOException {
			if (str == null) {
				dos.writeInt(-1);
			} else {
				byte[] byteArray = str.getBytes(utf8Charset);
				dos.writeInt(byteArray.length);
				dos.write(byteArray);
			}
		}

		public void readData(ObjectInputStream dis) {

			synchronized (commonByteArrayLock_WIPO_PROJECTS_G3b_Mig_UD) {

				try {

					int length = 0;

					this.errorCode = readString(dis);

					this.errorMessage = readString(dis);

				} catch (IOException e) {
					throw new RuntimeException(e);

				}

			}

		}

		public void writeData(ObjectOutputStream dos) {
			try {

				// String

				writeString(this.errorCode, dos);

				// String

				writeString(this.errorMessage, dos);

			} catch (IOException e) {
				throw new RuntimeException(e);
			}

		}

		public String toString() {

			StringBuilder sb = new StringBuilder();
			sb.append(super.toString());
			sb.append("[");
			sb.append("errorCode=" + errorCode);
			sb.append(",errorMessage=" + errorMessage);
			sb.append("]");

			return sb.toString();
		}

		/**
		 * Compare keys
		 */
		public int compareTo(row61Struct other) {

			int returnValue = -1;

			return returnValue;
		}

		private int checkNullsAndCompare(Object object1, Object object2) {
			int returnValue = 0;
			if (object1 instanceof Comparable && object2 instanceof Comparable) {
				returnValue = ((Comparable) object1).compareTo(object2);
			} else if (object1 != null && object2 != null) {
				returnValue = compareStrings(object1.toString(), object2.toString());
			} else if (object1 == null && object2 != null) {
				returnValue = 1;
			} else if (object1 != null && object2 == null) {
				returnValue = -1;
			} else {
				returnValue = 0;
			}

			return returnValue;
		}

		private int compareStrings(String string1, String string2) {
			return string1.compareTo(string2);
		}

	}

	public void tDBRow_28Process(final java.util.Map<String, Object> globalMap) throws TalendException {
		globalMap.put("tDBRow_28_SUBPROCESS_STATE", 0);

		final boolean execStat = this.execStat;

		String iterateId = "";

		String currentComponent = "";
		java.util.Map<String, Object> resourceMap = new java.util.HashMap<String, Object>();

		try {
			// TDI-39566 avoid throwing an useless Exception
			boolean resumeIt = true;
			if (globalResumeTicket == false && resumeEntryMethodName != null) {
				String currentMethodName = new java.lang.Exception().getStackTrace()[0].getMethodName();
				resumeIt = resumeEntryMethodName.equals(currentMethodName);
			}
			if (resumeIt || globalResumeTicket) { // start the resume
				globalResumeTicket = true;

				row60Struct row60 = new row60Struct();
				row61Struct row61 = new row61Struct();

				/**
				 * [tDBCommit_28 begin ] start
				 */

				ok_Hash.put("tDBCommit_28", false);
				start_Hash.put("tDBCommit_28", System.currentTimeMillis());

				currentComponent = "tDBCommit_28";

				if (execStat) {
					runStat.updateStatOnConnection(resourceMap, iterateId, 0, 0, "row60");
				}

				int tos_count_tDBCommit_28 = 0;

				/**
				 * [tDBCommit_28 begin ] stop
				 */

				/**
				 * [tLogRow_35 begin ] start
				 */

				ok_Hash.put("tLogRow_35", false);
				start_Hash.put("tLogRow_35", System.currentTimeMillis());

				currentComponent = "tLogRow_35";

				if (execStat) {
					runStat.updateStatOnConnection(resourceMap, iterateId, 0, 0, "row61");
				}

				int tos_count_tLogRow_35 = 0;

				///////////////////////

				final String OUTPUT_FIELD_SEPARATOR_tLogRow_35 = "|";
				java.io.PrintStream consoleOut_tLogRow_35 = null;

				StringBuilder strBuffer_tLogRow_35 = null;
				int nb_line_tLogRow_35 = 0;
///////////////////////    			

				/**
				 * [tLogRow_35 begin ] stop
				 */

				/**
				 * [tDBRow_28 begin ] start
				 */

				ok_Hash.put("tDBRow_28", false);
				start_Hash.put("tDBRow_28", System.currentTimeMillis());

				tStatCatcher_1.addMessage("begin", "tDBRow_28");
				tStatCatcher_1Process(globalMap);

				currentComponent = "tDBRow_28";

				int tos_count_tDBRow_28 = 0;

				java.sql.Connection conn_tDBRow_28 = null;
				String query_tDBRow_28 = "";
				boolean whetherReject_tDBRow_28 = false;
				conn_tDBRow_28 = (java.sql.Connection) globalMap.get("conn_tMSSqlConnection_3");

				resourceMap.put("conn_tDBRow_28", conn_tDBRow_28);
				java.sql.Statement stmt_tDBRow_28 = conn_tDBRow_28.createStatement();
				resourceMap.put("stmt_tDBRow_28", stmt_tDBRow_28);

				/**
				 * [tDBRow_28 begin ] stop
				 */

				/**
				 * [tDBRow_28 main ] start
				 */

				currentComponent = "tDBRow_28";

				row60 = null;

				row61 = null;

				query_tDBRow_28 = "\nALTER TABLE IP_USERDOC_TYPES CHECK CONSTRAINT PROMOCION_TIPO_FK_TRAMITE;\nINSERT INTO  IP_ACTION   \n				( ROW_VERSIO"
						+ "N , \n				PROC_TYP , \n				PROC_NBR , \n				ACTION_NBR , \n				ACTION_TYP , \n				ACTION_DATE , \n				CAPTURE_DATE , \n	"
						+ "			SIGNATURE_DATE , \n				CAPTURE_USER_ID , \n				AUTHORISING_USER_ID , \n				NOTES2 , \n				NOTES3 , \n				NOTES4 , \n	"
						+ "			NOTES5 , \n				ACTION_NOTES , \n				IND_CHANGES_STATUS , \n				NEW_STATUS_CODE , \n				PRIOR_STATUS_CODE , \n				PRIO"
						+ "R_STATUS_DATE , \n				PRIOR_DUE_DATE , \n				NOTES1)  \n		SELECT\n				 1,\n				 USERDOC_PROC_TYP,\n				 USERDOC_PROC_NBR"
						+ ",\n				 ACTION_NBR,\n				 ACTION_TYPE,\n				 ACTION_DATE,\n				 ACTION_DATE,\n				 ACTION_DATE,\n				 ACTION_USER,\n				"
						+ " ACTION_USER,\n				 ACTION_NOTES2,\n				 ACTION_NOTES3,\n				 ACTION_NOTES4,\n				 ACTION_NOTES5,\n				 GENERAL_NOTES,\n"
						+ "				 'N',\n				 null,\n				 null,\n				 null,\n				 null,\n				 ACTION_NOTES1\n		FROM  wrk_userdoc_actions T JOIN wrk_us"
						+ "erdoc U ON U.userdoc_seq  = T.userdoc_seq\n			 AND	U.userdoc_series  = T.userdoc_series\n			 AND	U.userdoc_nbr  = T.user"
						+ "doc_nbr  \n		WHERE	 USERDOC_PROC_TYP  is not null\n		 AND	ACTION_CATEGORY  = 'N';\n	\n";
				whetherReject_tDBRow_28 = false;
				globalMap.put("tDBRow_28_QUERY", query_tDBRow_28);
				try {
					stmt_tDBRow_28.execute(query_tDBRow_28);

				} catch (java.lang.Exception e) {
					whetherReject_tDBRow_28 = true;

					row61 = new row61Struct();

					row61.errorCode = ((java.sql.SQLException) e).getSQLState();
					row61.errorMessage = e.getMessage() + " - Line: " + tos_count_tDBRow_28;

				}

				if (!whetherReject_tDBRow_28) {

					row60 = new row60Struct();

				}

				tos_count_tDBRow_28++;

				/**
				 * [tDBRow_28 main ] stop
				 */

				/**
				 * [tDBRow_28 process_data_begin ] start
				 */

				currentComponent = "tDBRow_28";

				/**
				 * [tDBRow_28 process_data_begin ] stop
				 */
// Start of branch "row60"
				if (row60 != null) {

					/**
					 * [tDBCommit_28 main ] start
					 */

					currentComponent = "tDBCommit_28";

					if (execStat) {
						runStat.updateStatOnConnection(iterateId, 1, 1

								, "row60"

						);
					}

					java.sql.Connection conn_tDBCommit_28 = (java.sql.Connection) globalMap
							.get("conn_tMSSqlConnection_3");
					if (conn_tDBCommit_28 != null && !conn_tDBCommit_28.isClosed()) {

						conn_tDBCommit_28.commit();

					}

					tos_count_tDBCommit_28++;

					/**
					 * [tDBCommit_28 main ] stop
					 */

					/**
					 * [tDBCommit_28 process_data_begin ] start
					 */

					currentComponent = "tDBCommit_28";

					/**
					 * [tDBCommit_28 process_data_begin ] stop
					 */

					/**
					 * [tDBCommit_28 process_data_end ] start
					 */

					currentComponent = "tDBCommit_28";

					/**
					 * [tDBCommit_28 process_data_end ] stop
					 */

				} // End of branch "row60"

// Start of branch "row61"
				if (row61 != null) {

					/**
					 * [tLogRow_35 main ] start
					 */

					currentComponent = "tLogRow_35";

					if (execStat) {
						runStat.updateStatOnConnection(iterateId, 1, 1

								, "row61"

						);
					}

///////////////////////		

					strBuffer_tLogRow_35 = new StringBuilder();

					if (row61.errorCode != null) { //

						strBuffer_tLogRow_35.append(String.valueOf(row61.errorCode));

					} //

					strBuffer_tLogRow_35.append("|");

					if (row61.errorMessage != null) { //

						strBuffer_tLogRow_35.append(String.valueOf(row61.errorMessage));

					} //

					if (globalMap.get("tLogRow_CONSOLE") != null) {
						consoleOut_tLogRow_35 = (java.io.PrintStream) globalMap.get("tLogRow_CONSOLE");
					} else {
						consoleOut_tLogRow_35 = new java.io.PrintStream(new java.io.BufferedOutputStream(System.out));
						globalMap.put("tLogRow_CONSOLE", consoleOut_tLogRow_35);
					}
					consoleOut_tLogRow_35.println(strBuffer_tLogRow_35.toString());
					consoleOut_tLogRow_35.flush();
					nb_line_tLogRow_35++;
//////

//////                    

///////////////////////    			

					tos_count_tLogRow_35++;

					/**
					 * [tLogRow_35 main ] stop
					 */

					/**
					 * [tLogRow_35 process_data_begin ] start
					 */

					currentComponent = "tLogRow_35";

					/**
					 * [tLogRow_35 process_data_begin ] stop
					 */

					/**
					 * [tLogRow_35 process_data_end ] start
					 */

					currentComponent = "tLogRow_35";

					/**
					 * [tLogRow_35 process_data_end ] stop
					 */

				} // End of branch "row61"

				/**
				 * [tDBRow_28 process_data_end ] start
				 */

				currentComponent = "tDBRow_28";

				/**
				 * [tDBRow_28 process_data_end ] stop
				 */

				/**
				 * [tDBRow_28 end ] start
				 */

				currentComponent = "tDBRow_28";

				stmt_tDBRow_28.close();
				resourceMap.remove("stmt_tDBRow_28");
				resourceMap.put("statementClosed_tDBRow_28", true);
				resourceMap.put("finish_tDBRow_28", true);

				ok_Hash.put("tDBRow_28", true);
				end_Hash.put("tDBRow_28", System.currentTimeMillis());

				tStatCatcher_1.addMessage("end", "tDBRow_28", end_Hash.get("tDBRow_28") - start_Hash.get("tDBRow_28"));
				tStatCatcher_1Process(globalMap);

				/**
				 * [tDBRow_28 end ] stop
				 */

				/**
				 * [tDBCommit_28 end ] start
				 */

				currentComponent = "tDBCommit_28";

				if (execStat) {
					runStat.updateStat(resourceMap, iterateId, 2, 0, "row60");
				}

				ok_Hash.put("tDBCommit_28", true);
				end_Hash.put("tDBCommit_28", System.currentTimeMillis());

				/**
				 * [tDBCommit_28 end ] stop
				 */

				/**
				 * [tLogRow_35 end ] start
				 */

				currentComponent = "tLogRow_35";

//////
//////
				globalMap.put("tLogRow_35_NB_LINE", nb_line_tLogRow_35);

///////////////////////    			

				if (execStat) {
					runStat.updateStat(resourceMap, iterateId, 2, 0, "row61");
				}

				ok_Hash.put("tLogRow_35", true);
				end_Hash.put("tLogRow_35", System.currentTimeMillis());

				/**
				 * [tLogRow_35 end ] stop
				 */

			} // end the resume

			if (resumeEntryMethodName == null || globalResumeTicket) {
				resumeUtil.addLog("CHECKPOINT", "CONNECTION:SUBJOB_OK:tDBRow_28:OnSubjobOk", "",
						Thread.currentThread().getId() + "", "", "", "", "", "");
			}

			if (execStat) {
				runStat.updateStatOnConnection("OnSubjobOk36", 0, "ok");
			}

			tDBRow_29Process(globalMap);

		} catch (java.lang.Exception e) {

			TalendException te = new TalendException(e, currentComponent, globalMap);

			throw te;
		} catch (java.lang.Error error) {

			runStat.stopThreadStat();

			throw error;
		} finally {

			try {

				/**
				 * [tDBRow_28 finally ] start
				 */

				currentComponent = "tDBRow_28";

				if (resourceMap.get("statementClosed_tDBRow_28") == null) {
					java.sql.Statement stmtToClose_tDBRow_28 = null;
					if ((stmtToClose_tDBRow_28 = (java.sql.Statement) resourceMap.remove("stmt_tDBRow_28")) != null) {
						stmtToClose_tDBRow_28.close();
					}
				}

				/**
				 * [tDBRow_28 finally ] stop
				 */

				/**
				 * [tDBCommit_28 finally ] start
				 */

				currentComponent = "tDBCommit_28";

				/**
				 * [tDBCommit_28 finally ] stop
				 */

				/**
				 * [tLogRow_35 finally ] start
				 */

				currentComponent = "tLogRow_35";

				/**
				 * [tLogRow_35 finally ] stop
				 */

			} catch (java.lang.Exception e) {
				// ignore
			} catch (java.lang.Error error) {
				// ignore
			}
			resourceMap = null;
		}

		globalMap.put("tDBRow_28_SUBPROCESS_STATE", 1);
	}

	public static class row62Struct implements routines.system.IPersistableRow<row62Struct> {
		final static byte[] commonByteArrayLock_WIPO_PROJECTS_G3b_Mig_UD = new byte[0];
		static byte[] commonByteArray_WIPO_PROJECTS_G3b_Mig_UD = new byte[0];

		public void readData(ObjectInputStream dis) {

			synchronized (commonByteArrayLock_WIPO_PROJECTS_G3b_Mig_UD) {

				try {

					int length = 0;

				}

				finally {
				}

			}

		}

		public void writeData(ObjectOutputStream dos) {
			try {

			}

			finally {
			}

		}

		public String toString() {

			StringBuilder sb = new StringBuilder();
			sb.append(super.toString());
			sb.append("[");
			sb.append("]");

			return sb.toString();
		}

		/**
		 * Compare keys
		 */
		public int compareTo(row62Struct other) {

			int returnValue = -1;

			return returnValue;
		}

		private int checkNullsAndCompare(Object object1, Object object2) {
			int returnValue = 0;
			if (object1 instanceof Comparable && object2 instanceof Comparable) {
				returnValue = ((Comparable) object1).compareTo(object2);
			} else if (object1 != null && object2 != null) {
				returnValue = compareStrings(object1.toString(), object2.toString());
			} else if (object1 == null && object2 != null) {
				returnValue = 1;
			} else if (object1 != null && object2 == null) {
				returnValue = -1;
			} else {
				returnValue = 0;
			}

			return returnValue;
		}

		private int compareStrings(String string1, String string2) {
			return string1.compareTo(string2);
		}

	}

	public static class row63Struct implements routines.system.IPersistableRow<row63Struct> {
		final static byte[] commonByteArrayLock_WIPO_PROJECTS_G3b_Mig_UD = new byte[0];
		static byte[] commonByteArray_WIPO_PROJECTS_G3b_Mig_UD = new byte[0];

		public String errorCode;

		public String getErrorCode() {
			return this.errorCode;
		}

		public String errorMessage;

		public String getErrorMessage() {
			return this.errorMessage;
		}

		private String readString(ObjectInputStream dis) throws IOException {
			String strReturn = null;
			int length = 0;
			length = dis.readInt();
			if (length == -1) {
				strReturn = null;
			} else {
				if (length > commonByteArray_WIPO_PROJECTS_G3b_Mig_UD.length) {
					if (length < 1024 && commonByteArray_WIPO_PROJECTS_G3b_Mig_UD.length == 0) {
						commonByteArray_WIPO_PROJECTS_G3b_Mig_UD = new byte[1024];
					} else {
						commonByteArray_WIPO_PROJECTS_G3b_Mig_UD = new byte[2 * length];
					}
				}
				dis.readFully(commonByteArray_WIPO_PROJECTS_G3b_Mig_UD, 0, length);
				strReturn = new String(commonByteArray_WIPO_PROJECTS_G3b_Mig_UD, 0, length, utf8Charset);
			}
			return strReturn;
		}

		private void writeString(String str, ObjectOutputStream dos) throws IOException {
			if (str == null) {
				dos.writeInt(-1);
			} else {
				byte[] byteArray = str.getBytes(utf8Charset);
				dos.writeInt(byteArray.length);
				dos.write(byteArray);
			}
		}

		public void readData(ObjectInputStream dis) {

			synchronized (commonByteArrayLock_WIPO_PROJECTS_G3b_Mig_UD) {

				try {

					int length = 0;

					this.errorCode = readString(dis);

					this.errorMessage = readString(dis);

				} catch (IOException e) {
					throw new RuntimeException(e);

				}

			}

		}

		public void writeData(ObjectOutputStream dos) {
			try {

				// String

				writeString(this.errorCode, dos);

				// String

				writeString(this.errorMessage, dos);

			} catch (IOException e) {
				throw new RuntimeException(e);
			}

		}

		public String toString() {

			StringBuilder sb = new StringBuilder();
			sb.append(super.toString());
			sb.append("[");
			sb.append("errorCode=" + errorCode);
			sb.append(",errorMessage=" + errorMessage);
			sb.append("]");

			return sb.toString();
		}

		/**
		 * Compare keys
		 */
		public int compareTo(row63Struct other) {

			int returnValue = -1;

			return returnValue;
		}

		private int checkNullsAndCompare(Object object1, Object object2) {
			int returnValue = 0;
			if (object1 instanceof Comparable && object2 instanceof Comparable) {
				returnValue = ((Comparable) object1).compareTo(object2);
			} else if (object1 != null && object2 != null) {
				returnValue = compareStrings(object1.toString(), object2.toString());
			} else if (object1 == null && object2 != null) {
				returnValue = 1;
			} else if (object1 != null && object2 == null) {
				returnValue = -1;
			} else {
				returnValue = 0;
			}

			return returnValue;
		}

		private int compareStrings(String string1, String string2) {
			return string1.compareTo(string2);
		}

	}

	public void tDBRow_29Process(final java.util.Map<String, Object> globalMap) throws TalendException {
		globalMap.put("tDBRow_29_SUBPROCESS_STATE", 0);

		final boolean execStat = this.execStat;

		String iterateId = "";

		String currentComponent = "";
		java.util.Map<String, Object> resourceMap = new java.util.HashMap<String, Object>();

		try {
			// TDI-39566 avoid throwing an useless Exception
			boolean resumeIt = true;
			if (globalResumeTicket == false && resumeEntryMethodName != null) {
				String currentMethodName = new java.lang.Exception().getStackTrace()[0].getMethodName();
				resumeIt = resumeEntryMethodName.equals(currentMethodName);
			}
			if (resumeIt || globalResumeTicket) { // start the resume
				globalResumeTicket = true;

				row62Struct row62 = new row62Struct();
				row63Struct row63 = new row63Struct();

				/**
				 * [tDBCommit_29 begin ] start
				 */

				ok_Hash.put("tDBCommit_29", false);
				start_Hash.put("tDBCommit_29", System.currentTimeMillis());

				currentComponent = "tDBCommit_29";

				if (execStat) {
					runStat.updateStatOnConnection(resourceMap, iterateId, 0, 0, "row62");
				}

				int tos_count_tDBCommit_29 = 0;

				/**
				 * [tDBCommit_29 begin ] stop
				 */

				/**
				 * [tLogRow_36 begin ] start
				 */

				ok_Hash.put("tLogRow_36", false);
				start_Hash.put("tLogRow_36", System.currentTimeMillis());

				currentComponent = "tLogRow_36";

				if (execStat) {
					runStat.updateStatOnConnection(resourceMap, iterateId, 0, 0, "row63");
				}

				int tos_count_tLogRow_36 = 0;

				///////////////////////

				final String OUTPUT_FIELD_SEPARATOR_tLogRow_36 = "|";
				java.io.PrintStream consoleOut_tLogRow_36 = null;

				StringBuilder strBuffer_tLogRow_36 = null;
				int nb_line_tLogRow_36 = 0;
///////////////////////    			

				/**
				 * [tLogRow_36 begin ] stop
				 */

				/**
				 * [tDBRow_29 begin ] start
				 */

				ok_Hash.put("tDBRow_29", false);
				start_Hash.put("tDBRow_29", System.currentTimeMillis());

				tStatCatcher_1.addMessage("begin", "tDBRow_29");
				tStatCatcher_1Process(globalMap);

				currentComponent = "tDBRow_29";

				int tos_count_tDBRow_29 = 0;

				java.sql.Connection conn_tDBRow_29 = null;
				String query_tDBRow_29 = "";
				boolean whetherReject_tDBRow_29 = false;
				conn_tDBRow_29 = (java.sql.Connection) globalMap.get("conn_tMSSqlConnection_3");

				resourceMap.put("conn_tDBRow_29", conn_tDBRow_29);
				java.sql.Statement stmt_tDBRow_29 = conn_tDBRow_29.createStatement();
				resourceMap.put("stmt_tDBRow_29", stmt_tDBRow_29);

				/**
				 * [tDBRow_29 begin ] stop
				 */

				/**
				 * [tDBRow_29 main ] start
				 */

				currentComponent = "tDBRow_29";

				row62 = null;

				row63 = null;

				query_tDBRow_29 = "\nINSERT INTO  IP_DOC_PAYMENTS   \n				( ROW_VERSION , \n				DOC_ORI , \n				DOC_LOG , \n				DOC_SER , \n				DOC_NBR , "
						+ "\n				RECEIPT_NBR , \n				RECEIPT_DATE , \n				RECEIPT_AMOUNT , \n				RECEIPT_TYP , \n				CURRENCY_TYP )  \n		SELECT\n		"
						+ "		 1,\n				 DOC_ORI,\n				 'E',\n				 DOC_SERIES,\n				 DOC_NBR,\n				 RECEIPT_NBR,\n				 RECEIPT_DATE,\n				 RECEIPT_AM"
						+ "OUNT,\n				 RECEIPT_TYPE,\n				 CURRENCY_TYPE\n		FROM   ["
						+ context.intermediateDB
						+ "].[dbo].VW_import_userdoc_payments T JOIN wrk_userdoc U ON U.userdoc_seq  = T.userdoc_seq\n			 AND	U.userdoc_series  = "
						+ "T.userdoc_series\n			 AND	U.userdoc_nbr  = T.userdoc_nbr  ;\n";
				whetherReject_tDBRow_29 = false;
				globalMap.put("tDBRow_29_QUERY", query_tDBRow_29);
				try {
					stmt_tDBRow_29.execute(query_tDBRow_29);

				} catch (java.lang.Exception e) {
					whetherReject_tDBRow_29 = true;

					row63 = new row63Struct();

					row63.errorCode = ((java.sql.SQLException) e).getSQLState();
					row63.errorMessage = e.getMessage() + " - Line: " + tos_count_tDBRow_29;

				}

				if (!whetherReject_tDBRow_29) {

					row62 = new row62Struct();

				}

				tos_count_tDBRow_29++;

				/**
				 * [tDBRow_29 main ] stop
				 */

				/**
				 * [tDBRow_29 process_data_begin ] start
				 */

				currentComponent = "tDBRow_29";

				/**
				 * [tDBRow_29 process_data_begin ] stop
				 */
// Start of branch "row62"
				if (row62 != null) {

					/**
					 * [tDBCommit_29 main ] start
					 */

					currentComponent = "tDBCommit_29";

					if (execStat) {
						runStat.updateStatOnConnection(iterateId, 1, 1

								, "row62"

						);
					}

					java.sql.Connection conn_tDBCommit_29 = (java.sql.Connection) globalMap
							.get("conn_tMSSqlConnection_3");
					if (conn_tDBCommit_29 != null && !conn_tDBCommit_29.isClosed()) {

						conn_tDBCommit_29.commit();

					}

					tos_count_tDBCommit_29++;

					/**
					 * [tDBCommit_29 main ] stop
					 */

					/**
					 * [tDBCommit_29 process_data_begin ] start
					 */

					currentComponent = "tDBCommit_29";

					/**
					 * [tDBCommit_29 process_data_begin ] stop
					 */

					/**
					 * [tDBCommit_29 process_data_end ] start
					 */

					currentComponent = "tDBCommit_29";

					/**
					 * [tDBCommit_29 process_data_end ] stop
					 */

				} // End of branch "row62"

// Start of branch "row63"
				if (row63 != null) {

					/**
					 * [tLogRow_36 main ] start
					 */

					currentComponent = "tLogRow_36";

					if (execStat) {
						runStat.updateStatOnConnection(iterateId, 1, 1

								, "row63"

						);
					}

///////////////////////		

					strBuffer_tLogRow_36 = new StringBuilder();

					if (row63.errorCode != null) { //

						strBuffer_tLogRow_36.append(String.valueOf(row63.errorCode));

					} //

					strBuffer_tLogRow_36.append("|");

					if (row63.errorMessage != null) { //

						strBuffer_tLogRow_36.append(String.valueOf(row63.errorMessage));

					} //

					if (globalMap.get("tLogRow_CONSOLE") != null) {
						consoleOut_tLogRow_36 = (java.io.PrintStream) globalMap.get("tLogRow_CONSOLE");
					} else {
						consoleOut_tLogRow_36 = new java.io.PrintStream(new java.io.BufferedOutputStream(System.out));
						globalMap.put("tLogRow_CONSOLE", consoleOut_tLogRow_36);
					}
					consoleOut_tLogRow_36.println(strBuffer_tLogRow_36.toString());
					consoleOut_tLogRow_36.flush();
					nb_line_tLogRow_36++;
//////

//////                    

///////////////////////    			

					tos_count_tLogRow_36++;

					/**
					 * [tLogRow_36 main ] stop
					 */

					/**
					 * [tLogRow_36 process_data_begin ] start
					 */

					currentComponent = "tLogRow_36";

					/**
					 * [tLogRow_36 process_data_begin ] stop
					 */

					/**
					 * [tLogRow_36 process_data_end ] start
					 */

					currentComponent = "tLogRow_36";

					/**
					 * [tLogRow_36 process_data_end ] stop
					 */

				} // End of branch "row63"

				/**
				 * [tDBRow_29 process_data_end ] start
				 */

				currentComponent = "tDBRow_29";

				/**
				 * [tDBRow_29 process_data_end ] stop
				 */

				/**
				 * [tDBRow_29 end ] start
				 */

				currentComponent = "tDBRow_29";

				stmt_tDBRow_29.close();
				resourceMap.remove("stmt_tDBRow_29");
				resourceMap.put("statementClosed_tDBRow_29", true);
				resourceMap.put("finish_tDBRow_29", true);

				ok_Hash.put("tDBRow_29", true);
				end_Hash.put("tDBRow_29", System.currentTimeMillis());

				tStatCatcher_1.addMessage("end", "tDBRow_29", end_Hash.get("tDBRow_29") - start_Hash.get("tDBRow_29"));
				tStatCatcher_1Process(globalMap);

				/**
				 * [tDBRow_29 end ] stop
				 */

				/**
				 * [tDBCommit_29 end ] start
				 */

				currentComponent = "tDBCommit_29";

				if (execStat) {
					runStat.updateStat(resourceMap, iterateId, 2, 0, "row62");
				}

				ok_Hash.put("tDBCommit_29", true);
				end_Hash.put("tDBCommit_29", System.currentTimeMillis());

				/**
				 * [tDBCommit_29 end ] stop
				 */

				/**
				 * [tLogRow_36 end ] start
				 */

				currentComponent = "tLogRow_36";

//////
//////
				globalMap.put("tLogRow_36_NB_LINE", nb_line_tLogRow_36);

///////////////////////    			

				if (execStat) {
					runStat.updateStat(resourceMap, iterateId, 2, 0, "row63");
				}

				ok_Hash.put("tLogRow_36", true);
				end_Hash.put("tLogRow_36", System.currentTimeMillis());

				/**
				 * [tLogRow_36 end ] stop
				 */

			} // end the resume

			if (resumeEntryMethodName == null || globalResumeTicket) {
				resumeUtil.addLog("CHECKPOINT", "CONNECTION:SUBJOB_OK:tDBRow_29:OnSubjobOk", "",
						Thread.currentThread().getId() + "", "", "", "", "", "");
			}

			if (execStat) {
				runStat.updateStatOnConnection("OnSubjobOk35", 0, "ok");
			}

			tDBRow_30Process(globalMap);

		} catch (java.lang.Exception e) {

			TalendException te = new TalendException(e, currentComponent, globalMap);

			throw te;
		} catch (java.lang.Error error) {

			runStat.stopThreadStat();

			throw error;
		} finally {

			try {

				/**
				 * [tDBRow_29 finally ] start
				 */

				currentComponent = "tDBRow_29";

				if (resourceMap.get("statementClosed_tDBRow_29") == null) {
					java.sql.Statement stmtToClose_tDBRow_29 = null;
					if ((stmtToClose_tDBRow_29 = (java.sql.Statement) resourceMap.remove("stmt_tDBRow_29")) != null) {
						stmtToClose_tDBRow_29.close();
					}
				}

				/**
				 * [tDBRow_29 finally ] stop
				 */

				/**
				 * [tDBCommit_29 finally ] start
				 */

				currentComponent = "tDBCommit_29";

				/**
				 * [tDBCommit_29 finally ] stop
				 */

				/**
				 * [tLogRow_36 finally ] start
				 */

				currentComponent = "tLogRow_36";

				/**
				 * [tLogRow_36 finally ] stop
				 */

			} catch (java.lang.Exception e) {
				// ignore
			} catch (java.lang.Error error) {
				// ignore
			}
			resourceMap = null;
		}

		globalMap.put("tDBRow_29_SUBPROCESS_STATE", 1);
	}

	public static class row64Struct implements routines.system.IPersistableRow<row64Struct> {
		final static byte[] commonByteArrayLock_WIPO_PROJECTS_G3b_Mig_UD = new byte[0];
		static byte[] commonByteArray_WIPO_PROJECTS_G3b_Mig_UD = new byte[0];

		public void readData(ObjectInputStream dis) {

			synchronized (commonByteArrayLock_WIPO_PROJECTS_G3b_Mig_UD) {

				try {

					int length = 0;

				}

				finally {
				}

			}

		}

		public void writeData(ObjectOutputStream dos) {
			try {

			}

			finally {
			}

		}

		public String toString() {

			StringBuilder sb = new StringBuilder();
			sb.append(super.toString());
			sb.append("[");
			sb.append("]");

			return sb.toString();
		}

		/**
		 * Compare keys
		 */
		public int compareTo(row64Struct other) {

			int returnValue = -1;

			return returnValue;
		}

		private int checkNullsAndCompare(Object object1, Object object2) {
			int returnValue = 0;
			if (object1 instanceof Comparable && object2 instanceof Comparable) {
				returnValue = ((Comparable) object1).compareTo(object2);
			} else if (object1 != null && object2 != null) {
				returnValue = compareStrings(object1.toString(), object2.toString());
			} else if (object1 == null && object2 != null) {
				returnValue = 1;
			} else if (object1 != null && object2 == null) {
				returnValue = -1;
			} else {
				returnValue = 0;
			}

			return returnValue;
		}

		private int compareStrings(String string1, String string2) {
			return string1.compareTo(string2);
		}

	}

	public static class row65Struct implements routines.system.IPersistableRow<row65Struct> {
		final static byte[] commonByteArrayLock_WIPO_PROJECTS_G3b_Mig_UD = new byte[0];
		static byte[] commonByteArray_WIPO_PROJECTS_G3b_Mig_UD = new byte[0];

		public String errorCode;

		public String getErrorCode() {
			return this.errorCode;
		}

		public String errorMessage;

		public String getErrorMessage() {
			return this.errorMessage;
		}

		private String readString(ObjectInputStream dis) throws IOException {
			String strReturn = null;
			int length = 0;
			length = dis.readInt();
			if (length == -1) {
				strReturn = null;
			} else {
				if (length > commonByteArray_WIPO_PROJECTS_G3b_Mig_UD.length) {
					if (length < 1024 && commonByteArray_WIPO_PROJECTS_G3b_Mig_UD.length == 0) {
						commonByteArray_WIPO_PROJECTS_G3b_Mig_UD = new byte[1024];
					} else {
						commonByteArray_WIPO_PROJECTS_G3b_Mig_UD = new byte[2 * length];
					}
				}
				dis.readFully(commonByteArray_WIPO_PROJECTS_G3b_Mig_UD, 0, length);
				strReturn = new String(commonByteArray_WIPO_PROJECTS_G3b_Mig_UD, 0, length, utf8Charset);
			}
			return strReturn;
		}

		private void writeString(String str, ObjectOutputStream dos) throws IOException {
			if (str == null) {
				dos.writeInt(-1);
			} else {
				byte[] byteArray = str.getBytes(utf8Charset);
				dos.writeInt(byteArray.length);
				dos.write(byteArray);
			}
		}

		public void readData(ObjectInputStream dis) {

			synchronized (commonByteArrayLock_WIPO_PROJECTS_G3b_Mig_UD) {

				try {

					int length = 0;

					this.errorCode = readString(dis);

					this.errorMessage = readString(dis);

				} catch (IOException e) {
					throw new RuntimeException(e);

				}

			}

		}

		public void writeData(ObjectOutputStream dos) {
			try {

				// String

				writeString(this.errorCode, dos);

				// String

				writeString(this.errorMessage, dos);

			} catch (IOException e) {
				throw new RuntimeException(e);
			}

		}

		public String toString() {

			StringBuilder sb = new StringBuilder();
			sb.append(super.toString());
			sb.append("[");
			sb.append("errorCode=" + errorCode);
			sb.append(",errorMessage=" + errorMessage);
			sb.append("]");

			return sb.toString();
		}

		/**
		 * Compare keys
		 */
		public int compareTo(row65Struct other) {

			int returnValue = -1;

			return returnValue;
		}

		private int checkNullsAndCompare(Object object1, Object object2) {
			int returnValue = 0;
			if (object1 instanceof Comparable && object2 instanceof Comparable) {
				returnValue = ((Comparable) object1).compareTo(object2);
			} else if (object1 != null && object2 != null) {
				returnValue = compareStrings(object1.toString(), object2.toString());
			} else if (object1 == null && object2 != null) {
				returnValue = 1;
			} else if (object1 != null && object2 == null) {
				returnValue = -1;
			} else {
				returnValue = 0;
			}

			return returnValue;
		}

		private int compareStrings(String string1, String string2) {
			return string1.compareTo(string2);
		}

	}

	public void tDBRow_30Process(final java.util.Map<String, Object> globalMap) throws TalendException {
		globalMap.put("tDBRow_30_SUBPROCESS_STATE", 0);

		final boolean execStat = this.execStat;

		String iterateId = "";

		String currentComponent = "";
		java.util.Map<String, Object> resourceMap = new java.util.HashMap<String, Object>();

		try {
			// TDI-39566 avoid throwing an useless Exception
			boolean resumeIt = true;
			if (globalResumeTicket == false && resumeEntryMethodName != null) {
				String currentMethodName = new java.lang.Exception().getStackTrace()[0].getMethodName();
				resumeIt = resumeEntryMethodName.equals(currentMethodName);
			}
			if (resumeIt || globalResumeTicket) { // start the resume
				globalResumeTicket = true;

				row64Struct row64 = new row64Struct();
				row65Struct row65 = new row65Struct();

				/**
				 * [tDBCommit_30 begin ] start
				 */

				ok_Hash.put("tDBCommit_30", false);
				start_Hash.put("tDBCommit_30", System.currentTimeMillis());

				currentComponent = "tDBCommit_30";

				if (execStat) {
					runStat.updateStatOnConnection(resourceMap, iterateId, 0, 0, "row64");
				}

				int tos_count_tDBCommit_30 = 0;

				/**
				 * [tDBCommit_30 begin ] stop
				 */

				/**
				 * [tLogRow_37 begin ] start
				 */

				ok_Hash.put("tLogRow_37", false);
				start_Hash.put("tLogRow_37", System.currentTimeMillis());

				currentComponent = "tLogRow_37";

				if (execStat) {
					runStat.updateStatOnConnection(resourceMap, iterateId, 0, 0, "row65");
				}

				int tos_count_tLogRow_37 = 0;

				///////////////////////

				final String OUTPUT_FIELD_SEPARATOR_tLogRow_37 = "|";
				java.io.PrintStream consoleOut_tLogRow_37 = null;

				StringBuilder strBuffer_tLogRow_37 = null;
				int nb_line_tLogRow_37 = 0;
///////////////////////    			

				/**
				 * [tLogRow_37 begin ] stop
				 */

				/**
				 * [tDBRow_30 begin ] start
				 */

				ok_Hash.put("tDBRow_30", false);
				start_Hash.put("tDBRow_30", System.currentTimeMillis());

				tStatCatcher_1.addMessage("begin", "tDBRow_30");
				tStatCatcher_1Process(globalMap);

				currentComponent = "tDBRow_30";

				int tos_count_tDBRow_30 = 0;

				java.sql.Connection conn_tDBRow_30 = null;
				String query_tDBRow_30 = "";
				boolean whetherReject_tDBRow_30 = false;
				conn_tDBRow_30 = (java.sql.Connection) globalMap.get("conn_tMSSqlConnection_3");

				resourceMap.put("conn_tDBRow_30", conn_tDBRow_30);
				java.sql.Statement stmt_tDBRow_30 = conn_tDBRow_30.createStatement();
				resourceMap.put("stmt_tDBRow_30", stmt_tDBRow_30);

				/**
				 * [tDBRow_30 begin ] stop
				 */

				/**
				 * [tDBRow_30 main ] start
				 */

				currentComponent = "tDBRow_30";

				row64 = null;

				row65 = null;

				query_tDBRow_30 = "\nINSERT INTO  IP_PROC   \n				( ROW_VERSION , \n				PROC_TYP , \n				PROC_NBR , \n				CREATION_DATE , \n				DOC_ORI , "
						+ "\n				DOC_LOG , \n				DOC_SER , \n				DOC_NBR , \n				USERDOC_TYP , \n				STATUS_CODE , \n				STATUS_DATE , \n				FILE_P"
						+ "ROC_TYP , \n				FILE_PROC_NBR )  \n		SELECT\n				 1,\n				 USERDOC_PROC_TYP,\n				 USERDOC_PROC_NBR,\n				 RECEPTION_DAT"
						+ "E,\n				 DOC_ORI,\n				 'E',\n				 DOC_SERIES,\n				 DOC_NBR,\n				 USERDOC_TYPE,\n				 USERDOC_STATUS_CODE,\n				 RECEP"
						+ "TION_DATE,\n				 USERDOC_PROC_TYP,\n				 USERDOC_PROC_NBR\n		FROM  WRK_userdoc uu\n		join CF_PROCESS_TYPE pp\n		on pp.PR"
						+ "OC_TYP=uu.USERDOC_PROC_TYP \n		where pp.RELATED_TO_WCODE=5\n		and	 USERDOC_PROC_TYP  is not null\n;\n";
				whetherReject_tDBRow_30 = false;
				globalMap.put("tDBRow_30_QUERY", query_tDBRow_30);
				try {
					stmt_tDBRow_30.execute(query_tDBRow_30);

				} catch (java.lang.Exception e) {
					whetherReject_tDBRow_30 = true;

					row65 = new row65Struct();

					row65.errorCode = ((java.sql.SQLException) e).getSQLState();
					row65.errorMessage = e.getMessage() + " - Line: " + tos_count_tDBRow_30;

				}

				if (!whetherReject_tDBRow_30) {

					row64 = new row64Struct();

				}

				tos_count_tDBRow_30++;

				/**
				 * [tDBRow_30 main ] stop
				 */

				/**
				 * [tDBRow_30 process_data_begin ] start
				 */

				currentComponent = "tDBRow_30";

				/**
				 * [tDBRow_30 process_data_begin ] stop
				 */
// Start of branch "row64"
				if (row64 != null) {

					/**
					 * [tDBCommit_30 main ] start
					 */

					currentComponent = "tDBCommit_30";

					if (execStat) {
						runStat.updateStatOnConnection(iterateId, 1, 1

								, "row64"

						);
					}

					java.sql.Connection conn_tDBCommit_30 = (java.sql.Connection) globalMap
							.get("conn_tMSSqlConnection_3");
					if (conn_tDBCommit_30 != null && !conn_tDBCommit_30.isClosed()) {

						conn_tDBCommit_30.commit();

					}

					tos_count_tDBCommit_30++;

					/**
					 * [tDBCommit_30 main ] stop
					 */

					/**
					 * [tDBCommit_30 process_data_begin ] start
					 */

					currentComponent = "tDBCommit_30";

					/**
					 * [tDBCommit_30 process_data_begin ] stop
					 */

					/**
					 * [tDBCommit_30 process_data_end ] start
					 */

					currentComponent = "tDBCommit_30";

					/**
					 * [tDBCommit_30 process_data_end ] stop
					 */

				} // End of branch "row64"

// Start of branch "row65"
				if (row65 != null) {

					/**
					 * [tLogRow_37 main ] start
					 */

					currentComponent = "tLogRow_37";

					if (execStat) {
						runStat.updateStatOnConnection(iterateId, 1, 1

								, "row65"

						);
					}

///////////////////////		

					strBuffer_tLogRow_37 = new StringBuilder();

					if (row65.errorCode != null) { //

						strBuffer_tLogRow_37.append(String.valueOf(row65.errorCode));

					} //

					strBuffer_tLogRow_37.append("|");

					if (row65.errorMessage != null) { //

						strBuffer_tLogRow_37.append(String.valueOf(row65.errorMessage));

					} //

					if (globalMap.get("tLogRow_CONSOLE") != null) {
						consoleOut_tLogRow_37 = (java.io.PrintStream) globalMap.get("tLogRow_CONSOLE");
					} else {
						consoleOut_tLogRow_37 = new java.io.PrintStream(new java.io.BufferedOutputStream(System.out));
						globalMap.put("tLogRow_CONSOLE", consoleOut_tLogRow_37);
					}
					consoleOut_tLogRow_37.println(strBuffer_tLogRow_37.toString());
					consoleOut_tLogRow_37.flush();
					nb_line_tLogRow_37++;
//////

//////                    

///////////////////////    			

					tos_count_tLogRow_37++;

					/**
					 * [tLogRow_37 main ] stop
					 */

					/**
					 * [tLogRow_37 process_data_begin ] start
					 */

					currentComponent = "tLogRow_37";

					/**
					 * [tLogRow_37 process_data_begin ] stop
					 */

					/**
					 * [tLogRow_37 process_data_end ] start
					 */

					currentComponent = "tLogRow_37";

					/**
					 * [tLogRow_37 process_data_end ] stop
					 */

				} // End of branch "row65"

				/**
				 * [tDBRow_30 process_data_end ] start
				 */

				currentComponent = "tDBRow_30";

				/**
				 * [tDBRow_30 process_data_end ] stop
				 */

				/**
				 * [tDBRow_30 end ] start
				 */

				currentComponent = "tDBRow_30";

				stmt_tDBRow_30.close();
				resourceMap.remove("stmt_tDBRow_30");
				resourceMap.put("statementClosed_tDBRow_30", true);
				resourceMap.put("finish_tDBRow_30", true);

				ok_Hash.put("tDBRow_30", true);
				end_Hash.put("tDBRow_30", System.currentTimeMillis());

				tStatCatcher_1.addMessage("end", "tDBRow_30", end_Hash.get("tDBRow_30") - start_Hash.get("tDBRow_30"));
				tStatCatcher_1Process(globalMap);

				/**
				 * [tDBRow_30 end ] stop
				 */

				/**
				 * [tDBCommit_30 end ] start
				 */

				currentComponent = "tDBCommit_30";

				if (execStat) {
					runStat.updateStat(resourceMap, iterateId, 2, 0, "row64");
				}

				ok_Hash.put("tDBCommit_30", true);
				end_Hash.put("tDBCommit_30", System.currentTimeMillis());

				/**
				 * [tDBCommit_30 end ] stop
				 */

				/**
				 * [tLogRow_37 end ] start
				 */

				currentComponent = "tLogRow_37";

//////
//////
				globalMap.put("tLogRow_37_NB_LINE", nb_line_tLogRow_37);

///////////////////////    			

				if (execStat) {
					runStat.updateStat(resourceMap, iterateId, 2, 0, "row65");
				}

				ok_Hash.put("tLogRow_37", true);
				end_Hash.put("tLogRow_37", System.currentTimeMillis());

				/**
				 * [tLogRow_37 end ] stop
				 */

			} // end the resume

			if (resumeEntryMethodName == null || globalResumeTicket) {
				resumeUtil.addLog("CHECKPOINT", "CONNECTION:SUBJOB_OK:tDBRow_30:OnSubjobOk", "",
						Thread.currentThread().getId() + "", "", "", "", "", "");
			}

			if (execStat) {
				runStat.updateStatOnConnection("OnSubjobOk39", 0, "ok");
			}

			tDBRow_31Process(globalMap);

		} catch (java.lang.Exception e) {

			TalendException te = new TalendException(e, currentComponent, globalMap);

			throw te;
		} catch (java.lang.Error error) {

			runStat.stopThreadStat();

			throw error;
		} finally {

			try {

				/**
				 * [tDBRow_30 finally ] start
				 */

				currentComponent = "tDBRow_30";

				if (resourceMap.get("statementClosed_tDBRow_30") == null) {
					java.sql.Statement stmtToClose_tDBRow_30 = null;
					if ((stmtToClose_tDBRow_30 = (java.sql.Statement) resourceMap.remove("stmt_tDBRow_30")) != null) {
						stmtToClose_tDBRow_30.close();
					}
				}

				/**
				 * [tDBRow_30 finally ] stop
				 */

				/**
				 * [tDBCommit_30 finally ] start
				 */

				currentComponent = "tDBCommit_30";

				/**
				 * [tDBCommit_30 finally ] stop
				 */

				/**
				 * [tLogRow_37 finally ] start
				 */

				currentComponent = "tLogRow_37";

				/**
				 * [tLogRow_37 finally ] stop
				 */

			} catch (java.lang.Exception e) {
				// ignore
			} catch (java.lang.Error error) {
				// ignore
			}
			resourceMap = null;
		}

		globalMap.put("tDBRow_30_SUBPROCESS_STATE", 1);
	}

	public static class row66Struct implements routines.system.IPersistableRow<row66Struct> {
		final static byte[] commonByteArrayLock_WIPO_PROJECTS_G3b_Mig_UD = new byte[0];
		static byte[] commonByteArray_WIPO_PROJECTS_G3b_Mig_UD = new byte[0];

		public void readData(ObjectInputStream dis) {

			synchronized (commonByteArrayLock_WIPO_PROJECTS_G3b_Mig_UD) {

				try {

					int length = 0;

				}

				finally {
				}

			}

		}

		public void writeData(ObjectOutputStream dos) {
			try {

			}

			finally {
			}

		}

		public String toString() {

			StringBuilder sb = new StringBuilder();
			sb.append(super.toString());
			sb.append("[");
			sb.append("]");

			return sb.toString();
		}

		/**
		 * Compare keys
		 */
		public int compareTo(row66Struct other) {

			int returnValue = -1;

			return returnValue;
		}

		private int checkNullsAndCompare(Object object1, Object object2) {
			int returnValue = 0;
			if (object1 instanceof Comparable && object2 instanceof Comparable) {
				returnValue = ((Comparable) object1).compareTo(object2);
			} else if (object1 != null && object2 != null) {
				returnValue = compareStrings(object1.toString(), object2.toString());
			} else if (object1 == null && object2 != null) {
				returnValue = 1;
			} else if (object1 != null && object2 == null) {
				returnValue = -1;
			} else {
				returnValue = 0;
			}

			return returnValue;
		}

		private int compareStrings(String string1, String string2) {
			return string1.compareTo(string2);
		}

	}

	public static class row68Struct implements routines.system.IPersistableRow<row68Struct> {
		final static byte[] commonByteArrayLock_WIPO_PROJECTS_G3b_Mig_UD = new byte[0];
		static byte[] commonByteArray_WIPO_PROJECTS_G3b_Mig_UD = new byte[0];

		public String errorCode;

		public String getErrorCode() {
			return this.errorCode;
		}

		public String errorMessage;

		public String getErrorMessage() {
			return this.errorMessage;
		}

		private String readString(ObjectInputStream dis) throws IOException {
			String strReturn = null;
			int length = 0;
			length = dis.readInt();
			if (length == -1) {
				strReturn = null;
			} else {
				if (length > commonByteArray_WIPO_PROJECTS_G3b_Mig_UD.length) {
					if (length < 1024 && commonByteArray_WIPO_PROJECTS_G3b_Mig_UD.length == 0) {
						commonByteArray_WIPO_PROJECTS_G3b_Mig_UD = new byte[1024];
					} else {
						commonByteArray_WIPO_PROJECTS_G3b_Mig_UD = new byte[2 * length];
					}
				}
				dis.readFully(commonByteArray_WIPO_PROJECTS_G3b_Mig_UD, 0, length);
				strReturn = new String(commonByteArray_WIPO_PROJECTS_G3b_Mig_UD, 0, length, utf8Charset);
			}
			return strReturn;
		}

		private void writeString(String str, ObjectOutputStream dos) throws IOException {
			if (str == null) {
				dos.writeInt(-1);
			} else {
				byte[] byteArray = str.getBytes(utf8Charset);
				dos.writeInt(byteArray.length);
				dos.write(byteArray);
			}
		}

		public void readData(ObjectInputStream dis) {

			synchronized (commonByteArrayLock_WIPO_PROJECTS_G3b_Mig_UD) {

				try {

					int length = 0;

					this.errorCode = readString(dis);

					this.errorMessage = readString(dis);

				} catch (IOException e) {
					throw new RuntimeException(e);

				}

			}

		}

		public void writeData(ObjectOutputStream dos) {
			try {

				// String

				writeString(this.errorCode, dos);

				// String

				writeString(this.errorMessage, dos);

			} catch (IOException e) {
				throw new RuntimeException(e);
			}

		}

		public String toString() {

			StringBuilder sb = new StringBuilder();
			sb.append(super.toString());
			sb.append("[");
			sb.append("errorCode=" + errorCode);
			sb.append(",errorMessage=" + errorMessage);
			sb.append("]");

			return sb.toString();
		}

		/**
		 * Compare keys
		 */
		public int compareTo(row68Struct other) {

			int returnValue = -1;

			return returnValue;
		}

		private int checkNullsAndCompare(Object object1, Object object2) {
			int returnValue = 0;
			if (object1 instanceof Comparable && object2 instanceof Comparable) {
				returnValue = ((Comparable) object1).compareTo(object2);
			} else if (object1 != null && object2 != null) {
				returnValue = compareStrings(object1.toString(), object2.toString());
			} else if (object1 == null && object2 != null) {
				returnValue = 1;
			} else if (object1 != null && object2 == null) {
				returnValue = -1;
			} else {
				returnValue = 0;
			}

			return returnValue;
		}

		private int compareStrings(String string1, String string2) {
			return string1.compareTo(string2);
		}

	}

	public void tDBRow_31Process(final java.util.Map<String, Object> globalMap) throws TalendException {
		globalMap.put("tDBRow_31_SUBPROCESS_STATE", 0);

		final boolean execStat = this.execStat;

		String iterateId = "";

		String currentComponent = "";
		java.util.Map<String, Object> resourceMap = new java.util.HashMap<String, Object>();

		try {
			// TDI-39566 avoid throwing an useless Exception
			boolean resumeIt = true;
			if (globalResumeTicket == false && resumeEntryMethodName != null) {
				String currentMethodName = new java.lang.Exception().getStackTrace()[0].getMethodName();
				resumeIt = resumeEntryMethodName.equals(currentMethodName);
			}
			if (resumeIt || globalResumeTicket) { // start the resume
				globalResumeTicket = true;

				row66Struct row66 = new row66Struct();
				row68Struct row68 = new row68Struct();

				/**
				 * [tDBCommit_31 begin ] start
				 */

				ok_Hash.put("tDBCommit_31", false);
				start_Hash.put("tDBCommit_31", System.currentTimeMillis());

				currentComponent = "tDBCommit_31";

				if (execStat) {
					runStat.updateStatOnConnection(resourceMap, iterateId, 0, 0, "row66");
				}

				int tos_count_tDBCommit_31 = 0;

				/**
				 * [tDBCommit_31 begin ] stop
				 */

				/**
				 * [tLogRow_38 begin ] start
				 */

				ok_Hash.put("tLogRow_38", false);
				start_Hash.put("tLogRow_38", System.currentTimeMillis());

				currentComponent = "tLogRow_38";

				if (execStat) {
					runStat.updateStatOnConnection(resourceMap, iterateId, 0, 0, "row68");
				}

				int tos_count_tLogRow_38 = 0;

				///////////////////////

				final String OUTPUT_FIELD_SEPARATOR_tLogRow_38 = "|";
				java.io.PrintStream consoleOut_tLogRow_38 = null;

				StringBuilder strBuffer_tLogRow_38 = null;
				int nb_line_tLogRow_38 = 0;
///////////////////////    			

				/**
				 * [tLogRow_38 begin ] stop
				 */

				/**
				 * [tDBRow_31 begin ] start
				 */

				ok_Hash.put("tDBRow_31", false);
				start_Hash.put("tDBRow_31", System.currentTimeMillis());

				tStatCatcher_1.addMessage("begin", "tDBRow_31");
				tStatCatcher_1Process(globalMap);

				currentComponent = "tDBRow_31";

				int tos_count_tDBRow_31 = 0;

				java.sql.Connection conn_tDBRow_31 = null;
				String query_tDBRow_31 = "";
				boolean whetherReject_tDBRow_31 = false;
				conn_tDBRow_31 = (java.sql.Connection) globalMap.get("conn_tMSSqlConnection_3");

				resourceMap.put("conn_tDBRow_31", conn_tDBRow_31);
				java.sql.Statement stmt_tDBRow_31 = conn_tDBRow_31.createStatement();
				resourceMap.put("stmt_tDBRow_31", stmt_tDBRow_31);

				/**
				 * [tDBRow_31 begin ] stop
				 */

				/**
				 * [tDBRow_31 main ] start
				 */

				currentComponent = "tDBRow_31";

				row66 = null;

				row68 = null;

				query_tDBRow_31 = "ALTER TABLE IP_USERDOC_TYPES CHECK CONSTRAINT PROMOCION_TIPO_FK_TRAMITE;\nINSERT INTO  IP_ACTION   \n				( ROW_VERSION "
						+ ", \n				PROC_TYP , \n				PROC_NBR , \n				ACTION_NBR , \n				ACTION_TYP , \n				ACTION_DATE , \n				CAPTURE_DATE , \n			"
						+ "	SIGNATURE_DATE , \n				CAPTURE_USER_ID , \n				AUTHORISING_USER_ID , \n				NOTES2 , \n				NOTES3 , \n				NOTES4 , \n			"
						+ "	NOTES5 , \n				ACTION_NOTES , \n				IND_CHANGES_STATUS , \n				NEW_STATUS_CODE , \n				PRIOR_STATUS_CODE , \n				PRIOR_"
						+ "STATUS_DATE , \n				PRIOR_DUE_DATE , \n				NOTES1)  \n		SELECT\n				 1,\n				 USERDOC_PROC_TYP,\n				 USERDOC_PROC_NBR,"
						+ "\n				 ACTION_NBR,\n				 ACTION_TYPE,\n				 ACTION_DATE,\n				 ACTION_DATE,\n				 ACTION_DATE,\n				 ACTION_USER,\n				 A"
						+ "CTION_USER,\n				 ACTION_NOTES2,\n				 ACTION_NOTES3,\n				 ACTION_NOTES4,\n				 ACTION_NOTES5,\n				 GENERAL_NOTES,\n		"
						+ "		 'N',\n				 null,\n				 null,\n				 null,\n				 null,\n				 ACTION_NOTES1\n		FROM  wrk_userdoc_actions T JOIN wrk_user"
						+ "doc U ON U.userdoc_seq  = T.userdoc_seq\n			 AND	U.userdoc_series  = T.userdoc_series\n			 AND	U.userdoc_nbr  = T.userdo"
						+ "c_nbr  \n		WHERE	 USERDOC_PROC_TYP  is not null\n		 AND	ACTION_CATEGORY  = 'N';\n";
				whetherReject_tDBRow_31 = false;
				globalMap.put("tDBRow_31_QUERY", query_tDBRow_31);
				try {
					stmt_tDBRow_31.execute(query_tDBRow_31);

				} catch (java.lang.Exception e) {
					whetherReject_tDBRow_31 = true;

					row68 = new row68Struct();

					row68.errorCode = ((java.sql.SQLException) e).getSQLState();
					row68.errorMessage = e.getMessage() + " - Line: " + tos_count_tDBRow_31;

				}

				if (!whetherReject_tDBRow_31) {

					row66 = new row66Struct();

				}

				tos_count_tDBRow_31++;

				/**
				 * [tDBRow_31 main ] stop
				 */

				/**
				 * [tDBRow_31 process_data_begin ] start
				 */

				currentComponent = "tDBRow_31";

				/**
				 * [tDBRow_31 process_data_begin ] stop
				 */
// Start of branch "row66"
				if (row66 != null) {

					/**
					 * [tDBCommit_31 main ] start
					 */

					currentComponent = "tDBCommit_31";

					if (execStat) {
						runStat.updateStatOnConnection(iterateId, 1, 1

								, "row66"

						);
					}

					java.sql.Connection conn_tDBCommit_31 = (java.sql.Connection) globalMap
							.get("conn_tMSSqlConnection_3");
					if (conn_tDBCommit_31 != null && !conn_tDBCommit_31.isClosed()) {

						conn_tDBCommit_31.commit();

					}

					tos_count_tDBCommit_31++;

					/**
					 * [tDBCommit_31 main ] stop
					 */

					/**
					 * [tDBCommit_31 process_data_begin ] start
					 */

					currentComponent = "tDBCommit_31";

					/**
					 * [tDBCommit_31 process_data_begin ] stop
					 */

					/**
					 * [tDBCommit_31 process_data_end ] start
					 */

					currentComponent = "tDBCommit_31";

					/**
					 * [tDBCommit_31 process_data_end ] stop
					 */

				} // End of branch "row66"

// Start of branch "row68"
				if (row68 != null) {

					/**
					 * [tLogRow_38 main ] start
					 */

					currentComponent = "tLogRow_38";

					if (execStat) {
						runStat.updateStatOnConnection(iterateId, 1, 1

								, "row68"

						);
					}

///////////////////////		

					strBuffer_tLogRow_38 = new StringBuilder();

					if (row68.errorCode != null) { //

						strBuffer_tLogRow_38.append(String.valueOf(row68.errorCode));

					} //

					strBuffer_tLogRow_38.append("|");

					if (row68.errorMessage != null) { //

						strBuffer_tLogRow_38.append(String.valueOf(row68.errorMessage));

					} //

					if (globalMap.get("tLogRow_CONSOLE") != null) {
						consoleOut_tLogRow_38 = (java.io.PrintStream) globalMap.get("tLogRow_CONSOLE");
					} else {
						consoleOut_tLogRow_38 = new java.io.PrintStream(new java.io.BufferedOutputStream(System.out));
						globalMap.put("tLogRow_CONSOLE", consoleOut_tLogRow_38);
					}
					consoleOut_tLogRow_38.println(strBuffer_tLogRow_38.toString());
					consoleOut_tLogRow_38.flush();
					nb_line_tLogRow_38++;
//////

//////                    

///////////////////////    			

					tos_count_tLogRow_38++;

					/**
					 * [tLogRow_38 main ] stop
					 */

					/**
					 * [tLogRow_38 process_data_begin ] start
					 */

					currentComponent = "tLogRow_38";

					/**
					 * [tLogRow_38 process_data_begin ] stop
					 */

					/**
					 * [tLogRow_38 process_data_end ] start
					 */

					currentComponent = "tLogRow_38";

					/**
					 * [tLogRow_38 process_data_end ] stop
					 */

				} // End of branch "row68"

				/**
				 * [tDBRow_31 process_data_end ] start
				 */

				currentComponent = "tDBRow_31";

				/**
				 * [tDBRow_31 process_data_end ] stop
				 */

				/**
				 * [tDBRow_31 end ] start
				 */

				currentComponent = "tDBRow_31";

				stmt_tDBRow_31.close();
				resourceMap.remove("stmt_tDBRow_31");
				resourceMap.put("statementClosed_tDBRow_31", true);
				resourceMap.put("finish_tDBRow_31", true);

				ok_Hash.put("tDBRow_31", true);
				end_Hash.put("tDBRow_31", System.currentTimeMillis());

				tStatCatcher_1.addMessage("end", "tDBRow_31", end_Hash.get("tDBRow_31") - start_Hash.get("tDBRow_31"));
				tStatCatcher_1Process(globalMap);

				/**
				 * [tDBRow_31 end ] stop
				 */

				/**
				 * [tDBCommit_31 end ] start
				 */

				currentComponent = "tDBCommit_31";

				if (execStat) {
					runStat.updateStat(resourceMap, iterateId, 2, 0, "row66");
				}

				ok_Hash.put("tDBCommit_31", true);
				end_Hash.put("tDBCommit_31", System.currentTimeMillis());

				/**
				 * [tDBCommit_31 end ] stop
				 */

				/**
				 * [tLogRow_38 end ] start
				 */

				currentComponent = "tLogRow_38";

//////
//////
				globalMap.put("tLogRow_38_NB_LINE", nb_line_tLogRow_38);

///////////////////////    			

				if (execStat) {
					runStat.updateStat(resourceMap, iterateId, 2, 0, "row68");
				}

				ok_Hash.put("tLogRow_38", true);
				end_Hash.put("tLogRow_38", System.currentTimeMillis());

				/**
				 * [tLogRow_38 end ] stop
				 */

			} // end the resume

			if (resumeEntryMethodName == null || globalResumeTicket) {
				resumeUtil.addLog("CHECKPOINT", "CONNECTION:SUBJOB_OK:tDBRow_31:OnSubjobOk", "",
						Thread.currentThread().getId() + "", "", "", "", "", "");
			}

			if (execStat) {
				runStat.updateStatOnConnection("OnSubjobOk37", 0, "ok");
			}

			tDBRow_32Process(globalMap);

		} catch (java.lang.Exception e) {

			TalendException te = new TalendException(e, currentComponent, globalMap);

			throw te;
		} catch (java.lang.Error error) {

			runStat.stopThreadStat();

			throw error;
		} finally {

			try {

				/**
				 * [tDBRow_31 finally ] start
				 */

				currentComponent = "tDBRow_31";

				if (resourceMap.get("statementClosed_tDBRow_31") == null) {
					java.sql.Statement stmtToClose_tDBRow_31 = null;
					if ((stmtToClose_tDBRow_31 = (java.sql.Statement) resourceMap.remove("stmt_tDBRow_31")) != null) {
						stmtToClose_tDBRow_31.close();
					}
				}

				/**
				 * [tDBRow_31 finally ] stop
				 */

				/**
				 * [tDBCommit_31 finally ] start
				 */

				currentComponent = "tDBCommit_31";

				/**
				 * [tDBCommit_31 finally ] stop
				 */

				/**
				 * [tLogRow_38 finally ] start
				 */

				currentComponent = "tLogRow_38";

				/**
				 * [tLogRow_38 finally ] stop
				 */

			} catch (java.lang.Exception e) {
				// ignore
			} catch (java.lang.Error error) {
				// ignore
			}
			resourceMap = null;
		}

		globalMap.put("tDBRow_31_SUBPROCESS_STATE", 1);
	}

	public static class row69Struct implements routines.system.IPersistableRow<row69Struct> {
		final static byte[] commonByteArrayLock_WIPO_PROJECTS_G3b_Mig_UD = new byte[0];
		static byte[] commonByteArray_WIPO_PROJECTS_G3b_Mig_UD = new byte[0];

		public void readData(ObjectInputStream dis) {

			synchronized (commonByteArrayLock_WIPO_PROJECTS_G3b_Mig_UD) {

				try {

					int length = 0;

				}

				finally {
				}

			}

		}

		public void writeData(ObjectOutputStream dos) {
			try {

			}

			finally {
			}

		}

		public String toString() {

			StringBuilder sb = new StringBuilder();
			sb.append(super.toString());
			sb.append("[");
			sb.append("]");

			return sb.toString();
		}

		/**
		 * Compare keys
		 */
		public int compareTo(row69Struct other) {

			int returnValue = -1;

			return returnValue;
		}

		private int checkNullsAndCompare(Object object1, Object object2) {
			int returnValue = 0;
			if (object1 instanceof Comparable && object2 instanceof Comparable) {
				returnValue = ((Comparable) object1).compareTo(object2);
			} else if (object1 != null && object2 != null) {
				returnValue = compareStrings(object1.toString(), object2.toString());
			} else if (object1 == null && object2 != null) {
				returnValue = 1;
			} else if (object1 != null && object2 == null) {
				returnValue = -1;
			} else {
				returnValue = 0;
			}

			return returnValue;
		}

		private int compareStrings(String string1, String string2) {
			return string1.compareTo(string2);
		}

	}

	public static class row70Struct implements routines.system.IPersistableRow<row70Struct> {
		final static byte[] commonByteArrayLock_WIPO_PROJECTS_G3b_Mig_UD = new byte[0];
		static byte[] commonByteArray_WIPO_PROJECTS_G3b_Mig_UD = new byte[0];

		public String errorCode;

		public String getErrorCode() {
			return this.errorCode;
		}

		public String errorMessage;

		public String getErrorMessage() {
			return this.errorMessage;
		}

		private String readString(ObjectInputStream dis) throws IOException {
			String strReturn = null;
			int length = 0;
			length = dis.readInt();
			if (length == -1) {
				strReturn = null;
			} else {
				if (length > commonByteArray_WIPO_PROJECTS_G3b_Mig_UD.length) {
					if (length < 1024 && commonByteArray_WIPO_PROJECTS_G3b_Mig_UD.length == 0) {
						commonByteArray_WIPO_PROJECTS_G3b_Mig_UD = new byte[1024];
					} else {
						commonByteArray_WIPO_PROJECTS_G3b_Mig_UD = new byte[2 * length];
					}
				}
				dis.readFully(commonByteArray_WIPO_PROJECTS_G3b_Mig_UD, 0, length);
				strReturn = new String(commonByteArray_WIPO_PROJECTS_G3b_Mig_UD, 0, length, utf8Charset);
			}
			return strReturn;
		}

		private void writeString(String str, ObjectOutputStream dos) throws IOException {
			if (str == null) {
				dos.writeInt(-1);
			} else {
				byte[] byteArray = str.getBytes(utf8Charset);
				dos.writeInt(byteArray.length);
				dos.write(byteArray);
			}
		}

		public void readData(ObjectInputStream dis) {

			synchronized (commonByteArrayLock_WIPO_PROJECTS_G3b_Mig_UD) {

				try {

					int length = 0;

					this.errorCode = readString(dis);

					this.errorMessage = readString(dis);

				} catch (IOException e) {
					throw new RuntimeException(e);

				}

			}

		}

		public void writeData(ObjectOutputStream dos) {
			try {

				// String

				writeString(this.errorCode, dos);

				// String

				writeString(this.errorMessage, dos);

			} catch (IOException e) {
				throw new RuntimeException(e);
			}

		}

		public String toString() {

			StringBuilder sb = new StringBuilder();
			sb.append(super.toString());
			sb.append("[");
			sb.append("errorCode=" + errorCode);
			sb.append(",errorMessage=" + errorMessage);
			sb.append("]");

			return sb.toString();
		}

		/**
		 * Compare keys
		 */
		public int compareTo(row70Struct other) {

			int returnValue = -1;

			return returnValue;
		}

		private int checkNullsAndCompare(Object object1, Object object2) {
			int returnValue = 0;
			if (object1 instanceof Comparable && object2 instanceof Comparable) {
				returnValue = ((Comparable) object1).compareTo(object2);
			} else if (object1 != null && object2 != null) {
				returnValue = compareStrings(object1.toString(), object2.toString());
			} else if (object1 == null && object2 != null) {
				returnValue = 1;
			} else if (object1 != null && object2 == null) {
				returnValue = -1;
			} else {
				returnValue = 0;
			}

			return returnValue;
		}

		private int compareStrings(String string1, String string2) {
			return string1.compareTo(string2);
		}

	}

	public void tDBRow_32Process(final java.util.Map<String, Object> globalMap) throws TalendException {
		globalMap.put("tDBRow_32_SUBPROCESS_STATE", 0);

		final boolean execStat = this.execStat;

		String iterateId = "";

		String currentComponent = "";
		java.util.Map<String, Object> resourceMap = new java.util.HashMap<String, Object>();

		try {
			// TDI-39566 avoid throwing an useless Exception
			boolean resumeIt = true;
			if (globalResumeTicket == false && resumeEntryMethodName != null) {
				String currentMethodName = new java.lang.Exception().getStackTrace()[0].getMethodName();
				resumeIt = resumeEntryMethodName.equals(currentMethodName);
			}
			if (resumeIt || globalResumeTicket) { // start the resume
				globalResumeTicket = true;

				row69Struct row69 = new row69Struct();
				row70Struct row70 = new row70Struct();

				/**
				 * [tDBCommit_32 begin ] start
				 */

				ok_Hash.put("tDBCommit_32", false);
				start_Hash.put("tDBCommit_32", System.currentTimeMillis());

				currentComponent = "tDBCommit_32";

				if (execStat) {
					runStat.updateStatOnConnection(resourceMap, iterateId, 0, 0, "row69");
				}

				int tos_count_tDBCommit_32 = 0;

				/**
				 * [tDBCommit_32 begin ] stop
				 */

				/**
				 * [tLogRow_39 begin ] start
				 */

				ok_Hash.put("tLogRow_39", false);
				start_Hash.put("tLogRow_39", System.currentTimeMillis());

				currentComponent = "tLogRow_39";

				if (execStat) {
					runStat.updateStatOnConnection(resourceMap, iterateId, 0, 0, "row70");
				}

				int tos_count_tLogRow_39 = 0;

				///////////////////////

				final String OUTPUT_FIELD_SEPARATOR_tLogRow_39 = "|";
				java.io.PrintStream consoleOut_tLogRow_39 = null;

				StringBuilder strBuffer_tLogRow_39 = null;
				int nb_line_tLogRow_39 = 0;
///////////////////////    			

				/**
				 * [tLogRow_39 begin ] stop
				 */

				/**
				 * [tDBRow_32 begin ] start
				 */

				ok_Hash.put("tDBRow_32", false);
				start_Hash.put("tDBRow_32", System.currentTimeMillis());

				tStatCatcher_1.addMessage("begin", "tDBRow_32");
				tStatCatcher_1Process(globalMap);

				currentComponent = "tDBRow_32";

				int tos_count_tDBRow_32 = 0;

				java.sql.Connection conn_tDBRow_32 = null;
				String query_tDBRow_32 = "";
				boolean whetherReject_tDBRow_32 = false;
				conn_tDBRow_32 = (java.sql.Connection) globalMap.get("conn_tMSSqlConnection_3");

				resourceMap.put("conn_tDBRow_32", conn_tDBRow_32);
				java.sql.Statement stmt_tDBRow_32 = conn_tDBRow_32.createStatement();
				resourceMap.put("stmt_tDBRow_32", stmt_tDBRow_32);

				/**
				 * [tDBRow_32 begin ] stop
				 */

				/**
				 * [tDBRow_32 main ] start
				 */

				currentComponent = "tDBRow_32";

				row69 = null;

				row70 = null;

				query_tDBRow_32 = "\nINSERT INTO  IP_ACTION   \n				( ROW_VERSION , \n				PROC_TYP , \n				PROC_NBR , \n				ACTION_NBR , \n				ACTION_TYP "
						+ ", \n				ACTION_DATE , \n				CAPTURE_DATE , \n				SIGNATURE_DATE , \n				CAPTURE_USER_ID , \n				AUTHORISING_USER_ID , \n"
						+ "				NOTES2 , \n				NOTES3 , \n				NOTES4 , \n				NOTES5 , \n				ACTION_NOTES , \n				IND_CHANGES_STATUS , \n				NEW_STAT"
						+ "US_CODE , \n				PRIOR_STATUS_CODE , \n				PRIOR_STATUS_DATE , \n				PRIOR_DUE_DATE , \n				NOTES1)  \n		SELECT\n				 1,"
						+ "\n				 U.USERDOC_PROC_TYP,\n				 U.USERDOC_PROC_NBR,\n				 ACTION_NBR,\n				 ACTION_TYPE,\n				 ACTION_DATE,\n				 ACTION"
						+ "_DATE,\n				 ACTION_DATE,\n				 ACTION_USER,\n				 ACTION_USER,\n				 ACTION_NOTES2,\n				 ACTION_NOTES3,\n				 ACTION_N"
						+ "OTES4,\n				 ACTION_NOTES5,\n				 GENERAL_NOTES,\n				 'S',\n				 SPECIAL_FINAL_STATUS,\n				 P.STATUS_CODE,\n				 P.STA"
						+ "TUS_DATE,\n				 P.EXPIRATION_DATE,\n				 ACTION_NOTES1\n		FROM  wrk_userdoc_actions T JOIN wrk_userdoc U ON U.userdoc_se"
						+ "q  = T.userdoc_seq\n			 AND	U.userdoc_series  = T.userdoc_series\n			 AND	U.userdoc_nbr  = T.userdoc_nbr  JOIN IP_PROC P"
						+ " ON P.proc_typ  = U.userdoc_proc_typ\n			 AND	P.proc_nbr  = U.userdoc_proc_nbr  \n		WHERE	 USERDOC_PROC_TYP  is not null"
						+ "\n		 AND	ACTION_CATEGORY  = 'S';\n";
				whetherReject_tDBRow_32 = false;
				globalMap.put("tDBRow_32_QUERY", query_tDBRow_32);
				try {
					stmt_tDBRow_32.execute(query_tDBRow_32);

				} catch (java.lang.Exception e) {
					whetherReject_tDBRow_32 = true;

					row70 = new row70Struct();

					row70.errorCode = ((java.sql.SQLException) e).getSQLState();
					row70.errorMessage = e.getMessage() + " - Line: " + tos_count_tDBRow_32;

				}

				if (!whetherReject_tDBRow_32) {

					row69 = new row69Struct();

				}

				tos_count_tDBRow_32++;

				/**
				 * [tDBRow_32 main ] stop
				 */

				/**
				 * [tDBRow_32 process_data_begin ] start
				 */

				currentComponent = "tDBRow_32";

				/**
				 * [tDBRow_32 process_data_begin ] stop
				 */
// Start of branch "row69"
				if (row69 != null) {

					/**
					 * [tDBCommit_32 main ] start
					 */

					currentComponent = "tDBCommit_32";

					if (execStat) {
						runStat.updateStatOnConnection(iterateId, 1, 1

								, "row69"

						);
					}

					java.sql.Connection conn_tDBCommit_32 = (java.sql.Connection) globalMap
							.get("conn_tMSSqlConnection_3");
					if (conn_tDBCommit_32 != null && !conn_tDBCommit_32.isClosed()) {

						conn_tDBCommit_32.commit();

					}

					tos_count_tDBCommit_32++;

					/**
					 * [tDBCommit_32 main ] stop
					 */

					/**
					 * [tDBCommit_32 process_data_begin ] start
					 */

					currentComponent = "tDBCommit_32";

					/**
					 * [tDBCommit_32 process_data_begin ] stop
					 */

					/**
					 * [tDBCommit_32 process_data_end ] start
					 */

					currentComponent = "tDBCommit_32";

					/**
					 * [tDBCommit_32 process_data_end ] stop
					 */

				} // End of branch "row69"

// Start of branch "row70"
				if (row70 != null) {

					/**
					 * [tLogRow_39 main ] start
					 */

					currentComponent = "tLogRow_39";

					if (execStat) {
						runStat.updateStatOnConnection(iterateId, 1, 1

								, "row70"

						);
					}

///////////////////////		

					strBuffer_tLogRow_39 = new StringBuilder();

					if (row70.errorCode != null) { //

						strBuffer_tLogRow_39.append(String.valueOf(row70.errorCode));

					} //

					strBuffer_tLogRow_39.append("|");

					if (row70.errorMessage != null) { //

						strBuffer_tLogRow_39.append(String.valueOf(row70.errorMessage));

					} //

					if (globalMap.get("tLogRow_CONSOLE") != null) {
						consoleOut_tLogRow_39 = (java.io.PrintStream) globalMap.get("tLogRow_CONSOLE");
					} else {
						consoleOut_tLogRow_39 = new java.io.PrintStream(new java.io.BufferedOutputStream(System.out));
						globalMap.put("tLogRow_CONSOLE", consoleOut_tLogRow_39);
					}
					consoleOut_tLogRow_39.println(strBuffer_tLogRow_39.toString());
					consoleOut_tLogRow_39.flush();
					nb_line_tLogRow_39++;
//////

//////                    

///////////////////////    			

					tos_count_tLogRow_39++;

					/**
					 * [tLogRow_39 main ] stop
					 */

					/**
					 * [tLogRow_39 process_data_begin ] start
					 */

					currentComponent = "tLogRow_39";

					/**
					 * [tLogRow_39 process_data_begin ] stop
					 */

					/**
					 * [tLogRow_39 process_data_end ] start
					 */

					currentComponent = "tLogRow_39";

					/**
					 * [tLogRow_39 process_data_end ] stop
					 */

				} // End of branch "row70"

				/**
				 * [tDBRow_32 process_data_end ] start
				 */

				currentComponent = "tDBRow_32";

				/**
				 * [tDBRow_32 process_data_end ] stop
				 */

				/**
				 * [tDBRow_32 end ] start
				 */

				currentComponent = "tDBRow_32";

				stmt_tDBRow_32.close();
				resourceMap.remove("stmt_tDBRow_32");
				resourceMap.put("statementClosed_tDBRow_32", true);
				resourceMap.put("finish_tDBRow_32", true);

				ok_Hash.put("tDBRow_32", true);
				end_Hash.put("tDBRow_32", System.currentTimeMillis());

				tStatCatcher_1.addMessage("end", "tDBRow_32", end_Hash.get("tDBRow_32") - start_Hash.get("tDBRow_32"));
				tStatCatcher_1Process(globalMap);

				/**
				 * [tDBRow_32 end ] stop
				 */

				/**
				 * [tDBCommit_32 end ] start
				 */

				currentComponent = "tDBCommit_32";

				if (execStat) {
					runStat.updateStat(resourceMap, iterateId, 2, 0, "row69");
				}

				ok_Hash.put("tDBCommit_32", true);
				end_Hash.put("tDBCommit_32", System.currentTimeMillis());

				/**
				 * [tDBCommit_32 end ] stop
				 */

				/**
				 * [tLogRow_39 end ] start
				 */

				currentComponent = "tLogRow_39";

//////
//////
				globalMap.put("tLogRow_39_NB_LINE", nb_line_tLogRow_39);

///////////////////////    			

				if (execStat) {
					runStat.updateStat(resourceMap, iterateId, 2, 0, "row70");
				}

				ok_Hash.put("tLogRow_39", true);
				end_Hash.put("tLogRow_39", System.currentTimeMillis());

				/**
				 * [tLogRow_39 end ] stop
				 */

			} // end the resume

			if (resumeEntryMethodName == null || globalResumeTicket) {
				resumeUtil.addLog("CHECKPOINT", "CONNECTION:SUBJOB_OK:tDBRow_32:OnSubjobOk", "",
						Thread.currentThread().getId() + "", "", "", "", "", "");
			}

			if (execStat) {
				runStat.updateStatOnConnection("OnSubjobOk38", 0, "ok");
			}

			tDBInput_9Process(globalMap);

		} catch (java.lang.Exception e) {

			TalendException te = new TalendException(e, currentComponent, globalMap);

			throw te;
		} catch (java.lang.Error error) {

			runStat.stopThreadStat();

			throw error;
		} finally {

			try {

				/**
				 * [tDBRow_32 finally ] start
				 */

				currentComponent = "tDBRow_32";

				if (resourceMap.get("statementClosed_tDBRow_32") == null) {
					java.sql.Statement stmtToClose_tDBRow_32 = null;
					if ((stmtToClose_tDBRow_32 = (java.sql.Statement) resourceMap.remove("stmt_tDBRow_32")) != null) {
						stmtToClose_tDBRow_32.close();
					}
				}

				/**
				 * [tDBRow_32 finally ] stop
				 */

				/**
				 * [tDBCommit_32 finally ] start
				 */

				currentComponent = "tDBCommit_32";

				/**
				 * [tDBCommit_32 finally ] stop
				 */

				/**
				 * [tLogRow_39 finally ] start
				 */

				currentComponent = "tLogRow_39";

				/**
				 * [tLogRow_39 finally ] stop
				 */

			} catch (java.lang.Exception e) {
				// ignore
			} catch (java.lang.Error error) {
				// ignore
			}
			resourceMap = null;
		}

		globalMap.put("tDBRow_32_SUBPROCESS_STATE", 1);
	}

	public static class row19Struct implements routines.system.IPersistableRow<row19Struct> {
		final static byte[] commonByteArrayLock_WIPO_PROJECTS_G3b_Mig_UD = new byte[0];
		static byte[] commonByteArray_WIPO_PROJECTS_G3b_Mig_UD = new byte[0];

		public String Message;

		public String getMessage() {
			return this.Message;
		}

		public java.util.Date Time;

		public java.util.Date getTime() {
			return this.Time;
		}

		private String readString(ObjectInputStream dis) throws IOException {
			String strReturn = null;
			int length = 0;
			length = dis.readInt();
			if (length == -1) {
				strReturn = null;
			} else {
				if (length > commonByteArray_WIPO_PROJECTS_G3b_Mig_UD.length) {
					if (length < 1024 && commonByteArray_WIPO_PROJECTS_G3b_Mig_UD.length == 0) {
						commonByteArray_WIPO_PROJECTS_G3b_Mig_UD = new byte[1024];
					} else {
						commonByteArray_WIPO_PROJECTS_G3b_Mig_UD = new byte[2 * length];
					}
				}
				dis.readFully(commonByteArray_WIPO_PROJECTS_G3b_Mig_UD, 0, length);
				strReturn = new String(commonByteArray_WIPO_PROJECTS_G3b_Mig_UD, 0, length, utf8Charset);
			}
			return strReturn;
		}

		private void writeString(String str, ObjectOutputStream dos) throws IOException {
			if (str == null) {
				dos.writeInt(-1);
			} else {
				byte[] byteArray = str.getBytes(utf8Charset);
				dos.writeInt(byteArray.length);
				dos.write(byteArray);
			}
		}

		private java.util.Date readDate(ObjectInputStream dis) throws IOException {
			java.util.Date dateReturn = null;
			int length = 0;
			length = dis.readByte();
			if (length == -1) {
				dateReturn = null;
			} else {
				dateReturn = new Date(dis.readLong());
			}
			return dateReturn;
		}

		private void writeDate(java.util.Date date1, ObjectOutputStream dos) throws IOException {
			if (date1 == null) {
				dos.writeByte(-1);
			} else {
				dos.writeByte(0);
				dos.writeLong(date1.getTime());
			}
		}

		public void readData(ObjectInputStream dis) {

			synchronized (commonByteArrayLock_WIPO_PROJECTS_G3b_Mig_UD) {

				try {

					int length = 0;

					this.Message = readString(dis);

					this.Time = readDate(dis);

				} catch (IOException e) {
					throw new RuntimeException(e);

				}

			}

		}

		public void writeData(ObjectOutputStream dos) {
			try {

				// String

				writeString(this.Message, dos);

				// java.util.Date

				writeDate(this.Time, dos);

			} catch (IOException e) {
				throw new RuntimeException(e);
			}

		}

		public String toString() {

			StringBuilder sb = new StringBuilder();
			sb.append(super.toString());
			sb.append("[");
			sb.append("Message=" + Message);
			sb.append(",Time=" + String.valueOf(Time));
			sb.append("]");

			return sb.toString();
		}

		/**
		 * Compare keys
		 */
		public int compareTo(row19Struct other) {

			int returnValue = -1;

			return returnValue;
		}

		private int checkNullsAndCompare(Object object1, Object object2) {
			int returnValue = 0;
			if (object1 instanceof Comparable && object2 instanceof Comparable) {
				returnValue = ((Comparable) object1).compareTo(object2);
			} else if (object1 != null && object2 != null) {
				returnValue = compareStrings(object1.toString(), object2.toString());
			} else if (object1 == null && object2 != null) {
				returnValue = 1;
			} else if (object1 != null && object2 == null) {
				returnValue = -1;
			} else {
				returnValue = 0;
			}

			return returnValue;
		}

		private int compareStrings(String string1, String string2) {
			return string1.compareTo(string2);
		}

	}

	public void tDBInput_9Process(final java.util.Map<String, Object> globalMap) throws TalendException {
		globalMap.put("tDBInput_9_SUBPROCESS_STATE", 0);

		final boolean execStat = this.execStat;

		String iterateId = "";

		String currentComponent = "";
		java.util.Map<String, Object> resourceMap = new java.util.HashMap<String, Object>();

		try {
			// TDI-39566 avoid throwing an useless Exception
			boolean resumeIt = true;
			if (globalResumeTicket == false && resumeEntryMethodName != null) {
				String currentMethodName = new java.lang.Exception().getStackTrace()[0].getMethodName();
				resumeIt = resumeEntryMethodName.equals(currentMethodName);
			}
			if (resumeIt || globalResumeTicket) { // start the resume
				globalResumeTicket = true;

				row19Struct row19 = new row19Struct();

				/**
				 * [tLogRow_9 begin ] start
				 */

				ok_Hash.put("tLogRow_9", false);
				start_Hash.put("tLogRow_9", System.currentTimeMillis());

				currentComponent = "tLogRow_9";

				if (execStat) {
					runStat.updateStatOnConnection(resourceMap, iterateId, 0, 0, "row19");
				}

				int tos_count_tLogRow_9 = 0;

				///////////////////////

				final String OUTPUT_FIELD_SEPARATOR_tLogRow_9 = "|";
				java.io.PrintStream consoleOut_tLogRow_9 = null;

				StringBuilder strBuffer_tLogRow_9 = null;
				int nb_line_tLogRow_9 = 0;
///////////////////////    			

				/**
				 * [tLogRow_9 begin ] stop
				 */

				/**
				 * [tDBInput_9 begin ] start
				 */

				ok_Hash.put("tDBInput_9", false);
				start_Hash.put("tDBInput_9", System.currentTimeMillis());

				currentComponent = "tDBInput_9";

				int tos_count_tDBInput_9 = 0;

				org.talend.designer.components.util.mssql.MSSqlGenerateTimestampUtil mssqlGTU_tDBInput_9 = org.talend.designer.components.util.mssql.MSSqlUtilFactory
						.getMSSqlGenerateTimestampUtil();

				java.util.List<String> talendToDBList_tDBInput_9 = new java.util.ArrayList();
				String[] talendToDBArray_tDBInput_9 = new String[] { "FLOAT", "NUMERIC", "NUMERIC IDENTITY", "DECIMAL",
						"DECIMAL IDENTITY", "REAL" };
				java.util.Collections.addAll(talendToDBList_tDBInput_9, talendToDBArray_tDBInput_9);
				int nb_line_tDBInput_9 = 0;
				java.sql.Connection conn_tDBInput_9 = null;
				conn_tDBInput_9 = (java.sql.Connection) globalMap.get("conn_tMSSqlConnection_3");

				String dbschema_tDBInput_9 = (String) globalMap.get("dbschema_tMSSqlConnection_3");

				java.sql.Statement stmt_tDBInput_9 = conn_tDBInput_9.createStatement();

				String dbquery_tDBInput_9 = "SELECT 'Step 9: inserts to IP tables' ,GETDATE();";

				globalMap.put("tDBInput_9_QUERY", dbquery_tDBInput_9);
				java.sql.ResultSet rs_tDBInput_9 = null;

				try {
					rs_tDBInput_9 = stmt_tDBInput_9.executeQuery(dbquery_tDBInput_9);
					java.sql.ResultSetMetaData rsmd_tDBInput_9 = rs_tDBInput_9.getMetaData();
					int colQtyInRs_tDBInput_9 = rsmd_tDBInput_9.getColumnCount();

					String tmpContent_tDBInput_9 = null;

					while (rs_tDBInput_9.next()) {
						nb_line_tDBInput_9++;

						if (colQtyInRs_tDBInput_9 < 1) {
							row19.Message = null;
						} else {

							tmpContent_tDBInput_9 = rs_tDBInput_9.getString(1);
							if (tmpContent_tDBInput_9 != null) {
								if (talendToDBList_tDBInput_9.contains(
										rsmd_tDBInput_9.getColumnTypeName(1).toUpperCase(java.util.Locale.ENGLISH))) {
									row19.Message = FormatterUtils.formatUnwithE(tmpContent_tDBInput_9);
								} else {
									row19.Message = tmpContent_tDBInput_9;
								}
							} else {
								row19.Message = null;
							}
						}
						if (colQtyInRs_tDBInput_9 < 2) {
							row19.Time = null;
						} else {

							row19.Time = mssqlGTU_tDBInput_9.getDate(rsmd_tDBInput_9, rs_tDBInput_9, 2);

						}

						/**
						 * [tDBInput_9 begin ] stop
						 */

						/**
						 * [tDBInput_9 main ] start
						 */

						currentComponent = "tDBInput_9";

						tos_count_tDBInput_9++;

						/**
						 * [tDBInput_9 main ] stop
						 */

						/**
						 * [tDBInput_9 process_data_begin ] start
						 */

						currentComponent = "tDBInput_9";

						/**
						 * [tDBInput_9 process_data_begin ] stop
						 */

						/**
						 * [tLogRow_9 main ] start
						 */

						currentComponent = "tLogRow_9";

						if (execStat) {
							runStat.updateStatOnConnection(iterateId, 1, 1

									, "row19"

							);
						}

///////////////////////		

						strBuffer_tLogRow_9 = new StringBuilder();

						if (row19.Message != null) { //

							strBuffer_tLogRow_9.append(String.valueOf(row19.Message));

						} //

						strBuffer_tLogRow_9.append("|");

						if (row19.Time != null) { //

							strBuffer_tLogRow_9.append(FormatterUtils.format_Date(row19.Time, "yyyy-MM-dd HH:mm:ss"));

						} //

						if (globalMap.get("tLogRow_CONSOLE") != null) {
							consoleOut_tLogRow_9 = (java.io.PrintStream) globalMap.get("tLogRow_CONSOLE");
						} else {
							consoleOut_tLogRow_9 = new java.io.PrintStream(
									new java.io.BufferedOutputStream(System.out));
							globalMap.put("tLogRow_CONSOLE", consoleOut_tLogRow_9);
						}
						consoleOut_tLogRow_9.println(strBuffer_tLogRow_9.toString());
						consoleOut_tLogRow_9.flush();
						nb_line_tLogRow_9++;
//////

//////                    

///////////////////////    			

						tos_count_tLogRow_9++;

						/**
						 * [tLogRow_9 main ] stop
						 */

						/**
						 * [tLogRow_9 process_data_begin ] start
						 */

						currentComponent = "tLogRow_9";

						/**
						 * [tLogRow_9 process_data_begin ] stop
						 */

						/**
						 * [tLogRow_9 process_data_end ] start
						 */

						currentComponent = "tLogRow_9";

						/**
						 * [tLogRow_9 process_data_end ] stop
						 */

						/**
						 * [tDBInput_9 process_data_end ] start
						 */

						currentComponent = "tDBInput_9";

						/**
						 * [tDBInput_9 process_data_end ] stop
						 */

						/**
						 * [tDBInput_9 end ] start
						 */

						currentComponent = "tDBInput_9";

					}
				} finally {
					if (rs_tDBInput_9 != null) {
						rs_tDBInput_9.close();
					}
					if (stmt_tDBInput_9 != null) {
						stmt_tDBInput_9.close();
					}
				}
				globalMap.put("tDBInput_9_NB_LINE", nb_line_tDBInput_9);

				ok_Hash.put("tDBInput_9", true);
				end_Hash.put("tDBInput_9", System.currentTimeMillis());

				/**
				 * [tDBInput_9 end ] stop
				 */

				/**
				 * [tLogRow_9 end ] start
				 */

				currentComponent = "tLogRow_9";

//////
//////
				globalMap.put("tLogRow_9_NB_LINE", nb_line_tLogRow_9);

///////////////////////    			

				if (execStat) {
					runStat.updateStat(resourceMap, iterateId, 2, 0, "row19");
				}

				ok_Hash.put("tLogRow_9", true);
				end_Hash.put("tLogRow_9", System.currentTimeMillis());

				/**
				 * [tLogRow_9 end ] stop
				 */

			} // end the resume

			if (resumeEntryMethodName == null || globalResumeTicket) {
				resumeUtil.addLog("CHECKPOINT", "CONNECTION:SUBJOB_OK:tDBInput_9:OnSubjobOk", "",
						Thread.currentThread().getId() + "", "", "", "", "", "");
			}

			if (execStat) {
				runStat.updateStatOnConnection("OnSubjobOk10", 0, "ok");
			}

			tDBRow_33Process(globalMap);

		} catch (java.lang.Exception e) {

			TalendException te = new TalendException(e, currentComponent, globalMap);

			throw te;
		} catch (java.lang.Error error) {

			runStat.stopThreadStat();

			throw error;
		} finally {

			try {

				/**
				 * [tDBInput_9 finally ] start
				 */

				currentComponent = "tDBInput_9";

				/**
				 * [tDBInput_9 finally ] stop
				 */

				/**
				 * [tLogRow_9 finally ] start
				 */

				currentComponent = "tLogRow_9";

				/**
				 * [tLogRow_9 finally ] stop
				 */

			} catch (java.lang.Exception e) {
				// ignore
			} catch (java.lang.Error error) {
				// ignore
			}
			resourceMap = null;
		}

		globalMap.put("tDBInput_9_SUBPROCESS_STATE", 1);
	}

	public static class row71Struct implements routines.system.IPersistableRow<row71Struct> {
		final static byte[] commonByteArrayLock_WIPO_PROJECTS_G3b_Mig_UD = new byte[0];
		static byte[] commonByteArray_WIPO_PROJECTS_G3b_Mig_UD = new byte[0];

		public void readData(ObjectInputStream dis) {

			synchronized (commonByteArrayLock_WIPO_PROJECTS_G3b_Mig_UD) {

				try {

					int length = 0;

				}

				finally {
				}

			}

		}

		public void writeData(ObjectOutputStream dos) {
			try {

			}

			finally {
			}

		}

		public String toString() {

			StringBuilder sb = new StringBuilder();
			sb.append(super.toString());
			sb.append("[");
			sb.append("]");

			return sb.toString();
		}

		/**
		 * Compare keys
		 */
		public int compareTo(row71Struct other) {

			int returnValue = -1;

			return returnValue;
		}

		private int checkNullsAndCompare(Object object1, Object object2) {
			int returnValue = 0;
			if (object1 instanceof Comparable && object2 instanceof Comparable) {
				returnValue = ((Comparable) object1).compareTo(object2);
			} else if (object1 != null && object2 != null) {
				returnValue = compareStrings(object1.toString(), object2.toString());
			} else if (object1 == null && object2 != null) {
				returnValue = 1;
			} else if (object1 != null && object2 == null) {
				returnValue = -1;
			} else {
				returnValue = 0;
			}

			return returnValue;
		}

		private int compareStrings(String string1, String string2) {
			return string1.compareTo(string2);
		}

	}

	public static class row72Struct implements routines.system.IPersistableRow<row72Struct> {
		final static byte[] commonByteArrayLock_WIPO_PROJECTS_G3b_Mig_UD = new byte[0];
		static byte[] commonByteArray_WIPO_PROJECTS_G3b_Mig_UD = new byte[0];

		public String errorCode;

		public String getErrorCode() {
			return this.errorCode;
		}

		public String errorMessage;

		public String getErrorMessage() {
			return this.errorMessage;
		}

		private String readString(ObjectInputStream dis) throws IOException {
			String strReturn = null;
			int length = 0;
			length = dis.readInt();
			if (length == -1) {
				strReturn = null;
			} else {
				if (length > commonByteArray_WIPO_PROJECTS_G3b_Mig_UD.length) {
					if (length < 1024 && commonByteArray_WIPO_PROJECTS_G3b_Mig_UD.length == 0) {
						commonByteArray_WIPO_PROJECTS_G3b_Mig_UD = new byte[1024];
					} else {
						commonByteArray_WIPO_PROJECTS_G3b_Mig_UD = new byte[2 * length];
					}
				}
				dis.readFully(commonByteArray_WIPO_PROJECTS_G3b_Mig_UD, 0, length);
				strReturn = new String(commonByteArray_WIPO_PROJECTS_G3b_Mig_UD, 0, length, utf8Charset);
			}
			return strReturn;
		}

		private void writeString(String str, ObjectOutputStream dos) throws IOException {
			if (str == null) {
				dos.writeInt(-1);
			} else {
				byte[] byteArray = str.getBytes(utf8Charset);
				dos.writeInt(byteArray.length);
				dos.write(byteArray);
			}
		}

		public void readData(ObjectInputStream dis) {

			synchronized (commonByteArrayLock_WIPO_PROJECTS_G3b_Mig_UD) {

				try {

					int length = 0;

					this.errorCode = readString(dis);

					this.errorMessage = readString(dis);

				} catch (IOException e) {
					throw new RuntimeException(e);

				}

			}

		}

		public void writeData(ObjectOutputStream dos) {
			try {

				// String

				writeString(this.errorCode, dos);

				// String

				writeString(this.errorMessage, dos);

			} catch (IOException e) {
				throw new RuntimeException(e);
			}

		}

		public String toString() {

			StringBuilder sb = new StringBuilder();
			sb.append(super.toString());
			sb.append("[");
			sb.append("errorCode=" + errorCode);
			sb.append(",errorMessage=" + errorMessage);
			sb.append("]");

			return sb.toString();
		}

		/**
		 * Compare keys
		 */
		public int compareTo(row72Struct other) {

			int returnValue = -1;

			return returnValue;
		}

		private int checkNullsAndCompare(Object object1, Object object2) {
			int returnValue = 0;
			if (object1 instanceof Comparable && object2 instanceof Comparable) {
				returnValue = ((Comparable) object1).compareTo(object2);
			} else if (object1 != null && object2 != null) {
				returnValue = compareStrings(object1.toString(), object2.toString());
			} else if (object1 == null && object2 != null) {
				returnValue = 1;
			} else if (object1 != null && object2 == null) {
				returnValue = -1;
			} else {
				returnValue = 0;
			}

			return returnValue;
		}

		private int compareStrings(String string1, String string2) {
			return string1.compareTo(string2);
		}

	}

	public void tDBRow_33Process(final java.util.Map<String, Object> globalMap) throws TalendException {
		globalMap.put("tDBRow_33_SUBPROCESS_STATE", 0);

		final boolean execStat = this.execStat;

		String iterateId = "";

		String currentComponent = "";
		java.util.Map<String, Object> resourceMap = new java.util.HashMap<String, Object>();

		try {
			// TDI-39566 avoid throwing an useless Exception
			boolean resumeIt = true;
			if (globalResumeTicket == false && resumeEntryMethodName != null) {
				String currentMethodName = new java.lang.Exception().getStackTrace()[0].getMethodName();
				resumeIt = resumeEntryMethodName.equals(currentMethodName);
			}
			if (resumeIt || globalResumeTicket) { // start the resume
				globalResumeTicket = true;

				row71Struct row71 = new row71Struct();
				row72Struct row72 = new row72Struct();

				/**
				 * [tDBCommit_33 begin ] start
				 */

				ok_Hash.put("tDBCommit_33", false);
				start_Hash.put("tDBCommit_33", System.currentTimeMillis());

				currentComponent = "tDBCommit_33";

				if (execStat) {
					runStat.updateStatOnConnection(resourceMap, iterateId, 0, 0, "row71");
				}

				int tos_count_tDBCommit_33 = 0;

				/**
				 * [tDBCommit_33 begin ] stop
				 */

				/**
				 * [tLogRow_40 begin ] start
				 */

				ok_Hash.put("tLogRow_40", false);
				start_Hash.put("tLogRow_40", System.currentTimeMillis());

				currentComponent = "tLogRow_40";

				if (execStat) {
					runStat.updateStatOnConnection(resourceMap, iterateId, 0, 0, "row72");
				}

				int tos_count_tLogRow_40 = 0;

				///////////////////////

				final String OUTPUT_FIELD_SEPARATOR_tLogRow_40 = "|";
				java.io.PrintStream consoleOut_tLogRow_40 = null;

				StringBuilder strBuffer_tLogRow_40 = null;
				int nb_line_tLogRow_40 = 0;
///////////////////////    			

				/**
				 * [tLogRow_40 begin ] stop
				 */

				/**
				 * [tDBRow_33 begin ] start
				 */

				ok_Hash.put("tDBRow_33", false);
				start_Hash.put("tDBRow_33", System.currentTimeMillis());

				tStatCatcher_1.addMessage("begin", "tDBRow_33");
				tStatCatcher_1Process(globalMap);

				currentComponent = "tDBRow_33";

				int tos_count_tDBRow_33 = 0;

				java.sql.Connection conn_tDBRow_33 = null;
				String query_tDBRow_33 = "";
				boolean whetherReject_tDBRow_33 = false;
				conn_tDBRow_33 = (java.sql.Connection) globalMap.get("conn_tMSSqlConnection_3");

				resourceMap.put("conn_tDBRow_33", conn_tDBRow_33);
				java.sql.Statement stmt_tDBRow_33 = conn_tDBRow_33.createStatement();
				resourceMap.put("stmt_tDBRow_33", stmt_tDBRow_33);

				/**
				 * [tDBRow_33 begin ] stop
				 */

				/**
				 * [tDBRow_33 main ] start
				 */

				currentComponent = "tDBRow_33";

				row71 = null;

				row72 = null;

				query_tDBRow_33 = "\n	 		INSERT INTO  IP_PROC   \n				( ROW_VERSION , \n				PROC_TYP , \n				PROC_NBR , \n				CREATION_DATE , \n				DOC_OR"
						+ "I , \n				DOC_LOG , \n				DOC_SER , \n				DOC_NBR , \n				USERDOC_TYP , \n				USERDOC_FILE_SEQ , \n				USERDOC_FILE_TYP "
						+ ", \n				USERDOC_FILE_SER , \n				USERDOC_FILE_NBR , \n				STATUS_CODE , \n				STATUS_DATE , \n				UPPER_PROC_TYP, \n				"
						+ "UPPER_PROC_NBR,\n				FILE_PROC_TYP , \n				FILE_PROC_NBR )  \n		SELECT\n				 1,\n				 USERDOC_FILE_PROC_TYP,\n				 USERD"
						+ "OC_FILE_PROC_NBR,\n				 RECEPTION_DATE,\n				 u.DOC_ORI,\n				 'E',\n				 DOC_SERIES,\n				 U.DOC_NBR,\n				 USERDOC_TYP"
						+ "E,\n				 UF.file_seq,\n				 UF.file_type,\n				 UF.file_series,\n				 UF.file_nbr,\n				 USERDOC_FILE_STATUS_CODE,\n				"
						+ " RECEPTION_DATE,\n				 F.PROC_TYP,\n				 F.PROC_NBR,\n				 F.PROC_TYP,\n				 F.PROC_NBR\n		FROM  wrk_userdoc U JOIN wrk_"
						+ "userdoc_files UF ON U.userdoc_seq  = UF.userdoc_seq\n			 AND	U.userdoc_series  = UF.userdoc_series\n			 AND	U.userdoc_nb"
						+ "r  = UF.userdoc_nbr  JOIN IP_FILE F ON UF.file_seq  = F.file_seq COLLATE DATABASE_DEFAULT\n			 AND	UF.file_type  = F.fil"
						+ "e_typ COLLATE DATABASE_DEFAULT\n			 AND	UF.file_series  = F.file_ser\n			 AND	UF.file_nbr  = F.file_nbr  \n		WHERE	 USER"
						+ "DOC_FILE_PROC_TYP  is not null;\n";
				whetherReject_tDBRow_33 = false;
				globalMap.put("tDBRow_33_QUERY", query_tDBRow_33);
				try {
					stmt_tDBRow_33.execute(query_tDBRow_33);

				} catch (java.lang.Exception e) {
					whetherReject_tDBRow_33 = true;

					row72 = new row72Struct();

					row72.errorCode = ((java.sql.SQLException) e).getSQLState();
					row72.errorMessage = e.getMessage() + " - Line: " + tos_count_tDBRow_33;

				}

				if (!whetherReject_tDBRow_33) {

					row71 = new row71Struct();

				}

				tos_count_tDBRow_33++;

				/**
				 * [tDBRow_33 main ] stop
				 */

				/**
				 * [tDBRow_33 process_data_begin ] start
				 */

				currentComponent = "tDBRow_33";

				/**
				 * [tDBRow_33 process_data_begin ] stop
				 */
// Start of branch "row71"
				if (row71 != null) {

					/**
					 * [tDBCommit_33 main ] start
					 */

					currentComponent = "tDBCommit_33";

					if (execStat) {
						runStat.updateStatOnConnection(iterateId, 1, 1

								, "row71"

						);
					}

					java.sql.Connection conn_tDBCommit_33 = (java.sql.Connection) globalMap
							.get("conn_tMSSqlConnection_3");
					if (conn_tDBCommit_33 != null && !conn_tDBCommit_33.isClosed()) {

						conn_tDBCommit_33.commit();

					}

					tos_count_tDBCommit_33++;

					/**
					 * [tDBCommit_33 main ] stop
					 */

					/**
					 * [tDBCommit_33 process_data_begin ] start
					 */

					currentComponent = "tDBCommit_33";

					/**
					 * [tDBCommit_33 process_data_begin ] stop
					 */

					/**
					 * [tDBCommit_33 process_data_end ] start
					 */

					currentComponent = "tDBCommit_33";

					/**
					 * [tDBCommit_33 process_data_end ] stop
					 */

				} // End of branch "row71"

// Start of branch "row72"
				if (row72 != null) {

					/**
					 * [tLogRow_40 main ] start
					 */

					currentComponent = "tLogRow_40";

					if (execStat) {
						runStat.updateStatOnConnection(iterateId, 1, 1

								, "row72"

						);
					}

///////////////////////		

					strBuffer_tLogRow_40 = new StringBuilder();

					if (row72.errorCode != null) { //

						strBuffer_tLogRow_40.append(String.valueOf(row72.errorCode));

					} //

					strBuffer_tLogRow_40.append("|");

					if (row72.errorMessage != null) { //

						strBuffer_tLogRow_40.append(String.valueOf(row72.errorMessage));

					} //

					if (globalMap.get("tLogRow_CONSOLE") != null) {
						consoleOut_tLogRow_40 = (java.io.PrintStream) globalMap.get("tLogRow_CONSOLE");
					} else {
						consoleOut_tLogRow_40 = new java.io.PrintStream(new java.io.BufferedOutputStream(System.out));
						globalMap.put("tLogRow_CONSOLE", consoleOut_tLogRow_40);
					}
					consoleOut_tLogRow_40.println(strBuffer_tLogRow_40.toString());
					consoleOut_tLogRow_40.flush();
					nb_line_tLogRow_40++;
//////

//////                    

///////////////////////    			

					tos_count_tLogRow_40++;

					/**
					 * [tLogRow_40 main ] stop
					 */

					/**
					 * [tLogRow_40 process_data_begin ] start
					 */

					currentComponent = "tLogRow_40";

					/**
					 * [tLogRow_40 process_data_begin ] stop
					 */

					/**
					 * [tLogRow_40 process_data_end ] start
					 */

					currentComponent = "tLogRow_40";

					/**
					 * [tLogRow_40 process_data_end ] stop
					 */

				} // End of branch "row72"

				/**
				 * [tDBRow_33 process_data_end ] start
				 */

				currentComponent = "tDBRow_33";

				/**
				 * [tDBRow_33 process_data_end ] stop
				 */

				/**
				 * [tDBRow_33 end ] start
				 */

				currentComponent = "tDBRow_33";

				stmt_tDBRow_33.close();
				resourceMap.remove("stmt_tDBRow_33");
				resourceMap.put("statementClosed_tDBRow_33", true);
				resourceMap.put("finish_tDBRow_33", true);

				ok_Hash.put("tDBRow_33", true);
				end_Hash.put("tDBRow_33", System.currentTimeMillis());

				tStatCatcher_1.addMessage("end", "tDBRow_33", end_Hash.get("tDBRow_33") - start_Hash.get("tDBRow_33"));
				tStatCatcher_1Process(globalMap);

				/**
				 * [tDBRow_33 end ] stop
				 */

				/**
				 * [tDBCommit_33 end ] start
				 */

				currentComponent = "tDBCommit_33";

				if (execStat) {
					runStat.updateStat(resourceMap, iterateId, 2, 0, "row71");
				}

				ok_Hash.put("tDBCommit_33", true);
				end_Hash.put("tDBCommit_33", System.currentTimeMillis());

				/**
				 * [tDBCommit_33 end ] stop
				 */

				/**
				 * [tLogRow_40 end ] start
				 */

				currentComponent = "tLogRow_40";

//////
//////
				globalMap.put("tLogRow_40_NB_LINE", nb_line_tLogRow_40);

///////////////////////    			

				if (execStat) {
					runStat.updateStat(resourceMap, iterateId, 2, 0, "row72");
				}

				ok_Hash.put("tLogRow_40", true);
				end_Hash.put("tLogRow_40", System.currentTimeMillis());

				/**
				 * [tLogRow_40 end ] stop
				 */

			} // end the resume

			if (resumeEntryMethodName == null || globalResumeTicket) {
				resumeUtil.addLog("CHECKPOINT", "CONNECTION:SUBJOB_OK:tDBRow_33:OnSubjobOk", "",
						Thread.currentThread().getId() + "", "", "", "", "", "");
			}

			if (execStat) {
				runStat.updateStatOnConnection("OnSubjobOk41", 0, "ok");
			}

			tDBRow_9Process(globalMap);

		} catch (java.lang.Exception e) {

			TalendException te = new TalendException(e, currentComponent, globalMap);

			throw te;
		} catch (java.lang.Error error) {

			runStat.stopThreadStat();

			throw error;
		} finally {

			try {

				/**
				 * [tDBRow_33 finally ] start
				 */

				currentComponent = "tDBRow_33";

				if (resourceMap.get("statementClosed_tDBRow_33") == null) {
					java.sql.Statement stmtToClose_tDBRow_33 = null;
					if ((stmtToClose_tDBRow_33 = (java.sql.Statement) resourceMap.remove("stmt_tDBRow_33")) != null) {
						stmtToClose_tDBRow_33.close();
					}
				}

				/**
				 * [tDBRow_33 finally ] stop
				 */

				/**
				 * [tDBCommit_33 finally ] start
				 */

				currentComponent = "tDBCommit_33";

				/**
				 * [tDBCommit_33 finally ] stop
				 */

				/**
				 * [tLogRow_40 finally ] start
				 */

				currentComponent = "tLogRow_40";

				/**
				 * [tLogRow_40 finally ] stop
				 */

			} catch (java.lang.Exception e) {
				// ignore
			} catch (java.lang.Error error) {
				// ignore
			}
			resourceMap = null;
		}

		globalMap.put("tDBRow_33_SUBPROCESS_STATE", 1);
	}

	public static class row18Struct implements routines.system.IPersistableRow<row18Struct> {
		final static byte[] commonByteArrayLock_WIPO_PROJECTS_G3b_Mig_UD = new byte[0];
		static byte[] commonByteArray_WIPO_PROJECTS_G3b_Mig_UD = new byte[0];

		public void readData(ObjectInputStream dis) {

			synchronized (commonByteArrayLock_WIPO_PROJECTS_G3b_Mig_UD) {

				try {

					int length = 0;

				}

				finally {
				}

			}

		}

		public void writeData(ObjectOutputStream dos) {
			try {

			}

			finally {
			}

		}

		public String toString() {

			StringBuilder sb = new StringBuilder();
			sb.append(super.toString());
			sb.append("[");
			sb.append("]");

			return sb.toString();
		}

		/**
		 * Compare keys
		 */
		public int compareTo(row18Struct other) {

			int returnValue = -1;

			return returnValue;
		}

		private int checkNullsAndCompare(Object object1, Object object2) {
			int returnValue = 0;
			if (object1 instanceof Comparable && object2 instanceof Comparable) {
				returnValue = ((Comparable) object1).compareTo(object2);
			} else if (object1 != null && object2 != null) {
				returnValue = compareStrings(object1.toString(), object2.toString());
			} else if (object1 == null && object2 != null) {
				returnValue = 1;
			} else if (object1 != null && object2 == null) {
				returnValue = -1;
			} else {
				returnValue = 0;
			}

			return returnValue;
		}

		private int compareStrings(String string1, String string2) {
			return string1.compareTo(string2);
		}

	}

	public static class row73Struct implements routines.system.IPersistableRow<row73Struct> {
		final static byte[] commonByteArrayLock_WIPO_PROJECTS_G3b_Mig_UD = new byte[0];
		static byte[] commonByteArray_WIPO_PROJECTS_G3b_Mig_UD = new byte[0];

		public String errorCode;

		public String getErrorCode() {
			return this.errorCode;
		}

		public String errorMessage;

		public String getErrorMessage() {
			return this.errorMessage;
		}

		private String readString(ObjectInputStream dis) throws IOException {
			String strReturn = null;
			int length = 0;
			length = dis.readInt();
			if (length == -1) {
				strReturn = null;
			} else {
				if (length > commonByteArray_WIPO_PROJECTS_G3b_Mig_UD.length) {
					if (length < 1024 && commonByteArray_WIPO_PROJECTS_G3b_Mig_UD.length == 0) {
						commonByteArray_WIPO_PROJECTS_G3b_Mig_UD = new byte[1024];
					} else {
						commonByteArray_WIPO_PROJECTS_G3b_Mig_UD = new byte[2 * length];
					}
				}
				dis.readFully(commonByteArray_WIPO_PROJECTS_G3b_Mig_UD, 0, length);
				strReturn = new String(commonByteArray_WIPO_PROJECTS_G3b_Mig_UD, 0, length, utf8Charset);
			}
			return strReturn;
		}

		private void writeString(String str, ObjectOutputStream dos) throws IOException {
			if (str == null) {
				dos.writeInt(-1);
			} else {
				byte[] byteArray = str.getBytes(utf8Charset);
				dos.writeInt(byteArray.length);
				dos.write(byteArray);
			}
		}

		public void readData(ObjectInputStream dis) {

			synchronized (commonByteArrayLock_WIPO_PROJECTS_G3b_Mig_UD) {

				try {

					int length = 0;

					this.errorCode = readString(dis);

					this.errorMessage = readString(dis);

				} catch (IOException e) {
					throw new RuntimeException(e);

				}

			}

		}

		public void writeData(ObjectOutputStream dos) {
			try {

				// String

				writeString(this.errorCode, dos);

				// String

				writeString(this.errorMessage, dos);

			} catch (IOException e) {
				throw new RuntimeException(e);
			}

		}

		public String toString() {

			StringBuilder sb = new StringBuilder();
			sb.append(super.toString());
			sb.append("[");
			sb.append("errorCode=" + errorCode);
			sb.append(",errorMessage=" + errorMessage);
			sb.append("]");

			return sb.toString();
		}

		/**
		 * Compare keys
		 */
		public int compareTo(row73Struct other) {

			int returnValue = -1;

			return returnValue;
		}

		private int checkNullsAndCompare(Object object1, Object object2) {
			int returnValue = 0;
			if (object1 instanceof Comparable && object2 instanceof Comparable) {
				returnValue = ((Comparable) object1).compareTo(object2);
			} else if (object1 != null && object2 != null) {
				returnValue = compareStrings(object1.toString(), object2.toString());
			} else if (object1 == null && object2 != null) {
				returnValue = 1;
			} else if (object1 != null && object2 == null) {
				returnValue = -1;
			} else {
				returnValue = 0;
			}

			return returnValue;
		}

		private int compareStrings(String string1, String string2) {
			return string1.compareTo(string2);
		}

	}

	public void tDBRow_9Process(final java.util.Map<String, Object> globalMap) throws TalendException {
		globalMap.put("tDBRow_9_SUBPROCESS_STATE", 0);

		final boolean execStat = this.execStat;

		String iterateId = "";

		String currentComponent = "";
		java.util.Map<String, Object> resourceMap = new java.util.HashMap<String, Object>();

		try {
			// TDI-39566 avoid throwing an useless Exception
			boolean resumeIt = true;
			if (globalResumeTicket == false && resumeEntryMethodName != null) {
				String currentMethodName = new java.lang.Exception().getStackTrace()[0].getMethodName();
				resumeIt = resumeEntryMethodName.equals(currentMethodName);
			}
			if (resumeIt || globalResumeTicket) { // start the resume
				globalResumeTicket = true;

				row18Struct row18 = new row18Struct();
				row73Struct row73 = new row73Struct();

				/**
				 * [tDBCommit_9 begin ] start
				 */

				ok_Hash.put("tDBCommit_9", false);
				start_Hash.put("tDBCommit_9", System.currentTimeMillis());

				currentComponent = "tDBCommit_9";

				if (execStat) {
					runStat.updateStatOnConnection(resourceMap, iterateId, 0, 0, "row18");
				}

				int tos_count_tDBCommit_9 = 0;

				/**
				 * [tDBCommit_9 begin ] stop
				 */

				/**
				 * [tLogRow_41 begin ] start
				 */

				ok_Hash.put("tLogRow_41", false);
				start_Hash.put("tLogRow_41", System.currentTimeMillis());

				currentComponent = "tLogRow_41";

				if (execStat) {
					runStat.updateStatOnConnection(resourceMap, iterateId, 0, 0, "row73");
				}

				int tos_count_tLogRow_41 = 0;

				///////////////////////

				final String OUTPUT_FIELD_SEPARATOR_tLogRow_41 = "|";
				java.io.PrintStream consoleOut_tLogRow_41 = null;

				StringBuilder strBuffer_tLogRow_41 = null;
				int nb_line_tLogRow_41 = 0;
///////////////////////    			

				/**
				 * [tLogRow_41 begin ] stop
				 */

				/**
				 * [tDBRow_9 begin ] start
				 */

				ok_Hash.put("tDBRow_9", false);
				start_Hash.put("tDBRow_9", System.currentTimeMillis());

				tStatCatcher_1.addMessage("begin", "tDBRow_9");
				tStatCatcher_1Process(globalMap);

				currentComponent = "tDBRow_9";

				int tos_count_tDBRow_9 = 0;

				java.sql.Connection conn_tDBRow_9 = null;
				String query_tDBRow_9 = "";
				boolean whetherReject_tDBRow_9 = false;
				conn_tDBRow_9 = (java.sql.Connection) globalMap.get("conn_tMSSqlConnection_3");

				resourceMap.put("conn_tDBRow_9", conn_tDBRow_9);
				java.sql.Statement stmt_tDBRow_9 = conn_tDBRow_9.createStatement();
				resourceMap.put("stmt_tDBRow_9", stmt_tDBRow_9);

				/**
				 * [tDBRow_9 begin ] stop
				 */

				/**
				 * [tDBRow_9 main ] start
				 */

				currentComponent = "tDBRow_9";

				row18 = null;

				row73 = null;

				query_tDBRow_9 = "ALTER TABLE IP_USERDOC_TYPES CHECK CONSTRAINT PROMOCION_TIPO_FK_TRAMITE;\nINSERT INTO  IP_ACTION   \n				( ROW_VERSION "
						+ ", \n				PROC_TYP , \n				PROC_NBR , \n				ACTION_NBR , \n				ACTION_TYP , \n				ACTION_DATE , \n				CAPTURE_DATE , \n			"
						+ "	SIGNATURE_DATE , \n				CAPTURE_USER_ID , \n				AUTHORISING_USER_ID , \n				NOTES2 , \n				NOTES3 , \n				NOTES4 , \n			"
						+ "	NOTES5 , \n				ACTION_NOTES , \n				IND_CHANGES_STATUS , \n				NEW_STATUS_CODE , \n				PRIOR_STATUS_CODE , \n				PRIOR_"
						+ "STATUS_DATE , \n				PRIOR_DUE_DATE , \n				NOTES1)  \n		SELECT\n				 1,\n				 USERDOC_PROC_TYP,\n				 USERDOC_PROC_NBR,"
						+ "\n				 ACTION_NBR,\n				 ACTION_TYPE,\n				 ACTION_DATE,\n				 ACTION_DATE,\n				 ACTION_DATE,\n				 ACTION_USER,\n				 A"
						+ "CTION_USER,\n				 ACTION_NOTES2,\n				 ACTION_NOTES3,\n				 ACTION_NOTES4,\n				 ACTION_NOTES5,\n				 GENERAL_NOTES,\n		"
						+ "		 'N',\n				 null,\n				 null,\n				 null,\n				 null,\n				 ACTION_NOTES1\n		FROM  wrk_userdoc_actions T JOIN wrk_user"
						+ "doc U ON U.userdoc_seq  = T.userdoc_seq\n			 AND	U.userdoc_series  = T.userdoc_series\n			 AND	U.userdoc_nbr  = T.userdo"
						+ "c_nbr  \n		WHERE	 USERDOC_PROC_TYP  is not null\n		 AND	ACTION_CATEGORY  = 'N';\n";
				whetherReject_tDBRow_9 = false;
				globalMap.put("tDBRow_9_QUERY", query_tDBRow_9);
				try {
					stmt_tDBRow_9.execute(query_tDBRow_9);

				} catch (java.lang.Exception e) {
					whetherReject_tDBRow_9 = true;

					row73 = new row73Struct();

					row73.errorCode = ((java.sql.SQLException) e).getSQLState();
					row73.errorMessage = e.getMessage() + " - Line: " + tos_count_tDBRow_9;

				}

				if (!whetherReject_tDBRow_9) {

					row18 = new row18Struct();

				}

				tos_count_tDBRow_9++;

				/**
				 * [tDBRow_9 main ] stop
				 */

				/**
				 * [tDBRow_9 process_data_begin ] start
				 */

				currentComponent = "tDBRow_9";

				/**
				 * [tDBRow_9 process_data_begin ] stop
				 */
// Start of branch "row18"
				if (row18 != null) {

					/**
					 * [tDBCommit_9 main ] start
					 */

					currentComponent = "tDBCommit_9";

					if (execStat) {
						runStat.updateStatOnConnection(iterateId, 1, 1

								, "row18"

						);
					}

					java.sql.Connection conn_tDBCommit_9 = (java.sql.Connection) globalMap
							.get("conn_tMSSqlConnection_3");
					if (conn_tDBCommit_9 != null && !conn_tDBCommit_9.isClosed()) {

						conn_tDBCommit_9.commit();

					}

					tos_count_tDBCommit_9++;

					/**
					 * [tDBCommit_9 main ] stop
					 */

					/**
					 * [tDBCommit_9 process_data_begin ] start
					 */

					currentComponent = "tDBCommit_9";

					/**
					 * [tDBCommit_9 process_data_begin ] stop
					 */

					/**
					 * [tDBCommit_9 process_data_end ] start
					 */

					currentComponent = "tDBCommit_9";

					/**
					 * [tDBCommit_9 process_data_end ] stop
					 */

				} // End of branch "row18"

// Start of branch "row73"
				if (row73 != null) {

					/**
					 * [tLogRow_41 main ] start
					 */

					currentComponent = "tLogRow_41";

					if (execStat) {
						runStat.updateStatOnConnection(iterateId, 1, 1

								, "row73"

						);
					}

///////////////////////		

					strBuffer_tLogRow_41 = new StringBuilder();

					if (row73.errorCode != null) { //

						strBuffer_tLogRow_41.append(String.valueOf(row73.errorCode));

					} //

					strBuffer_tLogRow_41.append("|");

					if (row73.errorMessage != null) { //

						strBuffer_tLogRow_41.append(String.valueOf(row73.errorMessage));

					} //

					if (globalMap.get("tLogRow_CONSOLE") != null) {
						consoleOut_tLogRow_41 = (java.io.PrintStream) globalMap.get("tLogRow_CONSOLE");
					} else {
						consoleOut_tLogRow_41 = new java.io.PrintStream(new java.io.BufferedOutputStream(System.out));
						globalMap.put("tLogRow_CONSOLE", consoleOut_tLogRow_41);
					}
					consoleOut_tLogRow_41.println(strBuffer_tLogRow_41.toString());
					consoleOut_tLogRow_41.flush();
					nb_line_tLogRow_41++;
//////

//////                    

///////////////////////    			

					tos_count_tLogRow_41++;

					/**
					 * [tLogRow_41 main ] stop
					 */

					/**
					 * [tLogRow_41 process_data_begin ] start
					 */

					currentComponent = "tLogRow_41";

					/**
					 * [tLogRow_41 process_data_begin ] stop
					 */

					/**
					 * [tLogRow_41 process_data_end ] start
					 */

					currentComponent = "tLogRow_41";

					/**
					 * [tLogRow_41 process_data_end ] stop
					 */

				} // End of branch "row73"

				/**
				 * [tDBRow_9 process_data_end ] start
				 */

				currentComponent = "tDBRow_9";

				/**
				 * [tDBRow_9 process_data_end ] stop
				 */

				/**
				 * [tDBRow_9 end ] start
				 */

				currentComponent = "tDBRow_9";

				stmt_tDBRow_9.close();
				resourceMap.remove("stmt_tDBRow_9");
				resourceMap.put("statementClosed_tDBRow_9", true);
				resourceMap.put("finish_tDBRow_9", true);

				ok_Hash.put("tDBRow_9", true);
				end_Hash.put("tDBRow_9", System.currentTimeMillis());

				tStatCatcher_1.addMessage("end", "tDBRow_9", end_Hash.get("tDBRow_9") - start_Hash.get("tDBRow_9"));
				tStatCatcher_1Process(globalMap);

				/**
				 * [tDBRow_9 end ] stop
				 */

				/**
				 * [tDBCommit_9 end ] start
				 */

				currentComponent = "tDBCommit_9";

				if (execStat) {
					runStat.updateStat(resourceMap, iterateId, 2, 0, "row18");
				}

				ok_Hash.put("tDBCommit_9", true);
				end_Hash.put("tDBCommit_9", System.currentTimeMillis());

				/**
				 * [tDBCommit_9 end ] stop
				 */

				/**
				 * [tLogRow_41 end ] start
				 */

				currentComponent = "tLogRow_41";

//////
//////
				globalMap.put("tLogRow_41_NB_LINE", nb_line_tLogRow_41);

///////////////////////    			

				if (execStat) {
					runStat.updateStat(resourceMap, iterateId, 2, 0, "row73");
				}

				ok_Hash.put("tLogRow_41", true);
				end_Hash.put("tLogRow_41", System.currentTimeMillis());

				/**
				 * [tLogRow_41 end ] stop
				 */

			} // end the resume

			if (resumeEntryMethodName == null || globalResumeTicket) {
				resumeUtil.addLog("CHECKPOINT", "CONNECTION:SUBJOB_OK:tDBRow_9:OnSubjobOk", "",
						Thread.currentThread().getId() + "", "", "", "", "", "");
			}

			if (execStat) {
				runStat.updateStatOnConnection("OnSubjobOk40", 0, "ok");
			}

			tDBRow_34Process(globalMap);

		} catch (java.lang.Exception e) {

			TalendException te = new TalendException(e, currentComponent, globalMap);

			throw te;
		} catch (java.lang.Error error) {

			runStat.stopThreadStat();

			throw error;
		} finally {

			try {

				/**
				 * [tDBRow_9 finally ] start
				 */

				currentComponent = "tDBRow_9";

				if (resourceMap.get("statementClosed_tDBRow_9") == null) {
					java.sql.Statement stmtToClose_tDBRow_9 = null;
					if ((stmtToClose_tDBRow_9 = (java.sql.Statement) resourceMap.remove("stmt_tDBRow_9")) != null) {
						stmtToClose_tDBRow_9.close();
					}
				}

				/**
				 * [tDBRow_9 finally ] stop
				 */

				/**
				 * [tDBCommit_9 finally ] start
				 */

				currentComponent = "tDBCommit_9";

				/**
				 * [tDBCommit_9 finally ] stop
				 */

				/**
				 * [tLogRow_41 finally ] start
				 */

				currentComponent = "tLogRow_41";

				/**
				 * [tLogRow_41 finally ] stop
				 */

			} catch (java.lang.Exception e) {
				// ignore
			} catch (java.lang.Error error) {
				// ignore
			}
			resourceMap = null;
		}

		globalMap.put("tDBRow_9_SUBPROCESS_STATE", 1);
	}

	public static class row74Struct implements routines.system.IPersistableRow<row74Struct> {
		final static byte[] commonByteArrayLock_WIPO_PROJECTS_G3b_Mig_UD = new byte[0];
		static byte[] commonByteArray_WIPO_PROJECTS_G3b_Mig_UD = new byte[0];

		public void readData(ObjectInputStream dis) {

			synchronized (commonByteArrayLock_WIPO_PROJECTS_G3b_Mig_UD) {

				try {

					int length = 0;

				}

				finally {
				}

			}

		}

		public void writeData(ObjectOutputStream dos) {
			try {

			}

			finally {
			}

		}

		public String toString() {

			StringBuilder sb = new StringBuilder();
			sb.append(super.toString());
			sb.append("[");
			sb.append("]");

			return sb.toString();
		}

		/**
		 * Compare keys
		 */
		public int compareTo(row74Struct other) {

			int returnValue = -1;

			return returnValue;
		}

		private int checkNullsAndCompare(Object object1, Object object2) {
			int returnValue = 0;
			if (object1 instanceof Comparable && object2 instanceof Comparable) {
				returnValue = ((Comparable) object1).compareTo(object2);
			} else if (object1 != null && object2 != null) {
				returnValue = compareStrings(object1.toString(), object2.toString());
			} else if (object1 == null && object2 != null) {
				returnValue = 1;
			} else if (object1 != null && object2 == null) {
				returnValue = -1;
			} else {
				returnValue = 0;
			}

			return returnValue;
		}

		private int compareStrings(String string1, String string2) {
			return string1.compareTo(string2);
		}

	}

	public static class row75Struct implements routines.system.IPersistableRow<row75Struct> {
		final static byte[] commonByteArrayLock_WIPO_PROJECTS_G3b_Mig_UD = new byte[0];
		static byte[] commonByteArray_WIPO_PROJECTS_G3b_Mig_UD = new byte[0];

		public String errorCode;

		public String getErrorCode() {
			return this.errorCode;
		}

		public String errorMessage;

		public String getErrorMessage() {
			return this.errorMessage;
		}

		private String readString(ObjectInputStream dis) throws IOException {
			String strReturn = null;
			int length = 0;
			length = dis.readInt();
			if (length == -1) {
				strReturn = null;
			} else {
				if (length > commonByteArray_WIPO_PROJECTS_G3b_Mig_UD.length) {
					if (length < 1024 && commonByteArray_WIPO_PROJECTS_G3b_Mig_UD.length == 0) {
						commonByteArray_WIPO_PROJECTS_G3b_Mig_UD = new byte[1024];
					} else {
						commonByteArray_WIPO_PROJECTS_G3b_Mig_UD = new byte[2 * length];
					}
				}
				dis.readFully(commonByteArray_WIPO_PROJECTS_G3b_Mig_UD, 0, length);
				strReturn = new String(commonByteArray_WIPO_PROJECTS_G3b_Mig_UD, 0, length, utf8Charset);
			}
			return strReturn;
		}

		private void writeString(String str, ObjectOutputStream dos) throws IOException {
			if (str == null) {
				dos.writeInt(-1);
			} else {
				byte[] byteArray = str.getBytes(utf8Charset);
				dos.writeInt(byteArray.length);
				dos.write(byteArray);
			}
		}

		public void readData(ObjectInputStream dis) {

			synchronized (commonByteArrayLock_WIPO_PROJECTS_G3b_Mig_UD) {

				try {

					int length = 0;

					this.errorCode = readString(dis);

					this.errorMessage = readString(dis);

				} catch (IOException e) {
					throw new RuntimeException(e);

				}

			}

		}

		public void writeData(ObjectOutputStream dos) {
			try {

				// String

				writeString(this.errorCode, dos);

				// String

				writeString(this.errorMessage, dos);

			} catch (IOException e) {
				throw new RuntimeException(e);
			}

		}

		public String toString() {

			StringBuilder sb = new StringBuilder();
			sb.append(super.toString());
			sb.append("[");
			sb.append("errorCode=" + errorCode);
			sb.append(",errorMessage=" + errorMessage);
			sb.append("]");

			return sb.toString();
		}

		/**
		 * Compare keys
		 */
		public int compareTo(row75Struct other) {

			int returnValue = -1;

			return returnValue;
		}

		private int checkNullsAndCompare(Object object1, Object object2) {
			int returnValue = 0;
			if (object1 instanceof Comparable && object2 instanceof Comparable) {
				returnValue = ((Comparable) object1).compareTo(object2);
			} else if (object1 != null && object2 != null) {
				returnValue = compareStrings(object1.toString(), object2.toString());
			} else if (object1 == null && object2 != null) {
				returnValue = 1;
			} else if (object1 != null && object2 == null) {
				returnValue = -1;
			} else {
				returnValue = 0;
			}

			return returnValue;
		}

		private int compareStrings(String string1, String string2) {
			return string1.compareTo(string2);
		}

	}

	public void tDBRow_34Process(final java.util.Map<String, Object> globalMap) throws TalendException {
		globalMap.put("tDBRow_34_SUBPROCESS_STATE", 0);

		final boolean execStat = this.execStat;

		String iterateId = "";

		String currentComponent = "";
		java.util.Map<String, Object> resourceMap = new java.util.HashMap<String, Object>();

		try {
			// TDI-39566 avoid throwing an useless Exception
			boolean resumeIt = true;
			if (globalResumeTicket == false && resumeEntryMethodName != null) {
				String currentMethodName = new java.lang.Exception().getStackTrace()[0].getMethodName();
				resumeIt = resumeEntryMethodName.equals(currentMethodName);
			}
			if (resumeIt || globalResumeTicket) { // start the resume
				globalResumeTicket = true;

				row74Struct row74 = new row74Struct();
				row75Struct row75 = new row75Struct();

				/**
				 * [tDBCommit_34 begin ] start
				 */

				ok_Hash.put("tDBCommit_34", false);
				start_Hash.put("tDBCommit_34", System.currentTimeMillis());

				currentComponent = "tDBCommit_34";

				if (execStat) {
					runStat.updateStatOnConnection(resourceMap, iterateId, 0, 0, "row74");
				}

				int tos_count_tDBCommit_34 = 0;

				/**
				 * [tDBCommit_34 begin ] stop
				 */

				/**
				 * [tLogRow_42 begin ] start
				 */

				ok_Hash.put("tLogRow_42", false);
				start_Hash.put("tLogRow_42", System.currentTimeMillis());

				currentComponent = "tLogRow_42";

				if (execStat) {
					runStat.updateStatOnConnection(resourceMap, iterateId, 0, 0, "row75");
				}

				int tos_count_tLogRow_42 = 0;

				///////////////////////

				final String OUTPUT_FIELD_SEPARATOR_tLogRow_42 = "|";
				java.io.PrintStream consoleOut_tLogRow_42 = null;

				StringBuilder strBuffer_tLogRow_42 = null;
				int nb_line_tLogRow_42 = 0;
///////////////////////    			

				/**
				 * [tLogRow_42 begin ] stop
				 */

				/**
				 * [tDBRow_34 begin ] start
				 */

				ok_Hash.put("tDBRow_34", false);
				start_Hash.put("tDBRow_34", System.currentTimeMillis());

				tStatCatcher_1.addMessage("begin", "tDBRow_34");
				tStatCatcher_1Process(globalMap);

				currentComponent = "tDBRow_34";

				int tos_count_tDBRow_34 = 0;

				java.sql.Connection conn_tDBRow_34 = null;
				String query_tDBRow_34 = "";
				boolean whetherReject_tDBRow_34 = false;
				conn_tDBRow_34 = (java.sql.Connection) globalMap.get("conn_tMSSqlConnection_3");

				resourceMap.put("conn_tDBRow_34", conn_tDBRow_34);
				java.sql.Statement stmt_tDBRow_34 = conn_tDBRow_34.createStatement();
				resourceMap.put("stmt_tDBRow_34", stmt_tDBRow_34);

				/**
				 * [tDBRow_34 begin ] stop
				 */

				/**
				 * [tDBRow_34 main ] start
				 */

				currentComponent = "tDBRow_34";

				row74 = null;

				row75 = null;

				query_tDBRow_34 = "	INSERT INTO  ip_userdoc_procs   \n				( ROW_VERSION , \n				DOC_ORI , \n				DOC_LOG , \n				DOC_SER , \n				DOC_NBR , "
						+ "\n				USERDOC_TYP , \n				USERDOC_FILE_SEQ , \n				USERDOC_FILE_TYP , \n				USERDOC_FILE_SER , \n				USERDOC_FILE_NBR , "
						+ "\n				PROC_TYP , \n				PROC_NBR )  \n		SELECT		 DISTINCT\n				 1,\n				 U.DOC_ORI,\n				 'E',\n				 U.DOC_SERIES,\n				 "
						+ "U.DOC_NBR,\n				 USERDOC_TYPE,\n				 FILE_SEQ,\n				 FILE_TYPE,\n				 FILE_SERIES,\n				 FILE_NBR,\n				 USERDOC_FILE_PR"
						+ "OC_TYP,\n				 USERDOC_FILE_PROC_NBR\n		FROM  wrk_userdoc_files UF JOIN wrk_userdoc U ON U.userdoc_seq  = UF.userdoc_seq"
						+ "\n			 AND	U.userdoc_series  = UF.userdoc_series\n			 AND	U.userdoc_nbr  = UF.userdoc_nbr  \n		WHERE	 USERDOC_FILE_PROC_TY"
						+ "P  is not null;\n		 \n";
				whetherReject_tDBRow_34 = false;
				globalMap.put("tDBRow_34_QUERY", query_tDBRow_34);
				try {
					stmt_tDBRow_34.execute(query_tDBRow_34);

				} catch (java.lang.Exception e) {
					whetherReject_tDBRow_34 = true;

					row75 = new row75Struct();

					row75.errorCode = ((java.sql.SQLException) e).getSQLState();
					row75.errorMessage = e.getMessage() + " - Line: " + tos_count_tDBRow_34;

				}

				if (!whetherReject_tDBRow_34) {

					row74 = new row74Struct();

				}

				tos_count_tDBRow_34++;

				/**
				 * [tDBRow_34 main ] stop
				 */

				/**
				 * [tDBRow_34 process_data_begin ] start
				 */

				currentComponent = "tDBRow_34";

				/**
				 * [tDBRow_34 process_data_begin ] stop
				 */
// Start of branch "row74"
				if (row74 != null) {

					/**
					 * [tDBCommit_34 main ] start
					 */

					currentComponent = "tDBCommit_34";

					if (execStat) {
						runStat.updateStatOnConnection(iterateId, 1, 1

								, "row74"

						);
					}

					java.sql.Connection conn_tDBCommit_34 = (java.sql.Connection) globalMap
							.get("conn_tMSSqlConnection_3");
					if (conn_tDBCommit_34 != null && !conn_tDBCommit_34.isClosed()) {

						conn_tDBCommit_34.commit();

					}

					tos_count_tDBCommit_34++;

					/**
					 * [tDBCommit_34 main ] stop
					 */

					/**
					 * [tDBCommit_34 process_data_begin ] start
					 */

					currentComponent = "tDBCommit_34";

					/**
					 * [tDBCommit_34 process_data_begin ] stop
					 */

					/**
					 * [tDBCommit_34 process_data_end ] start
					 */

					currentComponent = "tDBCommit_34";

					/**
					 * [tDBCommit_34 process_data_end ] stop
					 */

				} // End of branch "row74"

// Start of branch "row75"
				if (row75 != null) {

					/**
					 * [tLogRow_42 main ] start
					 */

					currentComponent = "tLogRow_42";

					if (execStat) {
						runStat.updateStatOnConnection(iterateId, 1, 1

								, "row75"

						);
					}

///////////////////////		

					strBuffer_tLogRow_42 = new StringBuilder();

					if (row75.errorCode != null) { //

						strBuffer_tLogRow_42.append(String.valueOf(row75.errorCode));

					} //

					strBuffer_tLogRow_42.append("|");

					if (row75.errorMessage != null) { //

						strBuffer_tLogRow_42.append(String.valueOf(row75.errorMessage));

					} //

					if (globalMap.get("tLogRow_CONSOLE") != null) {
						consoleOut_tLogRow_42 = (java.io.PrintStream) globalMap.get("tLogRow_CONSOLE");
					} else {
						consoleOut_tLogRow_42 = new java.io.PrintStream(new java.io.BufferedOutputStream(System.out));
						globalMap.put("tLogRow_CONSOLE", consoleOut_tLogRow_42);
					}
					consoleOut_tLogRow_42.println(strBuffer_tLogRow_42.toString());
					consoleOut_tLogRow_42.flush();
					nb_line_tLogRow_42++;
//////

//////                    

///////////////////////    			

					tos_count_tLogRow_42++;

					/**
					 * [tLogRow_42 main ] stop
					 */

					/**
					 * [tLogRow_42 process_data_begin ] start
					 */

					currentComponent = "tLogRow_42";

					/**
					 * [tLogRow_42 process_data_begin ] stop
					 */

					/**
					 * [tLogRow_42 process_data_end ] start
					 */

					currentComponent = "tLogRow_42";

					/**
					 * [tLogRow_42 process_data_end ] stop
					 */

				} // End of branch "row75"

				/**
				 * [tDBRow_34 process_data_end ] start
				 */

				currentComponent = "tDBRow_34";

				/**
				 * [tDBRow_34 process_data_end ] stop
				 */

				/**
				 * [tDBRow_34 end ] start
				 */

				currentComponent = "tDBRow_34";

				stmt_tDBRow_34.close();
				resourceMap.remove("stmt_tDBRow_34");
				resourceMap.put("statementClosed_tDBRow_34", true);
				resourceMap.put("finish_tDBRow_34", true);

				ok_Hash.put("tDBRow_34", true);
				end_Hash.put("tDBRow_34", System.currentTimeMillis());

				tStatCatcher_1.addMessage("end", "tDBRow_34", end_Hash.get("tDBRow_34") - start_Hash.get("tDBRow_34"));
				tStatCatcher_1Process(globalMap);

				/**
				 * [tDBRow_34 end ] stop
				 */

				/**
				 * [tDBCommit_34 end ] start
				 */

				currentComponent = "tDBCommit_34";

				if (execStat) {
					runStat.updateStat(resourceMap, iterateId, 2, 0, "row74");
				}

				ok_Hash.put("tDBCommit_34", true);
				end_Hash.put("tDBCommit_34", System.currentTimeMillis());

				/**
				 * [tDBCommit_34 end ] stop
				 */

				/**
				 * [tLogRow_42 end ] start
				 */

				currentComponent = "tLogRow_42";

//////
//////
				globalMap.put("tLogRow_42_NB_LINE", nb_line_tLogRow_42);

///////////////////////    			

				if (execStat) {
					runStat.updateStat(resourceMap, iterateId, 2, 0, "row75");
				}

				ok_Hash.put("tLogRow_42", true);
				end_Hash.put("tLogRow_42", System.currentTimeMillis());

				/**
				 * [tLogRow_42 end ] stop
				 */

			} // end the resume

			if (resumeEntryMethodName == null || globalResumeTicket) {
				resumeUtil.addLog("CHECKPOINT", "CONNECTION:SUBJOB_OK:tDBRow_34:OnSubjobOk", "",
						Thread.currentThread().getId() + "", "", "", "", "", "");
			}

			if (execStat) {
				runStat.updateStatOnConnection("OnSubjobOk44", 0, "ok");
			}

			tDBRow_35Process(globalMap);

		} catch (java.lang.Exception e) {

			TalendException te = new TalendException(e, currentComponent, globalMap);

			throw te;
		} catch (java.lang.Error error) {

			runStat.stopThreadStat();

			throw error;
		} finally {

			try {

				/**
				 * [tDBRow_34 finally ] start
				 */

				currentComponent = "tDBRow_34";

				if (resourceMap.get("statementClosed_tDBRow_34") == null) {
					java.sql.Statement stmtToClose_tDBRow_34 = null;
					if ((stmtToClose_tDBRow_34 = (java.sql.Statement) resourceMap.remove("stmt_tDBRow_34")) != null) {
						stmtToClose_tDBRow_34.close();
					}
				}

				/**
				 * [tDBRow_34 finally ] stop
				 */

				/**
				 * [tDBCommit_34 finally ] start
				 */

				currentComponent = "tDBCommit_34";

				/**
				 * [tDBCommit_34 finally ] stop
				 */

				/**
				 * [tLogRow_42 finally ] start
				 */

				currentComponent = "tLogRow_42";

				/**
				 * [tLogRow_42 finally ] stop
				 */

			} catch (java.lang.Exception e) {
				// ignore
			} catch (java.lang.Error error) {
				// ignore
			}
			resourceMap = null;
		}

		globalMap.put("tDBRow_34_SUBPROCESS_STATE", 1);
	}

	public static class row76Struct implements routines.system.IPersistableRow<row76Struct> {
		final static byte[] commonByteArrayLock_WIPO_PROJECTS_G3b_Mig_UD = new byte[0];
		static byte[] commonByteArray_WIPO_PROJECTS_G3b_Mig_UD = new byte[0];

		public void readData(ObjectInputStream dis) {

			synchronized (commonByteArrayLock_WIPO_PROJECTS_G3b_Mig_UD) {

				try {

					int length = 0;

				}

				finally {
				}

			}

		}

		public void writeData(ObjectOutputStream dos) {
			try {

			}

			finally {
			}

		}

		public String toString() {

			StringBuilder sb = new StringBuilder();
			sb.append(super.toString());
			sb.append("[");
			sb.append("]");

			return sb.toString();
		}

		/**
		 * Compare keys
		 */
		public int compareTo(row76Struct other) {

			int returnValue = -1;

			return returnValue;
		}

		private int checkNullsAndCompare(Object object1, Object object2) {
			int returnValue = 0;
			if (object1 instanceof Comparable && object2 instanceof Comparable) {
				returnValue = ((Comparable) object1).compareTo(object2);
			} else if (object1 != null && object2 != null) {
				returnValue = compareStrings(object1.toString(), object2.toString());
			} else if (object1 == null && object2 != null) {
				returnValue = 1;
			} else if (object1 != null && object2 == null) {
				returnValue = -1;
			} else {
				returnValue = 0;
			}

			return returnValue;
		}

		private int compareStrings(String string1, String string2) {
			return string1.compareTo(string2);
		}

	}

	public static class row77Struct implements routines.system.IPersistableRow<row77Struct> {
		final static byte[] commonByteArrayLock_WIPO_PROJECTS_G3b_Mig_UD = new byte[0];
		static byte[] commonByteArray_WIPO_PROJECTS_G3b_Mig_UD = new byte[0];

		public String errorCode;

		public String getErrorCode() {
			return this.errorCode;
		}

		public String errorMessage;

		public String getErrorMessage() {
			return this.errorMessage;
		}

		private String readString(ObjectInputStream dis) throws IOException {
			String strReturn = null;
			int length = 0;
			length = dis.readInt();
			if (length == -1) {
				strReturn = null;
			} else {
				if (length > commonByteArray_WIPO_PROJECTS_G3b_Mig_UD.length) {
					if (length < 1024 && commonByteArray_WIPO_PROJECTS_G3b_Mig_UD.length == 0) {
						commonByteArray_WIPO_PROJECTS_G3b_Mig_UD = new byte[1024];
					} else {
						commonByteArray_WIPO_PROJECTS_G3b_Mig_UD = new byte[2 * length];
					}
				}
				dis.readFully(commonByteArray_WIPO_PROJECTS_G3b_Mig_UD, 0, length);
				strReturn = new String(commonByteArray_WIPO_PROJECTS_G3b_Mig_UD, 0, length, utf8Charset);
			}
			return strReturn;
		}

		private void writeString(String str, ObjectOutputStream dos) throws IOException {
			if (str == null) {
				dos.writeInt(-1);
			} else {
				byte[] byteArray = str.getBytes(utf8Charset);
				dos.writeInt(byteArray.length);
				dos.write(byteArray);
			}
		}

		public void readData(ObjectInputStream dis) {

			synchronized (commonByteArrayLock_WIPO_PROJECTS_G3b_Mig_UD) {

				try {

					int length = 0;

					this.errorCode = readString(dis);

					this.errorMessage = readString(dis);

				} catch (IOException e) {
					throw new RuntimeException(e);

				}

			}

		}

		public void writeData(ObjectOutputStream dos) {
			try {

				// String

				writeString(this.errorCode, dos);

				// String

				writeString(this.errorMessage, dos);

			} catch (IOException e) {
				throw new RuntimeException(e);
			}

		}

		public String toString() {

			StringBuilder sb = new StringBuilder();
			sb.append(super.toString());
			sb.append("[");
			sb.append("errorCode=" + errorCode);
			sb.append(",errorMessage=" + errorMessage);
			sb.append("]");

			return sb.toString();
		}

		/**
		 * Compare keys
		 */
		public int compareTo(row77Struct other) {

			int returnValue = -1;

			return returnValue;
		}

		private int checkNullsAndCompare(Object object1, Object object2) {
			int returnValue = 0;
			if (object1 instanceof Comparable && object2 instanceof Comparable) {
				returnValue = ((Comparable) object1).compareTo(object2);
			} else if (object1 != null && object2 != null) {
				returnValue = compareStrings(object1.toString(), object2.toString());
			} else if (object1 == null && object2 != null) {
				returnValue = 1;
			} else if (object1 != null && object2 == null) {
				returnValue = -1;
			} else {
				returnValue = 0;
			}

			return returnValue;
		}

		private int compareStrings(String string1, String string2) {
			return string1.compareTo(string2);
		}

	}

	public void tDBRow_35Process(final java.util.Map<String, Object> globalMap) throws TalendException {
		globalMap.put("tDBRow_35_SUBPROCESS_STATE", 0);

		final boolean execStat = this.execStat;

		String iterateId = "";

		String currentComponent = "";
		java.util.Map<String, Object> resourceMap = new java.util.HashMap<String, Object>();

		try {
			// TDI-39566 avoid throwing an useless Exception
			boolean resumeIt = true;
			if (globalResumeTicket == false && resumeEntryMethodName != null) {
				String currentMethodName = new java.lang.Exception().getStackTrace()[0].getMethodName();
				resumeIt = resumeEntryMethodName.equals(currentMethodName);
			}
			if (resumeIt || globalResumeTicket) { // start the resume
				globalResumeTicket = true;

				row76Struct row76 = new row76Struct();
				row77Struct row77 = new row77Struct();

				/**
				 * [tDBCommit_35 begin ] start
				 */

				ok_Hash.put("tDBCommit_35", false);
				start_Hash.put("tDBCommit_35", System.currentTimeMillis());

				currentComponent = "tDBCommit_35";

				if (execStat) {
					runStat.updateStatOnConnection(resourceMap, iterateId, 0, 0, "row76");
				}

				int tos_count_tDBCommit_35 = 0;

				/**
				 * [tDBCommit_35 begin ] stop
				 */

				/**
				 * [tLogRow_43 begin ] start
				 */

				ok_Hash.put("tLogRow_43", false);
				start_Hash.put("tLogRow_43", System.currentTimeMillis());

				currentComponent = "tLogRow_43";

				if (execStat) {
					runStat.updateStatOnConnection(resourceMap, iterateId, 0, 0, "row77");
				}

				int tos_count_tLogRow_43 = 0;

				///////////////////////

				final String OUTPUT_FIELD_SEPARATOR_tLogRow_43 = "|";
				java.io.PrintStream consoleOut_tLogRow_43 = null;

				StringBuilder strBuffer_tLogRow_43 = null;
				int nb_line_tLogRow_43 = 0;
///////////////////////    			

				/**
				 * [tLogRow_43 begin ] stop
				 */

				/**
				 * [tDBRow_35 begin ] start
				 */

				ok_Hash.put("tDBRow_35", false);
				start_Hash.put("tDBRow_35", System.currentTimeMillis());

				tStatCatcher_1.addMessage("begin", "tDBRow_35");
				tStatCatcher_1Process(globalMap);

				currentComponent = "tDBRow_35";

				int tos_count_tDBRow_35 = 0;

				java.sql.Connection conn_tDBRow_35 = null;
				String query_tDBRow_35 = "";
				boolean whetherReject_tDBRow_35 = false;
				conn_tDBRow_35 = (java.sql.Connection) globalMap.get("conn_tMSSqlConnection_3");

				resourceMap.put("conn_tDBRow_35", conn_tDBRow_35);
				java.sql.Statement stmt_tDBRow_35 = conn_tDBRow_35.createStatement();
				resourceMap.put("stmt_tDBRow_35", stmt_tDBRow_35);

				/**
				 * [tDBRow_35 begin ] stop
				 */

				/**
				 * [tDBRow_35 main ] start
				 */

				currentComponent = "tDBRow_35";

				row76 = null;

				row77 = null;

				query_tDBRow_35 = "INSERT INTO  IP_ACTION   \n				( ROW_VERSION , \n				PROC_TYP , \n				PROC_NBR , \n				ACTION_NBR , \n				ACTION_TYP , "
						+ "\n				ACTION_DATE , \n				CAPTURE_DATE , \n				SIGNATURE_DATE , \n				CAPTURE_USER_ID , \n				AUTHORISING_USER_ID , \n		"
						+ "		NOTES2 , \n				NOTES3 , \n				NOTES4 , \n				NOTES5 , \n				ACTION_NOTES , \n				IND_CHANGES_STATUS , \n				NEW_STATUS"
						+ "_CODE , \n				PRIOR_STATUS_CODE , \n				PRIOR_STATUS_DATE , \n				PRIOR_DUE_DATE , \n				NOTES1)  \n		SELECT\n				 1,\n	"
						+ "			 USERDOC_FILE_PROC_TYP,\n				 USERDOC_FILE_PROC_NBR,\n				 ACTION_NBR,\n				 ACTION_TYPE,\n				 ACTION_DATE,\n				 AC"
						+ "TION_DATE,\n				 ACTION_DATE,\n				 ACTION_USER,\n				 ACTION_USER,\n				 ACTION_NOTES2,\n				 ACTION_NOTES3,\n				 ACTI"
						+ "ON_NOTES4,\n				 ACTION_NOTES5,\n				 GENERAL_NOTES,\n				 'N',\n				 null,\n				 null,\n				 null,\n				 null,\n				 AC"
						+ "TION_NOTES1\n		FROM  wrk_userdoc_actions T JOIN wrk_userdoc_files UF ON UF.userdoc_seq  = T.userdoc_seq\n			 AND	UF.user"
						+ "doc_series  = T.userdoc_series\n			 AND	UF.userdoc_nbr  = T.userdoc_nbr  \n		WHERE	 ACTION_CATEGORY  = 'N'\n		 AND	USERD"
						+ "OC_FILE_PROC_TYP  is not null\n		 AND	PROCESS_FILE_NBR  is null;";
				whetherReject_tDBRow_35 = false;
				globalMap.put("tDBRow_35_QUERY", query_tDBRow_35);
				try {
					stmt_tDBRow_35.execute(query_tDBRow_35);

				} catch (java.lang.Exception e) {
					whetherReject_tDBRow_35 = true;

					row77 = new row77Struct();

					row77.errorCode = ((java.sql.SQLException) e).getSQLState();
					row77.errorMessage = e.getMessage() + " - Line: " + tos_count_tDBRow_35;

				}

				if (!whetherReject_tDBRow_35) {

					row76 = new row76Struct();

				}

				tos_count_tDBRow_35++;

				/**
				 * [tDBRow_35 main ] stop
				 */

				/**
				 * [tDBRow_35 process_data_begin ] start
				 */

				currentComponent = "tDBRow_35";

				/**
				 * [tDBRow_35 process_data_begin ] stop
				 */
// Start of branch "row76"
				if (row76 != null) {

					/**
					 * [tDBCommit_35 main ] start
					 */

					currentComponent = "tDBCommit_35";

					if (execStat) {
						runStat.updateStatOnConnection(iterateId, 1, 1

								, "row76"

						);
					}

					java.sql.Connection conn_tDBCommit_35 = (java.sql.Connection) globalMap
							.get("conn_tMSSqlConnection_3");
					if (conn_tDBCommit_35 != null && !conn_tDBCommit_35.isClosed()) {

						conn_tDBCommit_35.commit();

					}

					tos_count_tDBCommit_35++;

					/**
					 * [tDBCommit_35 main ] stop
					 */

					/**
					 * [tDBCommit_35 process_data_begin ] start
					 */

					currentComponent = "tDBCommit_35";

					/**
					 * [tDBCommit_35 process_data_begin ] stop
					 */

					/**
					 * [tDBCommit_35 process_data_end ] start
					 */

					currentComponent = "tDBCommit_35";

					/**
					 * [tDBCommit_35 process_data_end ] stop
					 */

				} // End of branch "row76"

// Start of branch "row77"
				if (row77 != null) {

					/**
					 * [tLogRow_43 main ] start
					 */

					currentComponent = "tLogRow_43";

					if (execStat) {
						runStat.updateStatOnConnection(iterateId, 1, 1

								, "row77"

						);
					}

///////////////////////		

					strBuffer_tLogRow_43 = new StringBuilder();

					if (row77.errorCode != null) { //

						strBuffer_tLogRow_43.append(String.valueOf(row77.errorCode));

					} //

					strBuffer_tLogRow_43.append("|");

					if (row77.errorMessage != null) { //

						strBuffer_tLogRow_43.append(String.valueOf(row77.errorMessage));

					} //

					if (globalMap.get("tLogRow_CONSOLE") != null) {
						consoleOut_tLogRow_43 = (java.io.PrintStream) globalMap.get("tLogRow_CONSOLE");
					} else {
						consoleOut_tLogRow_43 = new java.io.PrintStream(new java.io.BufferedOutputStream(System.out));
						globalMap.put("tLogRow_CONSOLE", consoleOut_tLogRow_43);
					}
					consoleOut_tLogRow_43.println(strBuffer_tLogRow_43.toString());
					consoleOut_tLogRow_43.flush();
					nb_line_tLogRow_43++;
//////

//////                    

///////////////////////    			

					tos_count_tLogRow_43++;

					/**
					 * [tLogRow_43 main ] stop
					 */

					/**
					 * [tLogRow_43 process_data_begin ] start
					 */

					currentComponent = "tLogRow_43";

					/**
					 * [tLogRow_43 process_data_begin ] stop
					 */

					/**
					 * [tLogRow_43 process_data_end ] start
					 */

					currentComponent = "tLogRow_43";

					/**
					 * [tLogRow_43 process_data_end ] stop
					 */

				} // End of branch "row77"

				/**
				 * [tDBRow_35 process_data_end ] start
				 */

				currentComponent = "tDBRow_35";

				/**
				 * [tDBRow_35 process_data_end ] stop
				 */

				/**
				 * [tDBRow_35 end ] start
				 */

				currentComponent = "tDBRow_35";

				stmt_tDBRow_35.close();
				resourceMap.remove("stmt_tDBRow_35");
				resourceMap.put("statementClosed_tDBRow_35", true);
				resourceMap.put("finish_tDBRow_35", true);

				ok_Hash.put("tDBRow_35", true);
				end_Hash.put("tDBRow_35", System.currentTimeMillis());

				tStatCatcher_1.addMessage("end", "tDBRow_35", end_Hash.get("tDBRow_35") - start_Hash.get("tDBRow_35"));
				tStatCatcher_1Process(globalMap);

				/**
				 * [tDBRow_35 end ] stop
				 */

				/**
				 * [tDBCommit_35 end ] start
				 */

				currentComponent = "tDBCommit_35";

				if (execStat) {
					runStat.updateStat(resourceMap, iterateId, 2, 0, "row76");
				}

				ok_Hash.put("tDBCommit_35", true);
				end_Hash.put("tDBCommit_35", System.currentTimeMillis());

				/**
				 * [tDBCommit_35 end ] stop
				 */

				/**
				 * [tLogRow_43 end ] start
				 */

				currentComponent = "tLogRow_43";

//////
//////
				globalMap.put("tLogRow_43_NB_LINE", nb_line_tLogRow_43);

///////////////////////    			

				if (execStat) {
					runStat.updateStat(resourceMap, iterateId, 2, 0, "row77");
				}

				ok_Hash.put("tLogRow_43", true);
				end_Hash.put("tLogRow_43", System.currentTimeMillis());

				/**
				 * [tLogRow_43 end ] stop
				 */

			} // end the resume

			if (resumeEntryMethodName == null || globalResumeTicket) {
				resumeUtil.addLog("CHECKPOINT", "CONNECTION:SUBJOB_OK:tDBRow_35:OnSubjobOk", "",
						Thread.currentThread().getId() + "", "", "", "", "", "");
			}

			if (execStat) {
				runStat.updateStatOnConnection("OnSubjobOk42", 0, "ok");
			}

			tDBRow_36Process(globalMap);

		} catch (java.lang.Exception e) {

			TalendException te = new TalendException(e, currentComponent, globalMap);

			throw te;
		} catch (java.lang.Error error) {

			runStat.stopThreadStat();

			throw error;
		} finally {

			try {

				/**
				 * [tDBRow_35 finally ] start
				 */

				currentComponent = "tDBRow_35";

				if (resourceMap.get("statementClosed_tDBRow_35") == null) {
					java.sql.Statement stmtToClose_tDBRow_35 = null;
					if ((stmtToClose_tDBRow_35 = (java.sql.Statement) resourceMap.remove("stmt_tDBRow_35")) != null) {
						stmtToClose_tDBRow_35.close();
					}
				}

				/**
				 * [tDBRow_35 finally ] stop
				 */

				/**
				 * [tDBCommit_35 finally ] start
				 */

				currentComponent = "tDBCommit_35";

				/**
				 * [tDBCommit_35 finally ] stop
				 */

				/**
				 * [tLogRow_43 finally ] start
				 */

				currentComponent = "tLogRow_43";

				/**
				 * [tLogRow_43 finally ] stop
				 */

			} catch (java.lang.Exception e) {
				// ignore
			} catch (java.lang.Error error) {
				// ignore
			}
			resourceMap = null;
		}

		globalMap.put("tDBRow_35_SUBPROCESS_STATE", 1);
	}

	public static class row78Struct implements routines.system.IPersistableRow<row78Struct> {
		final static byte[] commonByteArrayLock_WIPO_PROJECTS_G3b_Mig_UD = new byte[0];
		static byte[] commonByteArray_WIPO_PROJECTS_G3b_Mig_UD = new byte[0];

		public void readData(ObjectInputStream dis) {

			synchronized (commonByteArrayLock_WIPO_PROJECTS_G3b_Mig_UD) {

				try {

					int length = 0;

				}

				finally {
				}

			}

		}

		public void writeData(ObjectOutputStream dos) {
			try {

			}

			finally {
			}

		}

		public String toString() {

			StringBuilder sb = new StringBuilder();
			sb.append(super.toString());
			sb.append("[");
			sb.append("]");

			return sb.toString();
		}

		/**
		 * Compare keys
		 */
		public int compareTo(row78Struct other) {

			int returnValue = -1;

			return returnValue;
		}

		private int checkNullsAndCompare(Object object1, Object object2) {
			int returnValue = 0;
			if (object1 instanceof Comparable && object2 instanceof Comparable) {
				returnValue = ((Comparable) object1).compareTo(object2);
			} else if (object1 != null && object2 != null) {
				returnValue = compareStrings(object1.toString(), object2.toString());
			} else if (object1 == null && object2 != null) {
				returnValue = 1;
			} else if (object1 != null && object2 == null) {
				returnValue = -1;
			} else {
				returnValue = 0;
			}

			return returnValue;
		}

		private int compareStrings(String string1, String string2) {
			return string1.compareTo(string2);
		}

	}

	public static class row79Struct implements routines.system.IPersistableRow<row79Struct> {
		final static byte[] commonByteArrayLock_WIPO_PROJECTS_G3b_Mig_UD = new byte[0];
		static byte[] commonByteArray_WIPO_PROJECTS_G3b_Mig_UD = new byte[0];

		public String errorCode;

		public String getErrorCode() {
			return this.errorCode;
		}

		public String errorMessage;

		public String getErrorMessage() {
			return this.errorMessage;
		}

		private String readString(ObjectInputStream dis) throws IOException {
			String strReturn = null;
			int length = 0;
			length = dis.readInt();
			if (length == -1) {
				strReturn = null;
			} else {
				if (length > commonByteArray_WIPO_PROJECTS_G3b_Mig_UD.length) {
					if (length < 1024 && commonByteArray_WIPO_PROJECTS_G3b_Mig_UD.length == 0) {
						commonByteArray_WIPO_PROJECTS_G3b_Mig_UD = new byte[1024];
					} else {
						commonByteArray_WIPO_PROJECTS_G3b_Mig_UD = new byte[2 * length];
					}
				}
				dis.readFully(commonByteArray_WIPO_PROJECTS_G3b_Mig_UD, 0, length);
				strReturn = new String(commonByteArray_WIPO_PROJECTS_G3b_Mig_UD, 0, length, utf8Charset);
			}
			return strReturn;
		}

		private void writeString(String str, ObjectOutputStream dos) throws IOException {
			if (str == null) {
				dos.writeInt(-1);
			} else {
				byte[] byteArray = str.getBytes(utf8Charset);
				dos.writeInt(byteArray.length);
				dos.write(byteArray);
			}
		}

		public void readData(ObjectInputStream dis) {

			synchronized (commonByteArrayLock_WIPO_PROJECTS_G3b_Mig_UD) {

				try {

					int length = 0;

					this.errorCode = readString(dis);

					this.errorMessage = readString(dis);

				} catch (IOException e) {
					throw new RuntimeException(e);

				}

			}

		}

		public void writeData(ObjectOutputStream dos) {
			try {

				// String

				writeString(this.errorCode, dos);

				// String

				writeString(this.errorMessage, dos);

			} catch (IOException e) {
				throw new RuntimeException(e);
			}

		}

		public String toString() {

			StringBuilder sb = new StringBuilder();
			sb.append(super.toString());
			sb.append("[");
			sb.append("errorCode=" + errorCode);
			sb.append(",errorMessage=" + errorMessage);
			sb.append("]");

			return sb.toString();
		}

		/**
		 * Compare keys
		 */
		public int compareTo(row79Struct other) {

			int returnValue = -1;

			return returnValue;
		}

		private int checkNullsAndCompare(Object object1, Object object2) {
			int returnValue = 0;
			if (object1 instanceof Comparable && object2 instanceof Comparable) {
				returnValue = ((Comparable) object1).compareTo(object2);
			} else if (object1 != null && object2 != null) {
				returnValue = compareStrings(object1.toString(), object2.toString());
			} else if (object1 == null && object2 != null) {
				returnValue = 1;
			} else if (object1 != null && object2 == null) {
				returnValue = -1;
			} else {
				returnValue = 0;
			}

			return returnValue;
		}

		private int compareStrings(String string1, String string2) {
			return string1.compareTo(string2);
		}

	}

	public void tDBRow_36Process(final java.util.Map<String, Object> globalMap) throws TalendException {
		globalMap.put("tDBRow_36_SUBPROCESS_STATE", 0);

		final boolean execStat = this.execStat;

		String iterateId = "";

		String currentComponent = "";
		java.util.Map<String, Object> resourceMap = new java.util.HashMap<String, Object>();

		try {
			// TDI-39566 avoid throwing an useless Exception
			boolean resumeIt = true;
			if (globalResumeTicket == false && resumeEntryMethodName != null) {
				String currentMethodName = new java.lang.Exception().getStackTrace()[0].getMethodName();
				resumeIt = resumeEntryMethodName.equals(currentMethodName);
			}
			if (resumeIt || globalResumeTicket) { // start the resume
				globalResumeTicket = true;

				row78Struct row78 = new row78Struct();
				row79Struct row79 = new row79Struct();

				/**
				 * [tDBCommit_36 begin ] start
				 */

				ok_Hash.put("tDBCommit_36", false);
				start_Hash.put("tDBCommit_36", System.currentTimeMillis());

				currentComponent = "tDBCommit_36";

				if (execStat) {
					runStat.updateStatOnConnection(resourceMap, iterateId, 0, 0, "row78");
				}

				int tos_count_tDBCommit_36 = 0;

				/**
				 * [tDBCommit_36 begin ] stop
				 */

				/**
				 * [tLogRow_44 begin ] start
				 */

				ok_Hash.put("tLogRow_44", false);
				start_Hash.put("tLogRow_44", System.currentTimeMillis());

				currentComponent = "tLogRow_44";

				if (execStat) {
					runStat.updateStatOnConnection(resourceMap, iterateId, 0, 0, "row79");
				}

				int tos_count_tLogRow_44 = 0;

				///////////////////////

				final String OUTPUT_FIELD_SEPARATOR_tLogRow_44 = "|";
				java.io.PrintStream consoleOut_tLogRow_44 = null;

				StringBuilder strBuffer_tLogRow_44 = null;
				int nb_line_tLogRow_44 = 0;
///////////////////////    			

				/**
				 * [tLogRow_44 begin ] stop
				 */

				/**
				 * [tDBRow_36 begin ] start
				 */

				ok_Hash.put("tDBRow_36", false);
				start_Hash.put("tDBRow_36", System.currentTimeMillis());

				tStatCatcher_1.addMessage("begin", "tDBRow_36");
				tStatCatcher_1Process(globalMap);

				currentComponent = "tDBRow_36";

				int tos_count_tDBRow_36 = 0;

				java.sql.Connection conn_tDBRow_36 = null;
				String query_tDBRow_36 = "";
				boolean whetherReject_tDBRow_36 = false;
				conn_tDBRow_36 = (java.sql.Connection) globalMap.get("conn_tMSSqlConnection_3");

				resourceMap.put("conn_tDBRow_36", conn_tDBRow_36);
				java.sql.Statement stmt_tDBRow_36 = conn_tDBRow_36.createStatement();
				resourceMap.put("stmt_tDBRow_36", stmt_tDBRow_36);

				/**
				 * [tDBRow_36 begin ] stop
				 */

				/**
				 * [tDBRow_36 main ] start
				 */

				currentComponent = "tDBRow_36";

				row78 = null;

				row79 = null;

				query_tDBRow_36 = "INSERT INTO  IP_ACTION   \n				( ROW_VERSION , \n				PROC_TYP , \n				PROC_NBR , \n				ACTION_NBR , \n				ACTION_TYP , "
						+ "\n				ACTION_DATE , \n				CAPTURE_DATE , \n				SIGNATURE_DATE , \n				CAPTURE_USER_ID , \n				AUTHORISING_USER_ID , \n		"
						+ "		NOTES2 , \n				NOTES3 , \n				NOTES4 , \n				NOTES5 , \n				ACTION_NOTES , \n				IND_CHANGES_STATUS , \n				NEW_STATUS"
						+ "_CODE , \n				PRIOR_STATUS_CODE , \n				PRIOR_STATUS_DATE , \n				PRIOR_DUE_DATE , \n				NOTES1)  \n		SELECT\n				 1,\n	"
						+ "			 USERDOC_FILE_PROC_TYP,\n				 USERDOC_FILE_PROC_NBR,\n				 ACTION_NBR,\n				 ACTION_TYPE,\n				 ACTION_DATE,\n				 AC"
						+ "TION_DATE,\n				 ACTION_DATE,\n				 ACTION_USER,\n				 ACTION_USER,\n				 ACTION_NOTES2,\n				 ACTION_NOTES3,\n				 ACTI"
						+ "ON_NOTES4,\n				 ACTION_NOTES5,\n				 GENERAL_NOTES,\n				 'N',\n				 null,\n				 null,\n				 null,\n				 null,\n				 AC"
						+ "TION_NOTES1\n		FROM  wrk_userdoc_actions T JOIN wrk_userdoc_files UF ON UF.userdoc_seq  = T.userdoc_seq\n			 AND	UF.user"
						+ "doc_series  = T.userdoc_series\n			 AND	UF.userdoc_nbr  = T.userdoc_nbr\n			 AND	UF.file_seq  = T.process_file_seq\n			 "
						+ "AND	UF.file_type  = T.process_file_type\n			 AND	UF.file_series  = T.process_file_series\n			 AND	UF.file_nbr  = T.proce"
						+ "ss_file_nbr  \n		WHERE	 ACTION_CATEGORY  = 'N'\n		 AND	USERDOC_FILE_PROC_TYP  is not null;\n";
				whetherReject_tDBRow_36 = false;
				globalMap.put("tDBRow_36_QUERY", query_tDBRow_36);
				try {
					stmt_tDBRow_36.execute(query_tDBRow_36);

				} catch (java.lang.Exception e) {
					whetherReject_tDBRow_36 = true;

					row79 = new row79Struct();

					row79.errorCode = ((java.sql.SQLException) e).getSQLState();
					row79.errorMessage = e.getMessage() + " - Line: " + tos_count_tDBRow_36;

				}

				if (!whetherReject_tDBRow_36) {

					row78 = new row78Struct();

				}

				tos_count_tDBRow_36++;

				/**
				 * [tDBRow_36 main ] stop
				 */

				/**
				 * [tDBRow_36 process_data_begin ] start
				 */

				currentComponent = "tDBRow_36";

				/**
				 * [tDBRow_36 process_data_begin ] stop
				 */
// Start of branch "row78"
				if (row78 != null) {

					/**
					 * [tDBCommit_36 main ] start
					 */

					currentComponent = "tDBCommit_36";

					if (execStat) {
						runStat.updateStatOnConnection(iterateId, 1, 1

								, "row78"

						);
					}

					java.sql.Connection conn_tDBCommit_36 = (java.sql.Connection) globalMap
							.get("conn_tMSSqlConnection_3");
					if (conn_tDBCommit_36 != null && !conn_tDBCommit_36.isClosed()) {

						conn_tDBCommit_36.commit();

					}

					tos_count_tDBCommit_36++;

					/**
					 * [tDBCommit_36 main ] stop
					 */

					/**
					 * [tDBCommit_36 process_data_begin ] start
					 */

					currentComponent = "tDBCommit_36";

					/**
					 * [tDBCommit_36 process_data_begin ] stop
					 */

					/**
					 * [tDBCommit_36 process_data_end ] start
					 */

					currentComponent = "tDBCommit_36";

					/**
					 * [tDBCommit_36 process_data_end ] stop
					 */

				} // End of branch "row78"

// Start of branch "row79"
				if (row79 != null) {

					/**
					 * [tLogRow_44 main ] start
					 */

					currentComponent = "tLogRow_44";

					if (execStat) {
						runStat.updateStatOnConnection(iterateId, 1, 1

								, "row79"

						);
					}

///////////////////////		

					strBuffer_tLogRow_44 = new StringBuilder();

					if (row79.errorCode != null) { //

						strBuffer_tLogRow_44.append(String.valueOf(row79.errorCode));

					} //

					strBuffer_tLogRow_44.append("|");

					if (row79.errorMessage != null) { //

						strBuffer_tLogRow_44.append(String.valueOf(row79.errorMessage));

					} //

					if (globalMap.get("tLogRow_CONSOLE") != null) {
						consoleOut_tLogRow_44 = (java.io.PrintStream) globalMap.get("tLogRow_CONSOLE");
					} else {
						consoleOut_tLogRow_44 = new java.io.PrintStream(new java.io.BufferedOutputStream(System.out));
						globalMap.put("tLogRow_CONSOLE", consoleOut_tLogRow_44);
					}
					consoleOut_tLogRow_44.println(strBuffer_tLogRow_44.toString());
					consoleOut_tLogRow_44.flush();
					nb_line_tLogRow_44++;
//////

//////                    

///////////////////////    			

					tos_count_tLogRow_44++;

					/**
					 * [tLogRow_44 main ] stop
					 */

					/**
					 * [tLogRow_44 process_data_begin ] start
					 */

					currentComponent = "tLogRow_44";

					/**
					 * [tLogRow_44 process_data_begin ] stop
					 */

					/**
					 * [tLogRow_44 process_data_end ] start
					 */

					currentComponent = "tLogRow_44";

					/**
					 * [tLogRow_44 process_data_end ] stop
					 */

				} // End of branch "row79"

				/**
				 * [tDBRow_36 process_data_end ] start
				 */

				currentComponent = "tDBRow_36";

				/**
				 * [tDBRow_36 process_data_end ] stop
				 */

				/**
				 * [tDBRow_36 end ] start
				 */

				currentComponent = "tDBRow_36";

				stmt_tDBRow_36.close();
				resourceMap.remove("stmt_tDBRow_36");
				resourceMap.put("statementClosed_tDBRow_36", true);
				resourceMap.put("finish_tDBRow_36", true);

				ok_Hash.put("tDBRow_36", true);
				end_Hash.put("tDBRow_36", System.currentTimeMillis());

				tStatCatcher_1.addMessage("end", "tDBRow_36", end_Hash.get("tDBRow_36") - start_Hash.get("tDBRow_36"));
				tStatCatcher_1Process(globalMap);

				/**
				 * [tDBRow_36 end ] stop
				 */

				/**
				 * [tDBCommit_36 end ] start
				 */

				currentComponent = "tDBCommit_36";

				if (execStat) {
					runStat.updateStat(resourceMap, iterateId, 2, 0, "row78");
				}

				ok_Hash.put("tDBCommit_36", true);
				end_Hash.put("tDBCommit_36", System.currentTimeMillis());

				/**
				 * [tDBCommit_36 end ] stop
				 */

				/**
				 * [tLogRow_44 end ] start
				 */

				currentComponent = "tLogRow_44";

//////
//////
				globalMap.put("tLogRow_44_NB_LINE", nb_line_tLogRow_44);

///////////////////////    			

				if (execStat) {
					runStat.updateStat(resourceMap, iterateId, 2, 0, "row79");
				}

				ok_Hash.put("tLogRow_44", true);
				end_Hash.put("tLogRow_44", System.currentTimeMillis());

				/**
				 * [tLogRow_44 end ] stop
				 */

			} // end the resume

			if (resumeEntryMethodName == null || globalResumeTicket) {
				resumeUtil.addLog("CHECKPOINT", "CONNECTION:SUBJOB_OK:tDBRow_36:OnSubjobOk", "",
						Thread.currentThread().getId() + "", "", "", "", "", "");
			}

			if (execStat) {
				runStat.updateStatOnConnection("OnSubjobOk43", 0, "ok");
			}

			tDBRow_37Process(globalMap);

		} catch (java.lang.Exception e) {

			TalendException te = new TalendException(e, currentComponent, globalMap);

			throw te;
		} catch (java.lang.Error error) {

			runStat.stopThreadStat();

			throw error;
		} finally {

			try {

				/**
				 * [tDBRow_36 finally ] start
				 */

				currentComponent = "tDBRow_36";

				if (resourceMap.get("statementClosed_tDBRow_36") == null) {
					java.sql.Statement stmtToClose_tDBRow_36 = null;
					if ((stmtToClose_tDBRow_36 = (java.sql.Statement) resourceMap.remove("stmt_tDBRow_36")) != null) {
						stmtToClose_tDBRow_36.close();
					}
				}

				/**
				 * [tDBRow_36 finally ] stop
				 */

				/**
				 * [tDBCommit_36 finally ] start
				 */

				currentComponent = "tDBCommit_36";

				/**
				 * [tDBCommit_36 finally ] stop
				 */

				/**
				 * [tLogRow_44 finally ] start
				 */

				currentComponent = "tLogRow_44";

				/**
				 * [tLogRow_44 finally ] stop
				 */

			} catch (java.lang.Exception e) {
				// ignore
			} catch (java.lang.Error error) {
				// ignore
			}
			resourceMap = null;
		}

		globalMap.put("tDBRow_36_SUBPROCESS_STATE", 1);
	}

	public static class row80Struct implements routines.system.IPersistableRow<row80Struct> {
		final static byte[] commonByteArrayLock_WIPO_PROJECTS_G3b_Mig_UD = new byte[0];
		static byte[] commonByteArray_WIPO_PROJECTS_G3b_Mig_UD = new byte[0];

		public void readData(ObjectInputStream dis) {

			synchronized (commonByteArrayLock_WIPO_PROJECTS_G3b_Mig_UD) {

				try {

					int length = 0;

				}

				finally {
				}

			}

		}

		public void writeData(ObjectOutputStream dos) {
			try {

			}

			finally {
			}

		}

		public String toString() {

			StringBuilder sb = new StringBuilder();
			sb.append(super.toString());
			sb.append("[");
			sb.append("]");

			return sb.toString();
		}

		/**
		 * Compare keys
		 */
		public int compareTo(row80Struct other) {

			int returnValue = -1;

			return returnValue;
		}

		private int checkNullsAndCompare(Object object1, Object object2) {
			int returnValue = 0;
			if (object1 instanceof Comparable && object2 instanceof Comparable) {
				returnValue = ((Comparable) object1).compareTo(object2);
			} else if (object1 != null && object2 != null) {
				returnValue = compareStrings(object1.toString(), object2.toString());
			} else if (object1 == null && object2 != null) {
				returnValue = 1;
			} else if (object1 != null && object2 == null) {
				returnValue = -1;
			} else {
				returnValue = 0;
			}

			return returnValue;
		}

		private int compareStrings(String string1, String string2) {
			return string1.compareTo(string2);
		}

	}

	public static class row81Struct implements routines.system.IPersistableRow<row81Struct> {
		final static byte[] commonByteArrayLock_WIPO_PROJECTS_G3b_Mig_UD = new byte[0];
		static byte[] commonByteArray_WIPO_PROJECTS_G3b_Mig_UD = new byte[0];

		public String errorCode;

		public String getErrorCode() {
			return this.errorCode;
		}

		public String errorMessage;

		public String getErrorMessage() {
			return this.errorMessage;
		}

		private String readString(ObjectInputStream dis) throws IOException {
			String strReturn = null;
			int length = 0;
			length = dis.readInt();
			if (length == -1) {
				strReturn = null;
			} else {
				if (length > commonByteArray_WIPO_PROJECTS_G3b_Mig_UD.length) {
					if (length < 1024 && commonByteArray_WIPO_PROJECTS_G3b_Mig_UD.length == 0) {
						commonByteArray_WIPO_PROJECTS_G3b_Mig_UD = new byte[1024];
					} else {
						commonByteArray_WIPO_PROJECTS_G3b_Mig_UD = new byte[2 * length];
					}
				}
				dis.readFully(commonByteArray_WIPO_PROJECTS_G3b_Mig_UD, 0, length);
				strReturn = new String(commonByteArray_WIPO_PROJECTS_G3b_Mig_UD, 0, length, utf8Charset);
			}
			return strReturn;
		}

		private void writeString(String str, ObjectOutputStream dos) throws IOException {
			if (str == null) {
				dos.writeInt(-1);
			} else {
				byte[] byteArray = str.getBytes(utf8Charset);
				dos.writeInt(byteArray.length);
				dos.write(byteArray);
			}
		}

		public void readData(ObjectInputStream dis) {

			synchronized (commonByteArrayLock_WIPO_PROJECTS_G3b_Mig_UD) {

				try {

					int length = 0;

					this.errorCode = readString(dis);

					this.errorMessage = readString(dis);

				} catch (IOException e) {
					throw new RuntimeException(e);

				}

			}

		}

		public void writeData(ObjectOutputStream dos) {
			try {

				// String

				writeString(this.errorCode, dos);

				// String

				writeString(this.errorMessage, dos);

			} catch (IOException e) {
				throw new RuntimeException(e);
			}

		}

		public String toString() {

			StringBuilder sb = new StringBuilder();
			sb.append(super.toString());
			sb.append("[");
			sb.append("errorCode=" + errorCode);
			sb.append(",errorMessage=" + errorMessage);
			sb.append("]");

			return sb.toString();
		}

		/**
		 * Compare keys
		 */
		public int compareTo(row81Struct other) {

			int returnValue = -1;

			return returnValue;
		}

		private int checkNullsAndCompare(Object object1, Object object2) {
			int returnValue = 0;
			if (object1 instanceof Comparable && object2 instanceof Comparable) {
				returnValue = ((Comparable) object1).compareTo(object2);
			} else if (object1 != null && object2 != null) {
				returnValue = compareStrings(object1.toString(), object2.toString());
			} else if (object1 == null && object2 != null) {
				returnValue = 1;
			} else if (object1 != null && object2 == null) {
				returnValue = -1;
			} else {
				returnValue = 0;
			}

			return returnValue;
		}

		private int compareStrings(String string1, String string2) {
			return string1.compareTo(string2);
		}

	}

	public void tDBRow_37Process(final java.util.Map<String, Object> globalMap) throws TalendException {
		globalMap.put("tDBRow_37_SUBPROCESS_STATE", 0);

		final boolean execStat = this.execStat;

		String iterateId = "";

		String currentComponent = "";
		java.util.Map<String, Object> resourceMap = new java.util.HashMap<String, Object>();

		try {
			// TDI-39566 avoid throwing an useless Exception
			boolean resumeIt = true;
			if (globalResumeTicket == false && resumeEntryMethodName != null) {
				String currentMethodName = new java.lang.Exception().getStackTrace()[0].getMethodName();
				resumeIt = resumeEntryMethodName.equals(currentMethodName);
			}
			if (resumeIt || globalResumeTicket) { // start the resume
				globalResumeTicket = true;

				row80Struct row80 = new row80Struct();
				row81Struct row81 = new row81Struct();

				/**
				 * [tDBCommit_37 begin ] start
				 */

				ok_Hash.put("tDBCommit_37", false);
				start_Hash.put("tDBCommit_37", System.currentTimeMillis());

				currentComponent = "tDBCommit_37";

				if (execStat) {
					runStat.updateStatOnConnection(resourceMap, iterateId, 0, 0, "row80");
				}

				int tos_count_tDBCommit_37 = 0;

				/**
				 * [tDBCommit_37 begin ] stop
				 */

				/**
				 * [tLogRow_45 begin ] start
				 */

				ok_Hash.put("tLogRow_45", false);
				start_Hash.put("tLogRow_45", System.currentTimeMillis());

				currentComponent = "tLogRow_45";

				if (execStat) {
					runStat.updateStatOnConnection(resourceMap, iterateId, 0, 0, "row81");
				}

				int tos_count_tLogRow_45 = 0;

				///////////////////////

				final String OUTPUT_FIELD_SEPARATOR_tLogRow_45 = "|";
				java.io.PrintStream consoleOut_tLogRow_45 = null;

				StringBuilder strBuffer_tLogRow_45 = null;
				int nb_line_tLogRow_45 = 0;
///////////////////////    			

				/**
				 * [tLogRow_45 begin ] stop
				 */

				/**
				 * [tDBRow_37 begin ] start
				 */

				ok_Hash.put("tDBRow_37", false);
				start_Hash.put("tDBRow_37", System.currentTimeMillis());

				tStatCatcher_1.addMessage("begin", "tDBRow_37");
				tStatCatcher_1Process(globalMap);

				currentComponent = "tDBRow_37";

				int tos_count_tDBRow_37 = 0;

				java.sql.Connection conn_tDBRow_37 = null;
				String query_tDBRow_37 = "";
				boolean whetherReject_tDBRow_37 = false;
				conn_tDBRow_37 = (java.sql.Connection) globalMap.get("conn_tMSSqlConnection_3");

				resourceMap.put("conn_tDBRow_37", conn_tDBRow_37);
				java.sql.Statement stmt_tDBRow_37 = conn_tDBRow_37.createStatement();
				resourceMap.put("stmt_tDBRow_37", stmt_tDBRow_37);

				/**
				 * [tDBRow_37 begin ] stop
				 */

				/**
				 * [tDBRow_37 main ] start
				 */

				currentComponent = "tDBRow_37";

				row80 = null;

				row81 = null;

				query_tDBRow_37 = "INSERT INTO  IP_ACTION   \n				( ROW_VERSION , \n				PROC_TYP , \n				PROC_NBR , \n				ACTION_NBR , \n				ACTION_TYP , "
						+ "\n				ACTION_DATE , \n				CAPTURE_DATE , \n				SIGNATURE_DATE , \n				CAPTURE_USER_ID , \n				AUTHORISING_USER_ID , \n		"
						+ "		NOTES2 , \n				NOTES3 , \n				NOTES4 , \n				NOTES5 , \n				ACTION_NOTES , \n				IND_CHANGES_STATUS , \n				NEW_STATUS"
						+ "_CODE , \n				PRIOR_STATUS_CODE , \n				PRIOR_STATUS_DATE , \n				PRIOR_DUE_DATE , \n				NOTES1)  \n		SELECT\n				 1,\n	"
						+ "			 UF.USERDOC_FILE_PROC_TYP,\n				 UF.USERDOC_FILE_PROC_NBR,\n				 ACTION_NBR,\n				 ACTION_TYPE,\n				 ACTION_DATE,\n	"
						+ "			 ACTION_DATE,\n				 ACTION_DATE,\n				 ACTION_USER,\n				 ACTION_USER,\n				 ACTION_NOTES2,\n				 ACTION_NOTES3,\n			"
						+ "	 ACTION_NOTES4,\n				 ACTION_NOTES5,\n				 GENERAL_NOTES,\n				 'S',\n				 SPECIAL_FINAL_STATUS,\n				 P.STATUS_CODE,\n"
						+ "				 P.STATUS_DATE,\n				 P.EXPIRATION_DATE,\n				 ACTION_NOTES1\n		FROM  wrk_userdoc_actions T JOIN wrk_userdoc_files U"
						+ "F ON UF.userdoc_seq  = T.userdoc_seq\n			 AND	UF.userdoc_series  = T.userdoc_series\n			 AND	UF.userdoc_nbr  = T.userdoc"
						+ "_nbr  JOIN IP_PROC P ON P.proc_typ  = UF.userdoc_file_proc_typ\n			 AND	P.proc_nbr  = UF.userdoc_file_proc_nbr  \n		WHER"
						+ "E	 ACTION_CATEGORY  = 'S'\n		 AND	USERDOC_FILE_PROC_TYP  is not null\n		 AND	PROCESS_FILE_NBR  is null;\n		 \n		\n\n";
				whetherReject_tDBRow_37 = false;
				globalMap.put("tDBRow_37_QUERY", query_tDBRow_37);
				try {
					stmt_tDBRow_37.execute(query_tDBRow_37);

				} catch (java.lang.Exception e) {
					whetherReject_tDBRow_37 = true;

					row81 = new row81Struct();

					row81.errorCode = ((java.sql.SQLException) e).getSQLState();
					row81.errorMessage = e.getMessage() + " - Line: " + tos_count_tDBRow_37;

				}

				if (!whetherReject_tDBRow_37) {

					row80 = new row80Struct();

				}

				tos_count_tDBRow_37++;

				/**
				 * [tDBRow_37 main ] stop
				 */

				/**
				 * [tDBRow_37 process_data_begin ] start
				 */

				currentComponent = "tDBRow_37";

				/**
				 * [tDBRow_37 process_data_begin ] stop
				 */
// Start of branch "row80"
				if (row80 != null) {

					/**
					 * [tDBCommit_37 main ] start
					 */

					currentComponent = "tDBCommit_37";

					if (execStat) {
						runStat.updateStatOnConnection(iterateId, 1, 1

								, "row80"

						);
					}

					java.sql.Connection conn_tDBCommit_37 = (java.sql.Connection) globalMap
							.get("conn_tMSSqlConnection_3");
					if (conn_tDBCommit_37 != null && !conn_tDBCommit_37.isClosed()) {

						conn_tDBCommit_37.commit();

					}

					tos_count_tDBCommit_37++;

					/**
					 * [tDBCommit_37 main ] stop
					 */

					/**
					 * [tDBCommit_37 process_data_begin ] start
					 */

					currentComponent = "tDBCommit_37";

					/**
					 * [tDBCommit_37 process_data_begin ] stop
					 */

					/**
					 * [tDBCommit_37 process_data_end ] start
					 */

					currentComponent = "tDBCommit_37";

					/**
					 * [tDBCommit_37 process_data_end ] stop
					 */

				} // End of branch "row80"

// Start of branch "row81"
				if (row81 != null) {

					/**
					 * [tLogRow_45 main ] start
					 */

					currentComponent = "tLogRow_45";

					if (execStat) {
						runStat.updateStatOnConnection(iterateId, 1, 1

								, "row81"

						);
					}

///////////////////////		

					strBuffer_tLogRow_45 = new StringBuilder();

					if (row81.errorCode != null) { //

						strBuffer_tLogRow_45.append(String.valueOf(row81.errorCode));

					} //

					strBuffer_tLogRow_45.append("|");

					if (row81.errorMessage != null) { //

						strBuffer_tLogRow_45.append(String.valueOf(row81.errorMessage));

					} //

					if (globalMap.get("tLogRow_CONSOLE") != null) {
						consoleOut_tLogRow_45 = (java.io.PrintStream) globalMap.get("tLogRow_CONSOLE");
					} else {
						consoleOut_tLogRow_45 = new java.io.PrintStream(new java.io.BufferedOutputStream(System.out));
						globalMap.put("tLogRow_CONSOLE", consoleOut_tLogRow_45);
					}
					consoleOut_tLogRow_45.println(strBuffer_tLogRow_45.toString());
					consoleOut_tLogRow_45.flush();
					nb_line_tLogRow_45++;
//////

//////                    

///////////////////////    			

					tos_count_tLogRow_45++;

					/**
					 * [tLogRow_45 main ] stop
					 */

					/**
					 * [tLogRow_45 process_data_begin ] start
					 */

					currentComponent = "tLogRow_45";

					/**
					 * [tLogRow_45 process_data_begin ] stop
					 */

					/**
					 * [tLogRow_45 process_data_end ] start
					 */

					currentComponent = "tLogRow_45";

					/**
					 * [tLogRow_45 process_data_end ] stop
					 */

				} // End of branch "row81"

				/**
				 * [tDBRow_37 process_data_end ] start
				 */

				currentComponent = "tDBRow_37";

				/**
				 * [tDBRow_37 process_data_end ] stop
				 */

				/**
				 * [tDBRow_37 end ] start
				 */

				currentComponent = "tDBRow_37";

				stmt_tDBRow_37.close();
				resourceMap.remove("stmt_tDBRow_37");
				resourceMap.put("statementClosed_tDBRow_37", true);
				resourceMap.put("finish_tDBRow_37", true);

				ok_Hash.put("tDBRow_37", true);
				end_Hash.put("tDBRow_37", System.currentTimeMillis());

				tStatCatcher_1.addMessage("end", "tDBRow_37", end_Hash.get("tDBRow_37") - start_Hash.get("tDBRow_37"));
				tStatCatcher_1Process(globalMap);

				/**
				 * [tDBRow_37 end ] stop
				 */

				/**
				 * [tDBCommit_37 end ] start
				 */

				currentComponent = "tDBCommit_37";

				if (execStat) {
					runStat.updateStat(resourceMap, iterateId, 2, 0, "row80");
				}

				ok_Hash.put("tDBCommit_37", true);
				end_Hash.put("tDBCommit_37", System.currentTimeMillis());

				/**
				 * [tDBCommit_37 end ] stop
				 */

				/**
				 * [tLogRow_45 end ] start
				 */

				currentComponent = "tLogRow_45";

//////
//////
				globalMap.put("tLogRow_45_NB_LINE", nb_line_tLogRow_45);

///////////////////////    			

				if (execStat) {
					runStat.updateStat(resourceMap, iterateId, 2, 0, "row81");
				}

				ok_Hash.put("tLogRow_45", true);
				end_Hash.put("tLogRow_45", System.currentTimeMillis());

				/**
				 * [tLogRow_45 end ] stop
				 */

			} // end the resume

			if (resumeEntryMethodName == null || globalResumeTicket) {
				resumeUtil.addLog("CHECKPOINT", "CONNECTION:SUBJOB_OK:tDBRow_37:OnSubjobOk", "",
						Thread.currentThread().getId() + "", "", "", "", "", "");
			}

			if (execStat) {
				runStat.updateStatOnConnection("OnSubjobOk47", 0, "ok");
			}

			tDBRow_38Process(globalMap);

		} catch (java.lang.Exception e) {

			TalendException te = new TalendException(e, currentComponent, globalMap);

			throw te;
		} catch (java.lang.Error error) {

			runStat.stopThreadStat();

			throw error;
		} finally {

			try {

				/**
				 * [tDBRow_37 finally ] start
				 */

				currentComponent = "tDBRow_37";

				if (resourceMap.get("statementClosed_tDBRow_37") == null) {
					java.sql.Statement stmtToClose_tDBRow_37 = null;
					if ((stmtToClose_tDBRow_37 = (java.sql.Statement) resourceMap.remove("stmt_tDBRow_37")) != null) {
						stmtToClose_tDBRow_37.close();
					}
				}

				/**
				 * [tDBRow_37 finally ] stop
				 */

				/**
				 * [tDBCommit_37 finally ] start
				 */

				currentComponent = "tDBCommit_37";

				/**
				 * [tDBCommit_37 finally ] stop
				 */

				/**
				 * [tLogRow_45 finally ] start
				 */

				currentComponent = "tLogRow_45";

				/**
				 * [tLogRow_45 finally ] stop
				 */

			} catch (java.lang.Exception e) {
				// ignore
			} catch (java.lang.Error error) {
				// ignore
			}
			resourceMap = null;
		}

		globalMap.put("tDBRow_37_SUBPROCESS_STATE", 1);
	}

	public static class row82Struct implements routines.system.IPersistableRow<row82Struct> {
		final static byte[] commonByteArrayLock_WIPO_PROJECTS_G3b_Mig_UD = new byte[0];
		static byte[] commonByteArray_WIPO_PROJECTS_G3b_Mig_UD = new byte[0];

		public void readData(ObjectInputStream dis) {

			synchronized (commonByteArrayLock_WIPO_PROJECTS_G3b_Mig_UD) {

				try {

					int length = 0;

				}

				finally {
				}

			}

		}

		public void writeData(ObjectOutputStream dos) {
			try {

			}

			finally {
			}

		}

		public String toString() {

			StringBuilder sb = new StringBuilder();
			sb.append(super.toString());
			sb.append("[");
			sb.append("]");

			return sb.toString();
		}

		/**
		 * Compare keys
		 */
		public int compareTo(row82Struct other) {

			int returnValue = -1;

			return returnValue;
		}

		private int checkNullsAndCompare(Object object1, Object object2) {
			int returnValue = 0;
			if (object1 instanceof Comparable && object2 instanceof Comparable) {
				returnValue = ((Comparable) object1).compareTo(object2);
			} else if (object1 != null && object2 != null) {
				returnValue = compareStrings(object1.toString(), object2.toString());
			} else if (object1 == null && object2 != null) {
				returnValue = 1;
			} else if (object1 != null && object2 == null) {
				returnValue = -1;
			} else {
				returnValue = 0;
			}

			return returnValue;
		}

		private int compareStrings(String string1, String string2) {
			return string1.compareTo(string2);
		}

	}

	public static class row83Struct implements routines.system.IPersistableRow<row83Struct> {
		final static byte[] commonByteArrayLock_WIPO_PROJECTS_G3b_Mig_UD = new byte[0];
		static byte[] commonByteArray_WIPO_PROJECTS_G3b_Mig_UD = new byte[0];

		public String errorCode;

		public String getErrorCode() {
			return this.errorCode;
		}

		public String errorMessage;

		public String getErrorMessage() {
			return this.errorMessage;
		}

		private String readString(ObjectInputStream dis) throws IOException {
			String strReturn = null;
			int length = 0;
			length = dis.readInt();
			if (length == -1) {
				strReturn = null;
			} else {
				if (length > commonByteArray_WIPO_PROJECTS_G3b_Mig_UD.length) {
					if (length < 1024 && commonByteArray_WIPO_PROJECTS_G3b_Mig_UD.length == 0) {
						commonByteArray_WIPO_PROJECTS_G3b_Mig_UD = new byte[1024];
					} else {
						commonByteArray_WIPO_PROJECTS_G3b_Mig_UD = new byte[2 * length];
					}
				}
				dis.readFully(commonByteArray_WIPO_PROJECTS_G3b_Mig_UD, 0, length);
				strReturn = new String(commonByteArray_WIPO_PROJECTS_G3b_Mig_UD, 0, length, utf8Charset);
			}
			return strReturn;
		}

		private void writeString(String str, ObjectOutputStream dos) throws IOException {
			if (str == null) {
				dos.writeInt(-1);
			} else {
				byte[] byteArray = str.getBytes(utf8Charset);
				dos.writeInt(byteArray.length);
				dos.write(byteArray);
			}
		}

		public void readData(ObjectInputStream dis) {

			synchronized (commonByteArrayLock_WIPO_PROJECTS_G3b_Mig_UD) {

				try {

					int length = 0;

					this.errorCode = readString(dis);

					this.errorMessage = readString(dis);

				} catch (IOException e) {
					throw new RuntimeException(e);

				}

			}

		}

		public void writeData(ObjectOutputStream dos) {
			try {

				// String

				writeString(this.errorCode, dos);

				// String

				writeString(this.errorMessage, dos);

			} catch (IOException e) {
				throw new RuntimeException(e);
			}

		}

		public String toString() {

			StringBuilder sb = new StringBuilder();
			sb.append(super.toString());
			sb.append("[");
			sb.append("errorCode=" + errorCode);
			sb.append(",errorMessage=" + errorMessage);
			sb.append("]");

			return sb.toString();
		}

		/**
		 * Compare keys
		 */
		public int compareTo(row83Struct other) {

			int returnValue = -1;

			return returnValue;
		}

		private int checkNullsAndCompare(Object object1, Object object2) {
			int returnValue = 0;
			if (object1 instanceof Comparable && object2 instanceof Comparable) {
				returnValue = ((Comparable) object1).compareTo(object2);
			} else if (object1 != null && object2 != null) {
				returnValue = compareStrings(object1.toString(), object2.toString());
			} else if (object1 == null && object2 != null) {
				returnValue = 1;
			} else if (object1 != null && object2 == null) {
				returnValue = -1;
			} else {
				returnValue = 0;
			}

			return returnValue;
		}

		private int compareStrings(String string1, String string2) {
			return string1.compareTo(string2);
		}

	}

	public void tDBRow_38Process(final java.util.Map<String, Object> globalMap) throws TalendException {
		globalMap.put("tDBRow_38_SUBPROCESS_STATE", 0);

		final boolean execStat = this.execStat;

		String iterateId = "";

		String currentComponent = "";
		java.util.Map<String, Object> resourceMap = new java.util.HashMap<String, Object>();

		try {
			// TDI-39566 avoid throwing an useless Exception
			boolean resumeIt = true;
			if (globalResumeTicket == false && resumeEntryMethodName != null) {
				String currentMethodName = new java.lang.Exception().getStackTrace()[0].getMethodName();
				resumeIt = resumeEntryMethodName.equals(currentMethodName);
			}
			if (resumeIt || globalResumeTicket) { // start the resume
				globalResumeTicket = true;

				row82Struct row82 = new row82Struct();
				row83Struct row83 = new row83Struct();

				/**
				 * [tDBCommit_38 begin ] start
				 */

				ok_Hash.put("tDBCommit_38", false);
				start_Hash.put("tDBCommit_38", System.currentTimeMillis());

				currentComponent = "tDBCommit_38";

				if (execStat) {
					runStat.updateStatOnConnection(resourceMap, iterateId, 0, 0, "row82");
				}

				int tos_count_tDBCommit_38 = 0;

				/**
				 * [tDBCommit_38 begin ] stop
				 */

				/**
				 * [tLogRow_46 begin ] start
				 */

				ok_Hash.put("tLogRow_46", false);
				start_Hash.put("tLogRow_46", System.currentTimeMillis());

				currentComponent = "tLogRow_46";

				if (execStat) {
					runStat.updateStatOnConnection(resourceMap, iterateId, 0, 0, "row83");
				}

				int tos_count_tLogRow_46 = 0;

				///////////////////////

				final String OUTPUT_FIELD_SEPARATOR_tLogRow_46 = "|";
				java.io.PrintStream consoleOut_tLogRow_46 = null;

				StringBuilder strBuffer_tLogRow_46 = null;
				int nb_line_tLogRow_46 = 0;
///////////////////////    			

				/**
				 * [tLogRow_46 begin ] stop
				 */

				/**
				 * [tDBRow_38 begin ] start
				 */

				ok_Hash.put("tDBRow_38", false);
				start_Hash.put("tDBRow_38", System.currentTimeMillis());

				tStatCatcher_1.addMessage("begin", "tDBRow_38");
				tStatCatcher_1Process(globalMap);

				currentComponent = "tDBRow_38";

				int tos_count_tDBRow_38 = 0;

				java.sql.Connection conn_tDBRow_38 = null;
				String query_tDBRow_38 = "";
				boolean whetherReject_tDBRow_38 = false;
				conn_tDBRow_38 = (java.sql.Connection) globalMap.get("conn_tMSSqlConnection_3");

				resourceMap.put("conn_tDBRow_38", conn_tDBRow_38);
				java.sql.Statement stmt_tDBRow_38 = conn_tDBRow_38.createStatement();
				resourceMap.put("stmt_tDBRow_38", stmt_tDBRow_38);

				/**
				 * [tDBRow_38 begin ] stop
				 */

				/**
				 * [tDBRow_38 main ] start
				 */

				currentComponent = "tDBRow_38";

				row82 = null;

				row83 = null;

				query_tDBRow_38 = "UPDATE R \n		SET R.STATUS_CODE = P.SPECIAL_FINAL_STATUS,R.STATUS_DATE=P.ACTION_DATE, R.EXPIRATION_DATE=P.MANUAL_DUE_DAT"
						+ "E\n		\n		FROM IP_PROC AS R\n		INNER JOIN (SELECT	SPECIAL_FINAL_STATUS,\n				ACTION_DATE,\n				MANUAL_DUE_DATE,\n				 use"
						+ "rdoc_file_proc_typ,\n				 userdoc_file_proc_nbr\n		FROM  WRK_USERDOC_ACTIONS T \n		      JOIN WRK_userdoc_files M ON T.u"
						+ "serdoc_seq  = M.userdoc_seq\n			 AND	T.userdoc_series  = M.userdoc_series\n			 AND	T.userdoc_nbr  = M.userdoc_nbr  \n		W"
						+ "HERE	 ACTION_CATEGORY  = 'S'\n		 AND	userdoc_file_proc_typ  is not null\n		 AND	process_file_nbr  is not null) AS P \n		"
						+ "	   ON R.PROC_TYP = P.USERDOC_FILE_PROC_TYP and R.PROC_NBR=P.USERDOC_FILE_PROC_NBR;;";
				whetherReject_tDBRow_38 = false;
				globalMap.put("tDBRow_38_QUERY", query_tDBRow_38);
				try {
					stmt_tDBRow_38.execute(query_tDBRow_38);

				} catch (java.lang.Exception e) {
					whetherReject_tDBRow_38 = true;

					row83 = new row83Struct();

					row83.errorCode = ((java.sql.SQLException) e).getSQLState();
					row83.errorMessage = e.getMessage() + " - Line: " + tos_count_tDBRow_38;

				}

				if (!whetherReject_tDBRow_38) {

					row82 = new row82Struct();

				}

				tos_count_tDBRow_38++;

				/**
				 * [tDBRow_38 main ] stop
				 */

				/**
				 * [tDBRow_38 process_data_begin ] start
				 */

				currentComponent = "tDBRow_38";

				/**
				 * [tDBRow_38 process_data_begin ] stop
				 */
// Start of branch "row82"
				if (row82 != null) {

					/**
					 * [tDBCommit_38 main ] start
					 */

					currentComponent = "tDBCommit_38";

					if (execStat) {
						runStat.updateStatOnConnection(iterateId, 1, 1

								, "row82"

						);
					}

					java.sql.Connection conn_tDBCommit_38 = (java.sql.Connection) globalMap
							.get("conn_tMSSqlConnection_3");
					if (conn_tDBCommit_38 != null && !conn_tDBCommit_38.isClosed()) {

						conn_tDBCommit_38.commit();

					}

					tos_count_tDBCommit_38++;

					/**
					 * [tDBCommit_38 main ] stop
					 */

					/**
					 * [tDBCommit_38 process_data_begin ] start
					 */

					currentComponent = "tDBCommit_38";

					/**
					 * [tDBCommit_38 process_data_begin ] stop
					 */

					/**
					 * [tDBCommit_38 process_data_end ] start
					 */

					currentComponent = "tDBCommit_38";

					/**
					 * [tDBCommit_38 process_data_end ] stop
					 */

				} // End of branch "row82"

// Start of branch "row83"
				if (row83 != null) {

					/**
					 * [tLogRow_46 main ] start
					 */

					currentComponent = "tLogRow_46";

					if (execStat) {
						runStat.updateStatOnConnection(iterateId, 1, 1

								, "row83"

						);
					}

///////////////////////		

					strBuffer_tLogRow_46 = new StringBuilder();

					if (row83.errorCode != null) { //

						strBuffer_tLogRow_46.append(String.valueOf(row83.errorCode));

					} //

					strBuffer_tLogRow_46.append("|");

					if (row83.errorMessage != null) { //

						strBuffer_tLogRow_46.append(String.valueOf(row83.errorMessage));

					} //

					if (globalMap.get("tLogRow_CONSOLE") != null) {
						consoleOut_tLogRow_46 = (java.io.PrintStream) globalMap.get("tLogRow_CONSOLE");
					} else {
						consoleOut_tLogRow_46 = new java.io.PrintStream(new java.io.BufferedOutputStream(System.out));
						globalMap.put("tLogRow_CONSOLE", consoleOut_tLogRow_46);
					}
					consoleOut_tLogRow_46.println(strBuffer_tLogRow_46.toString());
					consoleOut_tLogRow_46.flush();
					nb_line_tLogRow_46++;
//////

//////                    

///////////////////////    			

					tos_count_tLogRow_46++;

					/**
					 * [tLogRow_46 main ] stop
					 */

					/**
					 * [tLogRow_46 process_data_begin ] start
					 */

					currentComponent = "tLogRow_46";

					/**
					 * [tLogRow_46 process_data_begin ] stop
					 */

					/**
					 * [tLogRow_46 process_data_end ] start
					 */

					currentComponent = "tLogRow_46";

					/**
					 * [tLogRow_46 process_data_end ] stop
					 */

				} // End of branch "row83"

				/**
				 * [tDBRow_38 process_data_end ] start
				 */

				currentComponent = "tDBRow_38";

				/**
				 * [tDBRow_38 process_data_end ] stop
				 */

				/**
				 * [tDBRow_38 end ] start
				 */

				currentComponent = "tDBRow_38";

				stmt_tDBRow_38.close();
				resourceMap.remove("stmt_tDBRow_38");
				resourceMap.put("statementClosed_tDBRow_38", true);
				resourceMap.put("finish_tDBRow_38", true);

				ok_Hash.put("tDBRow_38", true);
				end_Hash.put("tDBRow_38", System.currentTimeMillis());

				tStatCatcher_1.addMessage("end", "tDBRow_38", end_Hash.get("tDBRow_38") - start_Hash.get("tDBRow_38"));
				tStatCatcher_1Process(globalMap);

				/**
				 * [tDBRow_38 end ] stop
				 */

				/**
				 * [tDBCommit_38 end ] start
				 */

				currentComponent = "tDBCommit_38";

				if (execStat) {
					runStat.updateStat(resourceMap, iterateId, 2, 0, "row82");
				}

				ok_Hash.put("tDBCommit_38", true);
				end_Hash.put("tDBCommit_38", System.currentTimeMillis());

				/**
				 * [tDBCommit_38 end ] stop
				 */

				/**
				 * [tLogRow_46 end ] start
				 */

				currentComponent = "tLogRow_46";

//////
//////
				globalMap.put("tLogRow_46_NB_LINE", nb_line_tLogRow_46);

///////////////////////    			

				if (execStat) {
					runStat.updateStat(resourceMap, iterateId, 2, 0, "row83");
				}

				ok_Hash.put("tLogRow_46", true);
				end_Hash.put("tLogRow_46", System.currentTimeMillis());

				/**
				 * [tLogRow_46 end ] stop
				 */

			} // end the resume

			if (resumeEntryMethodName == null || globalResumeTicket) {
				resumeUtil.addLog("CHECKPOINT", "CONNECTION:SUBJOB_OK:tDBRow_38:OnSubjobOk", "",
						Thread.currentThread().getId() + "", "", "", "", "", "");
			}

			if (execStat) {
				runStat.updateStatOnConnection("OnSubjobOk45", 0, "ok");
			}

			tDBRow_39Process(globalMap);

		} catch (java.lang.Exception e) {

			TalendException te = new TalendException(e, currentComponent, globalMap);

			throw te;
		} catch (java.lang.Error error) {

			runStat.stopThreadStat();

			throw error;
		} finally {

			try {

				/**
				 * [tDBRow_38 finally ] start
				 */

				currentComponent = "tDBRow_38";

				if (resourceMap.get("statementClosed_tDBRow_38") == null) {
					java.sql.Statement stmtToClose_tDBRow_38 = null;
					if ((stmtToClose_tDBRow_38 = (java.sql.Statement) resourceMap.remove("stmt_tDBRow_38")) != null) {
						stmtToClose_tDBRow_38.close();
					}
				}

				/**
				 * [tDBRow_38 finally ] stop
				 */

				/**
				 * [tDBCommit_38 finally ] start
				 */

				currentComponent = "tDBCommit_38";

				/**
				 * [tDBCommit_38 finally ] stop
				 */

				/**
				 * [tLogRow_46 finally ] start
				 */

				currentComponent = "tLogRow_46";

				/**
				 * [tLogRow_46 finally ] stop
				 */

			} catch (java.lang.Exception e) {
				// ignore
			} catch (java.lang.Error error) {
				// ignore
			}
			resourceMap = null;
		}

		globalMap.put("tDBRow_38_SUBPROCESS_STATE", 1);
	}

	public static class row86Struct implements routines.system.IPersistableRow<row86Struct> {
		final static byte[] commonByteArrayLock_WIPO_PROJECTS_G3b_Mig_UD = new byte[0];
		static byte[] commonByteArray_WIPO_PROJECTS_G3b_Mig_UD = new byte[0];

		public void readData(ObjectInputStream dis) {

			synchronized (commonByteArrayLock_WIPO_PROJECTS_G3b_Mig_UD) {

				try {

					int length = 0;

				}

				finally {
				}

			}

		}

		public void writeData(ObjectOutputStream dos) {
			try {

			}

			finally {
			}

		}

		public String toString() {

			StringBuilder sb = new StringBuilder();
			sb.append(super.toString());
			sb.append("[");
			sb.append("]");

			return sb.toString();
		}

		/**
		 * Compare keys
		 */
		public int compareTo(row86Struct other) {

			int returnValue = -1;

			return returnValue;
		}

		private int checkNullsAndCompare(Object object1, Object object2) {
			int returnValue = 0;
			if (object1 instanceof Comparable && object2 instanceof Comparable) {
				returnValue = ((Comparable) object1).compareTo(object2);
			} else if (object1 != null && object2 != null) {
				returnValue = compareStrings(object1.toString(), object2.toString());
			} else if (object1 == null && object2 != null) {
				returnValue = 1;
			} else if (object1 != null && object2 == null) {
				returnValue = -1;
			} else {
				returnValue = 0;
			}

			return returnValue;
		}

		private int compareStrings(String string1, String string2) {
			return string1.compareTo(string2);
		}

	}

	public void tDBRow_39Process(final java.util.Map<String, Object> globalMap) throws TalendException {
		globalMap.put("tDBRow_39_SUBPROCESS_STATE", 0);

		final boolean execStat = this.execStat;

		String iterateId = "";

		String currentComponent = "";
		java.util.Map<String, Object> resourceMap = new java.util.HashMap<String, Object>();

		try {
			// TDI-39566 avoid throwing an useless Exception
			boolean resumeIt = true;
			if (globalResumeTicket == false && resumeEntryMethodName != null) {
				String currentMethodName = new java.lang.Exception().getStackTrace()[0].getMethodName();
				resumeIt = resumeEntryMethodName.equals(currentMethodName);
			}
			if (resumeIt || globalResumeTicket) { // start the resume
				globalResumeTicket = true;

				row86Struct row86 = new row86Struct();

				/**
				 * [tDBCommit_40 begin ] start
				 */

				ok_Hash.put("tDBCommit_40", false);
				start_Hash.put("tDBCommit_40", System.currentTimeMillis());

				currentComponent = "tDBCommit_40";

				if (execStat) {
					runStat.updateStatOnConnection(resourceMap, iterateId, 0, 0, "row86");
				}

				int tos_count_tDBCommit_40 = 0;

				/**
				 * [tDBCommit_40 begin ] stop
				 */

				/**
				 * [tDBRow_39 begin ] start
				 */

				ok_Hash.put("tDBRow_39", false);
				start_Hash.put("tDBRow_39", System.currentTimeMillis());

				currentComponent = "tDBRow_39";

				int tos_count_tDBRow_39 = 0;

				java.sql.Connection conn_tDBRow_39 = null;
				String query_tDBRow_39 = "";
				boolean whetherReject_tDBRow_39 = false;
				conn_tDBRow_39 = (java.sql.Connection) globalMap.get("conn_tMSSqlConnection_3");

				resourceMap.put("conn_tDBRow_39", conn_tDBRow_39);
				java.sql.Statement stmt_tDBRow_39 = conn_tDBRow_39.createStatement();
				resourceMap.put("stmt_tDBRow_39", stmt_tDBRow_39);

				/**
				 * [tDBRow_39 begin ] stop
				 */

				/**
				 * [tDBRow_39 main ] start
				 */

				currentComponent = "tDBRow_39";

				row86 = null;

				query_tDBRow_39 = "UPDATE   [" + context.intermediateDB
						+ "].[dbo].VW_IMPORT_USERDOC   \n	SET	IND_IMPORT = 1 \n	WHERE  IND_IMPORT =9 ;\nupdate IP_MARK set NICE_CLASS_TXT=NICE_CLA"
						+ "SS_TXT+' ' where NICE_CLASS_TXT not like '% ';\n\n"

				;
				whetherReject_tDBRow_39 = false;
				globalMap.put("tDBRow_39_QUERY", query_tDBRow_39);
				try {
					stmt_tDBRow_39.execute(query_tDBRow_39);

				} catch (java.lang.Exception e) {
					whetherReject_tDBRow_39 = true;

					System.err.print(e.getMessage());

				}

				if (!whetherReject_tDBRow_39) {

					row86 = new row86Struct();

				}

				tos_count_tDBRow_39++;

				/**
				 * [tDBRow_39 main ] stop
				 */

				/**
				 * [tDBRow_39 process_data_begin ] start
				 */

				currentComponent = "tDBRow_39";

				/**
				 * [tDBRow_39 process_data_begin ] stop
				 */
// Start of branch "row86"
				if (row86 != null) {

					/**
					 * [tDBCommit_40 main ] start
					 */

					currentComponent = "tDBCommit_40";

					if (execStat) {
						runStat.updateStatOnConnection(iterateId, 1, 1

								, "row86"

						);
					}

					java.sql.Connection conn_tDBCommit_40 = (java.sql.Connection) globalMap
							.get("conn_tMSSqlConnection_3");
					if (conn_tDBCommit_40 != null && !conn_tDBCommit_40.isClosed()) {

						conn_tDBCommit_40.commit();

					}

					tos_count_tDBCommit_40++;

					/**
					 * [tDBCommit_40 main ] stop
					 */

					/**
					 * [tDBCommit_40 process_data_begin ] start
					 */

					currentComponent = "tDBCommit_40";

					/**
					 * [tDBCommit_40 process_data_begin ] stop
					 */

					/**
					 * [tDBCommit_40 process_data_end ] start
					 */

					currentComponent = "tDBCommit_40";

					/**
					 * [tDBCommit_40 process_data_end ] stop
					 */

				} // End of branch "row86"

				/**
				 * [tDBRow_39 process_data_end ] start
				 */

				currentComponent = "tDBRow_39";

				/**
				 * [tDBRow_39 process_data_end ] stop
				 */

				/**
				 * [tDBRow_39 end ] start
				 */

				currentComponent = "tDBRow_39";

				stmt_tDBRow_39.close();
				resourceMap.remove("stmt_tDBRow_39");
				resourceMap.put("statementClosed_tDBRow_39", true);
				resourceMap.put("finish_tDBRow_39", true);

				ok_Hash.put("tDBRow_39", true);
				end_Hash.put("tDBRow_39", System.currentTimeMillis());

				/**
				 * [tDBRow_39 end ] stop
				 */

				/**
				 * [tDBCommit_40 end ] start
				 */

				currentComponent = "tDBCommit_40";

				if (execStat) {
					runStat.updateStat(resourceMap, iterateId, 2, 0, "row86");
				}

				ok_Hash.put("tDBCommit_40", true);
				end_Hash.put("tDBCommit_40", System.currentTimeMillis());

				/**
				 * [tDBCommit_40 end ] stop
				 */

			} // end the resume

			if (resumeEntryMethodName == null || globalResumeTicket) {
				resumeUtil.addLog("CHECKPOINT", "CONNECTION:SUBJOB_OK:tDBRow_39:OnSubjobOk", "",
						Thread.currentThread().getId() + "", "", "", "", "", "");
			}

			if (execStat) {
				runStat.updateStatOnConnection("OnSubjobOk54", 0, "ok");
			}

			tDBInput_10Process(globalMap);

		} catch (java.lang.Exception e) {

			TalendException te = new TalendException(e, currentComponent, globalMap);

			throw te;
		} catch (java.lang.Error error) {

			runStat.stopThreadStat();

			throw error;
		} finally {

			try {

				/**
				 * [tDBRow_39 finally ] start
				 */

				currentComponent = "tDBRow_39";

				if (resourceMap.get("statementClosed_tDBRow_39") == null) {
					java.sql.Statement stmtToClose_tDBRow_39 = null;
					if ((stmtToClose_tDBRow_39 = (java.sql.Statement) resourceMap.remove("stmt_tDBRow_39")) != null) {
						stmtToClose_tDBRow_39.close();
					}
				}

				/**
				 * [tDBRow_39 finally ] stop
				 */

				/**
				 * [tDBCommit_40 finally ] start
				 */

				currentComponent = "tDBCommit_40";

				/**
				 * [tDBCommit_40 finally ] stop
				 */

			} catch (java.lang.Exception e) {
				// ignore
			} catch (java.lang.Error error) {
				// ignore
			}
			resourceMap = null;
		}

		globalMap.put("tDBRow_39_SUBPROCESS_STATE", 1);
	}

	public static class row21Struct implements routines.system.IPersistableRow<row21Struct> {
		final static byte[] commonByteArrayLock_WIPO_PROJECTS_G3b_Mig_UD = new byte[0];
		static byte[] commonByteArray_WIPO_PROJECTS_G3b_Mig_UD = new byte[0];

		public String Message;

		public String getMessage() {
			return this.Message;
		}

		public java.util.Date Time;

		public java.util.Date getTime() {
			return this.Time;
		}

		private String readString(ObjectInputStream dis) throws IOException {
			String strReturn = null;
			int length = 0;
			length = dis.readInt();
			if (length == -1) {
				strReturn = null;
			} else {
				if (length > commonByteArray_WIPO_PROJECTS_G3b_Mig_UD.length) {
					if (length < 1024 && commonByteArray_WIPO_PROJECTS_G3b_Mig_UD.length == 0) {
						commonByteArray_WIPO_PROJECTS_G3b_Mig_UD = new byte[1024];
					} else {
						commonByteArray_WIPO_PROJECTS_G3b_Mig_UD = new byte[2 * length];
					}
				}
				dis.readFully(commonByteArray_WIPO_PROJECTS_G3b_Mig_UD, 0, length);
				strReturn = new String(commonByteArray_WIPO_PROJECTS_G3b_Mig_UD, 0, length, utf8Charset);
			}
			return strReturn;
		}

		private void writeString(String str, ObjectOutputStream dos) throws IOException {
			if (str == null) {
				dos.writeInt(-1);
			} else {
				byte[] byteArray = str.getBytes(utf8Charset);
				dos.writeInt(byteArray.length);
				dos.write(byteArray);
			}
		}

		private java.util.Date readDate(ObjectInputStream dis) throws IOException {
			java.util.Date dateReturn = null;
			int length = 0;
			length = dis.readByte();
			if (length == -1) {
				dateReturn = null;
			} else {
				dateReturn = new Date(dis.readLong());
			}
			return dateReturn;
		}

		private void writeDate(java.util.Date date1, ObjectOutputStream dos) throws IOException {
			if (date1 == null) {
				dos.writeByte(-1);
			} else {
				dos.writeByte(0);
				dos.writeLong(date1.getTime());
			}
		}

		public void readData(ObjectInputStream dis) {

			synchronized (commonByteArrayLock_WIPO_PROJECTS_G3b_Mig_UD) {

				try {

					int length = 0;

					this.Message = readString(dis);

					this.Time = readDate(dis);

				} catch (IOException e) {
					throw new RuntimeException(e);

				}

			}

		}

		public void writeData(ObjectOutputStream dos) {
			try {

				// String

				writeString(this.Message, dos);

				// java.util.Date

				writeDate(this.Time, dos);

			} catch (IOException e) {
				throw new RuntimeException(e);
			}

		}

		public String toString() {

			StringBuilder sb = new StringBuilder();
			sb.append(super.toString());
			sb.append("[");
			sb.append("Message=" + Message);
			sb.append(",Time=" + String.valueOf(Time));
			sb.append("]");

			return sb.toString();
		}

		/**
		 * Compare keys
		 */
		public int compareTo(row21Struct other) {

			int returnValue = -1;

			return returnValue;
		}

		private int checkNullsAndCompare(Object object1, Object object2) {
			int returnValue = 0;
			if (object1 instanceof Comparable && object2 instanceof Comparable) {
				returnValue = ((Comparable) object1).compareTo(object2);
			} else if (object1 != null && object2 != null) {
				returnValue = compareStrings(object1.toString(), object2.toString());
			} else if (object1 == null && object2 != null) {
				returnValue = 1;
			} else if (object1 != null && object2 == null) {
				returnValue = -1;
			} else {
				returnValue = 0;
			}

			return returnValue;
		}

		private int compareStrings(String string1, String string2) {
			return string1.compareTo(string2);
		}

	}

	public void tDBInput_10Process(final java.util.Map<String, Object> globalMap) throws TalendException {
		globalMap.put("tDBInput_10_SUBPROCESS_STATE", 0);

		final boolean execStat = this.execStat;

		String iterateId = "";

		String currentComponent = "";
		java.util.Map<String, Object> resourceMap = new java.util.HashMap<String, Object>();

		try {
			// TDI-39566 avoid throwing an useless Exception
			boolean resumeIt = true;
			if (globalResumeTicket == false && resumeEntryMethodName != null) {
				String currentMethodName = new java.lang.Exception().getStackTrace()[0].getMethodName();
				resumeIt = resumeEntryMethodName.equals(currentMethodName);
			}
			if (resumeIt || globalResumeTicket) { // start the resume
				globalResumeTicket = true;

				row21Struct row21 = new row21Struct();

				/**
				 * [tLogRow_10 begin ] start
				 */

				ok_Hash.put("tLogRow_10", false);
				start_Hash.put("tLogRow_10", System.currentTimeMillis());

				currentComponent = "tLogRow_10";

				if (execStat) {
					runStat.updateStatOnConnection(resourceMap, iterateId, 0, 0, "row21");
				}

				int tos_count_tLogRow_10 = 0;

				///////////////////////

				final String OUTPUT_FIELD_SEPARATOR_tLogRow_10 = "|";
				java.io.PrintStream consoleOut_tLogRow_10 = null;

				StringBuilder strBuffer_tLogRow_10 = null;
				int nb_line_tLogRow_10 = 0;
///////////////////////    			

				/**
				 * [tLogRow_10 begin ] stop
				 */

				/**
				 * [tDBInput_10 begin ] start
				 */

				ok_Hash.put("tDBInput_10", false);
				start_Hash.put("tDBInput_10", System.currentTimeMillis());

				currentComponent = "tDBInput_10";

				int tos_count_tDBInput_10 = 0;

				org.talend.designer.components.util.mssql.MSSqlGenerateTimestampUtil mssqlGTU_tDBInput_10 = org.talend.designer.components.util.mssql.MSSqlUtilFactory
						.getMSSqlGenerateTimestampUtil();

				java.util.List<String> talendToDBList_tDBInput_10 = new java.util.ArrayList();
				String[] talendToDBArray_tDBInput_10 = new String[] { "FLOAT", "NUMERIC", "NUMERIC IDENTITY", "DECIMAL",
						"DECIMAL IDENTITY", "REAL" };
				java.util.Collections.addAll(talendToDBList_tDBInput_10, talendToDBArray_tDBInput_10);
				int nb_line_tDBInput_10 = 0;
				java.sql.Connection conn_tDBInput_10 = null;
				conn_tDBInput_10 = (java.sql.Connection) globalMap.get("conn_tMSSqlConnection_3");

				String dbschema_tDBInput_10 = (String) globalMap.get("dbschema_tMSSqlConnection_3");

				java.sql.Statement stmt_tDBInput_10 = conn_tDBInput_10.createStatement();

				String dbquery_tDBInput_10 = "SELECT 'Step 10: second inserts to IP tables' ,GETDATE();";

				globalMap.put("tDBInput_10_QUERY", dbquery_tDBInput_10);
				java.sql.ResultSet rs_tDBInput_10 = null;

				try {
					rs_tDBInput_10 = stmt_tDBInput_10.executeQuery(dbquery_tDBInput_10);
					java.sql.ResultSetMetaData rsmd_tDBInput_10 = rs_tDBInput_10.getMetaData();
					int colQtyInRs_tDBInput_10 = rsmd_tDBInput_10.getColumnCount();

					String tmpContent_tDBInput_10 = null;

					while (rs_tDBInput_10.next()) {
						nb_line_tDBInput_10++;

						if (colQtyInRs_tDBInput_10 < 1) {
							row21.Message = null;
						} else {

							tmpContent_tDBInput_10 = rs_tDBInput_10.getString(1);
							if (tmpContent_tDBInput_10 != null) {
								if (talendToDBList_tDBInput_10.contains(
										rsmd_tDBInput_10.getColumnTypeName(1).toUpperCase(java.util.Locale.ENGLISH))) {
									row21.Message = FormatterUtils.formatUnwithE(tmpContent_tDBInput_10);
								} else {
									row21.Message = tmpContent_tDBInput_10;
								}
							} else {
								row21.Message = null;
							}
						}
						if (colQtyInRs_tDBInput_10 < 2) {
							row21.Time = null;
						} else {

							row21.Time = mssqlGTU_tDBInput_10.getDate(rsmd_tDBInput_10, rs_tDBInput_10, 2);

						}

						/**
						 * [tDBInput_10 begin ] stop
						 */

						/**
						 * [tDBInput_10 main ] start
						 */

						currentComponent = "tDBInput_10";

						tos_count_tDBInput_10++;

						/**
						 * [tDBInput_10 main ] stop
						 */

						/**
						 * [tDBInput_10 process_data_begin ] start
						 */

						currentComponent = "tDBInput_10";

						/**
						 * [tDBInput_10 process_data_begin ] stop
						 */

						/**
						 * [tLogRow_10 main ] start
						 */

						currentComponent = "tLogRow_10";

						if (execStat) {
							runStat.updateStatOnConnection(iterateId, 1, 1

									, "row21"

							);
						}

///////////////////////		

						strBuffer_tLogRow_10 = new StringBuilder();

						if (row21.Message != null) { //

							strBuffer_tLogRow_10.append(String.valueOf(row21.Message));

						} //

						strBuffer_tLogRow_10.append("|");

						if (row21.Time != null) { //

							strBuffer_tLogRow_10.append(FormatterUtils.format_Date(row21.Time, "yyyy-MM-dd HH:mm:ss"));

						} //

						if (globalMap.get("tLogRow_CONSOLE") != null) {
							consoleOut_tLogRow_10 = (java.io.PrintStream) globalMap.get("tLogRow_CONSOLE");
						} else {
							consoleOut_tLogRow_10 = new java.io.PrintStream(
									new java.io.BufferedOutputStream(System.out));
							globalMap.put("tLogRow_CONSOLE", consoleOut_tLogRow_10);
						}
						consoleOut_tLogRow_10.println(strBuffer_tLogRow_10.toString());
						consoleOut_tLogRow_10.flush();
						nb_line_tLogRow_10++;
//////

//////                    

///////////////////////    			

						tos_count_tLogRow_10++;

						/**
						 * [tLogRow_10 main ] stop
						 */

						/**
						 * [tLogRow_10 process_data_begin ] start
						 */

						currentComponent = "tLogRow_10";

						/**
						 * [tLogRow_10 process_data_begin ] stop
						 */

						/**
						 * [tLogRow_10 process_data_end ] start
						 */

						currentComponent = "tLogRow_10";

						/**
						 * [tLogRow_10 process_data_end ] stop
						 */

						/**
						 * [tDBInput_10 process_data_end ] start
						 */

						currentComponent = "tDBInput_10";

						/**
						 * [tDBInput_10 process_data_end ] stop
						 */

						/**
						 * [tDBInput_10 end ] start
						 */

						currentComponent = "tDBInput_10";

					}
				} finally {
					if (rs_tDBInput_10 != null) {
						rs_tDBInput_10.close();
					}
					if (stmt_tDBInput_10 != null) {
						stmt_tDBInput_10.close();
					}
				}
				globalMap.put("tDBInput_10_NB_LINE", nb_line_tDBInput_10);

				ok_Hash.put("tDBInput_10", true);
				end_Hash.put("tDBInput_10", System.currentTimeMillis());

				/**
				 * [tDBInput_10 end ] stop
				 */

				/**
				 * [tLogRow_10 end ] start
				 */

				currentComponent = "tLogRow_10";

//////
//////
				globalMap.put("tLogRow_10_NB_LINE", nb_line_tLogRow_10);

///////////////////////    			

				if (execStat) {
					runStat.updateStat(resourceMap, iterateId, 2, 0, "row21");
				}

				ok_Hash.put("tLogRow_10", true);
				end_Hash.put("tLogRow_10", System.currentTimeMillis());

				/**
				 * [tLogRow_10 end ] stop
				 */

			} // end the resume

			if (resumeEntryMethodName == null || globalResumeTicket) {
				resumeUtil.addLog("CHECKPOINT", "CONNECTION:SUBJOB_OK:tDBInput_10:OnSubjobOk", "",
						Thread.currentThread().getId() + "", "", "", "", "", "");
			}

			if (execStat) {
				runStat.updateStatOnConnection("OnSubjobOk51", 0, "ok");
			}

			tDBClose_1Process(globalMap);

		} catch (java.lang.Exception e) {

			TalendException te = new TalendException(e, currentComponent, globalMap);

			throw te;
		} catch (java.lang.Error error) {

			runStat.stopThreadStat();

			throw error;
		} finally {

			try {

				/**
				 * [tDBInput_10 finally ] start
				 */

				currentComponent = "tDBInput_10";

				/**
				 * [tDBInput_10 finally ] stop
				 */

				/**
				 * [tLogRow_10 finally ] start
				 */

				currentComponent = "tLogRow_10";

				/**
				 * [tLogRow_10 finally ] stop
				 */

			} catch (java.lang.Exception e) {
				// ignore
			} catch (java.lang.Error error) {
				// ignore
			}
			resourceMap = null;
		}

		globalMap.put("tDBInput_10_SUBPROCESS_STATE", 1);
	}

	public void tDBClose_1Process(final java.util.Map<String, Object> globalMap) throws TalendException {
		globalMap.put("tDBClose_1_SUBPROCESS_STATE", 0);

		final boolean execStat = this.execStat;

		String iterateId = "";

		String currentComponent = "";
		java.util.Map<String, Object> resourceMap = new java.util.HashMap<String, Object>();

		try {
			// TDI-39566 avoid throwing an useless Exception
			boolean resumeIt = true;
			if (globalResumeTicket == false && resumeEntryMethodName != null) {
				String currentMethodName = new java.lang.Exception().getStackTrace()[0].getMethodName();
				resumeIt = resumeEntryMethodName.equals(currentMethodName);
			}
			if (resumeIt || globalResumeTicket) { // start the resume
				globalResumeTicket = true;

				/**
				 * [tDBClose_1 begin ] start
				 */

				ok_Hash.put("tDBClose_1", false);
				start_Hash.put("tDBClose_1", System.currentTimeMillis());

				currentComponent = "tDBClose_1";

				int tos_count_tDBClose_1 = 0;

				/**
				 * [tDBClose_1 begin ] stop
				 */

				/**
				 * [tDBClose_1 main ] start
				 */

				currentComponent = "tDBClose_1";

				java.sql.Connection conn_tDBClose_1 = (java.sql.Connection) globalMap.get("conn_tMSSqlConnection_3");
				if (conn_tDBClose_1 != null && !conn_tDBClose_1.isClosed()) {
					conn_tDBClose_1.close();
				}

				tos_count_tDBClose_1++;

				/**
				 * [tDBClose_1 main ] stop
				 */

				/**
				 * [tDBClose_1 process_data_begin ] start
				 */

				currentComponent = "tDBClose_1";

				/**
				 * [tDBClose_1 process_data_begin ] stop
				 */

				/**
				 * [tDBClose_1 process_data_end ] start
				 */

				currentComponent = "tDBClose_1";

				/**
				 * [tDBClose_1 process_data_end ] stop
				 */

				/**
				 * [tDBClose_1 end ] start
				 */

				currentComponent = "tDBClose_1";

				ok_Hash.put("tDBClose_1", true);
				end_Hash.put("tDBClose_1", System.currentTimeMillis());

				/**
				 * [tDBClose_1 end ] stop
				 */
			} // end the resume

		} catch (java.lang.Exception e) {

			TalendException te = new TalendException(e, currentComponent, globalMap);

			throw te;
		} catch (java.lang.Error error) {

			runStat.stopThreadStat();

			throw error;
		} finally {

			try {

				/**
				 * [tDBClose_1 finally ] start
				 */

				currentComponent = "tDBClose_1";

				/**
				 * [tDBClose_1 finally ] stop
				 */
			} catch (java.lang.Exception e) {
				// ignore
			} catch (java.lang.Error error) {
				// ignore
			}
			resourceMap = null;
		}

		globalMap.put("tDBClose_1_SUBPROCESS_STATE", 1);
	}

	public static class row30Struct implements routines.system.IPersistableRow<row30Struct> {
		final static byte[] commonByteArrayLock_WIPO_PROJECTS_G3b_Mig_UD = new byte[0];
		static byte[] commonByteArray_WIPO_PROJECTS_G3b_Mig_UD = new byte[0];

		public java.util.Date moment;

		public java.util.Date getMoment() {
			return this.moment;
		}

		public String pid;

		public String getPid() {
			return this.pid;
		}

		public String father_pid;

		public String getFather_pid() {
			return this.father_pid;
		}

		public String root_pid;

		public String getRoot_pid() {
			return this.root_pid;
		}

		public Long system_pid;

		public Long getSystem_pid() {
			return this.system_pid;
		}

		public String project;

		public String getProject() {
			return this.project;
		}

		public String job;

		public String getJob() {
			return this.job;
		}

		public String job_repository_id;

		public String getJob_repository_id() {
			return this.job_repository_id;
		}

		public String job_version;

		public String getJob_version() {
			return this.job_version;
		}

		public String context;

		public String getContext() {
			return this.context;
		}

		public String origin;

		public String getOrigin() {
			return this.origin;
		}

		public String message_type;

		public String getMessage_type() {
			return this.message_type;
		}

		public String message;

		public String getMessage() {
			return this.message;
		}

		public Long duration;

		public Long getDuration() {
			return this.duration;
		}

		private java.util.Date readDate(ObjectInputStream dis) throws IOException {
			java.util.Date dateReturn = null;
			int length = 0;
			length = dis.readByte();
			if (length == -1) {
				dateReturn = null;
			} else {
				dateReturn = new Date(dis.readLong());
			}
			return dateReturn;
		}

		private void writeDate(java.util.Date date1, ObjectOutputStream dos) throws IOException {
			if (date1 == null) {
				dos.writeByte(-1);
			} else {
				dos.writeByte(0);
				dos.writeLong(date1.getTime());
			}
		}

		private String readString(ObjectInputStream dis) throws IOException {
			String strReturn = null;
			int length = 0;
			length = dis.readInt();
			if (length == -1) {
				strReturn = null;
			} else {
				if (length > commonByteArray_WIPO_PROJECTS_G3b_Mig_UD.length) {
					if (length < 1024 && commonByteArray_WIPO_PROJECTS_G3b_Mig_UD.length == 0) {
						commonByteArray_WIPO_PROJECTS_G3b_Mig_UD = new byte[1024];
					} else {
						commonByteArray_WIPO_PROJECTS_G3b_Mig_UD = new byte[2 * length];
					}
				}
				dis.readFully(commonByteArray_WIPO_PROJECTS_G3b_Mig_UD, 0, length);
				strReturn = new String(commonByteArray_WIPO_PROJECTS_G3b_Mig_UD, 0, length, utf8Charset);
			}
			return strReturn;
		}

		private void writeString(String str, ObjectOutputStream dos) throws IOException {
			if (str == null) {
				dos.writeInt(-1);
			} else {
				byte[] byteArray = str.getBytes(utf8Charset);
				dos.writeInt(byteArray.length);
				dos.write(byteArray);
			}
		}

		public void readData(ObjectInputStream dis) {

			synchronized (commonByteArrayLock_WIPO_PROJECTS_G3b_Mig_UD) {

				try {

					int length = 0;

					this.moment = readDate(dis);

					this.pid = readString(dis);

					this.father_pid = readString(dis);

					this.root_pid = readString(dis);

					length = dis.readByte();
					if (length == -1) {
						this.system_pid = null;
					} else {
						this.system_pid = dis.readLong();
					}

					this.project = readString(dis);

					this.job = readString(dis);

					this.job_repository_id = readString(dis);

					this.job_version = readString(dis);

					this.context = readString(dis);

					this.origin = readString(dis);

					this.message_type = readString(dis);

					this.message = readString(dis);

					length = dis.readByte();
					if (length == -1) {
						this.duration = null;
					} else {
						this.duration = dis.readLong();
					}

				} catch (IOException e) {
					throw new RuntimeException(e);

				}

			}

		}

		public void writeData(ObjectOutputStream dos) {
			try {

				// java.util.Date

				writeDate(this.moment, dos);

				// String

				writeString(this.pid, dos);

				// String

				writeString(this.father_pid, dos);

				// String

				writeString(this.root_pid, dos);

				// Long

				if (this.system_pid == null) {
					dos.writeByte(-1);
				} else {
					dos.writeByte(0);
					dos.writeLong(this.system_pid);
				}

				// String

				writeString(this.project, dos);

				// String

				writeString(this.job, dos);

				// String

				writeString(this.job_repository_id, dos);

				// String

				writeString(this.job_version, dos);

				// String

				writeString(this.context, dos);

				// String

				writeString(this.origin, dos);

				// String

				writeString(this.message_type, dos);

				// String

				writeString(this.message, dos);

				// Long

				if (this.duration == null) {
					dos.writeByte(-1);
				} else {
					dos.writeByte(0);
					dos.writeLong(this.duration);
				}

			} catch (IOException e) {
				throw new RuntimeException(e);
			}

		}

		public String toString() {

			StringBuilder sb = new StringBuilder();
			sb.append(super.toString());
			sb.append("[");
			sb.append("moment=" + String.valueOf(moment));
			sb.append(",pid=" + pid);
			sb.append(",father_pid=" + father_pid);
			sb.append(",root_pid=" + root_pid);
			sb.append(",system_pid=" + String.valueOf(system_pid));
			sb.append(",project=" + project);
			sb.append(",job=" + job);
			sb.append(",job_repository_id=" + job_repository_id);
			sb.append(",job_version=" + job_version);
			sb.append(",context=" + context);
			sb.append(",origin=" + origin);
			sb.append(",message_type=" + message_type);
			sb.append(",message=" + message);
			sb.append(",duration=" + String.valueOf(duration));
			sb.append("]");

			return sb.toString();
		}

		/**
		 * Compare keys
		 */
		public int compareTo(row30Struct other) {

			int returnValue = -1;

			return returnValue;
		}

		private int checkNullsAndCompare(Object object1, Object object2) {
			int returnValue = 0;
			if (object1 instanceof Comparable && object2 instanceof Comparable) {
				returnValue = ((Comparable) object1).compareTo(object2);
			} else if (object1 != null && object2 != null) {
				returnValue = compareStrings(object1.toString(), object2.toString());
			} else if (object1 == null && object2 != null) {
				returnValue = 1;
			} else if (object1 != null && object2 == null) {
				returnValue = -1;
			} else {
				returnValue = 0;
			}

			return returnValue;
		}

		private int compareStrings(String string1, String string2) {
			return string1.compareTo(string2);
		}

	}

	public void tStatCatcher_1Process(final java.util.Map<String, Object> globalMap) throws TalendException {
		globalMap.put("tStatCatcher_1_SUBPROCESS_STATE", 0);

		final boolean execStat = this.execStat;

		String iterateId = "";

		String currentComponent = "";
		java.util.Map<String, Object> resourceMap = new java.util.HashMap<String, Object>();

		try {
			// TDI-39566 avoid throwing an useless Exception
			boolean resumeIt = true;
			if (globalResumeTicket == false && resumeEntryMethodName != null) {
				String currentMethodName = new java.lang.Exception().getStackTrace()[0].getMethodName();
				resumeIt = resumeEntryMethodName.equals(currentMethodName);
			}
			if (resumeIt || globalResumeTicket) { // start the resume
				globalResumeTicket = true;

				row30Struct row30 = new row30Struct();

				/**
				 * [tLogRow_16 begin ] start
				 */

				ok_Hash.put("tLogRow_16", false);
				start_Hash.put("tLogRow_16", System.currentTimeMillis());

				currentComponent = "tLogRow_16";

				if (execStat) {
					runStat.updateStatOnConnection(resourceMap, iterateId, 0, 0, "row30");
				}

				int tos_count_tLogRow_16 = 0;

				///////////////////////

				final String OUTPUT_FIELD_SEPARATOR_tLogRow_16 = "|";
				java.io.PrintStream consoleOut_tLogRow_16 = null;

				StringBuilder strBuffer_tLogRow_16 = null;
				int nb_line_tLogRow_16 = 0;
///////////////////////    			

				/**
				 * [tLogRow_16 begin ] stop
				 */

				/**
				 * [tStatCatcher_1 begin ] start
				 */

				ok_Hash.put("tStatCatcher_1", false);
				start_Hash.put("tStatCatcher_1", System.currentTimeMillis());

				currentComponent = "tStatCatcher_1";

				int tos_count_tStatCatcher_1 = 0;

				for (StatCatcherUtils.StatCatcherMessage scm : tStatCatcher_1.getMessages()) {
					row30.pid = pid;
					row30.root_pid = rootPid;
					row30.father_pid = fatherPid;
					row30.project = projectName;
					row30.job = jobName;
					row30.context = contextStr;
					row30.origin = (scm.getOrigin() == null || scm.getOrigin().length() < 1 ? null : scm.getOrigin());
					row30.message = scm.getMessage();
					row30.duration = scm.getDuration();
					row30.moment = scm.getMoment();
					row30.message_type = scm.getMessageType();
					row30.job_version = scm.getJobVersion();
					row30.job_repository_id = scm.getJobId();
					row30.system_pid = scm.getSystemPid();

					/**
					 * [tStatCatcher_1 begin ] stop
					 */

					/**
					 * [tStatCatcher_1 main ] start
					 */

					currentComponent = "tStatCatcher_1";

					tos_count_tStatCatcher_1++;

					/**
					 * [tStatCatcher_1 main ] stop
					 */

					/**
					 * [tStatCatcher_1 process_data_begin ] start
					 */

					currentComponent = "tStatCatcher_1";

					/**
					 * [tStatCatcher_1 process_data_begin ] stop
					 */

					/**
					 * [tLogRow_16 main ] start
					 */

					currentComponent = "tLogRow_16";

					if (execStat) {
						runStat.updateStatOnConnection(iterateId, 1, 1

								, "row30"

						);
					}

///////////////////////		

					strBuffer_tLogRow_16 = new StringBuilder();

					if (row30.moment != null) { //

						strBuffer_tLogRow_16.append(FormatterUtils.format_Date(row30.moment, "yyyy-MM-dd HH:mm:ss"));

					} //

					strBuffer_tLogRow_16.append("|");

					if (row30.job != null) { //

						strBuffer_tLogRow_16.append(String.valueOf(row30.job));

					} //

					strBuffer_tLogRow_16.append("|");

					if (row30.context != null) { //

						strBuffer_tLogRow_16.append(String.valueOf(row30.context));

					} //

					strBuffer_tLogRow_16.append("|");

					if (row30.origin != null) { //

						strBuffer_tLogRow_16.append(String.valueOf(row30.origin));

					} //

					strBuffer_tLogRow_16.append("|");

					if (row30.message_type != null) { //

						strBuffer_tLogRow_16.append(String.valueOf(row30.message_type));

					} //

					strBuffer_tLogRow_16.append("|");

					if (row30.message != null) { //

						strBuffer_tLogRow_16.append(String.valueOf(row30.message));

					} //

					strBuffer_tLogRow_16.append("|");

					if (row30.duration != null) { //

						strBuffer_tLogRow_16.append(String.valueOf(row30.duration));

					} //

					if (globalMap.get("tLogRow_CONSOLE") != null) {
						consoleOut_tLogRow_16 = (java.io.PrintStream) globalMap.get("tLogRow_CONSOLE");
					} else {
						consoleOut_tLogRow_16 = new java.io.PrintStream(new java.io.BufferedOutputStream(System.out));
						globalMap.put("tLogRow_CONSOLE", consoleOut_tLogRow_16);
					}
					consoleOut_tLogRow_16.println(strBuffer_tLogRow_16.toString());
					consoleOut_tLogRow_16.flush();
					nb_line_tLogRow_16++;
//////

//////                    

///////////////////////    			

					tos_count_tLogRow_16++;

					/**
					 * [tLogRow_16 main ] stop
					 */

					/**
					 * [tLogRow_16 process_data_begin ] start
					 */

					currentComponent = "tLogRow_16";

					/**
					 * [tLogRow_16 process_data_begin ] stop
					 */

					/**
					 * [tLogRow_16 process_data_end ] start
					 */

					currentComponent = "tLogRow_16";

					/**
					 * [tLogRow_16 process_data_end ] stop
					 */

					/**
					 * [tStatCatcher_1 process_data_end ] start
					 */

					currentComponent = "tStatCatcher_1";

					/**
					 * [tStatCatcher_1 process_data_end ] stop
					 */

					/**
					 * [tStatCatcher_1 end ] start
					 */

					currentComponent = "tStatCatcher_1";

				}

				ok_Hash.put("tStatCatcher_1", true);
				end_Hash.put("tStatCatcher_1", System.currentTimeMillis());

				/**
				 * [tStatCatcher_1 end ] stop
				 */

				/**
				 * [tLogRow_16 end ] start
				 */

				currentComponent = "tLogRow_16";

//////
//////
				globalMap.put("tLogRow_16_NB_LINE", nb_line_tLogRow_16);

///////////////////////    			

				if (execStat) {
					runStat.updateStat(resourceMap, iterateId, 2, 0, "row30");
				}

				ok_Hash.put("tLogRow_16", true);
				end_Hash.put("tLogRow_16", System.currentTimeMillis());

				/**
				 * [tLogRow_16 end ] stop
				 */

			} // end the resume

		} catch (java.lang.Exception e) {

			TalendException te = new TalendException(e, currentComponent, globalMap);

			throw te;
		} catch (java.lang.Error error) {

			runStat.stopThreadStat();

			throw error;
		} finally {

			try {

				/**
				 * [tStatCatcher_1 finally ] start
				 */

				currentComponent = "tStatCatcher_1";

				/**
				 * [tStatCatcher_1 finally ] stop
				 */

				/**
				 * [tLogRow_16 finally ] start
				 */

				currentComponent = "tLogRow_16";

				/**
				 * [tLogRow_16 finally ] stop
				 */

			} catch (java.lang.Exception e) {
				// ignore
			} catch (java.lang.Error error) {
				// ignore
			}
			resourceMap = null;
		}

		globalMap.put("tStatCatcher_1_SUBPROCESS_STATE", 1);
	}

	public String resuming_logs_dir_path = null;
	public String resuming_checkpoint_path = null;
	public String parent_part_launcher = null;
	private String resumeEntryMethodName = null;
	private boolean globalResumeTicket = false;

	public boolean watch = false;
	// portStats is null, it means don't execute the statistics
	public Integer portStats = null;
	public int portTraces = 4334;
	public String clientHost;
	public String defaultClientHost = "localhost";
	public String contextStr = "Default";
	public boolean isDefaultContext = true;
	public String pid = "0";
	public String rootPid = null;
	public String fatherPid = null;
	public String fatherNode = null;
	public long startTime = 0;
	public boolean isChildJob = false;
	public String log4jLevel = "";

	private boolean enableLogStash;

	private boolean execStat = true;

	private ThreadLocal<java.util.Map<String, String>> threadLocal = new ThreadLocal<java.util.Map<String, String>>() {
		protected java.util.Map<String, String> initialValue() {
			java.util.Map<String, String> threadRunResultMap = new java.util.HashMap<String, String>();
			threadRunResultMap.put("errorCode", null);
			threadRunResultMap.put("status", "");
			return threadRunResultMap;
		};
	};

	protected PropertiesWithType context_param = new PropertiesWithType();
	public java.util.Map<String, Object> parentContextMap = new java.util.HashMap<String, Object>();

	public String status = "";

	public static void main(String[] args) {
		final G3b_Mig_UD G3b_Mig_UDClass = new G3b_Mig_UD();

		int exitCode = G3b_Mig_UDClass.runJobInTOS(args);

		System.exit(exitCode);
	}

	public String[][] runJob(String[] args) {

		int exitCode = runJobInTOS(args);
		String[][] bufferValue = new String[][] { { Integer.toString(exitCode) } };

		return bufferValue;
	}

	public boolean hastBufferOutputComponent() {
		boolean hastBufferOutput = false;

		return hastBufferOutput;
	}

	public int runJobInTOS(String[] args) {
		// reset status
		status = "";

		String lastStr = "";
		for (String arg : args) {
			if (arg.equalsIgnoreCase("--context_param")) {
				lastStr = arg;
			} else if (lastStr.equals("")) {
				evalParam(arg);
			} else {
				evalParam(lastStr + " " + arg);
				lastStr = "";
			}
		}
		enableLogStash = "true".equalsIgnoreCase(System.getProperty("audit.enabled"));

		if (clientHost == null) {
			clientHost = defaultClientHost;
		}

		if (pid == null || "0".equals(pid)) {
			pid = TalendString.getAsciiRandomString(6);
		}

		if (rootPid == null) {
			rootPid = pid;
		}
		if (fatherPid == null) {
			fatherPid = pid;
		} else {
			isChildJob = true;
		}

		if (portStats != null) {
			// portStats = -1; //for testing
			if (portStats < 0 || portStats > 65535) {
				// issue:10869, the portStats is invalid, so this client socket can't open
				System.err.println("The statistics socket port " + portStats + " is invalid.");
				execStat = false;
			}
		} else {
			execStat = false;
		}

		try {
			// call job/subjob with an existing context, like: --context=production. if
			// without this parameter, there will use the default context instead.
			java.io.InputStream inContext = G3b_Mig_UD.class.getClassLoader()
					.getResourceAsStream("wipo_projects/g3b_mig_ud_0_1/contexts/" + contextStr + ".properties");
			if (inContext == null) {
				inContext = G3b_Mig_UD.class.getClassLoader()
						.getResourceAsStream("config/contexts/" + contextStr + ".properties");
			}
			if (inContext != null) {
				try {
					// defaultProps is in order to keep the original context value
					if (context != null && context.isEmpty()) {
						defaultProps.load(inContext);
						context = new ContextProperties(defaultProps);
					}
				} finally {
					inContext.close();
				}
			} else if (!isDefaultContext) {
				// print info and job continue to run, for case: context_param is not empty.
				System.err.println("Could not find the context " + contextStr);
			}

			if (!context_param.isEmpty()) {
				context.putAll(context_param);
				// set types for params from parentJobs
				for (Object key : context_param.keySet()) {
					String context_key = key.toString();
					String context_type = context_param.getContextType(context_key);
					context.setContextType(context_key, context_type);

				}
			}
			class ContextProcessing {
				private void processContext_0() {
					context.setContextType("intermediateHost", "id_String");
					if (context.getStringValue("intermediateHost") == null) {
						context.intermediateHost = null;
					} else {
						context.intermediateHost = (String) context.getProperty("intermediateHost");
					}
					context.setContextType("intermediatePort", "id_String");
					if (context.getStringValue("intermediatePort") == null) {
						context.intermediatePort = null;
					} else {
						context.intermediatePort = (String) context.getProperty("intermediatePort");
					}
					context.setContextType("intermediateDB", "id_String");
					if (context.getStringValue("intermediateDB") == null) {
						context.intermediateDB = null;
					} else {
						context.intermediateDB = (String) context.getProperty("intermediateDB");
					}
					context.setContextType("intermediateUser", "id_String");
					if (context.getStringValue("intermediateUser") == null) {
						context.intermediateUser = null;
					} else {
						context.intermediateUser = (String) context.getProperty("intermediateUser");
					}
					context.setContextType("intermediatePassword", "id_String");
					if (context.getStringValue("intermediatePassword") == null) {
						context.intermediatePassword = null;
					} else {
						context.intermediatePassword = (String) context.getProperty("intermediatePassword");
					}
					context.setContextType("ipasHost", "id_String");
					if (context.getStringValue("ipasHost") == null) {
						context.ipasHost = null;
					} else {
						context.ipasHost = (String) context.getProperty("ipasHost");
					}
					context.setContextType("ipasPort", "id_String");
					if (context.getStringValue("ipasPort") == null) {
						context.ipasPort = null;
					} else {
						context.ipasPort = (String) context.getProperty("ipasPort");
					}
					context.setContextType("ipasDB", "id_String");
					if (context.getStringValue("ipasDB") == null) {
						context.ipasDB = null;
					} else {
						context.ipasDB = (String) context.getProperty("ipasDB");
					}
					context.setContextType("ipasUser", "id_String");
					if (context.getStringValue("ipasUser") == null) {
						context.ipasUser = null;
					} else {
						context.ipasUser = (String) context.getProperty("ipasUser");
					}
					context.setContextType("ipasPassword", "id_String");
					if (context.getStringValue("ipasPassword") == null) {
						context.ipasPassword = null;
					} else {
						context.ipasPassword = (String) context.getProperty("ipasPassword");
					}
					context.setContextType("ipasSaPassword", "id_String");
					if (context.getStringValue("ipasSaPassword") == null) {
						context.ipasSaPassword = null;
					} else {
						context.ipasSaPassword = (String) context.getProperty("ipasSaPassword");
					}
					context.setContextType("processAll", "id_String");
					if (context.getStringValue("processAll") == null) {
						context.processAll = null;
					} else {
						context.processAll = (String) context.getProperty("processAll");
					}
				}

				public void processAllContext() {
					processContext_0();
				}
			}

			new ContextProcessing().processAllContext();
		} catch (java.io.IOException ie) {
			System.err.println("Could not load context " + contextStr);
			ie.printStackTrace();
		}

		// get context value from parent directly
		if (parentContextMap != null && !parentContextMap.isEmpty()) {
			if (parentContextMap.containsKey("intermediateHost")) {
				context.intermediateHost = (String) parentContextMap.get("intermediateHost");
			}
			if (parentContextMap.containsKey("intermediatePort")) {
				context.intermediatePort = (String) parentContextMap.get("intermediatePort");
			}
			if (parentContextMap.containsKey("intermediateDB")) {
				context.intermediateDB = (String) parentContextMap.get("intermediateDB");
			}
			if (parentContextMap.containsKey("intermediateUser")) {
				context.intermediateUser = (String) parentContextMap.get("intermediateUser");
			}
			if (parentContextMap.containsKey("intermediatePassword")) {
				context.intermediatePassword = (String) parentContextMap.get("intermediatePassword");
			}
			if (parentContextMap.containsKey("ipasHost")) {
				context.ipasHost = (String) parentContextMap.get("ipasHost");
			}
			if (parentContextMap.containsKey("ipasPort")) {
				context.ipasPort = (String) parentContextMap.get("ipasPort");
			}
			if (parentContextMap.containsKey("ipasDB")) {
				context.ipasDB = (String) parentContextMap.get("ipasDB");
			}
			if (parentContextMap.containsKey("ipasUser")) {
				context.ipasUser = (String) parentContextMap.get("ipasUser");
			}
			if (parentContextMap.containsKey("ipasPassword")) {
				context.ipasPassword = (String) parentContextMap.get("ipasPassword");
			}
			if (parentContextMap.containsKey("ipasSaPassword")) {
				context.ipasSaPassword = (String) parentContextMap.get("ipasSaPassword");
			}
			if (parentContextMap.containsKey("processAll")) {
				context.processAll = (String) parentContextMap.get("processAll");
			}
		}

		// Resume: init the resumeUtil
		resumeEntryMethodName = ResumeUtil.getResumeEntryMethodName(resuming_checkpoint_path);
		resumeUtil = new ResumeUtil(resuming_logs_dir_path, isChildJob, rootPid);
		resumeUtil.initCommonInfo(pid, rootPid, fatherPid, projectName, jobName, contextStr, jobVersion);

		List<String> parametersToEncrypt = new java.util.ArrayList<String>();
		// Resume: jobStart
		resumeUtil.addLog("JOB_STARTED", "JOB:" + jobName, parent_part_launcher, Thread.currentThread().getId() + "",
				"", "", "", "", resumeUtil.convertToJsonText(context, parametersToEncrypt));

		if (execStat) {
			try {
				runStat.openSocket(!isChildJob);
				runStat.setAllPID(rootPid, fatherPid, pid, jobName);
				runStat.startThreadStat(clientHost, portStats);
				runStat.updateStatOnJob(RunStat.JOBSTART, fatherNode);
			} catch (java.io.IOException ioException) {
				ioException.printStackTrace();
			}
		}

		java.util.concurrent.ConcurrentHashMap<Object, Object> concurrentHashMap = new java.util.concurrent.ConcurrentHashMap<Object, Object>();
		globalMap.put("concurrentHashMap", concurrentHashMap);

		long startUsedMemory = Runtime.getRuntime().totalMemory() - Runtime.getRuntime().freeMemory();
		long endUsedMemory = 0;
		long end = 0;

		startTime = System.currentTimeMillis();
		tStatCatcher_1.addMessage("begin");

		this.globalResumeTicket = true;// to run tPreJob

		try {
			tStatCatcher_1Process(globalMap);
		} catch (java.lang.Exception e) {
			e.printStackTrace();
		}

		this.globalResumeTicket = false;// to run others jobs

		try {
			errorCode = null;
			tMSSqlConnection_3Process(globalMap);
			if (!"failure".equals(status)) {
				status = "end";
			}
		} catch (TalendException e_tMSSqlConnection_3) {
			globalMap.put("tMSSqlConnection_3_SUBPROCESS_STATE", -1);

			e_tMSSqlConnection_3.printStackTrace();

		}

		this.globalResumeTicket = true;// to run tPostJob

		end = System.currentTimeMillis();

		if (watch) {
			System.out.println((end - startTime) + " milliseconds");
		}

		endUsedMemory = Runtime.getRuntime().totalMemory() - Runtime.getRuntime().freeMemory();
		if (false) {
			System.out.println((endUsedMemory - startUsedMemory) + " bytes memory increase when running : G3b_Mig_UD");
		}
		tStatCatcher_1.addMessage(status == "" ? "end" : status, (end - startTime));
		try {
			tStatCatcher_1Process(globalMap);
		} catch (java.lang.Exception e) {
			e.printStackTrace();
		}

		if (execStat) {
			runStat.updateStatOnJob(RunStat.JOBEND, fatherNode);
			runStat.stopThreadStat();
		}
		int returnCode = 0;

		if (errorCode == null) {
			returnCode = status != null && status.equals("failure") ? 1 : 0;
		} else {
			returnCode = errorCode.intValue();
		}
		resumeUtil.addLog("JOB_ENDED", "JOB:" + jobName, parent_part_launcher, Thread.currentThread().getId() + "", "",
				"" + returnCode, "", "", "");

		return returnCode;

	}

	// only for OSGi env
	public void destroy() {
		closeSqlDbConnections();

	}

	private void closeSqlDbConnections() {
		try {
			Object obj_conn;
			obj_conn = globalMap.remove("conn_tMSSqlConnection_3");
			if (null != obj_conn) {
				((java.sql.Connection) obj_conn).close();
			}
		} catch (java.lang.Exception e) {
		}
	}

	private java.util.Map<String, Object> getSharedConnections4REST() {
		java.util.Map<String, Object> connections = new java.util.HashMap<String, Object>();
		connections.put("conn_tMSSqlConnection_3", globalMap.get("conn_tMSSqlConnection_3"));

		return connections;
	}

	private void evalParam(String arg) {
		if (arg.startsWith("--resuming_logs_dir_path")) {
			resuming_logs_dir_path = arg.substring(25);
		} else if (arg.startsWith("--resuming_checkpoint_path")) {
			resuming_checkpoint_path = arg.substring(27);
		} else if (arg.startsWith("--parent_part_launcher")) {
			parent_part_launcher = arg.substring(23);
		} else if (arg.startsWith("--watch")) {
			watch = true;
		} else if (arg.startsWith("--stat_port=")) {
			String portStatsStr = arg.substring(12);
			if (portStatsStr != null && !portStatsStr.equals("null")) {
				portStats = Integer.parseInt(portStatsStr);
			}
		} else if (arg.startsWith("--trace_port=")) {
			portTraces = Integer.parseInt(arg.substring(13));
		} else if (arg.startsWith("--client_host=")) {
			clientHost = arg.substring(14);
		} else if (arg.startsWith("--context=")) {
			contextStr = arg.substring(10);
			isDefaultContext = false;
		} else if (arg.startsWith("--father_pid=")) {
			fatherPid = arg.substring(13);
		} else if (arg.startsWith("--root_pid=")) {
			rootPid = arg.substring(11);
		} else if (arg.startsWith("--father_node=")) {
			fatherNode = arg.substring(14);
		} else if (arg.startsWith("--pid=")) {
			pid = arg.substring(6);
		} else if (arg.startsWith("--context_type")) {
			String keyValue = arg.substring(15);
			int index = -1;
			if (keyValue != null && (index = keyValue.indexOf('=')) > -1) {
				if (fatherPid == null) {
					context_param.setContextType(keyValue.substring(0, index),
							replaceEscapeChars(keyValue.substring(index + 1)));
				} else { // the subjob won't escape the especial chars
					context_param.setContextType(keyValue.substring(0, index), keyValue.substring(index + 1));
				}

			}

		} else if (arg.startsWith("--context_param")) {
			String keyValue = arg.substring(16);
			int index = -1;
			if (keyValue != null && (index = keyValue.indexOf('=')) > -1) {
				if (fatherPid == null) {
					context_param.put(keyValue.substring(0, index), replaceEscapeChars(keyValue.substring(index + 1)));
				} else { // the subjob won't escape the especial chars
					context_param.put(keyValue.substring(0, index), keyValue.substring(index + 1));
				}
			}
		} else if (arg.startsWith("--log4jLevel=")) {
			log4jLevel = arg.substring(13);
		} else if (arg.startsWith("--audit.enabled") && arg.contains("=")) {// for trunjob call
			final int equal = arg.indexOf('=');
			final String key = arg.substring("--".length(), equal);
			System.setProperty(key, arg.substring(equal + 1));
		}
	}

	private static final String NULL_VALUE_EXPRESSION_IN_COMMAND_STRING_FOR_CHILD_JOB_ONLY = "<TALEND_NULL>";

	private final String[][] escapeChars = { { "\\\\", "\\" }, { "\\n", "\n" }, { "\\'", "\'" }, { "\\r", "\r" },
			{ "\\f", "\f" }, { "\\b", "\b" }, { "\\t", "\t" } };

	private String replaceEscapeChars(String keyValue) {

		if (keyValue == null || ("").equals(keyValue.trim())) {
			return keyValue;
		}

		StringBuilder result = new StringBuilder();
		int currIndex = 0;
		while (currIndex < keyValue.length()) {
			int index = -1;
			// judege if the left string includes escape chars
			for (String[] strArray : escapeChars) {
				index = keyValue.indexOf(strArray[0], currIndex);
				if (index >= 0) {

					result.append(keyValue.substring(currIndex, index + strArray[0].length()).replace(strArray[0],
							strArray[1]));
					currIndex = index + strArray[0].length();
					break;
				}
			}
			// if the left string doesn't include escape chars, append the left into the
			// result
			if (index < 0) {
				result.append(keyValue.substring(currIndex));
				currIndex = currIndex + keyValue.length();
			}
		}

		return result.toString();
	}

	public Integer getErrorCode() {
		return errorCode;
	}

	public String getStatus() {
		return status;
	}

	ResumeUtil resumeUtil = null;
}
/************************************************************************************************
 * 843946 characters generated by Talend Open Studio for Data Integration on the
 * November 24, 2020 at 5:49:55 PM CET
 ************************************************************************************************/