// ============================================================================
//
// Copyright (c) 2006-2015, Talend Inc.
//
// This source code has been automatically generated by_Talend Open Studio for Data Integration
// / Licensed under the Apache License, Version 2.0 (the "License");
// you may not use this file except in compliance with the License.
// You may obtain a copy of the License at
// http://www.apache.org/licenses/LICENSE-2.0
// 
// Unless required by applicable law or agreed to in writing, software
// distributed under the License is distributed on an "AS IS" BASIS,
// WITHOUT WARRANTIES OR CONDITIONS OF ANY KIND, either express or implied.
// See the License for the specific language governing permissions and
// limitations under the License.

package wipo_projects.patent_drawings_resize_0_3;

import routines.Numeric;
import routines.DataOperation;
import routines.TalendDataGenerator;
import routines.TalendStringUtil;
import routines.TalendString;
import routines.StringHandling;
import routines.Relational;
import routines.TalendDate;
import routines.Mathematical;
import routines.IPAS;
import routines.system.*;
import routines.system.api.*;
import java.text.ParseException;
import java.text.SimpleDateFormat;
import java.util.Date;
import java.util.List;
import java.math.BigDecimal;
import java.io.ByteArrayOutputStream;
import java.io.ByteArrayInputStream;
import java.io.DataInputStream;
import java.io.DataOutputStream;
import java.io.ObjectOutputStream;
import java.io.ObjectInputStream;
import java.io.IOException;
import java.util.Comparator;

//the import part of tJavaRow_1
//import java.util.List;

@SuppressWarnings("unused")

/**
 * Job: PATENT_DRAWINGS_RESIZE Purpose: <br>
 * Description: <br>
 * 
 * @author user@talend.com
 * @version 7.4.1.20201110_1014-M4
 * @status
 */
public class PATENT_DRAWINGS_RESIZE implements TalendJob {

	protected static void logIgnoredError(String message, Throwable cause) {
		System.err.println(message);
		if (cause != null) {
			cause.printStackTrace();
		}

	}

	public final Object obj = new Object();

	// for transmiting parameters purpose
	private Object valueObject = null;

	public Object getValueObject() {
		return this.valueObject;
	}

	public void setValueObject(Object valueObject) {
		this.valueObject = valueObject;
	}

	private final static String defaultCharset = java.nio.charset.Charset.defaultCharset().name();

	private final static String utf8Charset = "UTF-8";

	// contains type for every context property
	public class PropertiesWithType extends java.util.Properties {
		private static final long serialVersionUID = 1L;
		private java.util.Map<String, String> propertyTypes = new java.util.HashMap<>();

		public PropertiesWithType(java.util.Properties properties) {
			super(properties);
		}

		public PropertiesWithType() {
			super();
		}

		public void setContextType(String key, String type) {
			propertyTypes.put(key, type);
		}

		public String getContextType(String key) {
			return propertyTypes.get(key);
		}
	}

	// create and load default properties
	private java.util.Properties defaultProps = new java.util.Properties();

	// create application properties with default
	public class ContextProperties extends PropertiesWithType {

		private static final long serialVersionUID = 1L;

		public ContextProperties(java.util.Properties properties) {
			super(properties);
		}

		public ContextProperties() {
			super();
		}

		public void synchronizeContext() {

			if (OracleHost != null) {

				this.setProperty("OracleHost", OracleHost.toString());

			}

			if (OraclePort != null) {

				this.setProperty("OraclePort", OraclePort.toString());

			}

			if (OracleDB != null) {

				this.setProperty("OracleDB", OracleDB.toString());

			}

			if (OracleSchema != null) {

				this.setProperty("OracleSchema", OracleSchema.toString());

			}

			if (OracleUser != null) {

				this.setProperty("OracleUser", OracleUser.toString());

			}

			if (OraclePassword != null) {

				this.setProperty("OraclePassword", OraclePassword.toString());

			}

			if (FileTypList != null) {

				this.setProperty("FileTypList", FileTypList.toString());

			}

			if (FileSeqList != null) {

				this.setProperty("FileSeqList", FileSeqList.toString());

			}

			if (FileSerMin != null) {

				this.setProperty("FileSerMin", FileSerMin.toString());

			}

			if (FileNbrMin != null) {

				this.setProperty("FileNbrMin", FileNbrMin.toString());

			}

			if (FileSerMax != null) {

				this.setProperty("FileSerMax", FileSerMax.toString());

			}

			if (FileNbrMax != null) {

				this.setProperty("FileNbrMax", FileNbrMax.toString());

			}

			if (ImageSizeMax != null) {

				this.setProperty("ImageSizeMax", ImageSizeMax.toString());

			}

		}

		// if the stored or passed value is "<TALEND_NULL>" string, it mean null
		public String getStringValue(String key) {
			String origin_value = this.getProperty(key);
			if (NULL_VALUE_EXPRESSION_IN_COMMAND_STRING_FOR_CHILD_JOB_ONLY.equals(origin_value)) {
				return null;
			}
			return origin_value;
		}

		public String OracleHost;

		public String getOracleHost() {
			return this.OracleHost;
		}

		public String OraclePort;

		public String getOraclePort() {
			return this.OraclePort;
		}

		public String OracleDB;

		public String getOracleDB() {
			return this.OracleDB;
		}

		public String OracleSchema;

		public String getOracleSchema() {
			return this.OracleSchema;
		}

		public String OracleUser;

		public String getOracleUser() {
			return this.OracleUser;
		}

		public String OraclePassword;

		public String getOraclePassword() {
			return this.OraclePassword;
		}

		public String FileTypList;

		public String getFileTypList() {
			return this.FileTypList;
		}

		public String FileSeqList;

		public String getFileSeqList() {
			return this.FileSeqList;
		}

		public String FileSerMin;

		public String getFileSerMin() {
			return this.FileSerMin;
		}

		public String FileNbrMin;

		public String getFileNbrMin() {
			return this.FileNbrMin;
		}

		public String FileSerMax;

		public String getFileSerMax() {
			return this.FileSerMax;
		}

		public String FileNbrMax;

		public String getFileNbrMax() {
			return this.FileNbrMax;
		}

		public Integer ImageSizeMax;

		public Integer getImageSizeMax() {
			return this.ImageSizeMax;
		}
	}

	protected ContextProperties context = new ContextProperties(); // will be instanciated by MS.

	public ContextProperties getContext() {
		return this.context;
	}

	private final String jobVersion = "0.3";
	private final String jobName = "PATENT_DRAWINGS_RESIZE";
	private final String projectName = "WIPO_PROJECTS";
	public Integer errorCode = null;
	private String currentComponent = "";

	private final java.util.Map<String, Object> globalMap = new java.util.HashMap<String, Object>();
	private final static java.util.Map<String, Object> junitGlobalMap = new java.util.HashMap<String, Object>();

	private final java.util.Map<String, Long> start_Hash = new java.util.HashMap<String, Long>();
	private final java.util.Map<String, Long> end_Hash = new java.util.HashMap<String, Long>();
	private final java.util.Map<String, Boolean> ok_Hash = new java.util.HashMap<String, Boolean>();
	public final java.util.List<String[]> globalBuffer = new java.util.ArrayList<String[]>();

	private RunStat runStat = new RunStat();

	// OSGi DataSource
	private final static String KEY_DB_DATASOURCES = "KEY_DB_DATASOURCES";

	private final static String KEY_DB_DATASOURCES_RAW = "KEY_DB_DATASOURCES_RAW";

	public void setDataSources(java.util.Map<String, javax.sql.DataSource> dataSources) {
		java.util.Map<String, routines.system.TalendDataSource> talendDataSources = new java.util.HashMap<String, routines.system.TalendDataSource>();
		for (java.util.Map.Entry<String, javax.sql.DataSource> dataSourceEntry : dataSources.entrySet()) {
			talendDataSources.put(dataSourceEntry.getKey(),
					new routines.system.TalendDataSource(dataSourceEntry.getValue()));
		}
		globalMap.put(KEY_DB_DATASOURCES, talendDataSources);
		globalMap.put(KEY_DB_DATASOURCES_RAW, new java.util.HashMap<String, javax.sql.DataSource>(dataSources));
	}

	private final java.io.ByteArrayOutputStream baos = new java.io.ByteArrayOutputStream();
	private final java.io.PrintStream errorMessagePS = new java.io.PrintStream(new java.io.BufferedOutputStream(baos));

	public String getExceptionStackTrace() {
		if ("failure".equals(this.getStatus())) {
			errorMessagePS.flush();
			return baos.toString();
		}
		return null;
	}

	private Exception exception;

	public Exception getException() {
		if ("failure".equals(this.getStatus())) {
			return this.exception;
		}
		return null;
	}

	private class TalendException extends Exception {

		private static final long serialVersionUID = 1L;

		private java.util.Map<String, Object> globalMap = null;
		private Exception e = null;
		private String currentComponent = null;
		private String virtualComponentName = null;

		public void setVirtualComponentName(String virtualComponentName) {
			this.virtualComponentName = virtualComponentName;
		}

		private TalendException(Exception e, String errorComponent, final java.util.Map<String, Object> globalMap) {
			this.currentComponent = errorComponent;
			this.globalMap = globalMap;
			this.e = e;
		}

		public Exception getException() {
			return this.e;
		}

		public String getCurrentComponent() {
			return this.currentComponent;
		}

		public String getExceptionCauseMessage(Exception e) {
			Throwable cause = e;
			String message = null;
			int i = 10;
			while (null != cause && 0 < i--) {
				message = cause.getMessage();
				if (null == message) {
					cause = cause.getCause();
				} else {
					break;
				}
			}
			if (null == message) {
				message = e.getClass().getName();
			}
			return message;
		}

		@Override
		public void printStackTrace() {
			if (!(e instanceof TalendException || e instanceof TDieException)) {
				if (virtualComponentName != null && currentComponent.indexOf(virtualComponentName + "_") == 0) {
					globalMap.put(virtualComponentName + "_ERROR_MESSAGE", getExceptionCauseMessage(e));
				}
				globalMap.put(currentComponent + "_ERROR_MESSAGE", getExceptionCauseMessage(e));
				System.err.println("Exception in component " + currentComponent + " (" + jobName + ")");
			}
			if (!(e instanceof TDieException)) {
				if (e instanceof TalendException) {
					e.printStackTrace();
				} else {
					e.printStackTrace();
					e.printStackTrace(errorMessagePS);
					PATENT_DRAWINGS_RESIZE.this.exception = e;
				}
			}
			if (!(e instanceof TalendException)) {
				try {
					for (java.lang.reflect.Method m : this.getClass().getEnclosingClass().getMethods()) {
						if (m.getName().compareTo(currentComponent + "_error") == 0) {
							m.invoke(PATENT_DRAWINGS_RESIZE.this, new Object[] { e, currentComponent, globalMap });
							break;
						}
					}

					if (!(e instanceof TDieException)) {
					}
				} catch (Exception e) {
					this.e.printStackTrace();
				}
			}
		}
	}

	public void tOracleConnection_1_error(Exception exception, String errorComponent,
			final java.util.Map<String, Object> globalMap) throws TalendException {

		end_Hash.put(errorComponent, System.currentTimeMillis());

		status = "failure";

		tOracleConnection_1_onSubJobError(exception, errorComponent, globalMap);
	}

	public void tOracleInput_1_error(Exception exception, String errorComponent,
			final java.util.Map<String, Object> globalMap) throws TalendException {

		end_Hash.put(errorComponent, System.currentTimeMillis());

		status = "failure";

		tOracleInput_1_onSubJobError(exception, errorComponent, globalMap);
	}

	public void tJavaRow_1_error(Exception exception, String errorComponent,
			final java.util.Map<String, Object> globalMap) throws TalendException {

		end_Hash.put(errorComponent, System.currentTimeMillis());

		status = "failure";

		tOracleInput_1_onSubJobError(exception, errorComponent, globalMap);
	}

	public void tMap_1_error(Exception exception, String errorComponent, final java.util.Map<String, Object> globalMap)
			throws TalendException {

		end_Hash.put(errorComponent, System.currentTimeMillis());

		status = "failure";

		tOracleInput_1_onSubJobError(exception, errorComponent, globalMap);
	}

	public void tOracleOutput_1_error(Exception exception, String errorComponent,
			final java.util.Map<String, Object> globalMap) throws TalendException {

		end_Hash.put(errorComponent, System.currentTimeMillis());

		status = "failure";

		tOracleInput_1_onSubJobError(exception, errorComponent, globalMap);
	}

	public void tDBOutput_1_error(Exception exception, String errorComponent,
			final java.util.Map<String, Object> globalMap) throws TalendException {

		end_Hash.put(errorComponent, System.currentTimeMillis());

		status = "failure";

		tOracleInput_1_onSubJobError(exception, errorComponent, globalMap);
	}

	public void tOracleCommit_1_error(Exception exception, String errorComponent,
			final java.util.Map<String, Object> globalMap) throws TalendException {

		end_Hash.put(errorComponent, System.currentTimeMillis());

		status = "failure";

		tOracleCommit_1_onSubJobError(exception, errorComponent, globalMap);
	}

	public void tOracleConnection_1_onSubJobError(Exception exception, String errorComponent,
			final java.util.Map<String, Object> globalMap) throws TalendException {

		resumeUtil.addLog("SYSTEM_LOG", "NODE:" + errorComponent, "", Thread.currentThread().getId() + "", "FATAL", "",
				exception.getMessage(), ResumeUtil.getExceptionStackTrace(exception), "");

	}

	public void tOracleInput_1_onSubJobError(Exception exception, String errorComponent,
			final java.util.Map<String, Object> globalMap) throws TalendException {

		resumeUtil.addLog("SYSTEM_LOG", "NODE:" + errorComponent, "", Thread.currentThread().getId() + "", "FATAL", "",
				exception.getMessage(), ResumeUtil.getExceptionStackTrace(exception), "");

	}

	public void tOracleCommit_1_onSubJobError(Exception exception, String errorComponent,
			final java.util.Map<String, Object> globalMap) throws TalendException {

		resumeUtil.addLog("SYSTEM_LOG", "NODE:" + errorComponent, "", Thread.currentThread().getId() + "", "FATAL", "",
				exception.getMessage(), ResumeUtil.getExceptionStackTrace(exception), "");

	}

	public void tOracleConnection_1Process(final java.util.Map<String, Object> globalMap) throws TalendException {
		globalMap.put("tOracleConnection_1_SUBPROCESS_STATE", 0);

		final boolean execStat = this.execStat;

		String iterateId = "";

		String currentComponent = "";
		java.util.Map<String, Object> resourceMap = new java.util.HashMap<String, Object>();

		try {
			// TDI-39566 avoid throwing an useless Exception
			boolean resumeIt = true;
			if (globalResumeTicket == false && resumeEntryMethodName != null) {
				String currentMethodName = new java.lang.Exception().getStackTrace()[0].getMethodName();
				resumeIt = resumeEntryMethodName.equals(currentMethodName);
			}
			if (resumeIt || globalResumeTicket) { // start the resume
				globalResumeTicket = true;

				/**
				 * [tOracleConnection_1 begin ] start
				 */

				ok_Hash.put("tOracleConnection_1", false);
				start_Hash.put("tOracleConnection_1", System.currentTimeMillis());

				currentComponent = "tOracleConnection_1";

				int tos_count_tOracleConnection_1 = 0;

				String url_tOracleConnection_1 = "jdbc:oracle:thin:@" + context.OracleHost + ":" + context.OraclePort
						+ ":" + context.OracleDB;
				globalMap.put("connectionType_" + "tOracleConnection_1", "ORACLE_SID");
				String dbUser_tOracleConnection_1 = context.OracleUser;

				final String decryptedPassword_tOracleConnection_1 = context.OraclePassword;
				String dbPwd_tOracleConnection_1 = decryptedPassword_tOracleConnection_1;

				java.sql.Connection conn_tOracleConnection_1 = null;

				String driverClass_tOracleConnection_1 = "oracle.jdbc.OracleDriver";
				java.lang.Class jdbcclazz_tOracleConnection_1 = java.lang.Class
						.forName(driverClass_tOracleConnection_1);
				globalMap.put("driverClass_tOracleConnection_1", driverClass_tOracleConnection_1);

				conn_tOracleConnection_1 = java.sql.DriverManager.getConnection(url_tOracleConnection_1,
						dbUser_tOracleConnection_1, dbPwd_tOracleConnection_1);

				globalMap.put("conn_tOracleConnection_1", conn_tOracleConnection_1);
				if (null != conn_tOracleConnection_1) {

					conn_tOracleConnection_1.setAutoCommit(false);
				}
				globalMap.put("host_" + "tOracleConnection_1", context.OracleHost);
				globalMap.put("port_" + "tOracleConnection_1", context.OraclePort);
				globalMap.put("dbname_" + "tOracleConnection_1", context.OracleDB);

				globalMap.put("dbschema_" + "tOracleConnection_1", context.OracleSchema);
				globalMap.put("username_" + "tOracleConnection_1", context.OracleUser);
				globalMap.put("password_" + "tOracleConnection_1", dbPwd_tOracleConnection_1);

				/**
				 * [tOracleConnection_1 begin ] stop
				 */

				/**
				 * [tOracleConnection_1 main ] start
				 */

				currentComponent = "tOracleConnection_1";

				tos_count_tOracleConnection_1++;

				/**
				 * [tOracleConnection_1 main ] stop
				 */

				/**
				 * [tOracleConnection_1 process_data_begin ] start
				 */

				currentComponent = "tOracleConnection_1";

				/**
				 * [tOracleConnection_1 process_data_begin ] stop
				 */

				/**
				 * [tOracleConnection_1 process_data_end ] start
				 */

				currentComponent = "tOracleConnection_1";

				/**
				 * [tOracleConnection_1 process_data_end ] stop
				 */

				/**
				 * [tOracleConnection_1 end ] start
				 */

				currentComponent = "tOracleConnection_1";

				ok_Hash.put("tOracleConnection_1", true);
				end_Hash.put("tOracleConnection_1", System.currentTimeMillis());

				/**
				 * [tOracleConnection_1 end ] stop
				 */
			} // end the resume

			if (resumeEntryMethodName == null || globalResumeTicket) {
				resumeUtil.addLog("CHECKPOINT", "CONNECTION:SUBJOB_OK:tOracleConnection_1:OnSubjobOk", "",
						Thread.currentThread().getId() + "", "", "", "", "", "");
			}

			if (execStat) {
				runStat.updateStatOnConnection("OnSubjobOk1", 0, "ok");
			}

			tOracleInput_1Process(globalMap);

		} catch (java.lang.Exception e) {

			TalendException te = new TalendException(e, currentComponent, globalMap);

			throw te;
		} catch (java.lang.Error error) {

			runStat.stopThreadStat();

			throw error;
		} finally {

			try {

				/**
				 * [tOracleConnection_1 finally ] start
				 */

				currentComponent = "tOracleConnection_1";

				/**
				 * [tOracleConnection_1 finally ] stop
				 */
			} catch (java.lang.Exception e) {
				// ignore
			} catch (java.lang.Error error) {
				// ignore
			}
			resourceMap = null;
		}

		globalMap.put("tOracleConnection_1_SUBPROCESS_STATE", 1);
	}

	public static class updateStruct implements routines.system.IPersistableRow<updateStruct> {
		final static byte[] commonByteArrayLock_WIPO_PROJECTS_PATENT_DRAWINGS_RESIZE = new byte[0];
		static byte[] commonByteArray_WIPO_PROJECTS_PATENT_DRAWINGS_RESIZE = new byte[0];

		public String FILE_SEQ;

		public String getFILE_SEQ() {
			return this.FILE_SEQ;
		}

		public String FILE_TYP;

		public String getFILE_TYP() {
			return this.FILE_TYP;
		}

		public BigDecimal FILE_SER;

		public BigDecimal getFILE_SER() {
			return this.FILE_SER;
		}

		public BigDecimal FILE_NBR;

		public BigDecimal getFILE_NBR() {
			return this.FILE_NBR;
		}

		public BigDecimal DRAWING_NBR;

		public BigDecimal getDRAWING_NBR() {
			return this.DRAWING_NBR;
		}

		public byte[] DRAWING_DATA;

		public byte[] getDRAWING_DATA() {
			return this.DRAWING_DATA;
		}

		public Integer IMAGE_FORMAT_WCODE;

		public Integer getIMAGE_FORMAT_WCODE() {
			return this.IMAGE_FORMAT_WCODE;
		}

		private String readString(ObjectInputStream dis) throws IOException {
			String strReturn = null;
			int length = 0;
			length = dis.readInt();
			if (length == -1) {
				strReturn = null;
			} else {
				if (length > commonByteArray_WIPO_PROJECTS_PATENT_DRAWINGS_RESIZE.length) {
					if (length < 1024 && commonByteArray_WIPO_PROJECTS_PATENT_DRAWINGS_RESIZE.length == 0) {
						commonByteArray_WIPO_PROJECTS_PATENT_DRAWINGS_RESIZE = new byte[1024];
					} else {
						commonByteArray_WIPO_PROJECTS_PATENT_DRAWINGS_RESIZE = new byte[2 * length];
					}
				}
				dis.readFully(commonByteArray_WIPO_PROJECTS_PATENT_DRAWINGS_RESIZE, 0, length);
				strReturn = new String(commonByteArray_WIPO_PROJECTS_PATENT_DRAWINGS_RESIZE, 0, length, utf8Charset);
			}
			return strReturn;
		}

		private void writeString(String str, ObjectOutputStream dos) throws IOException {
			if (str == null) {
				dos.writeInt(-1);
			} else {
				byte[] byteArray = str.getBytes(utf8Charset);
				dos.writeInt(byteArray.length);
				dos.write(byteArray);
			}
		}

		private byte[] readByteArray(ObjectInputStream dis) throws IOException {
			byte[] byteArrayReturn;
			int length = 0;
			length = dis.readInt();
			if (length == -1) {
				byteArrayReturn = null;
			} else {
				byte[] byteArray = new byte[length];
				dis.readFully(byteArray);
				byteArrayReturn = byteArray;
			}
			return byteArrayReturn;
		}

		private void writeByteArray(byte[] byteArray, ObjectOutputStream dos) throws IOException {
			if (byteArray == null) {
				dos.writeInt(-1);
			} else {
				dos.writeInt(byteArray.length);
				dos.write(byteArray);
			}
		}

		private Integer readInteger(ObjectInputStream dis) throws IOException {
			Integer intReturn;
			int length = 0;
			length = dis.readByte();
			if (length == -1) {
				intReturn = null;
			} else {
				intReturn = dis.readInt();
			}
			return intReturn;
		}

		private void writeInteger(Integer intNum, ObjectOutputStream dos) throws IOException {
			if (intNum == null) {
				dos.writeByte(-1);
			} else {
				dos.writeByte(0);
				dos.writeInt(intNum);
			}
		}

		public void readData(ObjectInputStream dis) {

			synchronized (commonByteArrayLock_WIPO_PROJECTS_PATENT_DRAWINGS_RESIZE) {

				try {

					int length = 0;

					this.FILE_SEQ = readString(dis);

					this.FILE_TYP = readString(dis);

					this.FILE_SER = (BigDecimal) dis.readObject();

					this.FILE_NBR = (BigDecimal) dis.readObject();

					this.DRAWING_NBR = (BigDecimal) dis.readObject();

					this.DRAWING_DATA = readByteArray(dis);

					this.IMAGE_FORMAT_WCODE = readInteger(dis);

				} catch (IOException e) {
					throw new RuntimeException(e);

				} catch (ClassNotFoundException eCNFE) {
					throw new RuntimeException(eCNFE);

				}

			}

		}

		public void writeData(ObjectOutputStream dos) {
			try {

				// String

				writeString(this.FILE_SEQ, dos);

				// String

				writeString(this.FILE_TYP, dos);

				// BigDecimal

				dos.writeObject(this.FILE_SER);

				// BigDecimal

				dos.writeObject(this.FILE_NBR);

				// BigDecimal

				dos.writeObject(this.DRAWING_NBR);

				// byte[]

				writeByteArray(this.DRAWING_DATA, dos);

				// Integer

				writeInteger(this.IMAGE_FORMAT_WCODE, dos);

			} catch (IOException e) {
				throw new RuntimeException(e);
			}

		}

		public String toString() {

			StringBuilder sb = new StringBuilder();
			sb.append(super.toString());
			sb.append("[");
			sb.append("FILE_SEQ=" + FILE_SEQ);
			sb.append(",FILE_TYP=" + FILE_TYP);
			sb.append(",FILE_SER=" + String.valueOf(FILE_SER));
			sb.append(",FILE_NBR=" + String.valueOf(FILE_NBR));
			sb.append(",DRAWING_NBR=" + String.valueOf(DRAWING_NBR));
			sb.append(",DRAWING_DATA=" + String.valueOf(DRAWING_DATA));
			sb.append(",IMAGE_FORMAT_WCODE=" + String.valueOf(IMAGE_FORMAT_WCODE));
			sb.append("]");

			return sb.toString();
		}

		/**
		 * Compare keys
		 */
		public int compareTo(updateStruct other) {

			int returnValue = -1;

			return returnValue;
		}

		private int checkNullsAndCompare(Object object1, Object object2) {
			int returnValue = 0;
			if (object1 instanceof Comparable && object2 instanceof Comparable) {
				returnValue = ((Comparable) object1).compareTo(object2);
			} else if (object1 != null && object2 != null) {
				returnValue = compareStrings(object1.toString(), object2.toString());
			} else if (object1 == null && object2 != null) {
				returnValue = 1;
			} else if (object1 != null && object2 == null) {
				returnValue = -1;
			} else {
				returnValue = 0;
			}

			return returnValue;
		}

		private int compareStrings(String string1, String string2) {
			return string1.compareTo(string2);
		}

	}

	public static class invalid_images_removeStruct
			implements routines.system.IPersistableRow<invalid_images_removeStruct> {
		final static byte[] commonByteArrayLock_WIPO_PROJECTS_PATENT_DRAWINGS_RESIZE = new byte[0];
		static byte[] commonByteArray_WIPO_PROJECTS_PATENT_DRAWINGS_RESIZE = new byte[0];
		protected static final int DEFAULT_HASHCODE = 1;
		protected static final int PRIME = 31;
		protected int hashCode = DEFAULT_HASHCODE;
		public boolean hashCodeDirty = true;

		public String loopKey;

		public String FILE_SEQ;

		public String getFILE_SEQ() {
			return this.FILE_SEQ;
		}

		public String FILE_TYP;

		public String getFILE_TYP() {
			return this.FILE_TYP;
		}

		public BigDecimal FILE_SER;

		public BigDecimal getFILE_SER() {
			return this.FILE_SER;
		}

		public BigDecimal FILE_NBR;

		public BigDecimal getFILE_NBR() {
			return this.FILE_NBR;
		}

		@Override
		public int hashCode() {
			if (this.hashCodeDirty) {
				final int prime = PRIME;
				int result = DEFAULT_HASHCODE;

				result = prime * result + ((this.FILE_SEQ == null) ? 0 : this.FILE_SEQ.hashCode());

				result = prime * result + ((this.FILE_TYP == null) ? 0 : this.FILE_TYP.hashCode());

				result = prime * result + ((this.FILE_SER == null) ? 0 : this.FILE_SER.hashCode());

				result = prime * result + ((this.FILE_NBR == null) ? 0 : this.FILE_NBR.hashCode());

				this.hashCode = result;
				this.hashCodeDirty = false;
			}
			return this.hashCode;
		}

		@Override
		public boolean equals(Object obj) {
			if (this == obj)
				return true;
			if (obj == null)
				return false;
			if (getClass() != obj.getClass())
				return false;
			final invalid_images_removeStruct other = (invalid_images_removeStruct) obj;

			if (this.FILE_SEQ == null) {
				if (other.FILE_SEQ != null)
					return false;

			} else if (!this.FILE_SEQ.equals(other.FILE_SEQ))

				return false;

			if (this.FILE_TYP == null) {
				if (other.FILE_TYP != null)
					return false;

			} else if (!this.FILE_TYP.equals(other.FILE_TYP))

				return false;

			if (this.FILE_SER == null) {
				if (other.FILE_SER != null)
					return false;

			} else if (!this.FILE_SER.equals(other.FILE_SER))

				return false;

			if (this.FILE_NBR == null) {
				if (other.FILE_NBR != null)
					return false;

			} else if (!this.FILE_NBR.equals(other.FILE_NBR))

				return false;

			return true;
		}

		public void copyDataTo(invalid_images_removeStruct other) {

			other.FILE_SEQ = this.FILE_SEQ;
			other.FILE_TYP = this.FILE_TYP;
			other.FILE_SER = this.FILE_SER;
			other.FILE_NBR = this.FILE_NBR;

		}

		public void copyKeysDataTo(invalid_images_removeStruct other) {

			other.FILE_SEQ = this.FILE_SEQ;
			other.FILE_TYP = this.FILE_TYP;
			other.FILE_SER = this.FILE_SER;
			other.FILE_NBR = this.FILE_NBR;

		}

		private String readString(ObjectInputStream dis) throws IOException {
			String strReturn = null;
			int length = 0;
			length = dis.readInt();
			if (length == -1) {
				strReturn = null;
			} else {
				if (length > commonByteArray_WIPO_PROJECTS_PATENT_DRAWINGS_RESIZE.length) {
					if (length < 1024 && commonByteArray_WIPO_PROJECTS_PATENT_DRAWINGS_RESIZE.length == 0) {
						commonByteArray_WIPO_PROJECTS_PATENT_DRAWINGS_RESIZE = new byte[1024];
					} else {
						commonByteArray_WIPO_PROJECTS_PATENT_DRAWINGS_RESIZE = new byte[2 * length];
					}
				}
				dis.readFully(commonByteArray_WIPO_PROJECTS_PATENT_DRAWINGS_RESIZE, 0, length);
				strReturn = new String(commonByteArray_WIPO_PROJECTS_PATENT_DRAWINGS_RESIZE, 0, length, utf8Charset);
			}
			return strReturn;
		}

		private void writeString(String str, ObjectOutputStream dos) throws IOException {
			if (str == null) {
				dos.writeInt(-1);
			} else {
				byte[] byteArray = str.getBytes(utf8Charset);
				dos.writeInt(byteArray.length);
				dos.write(byteArray);
			}
		}

		public void readData(ObjectInputStream dis) {

			synchronized (commonByteArrayLock_WIPO_PROJECTS_PATENT_DRAWINGS_RESIZE) {

				try {

					int length = 0;

					this.FILE_SEQ = readString(dis);

					this.FILE_TYP = readString(dis);

					this.FILE_SER = (BigDecimal) dis.readObject();

					this.FILE_NBR = (BigDecimal) dis.readObject();

				} catch (IOException e) {
					throw new RuntimeException(e);

				} catch (ClassNotFoundException eCNFE) {
					throw new RuntimeException(eCNFE);

				}

			}

		}

		public void writeData(ObjectOutputStream dos) {
			try {

				// String

				writeString(this.FILE_SEQ, dos);

				// String

				writeString(this.FILE_TYP, dos);

				// BigDecimal

				dos.writeObject(this.FILE_SER);

				// BigDecimal

				dos.writeObject(this.FILE_NBR);

			} catch (IOException e) {
				throw new RuntimeException(e);
			}

		}

		public String toString() {

			StringBuilder sb = new StringBuilder();
			sb.append(super.toString());
			sb.append("[");
			sb.append("FILE_SEQ=" + FILE_SEQ);
			sb.append(",FILE_TYP=" + FILE_TYP);
			sb.append(",FILE_SER=" + String.valueOf(FILE_SER));
			sb.append(",FILE_NBR=" + String.valueOf(FILE_NBR));
			sb.append("]");

			return sb.toString();
		}

		/**
		 * Compare keys
		 */
		public int compareTo(invalid_images_removeStruct other) {

			int returnValue = -1;

			returnValue = checkNullsAndCompare(this.FILE_SEQ, other.FILE_SEQ);
			if (returnValue != 0) {
				return returnValue;
			}

			returnValue = checkNullsAndCompare(this.FILE_TYP, other.FILE_TYP);
			if (returnValue != 0) {
				return returnValue;
			}

			returnValue = checkNullsAndCompare(this.FILE_SER, other.FILE_SER);
			if (returnValue != 0) {
				return returnValue;
			}

			returnValue = checkNullsAndCompare(this.FILE_NBR, other.FILE_NBR);
			if (returnValue != 0) {
				return returnValue;
			}

			return returnValue;
		}

		private int checkNullsAndCompare(Object object1, Object object2) {
			int returnValue = 0;
			if (object1 instanceof Comparable && object2 instanceof Comparable) {
				returnValue = ((Comparable) object1).compareTo(object2);
			} else if (object1 != null && object2 != null) {
				returnValue = compareStrings(object1.toString(), object2.toString());
			} else if (object1 == null && object2 != null) {
				returnValue = 1;
			} else if (object1 != null && object2 == null) {
				returnValue = -1;
			} else {
				returnValue = 0;
			}

			return returnValue;
		}

		private int compareStrings(String string1, String string2) {
			return string1.compareTo(string2);
		}

	}

	public static class row2Struct implements routines.system.IPersistableRow<row2Struct> {
		final static byte[] commonByteArrayLock_WIPO_PROJECTS_PATENT_DRAWINGS_RESIZE = new byte[0];
		static byte[] commonByteArray_WIPO_PROJECTS_PATENT_DRAWINGS_RESIZE = new byte[0];

		public String FILE_SEQ;

		public String getFILE_SEQ() {
			return this.FILE_SEQ;
		}

		public String FILE_TYP;

		public String getFILE_TYP() {
			return this.FILE_TYP;
		}

		public BigDecimal FILE_SER;

		public BigDecimal getFILE_SER() {
			return this.FILE_SER;
		}

		public BigDecimal FILE_NBR;

		public BigDecimal getFILE_NBR() {
			return this.FILE_NBR;
		}

		public BigDecimal DRAWING_NBR;

		public BigDecimal getDRAWING_NBR() {
			return this.DRAWING_NBR;
		}

		public byte[] DRAWING_DATA;

		public byte[] getDRAWING_DATA() {
			return this.DRAWING_DATA;
		}

		private String readString(ObjectInputStream dis) throws IOException {
			String strReturn = null;
			int length = 0;
			length = dis.readInt();
			if (length == -1) {
				strReturn = null;
			} else {
				if (length > commonByteArray_WIPO_PROJECTS_PATENT_DRAWINGS_RESIZE.length) {
					if (length < 1024 && commonByteArray_WIPO_PROJECTS_PATENT_DRAWINGS_RESIZE.length == 0) {
						commonByteArray_WIPO_PROJECTS_PATENT_DRAWINGS_RESIZE = new byte[1024];
					} else {
						commonByteArray_WIPO_PROJECTS_PATENT_DRAWINGS_RESIZE = new byte[2 * length];
					}
				}
				dis.readFully(commonByteArray_WIPO_PROJECTS_PATENT_DRAWINGS_RESIZE, 0, length);
				strReturn = new String(commonByteArray_WIPO_PROJECTS_PATENT_DRAWINGS_RESIZE, 0, length, utf8Charset);
			}
			return strReturn;
		}

		private void writeString(String str, ObjectOutputStream dos) throws IOException {
			if (str == null) {
				dos.writeInt(-1);
			} else {
				byte[] byteArray = str.getBytes(utf8Charset);
				dos.writeInt(byteArray.length);
				dos.write(byteArray);
			}
		}

		private byte[] readByteArray(ObjectInputStream dis) throws IOException {
			byte[] byteArrayReturn;
			int length = 0;
			length = dis.readInt();
			if (length == -1) {
				byteArrayReturn = null;
			} else {
				byte[] byteArray = new byte[length];
				dis.readFully(byteArray);
				byteArrayReturn = byteArray;
			}
			return byteArrayReturn;
		}

		private void writeByteArray(byte[] byteArray, ObjectOutputStream dos) throws IOException {
			if (byteArray == null) {
				dos.writeInt(-1);
			} else {
				dos.writeInt(byteArray.length);
				dos.write(byteArray);
			}
		}

		public void readData(ObjectInputStream dis) {

			synchronized (commonByteArrayLock_WIPO_PROJECTS_PATENT_DRAWINGS_RESIZE) {

				try {

					int length = 0;

					this.FILE_SEQ = readString(dis);

					this.FILE_TYP = readString(dis);

					this.FILE_SER = (BigDecimal) dis.readObject();

					this.FILE_NBR = (BigDecimal) dis.readObject();

					this.DRAWING_NBR = (BigDecimal) dis.readObject();

					this.DRAWING_DATA = readByteArray(dis);

				} catch (IOException e) {
					throw new RuntimeException(e);

				} catch (ClassNotFoundException eCNFE) {
					throw new RuntimeException(eCNFE);

				}

			}

		}

		public void writeData(ObjectOutputStream dos) {
			try {

				// String

				writeString(this.FILE_SEQ, dos);

				// String

				writeString(this.FILE_TYP, dos);

				// BigDecimal

				dos.writeObject(this.FILE_SER);

				// BigDecimal

				dos.writeObject(this.FILE_NBR);

				// BigDecimal

				dos.writeObject(this.DRAWING_NBR);

				// byte[]

				writeByteArray(this.DRAWING_DATA, dos);

			} catch (IOException e) {
				throw new RuntimeException(e);
			}

		}

		public String toString() {

			StringBuilder sb = new StringBuilder();
			sb.append(super.toString());
			sb.append("[");
			sb.append("FILE_SEQ=" + FILE_SEQ);
			sb.append(",FILE_TYP=" + FILE_TYP);
			sb.append(",FILE_SER=" + String.valueOf(FILE_SER));
			sb.append(",FILE_NBR=" + String.valueOf(FILE_NBR));
			sb.append(",DRAWING_NBR=" + String.valueOf(DRAWING_NBR));
			sb.append(",DRAWING_DATA=" + String.valueOf(DRAWING_DATA));
			sb.append("]");

			return sb.toString();
		}

		/**
		 * Compare keys
		 */
		public int compareTo(row2Struct other) {

			int returnValue = -1;

			return returnValue;
		}

		private int checkNullsAndCompare(Object object1, Object object2) {
			int returnValue = 0;
			if (object1 instanceof Comparable && object2 instanceof Comparable) {
				returnValue = ((Comparable) object1).compareTo(object2);
			} else if (object1 != null && object2 != null) {
				returnValue = compareStrings(object1.toString(), object2.toString());
			} else if (object1 == null && object2 != null) {
				returnValue = 1;
			} else if (object1 != null && object2 == null) {
				returnValue = -1;
			} else {
				returnValue = 0;
			}

			return returnValue;
		}

		private int compareStrings(String string1, String string2) {
			return string1.compareTo(string2);
		}

	}

	public static class row1Struct implements routines.system.IPersistableRow<row1Struct> {
		final static byte[] commonByteArrayLock_WIPO_PROJECTS_PATENT_DRAWINGS_RESIZE = new byte[0];
		static byte[] commonByteArray_WIPO_PROJECTS_PATENT_DRAWINGS_RESIZE = new byte[0];

		public String FILE_SEQ;

		public String getFILE_SEQ() {
			return this.FILE_SEQ;
		}

		public String FILE_TYP;

		public String getFILE_TYP() {
			return this.FILE_TYP;
		}

		public BigDecimal FILE_SER;

		public BigDecimal getFILE_SER() {
			return this.FILE_SER;
		}

		public BigDecimal FILE_NBR;

		public BigDecimal getFILE_NBR() {
			return this.FILE_NBR;
		}

		public BigDecimal DRAWING_NBR;

		public BigDecimal getDRAWING_NBR() {
			return this.DRAWING_NBR;
		}

		public byte[] DRAWING_DATA;

		public byte[] getDRAWING_DATA() {
			return this.DRAWING_DATA;
		}

		private String readString(ObjectInputStream dis) throws IOException {
			String strReturn = null;
			int length = 0;
			length = dis.readInt();
			if (length == -1) {
				strReturn = null;
			} else {
				if (length > commonByteArray_WIPO_PROJECTS_PATENT_DRAWINGS_RESIZE.length) {
					if (length < 1024 && commonByteArray_WIPO_PROJECTS_PATENT_DRAWINGS_RESIZE.length == 0) {
						commonByteArray_WIPO_PROJECTS_PATENT_DRAWINGS_RESIZE = new byte[1024];
					} else {
						commonByteArray_WIPO_PROJECTS_PATENT_DRAWINGS_RESIZE = new byte[2 * length];
					}
				}
				dis.readFully(commonByteArray_WIPO_PROJECTS_PATENT_DRAWINGS_RESIZE, 0, length);
				strReturn = new String(commonByteArray_WIPO_PROJECTS_PATENT_DRAWINGS_RESIZE, 0, length, utf8Charset);
			}
			return strReturn;
		}

		private void writeString(String str, ObjectOutputStream dos) throws IOException {
			if (str == null) {
				dos.writeInt(-1);
			} else {
				byte[] byteArray = str.getBytes(utf8Charset);
				dos.writeInt(byteArray.length);
				dos.write(byteArray);
			}
		}

		private byte[] readByteArray(ObjectInputStream dis) throws IOException {
			byte[] byteArrayReturn;
			int length = 0;
			length = dis.readInt();
			if (length == -1) {
				byteArrayReturn = null;
			} else {
				byte[] byteArray = new byte[length];
				dis.readFully(byteArray);
				byteArrayReturn = byteArray;
			}
			return byteArrayReturn;
		}

		private void writeByteArray(byte[] byteArray, ObjectOutputStream dos) throws IOException {
			if (byteArray == null) {
				dos.writeInt(-1);
			} else {
				dos.writeInt(byteArray.length);
				dos.write(byteArray);
			}
		}

		public void readData(ObjectInputStream dis) {

			synchronized (commonByteArrayLock_WIPO_PROJECTS_PATENT_DRAWINGS_RESIZE) {

				try {

					int length = 0;

					this.FILE_SEQ = readString(dis);

					this.FILE_TYP = readString(dis);

					this.FILE_SER = (BigDecimal) dis.readObject();

					this.FILE_NBR = (BigDecimal) dis.readObject();

					this.DRAWING_NBR = (BigDecimal) dis.readObject();

					this.DRAWING_DATA = readByteArray(dis);

				} catch (IOException e) {
					throw new RuntimeException(e);

				} catch (ClassNotFoundException eCNFE) {
					throw new RuntimeException(eCNFE);

				}

			}

		}

		public void writeData(ObjectOutputStream dos) {
			try {

				// String

				writeString(this.FILE_SEQ, dos);

				// String

				writeString(this.FILE_TYP, dos);

				// BigDecimal

				dos.writeObject(this.FILE_SER);

				// BigDecimal

				dos.writeObject(this.FILE_NBR);

				// BigDecimal

				dos.writeObject(this.DRAWING_NBR);

				// byte[]

				writeByteArray(this.DRAWING_DATA, dos);

			} catch (IOException e) {
				throw new RuntimeException(e);
			}

		}

		public String toString() {

			StringBuilder sb = new StringBuilder();
			sb.append(super.toString());
			sb.append("[");
			sb.append("FILE_SEQ=" + FILE_SEQ);
			sb.append(",FILE_TYP=" + FILE_TYP);
			sb.append(",FILE_SER=" + String.valueOf(FILE_SER));
			sb.append(",FILE_NBR=" + String.valueOf(FILE_NBR));
			sb.append(",DRAWING_NBR=" + String.valueOf(DRAWING_NBR));
			sb.append(",DRAWING_DATA=" + String.valueOf(DRAWING_DATA));
			sb.append("]");

			return sb.toString();
		}

		/**
		 * Compare keys
		 */
		public int compareTo(row1Struct other) {

			int returnValue = -1;

			return returnValue;
		}

		private int checkNullsAndCompare(Object object1, Object object2) {
			int returnValue = 0;
			if (object1 instanceof Comparable && object2 instanceof Comparable) {
				returnValue = ((Comparable) object1).compareTo(object2);
			} else if (object1 != null && object2 != null) {
				returnValue = compareStrings(object1.toString(), object2.toString());
			} else if (object1 == null && object2 != null) {
				returnValue = 1;
			} else if (object1 != null && object2 == null) {
				returnValue = -1;
			} else {
				returnValue = 0;
			}

			return returnValue;
		}

		private int compareStrings(String string1, String string2) {
			return string1.compareTo(string2);
		}

	}

	public void tOracleInput_1Process(final java.util.Map<String, Object> globalMap) throws TalendException {
		globalMap.put("tOracleInput_1_SUBPROCESS_STATE", 0);

		final boolean execStat = this.execStat;

		String iterateId = "";

		String currentComponent = "";
		java.util.Map<String, Object> resourceMap = new java.util.HashMap<String, Object>();

		try {
			// TDI-39566 avoid throwing an useless Exception
			boolean resumeIt = true;
			if (globalResumeTicket == false && resumeEntryMethodName != null) {
				String currentMethodName = new java.lang.Exception().getStackTrace()[0].getMethodName();
				resumeIt = resumeEntryMethodName.equals(currentMethodName);
			}
			if (resumeIt || globalResumeTicket) { // start the resume
				globalResumeTicket = true;

				row1Struct row1 = new row1Struct();
				row2Struct row2 = new row2Struct();
				updateStruct update = new updateStruct();
				invalid_images_removeStruct invalid_images_remove = new invalid_images_removeStruct();

				/**
				 * [tOracleOutput_1 begin ] start
				 */

				ok_Hash.put("tOracleOutput_1", false);
				start_Hash.put("tOracleOutput_1", System.currentTimeMillis());

				currentComponent = "tOracleOutput_1";

				if (execStat) {
					runStat.updateStatOnConnection(resourceMap, iterateId, 0, 0, "update");
				}

				int tos_count_tOracleOutput_1 = 0;

				int updateKeyCount_tOracleOutput_1 = 5;
				if (updateKeyCount_tOracleOutput_1 < 1) {
					throw new RuntimeException("For update, the schema must have a key");
				}
				int nb_line_tOracleOutput_1 = 0;
				int nb_line_update_tOracleOutput_1 = 0;
				int nb_line_inserted_tOracleOutput_1 = 0;
				int nb_line_deleted_tOracleOutput_1 = 0;
				int nb_line_rejected_tOracleOutput_1 = 0;

				int tmp_batchUpdateCount_tOracleOutput_1 = 0;

				int deletedCount_tOracleOutput_1 = 0;
				int updatedCount_tOracleOutput_1 = 0;
				int insertedCount_tOracleOutput_1 = 0;
				int rejectedCount_tOracleOutput_1 = 0;

				boolean whetherReject_tOracleOutput_1 = false;

				java.sql.Connection conn_tOracleOutput_1 = null;

				// optional table
				String dbschema_tOracleOutput_1 = null;
				String tableName_tOracleOutput_1 = null;
				dbschema_tOracleOutput_1 = (String) globalMap.get("dbschema_tOracleConnection_1");

				conn_tOracleOutput_1 = (java.sql.Connection) globalMap.get("conn_tOracleConnection_1");
				int count_tOracleOutput_1 = 0;

				if (dbschema_tOracleOutput_1 == null || dbschema_tOracleOutput_1.trim().length() == 0) {
					tableName_tOracleOutput_1 = ("IP_PATENT_DRAWINGS");
				} else {
					tableName_tOracleOutput_1 = dbschema_tOracleOutput_1 + "." + ("IP_PATENT_DRAWINGS");
				}
				String update_tOracleOutput_1 = "UPDATE " + tableName_tOracleOutput_1
						+ " SET DRAWING_DATA = ?,IMAGE_FORMAT_WCODE = ? WHERE FILE_SEQ = ? AND FILE_TYP = ? AND FILE_SER = ? AND FILE_NBR = ? AND DRAWING_NBR = ?";
				java.sql.PreparedStatement pstmt_tOracleOutput_1 = conn_tOracleOutput_1
						.prepareStatement(update_tOracleOutput_1);
				resourceMap.put("pstmt_tOracleOutput_1", pstmt_tOracleOutput_1);

				/**
				 * [tOracleOutput_1 begin ] stop
				 */

				/**
				 * [tDBOutput_1 begin ] start
				 */

				ok_Hash.put("tDBOutput_1", false);
				start_Hash.put("tDBOutput_1", System.currentTimeMillis());

				currentComponent = "tDBOutput_1";

				if (execStat) {
					runStat.updateStatOnConnection(resourceMap, iterateId, 0, 0, "invalid_images_remove");
				}

				int tos_count_tDBOutput_1 = 0;

				int deleteKeyCount_tDBOutput_1 = 4;
				if (deleteKeyCount_tDBOutput_1 < 1) {
					throw new RuntimeException("For delete, the schema must have a key");
				}
				int nb_line_tDBOutput_1 = 0;
				int nb_line_update_tDBOutput_1 = 0;
				int nb_line_inserted_tDBOutput_1 = 0;
				int nb_line_deleted_tDBOutput_1 = 0;
				int nb_line_rejected_tDBOutput_1 = 0;

				int tmp_batchUpdateCount_tDBOutput_1 = 0;

				int deletedCount_tDBOutput_1 = 0;
				int updatedCount_tDBOutput_1 = 0;
				int insertedCount_tDBOutput_1 = 0;
				int rejectedCount_tDBOutput_1 = 0;

				boolean whetherReject_tDBOutput_1 = false;

				java.sql.Connection conn_tDBOutput_1 = null;

				// optional table
				String dbschema_tDBOutput_1 = null;
				String tableName_tDBOutput_1 = null;
				dbschema_tDBOutput_1 = (String) globalMap.get("dbschema_tOracleConnection_1");

				conn_tDBOutput_1 = (java.sql.Connection) globalMap.get("conn_tOracleConnection_1");
				int count_tDBOutput_1 = 0;

				if (dbschema_tDBOutput_1 == null || dbschema_tDBOutput_1.trim().length() == 0) {
					tableName_tDBOutput_1 = ("IP_PATENT_DRAWINGS");
				} else {
					tableName_tDBOutput_1 = dbschema_tDBOutput_1 + "." + ("IP_PATENT_DRAWINGS");
				}
				String delete_tDBOutput_1 = "DELETE FROM " + tableName_tDBOutput_1
						+ " WHERE FILE_SEQ = ? AND FILE_TYP = ? AND FILE_SER = ? AND FILE_NBR = ?";
				java.sql.PreparedStatement pstmt_tDBOutput_1 = conn_tDBOutput_1.prepareStatement(delete_tDBOutput_1);
				resourceMap.put("pstmt_tDBOutput_1", pstmt_tDBOutput_1);

				/**
				 * [tDBOutput_1 begin ] stop
				 */

				/**
				 * [tMap_1 begin ] start
				 */

				ok_Hash.put("tMap_1", false);
				start_Hash.put("tMap_1", System.currentTimeMillis());

				currentComponent = "tMap_1";

				if (execStat) {
					runStat.updateStatOnConnection(resourceMap, iterateId, 0, 0, "row2");
				}

				int tos_count_tMap_1 = 0;

// ###############################
// # Lookup's keys initialization
// ###############################        

// ###############################
// # Vars initialization
				class Var__tMap_1__Struct {
				}
				Var__tMap_1__Struct Var__tMap_1 = new Var__tMap_1__Struct();
// ###############################

// ###############################
// # Outputs initialization
				updateStruct update_tmp = new updateStruct();
				invalid_images_removeStruct invalid_images_remove_tmp = new invalid_images_removeStruct();
// ###############################

				/**
				 * [tMap_1 begin ] stop
				 */

				/**
				 * [tJavaRow_1 begin ] start
				 */

				ok_Hash.put("tJavaRow_1", false);
				start_Hash.put("tJavaRow_1", System.currentTimeMillis());

				currentComponent = "tJavaRow_1";

				if (execStat) {
					runStat.updateStatOnConnection(resourceMap, iterateId, 0, 0, "row1");
				}

				int tos_count_tJavaRow_1 = 0;

				int nb_line_tJavaRow_1 = 0;

				/**
				 * [tJavaRow_1 begin ] stop
				 */

				/**
				 * [tOracleInput_1 begin ] start
				 */

				ok_Hash.put("tOracleInput_1", false);
				start_Hash.put("tOracleInput_1", System.currentTimeMillis());

				currentComponent = "tOracleInput_1";

				int tos_count_tOracleInput_1 = 0;

				int nb_line_tOracleInput_1 = 0;
				java.sql.Connection conn_tOracleInput_1 = null;
				conn_tOracleInput_1 = (java.sql.Connection) globalMap.get("conn_tOracleConnection_1");

				boolean isTimeZoneNull_tOracleInput_1 = false;
				boolean isConnectionWrapped_tOracleInput_1 = !(conn_tOracleInput_1 instanceof oracle.jdbc.OracleConnection)
						&& conn_tOracleInput_1.isWrapperFor(oracle.jdbc.OracleConnection.class);
				oracle.jdbc.OracleConnection unwrappedOraConn_tOracleInput_1 = null;
				if (isConnectionWrapped_tOracleInput_1) {
					unwrappedOraConn_tOracleInput_1 = conn_tOracleInput_1.unwrap(oracle.jdbc.OracleConnection.class);
					if (unwrappedOraConn_tOracleInput_1 != null) {
						isTimeZoneNull_tOracleInput_1 = (unwrappedOraConn_tOracleInput_1.getSessionTimeZone() == null);
					}
				} else {
					isTimeZoneNull_tOracleInput_1 = (((oracle.jdbc.OracleConnection) conn_tOracleInput_1)
							.getSessionTimeZone() == null);
				}

				if (isTimeZoneNull_tOracleInput_1) {
					java.sql.Statement stmtGetTZ_tOracleInput_1 = conn_tOracleInput_1.createStatement();
					java.sql.ResultSet rsGetTZ_tOracleInput_1 = stmtGetTZ_tOracleInput_1
							.executeQuery("select sessiontimezone from dual");
					String sessionTimezone_tOracleInput_1 = java.util.TimeZone.getDefault().getID();
					while (rsGetTZ_tOracleInput_1.next()) {
						sessionTimezone_tOracleInput_1 = rsGetTZ_tOracleInput_1.getString(1);
					}
					if (isConnectionWrapped_tOracleInput_1 && unwrappedOraConn_tOracleInput_1 != null) {
						unwrappedOraConn_tOracleInput_1.setSessionTimeZone(sessionTimezone_tOracleInput_1);
					} else {
						((oracle.jdbc.OracleConnection) conn_tOracleInput_1)
								.setSessionTimeZone(sessionTimezone_tOracleInput_1);
					}
				}

				java.sql.Statement stmt_tOracleInput_1 = conn_tOracleInput_1.createStatement();

				String dbquery_tOracleInput_1 = "select FILE_SEQ, FILE_TYP, FILE_SER, FILE_NBR, DRAWING_NBR, DRAWING_DATA, IMAGE_FORMAT_WCODE from IP_PATENT_DRAWINGS\nw"
						+ "here DRAWING_DATA is not null AND \nIMAGE_FORMAT_WCODE=2 \n\n/*AND \nFILE_SEQ IN ("
						+ context.FileSeqList + ") AND\nFILE_TYP IN (" + context.FileTypList
						+ ") AND\n(FILE_SER BETWEEN " + context.FileSerMin + " AND " + context.FileSerMax
						+ ") AND\n(FILE_NBR BETWEEN " + context.FileNbrMin + " AND " + context.FileNbrMax
						+ ") */\nORDER BY FILE_SER, FILE_NBR";

				globalMap.put("tOracleInput_1_QUERY", dbquery_tOracleInput_1);
				java.sql.ResultSet rs_tOracleInput_1 = null;

				try {
					rs_tOracleInput_1 = stmt_tOracleInput_1.executeQuery(dbquery_tOracleInput_1);
					java.sql.ResultSetMetaData rsmd_tOracleInput_1 = rs_tOracleInput_1.getMetaData();
					int colQtyInRs_tOracleInput_1 = rsmd_tOracleInput_1.getColumnCount();

					String tmpContent_tOracleInput_1 = null;

					while (rs_tOracleInput_1.next()) {
						nb_line_tOracleInput_1++;

						if (colQtyInRs_tOracleInput_1 < 1) {
							row1.FILE_SEQ = null;
						} else {

							row1.FILE_SEQ = routines.system.JDBCUtil.getString(rs_tOracleInput_1, 1, false);
						}
						if (colQtyInRs_tOracleInput_1 < 2) {
							row1.FILE_TYP = null;
						} else {

							row1.FILE_TYP = routines.system.JDBCUtil.getString(rs_tOracleInput_1, 2, false);
						}
						if (colQtyInRs_tOracleInput_1 < 3) {
							row1.FILE_SER = null;
						} else {

							if (rs_tOracleInput_1.getObject(3) != null) {
								row1.FILE_SER = rs_tOracleInput_1.getBigDecimal(3);
							} else {

								throw new RuntimeException("Null value in non-Nullable column");
							}
						}
						if (colQtyInRs_tOracleInput_1 < 4) {
							row1.FILE_NBR = null;
						} else {

							if (rs_tOracleInput_1.getObject(4) != null) {
								row1.FILE_NBR = rs_tOracleInput_1.getBigDecimal(4);
							} else {

								throw new RuntimeException("Null value in non-Nullable column");
							}
						}
						if (colQtyInRs_tOracleInput_1 < 5) {
							row1.DRAWING_NBR = null;
						} else {

							if (rs_tOracleInput_1.getObject(5) != null) {
								row1.DRAWING_NBR = rs_tOracleInput_1.getBigDecimal(5);
							} else {

								throw new RuntimeException("Null value in non-Nullable column");
							}
						}
						if (colQtyInRs_tOracleInput_1 < 6) {
							row1.DRAWING_DATA = null;
						} else {

							if (rs_tOracleInput_1.getObject(6) != null) {
								row1.DRAWING_DATA = rs_tOracleInput_1.getBytes(6);
							} else {

								row1.DRAWING_DATA = null;
							}
						}

						/**
						 * [tOracleInput_1 begin ] stop
						 */

						/**
						 * [tOracleInput_1 main ] start
						 */

						currentComponent = "tOracleInput_1";

						tos_count_tOracleInput_1++;

						/**
						 * [tOracleInput_1 main ] stop
						 */

						/**
						 * [tOracleInput_1 process_data_begin ] start
						 */

						currentComponent = "tOracleInput_1";

						/**
						 * [tOracleInput_1 process_data_begin ] stop
						 */

						/**
						 * [tJavaRow_1 main ] start
						 */

						currentComponent = "tJavaRow_1";

						if (execStat) {
							runStat.updateStatOnConnection(iterateId, 1, 1

									, "row1"

							);
						}

						// Code generated according to input schema and output schema
						System.out.println("Resizing: " + row1.FILE_SEQ + "/" + row1.FILE_TYP + "/" + row1.FILE_SER
								+ "/" + row1.FILE_NBR + " - Drawing " + row1.DRAWING_NBR);

						row2.FILE_SEQ = row1.FILE_SEQ;
						row2.FILE_TYP = row1.FILE_TYP;
						row2.FILE_SER = row1.FILE_SER;
						row2.FILE_NBR = row1.FILE_NBR;
						row2.DRAWING_NBR = row1.DRAWING_NBR;
						row2.DRAWING_DATA = IPAS.resize(row1.DRAWING_DATA, context.ImageSizeMax);

						nb_line_tJavaRow_1++;

						tos_count_tJavaRow_1++;

						/**
						 * [tJavaRow_1 main ] stop
						 */

						/**
						 * [tJavaRow_1 process_data_begin ] start
						 */

						currentComponent = "tJavaRow_1";

						/**
						 * [tJavaRow_1 process_data_begin ] stop
						 */

						/**
						 * [tMap_1 main ] start
						 */

						currentComponent = "tMap_1";

						if (execStat) {
							runStat.updateStatOnConnection(iterateId, 1, 1

									, "row2"

							);
						}

						boolean hasCasePrimitiveKeyWithNull_tMap_1 = false;

						// ###############################
						// # Input tables (lookups)
						boolean rejectedInnerJoin_tMap_1 = false;
						boolean mainRowRejected_tMap_1 = false;

						// ###############################
						{ // start of Var scope

							// ###############################
							// # Vars tables

							Var__tMap_1__Struct Var = Var__tMap_1;// ###############################
							// ###############################
							// # Output tables

							update = null;
							invalid_images_remove = null;

// # Output table : 'update'
// # Filter conditions 
							if (

							row2.DRAWING_DATA != null

							) {
								update_tmp.FILE_SEQ = row2.FILE_SEQ;
								update_tmp.FILE_TYP = row2.FILE_TYP;
								update_tmp.FILE_SER = row2.FILE_SER;
								update_tmp.FILE_NBR = row2.FILE_NBR;
								update_tmp.DRAWING_NBR = row2.DRAWING_NBR;
								update_tmp.DRAWING_DATA = row2.DRAWING_DATA;
								update_tmp.IMAGE_FORMAT_WCODE = 2;
								update = update_tmp;
							} // closing filter/reject

// # Output table : 'invalid_images_remove'
// # Filter conditions 
							if (

							row2.DRAWING_DATA == null

							) {
								invalid_images_remove_tmp.FILE_SEQ = row2.FILE_SEQ;
								invalid_images_remove_tmp.FILE_TYP = row2.FILE_TYP;
								invalid_images_remove_tmp.FILE_SER = row2.FILE_SER;
								invalid_images_remove_tmp.FILE_NBR = row2.FILE_NBR;
								invalid_images_remove = invalid_images_remove_tmp;
							} // closing filter/reject
// ###############################

						} // end of Var scope

						rejectedInnerJoin_tMap_1 = false;

						tos_count_tMap_1++;

						/**
						 * [tMap_1 main ] stop
						 */

						/**
						 * [tMap_1 process_data_begin ] start
						 */

						currentComponent = "tMap_1";

						/**
						 * [tMap_1 process_data_begin ] stop
						 */
// Start of branch "update"
						if (update != null) {

							/**
							 * [tOracleOutput_1 main ] start
							 */

							currentComponent = "tOracleOutput_1";

							if (execStat) {
								runStat.updateStatOnConnection(iterateId, 1, 1

										, "update"

								);
							}

							whetherReject_tOracleOutput_1 = false;
							if (update.DRAWING_DATA == null) {
								pstmt_tOracleOutput_1.setNull(1, java.sql.Types.ARRAY);
							} else {
								pstmt_tOracleOutput_1.setBinaryStream(1,
										new java.io.ByteArrayInputStream((byte[]) update.DRAWING_DATA),
										((byte[]) update.DRAWING_DATA).length);
							}

							if (update.IMAGE_FORMAT_WCODE == null) {
								pstmt_tOracleOutput_1.setNull(2, java.sql.Types.INTEGER);
							} else {
								pstmt_tOracleOutput_1.setInt(2, update.IMAGE_FORMAT_WCODE);
							}

							if (update.FILE_SEQ == null) {
								pstmt_tOracleOutput_1.setNull(3 + count_tOracleOutput_1, java.sql.Types.VARCHAR);
							} else {
								pstmt_tOracleOutput_1.setString(3 + count_tOracleOutput_1, update.FILE_SEQ);
							}

							if (update.FILE_TYP == null) {
								pstmt_tOracleOutput_1.setNull(4 + count_tOracleOutput_1, java.sql.Types.VARCHAR);
							} else {
								pstmt_tOracleOutput_1.setString(4 + count_tOracleOutput_1, update.FILE_TYP);
							}

							pstmt_tOracleOutput_1.setBigDecimal(5 + count_tOracleOutput_1, update.FILE_SER);

							pstmt_tOracleOutput_1.setBigDecimal(6 + count_tOracleOutput_1, update.FILE_NBR);

							pstmt_tOracleOutput_1.setBigDecimal(7 + count_tOracleOutput_1, update.DRAWING_NBR);

							try {
								nb_line_tOracleOutput_1++;
								updatedCount_tOracleOutput_1 = updatedCount_tOracleOutput_1
										+ pstmt_tOracleOutput_1.executeUpdate();
							} catch (java.lang.Exception e_tOracleOutput_1) {
								whetherReject_tOracleOutput_1 = true;
								throw (e_tOracleOutput_1);
							}

							tos_count_tOracleOutput_1++;

							/**
							 * [tOracleOutput_1 main ] stop
							 */

							/**
							 * [tOracleOutput_1 process_data_begin ] start
							 */

							currentComponent = "tOracleOutput_1";

							/**
							 * [tOracleOutput_1 process_data_begin ] stop
							 */

							/**
							 * [tOracleOutput_1 process_data_end ] start
							 */

							currentComponent = "tOracleOutput_1";

							/**
							 * [tOracleOutput_1 process_data_end ] stop
							 */

						} // End of branch "update"

// Start of branch "invalid_images_remove"
						if (invalid_images_remove != null) {

							/**
							 * [tDBOutput_1 main ] start
							 */

							currentComponent = "tDBOutput_1";

							if (execStat) {
								runStat.updateStatOnConnection(iterateId, 1, 1

										, "invalid_images_remove"

								);
							}

							whetherReject_tDBOutput_1 = false;
							if (invalid_images_remove.FILE_SEQ == null) {
								pstmt_tDBOutput_1.setNull(1, java.sql.Types.VARCHAR);
							} else {
								pstmt_tDBOutput_1.setString(1, invalid_images_remove.FILE_SEQ);
							}

							if (invalid_images_remove.FILE_TYP == null) {
								pstmt_tDBOutput_1.setNull(2, java.sql.Types.VARCHAR);
							} else {
								pstmt_tDBOutput_1.setString(2, invalid_images_remove.FILE_TYP);
							}

							pstmt_tDBOutput_1.setBigDecimal(3, invalid_images_remove.FILE_SER);

							pstmt_tDBOutput_1.setBigDecimal(4, invalid_images_remove.FILE_NBR);

							try {
								deletedCount_tDBOutput_1 = deletedCount_tDBOutput_1 + pstmt_tDBOutput_1.executeUpdate();
								nb_line_tDBOutput_1++;
							} catch (java.lang.Exception e_tDBOutput_1) {
								whetherReject_tDBOutput_1 = true;
								throw (e_tDBOutput_1);
							}

							tos_count_tDBOutput_1++;

							/**
							 * [tDBOutput_1 main ] stop
							 */

							/**
							 * [tDBOutput_1 process_data_begin ] start
							 */

							currentComponent = "tDBOutput_1";

							/**
							 * [tDBOutput_1 process_data_begin ] stop
							 */

							/**
							 * [tDBOutput_1 process_data_end ] start
							 */

							currentComponent = "tDBOutput_1";

							/**
							 * [tDBOutput_1 process_data_end ] stop
							 */

						} // End of branch "invalid_images_remove"

						/**
						 * [tMap_1 process_data_end ] start
						 */

						currentComponent = "tMap_1";

						/**
						 * [tMap_1 process_data_end ] stop
						 */

						/**
						 * [tJavaRow_1 process_data_end ] start
						 */

						currentComponent = "tJavaRow_1";

						/**
						 * [tJavaRow_1 process_data_end ] stop
						 */

						/**
						 * [tOracleInput_1 process_data_end ] start
						 */

						currentComponent = "tOracleInput_1";

						/**
						 * [tOracleInput_1 process_data_end ] stop
						 */

						/**
						 * [tOracleInput_1 end ] start
						 */

						currentComponent = "tOracleInput_1";

					}
				} finally {
					if (rs_tOracleInput_1 != null) {
						rs_tOracleInput_1.close();
					}
					if (stmt_tOracleInput_1 != null) {
						stmt_tOracleInput_1.close();
					}
				}

				globalMap.put("tOracleInput_1_NB_LINE", nb_line_tOracleInput_1);

				ok_Hash.put("tOracleInput_1", true);
				end_Hash.put("tOracleInput_1", System.currentTimeMillis());

				/**
				 * [tOracleInput_1 end ] stop
				 */

				/**
				 * [tJavaRow_1 end ] start
				 */

				currentComponent = "tJavaRow_1";

				globalMap.put("tJavaRow_1_NB_LINE", nb_line_tJavaRow_1);
				if (execStat) {
					runStat.updateStat(resourceMap, iterateId, 2, 0, "row1");
				}

				ok_Hash.put("tJavaRow_1", true);
				end_Hash.put("tJavaRow_1", System.currentTimeMillis());

				/**
				 * [tJavaRow_1 end ] stop
				 */

				/**
				 * [tMap_1 end ] start
				 */

				currentComponent = "tMap_1";

// ###############################
// # Lookup hashes releasing
// ###############################      

				if (execStat) {
					runStat.updateStat(resourceMap, iterateId, 2, 0, "row2");
				}

				ok_Hash.put("tMap_1", true);
				end_Hash.put("tMap_1", System.currentTimeMillis());

				/**
				 * [tMap_1 end ] stop
				 */

				/**
				 * [tOracleOutput_1 end ] start
				 */

				currentComponent = "tOracleOutput_1";

				if (pstmt_tOracleOutput_1 != null) {

					pstmt_tOracleOutput_1.close();
					resourceMap.remove("pstmt_tOracleOutput_1");

				}
				resourceMap.put("statementClosed_tOracleOutput_1", true);

				nb_line_deleted_tOracleOutput_1 = nb_line_deleted_tOracleOutput_1 + deletedCount_tOracleOutput_1;
				nb_line_update_tOracleOutput_1 = nb_line_update_tOracleOutput_1 + updatedCount_tOracleOutput_1;
				nb_line_inserted_tOracleOutput_1 = nb_line_inserted_tOracleOutput_1 + insertedCount_tOracleOutput_1;
				nb_line_rejected_tOracleOutput_1 = nb_line_rejected_tOracleOutput_1 + rejectedCount_tOracleOutput_1;

				globalMap.put("tOracleOutput_1_NB_LINE", nb_line_tOracleOutput_1);
				globalMap.put("tOracleOutput_1_NB_LINE_UPDATED", nb_line_update_tOracleOutput_1);
				globalMap.put("tOracleOutput_1_NB_LINE_INSERTED", nb_line_inserted_tOracleOutput_1);
				globalMap.put("tOracleOutput_1_NB_LINE_DELETED", nb_line_deleted_tOracleOutput_1);
				globalMap.put("tOracleOutput_1_NB_LINE_REJECTED", nb_line_rejected_tOracleOutput_1);

				if (execStat) {
					runStat.updateStat(resourceMap, iterateId, 2, 0, "update");
				}

				ok_Hash.put("tOracleOutput_1", true);
				end_Hash.put("tOracleOutput_1", System.currentTimeMillis());

				/**
				 * [tOracleOutput_1 end ] stop
				 */

				/**
				 * [tDBOutput_1 end ] start
				 */

				currentComponent = "tDBOutput_1";

				if (pstmt_tDBOutput_1 != null) {

					pstmt_tDBOutput_1.close();
					resourceMap.remove("pstmt_tDBOutput_1");

				}
				resourceMap.put("statementClosed_tDBOutput_1", true);

				nb_line_deleted_tDBOutput_1 = nb_line_deleted_tDBOutput_1 + deletedCount_tDBOutput_1;
				nb_line_update_tDBOutput_1 = nb_line_update_tDBOutput_1 + updatedCount_tDBOutput_1;
				nb_line_inserted_tDBOutput_1 = nb_line_inserted_tDBOutput_1 + insertedCount_tDBOutput_1;
				nb_line_rejected_tDBOutput_1 = nb_line_rejected_tDBOutput_1 + rejectedCount_tDBOutput_1;

				globalMap.put("tDBOutput_1_NB_LINE", nb_line_tDBOutput_1);
				globalMap.put("tDBOutput_1_NB_LINE_UPDATED", nb_line_update_tDBOutput_1);
				globalMap.put("tDBOutput_1_NB_LINE_INSERTED", nb_line_inserted_tDBOutput_1);
				globalMap.put("tDBOutput_1_NB_LINE_DELETED", nb_line_deleted_tDBOutput_1);
				globalMap.put("tDBOutput_1_NB_LINE_REJECTED", nb_line_rejected_tDBOutput_1);

				if (execStat) {
					runStat.updateStat(resourceMap, iterateId, 2, 0, "invalid_images_remove");
				}

				ok_Hash.put("tDBOutput_1", true);
				end_Hash.put("tDBOutput_1", System.currentTimeMillis());

				/**
				 * [tDBOutput_1 end ] stop
				 */

			} // end the resume

			if (resumeEntryMethodName == null || globalResumeTicket) {
				resumeUtil.addLog("CHECKPOINT", "CONNECTION:SUBJOB_OK:tOracleInput_1:OnSubjobOk", "",
						Thread.currentThread().getId() + "", "", "", "", "", "");
			}

			if (execStat) {
				runStat.updateStatOnConnection("OnSubjobOk2", 0, "ok");
			}

			tOracleCommit_1Process(globalMap);

		} catch (java.lang.Exception e) {

			TalendException te = new TalendException(e, currentComponent, globalMap);

			throw te;
		} catch (java.lang.Error error) {

			runStat.stopThreadStat();

			throw error;
		} finally {

			try {

				/**
				 * [tOracleInput_1 finally ] start
				 */

				currentComponent = "tOracleInput_1";

				/**
				 * [tOracleInput_1 finally ] stop
				 */

				/**
				 * [tJavaRow_1 finally ] start
				 */

				currentComponent = "tJavaRow_1";

				/**
				 * [tJavaRow_1 finally ] stop
				 */

				/**
				 * [tMap_1 finally ] start
				 */

				currentComponent = "tMap_1";

				/**
				 * [tMap_1 finally ] stop
				 */

				/**
				 * [tOracleOutput_1 finally ] start
				 */

				currentComponent = "tOracleOutput_1";

				if (resourceMap.get("statementClosed_tOracleOutput_1") == null) {
					java.sql.PreparedStatement pstmtToClose_tOracleOutput_1 = null;
					if ((pstmtToClose_tOracleOutput_1 = (java.sql.PreparedStatement) resourceMap
							.remove("pstmt_tOracleOutput_1")) != null) {
						pstmtToClose_tOracleOutput_1.close();
					}
				}

				/**
				 * [tOracleOutput_1 finally ] stop
				 */

				/**
				 * [tDBOutput_1 finally ] start
				 */

				currentComponent = "tDBOutput_1";

				if (resourceMap.get("statementClosed_tDBOutput_1") == null) {
					java.sql.PreparedStatement pstmtToClose_tDBOutput_1 = null;
					if ((pstmtToClose_tDBOutput_1 = (java.sql.PreparedStatement) resourceMap
							.remove("pstmt_tDBOutput_1")) != null) {
						pstmtToClose_tDBOutput_1.close();
					}
				}

				/**
				 * [tDBOutput_1 finally ] stop
				 */

			} catch (java.lang.Exception e) {
				// ignore
			} catch (java.lang.Error error) {
				// ignore
			}
			resourceMap = null;
		}

		globalMap.put("tOracleInput_1_SUBPROCESS_STATE", 1);
	}

	public void tOracleCommit_1Process(final java.util.Map<String, Object> globalMap) throws TalendException {
		globalMap.put("tOracleCommit_1_SUBPROCESS_STATE", 0);

		final boolean execStat = this.execStat;

		String iterateId = "";

		String currentComponent = "";
		java.util.Map<String, Object> resourceMap = new java.util.HashMap<String, Object>();

		try {
			// TDI-39566 avoid throwing an useless Exception
			boolean resumeIt = true;
			if (globalResumeTicket == false && resumeEntryMethodName != null) {
				String currentMethodName = new java.lang.Exception().getStackTrace()[0].getMethodName();
				resumeIt = resumeEntryMethodName.equals(currentMethodName);
			}
			if (resumeIt || globalResumeTicket) { // start the resume
				globalResumeTicket = true;

				/**
				 * [tOracleCommit_1 begin ] start
				 */

				ok_Hash.put("tOracleCommit_1", false);
				start_Hash.put("tOracleCommit_1", System.currentTimeMillis());

				currentComponent = "tOracleCommit_1";

				int tos_count_tOracleCommit_1 = 0;

				/**
				 * [tOracleCommit_1 begin ] stop
				 */

				/**
				 * [tOracleCommit_1 main ] start
				 */

				currentComponent = "tOracleCommit_1";

				java.sql.Connection conn_tOracleCommit_1 = (java.sql.Connection) globalMap
						.get("conn_tOracleConnection_1");

				if (conn_tOracleCommit_1 != null && !conn_tOracleCommit_1.isClosed()) {

					conn_tOracleCommit_1.commit();

				}

				tos_count_tOracleCommit_1++;

				/**
				 * [tOracleCommit_1 main ] stop
				 */

				/**
				 * [tOracleCommit_1 process_data_begin ] start
				 */

				currentComponent = "tOracleCommit_1";

				/**
				 * [tOracleCommit_1 process_data_begin ] stop
				 */

				/**
				 * [tOracleCommit_1 process_data_end ] start
				 */

				currentComponent = "tOracleCommit_1";

				/**
				 * [tOracleCommit_1 process_data_end ] stop
				 */

				/**
				 * [tOracleCommit_1 end ] start
				 */

				currentComponent = "tOracleCommit_1";

				ok_Hash.put("tOracleCommit_1", true);
				end_Hash.put("tOracleCommit_1", System.currentTimeMillis());

				/**
				 * [tOracleCommit_1 end ] stop
				 */
			} // end the resume

		} catch (java.lang.Exception e) {

			TalendException te = new TalendException(e, currentComponent, globalMap);

			throw te;
		} catch (java.lang.Error error) {

			runStat.stopThreadStat();

			throw error;
		} finally {

			try {

				/**
				 * [tOracleCommit_1 finally ] start
				 */

				currentComponent = "tOracleCommit_1";

				/**
				 * [tOracleCommit_1 finally ] stop
				 */
			} catch (java.lang.Exception e) {
				// ignore
			} catch (java.lang.Error error) {
				// ignore
			}
			resourceMap = null;
		}

		globalMap.put("tOracleCommit_1_SUBPROCESS_STATE", 1);
	}

	public String resuming_logs_dir_path = null;
	public String resuming_checkpoint_path = null;
	public String parent_part_launcher = null;
	private String resumeEntryMethodName = null;
	private boolean globalResumeTicket = false;

	public boolean watch = false;
	// portStats is null, it means don't execute the statistics
	public Integer portStats = null;
	public int portTraces = 4334;
	public String clientHost;
	public String defaultClientHost = "localhost";
	public String contextStr = "Default";
	public boolean isDefaultContext = true;
	public String pid = "0";
	public String rootPid = null;
	public String fatherPid = null;
	public String fatherNode = null;
	public long startTime = 0;
	public boolean isChildJob = false;
	public String log4jLevel = "";

	private boolean enableLogStash;

	private boolean execStat = true;

	private ThreadLocal<java.util.Map<String, String>> threadLocal = new ThreadLocal<java.util.Map<String, String>>() {
		protected java.util.Map<String, String> initialValue() {
			java.util.Map<String, String> threadRunResultMap = new java.util.HashMap<String, String>();
			threadRunResultMap.put("errorCode", null);
			threadRunResultMap.put("status", "");
			return threadRunResultMap;
		};
	};

	protected PropertiesWithType context_param = new PropertiesWithType();
	public java.util.Map<String, Object> parentContextMap = new java.util.HashMap<String, Object>();

	public String status = "";

	public static void main(String[] args) {
		final PATENT_DRAWINGS_RESIZE PATENT_DRAWINGS_RESIZEClass = new PATENT_DRAWINGS_RESIZE();

		int exitCode = PATENT_DRAWINGS_RESIZEClass.runJobInTOS(args);

		System.exit(exitCode);
	}

	public String[][] runJob(String[] args) {

		int exitCode = runJobInTOS(args);
		String[][] bufferValue = new String[][] { { Integer.toString(exitCode) } };

		return bufferValue;
	}

	public boolean hastBufferOutputComponent() {
		boolean hastBufferOutput = false;

		return hastBufferOutput;
	}

	public int runJobInTOS(String[] args) {
		// reset status
		status = "";

		String lastStr = "";
		for (String arg : args) {
			if (arg.equalsIgnoreCase("--context_param")) {
				lastStr = arg;
			} else if (lastStr.equals("")) {
				evalParam(arg);
			} else {
				evalParam(lastStr + " " + arg);
				lastStr = "";
			}
		}
		enableLogStash = "true".equalsIgnoreCase(System.getProperty("audit.enabled"));

		if (clientHost == null) {
			clientHost = defaultClientHost;
		}

		if (pid == null || "0".equals(pid)) {
			pid = TalendString.getAsciiRandomString(6);
		}

		if (rootPid == null) {
			rootPid = pid;
		}
		if (fatherPid == null) {
			fatherPid = pid;
		} else {
			isChildJob = true;
		}

		if (portStats != null) {
			// portStats = -1; //for testing
			if (portStats < 0 || portStats > 65535) {
				// issue:10869, the portStats is invalid, so this client socket can't open
				System.err.println("The statistics socket port " + portStats + " is invalid.");
				execStat = false;
			}
		} else {
			execStat = false;
		}

		try {
			// call job/subjob with an existing context, like: --context=production. if
			// without this parameter, there will use the default context instead.
			java.io.InputStream inContext = PATENT_DRAWINGS_RESIZE.class.getClassLoader().getResourceAsStream(
					"wipo_projects/patent_drawings_resize_0_3/contexts/" + contextStr + ".properties");
			if (inContext == null) {
				inContext = PATENT_DRAWINGS_RESIZE.class.getClassLoader()
						.getResourceAsStream("config/contexts/" + contextStr + ".properties");
			}
			if (inContext != null) {
				try {
					// defaultProps is in order to keep the original context value
					if (context != null && context.isEmpty()) {
						defaultProps.load(inContext);
						context = new ContextProperties(defaultProps);
					}
				} finally {
					inContext.close();
				}
			} else if (!isDefaultContext) {
				// print info and job continue to run, for case: context_param is not empty.
				System.err.println("Could not find the context " + contextStr);
			}

			if (!context_param.isEmpty()) {
				context.putAll(context_param);
				// set types for params from parentJobs
				for (Object key : context_param.keySet()) {
					String context_key = key.toString();
					String context_type = context_param.getContextType(context_key);
					context.setContextType(context_key, context_type);

				}
			}
			class ContextProcessing {
				private void processContext_0() {
					context.setContextType("OracleHost", "id_String");
					if (context.getStringValue("OracleHost") == null) {
						context.OracleHost = null;
					} else {
						context.OracleHost = (String) context.getProperty("OracleHost");
					}
					context.setContextType("OraclePort", "id_String");
					if (context.getStringValue("OraclePort") == null) {
						context.OraclePort = null;
					} else {
						context.OraclePort = (String) context.getProperty("OraclePort");
					}
					context.setContextType("OracleDB", "id_String");
					if (context.getStringValue("OracleDB") == null) {
						context.OracleDB = null;
					} else {
						context.OracleDB = (String) context.getProperty("OracleDB");
					}
					context.setContextType("OracleSchema", "id_String");
					if (context.getStringValue("OracleSchema") == null) {
						context.OracleSchema = null;
					} else {
						context.OracleSchema = (String) context.getProperty("OracleSchema");
					}
					context.setContextType("OracleUser", "id_String");
					if (context.getStringValue("OracleUser") == null) {
						context.OracleUser = null;
					} else {
						context.OracleUser = (String) context.getProperty("OracleUser");
					}
					context.setContextType("OraclePassword", "id_String");
					if (context.getStringValue("OraclePassword") == null) {
						context.OraclePassword = null;
					} else {
						context.OraclePassword = (String) context.getProperty("OraclePassword");
					}
					context.setContextType("FileTypList", "id_String");
					if (context.getStringValue("FileTypList") == null) {
						context.FileTypList = null;
					} else {
						context.FileTypList = (String) context.getProperty("FileTypList");
					}
					context.setContextType("FileSeqList", "id_String");
					if (context.getStringValue("FileSeqList") == null) {
						context.FileSeqList = null;
					} else {
						context.FileSeqList = (String) context.getProperty("FileSeqList");
					}
					context.setContextType("FileSerMin", "id_String");
					if (context.getStringValue("FileSerMin") == null) {
						context.FileSerMin = null;
					} else {
						context.FileSerMin = (String) context.getProperty("FileSerMin");
					}
					context.setContextType("FileNbrMin", "id_String");
					if (context.getStringValue("FileNbrMin") == null) {
						context.FileNbrMin = null;
					} else {
						context.FileNbrMin = (String) context.getProperty("FileNbrMin");
					}
					context.setContextType("FileSerMax", "id_String");
					if (context.getStringValue("FileSerMax") == null) {
						context.FileSerMax = null;
					} else {
						context.FileSerMax = (String) context.getProperty("FileSerMax");
					}
					context.setContextType("FileNbrMax", "id_String");
					if (context.getStringValue("FileNbrMax") == null) {
						context.FileNbrMax = null;
					} else {
						context.FileNbrMax = (String) context.getProperty("FileNbrMax");
					}
					context.setContextType("ImageSizeMax", "id_Integer");
					if (context.getStringValue("ImageSizeMax") == null) {
						context.ImageSizeMax = null;
					} else {
						try {
							context.ImageSizeMax = routines.system.ParserUtils
									.parseTo_Integer(context.getProperty("ImageSizeMax"));
						} catch (NumberFormatException e) {
							System.err.println(String.format("Null value will be used for context parameter %s: %s",
									"ImageSizeMax", e.getMessage()));
							context.ImageSizeMax = null;
						}
					}
				}

				public void processAllContext() {
					processContext_0();
				}
			}

			new ContextProcessing().processAllContext();
		} catch (java.io.IOException ie) {
			System.err.println("Could not load context " + contextStr);
			ie.printStackTrace();
		}

		// get context value from parent directly
		if (parentContextMap != null && !parentContextMap.isEmpty()) {
			if (parentContextMap.containsKey("OracleHost")) {
				context.OracleHost = (String) parentContextMap.get("OracleHost");
			}
			if (parentContextMap.containsKey("OraclePort")) {
				context.OraclePort = (String) parentContextMap.get("OraclePort");
			}
			if (parentContextMap.containsKey("OracleDB")) {
				context.OracleDB = (String) parentContextMap.get("OracleDB");
			}
			if (parentContextMap.containsKey("OracleSchema")) {
				context.OracleSchema = (String) parentContextMap.get("OracleSchema");
			}
			if (parentContextMap.containsKey("OracleUser")) {
				context.OracleUser = (String) parentContextMap.get("OracleUser");
			}
			if (parentContextMap.containsKey("OraclePassword")) {
				context.OraclePassword = (String) parentContextMap.get("OraclePassword");
			}
			if (parentContextMap.containsKey("FileTypList")) {
				context.FileTypList = (String) parentContextMap.get("FileTypList");
			}
			if (parentContextMap.containsKey("FileSeqList")) {
				context.FileSeqList = (String) parentContextMap.get("FileSeqList");
			}
			if (parentContextMap.containsKey("FileSerMin")) {
				context.FileSerMin = (String) parentContextMap.get("FileSerMin");
			}
			if (parentContextMap.containsKey("FileNbrMin")) {
				context.FileNbrMin = (String) parentContextMap.get("FileNbrMin");
			}
			if (parentContextMap.containsKey("FileSerMax")) {
				context.FileSerMax = (String) parentContextMap.get("FileSerMax");
			}
			if (parentContextMap.containsKey("FileNbrMax")) {
				context.FileNbrMax = (String) parentContextMap.get("FileNbrMax");
			}
			if (parentContextMap.containsKey("ImageSizeMax")) {
				context.ImageSizeMax = (Integer) parentContextMap.get("ImageSizeMax");
			}
		}

		// Resume: init the resumeUtil
		resumeEntryMethodName = ResumeUtil.getResumeEntryMethodName(resuming_checkpoint_path);
		resumeUtil = new ResumeUtil(resuming_logs_dir_path, isChildJob, rootPid);
		resumeUtil.initCommonInfo(pid, rootPid, fatherPid, projectName, jobName, contextStr, jobVersion);

		List<String> parametersToEncrypt = new java.util.ArrayList<String>();
		// Resume: jobStart
		resumeUtil.addLog("JOB_STARTED", "JOB:" + jobName, parent_part_launcher, Thread.currentThread().getId() + "",
				"", "", "", "", resumeUtil.convertToJsonText(context, parametersToEncrypt));

		if (execStat) {
			try {
				runStat.openSocket(!isChildJob);
				runStat.setAllPID(rootPid, fatherPid, pid, jobName);
				runStat.startThreadStat(clientHost, portStats);
				runStat.updateStatOnJob(RunStat.JOBSTART, fatherNode);
			} catch (java.io.IOException ioException) {
				ioException.printStackTrace();
			}
		}

		java.util.concurrent.ConcurrentHashMap<Object, Object> concurrentHashMap = new java.util.concurrent.ConcurrentHashMap<Object, Object>();
		globalMap.put("concurrentHashMap", concurrentHashMap);

		long startUsedMemory = Runtime.getRuntime().totalMemory() - Runtime.getRuntime().freeMemory();
		long endUsedMemory = 0;
		long end = 0;

		startTime = System.currentTimeMillis();

		this.globalResumeTicket = true;// to run tPreJob

		this.globalResumeTicket = false;// to run others jobs

		try {
			errorCode = null;
			tOracleConnection_1Process(globalMap);
			if (!"failure".equals(status)) {
				status = "end";
			}
		} catch (TalendException e_tOracleConnection_1) {
			globalMap.put("tOracleConnection_1_SUBPROCESS_STATE", -1);

			e_tOracleConnection_1.printStackTrace();

		}

		this.globalResumeTicket = true;// to run tPostJob

		end = System.currentTimeMillis();

		if (watch) {
			System.out.println((end - startTime) + " milliseconds");
		}

		endUsedMemory = Runtime.getRuntime().totalMemory() - Runtime.getRuntime().freeMemory();
		if (false) {
			System.out.println(
					(endUsedMemory - startUsedMemory) + " bytes memory increase when running : PATENT_DRAWINGS_RESIZE");
		}

		if (execStat) {
			runStat.updateStatOnJob(RunStat.JOBEND, fatherNode);
			runStat.stopThreadStat();
		}
		int returnCode = 0;

		if (errorCode == null) {
			returnCode = status != null && status.equals("failure") ? 1 : 0;
		} else {
			returnCode = errorCode.intValue();
		}
		resumeUtil.addLog("JOB_ENDED", "JOB:" + jobName, parent_part_launcher, Thread.currentThread().getId() + "", "",
				"" + returnCode, "", "", "");

		return returnCode;

	}

	// only for OSGi env
	public void destroy() {
		closeSqlDbConnections();

	}

	private void closeSqlDbConnections() {
		try {
			Object obj_conn;
			obj_conn = globalMap.remove("conn_tOracleConnection_1");
			if (null != obj_conn) {
				((java.sql.Connection) obj_conn).close();
			}
		} catch (java.lang.Exception e) {
		}
	}

	private java.util.Map<String, Object> getSharedConnections4REST() {
		java.util.Map<String, Object> connections = new java.util.HashMap<String, Object>();
		connections.put("conn_tOracleConnection_1", globalMap.get("conn_tOracleConnection_1"));

		return connections;
	}

	private void evalParam(String arg) {
		if (arg.startsWith("--resuming_logs_dir_path")) {
			resuming_logs_dir_path = arg.substring(25);
		} else if (arg.startsWith("--resuming_checkpoint_path")) {
			resuming_checkpoint_path = arg.substring(27);
		} else if (arg.startsWith("--parent_part_launcher")) {
			parent_part_launcher = arg.substring(23);
		} else if (arg.startsWith("--watch")) {
			watch = true;
		} else if (arg.startsWith("--stat_port=")) {
			String portStatsStr = arg.substring(12);
			if (portStatsStr != null && !portStatsStr.equals("null")) {
				portStats = Integer.parseInt(portStatsStr);
			}
		} else if (arg.startsWith("--trace_port=")) {
			portTraces = Integer.parseInt(arg.substring(13));
		} else if (arg.startsWith("--client_host=")) {
			clientHost = arg.substring(14);
		} else if (arg.startsWith("--context=")) {
			contextStr = arg.substring(10);
			isDefaultContext = false;
		} else if (arg.startsWith("--father_pid=")) {
			fatherPid = arg.substring(13);
		} else if (arg.startsWith("--root_pid=")) {
			rootPid = arg.substring(11);
		} else if (arg.startsWith("--father_node=")) {
			fatherNode = arg.substring(14);
		} else if (arg.startsWith("--pid=")) {
			pid = arg.substring(6);
		} else if (arg.startsWith("--context_type")) {
			String keyValue = arg.substring(15);
			int index = -1;
			if (keyValue != null && (index = keyValue.indexOf('=')) > -1) {
				if (fatherPid == null) {
					context_param.setContextType(keyValue.substring(0, index),
							replaceEscapeChars(keyValue.substring(index + 1)));
				} else { // the subjob won't escape the especial chars
					context_param.setContextType(keyValue.substring(0, index), keyValue.substring(index + 1));
				}

			}

		} else if (arg.startsWith("--context_param")) {
			String keyValue = arg.substring(16);
			int index = -1;
			if (keyValue != null && (index = keyValue.indexOf('=')) > -1) {
				if (fatherPid == null) {
					context_param.put(keyValue.substring(0, index), replaceEscapeChars(keyValue.substring(index + 1)));
				} else { // the subjob won't escape the especial chars
					context_param.put(keyValue.substring(0, index), keyValue.substring(index + 1));
				}
			}
		} else if (arg.startsWith("--log4jLevel=")) {
			log4jLevel = arg.substring(13);
		} else if (arg.startsWith("--audit.enabled") && arg.contains("=")) {// for trunjob call
			final int equal = arg.indexOf('=');
			final String key = arg.substring("--".length(), equal);
			System.setProperty(key, arg.substring(equal + 1));
		}
	}

	private static final String NULL_VALUE_EXPRESSION_IN_COMMAND_STRING_FOR_CHILD_JOB_ONLY = "<TALEND_NULL>";

	private final String[][] escapeChars = { { "\\\\", "\\" }, { "\\n", "\n" }, { "\\'", "\'" }, { "\\r", "\r" },
			{ "\\f", "\f" }, { "\\b", "\b" }, { "\\t", "\t" } };

	private String replaceEscapeChars(String keyValue) {

		if (keyValue == null || ("").equals(keyValue.trim())) {
			return keyValue;
		}

		StringBuilder result = new StringBuilder();
		int currIndex = 0;
		while (currIndex < keyValue.length()) {
			int index = -1;
			// judege if the left string includes escape chars
			for (String[] strArray : escapeChars) {
				index = keyValue.indexOf(strArray[0], currIndex);
				if (index >= 0) {

					result.append(keyValue.substring(currIndex, index + strArray[0].length()).replace(strArray[0],
							strArray[1]));
					currIndex = index + strArray[0].length();
					break;
				}
			}
			// if the left string doesn't include escape chars, append the left into the
			// result
			if (index < 0) {
				result.append(keyValue.substring(currIndex));
				currIndex = currIndex + keyValue.length();
			}
		}

		return result.toString();
	}

	public Integer getErrorCode() {
		return errorCode;
	}

	public String getStatus() {
		return status;
	}

	ResumeUtil resumeUtil = null;
}
/************************************************************************************************
 * 94964 characters generated by Talend Open Studio for Data Integration on the
 * February 4, 2021 at 8:40:38 AM CET
 ************************************************************************************************/